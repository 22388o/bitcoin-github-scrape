[
  {
    "sha": "c64fb2381fcbea8e43eee77ebbe56426c39f31d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjRmYjIzODFmY2JlYThlNDNlZWU3N2ViYmU1NjQyNmMzOWYzMWQ2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-02T18:35:29Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-02T21:27:58Z"
      },
      "message": "validation: Combine all 3 block-invalidation logics into one function",
      "tree": {
        "sha": "22d4bdc3d8088c22f119f7148fe9bde94fe1564f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22d4bdc3d8088c22f119f7148fe9bde94fe1564f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c64fb2381fcbea8e43eee77ebbe56426c39f31d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c64fb2381fcbea8e43eee77ebbe56426c39f31d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c64fb2381fcbea8e43eee77ebbe56426c39f31d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c64fb2381fcbea8e43eee77ebbe56426c39f31d6/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "329fc1dce7a1c372c8b10c2f2f8732b2c60daff0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/329fc1dce7a1c372c8b10c2f2f8732b2c60daff0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/329fc1dce7a1c372c8b10c2f2f8732b2c60daff0"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 41,
      "deletions": 32
    },
    "files": [
      {
        "sha": "5998da8472e0a744dbf34ecfbc780c7ea74d2152",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 32,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c64fb2381fcbea8e43eee77ebbe56426c39f31d6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c64fb2381fcbea8e43eee77ebbe56426c39f31d6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c64fb2381fcbea8e43eee77ebbe56426c39f31d6",
        "patch": "@@ -1102,12 +1102,11 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n     CheckForkWarningConditions();\n }\n \n-void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n+void static InvalidBlockFound(CBlockIndex * const pindex, const CValidationState &state) {\n     if (!state.CorruptionPossible()) {\n-        pindex->nStatus |= BLOCK_FAILED_VALID;\n-        setDirtyBlockIndex.insert(pindex);\n-        setBlockIndexCandidates.erase(pindex);\n-        InvalidChainFound(pindex);\n+        CValidationState dummy_state;  // Output from InvalidateBlock\n+        bool success = InvalidateBlock(dummy_state, Params(), pindex);\n+        assert(success);\n     }\n }\n \n@@ -2385,38 +2384,48 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n     setDirtyBlockIndex.insert(pindex);\n     setBlockIndexCandidates.erase(pindex);\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n-        CBlockIndex *pindexWalk = chainActive.Tip();\n-        pindexWalk->nStatus |= BLOCK_FAILED_CHILD;\n-        setDirtyBlockIndex.insert(pindexWalk);\n-        setBlockIndexCandidates.erase(pindexWalk);\n-        // ActivateBestChain considers blocks already in chainActive\n-        // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n-            // It's probably hopeless to try to make the mempool consistent\n-            // here if DisconnectTip failed, but we can try.\n-            UpdateMempoolForReorg(disconnectpool, false);\n-            return false;\n+    const bool need_reorg = chainActive.Contains(pindex);\n+\n+    if (need_reorg) {\n+        DisconnectedBlockTransactions disconnectpool;\n+        while (chainActive.Contains(pindex)) {\n+            CBlockIndex *pindexWalk = chainActive.Tip();\n+            pindexWalk->nStatus |= BLOCK_FAILED_CHILD;\n+            setDirtyBlockIndex.insert(pindexWalk);\n+            setBlockIndexCandidates.erase(pindexWalk);\n+            // ActivateBestChain considers blocks already in chainActive\n+            // unconditionally valid already, so force disconnect away from it.\n+            if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n+                // It's probably hopeless to try to make the mempool consistent\n+                // here if DisconnectTip failed, but we can try.\n+                UpdateMempoolForReorg(disconnectpool, false);\n+                return false;\n+            }\n         }\n-    }\n \n-    // DisconnectTip will add transactions to disconnectpool; try to add these\n-    // back to the mempool.\n-    UpdateMempoolForReorg(disconnectpool, true);\n+        // DisconnectTip will add transactions to disconnectpool; try to add these\n+        // back to the mempool.\n+        UpdateMempoolForReorg(disconnectpool, true);\n \n-    // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n-    // add it again.\n-    BlockMap::iterator it = mapBlockIndex.begin();\n-    while (it != mapBlockIndex.end()) {\n-        if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n-            setBlockIndexCandidates.insert(it->second);\n+        // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n+        // add it again.\n+        BlockMap::iterator it = mapBlockIndex.begin();\n+        while (it != mapBlockIndex.end()) {\n+            if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n+                setBlockIndexCandidates.insert(it->second);\n+            }\n+            it++;\n         }\n-        it++;\n     }\n \n     InvalidChainFound(pindex);\n-    uiInterface.NotifyBlockTip(IsInitialBlockDownload(), pindex->pprev);\n+\n+    if (need_reorg) {\n+        uiInterface.NotifyBlockTip(IsInitialBlockDownload(), pindex->pprev);\n+\n+        ActivateBestChain(state, Params());\n+    }\n+\n     return true;\n }\n \n@@ -2995,8 +3004,8 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     if (!CheckBlock(block, state, chainparams.GetConsensus()) ||\n         !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n-            pindex->nStatus |= BLOCK_FAILED_VALID;\n-            setDirtyBlockIndex.insert(pindex);\n+            CValidationState dummy_state;  // Output from InvalidateBlock\n+            InvalidateBlock(dummy_state, chainparams, pindex);\n         }\n         return error(\"%s: %s\", __func__, FormatStateMessage(state));\n     }"
      }
    ]
  },
  {
    "sha": "de5f9fb34813fc9b05bed91e59cc745d392723bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTVmOWZiMzQ4MTNmYzliMDViZWQ5MWU1OWNjNzQ1ZDM5MjcyM2Jj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-02T19:06:43Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-02T22:01:09Z"
      },
      "message": "Bugfix: Exclude known-invalid blocks from pindexBestHeader",
      "tree": {
        "sha": "c6a022d8882dfea9da7e9cb2901d71a7c6128448",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6a022d8882dfea9da7e9cb2901d71a7c6128448"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de5f9fb34813fc9b05bed91e59cc745d392723bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de5f9fb34813fc9b05bed91e59cc745d392723bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de5f9fb34813fc9b05bed91e59cc745d392723bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de5f9fb34813fc9b05bed91e59cc745d392723bc/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c64fb2381fcbea8e43eee77ebbe56426c39f31d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c64fb2381fcbea8e43eee77ebbe56426c39f31d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c64fb2381fcbea8e43eee77ebbe56426c39f31d6"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e1503446443eb1a92437645c67af123f04831663",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de5f9fb34813fc9b05bed91e59cc745d392723bc/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de5f9fb34813fc9b05bed91e59cc745d392723bc/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=de5f9fb34813fc9b05bed91e59cc745d392723bc",
        "patch": "@@ -2385,8 +2385,10 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n     setBlockIndexCandidates.erase(pindex);\n \n     const bool need_reorg = chainActive.Contains(pindex);\n+    bool need_new_best_header = (pindex == pindexBestHeader);\n \n     if (need_reorg) {\n+        need_new_best_header |= (chainActive.Tip() == pindexBestHeader);\n         DisconnectedBlockTransactions disconnectpool;\n         while (chainActive.Contains(pindex)) {\n             CBlockIndex *pindexWalk = chainActive.Tip();\n@@ -2406,16 +2408,23 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n         // DisconnectTip will add transactions to disconnectpool; try to add these\n         // back to the mempool.\n         UpdateMempoolForReorg(disconnectpool, true);\n+    }\n \n+    if (need_reorg || need_new_best_header) {\n+        CBlockIndex *new_best_header = chainActive.Tip();\n         // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n         // add it again.\n         BlockMap::iterator it = mapBlockIndex.begin();\n         while (it != mapBlockIndex.end()) {\n             if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n                 setBlockIndexCandidates.insert(it->second);\n             }\n+            if (it->second->IsValid(BLOCK_VALID_TREE) && CBlockIndexWorkComparator()(pindexBestHeader, it->second)) {\n+                new_best_header = it->second;\n+            }\n             it++;\n         }\n+        pindexBestHeader = new_best_header;\n     }\n \n     InvalidChainFound(pindex);"
      }
    ]
  },
  {
    "sha": "7a73c44d172d303e672cac4ce21551550360210d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTczYzQ0ZDE3MmQzMDNlNjcyY2FjNGNlMjE1NTE1NTAzNjAyMTBk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-05-31T18:57:35Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-02T22:01:19Z"
      },
      "message": "Bugfix: Do not DoS-ban for invalid prev block, since old nodes may forward such in the event of a softfork",
      "tree": {
        "sha": "730e83b948bb79e92a8442976b9d91dfca5e15d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/730e83b948bb79e92a8442976b9d91dfca5e15d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a73c44d172d303e672cac4ce21551550360210d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a73c44d172d303e672cac4ce21551550360210d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a73c44d172d303e672cac4ce21551550360210d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a73c44d172d303e672cac4ce21551550360210d/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de5f9fb34813fc9b05bed91e59cc745d392723bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de5f9fb34813fc9b05bed91e59cc745d392723bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de5f9fb34813fc9b05bed91e59cc745d392723bc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e3d2c2e84a3630162c7f6e8d1e8e2536a40a3857",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a73c44d172d303e672cac4ce21551550360210d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a73c44d172d303e672cac4ce21551550360210d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7a73c44d172d303e672cac4ce21551550360210d",
        "patch": "@@ -2930,7 +2930,7 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return state.DoS(10, error(\"%s: prev block not found\", __func__), 0, \"prev-blk-not-found\");\n         pindexPrev = (*mi).second;\n         if (pindexPrev->nStatus & BLOCK_FAILED_MASK)\n-            return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n+            return state.DoS(0, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n \n         assert(pindexPrev);\n         if (fCheckpointsEnabled && !CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, hash))"
      }
    ]
  },
  {
    "sha": "d8bab24adffa1e28d3671a7f3e802686b1673dd6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGJhYjI0YWRmZmExZTI4ZDM2NzFhN2YzZTgwMjY4NmIxNjczZGQ2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-02T16:47:28Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-02T22:01:24Z"
      },
      "message": "Bugfix: Don't ban peers just because they have header chains we consider invalid",
      "tree": {
        "sha": "a31357d8e443b1bbd0ded8b6f41c9908d91fda9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a31357d8e443b1bbd0ded8b6f41c9908d91fda9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8bab24adffa1e28d3671a7f3e802686b1673dd6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8bab24adffa1e28d3671a7f3e802686b1673dd6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8bab24adffa1e28d3671a7f3e802686b1673dd6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8bab24adffa1e28d3671a7f3e802686b1673dd6/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a73c44d172d303e672cac4ce21551550360210d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a73c44d172d303e672cac4ce21551550360210d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a73c44d172d303e672cac4ce21551550360210d"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 13,
      "deletions": 17
    },
    "files": [
      {
        "sha": "2907e7e4e5678320deaf8a850f062c656d57688e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 14,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8bab24adffa1e28d3671a7f3e802686b1673dd6/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8bab24adffa1e28d3671a7f3e802686b1673dd6/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d8bab24adffa1e28d3671a7f3e802686b1673dd6",
        "patch": "@@ -2259,12 +2259,23 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         LOCK(cs_main);\n         CNodeState *nodestate = State(pfrom->GetId());\n \n+        uint256 hashLastBlock;\n+        for (const CBlockHeader& header : headers) {\n+            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+                Misbehaving(pfrom->GetId(), 20);\n+                return error(\"non-continuous headers sequence\");\n+            }\n+            hashLastBlock = header.GetHash();\n+            if (!CheckProofOfWork(header.GetHash(), header.nBits, chainparams.GetConsensus())) {\n+                Misbehaving(pfrom->GetId(), 50);\n+                return error(\"proof of work failed\");\n+            }\n+        }\n+\n         // If this looks like it could be a block announcement (nCount <\n         // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n         // don't connect:\n         // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n         // - Once a headers message is received that is valid and does connect,\n         //   nUnconnectingHeaders gets reset back to 0.\n         if (mapBlockIndex.find(headers[0].hashPrevBlock) == mapBlockIndex.end() && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n@@ -2280,20 +2291,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we can use this peer to download.\n             UpdateBlockAvailability(pfrom->GetId(), headers.back().GetHash());\n \n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(pfrom->GetId(), 20);\n-            }\n             return true;\n         }\n-\n-        uint256 hashLastBlock;\n-        for (const CBlockHeader& header : headers) {\n-            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n-                Misbehaving(pfrom->GetId(), 20);\n-                return error(\"non-continuous headers sequence\");\n-            }\n-            hashLastBlock = header.GetHash();\n-        }\n         }\n \n         CValidationState state;"
      },
      {
        "sha": "904b4ecfe48ca76c39239451faaff51ab1ced5e0",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8bab24adffa1e28d3671a7f3e802686b1673dd6/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8bab24adffa1e28d3671a7f3e802686b1673dd6/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=d8bab24adffa1e28d3671a7f3e802686b1673dd6",
        "patch": "@@ -144,9 +144,6 @@ static const bool DEFAULT_FEEFILTER = true;\n /** Maximum number of headers to announce when relaying blocks with headers message.*/\n static const unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;\n \n-/** Maximum number of unconnecting headers announcements before DoS score */\n-static const int MAX_UNCONNECTING_HEADERS = 10;\n-\n static const bool DEFAULT_PEERBLOOMFILTERS = true;\n \n /** Default for -stopatheight */"
      }
    ]
  },
  {
    "sha": "6b85ced4496a7a672e2115a40d9ebcc03c0e0232",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Yjg1Y2VkNDQ5NmE3YTY3MmUyMTE1YTQwZDllYmNjMDNjMGUwMjMy",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-02T21:07:55Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-12T22:15:52Z"
      },
      "message": "Require outbound non-feeler connections use the same tip block as us",
      "tree": {
        "sha": "1843f2261080bbed32fc28f3048b70a0276e5aad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1843f2261080bbed32fc28f3048b70a0276e5aad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b85ced4496a7a672e2115a40d9ebcc03c0e0232",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b85ced4496a7a672e2115a40d9ebcc03c0e0232",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b85ced4496a7a672e2115a40d9ebcc03c0e0232",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b85ced4496a7a672e2115a40d9ebcc03c0e0232/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8bab24adffa1e28d3671a7f3e802686b1673dd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8bab24adffa1e28d3671a7f3e802686b1673dd6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8bab24adffa1e28d3671a7f3e802686b1673dd6"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 69,
      "deletions": 1
    },
    "files": [
      {
        "sha": "27f3344ea7f1c4b4c1b14cd386c19c0b62744a7a",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b85ced4496a7a672e2115a40d9ebcc03c0e0232/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b85ced4496a7a672e2115a40d9ebcc03c0e0232/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=6b85ced4496a7a672e2115a40d9ebcc03c0e0232",
        "patch": "@@ -357,6 +357,11 @@ class CBlockIndex\n     //! Efficiently find an ancestor of this block.\n     CBlockIndex* GetAncestor(int height);\n     const CBlockIndex* GetAncestor(int height) const;\n+\n+    /** (Somewhat) efficiently check whether a block is present in this chain. */\n+    const bool Contains(const CBlockIndex * const needle) const {\n+        return (GetAncestor(needle->nHeight) == needle);\n+    }\n };\n \n arith_uint256 GetBlockProof(const CBlockIndex& block);"
      },
      {
        "sha": "45d78cdbfa8c420482cccab288cc0ef8a8cbc20d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b85ced4496a7a672e2115a40d9ebcc03c0e0232/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b85ced4496a7a672e2115a40d9ebcc03c0e0232/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6b85ced4496a7a672e2115a40d9ebcc03c0e0232",
        "patch": "@@ -804,6 +804,18 @@ class CNode\n         return nLocalServices;\n     }\n \n+    bool RequireMatchingTip() const\n+    {\n+        return !(fInbound || fFeeler);\n+    }\n+\n+    void TipDoesntMatch()\n+    {\n+        if (RequireMatchingTip()) {\n+            fDisconnect = true;\n+        }\n+    }\n+\n     std::string GetAddrName() const;\n     //! Sets the addrName only if it was not previously set\n     void MaybeSetAddrName(const std::string& addrNameIn);"
      },
      {
        "sha": "9e3cc64a94a17dbcc2bb82fd7471916616930b64",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 1,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b85ced4496a7a672e2115a40d9ebcc03c0e0232/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b85ced4496a7a672e2115a40d9ebcc03c0e0232/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6b85ced4496a7a672e2115a40d9ebcc03c0e0232",
        "patch": "@@ -219,6 +219,16 @@ struct CNodeState {\n         fWantsCmpctWitness = false;\n         fSupportsDesiredCmpctVersion = false;\n     }\n+\n+    uint256 CurrentBlockHash() const {\n+        if (!hashLastUnknownBlock.IsNull()) {\n+            return hashLastUnknownBlock;\n+        }\n+        if (pindexBestKnownBlock) {\n+            return pindexBestKnownBlock->GetBlockHash();\n+        }\n+        return uint256();\n+    }\n };\n \n /** Map maintaining per-node state. Requires cs_main. */\n@@ -1187,6 +1197,31 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n+static bool AllowAsMatchingPeerTip(const CBlockIndex * const blockindex)\n+{\n+    return blockindex && (chainActive.Contains(blockindex) || pindexBestHeader->Contains(blockindex));\n+}\n+\n+static void NetAfterProcessNewBlock(CConnman& connman, const uint256& blockhash)\n+{\n+    auto blockindex_it = mapBlockIndex.find(blockhash);\n+    if (blockindex_it != mapBlockIndex.end() && AllowAsMatchingPeerTip(blockindex_it->second)) {\n+        // Block is valid and part of either our main chain or our best-header chain\n+        return;\n+    }\n+\n+    // Disconnect any require-matching-tip peers that have this block as their tip\n+    connman.ForEachNode([blockhash](CNode* node) {\n+        CNodeState *nodestate = State(node->GetId());\n+        if (!node->RequireMatchingTip()) {\n+            return;\n+        }\n+        if (nodestate->CurrentBlockHash() != blockhash) {\n+            node->fDisconnect = true;\n+        }\n+    });\n+}\n+\n bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n@@ -1566,6 +1601,9 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n             if (inv.type == MSG_BLOCK) {\n                 UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n+                if (fAlreadyHave && !AllowAsMatchingPeerTip(mapBlockIndex[inv.hash])) {\n+                    pfrom->TipDoesntMatch();\n+                }\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n                     // We used to request the full block here, but since headers-announcements are now the\n                     // primary method of announcement on the network, and since, in the case that a node\n@@ -1994,6 +2032,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     Misbehaving(pfrom->GetId(), nDoS);\n                 }\n                 LogPrintf(\"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId());\n+                pfrom->TipDoesntMatch();\n                 return true;\n             }\n         }\n@@ -2024,8 +2063,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator blockInFlightIt = mapBlocksInFlight.find(pindex->GetBlockHash());\n         bool fAlreadyInFlight = blockInFlightIt != mapBlocksInFlight.end();\n \n-        if (pindex->nStatus & BLOCK_HAVE_DATA) // Nothing to do here\n+        if (pindex->nStatus & BLOCK_HAVE_DATA) {\n+            if (!AllowAsMatchingPeerTip(pindex)) {\n+                pfrom->TipDoesntMatch();\n+            }\n             return true;\n+        }\n \n         if (pindex->nChainWork <= chainActive.Tip()->nChainWork || // We know something better\n                 pindex->nTx != 0) { // We had this block at some point, but pruned it\n@@ -2151,6 +2194,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             ProcessNewBlock(chainparams, pblock, true, &fNewBlock);\n             if (fNewBlock)\n                 pfrom->nLastBlockTime = GetTime();\n+            NetAfterProcessNewBlock(connman, pblock->GetHash());\n \n             LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n             if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n@@ -2228,6 +2272,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             ProcessNewBlock(chainparams, pblock, true, &fNewBlock);\n             if (fNewBlock)\n                 pfrom->nLastBlockTime = GetTime();\n+            NetAfterProcessNewBlock(connman, pblock->GetHash());\n         }\n     }\n \n@@ -2291,6 +2336,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we can use this peer to download.\n             UpdateBlockAvailability(pfrom->GetId(), headers.back().GetHash());\n \n+            pfrom->TipDoesntMatch();\n+\n             return true;\n         }\n         }\n@@ -2317,6 +2364,9 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         assert(pindexLast);\n         UpdateBlockAvailability(pfrom->GetId(), pindexLast->GetBlockHash());\n+        if (!AllowAsMatchingPeerTip(pindexLast)) {\n+            pfrom->TipDoesntMatch();\n+        }\n \n         if (nCount == MAX_HEADERS_RESULTS) {\n             // Headers message had its maximum size; the peer may have more headers.\n@@ -2406,6 +2456,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n         if (fNewBlock)\n             pfrom->nLastBlockTime = GetTime();\n+        NetAfterProcessNewBlock(connman, pblock->GetHash());\n     }\n \n "
      }
    ]
  },
  {
    "sha": "0d5d631270b0c9597c637f0a8ad322820c7ad7f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDVkNjMxMjcwYjBjOTU5N2M2MzdmMGE4YWQzMjI4MjBjN2FkN2Y2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-02T21:20:35Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-12T23:01:12Z"
      },
      "message": "If an outbound-and-not-feeler peer rejects a block we send them, they presumably are on a different tip, and therefore we disconnect them",
      "tree": {
        "sha": "8543dec5cc20db26722cb5e9c64307d76c26bce0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8543dec5cc20db26722cb5e9c64307d76c26bce0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d5d631270b0c9597c637f0a8ad322820c7ad7f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d5d631270b0c9597c637f0a8ad322820c7ad7f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d5d631270b0c9597c637f0a8ad322820c7ad7f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d5d631270b0c9597c637f0a8ad322820c7ad7f6/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b85ced4496a7a672e2115a40d9ebcc03c0e0232",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b85ced4496a7a672e2115a40d9ebcc03c0e0232",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b85ced4496a7a672e2115a40d9ebcc03c0e0232"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 17,
      "deletions": 11
    },
    "files": [
      {
        "sha": "bd8b91743a5fbead2d244fdbe5ff2af425bf3192",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 11,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d5d631270b0c9597c637f0a8ad322820c7ad7f6/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d5d631270b0c9597c637f0a8ad322820c7ad7f6/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=0d5d631270b0c9597c637f0a8ad322820c7ad7f6",
        "patch": "@@ -1248,25 +1248,31 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n     if (strCommand == NetMsgType::REJECT)\n     {\n-        if (LogAcceptCategory(BCLog::NET)) {\n-            try {\n-                std::string strMsg; unsigned char ccode; std::string strReason;\n-                vRecv >> LIMITED_STRING(strMsg, CMessageHeader::COMMAND_SIZE) >> ccode >> LIMITED_STRING(strReason, MAX_REJECT_MESSAGE_LENGTH);\n+        try {\n+            std::string strMsg; unsigned char ccode; std::string strReason;\n+            vRecv >> LIMITED_STRING(strMsg, CMessageHeader::COMMAND_SIZE) >> ccode >> LIMITED_STRING(strReason, MAX_REJECT_MESSAGE_LENGTH);\n \n+            uint256 hash;\n+            if (strMsg == NetMsgType::BLOCK || strMsg == NetMsgType::TX) {\n+                vRecv >> hash;\n+\n+                if (strMsg == NetMsgType::BLOCK) {\n+                    pfrom->TipDoesntMatch();\n+                }\n+            }\n+\n+            if (LogAcceptCategory(BCLog::NET)) {\n                 std::ostringstream ss;\n                 ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n \n-                if (strMsg == NetMsgType::BLOCK || strMsg == NetMsgType::TX)\n-                {\n-                    uint256 hash;\n-                    vRecv >> hash;\n+                if (!hash.IsNull()) {\n                     ss << \": hash \" << hash.ToString();\n                 }\n                 LogPrint(BCLog::NET, \"Reject %s\\n\", SanitizeString(ss.str()));\n-            } catch (const std::ios_base::failure&) {\n-                // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n-                LogPrint(BCLog::NET, \"Unparseable reject message received\\n\");\n             }\n+        } catch (const std::ios_base::failure&) {\n+            // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n+            LogPrint(BCLog::NET, \"Unparseable reject message received\\n\");\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "39ce020c2f1cd8b2714115e62da63c37d929789f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOWNlMDIwYzJmMWNkOGIyNzE0MTE1ZTYyZGE2M2MzN2Q5Mjk3ODlm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-08T09:18:22Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-12T23:01:12Z"
      },
      "message": "net: Log unmatching-tip disconnections",
      "tree": {
        "sha": "f8c2ce5828c50b07508a4027e051b6fc45d36b16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8c2ce5828c50b07508a4027e051b6fc45d36b16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39ce020c2f1cd8b2714115e62da63c37d929789f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39ce020c2f1cd8b2714115e62da63c37d929789f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39ce020c2f1cd8b2714115e62da63c37d929789f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39ce020c2f1cd8b2714115e62da63c37d929789f/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d5d631270b0c9597c637f0a8ad322820c7ad7f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d5d631270b0c9597c637f0a8ad322820c7ad7f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d5d631270b0c9597c637f0a8ad322820c7ad7f6"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 18,
      "deletions": 13
    },
    "files": [
      {
        "sha": "92b16ba2f4ea44243277d687f10ba85565cafc6a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39ce020c2f1cd8b2714115e62da63c37d929789f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39ce020c2f1cd8b2714115e62da63c37d929789f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=39ce020c2f1cd8b2714115e62da63c37d929789f",
        "patch": "@@ -686,6 +686,16 @@ void CNode::copyStats(CNodeStats &stats)\n }\n #undef X\n \n+void CNode::TipDoesntMatch(const std::string& msg)\n+{\n+    if (RequireMatchingTip()) {\n+        LogPrint(BCLog::NET, \"%s; disconnecting\\n\", msg);\n+        fDisconnect = true;\n+    } else {\n+        LogPrint(BCLog::NET, \"%s (tolerating)\\n\", msg);\n+    }\n+}\n+\n bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete)\n {\n     complete = false;"
      },
      {
        "sha": "c95089a346206334f02a1e13b0a4ba4ca3282e2e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39ce020c2f1cd8b2714115e62da63c37d929789f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39ce020c2f1cd8b2714115e62da63c37d929789f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=39ce020c2f1cd8b2714115e62da63c37d929789f",
        "patch": "@@ -809,12 +809,7 @@ class CNode\n         return !(fInbound || fFeeler);\n     }\n \n-    void TipDoesntMatch()\n-    {\n-        if (RequireMatchingTip()) {\n-            fDisconnect = true;\n-        }\n-    }\n+    void TipDoesntMatch(const std::string& msg);\n \n     std::string GetAddrName() const;\n     //! Sets the addrName only if it was not previously set"
      },
      {
        "sha": "6399b1adb1338dbe72d1130357e34393d1a8aa9f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39ce020c2f1cd8b2714115e62da63c37d929789f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39ce020c2f1cd8b2714115e62da63c37d929789f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=39ce020c2f1cd8b2714115e62da63c37d929789f",
        "patch": "@@ -1217,6 +1217,7 @@ static void NetAfterProcessNewBlock(CConnman& connman, const uint256& blockhash)\n             return;\n         }\n         if (nodestate->CurrentBlockHash() != blockhash) {\n+            LogPrint(BCLog::NET, \"peer=%d has %s as its best block (NetAfterProcessNewBlock), which is unreasonable; disconnecting\\n\", node->GetId(), blockhash.ToString());\n             node->fDisconnect = true;\n         }\n     });\n@@ -1257,7 +1258,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 vRecv >> hash;\n \n                 if (strMsg == NetMsgType::BLOCK) {\n-                    pfrom->TipDoesntMatch();\n+                    pfrom->TipDoesntMatch(strprintf(\"peer=%d rejected valid block %s\", pfrom->GetId(), hash.ToString()));\n                 }\n             }\n \n@@ -1608,7 +1609,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             if (inv.type == MSG_BLOCK) {\n                 UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n                 if (fAlreadyHave && !AllowAsMatchingPeerTip(mapBlockIndex[inv.hash])) {\n-                    pfrom->TipDoesntMatch();\n+                    pfrom->TipDoesntMatch(strprintf(\"peer=%d has %s as its best block (inv), which is unreasonable\", pfrom->GetId(), inv.hash.ToString()));\n                 }\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n                     // We used to request the full block here, but since headers-announcements are now the\n@@ -2037,8 +2038,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     LOCK(cs_main);\n                     Misbehaving(pfrom->GetId(), nDoS);\n                 }\n-                LogPrintf(\"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId());\n-                pfrom->TipDoesntMatch();\n+                pfrom->TipDoesntMatch(strprintf(\"peer=%d sent us invalid header via cmpctblock\", pfrom->GetId()));\n                 return true;\n             }\n         }\n@@ -2071,7 +2071,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         if (pindex->nStatus & BLOCK_HAVE_DATA) {\n             if (!AllowAsMatchingPeerTip(pindex)) {\n-                pfrom->TipDoesntMatch();\n+                pfrom->TipDoesntMatch(strprintf(\"peer=%d has %s as its best block (cmpctblock), which is unreasonable\", pfrom->GetId(), pindex->GetBlockHash().ToString()));\n             }\n             return true;\n         }\n@@ -2342,7 +2342,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we can use this peer to download.\n             UpdateBlockAvailability(pfrom->GetId(), headers.back().GetHash());\n \n-            pfrom->TipDoesntMatch();\n+            pfrom->TipDoesntMatch(strprintf(\"peer=%d sent unconnectable headers based on %s\", pfrom->GetId(), headers[0].hashPrevBlock.ToString()));\n \n             return true;\n         }\n@@ -2371,7 +2371,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         assert(pindexLast);\n         UpdateBlockAvailability(pfrom->GetId(), pindexLast->GetBlockHash());\n         if (!AllowAsMatchingPeerTip(pindexLast)) {\n-            pfrom->TipDoesntMatch();\n+            pfrom->TipDoesntMatch(strprintf(\"peer=%d has %s as its best block (headers), which is unreasonable\", pfrom->GetId(), pindexLast->GetBlockHash().ToString()));\n         }\n \n         if (nCount == MAX_HEADERS_RESULTS) {"
      }
    ]
  },
  {
    "sha": "4c322c89640b18bbe826e2f155c6208dcc5a17f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzMyMmM4OTY0MGIxOGJiZTgyNmUyZjE1NWM2MjA4ZGNjNWExN2Y1",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-08T09:18:42Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-06-12T23:01:12Z"
      },
      "message": "net: Tolerate unmatching tips on whitelisted and addnode'd peers",
      "tree": {
        "sha": "4e522751fad24ef6b91834964860b9ca81c9480d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e522751fad24ef6b91834964860b9ca81c9480d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c322c89640b18bbe826e2f155c6208dcc5a17f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c322c89640b18bbe826e2f155c6208dcc5a17f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c322c89640b18bbe826e2f155c6208dcc5a17f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c322c89640b18bbe826e2f155c6208dcc5a17f5/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "39ce020c2f1cd8b2714115e62da63c37d929789f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39ce020c2f1cd8b2714115e62da63c37d929789f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39ce020c2f1cd8b2714115e62da63c37d929789f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cad7b59e584bd1dee6f4dc6f62ccc13b15b0e91d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c322c89640b18bbe826e2f155c6208dcc5a17f5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c322c89640b18bbe826e2f155c6208dcc5a17f5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=4c322c89640b18bbe826e2f155c6208dcc5a17f5",
        "patch": "@@ -806,7 +806,7 @@ class CNode\n \n     bool RequireMatchingTip() const\n     {\n-        return !(fInbound || fFeeler);\n+        return !(fInbound || fFeeler || fWhitelisted || fAddnode);\n     }\n \n     void TipDoesntMatch(const std::string& msg);"
      }
    ]
  }
]