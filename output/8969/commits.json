[
  {
    "sha": "65f35eb91b4ad11c96703150b202c1e9b9d12266",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWYzNWViOTFiNGFkMTFjOTY3MDMxNTBiMjAyYzFlOWI5ZDEyMjY2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-03T14:06:10Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-31T14:08:11Z"
      },
      "message": "Move FlushStateToDisk call out of ProcessMessages::TX into ATMP",
      "tree": {
        "sha": "821aa64a87939a5148af46e0e4944ff2e47f77ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/821aa64a87939a5148af46e0e4944ff2e47f77ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65f35eb91b4ad11c96703150b202c1e9b9d12266",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f35eb91b4ad11c96703150b202c1e9b9d12266",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65f35eb91b4ad11c96703150b202c1e9b9d12266",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f35eb91b4ad11c96703150b202c1e9b9d12266/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83234d4d1723e4f207a20f1abbe9432566a7d5ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83234d4d1723e4f207a20f1abbe9432566a7d5ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83234d4d1723e4f207a20f1abbe9432566a7d5ee"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "83e85f3d244bb4dadd964e13e6c1b4580f96f7f6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f35eb91b4ad11c96703150b202c1e9b9d12266/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f35eb91b4ad11c96703150b202c1e9b9d12266/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=65f35eb91b4ad11c96703150b202c1e9b9d12266",
        "patch": "@@ -691,6 +691,16 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n CCoinsViewCache *pcoinsTip = NULL;\n CBlockTreeDB *pblocktree = NULL;\n \n+enum FlushStateMode {\n+    FLUSH_STATE_NONE,\n+    FLUSH_STATE_IF_NEEDED,\n+    FLUSH_STATE_PERIODIC,\n+    FLUSH_STATE_ALWAYS\n+};\n+\n+// See definition for documentation\n+bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode);\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // mapOrphanTransactions\n@@ -1581,6 +1591,9 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         BOOST_FOREACH(const uint256& hashTx, vHashTxToUncache)\n             pcoinsTip->Uncache(hashTx);\n     }\n+    // After we've (potentially) uncached entries, ensure our coins cache is still within its size limits\n+    CValidationState stateDummy;\n+    FlushStateToDisk(stateDummy, FLUSH_STATE_PERIODIC);\n     return res;\n }\n \n@@ -2558,13 +2571,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     return true;\n }\n \n-enum FlushStateMode {\n-    FLUSH_STATE_NONE,\n-    FLUSH_STATE_IF_NEEDED,\n-    FLUSH_STATE_PERIODIC,\n-    FLUSH_STATE_ALWAYS\n-};\n-\n /**\n  * Update the on-disk chain state.\n  * The caches and indexes are flushed depending on the mode we're called with\n@@ -5684,7 +5690,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 Misbehaving(pfrom->GetId(), nDoS);\n             }\n         }\n-        FlushStateToDisk(state, FLUSH_STATE_PERIODIC);\n     }\n \n "
      }
    ]
  },
  {
    "sha": "fc0c24f67b4323f215f908767b644bf022c7fe9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzBjMjRmNjdiNDMyM2YyMTVmOTA4NzY3YjY0NGJmMDIyYzdmZTlh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-02T03:44:40Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-31T14:08:11Z"
      },
      "message": "Move MarkBlockAsReceived out of ProcessNewMessage",
      "tree": {
        "sha": "bb7b01de28fb19765ed8db0f66a601fcf4333d55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb7b01de28fb19765ed8db0f66a601fcf4333d55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc0c24f67b4323f215f908767b644bf022c7fe9a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc0c24f67b4323f215f908767b644bf022c7fe9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc0c24f67b4323f215f908767b644bf022c7fe9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc0c24f67b4323f215f908767b644bf022c7fe9a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65f35eb91b4ad11c96703150b202c1e9b9d12266",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f35eb91b4ad11c96703150b202c1e9b9d12266",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65f35eb91b4ad11c96703150b202c1e9b9d12266"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 18,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c6b82bf82512d4c4aaa8f9a2acab883f8ff982ca",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 5,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc0c24f67b4323f215f908767b644bf022c7fe9a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc0c24f67b4323f215f908767b644bf022c7fe9a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fc0c24f67b4323f215f908767b644bf022c7fe9a",
        "patch": "@@ -3702,6 +3702,11 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     // not process unrequested blocks.\n     bool fTooFarAhead = (pindex->nHeight > int(chainActive.Height() + MIN_BLOCKS_TO_KEEP));\n \n+    // TODO: Decouple this function from the block download logic by removing fRequested\n+    // This requires some new chain datastructure to efficiently look up if a\n+    // block is in a chain leading to a candidate for best tip, despite not\n+    // being such a candidate itself.\n+\n     // TODO: deal better with return value and error conditions for duplicate\n     // and unrequested blocks.\n     if (fAlreadyHave) return true;\n@@ -3750,13 +3755,11 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, C\n {\n     {\n         LOCK(cs_main);\n-        bool fRequested = MarkBlockAsReceived(pblock->GetHash());\n-        fRequested |= fForceProcessing;\n \n         // Store to disk\n         CBlockIndex *pindex = NULL;\n         bool fNewBlock = false;\n-        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fRequested, dbp, &fNewBlock);\n+        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fForceProcessing, dbp, &fNewBlock);\n         if (pindex && pfrom) {\n             mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n             if (fNewBlock) pfrom->nLastBlockTime = GetTime();\n@@ -5858,12 +5861,16 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 std::vector<CInv> invs;\n                 invs.push_back(CInv(MSG_BLOCK | GetFetchFlags(pfrom, chainActive.Tip(), chainparams.GetConsensus()), resp.blockhash));\n                 pfrom->PushMessage(NetMsgType::GETDATA, invs);\n-            } else\n+            } else {\n+                MarkBlockAsReceived(resp.blockhash); // it is now an empty pointer\n                 fBlockRead = true;\n+            }\n         } // Don't hold cs_main when we call into ProcessNewBlock\n         if (fBlockRead) {\n             CValidationState state;\n-            ProcessNewBlock(state, chainparams, pfrom, &block, false, NULL);\n+            // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n+            // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n+            ProcessNewBlock(state, chainparams, pfrom, &block, true, NULL);\n             int nDoS;\n             if (state.IsInvalid(nDoS)) {\n                 assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n@@ -6039,6 +6046,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Such an unrequested block may still be processed, subject to the\n         // conditions in AcceptBlock().\n         bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n+        {\n+            LOCK(cs_main);\n+            // Also always process if we requested the block explicitly, as we may\n+            // need it even though it is not a candidate for a new best tip.\n+            forceProcessing |= MarkBlockAsReceived(block.GetHash());\n+        }\n         ProcessNewBlock(state, chainparams, pfrom, &block, forceProcessing, NULL);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {"
      }
    ]
  },
  {
    "sha": "d6ea737be19a0001e69e4e854eb1cef21523ea7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmVhNzM3YmUxOWEwMDAxZTY5ZTRlODU0ZWIxY2VmMjE1MjNlYTdh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-02T15:29:35Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-31T14:08:11Z"
      },
      "message": "Remove network state wipe from UnloadBlockIndex.\n\nUnloadBlockIndex is only used during init if we end up reindexing\nto clear our block state so that we can start over. However, at\nthat time no connections have been brought up as CConnman hasn't\nbeen started yet, so all of the network processing state logic is\nempty when its called.\n\nAdditionally, the initialization of the recentRejects set is moved\nto InitPeerLogic.",
      "tree": {
        "sha": "ef4b8d18a8c604db15a33314aead7f4c5e4ab583",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef4b8d18a8c604db15a33314aead7f4c5e4ab583"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6ea737be19a0001e69e4e854eb1cef21523ea7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6ea737be19a0001e69e4e854eb1cef21523ea7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6ea737be19a0001e69e4e854eb1cef21523ea7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6ea737be19a0001e69e4e854eb1cef21523ea7a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc0c24f67b4323f215f908767b644bf022c7fe9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc0c24f67b4323f215f908767b644bf022c7fe9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc0c24f67b4323f215f908767b644bf022c7fe9a"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 13,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0f42d907b9b4a4062c2a45024f4011750df83173",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6ea737be19a0001e69e4e854eb1cef21523ea7a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6ea737be19a0001e69e4e854eb1cef21523ea7a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d6ea737be19a0001e69e4e854eb1cef21523ea7a",
        "patch": "@@ -1100,6 +1100,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         return false;\n #endif\n     // ********************************************************* Step 6: network initialization\n+    // Note that we absolutely cannot open any actual connections\n+    // until the very end (\"start node\") as the UTXO/block state\n+    // is not yet setup and may end up being set up twice if we\n+    // need to reindex later.\n \n     assert(!g_connman);\n     g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));"
      },
      {
        "sha": "5be97d586749f811a8fc4065acf2022767498a5e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6ea737be19a0001e69e4e854eb1cef21523ea7a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6ea737be19a0001e69e4e854eb1cef21523ea7a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d6ea737be19a0001e69e4e854eb1cef21523ea7a",
        "patch": "@@ -4272,6 +4272,9 @@ bool RewindBlockIndex(const CChainParams& params)\n     return true;\n }\n \n+// May NOT be used after any connections are up as much\n+// of the peer-processing logic assumes a consistent\n+// block index state\n void UnloadBlockIndex()\n {\n     LOCK(cs_main);\n@@ -4282,18 +4285,12 @@ void UnloadBlockIndex()\n     mempool.clear();\n     mapOrphanTransactions.clear();\n     mapOrphanTransactionsByPrev.clear();\n-    nSyncStarted = 0;\n     mapBlocksUnlinked.clear();\n     vinfoBlockFile.clear();\n     nLastBlockFile = 0;\n     nBlockSequenceId = 1;\n-    mapBlockSource.clear();\n-    mapBlocksInFlight.clear();\n-    nPreferredDownload = 0;\n     setDirtyBlockIndex.clear();\n     setDirtyFileInfo.clear();\n-    mapNodeState.clear();\n-    recentRejects.reset(NULL);\n     versionbitscache.Clear();\n     for (int b = 0; b < VERSIONBITS_NUM_BITS; b++) {\n         warningcache[b].clear();\n@@ -4318,9 +4315,6 @@ bool InitBlockIndex(const CChainParams& chainparams)\n {\n     LOCK(cs_main);\n \n-    // Initialize global variables that cannot be constructed at startup.\n-    recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n-\n     // Check whether we're already initialized\n     if (chainActive.Genesis() != NULL)\n         return true;\n@@ -4709,6 +4703,11 @@ std::string GetWarnings(const std::string& strFor)\n // blockchain -> download logic notification\n //\n \n+PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn) : connman(connmanIn) {\n+    // Initialize global variables that cannot be constructed at startup.\n+    recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n+}\n+\n void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     const int nNewHeight = pindexNew->nHeight;\n     connman->SetBestHeight(nNewHeight);"
      },
      {
        "sha": "3cab1e6afae0ee1aba8b8ff6961f79c598b9955a",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6ea737be19a0001e69e4e854eb1cef21523ea7a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6ea737be19a0001e69e4e854eb1cef21523ea7a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d6ea737be19a0001e69e4e854eb1cef21523ea7a",
        "patch": "@@ -542,7 +542,7 @@ class PeerLogicValidation : public CValidationInterface {\n     CConnman* connman;\n \n public:\n-    PeerLogicValidation(CConnman* connmanIn) : connman(connmanIn) {}\n+    PeerLogicValidation(CConnman* connmanIn);\n \n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n     virtual void BlockChecked(const CBlock& block, const CValidationState& state);"
      }
    ]
  },
  {
    "sha": "d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODY3MGZiMTAzZjk1ZTZkYzZmNDY5ZDcxYzllZTRmNmZmMjQwN2Uw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-02T16:45:24Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-31T14:08:11Z"
      },
      "message": "Move all calls to CheckBlockIndex out of net-processing logic\n\nThis will result in many more calls to CheckBlockIndex when\nconnecting a list of headers (eg in ::HEADERS messages processing)\nbut its only enabled in debug mode, and that should mostly just be\nduring IBD, so it should be OK.",
      "tree": {
        "sha": "41a155b5e470350114936ca609f2d61e09bfc36d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41a155b5e470350114936ca609f2d61e09bfc36d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6ea737be19a0001e69e4e854eb1cef21523ea7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6ea737be19a0001e69e4e854eb1cef21523ea7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6ea737be19a0001e69e4e854eb1cef21523ea7a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b99515a656352c1f27fb156c9aee157c591e174c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0",
        "patch": "@@ -3675,6 +3675,8 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n     if (ppindex)\n         *ppindex = pindex;\n \n+    CheckBlockIndex(chainparams.GetConsensus());\n+\n     return true;\n }\n \n@@ -5827,8 +5829,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 return ProcessMessage(pfrom, NetMsgType::HEADERS, vHeadersMsg, nTimeReceived, chainparams, connman);\n             }\n         }\n-\n-        CheckBlockIndex(chainparams.GetConsensus());\n     }\n \n     else if (strCommand == NetMsgType::BLOCKTXN && !fImporting && !fReindex) // Ignore blocks received while importing\n@@ -6025,8 +6025,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 }\n             }\n         }\n-\n-        CheckBlockIndex(chainparams.GetConsensus());\n         }\n \n         NotifyHeaderTip();"
      }
    ]
  },
  {
    "sha": "f5b960be4e9a9ab669e1436194fa904ccba58900",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWI5NjBiZTRlOWE5YWI2NjllMTQzNjE5NGZhOTA0Y2NiYTU4OTAw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-06T18:11:45Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-31T14:08:11Z"
      },
      "message": "Move nTimeBestReceived updating into net processing code",
      "tree": {
        "sha": "e5e1a7a0a87f56ec26ed8c24a3f325efce259a42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5e1a7a0a87f56ec26ed8c24a3f325efce259a42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5b960be4e9a9ab669e1436194fa904ccba58900",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5b960be4e9a9ab669e1436194fa904ccba58900",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5b960be4e9a9ab669e1436194fa904ccba58900",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5b960be4e9a9ab669e1436194fa904ccba58900/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8232b0f74b3b4e61cce51ebd4561ad9ef2f0d113",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5b960be4e9a9ab669e1436194fa904ccba58900/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5b960be4e9a9ab669e1436194fa904ccba58900/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f5b960be4e9a9ab669e1436194fa904ccba58900",
        "patch": "@@ -63,7 +63,7 @@ CCriticalSection cs_main;\n BlockMap mapBlockIndex;\n CChain chainActive;\n CBlockIndex *pindexBestHeader = NULL;\n-int64_t nTimeBestReceived = 0;\n+int64_t nTimeBestReceived = 0; // Used only to inform the wallet of when we last received a block\n CWaitableCriticalSection csBestBlock;\n CConditionVariable cvBlockChange;\n int nScriptCheckThreads = 0;\n@@ -2690,7 +2690,6 @@ void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n     chainActive.SetTip(pindexNew);\n \n     // New best block\n-    nTimeBestReceived = GetTime();\n     mempool.AddTransactionsUpdated(1);\n \n     cvBlockChange.notify_all();\n@@ -4736,6 +4735,8 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n             }\n         });\n     }\n+\n+    nTimeBestReceived = GetTime();\n }\n \n void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationState& state) {"
      }
    ]
  }
]