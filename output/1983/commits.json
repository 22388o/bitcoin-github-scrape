[
  {
    "sha": "4ba9b0603e235c2579622e3fc4d554da8507f345",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YmE5YjA2MDNlMjM1YzI1Nzk2MjJlM2ZjNGQ1NTRkYTg1MDdmMzQ1",
    "commit": {
      "author": {
        "name": "kjj2",
        "email": "github@jerviss.org",
        "date": "2012-11-04T22:28:23Z"
      },
      "committer": {
        "name": "kjj2",
        "email": "github@jerviss.org",
        "date": "2012-11-05T00:13:58Z"
      },
      "message": "Normalize wallet RPC commands (refillkeypool, unlockwallet, lockwallet, setpassphrase)",
      "tree": {
        "sha": "124c63b91302192d4b84c5aa6decf46f870d1b3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/124c63b91302192d4b84c5aa6decf46f870d1b3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ba9b0603e235c2579622e3fc4d554da8507f345",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ba9b0603e235c2579622e3fc4d554da8507f345",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ba9b0603e235c2579622e3fc4d554da8507f345",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ba9b0603e235c2579622e3fc4d554da8507f345/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "a56d3f8a10e3c9f844aee1f362635ae14b872023",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a56d3f8a10e3c9f844aee1f362635ae14b872023",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a56d3f8a10e3c9f844aee1f362635ae14b872023"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 31,
      "deletions": 27
    },
    "files": [
      {
        "sha": "955410a285273ccb7eee85c8e9c2a207ab64cdb9",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ba9b0603e235c2579622e3fc4d554da8507f345/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ba9b0603e235c2579622e3fc4d554da8507f345/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=4ba9b0603e235c2579622e3fc4d554da8507f345",
        "patch": "@@ -223,10 +223,14 @@ static const CRPCCommand vRPCCommands[] =\n     { \"listreceivedbyaddress\",  &listreceivedbyaddress,  false,  false },\n     { \"listreceivedbyaccount\",  &listreceivedbyaccount,  false,  false },\n     { \"backupwallet\",           &backupwallet,           true,   false },\n-    { \"keypoolrefill\",          &keypoolrefill,          true,   false },\n-    { \"walletpassphrase\",       &walletpassphrase,       true,   false },\n-    { \"walletpassphrasechange\", &walletpassphrasechange, false,  false },\n-    { \"walletlock\",             &walletlock,             true,   false },\n+    { \"keypoolrefill\",          &refillkeypool,          true,   false },  // deprecated\n+    { \"refillkeypool\",          &refillkeypool,          true,   false },\n+    { \"walletpassphrase\",       &unlockwallet,           true,   false },  // deprecated\n+    { \"unlockwallet\",           &unlockwallet,           true,   false },\n+    { \"walletpassphrasechange\", &setpassphrase,          false,  false },  // deprecated\n+    { \"setpassphrase\",          &setpassphrase,          false,  false },\n+    { \"walletlock\",             &lockwallet,             true,   false },  // deprecated\n+    { \"lockwallet\",             &lockwallet,             true,   false },\n     { \"encryptwallet\",          &encryptwallet,          false,  false },\n     { \"validateaddress\",        &validateaddress,        true,   false },\n     { \"getbalance\",             &getbalance,             false,  false },"
      },
      {
        "sha": "cffb21afdc16f86cb92624a09e92069ff09ed50c",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ba9b0603e235c2579622e3fc4d554da8507f345/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ba9b0603e235c2579622e3fc4d554da8507f345/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=4ba9b0603e235c2579622e3fc4d554da8507f345",
        "patch": "@@ -167,10 +167,10 @@ extern json_spirit::Value listaccounts(const json_spirit::Array& params, bool fH\n extern json_spirit::Value listsinceblock(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value gettransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value backupwallet(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value keypoolrefill(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value walletpassphrase(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value walletpassphrasechange(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value walletlock(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value refillkeypool(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value unlockwallet(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value setpassphrase(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value lockwallet(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value encryptwallet(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value validateaddress(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getinfo(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "a81b3e3ada4379b54843f0840cd04b28f392dee1",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ba9b0603e235c2579622e3fc4d554da8507f345/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ba9b0603e235c2579622e3fc4d554da8507f345/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=4ba9b0603e235c2579622e3fc4d554da8507f345",
        "patch": "@@ -18,14 +18,14 @@ static CCriticalSection cs_nWalletUnlockTime;\n std::string HelpRequiringPassphrase()\n {\n     return pwalletMain->IsCrypted()\n-        ? \"\\nrequires wallet passphrase to be set with walletpassphrase first\"\n+        ? \"\\nrequires wallet passphrase to be set with unlockwallet first\"\n         : \"\";\n }\n \n void EnsureWalletIsUnlocked()\n {\n     if (pwalletMain->IsLocked())\n-        throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n+        throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with unlockwallet first.\");\n }\n \n void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n@@ -106,7 +106,7 @@ Value getnewaddress(const Array& params, bool fHelp)\n     // Generate a new key that is added to wallet\n     CPubKey newKey;\n     if (!pwalletMain->GetKeyFromPool(newKey, false))\n-        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call refillkeypool first\");\n     CKeyID keyID = newKey.GetID();\n \n     pwalletMain->SetAddressBookName(keyID, strAccount);\n@@ -144,7 +144,7 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     if (!account.vchPubKey.IsValid() || bForceNew || bKeyUsed)\n     {\n         if (!pwalletMain->GetKeyFromPool(account.vchPubKey, false))\n-            throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+            throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call refillkeypool first\");\n \n         pwalletMain->SetAddressBookName(account.vchPubKey.GetID(), strAccount);\n         walletdb.WriteAccount(strAccount, account);\n@@ -265,7 +265,7 @@ Value sendtoaddress(const Array& params, bool fHelp)\n         wtx.mapValue[\"to\"]      = params[3].get_str();\n \n     if (pwalletMain->IsLocked())\n-        throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n+        throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with unlockwallet first.\");\n \n     string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx);\n     if (strError != \"\")\n@@ -1234,11 +1234,11 @@ Value backupwallet(const Array& params, bool fHelp)\n }\n \n \n-Value keypoolrefill(const Array& params, bool fHelp)\n+Value refillkeypool(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 0)\n         throw runtime_error(\n-            \"keypoolrefill\\n\"\n+            \"refillkeypool\\n\"\n             \"Fills the keypool.\"\n             + HelpRequiringPassphrase());\n \n@@ -1305,16 +1305,16 @@ void ThreadCleanWalletPassphrase(void* parg)\n     delete (int64*)parg;\n }\n \n-Value walletpassphrase(const Array& params, bool fHelp)\n+Value unlockwallet(const Array& params, bool fHelp)\n {\n     if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n         throw runtime_error(\n-            \"walletpassphrase <passphrase> <timeout>\\n\"\n+            \"unlockwallet <passphrase> <timeout>\\n\"\n             \"Stores the wallet decryption key in memory for <timeout> seconds.\");\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n-        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n+        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but unlockwallet was called.\");\n \n     if (!pwalletMain->IsLocked())\n         throw JSONRPCError(RPC_WALLET_ALREADY_UNLOCKED, \"Error: Wallet is already unlocked.\");\n@@ -1333,7 +1333,7 @@ Value walletpassphrase(const Array& params, bool fHelp)\n     }\n     else\n         throw runtime_error(\n-            \"walletpassphrase <passphrase> <timeout>\\n\"\n+            \"unlockwallet <passphrase> <timeout>\\n\"\n             \"Stores the wallet decryption key in memory for <timeout> seconds.\");\n \n     NewThread(ThreadTopUpKeyPool, NULL);\n@@ -1344,16 +1344,16 @@ Value walletpassphrase(const Array& params, bool fHelp)\n }\n \n \n-Value walletpassphrasechange(const Array& params, bool fHelp)\n+Value setpassphrase(const Array& params, bool fHelp)\n {\n     if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n         throw runtime_error(\n-            \"walletpassphrasechange <oldpassphrase> <newpassphrase>\\n\"\n+            \"setpassphrase <oldpassphrase> <newpassphrase>\\n\"\n             \"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\");\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n-        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrasechange was called.\");\n+        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but setpassphrase was called.\");\n \n     // TODO: get rid of these .c_str() calls by implementing SecureString::operator=(std::string)\n     // Alternately, find a way to make params[0] mlock()'d to begin with.\n@@ -1367,7 +1367,7 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n \n     if (strOldWalletPass.length() < 1 || strNewWalletPass.length() < 1)\n         throw runtime_error(\n-            \"walletpassphrasechange <oldpassphrase> <newpassphrase>\\n\"\n+            \"setpassphrase <oldpassphrase> <newpassphrase>\\n\"\n             \"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\");\n \n     if (!pwalletMain->ChangeWalletPassphrase(strOldWalletPass, strNewWalletPass))\n@@ -1377,18 +1377,18 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n }\n \n \n-Value walletlock(const Array& params, bool fHelp)\n+Value lockwallet(const Array& params, bool fHelp)\n {\n     if (pwalletMain->IsCrypted() && (fHelp || params.size() != 0))\n         throw runtime_error(\n-            \"walletlock\\n\"\n+            \"lockwallet\\n\"\n             \"Removes the wallet encryption key from memory, locking the wallet.\\n\"\n-            \"After calling this method, you will need to call walletpassphrase again\\n\"\n+            \"After calling this method, you will need to call unlockwallet again\\n\"\n             \"before being able to call any methods which require the wallet to be unlocked.\");\n     if (fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n-        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletlock was called.\");\n+        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but lockwallet was called.\");\n \n     {\n         LOCK(cs_nWalletUnlockTime);"
      }
    ]
  }
]