[
  {
    "sha": "2d1fa42e85c9164688aa69b3f54f015fbefc06aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDFmYTQyZTg1YzkxNjQ2ODhhYTY5YjNmNTRmMDE1ZmJlZmMwNmFh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-01-11T00:47:57Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieterw@google.com",
        "date": "2013-01-18T13:39:11Z"
      },
      "message": "Add optional transaction index to databases\n\nBy specifying -txindex when initializing the database, a txid-to-diskpos\nindex is maintained in the blktree database. This database is used to\nhelp answering getrawtransaction() RPC queries, when enabled.\n\nChanging the -txindex value requires a -reindex; the client will abort\nat startup if the database and the specified -txindex mismatch.",
      "tree": {
        "sha": "d24823340b02d7e00af350b4592325414d5940f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d24823340b02d7e00af350b4592325414d5940f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d1fa42e85c9164688aa69b3f54f015fbefc06aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d1fa42e85c9164688aa69b3f54f015fbefc06aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d1fa42e85c9164688aa69b3f54f015fbefc06aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d1fa42e85c9164688aa69b3f54f015fbefc06aa/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": null,
    "parents": [
      {
        "sha": "2c7847349d5d4b1f3e8480c5137c2e8f3e2a5f5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c7847349d5d4b1f3e8480c5137c2e8f3e2a5f5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c7847349d5d4b1f3e8480c5137c2e8f3e2a5f5c"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 94,
      "deletions": 7
    },
    "files": [
      {
        "sha": "69ca4785c1bba30e4cb3372fff65a0e78f776507",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d1fa42e85c9164688aa69b3f54f015fbefc06aa/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d1fa42e85c9164688aa69b3f54f015fbefc06aa/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2d1fa42e85c9164688aa69b3f54f015fbefc06aa",
        "patch": "@@ -305,6 +305,7 @@ std::string HelpMessage()\n         \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \"\\n\" +\n         \"  -checkblocks=<n>       \" + _(\"How many blocks to check at startup (default: 2500, 0 = all)\") + \"\\n\" +\n         \"  -checklevel=<n>        \" + _(\"How thorough the block verification is (0-4, default: 3)\") + \"\\n\" +\n+        \"  -txindex               \" + _(\"Maintain a full transaction index (default: 0)\") + \"\\n\" +\n         \"  -loadblock=<file>      \" + _(\"Imports blocks from external blk000??.dat file\") + \"\\n\" +\n         \"  -reindex               \" + _(\"Rebuild blockchain index from current blk000??.dat files\") + \"\\n\" +\n         \"  -par=N                 \" + _(\"Set the number of script verification threads (1-16, 0=auto, default: 0)\") + \"\\n\" +\n@@ -781,7 +782,7 @@ bool AppInit2()\n     if (nTotalCache < (1 << 22))\n         nTotalCache = (1 << 22); // total cache cannot be less than 4 MiB\n     size_t nBlockTreeDBCache = nTotalCache / 8;\n-    if (nBlockTreeDBCache > (1 << 21))\n+    if (nBlockTreeDBCache > (1 << 21) && !GetBoolArg(\"-txindex\", false))\n         nBlockTreeDBCache = (1 << 21); // block tree db cache shouldn't be larger than 2 MiB\n     nTotalCache -= nBlockTreeDBCache;\n     size_t nCoinDBCache = nTotalCache / 2; // use half of the remaining cache for coindb cache\n@@ -806,6 +807,9 @@ bool AppInit2()\n     if (!VerifyDB())\n         return InitError(_(\"Corrupted block database detected. Please restart the client with -reindex.\"));\n \n+    if (mapArgs.count(\"-txindex\") && fTxIndex != GetBoolArg(\"-txindex\", false))\n+        return InitError(_(\"You need to rebuild the databases using -reindex to change -txindex\"));\n+\n     // as LoadBlockIndex can take several minutes, it's possible the user\n     // requested to kill bitcoin-qt during the last operation. If so, exit.\n     // As the program has not fully started yet, Shutdown() is possibly overkill."
      },
      {
        "sha": "46ed6c56a5eaf771e44301d6493ed9363f8981c8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 4,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d1fa42e85c9164688aa69b3f54f015fbefc06aa/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d1fa42e85c9164688aa69b3f54f015fbefc06aa/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2d1fa42e85c9164688aa69b3f54f015fbefc06aa",
        "patch": "@@ -45,6 +45,7 @@ int nScriptCheckThreads = 0;\n bool fImporting = false;\n bool fReindex = false;\n bool fBenchmark = false;\n+bool fTxIndex = false;\n unsigned int nCoinCacheSize = 5000;\n \n CMedianFilter<int> cPeerBlockCounts(8, 0); // Amount of blocks that other nodes claim to have\n@@ -949,6 +950,25 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n             }\n         }\n \n+        if (fTxIndex) {\n+            CDiskTxPos postx;\n+            if (pblocktree->ReadTxIndex(hash, postx)) {\n+                CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n+                CBlockHeader header;\n+                try {\n+                    file >> header;\n+                    fseek(file, postx.nTxOffset, SEEK_CUR);\n+                    file >> txOut;\n+                } catch (std::exception &e) {\n+                    return error(\"%s() : deserialize or I/O error\", __PRETTY_FUNCTION__);\n+                }\n+                hashBlock = header.GetHash();\n+                if (txOut.GetHash() != hash)\n+                    return error(\"%s() : txid mismatch\", __PRETTY_FUNCTION__);\n+                return true;\n+            }\n+        }\n+\n         if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it\n             int nHeight = -1;\n             {\n@@ -1632,6 +1652,9 @@ bool CBlock::ConnectBlock(CBlockIndex* pindex, CCoinsViewCache &view, bool fJust\n     int64 nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n+    vPos.reserve(vtx.size());\n     for (unsigned int i=0; i<vtx.size(); i++)\n     {\n \n@@ -1671,6 +1694,8 @@ bool CBlock::ConnectBlock(CBlockIndex* pindex, CCoinsViewCache &view, bool fJust\n         if (!tx.IsCoinBase())\n             blockundo.vtxundo.push_back(txundo);\n \n+        vPos.push_back(std::make_pair(GetTxHash(i), pos));\n+        pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n     }\n     int64 nTime = GetTimeMicros() - nStart;\n     if (fBenchmark)\n@@ -1710,6 +1735,9 @@ bool CBlock::ConnectBlock(CBlockIndex* pindex, CCoinsViewCache &view, bool fJust\n             return error(\"ConnectBlock() : WriteBlockIndex failed\");\n     }\n \n+    if (fTxIndex)\n+        pblocktree->WriteTxIndex(vPos);\n+\n     // add this block to the view's block chain\n     if (!view.SetBestBlock(pindex))\n         return false;\n@@ -2554,6 +2582,10 @@ bool static LoadBlockIndexDB()\n     pblocktree->ReadReindexing(fReindexing);\n     fReindex |= fReindexing;\n \n+    // Check whether we have a transaction index\n+    pblocktree->ReadFlag(\"txindex\", fTxIndex);\n+    printf(\"LoadBlockIndex(): transaction index %s\\n\", fTxIndex ? \"enabled\" : \"disabled\");\n+\n     // Load hashBestChain pointer to end of best chain\n     pindexBest = pcoinsTip->GetBestBlock();\n     if (pindexBest == NULL)\n@@ -2658,20 +2690,24 @@ bool LoadBlockIndex()\n         hashGenesisBlock = uint256(\"000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\");\n     }\n \n-    if (fReindex)\n-        return true;\n-\n     //\n     // Load block index from databases\n     //\n-    if (!LoadBlockIndexDB())\n+    if (!fReindex && !LoadBlockIndexDB())\n         return false;\n \n     //\n     // Init with genesis block\n     //\n     if (mapBlockIndex.empty())\n     {\n+        fTxIndex = GetBoolArg(\"-txindex\", false);\n+        pblocktree->WriteFlag(\"txindex\", fTxIndex);\n+        printf(\"Initializing databases...\\n\");\n+\n+        if (fReindex)\n+            return true;\n+\n         // Genesis Block:\n         // CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n         //   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)"
      },
      {
        "sha": "edfea7b510032ab63bc0311e0c9e4088c5a810bd",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d1fa42e85c9164688aa69b3f54f015fbefc06aa/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d1fa42e85c9164688aa69b3f54f015fbefc06aa/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=2d1fa42e85c9164688aa69b3f54f015fbefc06aa",
        "patch": "@@ -93,6 +93,7 @@ extern bool fImporting;\n extern bool fReindex;\n extern bool fBenchmark;\n extern int nScriptCheckThreads;\n+extern bool fTxIndex;\n extern unsigned int nCoinCacheSize;\n \n // Settings\n@@ -196,9 +197,8 @@ static inline std::string BlockHashStr(const uint256& hash)\n \n bool GetWalletFile(CWallet* pwallet, std::string &strWalletFileOut);\n \n-class CDiskBlockPos\n+struct CDiskBlockPos\n {\n-public:\n     int nFile;\n     unsigned int nPos;\n \n@@ -228,7 +228,27 @@ class CDiskBlockPos\n     bool IsNull() const { return (nFile == -1); }\n };\n \n+struct CDiskTxPos : public CDiskBlockPos\n+{\n+    unsigned int nTxOffset; // after header\n+\n+    IMPLEMENT_SERIALIZE(\n+        READWRITE(*(CDiskBlockPos*)this);\n+        READWRITE(VARINT(nTxOffset));\n+    )\n+\n+    CDiskTxPos(const CDiskBlockPos &blockIn, unsigned int nTxOffsetIn) : CDiskBlockPos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {\n+    }\n+\n+    CDiskTxPos() {\n+        SetNull();\n+    }\n \n+    void SetNull() {\n+        CDiskBlockPos::SetNull();\n+        nTxOffset = 0;\n+    }\n+};\n \n \n /** An inpoint - a combination of a transaction and an index n into its vin */"
      },
      {
        "sha": "78fa0279ba2b87bc9e979553a179c32f18827f8d",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d1fa42e85c9164688aa69b3f54f015fbefc06aa/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d1fa42e85c9164688aa69b3f54f015fbefc06aa/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=2d1fa42e85c9164688aa69b3f54f015fbefc06aa",
        "patch": "@@ -145,6 +145,29 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) {\n     return true;\n }\n \n+bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n+    return Read(make_pair('t', txid), pos);\n+}\n+\n+bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n+    CLevelDBBatch batch;\n+    for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n+        batch.Write(make_pair('t', it->first), it->second);\n+    return WriteBatch(batch);\n+}\n+\n+bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {\n+    return Write(std::make_pair('F', name), fValue ? '1' : '0');\n+}\n+\n+bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n+    char ch;\n+    if (!Read(std::make_pair('F', name), ch))\n+        return false;\n+    fValue = ch == '1';\n+    return true;\n+}\n+\n bool CBlockTreeDB::LoadBlockIndexGuts()\n {\n     leveldb::Iterator *pcursor = NewIterator();"
      },
      {
        "sha": "ebac81b301d4398575176f896d4bf0bd3e67fb8c",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d1fa42e85c9164688aa69b3f54f015fbefc06aa/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d1fa42e85c9164688aa69b3f54f015fbefc06aa/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=2d1fa42e85c9164688aa69b3f54f015fbefc06aa",
        "patch": "@@ -43,6 +43,10 @@ class CBlockTreeDB : public CLevelDB\n     bool WriteLastBlockFile(int nFile);\n     bool WriteReindexing(bool fReindex);\n     bool ReadReindexing(bool &fReindex);\n+    bool ReadTxIndex(const uint256 &txid, CDiskTxPos &pos);\n+    bool WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> > &list);\n+    bool WriteFlag(const std::string &name, bool fValue);\n+    bool ReadFlag(const std::string &name, bool &fValue);\n     bool LoadBlockIndexGuts();\n };\n "
      }
    ]
  }
]