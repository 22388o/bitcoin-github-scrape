[
  {
    "sha": "b111324acd8ef337b86c857c465459844df30b66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTExMzI0YWNkOGVmMzM3Yjg2Yzg1N2M0NjU0NTk4NDRkZjMwYjY2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-23T20:49:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-02T18:18:55Z"
      },
      "message": "move initialize_chain() and initialize_chain_clean() to be methods of BitcoinTestFramework",
      "tree": {
        "sha": "9f2f94841b2e7ad5c7d757e77fa6aba4027d5a2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f2f94841b2e7ad5c7d757e77fa6aba4027d5a2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b111324acd8ef337b86c857c465459844df30b66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b111324acd8ef337b86c857c465459844df30b66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b111324acd8ef337b86c857c465459844df30b66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b111324acd8ef337b86c857c465459844df30b66/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc8fc0c73bebbc1c48ac5540026030c9cc00ec23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc8fc0c73bebbc1c48ac5540026030c9cc00ec23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc8fc0c73bebbc1c48ac5540026030c9cc00ec23"
      }
    ],
    "stats": {
      "total": 195,
      "additions": 103,
      "deletions": 92
    },
    "files": [
      {
        "sha": "447355ec9a04943e15b276c5daffcf3be0f54781",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 103,
        "deletions": 11,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b111324acd8ef337b86c857c465459844df30b66/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b111324acd8ef337b86c857c465459844df30b66/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=b111324acd8ef337b86c857c465459844df30b66",
        "patch": "@@ -8,24 +8,35 @@\n import logging\n import optparse\n import os\n-import sys\n import shutil\n+import subprocess\n+import sys\n import tempfile\n import time\n \n from .util import (\n-    initialize_chain,\n-    start_nodes,\n+    PortSeed,\n+    MAX_NODES,\n+    bitcoind_processes,\n+    check_json_precision,\n     connect_nodes_bi,\n+    disable_mocktime,\n     disconnect_nodes,\n+    enable_coverage,\n+    enable_mocktime,\n+    get_mocktime,\n+    get_rpc_proxy,\n+    initialize_datadir,\n+    log_filename,\n+    p2p_port,\n+    rpc_url,\n+    set_node_times,\n+    start_nodes,\n+    stop_node,\n+    stop_nodes,\n     sync_blocks,\n     sync_mempools,\n-    stop_nodes,\n-    stop_node,\n-    enable_coverage,\n-    check_json_precision,\n-    initialize_chain_clean,\n-    PortSeed,\n+    wait_for_bitcoind_start,\n )\n from .authproxy import JSONRPCException\n \n@@ -49,9 +60,9 @@ def add_options(self, parser):\n     def setup_chain(self):\n         self.log.info(\"Initializing test directory \"+self.options.tmpdir)\n         if self.setup_clean_chain:\n-            initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n+            self._initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n         else:\n-            initialize_chain(self.options.tmpdir, self.num_nodes, self.options.cachedir)\n+            self._initialize_chain(self.options.tmpdir, self.num_nodes, self.options.cachedir)\n \n     def stop_node(self, num_node):\n         stop_node(self.nodes[num_node], num_node)\n@@ -216,6 +227,87 @@ def _start_logging(self):\n             rpc_handler.setLevel(logging.DEBUG)\n             rpc_logger.addHandler(rpc_handler)\n \n+    def _initialize_chain(self, test_dir, num_nodes, cachedir):\n+        \"\"\"Initialize a pre-mined blockchain for use by the test.\n+\n+        Create a cache of a 200-block-long chain (with wallet) for MAX_NODES\n+        Afterward, create num_nodes copies from the cache.\"\"\"\n+\n+        assert num_nodes <= MAX_NODES\n+        create_cache = False\n+        for i in range(MAX_NODES):\n+            if not os.path.isdir(os.path.join(cachedir, 'node' + str(i))):\n+                create_cache = True\n+                break\n+\n+        if create_cache:\n+            self.log.debug(\"Creating data directories from cached datadir\")\n+\n+            # find and delete old cache directories if any exist\n+            for i in range(MAX_NODES):\n+                if os.path.isdir(os.path.join(cachedir, \"node\" + str(i))):\n+                    shutil.rmtree(os.path.join(cachedir, \"node\" + str(i)))\n+\n+            # Create cache directories, run bitcoinds:\n+            for i in range(MAX_NODES):\n+                datadir = initialize_datadir(cachedir, i)\n+                args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n+                if i > 0:\n+                    args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n+                bitcoind_processes[i] = subprocess.Popen(args)\n+                self.log.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n+                wait_for_bitcoind_start(bitcoind_processes[i], rpc_url(i), i)\n+                self.log.debug(\"initialize_chain: RPC successfully started\")\n+\n+            rpcs = []\n+            for i in range(MAX_NODES):\n+                try:\n+                    rpcs.append(get_rpc_proxy(rpc_url(i), i))\n+                except:\n+                    self.log.exception(\"Error connecting to node %d\" % i)\n+                    sys.exit(1)\n+\n+            # Create a 200-block-long chain; each of the 4 first nodes\n+            # gets 25 mature blocks and 25 immature.\n+            # Note: To preserve compatibility with older versions of\n+            # initialize_chain, only 4 nodes will generate coins.\n+            #\n+            # blocks are created with timestamps 10 minutes apart\n+            # starting from 2010 minutes in the past\n+            enable_mocktime()\n+            block_time = get_mocktime() - (201 * 10 * 60)\n+            for i in range(2):\n+                for peer in range(4):\n+                    for j in range(25):\n+                        set_node_times(rpcs, block_time)\n+                        rpcs[peer].generate(1)\n+                        block_time += 10 * 60\n+                    # Must sync before next peer starts generating blocks\n+                    sync_blocks(rpcs)\n+\n+            # Shut them down, and clean up cache directories:\n+            stop_nodes(rpcs)\n+            disable_mocktime()\n+            for i in range(MAX_NODES):\n+                os.remove(log_filename(cachedir, i, \"debug.log\"))\n+                os.remove(log_filename(cachedir, i, \"db.log\"))\n+                os.remove(log_filename(cachedir, i, \"peers.dat\"))\n+                os.remove(log_filename(cachedir, i, \"fee_estimates.dat\"))\n+\n+        for i in range(num_nodes):\n+            from_dir = os.path.join(cachedir, \"node\" + str(i))\n+            to_dir = os.path.join(test_dir, \"node\" + str(i))\n+            shutil.copytree(from_dir, to_dir)\n+            initialize_datadir(test_dir, i)  # Overwrite port/rpcport in bitcoin.conf\n+\n+    def _initialize_chain_clean(self, test_dir, num_nodes):\n+        \"\"\"Initialize empty blockchain for use by the test.\n+\n+        Create an empty blockchain and num_nodes wallets.\n+        Useful if a test case wants complete control over initialization.\"\"\"\n+        for i in range(num_nodes):\n+            initialize_datadir(test_dir, i)\n+\n # Test framework for doing p2p comparison testing, which sets up some bitcoind\n # binaries:\n # 1 binary: test binary"
      },
      {
        "sha": "2b56fe8d62996562167df9dddee4329d8281a46a",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 81,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b111324acd8ef337b86c857c465459844df30b66/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b111324acd8ef337b86c857c465459844df30b66/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=b111324acd8ef337b86c857c465459844df30b66",
        "patch": "@@ -226,87 +226,6 @@ def wait_for_bitcoind_start(process, url, i):\n                 raise # unknown JSON RPC exception\n         time.sleep(0.25)\n \n-def initialize_chain(test_dir, num_nodes, cachedir):\n-    \"\"\"\n-    Create a cache of a 200-block-long chain (with wallet) for MAX_NODES\n-    Afterward, create num_nodes copies from the cache\n-    \"\"\"\n-\n-    assert num_nodes <= MAX_NODES\n-    create_cache = False\n-    for i in range(MAX_NODES):\n-        if not os.path.isdir(os.path.join(cachedir, 'node'+str(i))):\n-            create_cache = True\n-            break\n-\n-    if create_cache:\n-        logger.debug(\"Creating data directories from cached datadir\")\n-\n-        #find and delete old cache directories if any exist\n-        for i in range(MAX_NODES):\n-            if os.path.isdir(os.path.join(cachedir,\"node\"+str(i))):\n-                shutil.rmtree(os.path.join(cachedir,\"node\"+str(i)))\n-\n-        # Create cache directories, run bitcoinds:\n-        for i in range(MAX_NODES):\n-            datadir=initialize_datadir(cachedir, i)\n-            args = [ os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\"+datadir, \"-discover=0\" ]\n-            if i > 0:\n-                args.append(\"-connect=127.0.0.1:\"+str(p2p_port(0)))\n-            bitcoind_processes[i] = subprocess.Popen(args)\n-            logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-            wait_for_bitcoind_start(bitcoind_processes[i], rpc_url(i), i)\n-            logger.debug(\"initialize_chain: RPC successfully started\")\n-\n-        rpcs = []\n-        for i in range(MAX_NODES):\n-            try:\n-                rpcs.append(get_rpc_proxy(rpc_url(i), i))\n-            except:\n-                sys.stderr.write(\"Error connecting to \"+url+\"\\n\")\n-                sys.exit(1)\n-\n-        # Create a 200-block-long chain; each of the 4 first nodes\n-        # gets 25 mature blocks and 25 immature.\n-        # Note: To preserve compatibility with older versions of\n-        # initialize_chain, only 4 nodes will generate coins.\n-        #\n-        # blocks are created with timestamps 10 minutes apart\n-        # starting from 2010 minutes in the past\n-        enable_mocktime()\n-        block_time = get_mocktime() - (201 * 10 * 60)\n-        for i in range(2):\n-            for peer in range(4):\n-                for j in range(25):\n-                    set_node_times(rpcs, block_time)\n-                    rpcs[peer].generate(1)\n-                    block_time += 10*60\n-                # Must sync before next peer starts generating blocks\n-                sync_blocks(rpcs)\n-\n-        # Shut them down, and clean up cache directories:\n-        stop_nodes(rpcs)\n-        disable_mocktime()\n-        for i in range(MAX_NODES):\n-            os.remove(log_filename(cachedir, i, \"debug.log\"))\n-            os.remove(log_filename(cachedir, i, \"db.log\"))\n-            os.remove(log_filename(cachedir, i, \"peers.dat\"))\n-            os.remove(log_filename(cachedir, i, \"fee_estimates.dat\"))\n-\n-    for i in range(num_nodes):\n-        from_dir = os.path.join(cachedir, \"node\"+str(i))\n-        to_dir = os.path.join(test_dir,  \"node\"+str(i))\n-        shutil.copytree(from_dir, to_dir)\n-        initialize_datadir(test_dir, i) # Overwrite port/rpcport in bitcoin.conf\n-\n-def initialize_chain_clean(test_dir, num_nodes):\n-    \"\"\"\n-    Create an empty blockchain and num_nodes wallets.\n-    Useful if a test case wants complete control over initialization.\n-    \"\"\"\n-    for i in range(num_nodes):\n-        datadir=initialize_datadir(test_dir, i)\n-\n \n def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n     \"\"\""
      }
    ]
  },
  {
    "sha": "b7dd44c528bec780d27bd7606dbf6c1cdc8843ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2RkNDRjNTI4YmVjNzgwZDI3YmQ3NjA2ZGJmNmMxY2RjODg0M2Vl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-23T20:56:45Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-02T18:20:13Z"
      },
      "message": "Add start and stop node methods to BitcoinTestFramework",
      "tree": {
        "sha": "07fcdc0f84c2b460691aa133328317df44f97869",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07fcdc0f84c2b460691aa133328317df44f97869"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7dd44c528bec780d27bd7606dbf6c1cdc8843ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7dd44c528bec780d27bd7606dbf6c1cdc8843ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7dd44c528bec780d27bd7606dbf6c1cdc8843ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7dd44c528bec780d27bd7606dbf6c1cdc8843ee/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b111324acd8ef337b86c857c465459844df30b66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b111324acd8ef337b86c857c465459844df30b66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b111324acd8ef337b86c857c465459844df30b66"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 19,
      "deletions": 8
    },
    "files": [
      {
        "sha": "20a5d92c128eef5050c9cdaa9c3982bae758772e",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 19,
        "deletions": 8,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dd44c528bec780d27bd7606dbf6c1cdc8843ee/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dd44c528bec780d27bd7606dbf6c1cdc8843ee/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=b7dd44c528bec780d27bd7606dbf6c1cdc8843ee",
        "patch": "@@ -31,6 +31,7 @@\n     p2p_port,\n     rpc_url,\n     set_node_times,\n+    start_node,\n     start_nodes,\n     stop_node,\n     stop_nodes,\n@@ -64,9 +65,18 @@ def setup_chain(self):\n         else:\n             self._initialize_chain(self.options.tmpdir, self.num_nodes, self.options.cachedir)\n \n+    def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n+        return start_node(i, dirname, extra_args, rpchost, timewait, binary, stderr)\n+\n+    def start_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n+        return start_nodes(num_nodes, dirname, extra_args, rpchost, timewait, binary)\n+\n     def stop_node(self, num_node):\n         stop_node(self.nodes[num_node], num_node)\n \n+    def stop_nodes(self):\n+        stop_nodes(self.nodes)\n+\n     def setup_nodes(self):\n         extra_args = None\n         if hasattr(self, \"extra_args\"):\n@@ -165,7 +175,7 @@ def main(self):\n \n         if not self.options.noshutdown:\n             self.log.info(\"Stopping nodes\")\n-            stop_nodes(self.nodes)\n+            self.stop_nodes()\n         else:\n             self.log.info(\"Note: bitcoinds were not stopped and may still be running\")\n \n@@ -259,10 +269,10 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n                 wait_for_bitcoind_start(bitcoind_processes[i], rpc_url(i), i)\n                 self.log.debug(\"initialize_chain: RPC successfully started\")\n \n-            rpcs = []\n+            self.nodes = []\n             for i in range(MAX_NODES):\n                 try:\n-                    rpcs.append(get_rpc_proxy(rpc_url(i), i))\n+                    self.nodes.append(get_rpc_proxy(rpc_url(i), i))\n                 except:\n                     self.log.exception(\"Error connecting to node %d\" % i)\n                     sys.exit(1)\n@@ -279,14 +289,15 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n             for i in range(2):\n                 for peer in range(4):\n                     for j in range(25):\n-                        set_node_times(rpcs, block_time)\n-                        rpcs[peer].generate(1)\n+                        set_node_times(self.nodes, block_time)\n+                        self.nodes[peer].generate(1)\n                         block_time += 10 * 60\n                     # Must sync before next peer starts generating blocks\n-                    sync_blocks(rpcs)\n+                    sync_blocks(self.nodes)\n \n             # Shut them down, and clean up cache directories:\n-            stop_nodes(rpcs)\n+            self.stop_nodes()\n+            self.nodes = []\n             disable_mocktime()\n             for i in range(MAX_NODES):\n                 os.remove(log_filename(cachedir, i, \"debug.log\"))\n@@ -330,7 +341,7 @@ def add_options(self, parser):\n                           help=\"bitcoind binary to use for reference nodes (if any)\")\n \n     def setup_network(self):\n-        self.nodes = start_nodes(\n+        self.nodes = self.start_nodes(\n             self.num_nodes, self.options.tmpdir,\n             extra_args=[['-whitelist=127.0.0.1']] * self.num_nodes,\n             binary=[self.options.testbinary] +"
      }
    ]
  },
  {
    "sha": "4550049903608a98176d8a3f8b13ec0e00281ac5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTUwMDQ5OTAzNjA4YTk4MTc2ZDhhM2Y4YjEzZWMwZTAwMjgxYWM1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-23T21:48:29Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-05T22:05:42Z"
      },
      "message": "Reorganize BitcoinTestFramework class",
      "tree": {
        "sha": "df24f2742db7fe02758096e7751eaeb4d7f15928",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df24f2742db7fe02758096e7751eaeb4d7f15928"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4550049903608a98176d8a3f8b13ec0e00281ac5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4550049903608a98176d8a3f8b13ec0e00281ac5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4550049903608a98176d8a3f8b13ec0e00281ac5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4550049903608a98176d8a3f8b13ec0e00281ac5/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7dd44c528bec780d27bd7606dbf6c1cdc8843ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7dd44c528bec780d27bd7606dbf6c1cdc8843ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7dd44c528bec780d27bd7606dbf6c1cdc8843ee"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 62,
      "deletions": 40
    },
    "files": [
      {
        "sha": "ea1a3dd53668448b5bcefd4f50eb24856be8f43c",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 62,
        "deletions": 40,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4550049903608a98176d8a3f8b13ec0e00281ac5/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4550049903608a98176d8a3f8b13ec0e00281ac5/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=4550049903608a98176d8a3f8b13ec0e00281ac5",
        "patch": "@@ -42,6 +42,21 @@\n from .authproxy import JSONRPCException\n \n class BitcoinTestFramework(object):\n+    \"\"\"Base class for a bitcoin test script.\n+\n+    Individual bitcoin test scripts should subclass this class and override the following methods:\n+\n+    - __init__()\n+    - add_options()\n+    - setup_chain()\n+    - setup_network()\n+    - run_test()\n+\n+    The main() method should not be overridden.\n+\n+    This class also contains various public and private helper methods.\"\"\"\n+\n+    # Methods to override in subclass test scripts.\n \n     TEST_EXIT_PASSED = 0\n     TEST_EXIT_FAILED = 1\n@@ -52,9 +67,6 @@ def __init__(self):\n         self.setup_clean_chain = False\n         self.nodes = None\n \n-    def run_test(self):\n-        raise NotImplementedError\n-\n     def add_options(self, parser):\n         pass\n \n@@ -65,24 +77,6 @@ def setup_chain(self):\n         else:\n             self._initialize_chain(self.options.tmpdir, self.num_nodes, self.options.cachedir)\n \n-    def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n-        return start_node(i, dirname, extra_args, rpchost, timewait, binary, stderr)\n-\n-    def start_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n-        return start_nodes(num_nodes, dirname, extra_args, rpchost, timewait, binary)\n-\n-    def stop_node(self, num_node):\n-        stop_node(self.nodes[num_node], num_node)\n-\n-    def stop_nodes(self):\n-        stop_nodes(self.nodes)\n-\n-    def setup_nodes(self):\n-        extra_args = None\n-        if hasattr(self, \"extra_args\"):\n-            extra_args = self.extra_args\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n-\n     def setup_network(self):\n         self.setup_nodes()\n \n@@ -93,27 +87,16 @@ def setup_network(self):\n             connect_nodes_bi(self.nodes, i, i + 1)\n         self.sync_all()\n \n-    def split_network(self):\n-        \"\"\"\n-        Split the network of four nodes into nodes 0/1 and 2/3.\n-        \"\"\"\n-        disconnect_nodes(self.nodes[1], 2)\n-        disconnect_nodes(self.nodes[2], 1)\n-        self.sync_all([self.nodes[:2], self.nodes[2:]])\n-\n-    def sync_all(self, node_groups=None):\n-        if not node_groups:\n-            node_groups = [self.nodes]\n+    def setup_nodes(self):\n+        extra_args = None\n+        if hasattr(self, \"extra_args\"):\n+            extra_args = self.extra_args\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n \n-        [sync_blocks(group) for group in node_groups]\n-        [sync_mempools(group) for group in node_groups]\n+    def run_test(self):\n+        raise NotImplementedError\n \n-    def join_network(self):\n-        \"\"\"\n-        Join the (previously split) network halves together.\n-        \"\"\"\n-        connect_nodes_bi(self.nodes, 1, 2)\n-        self.sync_all()\n+    # Main function. This should not be overridden by the subclass test scripts.\n \n     def main(self):\n \n@@ -209,6 +192,45 @@ def main(self):\n             logging.shutdown()\n             sys.exit(self.TEST_EXIT_FAILED)\n \n+    # Public helper methods. These can be accessed by the subclass test scripts.\n+\n+    def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n+        return start_node(i, dirname, extra_args, rpchost, timewait, binary, stderr)\n+\n+    def start_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n+        return start_nodes(num_nodes, dirname, extra_args, rpchost, timewait, binary)\n+\n+    def stop_node(self, num_node):\n+        stop_node(self.nodes[num_node], num_node)\n+\n+    def stop_nodes(self):\n+        stop_nodes(self.nodes)\n+\n+    def split_network(self):\n+        \"\"\"\n+        Split the network of four nodes into nodes 0/1 and 2/3.\n+        \"\"\"\n+        disconnect_nodes(self.nodes[1], 2)\n+        disconnect_nodes(self.nodes[2], 1)\n+        self.sync_all([self.nodes[:2], self.nodes[2:]])\n+\n+    def join_network(self):\n+        \"\"\"\n+        Join the (previously split) network halves together.\n+        \"\"\"\n+        connect_nodes_bi(self.nodes, 1, 2)\n+        self.sync_all()\n+\n+    def sync_all(self, node_groups=None):\n+        if not node_groups:\n+            node_groups = [self.nodes]\n+\n+        for group in node_groups:\n+            sync_blocks(group)\n+            sync_mempools(group)\n+\n+    # Private helper methods. These should not be accessed by the subclass test scripts.\n+\n     def _start_logging(self):\n         # Add logger and logging handlers\n         self.log = logging.getLogger('TestFramework')"
      }
    ]
  }
]