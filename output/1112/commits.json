[
  {
    "sha": "ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDZkMGI1Zjg1MmRjNWYxYzk0MDdhYmVjYjVhOWM2YTdlNDJiNGIy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-15T20:10:54Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-17T18:00:55Z"
      },
      "message": "Remove headers.h",
      "tree": {
        "sha": "763b840f2619af642469d3894b88b682134f4425",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/763b840f2619af642469d3894b88b682134f4425"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b97d54355e8239273b50c54dbedfde16ed82fd73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b97d54355e8239273b50c54dbedfde16ed82fd73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b97d54355e8239273b50c54dbedfde16ed82fd73"
      }
    ],
    "stats": {
      "total": 616,
      "additions": 288,
      "deletions": 328
    },
    "files": [
      {
        "sha": "f79216e8dc3d0e68c710a411d56225ba2a462e3f",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -119,7 +119,6 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/db.h \\\n     src/script.h \\\n     src/init.h \\\n-    src/headers.h \\\n     src/irc.h \\\n     src/mruset.h \\\n     src/json/json_spirit_writer_template.h \\"
      },
      {
        "sha": "160f8f8ff31b86b4e64c056d8f032900ec19b30c",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -6,7 +6,6 @@\n \n #include \"netbase.h\"\n #include \"protocol.h\"\n-#include \"util.h\"\n \n \n #include <map>"
      },
      {
        "sha": "cdea66dd38dfbe2dcf71b76ab8d2e6fc1541292c",
        "filename": "src/allocators.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/allocators.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/allocators.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/allocators.h?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -8,6 +8,9 @@\n #include <string>\n \n #ifdef WIN32\n+#ifdef _WIN32_WINNT\n+#undef _WIN32_WINNT\n+#endif\n #define _WIN32_WINNT 0x0501\n #define WIN32_LEAN_AND_MEAN 1\n #ifndef NOMINMAX"
      },
      {
        "sha": "24b7f3ab1b021d420f4cd499de686fd97979d18d",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -19,6 +19,7 @@\n #include <vector>\n #include \"bignum.h\"\n #include \"key.h\"\n+#include \"util.h\"\n \n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n "
      },
      {
        "sha": "cea8e1e357868e97028b394ebc34fe56e6c65158",
        "filename": "src/bignum.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bignum.h?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -9,7 +9,7 @@\n #include <vector>\n #include <openssl/bn.h>\n \n-#include \"util.h\"\n+#include \"util.h\" // for uint64\n \n /** Errors thrown by the bignum class */\n class bignum_error : public std::runtime_error"
      },
      {
        "sha": "9294f9357a8e92f9349c48b445c6751e72980d55",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -3,10 +3,13 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"headers.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n #include \"db.h\"\n #include \"net.h\"\n #include \"init.h\"\n+#include \"ui_interface.h\"\n+\n #undef printf\n #include <boost/asio.hpp>\n #include <boost/filesystem.hpp>"
      },
      {
        "sha": "cf56fa06953c319aab252faf84aef346b905114a",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -5,9 +5,11 @@\n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n #include <boost/foreach.hpp>\n \n-#include \"headers.h\"\n #include \"checkpoints.h\"\n \n+#include \"main.h\"\n+#include \"uint256.h\"\n+\n namespace Checkpoints\n {\n     typedef std::map<int, uint256> MapCheckpoints;"
      },
      {
        "sha": "5d3228f3fc297df001150b9477437d0f9cf698b2",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -5,7 +5,6 @@\n #define  BITCOIN_CHECKPOINT_H\n \n #include <map>\n-#include \"util.h\"\n \n class uint256;\n class CBlockIndex;"
      },
      {
        "sha": "db340445b242c37f2744145aa162355e88b539fb",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -5,6 +5,28 @@\n #ifndef _BITCOIN_COMPAT_H\n #define _BITCOIN_COMPAT_H 1\n \n+#ifdef WIN32\n+#define _WIN32_WINNT 0x0501\n+#define WIN32_LEAN_AND_MEAN 1\n+#ifndef NOMINMAX\n+#define NOMINMAX\n+#endif\n+#include <winsock2.h>\n+#include <mswsock.h>\n+#include <ws2tcpip.h>\n+#else\n+#include <sys/types.h>\n+#include <sys/socket.h>\n+#include <sys/fcntl.h>\n+#include <arpa/inet.h>\n+#include <netdb.h>\n+#include <net/if.h>\n+#include <ifaddrs.h>\n+#endif\n+#ifdef BSD\n+#include <netinet/in.h>\n+#endif\n+\n typedef u_int SOCKET;\n #ifdef WIN32\n #define MSG_NOSIGNAL        0\n@@ -39,4 +61,5 @@ inline int myclosesocket(SOCKET& hSocket)\n }\n #define closesocket(s)      myclosesocket(s)\n \n+\n #endif"
      },
      {
        "sha": "5713faf120c1051feece39202051e51faaa273da",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -6,13 +6,11 @@\n #include <openssl/evp.h>\n #include <vector>\n #include <string>\n-#include \"headers.h\"\n #ifdef WIN32\n #include <windows.h>\n #endif\n \n #include \"crypter.h\"\n-#include \"main.h\"\n #include \"util.h\"\n \n bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod)"
      },
      {
        "sha": "60dba3b35339bfd20aea119b3d03784c9653b202",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -3,13 +3,18 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"headers.h\"\n #include \"db.h\"\n-#include \"net.h\"\n+#include \"util.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n #include <boost/version.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n \n+#ifndef WIN32\n+#include \"sys/stat.h\"\n+#endif\n+\n using namespace std;\n using namespace boost;\n "
      },
      {
        "sha": "9ebcf0d4b2d8eb2ba512067a95a9852833f6e085",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 28,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -6,6 +6,8 @@\n #define BITCOIN_DB_H\n \n #include \"key.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n \n #include <map>\n #include <string>\n@@ -313,34 +315,6 @@ class CAddrDB : public CDB\n bool LoadAddresses();\n \n \n-/** A key pool entry */\n-class CKeyPool\n-{\n-public:\n-    int64 nTime;\n-    std::vector<unsigned char> vchPubKey;\n-\n-    CKeyPool()\n-    {\n-        nTime = GetTime();\n-    }\n-\n-    CKeyPool(const std::vector<unsigned char>& vchPubKeyIn)\n-    {\n-        nTime = GetTime();\n-        vchPubKey = vchPubKeyIn;\n-    }\n-\n-    IMPLEMENT_SERIALIZE\n-    (\n-        if (!(nType & SER_GETHASH))\n-            READWRITE(nVersion);\n-        READWRITE(nTime);\n-        READWRITE(vchPubKey);\n-    )\n-};\n-\n-\n \n /** Error statuses for the wallet database */\n enum DBErrors"
      },
      {
        "sha": "ceee028977a3e7f2a286ce1195de0354bde7d76b",
        "filename": "src/headers.h",
        "status": "removed",
        "additions": 0,
        "deletions": 91,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b97d54355e8239273b50c54dbedfde16ed82fd73/src/headers.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b97d54355e8239273b50c54dbedfde16ed82fd73/src/headers.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/headers.h?ref=b97d54355e8239273b50c54dbedfde16ed82fd73",
        "patch": "@@ -1,91 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2012 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n-// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifdef _MSC_VER\n-#pragma warning(disable:4786)\n-#pragma warning(disable:4804)\n-#pragma warning(disable:4805)\n-#pragma warning(disable:4717)\n-#endif\n-#ifdef _WIN32_WINNT\n-#undef _WIN32_WINNT\n-#endif\n-#define _WIN32_WINNT 0x0501\n-#ifdef _WIN32_IE\n-#undef _WIN32_IE\n-#endif\n-#define _WIN32_IE 0x0400\n-#define WIN32_LEAN_AND_MEAN 1\n-#ifndef NOMINMAX\n-#define NOMINMAX\n-#endif\n-// Include boost/foreach here as it defines __STDC_LIMIT_MACROS on some systems.\n-#include <boost/foreach.hpp>\n-\n-#if (defined(__unix__) || defined(unix)) && !defined(USG)\n-#include <sys/param.h>  // to get BSD define\n-#endif\n-#ifdef MAC_OSX\n-#ifndef BSD\n-#define BSD 1\n-#endif\n-#endif\n-#include <openssl/buffer.h>\n-#include <openssl/ecdsa.h>\n-#include <openssl/evp.h>\n-#include <openssl/rand.h>\n-#include <openssl/sha.h>\n-#include <openssl/ripemd.h>\n-#include <db_cxx.h>\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <time.h>\n-#include <math.h>\n-#include <float.h>\n-#include <assert.h>\n-#include <iostream>\n-#include <sstream>\n-#include <string>\n-#include <vector>\n-#include <list>\n-#include <deque>\n-#include <map>\n-\n-#ifdef WIN32\n-#include <windows.h>\n-#include <winsock2.h>\n-#include <mswsock.h>\n-#include <shlobj.h>\n-#include <shlwapi.h>\n-#include <io.h>\n-#include <process.h>\n-#include <malloc.h>\n-#else\n-#include <sys/time.h>\n-#include <sys/resource.h>\n-#include <sys/socket.h>\n-#include <sys/stat.h>\n-#include <arpa/inet.h>\n-#include <netdb.h>\n-#include <unistd.h>\n-#include <errno.h>\n-#include <net/if.h>\n-#include <ifaddrs.h>\n-#include <fcntl.h>\n-#include <signal.h>\n-#endif\n-#ifdef BSD\n-#include <netinet/in.h>\n-#endif\n-\n-\n-#include \"serialize.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n-#include \"bignum.h\"\n-#include \"base58.h\"\n-#include \"main.h\"\n-#include \"wallet.h\"\n-#include \"ui_interface.h\""
      },
      {
        "sha": "2f03f24eb04aa4beb91674736166c37a495b6c15",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 145,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -2,19 +2,20 @@\n // Copyright (c) 2009-2012 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n-#include \"headers.h\"\n #include \"db.h\"\n #include \"bitcoinrpc.h\"\n #include \"net.h\"\n #include \"init.h\"\n #include \"strlcpy.h\"\n+#include \"util.h\"\n+#include \"ui_interface.h\"\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n #include <boost/filesystem/convenience.hpp>\n #include <boost/interprocess/sync/file_lock.hpp>\n \n-#ifdef WIN32\n-#define strncasecmp strnicmp\n+#ifndef WIN32\n+#include <signal.h>\n #endif\n \n using namespace std;\n@@ -583,145 +584,3 @@ bool AppInit2(int argc, char* argv[])\n     return true;\n }\n \n-#ifdef WIN32\n-boost::filesystem::path StartupShortcutPath()\n-{\n-    return MyGetSpecialFolderPath(CSIDL_STARTUP, true) / \"Bitcoin.lnk\";\n-}\n-\n-bool GetStartOnSystemStartup()\n-{\n-    return filesystem::exists(StartupShortcutPath());\n-}\n-\n-bool SetStartOnSystemStartup(bool fAutoStart)\n-{\n-    // If the shortcut exists already, remove it for updating\n-    boost::filesystem::remove(StartupShortcutPath());\n-\n-    if (fAutoStart)\n-    {\n-        CoInitialize(NULL);\n-\n-        // Get a pointer to the IShellLink interface.\n-        IShellLink* psl = NULL;\n-        HRESULT hres = CoCreateInstance(CLSID_ShellLink, NULL,\n-                                CLSCTX_INPROC_SERVER, IID_IShellLink,\n-                                reinterpret_cast<void**>(&psl));\n-\n-        if (SUCCEEDED(hres))\n-        {\n-            // Get the current executable path\n-            TCHAR pszExePath[MAX_PATH];\n-            GetModuleFileName(NULL, pszExePath, sizeof(pszExePath));\n-\n-            TCHAR pszArgs[5] = TEXT(\"-min\");\n-\n-            // Set the path to the shortcut target\n-            psl->SetPath(pszExePath);\n-            PathRemoveFileSpec(pszExePath);\n-            psl->SetWorkingDirectory(pszExePath);\n-            psl->SetShowCmd(SW_SHOWMINNOACTIVE);\n-            psl->SetArguments(pszArgs);\n-\n-            // Query IShellLink for the IPersistFile interface for\n-            // saving the shortcut in persistent storage.\n-            IPersistFile* ppf = NULL;\n-            hres = psl->QueryInterface(IID_IPersistFile,\n-                                       reinterpret_cast<void**>(&ppf));\n-            if (SUCCEEDED(hres))\n-            {\n-                WCHAR pwsz[MAX_PATH];\n-                // Ensure that the string is ANSI.\n-                MultiByteToWideChar(CP_ACP, 0, StartupShortcutPath().string().c_str(), -1, pwsz, MAX_PATH);\n-                // Save the link by calling IPersistFile::Save.\n-                hres = ppf->Save(pwsz, TRUE);\n-                ppf->Release();\n-                psl->Release();\n-                CoUninitialize();\n-                return true;\n-            }\n-            psl->Release();\n-        }\n-        CoUninitialize();\n-        return false;\n-    }\n-    return true;\n-}\n-\n-#elif defined(LINUX)\n-\n-// Follow the Desktop Application Autostart Spec:\n-//  http://standards.freedesktop.org/autostart-spec/autostart-spec-latest.html\n-\n-boost::filesystem::path GetAutostartDir()\n-{\n-    namespace fs = boost::filesystem;\n-\n-    char* pszConfigHome = getenv(\"XDG_CONFIG_HOME\");\n-    if (pszConfigHome) return fs::path(pszConfigHome) / \"autostart\";\n-    char* pszHome = getenv(\"HOME\");\n-    if (pszHome) return fs::path(pszHome) / \".config\" / \"autostart\";\n-    return fs::path();\n-}\n-\n-boost::filesystem::path GetAutostartFilePath()\n-{\n-    return GetAutostartDir() / \"bitcoin.desktop\";\n-}\n-\n-bool GetStartOnSystemStartup()\n-{\n-    boost::filesystem::ifstream optionFile(GetAutostartFilePath());\n-    if (!optionFile.good())\n-        return false;\n-    // Scan through file for \"Hidden=true\":\n-    string line;\n-    while (!optionFile.eof())\n-    {\n-        getline(optionFile, line);\n-        if (line.find(\"Hidden\") != string::npos &&\n-            line.find(\"true\") != string::npos)\n-            return false;\n-    }\n-    optionFile.close();\n-\n-    return true;\n-}\n-\n-bool SetStartOnSystemStartup(bool fAutoStart)\n-{\n-    if (!fAutoStart)\n-        boost::filesystem::remove(GetAutostartFilePath());\n-    else\n-    {\n-        char pszExePath[MAX_PATH+1];\n-        memset(pszExePath, 0, sizeof(pszExePath));\n-        if (readlink(\"/proc/self/exe\", pszExePath, sizeof(pszExePath)-1) == -1)\n-            return false;\n-\n-        boost::filesystem::create_directories(GetAutostartDir());\n-\n-        boost::filesystem::ofstream optionFile(GetAutostartFilePath(), ios_base::out|ios_base::trunc);\n-        if (!optionFile.good())\n-            return false;\n-        // Write a bitcoin.desktop file to the autostart directory:\n-        optionFile << \"[Desktop Entry]\\n\";\n-        optionFile << \"Type=Application\\n\";\n-        optionFile << \"Name=Bitcoin\\n\";\n-        optionFile << \"Exec=\" << pszExePath << \" -min\\n\";\n-        optionFile << \"Terminal=false\\n\";\n-        optionFile << \"Hidden=false\\n\";\n-        optionFile.close();\n-    }\n-    return true;\n-}\n-#else\n-\n-// TODO: OSX startup stuff; see:\n-// http://developer.apple.com/mac/library/documentation/MacOSX/Conceptual/BPSystemStartup/Articles/CustomLogin.html\n-\n-bool GetStartOnSystemStartup() { return false; }\n-bool SetStartOnSystemStartup(bool fAutoStart) { return false; }\n-\n-#endif"
      },
      {
        "sha": "e3971c85e373e1dd944e37088d350a3eada09727",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_INIT_H\n #define BITCOIN_INIT_H\n \n+#include \"wallet.h\"\n+\n extern CWallet* pwalletMain;\n \n void Shutdown(void* parg);"
      },
      {
        "sha": "237497055defea8ee4f1dc42b4077333a7bff231",
        "filename": "src/irc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/irc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/irc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -3,10 +3,10 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"headers.h\"\n #include \"irc.h\"\n #include \"net.h\"\n #include \"strlcpy.h\"\n+#include \"base58.h\"\n \n using namespace std;\n using namespace boost;"
      },
      {
        "sha": "664f0b12429a11e832b2ae1706223f6629afc338",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -3,9 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"headers.h\"\n+#include \"keystore.h\"\n #include \"crypter.h\"\n-#include \"db.h\"\n #include \"script.h\"\n \n bool CKeyStore::GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char> &vchPubKeyOut) const"
      },
      {
        "sha": "c2236d999ffc00c2d3d86592beb9bd321a77347c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -2,11 +2,11 @@\n // Copyright (c) 2009-2012 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n-#include \"headers.h\"\n #include \"checkpoints.h\"\n #include \"db.h\"\n #include \"net.h\"\n #include \"init.h\"\n+#include \"ui_interface.h\"\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>"
      },
      {
        "sha": "a67449007f175cd453f5a057814c9378c2e729de",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -9,7 +9,6 @@\n #include \"net.h\"\n #include \"key.h\"\n #include \"script.h\"\n-#include \"db.h\"\n #include \"version.h\"\n \n #ifdef WIN32\n@@ -35,8 +34,6 @@ static const unsigned int MAX_BLOCK_SIZE = 1000000;\n static const unsigned int MAX_BLOCK_SIZE_GEN = MAX_BLOCK_SIZE/2;\n static const int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n static const int MAX_ORPHAN_TRANSACTIONS = MAX_BLOCK_SIZE/100;\n-static const int64 COIN = 100000000;\n-static const int64 CENT = 1000000;\n static const int64 MIN_TX_FEE = 50000;\n static const int64 MIN_RELAY_TX_FEE = 10000;\n static const int64 MAX_MONEY = 21000000 * COIN;"
      },
      {
        "sha": "38c0d3d5820fe264a756dc27260c23d699052898",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -3,13 +3,13 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"headers.h\"\n #include \"irc.h\"\n #include \"db.h\"\n #include \"net.h\"\n #include \"init.h\"\n #include \"strlcpy.h\"\n #include \"addrman.h\"\n+#include \"ui_interface.h\"\n \n #ifdef WIN32\n #include <string.h>"
      },
      {
        "sha": "00b6850b2ace71997e8cb1f3968b15be4f27f856",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 21,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -7,27 +7,6 @@\n #include <string>\n #include <vector>\n \n-#ifdef WIN32\n-#define _WIN32_WINNT 0x0501\n-#define WIN32_LEAN_AND_MEAN 1\n-#ifndef NOMINMAX\n-#define NOMINMAX\n-#endif\n-#include <winsock2.h>\n-#include <mswsock.h>\n-#include <ws2tcpip.h>\n-#else\n-#include <sys/types.h>\n-#include <sys/socket.h>\n-#include <arpa/inet.h>\n-#include <netdb.h>\n-#include <net/if.h>\n-#include <ifaddrs.h>\n-#endif\n-#ifdef BSD\n-#include <netinet/in.h>\n-#endif\n-\n #include \"serialize.h\"\n #include \"compat.h\"\n "
      },
      {
        "sha": "08a08b439a36b9bc51f9b633bd65ae5a87b8311d",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -5,7 +5,6 @@\n #include \"ui_interface.h\"\n \n #include <string>\n-#include \"headers.h\"\n #include \"init.h\"\n \n int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style)"
      },
      {
        "sha": "7b95f51c041fd5a66311524f9cc9a16d77c0387e",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -2,7 +2,7 @@\n #include \"guiutil.h\"\n #include \"walletmodel.h\"\n \n-#include \"headers.h\"\n+#include \"wallet.h\"\n \n #include <QFont>\n #include <QColor>"
      },
      {
        "sha": "dfcd2af3fc45c60779b30e3580962aecff7d32e3",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -7,7 +7,6 @@\n #include \"optionsmodel.h\"\n #include \"guiutil.h\"\n \n-#include \"headers.h\"\n #include \"init.h\"\n #include \"qtipcserver.h\"\n "
      },
      {
        "sha": "cb602ce327336b03d263a6014a8369c7c14c97f3",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -4,7 +4,7 @@\n #include \"addresstablemodel.h\"\n #include \"transactiontablemodel.h\"\n \n-#include \"headers.h\"\n+#include \"main.h\"\n \n #include <QDateTime>\n "
      },
      {
        "sha": "f1e8a5f1bcdc287bad4432cdb02a33d4428d8ac3",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -3,8 +3,6 @@\n #include \"walletmodel.h\"\n #include \"bitcoinunits.h\"\n \n-#include \"headers.h\"\n-\n #include <QString>\n #include <QDateTime>\n #include <QDoubleValidator>"
      },
      {
        "sha": "736be7f70832627b0b452c267636ad7ba9343466",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -2,8 +2,8 @@\n #include \"bitcoinunits.h\"\n #include <QSettings>\n \n-#include \"headers.h\"\n #include \"init.h\"\n+#include \"db.h\"\n \n OptionsModel::OptionsModel(QObject *parent) :\n     QAbstractListModel(parent)"
      },
      {
        "sha": "f7bccaaf02de75f2fd60c8a506869bc315b355e4",
        "filename": "src/qt/qtipcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/qtipcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/qtipcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qtipcserver.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -7,7 +7,7 @@\n #include <boost/tokenizer.hpp>\n #include <boost/date_time/posix_time/posix_time.hpp>\n \n-#include \"headers.h\"\n+#include \"util.h\"\n #include \"qtipcserver.h\"\n \n using namespace boost::interprocess;"
      },
      {
        "sha": "286cddf2a920492076d78e1a34854c4fd13c7d6f",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -3,7 +3,9 @@\n #include \"guiutil.h\"\n #include \"bitcoinunits.h\"\n \n-#include \"headers.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n+#include \"db.h\"\n #include \"ui_interface.h\"\n \n #include <QString>"
      },
      {
        "sha": "32350eaa5adc4cb53f1014a9fd6265ecdcc7177b",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -1,6 +1,6 @@\n #include \"transactionrecord.h\"\n \n-#include \"headers.h\"\n+#include \"wallet.h\"\n \n /* Return positive answer if transaction should be shown in list.\n  */"
      },
      {
        "sha": "5f505f444e62578644341dbe73753c0aefff56e0",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -8,7 +8,7 @@\n #include \"addresstablemodel.h\"\n #include \"bitcoinunits.h\"\n \n-#include \"headers.h\"\n+#include \"wallet.h\"\n \n #include <QLocale>\n #include <QList>"
      },
      {
        "sha": "8206394d2a24559426118abbf814d571c335e783",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -4,7 +4,7 @@\n #include \"addresstablemodel.h\"\n #include \"transactiontablemodel.h\"\n \n-#include \"headers.h\"\n+#include \"wallet.h\"\n #include \"db.h\" // for BackupWallet\n \n #include <QSet>"
      },
      {
        "sha": "1bc87e921795f6b9b91de54a0c49d7abec44f15c",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"headers.h\"\n #include \"init.h\" // for pwalletMain\n #include \"bitcoinrpc.h\"\n+#include \"ui_interface.h\"\n \n #include <boost/lexical_cast.hpp>\n "
      },
      {
        "sha": "ac1f0405a8cc4e70551d424863a4456ef4d0a7cf",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -2,11 +2,17 @@\n // Copyright (c) 2009-2012 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n-#include \"headers.h\"\n+#include <boost/foreach.hpp>\n \n using namespace std;\n using namespace boost;\n \n+#include \"script.h\"\n+#include \"keystore.h\"\n+#include \"bignum.h\"\n+#include \"key.h\"\n+#include \"main.h\"\n+\n bool CheckSig(vector<unsigned char> vchSig, vector<unsigned char> vchPubKey, CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n \n "
      },
      {
        "sha": "2cc786e953084c1e285357a8ac2dd4134d0bf30a",
        "filename": "src/strlcpy.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/strlcpy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/strlcpy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/strlcpy.h?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -15,6 +15,10 @@\n  */\n #ifndef BITCOIN_STRLCPY_H\n #define BITCOIN_STRLCPY_H\n+\n+#include <stdlib.h>\n+#include <string.h>\n+\n /*\n  * Copy src to string dst of size siz.  At most siz-1 characters\n  * will be copied.  Always NUL terminates (unless siz == 0)."
      },
      {
        "sha": "19005fc7618811c6f03e8aad929d539654f5bc2c",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 170,
        "deletions": 1,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -3,8 +3,9 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"headers.h\"\n+#include \"util.h\"\n #include \"strlcpy.h\"\n+#include \"version.h\"\n #include <boost/algorithm/string/join.hpp>\n \n // Work around clang compilation problem in Boost 1.46:\n@@ -24,6 +25,31 @@ namespace boost {\n #include <boost/interprocess/sync/interprocess_mutex.hpp>\n #include <boost/interprocess/sync/interprocess_recursive_mutex.hpp>\n #include <boost/foreach.hpp>\n+#include <openssl/crypto.h>\n+#include <openssl/rand.h>\n+\n+#ifdef WIN32\n+#ifdef _MSC_VER\n+#pragma warning(disable:4786)\n+#pragma warning(disable:4804)\n+#pragma warning(disable:4805)\n+#pragma warning(disable:4717)\n+#endif\n+#ifdef _WIN32_WINNT\n+#undef _WIN32_WINNT\n+#endif\n+#define _WIN32_WINNT 0x0501\n+#ifdef _WIN32_IE\n+#undef _WIN32_IE\n+#endif\n+#define _WIN32_IE 0x0400\n+#define WIN32_LEAN_AND_MEAN 1\n+#ifndef NOMINMAX\n+#define NOMINMAX\n+#endif\n+#include \"shlobj.h\"\n+#include \"shlwapi.h\"\n+#endif\n \n using namespace std;\n using namespace boost;\n@@ -1064,6 +1090,149 @@ std::string FormatSubVersion(const std::string& name, int nClientVersion, const\n     return ss.str();\n }\n \n+#ifdef WIN32\n+boost::filesystem::path static StartupShortcutPath()\n+{\n+    return MyGetSpecialFolderPath(CSIDL_STARTUP, true) / \"Bitcoin.lnk\";\n+}\n+\n+bool GetStartOnSystemStartup()\n+{\n+    return filesystem::exists(StartupShortcutPath());\n+}\n+\n+bool SetStartOnSystemStartup(bool fAutoStart)\n+{\n+    // If the shortcut exists already, remove it for updating\n+    boost::filesystem::remove(StartupShortcutPath());\n+\n+    if (fAutoStart)\n+    {\n+        CoInitialize(NULL);\n+\n+        // Get a pointer to the IShellLink interface.\n+        IShellLink* psl = NULL;\n+        HRESULT hres = CoCreateInstance(CLSID_ShellLink, NULL,\n+                                CLSCTX_INPROC_SERVER, IID_IShellLink,\n+                                reinterpret_cast<void**>(&psl));\n+\n+        if (SUCCEEDED(hres))\n+        {\n+            // Get the current executable path\n+            TCHAR pszExePath[MAX_PATH];\n+            GetModuleFileName(NULL, pszExePath, sizeof(pszExePath));\n+\n+            TCHAR pszArgs[5] = TEXT(\"-min\");\n+\n+            // Set the path to the shortcut target\n+            psl->SetPath(pszExePath);\n+            PathRemoveFileSpec(pszExePath);\n+            psl->SetWorkingDirectory(pszExePath);\n+            psl->SetShowCmd(SW_SHOWMINNOACTIVE);\n+            psl->SetArguments(pszArgs);\n+\n+            // Query IShellLink for the IPersistFile interface for\n+            // saving the shortcut in persistent storage.\n+            IPersistFile* ppf = NULL;\n+            hres = psl->QueryInterface(IID_IPersistFile,\n+                                       reinterpret_cast<void**>(&ppf));\n+            if (SUCCEEDED(hres))\n+            {\n+                WCHAR pwsz[MAX_PATH];\n+                // Ensure that the string is ANSI.\n+                MultiByteToWideChar(CP_ACP, 0, StartupShortcutPath().string().c_str(), -1, pwsz, MAX_PATH);\n+                // Save the link by calling IPersistFile::Save.\n+                hres = ppf->Save(pwsz, TRUE);\n+                ppf->Release();\n+                psl->Release();\n+                CoUninitialize();\n+                return true;\n+            }\n+            psl->Release();\n+        }\n+        CoUninitialize();\n+        return false;\n+    }\n+    return true;\n+}\n+\n+#elif defined(LINUX)\n+\n+// Follow the Desktop Application Autostart Spec:\n+//  http://standards.freedesktop.org/autostart-spec/autostart-spec-latest.html\n+\n+boost::filesystem::path static GetAutostartDir()\n+{\n+    namespace fs = boost::filesystem;\n+\n+    char* pszConfigHome = getenv(\"XDG_CONFIG_HOME\");\n+    if (pszConfigHome) return fs::path(pszConfigHome) / \"autostart\";\n+    char* pszHome = getenv(\"HOME\");\n+    if (pszHome) return fs::path(pszHome) / \".config\" / \"autostart\";\n+    return fs::path();\n+}\n+\n+boost::filesystem::path static GetAutostartFilePath()\n+{\n+    return GetAutostartDir() / \"bitcoin.desktop\";\n+}\n+\n+bool GetStartOnSystemStartup()\n+{\n+    boost::filesystem::ifstream optionFile(GetAutostartFilePath());\n+    if (!optionFile.good())\n+        return false;\n+    // Scan through file for \"Hidden=true\":\n+    string line;\n+    while (!optionFile.eof())\n+    {\n+        getline(optionFile, line);\n+        if (line.find(\"Hidden\") != string::npos &&\n+            line.find(\"true\") != string::npos)\n+            return false;\n+    }\n+    optionFile.close();\n+\n+    return true;\n+}\n+\n+bool SetStartOnSystemStartup(bool fAutoStart)\n+{\n+    if (!fAutoStart)\n+        boost::filesystem::remove(GetAutostartFilePath());\n+    else\n+    {\n+        char pszExePath[MAX_PATH+1];\n+        memset(pszExePath, 0, sizeof(pszExePath));\n+        if (readlink(\"/proc/self/exe\", pszExePath, sizeof(pszExePath)-1) == -1)\n+            return false;\n+\n+        boost::filesystem::create_directories(GetAutostartDir());\n+\n+        boost::filesystem::ofstream optionFile(GetAutostartFilePath(), ios_base::out|ios_base::trunc);\n+        if (!optionFile.good())\n+            return false;\n+        // Write a bitcoin.desktop file to the autostart directory:\n+        optionFile << \"[Desktop Entry]\\n\";\n+        optionFile << \"Type=Application\\n\";\n+        optionFile << \"Name=Bitcoin\\n\";\n+        optionFile << \"Exec=\" << pszExePath << \" -min\\n\";\n+        optionFile << \"Terminal=false\\n\";\n+        optionFile << \"Hidden=false\\n\";\n+        optionFile.close();\n+    }\n+    return true;\n+}\n+#else\n+\n+// TODO: OSX startup stuff; see:\n+// http://developer.apple.com/mac/library/documentation/MacOSX/Conceptual/BPSystemStartup/Articles/CustomLogin.html\n+\n+bool GetStartOnSystemStartup() { return false; }\n+bool SetStartOnSystemStartup(bool fAutoStart) { return false; }\n+\n+#endif\n+\n \n \n #ifdef DEBUG_LOCKORDER"
      },
      {
        "sha": "a4424771ced2e46ffc3b983c7c026f32fcf90485",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -31,11 +31,15 @@ typedef int pid_t; /* define for windows compatiblity */\n #include <openssl/sha.h>\n #include <openssl/ripemd.h>\n \n-#include \"netbase.h\"\n+#include \"netbase.h\" // for AddTimeData\n+#include \"ui_interface.h\"\n \n typedef long long  int64;\n typedef unsigned long long  uint64;\n \n+static const int64 COIN = 100000000;\n+static const int64 CENT = 1000000;\n+\n #define loop                for (;;)\n #define BEGIN(a)            ((char*)&(a))\n #define END(a)              ((char*)&((&(a))[1]))\n@@ -160,9 +164,8 @@ boost::filesystem::path GetConfigFile();\n boost::filesystem::path GetPidFile();\n void CreatePidFile(const boost::filesystem::path &path, pid_t pid);\n bool ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet, std::map<std::string, std::vector<std::string> >& mapMultiSettingsRet);\n-#ifdef WIN32\n-boost::filesystem::path MyGetSpecialFolderPath(int nFolder, bool fCreate);\n-#endif\n+bool GetStartOnSystemStartup();\n+bool SetStartOnSystemStartup(bool fAutoStart);\n void ShrinkDebugFile();\n int GetRandInt(int nMax);\n uint64 GetRand(uint64 nMax);"
      },
      {
        "sha": "6a2bf022bbf7ae26107f82b2c90ffa5426961dcc",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -3,7 +3,6 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"headers.h\"\n #include \"db.h\"\n #include \"crypter.h\"\n \n@@ -137,6 +136,11 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n     return false;\n }\n \n+void CWallet::SetBestChain(const CBlockLocator& loc)\n+{\n+    CWalletDB walletdb(strWalletFile);\n+    walletdb.WriteBestBlock(loc);\n+}\n \n // This class implements an addrIncoming entry that causes pre-0.4\n // clients to crash on startup if reading a private-key-encrypted wallet."
      },
      {
        "sha": "3d9387ff8232bf3161e756b0119a277b9bc188c7",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 30,
        "deletions": 5,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_WALLET_H\n #define BITCOIN_WALLET_H\n \n+#include \"main.h\"\n #include \"bignum.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n@@ -25,6 +26,34 @@ enum WalletFeature\n     FEATURE_LATEST = 60000\n };\n \n+\n+/** A key pool entry */\n+class CKeyPool\n+{\n+public:\n+    int64 nTime;\n+    std::vector<unsigned char> vchPubKey;\n+\n+    CKeyPool()\n+    {\n+        nTime = GetTime();\n+    }\n+\n+    CKeyPool(const std::vector<unsigned char>& vchPubKeyIn)\n+    {\n+        nTime = GetTime();\n+        vchPubKey = vchPubKeyIn;\n+    }\n+\n+    IMPLEMENT_SERIALIZE\n+    (\n+        if (!(nType & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+    )\n+};\n+\n /** A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n@@ -196,11 +225,7 @@ class CWallet : public CCryptoKeyStore\n         }\n         return nChange;\n     }\n-    void SetBestChain(const CBlockLocator& loc)\n-    {\n-        CWalletDB walletdb(strWalletFile);\n-        walletdb.WriteBestBlock(loc);\n-    }\n+    void SetBestChain(const CBlockLocator& loc);\n \n     int LoadWallet(bool& fFirstRunRet);\n //    bool BackupWallet(const std::string& strDest);"
      }
    ]
  },
  {
    "sha": "9eace6b1130ce7eb938476750159ec0baf752531",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWFjZTZiMTEzMGNlN2ViOTM4NDc2NzUwMTU5ZWMwYmFmNzUyNTMx",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@garzik.org",
        "date": "2012-04-15T21:39:49Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-17T18:00:55Z"
      },
      "message": "Move CWalletDB code to new walletdb module.\n\nIn addition to standard code separation, this change opens the door\nto fixing several include inter-dependencies.",
      "tree": {
        "sha": "1d4dfa6b1353129a91317a5fb3a0f624435c9377",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d4dfa6b1353129a91317a5fb3a0f624435c9377"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9eace6b1130ce7eb938476750159ec0baf752531",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9eace6b1130ce7eb938476750159ec0baf752531",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9eace6b1130ce7eb938476750159ec0baf752531",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9eace6b1130ce7eb938476750159ec0baf752531/comments",
    "author": null,
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed6d0b5f852dc5f1c9407abecb5a9c6a7e42b4b2"
      }
    ],
    "stats": {
      "total": 1215,
      "additions": 624,
      "deletions": 591
    },
    "files": [
      {
        "sha": "5d359c054a13dde6fe2bb647d6eef6ae68d8d6e6",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eace6b1130ce7eb938476750159ec0baf752531/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eace6b1130ce7eb938476750159ec0baf752531/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=9eace6b1130ce7eb938476750159ec0baf752531",
        "patch": "@@ -117,6 +117,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/net.h \\\n     src/key.h \\\n     src/db.h \\\n+    src/walletdb.h \\\n     src/script.h \\\n     src/init.h \\\n     src/irc.h \\\n@@ -181,6 +182,7 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/checkpoints.cpp \\\n     src/addrman.cpp \\\n     src/db.cpp \\\n+    src/walletdb.cpp \\\n     src/json/json_spirit_writer.cpp \\\n     src/json/json_spirit_value.cpp \\\n     src/json/json_spirit_reader.cpp \\"
      },
      {
        "sha": "e201bbe69a44fcd82dcbefdbd297438de9ac7e2c",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eace6b1130ce7eb938476750159ec0baf752531/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eace6b1130ce7eb938476750159ec0baf752531/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=9eace6b1130ce7eb938476750159ec0baf752531",
        "patch": "@@ -6,6 +6,7 @@\n #include \"main.h\"\n #include \"wallet.h\"\n #include \"db.h\"\n+#include \"walletdb.h\"\n #include \"net.h\"\n #include \"init.h\"\n #include \"ui_interface.h\""
      },
      {
        "sha": "447759f3cc4d573f0234864a6fb4b53d9a1fc6b5",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 415,
        "changes": 418,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eace6b1130ce7eb938476750159ec0baf752531/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eace6b1130ce7eb938476750159ec0baf752531/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=9eace6b1130ce7eb938476750159ec0baf752531",
        "patch": "@@ -20,18 +20,17 @@ using namespace boost;\n \n \n unsigned int nWalletDBUpdated;\n-uint64 nAccountingEntryNumber = 0;\n \n \n \n //\n // CDB\n //\n \n-static CCriticalSection cs_db;\n+CCriticalSection cs_db;\n static bool fDbEnvInit = false;\n DbEnv dbenv(0);\n-static map<string, int> mapFileUseCount;\n+map<string, int> mapFileUseCount;\n static map<string, Db*> mapDb;\n \n static void EnvShutdown()\n@@ -178,7 +177,7 @@ void CDB::Close()\n     }\n }\n \n-void static CloseDb(const string& strFile)\n+void CloseDb(const string& strFile)\n {\n     {\n         LOCK(cs_db);\n@@ -791,414 +790,3 @@ bool LoadAddresses()\n }\n \n \n-\n-\n-//\n-// CWalletDB\n-//\n-\n-bool CWalletDB::WriteName(const string& strAddress, const string& strName)\n-{\n-    nWalletDBUpdated++;\n-    return Write(make_pair(string(\"name\"), strAddress), strName);\n-}\n-\n-bool CWalletDB::EraseName(const string& strAddress)\n-{\n-    // This should only be used for sending addresses, never for receiving addresses,\n-    // receiving addresses must always have an address book entry if they're not change return.\n-    nWalletDBUpdated++;\n-    return Erase(make_pair(string(\"name\"), strAddress));\n-}\n-\n-bool CWalletDB::ReadAccount(const string& strAccount, CAccount& account)\n-{\n-    account.SetNull();\n-    return Read(make_pair(string(\"acc\"), strAccount), account);\n-}\n-\n-bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)\n-{\n-    return Write(make_pair(string(\"acc\"), strAccount), account);\n-}\n-\n-bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n-{\n-    return Write(boost::make_tuple(string(\"acentry\"), acentry.strAccount, ++nAccountingEntryNumber), acentry);\n-}\n-\n-int64 CWalletDB::GetAccountCreditDebit(const string& strAccount)\n-{\n-    list<CAccountingEntry> entries;\n-    ListAccountCreditDebit(strAccount, entries);\n-\n-    int64 nCreditDebit = 0;\n-    BOOST_FOREACH (const CAccountingEntry& entry, entries)\n-        nCreditDebit += entry.nCreditDebit;\n-\n-    return nCreditDebit;\n-}\n-\n-void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountingEntry>& entries)\n-{\n-    bool fAllAccounts = (strAccount == \"*\");\n-\n-    Dbc* pcursor = GetCursor();\n-    if (!pcursor)\n-        throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : cannot create DB cursor\");\n-    unsigned int fFlags = DB_SET_RANGE;\n-    loop\n-    {\n-        // Read next record\n-        CDataStream ssKey;\n-        if (fFlags == DB_SET_RANGE)\n-            ssKey << boost::make_tuple(string(\"acentry\"), (fAllAccounts? string(\"\") : strAccount), uint64(0));\n-        CDataStream ssValue;\n-        int ret = ReadAtCursor(pcursor, ssKey, ssValue, fFlags);\n-        fFlags = DB_NEXT;\n-        if (ret == DB_NOTFOUND)\n-            break;\n-        else if (ret != 0)\n-        {\n-            pcursor->close();\n-            throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : error scanning DB\");\n-        }\n-\n-        // Unserialize\n-        string strType;\n-        ssKey >> strType;\n-        if (strType != \"acentry\")\n-            break;\n-        CAccountingEntry acentry;\n-        ssKey >> acentry.strAccount;\n-        if (!fAllAccounts && acentry.strAccount != strAccount)\n-            break;\n-\n-        ssValue >> acentry;\n-        entries.push_back(acentry);\n-    }\n-\n-    pcursor->close();\n-}\n-\n-\n-int CWalletDB::LoadWallet(CWallet* pwallet)\n-{\n-    pwallet->vchDefaultKey.clear();\n-    int nFileVersion = 0;\n-    vector<uint256> vWalletUpgrade;\n-    bool fIsEncrypted = false;\n-\n-    //// todo: shouldn't we catch exceptions and try to recover and continue?\n-    {\n-        LOCK(pwallet->cs_wallet);\n-        int nMinVersion = 0;\n-        if (Read((string)\"minversion\", nMinVersion))\n-        {\n-            if (nMinVersion > CLIENT_VERSION)\n-                return DB_TOO_NEW;\n-            pwallet->LoadMinVersion(nMinVersion);\n-        }\n-\n-        // Get cursor\n-        Dbc* pcursor = GetCursor();\n-        if (!pcursor)\n-        {\n-            printf(\"Error getting wallet database cursor\\n\");\n-            return DB_CORRUPT;\n-        }\n-\n-        loop\n-        {\n-            // Read next record\n-            CDataStream ssKey;\n-            CDataStream ssValue;\n-            int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n-            if (ret == DB_NOTFOUND)\n-                break;\n-            else if (ret != 0)\n-            {\n-                printf(\"Error reading next record from wallet database\\n\");\n-                return DB_CORRUPT;\n-            }\n-\n-            // Unserialize\n-            // Taking advantage of the fact that pair serialization\n-            // is just the two items serialized one after the other\n-            string strType;\n-            ssKey >> strType;\n-            if (strType == \"name\")\n-            {\n-                string strAddress;\n-                ssKey >> strAddress;\n-                ssValue >> pwallet->mapAddressBook[strAddress];\n-            }\n-            else if (strType == \"tx\")\n-            {\n-                uint256 hash;\n-                ssKey >> hash;\n-                CWalletTx& wtx = pwallet->mapWallet[hash];\n-                ssValue >> wtx;\n-                wtx.BindWallet(pwallet);\n-\n-                if (wtx.GetHash() != hash)\n-                    printf(\"Error in wallet.dat, hash mismatch\\n\");\n-\n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        char fTmp;\n-                        char fUnused;\n-                        ssValue >> fTmp >> fUnused >> wtx.strFromAccount;\n-                        printf(\"LoadWallet() upgrading tx ver=%d %d '%s' %s\\n\", wtx.fTimeReceivedIsTxTime, fTmp, wtx.strFromAccount.c_str(), hash.ToString().c_str());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        printf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString().c_str());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    vWalletUpgrade.push_back(hash);\n-                }\n-\n-                //// debug print\n-                //printf(\"LoadWallet  %s\\n\", wtx.GetHash().ToString().c_str());\n-                //printf(\" %12I64d  %s  %s  %s\\n\",\n-                //    wtx.vout[0].nValue,\n-                //    DateTimeStrFormat(\"%x %H:%M:%S\", wtx.GetBlockTime()).c_str(),\n-                //    wtx.hashBlock.ToString().substr(0,20).c_str(),\n-                //    wtx.mapValue[\"message\"].c_str());\n-            }\n-            else if (strType == \"acentry\")\n-            {\n-                string strAccount;\n-                ssKey >> strAccount;\n-                uint64 nNumber;\n-                ssKey >> nNumber;\n-                if (nNumber > nAccountingEntryNumber)\n-                    nAccountingEntryNumber = nNumber;\n-            }\n-            else if (strType == \"key\" || strType == \"wkey\")\n-            {\n-                vector<unsigned char> vchPubKey;\n-                ssKey >> vchPubKey;\n-                CKey key;\n-                if (strType == \"key\")\n-                {\n-                    CPrivKey pkey;\n-                    ssValue >> pkey;\n-                    key.SetPubKey(vchPubKey);\n-                    key.SetPrivKey(pkey);\n-                    if (key.GetPubKey() != vchPubKey)\n-                    {\n-                        printf(\"Error reading wallet database: CPrivKey pubkey inconsistency\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                    if (!key.IsValid())\n-                    {\n-                        printf(\"Error reading wallet database: invalid CPrivKey\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                }\n-                else\n-                {\n-                    CWalletKey wkey;\n-                    ssValue >> wkey;\n-                    key.SetPubKey(vchPubKey);\n-                    key.SetPrivKey(wkey.vchPrivKey);\n-                    if (key.GetPubKey() != vchPubKey)\n-                    {\n-                        printf(\"Error reading wallet database: CWalletKey pubkey inconsistency\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                    if (!key.IsValid())\n-                    {\n-                        printf(\"Error reading wallet database: invalid CWalletKey\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                }\n-                if (!pwallet->LoadKey(key))\n-                {\n-                    printf(\"Error reading wallet database: LoadKey failed\\n\");\n-                    return DB_CORRUPT;\n-                }\n-            }\n-            else if (strType == \"mkey\")\n-            {\n-                unsigned int nID;\n-                ssKey >> nID;\n-                CMasterKey kMasterKey;\n-                ssValue >> kMasterKey;\n-                if(pwallet->mapMasterKeys.count(nID) != 0)\n-                {\n-                    printf(\"Error reading wallet database: duplicate CMasterKey id %u\\n\", nID);\n-                    return DB_CORRUPT;\n-                }\n-                pwallet->mapMasterKeys[nID] = kMasterKey;\n-                if (pwallet->nMasterKeyMaxID < nID)\n-                    pwallet->nMasterKeyMaxID = nID;\n-            }\n-            else if (strType == \"ckey\")\n-            {\n-                vector<unsigned char> vchPubKey;\n-                ssKey >> vchPubKey;\n-                vector<unsigned char> vchPrivKey;\n-                ssValue >> vchPrivKey;\n-                if (!pwallet->LoadCryptedKey(vchPubKey, vchPrivKey))\n-                {\n-                    printf(\"Error reading wallet database: LoadCryptedKey failed\\n\");\n-                    return DB_CORRUPT;\n-                }\n-                fIsEncrypted = true;\n-            }\n-            else if (strType == \"defaultkey\")\n-            {\n-                ssValue >> pwallet->vchDefaultKey;\n-            }\n-            else if (strType == \"pool\")\n-            {\n-                int64 nIndex;\n-                ssKey >> nIndex;\n-                pwallet->setKeyPool.insert(nIndex);\n-            }\n-            else if (strType == \"version\")\n-            {\n-                ssValue >> nFileVersion;\n-                if (nFileVersion == 10300)\n-                    nFileVersion = 300;\n-            }\n-            else if (strType == \"cscript\")\n-            {\n-                uint160 hash;\n-                ssKey >> hash;\n-                CScript script;\n-                ssValue >> script;\n-                if (!pwallet->LoadCScript(script))\n-                {\n-                    printf(\"Error reading wallet database: LoadCScript failed\\n\");\n-                    return DB_CORRUPT;\n-                }\n-            }\n-        }\n-        pcursor->close();\n-    }\n-\n-    BOOST_FOREACH(uint256 hash, vWalletUpgrade)\n-        WriteTx(hash, pwallet->mapWallet[hash]);\n-\n-    printf(\"nFileVersion = %d\\n\", nFileVersion);\n-\n-\n-    // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n-    if (fIsEncrypted && (nFileVersion == 40000 || nFileVersion == 50000))\n-        return DB_NEED_REWRITE;\n-\n-    if (nFileVersion < CLIENT_VERSION) // Update\n-        WriteVersion(CLIENT_VERSION);\n-\n-    return DB_LOAD_OK;\n-}\n-\n-void ThreadFlushWalletDB(void* parg)\n-{\n-    const string& strFile = ((const string*)parg)[0];\n-    static bool fOneThread;\n-    if (fOneThread)\n-        return;\n-    fOneThread = true;\n-    if (!GetBoolArg(\"-flushwallet\", true))\n-        return;\n-\n-    unsigned int nLastSeen = nWalletDBUpdated;\n-    unsigned int nLastFlushed = nWalletDBUpdated;\n-    int64 nLastWalletUpdate = GetTime();\n-    while (!fShutdown)\n-    {\n-        Sleep(500);\n-\n-        if (nLastSeen != nWalletDBUpdated)\n-        {\n-            nLastSeen = nWalletDBUpdated;\n-            nLastWalletUpdate = GetTime();\n-        }\n-\n-        if (nLastFlushed != nWalletDBUpdated && GetTime() - nLastWalletUpdate >= 2)\n-        {\n-            TRY_LOCK(cs_db,lockDb);\n-            if (lockDb)\n-            {\n-                // Don't do this if any databases are in use\n-                int nRefCount = 0;\n-                map<string, int>::iterator mi = mapFileUseCount.begin();\n-                while (mi != mapFileUseCount.end())\n-                {\n-                    nRefCount += (*mi).second;\n-                    mi++;\n-                }\n-\n-                if (nRefCount == 0 && !fShutdown)\n-                {\n-                    map<string, int>::iterator mi = mapFileUseCount.find(strFile);\n-                    if (mi != mapFileUseCount.end())\n-                    {\n-                        printf(\"%s \", DateTimeStrFormat(\"%x %H:%M:%S\", GetTime()).c_str());\n-                        printf(\"Flushing wallet.dat\\n\");\n-                        nLastFlushed = nWalletDBUpdated;\n-                        int64 nStart = GetTimeMillis();\n-\n-                        // Flush wallet.dat so it's self contained\n-                        CloseDb(strFile);\n-                        dbenv.txn_checkpoint(0, 0, 0);\n-                        dbenv.lsn_reset(strFile.c_str(), 0);\n-\n-                        mapFileUseCount.erase(mi++);\n-                        printf(\"Flushed wallet.dat %\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-bool BackupWallet(const CWallet& wallet, const string& strDest)\n-{\n-    if (!wallet.fFileBacked)\n-        return false;\n-    while (!fShutdown)\n-    {\n-        {\n-            LOCK(cs_db);\n-            if (!mapFileUseCount.count(wallet.strWalletFile) || mapFileUseCount[wallet.strWalletFile] == 0)\n-            {\n-                // Flush log data to the dat file\n-                CloseDb(wallet.strWalletFile);\n-                dbenv.txn_checkpoint(0, 0, 0);\n-                dbenv.lsn_reset(wallet.strWalletFile.c_str(), 0);\n-                mapFileUseCount.erase(wallet.strWalletFile);\n-\n-                // Copy wallet.dat\n-                filesystem::path pathSrc = GetDataDir() / wallet.strWalletFile;\n-                filesystem::path pathDest(strDest);\n-                if (filesystem::is_directory(pathDest))\n-                    pathDest /= wallet.strWalletFile;\n-\n-                try {\n-#if BOOST_VERSION >= 104000\n-                    filesystem::copy_file(pathSrc, pathDest, filesystem::copy_option::overwrite_if_exists);\n-#else\n-                    filesystem::copy_file(pathSrc, pathDest);\n-#endif\n-                    printf(\"copied wallet.dat to %s\\n\", pathDest.string().c_str());\n-                    return true;\n-                } catch(const filesystem::filesystem_error &e) {\n-                    printf(\"error copying wallet.dat to %s - %s\\n\", pathDest.string().c_str(), e.what());\n-                    return false;\n-                }\n-            }\n-        }\n-        Sleep(100);\n-    }\n-    return false;\n-}"
      },
      {
        "sha": "1cd162591a28793bf04bb6e83ece6170bbfe0a92",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 170,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eace6b1130ce7eb938476750159ec0baf752531/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eace6b1130ce7eb938476750159ec0baf752531/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=9eace6b1130ce7eb938476750159ec0baf752531",
        "patch": "@@ -7,16 +7,13 @@\n \n #include \"key.h\"\n #include \"main.h\"\n-#include \"wallet.h\"\n \n #include <map>\n #include <string>\n #include <vector>\n \n #include <db_cxx.h>\n \n-class CAccount;\n-class CAccountingEntry;\n class CAddress;\n class CAddrMan;\n class CBlockLocator;\n@@ -315,170 +312,4 @@ class CAddrDB : public CDB\n bool LoadAddresses();\n \n \n-\n-/** Error statuses for the wallet database */\n-enum DBErrors\n-{\n-    DB_LOAD_OK,\n-    DB_CORRUPT,\n-    DB_TOO_NEW,\n-    DB_LOAD_FAIL,\n-    DB_NEED_REWRITE\n-};\n-\n-/** Access to the wallet database (wallet.dat) */\n-class CWalletDB : public CDB\n-{\n-public:\n-    CWalletDB(std::string strFilename, const char* pszMode=\"r+\") : CDB(strFilename.c_str(), pszMode)\n-    {\n-    }\n-private:\n-    CWalletDB(const CWalletDB&);\n-    void operator=(const CWalletDB&);\n-public:\n-    bool ReadName(const std::string& strAddress, std::string& strName)\n-    {\n-        strName = \"\";\n-        return Read(std::make_pair(std::string(\"name\"), strAddress), strName);\n-    }\n-\n-    bool WriteName(const std::string& strAddress, const std::string& strName);\n-\n-    bool EraseName(const std::string& strAddress);\n-\n-    bool ReadTx(uint256 hash, CWalletTx& wtx)\n-    {\n-        return Read(std::make_pair(std::string(\"tx\"), hash), wtx);\n-    }\n-\n-    bool WriteTx(uint256 hash, const CWalletTx& wtx)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"tx\"), hash), wtx);\n-    }\n-\n-    bool EraseTx(uint256 hash)\n-    {\n-        nWalletDBUpdated++;\n-        return Erase(std::make_pair(std::string(\"tx\"), hash));\n-    }\n-\n-    bool ReadKey(const std::vector<unsigned char>& vchPubKey, CPrivKey& vchPrivKey)\n-    {\n-        vchPrivKey.clear();\n-        return Read(std::make_pair(std::string(\"key\"), vchPubKey), vchPrivKey);\n-    }\n-\n-    bool WriteKey(const std::vector<unsigned char>& vchPubKey, const CPrivKey& vchPrivKey)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"key\"), vchPubKey), vchPrivKey, false);\n-    }\n-\n-    bool WriteCryptedKey(const std::vector<unsigned char>& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, bool fEraseUnencryptedKey = true)\n-    {\n-        nWalletDBUpdated++;\n-        if (!Write(std::make_pair(std::string(\"ckey\"), vchPubKey), vchCryptedSecret, false))\n-            return false;\n-        if (fEraseUnencryptedKey)\n-        {\n-            Erase(std::make_pair(std::string(\"key\"), vchPubKey));\n-            Erase(std::make_pair(std::string(\"wkey\"), vchPubKey));\n-        }\n-        return true;\n-    }\n-\n-    bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n-    }\n-\n-    // Support for BIP 0013 : see https://en.bitcoin.it/wiki/BIP_0013\n-    bool ReadCScript(const uint160 &hash, CScript& redeemScript)\n-    {\n-        redeemScript.clear();\n-        return Read(std::make_pair(std::string(\"cscript\"), hash), redeemScript);\n-    }\n-\n-    bool WriteCScript(const uint160& hash, const CScript& redeemScript)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"cscript\"), hash), redeemScript, false);\n-    }\n-\n-    bool WriteBestBlock(const CBlockLocator& locator)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::string(\"bestblock\"), locator);\n-    }\n-\n-    bool ReadBestBlock(CBlockLocator& locator)\n-    {\n-        return Read(std::string(\"bestblock\"), locator);\n-    }\n-\n-    bool ReadDefaultKey(std::vector<unsigned char>& vchPubKey)\n-    {\n-        vchPubKey.clear();\n-        return Read(std::string(\"defaultkey\"), vchPubKey);\n-    }\n-\n-    bool WriteDefaultKey(const std::vector<unsigned char>& vchPubKey)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::string(\"defaultkey\"), vchPubKey);\n-    }\n-\n-    bool ReadPool(int64 nPool, CKeyPool& keypool)\n-    {\n-        return Read(std::make_pair(std::string(\"pool\"), nPool), keypool);\n-    }\n-\n-    bool WritePool(int64 nPool, const CKeyPool& keypool)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"pool\"), nPool), keypool);\n-    }\n-\n-    bool ErasePool(int64 nPool)\n-    {\n-        nWalletDBUpdated++;\n-        return Erase(std::make_pair(std::string(\"pool\"), nPool));\n-    }\n-\n-    // Settings are no longer stored in wallet.dat; these are\n-    // used only for backwards compatibility:\n-    template<typename T>\n-    bool ReadSetting(const std::string& strKey, T& value)\n-    {\n-        return Read(std::make_pair(std::string(\"setting\"), strKey), value);\n-    }\n-    template<typename T>\n-    bool WriteSetting(const std::string& strKey, const T& value)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"setting\"), strKey), value);\n-    }\n-    bool EraseSetting(const std::string& strKey)\n-    {\n-        nWalletDBUpdated++;\n-        return Erase(std::make_pair(std::string(\"setting\"), strKey));\n-    }\n-\n-    bool WriteMinVersion(int nVersion)\n-    {\n-        return Write(std::string(\"minversion\"), nVersion);\n-    }\n-\n-    bool ReadAccount(const std::string& strAccount, CAccount& account);\n-    bool WriteAccount(const std::string& strAccount, const CAccount& account);\n-    bool WriteAccountingEntry(const CAccountingEntry& acentry);\n-    int64 GetAccountCreditDebit(const std::string& strAccount);\n-    void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n-\n-    int LoadWallet(CWallet* pwallet);\n-};\n-\n-#endif\n+#endif // BITCOIN_DB_H"
      },
      {
        "sha": "886b3ab609e30b70aed9e30d4f54fd4e201f17fd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eace6b1130ce7eb938476750159ec0baf752531/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eace6b1130ce7eb938476750159ec0baf752531/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9eace6b1130ce7eb938476750159ec0baf752531",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n #include \"db.h\"\n+#include \"walletdb.h\"\n #include \"bitcoinrpc.h\"\n #include \"net.h\"\n #include \"init.h\""
      },
      {
        "sha": "b6bce014ec51c1258eac9a9657fada4b3c74176a",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eace6b1130ce7eb938476750159ec0baf752531/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eace6b1130ce7eb938476750159ec0baf752531/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=9eace6b1130ce7eb938476750159ec0baf752531",
        "patch": "@@ -17,13 +17,11 @@\n \n #include <list>\n \n+class CWallet;\n class CBlock;\n class CBlockIndex;\n-class CWalletTx;\n-class CWallet;\n class CKeyItem;\n class CReserveKey;\n-class CWalletDB;\n \n class CAddress;\n class CInv;"
      },
      {
        "sha": "1ea65cd2e54e6ba0a68ad998bb7123075946fbca",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eace6b1130ce7eb938476750159ec0baf752531/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eace6b1130ce7eb938476750159ec0baf752531/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=9eace6b1130ce7eb938476750159ec0baf752531",
        "patch": "@@ -62,6 +62,7 @@ OBJS= \\\n     obj/script.o \\\n     obj/util.o \\\n     obj/wallet.o \\\n+    obj/walletdb.o \\\n     obj/noui.o\n \n all: bitcoind.exe"
      },
      {
        "sha": "5584df560354756092eabc99b326d07666561df9",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eace6b1130ce7eb938476750159ec0baf752531/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eace6b1130ce7eb938476750159ec0baf752531/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=9eace6b1130ce7eb938476750159ec0baf752531",
        "patch": "@@ -59,6 +59,7 @@ OBJS= \\\n     obj/script.o \\\n     obj/util.o \\\n     obj/wallet.o \\\n+    obj/walletdb.o \\\n     obj/noui.o\n \n "
      },
      {
        "sha": "aaac6700bddb35b37f61c2b3aa6549ddcaf9a12c",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eace6b1130ce7eb938476750159ec0baf752531/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eace6b1130ce7eb938476750159ec0baf752531/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=9eace6b1130ce7eb938476750159ec0baf752531",
        "patch": "@@ -84,6 +84,7 @@ OBJS= \\\n     obj/script.o \\\n     obj/util.o \\\n     obj/wallet.o \\\n+    obj/walletdb.o \\\n     obj/noui.o\n \n ifdef USE_UPNP"
      },
      {
        "sha": "fc901ca02c12e253b135c5e520b4afb30ed6694a",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eace6b1130ce7eb938476750159ec0baf752531/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eace6b1130ce7eb938476750159ec0baf752531/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=9eace6b1130ce7eb938476750159ec0baf752531",
        "patch": "@@ -103,6 +103,7 @@ OBJS= \\\n     obj/script.o \\\n     obj/util.o \\\n     obj/wallet.o \\\n+    obj/walletdb.o \\\n     obj/noui.o\n \n "
      },
      {
        "sha": "f7d9b0da2ea8b8f7e2ca09832f84a3565a5908db",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eace6b1130ce7eb938476750159ec0baf752531/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eace6b1130ce7eb938476750159ec0baf752531/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=9eace6b1130ce7eb938476750159ec0baf752531",
        "patch": "@@ -3,7 +3,7 @@\n #include <QSettings>\n \n #include \"init.h\"\n-#include \"db.h\"\n+#include \"walletdb.h\"\n \n OptionsModel::OptionsModel(QObject *parent) :\n     QAbstractListModel(parent)"
      },
      {
        "sha": "e23a2bb0970db21efe9c333a5d5647a5849c210f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eace6b1130ce7eb938476750159ec0baf752531/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eace6b1130ce7eb938476750159ec0baf752531/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=9eace6b1130ce7eb938476750159ec0baf752531",
        "patch": "@@ -5,7 +5,7 @@\n #include \"transactiontablemodel.h\"\n \n #include \"wallet.h\"\n-#include \"db.h\" // for BackupWallet\n+#include \"walletdb.h\" // for BackupWallet\n \n #include <QSet>\n "
      },
      {
        "sha": "f8338b787f18464ac643024ae527ea2fca79d4fa",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eace6b1130ce7eb938476750159ec0baf752531/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eace6b1130ce7eb938476750159ec0baf752531/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=9eace6b1130ce7eb938476750159ec0baf752531",
        "patch": "@@ -3,7 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"db.h\"\n+#include \"wallet.h\"\n+#include \"walletdb.h\"\n #include \"crypter.h\"\n \n using namespace std;"
      },
      {
        "sha": "dd8069a5b1fee388765f54540a5c968fd56c1161",
        "filename": "src/walletdb.cpp",
        "status": "added",
        "additions": 428,
        "deletions": 0,
        "changes": 428,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eace6b1130ce7eb938476750159ec0baf752531/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eace6b1130ce7eb938476750159ec0baf752531/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=9eace6b1130ce7eb938476750159ec0baf752531",
        "patch": "@@ -0,0 +1,428 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"walletdb.h\"\n+#include \"wallet.h\"\n+#include <boost/filesystem.hpp>\n+\n+using namespace std;\n+using namespace boost;\n+\n+\n+static uint64 nAccountingEntryNumber = 0;\n+\n+extern CCriticalSection cs_db;\n+extern map<string, int> mapFileUseCount;\n+extern void CloseDb(const string& strFile);\n+\n+//\n+// CWalletDB\n+//\n+\n+bool CWalletDB::WriteName(const string& strAddress, const string& strName)\n+{\n+    nWalletDBUpdated++;\n+    return Write(make_pair(string(\"name\"), strAddress), strName);\n+}\n+\n+bool CWalletDB::EraseName(const string& strAddress)\n+{\n+    // This should only be used for sending addresses, never for receiving addresses,\n+    // receiving addresses must always have an address book entry if they're not change return.\n+    nWalletDBUpdated++;\n+    return Erase(make_pair(string(\"name\"), strAddress));\n+}\n+\n+bool CWalletDB::ReadAccount(const string& strAccount, CAccount& account)\n+{\n+    account.SetNull();\n+    return Read(make_pair(string(\"acc\"), strAccount), account);\n+}\n+\n+bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)\n+{\n+    return Write(make_pair(string(\"acc\"), strAccount), account);\n+}\n+\n+bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n+{\n+    return Write(boost::make_tuple(string(\"acentry\"), acentry.strAccount, ++nAccountingEntryNumber), acentry);\n+}\n+\n+int64 CWalletDB::GetAccountCreditDebit(const string& strAccount)\n+{\n+    list<CAccountingEntry> entries;\n+    ListAccountCreditDebit(strAccount, entries);\n+\n+    int64 nCreditDebit = 0;\n+    BOOST_FOREACH (const CAccountingEntry& entry, entries)\n+        nCreditDebit += entry.nCreditDebit;\n+\n+    return nCreditDebit;\n+}\n+\n+void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountingEntry>& entries)\n+{\n+    bool fAllAccounts = (strAccount == \"*\");\n+\n+    Dbc* pcursor = GetCursor();\n+    if (!pcursor)\n+        throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : cannot create DB cursor\");\n+    unsigned int fFlags = DB_SET_RANGE;\n+    loop\n+    {\n+        // Read next record\n+        CDataStream ssKey;\n+        if (fFlags == DB_SET_RANGE)\n+            ssKey << boost::make_tuple(string(\"acentry\"), (fAllAccounts? string(\"\") : strAccount), uint64(0));\n+        CDataStream ssValue;\n+        int ret = ReadAtCursor(pcursor, ssKey, ssValue, fFlags);\n+        fFlags = DB_NEXT;\n+        if (ret == DB_NOTFOUND)\n+            break;\n+        else if (ret != 0)\n+        {\n+            pcursor->close();\n+            throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : error scanning DB\");\n+        }\n+\n+        // Unserialize\n+        string strType;\n+        ssKey >> strType;\n+        if (strType != \"acentry\")\n+            break;\n+        CAccountingEntry acentry;\n+        ssKey >> acentry.strAccount;\n+        if (!fAllAccounts && acentry.strAccount != strAccount)\n+            break;\n+\n+        ssValue >> acentry;\n+        entries.push_back(acentry);\n+    }\n+\n+    pcursor->close();\n+}\n+\n+\n+int CWalletDB::LoadWallet(CWallet* pwallet)\n+{\n+    pwallet->vchDefaultKey.clear();\n+    int nFileVersion = 0;\n+    vector<uint256> vWalletUpgrade;\n+    bool fIsEncrypted = false;\n+\n+    //// todo: shouldn't we catch exceptions and try to recover and continue?\n+    {\n+        LOCK(pwallet->cs_wallet);\n+        int nMinVersion = 0;\n+        if (Read((string)\"minversion\", nMinVersion))\n+        {\n+            if (nMinVersion > CLIENT_VERSION)\n+                return DB_TOO_NEW;\n+            pwallet->LoadMinVersion(nMinVersion);\n+        }\n+\n+        // Get cursor\n+        Dbc* pcursor = GetCursor();\n+        if (!pcursor)\n+        {\n+            printf(\"Error getting wallet database cursor\\n\");\n+            return DB_CORRUPT;\n+        }\n+\n+        loop\n+        {\n+            // Read next record\n+            CDataStream ssKey;\n+            CDataStream ssValue;\n+            int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n+            if (ret == DB_NOTFOUND)\n+                break;\n+            else if (ret != 0)\n+            {\n+                printf(\"Error reading next record from wallet database\\n\");\n+                return DB_CORRUPT;\n+            }\n+\n+            // Unserialize\n+            // Taking advantage of the fact that pair serialization\n+            // is just the two items serialized one after the other\n+            string strType;\n+            ssKey >> strType;\n+            if (strType == \"name\")\n+            {\n+                string strAddress;\n+                ssKey >> strAddress;\n+                ssValue >> pwallet->mapAddressBook[strAddress];\n+            }\n+            else if (strType == \"tx\")\n+            {\n+                uint256 hash;\n+                ssKey >> hash;\n+                CWalletTx& wtx = pwallet->mapWallet[hash];\n+                ssValue >> wtx;\n+                wtx.BindWallet(pwallet);\n+\n+                if (wtx.GetHash() != hash)\n+                    printf(\"Error in wallet.dat, hash mismatch\\n\");\n+\n+                // Undo serialize changes in 31600\n+                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+                {\n+                    if (!ssValue.empty())\n+                    {\n+                        char fTmp;\n+                        char fUnused;\n+                        ssValue >> fTmp >> fUnused >> wtx.strFromAccount;\n+                        printf(\"LoadWallet() upgrading tx ver=%d %d '%s' %s\\n\", wtx.fTimeReceivedIsTxTime, fTmp, wtx.strFromAccount.c_str(), hash.ToString().c_str());\n+                        wtx.fTimeReceivedIsTxTime = fTmp;\n+                    }\n+                    else\n+                    {\n+                        printf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString().c_str());\n+                        wtx.fTimeReceivedIsTxTime = 0;\n+                    }\n+                    vWalletUpgrade.push_back(hash);\n+                }\n+\n+                //// debug print\n+                //printf(\"LoadWallet  %s\\n\", wtx.GetHash().ToString().c_str());\n+                //printf(\" %12I64d  %s  %s  %s\\n\",\n+                //    wtx.vout[0].nValue,\n+                //    DateTimeStrFormat(\"%x %H:%M:%S\", wtx.GetBlockTime()).c_str(),\n+                //    wtx.hashBlock.ToString().substr(0,20).c_str(),\n+                //    wtx.mapValue[\"message\"].c_str());\n+            }\n+            else if (strType == \"acentry\")\n+            {\n+                string strAccount;\n+                ssKey >> strAccount;\n+                uint64 nNumber;\n+                ssKey >> nNumber;\n+                if (nNumber > nAccountingEntryNumber)\n+                    nAccountingEntryNumber = nNumber;\n+            }\n+            else if (strType == \"key\" || strType == \"wkey\")\n+            {\n+                vector<unsigned char> vchPubKey;\n+                ssKey >> vchPubKey;\n+                CKey key;\n+                if (strType == \"key\")\n+                {\n+                    CPrivKey pkey;\n+                    ssValue >> pkey;\n+                    key.SetPubKey(vchPubKey);\n+                    key.SetPrivKey(pkey);\n+                    if (key.GetPubKey() != vchPubKey)\n+                    {\n+                        printf(\"Error reading wallet database: CPrivKey pubkey inconsistency\\n\");\n+                        return DB_CORRUPT;\n+                    }\n+                    if (!key.IsValid())\n+                    {\n+                        printf(\"Error reading wallet database: invalid CPrivKey\\n\");\n+                        return DB_CORRUPT;\n+                    }\n+                }\n+                else\n+                {\n+                    CWalletKey wkey;\n+                    ssValue >> wkey;\n+                    key.SetPubKey(vchPubKey);\n+                    key.SetPrivKey(wkey.vchPrivKey);\n+                    if (key.GetPubKey() != vchPubKey)\n+                    {\n+                        printf(\"Error reading wallet database: CWalletKey pubkey inconsistency\\n\");\n+                        return DB_CORRUPT;\n+                    }\n+                    if (!key.IsValid())\n+                    {\n+                        printf(\"Error reading wallet database: invalid CWalletKey\\n\");\n+                        return DB_CORRUPT;\n+                    }\n+                }\n+                if (!pwallet->LoadKey(key))\n+                {\n+                    printf(\"Error reading wallet database: LoadKey failed\\n\");\n+                    return DB_CORRUPT;\n+                }\n+            }\n+            else if (strType == \"mkey\")\n+            {\n+                unsigned int nID;\n+                ssKey >> nID;\n+                CMasterKey kMasterKey;\n+                ssValue >> kMasterKey;\n+                if(pwallet->mapMasterKeys.count(nID) != 0)\n+                {\n+                    printf(\"Error reading wallet database: duplicate CMasterKey id %u\\n\", nID);\n+                    return DB_CORRUPT;\n+                }\n+                pwallet->mapMasterKeys[nID] = kMasterKey;\n+                if (pwallet->nMasterKeyMaxID < nID)\n+                    pwallet->nMasterKeyMaxID = nID;\n+            }\n+            else if (strType == \"ckey\")\n+            {\n+                vector<unsigned char> vchPubKey;\n+                ssKey >> vchPubKey;\n+                vector<unsigned char> vchPrivKey;\n+                ssValue >> vchPrivKey;\n+                if (!pwallet->LoadCryptedKey(vchPubKey, vchPrivKey))\n+                {\n+                    printf(\"Error reading wallet database: LoadCryptedKey failed\\n\");\n+                    return DB_CORRUPT;\n+                }\n+                fIsEncrypted = true;\n+            }\n+            else if (strType == \"defaultkey\")\n+            {\n+                ssValue >> pwallet->vchDefaultKey;\n+            }\n+            else if (strType == \"pool\")\n+            {\n+                int64 nIndex;\n+                ssKey >> nIndex;\n+                pwallet->setKeyPool.insert(nIndex);\n+            }\n+            else if (strType == \"version\")\n+            {\n+                ssValue >> nFileVersion;\n+                if (nFileVersion == 10300)\n+                    nFileVersion = 300;\n+            }\n+            else if (strType == \"cscript\")\n+            {\n+                uint160 hash;\n+                ssKey >> hash;\n+                CScript script;\n+                ssValue >> script;\n+                if (!pwallet->LoadCScript(script))\n+                {\n+                    printf(\"Error reading wallet database: LoadCScript failed\\n\");\n+                    return DB_CORRUPT;\n+                }\n+            }\n+        }\n+        pcursor->close();\n+    }\n+\n+    BOOST_FOREACH(uint256 hash, vWalletUpgrade)\n+        WriteTx(hash, pwallet->mapWallet[hash]);\n+\n+    printf(\"nFileVersion = %d\\n\", nFileVersion);\n+\n+\n+    // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+    if (fIsEncrypted && (nFileVersion == 40000 || nFileVersion == 50000))\n+        return DB_NEED_REWRITE;\n+\n+    if (nFileVersion < CLIENT_VERSION) // Update\n+        WriteVersion(CLIENT_VERSION);\n+\n+    return DB_LOAD_OK;\n+}\n+\n+void ThreadFlushWalletDB(void* parg)\n+{\n+    const string& strFile = ((const string*)parg)[0];\n+    static bool fOneThread;\n+    if (fOneThread)\n+        return;\n+    fOneThread = true;\n+    if (!GetBoolArg(\"-flushwallet\", true))\n+        return;\n+\n+    unsigned int nLastSeen = nWalletDBUpdated;\n+    unsigned int nLastFlushed = nWalletDBUpdated;\n+    int64 nLastWalletUpdate = GetTime();\n+    while (!fShutdown)\n+    {\n+        Sleep(500);\n+\n+        if (nLastSeen != nWalletDBUpdated)\n+        {\n+            nLastSeen = nWalletDBUpdated;\n+            nLastWalletUpdate = GetTime();\n+        }\n+\n+        if (nLastFlushed != nWalletDBUpdated && GetTime() - nLastWalletUpdate >= 2)\n+        {\n+            TRY_LOCK(cs_db,lockDb);\n+            if (lockDb)\n+            {\n+                // Don't do this if any databases are in use\n+                int nRefCount = 0;\n+                map<string, int>::iterator mi = mapFileUseCount.begin();\n+                while (mi != mapFileUseCount.end())\n+                {\n+                    nRefCount += (*mi).second;\n+                    mi++;\n+                }\n+\n+                if (nRefCount == 0 && !fShutdown)\n+                {\n+                    map<string, int>::iterator mi = mapFileUseCount.find(strFile);\n+                    if (mi != mapFileUseCount.end())\n+                    {\n+                        printf(\"%s \", DateTimeStrFormat(\"%x %H:%M:%S\", GetTime()).c_str());\n+                        printf(\"Flushing wallet.dat\\n\");\n+                        nLastFlushed = nWalletDBUpdated;\n+                        int64 nStart = GetTimeMillis();\n+\n+                        // Flush wallet.dat so it's self contained\n+                        CloseDb(strFile);\n+                        dbenv.txn_checkpoint(0, 0, 0);\n+                        dbenv.lsn_reset(strFile.c_str(), 0);\n+\n+                        mapFileUseCount.erase(mi++);\n+                        printf(\"Flushed wallet.dat %\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+bool BackupWallet(const CWallet& wallet, const string& strDest)\n+{\n+    if (!wallet.fFileBacked)\n+        return false;\n+    while (!fShutdown)\n+    {\n+        {\n+            LOCK(cs_db);\n+            if (!mapFileUseCount.count(wallet.strWalletFile) || mapFileUseCount[wallet.strWalletFile] == 0)\n+            {\n+                // Flush log data to the dat file\n+                CloseDb(wallet.strWalletFile);\n+                dbenv.txn_checkpoint(0, 0, 0);\n+                dbenv.lsn_reset(wallet.strWalletFile.c_str(), 0);\n+                mapFileUseCount.erase(wallet.strWalletFile);\n+\n+                // Copy wallet.dat\n+                filesystem::path pathSrc = GetDataDir() / wallet.strWalletFile;\n+                filesystem::path pathDest(strDest);\n+                if (filesystem::is_directory(pathDest))\n+                    pathDest /= wallet.strWalletFile;\n+\n+                try {\n+#if BOOST_VERSION >= 104000\n+                    filesystem::copy_file(pathSrc, pathDest, filesystem::copy_option::overwrite_if_exists);\n+#else\n+                    filesystem::copy_file(pathSrc, pathDest);\n+#endif\n+                    printf(\"copied wallet.dat to %s\\n\", pathDest.string().c_str());\n+                    return true;\n+                } catch(const filesystem::filesystem_error &e) {\n+                    printf(\"error copying wallet.dat to %s - %s\\n\", pathDest.string().c_str(), e.what());\n+                    return false;\n+                }\n+            }\n+        }\n+        Sleep(100);\n+    }\n+    return false;\n+}"
      },
      {
        "sha": "46ba7967ca135a2455d7c30cc876273f4c5a1260",
        "filename": "src/walletdb.h",
        "status": "added",
        "additions": 179,
        "deletions": 0,
        "changes": 179,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eace6b1130ce7eb938476750159ec0baf752531/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eace6b1130ce7eb938476750159ec0baf752531/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=9eace6b1130ce7eb938476750159ec0baf752531",
        "patch": "@@ -0,0 +1,179 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_WALLETDB_H\n+#define BITCOIN_WALLETDB_H\n+\n+#include \"db.h\"\n+\n+class CKeyPool;\n+class CAccount;\n+class CAccountingEntry;\n+\n+/** Error statuses for the wallet database */\n+enum DBErrors\n+{\n+    DB_LOAD_OK,\n+    DB_CORRUPT,\n+    DB_TOO_NEW,\n+    DB_LOAD_FAIL,\n+    DB_NEED_REWRITE\n+};\n+\n+/** Access to the wallet database (wallet.dat) */\n+class CWalletDB : public CDB\n+{\n+public:\n+    CWalletDB(std::string strFilename, const char* pszMode=\"r+\") : CDB(strFilename.c_str(), pszMode)\n+    {\n+    }\n+private:\n+    CWalletDB(const CWalletDB&);\n+    void operator=(const CWalletDB&);\n+public:\n+    bool ReadName(const std::string& strAddress, std::string& strName)\n+    {\n+        strName = \"\";\n+        return Read(std::make_pair(std::string(\"name\"), strAddress), strName);\n+    }\n+\n+    bool WriteName(const std::string& strAddress, const std::string& strName);\n+\n+    bool EraseName(const std::string& strAddress);\n+\n+    bool ReadTx(uint256 hash, CWalletTx& wtx)\n+    {\n+        return Read(std::make_pair(std::string(\"tx\"), hash), wtx);\n+    }\n+\n+    bool WriteTx(uint256 hash, const CWalletTx& wtx)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::make_pair(std::string(\"tx\"), hash), wtx);\n+    }\n+\n+    bool EraseTx(uint256 hash)\n+    {\n+        nWalletDBUpdated++;\n+        return Erase(std::make_pair(std::string(\"tx\"), hash));\n+    }\n+\n+    bool ReadKey(const std::vector<unsigned char>& vchPubKey, CPrivKey& vchPrivKey)\n+    {\n+        vchPrivKey.clear();\n+        return Read(std::make_pair(std::string(\"key\"), vchPubKey), vchPrivKey);\n+    }\n+\n+    bool WriteKey(const std::vector<unsigned char>& vchPubKey, const CPrivKey& vchPrivKey)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::make_pair(std::string(\"key\"), vchPubKey), vchPrivKey, false);\n+    }\n+\n+    bool WriteCryptedKey(const std::vector<unsigned char>& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, bool fEraseUnencryptedKey = true)\n+    {\n+        nWalletDBUpdated++;\n+        if (!Write(std::make_pair(std::string(\"ckey\"), vchPubKey), vchCryptedSecret, false))\n+            return false;\n+        if (fEraseUnencryptedKey)\n+        {\n+            Erase(std::make_pair(std::string(\"key\"), vchPubKey));\n+            Erase(std::make_pair(std::string(\"wkey\"), vchPubKey));\n+        }\n+        return true;\n+    }\n+\n+    bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n+    }\n+\n+    // Support for BIP 0013 : see https://en.bitcoin.it/wiki/BIP_0013\n+    bool ReadCScript(const uint160 &hash, CScript& redeemScript)\n+    {\n+        redeemScript.clear();\n+        return Read(std::make_pair(std::string(\"cscript\"), hash), redeemScript);\n+    }\n+\n+    bool WriteCScript(const uint160& hash, const CScript& redeemScript)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::make_pair(std::string(\"cscript\"), hash), redeemScript, false);\n+    }\n+\n+    bool WriteBestBlock(const CBlockLocator& locator)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::string(\"bestblock\"), locator);\n+    }\n+\n+    bool ReadBestBlock(CBlockLocator& locator)\n+    {\n+        return Read(std::string(\"bestblock\"), locator);\n+    }\n+\n+    bool ReadDefaultKey(std::vector<unsigned char>& vchPubKey)\n+    {\n+        vchPubKey.clear();\n+        return Read(std::string(\"defaultkey\"), vchPubKey);\n+    }\n+\n+    bool WriteDefaultKey(const std::vector<unsigned char>& vchPubKey)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::string(\"defaultkey\"), vchPubKey);\n+    }\n+\n+    bool ReadPool(int64 nPool, CKeyPool& keypool)\n+    {\n+        return Read(std::make_pair(std::string(\"pool\"), nPool), keypool);\n+    }\n+\n+    bool WritePool(int64 nPool, const CKeyPool& keypool)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::make_pair(std::string(\"pool\"), nPool), keypool);\n+    }\n+\n+    bool ErasePool(int64 nPool)\n+    {\n+        nWalletDBUpdated++;\n+        return Erase(std::make_pair(std::string(\"pool\"), nPool));\n+    }\n+\n+    // Settings are no longer stored in wallet.dat; these are\n+    // used only for backwards compatibility:\n+    template<typename T>\n+    bool ReadSetting(const std::string& strKey, T& value)\n+    {\n+        return Read(std::make_pair(std::string(\"setting\"), strKey), value);\n+    }\n+    template<typename T>\n+    bool WriteSetting(const std::string& strKey, const T& value)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::make_pair(std::string(\"setting\"), strKey), value);\n+    }\n+    bool EraseSetting(const std::string& strKey)\n+    {\n+        nWalletDBUpdated++;\n+        return Erase(std::make_pair(std::string(\"setting\"), strKey));\n+    }\n+\n+    bool WriteMinVersion(int nVersion)\n+    {\n+        return Write(std::string(\"minversion\"), nVersion);\n+    }\n+\n+    bool ReadAccount(const std::string& strAccount, CAccount& account);\n+    bool WriteAccount(const std::string& strAccount, const CAccount& account);\n+    bool WriteAccountingEntry(const CAccountingEntry& acentry);\n+    int64 GetAccountCreditDebit(const std::string& strAccount);\n+    void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n+\n+    int LoadWallet(CWallet* pwallet);\n+};\n+\n+#endif // BITCOIN_WALLETDB_H"
      }
    ]
  },
  {
    "sha": "ccd65d426156c3d5b7a8f1123210decd1f06fe42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2Q2NWQ0MjYxNTZjM2Q1YjdhOGYxMTIzMjEwZGVjZDFmMDZmZTQy",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@garzik.org",
        "date": "2012-04-15T22:20:05Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-17T18:02:38Z"
      },
      "message": "Move proto version to version.h.  Reduce header deps a bit more.",
      "tree": {
        "sha": "6dc2f45f16ce625fae84fad2bda4fd2511d752db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6dc2f45f16ce625fae84fad2bda4fd2511d752db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccd65d426156c3d5b7a8f1123210decd1f06fe42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccd65d426156c3d5b7a8f1123210decd1f06fe42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccd65d426156c3d5b7a8f1123210decd1f06fe42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccd65d426156c3d5b7a8f1123210decd1f06fe42/comments",
    "author": null,
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9eace6b1130ce7eb938476750159ec0baf752531",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9eace6b1130ce7eb938476750159ec0baf752531",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9eace6b1130ce7eb938476750159ec0baf752531"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7652df66ae5cc641425da6134ad9bacf12ad8538",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccd65d426156c3d5b7a8f1123210decd1f06fe42/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccd65d426156c3d5b7a8f1123210decd1f06fe42/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=ccd65d426156c3d5b7a8f1123210decd1f06fe42",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"netbase.h\"\n #include \"protocol.h\"\n+#include \"util.h\"\n \n \n #include <map>"
      },
      {
        "sha": "f7331c19233d7a22742f83af9c2fe003d509e741",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccd65d426156c3d5b7a8f1123210decd1f06fe42/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccd65d426156c3d5b7a8f1123210decd1f06fe42/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=ccd65d426156c3d5b7a8f1123210decd1f06fe42",
        "patch": "@@ -12,7 +12,6 @@\n \n #include \"serialize.h\"\n #include \"netbase.h\"\n-#include \"util.h\"\n #include <string>\n #include \"uint256.h\"\n "
      },
      {
        "sha": "3524580532d6bc8ed270ad3b7b3e1673aa64fb31",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccd65d426156c3d5b7a8f1123210decd1f06fe42/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccd65d426156c3d5b7a8f1123210decd1f06fe42/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=ccd65d426156c3d5b7a8f1123210decd1f06fe42",
        "patch": "@@ -5,12 +5,13 @@\n #ifndef BITCOIN_UINT256_H\n #define BITCOIN_UINT256_H\n \n-#include \"serialize.h\"\n-\n #include <limits.h>\n+#include <string.h>\n #include <string>\n #include <vector>\n \n+#include \"version.h\"\n+\n typedef long long  int64;\n typedef unsigned long long  uint64;\n "
      }
    ]
  },
  {
    "sha": "6b6aaa1698838278a547f16a15e635bd58ec867d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjZhYWExNjk4ODM4Mjc4YTU0N2YxNmExNWU2MzViZDU4ZWM4Njdk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-16T12:56:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-17T18:03:42Z"
      },
      "message": "Further reduce header dependencies\n\nThis commit removes the dependency of serialize.h on PROTOCOL_VERSION,\nand makes this parameter required instead of implicit. This is much saner,\nas it makes the places where changing a version number can have an\ninfluence obvious.",
      "tree": {
        "sha": "62a79e33a866c2a92f548cecb6148c7339f8beaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62a79e33a866c2a92f548cecb6148c7339f8beaf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b6aaa1698838278a547f16a15e635bd58ec867d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b6aaa1698838278a547f16a15e635bd58ec867d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b6aaa1698838278a547f16a15e635bd58ec867d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b6aaa1698838278a547f16a15e635bd58ec867d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ccd65d426156c3d5b7a8f1123210decd1f06fe42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccd65d426156c3d5b7a8f1123210decd1f06fe42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ccd65d426156c3d5b7a8f1123210decd1f06fe42"
      }
    ],
    "stats": {
      "total": 206,
      "additions": 101,
      "deletions": 105
    },
    "files": [
      {
        "sha": "345261e229fb0852aba752c1d21899585bf1016f",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -8,12 +8,12 @@ using namespace std;\n \n int CAddrInfo::GetTriedBucket(const std::vector<unsigned char> &nKey) const\n {\n-    CDataStream ss1(SER_GETHASH);\n+    CDataStream ss1(SER_GETHASH, 0);\n     std::vector<unsigned char> vchKey = GetKey();\n     ss1 << nKey << vchKey;\n     uint64 hash1 = Hash(ss1.begin(), ss1.end()).Get64();\n \n-    CDataStream ss2(SER_GETHASH);\n+    CDataStream ss2(SER_GETHASH, 0);\n     std::vector<unsigned char> vchGroupKey = GetGroup();\n     ss2 << nKey << vchGroupKey << (hash1 % ADDRMAN_TRIED_BUCKETS_PER_GROUP);\n     uint64 hash2 = Hash(ss2.begin(), ss2.end()).Get64();\n@@ -22,13 +22,13 @@ int CAddrInfo::GetTriedBucket(const std::vector<unsigned char> &nKey) const\n \n int CAddrInfo::GetNewBucket(const std::vector<unsigned char> &nKey, const CNetAddr& src) const\n {\n-    CDataStream ss1(SER_GETHASH);\n+    CDataStream ss1(SER_GETHASH, 0);\n     std::vector<unsigned char> vchGroupKey = GetGroup();\n     std::vector<unsigned char> vchSourceGroupKey = src.GetGroup();\n     ss1 << nKey << vchGroupKey << vchSourceGroupKey;\n     uint64 hash1 = Hash(ss1.begin(), ss1.end()).Get64();\n \n-    CDataStream ss2(SER_GETHASH);\n+    CDataStream ss2(SER_GETHASH, 0);\n     ss2 << nKey << vchSourceGroupKey << (hash1 % ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP);\n     uint64 hash2 = Hash(ss2.begin(), ss2.end()).Get64();\n     return hash2 % ADDRMAN_NEW_BUCKET_COUNT;"
      },
      {
        "sha": "90ce34b05b50c7d700d314b6c51e9338bc0ea016",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -19,7 +19,6 @@\n #include <vector>\n #include \"bignum.h\"\n #include \"key.h\"\n-#include \"util.h\"\n \n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n "
      },
      {
        "sha": "b7d00c40cd1492e67be1d2a38b20934fa9a7d36b",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -142,7 +142,7 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)\n {\n     Object result;\n     result.push_back(Pair(\"hash\", block.GetHash().GetHex()));\n-    result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK)));\n+    result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n     result.push_back(Pair(\"height\", blockindex->nHeight));\n     result.push_back(Pair(\"version\", block.nVersion));\n     result.push_back(Pair(\"merkleroot\", block.hashMerkleRoot.GetHex()));\n@@ -602,7 +602,7 @@ Value signmessage(const Array& params, bool fHelp)\n     if (!pwalletMain->GetKey(addr, key))\n         throw JSONRPCError(-4, \"Private key not available\");\n \n-    CDataStream ss(SER_GETHASH);\n+    CDataStream ss(SER_GETHASH, 0);\n     ss << strMessageMagic;\n     ss << strMessage;\n \n@@ -634,7 +634,7 @@ Value verifymessage(const Array& params, bool fHelp)\n     if (fInvalid)\n         throw JSONRPCError(-5, \"Malformed base64 encoding\");\n \n-    CDataStream ss(SER_GETHASH);\n+    CDataStream ss(SER_GETHASH, 0);\n     ss << strMessageMagic;\n     ss << strMessage;\n \n@@ -1921,7 +1921,7 @@ Value getmemorypool(const Array& params, bool fHelp)\n             if(tx.IsCoinBase())\n                 continue;\n \n-            CDataStream ssTx;\n+            CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n             ssTx << tx;\n \n             transactions.push_back(HexStr(ssTx.begin(), ssTx.end()));\n@@ -1943,7 +1943,7 @@ Value getmemorypool(const Array& params, bool fHelp)\n     else\n     {\n         // Parse parameters\n-        CDataStream ssBlock(ParseHex(params[0].get_str()));\n+        CDataStream ssBlock(ParseHex(params[0].get_str()), SER_NETWORK, PROTOCOL_VERSION);\n         CBlock pblock;\n         ssBlock >> pblock;\n "
      },
      {
        "sha": "4f37575a6a36154e207cb8ed653279d97e89148d",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -11,7 +11,6 @@\n #endif\n \n #include \"crypter.h\"\n-#include \"util.h\"\n \n bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod)\n {"
      },
      {
        "sha": "d1bdb92c91013e94e88a887a7f0b0ea7f26ae35e",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"allocators.h\" /* for SecureString */\n #include \"key.h\"\n+#include \"serialize.h\"\n \n const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;\n const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;"
      },
      {
        "sha": "c67cf2f8a5fde84f085e2521cfa506f8e5d1252d",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -6,7 +6,6 @@\n #include \"db.h\"\n #include \"util.h\"\n #include \"main.h\"\n-#include \"wallet.h\"\n #include <boost/version.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n@@ -229,8 +228,8 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                     if (pcursor)\n                         while (fSuccess)\n                         {\n-                            CDataStream ssKey;\n-                            CDataStream ssValue;\n+                            CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+                            CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n                             int ret = db.ReadAtCursor(pcursor, ssKey, ssValue, DB_NEXT);\n                             if (ret == DB_NOTFOUND)\n                             {\n@@ -386,10 +385,10 @@ bool CTxDB::ReadOwnerTxes(uint160 hash160, int nMinHeight, vector<CTransaction>&\n     loop\n     {\n         // Read next record\n-        CDataStream ssKey;\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         if (fFlags == DB_SET_RANGE)\n             ssKey << string(\"owner\") << hash160 << CDiskTxPos(0, 0, 0);\n-        CDataStream ssValue;\n+        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         int ret = ReadAtCursor(pcursor, ssKey, ssValue, fFlags);\n         fFlags = DB_NEXT;\n         if (ret == DB_NOTFOUND)\n@@ -514,10 +513,10 @@ bool CTxDB::LoadBlockIndex()\n     loop\n     {\n         // Read next record\n-        CDataStream ssKey;\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         if (fFlags == DB_SET_RANGE)\n             ssKey << make_pair(string(\"blockindex\"), uint256(0));\n-        CDataStream ssValue;\n+        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         int ret = ReadAtCursor(pcursor, ssKey, ssValue, fFlags);\n         fFlags = DB_NEXT;\n         if (ret == DB_NOTFOUND)\n@@ -754,8 +753,8 @@ bool CAddrDB::LoadAddresses()\n     loop\n     {\n         // Read next record\n-        CDataStream ssKey;\n-        CDataStream ssValue;\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n         if (ret == DB_NOTFOUND)\n             break;"
      },
      {
        "sha": "48e10a95a7d1be16e8ea6525ab8e59d6a3845d22",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -5,7 +5,6 @@\n #ifndef BITCOIN_DB_H\n #define BITCOIN_DB_H\n \n-#include \"key.h\"\n #include \"main.h\"\n \n #include <map>\n@@ -58,7 +57,7 @@ class CDB\n             return false;\n \n         // Key\n-        CDataStream ssKey(SER_DISK);\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(1000);\n         ssKey << key;\n         Dbt datKey(&ssKey[0], ssKey.size());\n@@ -72,7 +71,7 @@ class CDB\n             return false;\n \n         // Unserialize value\n-        CDataStream ssValue((char*)datValue.get_data(), (char*)datValue.get_data() + datValue.get_size(), SER_DISK);\n+        CDataStream ssValue((char*)datValue.get_data(), (char*)datValue.get_data() + datValue.get_size(), SER_DISK, CLIENT_VERSION);\n         ssValue >> value;\n \n         // Clear and free memory\n@@ -90,13 +89,13 @@ class CDB\n             assert(!\"Write called on database in read-only mode\");\n \n         // Key\n-        CDataStream ssKey(SER_DISK);\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(1000);\n         ssKey << key;\n         Dbt datKey(&ssKey[0], ssKey.size());\n \n         // Value\n-        CDataStream ssValue(SER_DISK);\n+        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         ssValue.reserve(10000);\n         ssValue << value;\n         Dbt datValue(&ssValue[0], ssValue.size());\n@@ -119,7 +118,7 @@ class CDB\n             assert(!\"Erase called on database in read-only mode\");\n \n         // Key\n-        CDataStream ssKey(SER_DISK);\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(1000);\n         ssKey << key;\n         Dbt datKey(&ssKey[0], ssKey.size());\n@@ -139,7 +138,7 @@ class CDB\n             return false;\n \n         // Key\n-        CDataStream ssKey(SER_DISK);\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(1000);\n         ssKey << key;\n         Dbt datKey(&ssKey[0], ssKey.size());"
      },
      {
        "sha": "0eb37fe99cf0b1262512ce7b0a111bb96405ef4c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -7,7 +7,6 @@\n #include \"bitcoinrpc.h\"\n #include \"net.h\"\n #include \"init.h\"\n-#include \"strlcpy.h\"\n #include \"util.h\"\n #include \"ui_interface.h\"\n #include <boost/filesystem.hpp>"
      },
      {
        "sha": "fc1131826d88029217c635f28a78358fda3d487e",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -12,7 +12,7 @@\n #include <openssl/ecdsa.h>\n #include <openssl/obj_mac.h>\n \n-#include \"serialize.h\"\n+// #include \"serialize.h\"\n #include \"uint256.h\"\n \n // secp160k1"
      },
      {
        "sha": "313518711be7ed3e5906e3209faa3827ef52f660",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -4,7 +4,6 @@\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"keystore.h\"\n-#include \"crypter.h\"\n #include \"script.h\"\n \n bool CKeyStore::GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char> &vchPubKeyOut) const"
      },
      {
        "sha": "76820e204b7a1803473acf5680ed2070e4319301",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -6,7 +6,10 @@\n #define BITCOIN_KEYSTORE_H\n \n #include \"crypter.h\"\n-#include \"script.h\"\n+#include \"util.h\"\n+#include \"base58.h\"\n+\n+class CScript;\n \n /** A virtual base class for key stores */\n class CKeyStore"
      },
      {
        "sha": "16a1f345566708cae9473854432386121619143b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -411,7 +411,7 @@ bool CTransaction::CheckTransaction() const\n     if (vout.empty())\n         return DoS(10, error(\"CTransaction::CheckTransaction() : vout empty\"));\n     // Size limits\n-    if (::GetSerializeSize(*this, SER_NETWORK) > MAX_BLOCK_SIZE)\n+    if (::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n         return DoS(100, error(\"CTransaction::CheckTransaction() : size limits failed\"));\n \n     // Check for negative or overflow output values\n@@ -533,7 +533,7 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n         // reasonable number of ECDSA signature verifications.\n \n         int64 nFees = GetValueIn(mapInputs)-GetValueOut();\n-        unsigned int nSize = ::GetSerializeSize(*this, SER_NETWORK);\n+        unsigned int nSize = ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);\n \n         // Don't accept it if it can't get into a block\n         if (nFees < GetMinFee(1000, true, GMF_RELAY))\n@@ -1279,7 +1279,7 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n     bool fStrictPayToScriptHash = (pindex->nTime >= nBIP16SwitchTime);\n \n     //// issue here: it doesn't know the version\n-    unsigned int nTxPos = pindex->nBlockPos + ::GetSerializeSize(CBlock(), SER_DISK) - 1 + GetSizeOfCompactSize(vtx.size());\n+    unsigned int nTxPos = pindex->nBlockPos + ::GetSerializeSize(CBlock(), SER_DISK, CLIENT_VERSION) - 1 + GetSizeOfCompactSize(vtx.size());\n \n     map<uint256, CTxIndex> mapQueuedChanges;\n     int64 nFees = 0;\n@@ -1291,7 +1291,7 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n             return DoS(100, error(\"ConnectBlock() : too many sigops\"));\n \n         CDiskTxPos posThisTx(pindex->nFile, pindex->nBlockPos, nTxPos);\n-        nTxPos += ::GetSerializeSize(tx, SER_DISK);\n+        nTxPos += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n \n         MapPrevTx mapInputs;\n         if (!tx.IsCoinBase())\n@@ -1621,7 +1621,7 @@ bool CBlock::CheckBlock() const\n     // that can be verified before saving an orphan block.\n \n     // Size limits\n-    if (vtx.empty() || vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(*this, SER_NETWORK) > MAX_BLOCK_SIZE)\n+    if (vtx.empty() || vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n         return DoS(100, error(\"CheckBlock() : size limits failed\"));\n \n     // Check proof of work matches claimed amount\n@@ -1691,7 +1691,7 @@ bool CBlock::AcceptBlock()\n         return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n     // Write block to history file\n-    if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK)))\n+    if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n         return error(\"AcceptBlock() : out of disk space\");\n     unsigned int nFile = -1;\n     unsigned int nBlockPos = 0;\n@@ -2481,7 +2481,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             pfrom->PushInventory(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n             CBlock block;\n             block.ReadFromDisk(pindex, true);\n-            nBytes += block.GetSerializeSize(SER_NETWORK);\n+            nBytes += block.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION);\n             if (--nLimit <= 0 || nBytes >= SendBufferSize()/2)\n             {\n                 // When this block is requested, we'll send an inv that'll make them\n@@ -3174,7 +3174,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n             }\n \n             // Priority is sum(valuein * age) / txsize\n-            dPriority /= ::GetSerializeSize(tx, SER_NETWORK);\n+            dPriority /= ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n \n             if (porphan)\n                 porphan->dPriority = dPriority;\n@@ -3203,7 +3203,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n             mapPriority.erase(mapPriority.begin());\n \n             // Size limits\n-            unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK);\n+            unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n             if (nBlockSize + nTxSize >= MAX_BLOCK_SIZE_GEN)\n                 continue;\n "
      },
      {
        "sha": "bcd62080d559b24345a1676f6db80cc3b6f3189e",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -7,9 +7,7 @@\n \n #include \"bignum.h\"\n #include \"net.h\"\n-#include \"key.h\"\n #include \"script.h\"\n-#include \"version.h\"\n \n #ifdef WIN32\n #include <io.h> /* for _commit */\n@@ -545,7 +543,7 @@ class CTransaction\n         // Base fee is either MIN_TX_FEE or MIN_RELAY_TX_FEE\n         int64 nBaseFee = (mode == GMF_RELAY) ? MIN_RELAY_TX_FEE : MIN_TX_FEE;\n \n-        unsigned int nBytes = ::GetSerializeSize(*this, SER_NETWORK);\n+        unsigned int nBytes = ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);\n         unsigned int nNewBlockSize = nBlockSize + nBytes;\n         int64 nMinFee = (1 + (int64)nBytes / 1000) * nBaseFee;\n \n@@ -590,7 +588,7 @@ class CTransaction\n \n     bool ReadFromDisk(CDiskTxPos pos, FILE** pfileRet=NULL)\n     {\n-        CAutoFile filein = OpenBlockFile(pos.nFile, 0, pfileRet ? \"rb+\" : \"rb\");\n+        CAutoFile filein = CAutoFile(OpenBlockFile(pos.nFile, 0, pfileRet ? \"rb+\" : \"rb\"), SER_DISK, CLIENT_VERSION);\n         if (!filein)\n             return error(\"CTransaction::ReadFromDisk() : OpenBlockFile failed\");\n \n@@ -941,7 +939,7 @@ class CBlock\n     bool WriteToDisk(unsigned int& nFileRet, unsigned int& nBlockPosRet)\n     {\n         // Open history file to append\n-        CAutoFile fileout = AppendBlockFile(nFileRet);\n+        CAutoFile fileout = CAutoFile(AppendBlockFile(nFileRet), SER_DISK, CLIENT_VERSION);\n         if (!fileout)\n             return error(\"CBlock::WriteToDisk() : AppendBlockFile failed\");\n \n@@ -974,7 +972,7 @@ class CBlock\n         SetNull();\n \n         // Open history file to read\n-        CAutoFile filein = OpenBlockFile(nFile, nBlockPos, \"rb\");\n+        CAutoFile filein = CAutoFile(OpenBlockFile(nFile, nBlockPos, \"rb\"), SER_DISK, CLIENT_VERSION);\n         if (!filein)\n             return error(\"CBlock::ReadFromDisk() : OpenBlockFile failed\");\n         if (!fReadTransactions)\n@@ -1135,7 +1133,7 @@ class CBlockIndex\n     bool EraseBlockFromDisk()\n     {\n         // Open history file\n-        CAutoFile fileout = OpenBlockFile(nFile, nBlockPos, \"rb+\");\n+        CAutoFile fileout = CAutoFile(OpenBlockFile(nFile, nBlockPos, \"rb+\"), SER_DISK, CLIENT_VERSION);\n         if (!fileout)\n             return false;\n \n@@ -1595,7 +1593,7 @@ class CAlert : public CUnsignedAlert\n             return error(\"CAlert::CheckSignature() : verify signature failed\");\n \n         // Now unserialize the data\n-        CDataStream sMsg(vchMsg);\n+        CDataStream sMsg(vchMsg, SER_NETWORK, PROTOCOL_VERSION);\n         sMsg >> *(CUnsignedAlert*)this;\n         return true;\n     }"
      },
      {
        "sha": "bad49a9f8f2c90fa9dd9991a46089ceb06c36825",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -157,14 +157,10 @@ class CNode\n     CCriticalSection cs_inventory;\n     std::multimap<int64, CInv> mapAskFor;\n \n-    CNode(SOCKET hSocketIn, CAddress addrIn, bool fInboundIn=false)\n+    CNode(SOCKET hSocketIn, CAddress addrIn, bool fInboundIn=false) : vSend(SER_NETWORK, MIN_PROTO_VERSION), vRecv(SER_NETWORK, MIN_PROTO_VERSION)\n     {\n         nServices = 0;\n         hSocket = hSocketIn;\n-        vSend.SetType(SER_NETWORK);\n-        vRecv.SetType(SER_NETWORK);\n-        vSend.SetVersion(MIN_PROTO_VERSION);\n-        vRecv.SetVersion(MIN_PROTO_VERSION);\n         nLastSend = 0;\n         nLastRecv = 0;\n         nLastSendEmpty = GetTime();\n@@ -612,7 +608,7 @@ inline void RelayInventory(const CInv& inv)\n template<typename T>\n void RelayMessage(const CInv& inv, const T& a)\n {\n-    CDataStream ss(SER_NETWORK);\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n     ss.reserve(10000);\n     ss << a;\n     RelayMessage(inv, ss);\n@@ -631,7 +627,7 @@ inline void RelayMessage<>(const CInv& inv, const CDataStream& ss)\n         }\n \n         // Save original serialized message so newer versions are preserved\n-        mapRelay[inv] = ss;\n+        mapRelay.insert(std::make_pair(inv, ss));\n         vRelayExpiration.push_back(std::make_pair(GetTime() + 15 * 60, inv));\n     }\n "
      },
      {
        "sha": "c7830871b5eea0e9fab4896d0fd40ce04e348b8f",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -8,6 +8,7 @@\n #include \"guiutil.h\"\n \n #include \"init.h\"\n+#include \"ui_interface.h\"\n #include \"qtipcserver.h\"\n \n #include <QApplication>"
      },
      {
        "sha": "18bb64fe6cb61011cc4a55d6c6c07416d63327b6",
        "filename": "src/qt/messagepage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/qt/messagepage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/qt/messagepage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/messagepage.cpp?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -91,7 +91,7 @@ void MessagePage::on_signMessage_clicked()\n         return;\n     }\n \n-    CDataStream ss(SER_GETHASH);\n+    CDataStream ss(SER_GETHASH, 0);\n     ss << strMessageMagic;\n     ss << ui->message->document()->toPlainText().toStdString();\n "
      },
      {
        "sha": "102ac0ff4e29888cfbf35f120c2f4977b786ed2d",
        "filename": "src/qt/qtipcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/qt/qtipcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/qt/qtipcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qtipcserver.cpp?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -7,6 +7,7 @@\n #include <boost/tokenizer.hpp>\n #include <boost/date_time/posix_time/posix_time.hpp>\n \n+#include \"ui_interface.h\"\n #include \"util.h\"\n #include \"qtipcserver.h\"\n "
      },
      {
        "sha": "7a83f6cefb4ce9c1c58c06360d26af26863265a2",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -4,6 +4,7 @@\n #include \"addresstablemodel.h\"\n #include \"transactiontablemodel.h\"\n \n+#include \"ui_interface.h\"\n #include \"wallet.h\"\n #include \"walletdb.h\" // for BackupWallet\n "
      },
      {
        "sha": "fc0a5b3eaa02b22f952c746edb59a52d4b3305f0",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -1092,7 +1092,7 @@ uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int\n     }\n \n     // Serialize and hash\n-    CDataStream ss(SER_GETHASH);\n+    CDataStream ss(SER_GETHASH, 0);\n     ss.reserve(10000);\n     ss << txTmp << nHashType;\n     return Hash(ss.begin(), ss.end());"
      },
      {
        "sha": "12ea1ec695f0f0068f3aa3fe67fd48a574c9f0c6",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 36,
        "deletions": 36,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -57,7 +57,7 @@ enum\n };\n \n #define IMPLEMENT_SERIALIZE(statements)    \\\n-    unsigned int GetSerializeSize(int nType=0, int nVersion=PROTOCOL_VERSION) const  \\\n+    unsigned int GetSerializeSize(int nType, int nVersion) const  \\\n     {                                           \\\n         CSerActionGetSerializeSize ser_action;  \\\n         const bool fGetSize = true;             \\\n@@ -72,7 +72,7 @@ enum\n         return nSerSize;                        \\\n     }                                           \\\n     template<typename Stream>                   \\\n-    void Serialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION) const  \\\n+    void Serialize(Stream& s, int nType, int nVersion) const  \\\n     {                                           \\\n         CSerActionSerialize ser_action;         \\\n         const bool fGetSize = false;            \\\n@@ -83,7 +83,7 @@ enum\n         {statements}                            \\\n     }                                           \\\n     template<typename Stream>                   \\\n-    void Unserialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION)  \\\n+    void Unserialize(Stream& s, int nType, int nVersion)  \\\n     {                                           \\\n         CSerActionUnserialize ser_action;       \\\n         const bool fGetSize = false;            \\\n@@ -287,43 +287,43 @@ template<typename Stream, typename C> void Unserialize(Stream& is, std::basic_st\n // vector\n template<typename T, typename A> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&);\n template<typename T, typename A> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&);\n-template<typename T, typename A> inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename T, typename A> inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion);\n template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&);\n template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&);\n-template<typename Stream, typename T, typename A> inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename Stream, typename T, typename A> inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion);\n template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&);\n template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&);\n-template<typename Stream, typename T, typename A> inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename Stream, typename T, typename A> inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion);\n \n // others derived from vector\n-extern inline unsigned int GetSerializeSize(const CScript& v, int nType, int nVersion=PROTOCOL_VERSION);\n-template<typename Stream> void Serialize(Stream& os, const CScript& v, int nType, int nVersion=PROTOCOL_VERSION);\n-template<typename Stream> void Unserialize(Stream& is, CScript& v, int nType, int nVersion=PROTOCOL_VERSION);\n+extern inline unsigned int GetSerializeSize(const CScript& v, int nType, int nVersion);\n+template<typename Stream> void Serialize(Stream& os, const CScript& v, int nType, int nVersion);\n+template<typename Stream> void Unserialize(Stream& is, CScript& v, int nType, int nVersion);\n \n // pair\n-template<typename K, typename T> unsigned int GetSerializeSize(const std::pair<K, T>& item, int nType, int nVersion=PROTOCOL_VERSION);\n-template<typename Stream, typename K, typename T> void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion=PROTOCOL_VERSION);\n-template<typename Stream, typename K, typename T> void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename K, typename T> unsigned int GetSerializeSize(const std::pair<K, T>& item, int nType, int nVersion);\n+template<typename Stream, typename K, typename T> void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion);\n+template<typename Stream, typename K, typename T> void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion);\n \n // 3 tuple\n-template<typename T0, typename T1, typename T2> unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2>& item, int nType, int nVersion=PROTOCOL_VERSION);\n-template<typename Stream, typename T0, typename T1, typename T2> void Serialize(Stream& os, const boost::tuple<T0, T1, T2>& item, int nType, int nVersion=PROTOCOL_VERSION);\n-template<typename Stream, typename T0, typename T1, typename T2> void Unserialize(Stream& is, boost::tuple<T0, T1, T2>& item, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename T0, typename T1, typename T2> unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2>& item, int nType, int nVersion);\n+template<typename Stream, typename T0, typename T1, typename T2> void Serialize(Stream& os, const boost::tuple<T0, T1, T2>& item, int nType, int nVersion);\n+template<typename Stream, typename T0, typename T1, typename T2> void Unserialize(Stream& is, boost::tuple<T0, T1, T2>& item, int nType, int nVersion);\n \n // 4 tuple\n-template<typename T0, typename T1, typename T2, typename T3> unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion=PROTOCOL_VERSION);\n-template<typename Stream, typename T0, typename T1, typename T2, typename T3> void Serialize(Stream& os, const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion=PROTOCOL_VERSION);\n-template<typename Stream, typename T0, typename T1, typename T2, typename T3> void Unserialize(Stream& is, boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename T0, typename T1, typename T2, typename T3> unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion);\n+template<typename Stream, typename T0, typename T1, typename T2, typename T3> void Serialize(Stream& os, const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion);\n+template<typename Stream, typename T0, typename T1, typename T2, typename T3> void Unserialize(Stream& is, boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion);\n \n // map\n-template<typename K, typename T, typename Pred, typename A> unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int nVersion=PROTOCOL_VERSION);\n-template<typename Stream, typename K, typename T, typename Pred, typename A> void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion=PROTOCOL_VERSION);\n-template<typename Stream, typename K, typename T, typename Pred, typename A> void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename K, typename T, typename Pred, typename A> unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int nVersion);\n+template<typename Stream, typename K, typename T, typename Pred, typename A> void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion);\n+template<typename Stream, typename K, typename T, typename Pred, typename A> void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion);\n \n // set\n-template<typename K, typename Pred, typename A> unsigned int GetSerializeSize(const std::set<K, Pred, A>& m, int nType, int nVersion=PROTOCOL_VERSION);\n-template<typename Stream, typename K, typename Pred, typename A> void Serialize(Stream& os, const std::set<K, Pred, A>& m, int nType, int nVersion=PROTOCOL_VERSION);\n-template<typename Stream, typename K, typename Pred, typename A> void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename K, typename Pred, typename A> unsigned int GetSerializeSize(const std::set<K, Pred, A>& m, int nType, int nVersion);\n+template<typename Stream, typename K, typename Pred, typename A> void Serialize(Stream& os, const std::set<K, Pred, A>& m, int nType, int nVersion);\n+template<typename Stream, typename K, typename Pred, typename A> void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion);\n \n \n \n@@ -336,19 +336,19 @@ template<typename Stream, typename K, typename Pred, typename A> void Unserializ\n // Thanks to Boost serialization for this idea.\n //\n template<typename T>\n-inline unsigned int GetSerializeSize(const T& a, long nType, int nVersion=PROTOCOL_VERSION)\n+inline unsigned int GetSerializeSize(const T& a, long nType, int nVersion)\n {\n     return a.GetSerializeSize((int)nType, nVersion);\n }\n \n template<typename Stream, typename T>\n-inline void Serialize(Stream& os, const T& a, long nType, int nVersion=PROTOCOL_VERSION)\n+inline void Serialize(Stream& os, const T& a, long nType, int nVersion)\n {\n     a.Serialize(os, (int)nType, nVersion);\n }\n \n template<typename Stream, typename T>\n-inline void Unserialize(Stream& is, T& a, long nType, int nVersion=PROTOCOL_VERSION)\n+inline void Unserialize(Stream& is, T& a, long nType, int nVersion)\n {\n     a.Unserialize(is, (int)nType, nVersion);\n }\n@@ -730,39 +730,39 @@ class CDataStream\n     typedef vector_type::const_iterator   const_iterator;\n     typedef vector_type::reverse_iterator reverse_iterator;\n \n-    explicit CDataStream(int nTypeIn=SER_NETWORK, int nVersionIn=PROTOCOL_VERSION)\n+    explicit CDataStream(int nTypeIn, int nVersionIn)\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n \n-    CDataStream(const_iterator pbegin, const_iterator pend, int nTypeIn=SER_NETWORK, int nVersionIn=PROTOCOL_VERSION) : vch(pbegin, pend)\n+    CDataStream(const_iterator pbegin, const_iterator pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n \n #if !defined(_MSC_VER) || _MSC_VER >= 1300\n-    CDataStream(const char* pbegin, const char* pend, int nTypeIn=SER_NETWORK, int nVersionIn=PROTOCOL_VERSION) : vch(pbegin, pend)\n+    CDataStream(const char* pbegin, const char* pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n #endif\n \n-    CDataStream(const vector_type& vchIn, int nTypeIn=SER_NETWORK, int nVersionIn=PROTOCOL_VERSION) : vch(vchIn.begin(), vchIn.end())\n+    CDataStream(const vector_type& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n \n-    CDataStream(const std::vector<char>& vchIn, int nTypeIn=SER_NETWORK, int nVersionIn=PROTOCOL_VERSION) : vch(vchIn.begin(), vchIn.end())\n+    CDataStream(const std::vector<char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n \n-    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn=SER_NETWORK, int nVersionIn=PROTOCOL_VERSION) : vch((char*)&vchIn.begin()[0], (char*)&vchIn.end()[0])\n+    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn, int nVersionIn) : vch((char*)&vchIn.begin()[0], (char*)&vchIn.end()[0])\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n \n-    void Init(int nTypeIn=SER_NETWORK, int nVersionIn=PROTOCOL_VERSION)\n+    void Init(int nTypeIn, int nVersionIn)\n     {\n         nReadPos = 0;\n         nType = nTypeIn;\n@@ -976,7 +976,7 @@ class CDataStream\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION) const\n+    void Serialize(Stream& s, int nType, int nVersion) const\n     {\n         // Special case: stream << stream concatenates like stream += stream\n         if (!vch.empty())\n@@ -1085,7 +1085,7 @@ class CAutoFile\n \n     typedef FILE element_type;\n \n-    CAutoFile(FILE* filenew=NULL, int nTypeIn=SER_DISK, int nVersionIn=PROTOCOL_VERSION)\n+    CAutoFile(FILE* filenew, int nTypeIn, int nVersionIn)\n     {\n         file = filenew;\n         nType = nTypeIn;"
      },
      {
        "sha": "bf3c55bccb88bcb671f8fde0ac8782a28a2b948f",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -10,8 +10,6 @@\n #include <string>\n #include <vector>\n \n-#include \"version.h\"\n-\n typedef long long  int64;\n typedef unsigned long long  uint64;\n \n@@ -355,19 +353,22 @@ class base_uint\n         return pn[2*n] | (uint64)pn[2*n+1] << 32;\n     }\n \n-    unsigned int GetSerializeSize(int nType=0, int nVersion=PROTOCOL_VERSION) const\n+//    unsigned int GetSerializeSize(int nType=0, int nVersion=PROTOCOL_VERSION) const\n+    unsigned int GetSerializeSize(int nType, int nVersion) const\n     {\n         return sizeof(pn);\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION) const\n+//    void Serialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION) const\n+    void Serialize(Stream& s, int nType, int nVersion) const\n     {\n         s.write((char*)pn, sizeof(pn));\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION)\n+//    void Unserialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION)\n+    void Unserialize(Stream& s, int nType, int nVersion)\n     {\n         s.read((char*)pn, sizeof(pn));\n     }"
      },
      {
        "sha": "ac65d417b30dfbc6045dc14fafefc27d4d88f5ca",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -6,6 +6,7 @@\n #include \"util.h\"\n #include \"strlcpy.h\"\n #include \"version.h\"\n+#include \"ui_interface.h\"\n #include <boost/algorithm/string/join.hpp>\n \n // Work around clang compilation problem in Boost 1.46:"
      },
      {
        "sha": "d9ec68c620ba7a07815f7cfbab09f3b2f3882c02",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -32,7 +32,6 @@ typedef int pid_t; /* define for windows compatiblity */\n #include <openssl/ripemd.h>\n \n #include \"netbase.h\" // for AddTimeData\n-#include \"ui_interface.h\"\n \n typedef long long  int64;\n typedef unsigned long long  uint64;"
      },
      {
        "sha": "53836be0cd346f259b0baacb028168811b6e8713",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -6,6 +6,7 @@\n #include \"wallet.h\"\n #include \"walletdb.h\"\n #include \"crypter.h\"\n+#include \"ui_interface.h\"\n \n using namespace std;\n \n@@ -1121,7 +1122,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                         return false;\n \n                 // Limit size\n-                unsigned int nBytes = ::GetSerializeSize(*(CTransaction*)&wtxNew, SER_NETWORK);\n+                unsigned int nBytes = ::GetSerializeSize(*(CTransaction*)&wtxNew, SER_NETWORK, PROTOCOL_VERSION);\n                 if (nBytes >= MAX_BLOCK_SIZE_GEN/5)\n                     return false;\n                 dPriority /= nBytes;"
      },
      {
        "sha": "c1461b1feb5106f629556ae233ab64eb0ce5329b",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -6,7 +6,6 @@\n #define BITCOIN_WALLET_H\n \n #include \"main.h\"\n-#include \"bignum.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"script.h\""
      },
      {
        "sha": "709ecac1848539589a702f0f30baf1f9da138ada",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b6aaa1698838278a547f16a15e635bd58ec867d/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b6aaa1698838278a547f16a15e635bd58ec867d/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=6b6aaa1698838278a547f16a15e635bd58ec867d",
        "patch": "@@ -74,10 +74,10 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n     loop\n     {\n         // Read next record\n-        CDataStream ssKey;\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         if (fFlags == DB_SET_RANGE)\n             ssKey << boost::make_tuple(string(\"acentry\"), (fAllAccounts? string(\"\") : strAccount), uint64(0));\n-        CDataStream ssValue;\n+        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         int ret = ReadAtCursor(pcursor, ssKey, ssValue, fFlags);\n         fFlags = DB_NEXT;\n         if (ret == DB_NOTFOUND)\n@@ -135,8 +135,8 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n         loop\n         {\n             // Read next record\n-            CDataStream ssKey;\n-            CDataStream ssValue;\n+            CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+            CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n             int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n             if (ret == DB_NOTFOUND)\n                 break;"
      }
    ]
  }
]