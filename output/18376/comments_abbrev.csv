vasild,2020-03-18 12:58:12,"Configure and run as:\n`./configure --with-sanitizers=thread`\n`./src/test/test_bitcoin --run_test=""txvalidationcache_tests/checkinputs_test""`\n\nI confirm the following:\n* Latest master @ ce87d5613 shows the [use-after-free](https://travis-ci.org/github/bitcoin/bitcoin/jobs/663676100#L4588) bug\n* This PR fixes the bug\n* Reverting fadafb83c on top of the latest master `git show fadafb83c",https://github.com/bitcoin/bitcoin/pull/18376#issuecomment-600607726,600607726,
practicalswift,2020-03-18 16:59:53,"Concept ACK -- premature optimisation is the root of many lifetime issues :)\n\nSomewhat related: [Investigate potential lifetime issues in cases where we are returning ""const std::string&""](https://github.com/bitcoin/bitcoin/issues/17198).\n\nThis is a great talk about recurring C++ bugs at Facebook: [this segment on lifetime issues due to premature optimization](https://www.youtube.com/watch",https://github.com/bitcoin/bitcoin/pull/18376#issuecomment-600748411,600748411,
MarcoFalke,2020-03-18 17:53:12,"@practicalswift I don't think it is helpful to call this premature optimization. This was not an optimization attempt. `GetConsensus` returns a const reference because this global is assumed to be initialized once and then never changed. It has been that way for years, and I presume well known by myself and all reviewers of the pull. See also bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c. And logically",https://github.com/bitcoin/bitcoin/pull/18376#issuecomment-600775702,600775702,
sipa,2020-03-18 20:11:34,ACK 7d8e1dec3b26074df1533f715871f79c956cc224,https://github.com/bitcoin/bitcoin/pull/18376#issuecomment-600835511,600835511,
practicalswift,2020-03-18 20:35:23,"ACK 7d8e1dec3b26074df1533f715871f79c956cc224\n\n> > [â€¦] premature optimisation is the root of many lifetime issues :)\n>\n> I don't think it is helpful to call this premature optimization. \n\nPoint taken :)",https://github.com/bitcoin/bitcoin/pull/18376#issuecomment-600845629,600845629,
MarcoFalke,2020-03-18 13:35:57,"I think this can  be made `=` to just mirror what `std::bind` did. (`this` is a pointer, so it shouldn't matter whether it is copied or referenced, and for consensusParams we want it to be copied).\n\n```suggestion\n    scheduler.scheduleEvery([=] { this->CheckForStaleTipAndEvictPeers(consensusParams); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});\n```",https://github.com/bitcoin/bitcoin/pull/18376#discussion_r394349862,394349862,src/net_processing.cpp
MarcoFalke,2020-03-18 13:51:09,"The `=` is also what is recommended in the ""Tutorial"" (written by me, so count that against me):\n\nhttps://github.com/bitcoin/bitcoin/blob/3a8d25064e700ff2e69600cc1ede597751283a85/src/scheduler.h#L28",https://github.com/bitcoin/bitcoin/pull/18376#discussion_r394360305,394360305,src/net_processing.cpp
vasild,2020-03-18 15:16:19,"Doh! I was about to apply this suggestion, but then realized that [The implicit capture of *this when the capture default is = is deprecated. (since C++20)](https://en.cppreference.com/w/cpp/language/lambda#Lambda_capture) :-/ Indeed:\n\n```cpp\n        auto m() {\n            return [=](){\n                std::cout << ""lambda: this="" << this << std::endl;\n            };\n        }\n```",https://github.com/bitcoin/bitcoin/pull/18376#discussion_r394425068,394425068,src/net_processing.cpp
MarcoFalke,2020-03-18 16:39:54,"In that case I'd prefer to use `[=, this]`, but this might not compile either on our current C++ target? According to the page you linked:\n\n```cpp\n    [=, this] {};   // until C++20: Error: this when = is the default\n                    // since C++20: OK, same as [=]\n```\n\nSo, given that we won't be switching to C++20 any time soon, I'd still prefer the `[=]`. Then it can be changed,",https://github.com/bitcoin/bitcoin/pull/18376#discussion_r394487550,394487550,src/net_processing.cpp
