DrahtBot,2019-10-21 22:25:40,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22019](https://github.com/bitcoin/bitcoin/pull/22019) (wallet: Introduce SelectionResult for encapsulating a coin select",https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-544733997,544733997,
achow101,2019-10-24 21:24:30,Updated the help,https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-546109741,546109741,
instagibbs,2019-10-25 18:47:09,can you also reflect the updated help into walletcreatefundedpsbt verbatim? It's helpful for usage.,https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-546468712,546468712,
achow101,2019-10-29 19:08:13,Also updated the help of `walletcreatefundedpsbt`,https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-547583128,547583128,
instagibbs,2019-10-31 14:23:54,not compiling,https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-548399974,548399974,
instagibbs,2019-11-04 15:13:23,code review ACK https://github.com/bitcoin/bitcoin/pull/17211/commits/7f9aef6e6cf900e423a2f2abc9d937317dec15e9,https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-549399504,549399504,
prayank23,2021-05-25 19:32:46,"Concept ACK\n\nCompiled on Ubuntu. Not able to test because using wrong syntax or missing something else:\n\n```\nbitcoin-cli fundrawtransaction ""0200000001f7739b1278e8e0df75a1f692fbface31b09d4dc7b4ddb2f20dec698e7617cd310000000000ffffffff0150c30000000000001600147c5ac840b455af9f9b3da2c327275c0b0e985e7600000000"" {} false '{""pubkeys"" : ""02b1f9f65bdf8e686333be0ac8979908ae8aeeee33e396c446ba2b17348",https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-848204718,848204718,
achow101,2021-05-26 16:39:18,"> Concept ACK\n> \n> Compiled on Ubuntu. Not able to test because using wrong syntax or missing something else:\n> \n> ```\n> bitcoin-cli fundrawtransaction ""0200000001f7739b1278e8e0df75a1f692fbface31b09d4dc7b4ddb2f20dec698e7617cd310000000000ffffffff0150c30000000000001600147c5ac840b455af9f9b3da2c327275c0b0e985e7600000000"" {} false '{""pubkeys"" : ""02b1f9f65bdf8e686333be0ac8979908ae8aeeee33e396c",https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-848932628,848932628,
prayank23,2021-05-28 14:00:58,"\n> `pubkeys` is an array, not a string. The correct command would be:\n> \n> ```\n> bitcoin-cli fundrawtransaction ""0200000001f7739b1278e8e0df75a1f692fbface31b09d4dc7b4ddb2f20dec698e7617cd310000000000ffffffff0150c30000000000001600147c5ac840b455af9f9b3da2c327275c0b0e985e7600000000"" {} false '{""pubkeys"" : [""02b1f9f65bdf8e686333be0ac8979908ae8aeeee33e396c446ba2b17348a32335c""]}'\n> ```\n\nThan",https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-850440451,850440451,
t-bast,2021-08-12 13:47:24,If a follow-up PR (or this one) can also enable external inputs in `bumpfee` and `psbtbumpfee` you would be my hero :pray: ,https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-897653994,897653994,
t-bast,2021-10-01 08:23:43,"Could you please clarify if something is blocking that PR from being merged?\nDoes it depend on a separate feature or refactoring to be accepted? Or is it just a lack of reviews?\n\nThis PR would be invaluable for L2 protocols (at least lightning and vaults), as they are currently forced to re-implement a bitcoin wallet internally to work around this limitation (which is quite a waste since bit",https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-932026570,932026570,
achow101,2021-10-03 16:58:02,"> Question: why not put `solving_data` in `options` for `fundrawtransaction` and `walletcreatefundedpsbt` like you did with `send`? Preferable to use that unless there's a good reason?\n\nDone",https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-932987864,932987864,
prayank23,2021-10-04 04:55:52,"reACK https://github.com/bitcoin/bitcoin/commit/928af61cdb2c4de1c3d10e6fda13bbba5ca0bba9\n\n\nnit: agree with https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-897653994\n\n",https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-933142490,933142490,
meshcollider,2021-10-04 09:08:04,Remaining review comments are non-blocking and can be left for a followup.,https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-933291838,933291838,
apoelstra,2021-10-04 15:28:45,Thank you for merging this!!,https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-933599610,933599610,
t-bast,2021-10-04 16:35:30,"Thanks for the quick reviews and integration guys!\nI'm trying to test this E2E and I'm having issues though...\n\nI'm trying to call `fundrawtransaction` with a tx that spends an external p2wsh input.\nI'm providing the witness script in `solving_data.scripts`.\nBut I just get an `Insufficient funds (code: -4)` error returned.\nReading the code, it feels like I didn't provide the right solv",https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-933656171,933656171,
achow101,2021-10-04 16:54:05,"@t-bast This feature currently only works for scripts that Bitcoin Core would be able to sign too, so you are limited to the set of standard scripts. You also need to provide pubkeys.\n\nWe would need to be able to understand arbitrary scripts in order for this to work with any script. In order for that to happen, I think we will need Miniscript to be implemented.\n\nI suppose an alternative w",https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-933670552,933670552,
t-bast,2021-10-04 16:58:56,"Damn, ok, thanks for the clarification, that makes sense.\n\n> I suppose an alternative would be to allow the user to supply their own input size?\n\nThat would be perfect for apps that rely on more complex scripts (LN / vaults).\nAs an external application, I know the size of my final witness stack, so if I could simply provide this size in the `solving_data` and have bitcoind ignore validat",https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-933674310,933674310,
ryanofsky,2021-10-05 21:55:49,"I'm seeing this new `test_external_inputs` test fail on windows in 3 different PRs with an ""Insufficient funds"" error. Maybe a bug in the new test?\n\nhttps://cirrus-ci.com/task/5958524342632448?logs=functional_tests#L2395\nhttps://cirrus-ci.com/task/6233803560583168?logs=functional_tests#L2255\nhttps://cirrus-ci.com/task/6423598886813696?logs=functional_tests#L2533\n\n```\nTraceback (most ",https://github.com/bitcoin/bitcoin/pull/17211#issuecomment-934904515,934904515,
instagibbs,2019-10-24 14:01:10,"""to ensure a sufficient feer is attained for the requested feerate"" ?",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r338590599,338590599,src/wallet/wallet.cpp
instagibbs,2019-10-24 14:03:35,nit: add a reference to `txNew.vin[nIn]` since it's used 3 times here,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r338591891,338591891,src/wallet/wallet.cpp
instagibbs,2019-10-24 14:03:47,"`txNew.vin[nIn]` is used three times here, just set a variable to reference it?",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r338591999,338591999,src/wallet/wallet.cpp
instagibbs,2019-10-24 14:12:25,"Not immediately obvious to me why this change is necessary. \n\nProbably requires more extensive comment?",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r338597097,338597097,src/wallet/rpcwallet.cpp
instagibbs,2019-10-24 14:13:49,"In other words, how did selection of inputs work before this?",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r338597940,338597940,src/wallet/rpcwallet.cpp
achow101,2019-10-24 17:47:06,"CTxOuts are needed for fee estimation and knowing the values of the outputs being selected. For inputs the wallet knows about, it would fetch the outputs from the wallet (obviously). Otherwise it would basically ignore them. So to support external inputs, either the user would have to enter the output info (bad UX IMO) or we can fetch it from the UTXO set.",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r338707629,338707629,src/wallet/rpcwallet.cpp
instagibbs,2019-10-24 17:59:16,"oh, duh pubkeys/descriptors aren't enough :)\n\nSuggested text:\n""// Fetch specified UTXOs from the UTXO set for knowing the values of the outputs being selected\n// and to match with the given solving_data. These are only\n// used when the outputs are not stored in the wallet.""\n\n",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r338713210,338713210,src/wallet/rpcwallet.cpp
achow101,2019-10-24 21:22:05,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r338798148,338798148,src/wallet/wallet.cpp
achow101,2019-10-24 21:22:08,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r338798180,338798180,src/wallet/wallet.cpp
achow101,2019-10-24 21:22:12,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r338798210,338798210,src/wallet/wallet.cpp
achow101,2019-10-24 21:22:16,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r338798230,338798230,src/wallet/rpcwallet.cpp
luke-jr,2019-11-04 16:24:24,"This seems like an advanced feature, so maybe move to ""options""?",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r342140993,342140993,src/wallet/rpcwallet.cpp
luke-jr,2019-11-13 20:39:21,"Why not a reference instead of a pointer?\n\nIs there any reason not to move this to `SigningProvider` as a method?",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r345989583,345989583,src/wallet/wallet.cpp
achow101,2019-11-18 22:57:21,"I don't think this really belongs as part of options. It's not like a setting, just additional data needed.",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r347653598,347653598,src/wallet/rpcwallet.cpp
achow101,2019-11-18 22:58:59,"I changed this to a reference.\n\nI don't think this really makes sense as part of SigningProvider. SigningProvider is to provide data for signing and is agnostic of what is being signed and how it is being signed. To add this to SigningProvider would violate that. Also, that would imply adding every other signing function to SigningProvider as well, and I don't think we should do that.",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r347654156,347654156,src/wallet/wallet.cpp
meshcollider,2020-10-07 08:55:22,"This is a bit more complicated than it needs to be, you can drop the second `coin_control &&`",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r500847966,500847966,src/wallet/wallet.cpp
meshcollider,2020-10-07 09:04:06,unnecessary `.getID()`,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r500853491,500853491,src/wallet/rpcwallet.cpp
achow101,2020-10-08 14:00:09,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r501744406,501744406,src/wallet/wallet.cpp
achow101,2020-10-08 14:00:14,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r501744468,501744468,src/wallet/rpcwallet.cpp
adamjonas,2020-10-19 15:39:16,"This is causing intermittent failures for me. It's failing about 20%. Here's the traceback:\n```\nFile ""/bitcoin/test/functional/rpc_psbt.py"", line 505, in run_test\n    assert_raises_rpc_error(-4, ""Missing solving data for estimating transaction size"", self.nodes[1].walletcreatefundedpsbt, [{""txid"": ext_utxo['txid'], ""vout"": ext_utxo['vout']}], {self.nodes[0].getnewaddress(): 10 + ext_utxo['am",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r507853729,507853729,test/functional/rpc_psbt.py
achow101,2020-11-05 20:22:52,I think I've fixed this.,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r518341748,518341748,test/functional/rpc_psbt.py
adamjonas,2020-11-06 15:34:43,I ran it 20 times and could not trigger any failures. Looks good.,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r518829488,518829488,test/functional/rpc_psbt.py
luke-jr,2020-11-09 16:13:02,Maybe we should require the user to provide the TXO too?,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r519932968,519932968,src/wallet/rpcwallet.cpp
luke-jr,2020-11-09 20:06:41,Why is `options` losing its explicit ref typing?,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r520088039,520088039,src/wallet/rpcwallet.cpp
apoelstra,2020-11-11 17:32:59,"This `else` is for an `if(txid is in wallet)` ... but what we actually want to check is `if(outpoint is in wallet)`. If you try to spend an output you don't know from a wallet transaction (e.g. by sending coins to a peer then trying to spend their output), this logic will simply fail -- it will `return false;` a few lines above when trying to compute `wtx.GetSpendSize` on the outpoint.\n",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r521522801,521522801,src/wallet/wallet.cpp
apoelstra,2020-11-11 19:47:46,I think you need to subtract the coin value from `value_to_select`. This looks like a rebasing error.,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r521598587,521598587,src/wallet/wallet.cpp
apoelstra,2020-11-11 20:00:56,"Would be good to add a functional test which funds a transaction using external inputs, asserting that the wallet balance would be insufficient without the external inputs. (As in https://github.com/ElementsProject/elements/pull/755/ which is a rough analogue of this PR.)",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r521605494,521605494,src/wallet/wallet.cpp
achow101,2020-11-12 17:23:05,I don't think it should be required. It could be an option like for the `signrawtransaction*` RPCs.,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r522280636,522280636,src/wallet/rpcwallet.cpp
achow101,2020-11-12 18:41:36,Oops. should be fixed.,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r522332187,522332187,src/wallet/rpcwallet.cpp
achow101,2020-11-12 18:41:58,I think I've resolved this.,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r522332422,522332422,src/wallet/wallet.cpp
achow101,2020-11-12 18:42:16,Should be fixed. Also added a test.,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r522332598,522332598,src/wallet/wallet.cpp
jonatack,2020-11-13 10:36:02,"e2c50aa11 missing headers?\n```diff\n #include <script/signingprovider.h>\n #include <script/standard.h>\n \n+#include <algorithm>\n+#include <map>\n+#include <set>\n+\n```\n",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r522865637,522865637,src/wallet/coincontrol.h
jonatack,2020-11-13 11:27:00,"e2c50aa\n```suggestion\n        const bool use_max_sig = coin_control && (coin_control->fAllowWatchOnly || coin_control->IsExternalSelected(txin.prevout));\n```",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r522891830,522891830,src/wallet/wallet.cpp
jonatack,2020-11-13 11:37:20,"e2c50aa do you want this to be lookup only?\n```suggestion\n            txouts.emplace_back(mi->second.tx->vout.at(input.prevout.n));\n```",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r522896525,522896525,src/wallet/wallet.cpp
jonatack,2020-11-13 11:51:56,"e2c50aa do we want lookup only or also insertion?\n```suggestion\n            txout = wtx.tx->vout.at(outpoint.n);\n```",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r522902940,522902940,src/wallet/wallet.cpp
jonatack,2020-11-13 12:13:03,"e2c50aa if you retouch, while here\n```diff\n-    for (const COutPoint& outpoint : vPresetInputs)\n-    {\n+    for (const COutPoint& outpoint : vPresetInputs) {\n\n...\n\n-        if (it != mapWallet.end())\n-        {\n+        if (it != mapWallet.end()) {\n```\n",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r522912575,522912575,src/wallet/wallet.cpp
jonatack,2020-11-13 14:39:51,"6bb343c for each of the new help entries:\n\n- can you line break these two sentences and remove the extra line break at the end?\n```suggestion\n                    {""solving_data"", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, ""Keys and scripts needed for producing a final transaction with a dummy signature.\n""\n                        ""Used for fee estimation during coin selectio",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r522991445,522991445,src/wallet/rpcwallet.cpp
jonatack,2020-11-13 14:44:14,6bb343c s/Note that all/All/ and s/utxo/UTXO/,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r522994250,522994250,src/wallet/rpcwallet.cpp
jonatack,2020-11-13 14:47:02,"6bb343c\n\n- s/Note that all/All/ -> the very next sentence also begins with ""Note that all"" (both uses of ""Note that"" could be omitted)\n\n- s/utxo/UTXO/",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r522996120,522996120,src/wallet/rpcwallet.cpp
jonatack,2020-11-13 14:48:26,"6bb343c while making changes here, can you remove this extra space? E.g. s/ or/or/",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r522996988,522996988,src/wallet/rpcwallet.cpp
jonatack,2020-11-13 14:58:38,"6bb343c for easier code comprehension, here and the other FundTransaction calls\n```suggestion\n            FundTransaction(pwallet, rawTx, fee, change_position, options, coin_control, /* solving_data */ NullUniValue);\n```",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r523003763,523003763,src/wallet/rpcwallet.cpp
jonatack,2020-11-13 15:10:40,6bb343c is `desc` used?,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r523011646,523011646,src/wallet/rpcwallet.cpp
jonatack,2020-11-13 15:13:13,"6bb343c\n```diff\n     if (!solving_data.isNull()) {\n         if (solving_data.exists(""pubkeys"")) {\n-            UniValue pubkey_strs = solving_data[""pubkeys""].get_array();\n+            const UniValue pubkey_strs = solving_data[""pubkeys""].get_array();\n             for (unsigned int i = 0; i < pubkey_strs.size(); ++i) {\n-                std::vector<unsigned char> data(ParseHex(pubkey_st",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r523013245,523013245,src/wallet/rpcwallet.cpp
jonatack,2020-11-13 15:15:45,6bb343c add header `#include <map>`,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r523015085,523015085,src/wallet/rpcwallet.cpp
jonatack,2020-11-13 15:26:43,"cd7567016 in both rpc_fundrawtransaction.py and rpc_psbt.py, can you please add similar tests using a script and a descriptor, plus test the behavior with invalid ones of each, and a test that hits the ""Missing solving data for estimating transaction size"" case?",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r523022388,523022388,test/functional/rpc_fundrawtransaction.py
apoelstra,2020-11-14 01:50:32,"This line will prevent you from adding the ""Missing solving data for estimating transaction size"" test that @jonatack suggests, since `SelectCoins` fails and the user will instead see ""Insufficient funds"".\n\nOne hacky fix may be to just return true here without selecting any coins, trusting that `CreateTransaction` will fail shortly thereafter. Proper fixes might be to have `SelectCoins` return",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r523337013,523337013,src/wallet/wallet.cpp
achow101,2020-11-14 04:10:17,"I have some ongoing work to refactor `CreateTransaction` and `SelectCoins` which will change some order here as well as the return values, so it might be better to push this (entire PR?) back to after that.",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r523372679,523372679,src/wallet/wallet.cpp
apoelstra,2020-11-29 04:19:31,I suppose you ought to add these to `send` from #16378 as well,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r532152847,532152847,src/rpc/client.cpp
achow101,2021-01-12 19:31:29,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r556024835,556024835,src/wallet/coincontrol.h
achow101,2021-01-12 19:31:34,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r556024884,556024884,src/wallet/wallet.cpp
achow101,2021-01-12 19:31:38,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r556024961,556024961,src/wallet/wallet.cpp
achow101,2021-01-12 19:31:45,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r556025046,556025046,src/wallet/wallet.cpp
achow101,2021-01-12 19:31:49,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r556025113,556025113,src/wallet/wallet.cpp
achow101,2021-01-12 19:31:53,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r556025180,556025180,src/wallet/rpcwallet.cpp
achow101,2021-01-12 19:31:58,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r556025243,556025243,src/wallet/rpcwallet.cpp
achow101,2021-01-12 19:32:04,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r556025323,556025323,src/wallet/rpcwallet.cpp
achow101,2021-01-12 19:32:09,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r556025407,556025407,src/wallet/rpcwallet.cpp
achow101,2021-01-12 19:32:15,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r556025516,556025516,src/wallet/rpcwallet.cpp
achow101,2021-01-12 19:32:30,Made some fixes that use `desc`,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r556025718,556025718,src/wallet/rpcwallet.cpp
achow101,2021-01-12 19:32:36,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r556025801,556025801,src/wallet/rpcwallet.cpp
achow101,2021-01-12 19:32:40,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r556025858,556025858,src/wallet/rpcwallet.cpp
achow101,2021-01-12 19:32:44,"Done.\n\nThe `Missing solving data for estimating transaction size` probably can't actually be reached.",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r556025907,556025907,test/functional/rpc_fundrawtransaction.py
achow101,2021-01-12 20:18:38,I've added `solving_data` to `send` via `options`.,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r556058844,556058844,src/rpc/client.cpp
MarcoFalke,2021-01-28 18:43:30,"can remove the diffs for `commands`, and then rebase",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r566325551,566325551,src/wallet/rpcwallet.cpp
achow101,2021-01-28 18:55:07,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r566332592,566332592,src/wallet/rpcwallet.cpp
meshcollider,2021-10-03 06:01:56,Check `IsHex` before calling `ParseHex` or use `ParseHexV`? (Here and below),https://github.com/bitcoin/bitcoin/pull/17211#discussion_r720775183,720775183,src/wallet/rpcwallet.cpp
meshcollider,2021-10-03 06:10:44,Nit: comment before the variable (here and elsewhere)? (Can't remember if this is preferred style),https://github.com/bitcoin/bitcoin/pull/17211#discussion_r720776010,720776010,src/wallet/rpcwallet.cpp
meshcollider,2021-10-03 06:11:51,This isn't `STR_HEX` (same in fundrawtransaction and send),https://github.com/bitcoin/bitcoin/pull/17211#discussion_r720776145,720776145,src/wallet/rpcwallet.cpp
jonatack,2021-10-03 08:04:21,see https://releases.llvm.org/12.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone-argument-comment.html and https://github.com/bitcoin/bitcoin/pull/21943#discussion_r717379468,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r720788873,720788873,src/wallet/rpcwallet.cpp
yanmaani,2021-10-03 10:00:01,Nit: is there any reason not to use a C++-style loop here? It's used further on on line 3359 and so on.,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r720802905,720802905,src/wallet/rpcwallet.cpp
yanmaani,2021-10-03 10:21:38,Ditto.,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r720805504,720805504,src/wallet/rpcwallet.cpp
yanmaani,2021-10-03 10:21:49,Ditto.,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r720805513,720805513,src/wallet/rpcwallet.cpp
yanmaani,2021-10-03 10:23:33,"Some error conditions are not tested, like transactions with no outputs, invalid descriptors, or invalid public keys.",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r720805662,720805662,test/functional/rpc_fundrawtransaction.py
achow101,2021-10-03 16:57:22,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r720856433,720856433,src/wallet/rpcwallet.cpp
achow101,2021-10-03 16:57:32,No longer relevant.,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r720856445,720856445,src/wallet/rpcwallet.cpp
achow101,2021-10-03 16:57:36,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r720856465,720856465,src/wallet/rpcwallet.cpp
achow101,2021-10-03 16:57:40,Done,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r720856472,720856472,src/wallet/rpcwallet.cpp
achow101,2021-10-03 16:57:55,Added tests for some failure conditions.,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r720856502,720856502,test/functional/rpc_fundrawtransaction.py
instagibbs,2021-10-04 01:10:41,"nit: we should probably keep error checking conditions the same, `input_bytes == -1` as per above",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r720977472,720977472,src/wallet/spend.cpp
instagibbs,2021-10-04 01:16:04,Would rather it be named the more obvious `SelectExternal` for grepping,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r720978421,720978421,src/wallet/coincontrol.h
yanmaani,2021-10-04 04:50:58,Any reason for this not to be `const`?,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r721039106,721039106,src/wallet/rpcwallet.cpp
yanmaani,2021-10-04 04:51:22,Ditto.,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r721039247,721039247,src/wallet/rpcwallet.cpp
yanmaani,2021-10-04 04:57:48,"nit: Shouldn't that likewise be `-1`, then?",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r721041650,721041650,src/wallet/spend.cpp
yanmaani,2021-10-04 05:02:19,"I think you forgot ""TX must have at least one output""?",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r721042817,721042817,test/functional/rpc_fundrawtransaction.py
MarcoFalke,2021-10-05 09:21:52,"This sometimes fails with ""insufficient funds"". I wonder if the following diff fixes it:\n\n```diff\ndiff --git a/test/functional/rpc_fundrawtransaction.py b/test/functional/rpc_fundrawtransaction.py\nindex f1215915a6..e92d5c8886 100755\n--- a/test/functional/rpc_fundrawtransaction.py\n+++ b/test/functional/rpc_fundrawtransaction.py\n@@ -1009,13 +1009,13 @@ class RawTransactionsTest(Bitcoin",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r722052455,722052455,test/functional/rpc_fundrawtransaction.py
katesalazar,2021-10-05 09:34:21,"Forced push https://github.com/bitcoin/bitcoin/pull/23100/commits/86c66206bba0ce6cf1452fd77ceed971b4ab120c (https://github.com/bitcoin/bitcoin/pull/23100) on top of 446b7066, which doesn't include this change added in e39b5a5e... 🤔",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r722062961,722062961,test/functional/rpc_fundrawtransaction.py
meshcollider,2021-10-05 09:47:06,"@MarcoFalke if I had to guess, that would fail due to paying extremely high fee?",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r722073181,722073181,test/functional/rpc_fundrawtransaction.py
MarcoFalke,2021-10-05 09:49:43,fundrawtransaction adjusts the feerate by adjusting the change output,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r722075485,722075485,test/functional/rpc_fundrawtransaction.py
katesalazar,2021-10-05 11:43:51,"> Forced push [86c6620](https://github.com/bitcoin/bitcoin/commit/86c66206bba0ce6cf1452fd77ceed971b4ab120c) (#23100) on top of [446b706](https://github.com/bitcoin/bitcoin/commit/446b706696451ae1a66ac416f347d734c5741d7c), which doesn't include this change added in [e39b5a5](https://github.com/bitcoin/bitcoin/commit/e39b5a5e7aa4d015257565ca79dc7b1f7a65e074)... 🤔\n\nRight now the only successful r",https://github.com/bitcoin/bitcoin/pull/17211#discussion_r722156389,722156389,test/functional/rpc_fundrawtransaction.py
instagibbs,2021-10-05 13:24:22,doesn't seem related to the feature?,https://github.com/bitcoin/bitcoin/pull/17211#discussion_r722237819,722237819,test/functional/rpc_fundrawtransaction.py
