[
  {
    "sha": "bbde1e99c893924dbef135f42c14f4df9828c6e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmRlMWU5OWM4OTM5MjRkYmVmMTM1ZjQyYzE0ZjRkZjk4MjhjNmU1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-01-11T16:28:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "sipa@ulyssis.org",
        "date": "2014-01-31T13:16:06Z"
      },
      "message": "Limit the number of orphan blocks\n\nIn case the total number of orphan blocks in memory exceeds a limit\n(currently set to 750), a random orphan block (which is not\ndepended on by another orphan block) is dropped. This means it will\nneed to be downloaded again, but it won't consume memory until then.",
      "tree": {
        "sha": "6f944d405b502bb3c4bc9616704e5fe72494b888",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f944d405b502bb3c4bc9616704e5fe72494b888"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbde1e99c893924dbef135f42c14f4df9828c6e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbde1e99c893924dbef135f42c14f4df9828c6e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbde1e99c893924dbef135f42c14f4df9828c6e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbde1e99c893924dbef135f42c14f4df9828c6e5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15ec451554b5889a92651b9fe71bf01047ba9fc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15ec451554b5889a92651b9fe71bf01047ba9fc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15ec451554b5889a92651b9fe71bf01047ba9fc3"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 29,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d33ad2fa9508b32939b3f830e567e6978e87aaa8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 1,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbde1e99c893924dbef135f42c14f4df9828c6e5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbde1e99c893924dbef135f42c14f4df9828c6e5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bbde1e99c893924dbef135f42c14f4df9828c6e5",
        "patch": "@@ -1054,6 +1054,31 @@ uint256 static GetOrphanRoot(const uint256& hash)\n     } while(true);\n }\n \n+// Remove a random orphan block (which does not have any dependent orphans).\n+void static PruneOrphanBlocks()\n+{\n+    if (mapOrphanBlocksByPrev.size() <= MAX_ORPHAN_BLOCKS)\n+        return;\n+\n+    // Pick a random orphan block.\n+    int pos = insecure_rand() % mapOrphanBlocksByPrev.size();\n+    std::multimap<uint256, COrphanBlock*>::iterator it = mapOrphanBlocksByPrev.begin();\n+    while (pos--) it++;\n+\n+    // As long as this block has other orphans depending on it, move to one of those successors.\n+    do {\n+        std::multimap<uint256, COrphanBlock*>::iterator it2 = mapOrphanBlocksByPrev.find(it->second->hashBlock);\n+        if (it2 == mapOrphanBlocksByPrev.end())\n+            break;\n+        it = it2;\n+    } while(1);\n+\n+    uint256 hash = it->second->hashBlock;\n+    delete it->second;\n+    mapOrphanBlocksByPrev.erase(it);\n+    mapOrphanBlocks.erase(hash);\n+}\n+\n int64_t GetBlockValue(int nHeight, int64_t nFees)\n {\n     int64_t nSubsidy = 50 * COIN;\n@@ -2373,10 +2398,11 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n     // If we don't already have its previous block, shunt it off to holding area until we get it\n     if (pblock->hashPrevBlock != 0 && !mapBlockIndex.count(pblock->hashPrevBlock))\n     {\n-        LogPrintf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString());\n+        LogPrintf(\"ProcessBlock: ORPHAN BLOCK %lu, prev=%s\\n\", (unsigned long)mapOrphanBlocks.size(), pblock->hashPrevBlock.ToString());\n \n         // Accept orphans as long as there is a node to request its parents from\n         if (pfrom) {\n+            PruneOrphanBlocks();\n             COrphanBlock* pblock2 = new COrphanBlock();\n             {\n                 CDataStream ss(SER_DISK, CLIENT_VERSION);"
      },
      {
        "sha": "05210e516467a3bf5b3c6a2721eb3b8e4183d101",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbde1e99c893924dbef135f42c14f4df9828c6e5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbde1e99c893924dbef135f42c14f4df9828c6e5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=bbde1e99c893924dbef135f42c14f4df9828c6e5",
        "patch": "@@ -45,6 +45,8 @@ static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** The maximum number of orphan transactions kept in memory */\n static const unsigned int MAX_ORPHAN_TRANSACTIONS = MAX_BLOCK_SIZE/100;\n+/** The maximum number of orphan blocks kept in memory */\n+static const unsigned int MAX_ORPHAN_BLOCKS = 750;\n /** The maximum size of a blk?????.dat file (since 0.8) */\n static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n /** The pre-allocation chunk size for blk?????.dat files (since 0.8) */"
      }
    ]
  }
]