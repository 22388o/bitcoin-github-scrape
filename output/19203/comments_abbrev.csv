MarcoFalke,2020-06-07 23:30:44,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-640296153,640296153,
DrahtBot,2020-06-07 23:34:29,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21328 (net, refactor: pass uint16 CService::port as uint16 by jonatack)\n* #19415 (net: Make DNS lookup mockable, add fuz",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-640296575,640296575,
Crypt-iQ,2020-09-01 05:04:04,"Builds on Ubuntu.\nFails to build on macOS with brew clang.\n<details>\n<summary>failure</summary>\n\n```\nMaking all in src\n  CXX      test/fuzz/addition_overflow-addition_overflow.o\nIn file included from test/fuzz/addition_overflow.cpp:7:\n./test/fuzz/util.h:335:13: error: no matching function for call to 'AdditionOverflow'\n        if (AdditionOverflow((uint64_t)fuzzed_file->m_offse",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-684254689,684254689,
practicalswift,2020-09-01 14:15:33,@Crypt-iQ Thanks for letting me know. Now rebased. Should compile on macOS now? :),https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-684887029,684887029,
Crypt-iQ,2020-09-01 19:08:50,@practicalswift Now compiles on macOS :). Will run the builds again and re-review.,https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-685075098,685075098,
Crypt-iQ,2020-09-02 17:34:50,"ACK 2d02f775fa36c59bca5d7ef1a0e702c1bc2de117\n\nCode change looks good to me. I did not try to reintroduce the CVE, but I did read up about it.\nUbuntu 18:\n- `./configure --enable-fuzz --with-sanitizers=address,undefined,integer,fuzzer` - no errors\n- valgrind - no errors\n\nmacOS 10.15.4:\n- `./configure --enable-fuzz --with-sanitizers=address,fuzzer --disable-asm` - no errors\n- `./con",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-685889544,685889544,
practicalswift,2020-09-17 13:38:32,"Had to rebase also this one to make use of the new `$(FUZZ_SUITE_LDFLAGS_COMMON)`.\n\n@Crypt-iQ May I ask you to review and hopefully give your second ACK on this PR? :)",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-694241213,694241213,
Crypt-iQ,2020-09-20 10:54:29,ACK ea6cd7b2cc6b070b2630457d75b396de555b31c7,https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-695773087,695773087,
practicalswift,2020-10-15 08:36:58,"Friendly review beg :)\n\nConcept NACK:s are totally fine too: that would allow me to move forward with other fuzzing stuff without having to keep this PR updated :)",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-708994095,708994095,
practicalswift,2020-10-15 08:38:14,@MarcoFalke Thanks for your Concept ACK. Would you mind reviewing the code too? :),https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-708994781,708994781,
MarcoFalke,2020-11-10 10:21:21,"Sorry, I don't know enough about sockets to be able to review this.",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-724609080,724609080,
practicalswift,2020-11-10 10:27:58,"@MarcoFalke Ah, got it! Do you know who would be an appropriate reviewer? :)\n\nFWIW I think sipa wrote the `Socks5(...)` code originally in #1141.\n\nAny review help welcome! Concept NACK is obviously fine too: I just want to move forward towards close (due to NACK or close due to merge) :)",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-724612684,724612684,
practicalswift,2020-11-13 10:07:12,"Rebased. Now using the names `MockableSocket`, `Socket` and `FuzzedSocket`.\n\n`Socket` and `FuzzedSocket` both implement `MockableSocket`.\n\nThe introduced `src/test/fuzz/socks5` would have caught the [CVE-2017-18350](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-November/017453.html) buffer overflow (which I caught via code review rather than fuzzing) within literally seconds",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-726673274,726673274,
laanwj,2020-12-21 17:08:42,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-749089371,749089371,
practicalswift,2020-12-21 22:39:37,"@laanwj @vasild \n\nThanks for very good review feedback!\n\nI believe I've addressed all the issues raised. Please re-review :)",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-749237405,749237405,
vasild,2020-12-23 15:49:48,"> I am considering how to make a RAII socket class...\n\nWhat about something like this: https://github.com/vasild/bitcoin/commit/bf3fa6a10a69f3d0dbd84188e3ba089a19248b20?",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-750359147,750359147,
practicalswift,2020-12-27 17:24:45,@vasild Great! Would you mind submitting that as a separate PR? :),https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-751493896,751493896,
vasild,2020-12-28 16:19:41,"> @vasild Great! Would you mind submitting that as a separate PR? :)\n\nHere it is: https://github.com/bitcoin/bitcoin/pull/20788. If it gets merged, then the first commit in this PR can be dropped.",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-751771010,751771010,
laanwj,2021-01-07 17:16:23,"I still like the concept of this very much, but I just wondered if there isn't a general way to fuzz network applications that doesn't require wrapping every BSD socketsI call. I mean it *seem* like something people would want to commonly do.",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-756254507,756254507,
vasild,2021-01-14 11:00:42,"@laanwj It is possible to override functions (e.g. `send(2)`) without modifying the source code with `LD_PRELOAD`. I think that is not supported by the current testing framework, out of the box? ",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-760123106,760123106,
practicalswift,2021-01-14 11:35:18,"> I still like the concept of this very much, but I just wondered if there isn't a general way to fuzz network applications that doesn't require wrapping every BSD socketsI call. I mean it _seem_ like something people would want to commonly do.\n\nEasy fuzzing of networking code is unfortunately an unsolved problem generally AFAIK.\n\nThere have been many attempts to solve this by using `LD_PR",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-760141077,760141077,
laanwj,2021-01-24 21:59:18,"> tl;dr -- Mocked networking functions driven by FuzzedDataProvider as suggested in this PR is AFAICT the most robust and appropriate way to solve our low-level network fuzzing needs.\n\nSure. Fair enough. It's just that I'm in principle not a fan of wrapping and abstracting basic operating system APIs such as BSD Sockets because anyone contributing to the code has to learn a special interface i",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-766439500,766439500,
vasild,2021-01-25 10:03:42,"> anyone contributing to the code has to learn a special interface instead of being up to speed quickly with what they already know\n\nIndeed! This is why #20788 mimics the system interface:\n\n```cpp\nssize_t ret = recv(socket, data, len, 0);\n// vs (same arguments, return type and semantic)\nssize_t ret = sock.Recv(data, len, 0);\n```",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-766701314,766701314,
practicalswift,2021-01-26 09:34:19,@laanwj Good points. When/if @vasild's #20788 is merged I'll use that facility instead :),https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-767420285,767420285,
Crypt-iQ,2021-01-26 13:31:09,"@laanwj Another PR mocks calls to `getaddrinfo` (#19415). I think introducing `LD_PRELOAD` into fuzz builds quickly becomes complicated with more fuzz tests - where do these shared objects go and who maintains them? The tradeoff is more mocking code, so I favor the approach in this PR.",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-767542163,767542163,
practicalswift,2021-02-08 17:02:40,@laanwj @Crypt-iQ Feedback addressed. Please re-review :),https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-775293106,775293106,
laanwj,2021-02-11 13:10:47,Needs rebase after #20788 (should be a much smaller change now).,https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-777445128,777445128,
laanwj,2021-02-16 15:37:08,Code review ACK ff13f099c922b90b6952d896d948d713ef6e9f7d,https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-779917520,779917520,
practicalswift,2021-02-16 19:16:38,@laanwj Thanks for the quick review! ❤️  Pushed an updated version addressing @MarcoFalke's feedback. Should hopefully be ready for final review.,https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-780059549,780059549,
vasild,2021-02-17 15:11:01,"Running the new fuzz test for a few tens of minutes produces no errors.\n\nReverting the fix for CVE-2017–18350 like this:\n\n```diff\n--- i/src/netbase.cpp\n+++ w/src/netbase.cpp\n@@ -533,13 +533,13 @@ bool Socks5(const std::string& strDest, int port, const ProxyCredentials* auth,\n         case SOCKS5Atyp::DOMAINNAME:\n         {\n             recvr = InterruptibleRecv(pchRet3, 1, SOCK",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-780622048,780622048,
vasild,2021-02-17 15:52:10,"The PR description needs an update since it mentions 4 commits, but there are just 2 now.",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-780653448,780653448,
laanwj,2021-02-17 17:00:31,"> The PR description needs an update since it mentions 4 commits, but there are just 2 now.\n\nAh yes I had already updated the PR title for it, but you're right that the description is out of date too.",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-780701159,780701159,
vasild,2021-03-02 17:06:13,"b62b90fa0e642c89a75afcfeb7f0491fc8e93f00 looks good except that the first commit does not compile:\n```\ntest/fuzz/socks5.cpp:23:5: error: use of undeclared identifier 'default_socks5_recv_timeout'\n    default_socks5_recv_timeout = g_socks5_recv_timeout;\n    ^\ntest/fuzz/socks5.cpp:23:35: error: use of undeclared identifier 'g_socks5_recv_timeout'\n    default_socks5_recv_timeout = g_socks",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-789062288,789062288,
practicalswift,2021-03-02 21:59:02,"@vasild \n\n> [b62b90f](https://github.com/bitcoin/bitcoin/commit/b62b90fa0e642c89a75afcfeb7f0491fc8e93f00) looks good except that the first commit does not compile:\n> …\n> (the second commit fixes this)\n\nOh, good catch!\n\nNow addressed :)\n\nPlease re-review :)",https://github.com/bitcoin/bitcoin/pull/19203#issuecomment-789249683,789249683,
Crypt-iQ,2020-07-21 02:09:06,"This is a redundant declaration, it's defined lower on line 164.",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r457793470,457793470,src/netbase.h
Crypt-iQ,2020-07-21 11:09:37,Just would like to point out that this is currently unused. Is this intentional?,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r458016843,458016843,src/netbase.h
Crypt-iQ,2020-07-21 11:16:02,nit: `m_fuzzed_data_provider` so the reference in the constructor can just be `fuzzed_data_provider`?,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r458020094,458020094,src/test/fuzz/util.h
Crypt-iQ,2020-07-21 11:20:04,Here it is still possible for `random_bytes.size() < len` since that condition is only checked if `ConsumeBool` returns true. Shouldn't the correct number of bytes be returned if possible?,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r458022084,458022084,src/test/fuzz/util.h
practicalswift,2020-08-14 17:08:04,"It is used in `netbase.cpp`? :)\n\n```\n$ git grep SocketImpl\nsrc/netbase.cpp:        SocketImpl socket{hSocket};\nsrc/netbase.cpp:        SocketImpl socket{hSocket};\nsrc/netbase.h:class SocketImpl : public Socket\nsrc/netbase.h:    explicit SocketImpl(SOCKET socket) : m_socket{socket}\n```",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r470748302,470748302,src/netbase.h
Crypt-iQ,2020-08-14 17:11:41,"I meant that even though it's used, the coverage isn't updated for `SocketImpl` functions. Might be a bug with `lcov` perhaps.",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r470750075,470750075,src/netbase.h
practicalswift,2020-08-14 17:14:46,"It is now used prior to L164, so it must be on L44 -- but removing L164. Thanks!",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r470751725,470751725,src/netbase.h
practicalswift,2020-08-14 17:17:29,I think that is expected: it is currently only from `ConnectThroughProxy` which is not fuzzed :),https://github.com/bitcoin/bitcoin/pull/19203#discussion_r470753145,470753145,src/netbase.h
practicalswift,2020-08-14 17:17:43,Good nit! Adressed!,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r470753243,470753243,src/test/fuzz/util.h
Crypt-iQ,2020-08-14 17:22:29,"Ah derp! I mistakenly thought it was fuzzed for some reason, but `FuzzedSocket` is the one that's used. Is the idea that they be used together in some manner eventually?",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r470755486,470755486,src/netbase.h
practicalswift,2020-08-14 17:23:02,"We want to make it so that the fuzzer driven `recv` can return _up to_ `len` bytes like the real `recv`, right? :)",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r470755741,470755741,src/test/fuzz/util.h
practicalswift,2020-08-14 17:29:03,@Crypt-iQ It is only used as a way to wrap an existing `SOCKET`  as a `Socket` instance: no further plans beyond that :),https://github.com/bitcoin/bitcoin/pull/19203#discussion_r470758852,470758852,src/netbase.h
Crypt-iQ,2020-08-14 19:15:08,"Ah, yes that makes sense, thanks for clarifying. ",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r470820694,470820694,src/test/fuzz/util.h
Crypt-iQ,2020-09-02 05:41:43,"Calling this with `-1` as the `min` parameter to `ConsumeIntegralInRange` will result in a very large range since it will be cast to `uint64_t`:\nhttps://github.com/bitcoin/bitcoin/blob/48c1083632687a42ac603d4f241e70616a1d3815/src/test/fuzz/FuzzedDataProvider.h#L87\n\nMaybe an alternative version of `ConsumeIntegralInRange` for just -1,0,1 can be used? Not your fault, it's the header file's fau",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r481735725,481735725,src/test/fuzz/util.h
Crypt-iQ,2020-09-02 05:41:57,Same here.,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r481735948,481735948,src/test/fuzz/util.h
Crypt-iQ,2020-09-02 05:51:38,"Nevermind, godbolt tells me I am wrong.",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r481745772,481745772,src/test/fuzz/util.h
vasild,2020-12-21 10:24:32,"Just a note: this could return `0` from `send()`. I am not sure if [`send(2)`](https://linux.die.net/man/2/send) could ever [return `0`](https://stackoverflow.com/questions/3081952/with-c-tcp-sockets-can-send-return-zero#3082032):\n\n> On success, these calls return the number of characters sent. On error, -1 is returned\n\nanyway, I think it is ok to return `0` - to check that our code does n",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r546625544,546625544,src/test/fuzz/util.h
vasild,2020-12-21 10:30:54,"I think it would be good to set `errno` if we are going to return an error (`-1`). Application reaction on error should differ depending on the value of `errno` (should retry on ""temporary"" errors).",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r546628691,546628691,src/test/fuzz/util.h
vasild,2020-12-21 10:34:32,Maybe assert that if `buf` is `nullptr` then `len` is `0` before this `if` and then remove `buf == nullptr` from here.,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r546630296,546630296,src/test/fuzz/util.h
vasild,2020-12-21 10:37:51,"Here and above, set `errno` to some ""random"" value if we are going to return `-1`. Maybe the ""random"" value should have higher probablitity of being one of `EAGAIN`, `EWOULDBLOCK`, `EINTR` or `EINPROGRESS`.",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r546631891,546631891,src/test/fuzz/util.h
vasild,2020-12-21 10:40:34,Why this? `recv(2)` would never set the remaining buffer to `0x0` bytes.,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r546633217,546633217,src/test/fuzz/util.h
vasild,2020-12-21 10:44:19,"What is the likelihood of this returning less than `len`? The `ConsumeBytes()` comment says:\n\n> ... If fewer than\n  // |num_bytes| of data remain, returns a shorter std::vector containing all\n  // of the data that's left.\n\nI think we should make it more likely that this fuzzed `recv()` returns a partial read because this is when the ""interesting"" things happen in the app code as it sho",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r546634939,546634939,src/test/fuzz/util.h
laanwj,2020-12-21 17:08:22,"I'd prefer to have this implementation in an implementation unit instead of the header. This is not a templated class and implementing virtual methods can be done everywhere.\nThis would also avoid adding the optional include `poll.h` here, I think.",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r546824364,546824364,src/netbase.h
practicalswift,2020-12-21 18:09:19,Good point! Pushed an updated version addressing this.,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r546853431,546853431,src/test/fuzz/util.h
practicalswift,2020-12-21 18:09:27,Good point! Pushed an updated version addressing this.,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r546853482,546853482,src/test/fuzz/util.h
practicalswift,2020-12-21 18:10:03,Good point! Pushed an updated version addressing this.,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r546853754,546853754,src/test/fuzz/util.h
practicalswift,2020-12-21 18:32:55,Good point! Pushed an updated version addressing this.,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r546863947,546863947,src/netbase.h
practicalswift,2020-12-21 22:32:01,"This is intentional:\n\nIf `m_fuzzed_data_provider.ConsumeBool()` we pretend to read `len` bytes but we only consume `random_bytes.size()` from the fuzzing input and let the remaining bytes be `0x0`.\n\nThat way we can satisfy a read of say 4096 bytes even if we only have say 20 bytes of input left: 20 bytes will be real data from the input and 4076 bytes will be `0x0` bytes.\n\nMakes sense?",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r546962270,546962270,src/test/fuzz/util.h
practicalswift,2020-12-21 22:38:41,Good point! Pushed an updated version addressing this.,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r546964547,546964547,src/test/fuzz/util.h
vasild,2020-12-22 10:48:51,"Oh yes, we return `len`. Sorry for the noise.",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r547206605,547206605,src/test/fuzz/util.h
laanwj,2021-01-07 17:09:49,This could be in the `#else` of `USE_POLL`?,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r553462191,553462191,src/netbase.h
Crypt-iQ,2021-02-07 21:51:33,I can't see where this is used,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r571705522,571705522,src/netbase.h
Crypt-iQ,2021-02-07 21:51:55,This move is an artifact of an earlier commit,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r571705550,571705550,src/netbase.h
Crypt-iQ,2021-02-07 21:54:52,"Should use `inline`. See https://github.com/bitcoin/bitcoin/pull/20733\n\nmacOS build will warn with \n\n```\nld: warning: duplicate symbol 'ConsumeSocket(FuzzedDataProvider&)' in:\n    test/fuzz/fuzz-addition_overflow.o\n    libtest_fuzz.a(libtest_fuzz_a-util.o)\n```",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r571705869,571705869,src/test/fuzz/util.h
practicalswift,2021-02-08 17:00:48,Now removed. Thanks!,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r572210234,572210234,src/netbase.h
practicalswift,2021-02-08 17:01:02,Now addressed. Thanks!,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r572210399,572210399,src/netbase.h
practicalswift,2021-02-08 17:01:13,Good idea! Now addressed. Thanks!,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r572210552,572210552,src/netbase.h
practicalswift,2021-02-08 17:01:36,Now addressed. Thanks!,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r572210839,572210839,src/test/fuzz/util.h
MarcoFalke,2021-02-16 15:47:40,why is the full vector copied?,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r576926489,576926489,src/test/fuzz/util.h
MarcoFalke,2021-02-16 15:50:40,same,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r576929017,576929017,src/test/fuzz/util.h
MarcoFalke,2021-02-16 15:51:58,Also I am wondering why this can't use PickValueInArray,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r576929991,576929991,src/test/fuzz/util.h
MarcoFalke,2021-02-16 15:55:11,"nit: Would be nice to break long lines after each `,` or `?`, or `:`",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r576932534,576932534,src/test/fuzz/socks5.cpp
MarcoFalke,2021-02-16 15:55:41,"nit: Would be nice to break long lines after each `?`, or `:`",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r576933022,576933022,src/test/fuzz/util.h
vasild,2021-02-16 17:24:11,"nit: since `Socks5()` is not `static` now in `netbase.cpp`, I think it is more natural to put its declaration (prototype) in `netbase.h` and remove it from here.\n\nSame for `SOCKS5_RECV_TIMEOUT`.",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r577000785,577000785,src/test/fuzz/socks5.cpp
practicalswift,2021-02-16 18:27:38,"Oh, that was not intentional. Thanks!",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r577043636,577043636,src/test/fuzz/util.h
practicalswift,2021-02-16 19:15:26,"1. Thanks! Fixed.\n2. Now using `std::array` and `PickValueInArray`.",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r577073043,577073043,src/test/fuzz/util.h
practicalswift,2021-02-16 19:15:35,Fixed!,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r577073150,577073150,src/test/fuzz/socks5.cpp
practicalswift,2021-02-16 19:15:41,Fixed!,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r577073230,577073230,src/test/fuzz/util.h
vasild,2021-02-17 14:23:19,"nit: the typecast `(char*)` in `memset()` should not be needed. Or if it is needed (why?), then it should also be needed for the `memcpy()` call a few lines earlier since both take `void*` argument.",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r577650893,577650893,src/test/fuzz/util.h
vasild,2021-02-17 14:35:21,"`SOCKS5_RECV_TIMEOUT` can be lowered to 1 second for the tests or be the default 20 seconds.\nIn half of the cases this will sleep for 2 ms. So we need 500 `Recv()` calls where this sleep is executed in order to trigger a higher level timeout of 1 second.\n\nI think this timeout will practically never be reached. Maybe change this to a few 100s of ms to make a timeout more likely?",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r577660714,577660714,src/test/fuzz/util.h
vasild,2021-02-18 13:37:03,"> Would be nice to break long lines ...\n\nOpened https://github.com/bitcoin/bitcoin/pull/21223 style: make clang-format break long lines",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r578422048,578422048,src/test/fuzz/socks5.cpp
ryanofsky,2021-02-19 14:30:09,"In commit ""fuzz: Add fuzzing harness for Socks5(...)"" (1d95ff9f731b0c5a317a9c3ce52e37b4a57e99ff)\n\nIt it better to make assumptions about return value and `errno` value with `ConsumeIntegralInRange` and `PickValueInArray` instead of just using `ConsumeIntegral` for these? `ConsumeIntegral` would definitely make the setup shorter and simpler and seem to make fuzzing more robust. Would it cause f",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r579225840,579225840,src/test/fuzz/util.h
ryanofsky,2021-02-19 14:32:34,"re: https://github.com/bitcoin/bitcoin/pull/19203#discussion_r577650893\n\n> nit: the typecast `(char*)` in `memset()` should not be needed. Or if it is needed (why?), then it should also be needed for the `memcpy()` call a few lines earlier since both take `void*` argument.\n\nI think think the compiler won't allow arithmetic `+ random_bytes.size()` on a void pointer.",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r579227540,579227540,src/test/fuzz/util.h
ryanofsky,2021-02-19 14:37:41,"In commit ""fuzz: Add fuzzing harness for Socks5(...)"" (1d95ff9f731b0c5a317a9c3ce52e37b4a57e99ff)\n\nAgain I don't understand why need to bias the choice here instead of just choosing uniformly in the range. I guess I don't understand enough about fuzzing but it seems annoying if you have to hold the fuzzer's hand this way.",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r579230964,579230964,src/test/fuzz/util.h
ryanofsky,2021-02-19 14:47:43,"In commit ""fuzz: Add FUZZED_SOCKET_FAKE_LATENCY mode to FuzzedSock to allow for fuzzing timeout logic"" (88af03002c170d95dc04077f3bbcd739e2a9e5b7)\n\nIt seems dangerous to disguise a variable as an all caps constant. Best thing would be change this to a `SOCKS5_RECV_TIMEOUT_DEFAULT` default timeout, and add a runtime parameter to override the default. If that's too complicated, next best thing wo",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r579238337,579238337,src/netbase.cpp
ryanofsky,2021-02-19 14:56:08,"re: https://github.com/bitcoin/bitcoin/pull/19203#discussion_r577660714\n\n> `SOCKS5_RECV_TIMEOUT` can be lowered to 1 second for the tests or be the default 20 seconds.\n> In half of the cases this will sleep for 2 ms. So we need 500 `Recv()` calls where this sleep is executed in order to trigger a higher level timeout of 1 second.\n> \n> I think this timeout will practically never be reache",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r579244585,579244585,src/test/fuzz/util.h
vasild,2021-03-01 07:08:40,"You are right - it can be lowered to 1ms or be the default 20sec. If we want to always produce a timeout, maybe better to sleep for `SOCKS5_RECV_TIMEOUT` instead of `std::chrono::milliseconds{2}`?\n\nWhy would it be fake sleeping? My understanding is that it will actually sleep in the middle of the fuzz test.",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r584485495,584485495,src/test/fuzz/util.h
vasild,2021-03-01 07:12:59,"I think we want to mimic a conforming OS `send()` because our code is not prepared to handle a misbehaving `send()`, e.g.\n* one that returns `-1` and does not set `errno` or\n* returns `-1` and sets errno to `2379392` or \n* returns `-9287` or\n* returns a number bigger than `len`.",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r584487055,584487055,src/test/fuzz/util.h
practicalswift,2021-03-02 13:22:25,Addressed!,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r585559158,585559158,src/netbase.cpp
practicalswift,2021-03-02 13:23:01,Addressed!,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r585559526,585559526,src/test/fuzz/socks5.cpp
practicalswift,2021-03-02 13:31:48,Unfortunately the sleeping required to make the timeout trigger is not mockable: that's the reason for making the ugly 2 ms real sleep opt-in via the environment variable `FUZZED_SOCKET_FAKE_LATENCY`. That environment is not assumed to be set except in special circumstances such as when targeted fuzzing is performed by security researchers and others who are willing to pay the 2 ms cost in order t,https://github.com/bitcoin/bitcoin/pull/19203#discussion_r585565843,585565843,src/test/fuzz/util.h
practicalswift,2021-03-02 15:34:04,"Good question!\n\nMy intuition was that the fuzzer would be helped by being able to distinguish between the expected ""success case"" (enough to read) and the unexpected ""fail"" case ((likely) not enough to read) on a single byte input basis. In other words: a single byte input chooses between the ""fail path"" and the ""success path"" via `ConsumeBool`.\n\nAfter some tinkering/measuring it seems lik",https://github.com/bitcoin/bitcoin/pull/19203#discussion_r585667452,585667452,src/test/fuzz/util.h
