[
  {
    "sha": "b22d4c1607b6488b378d3427a708bd71f12f7276",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjJkNGMxNjA3YjY0ODhiMzc4ZDM0MjdhNzA4YmQ3MWYxMmY3Mjc2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-06-07T16:59:46Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-03-02T21:43:42Z"
      },
      "message": "fuzz: Add fuzzing harness for Socks5(...)",
      "tree": {
        "sha": "0ccf88ba2948a72de3c8b31fdcb1cf0ccacdd05c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ccf88ba2948a72de3c8b31fdcb1cf0ccacdd05c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b22d4c1607b6488b378d3427a708bd71f12f7276",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b22d4c1607b6488b378d3427a708bd71f12f7276",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b22d4c1607b6488b378d3427a708bd71f12f7276",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b22d4c1607b6488b378d3427a708bd71f12f7276/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9f41df1ead4b6a83a51fc41966b111c8459c313",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9f41df1ead4b6a83a51fc41966b111c8459c313",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9f41df1ead4b6a83a51fc41966b111c8459c313"
      }
    ],
    "stats": {
      "total": 174,
      "additions": 166,
      "deletions": 8
    },
    "files": [
      {
        "sha": "502ee5cf375684d1ad0066307d5530d3515ed9aa",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22d4c1607b6488b378d3427a708bd71f12f7276/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22d4c1607b6488b378d3427a708bd71f12f7276/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=b22d4c1607b6488b378d3427a708bd71f12f7276",
        "patch": "@@ -285,6 +285,7 @@ test_fuzz_fuzz_SOURCES = \\\n  test/fuzz/secp256k1_ecdsa_signature_parse_der_lax.cpp \\\n  test/fuzz/signature_checker.cpp \\\n  test/fuzz/signet.cpp \\\n+ test/fuzz/socks5.cpp \\\n  test/fuzz/span.cpp \\\n  test/fuzz/spanparsing.cpp \\\n  test/fuzz/string.cpp \\"
      },
      {
        "sha": "53d786084b659bdd725f3afc75dadaab2980df13",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22d4c1607b6488b378d3427a708bd71f12f7276/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22d4c1607b6488b378d3427a708bd71f12f7276/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=b22d4c1607b6488b378d3427a708bd71f12f7276",
        "patch": "@@ -389,13 +389,6 @@ static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, c\n     return len == 0 ? IntrRecvError::OK : IntrRecvError::Timeout;\n }\n \n-/** Credentials for proxy authentication */\n-struct ProxyCredentials\n-{\n-    std::string username;\n-    std::string password;\n-};\n-\n /** Convert SOCKS5 reply to an error message */\n static std::string Socks5ErrorString(uint8_t err)\n {\n@@ -439,7 +432,7 @@ static std::string Socks5ErrorString(uint8_t err)\n  * @see <a href=\"https://www.ietf.org/rfc/rfc1928.txt\">RFC1928: SOCKS Protocol\n  *      Version 5</a>\n  */\n-static bool Socks5(const std::string& strDest, int port, const ProxyCredentials* auth, const Sock& sock)\n+bool Socks5(const std::string& strDest, int port, const ProxyCredentials* auth, const Sock& sock)\n {\n     IntrRecvError recvr;\n     LogPrint(BCLog::NET, \"SOCKS5 connecting %s\\n\", strDest);"
      },
      {
        "sha": "b225f128e7a3dc741f0b06e8f1333022eaea933c",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22d4c1607b6488b378d3427a708bd71f12f7276/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22d4c1607b6488b378d3427a708bd71f12f7276/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=b22d4c1607b6488b378d3427a708bd71f12f7276",
        "patch": "@@ -40,6 +40,13 @@ class proxyType\n     bool randomize_credentials;\n };\n \n+/** Credentials for proxy authentication */\n+struct ProxyCredentials\n+{\n+    std::string username;\n+    std::string password;\n+};\n+\n enum Network ParseNetwork(const std::string& net);\n std::string GetNetworkName(enum Network net);\n /** Return a vector of publicly routable Network names; optionally append NET_UNROUTABLE. */\n@@ -77,4 +84,6 @@ bool SetSocketNonBlocking(const SOCKET& hSocket, bool fNonBlocking);\n bool SetSocketNoDelay(const SOCKET& hSocket);\n void InterruptSocks5(bool interrupt);\n \n+bool Socks5(const std::string& strDest, int port, const ProxyCredentials* auth, const Sock& socket);\n+\n #endif // BITCOIN_NETBASE_H"
      },
      {
        "sha": "1f2f8ee7c3ac4b45754db0d0cc692a9093487e0a",
        "filename": "src/test/fuzz/socks5.cpp",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22d4c1607b6488b378d3427a708bd71f12f7276/src/test/fuzz/socks5.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22d4c1607b6488b378d3427a708bd71f12f7276/src/test/fuzz/socks5.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/socks5.cpp?ref=b22d4c1607b6488b378d3427a708bd71f12f7276",
        "patch": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <netbase.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize_socks5()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const BasicTestingSetup>();\n+}\n+\n+FUZZ_TARGET_INIT(socks5, initialize_socks5)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    ProxyCredentials proxy_credentials;\n+    proxy_credentials.username = fuzzed_data_provider.ConsumeRandomLengthString(512);\n+    proxy_credentials.password = fuzzed_data_provider.ConsumeRandomLengthString(512);\n+    InterruptSocks5(fuzzed_data_provider.ConsumeBool());\n+    FuzzedSock fuzzed_sock = ConsumeSock(fuzzed_data_provider);\n+    // This Socks5(...) fuzzing harness would have caught CVE-2017-18350 within\n+    // a few seconds of fuzzing.\n+    (void)Socks5(fuzzed_data_provider.ConsumeRandomLengthString(512),\n+                 fuzzed_data_provider.ConsumeIntegral<int>(),\n+                 fuzzed_data_provider.ConsumeBool() ? &proxy_credentials : nullptr,\n+                 fuzzed_sock);\n+}"
      },
      {
        "sha": "4b7b4c88c83bb437f4ef82ad6d95a96b284689b8",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 122,
        "deletions": 0,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22d4c1607b6488b378d3427a708bd71f12f7276/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22d4c1607b6488b378d3427a708bd71f12f7276/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=b22d4c1607b6488b378d3427a708bd71f12f7276",
        "patch": "@@ -31,6 +31,7 @@\n #include <version.h>\n \n #include <algorithm>\n+#include <array>\n #include <cstdint>\n #include <cstdio>\n #include <optional>\n@@ -250,6 +251,15 @@ template <class T>\n     return false;\n }\n \n+/**\n+ * Sets errno to a value selected from the given std::array `errnos`.\n+ */\n+template <typename T, size_t size>\n+void SetFuzzedErrNo(FuzzedDataProvider& fuzzed_data_provider, const std::array<T, size>& errnos)\n+{\n+    errno = fuzzed_data_provider.PickValueInArray(errnos);\n+}\n+\n /**\n  * Returns a byte vector of specified size regardless of the number of remaining bytes available\n  * from the fuzzer. Pads with zero value bytes if needed to achieve the specified size.\n@@ -534,4 +544,116 @@ void ReadFromStream(FuzzedDataProvider& fuzzed_data_provider, Stream& stream) no\n     }\n }\n \n+class FuzzedSock : public Sock\n+{\n+    FuzzedDataProvider& m_fuzzed_data_provider;\n+\n+public:\n+    explicit FuzzedSock(FuzzedDataProvider& fuzzed_data_provider) : m_fuzzed_data_provider{fuzzed_data_provider}\n+    {\n+    }\n+\n+    ~FuzzedSock() override\n+    {\n+    }\n+\n+    SOCKET Get() const override\n+    {\n+        assert(false && \"Not implemented yet.\");\n+    }\n+\n+    SOCKET Release() override\n+    {\n+        assert(false && \"Not implemented yet.\");\n+    }\n+\n+    void Reset() override\n+    {\n+        assert(false && \"Not implemented yet.\");\n+    }\n+\n+    ssize_t Send(const void* data, size_t len, int flags) const override\n+    {\n+        constexpr std::array send_errnos{\n+            EACCES,\n+            EAGAIN,\n+            EALREADY,\n+            EBADF,\n+            ECONNRESET,\n+            EDESTADDRREQ,\n+            EFAULT,\n+            EINTR,\n+            EINVAL,\n+            EISCONN,\n+            EMSGSIZE,\n+            ENOBUFS,\n+            ENOMEM,\n+            ENOTCONN,\n+            ENOTSOCK,\n+            EOPNOTSUPP,\n+            EPIPE,\n+            EWOULDBLOCK,\n+        };\n+        if (m_fuzzed_data_provider.ConsumeBool()) {\n+            return len;\n+        }\n+        const ssize_t r = m_fuzzed_data_provider.ConsumeIntegralInRange<ssize_t>(-1, len);\n+        if (r == -1) {\n+            SetFuzzedErrNo(m_fuzzed_data_provider, send_errnos);\n+        }\n+        return r;\n+    }\n+\n+    ssize_t Recv(void* buf, size_t len, int flags) const override\n+    {\n+        constexpr std::array recv_errnos{\n+            EAGAIN,\n+            EBADF,\n+            ECONNREFUSED,\n+            EFAULT,\n+            EINTR,\n+            EINVAL,\n+            ENOMEM,\n+            ENOTCONN,\n+            ENOTSOCK,\n+            EWOULDBLOCK,\n+        };\n+        assert(buf != nullptr || len == 0);\n+        if (len == 0 || m_fuzzed_data_provider.ConsumeBool()) {\n+            const ssize_t r = m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+            if (r == -1) {\n+                SetFuzzedErrNo(m_fuzzed_data_provider, recv_errnos);\n+            }\n+            return r;\n+        }\n+        const std::vector<uint8_t> random_bytes = m_fuzzed_data_provider.ConsumeBytes<uint8_t>(\n+            m_fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, len));\n+        if (random_bytes.empty()) {\n+            const ssize_t r = m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+            if (r == -1) {\n+                SetFuzzedErrNo(m_fuzzed_data_provider, recv_errnos);\n+            }\n+            return r;\n+        }\n+        std::memcpy(buf, random_bytes.data(), random_bytes.size());\n+        if (m_fuzzed_data_provider.ConsumeBool()) {\n+            if (len > random_bytes.size()) {\n+                std::memset((char*)buf + random_bytes.size(), 0, len - random_bytes.size());\n+            }\n+            return len;\n+        }\n+        return random_bytes.size();\n+    }\n+\n+    bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override\n+    {\n+        return m_fuzzed_data_provider.ConsumeBool();\n+    }\n+};\n+\n+[[nodiscard]] inline FuzzedSock ConsumeSock(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    return FuzzedSock{fuzzed_data_provider};\n+}\n+\n #endif // BITCOIN_TEST_FUZZ_UTIL_H"
      }
    ]
  },
  {
    "sha": "366e3e1f89d99c62b548087384487b62fd602e17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjZlM2UxZjg5ZDk5YzYyYjU0ODA4NzM4NDQ4N2I2MmZkNjAyZTE3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-02-16T09:56:47Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-03-02T21:44:51Z"
      },
      "message": "fuzz: Add FUZZED_SOCKET_FAKE_LATENCY mode to FuzzedSock to allow for fuzzing timeout logic",
      "tree": {
        "sha": "2a5585b7d2018d4ff204aafd61042b6f7bc9e1e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a5585b7d2018d4ff204aafd61042b6f7bc9e1e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/366e3e1f89d99c62b548087384487b62fd602e17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/366e3e1f89d99c62b548087384487b62fd602e17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/366e3e1f89d99c62b548087384487b62fd602e17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/366e3e1f89d99c62b548087384487b62fd602e17/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b22d4c1607b6488b378d3427a708bd71f12f7276",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b22d4c1607b6488b378d3427a708bd71f12f7276",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b22d4c1607b6488b378d3427a708bd71f12f7276"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 22,
      "deletions": 9
    },
    "files": [
      {
        "sha": "88c36ed86c0ee8bd20102085d35e07842639d97d",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/366e3e1f89d99c62b548087384487b62fd602e17/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/366e3e1f89d99c62b548087384487b62fd602e17/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=366e3e1f89d99c62b548087384487b62fd602e17",
        "patch": "@@ -39,7 +39,7 @@ int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n bool fNameLookup = DEFAULT_NAME_LOOKUP;\n \n // Need ample time for negotiation for very slow proxies such as Tor (milliseconds)\n-static const int SOCKS5_RECV_TIMEOUT = 20 * 1000;\n+int g_socks5_recv_timeout = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n enum Network ParseNetwork(const std::string& net_in) {\n@@ -455,7 +455,7 @@ bool Socks5(const std::string& strDest, int port, const ProxyCredentials* auth,\n         return error(\"Error sending to proxy\");\n     }\n     uint8_t pchRet1[2];\n-    if ((recvr = InterruptibleRecv(pchRet1, 2, SOCKS5_RECV_TIMEOUT, sock)) != IntrRecvError::OK) {\n+    if ((recvr = InterruptibleRecv(pchRet1, 2, g_socks5_recv_timeout, sock)) != IntrRecvError::OK) {\n         LogPrintf(\"Socks5() connect to %s:%d failed: InterruptibleRecv() timeout or other failure\\n\", strDest, port);\n         return false;\n     }\n@@ -478,7 +478,7 @@ bool Socks5(const std::string& strDest, int port, const ProxyCredentials* auth,\n         }\n         LogPrint(BCLog::PROXY, \"SOCKS5 sending proxy authentication %s:%s\\n\", auth->username, auth->password);\n         uint8_t pchRetA[2];\n-        if ((recvr = InterruptibleRecv(pchRetA, 2, SOCKS5_RECV_TIMEOUT, sock)) != IntrRecvError::OK) {\n+        if ((recvr = InterruptibleRecv(pchRetA, 2, g_socks5_recv_timeout, sock)) != IntrRecvError::OK) {\n             return error(\"Error reading proxy authentication response\");\n         }\n         if (pchRetA[0] != 0x01 || pchRetA[1] != 0x00) {\n@@ -503,7 +503,7 @@ bool Socks5(const std::string& strDest, int port, const ProxyCredentials* auth,\n         return error(\"Error sending to proxy\");\n     }\n     uint8_t pchRet2[4];\n-    if ((recvr = InterruptibleRecv(pchRet2, 4, SOCKS5_RECV_TIMEOUT, sock)) != IntrRecvError::OK) {\n+    if ((recvr = InterruptibleRecv(pchRet2, 4, g_socks5_recv_timeout, sock)) != IntrRecvError::OK) {\n         if (recvr == IntrRecvError::Timeout) {\n             /* If a timeout happens here, this effectively means we timed out while connecting\n              * to the remote node. This is very common for Tor, so do not print an\n@@ -527,24 +527,24 @@ bool Socks5(const std::string& strDest, int port, const ProxyCredentials* auth,\n     uint8_t pchRet3[256];\n     switch (pchRet2[3])\n     {\n-        case SOCKS5Atyp::IPV4: recvr = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, sock); break;\n-        case SOCKS5Atyp::IPV6: recvr = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, sock); break;\n+        case SOCKS5Atyp::IPV4: recvr = InterruptibleRecv(pchRet3, 4, g_socks5_recv_timeout, sock); break;\n+        case SOCKS5Atyp::IPV6: recvr = InterruptibleRecv(pchRet3, 16, g_socks5_recv_timeout, sock); break;\n         case SOCKS5Atyp::DOMAINNAME:\n         {\n-            recvr = InterruptibleRecv(pchRet3, 1, SOCKS5_RECV_TIMEOUT, sock);\n+            recvr = InterruptibleRecv(pchRet3, 1, g_socks5_recv_timeout, sock);\n             if (recvr != IntrRecvError::OK) {\n                 return error(\"Error reading from proxy\");\n             }\n             int nRecv = pchRet3[0];\n-            recvr = InterruptibleRecv(pchRet3, nRecv, SOCKS5_RECV_TIMEOUT, sock);\n+            recvr = InterruptibleRecv(pchRet3, nRecv, g_socks5_recv_timeout, sock);\n             break;\n         }\n         default: return error(\"Error: malformed proxy response\");\n     }\n     if (recvr != IntrRecvError::OK) {\n         return error(\"Error reading from proxy\");\n     }\n-    if ((recvr = InterruptibleRecv(pchRet3, 2, SOCKS5_RECV_TIMEOUT, sock)) != IntrRecvError::OK) {\n+    if ((recvr = InterruptibleRecv(pchRet3, 2, g_socks5_recv_timeout, sock)) != IntrRecvError::OK) {\n         return error(\"Error reading from proxy\");\n     }\n     LogPrint(BCLog::NET, \"SOCKS5 connected %s\\n\", strDest);"
      },
      {
        "sha": "123ee042ee60b5b0bdc2ec34b3a8a2d7682e3caa",
        "filename": "src/test/fuzz/socks5.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/366e3e1f89d99c62b548087384487b62fd602e17/src/test/fuzz/socks5.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/366e3e1f89d99c62b548087384487b62fd602e17/src/test/fuzz/socks5.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/socks5.cpp?ref=366e3e1f89d99c62b548087384487b62fd602e17",
        "patch": "@@ -11,9 +11,16 @@\n #include <string>\n #include <vector>\n \n+namespace {\n+int default_socks5_recv_timeout;\n+};\n+\n+extern int g_socks5_recv_timeout;\n+\n void initialize_socks5()\n {\n     static const auto testing_setup = MakeNoLogFileContext<const BasicTestingSetup>();\n+    default_socks5_recv_timeout = g_socks5_recv_timeout;\n }\n \n FUZZ_TARGET_INIT(socks5, initialize_socks5)\n@@ -23,6 +30,9 @@ FUZZ_TARGET_INIT(socks5, initialize_socks5)\n     proxy_credentials.username = fuzzed_data_provider.ConsumeRandomLengthString(512);\n     proxy_credentials.password = fuzzed_data_provider.ConsumeRandomLengthString(512);\n     InterruptSocks5(fuzzed_data_provider.ConsumeBool());\n+    // Set FUZZED_SOCKET_FAKE_LATENCY=1 to exercise recv timeout code paths. This\n+    // will slow down fuzzing.\n+    g_socks5_recv_timeout = (fuzzed_data_provider.ConsumeBool() && std::getenv(\"FUZZED_SOCKET_FAKE_LATENCY\") != nullptr) ? 1 : default_socks5_recv_timeout;\n     FuzzedSock fuzzed_sock = ConsumeSock(fuzzed_data_provider);\n     // This Socks5(...) fuzzing harness would have caught CVE-2017-18350 within\n     // a few seconds of fuzzing."
      },
      {
        "sha": "daded0959fc1c163c373f218d8101844502caf15",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/366e3e1f89d99c62b548087384487b62fd602e17/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/366e3e1f89d99c62b548087384487b62fd602e17/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=366e3e1f89d99c62b548087384487b62fd602e17",
        "patch": "@@ -642,6 +642,9 @@ class FuzzedSock : public Sock\n             }\n             return len;\n         }\n+        if (m_fuzzed_data_provider.ConsumeBool() && std::getenv(\"FUZZED_SOCKET_FAKE_LATENCY\") != nullptr) {\n+            std::this_thread::sleep_for(std::chrono::milliseconds{2});\n+        }\n         return random_bytes.size();\n     }\n "
      }
    ]
  }
]