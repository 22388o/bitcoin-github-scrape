[
  {
    "sha": "bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDAwNjExMGZiNTFmMWZjMGNiYmVlZjNlZDZlYWFlNjZiMjk2ZDhj",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-11T10:58:11Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-25T19:39:26Z"
      },
      "message": "Consensus: Refactor: Introduce Consensus::Params class",
      "tree": {
        "sha": "303e9ec0bd25fc3c2d15fe33004dcb7459f50b13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/303e9ec0bd25fc3c2d15fe33004dcb7459f50b13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbb2cf5522983e4a952cfb25e577b1998a06c769",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbb2cf5522983e4a952cfb25e577b1998a06c769",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbb2cf5522983e4a952cfb25e577b1998a06c769"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 70,
      "deletions": 49
    },
    "files": [
      {
        "sha": "37184b62863644ab8ffd6e4596897e2ee0421aa4",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
        "patch": "@@ -87,6 +87,7 @@ BITCOIN_CORE_H = \\\n   coins.h \\\n   compat.h \\\n   compressor.h \\\n+  consensus/params.h \\\n   core_io.h \\\n   wallet/db.h \\\n   eccryptoverify.h \\"
      },
      {
        "sha": "3e20d9f8f2e4a912acfb786404242f6d42687cfc",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 28,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
        "patch": "@@ -101,6 +101,14 @@ class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n         strNetworkID = \"main\";\n+        consensus.nSubsidyHalvingInterval = 210000;\n+        consensus.nMajorityEnforceBlockUpgrade = 750;\n+        consensus.nMajorityRejectBlockOutdated = 950;\n+        consensus.nMajorityWindow = 1000;\n+        consensus.powLimit = ~arith_uint256(0) >> 32;\n+        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowTargetSpacing = 10 * 60;\n+        consensus.fPowAllowMinDifficultyBlocks = false;\n         /** \n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -112,14 +120,7 @@ class CMainParams : public CChainParams {\n         pchMessageStart[3] = 0xd9;\n         vAlertPubKey = ParseHex(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\");\n         nDefaultPort = 8333;\n-        bnProofOfWorkLimit = ~arith_uint256(0) >> 32;\n-        nSubsidyHalvingInterval = 210000;\n-        nEnforceBlockUpgradeMajority = 750;\n-        nRejectBlockOutdatedMajority = 950;\n-        nToCheckBlockUpgradeMajority = 1000;\n         nMinerThreads = 0;\n-        nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n-        nTargetSpacing = 10 * 60;\n \n         /**\n          * Build the genesis block. Note that the output of the genesis coinbase cannot\n@@ -146,8 +147,8 @@ class CMainParams : public CChainParams {\n         genesis.nBits    = 0x1d00ffff;\n         genesis.nNonce   = 2083236893;\n \n-        hashGenesisBlock = genesis.GetHash();\n-        assert(hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+        assert(consensus.hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n \n         vSeeds.push_back(CDNSSeedData(\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\"));\n@@ -167,7 +168,6 @@ class CMainParams : public CChainParams {\n         fRequireRPCPassword = true;\n         fMiningRequiresPeers = true;\n         fDefaultCheckMemPool = false;\n-        fAllowMinDifficultyBlocks = false;\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n         fTestnetToBeDeprecatedFieldRPC = false;\n@@ -187,24 +187,23 @@ class CTestNetParams : public CMainParams {\n public:\n     CTestNetParams() {\n         strNetworkID = \"test\";\n+        consensus.nMajorityEnforceBlockUpgrade = 51;\n+        consensus.nMajorityRejectBlockOutdated = 75;\n+        consensus.nMajorityWindow = 100;\n+        consensus.fPowAllowMinDifficultyBlocks = true;\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n         pchMessageStart[3] = 0x07;\n         vAlertPubKey = ParseHex(\"04302390343f91cc401d56d68b123028bf52e5fca1939df127f63c6467cdf9c8e2c14b61104cf817d0b780da337893ecc4aaff1309e536162dabbdb45200ca2b0a\");\n         nDefaultPort = 18333;\n-        nEnforceBlockUpgradeMajority = 51;\n-        nRejectBlockOutdatedMajority = 75;\n-        nToCheckBlockUpgradeMajority = 100;\n         nMinerThreads = 0;\n-        nTargetTimespan = 14 * 24 * 60 * 60; //! two weeks\n-        nTargetSpacing = 10 * 60;\n \n         //! Modify the testnet genesis block so the timestamp is valid for a later start.\n         genesis.nTime = 1296688602;\n         genesis.nNonce = 414098458;\n-        hashGenesisBlock = genesis.GetHash();\n-        assert(hashGenesisBlock == uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+        assert(consensus.hashGenesisBlock == uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n \n         vFixedSeeds.clear();\n         vSeeds.clear();\n@@ -224,7 +223,6 @@ class CTestNetParams : public CMainParams {\n         fRequireRPCPassword = true;\n         fMiningRequiresPeers = true;\n         fDefaultCheckMemPool = false;\n-        fAllowMinDifficultyBlocks = true;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = false;\n         fTestnetToBeDeprecatedFieldRPC = true;\n@@ -243,32 +241,29 @@ class CRegTestParams : public CTestNetParams {\n public:\n     CRegTestParams() {\n         strNetworkID = \"regtest\";\n+        consensus.nSubsidyHalvingInterval = 150;\n+        consensus.nMajorityEnforceBlockUpgrade = 750;\n+        consensus.nMajorityRejectBlockOutdated = 950;\n+        consensus.nMajorityWindow = 1000;\n+        consensus.powLimit = ~arith_uint256(0) >> 1;\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;\n         pchMessageStart[3] = 0xda;\n-        nSubsidyHalvingInterval = 150;\n-        nEnforceBlockUpgradeMajority = 750;\n-        nRejectBlockOutdatedMajority = 950;\n-        nToCheckBlockUpgradeMajority = 1000;\n         nMinerThreads = 1;\n-        nTargetTimespan = 14 * 24 * 60 * 60; //! two weeks\n-        nTargetSpacing = 10 * 60;\n-        bnProofOfWorkLimit = ~arith_uint256(0) >> 1;\n         genesis.nTime = 1296688602;\n         genesis.nBits = 0x207fffff;\n         genesis.nNonce = 2;\n-        hashGenesisBlock = genesis.GetHash();\n+        consensus.hashGenesisBlock = genesis.GetHash();\n         nDefaultPort = 18444;\n-        assert(hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n+        assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n \n         vFixedSeeds.clear(); //! Regtest mode doesn't have any fixed seeds.\n         vSeeds.clear();  //! Regtest mode doesn't have any DNS seeds.\n \n         fRequireRPCPassword = false;\n         fMiningRequiresPeers = false;\n         fDefaultCheckMemPool = true;\n-        fAllowMinDifficultyBlocks = true;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n         fTestnetToBeDeprecatedFieldRPC = false;"
      },
      {
        "sha": "aa2ec1e3012e0124ea787b55de185d6896b19eba",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 14,
        "deletions": 21,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
        "patch": "@@ -6,11 +6,12 @@\n #ifndef BITCOIN_CHAINPARAMS_H\n #define BITCOIN_CHAINPARAMS_H\n \n+#include \"arith_uint256.h\"\n #include \"chainparamsbase.h\"\n #include \"checkpoints.h\"\n+#include \"consensus/params.h\"\n #include \"primitives/block.h\"\n #include \"protocol.h\"\n-#include \"arith_uint256.h\"\n \n #include <vector>\n \n@@ -39,16 +40,16 @@ class CChainParams\n         MAX_BASE58_TYPES\n     };\n \n-    const uint256& HashGenesisBlock() const { return hashGenesisBlock; }\n+    const Consensus::Params& GetConsensus() const { return consensus; }\n+    const uint256& HashGenesisBlock() const { return consensus.hashGenesisBlock; }\n     const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n-    const arith_uint256& ProofOfWorkLimit() const { return bnProofOfWorkLimit; }\n-    int SubsidyHalvingInterval() const { return nSubsidyHalvingInterval; }\n-    /** Used to check majorities for block version upgrade */\n-    int EnforceBlockUpgradeMajority() const { return nEnforceBlockUpgradeMajority; }\n-    int RejectBlockOutdatedMajority() const { return nRejectBlockOutdatedMajority; }\n-    int ToCheckBlockUpgradeMajority() const { return nToCheckBlockUpgradeMajority; }\n+    const arith_uint256& ProofOfWorkLimit() const { return consensus.powLimit; }\n+    int SubsidyHalvingInterval() const { return consensus.nSubsidyHalvingInterval; }\n+    int EnforceBlockUpgradeMajority() const { return consensus.nMajorityEnforceBlockUpgrade; }\n+    int RejectBlockOutdatedMajority() const { return consensus.nMajorityRejectBlockOutdated; }\n+    int ToCheckBlockUpgradeMajority() const { return consensus.nMajorityWindow; }\n \n     /** Used if GenerateBitcoins is called with a negative number of threads */\n     int DefaultMinerThreads() const { return nMinerThreads; }\n@@ -59,12 +60,12 @@ class CChainParams\n     /** Default value for -checkmempool argument */\n     bool DefaultCheckMemPool() const { return fDefaultCheckMemPool; }\n     /** Allow mining of a min-difficulty block */\n-    bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n+    bool AllowMinDifficultyBlocks() const { return consensus.fPowAllowMinDifficultyBlocks; }\n     /** Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n-    int64_t TargetTimespan() const { return nTargetTimespan; }\n-    int64_t TargetSpacing() const { return nTargetSpacing; }\n-    int64_t DifficultyAdjustmentInterval() const { return nTargetTimespan / nTargetSpacing; }\n+    int64_t TargetTimespan() const { return consensus.nPowTargetTimespan; }\n+    int64_t TargetSpacing() const { return consensus.nPowTargetSpacing; }\n+    int64_t DifficultyAdjustmentInterval() const { return consensus.nPowTargetTimespan / consensus.nPowTargetSpacing; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /** In the future use NetworkIDString() for RPC fields */\n@@ -78,18 +79,11 @@ class CChainParams\n protected:\n     CChainParams() {}\n \n-    uint256 hashGenesisBlock;\n+    Consensus::Params consensus;\n     CMessageHeader::MessageStartChars pchMessageStart;\n     //! Raw pub key bytes for the broadcast alert signing key.\n     std::vector<unsigned char> vAlertPubKey;\n     int nDefaultPort;\n-    arith_uint256 bnProofOfWorkLimit;\n-    int nSubsidyHalvingInterval;\n-    int nEnforceBlockUpgradeMajority;\n-    int nRejectBlockOutdatedMajority;\n-    int nToCheckBlockUpgradeMajority;\n-    int64_t nTargetTimespan;\n-    int64_t nTargetSpacing;\n     int nMinerThreads;\n     std::vector<CDNSSeedData> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n@@ -99,7 +93,6 @@ class CChainParams\n     bool fRequireRPCPassword;\n     bool fMiningRequiresPeers;\n     bool fDefaultCheckMemPool;\n-    bool fAllowMinDifficultyBlocks;\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n     bool fTestnetToBeDeprecatedFieldRPC;"
      },
      {
        "sha": "c4cfa48c7e83647b2e0f603a11f74cfc89b1abfb",
        "filename": "src/consensus/params.h",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
        "patch": "@@ -0,0 +1,32 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_CONSENSUS_PARAMS_H\n+#define BITCOIN_CONSENSUS_CONSENSUS_PARAMS_H\n+\n+#include \"arith_uint256.h\"\n+#include \"uint256.h\"\n+\n+namespace Consensus {\n+/**\n+ * Parameters that influence chain consensus.\n+ */\n+struct Params {\n+    uint256 hashGenesisBlock;\n+    int nSubsidyHalvingInterval;\n+    /** Used to check majorities for block version upgrade */\n+    int nMajorityEnforceBlockUpgrade;\n+    int nMajorityRejectBlockOutdated;\n+    int nMajorityWindow;\n+    /** Proof of work parameters */\n+    arith_uint256 powLimit;\n+    bool fPowAllowMinDifficultyBlocks;\n+    int64_t nPowTargetSpacing;\n+    int64_t nPowTargetTimespan;\n+    int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan / nPowTargetSpacing; }\n+};\n+} // namespace Consensus\n+\n+#endif // BITCOIN_CONSENSUS_CONSENSUS_PARAMS_H"
      }
    ]
  },
  {
    "sha": "d698ef690f62c08676dcf9ddc0988e23aa81cbff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjk4ZWY2OTBmNjJjMDg2NzZkY2Y5ZGRjMDk4OGUyM2FhODFjYmZm",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-15T01:21:42Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-25T23:47:51Z"
      },
      "message": "Consensus: Refactor: Decouple pow.o from chainparams.o",
      "tree": {
        "sha": "d2c52a3b81167039a3991b0809c958862752a8de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2c52a3b81167039a3991b0809c958862752a8de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d698ef690f62c08676dcf9ddc0988e23aa81cbff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d698ef690f62c08676dcf9ddc0988e23aa81cbff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d698ef690f62c08676dcf9ddc0988e23aa81cbff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d698ef690f62c08676dcf9ddc0988e23aa81cbff/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 42,
      "deletions": 35
    },
    "files": [
      {
        "sha": "1d78eedc1ae36baf0a144c3ed0e145f6d8e537af",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d698ef690f62c08676dcf9ddc0988e23aa81cbff",
        "patch": "@@ -1158,7 +1158,7 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n     }\n \n     // Check the header\n-    if (!CheckProofOfWork(block.GetHash(), block.nBits))\n+    if (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus()))\n         return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n \n     return true;\n@@ -2462,7 +2462,7 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW)\n {\n     // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits))\n+    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus()))\n         return state.DoS(50, error(\"CheckBlockHeader(): proof of work failed\"),\n                          REJECT_INVALID, \"high-hash\");\n \n@@ -2545,7 +2545,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if ((block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, Params().GetConsensus()))\n         return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n                          REJECT_INVALID, \"bad-diffbits\");\n "
      },
      {
        "sha": "09ffc4d28bad47e35c2b54502af60ce61c2c0226",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d698ef690f62c08676dcf9ddc0988e23aa81cbff",
        "patch": "@@ -17,7 +17,6 @@\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"net.h\"\n-#include \"pow.h\"\n #include \"script/script.h\"\n #include \"script/sigcache.h\"\n #include \"script/standard.h\""
      },
      {
        "sha": "cf08b782296cfbcb39e9183ac361c0e3e645874b",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=d698ef690f62c08676dcf9ddc0988e23aa81cbff",
        "patch": "@@ -84,7 +84,7 @@ void UpdateTime(CBlockHeader* pblock, const CBlockIndex* pindexPrev)\n \n     // Updating time can change work required on testnet:\n     if (Params().AllowMinDifficultyBlocks())\n-        pblock->nBits = GetNextWorkRequired(pindexPrev, pblock);\n+        pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, Params().GetConsensus());\n }\n \n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n@@ -326,7 +326,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         // Fill in header\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n         UpdateTime(pblock, pindexPrev);\n-        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock);\n+        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, Params().GetConsensus());\n         pblock->nNonce         = 0;\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n "
      },
      {
        "sha": "3c5a8d9d9635968cd1127be3235809b791c34d97",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 20,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=d698ef690f62c08676dcf9ddc0988e23aa81cbff",
        "patch": "@@ -7,34 +7,33 @@\n \n #include \"arith_uint256.h\"\n #include \"chain.h\"\n-#include \"chainparams.h\"\n #include \"primitives/block.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n \n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock)\n+unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {\n-    unsigned int nProofOfWorkLimit = Params().ProofOfWorkLimit().GetCompact();\n+    unsigned int nProofOfWorkLimit = params.powLimit.GetCompact();\n \n     // Genesis block\n     if (pindexLast == NULL)\n         return nProofOfWorkLimit;\n \n     // Only change once per difficulty adjustment interval\n-    if ((pindexLast->nHeight+1) % Params().DifficultyAdjustmentInterval() != 0)\n+    if ((pindexLast->nHeight+1) % params.DifficultyAdjustmentInterval() != 0)\n     {\n-        if (Params().AllowMinDifficultyBlocks())\n+        if (params.fPowAllowMinDifficultyBlocks)\n         {\n             // Special difficulty rule for testnet:\n             // If the new block's timestamp is more than 2* 10 minutes\n             // then allow mining of a min-difficulty block.\n-            if (pblock->GetBlockTime() > pindexLast->GetBlockTime() + Params().TargetSpacing()*2)\n+            if (pblock->GetBlockTime() > pindexLast->GetBlockTime() + params.nPowTargetSpacing*2)\n                 return nProofOfWorkLimit;\n             else\n             {\n                 // Return the last non-special-min-difficulty-rules-block\n                 const CBlockIndex* pindex = pindexLast;\n-                while (pindex->pprev && pindex->nHeight % Params().DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n+                while (pindex->pprev && pindex->nHeight % params.DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n                     pindex = pindex->pprev;\n                 return pindex->nBits;\n             }\n@@ -44,44 +43,44 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n \n     // Go back by what we want to be 14 days worth of blocks\n     const CBlockIndex* pindexFirst = pindexLast;\n-    for (int i = 0; pindexFirst && i < Params().DifficultyAdjustmentInterval()-1; i++)\n+    for (int i = 0; pindexFirst && i < params.DifficultyAdjustmentInterval()-1; i++)\n         pindexFirst = pindexFirst->pprev;\n     assert(pindexFirst);\n \n-    return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime());\n+    return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime(), params);\n }\n \n-unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime)\n+unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n {\n     // Limit adjustment step\n     int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n     LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n-    if (nActualTimespan < Params().TargetTimespan()/4)\n-        nActualTimespan = Params().TargetTimespan()/4;\n-    if (nActualTimespan > Params().TargetTimespan()*4)\n-        nActualTimespan = Params().TargetTimespan()*4;\n+    if (nActualTimespan < params.nPowTargetTimespan/4)\n+        nActualTimespan = params.nPowTargetTimespan/4;\n+    if (nActualTimespan > params.nPowTargetTimespan*4)\n+        nActualTimespan = params.nPowTargetTimespan*4;\n \n     // Retarget\n     arith_uint256 bnNew;\n     arith_uint256 bnOld;\n     bnNew.SetCompact(pindexLast->nBits);\n     bnOld = bnNew;\n     bnNew *= nActualTimespan;\n-    bnNew /= Params().TargetTimespan();\n+    bnNew /= params.nPowTargetTimespan;\n \n-    if (bnNew > Params().ProofOfWorkLimit())\n-        bnNew = Params().ProofOfWorkLimit();\n+    if (bnNew > params.powLimit)\n+        bnNew = params.powLimit;\n \n     /// debug print\n     LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n-    LogPrintf(\"Params().TargetTimespan() = %d    nActualTimespan = %d\\n\", Params().TargetTimespan(), nActualTimespan);\n+    LogPrintf(\"params.nPowTargetTimespan = %d    nActualTimespan = %d\\n\", params.nPowTargetTimespan, nActualTimespan);\n     LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n     LogPrintf(\"After:  %08x  %s\\n\", bnNew.GetCompact(), bnNew.ToString());\n \n     return bnNew.GetCompact();\n }\n \n-bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n+bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n {\n     bool fNegative;\n     bool fOverflow;\n@@ -90,7 +89,7 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range\n-    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > Params().ProofOfWorkLimit())\n+    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > params.powLimit)\n         return error(\"CheckProofOfWork(): nBits below minimum work\");\n \n     // Check proof of work matches claimed amount"
      },
      {
        "sha": "a5d32db178e079ab0a6f2e11e6c7f11ac9a4f729",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=d698ef690f62c08676dcf9ddc0988e23aa81cbff",
        "patch": "@@ -6,18 +6,20 @@\n #ifndef BITCOIN_POW_H\n #define BITCOIN_POW_H\n \n+#include \"consensus/params.h\"\n+\n #include <stdint.h>\n \n class CBlockHeader;\n class CBlockIndex;\n class uint256;\n class arith_uint256;\n \n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock);\n-unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime);\n+unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n+unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n-bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n+bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n arith_uint256 GetBlockProof(const CBlockIndex& block);\n \n #endif // BITCOIN_POW_H"
      },
      {
        "sha": "fcba7e222d56145165baa4b022e13b3d3c5d9dfd",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=d698ef690f62c08676dcf9ddc0988e23aa81cbff",
        "patch": "@@ -181,7 +181,7 @@ Value setgenerate(const Array& params, bool fHelp)\n                 LOCK(cs_main);\n                 IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);\n             }\n-            while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits)) {\n+            while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n                 // Yes, there is a chance every nonce could fail to satisfy the -regtest\n                 // target -- 1 in 2^(2^32). That ain't gonna happen.\n                 ++pblock->nNonce;"
      },
      {
        "sha": "4ce1591c353589cfc02f5e5c01251e29359ae301",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=d698ef690f62c08676dcf9ddc0988e23aa81cbff",
        "patch": "@@ -17,51 +17,56 @@ BOOST_FIXTURE_TEST_SUITE(pow_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(get_next_work)\n {\n     SelectParams(CBaseChainParams::MAIN);\n+    const Consensus::Params& params = Params().GetConsensus();\n \n     int64_t nLastRetargetTime = 1261130161; // Block #30240\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 32255;\n     pindexLast.nTime = 1262152739;  // Block #32255\n     pindexLast.nBits = 0x1d00ffff;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00d86a);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00d86a);\n }\n \n /* Test the constraint on the upper bound for next work */\n BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n {\n     SelectParams(CBaseChainParams::MAIN);\n+    const Consensus::Params& params = Params().GetConsensus();\n \n     int64_t nLastRetargetTime = 1231006505; // Block #0\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 2015;\n     pindexLast.nTime = 1233061996;  // Block #2015\n     pindexLast.nBits = 0x1d00ffff;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00ffff);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00ffff);\n }\n \n /* Test the constraint on the lower bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n {\n     SelectParams(CBaseChainParams::MAIN);\n+    const Consensus::Params& params = Params().GetConsensus();\n \n     int64_t nLastRetargetTime = 1279008237; // Block #66528\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 68543;\n     pindexLast.nTime = 1279297671;  // Block #68543\n     pindexLast.nBits = 0x1c05a3f4;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1c0168fd);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1c0168fd);\n }\n \n /* Test the constraint on the upper bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n {\n     SelectParams(CBaseChainParams::MAIN);\n+    const Consensus::Params& params = Params().GetConsensus();\n+\n     int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 46367;\n     pindexLast.nTime = 1269211443;  // Block #46367\n     pindexLast.nBits = 0x1c387f6f;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime), 0x1d00e1fd);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00e1fd);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "df9ff8d8c98a14f7698dd784bb40ea98644406a6",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d698ef690f62c08676dcf9ddc0988e23aa81cbff/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=d698ef690f62c08676dcf9ddc0988e23aa81cbff",
        "patch": "@@ -5,6 +5,8 @@\n \n #include \"txdb.h\"\n \n+#include \"chainparams.h\"\n+#include \"hash.h\"\n #include \"main.h\"\n #include \"pow.h\"\n #include \"uint256.h\"\n@@ -223,7 +225,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n \n-                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits))\n+                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, Params().GetConsensus()))\n                     return error(\"LoadBlockIndex(): CheckProofOfWork failed: %s\", pindexNew->ToString());\n \n                 pcursor->Next();"
      }
    ]
  }
]