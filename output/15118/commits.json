[
  {
    "sha": "62e7addb632cad77cbd5fbccbaee51c7b32505d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MmU3YWRkYjYzMmNhZDc3Y2JkNWZiY2NiYWVlNTFjN2IzMjUwNWQw",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-09-01T22:18:02Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-23T01:38:45Z"
      },
      "message": "util: Move CheckDiskSpace to util.",
      "tree": {
        "sha": "d1251329ff8b5fc6dd6c85a0fdee883d66736f0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1251329ff8b5fc6dd6c85a0fdee883d66736f0e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62e7addb632cad77cbd5fbccbaee51c7b32505d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62e7addb632cad77cbd5fbccbaee51c7b32505d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62e7addb632cad77cbd5fbccbaee51c7b32505d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62e7addb632cad77cbd5fbccbaee51c7b32505d0/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 23,
      "deletions": 27
    },
    "files": [
      {
        "sha": "5111baddd2e3bb62f54b1adbf0e8881c2dff6c53",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=62e7addb632cad77cbd5fbccbaee51c7b32505d0",
        "patch": "@@ -1675,11 +1675,11 @@ bool AppInitMain(InitInterfaces& interfaces)\n \n     // ********************************************************* Step 11: import blocks\n \n-    if (!CheckDiskSpace(/* additional_bytes */ 0, /* blocks_dir */ false)) {\n+    if (!CheckDiskSpace(GetDataDir())) {\n         InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetDataDir()));\n         return false;\n     }\n-    if (!CheckDiskSpace(/* additional_bytes */ 0, /* blocks_dir */ true)) {\n+    if (!CheckDiskSpace(GetBlocksDir())) {\n         InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetBlocksDir()));\n         return false;\n     }"
      },
      {
        "sha": "3e6c2ae5d4aa491aea7fe086c18d9ec1cdadfdf5",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=62e7addb632cad77cbd5fbccbaee51c7b32505d0",
        "patch": "@@ -135,6 +135,14 @@ bool DirIsWritable(const fs::path& directory)\n     return true;\n }\n \n+bool CheckDiskSpace(const fs::path& dir, uint64_t nAdditionalBytes)\n+{\n+    constexpr uint64_t nMinDiskSpace = 52428800; // 50 MiB\n+\n+    uint64_t nFreeBytesAvailable = fs::space(dir).available;\n+    return nFreeBytesAvailable >= nMinDiskSpace + nAdditionalBytes;\n+}\n+\n /**\n  * Interpret a string argument as a boolean.\n  *"
      },
      {
        "sha": "2a2ee9bc1dfbbbb509fd20c325d190952fe94c8c",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=62e7addb632cad77cbd5fbccbaee51c7b32505d0",
        "patch": "@@ -72,6 +72,7 @@ bool RenameOver(fs::path src, fs::path dest);\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only=false);\n void UnlockDirectory(const fs::path& directory, const std::string& lockfile_name);\n bool DirIsWritable(const fs::path& directory);\n+bool CheckDiskSpace(const fs::path& dir, uint64_t nAdditionalBytes = 0);\n \n /** Release all directory locks. This is used for unit testing only, at runtime\n  * the global destructor will take care of the locks."
      },
      {
        "sha": "06e0e9929017af902c5b089eaa73978f1db98ffc",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 20,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=62e7addb632cad77cbd5fbccbaee51c7b32505d0",
        "patch": "@@ -2134,8 +2134,9 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n         // Write blocks and block index to disk.\n         if (fDoFullFlush || fPeriodicWrite) {\n             // Depend on nMinDiskSpace to ensure we can write block index\n-            if (!CheckDiskSpace(0, true))\n-                return state.Error(\"out of disk space\");\n+            if (!CheckDiskSpace(GetBlocksDir())) {\n+                return AbortNode(state, \"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+            }\n             // First make sure all block and undo data is flushed to disk.\n             FlushBlockFile();\n             // Then update all block file information (which may refer to block and undo files).\n@@ -2168,8 +2169,9 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n             // twice (once in the log, and once in the tables). This is already\n             // an overestimation, as most will delete an existing entry or\n             // overwrite one. Still, use a conservative safety factor of 2.\n-            if (!CheckDiskSpace(48 * 2 * 2 * pcoinsTip->GetCacheSize()))\n-                return state.Error(\"out of disk space\");\n+            if (!CheckDiskSpace(GetDataDir(), 48 * 2 * 2 * pcoinsTip->GetCacheSize())) {\n+                return AbortNode(state, \"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+            }\n             // Flush the chainstate (which may refer to block index entries).\n             if (!pcoinsTip->Flush())\n                 return AbortNode(state, \"Failed to write to coin database\");\n@@ -3014,7 +3016,7 @@ static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int\n         if (nNewChunks > nOldChunks) {\n             if (fPruneMode)\n                 fCheckForPruning = true;\n-            if (CheckDiskSpace(nNewChunks * BLOCKFILE_CHUNK_SIZE - pos.nPos, true)) {\n+            if (CheckDiskSpace(GetBlocksDir(), nNewChunks * BLOCKFILE_CHUNK_SIZE - pos.nPos)) {\n                 FILE *file = OpenBlockFile(pos);\n                 if (file) {\n                     LogPrintf(\"Pre-allocating up to position 0x%x in blk%05u.dat\\n\", nNewChunks * BLOCKFILE_CHUNK_SIZE, pos.nFile);\n@@ -3023,7 +3025,7 @@ static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int\n                 }\n             }\n             else\n-                return error(\"out of disk space\");\n+                return AbortNode(\"Disk space is low!\", _(\"Error: Disk space is low!\"));\n         }\n     }\n \n@@ -3047,16 +3049,17 @@ static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos,\n     if (nNewChunks > nOldChunks) {\n         if (fPruneMode)\n             fCheckForPruning = true;\n-        if (CheckDiskSpace(nNewChunks * UNDOFILE_CHUNK_SIZE - pos.nPos, true)) {\n+        if (CheckDiskSpace(GetBlocksDir(), nNewChunks * UNDOFILE_CHUNK_SIZE - pos.nPos)) {\n             FILE *file = OpenUndoFile(pos);\n             if (file) {\n                 LogPrintf(\"Pre-allocating up to position 0x%x in rev%05u.dat\\n\", nNewChunks * UNDOFILE_CHUNK_SIZE, pos.nFile);\n                 AllocateFileRange(file, pos.nPos, nNewChunks * UNDOFILE_CHUNK_SIZE - pos.nPos);\n                 fclose(file);\n             }\n         }\n-        else\n-            return state.Error(\"out of disk space\");\n+        else {\n+            return AbortNode(state, \"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+        }\n     }\n \n     return true;\n@@ -3763,17 +3766,6 @@ static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfte\n            nLastBlockWeCanPrune, count);\n }\n \n-bool CheckDiskSpace(uint64_t nAdditionalBytes, bool blocks_dir)\n-{\n-    uint64_t nFreeBytesAvailable = fs::space(blocks_dir ? GetBlocksDir() : GetDataDir()).available;\n-\n-    // Check for nMinDiskSpace bytes (currently 50MB)\n-    if (nFreeBytesAvailable < nMinDiskSpace + nAdditionalBytes)\n-        return AbortNode(\"Disk space is low!\", _(\"Error: Disk space is low!\"));\n-\n-    return true;\n-}\n-\n static FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly)\n {\n     if (pos.IsNull())"
      },
      {
        "sha": "1beee7869fc2aae0b6d7bc18524f4911d8c018d1",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=62e7addb632cad77cbd5fbccbaee51c7b32505d0",
        "patch": "@@ -181,9 +181,6 @@ extern arith_uint256 nMinimumChainWork;\n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;\n \n-/** Minimum disk space required - used in CheckDiskSpace() */\n-static const uint64_t nMinDiskSpace = 52428800;\n-\n /** Pruning-related variables and constants */\n /** True if any block files have ever been pruned. */\n extern bool fHavePruned;\n@@ -245,8 +242,6 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n  */\n bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex = nullptr, CBlockHeader* first_invalid = nullptr) LOCKS_EXCLUDED(cs_main);\n \n-/** Check whether enough disk space is available for an incoming block */\n-bool CheckDiskSpace(uint64_t nAdditionalBytes = 0, bool blocks_dir = false);\n /** Open a block file (blk?????.dat) */\n FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */"
      }
    ]
  },
  {
    "sha": "9183d6ef656c8f3ed406821b99827f9b5f047665",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTgzZDZlZjY1NmM4ZjNlZDQwNjgyMWI5OTgyN2Y5YjVmMDQ3NjY1",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-01-06T19:06:31Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-23T01:38:45Z"
      },
      "message": "validation: Extract basic block file logic into FlatFileSeq class.",
      "tree": {
        "sha": "9357c0f274c933b4515af76f1cf62a8a89da9005",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9357c0f274c933b4515af76f1cf62a8a89da9005"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9183d6ef656c8f3ed406821b99827f9b5f047665",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9183d6ef656c8f3ed406821b99827f9b5f047665",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9183d6ef656c8f3ed406821b99827f9b5f047665",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9183d6ef656c8f3ed406821b99827f9b5f047665/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62e7addb632cad77cbd5fbccbaee51c7b32505d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62e7addb632cad77cbd5fbccbaee51c7b32505d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62e7addb632cad77cbd5fbccbaee51c7b32505d0"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 80,
      "deletions": 6
    },
    "files": [
      {
        "sha": "2e297d3dac7dfacd15d0cd2c08405e36a9da897f",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9183d6ef656c8f3ed406821b99827f9b5f047665/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9183d6ef656c8f3ed406821b99827f9b5f047665/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9183d6ef656c8f3ed406821b99827f9b5f047665",
        "patch": "@@ -128,6 +128,7 @@ BITCOIN_CORE_H = \\\n   core_io.h \\\n   core_memusage.h \\\n   cuckoocache.h \\\n+  flatfile.h \\\n   fs.h \\\n   httprpc.h \\\n   httpserver.h \\\n@@ -247,6 +248,7 @@ libbitcoin_server_a_SOURCES = \\\n   chain.cpp \\\n   checkpoints.cpp \\\n   consensus/tx_verify.cpp \\\n+  flatfile.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n   index/base.cpp \\"
      },
      {
        "sha": "c9ca9aa869209004c6e37174ae424ef949dbb9fb",
        "filename": "src/flatfile.cpp",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9183d6ef656c8f3ed406821b99827f9b5f047665/src/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9183d6ef656c8f3ed406821b99827f9b5f047665/src/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.cpp?ref=9183d6ef656c8f3ed406821b99827f9b5f047665",
        "patch": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdexcept>\n+\n+#include <flatfile.h>\n+#include <tinyformat.h>\n+\n+FlatFileSeq::FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size) :\n+    m_dir(std::move(dir)),\n+    m_prefix(prefix),\n+    m_chunk_size(chunk_size)\n+{\n+    if (chunk_size == 0) {\n+        throw std::invalid_argument(\"chunk_size must be positive\");\n+    }\n+}\n+\n+fs::path FlatFileSeq::FileName(const CDiskBlockPos& pos) const\n+{\n+    return m_dir / strprintf(\"%s%05u.dat\", m_prefix, pos.nFile);\n+}"
      },
      {
        "sha": "9c7131d201f719e0148ea15b82bb75da5f013576",
        "filename": "src/flatfile.h",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9183d6ef656c8f3ed406821b99827f9b5f047665/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9183d6ef656c8f3ed406821b99827f9b5f047665/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=9183d6ef656c8f3ed406821b99827f9b5f047665",
        "patch": "@@ -0,0 +1,36 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_FLATFILE_H\n+#define BITCOIN_FLATFILE_H\n+\n+#include <chain.h>\n+#include <fs.h>\n+\n+/**\n+ * FlatFileSeq represents a sequence of numbered files storing raw data. This class facilitates\n+ * access to and efficient management of these files.\n+ */\n+class FlatFileSeq\n+{\n+private:\n+    const fs::path m_dir;\n+    const char* const m_prefix;\n+    const size_t m_chunk_size;\n+\n+public:\n+    /**\n+     * Constructor\n+     *\n+     * @param dir The base directory that all files live in.\n+     * @param prefix A short prefix given to all file names.\n+     * @param chunk_size Disk space is pre-allocated in multiples of this amount.\n+     */\n+    FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size);\n+\n+    /** Get the name of the file at the given position. */\n+    fs::path FileName(const CDiskBlockPos& pos) const;\n+};\n+\n+#endif // BITCOIN_FLATFILE_H"
      },
      {
        "sha": "66c599565106a93d40ac35525b5cb15b8f3f731c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9183d6ef656c8f3ed406821b99827f9b5f047665/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9183d6ef656c8f3ed406821b99827f9b5f047665/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9183d6ef656c8f3ed406821b99827f9b5f047665",
        "patch": "@@ -673,7 +673,7 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n         int nFile = 0;\n         while (true) {\n             CDiskBlockPos pos(nFile, 0);\n-            if (!fs::exists(GetBlockPosFilename(pos, \"blk\")))\n+            if (!fs::exists(GetBlockPosFilename(pos)))\n                 break; // No block files left to reindex\n             FILE *file = OpenBlockFile(pos, true);\n             if (!file)"
      },
      {
        "sha": "3abe8b2fa1f978c88f94775e1d0518ad10831baa",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 4,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9183d6ef656c8f3ed406821b99827f9b5f047665/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9183d6ef656c8f3ed406821b99827f9b5f047665/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9183d6ef656c8f3ed406821b99827f9b5f047665",
        "patch": "@@ -15,6 +15,7 @@\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n #include <cuckoocache.h>\n+#include <flatfile.h>\n #include <hash.h>\n #include <index/txindex.h>\n #include <policy/fees.h>\n@@ -318,6 +319,8 @@ static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPr\n static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = nullptr);\n static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n+static FlatFileSeq BlockFileSeq();\n+static FlatFileSeq UndoFileSeq();\n \n bool CheckFinalTx(const CTransaction &tx, int flags)\n {\n@@ -3657,8 +3660,8 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)\n {\n     for (std::set<int>::iterator it = setFilesToPrune.begin(); it != setFilesToPrune.end(); ++it) {\n         CDiskBlockPos pos(*it, 0);\n-        fs::remove(GetBlockPosFilename(pos, \"blk\"));\n-        fs::remove(GetBlockPosFilename(pos, \"rev\"));\n+        fs::remove(BlockFileSeq().FileName(pos));\n+        fs::remove(UndoFileSeq().FileName(pos));\n         LogPrintf(\"Prune: %s deleted blk/rev (%05u)\\n\", __func__, *it);\n     }\n }\n@@ -3789,6 +3792,16 @@ static FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fRe\n     return file;\n }\n \n+static FlatFileSeq BlockFileSeq()\n+{\n+    return FlatFileSeq(GetBlocksDir(), \"blk\", BLOCKFILE_CHUNK_SIZE);\n+}\n+\n+static FlatFileSeq UndoFileSeq()\n+{\n+    return FlatFileSeq(GetBlocksDir(), \"rev\", UNDOFILE_CHUNK_SIZE);\n+}\n+\n FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly) {\n     return OpenDiskFile(pos, \"blk\", fReadOnly);\n }\n@@ -3798,9 +3811,9 @@ static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {\n     return OpenDiskFile(pos, \"rev\", fReadOnly);\n }\n \n-fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n+fs::path GetBlockPosFilename(const CDiskBlockPos &pos)\n {\n-    return GetBlocksDir() / strprintf(\"%s%05u.dat\", prefix, pos.nFile);\n+    return BlockFileSeq().FileName(pos);\n }\n \n CBlockIndex * CChainState::InsertBlockIndex(const uint256& hash)"
      },
      {
        "sha": "19f8e8ab7aff33f8e95e5122419e24e36ee6d66a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9183d6ef656c8f3ed406821b99827f9b5f047665/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9183d6ef656c8f3ed406821b99827f9b5f047665/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=9183d6ef656c8f3ed406821b99827f9b5f047665",
        "patch": "@@ -245,7 +245,7 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationS\n /** Open a block file (blk?????.dat) */\n FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n-fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n+fs::path GetBlockPosFilename(const CDiskBlockPos &pos);\n /** Import blocks from an external file */\n bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = nullptr);\n /** Ensures we have a genesis block in the block tree, possibly writing one to disk. */"
      }
    ]
  },
  {
    "sha": "e2d2abb99fe353ffc2ff3bc1ff578fad31065335",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmQyYWJiOTlmZTM1M2ZmYzJmZjNiYzFmZjU3OGZhZDMxMDY1MzM1",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-01-06T19:14:22Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-23T01:38:45Z"
      },
      "message": "validation: Refactor OpenDiskFile into method on FlatFileSeq.",
      "tree": {
        "sha": "d2085909eecec7d13d78cb111bc466fa4f072480",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2085909eecec7d13d78cb111bc466fa4f072480"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2d2abb99fe353ffc2ff3bc1ff578fad31065335",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2d2abb99fe353ffc2ff3bc1ff578fad31065335",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2d2abb99fe353ffc2ff3bc1ff578fad31065335",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2d2abb99fe353ffc2ff3bc1ff578fad31065335/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9183d6ef656c8f3ed406821b99827f9b5f047665",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9183d6ef656c8f3ed406821b99827f9b5f047665",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9183d6ef656c8f3ed406821b99827f9b5f047665"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 29,
      "deletions": 25
    },
    "files": [
      {
        "sha": "535f4eda910fe55363db13ec4522b0fb0835cfae",
        "filename": "src/flatfile.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2d2abb99fe353ffc2ff3bc1ff578fad31065335/src/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2d2abb99fe353ffc2ff3bc1ff578fad31065335/src/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.cpp?ref=e2d2abb99fe353ffc2ff3bc1ff578fad31065335",
        "patch": "@@ -5,6 +5,7 @@\n #include <stdexcept>\n \n #include <flatfile.h>\n+#include <logging.h>\n #include <tinyformat.h>\n \n FlatFileSeq::FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size) :\n@@ -21,3 +22,26 @@ fs::path FlatFileSeq::FileName(const CDiskBlockPos& pos) const\n {\n     return m_dir / strprintf(\"%s%05u.dat\", m_prefix, pos.nFile);\n }\n+\n+FILE* FlatFileSeq::Open(const CDiskBlockPos& pos, bool fReadOnly)\n+{\n+    if (pos.IsNull())\n+        return nullptr;\n+    fs::path path = FileName(pos);\n+    fs::create_directories(path.parent_path());\n+    FILE* file = fsbridge::fopen(path, fReadOnly ? \"rb\": \"rb+\");\n+    if (!file && !fReadOnly)\n+        file = fsbridge::fopen(path, \"wb+\");\n+    if (!file) {\n+        LogPrintf(\"Unable to open file %s\\n\", path.string());\n+        return nullptr;\n+    }\n+    if (pos.nPos) {\n+        if (fseek(file, pos.nPos, SEEK_SET)) {\n+            LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.string());\n+            fclose(file);\n+            return nullptr;\n+        }\n+    }\n+    return file;\n+}"
      },
      {
        "sha": "b1eea931400e36a8eb79077b23ffba3728e2dc79",
        "filename": "src/flatfile.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2d2abb99fe353ffc2ff3bc1ff578fad31065335/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2d2abb99fe353ffc2ff3bc1ff578fad31065335/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=e2d2abb99fe353ffc2ff3bc1ff578fad31065335",
        "patch": "@@ -31,6 +31,9 @@ class FlatFileSeq\n \n     /** Get the name of the file at the given position. */\n     fs::path FileName(const CDiskBlockPos& pos) const;\n+\n+    /** Open a handle to the file at the given position. */\n+    FILE* Open(const CDiskBlockPos& pos, bool fReadOnly = false);\n };\n \n #endif // BITCOIN_FLATFILE_H"
      },
      {
        "sha": "41350635053ef2f5c47f1b8a98c036593c58d8de",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 25,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2d2abb99fe353ffc2ff3bc1ff578fad31065335/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2d2abb99fe353ffc2ff3bc1ff578fad31065335/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e2d2abb99fe353ffc2ff3bc1ff578fad31065335",
        "patch": "@@ -3769,29 +3769,6 @@ static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfte\n            nLastBlockWeCanPrune, count);\n }\n \n-static FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly)\n-{\n-    if (pos.IsNull())\n-        return nullptr;\n-    fs::path path = GetBlockPosFilename(pos, prefix);\n-    fs::create_directories(path.parent_path());\n-    FILE* file = fsbridge::fopen(path, fReadOnly ? \"rb\": \"rb+\");\n-    if (!file && !fReadOnly)\n-        file = fsbridge::fopen(path, \"wb+\");\n-    if (!file) {\n-        LogPrintf(\"Unable to open file %s\\n\", path.string());\n-        return nullptr;\n-    }\n-    if (pos.nPos) {\n-        if (fseek(file, pos.nPos, SEEK_SET)) {\n-            LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.string());\n-            fclose(file);\n-            return nullptr;\n-        }\n-    }\n-    return file;\n-}\n-\n static FlatFileSeq BlockFileSeq()\n {\n     return FlatFileSeq(GetBlocksDir(), \"blk\", BLOCKFILE_CHUNK_SIZE);\n@@ -3803,12 +3780,12 @@ static FlatFileSeq UndoFileSeq()\n }\n \n FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly) {\n-    return OpenDiskFile(pos, \"blk\", fReadOnly);\n+    return BlockFileSeq().Open(pos, fReadOnly);\n }\n \n /** Open an undo file (rev?????.dat) */\n static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {\n-    return OpenDiskFile(pos, \"rev\", fReadOnly);\n+    return UndoFileSeq().Open(pos, fReadOnly);\n }\n \n fs::path GetBlockPosFilename(const CDiskBlockPos &pos)"
      }
    ]
  },
  {
    "sha": "992404b31ed2f8cabeed59d074552f0ae10fda94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTI0MDRiMzFlZDJmOGNhYmVlZDU5ZDA3NDU1MmYwYWUxMGZkYTk0",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-01-06T19:27:31Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-23T01:38:45Z"
      },
      "message": "validation: Refactor block file pre-allocation into FlatFileSeq.",
      "tree": {
        "sha": "3213de9eb432c4ce86c87970dd2bde8905d1042d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3213de9eb432c4ce86c87970dd2bde8905d1042d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/992404b31ed2f8cabeed59d074552f0ae10fda94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/992404b31ed2f8cabeed59d074552f0ae10fda94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/992404b31ed2f8cabeed59d074552f0ae10fda94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/992404b31ed2f8cabeed59d074552f0ae10fda94/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2d2abb99fe353ffc2ff3bc1ff578fad31065335",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2d2abb99fe353ffc2ff3bc1ff578fad31065335",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2d2abb99fe353ffc2ff3bc1ff578fad31065335"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 53,
      "deletions": 33
    },
    "files": [
      {
        "sha": "d9fd4041b77a93a878a08539f1804162f52759c3",
        "filename": "src/flatfile.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/992404b31ed2f8cabeed59d074552f0ae10fda94/src/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/992404b31ed2f8cabeed59d074552f0ae10fda94/src/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.cpp?ref=992404b31ed2f8cabeed59d074552f0ae10fda94",
        "patch": "@@ -7,6 +7,7 @@\n #include <flatfile.h>\n #include <logging.h>\n #include <tinyformat.h>\n+#include <util/system.h>\n \n FlatFileSeq::FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size) :\n     m_dir(std::move(dir)),\n@@ -45,3 +46,29 @@ FILE* FlatFileSeq::Open(const CDiskBlockPos& pos, bool fReadOnly)\n     }\n     return file;\n }\n+\n+size_t FlatFileSeq::Allocate(const CDiskBlockPos& pos, size_t add_size, bool& out_of_space)\n+{\n+    out_of_space = false;\n+\n+    unsigned int n_old_chunks = (pos.nPos + m_chunk_size - 1) / m_chunk_size;\n+    unsigned int n_new_chunks = (pos.nPos + add_size + m_chunk_size - 1) / m_chunk_size;\n+    if (n_new_chunks > n_old_chunks) {\n+        size_t old_size = pos.nPos;\n+        size_t new_size = n_new_chunks * m_chunk_size;\n+        size_t inc_size = new_size - old_size;\n+\n+        if (CheckDiskSpace(m_dir, inc_size)) {\n+            FILE *file = Open(pos);\n+            if (file) {\n+                LogPrintf(\"Pre-allocating up to position 0x%x in %s%05u.dat\\n\", new_size, m_prefix, pos.nFile);\n+                AllocateFileRange(file, pos.nPos, inc_size);\n+                fclose(file);\n+                return inc_size;\n+            }\n+        } else {\n+            out_of_space = true;\n+        }\n+    }\n+    return 0;\n+}"
      },
      {
        "sha": "1b5d83e8e65f6cafed37efe52863a9be97fc0024",
        "filename": "src/flatfile.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/992404b31ed2f8cabeed59d074552f0ae10fda94/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/992404b31ed2f8cabeed59d074552f0ae10fda94/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=992404b31ed2f8cabeed59d074552f0ae10fda94",
        "patch": "@@ -34,6 +34,17 @@ class FlatFileSeq\n \n     /** Open a handle to the file at the given position. */\n     FILE* Open(const CDiskBlockPos& pos, bool fReadOnly = false);\n+\n+    /**\n+     * Allocate additional space in a file after the given starting position. The amount allocated\n+     * will be the minimum multiple of the sequence chunk size greater than add_size.\n+     *\n+     * @param[in] pos The starting position that bytes will be allocated after.\n+     * @param[in] add_size The minimum number of bytes to be allocated.\n+     * @param[out] out_of_space Whether the allocation failed due to insufficient disk space.\n+     * @return The number of bytes successfully allocated.\n+     */\n+    size_t Allocate(const CDiskBlockPos& pos, size_t add_size, bool& out_of_space);\n };\n \n #endif // BITCOIN_FLATFILE_H"
      },
      {
        "sha": "aca555ee0a0fb3d1ef29cb3d4087fa053a892e98",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 33,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/992404b31ed2f8cabeed59d074552f0ae10fda94/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/992404b31ed2f8cabeed59d074552f0ae10fda94/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=992404b31ed2f8cabeed59d074552f0ae10fda94",
        "patch": "@@ -3014,21 +3014,13 @@ static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int\n         vinfoBlockFile[nFile].nSize += nAddSize;\n \n     if (!fKnown) {\n-        unsigned int nOldChunks = (pos.nPos + BLOCKFILE_CHUNK_SIZE - 1) / BLOCKFILE_CHUNK_SIZE;\n-        unsigned int nNewChunks = (vinfoBlockFile[nFile].nSize + BLOCKFILE_CHUNK_SIZE - 1) / BLOCKFILE_CHUNK_SIZE;\n-        if (nNewChunks > nOldChunks) {\n-            if (fPruneMode)\n-                fCheckForPruning = true;\n-            if (CheckDiskSpace(GetBlocksDir(), nNewChunks * BLOCKFILE_CHUNK_SIZE - pos.nPos)) {\n-                FILE *file = OpenBlockFile(pos);\n-                if (file) {\n-                    LogPrintf(\"Pre-allocating up to position 0x%x in blk%05u.dat\\n\", nNewChunks * BLOCKFILE_CHUNK_SIZE, pos.nFile);\n-                    AllocateFileRange(file, pos.nPos, nNewChunks * BLOCKFILE_CHUNK_SIZE - pos.nPos);\n-                    fclose(file);\n-                }\n-            }\n-            else\n-                return AbortNode(\"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+        bool out_of_space;\n+        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+        if (out_of_space) {\n+            return AbortNode(\"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+        }\n+        if (bytes_allocated != 0 && fPruneMode) {\n+            fCheckForPruning = true;\n         }\n     }\n \n@@ -3042,27 +3034,17 @@ static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos,\n \n     LOCK(cs_LastBlockFile);\n \n-    unsigned int nNewSize;\n     pos.nPos = vinfoBlockFile[nFile].nUndoSize;\n-    nNewSize = vinfoBlockFile[nFile].nUndoSize += nAddSize;\n+    vinfoBlockFile[nFile].nUndoSize += nAddSize;\n     setDirtyFileInfo.insert(nFile);\n \n-    unsigned int nOldChunks = (pos.nPos + UNDOFILE_CHUNK_SIZE - 1) / UNDOFILE_CHUNK_SIZE;\n-    unsigned int nNewChunks = (nNewSize + UNDOFILE_CHUNK_SIZE - 1) / UNDOFILE_CHUNK_SIZE;\n-    if (nNewChunks > nOldChunks) {\n-        if (fPruneMode)\n-            fCheckForPruning = true;\n-        if (CheckDiskSpace(GetBlocksDir(), nNewChunks * UNDOFILE_CHUNK_SIZE - pos.nPos)) {\n-            FILE *file = OpenUndoFile(pos);\n-            if (file) {\n-                LogPrintf(\"Pre-allocating up to position 0x%x in rev%05u.dat\\n\", nNewChunks * UNDOFILE_CHUNK_SIZE, pos.nFile);\n-                AllocateFileRange(file, pos.nPos, nNewChunks * UNDOFILE_CHUNK_SIZE - pos.nPos);\n-                fclose(file);\n-            }\n-        }\n-        else {\n-            return AbortNode(state, \"Disk space is low!\", _(\"Error: Disk space is low!\"));\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = UndoFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        return AbortNode(state, \"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+    }\n+    if (bytes_allocated != 0 && fPruneMode) {\n+        fCheckForPruning = true;\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "e0380933e3745214331d358bda8c5e79299c84d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDM4MDkzM2UzNzQ1MjE0MzMxZDM1OGJkYThjNWU3OTI5OWM4NGQy",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-01-06T18:14:35Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-23T01:38:45Z"
      },
      "message": "validation: Refactor file flush logic into FlatFileSeq.",
      "tree": {
        "sha": "b3dc6b1ad203e1c19b7beceae88e9b3131e4025d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3dc6b1ad203e1c19b7beceae88e9b3131e4025d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0380933e3745214331d358bda8c5e79299c84d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0380933e3745214331d358bda8c5e79299c84d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0380933e3745214331d358bda8c5e79299c84d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0380933e3745214331d358bda8c5e79299c84d2/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "992404b31ed2f8cabeed59d074552f0ae10fda94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/992404b31ed2f8cabeed59d074552f0ae10fda94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/992404b31ed2f8cabeed59d074552f0ae10fda94"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 33,
      "deletions": 18
    },
    "files": [
      {
        "sha": "1cdead6bf58922ca5b2369c027ba9c4a849eb120",
        "filename": "src/flatfile.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0380933e3745214331d358bda8c5e79299c84d2/src/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0380933e3745214331d358bda8c5e79299c84d2/src/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.cpp?ref=e0380933e3745214331d358bda8c5e79299c84d2",
        "patch": "@@ -72,3 +72,22 @@ size_t FlatFileSeq::Allocate(const CDiskBlockPos& pos, size_t add_size, bool& ou\n     }\n     return 0;\n }\n+\n+bool FlatFileSeq::Flush(const CDiskBlockPos& pos, bool finalize)\n+{\n+    FILE* file = Open(FlatFilePos(pos.nFile, 0)); // Avoid fseek to nPos\n+    if (!file) {\n+        return error(\"%s: failed to open file %d\", __func__, pos.nFile);\n+    }\n+    if (finalize && !TruncateFile(file, pos.nPos)) {\n+        fclose(file);\n+        return error(\"%s: failed to truncate file %d\", __func__, pos.nFile);\n+    }\n+    if (!FileCommit(file)) {\n+        fclose(file);\n+        return error(\"%s: failed to commit file %d\", __func__, pos.nFile);\n+    }\n+\n+    fclose(file);\n+    return true;\n+}"
      },
      {
        "sha": "eea41ddf84087dda2d0665da9159490065c43c48",
        "filename": "src/flatfile.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0380933e3745214331d358bda8c5e79299c84d2/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0380933e3745214331d358bda8c5e79299c84d2/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=e0380933e3745214331d358bda8c5e79299c84d2",
        "patch": "@@ -45,6 +45,15 @@ class FlatFileSeq\n      * @return The number of bytes successfully allocated.\n      */\n     size_t Allocate(const CDiskBlockPos& pos, size_t add_size, bool& out_of_space);\n+\n+    /**\n+     * Commit a file to disk, and optionally truncate off extra pre-allocated bytes if final.\n+     *\n+     * @param[in] pos The first unwritten position in the file to be flushed.\n+     * @param[in] finalize True if no more data will be written to this file.\n+     * @return true on success, false on failure.\n+     */\n+    bool Flush(const CDiskBlockPos& pos, bool finalize = false);\n };\n \n #endif // BITCOIN_FLATFILE_H"
      },
      {
        "sha": "98d89599f1583917ce3a6dcae8c7f2d4b9d6f337",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 18,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0380933e3745214331d358bda8c5e79299c84d2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0380933e3745214331d358bda8c5e79299c84d2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e0380933e3745214331d358bda8c5e79299c84d2",
        "patch": "@@ -1630,25 +1630,12 @@ void static FlushBlockFile(bool fFinalize = false)\n {\n     LOCK(cs_LastBlockFile);\n \n-    CDiskBlockPos posOld(nLastBlockFile, 0);\n-    bool status = true;\n-\n-    FILE *fileOld = OpenBlockFile(posOld);\n-    if (fileOld) {\n-        if (fFinalize)\n-            status &= TruncateFile(fileOld, vinfoBlockFile[nLastBlockFile].nSize);\n-        status &= FileCommit(fileOld);\n-        fclose(fileOld);\n-    }\n-\n-    fileOld = OpenUndoFile(posOld);\n-    if (fileOld) {\n-        if (fFinalize)\n-            status &= TruncateFile(fileOld, vinfoBlockFile[nLastBlockFile].nUndoSize);\n-        status &= FileCommit(fileOld);\n-        fclose(fileOld);\n-    }\n+    CDiskBlockPos block_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nSize);\n+    CDiskBlockPos undo_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nUndoSize);\n \n+    bool status = true;\n+    status &= BlockFileSeq().Flush(block_pos_old, fFinalize);\n+    status &= UndoFileSeq().Flush(undo_pos_old, fFinalize);\n     if (!status) {\n         AbortNode(\"Flushing block file to disk failed. This is likely the result of an I/O error.\");\n     }"
      }
    ]
  },
  {
    "sha": "d6d8a78f26f52fdfe43293686135e2fc6919926c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmQ4YTc4ZjI2ZjUyZmRmZTQzMjkzNjg2MTM1ZTJmYzY5MTk5MjZj",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-01-06T19:43:38Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-23T01:38:45Z"
      },
      "message": "Move CDiskBlockPos from chain to flatfile.",
      "tree": {
        "sha": "88e7fdae60dcacd7cede677273556a4c69c4544f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88e7fdae60dcacd7cede677273556a4c69c4544f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6d8a78f26f52fdfe43293686135e2fc6919926c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6d8a78f26f52fdfe43293686135e2fc6919926c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6d8a78f26f52fdfe43293686135e2fc6919926c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6d8a78f26f52fdfe43293686135e2fc6919926c/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0380933e3745214331d358bda8c5e79299c84d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0380933e3745214331d358bda8c5e79299c84d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0380933e3745214331d358bda8c5e79299c84d2"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 49,
      "deletions": 43
    },
    "files": [
      {
        "sha": "583c46c58c045c6311c2f7e363fc6db5f7c88175",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 40,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d8a78f26f52fdfe43293686135e2fc6919926c/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d8a78f26f52fdfe43293686135e2fc6919926c/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=d6d8a78f26f52fdfe43293686135e2fc6919926c",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <arith_uint256.h>\n #include <consensus/params.h>\n+#include <flatfile.h>\n #include <primitives/block.h>\n #include <tinyformat.h>\n #include <uint256.h>\n@@ -90,46 +91,6 @@ class CBlockFileInfo\n      }\n };\n \n-struct CDiskBlockPos\n-{\n-    int nFile;\n-    unsigned int nPos;\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(VARINT(nFile, VarIntMode::NONNEGATIVE_SIGNED));\n-        READWRITE(VARINT(nPos));\n-    }\n-\n-    CDiskBlockPos() {\n-        SetNull();\n-    }\n-\n-    CDiskBlockPos(int nFileIn, unsigned int nPosIn) {\n-        nFile = nFileIn;\n-        nPos = nPosIn;\n-    }\n-\n-    friend bool operator==(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n-        return (a.nFile == b.nFile && a.nPos == b.nPos);\n-    }\n-\n-    friend bool operator!=(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n-        return !(a == b);\n-    }\n-\n-    void SetNull() { nFile = -1; nPos = 0; }\n-    bool IsNull() const { return (nFile == -1); }\n-\n-    std::string ToString() const\n-    {\n-        return strprintf(\"CDiskBlockPos(nFile=%i, nPos=%i)\", nFile, nPos);\n-    }\n-\n-};\n-\n enum BlockStatus: uint32_t {\n     //! Unused.\n     BLOCK_VALID_UNKNOWN      =    0,"
      },
      {
        "sha": "b1ea257da1a549756a2d066be7a26b3a3123143e",
        "filename": "src/flatfile.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d8a78f26f52fdfe43293686135e2fc6919926c/src/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d8a78f26f52fdfe43293686135e2fc6919926c/src/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.cpp?ref=d6d8a78f26f52fdfe43293686135e2fc6919926c",
        "patch": "@@ -1,4 +1,5 @@\n-// Copyright (c) 2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -19,6 +20,11 @@ FlatFileSeq::FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size) :\n     }\n }\n \n+std::string CDiskBlockPos::ToString() const\n+{\n+    return strprintf(\"CDiskBlockPos(nFile=%i, nPos=%i)\", nFile, nPos);\n+}\n+\n fs::path FlatFileSeq::FileName(const CDiskBlockPos& pos) const\n {\n     return m_dir / strprintf(\"%s%05u.dat\", m_prefix, pos.nFile);"
      },
      {
        "sha": "d599b8cc42a4c15ba96c0c80e79658ecbaeeb653",
        "filename": "src/flatfile.h",
        "status": "modified",
        "additions": 41,
        "deletions": 2,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d8a78f26f52fdfe43293686135e2fc6919926c/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d8a78f26f52fdfe43293686135e2fc6919926c/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=d6d8a78f26f52fdfe43293686135e2fc6919926c",
        "patch": "@@ -1,12 +1,51 @@\n-// Copyright (c) 2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_FLATFILE_H\n #define BITCOIN_FLATFILE_H\n \n-#include <chain.h>\n+#include <string>\n+\n #include <fs.h>\n+#include <serialize.h>\n+\n+struct CDiskBlockPos\n+{\n+    int nFile;\n+    unsigned int nPos;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(VARINT(nFile, VarIntMode::NONNEGATIVE_SIGNED));\n+        READWRITE(VARINT(nPos));\n+    }\n+\n+    CDiskBlockPos() {\n+        SetNull();\n+    }\n+\n+    CDiskBlockPos(int nFileIn, unsigned int nPosIn) {\n+        nFile = nFileIn;\n+        nPos = nPosIn;\n+    }\n+\n+    friend bool operator==(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n+        return (a.nFile == b.nFile && a.nPos == b.nPos);\n+    }\n+\n+    friend bool operator!=(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n+        return !(a == b);\n+    }\n+\n+    void SetNull() { nFile = -1; nPos = 0; }\n+    bool IsNull() const { return (nFile == -1); }\n+\n+    std::string ToString() const;\n+};\n \n /**\n  * FlatFileSeq represents a sequence of numbered files storing raw data. This class facilitates"
      }
    ]
  },
  {
    "sha": "65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWE0ODllOTNkMTgxZDNjMGY3YTljZjc5ZjdjMTFmZjhjZjJiMGYw",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-01-06T19:46:30Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-23T01:38:45Z"
      },
      "message": "scripted-diff: Rename CBlockDiskPos to FlatFilePos.\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/CDiskBlockPos/FlatFilePos/g' $(git ls-files 'src/*.h' 'src/*.cpp')\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "dd513c7251d8524e7efd58ded79895ae38652531",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd513c7251d8524e7efd58ded79895ae38652531"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6d8a78f26f52fdfe43293686135e2fc6919926c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6d8a78f26f52fdfe43293686135e2fc6919926c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6d8a78f26f52fdfe43293686135e2fc6919926c"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 63,
      "deletions": 63
    },
    "files": [
      {
        "sha": "2b6d2d082cb237dd82bcb2015d225e0fb5fe53fb",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
        "patch": "@@ -227,17 +227,17 @@ class CBlockIndex\n         nNonce         = block.nNonce;\n     }\n \n-    CDiskBlockPos GetBlockPos() const {\n-        CDiskBlockPos ret;\n+    FlatFilePos GetBlockPos() const {\n+        FlatFilePos ret;\n         if (nStatus & BLOCK_HAVE_DATA) {\n             ret.nFile = nFile;\n             ret.nPos  = nDataPos;\n         }\n         return ret;\n     }\n \n-    CDiskBlockPos GetUndoPos() const {\n-        CDiskBlockPos ret;\n+    FlatFilePos GetUndoPos() const {\n+        FlatFilePos ret;\n         if (nStatus & BLOCK_HAVE_UNDO) {\n             ret.nFile = nFile;\n             ret.nPos  = nUndoPos;"
      },
      {
        "sha": "d2e11825d588b76690137de9f131a4a59b8551ab",
        "filename": "src/flatfile.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.cpp?ref=65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
        "patch": "@@ -20,17 +20,17 @@ FlatFileSeq::FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size) :\n     }\n }\n \n-std::string CDiskBlockPos::ToString() const\n+std::string FlatFilePos::ToString() const\n {\n-    return strprintf(\"CDiskBlockPos(nFile=%i, nPos=%i)\", nFile, nPos);\n+    return strprintf(\"FlatFilePos(nFile=%i, nPos=%i)\", nFile, nPos);\n }\n \n-fs::path FlatFileSeq::FileName(const CDiskBlockPos& pos) const\n+fs::path FlatFileSeq::FileName(const FlatFilePos& pos) const\n {\n     return m_dir / strprintf(\"%s%05u.dat\", m_prefix, pos.nFile);\n }\n \n-FILE* FlatFileSeq::Open(const CDiskBlockPos& pos, bool fReadOnly)\n+FILE* FlatFileSeq::Open(const FlatFilePos& pos, bool fReadOnly)\n {\n     if (pos.IsNull())\n         return nullptr;\n@@ -53,7 +53,7 @@ FILE* FlatFileSeq::Open(const CDiskBlockPos& pos, bool fReadOnly)\n     return file;\n }\n \n-size_t FlatFileSeq::Allocate(const CDiskBlockPos& pos, size_t add_size, bool& out_of_space)\n+size_t FlatFileSeq::Allocate(const FlatFilePos& pos, size_t add_size, bool& out_of_space)\n {\n     out_of_space = false;\n \n@@ -79,7 +79,7 @@ size_t FlatFileSeq::Allocate(const CDiskBlockPos& pos, size_t add_size, bool& ou\n     return 0;\n }\n \n-bool FlatFileSeq::Flush(const CDiskBlockPos& pos, bool finalize)\n+bool FlatFileSeq::Flush(const FlatFilePos& pos, bool finalize)\n {\n     FILE* file = Open(FlatFilePos(pos.nFile, 0)); // Avoid fseek to nPos\n     if (!file) {"
      },
      {
        "sha": "6051970490be4e4533bd296b6e39d33c259e379d",
        "filename": "src/flatfile.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
        "patch": "@@ -11,7 +11,7 @@\n #include <fs.h>\n #include <serialize.h>\n \n-struct CDiskBlockPos\n+struct FlatFilePos\n {\n     int nFile;\n     unsigned int nPos;\n@@ -24,20 +24,20 @@ struct CDiskBlockPos\n         READWRITE(VARINT(nPos));\n     }\n \n-    CDiskBlockPos() {\n+    FlatFilePos() {\n         SetNull();\n     }\n \n-    CDiskBlockPos(int nFileIn, unsigned int nPosIn) {\n+    FlatFilePos(int nFileIn, unsigned int nPosIn) {\n         nFile = nFileIn;\n         nPos = nPosIn;\n     }\n \n-    friend bool operator==(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n+    friend bool operator==(const FlatFilePos &a, const FlatFilePos &b) {\n         return (a.nFile == b.nFile && a.nPos == b.nPos);\n     }\n \n-    friend bool operator!=(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n+    friend bool operator!=(const FlatFilePos &a, const FlatFilePos &b) {\n         return !(a == b);\n     }\n \n@@ -69,10 +69,10 @@ class FlatFileSeq\n     FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size);\n \n     /** Get the name of the file at the given position. */\n-    fs::path FileName(const CDiskBlockPos& pos) const;\n+    fs::path FileName(const FlatFilePos& pos) const;\n \n     /** Open a handle to the file at the given position. */\n-    FILE* Open(const CDiskBlockPos& pos, bool fReadOnly = false);\n+    FILE* Open(const FlatFilePos& pos, bool fReadOnly = false);\n \n     /**\n      * Allocate additional space in a file after the given starting position. The amount allocated\n@@ -83,7 +83,7 @@ class FlatFileSeq\n      * @param[out] out_of_space Whether the allocation failed due to insufficient disk space.\n      * @return The number of bytes successfully allocated.\n      */\n-    size_t Allocate(const CDiskBlockPos& pos, size_t add_size, bool& out_of_space);\n+    size_t Allocate(const FlatFilePos& pos, size_t add_size, bool& out_of_space);\n \n     /**\n      * Commit a file to disk, and optionally truncate off extra pre-allocated bytes if final.\n@@ -92,7 +92,7 @@ class FlatFileSeq\n      * @param[in] finalize True if no more data will be written to this file.\n      * @return true on success, false on failure.\n      */\n-    bool Flush(const CDiskBlockPos& pos, bool finalize = false);\n+    bool Flush(const FlatFilePos& pos, bool finalize = false);\n };\n \n #endif // BITCOIN_FLATFILE_H"
      },
      {
        "sha": "7367ec7cb653e077a1765130b032696ca6c92e36",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
        "patch": "@@ -16,27 +16,27 @@ constexpr char DB_TXINDEX_BLOCK = 'T';\n \n std::unique_ptr<TxIndex> g_txindex;\n \n-struct CDiskTxPos : public CDiskBlockPos\n+struct CDiskTxPos : public FlatFilePos\n {\n     unsigned int nTxOffset; // after header\n \n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITEAS(CDiskBlockPos, *this);\n+        READWRITEAS(FlatFilePos, *this);\n         READWRITE(VARINT(nTxOffset));\n     }\n \n-    CDiskTxPos(const CDiskBlockPos &blockIn, unsigned int nTxOffsetIn) : CDiskBlockPos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {\n+    CDiskTxPos(const FlatFilePos &blockIn, unsigned int nTxOffsetIn) : FlatFilePos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {\n     }\n \n     CDiskTxPos() {\n         SetNull();\n     }\n \n     void SetNull() {\n-        CDiskBlockPos::SetNull();\n+        FlatFilePos::SetNull();\n         nTxOffset = 0;\n     }\n };"
      },
      {
        "sha": "8a849d2815e3a6f81860a98fd7f9a0ee4d02622e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
        "patch": "@@ -672,7 +672,7 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     if (fReindex) {\n         int nFile = 0;\n         while (true) {\n-            CDiskBlockPos pos(nFile, 0);\n+            FlatFilePos pos(nFile, 0);\n             if (!fs::exists(GetBlockPosFilename(pos)))\n                 break; // No block files left to reindex\n             FILE *file = OpenBlockFile(pos, true);"
      },
      {
        "sha": "86775bb3917059407424a03359b8772bd602328f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 34,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
        "patch": "@@ -166,7 +166,7 @@ class CChainState {\n      * that it doesn't descend from an invalid block, and then add it to mapBlockIndex.\n      */\n     bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Block (dis)connection on a given view:\n     DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view);\n@@ -205,7 +205,7 @@ class CChainState {\n \n     void InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CBlockIndex* FindMostWorkChain() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    void ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const FlatFilePos& pos, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n \n     bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n@@ -318,7 +318,7 @@ static bool FlushStateToDisk(const CChainParams& chainParams, CValidationState &\n static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight);\n static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = nullptr);\n-static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n+static FILE* OpenUndoFile(const FlatFilePos &pos, bool fReadOnly = false);\n static FlatFileSeq BlockFileSeq();\n static FlatFileSeq UndoFileSeq();\n \n@@ -1045,7 +1045,7 @@ bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus\n // CBlock and CBlockIndex\n //\n \n-static bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)\n+static bool WriteBlockToDisk(const CBlock& block, FlatFilePos& pos, const CMessageHeader::MessageStartChars& messageStart)\n {\n     // Open history file to append\n     CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n@@ -1066,7 +1066,7 @@ static bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMes\n     return true;\n }\n \n-bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n+bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::Params& consensusParams)\n {\n     block.SetNull();\n \n@@ -1092,7 +1092,7 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus:\n \n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n-    CDiskBlockPos blockPos;\n+    FlatFilePos blockPos;\n     {\n         LOCK(cs_main);\n         blockPos = pindex->GetBlockPos();\n@@ -1106,9 +1106,9 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n     return true;\n }\n \n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start)\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, const CMessageHeader::MessageStartChars& message_start)\n {\n-    CDiskBlockPos hpos = pos;\n+    FlatFilePos hpos = pos;\n     hpos.nPos -= 8; // Seek back 8 bytes for meta header\n     CAutoFile filein(OpenBlockFile(hpos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull()) {\n@@ -1143,7 +1143,7 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos,\n \n bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start)\n {\n-    CDiskBlockPos block_pos;\n+    FlatFilePos block_pos;\n     {\n         LOCK(cs_main);\n         block_pos = pindex->GetBlockPos();\n@@ -1455,7 +1455,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n \n namespace {\n \n-bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint256& hashBlock, const CMessageHeader::MessageStartChars& messageStart)\n+bool UndoWriteToDisk(const CBlockUndo& blockundo, FlatFilePos& pos, const uint256& hashBlock, const CMessageHeader::MessageStartChars& messageStart)\n {\n     // Open history file to append\n     CAutoFile fileout(OpenUndoFile(pos), SER_DISK, CLIENT_VERSION);\n@@ -1484,7 +1484,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n \n static bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex *pindex)\n {\n-    CDiskBlockPos pos = pindex->GetUndoPos();\n+    FlatFilePos pos = pindex->GetUndoPos();\n     if (pos.IsNull()) {\n         return error(\"%s: no undo data available\", __func__);\n     }\n@@ -1630,8 +1630,8 @@ void static FlushBlockFile(bool fFinalize = false)\n {\n     LOCK(cs_LastBlockFile);\n \n-    CDiskBlockPos block_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nSize);\n-    CDiskBlockPos undo_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nUndoSize);\n+    FlatFilePos block_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nSize);\n+    FlatFilePos undo_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nUndoSize);\n \n     bool status = true;\n     status &= BlockFileSeq().Flush(block_pos_old, fFinalize);\n@@ -1641,13 +1641,13 @@ void static FlushBlockFile(bool fFinalize = false)\n     }\n }\n \n-static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n+static bool FindUndoPos(CValidationState &state, int nFile, FlatFilePos &pos, unsigned int nAddSize);\n \n static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams)\n {\n     // Write undo information to disk\n     if (pindex->GetUndoPos().IsNull()) {\n-        CDiskBlockPos _pos;\n+        FlatFilePos _pos;\n         if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, CLIENT_VERSION) + 40))\n             return error(\"ConnectBlock(): FindUndoPos failed\");\n         if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n@@ -2920,7 +2920,7 @@ CBlockIndex* CChainState::AddToBlockIndex(const CBlockHeader& block)\n }\n \n /** Mark a block as having its data received and checked (up to BLOCK_VALID_TRANSACTIONS). */\n-void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n+void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const FlatFilePos& pos, const Consensus::Params& consensusParams)\n {\n     pindexNew->nTx = block.vtx.size();\n     pindexNew->nChainTx = 0;\n@@ -2966,7 +2966,7 @@ void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pi\n     }\n }\n \n-static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)\n+static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)\n {\n     LOCK(cs_LastBlockFile);\n \n@@ -3015,7 +3015,7 @@ static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int\n     return true;\n }\n \n-static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize)\n+static bool FindUndoPos(CValidationState &state, int nFile, FlatFilePos &pos, unsigned int nAddSize)\n {\n     pos.nFile = nFile;\n \n@@ -3416,26 +3416,26 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-static CDiskBlockPos SaveBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const CDiskBlockPos* dbp) {\n+static FlatFilePos SaveBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const FlatFilePos* dbp) {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n-    CDiskBlockPos blockPos;\n+    FlatFilePos blockPos;\n     if (dbp != nullptr)\n         blockPos = *dbp;\n     if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != nullptr)) {\n         error(\"%s: FindBlockPos failed\", __func__);\n-        return CDiskBlockPos();\n+        return FlatFilePos();\n     }\n     if (dbp == nullptr) {\n         if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart())) {\n             AbortNode(\"Failed to write block\");\n-            return CDiskBlockPos();\n+            return FlatFilePos();\n         }\n     }\n     return blockPos;\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock)\n {\n     const CBlock& block = *pblock;\n \n@@ -3497,7 +3497,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;\n     try {\n-        CDiskBlockPos blockPos = SaveBlockToDisk(block, pindex->nHeight, chainparams, dbp);\n+        FlatFilePos blockPos = SaveBlockToDisk(block, pindex->nHeight, chainparams, dbp);\n         if (blockPos.IsNull()) {\n             state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));\n             return false;\n@@ -3628,7 +3628,7 @@ void PruneOneBlockFile(const int fileNumber)\n void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)\n {\n     for (std::set<int>::iterator it = setFilesToPrune.begin(); it != setFilesToPrune.end(); ++it) {\n-        CDiskBlockPos pos(*it, 0);\n+        FlatFilePos pos(*it, 0);\n         fs::remove(BlockFileSeq().FileName(pos));\n         fs::remove(UndoFileSeq().FileName(pos));\n         LogPrintf(\"Prune: %s deleted blk/rev (%05u)\\n\", __func__, *it);\n@@ -3748,16 +3748,16 @@ static FlatFileSeq UndoFileSeq()\n     return FlatFileSeq(GetBlocksDir(), \"rev\", UNDOFILE_CHUNK_SIZE);\n }\n \n-FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly) {\n+FILE* OpenBlockFile(const FlatFilePos &pos, bool fReadOnly) {\n     return BlockFileSeq().Open(pos, fReadOnly);\n }\n \n /** Open an undo file (rev?????.dat) */\n-static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {\n+static FILE* OpenUndoFile(const FlatFilePos &pos, bool fReadOnly) {\n     return UndoFileSeq().Open(pos, fReadOnly);\n }\n \n-fs::path GetBlockPosFilename(const CDiskBlockPos &pos)\n+fs::path GetBlockPosFilename(const FlatFilePos &pos)\n {\n     return BlockFileSeq().FileName(pos);\n }\n@@ -3866,7 +3866,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_RE\n     }\n     for (std::set<int>::iterator it = setBlkDataFiles.begin(); it != setBlkDataFiles.end(); it++)\n     {\n-        CDiskBlockPos pos(*it, 0);\n+        FlatFilePos pos(*it, 0);\n         if (CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION).IsNull()) {\n             return false;\n         }\n@@ -4299,7 +4299,7 @@ bool CChainState::LoadGenesisBlock(const CChainParams& chainparams)\n \n     try {\n         const CBlock& block = chainparams.GenesisBlock();\n-        CDiskBlockPos blockPos = SaveBlockToDisk(block, 0, chainparams, nullptr);\n+        FlatFilePos blockPos = SaveBlockToDisk(block, 0, chainparams, nullptr);\n         if (blockPos.IsNull())\n             return error(\"%s: writing genesis block to disk failed\", __func__);\n         CBlockIndex *pindex = AddToBlockIndex(block);\n@@ -4316,10 +4316,10 @@ bool LoadGenesisBlock(const CChainParams& chainparams)\n     return g_chainstate.LoadGenesisBlock(chainparams);\n }\n \n-bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp)\n+bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos *dbp)\n {\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n-    static std::multimap<uint256, CDiskBlockPos> mapBlocksUnknownParent;\n+    static std::multimap<uint256, FlatFilePos> mapBlocksUnknownParent;\n     int64_t nStart = GetTimeMillis();\n \n     int nLoaded = 0;\n@@ -4405,9 +4405,9 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                 while (!queue.empty()) {\n                     uint256 head = queue.front();\n                     queue.pop_front();\n-                    std::pair<std::multimap<uint256, CDiskBlockPos>::iterator, std::multimap<uint256, CDiskBlockPos>::iterator> range = mapBlocksUnknownParent.equal_range(head);\n+                    std::pair<std::multimap<uint256, FlatFilePos>::iterator, std::multimap<uint256, FlatFilePos>::iterator> range = mapBlocksUnknownParent.equal_range(head);\n                     while (range.first != range.second) {\n-                        std::multimap<uint256, CDiskBlockPos>::iterator it = range.first;\n+                        std::multimap<uint256, FlatFilePos>::iterator it = range.first;\n                         std::shared_ptr<CBlock> pblockrecursive = std::make_shared<CBlock>();\n                         if (ReadBlockFromDisk(*pblockrecursive, it->second, chainparams.GetConsensus()))\n                         {"
      },
      {
        "sha": "4ef82ee2c70702c94d85451cd64bd878703f5429",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
        "patch": "@@ -243,11 +243,11 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex = nullptr, CBlockHeader* first_invalid = nullptr) LOCKS_EXCLUDED(cs_main);\n \n /** Open a block file (blk?????.dat) */\n-FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n+FILE* OpenBlockFile(const FlatFilePos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n-fs::path GetBlockPosFilename(const CDiskBlockPos &pos);\n+fs::path GetBlockPosFilename(const FlatFilePos &pos);\n /** Import blocks from an external file */\n-bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = nullptr);\n+bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos *dbp = nullptr);\n /** Ensures we have a genesis block in the block tree, possibly writing one to disk. */\n bool LoadGenesisBlock(const CChainParams& chainparams);\n /** Load the block tree and coins database from disk,\n@@ -386,9 +386,9 @@ void InitScriptExecutionCache();\n \n \n /** Functions for disk access for blocks */\n-bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n+bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::Params& consensusParams);\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams);\n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start);\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, const CMessageHeader::MessageStartChars& message_start);\n bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start);\n \n /** Functions for validating blocks and updating the block tree */"
      }
    ]
  },
  {
    "sha": "4c01e4e159db82ce4b2acce75f709cac996367d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzAxZTRlMTU5ZGI4MmNlNGIyYWNjZTc1ZjcwOWNhYzk5NjM2N2Q3",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-01-07T06:23:34Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-23T01:38:45Z"
      },
      "message": "flatfile: Unit tests for FlatFileSeq methods.",
      "tree": {
        "sha": "a31cabbffb28cbb219094551409df563c1321eef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a31cabbffb28cbb219094551409df563c1321eef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c01e4e159db82ce4b2acce75f709cac996367d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c01e4e159db82ce4b2acce75f709cac996367d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c01e4e159db82ce4b2acce75f709cac996367d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c01e4e159db82ce4b2acce75f709cac996367d7/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 124,
      "deletions": 0
    },
    "files": [
      {
        "sha": "09fef5a1ddf5ecf7db901fca01566777d4cfe09f",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c01e4e159db82ce4b2acce75f709cac996367d7/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c01e4e159db82ce4b2acce75f709cac996367d7/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=4c01e4e159db82ce4b2acce75f709cac996367d7",
        "patch": "@@ -83,6 +83,7 @@ BITCOIN_TESTS =\\\n   test/cuckoocache_tests.cpp \\\n   test/denialofservice_tests.cpp \\\n   test/descriptor_tests.cpp \\\n+  test/flatfile_tests.cpp \\\n   test/fs_tests.cpp \\\n   test/getarg_tests.cpp \\\n   test/hash_tests.cpp \\"
      },
      {
        "sha": "079a09f8f90aabd7f73ae3821d2de2a1ae87fbf4",
        "filename": "src/test/flatfile_tests.cpp",
        "status": "added",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c01e4e159db82ce4b2acce75f709cac996367d7/src/test/flatfile_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c01e4e159db82ce4b2acce75f709cac996367d7/src/test/flatfile_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/flatfile_tests.cpp?ref=4c01e4e159db82ce4b2acce75f709cac996367d7",
        "patch": "@@ -0,0 +1,123 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <flatfile.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(flatfile_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(flatfile_filename)\n+{\n+    auto data_dir = SetDataDir(\"flatfile_test\");\n+\n+    FlatFilePos pos(456, 789);\n+\n+    FlatFileSeq seq1(data_dir, \"a\", 16 * 1024);\n+    BOOST_CHECK_EQUAL(seq1.FileName(pos), data_dir / \"a00456.dat\");\n+\n+    FlatFileSeq seq2(data_dir / \"a\", \"b\", 16 * 1024);\n+    BOOST_CHECK_EQUAL(seq2.FileName(pos), data_dir / \"a\" / \"b00456.dat\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(flatfile_open)\n+{\n+    auto data_dir = SetDataDir(\"flatfile_test\");\n+    FlatFileSeq seq(data_dir, \"a\", 16 * 1024);\n+\n+    std::string line1(\"A purely peer-to-peer version of electronic cash would allow online \"\n+                      \"payments to be sent directly from one party to another without going \"\n+                      \"through a financial institution.\");\n+    std::string line2(\"Digital signatures provide part of the solution, but the main benefits are \"\n+                      \"lost if a trusted third party is still required to prevent double-spending.\");\n+\n+    size_t pos1 = 0;\n+    size_t pos2 = pos1 + GetSerializeSize(line1, CLIENT_VERSION);\n+\n+    // Write first line to file.\n+    {\n+        CAutoFile file(seq.Open(FlatFilePos(0, pos1)), SER_DISK, CLIENT_VERSION);\n+        file << LIMITED_STRING(line1, 256);\n+    }\n+\n+    // Attempt to append to file opened in read-only mode.\n+    {\n+        CAutoFile file(seq.Open(FlatFilePos(0, pos2), true), SER_DISK, CLIENT_VERSION);\n+        BOOST_CHECK_THROW(file << LIMITED_STRING(line2, 256), std::ios_base::failure);\n+    }\n+\n+    // Append second line to file.\n+    {\n+        CAutoFile file(seq.Open(FlatFilePos(0, pos2)), SER_DISK, CLIENT_VERSION);\n+        file << LIMITED_STRING(line2, 256);\n+    }\n+\n+    // Read text from file in read-only mode.\n+    {\n+        std::string text;\n+        CAutoFile file(seq.Open(FlatFilePos(0, pos1), true), SER_DISK, CLIENT_VERSION);\n+\n+        file >> LIMITED_STRING(text, 256);\n+        BOOST_CHECK_EQUAL(text, line1);\n+\n+        file >> LIMITED_STRING(text, 256);\n+        BOOST_CHECK_EQUAL(text, line2);\n+    }\n+\n+    // Read text from file with position offset.\n+    {\n+        std::string text;\n+        CAutoFile file(seq.Open(FlatFilePos(0, pos2)), SER_DISK, CLIENT_VERSION);\n+\n+        file >> LIMITED_STRING(text, 256);\n+        BOOST_CHECK_EQUAL(text, line2);\n+    }\n+\n+    // Ensure another file in the sequence has no data.\n+    {\n+        std::string text;\n+        CAutoFile file(seq.Open(FlatFilePos(1, pos2)), SER_DISK, CLIENT_VERSION);\n+        BOOST_CHECK_THROW(file >> LIMITED_STRING(text, 256), std::ios_base::failure);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(flatfile_allocate)\n+{\n+    auto data_dir = SetDataDir(\"flatfile_test\");\n+    FlatFileSeq seq(data_dir, \"a\", 100);\n+\n+    bool out_of_space;\n+\n+    BOOST_CHECK_EQUAL(seq.Allocate(FlatFilePos(0, 0), 1, out_of_space), 100);\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 0))), 100);\n+    BOOST_CHECK(!out_of_space);\n+\n+    BOOST_CHECK_EQUAL(seq.Allocate(FlatFilePos(0, 99), 1, out_of_space), 0);\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 99))), 100);\n+    BOOST_CHECK(!out_of_space);\n+\n+    BOOST_CHECK_EQUAL(seq.Allocate(FlatFilePos(0, 99), 2, out_of_space), 101);\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 99))), 200);\n+    BOOST_CHECK(!out_of_space);\n+}\n+\n+BOOST_AUTO_TEST_CASE(flatfile_flush)\n+{\n+    auto data_dir = SetDataDir(\"flatfile_test\");\n+    FlatFileSeq seq(data_dir, \"a\", 100);\n+\n+    bool out_of_space;\n+    seq.Allocate(FlatFilePos(0, 0), 1, out_of_space);\n+\n+    // Flush without finalize should not truncate file.\n+    seq.Flush(FlatFilePos(0, 1));\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 1))), 100);\n+\n+    // Flush with finalize should truncate file.\n+    seq.Flush(FlatFilePos(0, 1), true);\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 1))), 1);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "04cca330944f859b4ed68cb8da8a79f5206fd630",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNGNjYTMzMDk0NGY4NTliNGVkNjhjYjhkYThhNzlmNTIwNmZkNjMw",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-01-24T19:20:57Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-23T01:38:45Z"
      },
      "message": "Style cleanup.",
      "tree": {
        "sha": "a0c42f2d1b123a0c73e3bf3943cbdb18393e441d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0c42f2d1b123a0c73e3bf3943cbdb18393e441d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04cca330944f859b4ed68cb8da8a79f5206fd630",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04cca330944f859b4ed68cb8da8a79f5206fd630",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04cca330944f859b4ed68cb8da8a79f5206fd630",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04cca330944f859b4ed68cb8da8a79f5206fd630/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c01e4e159db82ce4b2acce75f709cac996367d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c01e4e159db82ce4b2acce75f709cac996367d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c01e4e159db82ce4b2acce75f709cac996367d7"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 20,
      "deletions": 23
    },
    "files": [
      {
        "sha": "8a8f7b681c5209f1768d6f8e30004d87aad7d91c",
        "filename": "src/flatfile.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04cca330944f859b4ed68cb8da8a79f5206fd630/src/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04cca330944f859b4ed68cb8da8a79f5206fd630/src/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.cpp?ref=04cca330944f859b4ed68cb8da8a79f5206fd630",
        "patch": "@@ -30,25 +30,24 @@ fs::path FlatFileSeq::FileName(const FlatFilePos& pos) const\n     return m_dir / strprintf(\"%s%05u.dat\", m_prefix, pos.nFile);\n }\n \n-FILE* FlatFileSeq::Open(const FlatFilePos& pos, bool fReadOnly)\n+FILE* FlatFileSeq::Open(const FlatFilePos& pos, bool read_only)\n {\n-    if (pos.IsNull())\n+    if (pos.IsNull()) {\n         return nullptr;\n+    }\n     fs::path path = FileName(pos);\n     fs::create_directories(path.parent_path());\n-    FILE* file = fsbridge::fopen(path, fReadOnly ? \"rb\": \"rb+\");\n-    if (!file && !fReadOnly)\n+    FILE* file = fsbridge::fopen(path, read_only ? \"rb\": \"rb+\");\n+    if (!file && !read_only)\n         file = fsbridge::fopen(path, \"wb+\");\n     if (!file) {\n         LogPrintf(\"Unable to open file %s\\n\", path.string());\n         return nullptr;\n     }\n-    if (pos.nPos) {\n-        if (fseek(file, pos.nPos, SEEK_SET)) {\n-            LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.string());\n-            fclose(file);\n-            return nullptr;\n-        }\n+    if (pos.nPos && fseek(file, pos.nPos, SEEK_SET)) {\n+        LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.string());\n+        fclose(file);\n+        return nullptr;\n     }\n     return file;\n }"
      },
      {
        "sha": "374ceff411b49ebc5a61db77859d4aab3504f5fd",
        "filename": "src/flatfile.h",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04cca330944f859b4ed68cb8da8a79f5206fd630/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04cca330944f859b4ed68cb8da8a79f5206fd630/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=04cca330944f859b4ed68cb8da8a79f5206fd630",
        "patch": "@@ -24,14 +24,12 @@ struct FlatFilePos\n         READWRITE(VARINT(nPos));\n     }\n \n-    FlatFilePos() {\n-        SetNull();\n-    }\n+    FlatFilePos() : nFile(-1), nPos(0) {}\n \n-    FlatFilePos(int nFileIn, unsigned int nPosIn) {\n-        nFile = nFileIn;\n-        nPos = nPosIn;\n-    }\n+    FlatFilePos(int nFileIn, unsigned int nPosIn) :\n+        nFile(nFileIn),\n+        nPos(nPosIn)\n+    {}\n \n     friend bool operator==(const FlatFilePos &a, const FlatFilePos &b) {\n         return (a.nFile == b.nFile && a.nPos == b.nPos);\n@@ -72,7 +70,7 @@ class FlatFileSeq\n     fs::path FileName(const FlatFilePos& pos) const;\n \n     /** Open a handle to the file at the given position. */\n-    FILE* Open(const FlatFilePos& pos, bool fReadOnly = false);\n+    FILE* Open(const FlatFilePos& pos, bool read_only = false);\n \n     /**\n      * Allocate additional space in a file after the given starting position. The amount allocated"
      },
      {
        "sha": "1f0a097e3df15a6dd3488d4133bfc79f891056c4",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04cca330944f859b4ed68cb8da8a79f5206fd630/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04cca330944f859b4ed68cb8da8a79f5206fd630/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=04cca330944f859b4ed68cb8da8a79f5206fd630",
        "patch": "@@ -135,12 +135,12 @@ bool DirIsWritable(const fs::path& directory)\n     return true;\n }\n \n-bool CheckDiskSpace(const fs::path& dir, uint64_t nAdditionalBytes)\n+bool CheckDiskSpace(const fs::path& dir, uint64_t additional_bytes)\n {\n-    constexpr uint64_t nMinDiskSpace = 52428800; // 50 MiB\n+    constexpr uint64_t min_disk_space = 52428800; // 50 MiB\n \n-    uint64_t nFreeBytesAvailable = fs::space(dir).available;\n-    return nFreeBytesAvailable >= nMinDiskSpace + nAdditionalBytes;\n+    uint64_t free_bytes_available = fs::space(dir).available;\n+    return free_bytes_available >= min_disk_space + additional_bytes;\n }\n \n /**"
      },
      {
        "sha": "bcfcaaaed0ad81681893f9d38c02b54036af07eb",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04cca330944f859b4ed68cb8da8a79f5206fd630/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04cca330944f859b4ed68cb8da8a79f5206fd630/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=04cca330944f859b4ed68cb8da8a79f5206fd630",
        "patch": "@@ -72,7 +72,7 @@ bool RenameOver(fs::path src, fs::path dest);\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only=false);\n void UnlockDirectory(const fs::path& directory, const std::string& lockfile_name);\n bool DirIsWritable(const fs::path& directory);\n-bool CheckDiskSpace(const fs::path& dir, uint64_t nAdditionalBytes = 0);\n+bool CheckDiskSpace(const fs::path& dir, uint64_t additional_bytes = 0);\n \n /** Release all directory locks. This is used for unit testing only, at runtime\n  * the global destructor will take care of the locks."
      }
    ]
  }
]