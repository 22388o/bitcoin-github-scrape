TheBlueMatt,2017-04-11T23:36:05Z,Fixed test_bitcoin segfaulting as it didnt init the script cache as it does the sigcache.,https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-293430562,293430562,
gmaxwell,2017-04-12T09:44:43Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-293527298,293527298,
instagibbs,2017-04-12T16:29:04Z,concept ACK,https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-293634385,293634385,
TheBlueMatt,2017-04-12T17:30:21Z,"Addressed Jeremy's comments aside from the request for a wrapper class, I think we need fewer dummy classes, not more :/. Also rebased on #9480.",https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-293651106,293651106,
sdaftuar,2017-04-19T15:45:12Z,"> Note that the cache is indexed only on the script execution flags\nand the transaction's witness hash. While this is sufficient to\nmake the CScriptCheck() calls pure functions, this introduces\ndependancies on the mempool calculating things such as the\nPrecomputedTransactionData object, filling the CCoinsViewCache, etc\nin the exact same way as ConnectBlock. I belive this is a reasonable",https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-295316813,295316813,
TheBlueMatt,2017-04-19T18:06:35Z,"@sdaftuar I'm not convinced its a massive concern, but I went ahead and added a wrapper which checks each scriptPubKey returned by the CCoinsViewCache is the one committed to by the input's prevout hash, which I believe removes that dependancy entirely.",https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-295371111,295371111,
morcos,2017-04-25T16:21:05Z,"Concept ACK\nBut I'd prefer if there were more safeguards in place against future changes that might cause consensus failure.  For instance, I think anything that is inputted to CScriptCheck should be committed to by the hash.  Right now it its the case that anything USED by CScriptCheck is committed to, but there is nothing stopping a future change to CScriptCheck that used the height from the C",https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-297084564,297084564,
TheBlueMatt,2017-04-27T14:43:23Z,"@morcos I added an additional commit to only pass the scriptPubKey and nValue from the prevout into CScriptCheck, so hopefully any such future changes would be super clear to reviewers as consensus bugs. Sadly I dont really want to just include the height in the hash, as there are many heights, but I think this is a sufficient change.",https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-297734351,297734351,
sdaftuar,2017-05-19T17:25:25Z,Needs rebase,https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-302762722,302762722,
gmaxwell,2017-05-20T09:01:01Z,@TheBlueMatt REBASE ME,https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-302860834,302860834,
TheBlueMatt,2017-05-22T19:55:14Z,Rebased :).,https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-303202994,303202994,
sipa,2017-05-24T01:26:07Z,Needs moar rebase.,https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-303592028,303592028,
jtimon,2017-05-25T15:37:17Z,"https://github.com/bitcoin/bitcoin/pull/10427 introduces GetScriptFlags like here but with some of my nits solved. If merged first, should make this a little bit smaller and simpler to review.\nThis needs rebase again.",https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-304042225,304042225,
luke-jr,2017-06-01T19:42:36Z,This sounds like it would break (or at least complicate) CHECKBLOCKVERSION and possibly even CHECKBLOCKATHEIGHT...?,https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-305599779,305599779,
sdaftuar,2017-06-01T20:02:28Z,"> This sounds like it would break (or at least complicate) CHECKBLOCKVERSION and possibly even CHECKBLOCKATHEIGHT...?\n\nI'm skeptical that we'd ever adopt such context-dependent script flags (which strike me as a bad idea), but putting that aside: I benchmarked this patch on data from December 2016, and observed a 31% reduction in total block validation time, which is such a large performance i",https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-305604489,305604489,
sipa,2017-06-02T00:47:27Z,Needs rebase.,https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-305658918,305658918,
gmaxwell,2017-06-04T05:56:35Z,"@TheBlueMatt needs rebase\n",https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-306020292,306020292,
TheBlueMatt,2017-06-06T00:50:00Z,Addressed @sdaftuar's comments and rebased.,https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-306350298,306350298,
sipa,2017-06-06T01:54:19Z,This does not look like it's rebased on top of #10195?,https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-306359178,306359178,
TheBlueMatt,2017-06-06T03:22:59Z,"@sipa Yes it was, though I fucked up the second-to-last commit. Fixed now.",https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-306371028,306371028,
gmaxwell,2017-06-06T08:25:27Z,@TheBlueMatt the tests timed out and need kicking.,https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-306417200,306417200,
TheBlueMatt,2017-06-07T00:22:14Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-306650687,306650687,
JeremyRubin,2017-06-09T04:54:18Z,"Theoretical question: Have you considered making both caches store their hashes in the same instance of the data structure? Might work out a bit better as each can borrow unused capacity from one another.\n\n",https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-307295134,307295134,
TheBlueMatt,2017-06-09T20:06:56Z,"Looks like it is to me?\n\nOn June 5, 2017 9:54:23 PM EDT, Pieter Wuille <notifications@github.com> wrote:\n>This does not look like it's rebased on top of 10195?\n",https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-307487182,307487182,
sipa,2017-06-09T20:08:17Z,"@TheBlueMatt Now it is. When I made the comment, this PR had `CCoins` in it in some places.",https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-307487483,307487483,
TheBlueMatt,2017-06-21T17:57:15Z,"@JeremyRubin I have not, that would likely be interesting in the future (as well as possibly not making it an even 1/2-1/2 split in memory usage).",https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-310157486,310157486,
sipa,2017-06-22T07:33:30Z,utACK c435d9fbb76a5c4b5525ffdf8fc74afdac1a42df apart from nits,https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-310300229,310300229,
TheBlueMatt,2017-06-23T20:25:36Z,"@sdaftuar pointed out that we could directly test CheckInputs' use of its own cache in unit tests, so I added a rather simple one that did so.",https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-310764667,310764667,
sipa,2017-06-26T23:09:14Z,utACK 316d328b915f2e23bb750096ee9878b14dfd0a26,https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-311206891,311206891,
TheBlueMatt,2017-06-27T00:37:38Z,"I believe @sdaftuar indicated that he had a better test written for this, not sure what format it takes, however.",https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-311219744,311219744,
sipa,2017-06-27T04:57:31Z,"Verified empirically that this actually gives a performance improvement:\n\nLast 10 block verifications on my server (benchmarked using -debug=bench):\n\nOn master as of a few weeks ago:\n```\n2017-06-26 22:16:21.499109     - Verify 5160 txins: 118.87ms (0.023ms/txin) [96.86s]\n2017-06-26 22:22:34.710518     - Verify 3957 txins: 84.70ms (0.021ms/txin) [96.95s]\n2017-06-26 22:32:43.025738  ",https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-311253118,311253118,
TheBlueMatt,2017-06-27T20:05:28Z,Replaced test with one by @sdaftuar which is much better. Should be good to go now.,https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-311469664,311469664,
sdaftuar,2017-06-27T21:00:39Z,ACK e3f9c05,https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-311484062,311484062,
morcos,2017-07-05T20:18:04Z,"posthumous utACK\n\nThanks for doing this.\n",https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-313214819,313214819,
JeremyRubin,2017-07-06T08:45:53Z,"probably wrong place to have this conversation, but for the sake of continuity...\n\n> @JeremyRubin I have not, that would likely be interesting in the future (as well as possibly not making it an even 1/2-1/2 split in memory usage).\n\nYeah I've (asynchronously) been thinking about this one a little bit in spare cycles. There are a couple tricks on could do to easily increase frequency, e.g. ",https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-313334895,313334895,
sipa,2017-04-11T22:18:19Z,"I think the division should be outside of GetArg. Otherwise, if you specify -maxsigcachesize=32, you end up with a total of 64MiB worth of caches.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r111027118,111027118,src/validation.cpp
JeremyRubin,2017-04-12T05:47:30Z,Maybe better to add a wrapper class around cuckoocache.h in a separate file so that you don't depend on CuckooCache internals and can replace it with something more efficient more easily.,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r111068810,111068810,src/validation.cpp
JeremyRubin,2017-04-12T05:52:07Z,"https://github.com/bitcoin/bitcoin/pull/9480 exposes this class from the sigcache, we should probably just use that rather than adding this code again in a another location.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r111069200,111069200,src/validation.cpp
JeremyRubin,2017-04-12T06:02:44Z,static in the middle of a function is messy -- add a wrapper class around cuckoocache.h,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r111070178,111070178,src/validation.cpp
JeremyRubin,2017-04-12T06:04:56Z,"Yes; adding a wrapper class would do this for you. Can be a read lock.\n\nAlso if you're using this class single threaded only ever, cuckoocache could be extended to offer a version without atomics...",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r111070401,111070401,src/validation.cpp
JeremyRubin,2017-04-12T06:35:06Z,"FYI You can cut the hashing overhead in half by either:\n\n- making the nonce 64 bytes & static caching then copyinh the midstate.\n- using only 19 bytes of nonce.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r111073537,111073537,src/validation.cpp
gmaxwell,2017-04-12T09:42:36Z,"Good, because the division is outside of the GetArg. :)",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r111106329,111106329,src/validation.cpp
instagibbs,2017-04-12T16:00:01Z,Struggling to understand how a unique nonce per cache entry vs per cache works.,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r111191039,111191039,src/validation.cpp
JeremyRubin,2017-04-12T16:17:23Z,it's static so it is per cache.,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r111195372,111195372,src/validation.cpp
TheBlueMatt,2017-04-12T17:28:25Z,"Is using the public interface of CuckooCache::cache really using its ""internals""?",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r111211908,111211908,src/validation.cpp
TheBlueMatt,2017-04-12T17:28:38Z,"Rebased on that, removed this class.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r111211946,111211946,src/validation.cpp
TheBlueMatt,2017-04-12T17:29:17Z,"I'd much much rather have a static in the function than add yet another class to compile. We need to have fewer two-line wrapper classes, not more...our memory usage is already insane.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r111212068,111212068,src/validation.cpp
TheBlueMatt,2017-04-12T17:29:32Z,"Using 19 bytes of nonce, thats way more than enough.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r111212117,111212117,src/validation.cpp
JeremyRubin,2017-04-12T21:36:20Z,"Memory usage during compile time? Is it really that bad for an added class?\n\nCan you at least move the static decl to the top of the function?",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r111266451,111266451,src/validation.cpp
sipa,2017-04-13T15:55:29Z,It seems I am blind.,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r111423717,111423717,src/validation.cpp
gmaxwell,2017-04-18T18:27:00Z,Static assert on the size of the flags so the nonce gets reduced if the flags are made 64-bits in the future?,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r112029279,112029279,src/validation.cpp
TheBlueMatt,2017-04-18T18:58:55Z,Done.,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r112036572,112036572,src/validation.cpp
TheBlueMatt,2017-04-18T21:01:20Z,Done. Moved the static to the top of the function with the static CuckooCache as well.,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r112062972,112062972,src/validation.cpp
JeremyRubin,2017-04-21T08:37:37Z,"Would be nice to update the LogPrintf here (and in the new Init) to say something about how the space is divided among multiple caches now, so users aren't confused why they aren't getting the full allocation here.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r112639333,112639333,src/script/sigcache.cpp
JeremyRubin,2017-04-21T08:38:00Z,I guess not.,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r112639391,112639391,src/validation.cpp
TheBlueMatt,2017-04-21T20:38:49Z,"OK, done, also updated the doc for -maxsigcachesize.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r112771950,112771950,src/script/sigcache.cpp
jtimon,2017-04-25T16:53:41Z,"This function can take Consensus::Params directly instead of CChainParams\nCan we pass ```ThresholdConditionCache& cache``` to this and move it to src/versionbits ?\nI know not all flags are activated with bip9, but it seems the best place to me.\nDoing so would prevent you from calling IsWitnessEnabled() and AssertLockHeld(cs_main), but do you need to?\nYou can do the latter from the caller l",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113251292,113251292,src/validation.cpp
jtimon,2017-04-25T17:00:02Z,why a separated declaration if it's going to be static?,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113252837,113252837,src/validation.cpp
JeremyRubin,2017-04-25T17:07:25Z,"It's a forward declaration. As to why the definition isn't just there, I'm not sure, maybe GetBlockScriptFlags also has some dependency that would need a forward decl.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113254568,113254568,src/validation.cpp
jtimon,2017-04-25T22:40:59Z,"history bike-sheeding currentBlockScriptVerifyFlags should be part of the previous commit, not this one (and for my taste this commit could be an independent PR).",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113329148,113329148,src/validation.cpp
jtimon,2017-04-25T22:53:30Z,Perhaps everything that is below this case could be moved to CheckInputsFromMempoolAndCache too,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113330975,113330975,src/validation.cpp
TheBlueMatt,2017-04-27T14:40:53Z,"I'd much prefer to encapsulate the version bits stuff in GetBlockScriptFlags, and keep the diff on the smaller side. You're welcome to move things around afterwards, validation.cpp need to continue its trek towards better internal interfaces.\n\nI changed it to take Consensus::Params.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113713125,113713125,src/validation.cpp
TheBlueMatt,2017-04-27T14:40:55Z,"The reason its down further is that I didnt want to move it up with the mempool stuff in validation.cpp, but its called from ATMP, so needed the forward declaration. Hopefully this stuff gets ironed out as we move towards better internal interfaces (see #10279).",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113713135,113713135,src/validation.cpp
TheBlueMatt,2017-04-27T14:40:57Z,"Its needed in this PR because its much more likely to trigger after the changes in this PR, though still unsupported. I'm happy to make it a PR on its own if you think its really worth it, but it seems to me this PR is still of very-reviewable-size.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113713145,113713145,src/validation.cpp
TheBlueMatt,2017-04-27T14:40:59Z,I dont think CheckInputsFromMempoolAndCache should make assumptions about having called CheckInputs already prior to this call? Maybe I'm confused as to what you're suggesting here.,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113713156,113713156,src/validation.cpp
jtimon,2017-04-27T15:19:55Z,"Moving it to src/versionbits.cpp would still encapsulate version bits stuff in GetBlockScriptFlags, you would just not be using the versionbitscache and cs_main globals from validation.cpp.\nYou will also avoid using the unnecessary wrapper ```IsWitnessEnabled()``` (specially unnecessary in this function since you are already using ```VersionBitsState()``` directly for csv anyway).\n\nIt is ""fr",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113725617,113725617,src/validation.cpp
jtimon,2017-04-27T15:22:13Z,"You are creating the function as new, it won't be any more disruptive to avoid the forward declaration. Anyway, my preference would be to move it to versionbits.o which is also ignored as ""something that can be ironed out later"", so whatever.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113726199,113726199,src/validation.cpp
jtimon,2017-04-27T15:25:51Z,"You misunderstood. Creating a currentBlockScriptVerifyFlags local variable just makes the next line simpler, which is fine, but could have been done in ""Cache full script execution results in addition to signatures"" directly which already touches those lines instead of ""Do not print soft-fork-script warning with -promiscuousmempool"", which would be clearer without that extra bikeshedding +2-1.\nA",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113727154,113727154,src/validation.cpp
jtimon,2017-04-27T15:32:16Z,"I mean moving the following inside the function too: \n```\n         {\n              // If we're using promiscuousmempoolflags, we may hit this normally\n              // Check if current block has some flags that scriptVerifyFlags\n             // does not before printing an ominous warning\n             if (!(~scriptVerifyFlags & currentBlockScriptVerifyFlags))\n                 return e",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113728900,113728900,src/validation.cpp
jtimon,2017-04-27T15:33:08Z,"The error should no be printed, but the function still needs to return false, no?",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113729145,113729145,src/validation.cpp
jtimon,2017-04-27T15:37:31Z,"Perhaps even put the 2 calls to checkinputs in it, from https://github.com/bitcoin/bitcoin/pull/10192/commits/061d06faceed0272d1913800369768188876df77#diff-24efdb00bfbe56b140fb006b562cc70bR889",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113730339,113730339,src/validation.cpp
TheBlueMatt,2017-04-27T15:51:53Z,"I dont think it makes any sense to move this entire function into src/versionbits.cpp? This function has stuff for BIP 65, 66 and 16, none of which are versionbits-activated? Moving all soft forks into a separate thing is definitely a separate issue from this PR.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113733922,113733922,src/validation.cpp
TheBlueMatt,2017-04-27T15:55:15Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113734840,113734840,src/validation.cpp
TheBlueMatt,2017-04-27T15:55:17Z,"But that logging implicitly makes an assumption about the fact that you've already called CheckInputs prior to the CheckInputsFromMempoolAndCache call, which I'd prefer not to do. CheckInputsFromMempoolAndCache *only* does some additional mempool-shouldnt-pollute-cache checks, and then calls CheckInputs.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113734844,113734844,src/validation.cpp
TheBlueMatt,2017-04-27T15:55:18Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113734847,113734847,src/validation.cpp
jtimon,2017-04-27T16:36:02Z,"I noted that at the beginning ""I know not all flags are activated with bip9"", but I still think it's the best place for this new function (even if some lines of the function don't rely on versionbits, they also don't rely on anything that versionbits didn't already rely on).Doing a separate module only for this single function seems stupid to me.\nAnyway, as disappointing as your rejection to mov",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r113744666,113744666,src/validation.cpp
sdaftuar,2017-05-24T18:35:15Z,"spelling nit: ""promiscuous""",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r118331939,118331939,src/validation.cpp
sdaftuar,2017-05-24T18:37:20Z,This error message isn't quite right; at this point we haven't actually compared against the MANDATORY flags. ,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r118332433,118332433,src/validation.cpp
jtimon,2017-05-25T15:41:30Z,"Why this? if you want to use it between this and its deifinition, why not move the definition here directly?",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r118514801,118514801,src/validation.cpp
TheBlueMatt,2017-06-06T00:49:10Z,"It feels much more reasonable next to the consensus code, as it is really critical consensus logic, instead of mixed in with all the ATMP code.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r120243670,120243670,src/validation.cpp
ryanofsky,2017-06-06T22:18:36Z,"In commit ""Cache full script execution results in addition to signatures""\n\nWould it be more efficient to avoid this hashing and the cache lookup below when `cacheFullScriptStore` is false?",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r120495816,120495816,src/validation.cpp
ryanofsky,2017-06-06T22:24:38Z,"In commit ""Cache full script execution results in addition to signatures""\n\nIf `pvChecks` is non-null, is it ok to just return true here without populating it? If so, it'd be good to have a comment here saying why, because it doesn't seem completely obvious.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r120496918,120496918,src/validation.cpp
TheBlueMatt,2017-06-07T00:17:10Z,"I believe actual block checking sets cacheFullScriptStore to false, so that's kinda when you want it to cache lookup :).",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r120509803,120509803,src/validation.cpp
TheBlueMatt,2017-06-07T00:19:14Z,"I'm confused, pvChecks is passed in, you dont populate, just push back your set of to-be-validated CScriptChecks?",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r120510037,120510037,src/validation.cpp
jtimon,2017-06-07T12:39:04Z,"I'm not following, in this commit this additional declaration (when nobody is calling it between the declaration and the definition) is completely redundant. The definition is close to ConnectBlock, also consensus code, not ATMP.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r120612883,120612883,src/validation.cpp
ryanofsky,2017-06-07T14:34:47Z,"> I believe actual block checking sets cacheFullScriptStore to false, so that's kinda when you want it to cache lookup :)\n\nI see, `cacheFullScriptStore == false` really means ""check and erase from cache"" not ""don't use cache"" like I was thinking. Could add a comment about this, though in retrospect I guess it's pretty obvious.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r120643004,120643004,src/validation.cpp
ryanofsky,2017-06-07T14:50:58Z,"> I'm confused, pvChecks is passed in, you dont populate, just push back your set of to-be-validated CScriptChecks?\n\nI guess I wouldn't expect `cacheFullScriptStore` being set to true or false to have an effect on what gets returned in `pvChecks`, and that an interaction between the two parameters would be documented.\n\nThe specific case where it looks like there is an interaction is after ",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r120648144,120648144,src/validation.cpp
TheBlueMatt,2017-06-07T15:05:40Z,Added a better comment.,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r120652781,120652781,src/validation.cpp
TheBlueMatt,2017-06-07T15:05:43Z,"Well its the same thing that the sigcache itself does, though I added a comment to the top of ConnectInputs.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r120652787,120652787,src/validation.cpp
ryanofsky,2017-06-07T15:10:18Z,"In commit ""Better document CheckInputs parameter meanings""\n\ns/true/false I think. Thanks for the comments!",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r120654209,120654209,src/validation.cpp
ryanofsky,2017-06-08T14:46:35Z,"In commit ""Add CheckInputs wrapper CCoinsViewMemPool -> non-consensus-critical""\n\nCould you add a comment explaining the return? It's not clear to me if this is supposed to be an optimization or a paranoid safety check. If it's meant to be the latter, maybe a way to make it more paranoid would be to do `if (coin.IsSpent()) has_spent_input = true` here and assert `!CheckInputs || !has_spent_inpu",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r120908324,120908324,src/validation.cpp
sipa,2017-06-09T01:13:57Z,No way to structure this so you can avoid the duplicate error line?,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r121031989,121031989,src/validation.cpp
sipa,2017-06-09T01:42:06Z,I don't think this section is necessary. The goal of this function should just be checking that no mempool bugs are leaking into consensus validation. This branch looks like an unrelated sanity check.,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r121034338,121034338,src/validation.cpp
sipa,2017-06-09T01:43:08Z,You can make the pool lookup conditional on `coin.nHeight == MEMPOOL_HEIGHT`. I think it's reasonable to rely on the fact the mempool - even if broken - will return Coin objects with nHeight set to that value.,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r121034424,121034424,src/validation.cpp
sipa,2017-06-09T01:45:35Z,"I believe the code is correct. No entry was found in the cache, so validation should fail - it's not a consistency bug.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r121034591,121034591,src/validation.cpp
ryanofsky,2017-06-09T14:39:43Z,"> I believe the code is correct. No entry was found in the cache, so validation should fail - it's not a consistency bug.\n\nI also think the code is correct, just would like a comment saying why this is a return rather than a continue, or something that asserts against the CheckInputs() result. The whole function except this one line seems intended to do a bunch of checks and catch logic errors",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r121142873,121142873,src/validation.cpp
TheBlueMatt,2017-06-21T17:51:20Z,"They arent duplicates? One prints that an issue has been found (and should be reported), the other simply warns you about your promiscuousmempool flags.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r123320049,123320049,src/validation.cpp
TheBlueMatt,2017-06-21T17:52:51Z,"I'd really prefer not to. The unordered_map lookup should essentially be free since anything required to find that transaction should already be very hot in cache, and if its free, why shouldnt we?",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r123320421,123320421,src/validation.cpp
TheBlueMatt,2017-06-21T17:53:58Z,"The goal of this function includes checking CCoinsViewMempool, which is mempool code, from leaking into consensus code. As a part of that, this branch is required (and like the mempool get, this pcoinsTip lookup should be incredibly hot in cache, so it shouldn't be a big deal).",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r123320706,123320706,src/validation.cpp
TheBlueMatt,2017-06-21T17:56:12Z,Added.,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r123321358,123321358,src/validation.cpp
sipa,2017-06-21T23:37:25Z,I think this lock is unnecessary - CTxMemPool::get grabs a lock on its own.,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r123391592,123391592,src/validation.cpp
sipa,2017-06-22T01:50:55Z,"I think the second `fCacheResults` here can be `false`; as we normally pass a non-NULL `pvChecks` here, `fCacheFullScriptStore = true` has no effects anyway. This only affects `TestBlockValidity`.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r123405471,123405471,src/validation.cpp
TheBlueMatt,2017-06-22T16:20:45Z,"fCacheFullScriptStore has a second meaning - it also deletes the element from the cache if a match is found, so we really should pass it through here to avoid deleting (or marking available) cache entries for TBV.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r123557356,123557356,src/validation.cpp
TheBlueMatt,2017-06-22T16:21:41Z,I moved the lock up in the function and added a comment noting why we might want it (note that its already held outside of this function before calling it in ATMP).,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r123557576,123557576,src/validation.cpp
sipa,2017-06-23T00:32:57Z,"Ah thanks, I missed that.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r123651812,123651812,src/validation.cpp
sipa,2017-06-23T00:34:03Z,"I'm still unconvinced it is needed, as it does not operate on CCoinsViewMemPool directly, but on a dissociated cache with the mempool UTXO loaded into it. If it's valid at one point with those inputs, it's also valid later.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r123651925,123651925,src/validation.cpp
sipa,2017-06-23T23:16:45Z,spends is undeclared,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r123860597,123860597,src/test/checkinputs_script_cache_tests.cpp
TheBlueMatt,2017-06-23T23:30:38Z,"Heh, thats what happens when you change a variable type after fixing the test.",https://github.com/bitcoin/bitcoin/pull/10192#discussion_r123861801,123861801,src/test/checkinputs_script_cache_tests.cpp
sipa,2017-06-28T23:45:03Z,This logic may become unnecessary with #10699.,https://github.com/bitcoin/bitcoin/pull/10192#discussion_r124683567,124683567,src/test/txvalidationcache_tests.cpp
