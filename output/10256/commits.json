[
  {
    "sha": "dd1ea59624458d19ae93838815e2f4b1b1eb73a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDFlYTU5NjI0NDU4ZDE5YWU5MzgzODgxNWUyZjRiMWIxZWI3M2E0",
    "commit": {
      "author": {
        "name": "Jimmy Song",
        "email": "jaejoon@gmail.com",
        "date": "2017-04-26T01:22:28Z"
      },
      "committer": {
        "name": "Jimmy Song",
        "email": "jaejoon@gmail.com",
        "date": "2017-04-28T21:54:12Z"
      },
      "message": "[test] Add gettxout call\n\nTest gettxout as part of the wallet test.\nTests gettxout with a confirmed/unconfirmed tx with include_mempool flag on and off",
      "tree": {
        "sha": "b780203ceecd614b3777d8f7ac86c5ed62e463a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b780203ceecd614b3777d8f7ac86c5ed62e463a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd1ea59624458d19ae93838815e2f4b1b1eb73a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd1ea59624458d19ae93838815e2f4b1b1eb73a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd1ea59624458d19ae93838815e2f4b1b1eb73a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd1ea59624458d19ae93838815e2f4b1b1eb73a4/comments",
    "author": {
      "login": "jimmysong",
      "id": 524761,
      "node_id": "MDQ6VXNlcjUyNDc2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/524761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimmysong",
      "html_url": "https://github.com/jimmysong",
      "followers_url": "https://api.github.com/users/jimmysong/followers",
      "following_url": "https://api.github.com/users/jimmysong/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimmysong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimmysong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimmysong/subscriptions",
      "organizations_url": "https://api.github.com/users/jimmysong/orgs",
      "repos_url": "https://api.github.com/users/jimmysong/repos",
      "events_url": "https://api.github.com/users/jimmysong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimmysong/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimmysong",
      "id": 524761,
      "node_id": "MDQ6VXNlcjUyNDc2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/524761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimmysong",
      "html_url": "https://github.com/jimmysong",
      "followers_url": "https://api.github.com/users/jimmysong/followers",
      "following_url": "https://api.github.com/users/jimmysong/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimmysong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimmysong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimmysong/subscriptions",
      "organizations_url": "https://api.github.com/users/jimmysong/orgs",
      "repos_url": "https://api.github.com/users/jimmysong/repos",
      "events_url": "https://api.github.com/users/jimmysong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimmysong/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c924011f535c46b3bc02bef8b7e2a8ad559d78d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c924011f535c46b3bc02bef8b7e2a8ad559d78d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c924011f535c46b3bc02bef8b7e2a8ad559d78d"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 24,
      "deletions": 4
    },
    "files": [
      {
        "sha": "558ffadfd4dbd978d8dbafc07447355f255ff6e5",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 24,
        "deletions": 4,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd1ea59624458d19ae93838815e2f4b1b1eb73a4/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd1ea59624458d19ae93838815e2f4b1b1eb73a4/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=dd1ea59624458d19ae93838815e2f4b1b1eb73a4",
        "patch": "@@ -6,7 +6,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-class WalletTest (BitcoinTestFramework):\n+class WalletTest(BitcoinTestFramework):\n \n     def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n         \"\"\"Return curr_balance after asserting the fee was in range\"\"\"\n@@ -28,7 +28,7 @@ def setup_network(self, split=False):\n         self.is_network_split=False\n         self.sync_all()\n \n-    def run_test (self):\n+    def run_test(self):\n \n         # Check that there's no UTXO on none of the nodes\n         assert_equal(len(self.nodes[0].listunspent()), 0)\n@@ -52,13 +52,33 @@ def run_test (self):\n         assert_equal(self.nodes[2].getbalance(), 0)\n \n         # Check that only first and second nodes have UTXOs\n-        assert_equal(len(self.nodes[0].listunspent()), 1)\n+        utxos = self.nodes[0].listunspent()\n+        assert_equal(len(utxos), 1)\n         assert_equal(len(self.nodes[1].listunspent()), 1)\n         assert_equal(len(self.nodes[2].listunspent()), 0)\n \n         # Send 21 BTC from 0 to 2 using sendtoaddress call.\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n+        mempool_txid = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n+\n+        self.log.info(\"test gettxout\")\n+        # utxo spent in mempool should be visible if you exclude mempool\n+        # but invisible if you include mempool\n+        confirmed_txid, confirmed_index = utxos[0][\"txid\"], utxos[0][\"vout\"]\n+        txout = self.nodes[0].gettxout(confirmed_txid, confirmed_index, False)\n+        assert_equal(txout['value'], 50)\n+        txout = self.nodes[0].gettxout(confirmed_txid, confirmed_index, True)\n+        assert txout is None\n+        # new utxo from mempool should be invisible if you exclude mempool\n+        # but visible if you include mempool\n+        txout = self.nodes[0].gettxout(mempool_txid, 0, False)\n+        assert txout is None\n+        txout1 = self.nodes[0].gettxout(mempool_txid, 0, True)\n+        txout2 = self.nodes[0].gettxout(mempool_txid, 1, True)\n+        # note the mempool tx will have randomly assigned indices\n+        # but 10 will go to node2 and the rest will go to node0\n+        balance = self.nodes[0].getbalance()\n+        assert_equal(set([txout1['value'], txout2['value']]), set([10, balance]))\n \n         walletinfo = self.nodes[0].getwalletinfo()\n         assert_equal(walletinfo['immature_balance'], 0)"
      }
    ]
  }
]