jnewbery,2020-06-11 22:06:37,"I wonder if we should actually change the Lock to be a Conditional Variable: https://docs.python.org/3/library/threading.html#condition-objects. A lot of what we do with the lock is polling for changes on objects, so having a notify() function that wakes the blocked thread could be much nicer.",https://github.com/bitcoin/bitcoin/pull/19178#issuecomment-642955199,642955199,
MarcoFalke,2020-06-11 22:31:01,Concept ACK. Seems like a good first step for future cleanups. (e.g. making the lock a private member and then replacing the polling loops with cvs),https://github.com/bitcoin/bitcoin/pull/19178#issuecomment-642963705,642963705,
MarcoFalke,2020-06-15 23:37:05,"Shower thought: The lock could even be removed completely without a cv replacement if all code that previously required the lock was executed in the network thread. Not sure if this makes sense at all, so consider it a ""shower thought"".",https://github.com/bitcoin/bitcoin/pull/19178#issuecomment-644445133,644445133,
MarcoFalke,2020-06-16 09:45:34,"ACK 62068381a3b9c065d81300be79abba7aecfdb41b ðŸ˜ƒ\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 62068381a3b9c065d81300be79abba7aecfdb41b ðŸ˜ƒ\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg1zgv/Yt3dwdeZi7IRInaHKprMrQbGGBB/MvgXliI7NbdZZmVGTcONWC",https://github.com/bitcoin/bitcoin/pull/19178#issuecomment-644658109,644658109,
glozow,2020-06-11 18:48:55,"Seems like `Lock` will try to acquire indefinitely by default (I'm looking at [these docs](https://docs.python.org/3/library/threading.html#threading.Lock.acquire)).\nI tried out some re-acquiring behavior with this code and it hangs forever as expected... Just in case someone like me does some dumb deadlocky stuff, would it be a good idea to make `mininode_lock` use something like`lock.acquire(t",https://github.com/bitcoin/bitcoin/pull/19178#discussion_r438999307,438999307,test/functional/test_framework/mininode.py
glozow,2020-06-11 18:50:01,"Good catch, I think this was from Amiti + me both adding it in separate PRs.",https://github.com/bitcoin/bitcoin/pull/19178#discussion_r438999876,438999876,test/functional/test_framework/mininode.py
glozow,2020-06-11 19:31:02,Actually I have a question because I'm not 100% sure how the test_runner works - does it allot a certain amount of time for each test? It looks like it would run infinitely? How would it affect Travis if 1 test is in deadlock?,https://github.com/bitcoin/bitcoin/pull/19178#discussion_r439020734,439020734,test/functional/test_framework/mininode.py
MarcoFalke,2020-06-11 20:27:24,"Travis is running our ci system, which calls the test_runner helper:\n\n```sh\n  DOCKER_EXEC LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib ${TEST_RUNNER_ENV} test/functional/test_runner.py --ci $MAKEJOBS --tmpdirprefix ""${BASE_SCRATCH_DIR}/test_runner/"" --ansi --combinedlogslen=4000 ${TEST_RUNNER_EXTRA} --quiet --failfast\n```\n\nIf a test takes a long time, it will show up in the log as `Remaining",https://github.com/bitcoin/bitcoin/pull/19178#discussion_r439052922,439052922,test/functional/test_framework/mininode.py
jnewbery,2020-06-11 22:04:06,"> would it be a good idea to make mininode_lock use something likelock.acquire(timeout=60) and/or if lock.locked(): raise_assertion_error\n\nWe use the `with <lock>:` syntax everywhere, which doesn't allow a `blocking` or `timeout` argument. I don't think there's a way to set a default time on a lock.\n\nI think if you did accidentally introduce a deadlock, you'd figure it out pretty easily. I",https://github.com/bitcoin/bitcoin/pull/19178#discussion_r439097140,439097140,test/functional/test_framework/mininode.py
glozow,2020-06-11 23:57:07,"Ok this makes sense, thanks! I was worried I could accidentally stall Travis hahaha. Having some debugging help sounds useful, let me go look for a someone...",https://github.com/bitcoin/bitcoin/pull/19178#discussion_r439132241,439132241,test/functional/test_framework/mininode.py
gillichu,2020-06-15 18:01:37,"I'm a bit confused on why `get_invs` needs to grab the lock, but `on_inv` doesn't? I understand that in the case of `wait_for_broadcast`, `self.wait_until` already acquires the lock, but I just wanted to confirm that `on_inv` already expects to be holding the lock on call.",https://github.com/bitcoin/bitcoin/pull/19178#discussion_r440351564,440351564,test/functional/test_framework/mininode.py
jnewbery,2020-06-15 18:46:25,"Yes. All of the `on_<msgtype>()` already hold the lock, since they're called by the `on_message()` method (specifically, the `getattr(self, 'on_' + msgtype)(message)` line)",https://github.com/bitcoin/bitcoin/pull/19178#discussion_r440375542,440375542,test/functional/test_framework/mininode.py
