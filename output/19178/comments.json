[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642955199",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19178#issuecomment-642955199",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19178",
    "id": 642955199,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0Mjk1NTE5OQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-11T22:06:37Z",
    "updated_at": "2020-06-11T22:06:37Z",
    "author_association": "MEMBER",
    "body": "I wonder if we should actually change the Lock to be a Conditional Variable: https://docs.python.org/3/library/threading.html#condition-objects. A lot of what we do with the lock is polling for changes on objects, so having a notify() function that wakes the blocked thread could be much nicer.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642955199/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642963705",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19178#issuecomment-642963705",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19178",
    "id": 642963705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0Mjk2MzcwNQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-11T22:31:01Z",
    "updated_at": "2020-06-11T22:31:01Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. Seems like a good first step for future cleanups. (e.g. making the lock a private member and then replacing the polling loops with cvs)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642963705/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644445133",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19178#issuecomment-644445133",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19178",
    "id": 644445133,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDQ0NTEzMw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-15T23:37:05Z",
    "updated_at": "2020-06-15T23:37:05Z",
    "author_association": "MEMBER",
    "body": "Shower thought: The lock could even be removed completely without a cv replacement if all code that previously required the lock was executed in the network thread. Not sure if this makes sense at all, so consider it a \"shower thought\".",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644445133/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644658109",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19178#issuecomment-644658109",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19178",
    "id": 644658109,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDY1ODEwOQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-16T09:45:34Z",
    "updated_at": "2020-06-16T09:45:34Z",
    "author_association": "MEMBER",
    "body": "ACK 62068381a3b9c065d81300be79abba7aecfdb41b \ud83d\ude03\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 62068381a3b9c065d81300be79abba7aecfdb41b \ud83d\ude03\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUg1zgv/Yt3dwdeZi7IRInaHKprMrQbGGBB/MvgXliI7NbdZZmVGTcONWCPMXWDA\r\nNRPTCD2oP4scNp2uRwFYr3WGXo8XrHQImByajBJWrgMxwiPkzHGYN0VHh9WUJiQt\r\n4XQyQhtr6nNg3T9dPvTyM0aUblItMkh17dcnQoynH7FGSh7njbhD9m+Nr0yJFMaX\r\npMeiIyMTbOIao2VNX1htUF5XN0twFjHNvFKHlHTyJxSyK/85vd2UPYo1eCzgBQwa\r\nPq9Ax5/MUtHnD5lucuthH4IHC7HfGxoJ7FpQGTZWPTDH7LA9HPn5z1D+JUXf7b3t\r\nzOCvVNm1DSvBG47EcPEHDIBLvhT4AhNJOd+APWN4NTV7y2AiGZwufipvWbPuBjpS\r\nJ2YTw57Y7CIbos3O8fGDuA0bNAR1mYNwBrOvyqXtxQaS6KV0WKecCtRbFrxoAxu5\r\n565+kQoGp4sjp3KAEalyPVu+td9orvKCejNRI5MloMcG55EKQ+3zLtQgGPoVBVx/\r\n5vm8xtfy\r\n=YJKb\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `236b7f082f677ae84f62c6b2ec461c0d23883d147cfecbaf72127c0e22631b33  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e892940108236b7f082f677ae84f62c6b2ec461c0d23883d147cfecbaf72127c0e22631b33f0106d02ad7fa6f75d7e2a5bd7f131a7a06108fff01002b6cc4a8cf3b22f2449836fd16c1cf908f1045ee894b1f0085fbaa4a682e8c8d30083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff0100aeb79fa812b39c1efcb39f21314088908f1045ee894b2f0086556ba4bfd8b22fa0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff01033a6c0cd6e25bbf5071cb05da3c134ca08f1045ee894b2f0084ade7cfd0058750c0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6df01077c1c0d7e4616b7f66f29eee3adf803508f1206ed4a6f147201c2203bb74a5a8d2567ea58b8fb24cc24249f4ab47c39a506d4308f1045ee894b1f0080166e7b2897228050083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644658109/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438999307",
    "pull_request_review_id": 429193828,
    "id": 438999307,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTMwNw==",
    "diff_hunk": "@@ -492,7 +492,7 @@ def test_function():\n # P2PConnection acquires this lock whenever delivering a message to a P2PInterface.\n # This lock should be acquired in the thread running the test logic to synchronize\n # access to any data shared with the P2PInterface or P2PConnection.\n-mininode_lock = threading.RLock()\n+mininode_lock = threading.Lock()",
    "path": "test/functional/test_framework/mininode.py",
    "position": 5,
    "original_position": 5,
    "commit_id": "62068381a3b9c065d81300be79abba7aecfdb41b",
    "original_commit_id": "62068381a3b9c065d81300be79abba7aecfdb41b",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Seems like `Lock` will try to acquire indefinitely by default (I'm looking at [these docs](https://docs.python.org/3/library/threading.html#threading.Lock.acquire)).\r\nI tried out some re-acquiring behavior with this code and it hangs forever as expected... Just in case someone like me does some dumb deadlocky stuff, would it be a good idea to make `mininode_lock` use something like`lock.acquire(timeout=60)` and/or `if lock.locked(): raise_assertion_error`?",
    "created_at": "2020-06-11T18:48:55Z",
    "updated_at": "2020-06-11T19:34:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19178#discussion_r438999307",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19178",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438999307"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19178#discussion_r438999307"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19178"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438999307/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 495,
    "original_line": 495,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438999876",
    "pull_request_review_id": 429193828,
    "id": 438999876,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTg3Ng==",
    "diff_hunk": "@@ -658,8 +658,6 @@ def on_inv(self, message):\n                 # save txid\n                 self.tx_invs_received[i.hash] += 1\n \n-        super().on_inv(message)",
    "path": "test/functional/test_framework/mininode.py",
    "position": 13,
    "original_position": 13,
    "commit_id": "62068381a3b9c065d81300be79abba7aecfdb41b",
    "original_commit_id": "62068381a3b9c065d81300be79abba7aecfdb41b",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good catch, I think this was from Amiti + me both adding it in separate PRs.",
    "created_at": "2020-06-11T18:50:01Z",
    "updated_at": "2020-06-11T19:34:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19178#discussion_r438999876",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19178",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438999876"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19178#discussion_r438999876"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19178"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438999876/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 661,
    "original_line": 661,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439020734",
    "pull_request_review_id": 429193828,
    "id": 439020734,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMDczNA==",
    "diff_hunk": "@@ -492,7 +492,7 @@ def test_function():\n # P2PConnection acquires this lock whenever delivering a message to a P2PInterface.\n # This lock should be acquired in the thread running the test logic to synchronize\n # access to any data shared with the P2PInterface or P2PConnection.\n-mininode_lock = threading.RLock()\n+mininode_lock = threading.Lock()",
    "path": "test/functional/test_framework/mininode.py",
    "position": 5,
    "original_position": 5,
    "commit_id": "62068381a3b9c065d81300be79abba7aecfdb41b",
    "original_commit_id": "62068381a3b9c065d81300be79abba7aecfdb41b",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Actually I have a question because I'm not 100% sure how the test_runner works - does it allot a certain amount of time for each test? It looks like it would run infinitely? How would it affect Travis if 1 test is in deadlock?",
    "created_at": "2020-06-11T19:31:02Z",
    "updated_at": "2020-06-11T19:34:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19178#discussion_r439020734",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19178",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439020734"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19178#discussion_r439020734"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19178"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439020734/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 495,
    "original_line": 495,
    "side": "RIGHT",
    "in_reply_to_id": 438999307
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439052922",
    "pull_request_review_id": 429265357,
    "id": 439052922,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1MjkyMg==",
    "diff_hunk": "@@ -492,7 +492,7 @@ def test_function():\n # P2PConnection acquires this lock whenever delivering a message to a P2PInterface.\n # This lock should be acquired in the thread running the test logic to synchronize\n # access to any data shared with the P2PInterface or P2PConnection.\n-mininode_lock = threading.RLock()\n+mininode_lock = threading.Lock()",
    "path": "test/functional/test_framework/mininode.py",
    "position": 5,
    "original_position": 5,
    "commit_id": "62068381a3b9c065d81300be79abba7aecfdb41b",
    "original_commit_id": "62068381a3b9c065d81300be79abba7aecfdb41b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Travis is running our ci system, which calls the test_runner helper:\r\n\r\n```sh\r\n  DOCKER_EXEC LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib ${TEST_RUNNER_ENV} test/functional/test_runner.py --ci $MAKEJOBS --tmpdirprefix \"${BASE_SCRATCH_DIR}/test_runner/\" --ansi --combinedlogslen=4000 ${TEST_RUNNER_EXTRA} --quiet --failfast\r\n```\r\n\r\nIf a test takes a long time, it will show up in the log as `Remaining jobs: [foo_bar.py]`.\r\n\r\nIf a test never finished, the virtual machine that the ci system runs on will eventually reboot and mark the run as failed.",
    "created_at": "2020-06-11T20:27:24Z",
    "updated_at": "2020-06-11T20:27:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19178#discussion_r439052922",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19178",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439052922"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19178#discussion_r439052922"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19178"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439052922/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 495,
    "original_line": 495,
    "side": "RIGHT",
    "in_reply_to_id": 438999307
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439097140",
    "pull_request_review_id": 429324863,
    "id": 439097140,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5NzE0MA==",
    "diff_hunk": "@@ -492,7 +492,7 @@ def test_function():\n # P2PConnection acquires this lock whenever delivering a message to a P2PInterface.\n # This lock should be acquired in the thread running the test logic to synchronize\n # access to any data shared with the P2PInterface or P2PConnection.\n-mininode_lock = threading.RLock()\n+mininode_lock = threading.Lock()",
    "path": "test/functional/test_framework/mininode.py",
    "position": 5,
    "original_position": 5,
    "commit_id": "62068381a3b9c065d81300be79abba7aecfdb41b",
    "original_commit_id": "62068381a3b9c065d81300be79abba7aecfdb41b",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> would it be a good idea to make mininode_lock use something likelock.acquire(timeout=60) and/or if lock.locked(): raise_assertion_error\r\n\r\nWe use the `with <lock>:` syntax everywhere, which doesn't allow a `blocking` or `timeout` argument. I don't think there's a way to set a default time on a lock.\r\n\r\nI think if you did accidentally introduce a deadlock, you'd figure it out pretty easily. If your script was hanging, I think the best way would be to implement some way to attach pdb to the running process (eg https://stackoverflow.com/a/25329467/933705 or https://stackoverflow.com/a/147114/933705) and then inspect the stack trace.\r\n\r\n(in fact, I think this would be generally useful, so perhaps someone should implement it :slightly_smiling_face: )",
    "created_at": "2020-06-11T22:04:06Z",
    "updated_at": "2020-06-11T22:04:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19178#discussion_r439097140",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19178",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439097140"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19178#discussion_r439097140"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19178"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439097140/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 495,
    "original_line": 495,
    "side": "RIGHT",
    "in_reply_to_id": 438999307
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439132241",
    "pull_request_review_id": 429371260,
    "id": 439132241,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMjI0MQ==",
    "diff_hunk": "@@ -492,7 +492,7 @@ def test_function():\n # P2PConnection acquires this lock whenever delivering a message to a P2PInterface.\n # This lock should be acquired in the thread running the test logic to synchronize\n # access to any data shared with the P2PInterface or P2PConnection.\n-mininode_lock = threading.RLock()\n+mininode_lock = threading.Lock()",
    "path": "test/functional/test_framework/mininode.py",
    "position": 5,
    "original_position": 5,
    "commit_id": "62068381a3b9c065d81300be79abba7aecfdb41b",
    "original_commit_id": "62068381a3b9c065d81300be79abba7aecfdb41b",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ok this makes sense, thanks! I was worried I could accidentally stall Travis hahaha. Having some debugging help sounds useful, let me go look for a someone...",
    "created_at": "2020-06-11T23:57:07Z",
    "updated_at": "2020-06-11T23:57:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19178#discussion_r439132241",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19178",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439132241"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19178#discussion_r439132241"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19178"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439132241/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 495,
    "original_line": 495,
    "side": "RIGHT",
    "in_reply_to_id": 438999307
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440351564",
    "pull_request_review_id": 430873240,
    "id": 440351564,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1MTU2NA==",
    "diff_hunk": "@@ -658,8 +658,6 @@ def on_inv(self, message):\n                 # save txid\n                 self.tx_invs_received[i.hash] += 1\n \n-        super().on_inv(message)\n-\n     def get_invs(self):\n         with mininode_lock:",
    "path": "test/functional/test_framework/mininode.py",
    "position": 16,
    "original_position": 16,
    "commit_id": "62068381a3b9c065d81300be79abba7aecfdb41b",
    "original_commit_id": "62068381a3b9c065d81300be79abba7aecfdb41b",
    "user": {
      "login": "gillichu",
      "id": 13020431,
      "node_id": "MDQ6VXNlcjEzMDIwNDMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/13020431?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gillichu",
      "html_url": "https://github.com/gillichu",
      "followers_url": "https://api.github.com/users/gillichu/followers",
      "following_url": "https://api.github.com/users/gillichu/following{/other_user}",
      "gists_url": "https://api.github.com/users/gillichu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gillichu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gillichu/subscriptions",
      "organizations_url": "https://api.github.com/users/gillichu/orgs",
      "repos_url": "https://api.github.com/users/gillichu/repos",
      "events_url": "https://api.github.com/users/gillichu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gillichu/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm a bit confused on why `get_invs` needs to grab the lock, but `on_inv` doesn't? I understand that in the case of `wait_for_broadcast`, `self.wait_until` already acquires the lock, but I just wanted to confirm that `on_inv` already expects to be holding the lock on call.",
    "created_at": "2020-06-15T18:01:37Z",
    "updated_at": "2020-06-15T18:07:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19178#discussion_r440351564",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19178",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440351564"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19178#discussion_r440351564"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19178"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440351564/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 662,
    "original_line": 662,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440375542",
    "pull_request_review_id": 430903491,
    "id": 440375542,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3NTU0Mg==",
    "diff_hunk": "@@ -658,8 +658,6 @@ def on_inv(self, message):\n                 # save txid\n                 self.tx_invs_received[i.hash] += 1\n \n-        super().on_inv(message)\n-\n     def get_invs(self):\n         with mininode_lock:",
    "path": "test/functional/test_framework/mininode.py",
    "position": 16,
    "original_position": 16,
    "commit_id": "62068381a3b9c065d81300be79abba7aecfdb41b",
    "original_commit_id": "62068381a3b9c065d81300be79abba7aecfdb41b",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes. All of the `on_<msgtype>()` already hold the lock, since they're called by the `on_message()` method (specifically, the `getattr(self, 'on_' + msgtype)(message)` line)",
    "created_at": "2020-06-15T18:46:25Z",
    "updated_at": "2020-06-15T18:46:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19178#discussion_r440375542",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19178",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440375542"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19178#discussion_r440375542"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19178"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440375542/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 662,
    "original_line": 662,
    "side": "RIGHT",
    "in_reply_to_id": 440351564
  }
]