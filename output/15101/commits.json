[
  {
    "sha": "cefb399e21cc82e18c2a151a8f35d8a08e671f72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWZiMzk5ZTIxY2M4MmUxOGMyYTE1MWE4ZjM1ZDhhMDhlNjcxZjcy",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-01-18T00:23:19Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-01-18T00:27:34Z"
      },
      "message": "gui: Use AutoConnection for WalletModel::unload signal",
      "tree": {
        "sha": "00efba8886e0204eb14e63a364c52d0d00fae7a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00efba8886e0204eb14e63a364c52d0d00fae7a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cefb399e21cc82e18c2a151a8f35d8a08e671f72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cefb399e21cc82e18c2a151a8f35d8a08e671f72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cefb399e21cc82e18c2a151a8f35d8a08e671f72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cefb399e21cc82e18c2a151a8f35d8a08e671f72/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "391a27376b30492f55b398fc220ee96cf3769a32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/391a27376b30492f55b398fc220ee96cf3769a32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/391a27376b30492f55b398fc220ee96cf3769a32"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f139152042aa50caa4a8edf784d090ab7f9ebf01",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cefb399e21cc82e18c2a151a8f35d8a08e671f72/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cefb399e21cc82e18c2a151a8f35d8a08e671f72/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=cefb399e21cc82e18c2a151a8f35d8a08e671f72",
        "patch": "@@ -376,7 +376,7 @@ bool WalletModel::changePassphrase(const SecureString &oldPass, const SecureStri\n static void NotifyUnload(WalletModel* walletModel)\n {\n     qDebug() << \"NotifyUnload\";\n-    QMetaObject::invokeMethod(walletModel, \"unload\", Qt::QueuedConnection);\n+    QMetaObject::invokeMethod(walletModel, \"unload\");\n }\n \n static void NotifyKeyStoreStatusChanged(WalletModel *walletmodel)"
      }
    ]
  },
  {
    "sha": "8fa271f08969b440cbc4aeb760db41c556ecf9c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZmEyNzFmMDg5NjliNDQwY2JjNGFlYjc2MGRiNDFjNTU2ZWNmOWM1",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-01-04T18:49:26Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-01-18T00:34:47Z"
      },
      "message": "gui: Add WalletController",
      "tree": {
        "sha": "a52af298be40cce51d5fb8b5fd8717e6789040d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a52af298be40cce51d5fb8b5fd8717e6789040d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8fa271f08969b440cbc4aeb760db41c556ecf9c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fa271f08969b440cbc4aeb760db41c556ecf9c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8fa271f08969b440cbc4aeb760db41c556ecf9c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fa271f08969b440cbc4aeb760db41c556ecf9c5/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cefb399e21cc82e18c2a151a8f35d8a08e671f72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cefb399e21cc82e18c2a151a8f35d8a08e671f72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cefb399e21cc82e18c2a151a8f35d8a08e671f72"
      }
    ],
    "stats": {
      "total": 157,
      "additions": 157,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ba6523d7c2e7d4abee944afc48fb0d006f59494b",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fa271f08969b440cbc4aeb760db41c556ecf9c5/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fa271f08969b440cbc4aeb760db41c556ecf9c5/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=8fa271f08969b440cbc4aeb760db41c556ecf9c5",
        "patch": "@@ -157,6 +157,7 @@ QT_MOC_CPP = \\\n   qt/moc_transactiontablemodel.cpp \\\n   qt/moc_transactionview.cpp \\\n   qt/moc_utilitydialog.cpp \\\n+  qt/moc_walletcontroller.cpp \\\n   qt/moc_walletframe.cpp \\\n   qt/moc_walletmodel.cpp \\\n   qt/moc_walletview.cpp\n@@ -237,6 +238,7 @@ BITCOIN_QT_H = \\\n   qt/transactiontablemodel.h \\\n   qt/transactionview.h \\\n   qt/utilitydialog.h \\\n+  qt/walletcontroller.h \\\n   qt/walletframe.h \\\n   qt/walletmodel.h \\\n   qt/walletmodeltransaction.h \\\n@@ -350,6 +352,7 @@ BITCOIN_QT_WALLET_CPP = \\\n   qt/transactionrecord.cpp \\\n   qt/transactiontablemodel.cpp \\\n   qt/transactionview.cpp \\\n+  qt/walletcontroller.cpp \\\n   qt/walletframe.cpp \\\n   qt/walletmodel.cpp \\\n   qt/walletmodeltransaction.cpp \\"
      },
      {
        "sha": "df2b7a3f9b7531c81251da3b3239baacc350701a",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "added",
        "additions": 95,
        "deletions": 0,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fa271f08969b440cbc4aeb760db41c556ecf9c5/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fa271f08969b440cbc4aeb760db41c556ecf9c5/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=8fa271f08969b440cbc4aeb760db41c556ecf9c5",
        "patch": "@@ -0,0 +1,95 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/walletcontroller.h>\n+\n+#include <interfaces/handler.h>\n+#include <interfaces/node.h>\n+\n+#include <algorithm>\n+\n+#include <QMutexLocker>\n+#include <QThread>\n+\n+WalletController::WalletController(interfaces::Node& node, const PlatformStyle* platform_style, OptionsModel* options_model, QObject* parent)\n+    : QObject(parent)\n+    , m_node(node)\n+    , m_platform_style(platform_style)\n+    , m_options_model(options_model)\n+{\n+    m_handler_load_wallet = m_node.handleLoadWallet([this](std::unique_ptr<interfaces::Wallet> wallet) {\n+        getOrCreateWallet(std::move(wallet));\n+    });\n+\n+    for (std::unique_ptr<interfaces::Wallet>& wallet : m_node.getWallets()) {\n+        getOrCreateWallet(std::move(wallet));\n+    }\n+}\n+\n+// Not using the default destructor because not all member types definitions are\n+// available in the header, just forward declared.\n+WalletController::~WalletController() {}\n+\n+std::vector<WalletModel*> WalletController::getWallets() const\n+{\n+    QMutexLocker locker(&m_mutex);\n+    return m_wallets;\n+}\n+\n+WalletModel* WalletController::getOrCreateWallet(std::unique_ptr<interfaces::Wallet> wallet)\n+{\n+    QMutexLocker locker(&m_mutex);\n+\n+    // Return model instance if exists.\n+    if (!m_wallets.empty()) {\n+        std::string name = wallet->getWalletName();\n+        for (WalletModel* wallet_model : m_wallets) {\n+            if (wallet_model->wallet().getWalletName() == name) {\n+                return wallet_model;\n+            }\n+        }\n+    }\n+\n+    // Instantiate model and register it.\n+    WalletModel* wallet_model = new WalletModel(std::move(wallet), m_node, m_platform_style, m_options_model, nullptr);\n+    m_wallets.push_back(wallet_model);\n+\n+    connect(wallet_model, &WalletModel::unload, [this, wallet_model] {\n+        removeAndDeleteWallet(wallet_model);\n+    });\n+\n+    // Re-emit coinsSent signal from wallet model.\n+    connect(wallet_model, &WalletModel::coinsSent, this, &WalletController::coinsSent);\n+\n+    // Notify walletAdded signal on the GUI thread.\n+    if (QThread::currentThread() == thread()) {\n+        addWallet(wallet_model);\n+    } else {\n+        // Handler callback runs in a different thread so fix wallet model thread affinity.\n+        wallet_model->moveToThread(thread());\n+        QMetaObject::invokeMethod(this, \"addWallet\", Qt::QueuedConnection, Q_ARG(WalletModel*, wallet_model));\n+    }\n+\n+    return wallet_model;\n+}\n+\n+void WalletController::addWallet(WalletModel* wallet_model)\n+{\n+    // Take ownership of the wallet model and register it.\n+    wallet_model->setParent(this);\n+    Q_EMIT walletAdded(wallet_model);\n+}\n+\n+void WalletController::removeAndDeleteWallet(WalletModel* wallet_model)\n+{\n+    // Unregister wallet model.\n+    {\n+        QMutexLocker locker(&m_mutex);\n+        m_wallets.erase(std::remove(m_wallets.begin(), m_wallets.end(), wallet_model));\n+    }\n+    Q_EMIT walletRemoved(wallet_model);\n+    // Currently this can trigger the unload since the model can hold the last\n+    // CWallet shared pointer.\n+    delete wallet_model;\n+}"
      },
      {
        "sha": "22b71b07ffc9db0546dadc8c588aec7a45324d78",
        "filename": "src/qt/walletcontroller.h",
        "status": "added",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fa271f08969b440cbc4aeb760db41c556ecf9c5/src/qt/walletcontroller.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fa271f08969b440cbc4aeb760db41c556ecf9c5/src/qt/walletcontroller.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.h?ref=8fa271f08969b440cbc4aeb760db41c556ecf9c5",
        "patch": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_WALLETCONTROLLER_H\n+#define BITCOIN_QT_WALLETCONTROLLER_H\n+\n+#include <qt/walletmodel.h>\n+#include <sync.h>\n+\n+#include <list>\n+#include <memory>\n+#include <vector>\n+\n+#include <QMutex>\n+\n+class OptionsModel;\n+class PlatformStyle;\n+\n+namespace interfaces {\n+class Handler;\n+class Node;\n+} // namespace interfaces\n+\n+/**\n+ * Controller between interfaces::Node, WalletModel instances and the GUI.\n+ */\n+class WalletController : public QObject\n+{\n+    Q_OBJECT\n+\n+    WalletModel* getOrCreateWallet(std::unique_ptr<interfaces::Wallet> wallet);\n+    void removeAndDeleteWallet(WalletModel* wallet_model);\n+\n+public:\n+    WalletController(interfaces::Node& node, const PlatformStyle* platform_style, OptionsModel* options_model, QObject* parent);\n+    ~WalletController();\n+\n+    std::vector<WalletModel*> getWallets() const;\n+\n+private Q_SLOTS:\n+    void addWallet(WalletModel* wallet_model);\n+\n+Q_SIGNALS:\n+    void walletAdded(WalletModel* wallet_model);\n+    void walletRemoved(WalletModel* wallet_model);\n+\n+    void coinsSent(WalletModel* wallet_model, SendCoinsRecipient recipient, QByteArray transaction);\n+\n+private:\n+    interfaces::Node& m_node;\n+    const PlatformStyle* const m_platform_style;\n+    OptionsModel* const m_options_model;\n+    mutable QMutex m_mutex;\n+    std::vector<WalletModel*> m_wallets;\n+    std::unique_ptr<interfaces::Handler> m_handler_load_wallet;\n+};\n+\n+#endif // BITCOIN_QT_WALLETCONTROLLER_H"
      }
    ]
  },
  {
    "sha": "0dd9bdefa1427746ae94b4dd3da1a5257c1ec68e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGQ5YmRlZmExNDI3NzQ2YWU5NGI0ZGQzZGExYTUyNTdjMWVjNjhl",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-01-04T18:49:48Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-01-18T00:34:51Z"
      },
      "message": "gui: Refactor to use WalletController",
      "tree": {
        "sha": "48534f63fed5f3a2d4441e6e8e492e67c6d32be5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48534f63fed5f3a2d4441e6e8e492e67c6d32be5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0dd9bdefa1427746ae94b4dd3da1a5257c1ec68e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dd9bdefa1427746ae94b4dd3da1a5257c1ec68e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0dd9bdefa1427746ae94b4dd3da1a5257c1ec68e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dd9bdefa1427746ae94b4dd3da1a5257c1ec68e/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fa271f08969b440cbc4aeb760db41c556ecf9c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fa271f08969b440cbc4aeb760db41c556ecf9c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fa271f08969b440cbc4aeb760db41c556ecf9c5"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 44,
      "deletions": 62
    },
    "files": [
      {
        "sha": "e485a6aa86a1051e63a7159166b2704d8a4664ef",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 54,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dd9bdefa1427746ae94b4dd3da1a5257c1ec68e/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dd9bdefa1427746ae94b4dd3da1a5257c1ec68e/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=0dd9bdefa1427746ae94b4dd3da1a5257c1ec68e",
        "patch": "@@ -24,7 +24,7 @@\n \n #ifdef ENABLE_WALLET\n #include <qt/paymentserver.h>\n-#include <qt/walletmodel.h>\n+#include <qt/walletcontroller.h>\n #endif\n \n #include <interfaces/handler.h>\n@@ -184,10 +184,6 @@ BitcoinApplication::BitcoinApplication(interfaces::Node& node, int &argc, char *\n     clientModel(nullptr),\n     window(nullptr),\n     pollShutdownTimer(nullptr),\n-#ifdef ENABLE_WALLET\n-    paymentServer(nullptr),\n-    m_wallet_models(),\n-#endif\n     returnValue(0),\n     platformStyle(nullptr)\n {\n@@ -316,11 +312,8 @@ void BitcoinApplication::requestShutdown()\n     pollShutdownTimer->stop();\n \n #ifdef ENABLE_WALLET\n-    window->removeAllWallets();\n-    for (const WalletModel* walletModel : m_wallet_models) {\n-        delete walletModel;\n-    }\n-    m_wallet_models.clear();\n+    delete m_wallet_controller;\n+    m_wallet_controller = nullptr;\n #endif\n     delete clientModel;\n     clientModel = nullptr;\n@@ -331,35 +324,6 @@ void BitcoinApplication::requestShutdown()\n     Q_EMIT requestedShutdown();\n }\n \n-void BitcoinApplication::addWallet(WalletModel* walletModel)\n-{\n-#ifdef ENABLE_WALLET\n-    window->addWallet(walletModel);\n-\n-    if (m_wallet_models.empty()) {\n-        window->setCurrentWallet(walletModel);\n-    }\n-\n-#ifdef ENABLE_BIP70\n-    connect(walletModel, &WalletModel::coinsSent,\n-        paymentServer, &PaymentServer::fetchPaymentACK);\n-#endif\n-    connect(walletModel, &WalletModel::unload, this, &BitcoinApplication::removeWallet);\n-\n-    m_wallet_models.push_back(walletModel);\n-#endif\n-}\n-\n-void BitcoinApplication::removeWallet()\n-{\n-#ifdef ENABLE_WALLET\n-    WalletModel* walletModel = static_cast<WalletModel*>(sender());\n-    m_wallet_models.erase(std::find(m_wallet_models.begin(), m_wallet_models.end(), walletModel));\n-    window->removeWallet(walletModel);\n-    walletModel->deleteLater();\n-#endif\n-}\n-\n void BitcoinApplication::initializeResult(bool success)\n {\n     qDebug() << __func__ << \": Initialization result: \" << success;\n@@ -370,26 +334,22 @@ void BitcoinApplication::initializeResult(bool success)\n         // Log this only after AppInitMain finishes, as then logging setup is guaranteed complete\n         qWarning() << \"Platform customization:\" << platformStyle->getName();\n #ifdef ENABLE_WALLET\n+        m_wallet_controller = new WalletController(m_node, platformStyle, optionsModel, this);\n #ifdef ENABLE_BIP70\n         PaymentServer::LoadRootCAs();\n #endif\n-        if (paymentServer) paymentServer->setOptionsModel(optionsModel);\n+        if (paymentServer) {\n+            paymentServer->setOptionsModel(optionsModel);\n+#ifdef ENABLE_BIP70\n+            connect(m_wallet_controller, &WalletController::coinsSent, paymentServer, &PaymentServer::fetchPaymentACK);\n+#endif\n+        }\n #endif\n \n         clientModel = new ClientModel(m_node, optionsModel);\n         window->setClientModel(clientModel);\n-\n #ifdef ENABLE_WALLET\n-        m_handler_load_wallet = m_node.handleLoadWallet([this](std::unique_ptr<interfaces::Wallet> wallet) {\n-            WalletModel* wallet_model = new WalletModel(std::move(wallet), m_node, platformStyle, optionsModel, nullptr);\n-            // Fix wallet model thread affinity.\n-            wallet_model->moveToThread(thread());\n-            QMetaObject::invokeMethod(this, \"addWallet\", Qt::QueuedConnection, Q_ARG(WalletModel*, wallet_model));\n-        });\n-\n-        for (auto& wallet : m_node.getWallets()) {\n-            addWallet(new WalletModel(std::move(wallet), m_node, platformStyle, optionsModel));\n-        }\n+        window->setWalletController(m_wallet_controller);\n #endif\n \n         // If -min option passed, start window minimized (iconified) or minimized to tray\n@@ -493,9 +453,6 @@ int GuiMain(int argc, char* argv[])\n     //   IMPORTANT if it is no longer a typedef use the normal variant above\n     qRegisterMetaType< CAmount >(\"CAmount\");\n     qRegisterMetaType< std::function<void()> >(\"std::function<void()>\");\n-#ifdef ENABLE_WALLET\n-    qRegisterMetaType<WalletModel*>(\"WalletModel*\");\n-#endif\n \n     /// 2. Parse command-line options. We do this after qt in order to show an error if there are problems parsing these\n     // Command-line options take precedence:"
      },
      {
        "sha": "5e6148555968a1a66b9d08b636804c4eca39ccb4",
        "filename": "src/qt/bitcoin.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dd9bdefa1427746ae94b4dd3da1a5257c1ec68e/src/qt/bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dd9bdefa1427746ae94b4dd3da1a5257c1ec68e/src/qt/bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.h?ref=0dd9bdefa1427746ae94b4dd3da1a5257c1ec68e",
        "patch": "@@ -19,6 +19,7 @@ class NetworkStyle;\n class OptionsModel;\n class PaymentServer;\n class PlatformStyle;\n+class WalletController;\n class WalletModel;\n \n namespace interfaces {\n@@ -93,8 +94,6 @@ public Q_SLOTS:\n     void shutdownResult();\n     /// Handle runaway exceptions. Shows a message box with the problem and quits the program.\n     void handleRunawayException(const QString &message);\n-    void addWallet(WalletModel* walletModel);\n-    void removeWallet();\n \n Q_SIGNALS:\n     void requestedInitialize();\n@@ -111,9 +110,8 @@ public Q_SLOTS:\n     BitcoinGUI *window;\n     QTimer *pollShutdownTimer;\n #ifdef ENABLE_WALLET\n-    PaymentServer* paymentServer;\n-    std::vector<WalletModel*> m_wallet_models;\n-    std::unique_ptr<interfaces::Handler> m_handler_load_wallet;\n+    PaymentServer* paymentServer{nullptr};\n+    WalletController* m_wallet_controller{nullptr};\n #endif\n     int returnValue;\n     const PlatformStyle *platformStyle;"
      },
      {
        "sha": "ff717f26f2eab56df7f0ba77fc2590f2eb449cca",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 3,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dd9bdefa1427746ae94b4dd3da1a5257c1ec68e/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dd9bdefa1427746ae94b4dd3da1a5257c1ec68e/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=0dd9bdefa1427746ae94b4dd3da1a5257c1ec68e",
        "patch": "@@ -19,6 +19,7 @@\n #include <qt/utilitydialog.h>\n \n #ifdef ENABLE_WALLET\n+#include <qt/walletcontroller.h>\n #include <qt/walletframe.h>\n #include <qt/walletmodel.h>\n #include <qt/walletview.h>\n@@ -565,18 +566,33 @@ void BitcoinGUI::setClientModel(ClientModel *_clientModel)\n }\n \n #ifdef ENABLE_WALLET\n+void BitcoinGUI::setWalletController(WalletController* wallet_controller)\n+{\n+    assert(!m_wallet_controller);\n+    assert(wallet_controller);\n+\n+    m_wallet_controller = wallet_controller;\n+\n+    connect(wallet_controller, &WalletController::walletAdded, this, &BitcoinGUI::addWallet);\n+    connect(wallet_controller, &WalletController::walletRemoved, this, &BitcoinGUI::removeWallet);\n+\n+    for (WalletModel* wallet_model : m_wallet_controller->getWallets()) {\n+        addWallet(wallet_model);\n+    }\n+}\n+\n void BitcoinGUI::addWallet(WalletModel* walletModel)\n {\n     if (!walletFrame) return;\n     const QString display_name = walletModel->getDisplayName();\n     setWalletActionsEnabled(true);\n+    rpcConsole->addWallet(walletModel);\n+    walletFrame->addWallet(walletModel);\n     m_wallet_selector->addItem(display_name, QVariant::fromValue(walletModel));\n     if (m_wallet_selector->count() == 2) {\n         m_wallet_selector_label_action->setVisible(true);\n         m_wallet_selector_action->setVisible(true);\n     }\n-    rpcConsole->addWallet(walletModel);\n-    walletFrame->addWallet(walletModel);\n }\n \n void BitcoinGUI::removeWallet(WalletModel* walletModel)\n@@ -599,13 +615,19 @@ void BitcoinGUI::setCurrentWallet(WalletModel* wallet_model)\n {\n     if (!walletFrame) return;\n     walletFrame->setCurrentWallet(wallet_model);\n+    for (int index = 0; index < m_wallet_selector->count(); ++index) {\n+        if (m_wallet_selector->itemData(index).value<WalletModel*>() == wallet_model) {\n+            m_wallet_selector->setCurrentIndex(index);\n+            break;\n+        }\n+    }\n     updateWindowTitle();\n }\n \n void BitcoinGUI::setCurrentWalletBySelectorIndex(int index)\n {\n     WalletModel* wallet_model = m_wallet_selector->itemData(index).value<WalletModel*>();\n-    setCurrentWallet(wallet_model);\n+    if (wallet_model) setCurrentWallet(wallet_model);\n }\n \n void BitcoinGUI::removeAllWallets()"
      },
      {
        "sha": "f1b76a6b641730a354729382684cd0b3765e6cdf",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dd9bdefa1427746ae94b4dd3da1a5257c1ec68e/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dd9bdefa1427746ae94b4dd3da1a5257c1ec68e/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=0dd9bdefa1427746ae94b4dd3da1a5257c1ec68e",
        "patch": "@@ -33,6 +33,7 @@ class PlatformStyle;\n class RPCConsole;\n class SendCoinsRecipient;\n class UnitDisplayStatusBarControl;\n+class WalletController;\n class WalletFrame;\n class WalletModel;\n class HelpMessageDialog;\n@@ -74,6 +75,9 @@ class BitcoinGUI : public QMainWindow\n         The client model represents the part of the core that communicates with the P2P network, and is wallet-agnostic.\n     */\n     void setClientModel(ClientModel *clientModel);\n+#ifdef ENABLE_WALLET\n+    void setWalletController(WalletController* wallet_controller);\n+#endif\n \n #ifdef ENABLE_WALLET\n     /** Set the wallet model.\n@@ -101,6 +105,7 @@ class BitcoinGUI : public QMainWindow\n \n private:\n     interfaces::Node& m_node;\n+    WalletController* m_wallet_controller{nullptr};\n     std::unique_ptr<interfaces::Handler> m_handler_message_box;\n     std::unique_ptr<interfaces::Handler> m_handler_question;\n     ClientModel* clientModel = nullptr;"
      }
    ]
  }
]