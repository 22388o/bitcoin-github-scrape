[
  {
    "sha": "12cc5704dbf8384b7821b576aadf90b9875aee5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmNjNTcwNGRiZjgzODRiNzgyMWI1NzZhYWRmOTBiOTg3NWFlZTVi",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-15T15:24:10Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-15T15:41:09Z"
      },
      "message": "net: update incorrect Doxygen documentation in netbase.cpp",
      "tree": {
        "sha": "d9b811f38c5b06ede1d1d517c56dddada5edcb05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9b811f38c5b06ede1d1d517c56dddada5edcb05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12cc5704dbf8384b7821b576aadf90b9875aee5b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmBPgEcACgkQT1chs9Dj\nkh1rrBAAvAtt4+xJ5RfZ4aJqr+qNwovKTl1dmYaOdVX4TrM/HmIpX0SL2GrTgoSj\nCC3JnugvmykS/7P6vIIpu9qydEJ4WNBj/S1xJEClbqGcw5+UXgJL+I3NvOctyY9Z\nP96tOY5WCWhixNEGCbETz0v48rzguCIrKcVOCwQ1C1v7FZN4dZscCSS6GFPIGXAU\nIIOnH0PbswfthYWvCqnRAFXvFuzBt4i02cdQZAlCpOJVk5Gj8+nONCRMIXHSJpT7\nPR8tiv/z9dXZ5G8HiOyuVn0NG4hZTxGM/Y8pES7eIXwpYbacHo4kVmeR/msrusDk\nckkmHinkrg3862PyFzh12UeV7luuHoH+Tj6gavGFCDPH+tfVQHikWSjVcs9w1mIv\nHGz3ntg79SqDkMhV1xoa165VlNkdYDx7SoqeB8ZqBQj6ORtCzCCz7oaCs0TcJpS7\nrEzW08Z0tJh3KPoV4vVsjs9e5AQG92ho8G8yX19+Q85ezxT0vq7AscOe2YBSvMCb\nNOa26X0nh+EEN2IqVoheqLJESTL/lDxKHAwM9/uhH1KXRn6YDbtQZMoBgANrXNih\n9M1txZ12Ab+f0OPXfx04BQVAR///kacx2qLARDUqZT+63nckYOG8tc/N6Ay01vAp\n7k4912IchahzGw4eXAg8hXVzJeI6jpuB3fslpST6C66QFzbaR6w=\n=94R0\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIK7yaJcUW+uvlofFJVoQR94dCVfC7Y5moWDdAZtTxwx5CP/wEJkYLPFScDEH\n6oCSZRaxL6cI8CCEFPzKpGXpo5oYcLRCpQdwZaJDaBUfsWmxejrSYfQcvwjxBGBP\ngEnwCAMAM1afzVtbAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRh\nbGxheHkuY29t//AQwwAKe2c5S0s28xlIg1KVBQjwIANxZrEN6E95VKDKqAGV7jRi\nZEfbv4VOdsQFgR4sXha6CPEEYE+ASfAIQx6xIjIaBg0Ag9/jDS75DI4uLWh0dHBz\nOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEOVRSHP+\nbMz2jd1lBF0ehRcI8QRgT4BJ8AhL80i6dPKEpQCD3+MNLvkMjiwraHR0cHM6Ly9i\nb2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQ/nsCcZT9PpnzJaUO\nCeUNLwjxBGBPcnPwCPKbMqHb5dUIAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5j\nYWxlbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree d9b811f38c5b06ede1d1d517c56dddada5edcb05\nparent eceb3f7707d6793152a00476adae1c4e268ce6f3\nauthor Jon Atack <jon@atack.com> 1615821850 +0100\ncommitter Jon Atack <jon@atack.com> 1615822869 +0100\n\nnet: update incorrect Doxygen documentation in netbase.cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12cc5704dbf8384b7821b576aadf90b9875aee5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12cc5704dbf8384b7821b576aadf90b9875aee5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12cc5704dbf8384b7821b576aadf90b9875aee5b/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eceb3f7707d6793152a00476adae1c4e268ce6f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eceb3f7707d6793152a00476adae1c4e268ce6f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eceb3f7707d6793152a00476adae1c4e268ce6f3"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 7,
      "deletions": 8
    },
    "files": [
      {
        "sha": "17b030eb7015245075929eb44d8308b01a5a9626",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12cc5704dbf8384b7821b576aadf90b9875aee5b/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12cc5704dbf8384b7821b576aadf90b9875aee5b/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=12cc5704dbf8384b7821b576aadf90b9875aee5b",
        "patch": "@@ -178,7 +178,7 @@ static bool LookupIntern(const std::string& name, std::vector<CNetAddr>& vIP, un\n  * @returns Whether or not the specified host string successfully resolved to\n  *          any resulting network addresses.\n  *\n- * @see Lookup(const char *, std::vector<CService>&, int, bool, unsigned int)\n+ * @see Lookup(const std::string&, std::vector<CService>&, int, bool, unsigned int, DNSLookupFn)\n  *      for additional parameter descriptions.\n  */\n bool LookupHost(const std::string& name, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup, DNSLookupFn dns_lookup_function)\n@@ -199,8 +199,8 @@ bool LookupHost(const std::string& name, std::vector<CNetAddr>& vIP, unsigned in\n  /**\n  * Resolve a host string to its first corresponding network address.\n  *\n- * @see LookupHost(const std::string&, std::vector<CNetAddr>&, unsigned int, bool) for\n- *      additional parameter descriptions.\n+ * @see LookupHost(const std::string&, std::vector<CNetAddr>&, unsigned int, bool, DNSLookupFn)\n+ *      for additional parameter descriptions.\n  */\n bool LookupHost(const std::string& name, CNetAddr& addr, bool fAllowLookup, DNSLookupFn dns_lookup_function)\n {\n@@ -257,7 +257,7 @@ bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefau\n /**\n  * Resolve a service string to its first corresponding service.\n  *\n- * @see Lookup(const char *, std::vector<CService>&, int, bool, unsigned int)\n+ * @see Lookup(const std::string&, std::vector<CService>&, int, bool, unsigned int, DNSLookupFn)\n  *      for additional parameter descriptions.\n  */\n bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllowLookup, DNSLookupFn dns_lookup_function)\n@@ -277,11 +277,10 @@ bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllo\n  * Resolve a service string with a numeric IP to its first corresponding\n  * service.\n  *\n- * @returns The resulting CService if the resolution was successful, [::]:0\n- *          otherwise.\n+ * @returns The resulting CService if the resolution was successful, [::]:0 otherwise.\n  *\n- * @see Lookup(const char *, CService&, int, bool) for additional parameter\n- *      descriptions.\n+ * @see Lookup(const std::string&, std::vector<CService>&, int, bool, unsigned int, DNSLookupFn)\n+ *      for additional parameter descriptions.\n  */\n CService LookupNumeric(const std::string& name, int portDefault, DNSLookupFn dns_lookup_function)\n {"
      }
    ]
  },
  {
    "sha": "e6bd74b2e5f7f68614ca77a6667520b39feb9247",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmJkNzRiMmU1ZjdmNjg2MTRjYTc3YTY2Njc1MjBiMzlmZWI5MjQ3",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-15T15:53:25Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-15T15:53:25Z"
      },
      "message": "net: move Doxygen docs from netbase.cpp to netbase.h",
      "tree": {
        "sha": "8cd179216caf9cbcce93c49f4e789eaaa86cdf45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8cd179216caf9cbcce93c49f4e789eaaa86cdf45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6bd74b2e5f7f68614ca77a6667520b39feb9247",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmBPgvYACgkQT1chs9Dj\nkh0ThxAAupwq6UuSgUmG9cPidaeo30oFnqMvbGh78ULXTbMqFWzTzDOpLSBpy7ug\nD2+4JP5VN4BttgOR7JlvbLQEOm2J+IjFffJLEcRPM7c2y+8WQn+z8kW1jtBq1B1r\n8xj6d0G3dRdRc3zfVafyLdaHETlf1+znhnC91+YPBu/rFznKVeSXqfMaV9S00OVE\npxSQKduV44vlmnudMk3l2NsF4lsJofEaMwjv/HJb1c131LJoapsaSG0oTybVGosB\nQejj8JYrbaWcretPoiV3BjZc3i56bHkfZP6r7nrGcffwN8+Jid6hi5uDUn/Gy60U\ne9k0QPu3q8CpxDFg4UY8w3UhXTTaMj6ttVb3wFcc9gTdKqTTi+vsSGjbo3QFAEOB\ntnRteIt/C+v7LErfH1Fk1putIsjqHGH1Mitw7wEFd61GCOoCXYvoVz0LUAZdeZGL\no7lfdWbAH0YxCAqNFr7YZulirGPH4S4CHAjqMueh/S6OidIvtaTPyHTJoNxY+Lsl\naCGFhIzoDv8Lk+oJl/xpnsr2CTmjeUiSMEHFT2TtScuJQUAZFX8wwCnblS/ndjZx\nTu20GKt+XjE0UW8kQWBZ30M1ikmr1TBS3fKJzyOlLbtVnYUQ3H7E4vKRjDJS4m4f\no3JkYoeQSjo+RGqVr1NybSDatKCWh/+5PkQHZK3m/xvWgCOsu9E=\n=wt2D\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFOJPiI9l8IUGaWN3ABqhSkpsEmNYLcHZVWooZaojxwRCP/wEGk4VMl/1p1F\nQtLB+lw1XU0I8QRgT4L38AgciynlNpRy9QCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEHPfezqtBjqc0zWl6eww9j4I8QRgT4L3\n8AgMLXm486e+XQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQfEGYnglZnPhuKgADnNxpbwjxBGBPdSLwCHRh\nQGQCnEDFAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0\neXdhbGwuY29t8BB/htS32J66ii+0EnZc50lMCPEEYE+C9/AI77Hg053Gw9UAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 8cd179216caf9cbcce93c49f4e789eaaa86cdf45\nparent 12cc5704dbf8384b7821b576aadf90b9875aee5b\nauthor Jon Atack <jon@atack.com> 1615823605 +0100\ncommitter Jon Atack <jon@atack.com> 1615823605 +0100\n\nnet: move Doxygen docs from netbase.cpp to netbase.h\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6bd74b2e5f7f68614ca77a6667520b39feb9247",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6bd74b2e5f7f68614ca77a6667520b39feb9247",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6bd74b2e5f7f68614ca77a6667520b39feb9247/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12cc5704dbf8384b7821b576aadf90b9875aee5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12cc5704dbf8384b7821b576aadf90b9875aee5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12cc5704dbf8384b7821b576aadf90b9875aee5b"
      }
    ],
    "stats": {
      "total": 265,
      "additions": 136,
      "deletions": 129
    },
    "files": [
      {
        "sha": "ac2392ebedf0947fe3f1f508ba88b21b3728d7f4",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 128,
        "changes": 128,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6bd74b2e5f7f68614ca77a6667520b39feb9247/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6bd74b2e5f7f68614ca77a6667520b39feb9247/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=e6bd74b2e5f7f68614ca77a6667520b39feb9247",
        "patch": "@@ -166,21 +166,6 @@ static bool LookupIntern(const std::string& name, std::vector<CNetAddr>& vIP, un\n     return (vIP.size() > 0);\n }\n \n-/**\n- * Resolve a host string to its corresponding network addresses.\n- *\n- * @param name    The string representing a host. Could be a name or a numerical\n- *                IP address (IPv6 addresses in their bracketed form are\n- *                allowed).\n- * @param[out] vIP The resulting network addresses to which the specified host\n- *                 string resolved.\n- *\n- * @returns Whether or not the specified host string successfully resolved to\n- *          any resulting network addresses.\n- *\n- * @see Lookup(const std::string&, std::vector<CService>&, int, bool, unsigned int, DNSLookupFn)\n- *      for additional parameter descriptions.\n- */\n bool LookupHost(const std::string& name, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup, DNSLookupFn dns_lookup_function)\n {\n     if (!ValidAsCString(name)) {\n@@ -196,12 +181,6 @@ bool LookupHost(const std::string& name, std::vector<CNetAddr>& vIP, unsigned in\n     return LookupIntern(strHost, vIP, nMaxSolutions, fAllowLookup, dns_lookup_function);\n }\n \n- /**\n- * Resolve a host string to its first corresponding network address.\n- *\n- * @see LookupHost(const std::string&, std::vector<CNetAddr>&, unsigned int, bool, DNSLookupFn)\n- *      for additional parameter descriptions.\n- */\n bool LookupHost(const std::string& name, CNetAddr& addr, bool fAllowLookup, DNSLookupFn dns_lookup_function)\n {\n     if (!ValidAsCString(name)) {\n@@ -215,26 +194,6 @@ bool LookupHost(const std::string& name, CNetAddr& addr, bool fAllowLookup, DNSL\n     return true;\n }\n \n-/**\n- * Resolve a service string to its corresponding service.\n- *\n- * @param name    The string representing a service. Could be a name or a\n- *                numerical IP address (IPv6 addresses should be in their\n- *                disambiguated bracketed form), optionally followed by a port\n- *                number. (e.g. example.com:8333 or\n- *                [2001:db8:85a3:8d3:1319:8a2e:370:7348]:420)\n- * @param[out] vAddr The resulting services to which the specified service string\n- *                   resolved.\n- * @param portDefault The default port for resulting services if not specified\n- *                    by the service string.\n- * @param fAllowLookup Whether or not hostname lookups are permitted. If yes,\n- *                     external queries may be performed.\n- * @param nMaxSolutions The maximum number of results we want, specifying 0\n- *                      means \"as many solutions as we get.\"\n- *\n- * @returns Whether or not the service string successfully resolved to any\n- *          resulting services.\n- */\n bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions, DNSLookupFn dns_lookup_function)\n {\n     if (name.empty() || !ValidAsCString(name)) {\n@@ -254,12 +213,6 @@ bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefau\n     return true;\n }\n \n-/**\n- * Resolve a service string to its first corresponding service.\n- *\n- * @see Lookup(const std::string&, std::vector<CService>&, int, bool, unsigned int, DNSLookupFn)\n- *      for additional parameter descriptions.\n- */\n bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllowLookup, DNSLookupFn dns_lookup_function)\n {\n     if (!ValidAsCString(name)) {\n@@ -273,15 +226,6 @@ bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllo\n     return true;\n }\n \n-/**\n- * Resolve a service string with a numeric IP to its first corresponding\n- * service.\n- *\n- * @returns The resulting CService if the resolution was successful, [::]:0 otherwise.\n- *\n- * @see Lookup(const std::string&, std::vector<CService>&, int, bool, unsigned int, DNSLookupFn)\n- *      for additional parameter descriptions.\n- */\n CService LookupNumeric(const std::string& name, int portDefault, DNSLookupFn dns_lookup_function)\n {\n     if (!ValidAsCString(name)) {\n@@ -419,24 +363,6 @@ static std::string Socks5ErrorString(uint8_t err)\n     }\n }\n \n-/**\n- * Connect to a specified destination service through an already connected\n- * SOCKS5 proxy.\n- *\n- * @param strDest The destination fully-qualified domain name.\n- * @param port The destination port.\n- * @param auth The credentials with which to authenticate with the specified\n- *             SOCKS5 proxy.\n- * @param sock The SOCKS5 proxy socket.\n- *\n- * @returns Whether or not the operation succeeded.\n- *\n- * @note The specified SOCKS5 proxy socket must already be connected to the\n- *       SOCKS5 proxy.\n- *\n- * @see <a href=\"https://www.ietf.org/rfc/rfc1928.txt\">RFC1928: SOCKS Protocol\n- *      Version 5</a>\n- */\n bool Socks5(const std::string& strDest, int port, const ProxyCredentials* auth, const Sock& sock)\n {\n     IntrRecvError recvr;\n@@ -611,18 +537,6 @@ static void LogConnectFailure(bool manual_connection, const char* fmt, const Arg\n     }\n }\n \n-/**\n- * Try to connect to the specified service on the specified socket.\n- *\n- * @param addrConnect The service to which to connect.\n- * @param hSocket The socket on which to connect.\n- * @param nTimeout Wait this many milliseconds for the connection to be\n- *                 established.\n- * @param manual_connection Whether or not the connection was manually requested\n- *                          (e.g. through the addnode RPC)\n- *\n- * @returns Whether or not a connection was successfully made.\n- */\n bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocket, int nTimeout, bool manual_connection)\n {\n     // Create a sockaddr from the specified service.\n@@ -721,22 +635,6 @@ bool GetProxy(enum Network net, proxyType &proxyInfoOut) {\n     return true;\n }\n \n-/**\n- * Set the name proxy to use for all connections to nodes specified by a\n- * hostname. After setting this proxy, connecting to a node specified by a\n- * hostname won't result in a local lookup of said hostname, rather, connect to\n- * the node by asking the name proxy for a proxy connection to the hostname,\n- * effectively delegating the hostname lookup to the specified proxy.\n- *\n- * This delegation increases privacy for those who set the name proxy as they no\n- * longer leak their external hostname queries to their DNS servers.\n- *\n- * @returns Whether or not the operation succeeded.\n- *\n- * @note SOCKS5's support for UDP-over-SOCKS5 has been considered, but no SOCK5\n- *       server in common use (most notably Tor) actually implements UDP\n- *       support, and a DNS resolver is beyond the scope of this project.\n- */\n bool SetNameProxy(const proxyType &addrProxy) {\n     if (!addrProxy.IsValid())\n         return false;\n@@ -767,21 +665,6 @@ bool IsProxy(const CNetAddr &addr) {\n     return false;\n }\n \n-/**\n- * Connect to a specified destination service through a SOCKS5 proxy by first\n- * connecting to the SOCKS5 proxy.\n- *\n- * @param proxy The SOCKS5 proxy.\n- * @param strDest The destination service to which to connect.\n- * @param port The destination port.\n- * @param sock The socket on which to connect to the SOCKS5 proxy.\n- * @param nTimeout Wait this many milliseconds for the connection to the SOCKS5\n- *                 proxy to be established.\n- * @param[out] outProxyConnectionFailed Whether or not the connection to the\n- *                                      SOCKS5 proxy failed.\n- *\n- * @returns Whether or not the operation succeeded.\n- */\n bool ConnectThroughProxy(const proxyType& proxy, const std::string& strDest, int port, const Sock& sock, int nTimeout, bool& outProxyConnectionFailed)\n {\n     // first connect to proxy server\n@@ -805,17 +688,6 @@ bool ConnectThroughProxy(const proxyType& proxy, const std::string& strDest, int\n     return true;\n }\n \n-/**\n- * Parse and resolve a specified subnet string into the appropriate internal\n- * representation.\n- *\n- * @param strSubnet A string representation of a subnet of the form `network\n- *                address [ \"/\", ( CIDR-style suffix | netmask ) ]`(e.g.\n- *                `2001:db8::/32`, `192.0.2.0/255.255.255.0`, or `8.8.8.8`).\n- * @param ret The resulting internal representation of a subnet.\n- *\n- * @returns Whether the operation succeeded or not.\n- */\n bool LookupSubNet(const std::string& strSubnet, CSubNet& ret, DNSLookupFn dns_lookup_function)\n {\n     if (!ValidAsCString(strSubnet)) {"
      },
      {
        "sha": "e13ca4dbc574609cd00889b501b66a6422112da1",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 136,
        "deletions": 1,
        "changes": 137,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6bd74b2e5f7f68614ca77a6667520b39feb9247/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6bd74b2e5f7f68614ca77a6667520b39feb9247/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=e6bd74b2e5f7f68614ca77a6667520b39feb9247",
        "patch": "@@ -76,18 +76,106 @@ std::vector<std::string> GetNetworkNames(bool append_unroutable = false);\n bool SetProxy(enum Network net, const proxyType &addrProxy);\n bool GetProxy(enum Network net, proxyType &proxyInfoOut);\n bool IsProxy(const CNetAddr &addr);\n+/**\n+ * Set the name proxy to use for all connections to nodes specified by a\n+ * hostname. After setting this proxy, connecting to a node specified by a\n+ * hostname won't result in a local lookup of said hostname, rather, connect to\n+ * the node by asking the name proxy for a proxy connection to the hostname,\n+ * effectively delegating the hostname lookup to the specified proxy.\n+ *\n+ * This delegation increases privacy for those who set the name proxy as they no\n+ * longer leak their external hostname queries to their DNS servers.\n+ *\n+ * @returns Whether or not the operation succeeded.\n+ *\n+ * @note SOCKS5's support for UDP-over-SOCKS5 has been considered, but no SOCK5\n+ *       server in common use (most notably Tor) actually implements UDP\n+ *       support, and a DNS resolver is beyond the scope of this project.\n+ */\n bool SetNameProxy(const proxyType &addrProxy);\n bool HaveNameProxy();\n bool GetNameProxy(proxyType &nameProxyOut);\n \n using DNSLookupFn = std::function<std::vector<CNetAddr>(const std::string&, bool)>;\n extern DNSLookupFn g_dns_lookup;\n \n+/**\n+ * Resolve a host string to its corresponding network addresses.\n+ *\n+ * @param name    The string representing a host. Could be a name or a numerical\n+ *                IP address (IPv6 addresses in their bracketed form are\n+ *                allowed).\n+ * @param[out] vIP The resulting network addresses to which the specified host\n+ *                 string resolved.\n+ *\n+ * @returns Whether or not the specified host string successfully resolved to\n+ *          any resulting network addresses.\n+ *\n+ * @see Lookup(const std::string&, std::vector<CService>&, int, bool, unsigned int, DNSLookupFn)\n+ *      for additional parameter descriptions.\n+ */\n bool LookupHost(const std::string& name, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup, DNSLookupFn dns_lookup_function = g_dns_lookup);\n+\n+/**\n+ * Resolve a host string to its first corresponding network address.\n+ *\n+ * @see LookupHost(const std::string&, std::vector<CNetAddr>&, unsigned int, bool, DNSLookupFn)\n+ *      for additional parameter descriptions.\n+ */\n bool LookupHost(const std::string& name, CNetAddr& addr, bool fAllowLookup, DNSLookupFn dns_lookup_function = g_dns_lookup);\n-bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllowLookup, DNSLookupFn dns_lookup_function = g_dns_lookup);\n+\n+/**\n+ * Resolve a service string to its corresponding service.\n+ *\n+ * @param name    The string representing a service. Could be a name or a\n+ *                numerical IP address (IPv6 addresses should be in their\n+ *                disambiguated bracketed form), optionally followed by a port\n+ *                number. (e.g. example.com:8333 or\n+ *                [2001:db8:85a3:8d3:1319:8a2e:370:7348]:420)\n+ * @param[out] vAddr The resulting services to which the specified service string\n+ *                   resolved.\n+ * @param portDefault The default port for resulting services if not specified\n+ *                    by the service string.\n+ * @param fAllowLookup Whether or not hostname lookups are permitted. If yes,\n+ *                     external queries may be performed.\n+ * @param nMaxSolutions The maximum number of results we want, specifying 0\n+ *                      means \"as many solutions as we get.\"\n+ *\n+ * @returns Whether or not the service string successfully resolved to any\n+ *          resulting services.\n+ */\n bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions, DNSLookupFn dns_lookup_function = g_dns_lookup);\n+\n+/**\n+ * Resolve a service string to its first corresponding service.\n+ *\n+ * @see Lookup(const std::string&, std::vector<CService>&, int, bool, unsigned int, DNSLookupFn)\n+ *      for additional parameter descriptions.\n+ */\n+bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllowLookup, DNSLookupFn dns_lookup_function = g_dns_lookup);\n+\n+/**\n+ * Resolve a service string with a numeric IP to its first corresponding\n+ * service.\n+ *\n+ * @returns The resulting CService if the resolution was successful, [::]:0 otherwise.\n+ *\n+ * @see Lookup(const std::string&, std::vector<CService>&, int, bool, unsigned int, DNSLookupFn)\n+ *      for additional parameter descriptions.\n+ */\n CService LookupNumeric(const std::string& name, int portDefault = 0, DNSLookupFn dns_lookup_function = g_dns_lookup);\n+\n+/**\n+ * Parse and resolve a specified subnet string into the appropriate internal\n+ * representation.\n+ *\n+ * @param strSubnet A string representation of a subnet of the form `network\n+ *                address [ \"/\", ( CIDR-style suffix | netmask ) ]`(e.g.\n+ *                `2001:db8::/32`, `192.0.2.0/255.255.255.0`, or `8.8.8.8`).\n+ * @param ret The resulting internal representation of a subnet.\n+ *\n+ * @returns Whether the operation succeeded or not.\n+ */\n bool LookupSubNet(const std::string& strSubnet, CSubNet& subnet, DNSLookupFn dns_lookup_function = g_dns_lookup);\n \n /**\n@@ -102,14 +190,61 @@ std::unique_ptr<Sock> CreateSockTCP(const CService& address_family);\n  */\n extern std::function<std::unique_ptr<Sock>(const CService&)> CreateSock;\n \n+/**\n+ * Try to connect to the specified service on the specified socket.\n+ *\n+ * @param addrConnect The service to which to connect.\n+ * @param hSocket The socket on which to connect.\n+ * @param nTimeout Wait this many milliseconds for the connection to be\n+ *                 established.\n+ * @param manual_connection Whether or not the connection was manually requested\n+ *                          (e.g. through the addnode RPC)\n+ *\n+ * @returns Whether or not a connection was successfully made.\n+ */\n bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocketRet, int nTimeout, bool manual_connection);\n+\n+/**\n+ * Connect to a specified destination service through a SOCKS5 proxy by first\n+ * connecting to the SOCKS5 proxy.\n+ *\n+ * @param proxy The SOCKS5 proxy.\n+ * @param strDest The destination service to which to connect.\n+ * @param port The destination port.\n+ * @param sock The socket on which to connect to the SOCKS5 proxy.\n+ * @param nTimeout Wait this many milliseconds for the connection to the SOCKS5\n+ *                 proxy to be established.\n+ * @param[out] outProxyConnectionFailed Whether or not the connection to the\n+ *                                      SOCKS5 proxy failed.\n+ *\n+ * @returns Whether or not the operation succeeded.\n+ */\n bool ConnectThroughProxy(const proxyType& proxy, const std::string& strDest, int port, const Sock& sock, int nTimeout, bool& outProxyConnectionFailed);\n+\n /** Disable or enable blocking-mode for a socket */\n bool SetSocketNonBlocking(const SOCKET& hSocket, bool fNonBlocking);\n /** Set the TCP_NODELAY flag on a socket */\n bool SetSocketNoDelay(const SOCKET& hSocket);\n void InterruptSocks5(bool interrupt);\n \n+/**\n+ * Connect to a specified destination service through an already connected\n+ * SOCKS5 proxy.\n+ *\n+ * @param strDest The destination fully-qualified domain name.\n+ * @param port The destination port.\n+ * @param auth The credentials with which to authenticate with the specified\n+ *             SOCKS5 proxy.\n+ * @param sock The SOCKS5 proxy socket.\n+ *\n+ * @returns Whether or not the operation succeeded.\n+ *\n+ * @note The specified SOCKS5 proxy socket must already be connected to the\n+ *       SOCKS5 proxy.\n+ *\n+ * @see <a href=\"https://www.ietf.org/rfc/rfc1928.txt\">RFC1928: SOCKS Protocol\n+ *      Version 5</a>\n+ */\n bool Socks5(const std::string& strDest, int port, const ProxyCredentials* auth, const Sock& socket);\n \n #endif // BITCOIN_NETBASE_H"
      }
    ]
  },
  {
    "sha": "8348a3742b938a1f3a24ee73ef8261931f93c7ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzQ4YTM3NDJiOTM4YTFmM2EyNGVlNzNlZjgyNjE5MzFmOTNjN2Zm",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-15T15:54:42Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-15T15:57:48Z"
      },
      "message": "net: fix hSocket param in netbase.h::ConnectSocketDirectly()",
      "tree": {
        "sha": "308578b4d2f81ebbedf068a56379911015ae4bd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/308578b4d2f81ebbedf068a56379911015ae4bd8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8348a3742b938a1f3a24ee73ef8261931f93c7ff",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmBPhAwACgkQT1chs9Dj\nkh1HsQ/7BkD3dyXKRsjaVwUxwKWuqCcMGhZkmjnHK/yNyimprXxGLaYw+vZlGQSt\n1NqwTeKMdLe0dGBmjxRxBwsZoMoed3u49uevrEm5n/CnQxQnjzfJdaEdlbWqdA+7\nNZJgH9aMlht7AA+72kUxtfxNYMiF4eUuy0z0PsqWI0z8mbZ9t4fHXXOGfJLQAT9j\nL5IjgufC3BE7sGviq7DMdNucskrPTGNQeIVuIDRxjs0+/XaX0ngM9jRdaudeO5J9\n/bPAlU/J1KLRvk6kFT2TY6eQtBT+wmZ3VhN2xA9RNq6Qr+7h2x2uz45asmS9c9Gg\nW8JOD8lpFnAzJ7dFpG2SQi6SQeI//trGabPv5MlYKX0pUVjJsqKgRzW9lGx+oubi\nww9AFBbsZBQ9ehfdEsO0WJyW1EH2mLqO5D/42oTSBMFnNL3ENv8cVTzpP2KZKuxF\nn/uTbTt2mK4joYAdSzWcbl8OMF6KECTx1C5hZVw5FMnpf3GEyfbLf4iTcJmyBlPI\n5WyR2CXFMtci6IYPkDF1CjK1AL21xysGQTpqlxC++dMaHZFaQGNoXxG1rm9c219t\naWq0VDfTCWSbIo8uFw3WAo+VMrSvdQM/6zXps+UiyCZgu6c7zsvmhHMoQQHwJiUw\nTWNddjEq8JEmxs8YG/OqR5/Wl2RbY1x93llxb1SjcO5lJb3Hy08=\n=4Hm0\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIKAKTgVSX3oaHLls6Ncsnk2jIXkMG9DbvcO4P0QbFfTGCP/wEB0Nx0zQC1Tf\nDiKb5HMvT/YI8CCGJcTC2X0zZtv1OTNv7Z1YkqCG6ZMZeNoktM0ew564EgjxBGBP\nhA7wCNXAP1GDqmE0AIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQemFVRA4BdAZ8vwi8LJfLPwjxBGBPhA7wCLF9\nDRPBXjqPAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRhbGxheHku\nY29t//AQjmiAVXVrtdbcFNJKeAKduwjwINSTuLTJxE2F9+FTRUg/PHujifbb6i3T\nHQzsAdP9u1MCCPAgABbwD7VwPROBdznLQLIOJWx+Bk/xidnNuZQqy/THaYsI8CDS\nZCJB9JXZF82a591L8rzfFECpC/mOR/MzgeTsAb+PLgjxBGBPdjjwCPvziIZOxvje\nAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0eXdhbGwu\nY29t8BDZPMHrQm/HBkxwwv7GHH9uCPAg9nliIghwXHxblOVWfhqcGYBBAj2NXt/z\nVJuVLns+0hYI8CDcNbYqIN2fdvd4ob57HbH5MvNNDktU7wMBBh07qJuHJwjxBGBP\nhA3wCKWdaRdoZQncAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRh\nci5vcGVudGltZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 308578b4d2f81ebbedf068a56379911015ae4bd8\nparent e6bd74b2e5f7f68614ca77a6667520b39feb9247\nauthor Jon Atack <jon@atack.com> 1615823682 +0100\ncommitter Jon Atack <jon@atack.com> 1615823868 +0100\n\nnet: fix hSocket param in netbase.h::ConnectSocketDirectly()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8348a3742b938a1f3a24ee73ef8261931f93c7ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8348a3742b938a1f3a24ee73ef8261931f93c7ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8348a3742b938a1f3a24ee73ef8261931f93c7ff/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6bd74b2e5f7f68614ca77a6667520b39feb9247",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6bd74b2e5f7f68614ca77a6667520b39feb9247",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6bd74b2e5f7f68614ca77a6667520b39feb9247"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e98a21ce1f251ee6c731205fc69a9eba774287e8",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8348a3742b938a1f3a24ee73ef8261931f93c7ff/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8348a3742b938a1f3a24ee73ef8261931f93c7ff/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=8348a3742b938a1f3a24ee73ef8261931f93c7ff",
        "patch": "@@ -202,7 +202,7 @@ extern std::function<std::unique_ptr<Sock>(const CService&)> CreateSock;\n  *\n  * @returns Whether or not a connection was successfully made.\n  */\n-bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocketRet, int nTimeout, bool manual_connection);\n+bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocket, int nTimeout, bool manual_connection);\n \n /**\n  * Connect to a specified destination service through a SOCKS5 proxy by first"
      }
    ]
  }
]