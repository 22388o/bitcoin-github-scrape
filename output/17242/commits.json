[
  {
    "sha": "0a433fc876d82df1005f175c1254fff62f0f36f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTQzM2ZjODc2ZDgyZGYxMDA1ZjE3NWMxMjU0ZmZmNjJmMGYzNmY4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-10-24T17:14:03Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-10-24T17:14:03Z"
      },
      "message": "[validation] Remove unused cacheSigStore from CheckInputsFromMempoolAndCache\n\nCheckInputsFromMempoolAndCache() is only called in one place, and\ncacheSigStore is set to true in that call site. Remove the argument\nentirely.\n\nAlso improve commenting.",
      "tree": {
        "sha": "2843e871c451c20dbb5b15e33efac66ff2522ed8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2843e871c451c20dbb5b15e33efac66ff2522ed8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a433fc876d82df1005f175c1254fff62f0f36f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a433fc876d82df1005f175c1254fff62f0f36f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a433fc876d82df1005f175c1254fff62f0f36f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a433fc876d82df1005f175c1254fff62f0f36f8/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7134ead84e3b824688f0ba195d5dc461a0491e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7134ead84e3b824688f0ba195d5dc461a0491e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7134ead84e3b824688f0ba195d5dc461a0491e6"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "29747befe6deeca413225145308e1d48438f3233",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a433fc876d82df1005f175c1254fff62f0f36f8/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a433fc876d82df1005f175c1254fff62f0f36f8/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0a433fc876d82df1005f175c1254fff62f0f36f8",
        "patch": "@@ -392,7 +392,7 @@ static void UpdateMempoolForReorg(DisconnectedBlockTransactions& disconnectpool,\n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n // were somehow broken and returning the wrong scriptPubKeys\n static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, bool cacheSigStore, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     AssertLockHeld(cs_main);\n \n     // pool.cs should be locked already, but go ahead and re-take the lock here\n@@ -422,7 +422,8 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationSt\n         }\n     }\n \n-    return CheckInputs(tx, state, view, flags, cacheSigStore, true, txdata);\n+    // Call CheckInputs() to cache signature and script validity against current tip consensus rules.\n+    return CheckInputs(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n namespace {\n@@ -959,7 +960,7 @@ bool MemPoolAccept::ConsensusScriptChecks(ATMPArgs& args, Workspace& ws, Precomp\n     // invalid blocks (using TestBlockValidity), however allowing such\n     // transactions into the mempool can be exploited as a DoS attack.\n     unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(::ChainActive().Tip(), chainparams.GetConsensus());\n-    if (!CheckInputsFromMempoolAndCache(tx, state, m_view, m_pool, currentBlockScriptVerifyFlags, true, txdata)) {\n+    if (!CheckInputsFromMempoolAndCache(tx, state, m_view, m_pool, currentBlockScriptVerifyFlags, txdata)) {\n         return error(\"%s: BUG! PLEASE REPORT THIS! CheckInputs failed against latest-block but not STANDARD flags %s, %s\",\n                 __func__, hash.ToString(), FormatStateMessage(state));\n     }"
      }
    ]
  }
]