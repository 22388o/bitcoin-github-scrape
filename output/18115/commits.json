[
  {
    "sha": "2c52b59d0a44a86d94fee4e437978d822862c542",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzUyYjU5ZDBhNDRhODZkOTRmZWU0ZTQzNzk3OGQ4MjI4NjJjNTQy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T00:19:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-08T16:26:27Z"
      },
      "message": "Refactor rawtransaction's SignTransaction into generic SignTransaction function",
      "tree": {
        "sha": "a878b9ed1aec863695990b863868417b27c4e955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a878b9ed1aec863695990b863868417b27c4e955"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c52b59d0a44a86d94fee4e437978d822862c542",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c52b59d0a44a86d94fee4e437978d822862c542",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c52b59d0a44a86d94fee4e437978d822862c542",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c52b59d0a44a86d94fee4e437978d822862c542/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e12a61044b15e4e29ac786135a9ebb72d1bfc61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e12a61044b15e4e29ac786135a9ebb72d1bfc61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e12a61044b15e4e29ac786135a9ebb72d1bfc61"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 68,
      "deletions": 42
    },
    "files": [
      {
        "sha": "54baec6c6faebadc6afb7e85a41e476333993425",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 42,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c52b59d0a44a86d94fee4e437978d822862c542/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c52b59d0a44a86d94fee4e437978d822862c542/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=2c52b59d0a44a86d94fee4e437978d822862c542",
        "patch": "@@ -272,55 +272,27 @@ void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n {\n     int nHashType = ParseSighashString(hashType);\n \n-    bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n-\n     // Script verification errors\n-    UniValue vErrors(UniValue::VARR);\n-\n-    // Use CTransaction for the constant parts of the\n-    // transaction to avoid rehashing.\n-    const CTransaction txConst(mtx);\n-    // Sign what we can:\n-    for (unsigned int i = 0; i < mtx.vin.size(); i++) {\n-        CTxIn& txin = mtx.vin[i];\n-        auto coin = coins.find(txin.prevout);\n-        if (coin == coins.end() || coin->second.IsSpent()) {\n-            TxInErrorToJSON(txin, vErrors, \"Input not found or already spent\");\n-            continue;\n-        }\n-        const CScript& prevPubKey = coin->second.out.scriptPubKey;\n-        const CAmount& amount = coin->second.out.nValue;\n-\n-        SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n-        // Only sign SIGHASH_SINGLE if there's a corresponding output:\n-        if (!fHashSingle || (i < mtx.vout.size())) {\n-            ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, nHashType), prevPubKey, sigdata);\n-        }\n-\n-        UpdateInput(txin, sigdata);\n+    std::map<int, std::string> input_errors;\n \n-        // amount must be specified for valid segwit signature\n-        if (amount == MAX_MONEY && !txin.scriptWitness.IsNull()) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing amount for %s\", coin->second.out.ToString()));\n-        }\n+    bool complete = SignTransaction(mtx, keystore, coins, nHashType, input_errors);\n+    SignTransactionResultToJSON(mtx, complete, coins, input_errors, result);\n+}\n \n-        ScriptError serror = SCRIPT_ERR_OK;\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {\n-            if (serror == SCRIPT_ERR_INVALID_STACK_OPERATION) {\n-                // Unable to sign input and verification failed (possible attempt to partially sign).\n-                TxInErrorToJSON(txin, vErrors, \"Unable to sign input, invalid stack size (possibly missing key)\");\n-            } else if (serror == SCRIPT_ERR_SIG_NULLFAIL) {\n-                // Verification failed (possibly due to insufficient signatures).\n-                TxInErrorToJSON(txin, vErrors, \"CHECK(MULTI)SIG failing with non-zero signature (possibly need more signatures)\");\n-            } else {\n-                TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n-            }\n+void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, std::map<int, std::string>& input_errors, UniValue& result)\n+{\n+    // Make errors UniValue\n+    UniValue vErrors(UniValue::VARR);\n+    for (const auto& err_pair : input_errors) {\n+        if (err_pair.second == \"Missing amount\") {\n+            // This particular error needs to be an exception for some reason\n+            throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing amount for %s\", coins.at(mtx.vin.at(err_pair.first).prevout).out.ToString()));\n         }\n+        TxInErrorToJSON(mtx.vin.at(err_pair.first), vErrors, err_pair.second);\n     }\n-    bool fComplete = vErrors.empty();\n \n     result.pushKV(\"hex\", EncodeHexTx(CTransaction(mtx)));\n-    result.pushKV(\"complete\", fComplete);\n+    result.pushKV(\"complete\", complete);\n     if (!vErrors.empty()) {\n         if (result.exists(\"errors\")) {\n             vErrors.push_backV(result[\"errors\"].getValues());"
      },
      {
        "sha": "436db5dc6070781c1ca32d4556441ea829751945",
        "filename": "src/rpc/rawtransaction_util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c52b59d0a44a86d94fee4e437978d822862c542/src/rpc/rawtransaction_util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c52b59d0a44a86d94fee4e437978d822862c542/src/rpc/rawtransaction_util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.h?ref=2c52b59d0a44a86d94fee4e437978d822862c542",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_RPC_RAWTRANSACTION_UTIL_H\n \n #include <map>\n+#include <string>\n \n class FillableSigningProvider;\n class UniValue;\n@@ -24,6 +25,7 @@ class SigningProvider;\n  * @param result         JSON object where signed transaction results accumulate\n  */\n void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, const UniValue& hashType, UniValue& result);\n+void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, std::map<int, std::string>& input_errors, UniValue& result);\n \n /**\n   * Parse a prevtxs UniValue array and get the map of coins from it"
      },
      {
        "sha": "a8abd347daa15d08179cf4a2e5bcf264b2c4529b",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c52b59d0a44a86d94fee4e437978d822862c542/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c52b59d0a44a86d94fee4e437978d822862c542/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=2c52b59d0a44a86d94fee4e437978d822862c542",
        "patch": "@@ -465,3 +465,51 @@ bool IsSegWitOutput(const SigningProvider& provider, const CScript& script)\n     }\n     return false;\n }\n+\n+bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, int nHashType, std::map<int, std::string>& input_errors)\n+{\n+    bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n+\n+    // Use CTransaction for the constant parts of the\n+    // transaction to avoid rehashing.\n+    const CTransaction txConst(mtx);\n+    // Sign what we can:\n+    for (unsigned int i = 0; i < mtx.vin.size(); i++) {\n+        CTxIn& txin = mtx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n+        }\n+        const CScript& prevPubKey = coin->second.out.scriptPubKey;\n+        const CAmount& amount = coin->second.out.nValue;\n+\n+        SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n+        // Only sign SIGHASH_SINGLE if there's a corresponding output:\n+        if (!fHashSingle || (i < mtx.vout.size())) {\n+            ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, nHashType), prevPubKey, sigdata);\n+        }\n+\n+        UpdateInput(txin, sigdata);\n+\n+        // amount must be specified for valid segwit signature\n+        if (amount == MAX_MONEY && !txin.scriptWitness.IsNull()) {\n+            input_errors[i] = \"Missing amount\";\n+            continue;\n+        }\n+\n+        ScriptError serror = SCRIPT_ERR_OK;\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {\n+            if (serror == SCRIPT_ERR_INVALID_STACK_OPERATION) {\n+                // Unable to sign input and verification failed (possible attempt to partially sign).\n+                input_errors[i] = \"Unable to sign input, invalid stack size (possibly missing key)\";\n+            } else if (serror == SCRIPT_ERR_SIG_NULLFAIL) {\n+                // Verification failed (possibly due to insufficient signatures).\n+                input_errors[i] = \"CHECK(MULTI)SIG failing with non-zero signature (possibly need more signatures)\";\n+            } else {\n+                input_errors[i] = ScriptErrorString(serror);\n+            }\n+        }\n+    }\n+    return input_errors.empty();\n+}"
      },
      {
        "sha": "f03af0713fb62aa581ea49471117608234ff405a",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c52b59d0a44a86d94fee4e437978d822862c542/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c52b59d0a44a86d94fee4e437978d822862c542/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=2c52b59d0a44a86d94fee4e437978d822862c542",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_SCRIPT_SIGN_H\n #define BITCOIN_SCRIPT_SIGN_H\n \n+#include <coins.h>\n #include <hash.h>\n #include <pubkey.h>\n #include <script/interpreter.h>\n@@ -168,4 +169,7 @@ bool IsSolvable(const SigningProvider& provider, const CScript& script);\n /** Check whether a scriptPubKey is known to be segwit. */\n bool IsSegWitOutput(const SigningProvider& provider, const CScript& script);\n \n+/** Sign the CMutableTransaction */\n+bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* provider, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors);\n+\n #endif // BITCOIN_SCRIPT_SIGN_H"
      }
    ]
  },
  {
    "sha": "d999dd588cab0ff479bc7bee8c9fc33880265ec6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTk5ZGQ1ODhjYWIwZmY0NzliYzdiZWU4YzlmYzMzODgwMjY1ZWM2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T00:49:31Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-08T16:26:32Z"
      },
      "message": "Add SignTransaction function to ScriptPubKeyMan and LegacyScriptPubKeyMan",
      "tree": {
        "sha": "661ee9f6b871d1e8b3ec1c46a80d60f9b06d3880",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/661ee9f6b871d1e8b3ec1c46a80d60f9b06d3880"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d999dd588cab0ff479bc7bee8c9fc33880265ec6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d999dd588cab0ff479bc7bee8c9fc33880265ec6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d999dd588cab0ff479bc7bee8c9fc33880265ec6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d999dd588cab0ff479bc7bee8c9fc33880265ec6/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c52b59d0a44a86d94fee4e437978d822862c542",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c52b59d0a44a86d94fee4e437978d822862c542",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c52b59d0a44a86d94fee4e437978d822862c542"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b110275654a00fa0655cd4c171c2e1e1142067ae",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d999dd588cab0ff479bc7bee8c9fc33880265ec6/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d999dd588cab0ff479bc7bee8c9fc33880265ec6/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=d999dd588cab0ff479bc7bee8c9fc33880265ec6",
        "patch": "@@ -5,6 +5,7 @@\n #include <key_io.h>\n #include <outputtype.h>\n #include <script/descriptor.h>\n+#include <script/sign.h>\n #include <util/bip32.h>\n #include <util/strencodings.h>\n #include <util/translation.h>\n@@ -505,6 +506,11 @@ bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sig\n     }\n }\n \n+bool LegacyScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    return ::SignTransaction(tx, this, coins, sighash, input_errors);\n+}\n+\n const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n {\n     LOCK(cs_KeyStore);"
      },
      {
        "sha": "df4ea3ad7b78b8e4379b74df68bd3ca0421c1ac1",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d999dd588cab0ff479bc7bee8c9fc33880265ec6/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d999dd588cab0ff479bc7bee8c9fc33880265ec6/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=d999dd588cab0ff479bc7bee8c9fc33880265ec6",
        "patch": "@@ -210,6 +210,9 @@ class ScriptPubKeyMan\n       */\n     virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n \n+    /** Creates new signatures and adds them to the transaction. Returns whether all inputs were signed */\n+    virtual bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const { return false; }\n+\n     virtual uint256 GetID() const { return uint256(); }\n \n     /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n@@ -350,6 +353,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n \n+    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const override;\n+\n     uint256 GetID() const override;\n \n     // Map from Key ID to key metadata."
      }
    ]
  },
  {
    "sha": "f37de927442d3f024926a66c436d59e391c8696a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzdkZTkyNzQ0MmQzZjAyNDkyNmE2NmM0MzZkNTllMzkxYzg2OTZh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T00:49:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-08T16:26:32Z"
      },
      "message": "Implement CWallet::SignTransaction using ScriptPubKeyMan::SignTransaction",
      "tree": {
        "sha": "dfabaf31b2b9a462d8e47fe53faf1706e4511124",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfabaf31b2b9a462d8e47fe53faf1706e4511124"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f37de927442d3f024926a66c436d59e391c8696a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f37de927442d3f024926a66c436d59e391c8696a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f37de927442d3f024926a66c436d59e391c8696a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f37de927442d3f024926a66c436d59e391c8696a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d999dd588cab0ff479bc7bee8c9fc33880265ec6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d999dd588cab0ff479bc7bee8c9fc33880265ec6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d999dd588cab0ff479bc7bee8c9fc33880265ec6"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 70,
      "deletions": 16
    },
    "files": [
      {
        "sha": "d25fba8bb6d2f38530f843d7275ec034257fdf99",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 15,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f37de927442d3f024926a66c436d59e391c8696a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f37de927442d3f024926a66c436d59e391c8696a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f37de927442d3f024926a66c436d59e391c8696a",
        "patch": "@@ -2410,34 +2410,71 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx) const\n {\n     AssertLockHeld(cs_wallet);\n \n-    // sign the new tx\n-    int nIn = 0;\n+    // Build coins map\n+    std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n+        const CWalletTx& wtx = mi->second;\n+        coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n+    }\n+    std::map<int, std::string> input_errors;\n+    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+}\n+\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    // Sign the tx with ScriptPubKeyMans\n+    // Because each ScriptPubKeyMan can sign more than one input, we need to keep track of each ScriptPubKeyMan that has signed this transaction.\n+    // Each iteration, we may sign more txins than the txin that is specified in that iteration.\n+    // We assume that each input is signed by only one ScriptPubKeyMan.\n+    std::set<uint256> visited_spk_mans;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        // Get the prevout\n+        CTxIn& txin = tx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n+        }\n \n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-        if (!provider) {\n-            // We don't know about this scriptpbuKey;\n-            return false;\n+        // Check if this input is complete\n+        SignatureData sigdata = DataFromTransaction(tx, i, coin->second.out);\n+        if (sigdata.complete) {\n+            continue;\n         }\n \n-        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            return false;\n+        // Input needs to be signed, find the right ScriptPubKeyMan\n+        std::set<ScriptPubKeyMan*> spk_mans = GetScriptPubKeyMans(coin->second.out.scriptPubKey, sigdata);\n+        if (spk_mans.size() == 0) {\n+            input_errors[i] = \"Unable to sign input, missing keys\";\n+            continue;\n+        }\n+\n+        for (auto& spk_man : spk_mans) {\n+            // If we've already been signed by this spk_man, skip it\n+            if (visited_spk_mans.count(spk_man->GetID()) > 0) {\n+                continue;\n+            }\n+\n+            // Sign the tx.\n+            // spk_man->SignTransaction will return true if the transaction is complete,\n+            // so we can exit early and return true if that happens.\n+            if (spk_man->SignTransaction(tx, coins, sighash, input_errors)) {\n+                return true;\n+            }\n+\n+            // Add this spk_man to visited_spk_mans so we can skip it later\n+            visited_spk_mans.insert(spk_man->GetID());\n         }\n-        UpdateInput(input, sigdata);\n-        nIn++;\n     }\n-    return true;\n+    return false;\n }\n \n bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl coinControl)\n@@ -4155,6 +4192,17 @@ ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const OutputType& type, bool intern\n     return it->second;\n }\n \n+std::set<ScriptPubKeyMan*> CWallet::GetScriptPubKeyMans(const CScript& script, SignatureData& sigdata) const\n+{\n+    std::set<ScriptPubKeyMan*> spk_mans;\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        if (spk_man_pair.second->CanProvide(script, sigdata)) {\n+            spk_mans.insert(spk_man_pair.second.get());\n+        }\n+    }\n+    return spk_mans;\n+}\n+\n ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const CScript& script) const\n {\n     SignatureData sigdata;"
      },
      {
        "sha": "10380e4e585f802233cd95fc082bad1e8b267b9d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f37de927442d3f024926a66c436d59e391c8696a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f37de927442d3f024926a66c436d59e391c8696a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f37de927442d3f024926a66c436d59e391c8696a",
        "patch": "@@ -916,7 +916,10 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n      * calling CreateTransaction();\n      */\n     bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl);\n-    bool SignTransaction(CMutableTransaction& tx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    // Fetch the inputs and sign with SIGHASH_ALL.\n+    bool SignTransaction(CMutableTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    // Sign the tx given the input coins and sighash.\n+    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const;\n \n     /**\n      * Create a new transaction paying the recipients with a set of coins\n@@ -1153,6 +1156,9 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     //! Get the ScriptPubKeyMan by id\n     ScriptPubKeyMan* GetScriptPubKeyMan(const uint256& id) const;\n \n+    //! Get all of the ScriptPubKeyMans for a script given additional information in sigdata (populated by e.g. a psbt)\n+    std::set<ScriptPubKeyMan*> GetScriptPubKeyMans(const CScript& script, SignatureData& sigdata) const;\n+\n     //! Get the SigningProvider for a script\n     std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const;\n     std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script, SignatureData& sigdata) const;"
      }
    ]
  },
  {
    "sha": "a4af324d15c1ee43c2abd11a304ae18c7ee82eb0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGFmMzI0ZDE1YzFlZTQzYzJhYmQxMWEzMDRhZTE4YzdlZTgyZWIw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T00:50:52Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-08T16:27:05Z"
      },
      "message": "Use CWallet::SignTransaction in CreateTransaction and signrawtransactionwithwallet\n\nInstead of duplicating signing code, just use the function we already\nhave.",
      "tree": {
        "sha": "594206fa804e9004ab10ba0085df99dea9763841",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/594206fa804e9004ab10ba0085df99dea9763841"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4af324d15c1ee43c2abd11a304ae18c7ee82eb0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4af324d15c1ee43c2abd11a304ae18c7ee82eb0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4af324d15c1ee43c2abd11a304ae18c7ee82eb0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4af324d15c1ee43c2abd11a304ae18c7ee82eb0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f37de927442d3f024926a66c436d59e391c8696a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f37de927442d3f024926a66c436d59e391c8696a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f37de927442d3f024926a66c436d59e391c8696a"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 10,
      "deletions": 34
    },
    "files": [
      {
        "sha": "03e2d5b1c05ce8955ab3e28bda99b6ea4d309701",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 15,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4af324d15c1ee43c2abd11a304ae18c7ee82eb0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4af324d15c1ee43c2abd11a304ae18c7ee82eb0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a4af324d15c1ee43c2abd11a304ae18c7ee82eb0",
        "patch": "@@ -3329,23 +3329,15 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n     // Parse the prevtxs array\n     ParsePrevouts(request.params[1], nullptr, coins);\n \n-    std::set<std::shared_ptr<SigningProvider>> providers;\n-    for (const std::pair<COutPoint, Coin> coin_pair : coins) {\n-        std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(coin_pair.second.out.scriptPubKey);\n-        if (provider) {\n-            providers.insert(std::move(provider));\n-        }\n-    }\n-    if (providers.size() == 0) {\n-        // When there are no available providers, use a dummy SigningProvider so we can check if the tx is complete\n-        providers.insert(std::make_shared<SigningProvider>());\n-    }\n+    int nHashType = ParseSighashString(request.params[2]);\n \n+    // Script verification errors\n+    std::map<int, std::string> input_errors;\n+\n+    bool complete = pwallet->SignTransaction(mtx, coins, nHashType, input_errors);\n     UniValue result(UniValue::VOBJ);\n-    for (std::shared_ptr<SigningProvider> provider : providers) {\n-        SignTransaction(mtx, provider.get(), coins, request.params[2], result);\n-    }\n-     return result;\n+    SignTransactionResultToJSON(mtx, complete, coins, input_errors, result);\n+    return result;\n }\n \n static UniValue bumpfee(const JSONRPCRequest& request)"
      },
      {
        "sha": "a120354580ad5da771b94d96423cfd717b7c13e8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 19,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4af324d15c1ee43c2abd11a304ae18c7ee82eb0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4af324d15c1ee43c2abd11a304ae18c7ee82eb0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a4af324d15c1ee43c2abd11a304ae18c7ee82eb0",
        "patch": "@@ -2923,25 +2923,9 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n             txNew.vin.push_back(CTxIn(coin.outpoint, CScript(), nSequence));\n         }\n \n-        if (sign)\n-        {\n-            int nIn = 0;\n-            for (const auto& coin : selected_coins)\n-            {\n-                const CScript& scriptPubKey = coin.txout.scriptPubKey;\n-                SignatureData sigdata;\n-\n-                std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-                if (!provider || !ProduceSignature(*provider, MutableTransactionSignatureCreator(&txNew, nIn, coin.txout.nValue, SIGHASH_ALL), scriptPubKey, sigdata))\n-                {\n-                    strFailReason = _(\"Signing transaction failed\").translated;\n-                    return false;\n-                } else {\n-                    UpdateInput(txNew.vin.at(nIn), sigdata);\n-                }\n-\n-                nIn++;\n-            }\n+        if (sign && !SignTransaction(txNew)) {\n+            strFailReason = _(\"Signing transaction failed\").translated;\n+            return false;\n         }\n \n         // Return the constructed transaction data."
      }
    ]
  },
  {
    "sha": "3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDcwZGQ5OWY5Zjc0ZWVmNzBiMTlmZjZmNmY4NTBhZGMwZDVlZjhm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T00:50:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-09T15:16:17Z"
      },
      "message": "Move FillPSBT to be a member of CWallet",
      "tree": {
        "sha": "4a4f77dfab8fa0209237a259293ccc545c2f5037",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a4f77dfab8fa0209237a259293ccc545c2f5037"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4af324d15c1ee43c2abd11a304ae18c7ee82eb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4af324d15c1ee43c2abd11a304ae18c7ee82eb0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4af324d15c1ee43c2abd11a304ae18c7ee82eb0"
      }
    ],
    "stats": {
      "total": 221,
      "additions": 99,
      "deletions": 122
    },
    "files": [
      {
        "sha": "6fc6d5b5a3d3556cfb1d31b0d2d0ec4564185c94",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f",
        "patch": "@@ -241,7 +241,6 @@ BITCOIN_CORE_H = \\\n   wallet/fees.h \\\n   wallet/ismine.h \\\n   wallet/load.h \\\n-  wallet/psbtwallet.h \\\n   wallet/rpcwallet.h \\\n   wallet/scriptpubkeyman.h \\\n   wallet/wallet.h \\\n@@ -349,7 +348,6 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/feebumper.cpp \\\n   wallet/fees.cpp \\\n   wallet/load.cpp \\\n-  wallet/psbtwallet.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/scriptpubkeyman.cpp \\"
      },
      {
        "sha": "83ce9aba7406c735d215f89a46f9670e90a477d5",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f",
        "patch": "@@ -19,7 +19,6 @@\n #include <wallet/fees.h>\n #include <wallet/ismine.h>\n #include <wallet/load.h>\n-#include <wallet/psbtwallet.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n \n@@ -361,9 +360,9 @@ class WalletImpl : public Wallet\n         bool& complete,\n         int sighash_type = 1 /* SIGHASH_ALL */,\n         bool sign = true,\n-        bool bip32derivs = false) override\n+        bool bip32derivs = false) const override\n     {\n-        return FillPSBT(m_wallet.get(), psbtx, complete, sighash_type, sign, bip32derivs);\n+        return m_wallet->FillPSBT(psbtx, complete, sighash_type, sign, bip32derivs);\n     }\n     WalletBalances getBalances() override\n     {"
      },
      {
        "sha": "964608ff8276a1a19001c039d6ef1f48be874d88",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f",
        "patch": "@@ -196,7 +196,7 @@ class Wallet\n         bool& complete,\n         int sighash_type = 1 /* SIGHASH_ALL */,\n         bool sign = true,\n-        bool bip32derivs = false) = 0;\n+        bool bip32derivs = false) const = 0;\n \n     //! Get balances.\n     virtual WalletBalances getBalances() = 0;"
      },
      {
        "sha": "4ddee513a1b6872dba8584a2ae8b5e36361bbe2b",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f",
        "patch": "@@ -26,7 +26,6 @@\n #include <ui_interface.h>\n #include <wallet/coincontrol.h>\n #include <wallet/fees.h>\n-#include <wallet/psbtwallet.h>\n #include <wallet/wallet.h>\n \n #include <QFontMetrics>"
      },
      {
        "sha": "d995fb06d498f52982a6b25fa9f96ea4aba7f990",
        "filename": "src/wallet/psbtwallet.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 77,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4af324d15c1ee43c2abd11a304ae18c7ee82eb0/src/wallet/psbtwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4af324d15c1ee43c2abd11a304ae18c7ee82eb0/src/wallet/psbtwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.cpp?ref=a4af324d15c1ee43c2abd11a304ae18c7ee82eb0",
        "patch": "@@ -1,77 +0,0 @@\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <wallet/psbtwallet.h>\n-\n-TransactionError FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, bool& complete, int sighash_type, bool sign, bool bip32derivs)\n-{\n-    LOCK(pwallet->cs_wallet);\n-    // Get all of the previous transactions\n-    complete = true;\n-    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        const CTxIn& txin = psbtx.tx->vin[i];\n-        PSBTInput& input = psbtx.inputs.at(i);\n-\n-        if (PSBTInputSigned(input)) {\n-            continue;\n-        }\n-\n-        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n-        if (!input.IsSane()) {\n-            return TransactionError::INVALID_PSBT;\n-        }\n-\n-        // If we have no utxo, grab it from the wallet.\n-        if (!input.non_witness_utxo && input.witness_utxo.IsNull()) {\n-            const uint256& txhash = txin.prevout.hash;\n-            const auto it = pwallet->mapWallet.find(txhash);\n-            if (it != pwallet->mapWallet.end()) {\n-                const CWalletTx& wtx = it->second;\n-                // We only need the non_witness_utxo, which is a superset of the witness_utxo.\n-                //   The signing code will switch to the smaller witness_utxo if this is ok.\n-                input.non_witness_utxo = wtx.tx;\n-            }\n-        }\n-\n-        // Get the Sighash type\n-        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n-            return TransactionError::SIGHASH_MISMATCH;\n-        }\n-\n-        // Get the scriptPubKey to know which SigningProvider to use\n-        CScript script;\n-        if (!input.witness_utxo.IsNull()) {\n-            script = input.witness_utxo.scriptPubKey;\n-        } else if (input.non_witness_utxo) {\n-            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n-                return TransactionError::MISSING_INPUTS;\n-            }\n-            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n-        } else {\n-            // There's no UTXO so we can just skip this now\n-            complete = false;\n-            continue;\n-        }\n-        SignatureData sigdata;\n-        input.FillSignatureData(sigdata);\n-        std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(script, sigdata);\n-        if (!provider) {\n-            complete = false;\n-            continue;\n-        }\n-\n-        complete &= SignPSBTInput(HidingSigningProvider(provider.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n-    }\n-\n-    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n-    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n-        const CTxOut& out = psbtx.tx->vout.at(i);\n-        std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(out.scriptPubKey);\n-        if (provider) {\n-            UpdatePSBTOutput(HidingSigningProvider(provider.get(), true, !bip32derivs), psbtx, i);\n-        }\n-    }\n-\n-    return TransactionError::OK;\n-}"
      },
      {
        "sha": "8285bb901c569ff3e072fdb1fa3d2a9d5c4d5832",
        "filename": "src/wallet/psbtwallet.h",
        "status": "removed",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4af324d15c1ee43c2abd11a304ae18c7ee82eb0/src/wallet/psbtwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4af324d15c1ee43c2abd11a304ae18c7ee82eb0/src/wallet/psbtwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.h?ref=a4af324d15c1ee43c2abd11a304ae18c7ee82eb0",
        "patch": "@@ -1,32 +0,0 @@\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_WALLET_PSBTWALLET_H\n-#define BITCOIN_WALLET_PSBTWALLET_H\n-\n-#include <psbt.h>\n-#include <wallet/wallet.h>\n-\n-/**\n- * Fills out a PSBT with information from the wallet. Fills in UTXOs if we have\n- * them. Tries to sign if sign=true. Sets `complete` if the PSBT is now complete\n- * (i.e. has all required signatures or signature-parts, and is ready to\n- * finalize.) Sets `error` and returns false if something goes wrong.\n- *\n- * @param[in]  pwallet pointer to a wallet\n- * @param[in]  psbtx PartiallySignedTransaction to fill in\n- * @param[out] complete indicates whether the PSBT is now complete\n- * @param[in]  sighash_type the sighash type to use when signing (if PSBT does not specify)\n- * @param[in]  sign whether to sign or not\n- * @param[in]  bip32derivs whether to fill in bip32 derivation information if available\n- * return error\n- */\n-NODISCARD TransactionError FillPSBT(const CWallet* pwallet,\n-              PartiallySignedTransaction& psbtx,\n-              bool& complete,\n-              int sighash_type = 1 /* SIGHASH_ALL */,\n-              bool sign = true,\n-              bool bip32derivs = true);\n-\n-#endif // BITCOIN_WALLET_PSBTWALLET_H"
      },
      {
        "sha": "760bc1c408ae880006c89f83df0a7558768515a1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f",
        "patch": "@@ -27,7 +27,6 @@\n #include <util/vector.h>\n #include <wallet/coincontrol.h>\n #include <wallet/feebumper.h>\n-#include <wallet/psbtwallet.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n@@ -3516,7 +3515,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     } else {\n         PartiallySignedTransaction psbtx(mtx);\n         bool complete = false;\n-        const TransactionError err = FillPSBT(pwallet, psbtx, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */);\n+        const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */);\n         CHECK_NONFATAL(err == TransactionError::OK);\n         CHECK_NONFATAL(!complete);\n         CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n@@ -4133,7 +4132,7 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n     bool sign = request.params[1].isNull() ? true : request.params[1].get_bool();\n     bool bip32derivs = request.params[3].isNull() ? true : request.params[3].get_bool();\n     bool complete = true;\n-    const TransactionError err = FillPSBT(pwallet, psbtx, complete, nHashType, sign, bip32derivs);\n+    const TransactionError err = pwallet->FillPSBT(psbtx, complete, nHashType, sign, bip32derivs);\n     if (err != TransactionError::OK) {\n         throw JSONRPCTransactionError(err);\n     }\n@@ -4256,7 +4255,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     // Fill transaction with out data but don't sign\n     bool bip32derivs = request.params[4].isNull() ? true : request.params[4].get_bool();\n     bool complete = true;\n-    const TransactionError err = FillPSBT(pwallet, psbtx, complete, 1, false, bip32derivs);\n+    const TransactionError err = pwallet->FillPSBT(psbtx, complete, 1, false, bip32derivs);\n     if (err != TransactionError::OK) {\n         throw JSONRPCTransactionError(err);\n     }"
      },
      {
        "sha": "008272a69b060fdb234a74c966fcbeb8fd451056",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f",
        "patch": "@@ -5,7 +5,6 @@\n #include <key_io.h>\n #include <util/bip32.h>\n #include <util/strencodings.h>\n-#include <wallet/psbtwallet.h>\n #include <wallet/wallet.h>\n \n #include <boost/test/unit_test.hpp>\n@@ -61,7 +60,7 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n \n     // Fill transaction with our data\n     bool complete = true;\n-    BOOST_REQUIRE_EQUAL(TransactionError::OK, FillPSBT(&m_wallet, psbtx, complete, SIGHASH_ALL, false, true));\n+    BOOST_REQUIRE_EQUAL(TransactionError::OK, m_wallet.FillPSBT(psbtx, complete, SIGHASH_ALL, false, true));\n \n     // Get the final tx\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "099a79ed64471916394a22fa4348668b104794b9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f",
        "patch": "@@ -2477,6 +2477,78 @@ bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint,\n     return false;\n }\n \n+TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& complete, int sighash_type, bool sign, bool bip32derivs) const\n+{\n+    LOCK(cs_wallet);\n+    // Get all of the previous transactions\n+    complete = true;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            return TransactionError::INVALID_PSBT;\n+        }\n+\n+        // If we have no utxo, grab it from the wallet.\n+        if (!input.non_witness_utxo && input.witness_utxo.IsNull()) {\n+            const uint256& txhash = txin.prevout.hash;\n+            const auto it = mapWallet.find(txhash);\n+            if (it != mapWallet.end()) {\n+                const CWalletTx& wtx = it->second;\n+                // We only need the non_witness_utxo, which is a superset of the witness_utxo.\n+                //   The signing code will switch to the smaller witness_utxo if this is ok.\n+                input.non_witness_utxo = wtx.tx;\n+            }\n+        }\n+\n+        // Get the Sighash type\n+        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+            return TransactionError::SIGHASH_MISMATCH;\n+        }\n+\n+        // Get the scriptPubKey to know which SigningProvider to use\n+        CScript script;\n+        if (!input.witness_utxo.IsNull()) {\n+            script = input.witness_utxo.scriptPubKey;\n+        } else if (input.non_witness_utxo) {\n+            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n+                return TransactionError::MISSING_INPUTS;\n+            }\n+            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n+        } else {\n+            // There's no UTXO so we can just skip this now\n+            complete = false;\n+            continue;\n+        }\n+        SignatureData sigdata;\n+        input.FillSignatureData(sigdata);\n+        std::unique_ptr<SigningProvider> provider = GetSigningProvider(script, sigdata);\n+        if (!provider) {\n+            complete = false;\n+            continue;\n+        }\n+\n+        complete &= SignPSBTInput(HidingSigningProvider(provider.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n+    }\n+\n+    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n+    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+        const CTxOut& out = psbtx.tx->vout.at(i);\n+        std::unique_ptr<SigningProvider> provider = GetSigningProvider(out.scriptPubKey);\n+        if (provider) {\n+            UpdatePSBTOutput(HidingSigningProvider(provider.get(), true, !bip32derivs), psbtx, i);\n+        }\n+    }\n+\n+    return TransactionError::OK;\n+}\n+\n bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl coinControl)\n {\n     std::vector<CRecipient> vecSend;"
      },
      {
        "sha": "15353de4ace73c16facf7d9b26ee224cf28c479d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f",
        "patch": "@@ -11,6 +11,7 @@\n #include <interfaces/handler.h>\n #include <outputtype.h>\n #include <policy/feerate.h>\n+#include <psbt.h>\n #include <tinyformat.h>\n #include <ui_interface.h>\n #include <util/strencodings.h>\n@@ -921,6 +922,25 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     // Sign the tx given the input coins and sighash.\n     bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const;\n \n+    /**\n+     * Fills out a PSBT with information from the wallet. Fills in UTXOs if we have\n+     * them. Tries to sign if sign=true. Sets `complete` if the PSBT is now complete\n+     * (i.e. has all required signatures or signature-parts, and is ready to\n+     * finalize.) Sets `error` and returns false if something goes wrong.\n+     *\n+     * @param[in]  psbtx PartiallySignedTransaction to fill in\n+     * @param[out] complete indicates whether the PSBT is now complete\n+     * @param[in]  sighash_type the sighash type to use when signing (if PSBT does not specify)\n+     * @param[in]  sign whether to sign or not\n+     * @param[in]  bip32derivs whether to fill in bip32 derivation information if available\n+     * return error\n+     */\n+    TransactionError FillPSBT(PartiallySignedTransaction& psbtx,\n+                  bool& complete,\n+                  int sighash_type = 1 /* SIGHASH_ALL */,\n+                  bool sign = true,\n+                  bool bip32derivs = true) const;\n+\n     /**\n      * Create a new transaction paying the recipients with a set of coins\n      * selected by SelectCoins(); Also create the change output, when needed"
      }
    ]
  },
  {
    "sha": "82a30fade70a2a95c2bbeac4aa06dafda600479d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmEzMGZhZGU3MGEyYTk1YzJiYmVhYzRhYTA2ZGFmZGE2MDA0Nzlk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T00:50:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-09T15:16:20Z"
      },
      "message": "Move key and script filling and signing from CWallet::FillPSBT to ScriptPubKeyMan::FillPSBT\n\nInstead of fetching a SigningProvider from ScriptPubKeyMan in order\nto fill and sign the keys and scripts for a PSBT, just pass that\nPSBT to a new FillPSBT function that does all that for us.",
      "tree": {
        "sha": "cc02aef6e3e2821fde11a53a82469db51f5eb3cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc02aef6e3e2821fde11a53a82469db51f5eb3cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82a30fade70a2a95c2bbeac4aa06dafda600479d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82a30fade70a2a95c2bbeac4aa06dafda600479d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82a30fade70a2a95c2bbeac4aa06dafda600479d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82a30fade70a2a95c2bbeac4aa06dafda600479d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d70dd99f9f74eef70b19ff6f6f850adc0d5ef8f"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 82,
      "deletions": 20
    },
    "files": [
      {
        "sha": "cfb8184c3b28d8b710ac84e1008c271236dd66a7",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82a30fade70a2a95c2bbeac4aa06dafda600479d/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82a30fade70a2a95c2bbeac4aa06dafda600479d/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=82a30fade70a2a95c2bbeac4aa06dafda600479d",
        "patch": "@@ -511,6 +511,48 @@ bool LegacyScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::\n     return ::SignTransaction(tx, this, coins, sighash, input_errors);\n }\n \n+TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs) const\n+{\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            return TransactionError::INVALID_PSBT;\n+        }\n+\n+        // Get the Sighash type\n+        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+            return TransactionError::SIGHASH_MISMATCH;\n+        }\n+\n+        // Check non_witness_utxo has specified prevout\n+        if (input.non_witness_utxo) {\n+            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n+                return TransactionError::MISSING_INPUTS;\n+            }\n+        } else if (input.witness_utxo.IsNull()) {\n+            // There's no UTXO so we can just skip this now\n+            continue;\n+        }\n+        SignatureData sigdata;\n+        input.FillSignatureData(sigdata);\n+        SignPSBTInput(HidingSigningProvider(this, !sign, !bip32derivs), psbtx, i, sighash_type);\n+    }\n+\n+    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n+    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+        UpdatePSBTOutput(HidingSigningProvider(this, true, !bip32derivs), psbtx, i);\n+    }\n+\n+    return TransactionError::OK;\n+}\n+\n const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n {\n     LOCK(cs_KeyStore);"
      },
      {
        "sha": "1628001a744c6b3a69376a99c8eee5b6b06980ab",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82a30fade70a2a95c2bbeac4aa06dafda600479d/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82a30fade70a2a95c2bbeac4aa06dafda600479d/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=82a30fade70a2a95c2bbeac4aa06dafda600479d",
        "patch": "@@ -5,8 +5,10 @@\n #ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n #define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n \n+#include <psbt.h>\n #include <script/signingprovider.h>\n #include <script/standard.h>\n+#include <util/error.h>\n #include <wallet/crypter.h>\n #include <wallet/ismine.h>\n #include <wallet/walletdb.h>\n@@ -212,6 +214,8 @@ class ScriptPubKeyMan\n \n     /** Creates new signatures and adds them to the transaction. Returns whether all inputs were signed */\n     virtual bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const { return false; }\n+    /** Adds script and derivation path information to a PSBT, and optionally signs it. */\n+    virtual TransactionError FillPSBT(PartiallySignedTransaction& psbt, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false) const { return TransactionError::INVALID_PSBT; }\n \n     virtual uint256 GetID() const { return uint256(); }\n \n@@ -354,6 +358,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n \n     bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const override;\n+    TransactionError FillPSBT(PartiallySignedTransaction& psbt, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false) const override;\n \n     uint256 GetID() const override;\n "
      },
      {
        "sha": "8b7b7af21d52540bd816fb6d198b712cb13873fb",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82a30fade70a2a95c2bbeac4aa06dafda600479d/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82a30fade70a2a95c2bbeac4aa06dafda600479d/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=82a30fade70a2a95c2bbeac4aa06dafda600479d",
        "patch": "@@ -73,9 +73,7 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n \n     // Try to sign the mutated input\n     SignatureData sigdata;\n-    psbtx.inputs[0].FillSignatureData(sigdata);\n-    const std::unique_ptr<SigningProvider> provider = m_wallet.GetSigningProvider(ws1, sigdata);\n-    BOOST_CHECK(!SignPSBTInput(*provider, psbtx, 0, SIGHASH_ALL));\n+    BOOST_CHECK(spk_man->FillPSBT(psbtx, SIGHASH_ALL, true, true) != TransactionError::OK);\n }\n \n BOOST_AUTO_TEST_CASE(parse_hd_keypath)"
      },
      {
        "sha": "de09e60014fa73e215c6e4de5ad1b11860aaf0b5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 17,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82a30fade70a2a95c2bbeac4aa06dafda600479d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82a30fade70a2a95c2bbeac4aa06dafda600479d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=82a30fade70a2a95c2bbeac4aa06dafda600479d",
        "patch": "@@ -2481,7 +2481,6 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n {\n     LOCK(cs_wallet);\n     // Get all of the previous transactions\n-    complete = true;\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n         const CTxIn& txin = psbtx.tx->vin[i];\n         PSBTInput& input = psbtx.inputs.at(i);\n@@ -2506,13 +2505,22 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n                 input.non_witness_utxo = wtx.tx;\n             }\n         }\n+    }\n+\n+    // Fill in information from ScriptPubKeyMans\n+    // Because each ScriptPubKeyMan may be able to fill more than one input, we need to keep track of each ScriptPubKeyMan that has filled this psbt.\n+    // Each iteration, we may fill more inputs than the input that is specified in that iteration.\n+    // We assume that each input is filled by only one ScriptPubKeyMan\n+    std::set<uint256> visited_spk_mans;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n \n-        // Get the Sighash type\n-        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n-            return TransactionError::SIGHASH_MISMATCH;\n+        if (PSBTInputSigned(input)) {\n+            continue;\n         }\n \n-        // Get the scriptPubKey to know which SigningProvider to use\n+        // Get the scriptPubKey to know which ScriptPubKeyMan to use\n         CScript script;\n         if (!input.witness_utxo.IsNull()) {\n             script = input.witness_utxo.scriptPubKey;\n@@ -2523,29 +2531,38 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n             script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n         } else {\n             // There's no UTXO so we can just skip this now\n-            complete = false;\n             continue;\n         }\n         SignatureData sigdata;\n         input.FillSignatureData(sigdata);\n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(script, sigdata);\n-        if (!provider) {\n-            complete = false;\n+        std::set<ScriptPubKeyMan*> spk_mans = GetScriptPubKeyMans(script, sigdata);\n+        if (spk_mans.size() == 0) {\n             continue;\n         }\n \n-        complete &= SignPSBTInput(HidingSigningProvider(provider.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n-    }\n+        for (auto& spk_man : spk_mans) {\n+            // If we've already been signed by this spk_man, skip it\n+            if (visited_spk_mans.count(spk_man->GetID()) > 0) {\n+                continue;\n+            }\n+\n+            // Fill in the information from the spk_man\n+            TransactionError res = spk_man->FillPSBT(psbtx, sighash_type, sign, bip32derivs);\n+            if (res != TransactionError::OK) {\n+                return res;\n+            }\n \n-    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n-    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n-        const CTxOut& out = psbtx.tx->vout.at(i);\n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(out.scriptPubKey);\n-        if (provider) {\n-            UpdatePSBTOutput(HidingSigningProvider(provider.get(), true, !bip32derivs), psbtx, i);\n+            // Add this spk_man to visited_spk_mans so we can skip it later\n+            visited_spk_mans.insert(spk_man->GetID());\n         }\n     }\n \n+    // Complete if every input is now signed\n+    complete = true;\n+    for (const auto& input : psbtx.inputs) {\n+        complete &= PSBTInputSigned(input);\n+    }\n+\n     return TransactionError::OK;\n }\n "
      }
    ]
  },
  {
    "sha": "6a9c429084b40356aa36aa67992da35f61c2f6a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTljNDI5MDg0YjQwMzU2YWEzNmFhNjc5OTJkYTM1ZjYxYzJmNmEy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-13T22:09:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-09T15:16:20Z"
      },
      "message": "Move direct calls to MessageSign into new SignMessage functions in CWallet and ScriptPubKeyMan\n\nInstead of getting a SigningProvider and then going to MessageSign,\nhave ScriptPubKeyMan handle the message signing internally.",
      "tree": {
        "sha": "e2590bf410fd5c78b4e6edd5805ba99802130de6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2590bf410fd5c78b4e6edd5805ba99802130de6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a9c429084b40356aa36aa67992da35f61c2f6a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a9c429084b40356aa36aa67992da35f61c2f6a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a9c429084b40356aa36aa67992da35f61c2f6a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a9c429084b40356aa36aa67992da35f61c2f6a2/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82a30fade70a2a95c2bbeac4aa06dafda600479d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82a30fade70a2a95c2bbeac4aa06dafda600479d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82a30fade70a2a95c2bbeac4aa06dafda600479d"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 84,
      "deletions": 25
    },
    "files": [
      {
        "sha": "7b3ab27b503cd0a72fcf5f42ccc0e65e1a5e9cf5",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=6a9c429084b40356aa36aa67992da35f61c2f6a2",
        "patch": "@@ -132,6 +132,10 @@ class WalletImpl : public Wallet\n         }\n         return false;\n     }\n+    SigningResult signMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) override\n+    {\n+        return m_wallet->SignMessage(message, pkhash, str_sig);\n+    }\n     bool isSpendable(const CTxDestination& dest) override { return m_wallet->IsMine(dest) & ISMINE_SPENDABLE; }\n     bool haveWatchOnly() override\n     {"
      },
      {
        "sha": "6f27ee126d88c0535b6bbf3bdefd7909959afadc",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=6a9c429084b40356aa36aa67992da35f61c2f6a2",
        "patch": "@@ -10,6 +10,7 @@\n #include <script/standard.h>           // For CTxDestination\n #include <support/allocators/secure.h> // For SecureString\n #include <ui_interface.h>              // For ChangeType\n+#include <util/message.h>\n \n #include <functional>\n #include <map>\n@@ -87,6 +88,9 @@ class Wallet\n     //! Get private key.\n     virtual bool getPrivKey(const CScript& script, const CKeyID& address, CKey& key) = 0;\n \n+    //! Sign message\n+    virtual SigningResult signMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) = 0;\n+\n     //! Return whether wallet has private key.\n     virtual bool isSpendable(const CTxDestination& dest) = 0;\n "
      },
      {
        "sha": "4552753bf6df0ab30d00b05f296f99555d3dfb2e",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 10,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=6a9c429084b40356aa36aa67992da35f61c2f6a2",
        "patch": "@@ -133,20 +133,27 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n         return;\n     }\n \n-    CKey key;\n-    if (!model->wallet().getPrivKey(GetScriptForDestination(destination), CKeyID(*pkhash), key))\n-    {\n-        ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_SM->setText(tr(\"Private key for the entered address is not available.\"));\n-        return;\n-    }\n-\n     const std::string& message = ui->messageIn_SM->document()->toPlainText().toStdString();\n     std::string signature;\n+    SigningResult res = model->wallet().signMessage(message, *pkhash, signature);\n+\n+    QString error;\n+    switch (res) {\n+        case SigningResult::OK:\n+            error = tr(\"No error\");\n+            break;\n+        case SigningResult::PRIVATE_KEY_NOT_AVAILABLE:\n+            error = tr(\"Private key for the entered address is not available.\");\n+            break;\n+        case SigningResult::SIGNING_FAILED:\n+            error = tr(\"Message signing failed.\");\n+            break;\n+        // no default case, so the compiler can warn about missing cases\n+    }\n \n-    if (!MessageSign(key, message, signature)) {\n+    if (res != SigningResult::OK) {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_SM->setText(QString(\"<nobr>\") + tr(\"Message signing failed.\") + QString(\"</nobr>\"));\n+        ui->statusLabel_SM->setText(QString(\"<nobr>\") + error + QString(\"</nobr>\"));\n         return;\n     }\n "
      },
      {
        "sha": "1e7128d2252bc2cbf8f99dcf949c2bbee9940013",
        "filename": "src/util/message.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/util/message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/util/message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.cpp?ref=6a9c429084b40356aa36aa67992da35f61c2f6a2",
        "patch": "@@ -76,3 +76,17 @@ uint256 MessageHash(const std::string& message)\n \n     return hasher.GetHash();\n }\n+\n+std::string SigningResultString(const SigningResult res)\n+{\n+    switch (res) {\n+        case SigningResult::OK:\n+            return \"No error\";\n+        case SigningResult::PRIVATE_KEY_NOT_AVAILABLE:\n+            return \"Private key not available\";\n+        case SigningResult::SIGNING_FAILED:\n+            return \"Sign failed\";\n+        // no default case, so the compiler can warn about missing cases\n+    }\n+    assert(false);\n+}"
      },
      {
        "sha": "b31c5f5761b81d5dbae06499801404c5b152b190",
        "filename": "src/util/message.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/util/message.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/util/message.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.h?ref=6a9c429084b40356aa36aa67992da35f61c2f6a2",
        "patch": "@@ -39,6 +39,12 @@ enum class MessageVerificationResult {\n     OK\n };\n \n+enum class SigningResult {\n+    OK, //!< No error\n+    PRIVATE_KEY_NOT_AVAILABLE,\n+    SIGNING_FAILED,\n+};\n+\n /** Verify a signed message.\n  * @param[in] address Signer's bitcoin address, it must refer to a public key.\n  * @param[in] signature The signature in base64 format.\n@@ -65,4 +71,6 @@ bool MessageSign(\n  */\n uint256 MessageHash(const std::string& message);\n \n+std::string SigningResultString(const SigningResult res);\n+\n #endif // BITCOIN_UTIL_MESSAGE_H"
      },
      {
        "sha": "90fd3e43738b69ad072656bb91ac8100794683ad",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 15,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6a9c429084b40356aa36aa67992da35f61c2f6a2",
        "patch": "@@ -565,22 +565,12 @@ static UniValue signmessage(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n     }\n \n-    CScript script_pub_key = GetScriptForDestination(*pkhash);\n-    std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(script_pub_key);\n-    if (!provider) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n-    }\n-\n-    CKey key;\n-    CKeyID keyID(*pkhash);\n-    if (!provider->GetKey(keyID, key)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n-    }\n-\n     std::string signature;\n-\n-    if (!MessageSign(key, strMessage, signature)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Sign failed\");\n+    SigningResult err = pwallet->SignMessage(strMessage, *pkhash, signature);\n+    if (err == SigningResult::SIGNING_FAILED) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, SigningResultString(err));\n+    } else if (err != SigningResult::OK){\n+        throw JSONRPCError(RPC_WALLET_ERROR, SigningResultString(err));\n     }\n \n     return signature;"
      },
      {
        "sha": "bec4abf8572301a35808fa04b07d1428123b759d",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=6a9c429084b40356aa36aa67992da35f61c2f6a2",
        "patch": "@@ -511,6 +511,20 @@ bool LegacyScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::\n     return ::SignTransaction(tx, this, coins, sighash, input_errors);\n }\n \n+SigningResult LegacyScriptPubKeyMan::SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const\n+{\n+    CKeyID key_id(pkhash);\n+    CKey key;\n+    if (!GetKey(key_id, key)) {\n+        return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+    }\n+\n+    if (MessageSign(key, message, str_sig)) {\n+        return SigningResult::OK;\n+    }\n+    return SigningResult::SIGNING_FAILED;\n+}\n+\n TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs) const\n {\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {"
      },
      {
        "sha": "ab0d1c37bd19d9ecc75c787f6a92266d2766c0cc",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=6a9c429084b40356aa36aa67992da35f61c2f6a2",
        "patch": "@@ -9,6 +9,7 @@\n #include <script/signingprovider.h>\n #include <script/standard.h>\n #include <util/error.h>\n+#include <util/message.h>\n #include <wallet/crypter.h>\n #include <wallet/ismine.h>\n #include <wallet/walletdb.h>\n@@ -214,6 +215,8 @@ class ScriptPubKeyMan\n \n     /** Creates new signatures and adds them to the transaction. Returns whether all inputs were signed */\n     virtual bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const { return false; }\n+    /** Sign a message with the given script */\n+    virtual SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const { return SigningResult::SIGNING_FAILED; };\n     /** Adds script and derivation path information to a PSBT, and optionally signs it. */\n     virtual TransactionError FillPSBT(PartiallySignedTransaction& psbt, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false) const { return TransactionError::INVALID_PSBT; }\n \n@@ -358,6 +361,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n \n     bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const override;\n+    SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const override;\n     TransactionError FillPSBT(PartiallySignedTransaction& psbt, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false) const override;\n \n     uint256 GetID() const override;"
      },
      {
        "sha": "058f6597ae4d0f4213c1b7b080125bf5da87b482",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6a9c429084b40356aa36aa67992da35f61c2f6a2",
        "patch": "@@ -2566,6 +2566,18 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n     return TransactionError::OK;\n }\n \n+SigningResult CWallet::SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const\n+{\n+    SignatureData sigdata;\n+    CScript script_pub_key = GetScriptForDestination(pkhash);\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        if (spk_man_pair.second->CanProvide(script_pub_key, sigdata)) {\n+            return spk_man_pair.second->SignMessage(message, pkhash, str_sig);\n+        }\n+    }\n+    return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+}\n+\n bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl coinControl)\n {\n     std::vector<CRecipient> vecSend;"
      },
      {
        "sha": "de37930f4e079688d9ecffd8323c75c996b0b787",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a9c429084b40356aa36aa67992da35f61c2f6a2/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6a9c429084b40356aa36aa67992da35f61c2f6a2",
        "patch": "@@ -14,6 +14,7 @@\n #include <psbt.h>\n #include <tinyformat.h>\n #include <ui_interface.h>\n+#include <util/message.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <validationinterface.h>\n@@ -921,6 +922,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     bool SignTransaction(CMutableTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     // Sign the tx given the input coins and sighash.\n     bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const;\n+    SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const;\n \n     /**\n      * Fills out a PSBT with information from the wallet. Fills in UTXOs if we have"
      }
    ]
  },
  {
    "sha": "dc174881ad8498a6905ba282a48077bc5c8037a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzE3NDg4MWFkODQ5OGE2OTA1YmEyODJhNDgwNzdiYzVjODAzN2E3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T02:27:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-09T15:16:20Z"
      },
      "message": "Replace GetSigningProvider with GetSolvingProvider\n\nNot all ScriptPubKeyMans will be able to provide private keys,\nbut pubkeys and scripts should be. So only provide public-only\nSigningProviders, i.e. ones that can help with Solving.",
      "tree": {
        "sha": "cf16d8436418d8550d43cc7315a0d499c0b6ff5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf16d8436418d8550d43cc7315a0d499c0b6ff5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc174881ad8498a6905ba282a48077bc5c8037a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc174881ad8498a6905ba282a48077bc5c8037a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc174881ad8498a6905ba282a48077bc5c8037a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc174881ad8498a6905ba282a48077bc5c8037a7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a9c429084b40356aa36aa67992da35f61c2f6a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a9c429084b40356aa36aa67992da35f61c2f6a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a9c429084b40356aa36aa67992da35f61c2f6a2"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 21,
      "deletions": 32
    },
    "files": [
      {
        "sha": "01ade56b2a2079f273b47381516453f2e75981be",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc174881ad8498a6905ba282a48077bc5c8037a7/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc174881ad8498a6905ba282a48077bc5c8037a7/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=dc174881ad8498a6905ba282a48077bc5c8037a7",
        "patch": "@@ -118,20 +118,12 @@ class WalletImpl : public Wallet\n     }\n     bool getPubKey(const CScript& script, const CKeyID& address, CPubKey& pub_key) override\n     {\n-        std::unique_ptr<SigningProvider> provider = m_wallet->GetSigningProvider(script);\n+        std::unique_ptr<SigningProvider> provider = m_wallet->GetSolvingProvider(script);\n         if (provider) {\n             return provider->GetPubKey(address, pub_key);\n         }\n         return false;\n     }\n-    bool getPrivKey(const CScript& script, const CKeyID& address, CKey& key) override\n-    {\n-        std::unique_ptr<SigningProvider> provider = m_wallet->GetSigningProvider(script);\n-        if (provider) {\n-            return provider->GetKey(address, key);\n-        }\n-        return false;\n-    }\n     SigningResult signMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) override\n     {\n         return m_wallet->SignMessage(message, pkhash, str_sig);"
      },
      {
        "sha": "9476c9f77fae3136b2f8a42654f49aa530c50105",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc174881ad8498a6905ba282a48077bc5c8037a7/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc174881ad8498a6905ba282a48077bc5c8037a7/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=dc174881ad8498a6905ba282a48077bc5c8037a7",
        "patch": "@@ -85,9 +85,6 @@ class Wallet\n     //! Get public key.\n     virtual bool getPubKey(const CScript& script, const CKeyID& address, CPubKey& pub_key) = 0;\n \n-    //! Get private key.\n-    virtual bool getPrivKey(const CScript& script, const CKeyID& address, CKey& key) = 0;\n-\n     //! Sign message\n     virtual SigningResult signMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) = 0;\n "
      },
      {
        "sha": "e9e1f9266acebdd24603434908088affe34be7fa",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc174881ad8498a6905ba282a48077bc5c8037a7/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc174881ad8498a6905ba282a48077bc5c8037a7/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=dc174881ad8498a6905ba282a48077bc5c8037a7",
        "patch": "@@ -2962,7 +2962,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                 entry.pushKV(\"label\", i->second.name);\n             }\n \n-            std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(scriptPubKey);\n+            std::unique_ptr<SigningProvider> provider = pwallet->GetSolvingProvider(scriptPubKey);\n             if (provider) {\n                 if (scriptPubKey.IsPayToScriptHash()) {\n                     const CScriptID& hash = CScriptID(boost::get<ScriptHash>(address));\n@@ -3002,7 +3002,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n         entry.pushKV(\"spendable\", out.fSpendable);\n         entry.pushKV(\"solvable\", out.fSolvable);\n         if (out.fSolvable) {\n-            std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(scriptPubKey);\n+            std::unique_ptr<SigningProvider> provider = pwallet->GetSolvingProvider(scriptPubKey);\n             if (provider) {\n                 auto descriptor = InferDescriptor(scriptPubKey, *provider);\n                 entry.pushKV(\"desc\", descriptor->ToString());\n@@ -3716,7 +3716,7 @@ static UniValue DescribeWalletAddress(const CWallet* const pwallet, const CTxDes\n     CScript script = GetScriptForDestination(dest);\n     std::unique_ptr<SigningProvider> provider = nullptr;\n     if (pwallet) {\n-        provider = pwallet->GetSigningProvider(script);\n+        provider = pwallet->GetSolvingProvider(script);\n     }\n     ret.pushKVs(detail);\n     ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(provider.get()), dest));\n@@ -3818,7 +3818,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     CScript scriptPubKey = GetScriptForDestination(dest);\n     ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n-    std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(scriptPubKey);\n+    std::unique_ptr<SigningProvider> provider = pwallet->GetSolvingProvider(scriptPubKey);\n \n     isminetype mine = pwallet->IsMine(dest);\n     ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));"
      },
      {
        "sha": "6fe1d84d6455f214d39471229c3a442d77a2c024",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc174881ad8498a6905ba282a48077bc5c8037a7/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc174881ad8498a6905ba282a48077bc5c8037a7/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=dc174881ad8498a6905ba282a48077bc5c8037a7",
        "patch": "@@ -478,7 +478,7 @@ int64_t LegacyScriptPubKeyMan::GetTimeFirstKey() const\n     return nTimeFirstKey;\n }\n \n-std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const CScript& script) const\n+std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSolvingProvider(const CScript& script) const\n {\n     return MakeUnique<LegacySigningProvider>(*this);\n }"
      },
      {
        "sha": "8512eadf31b5e43bef9343aa309e5ac438e75e05",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc174881ad8498a6905ba282a48077bc5c8037a7/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc174881ad8498a6905ba282a48077bc5c8037a7/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=dc174881ad8498a6905ba282a48077bc5c8037a7",
        "patch": "@@ -206,10 +206,10 @@ class ScriptPubKeyMan\n \n     virtual const CKeyMetadata* GetMetadata(const CTxDestination& dest) const { return nullptr; }\n \n-    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+    virtual std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script) const { return nullptr; }\n \n-    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n-      * sigdata, can produce a valid signature.\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSolvingProvider) that, combined with\n+      * sigdata, can produce solving data.\n       */\n     virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n \n@@ -356,7 +356,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool CanGetAddresses(bool internal = false) const override;\n \n-    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const override;\n+    std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script) const override;\n \n     bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n \n@@ -461,7 +461,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     std::set<CKeyID> GetKeys() const override;\n };\n \n-/** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */\n+/** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr. Does not provide privkeys */\n class LegacySigningProvider : public SigningProvider\n {\n private:\n@@ -472,8 +472,8 @@ class LegacySigningProvider : public SigningProvider\n     bool GetCScript(const CScriptID &scriptid, CScript& script) const override { return m_spk_man.GetCScript(scriptid, script); }\n     bool HaveCScript(const CScriptID &scriptid) const override { return m_spk_man.HaveCScript(scriptid); }\n     bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const override { return m_spk_man.GetPubKey(address, pubkey); }\n-    bool GetKey(const CKeyID &address, CKey& key) const override { return m_spk_man.GetKey(address, key); }\n-    bool HaveKey(const CKeyID &address) const override { return m_spk_man.HaveKey(address); }\n+    bool GetKey(const CKeyID &address, CKey& key) const override { return false; }\n+    bool HaveKey(const CKeyID &address) const override { return false; }\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n "
      },
      {
        "sha": "79e29d050fe165f9f727c7131fc5cdc85bfb754c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc174881ad8498a6905ba282a48077bc5c8037a7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc174881ad8498a6905ba282a48077bc5c8037a7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=dc174881ad8498a6905ba282a48077bc5c8037a7",
        "patch": "@@ -1407,7 +1407,7 @@ bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout, bool use_max_sig\n     const CScript& scriptPubKey = txout.scriptPubKey;\n     SignatureData sigdata;\n \n-    std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n+    std::unique_ptr<SigningProvider> provider = GetSolvingProvider(scriptPubKey);\n     if (!provider) {\n         // We don't know about this scriptpbuKey;\n         return false;\n@@ -2171,7 +2171,7 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n                 continue;\n             }\n \n-            std::unique_ptr<SigningProvider> provider = GetSigningProvider(wtx.tx->vout[i].scriptPubKey);\n+            std::unique_ptr<SigningProvider> provider = GetSolvingProvider(wtx.tx->vout[i].scriptPubKey);\n \n             bool solvable = provider ? IsSolvable(*provider, wtx.tx->vout[i].scriptPubKey) : false;\n             bool spendable = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (((mine & ISMINE_WATCH_ONLY) != ISMINE_NO) && (coinControl && coinControl->fAllowWatchOnly && solvable));\n@@ -4307,17 +4307,17 @@ ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const uint256& id) const\n     return nullptr;\n }\n \n-std::unique_ptr<SigningProvider> CWallet::GetSigningProvider(const CScript& script) const\n+std::unique_ptr<SigningProvider> CWallet::GetSolvingProvider(const CScript& script) const\n {\n     SignatureData sigdata;\n-    return GetSigningProvider(script, sigdata);\n+    return GetSolvingProvider(script, sigdata);\n }\n \n-std::unique_ptr<SigningProvider> CWallet::GetSigningProvider(const CScript& script, SignatureData& sigdata) const\n+std::unique_ptr<SigningProvider> CWallet::GetSolvingProvider(const CScript& script, SignatureData& sigdata) const\n {\n     for (const auto& spk_man_pair : m_spk_managers) {\n         if (spk_man_pair.second->CanProvide(script, sigdata)) {\n-            return spk_man_pair.second->GetSigningProvider(script);\n+            return spk_man_pair.second->GetSolvingProvider(script);\n         }\n     }\n     return nullptr;"
      },
      {
        "sha": "0c86a0c1e88808ec0bf113e61fff3ec4c3648bcc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc174881ad8498a6905ba282a48077bc5c8037a7/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc174881ad8498a6905ba282a48077bc5c8037a7/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=dc174881ad8498a6905ba282a48077bc5c8037a7",
        "patch": "@@ -1182,8 +1182,8 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     std::set<ScriptPubKeyMan*> GetScriptPubKeyMans(const CScript& script, SignatureData& sigdata) const;\n \n     //! Get the SigningProvider for a script\n-    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const;\n-    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script, SignatureData& sigdata) const;\n+    std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script) const;\n+    std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script, SignatureData& sigdata) const;\n \n     //! Get the LegacyScriptPubKeyMan which is used for all types, internal, and external.\n     LegacyScriptPubKeyMan* GetLegacyScriptPubKeyMan() const;"
      }
    ]
  },
  {
    "sha": "d2774c09cfcc6c5c967d40bb094eabc8c0bdb6bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjc3NGMwOWNmY2M2YzVjOTY3ZDQwYmIwOTRlYWJjOGMwYmRiNmJm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-12T00:24:14Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-09T15:16:20Z"
      },
      "message": "Clear any input_errors for an input after it is signed\n\nMake sure that there are no errors set for an input after it is signed.\nThis is useful for when there are multiple ScriptPubKeyMans. Some may\nfail to sign, but one may be able to sign, and after it does, we don't\nwant there to be any more errors there.",
      "tree": {
        "sha": "219d788dcd228bb6993def93e6b8e89890773327",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/219d788dcd228bb6993def93e6b8e89890773327"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2774c09cfcc6c5c967d40bb094eabc8c0bdb6bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2774c09cfcc6c5c967d40bb094eabc8c0bdb6bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2774c09cfcc6c5c967d40bb094eabc8c0bdb6bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2774c09cfcc6c5c967d40bb094eabc8c0bdb6bf/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc174881ad8498a6905ba282a48077bc5c8037a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc174881ad8498a6905ba282a48077bc5c8037a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc174881ad8498a6905ba282a48077bc5c8037a7"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fe8292fe5762f7fb64e3a704d2bf098262d7f4b8",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2774c09cfcc6c5c967d40bb094eabc8c0bdb6bf/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2774c09cfcc6c5c967d40bb094eabc8c0bdb6bf/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=d2774c09cfcc6c5c967d40bb094eabc8c0bdb6bf",
        "patch": "@@ -509,6 +509,9 @@ bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n             } else {\n                 input_errors[i] = ScriptErrorString(serror);\n             }\n+        } else {\n+            // If this input succeeds, make sure there is no error set for it\n+            input_errors.erase(i);\n         }\n     }\n     return input_errors.empty();"
      }
    ]
  }
]