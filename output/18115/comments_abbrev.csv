DrahtBot,2020-02-11 05:47:27,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17938 (Disallow automatic conversion between disparate hash types by Empact)\n* #17211 (Allow fundrawtransaction and wall",https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-584486503,584486503,
Sjors,2020-02-12 08:57:51,@kallewoof may find this interesting too in light of BIP-322 (Generic signed message format) #16440,https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-585100204,585100204,
vasild,2020-02-12 09:51:16,https://github.com/achow101/bitcoin/blob/e4714e0/src/rpc/misc.cpp#L340 still calls the old signing code `key.SignCompact();` directly. Maybe that needs to be updated to also use the newly added function `SignMessage()`?,https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-585122576,585122576,
achow101,2020-02-12 17:53:26,"> [0eb285f](https://github.com/bitcoin/bitcoin/commit/0eb285f7146ae9beec3a19829cc4420ad9f251ae) `Refactor rawtransaction's SignTransaction into generic SignTransaction function` would be easier to review (`--color-moved=dimmed-zebra -w`) if you renamed the variables in separate commit.\n\nI've undone the renames.\n\n> It may be better to combine [4595326](https://github.com/bitcoin/bitcoin/com",https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-585333090,585333090,
kallewoof,2020-02-13 13:08:03,"I am trying to merge BIP322 #16440  on top of this, and am running into an issue demonstrated by the below patch:\n```diff\ndiff --git a/src/wallet/rpcwallet.cpp b/src/wallet/rpcwallet.cpp\nindex bde8a6099..dde7819fa 100644\n--- a/src/wallet/rpcwallet.cpp\n+++ b/src/wallet/rpcwallet.cpp\n@@ -559,6 +559,14 @@ static UniValue signmessage(const JSONRPCRequest& request)\n     }\n\n     const ",https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-585745930,585745930,
achow101,2020-02-13 15:40:38,"> The SignMessage for each scriptpubman is a step backwards considering BIP322 will unify these all into a single place. It would be great if you reviewed that PR (if you already have, and still feel this is the right approach, I'd love to know why).\n\nYou can still have the message signing code unified to a single place, and in fact, this PR does that (it consolidates the `signmessage` RPC and",https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-585821638,585821638,
achow101,2020-02-13 23:05:45,I've based this on top of #17577,https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-586016050,586016050,
kallewoof,2020-02-14 04:03:25,"> That's because you are still using the old code and way of signing messages. There is no need for signmessage to get a SigningProvider anymore. Instead you should be implementing either within the SignMessage function that is now in sign.cpp. You'll probably need to change the arguments, but you shouldn't need to go to the specific call sites like signmessage or the Sign Message dialog.\n\nAhh",https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-586087508,586087508,
achow101,2020-02-14 18:07:59,"> Ahh. In that case `PublicSigningProvider` is a bad name for it, I think? It's not providing any _signing_ at all, after all. I assume this is used to verify signatures? Maybe `GetPublicKeyProvider`.\n\nIt's used primarily for checking solvability. So I've renamed it to `GetSolvingProvider`",https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-586404074,586404074,
Sjors,2020-02-14 19:50:11,`GetSolutionProvider`? :-P,https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-586447261,586447261,
instagibbs,2020-02-19 17:13:01,concept ACK,https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-588334247,588334247,
instagibbs,2020-02-21 16:42:39,note that this PR is built on https://github.com/bitcoin/bitcoin/pull/17577,https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-589734450,589734450,
instagibbs,2020-02-24 17:19:07,utACK https://github.com/bitcoin/bitcoin/pull/18115/commits/2525db8eb1af79f00899cac1bd2ff8a1e85d32f8,https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-590446829,590446829,
Sjors,2020-02-25 19:41:44,utACK 1f9a806a0184ebc4fe7b7b99df6341e0a00fef80,https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-591032633,591032633,
instagibbs,2020-02-25 22:19:38,"utACK https://github.com/bitcoin/bitcoin/pull/18115/commits/1f9a806a0184ebc4fe7b7b99df6341e0a00fef80\n\nThough I wish the code regarding the last commit was easier to grok about.",https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-591100302,591100302,
achow101,2020-03-08 16:28:06,There was a hidden merge conflict that required a rebase.,https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-596223844,596223844,
Sjors,2020-03-09 10:38:55,"Will do after @achow101 fixes the Travis build failure :-) https://travis-ci.org/bitcoin/bitcoin/jobs/659844515#L2418\n\nMarking `fillPSBT()` as `const` in `src/interfaces/wallet.{h,cpp}` might help, and would at least be consistent.",https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-596451416,596451416,
instagibbs,2020-03-09 15:27:19,reACK https://github.com/bitcoin/bitcoin/pull/18115/commits/d2774c09cfcc6c5c967d40bb094eabc8c0bdb6bf,https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-596599384,596599384,
achow101,2020-03-09 15:29:05,"> Will do after @achow101 fixes the Travis build failure :-) https://travis-ci.org/bitcoin/bitcoin/jobs/659844515#L2418\n> \n> Marking `fillPSBT()` as `const` in `src/interfaces/wallet.{h,cpp}` might help, and would at least be consistent.\n\nI did that, but I don't think it will help. I'm not sure what would cause that travis failure; it's failing on something that the other targets are compi",https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-596600502,596600502,
Sjors,2020-03-09 18:15:45,re-utACK d2774c09cfcc6c5c967d40bb094eabc8c0bdb6bf,https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-596694939,596694939,
meshcollider,2020-03-09 19:56:16,re-utACK d2774c09cfcc6c5c967d40bb094eabc8c0bdb6bf,https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-596748854,596748854,
Sjors,2020-02-12 09:20:28,"In 0eb285f7146ae9beec3a19829cc4420ad9f251ae, this trips up AppVeyor:\n```\n:\projects\bitcoin\src\rpc\rawtransaction_util.h(27,132): error C2039: 'string': is not a member of 'std' [C:\projects\bitcoin\build_msvc\libbitcoin_common\libbitcoin_common.vcxproj]\n63C:\projects\bitcoin\src\rpc\rawtransaction_util.h(27,138): error C2065: 'string': undeclared identifier [C:\projects\bitcoin\build_msvc\",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378125160,378125160,src/rpc/rawtransaction_util.h
vasild,2020-02-12 09:34:26,Missing `break;`?,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378133077,378133077,src/qt/signverifymessagedialog.cpp
Sjors,2020-02-12 09:40:50,Maybe rename it to `SignTransactionResultToJSON()`.,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378136589,378136589,src/rpc/rawtransaction_util.h
Sjors,2020-02-12 09:47:31,"In 0eb285f7146ae9beec3a19829cc4420ad9f251ae this seems a bit brittle: `input_errors[i] = ""Missing amount"";` (which is then matched by string to throw an exception later). But at least this error message is covered by `rpc_rawtransaction.py`",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378140246,378140246,src/script/sign.cpp
Sjors,2020-02-12 09:52:03,"This is a good time to add tests for the three error strings used here (`SCRIPT_ERR_INVALID_STACK_OPERATION`, `SCRIPT_ERR_SIG_NULLFAIL`, `else`). Not sure how though.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378142817,378142817,src/script/sign.cpp
Sjors,2020-02-12 10:06:35,"In  e496e2981699ac2938b74297d9b0bce355d26ad8 `Implement CWallet::SignTransaction using ScriptPubKeyMan::SignTransaction` at `// Sign the tx with ScriptPubKeyMans`, check `CanProvide()` first?",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378151197,378151197,src/wallet/wallet.cpp
Sjors,2020-02-12 10:08:34,"The way `input_errors` are set, if there are multiple matching `ScriptPubKeyMans`* they would override each-others results. The last commit e4714e05ca9f3000384f9ed8f44e91a485f88bee clears the error for any given input, but only if SPKman SignTransaction() returns true, which requires all input errors to be empty, so that seems useless. At minimum this is confusing.\n\n`*` = not the case with leg",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378152215,378152215,src/wallet/wallet.cpp
Sjors,2020-02-12 10:20:03,"In a90a98c3aa90ed4dc4f995fac0859e58f177a79a under `// Fill in information from ScriptPubKeyMans`, add `CanProvide()`?",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378158565,378158565,src/wallet/wallet.cpp
Sjors,2020-02-12 10:26:23,"In a90a98c3aa90ed4dc4f995fac0859e58f177a79a: this comment is outdated, because you're no longer calling `GetSigningProvider(script, sigdata)`. Also the `CScript script` below is not used.\n",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378162019,378162019,src/wallet/scriptpubkeyman.cpp
Sjors,2020-02-12 10:31:33,Also these strings can be obtained from`SigningErrorString` in `error.cpp` (the wording here seems better),https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378164973,378164973,src/qt/signverifymessagedialog.cpp
vasild,2020-02-12 10:35:26,"It would be better to return some error from here (like the neighboring methods do). In case somebody forgets to override this method, it would be unexpected to return OK and leave the output `str_sig` unmodified.\n\nMaybe even use a pure virtual method `...str_sig) const = 0;` to cause a compilation error if somebody forgets to override `SignMessage()`. I checked that:\n* it compiles if change",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378166986,378166986,src/wallet/scriptpubkeyman.h
achow101,2020-02-12 17:07:26,"It is brittle, and I'm not sure why only that error specifically throws an exception. But keeping it for compatibility.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378389666,378389666,src/script/sign.cpp
achow101,2020-02-12 17:14:33,The expectation is that all of the errors will be the same across all failed `ScriptPubKeyMan`s because they don't have the private keys. The `ScriptPubKeyMan` which fully signs an input will clear the error for that input. This clearing is not dependent on `input_errors.empty()`.,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378393730,378393730,src/wallet/wallet.cpp
achow101,2020-02-12 17:20:22,"The strings from `SigningErrorString` won't be translated (we don't translate things for RPC), so that logic had to be duplicated here. Also, the strings are different to maintain compatibility.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378397086,378397086,src/qt/signverifymessagedialog.cpp
achow101,2020-02-12 17:34:48,Added the breaks in.,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378405142,378405142,src/qt/signverifymessagedialog.cpp
achow101,2020-02-12 17:35:41,Changed it to return `SigningError::SIGNING_FAILED`. I'm avoiding pure virtual functions in `ScriptPubKeyMan` because there is no requirement for every `ScriptPubKeyMan` to implement every function.,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378405634,378405634,src/wallet/scriptpubkeyman.h
achow101,2020-02-12 17:35:58,Fixed (I think) and renamed,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378405792,378405792,src/rpc/rawtransaction_util.h
achow101,2020-02-12 17:36:42,Fixed the comment and simplified this block to just check for correct `non_witness_utxo` or `continue` if there is no utxo.,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378406171,378406171,src/wallet/scriptpubkeyman.cpp
achow101,2020-02-12 18:56:47,"I've updated it to use `GetScriptPubKeyMan` which calls `CanProvide`\n\nThis change is slightly more complex but it does reduce the number of repeated signings.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378448191,378448191,src/wallet/wallet.cpp
achow101,2020-02-12 18:56:55,"I've updated it to use `GetScriptPubKeyMan` which calls `CanProvide`\n\nThis change is slightly more complex but it does reduce the number of repeated signings.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378448264,378448264,src/wallet/wallet.cpp
kallewoof,2020-02-13 10:52:56,"`SigningResult` seems more friendly, considering this can be OK.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378787066,378787066,src/util/error.h
achow101,2020-02-14 01:23:31,Renamed to `SigningResult`,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r379208846,379208846,src/util/error.h
Sjors,2020-02-20 16:19:20,double semicolumn,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382106652,382106652,src/script/sign.cpp
Sjors,2020-02-20 16:48:38,"Rather than having this `visited_spk_mans` bookkeeping, maybe just add  `spk_man->SignInput(tx, input, coins, sighash, error)`.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382125444,382125444,src/wallet/wallet.cpp
Sjors,2020-02-20 17:20:18,"Same suggestion as with regular signing: adding `FillPSBT(PartiallySignedTransaction& psbt, int& index, ...` to `LegacyScriptPubKeyMan()` would avoid this bookkeeping and be easier to reason about than this loop-in-loop behavior.\n\nSuch per input control could also make its way into the RPC, where e.g. coinjoin software could tell the wallet what to sign while ignoring the other inputs. That mi",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382143470,382143470,src/wallet/wallet.cpp
Sjors,2020-02-20 17:35:29,I tested that BIP32 info is correctly added to watch-only wallets (see also my comment https://github.com/bitcoin/bitcoin/pull/16528#discussion_r381325869 and earlier(?) version of this code).,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382151649,382151649,src/wallet/scriptpubkeyman.cpp
achow101,2020-02-21 16:18:26,"I considered that, but not all `ScriptPubKeyMan` implementations will be able to sign just one input without potentially signing all inputs. E.g. a hardware wallet spkman. With such spkmans, we would end up signing the entire tx multiple times which is both slow and bad UX.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382673176,382673176,src/wallet/wallet.cpp
Sjors,2020-02-21 17:13:17,"That makes sense. It's worth emphasizing in the comments that `SignTransaction()` will try to sign all inputs, not just `txin`.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382702786,382702786,src/wallet/wallet.cpp
achow101,2020-02-21 17:13:48,Fixed,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382703031,382703031,src/script/sign.cpp
Sjors,2020-02-21 17:14:12,"Nvm, see https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382673176",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382703235,382703235,src/wallet/wallet.cpp
achow101,2020-02-21 17:19:11,I've added some comments.,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382705514,382705514,src/wallet/wallet.cpp
instagibbs,2020-02-24 15:05:28,"This comment isn't really helpful for future code readers, just reviewers.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383318210,383318210,src/rpc/rawtransaction_util.cpp
instagibbs,2020-02-24 15:10:19,Please document when these two functions are used.,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383321048,383321048,src/wallet/wallet.h
instagibbs,2020-02-24 15:10:30,Please document how this is used.,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383321143,383321143,src/wallet/wallet.h
instagibbs,2020-02-24 15:21:03,Will one SPKM always be sufficient for any input even going forward? Seems to me the same SPKM will always be sourced for a particular input?,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383327654,383327654,src/wallet/wallet.cpp
instagibbs,2020-02-24 15:37:03,Will one SPKM always be sufficient for any input even going forward? Seems to me the same SPKM will always be sourced for a particular input?,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383338101,383338101,src/wallet/wallet.cpp
instagibbs,2020-02-24 15:43:09,A little confused by this commit. Should `SigningProvider` itself be renamed as well?,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383342149,383342149,src/wallet/wallet.h
instagibbs,2020-02-24 15:44:39,"5cab890b915fd9f25cada7ddab7cc00eea22c80b suggests no, there may be multiple.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383343089,383343089,src/wallet/wallet.cpp
achow101,2020-02-24 16:54:10,"The expectation is that one spkman will be sufficient. But I suppose it is possible that multiple spkmans could sign for a particular input. I don't think we handle that case.\n\n5cab890 was from a previous iteration where all spkmans signed the transaction. Perhaps it isn't needed anymore.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383387402,383387402,src/wallet/wallet.cpp
achow101,2020-02-24 16:55:42,"We should probably refactor `SigningProvider` at some point to have a parent `SolvingProvider` that doesn't have private keys. But for now, this just returns a `SigningProvider` without private keys.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383388286,383388286,src/wallet/wallet.h
instagibbs,2020-02-24 16:57:51,"I think it makes sense to remove that commit then, and just state the assumption here.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383389521,383389521,src/wallet/wallet.cpp
Sjors,2020-02-24 17:05:15,"I have commit for exactly that, see my earlier comment: https://github.com/bitcoin/bitcoin/pull/18115#pullrequestreview-362040407 ",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383393853,383393853,src/wallet/wallet.h
achow101,2020-02-24 17:14:46,Dropped the commit. Added a comment about the assumption.,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383399066,383399066,src/wallet/wallet.cpp
achow101,2020-02-24 17:14:54,Documented the assumption.,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383399138,383399138,src/wallet/wallet.cpp
achow101,2020-02-24 17:15:06,Added a comment.,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383399252,383399252,src/wallet/wallet.h
achow101,2020-02-24 17:18:39,Added a comment.,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383401146,383401146,src/wallet/wallet.h
achow101,2020-02-25 17:43:58,"I've had to restore the commit. It actually is needed. It actually doesn't imply that the different `ScriptPubKeyMan`s can successfully sign the same input.\n\nIt is still needed because each time the wrong `ScriptPubKeyMan` signs an input, it will add an error. Once that input becomes signed by the correct `ScriptPubKeyMan`, we need to clear away those errors otherwise they will incorrectly per",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r384028681,384028681,src/wallet/wallet.cpp
Sjors,2020-02-25 18:52:24,"Shouldn't this loop over all matching `GetScriptPubKeyMan`s? Otherwise the comment above should be changed to ""We assume that each input is **matched** (and signed) by only one ScriptPubKeyMan."".\n\nRight now:\n* if non-matching `ScriptPubKeyMan` tries and fails to sign this input, we'll try with the matching `ScriptPubKeyMan`, but;\n* if we match, but can't sign, that error can only be cleare",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r384057760,384057760,src/wallet/wallet.cpp
achow101,2020-02-25 19:29:26,Fine. I've changed it to check all `ScriptPubKeyMan`s that `CanProvide`.,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r384077686,384077686,src/wallet/wallet.cpp
instagibbs,2020-02-25 20:24:05,"Help me understand:\n\n1) Two SPKM: A and B\n2) Two input tx:\ninput 1: key resides in A\ninput 2: key resides in B\n3) A asked to sign 1, successfully\n4) A asked to sign 2, unsuccessful, appends error C\n5) B asked to sign 1, unsuccessful, appends error D\n6) B asked to sign 2, successful, deletes C\n\nWe're left with error D?",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r384106082,384106082,src/script/sign.cpp
achow101,2020-02-25 20:26:25,"5. B asked to sign 1. 1 comes with existing signature. Skips signing because already signed, no error.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r384107229,384107229,src/script/sign.cpp
instagibbs,2020-02-25 20:34:00,"`CWallet::SignTransaction` outer loop over inputs has the complete check, not the inner SPKM loop?",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r384110779,384110779,src/script/sign.cpp
Sjors,2020-02-25 20:50:42,"@achow101 `CWallet` skips B when considering input 1, because it's already signed. But then when it's considering input 2 it will tell B to sign the transaction, and the sign code doesn't seem skip already signed inputs.\n\nIt should be easy to reproduce this scenario in a test on the descriptor wallet PR. E.g. spend from a wallet with one legacy and one native SegWit UTXO.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r384118377,384118377,src/script/sign.cpp
achow101,2020-02-25 22:13:03,"To be more specific, the generic `SignTransaction` function uses `DataFromTransaction` on each input to pull out any existing signatures, pubkeys, and scripts into a `SignatureData` object. When this `SignatureData` object gets passed into `ProduceSignature`, `ProduceSignature` first looks at the `SignatureData` finds an existing signatures, pubkeys, and scripts, and fills those into the transacti",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r384158440,384158440,src/script/sign.cpp
instagibbs,2020-02-25 22:17:42,"Ok, I agree with what you're saying, though it's indirect.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r384160485,384160485,src/script/sign.cpp
Sjors,2020-02-26 08:39:16,"That makes sense and will do for now. Would be good to add a test to #15764 for this type of stuff, because it seems brittle.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r384340436,384340436,src/script/sign.cpp
achow101,2020-02-26 18:00:26,The nature of descriptor wallets as implemented in #16528 requires this commit or tests fail. We are already testing this case. I added back this commit *because* tests were failing without it in #16528.,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r384665587,384665587,src/script/sign.cpp
ProofOfKeags,2020-02-27 19:33:02,"Is the reason known, or is this a ""rain dance"" and all we know is that it doesn't work if it isn't an Exception?",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r385326206,385326206,src/rpc/rawtransaction_util.cpp
achow101,2020-02-27 19:42:43,It's preserving previous behavior of the API which would throw an exception for that particular error instead of putting it into the errors array.,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r385331262,385331262,src/rpc/rawtransaction_util.cpp
Empact,2020-02-28 23:28:22,nit: Might also collapse the outer `if (sign)`,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r385967818,385967818,src/wallet/wallet.cpp
Empact,2020-02-28 23:28:51,nit: this isn't required for this commit - maybe move it to later where it is required?,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r385967946,385967946,src/primitives/transaction.h
Empact,2020-02-28 23:52:11,nit: unnecessary assignment,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r385973118,385973118,src/qt/signverifymessagedialog.cpp
achow101,2020-02-29 00:26:03,Meh. Just in case some other change results in `error` being shown.,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r385979631,385979631,src/qt/signverifymessagedialog.cpp
achow101,2020-02-29 00:34:49,"It looks like this isn't needed at all... But I would like to avoid invalidating ACKs, so I'll leave it in unless I have to rebase or make other changes.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r385981063,385981063,src/primitives/transaction.h
achow101,2020-02-29 00:35:00,Will collapse if rebase or other changes are needed.,https://github.com/bitcoin/bitcoin/pull/18115#discussion_r385981088,385981088,src/wallet/wallet.cpp
achow101,2020-03-08 16:27:38,"Had to rebase, removed",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r389384551,389384551,src/primitives/transaction.h
achow101,2020-03-08 16:27:49,"had to rebase, collapsed.",https://github.com/bitcoin/bitcoin/pull/18115#discussion_r389384558,389384558,src/wallet/wallet.cpp
