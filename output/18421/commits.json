[
  {
    "sha": "3c8908347cd59e8b1c627ffa1557622eeddf38aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzg5MDgzNDdjZDU5ZThiMWM2MjdmZmExNTU3NjIyZWVkZGYzOGFh",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-03-23T22:07:15Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-04-16T14:39:51Z"
      },
      "message": "Separate a function for counting inbound connections",
      "tree": {
        "sha": "17ce8513fae6b88b923b4f1065f753617d98a4bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17ce8513fae6b88b923b4f1065f753617d98a4bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c8908347cd59e8b1c627ffa1557622eeddf38aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c8908347cd59e8b1c627ffa1557622eeddf38aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c8908347cd59e8b1c627ffa1557622eeddf38aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c8908347cd59e8b1c627ffa1557622eeddf38aa/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98fbb2a1844a5397fdc50eacb799f9109a597e26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98fbb2a1844a5397fdc50eacb799f9109a597e26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98fbb2a1844a5397fdc50eacb799f9109a597e26"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 12,
      "deletions": 6
    },
    "files": [
      {
        "sha": "0d90d5f18759abbc0988996cbe94d1b15aa901c3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c8908347cd59e8b1c627ffa1557622eeddf38aa/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c8908347cd59e8b1c627ffa1557622eeddf38aa/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3c8908347cd59e8b1c627ffa1557622eeddf38aa",
        "patch": "@@ -937,6 +937,16 @@ bool CConnman::AttemptToEvictConnection()\n     return false;\n }\n \n+int CConnman::CountInboundConnections() const\n+{\n+    int inbounds = 0;\n+    LOCK(cs_vNodes);\n+    for (const CNode* node : vNodes) {\n+        if (node->fInbound) inbounds++;\n+    }\n+    return inbounds;\n+}\n+\n void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n@@ -964,12 +974,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         legacyWhitelisted = true;\n     }\n \n-    {\n-        LOCK(cs_vNodes);\n-        for (const CNode* pnode : vNodes) {\n-            if (pnode->fInbound) nInbound++;\n-        }\n-    }\n+    nInbound = CountInboundConnections();\n \n     if (hSocket == INVALID_SOCKET)\n     {"
      },
      {
        "sha": "829cce45708484bfa88e62823f9882e5298c30b2",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c8908347cd59e8b1c627ffa1557622eeddf38aa/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c8908347cd59e8b1c627ffa1557622eeddf38aa/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=3c8908347cd59e8b1c627ffa1557622eeddf38aa",
        "patch": "@@ -351,6 +351,7 @@ class CConnman\n     void ProcessOneShot();\n     void ThreadOpenConnections(std::vector<std::string> connect);\n     void ThreadMessageHandler();\n+    int CountInboundConnections() const;\n     void AcceptConnection(const ListenSocket& hListenSocket);\n     void DisconnectNodes();\n     void NotifyNumConnectionsChanged();"
      }
    ]
  },
  {
    "sha": "de74888e9db3da3604e06d966d58f78247ca9641",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTc0ODg4ZTlkYjNkYTM2MDRlMDZkOTY2ZDU4Zjc4MjQ3Y2E5NjQx",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-03-23T22:09:29Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-04-16T14:39:54Z"
      },
      "message": "Periodically query DNS for better privacy of non-reachable nodes\n\nReachable nodes would query DNS servers every hour\nfor all widely used combinations of service bits.\nThis would give non-reachable nodes from the same subnets\nmore privacy, because they will be hitting early DNS caches.",
      "tree": {
        "sha": "1249948bf2fa2390f4818c520cd3bb2d1b68569f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1249948bf2fa2390f4818c520cd3bb2d1b68569f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de74888e9db3da3604e06d966d58f78247ca9641",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de74888e9db3da3604e06d966d58f78247ca9641",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de74888e9db3da3604e06d966d58f78247ca9641",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de74888e9db3da3604e06d966d58f78247ca9641/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c8908347cd59e8b1c627ffa1557622eeddf38aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c8908347cd59e8b1c627ffa1557622eeddf38aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c8908347cd59e8b1c627ffa1557622eeddf38aa"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 64,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4f9c66a433a56c1d8574e77162216fb1dacb6071",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 1,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de74888e9db3da3604e06d966d58f78247ca9641/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de74888e9db3da3604e06d966d58f78247ca9641/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=de74888e9db3da3604e06d966d58f78247ca9641",
        "patch": "@@ -48,6 +48,9 @@ static_assert(MINIUPNPC_API_VERSION >= 10, \"miniUPnPc API version >= 10 assumed\"\n // How often to dump addresses to peers.dat\n static constexpr std::chrono::minutes DUMP_PEERS_INTERVAL{15};\n \n+/** How often to make a DNS caches updating query. */\n+static constexpr std::chrono::minutes DNS_CACHES_UPDATE_INTERVAL{60};\n+\n /** Number of DNS seeds to query when the number of connections is low. */\n static constexpr int DNSSEEDS_TO_QUERY_AT_ONCE = 3;\n \n@@ -1576,8 +1579,53 @@ void StopMapPort()\n #endif\n \n \n+void CConnman::DNSCachesUpdate() const\n+{\n+    // Only reachable nodes do this, because those are already easy to find.\n+    // Unless the node is explicitly set to be non-reachable (-listen=0),\n+    // the only way to check if it is reachable is to observe inbound connections.\n+    // This check is made every time, because a node may become non-reachable\n+    // due to external factors (e.g. local network settings update).\n+    if (CountInboundConnections() == 0) return;\n+\n+    // Every time a new widely-requests service bit is deployed, this list should be\n+    // updated to invalide records for that service bit.\n+    std::vector<uint64_t> SERVICE_BITS_COMBINATIONS{\n+        // Legacy nodes\n+        NODE_NETWORK,\n+        NODE_NETWORK_LIMITED,\n+        // Segwit-supporting nodes\n+        NODE_NETWORK | NODE_WITNESS,\n+        NODE_NETWORK_LIMITED | NODE_WITNESS,\n+        // Nodes supporting Bloom Filters per BIP 111\n+        NODE_BLOOM,\n+        NODE_NETWORK | NODE_BLOOM,\n+        NODE_NETWORK_LIMITED | NODE_BLOOM,\n+        NODE_NETWORK | NODE_WITNESS | NODE_BLOOM,\n+        NODE_NETWORK_LIMITED | NODE_WITNESS | NODE_BLOOM};\n+\n+    for (const std::string& seed : Params().DNSSeeds()) {\n+        if (interruptNet) {\n+            return;\n+        }\n \n+        // first query as if client doesn't support service bits first\n+        std::vector<CNetAddr> ips;\n+        LookupHost(seed, ips, 1, true);\n+        // TODO: Here and below, make sure downloaded IPs are not very different\n+        // from what stored locally, to identify AddrMan or DNS poisoning.\n \n+        // query for all widely used combinations of service bits\n+        for (uint64_t service_bits_combination : SERVICE_BITS_COMBINATIONS) {\n+            if (interruptNet) {\n+                return;\n+            }\n+            std::string host = strprintf(\"x%x.%s\", ServiceFlags(service_bits_combination), seed);\n+            LookupHost(host, ips, 1, true);\n+        }\n+    }\n+    LogPrintf(\"DNS requests were made to update caches.\\n\");\n+}\n \n \n void CConnman::ThreadDNSAddressSeed()\n@@ -2327,8 +2375,13 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n \n     if (!gArgs.GetBoolArg(\"-dnsseed\", true))\n         LogPrintf(\"DNS seeding disabled\\n\");\n-    else\n+    else {\n         threadDNSAddressSeed = std::thread(&TraceThread<std::function<void()> >, \"dnsseed\", std::function<void()>(std::bind(&CConnman::ThreadDNSAddressSeed, this)));\n+        if (fListen && fNameLookup && !HaveNameProxy()) {\n+            LogPrintf(\"Proactive querying DNS servers to update caches is enabled\\n\");\n+            scheduler.scheduleEvery([this] { DNSCachesUpdate(); }, DNS_CACHES_UPDATE_INTERVAL);\n+        }\n+    }\n \n     // Initiate outbound connections from -addnode\n     threadOpenAddedConnections = std::thread(&TraceThread<std::function<void()> >, \"addcon\", std::function<void()>(std::bind(&CConnman::ThreadOpenAddedConnections, this)));"
      },
      {
        "sha": "19091b875b5d373326607bf6fb850d9dc84c1f67",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de74888e9db3da3604e06d966d58f78247ca9641/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de74888e9db3da3604e06d966d58f78247ca9641/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=de74888e9db3da3604e06d966d58f78247ca9641",
        "patch": "@@ -362,6 +362,16 @@ class CConnman\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n \n+    // Reachable nodes should periodically make requests\n+    // to DNS servers even if they don't need them.\n+    // Then, when new nodes from the same subnets need to query DNS,\n+    // they are likely to hit the cache instead.\n+    // For non-reachable nodes this means more privacy,\n+    // because fewer actors would know about their query.\n+    // For reachable nodes there is no privacy loss due to this,\n+    // because being reachable already makes them public.\n+    void DNSCachesUpdate() const;\n+\n     uint64_t CalculateKeyedNetGroup(const CAddress& ad) const;\n \n     CNode* FindNode(const CNetAddr& ip);"
      }
    ]
  }
]