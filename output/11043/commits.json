[
  {
    "sha": "860e912583b48fef7dc5b0399c40a7696ccfec55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjBlOTEyNTgzYjQ4ZmVmN2RjNWIwMzk5YzQwYTc2OTZjY2ZlYzU1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-09T13:01:54Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-09T15:52:44Z"
      },
      "message": "Use unique_ptr for pwalletMain (CWallet)",
      "tree": {
        "sha": "6cdcdbe99178428aedfabe550d59302c0f850ee3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cdcdbe99178428aedfabe550d59302c0f850ee3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/860e912583b48fef7dc5b0399c40a7696ccfec55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/860e912583b48fef7dc5b0399c40a7696ccfec55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/860e912583b48fef7dc5b0399c40a7696ccfec55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/860e912583b48fef7dc5b0399c40a7696ccfec55/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99ec12666ba78b33dded2200e8bd0e5de04f7734",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99ec12666ba78b33dded2200e8bd0e5de04f7734",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99ec12666ba78b33dded2200e8bd0e5de04f7734"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "0dd21171cade9e6b7ca80ac4a7f70cfacae4334c",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/860e912583b48fef7dc5b0399c40a7696ccfec55/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/860e912583b48fef7dc5b0399c40a7696ccfec55/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=860e912583b48fef7dc5b0399c40a7696ccfec55",
        "patch": "@@ -8,7 +8,7 @@\n #include \"wallet/db.h\"\n #include \"wallet/wallet.h\"\n \n-CWallet *pwalletMain;\n+std::unique_ptr<CWallet> pwalletMain;\n \n WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n     TestingSetup(chainName)\n@@ -17,18 +17,17 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n \n     bool fFirstRun;\n     std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"));\n-    pwalletMain = new CWallet(std::move(dbw));\n+    pwalletMain = std::unique_ptr<CWallet>(new CWallet(std::move(dbw)));\n     pwalletMain->LoadWallet(fFirstRun);\n-    RegisterValidationInterface(pwalletMain);\n+    RegisterValidationInterface(pwalletMain.get());\n \n     RegisterWalletRPCCommands(tableRPC);\n }\n \n WalletTestingSetup::~WalletTestingSetup()\n {\n-    UnregisterValidationInterface(pwalletMain);\n-    delete pwalletMain;\n-    pwalletMain = nullptr;\n+    UnregisterValidationInterface(pwalletMain.get());\n+    pwalletMain.reset();\n \n     bitdb.Flush(true);\n     bitdb.Reset();"
      }
    ]
  },
  {
    "sha": "5a6f768896585c7077fca673d5f5410b1dd901d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTZmNzY4ODk2NTg1YzcwNzdmY2E2NzNkNWY1NDEwYjFkZDkwMWQ5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-09T13:08:58Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-09T15:52:44Z"
      },
      "message": "Use unique_ptr for httpRPCTimerInterface (HTTPRPCTimerInterface)",
      "tree": {
        "sha": "9998486fa231051bb12d5a111a5e9f28e7a92666",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9998486fa231051bb12d5a111a5e9f28e7a92666"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a6f768896585c7077fca673d5f5410b1dd901d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a6f768896585c7077fca673d5f5410b1dd901d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a6f768896585c7077fca673d5f5410b1dd901d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a6f768896585c7077fca673d5f5410b1dd901d9/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "860e912583b48fef7dc5b0399c40a7696ccfec55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/860e912583b48fef7dc5b0399c40a7696ccfec55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/860e912583b48fef7dc5b0399c40a7696ccfec55"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "3b675b88e08a1a7a5211c1841d51ca97c1879346",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a6f768896585c7077fca673d5f5410b1dd901d9/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a6f768896585c7077fca673d5f5410b1dd901d9/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=5a6f768896585c7077fca673d5f5410b1dd901d9",
        "patch": "@@ -62,7 +62,7 @@ class HTTPRPCTimerInterface : public RPCTimerInterface\n /* Pre-base64-encoded authentication token */\n static std::string strRPCUserColonPass;\n /* Stored RPC timer interface (for unregistration) */\n-static HTTPRPCTimerInterface* httpRPCTimerInterface = nullptr;\n+static std::unique_ptr<HTTPRPCTimerInterface> httpRPCTimerInterface;\n \n static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const UniValue& id)\n {\n@@ -238,8 +238,8 @@ bool StartHTTPRPC()\n     RegisterHTTPHandler(\"/wallet/\", false, HTTPReq_JSONRPC);\n #endif\n     assert(EventBase());\n-    httpRPCTimerInterface = new HTTPRPCTimerInterface(EventBase());\n-    RPCSetTimerInterface(httpRPCTimerInterface);\n+    httpRPCTimerInterface = std::unique_ptr<HTTPRPCTimerInterface>(new HTTPRPCTimerInterface(EventBase()));\n+    RPCSetTimerInterface(httpRPCTimerInterface.get());\n     return true;\n }\n \n@@ -253,8 +253,7 @@ void StopHTTPRPC()\n     LogPrint(BCLog::RPC, \"Stopping HTTP RPC server\\n\");\n     UnregisterHTTPHandler(\"/\", true);\n     if (httpRPCTimerInterface) {\n-        RPCUnsetTimerInterface(httpRPCTimerInterface);\n-        delete httpRPCTimerInterface;\n-        httpRPCTimerInterface = nullptr;\n+        RPCUnsetTimerInterface(httpRPCTimerInterface.get());\n+        httpRPCTimerInterface.reset();\n     }\n }"
      }
    ]
  },
  {
    "sha": "fa6d1228e96c2b22a3b31bc738bb40d32ca4038b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTZkMTIyOGU5NmMyYjIyYTNiMzFiYzczOGJiNDBkMzJjYTQwMzhi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-09T13:35:43Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-09T15:52:44Z"
      },
      "message": "Use unique_ptr:s for {fee,short,long}Stats (TxConfirmStats)",
      "tree": {
        "sha": "b2e921ac506fe5716e6693b2a0cd15bcb1c6337e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2e921ac506fe5716e6693b2a0cd15bcb1c6337e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6d1228e96c2b22a3b31bc738bb40d32ca4038b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6d1228e96c2b22a3b31bc738bb40d32ca4038b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6d1228e96c2b22a3b31bc738bb40d32ca4038b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6d1228e96c2b22a3b31bc738bb40d32ca4038b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a6f768896585c7077fca673d5f5410b1dd901d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a6f768896585c7077fca673d5f5410b1dd901d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a6f768896585c7077fca673d5f5410b1dd901d9"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 12,
      "deletions": 18
    },
    "files": [
      {
        "sha": "a459186359513ddbea5ec8f5de58cbf8aafdaa70",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 15,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6d1228e96c2b22a3b31bc738bb40d32ca4038b/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6d1228e96c2b22a3b31bc738bb40d32ca4038b/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=fa6d1228e96c2b22a3b31bc738bb40d32ca4038b",
        "patch": "@@ -548,16 +548,13 @@ CBlockPolicyEstimator::CBlockPolicyEstimator()\n     bucketMap[INF_FEERATE] = bucketIndex;\n     assert(bucketMap.size() == buckets.size());\n \n-    feeStats = new TxConfirmStats(buckets, bucketMap, MED_BLOCK_PERIODS, MED_DECAY, MED_SCALE);\n-    shortStats = new TxConfirmStats(buckets, bucketMap, SHORT_BLOCK_PERIODS, SHORT_DECAY, SHORT_SCALE);\n-    longStats = new TxConfirmStats(buckets, bucketMap, LONG_BLOCK_PERIODS, LONG_DECAY, LONG_SCALE);\n+    feeStats = std::unique_ptr<TxConfirmStats>(new TxConfirmStats(buckets, bucketMap, MED_BLOCK_PERIODS, MED_DECAY, MED_SCALE));\n+    shortStats = std::unique_ptr<TxConfirmStats>(new TxConfirmStats(buckets, bucketMap, SHORT_BLOCK_PERIODS, SHORT_DECAY, SHORT_SCALE));\n+    longStats = std::unique_ptr<TxConfirmStats>(new TxConfirmStats(buckets, bucketMap, LONG_BLOCK_PERIODS, LONG_DECAY, LONG_SCALE));\n }\n \n CBlockPolicyEstimator::~CBlockPolicyEstimator()\n {\n-    delete feeStats;\n-    delete shortStats;\n-    delete longStats;\n }\n \n void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate)\n@@ -690,16 +687,16 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     double sufficientTxs = SUFFICIENT_FEETXS;\n     switch (horizon) {\n     case FeeEstimateHorizon::SHORT_HALFLIFE: {\n-        stats = shortStats;\n+        stats = shortStats.get();\n         sufficientTxs = SUFFICIENT_TXS_SHORT;\n         break;\n     }\n     case FeeEstimateHorizon::MED_HALFLIFE: {\n-        stats = feeStats;\n+        stats = feeStats.get();\n         break;\n     }\n     case FeeEstimateHorizon::LONG_HALFLIFE: {\n-        stats = longStats;\n+        stats = longStats.get();\n         break;\n     }\n     default: {\n@@ -1002,12 +999,9 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n             }\n \n             // Destroy old TxConfirmStats and point to new ones that already reference buckets and bucketMap\n-            delete feeStats;\n-            delete shortStats;\n-            delete longStats;\n-            feeStats = fileFeeStats.release();\n-            shortStats = fileShortStats.release();\n-            longStats = fileLongStats.release();\n+            feeStats = std::move(fileFeeStats);\n+            shortStats = std::move(fileShortStats);\n+            longStats = std::move(fileLongStats);\n \n             nBestSeenHeight = nFileBestSeenHeight;\n             historicalFirst = nFileHistoricalFirst;"
      },
      {
        "sha": "9c0937cbd6028ccfb495e42b9f9b39cbe460e042",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6d1228e96c2b22a3b31bc738bb40d32ca4038b/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6d1228e96c2b22a3b31bc738bb40d32ca4038b/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=fa6d1228e96c2b22a3b31bc738bb40d32ca4038b",
        "patch": "@@ -245,9 +245,9 @@ class CBlockPolicyEstimator\n     std::map<uint256, TxStatsInfo> mapMemPoolTxs;\n \n     /** Classes to track historical data on transaction confirmations */\n-    TxConfirmStats* feeStats;\n-    TxConfirmStats* shortStats;\n-    TxConfirmStats* longStats;\n+    std::unique_ptr<TxConfirmStats> feeStats;\n+    std::unique_ptr<TxConfirmStats> shortStats;\n+    std::unique_ptr<TxConfirmStats> longStats;\n \n     unsigned int trackedTxs;\n     unsigned int untrackedTxs;"
      }
    ]
  },
  {
    "sha": "0024531625dac862626a3adfe5e8b6e5d8498e0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDI0NTMxNjI1ZGFjODYyNjI2YTNhZGZlNWU4YjZlNWQ4NDk4ZTBi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-09T13:41:15Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-09T15:52:44Z"
      },
      "message": "Use unique_ptr for dbw (CDBWrapper)",
      "tree": {
        "sha": "f472b8bbdd491d1d64976966c84515dee89e7696",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f472b8bbdd491d1d64976966c84515dee89e7696"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0024531625dac862626a3adfe5e8b6e5d8498e0b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0024531625dac862626a3adfe5e8b6e5d8498e0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0024531625dac862626a3adfe5e8b6e5d8498e0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0024531625dac862626a3adfe5e8b6e5d8498e0b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa6d1228e96c2b22a3b31bc738bb40d32ca4038b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6d1228e96c2b22a3b31bc738bb40d32ca4038b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6d1228e96c2b22a3b31bc738bb40d32ca4038b"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 4,
      "deletions": 6
    },
    "files": [
      {
        "sha": "d204e9236ecc3f9fedd0b40453e5fd69c0c45fba",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0024531625dac862626a3adfe5e8b6e5d8498e0b/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0024531625dac862626a3adfe5e8b6e5d8498e0b/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=0024531625dac862626a3adfe5e8b6e5d8498e0b",
        "patch": "@@ -125,7 +125,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n-    CDBWrapper* dbw = new CDBWrapper(ph, (1 << 10), false, false, false);\n+    std::unique_ptr<CDBWrapper> dbw = std::unique_ptr<CDBWrapper>(new CDBWrapper(ph, (1 << 10), false, false, false));\n     char key = 'k';\n     uint256 in = InsecureRand256();\n     uint256 res;\n@@ -135,8 +135,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n \n     // Call the destructor to free leveldb LOCK\n-    delete dbw;\n-    dbw = nullptr;\n+    dbw.reset();\n \n     // Now, set up another wrapper that wants to obfuscate the same directory\n     CDBWrapper odbw(ph, (1 << 10), false, false, true);\n@@ -167,7 +166,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n-    CDBWrapper* dbw = new CDBWrapper(ph, (1 << 10), false, false, false);\n+    std::unique_ptr<CDBWrapper> dbw = std::unique_ptr<CDBWrapper>(new CDBWrapper(ph, (1 << 10), false, false, false));\n     char key = 'k';\n     uint256 in = InsecureRand256();\n     uint256 res;\n@@ -177,8 +176,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n \n     // Call the destructor to free leveldb LOCK\n-    delete dbw;\n-    dbw = nullptr;\n+    dbw.reset();\n \n     // Simulate a -reindex by wiping the existing data store\n     CDBWrapper odbw(ph, (1 << 10), false, true, true);"
      }
    ]
  },
  {
    "sha": "73db0635a38744b09058b590ac246af5499630c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2RiMDYzNWEzODc0NGIwOTA1OGI1OTBhYzI0NmFmNTQ5OTYzMGM5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-09T14:00:44Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-09T15:52:44Z"
      },
      "message": "Use unique_ptr for upnp_thread (boost::thread)",
      "tree": {
        "sha": "236cdac11035e74681fe8143fcf4f243764f567c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/236cdac11035e74681fe8143fcf4f243764f567c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73db0635a38744b09058b590ac246af5499630c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73db0635a38744b09058b590ac246af5499630c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73db0635a38744b09058b590ac246af5499630c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73db0635a38744b09058b590ac246af5499630c9/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0024531625dac862626a3adfe5e8b6e5d8498e0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0024531625dac862626a3adfe5e8b6e5d8498e0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0024531625dac862626a3adfe5e8b6e5d8498e0b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "2db1f2a04f4966bb40bea8d7e7435d8cf7a7730a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73db0635a38744b09058b590ac246af5499630c9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73db0635a38744b09058b590ac246af5499630c9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=73db0635a38744b09058b590ac246af5499630c9",
        "patch": "@@ -1534,22 +1534,20 @@ void ThreadMapPort()\n \n void MapPort(bool fUseUPnP)\n {\n-    static boost::thread* upnp_thread = nullptr;\n+    static std::unique_ptr<boost::thread> upnp_thread;\n \n     if (fUseUPnP)\n     {\n         if (upnp_thread) {\n             upnp_thread->interrupt();\n             upnp_thread->join();\n-            delete upnp_thread;\n         }\n-        upnp_thread = new boost::thread(boost::bind(&TraceThread<void (*)()>, \"upnp\", &ThreadMapPort));\n+        upnp_thread.reset(new boost::thread(boost::bind(&TraceThread<void (*)()>, \"upnp\", &ThreadMapPort)));\n     }\n     else if (upnp_thread) {\n         upnp_thread->interrupt();\n         upnp_thread->join();\n-        delete upnp_thread;\n-        upnp_thread = nullptr;\n+        upnp_thread.reset();\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "8ccf1bb0c31108762e47f28d9d592e8d4c788564",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Y2NmMWJiMGMzMTEwODc2MmU0N2YyOGQ5ZDU5MmU4ZDRjNzg4NTY0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-09T14:07:22Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-09T15:52:44Z"
      },
      "message": "Use unique_ptr for sem{Addnode,Outbound} (CSemaphore)",
      "tree": {
        "sha": "df1f221b3c3e7d28b743b99b259eb964cde4dff7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df1f221b3c3e7d28b743b99b259eb964cde4dff7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ccf1bb0c31108762e47f28d9d592e8d4c788564",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ccf1bb0c31108762e47f28d9d592e8d4c788564",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ccf1bb0c31108762e47f28d9d592e8d4c788564",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ccf1bb0c31108762e47f28d9d592e8d4c788564/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73db0635a38744b09058b590ac246af5499630c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73db0635a38744b09058b590ac246af5499630c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73db0635a38744b09058b590ac246af5499630c9"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 6,
      "deletions": 10
    },
    "files": [
      {
        "sha": "5f0a7a47706e474cee00248ecf0dfbce438823a9",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ccf1bb0c31108762e47f28d9d592e8d4c788564/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ccf1bb0c31108762e47f28d9d592e8d4c788564/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8ccf1bb0c31108762e47f28d9d592e8d4c788564",
        "patch": "@@ -2222,8 +2222,6 @@ CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSe\n     nLastNodeId = 0;\n     nSendBufferMaxSize = 0;\n     nReceiveFloodSize = 0;\n-    semOutbound = nullptr;\n-    semAddnode = nullptr;\n     flagInterruptMsgProc = false;\n     SetTryNewOutboundPeer(false);\n \n@@ -2329,11 +2327,11 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n \n     if (semOutbound == nullptr) {\n         // initialize semaphore\n-        semOutbound = new CSemaphore(std::min((nMaxOutbound + nMaxFeeler), nMaxConnections));\n+        semOutbound = std::unique_ptr<CSemaphore>(new CSemaphore(std::min((nMaxOutbound + nMaxFeeler), nMaxConnections)));\n     }\n     if (semAddnode == nullptr) {\n         // initialize semaphore\n-        semAddnode = new CSemaphore(nMaxAddnode);\n+        semAddnode = std::unique_ptr<CSemaphore>(new CSemaphore(nMaxAddnode));\n     }\n \n     //\n@@ -2456,10 +2454,8 @@ void CConnman::Stop()\n     vNodes.clear();\n     vNodesDisconnected.clear();\n     vhListenSocket.clear();\n-    delete semOutbound;\n-    semOutbound = nullptr;\n-    delete semAddnode;\n-    semAddnode = nullptr;\n+    semOutbound.reset();\n+    semAddnode.reset();\n }\n \n void CConnman::DeleteNode(CNode* pnode)"
      },
      {
        "sha": "668e92c0041324eab3123f88b6b751f1b58e68cc",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ccf1bb0c31108762e47f28d9d592e8d4c788564/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ccf1bb0c31108762e47f28d9d592e8d4c788564/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8ccf1bb0c31108762e47f28d9d592e8d4c788564",
        "patch": "@@ -399,8 +399,8 @@ class CConnman\n     /** Services this instance offers */\n     ServiceFlags nLocalServices;\n \n-    CSemaphore *semOutbound;\n-    CSemaphore *semAddnode;\n+    std::unique_ptr<CSemaphore> semOutbound;\n+    std::unique_ptr<CSemaphore> semAddnode;\n     int nMaxConnections;\n     int nMaxOutbound;\n     int nMaxAddnode;"
      }
    ]
  },
  {
    "sha": "f72cbf9ba970e997be84fb7b20795c6b9c62fb42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzJjYmY5YmE5NzBlOTk3YmU4NGZiN2IyMDc5NWM2YjljNjJmYjQy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-09T14:14:37Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-09T15:53:34Z"
      },
      "message": "Use unique_ptr for pfilter (CBloomFilter)",
      "tree": {
        "sha": "383f6395e4b38df1b8acb6c97b16b9a90c6be3a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/383f6395e4b38df1b8acb6c97b16b9a90c6be3a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f72cbf9ba970e997be84fb7b20795c6b9c62fb42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f72cbf9ba970e997be84fb7b20795c6b9c62fb42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f72cbf9ba970e997be84fb7b20795c6b9c62fb42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f72cbf9ba970e997be84fb7b20795c6b9c62fb42/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ccf1bb0c31108762e47f28d9d592e8d4c788564",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ccf1bb0c31108762e47f28d9d592e8d4c788564",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ccf1bb0c31108762e47f28d9d592e8d4c788564"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 4,
      "deletions": 8
    },
    "files": [
      {
        "sha": "6b0c131cf32e1c1e92266fe8cc32bbe9d25f2d00",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f72cbf9ba970e997be84fb7b20795c6b9c62fb42/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f72cbf9ba970e997be84fb7b20795c6b9c62fb42/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f72cbf9ba970e997be84fb7b20795c6b9c62fb42",
        "patch": "@@ -2741,7 +2741,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     nNextInvSend = 0;\n     fRelayTxes = false;\n     fSentAddr = false;\n-    pfilter = new CBloomFilter();\n+    pfilter = std::unique_ptr<CBloomFilter>(new CBloomFilter());\n     timeLastMempoolReq = 0;\n     nLastBlockTime = 0;\n     nLastTXTime = 0;\n@@ -2771,8 +2771,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n CNode::~CNode()\n {\n     CloseSocket(hSocket);\n-\n-    delete pfilter;\n }\n \n void CNode::AskFor(const CInv& inv)"
      },
      {
        "sha": "8cb00dd5a5947a61cff517341f6a0eb2a965c868",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f72cbf9ba970e997be84fb7b20795c6b9c62fb42/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f72cbf9ba970e997be84fb7b20795c6b9c62fb42/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f72cbf9ba970e997be84fb7b20795c6b9c62fb42",
        "patch": "@@ -648,7 +648,7 @@ class CNode\n     bool fSentAddr;\n     CSemaphoreGrant grantOutbound;\n     CCriticalSection cs_filter;\n-    CBloomFilter* pfilter;\n+    std::unique_ptr<CBloomFilter> pfilter;\n     std::atomic<int> nRefCount;\n \n     const uint64_t nKeyedNetGroup;"
      },
      {
        "sha": "3b26a98f4568e7b6061a28b01d69741609052d1e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f72cbf9ba970e997be84fb7b20795c6b9c62fb42/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f72cbf9ba970e997be84fb7b20795c6b9c62fb42/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=f72cbf9ba970e997be84fb7b20795c6b9c62fb42",
        "patch": "@@ -2755,8 +2755,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         else\n         {\n             LOCK(pfrom->cs_filter);\n-            delete pfrom->pfilter;\n-            pfrom->pfilter = new CBloomFilter(filter);\n+            pfrom->pfilter.reset(new CBloomFilter(filter));\n             pfrom->pfilter->UpdateEmptyFull();\n             pfrom->fRelayTxes = true;\n         }\n@@ -2792,8 +2791,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     {\n         LOCK(pfrom->cs_filter);\n         if (pfrom->GetLocalServices() & NODE_BLOOM) {\n-            delete pfrom->pfilter;\n-            pfrom->pfilter = new CBloomFilter();\n+            pfrom->pfilter.reset(new CBloomFilter());\n         }\n         pfrom->fRelayTxes = true;\n     }"
      }
    ]
  },
  {
    "sha": "29ab96dbd2bc76152de6eff09755b1b66b29474d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWFiOTZkYmQyYmM3NjE1MmRlNmVmZjA5NzU1YjFiNjZiMjk0NzRk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-09T14:24:12Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-09T15:53:34Z"
      },
      "message": "Use unique_ptr for dbenv (DbEnv)",
      "tree": {
        "sha": "7a8235235dd2f131f08783b8f227bae935bae7d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a8235235dd2f131f08783b8f227bae935bae7d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29ab96dbd2bc76152de6eff09755b1b66b29474d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29ab96dbd2bc76152de6eff09755b1b66b29474d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29ab96dbd2bc76152de6eff09755b1b66b29474d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29ab96dbd2bc76152de6eff09755b1b66b29474d/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f72cbf9ba970e997be84fb7b20795c6b9c62fb42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f72cbf9ba970e997be84fb7b20795c6b9c62fb42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f72cbf9ba970e997be84fb7b20795c6b9c62fb42"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 9,
      "deletions": 12
    },
    "files": [
      {
        "sha": "520c16d9c66dcaabd74580155e000227a655d47f",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 11,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29ab96dbd2bc76152de6eff09755b1b66b29474d/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29ab96dbd2bc76152de6eff09755b1b66b29474d/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=29ab96dbd2bc76152de6eff09755b1b66b29474d",
        "patch": "@@ -75,22 +75,19 @@ void CDBEnv::EnvShutdown()\n \n void CDBEnv::Reset()\n {\n-    delete dbenv;\n-    dbenv = new DbEnv(DB_CXX_NO_EXCEPTIONS);\n+    dbenv.reset(new DbEnv(DB_CXX_NO_EXCEPTIONS));\n     fDbEnvInit = false;\n     fMockDb = false;\n }\n \n-CDBEnv::CDBEnv() : dbenv(nullptr)\n+CDBEnv::CDBEnv()\n {\n     Reset();\n }\n \n CDBEnv::~CDBEnv()\n {\n     EnvShutdown();\n-    delete dbenv;\n-    dbenv = nullptr;\n }\n \n void CDBEnv::Close()\n@@ -182,7 +179,7 @@ CDBEnv::VerifyResult CDBEnv::Verify(const std::string& strFile, recoverFunc_type\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);\n \n-    Db db(dbenv, 0);\n+    Db db(dbenv.get(), 0);\n     int result = db.verify(strFile.c_str(), nullptr, nullptr, 0);\n     if (result == 0)\n         return VERIFY_OK;\n@@ -225,7 +222,7 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     }\n     LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n \n-    std::unique_ptr<Db> pdbCopy(new Db(bitdb.dbenv, 0));\n+    std::unique_ptr<Db> pdbCopy(new Db(bitdb.dbenv.get(), 0));\n     int ret = pdbCopy->open(nullptr,               // Txn pointer\n                             filename.c_str(),   // Filename\n                             \"main\",             // Logical db name\n@@ -334,7 +331,7 @@ bool CDBEnv::Salvage(const std::string& strFile, bool fAggressive, std::vector<C\n \n     std::stringstream strDump;\n \n-    Db db(dbenv, 0);\n+    Db db(dbenv.get(), 0);\n     int result = db.verify(strFile.c_str(), nullptr, &strDump, flags);\n     if (result == DB_VERIFY_BAD) {\n         LogPrintf(\"CDBEnv::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n@@ -525,7 +522,7 @@ bool CDB::Rewrite(CWalletDBWrapper& dbw, const char* pszSkip)\n                 std::string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     CDB db(dbw, \"r\");\n-                    Db* pdbCopy = new Db(env->dbenv, 0);\n+                    Db* pdbCopy = new Db(env->dbenv.get(), 0);\n \n                     int ret = pdbCopy->open(nullptr,               // Txn pointer\n                                             strFileRes.c_str(), // Filename\n@@ -577,10 +574,10 @@ bool CDB::Rewrite(CWalletDBWrapper& dbw, const char* pszSkip)\n                     delete pdbCopy;\n                 }\n                 if (fSuccess) {\n-                    Db dbA(env->dbenv, 0);\n+                    Db dbA(env->dbenv.get(), 0);\n                     if (dbA.remove(strFile.c_str(), nullptr, 0))\n                         fSuccess = false;\n-                    Db dbB(env->dbenv, 0);\n+                    Db dbB(env->dbenv.get(), 0);\n                     if (dbB.rename(strFileRes.c_str(), nullptr, strFile.c_str(), 0))\n                         fSuccess = false;\n                 }"
      },
      {
        "sha": "e6d5a9f293b7a68ae8c036de5786131352e0a377",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29ab96dbd2bc76152de6eff09755b1b66b29474d/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29ab96dbd2bc76152de6eff09755b1b66b29474d/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=29ab96dbd2bc76152de6eff09755b1b66b29474d",
        "patch": "@@ -36,7 +36,7 @@ class CDBEnv\n \n public:\n     mutable CCriticalSection cs_db;\n-    DbEnv *dbenv;\n+    std::unique_ptr<DbEnv> dbenv;\n     std::map<std::string, int> mapFileUseCount;\n     std::map<std::string, Db*> mapDb;\n "
      }
    ]
  },
  {
    "sha": "b45c597caadabbf10a1e34f2c9ee1d0916164eee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDVjNTk3Y2FhZGFiYmYxMGExZTM0ZjJjOWVlMWQwOTE2MTY0ZWVl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-09T14:30:57Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-09T15:53:34Z"
      },
      "message": "Use unique_ptr for pdbCopy (Db) and fix potential memory leak",
      "tree": {
        "sha": "d0b23ba9894f7764eb67a9d2e8344d477fcbbcdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0b23ba9894f7764eb67a9d2e8344d477fcbbcdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b45c597caadabbf10a1e34f2c9ee1d0916164eee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b45c597caadabbf10a1e34f2c9ee1d0916164eee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b45c597caadabbf10a1e34f2c9ee1d0916164eee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b45c597caadabbf10a1e34f2c9ee1d0916164eee/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29ab96dbd2bc76152de6eff09755b1b66b29474d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29ab96dbd2bc76152de6eff09755b1b66b29474d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29ab96dbd2bc76152de6eff09755b1b66b29474d"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cae8cd7dac06447572195264b83d8ac180624ad5",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b45c597caadabbf10a1e34f2c9ee1d0916164eee/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b45c597caadabbf10a1e34f2c9ee1d0916164eee/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=b45c597caadabbf10a1e34f2c9ee1d0916164eee",
        "patch": "@@ -522,7 +522,7 @@ bool CDB::Rewrite(CWalletDBWrapper& dbw, const char* pszSkip)\n                 std::string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     CDB db(dbw, \"r\");\n-                    Db* pdbCopy = new Db(env->dbenv.get(), 0);\n+                    std::unique_ptr<Db> pdbCopy = std::unique_ptr<Db>(new Db(env->dbenv.get(), 0));\n \n                     int ret = pdbCopy->open(nullptr,               // Txn pointer\n                                             strFileRes.c_str(), // Filename\n@@ -571,7 +571,6 @@ bool CDB::Rewrite(CWalletDBWrapper& dbw, const char* pszSkip)\n                     } else {\n                         pdbCopy->close(0);\n                     }\n-                    delete pdbCopy;\n                 }\n                 if (fSuccess) {\n                     Db dbA(env->dbenv.get(), 0);"
      }
    ]
  },
  {
    "sha": "d223bc940a16712f221f634047408e8771dff26c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjIzYmM5NDBhMTY3MTJmMjIxZjYzNDA0NzQwOGU4NzcxZGZmMjZj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-09T15:08:22Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-09T15:53:34Z"
      },
      "message": "Use unique_ptr for pcoinscatcher/pcoinsdbview/pcoinsTip/pblocktree\n\n* pcoinscatcher (CCoinsViewErrorCatcher)\n* pcoinsdbview (CCoinsViewDB)\n* pcoinsTip (CCoinsViewCache)\n* pblocktree (CBlockTreeDB)\n* Remove variables shadowing pcoinsdbview",
      "tree": {
        "sha": "2dcf31ccfdc50d7502a4626b21ace3d1613d45c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2dcf31ccfdc50d7502a4626b21ace3d1613d45c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d223bc940a16712f221f634047408e8771dff26c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d223bc940a16712f221f634047408e8771dff26c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d223bc940a16712f221f634047408e8771dff26c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d223bc940a16712f221f634047408e8771dff26c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b45c597caadabbf10a1e34f2c9ee1d0916164eee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b45c597caadabbf10a1e34f2c9ee1d0916164eee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b45c597caadabbf10a1e34f2c9ee1d0916164eee"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 47,
      "deletions": 57
    },
    "files": [
      {
        "sha": "7ac2cf2d32a6ce63a49b2c0919623dce4295f378",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 20,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d223bc940a16712f221f634047408e8771dff26c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d223bc940a16712f221f634047408e8771dff26c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d223bc940a16712f221f634047408e8771dff26c",
        "patch": "@@ -152,7 +152,7 @@ class CCoinsViewErrorCatcher final : public CCoinsViewBacked\n     // Writes do not need similar protection, as failure to write is handled by the caller.\n };\n \n-static CCoinsViewErrorCatcher *pcoinscatcher = nullptr;\n+static std::unique_ptr<CCoinsViewErrorCatcher> pcoinscatcher;\n static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n \n void Interrupt(boost::thread_group& threadGroup)\n@@ -235,14 +235,10 @@ void Shutdown()\n         if (pcoinsTip != nullptr) {\n             FlushStateToDisk();\n         }\n-        delete pcoinsTip;\n-        pcoinsTip = nullptr;\n-        delete pcoinscatcher;\n-        pcoinscatcher = nullptr;\n-        delete pcoinsdbview;\n-        pcoinsdbview = nullptr;\n-        delete pblocktree;\n-        pblocktree = nullptr;\n+        pcoinsTip.reset();\n+        pcoinscatcher.reset();\n+        pcoinsdbview.reset();\n+        pblocktree.reset();\n     }\n #ifdef ENABLE_WALLET\n     StopWallets();\n@@ -1406,12 +1402,10 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         do {\n             try {\n                 UnloadBlockIndex();\n-                delete pcoinsTip;\n-                delete pcoinsdbview;\n-                delete pcoinscatcher;\n-                delete pblocktree;\n-\n-                pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReset);\n+                pcoinsTip.reset();\n+                pcoinsdbview.reset();\n+                pcoinscatcher.reset();\n+                pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n \n                 if (fReset) {\n                     pblocktree->WriteReindexing(true);\n@@ -1462,8 +1456,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into mapBlockIndex!\n \n-                pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReset || fReindexChainState);\n-                pcoinscatcher = new CCoinsViewErrorCatcher(pcoinsdbview);\n+                pcoinsdbview.reset(new CCoinsViewDB(nCoinDBCache, false, fReset || fReindexChainState));\n+                pcoinscatcher.reset(new CCoinsViewErrorCatcher(pcoinsdbview.get()));\n \n                 // If necessary, upgrade from older database format.\n                 // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n@@ -1473,13 +1467,13 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 }\n \n                 // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!ReplayBlocks(chainparams, pcoinsdbview)) {\n+                if (!ReplayBlocks(chainparams, pcoinsdbview.get())) {\n                     strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n                     break;\n                 }\n \n                 // The on-disk coinsdb is now in a good state, create the cache\n-                pcoinsTip = new CCoinsViewCache(pcoinscatcher);\n+                pcoinsTip.reset(new CCoinsViewCache(pcoinscatcher.get()));\n \n                 bool is_coinsview_empty = fReset || fReindexChainState || pcoinsTip->GetBestBlock().IsNull();\n                 if (!is_coinsview_empty) {\n@@ -1521,7 +1515,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                         }\n                     }\n \n-                    if (!CVerifyDB().VerifyDB(chainparams, pcoinsdbview, gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                    if (!CVerifyDB().VerifyDB(chainparams, pcoinsdbview.get(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n                                   gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                         strLoadError = _(\"Corrupted block database detected\");\n                         break;"
      },
      {
        "sha": "ff6f796b3383691fd5ff30b77bc77c1225748ab8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d223bc940a16712f221f634047408e8771dff26c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d223bc940a16712f221f634047408e8771dff26c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d223bc940a16712f221f634047408e8771dff26c",
        "patch": "@@ -2106,7 +2106,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         if (!AlreadyHave(inv) &&\n             AcceptToMemoryPool(mempool, state, ptx, &fMissingInputs, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n-            mempool.check(pcoinsTip);\n+            mempool.check(pcoinsTip.get());\n             RelayTransaction(tx, connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n                 vWorkQueue.emplace_back(inv.hash, i);\n@@ -2173,7 +2173,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                             recentRejects->insert(orphanHash);\n                         }\n                     }\n-                    mempool.check(pcoinsTip);\n+                    mempool.check(pcoinsTip.get());\n                 }\n             }\n "
      },
      {
        "sha": "59d7f37841bf0b12be74ff8c53e4ae0b5899c0ac",
        "filename": "src/qt/test/rpcnestedtests.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d223bc940a16712f221f634047408e8771dff26c/src/qt/test/rpcnestedtests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d223bc940a16712f221f634047408e8771dff26c/src/qt/test/rpcnestedtests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.h?ref=d223bc940a16712f221f634047408e8771dff26c",
        "patch": "@@ -17,9 +17,6 @@ class RPCNestedTests : public QObject\n \n     private Q_SLOTS:\n     void rpcNestedTests();\n-\n-private:\n-    CCoinsViewDB *pcoinsdbview;\n };\n \n #endif // BITCOIN_QT_TEST_RPC_NESTED_TESTS_H"
      },
      {
        "sha": "4a3404308d8cb2b5d68c29acb027ab37c1d0a210",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d223bc940a16712f221f634047408e8771dff26c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d223bc940a16712f221f634047408e8771dff26c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=d223bc940a16712f221f634047408e8771dff26c",
        "patch": "@@ -928,7 +928,7 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n \n     CCoinsStats stats;\n     FlushStateToDisk();\n-    if (GetUTXOStats(pcoinsdbview, stats)) {\n+    if (GetUTXOStats(pcoinsdbview.get(), stats)) {\n         ret.push_back(Pair(\"height\", (int64_t)stats.nHeight));\n         ret.push_back(Pair(\"bestblock\", stats.hashBlock.GetHex()));\n         ret.push_back(Pair(\"transactions\", (int64_t)stats.nTransactions));\n@@ -996,7 +996,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n     Coin coin;\n     if (fMempool) {\n         LOCK(mempool.cs);\n-        CCoinsViewMemPool view(pcoinsTip, mempool);\n+        CCoinsViewMemPool view(pcoinsTip.get(), mempool);\n         if (!view.GetCoin(out, coin) || mempool.isSpent(out)) {\n             return NullUniValue;\n         }\n@@ -1048,7 +1048,7 @@ UniValue verifychain(const JSONRPCRequest& request)\n     if (!request.params[1].isNull())\n         nCheckDepth = request.params[1].get_int();\n \n-    return CVerifyDB().VerifyDB(Params(), pcoinsTip, nCheckLevel, nCheckDepth);\n+    return CVerifyDB().VerifyDB(Params(), pcoinsTip.get(), nCheckLevel, nCheckDepth);\n }\n \n /** Implementation of IsSuperMajority with better feedback */"
      },
      {
        "sha": "0d7d52478f70f4e42c88cdb2b2bb24c3f6358953",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d223bc940a16712f221f634047408e8771dff26c/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d223bc940a16712f221f634047408e8771dff26c/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=d223bc940a16712f221f634047408e8771dff26c",
        "patch": "@@ -81,9 +81,9 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n \n         mempool.setSanityCheck(1.0);\n-        pblocktree = new CBlockTreeDB(1 << 20, true);\n-        pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n-        pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n+        pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n+        pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n+        pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n         if (!LoadGenesisBlock(chainparams)) {\n             throw std::runtime_error(\"LoadGenesisBlock failed.\");\n         }\n@@ -110,9 +110,9 @@ TestingSetup::~TestingSetup()\n         g_connman.reset();\n         peerLogic.reset();\n         UnloadBlockIndex();\n-        delete pcoinsTip;\n-        delete pcoinsdbview;\n-        delete pblocktree;\n+        pcoinsTip.reset();\n+        pcoinsdbview.reset();\n+        pblocktree.reset();\n         fs::remove_all(pathTemp);\n }\n "
      },
      {
        "sha": "6398386d4215f7f0f7dbf186901deefdb8937b6c",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d223bc940a16712f221f634047408e8771dff26c/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d223bc940a16712f221f634047408e8771dff26c/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=d223bc940a16712f221f634047408e8771dff26c",
        "patch": "@@ -57,7 +57,6 @@ struct CConnmanTest {\n \n class PeerLogicValidation;\n struct TestingSetup: public BasicTestingSetup {\n-    CCoinsViewDB *pcoinsdbview;\n     fs::path pathTemp;\n     boost::thread_group threadGroup;\n     CConnman* connman;"
      },
      {
        "sha": "7d551a7bb4a3b5e602b2b4572d165d849be33b87",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d223bc940a16712f221f634047408e8771dff26c/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d223bc940a16712f221f634047408e8771dff26c/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=d223bc940a16712f221f634047408e8771dff26c",
        "patch": "@@ -119,7 +119,7 @@ void ValidateCheckInputsForAllFlags(CMutableTransaction &tx, uint32_t failing_fl\n             // WITNESS requires P2SH\n             test_flags |= SCRIPT_VERIFY_P2SH;\n         }\n-        bool ret = CheckInputs(tx, state, pcoinsTip, true, test_flags, true, add_to_cache, txdata, nullptr);\n+        bool ret = CheckInputs(tx, state, pcoinsTip.get(), true, test_flags, true, add_to_cache, txdata, nullptr);\n         // CheckInputs should succeed iff test_flags doesn't intersect with\n         // failing_flags\n         bool expected_return_value = !(test_flags & failing_flags);\n@@ -135,13 +135,13 @@ void ValidateCheckInputsForAllFlags(CMutableTransaction &tx, uint32_t failing_fl\n         if (ret && add_to_cache) {\n             // Check that we get a cache hit if the tx was valid\n             std::vector<CScriptCheck> scriptchecks;\n-            BOOST_CHECK(CheckInputs(tx, state, pcoinsTip, true, test_flags, true, add_to_cache, txdata, &scriptchecks));\n+            BOOST_CHECK(CheckInputs(tx, state, pcoinsTip.get(), true, test_flags, true, add_to_cache, txdata, &scriptchecks));\n             BOOST_CHECK(scriptchecks.empty());\n         } else {\n             // Check that we get script executions to check, if the transaction\n             // was invalid, or we didn't add to cache.\n             std::vector<CScriptCheck> scriptchecks;\n-            BOOST_CHECK(CheckInputs(tx, state, pcoinsTip, true, test_flags, true, add_to_cache, txdata, &scriptchecks));\n+            BOOST_CHECK(CheckInputs(tx, state, pcoinsTip.get(), true, test_flags, true, add_to_cache, txdata, &scriptchecks));\n             BOOST_CHECK_EQUAL(scriptchecks.size(), tx.vin.size());\n         }\n     }\n@@ -201,13 +201,13 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         CValidationState state;\n         PrecomputedTransactionData ptd_spend_tx(spend_tx);\n \n-        BOOST_CHECK(!CheckInputs(spend_tx, state, pcoinsTip, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, nullptr));\n+        BOOST_CHECK(!CheckInputs(spend_tx, state, pcoinsTip.get(), true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, nullptr));\n \n         // If we call again asking for scriptchecks (as happens in\n         // ConnectBlock), we should add a script check object for this -- we're\n         // not caching invalidity (if that changes, delete this test case).\n         std::vector<CScriptCheck> scriptchecks;\n-        BOOST_CHECK(CheckInputs(spend_tx, state, pcoinsTip, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, &scriptchecks));\n+        BOOST_CHECK(CheckInputs(spend_tx, state, pcoinsTip.get(), true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, &scriptchecks));\n         BOOST_CHECK_EQUAL(scriptchecks.size(), 1);\n \n         // Test that CheckInputs returns true iff DERSIG-enforcing flags are\n@@ -268,7 +268,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n         CValidationState state;\n         PrecomputedTransactionData txdata(invalid_with_cltv_tx);\n-        BOOST_CHECK(CheckInputs(invalid_with_cltv_tx, state, pcoinsTip, true, SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, true, txdata, nullptr));\n+        BOOST_CHECK(CheckInputs(invalid_with_cltv_tx, state, pcoinsTip.get(), true, SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, true, txdata, nullptr));\n     }\n \n     // TEST CHECKSEQUENCEVERIFY\n@@ -296,7 +296,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n         CValidationState state;\n         PrecomputedTransactionData txdata(invalid_with_csv_tx);\n-        BOOST_CHECK(CheckInputs(invalid_with_csv_tx, state, pcoinsTip, true, SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, true, txdata, nullptr));\n+        BOOST_CHECK(CheckInputs(invalid_with_csv_tx, state, pcoinsTip.get(), true, SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, true, txdata, nullptr));\n     }\n \n     // TODO: add tests for remaining script flags\n@@ -358,12 +358,12 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         CValidationState state;\n         PrecomputedTransactionData txdata(tx);\n         // This transaction is now invalid under segwit, because of the second input.\n-        BOOST_CHECK(!CheckInputs(tx, state, pcoinsTip, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, nullptr));\n+        BOOST_CHECK(!CheckInputs(tx, state, pcoinsTip.get(), true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, nullptr));\n \n         std::vector<CScriptCheck> scriptchecks;\n         // Make sure this transaction was not cached (ie because the first\n         // input was valid)\n-        BOOST_CHECK(CheckInputs(tx, state, pcoinsTip, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, &scriptchecks));\n+        BOOST_CHECK(CheckInputs(tx, state, pcoinsTip.get(), true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, &scriptchecks));\n         // Should get 2 script checks back -- caching is on a whole-transaction basis.\n         BOOST_CHECK_EQUAL(scriptchecks.size(), 2);\n     }"
      },
      {
        "sha": "e7b6fc52a8e04f83a561c0759703fe8dbc578b5a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d223bc940a16712f221f634047408e8771dff26c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d223bc940a16712f221f634047408e8771dff26c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d223bc940a16712f221f634047408e8771dff26c",
        "patch": "@@ -201,9 +201,9 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n     return chain.Genesis();\n }\n \n-CCoinsViewDB *pcoinsdbview = nullptr;\n-CCoinsViewCache *pcoinsTip = nullptr;\n-CBlockTreeDB *pblocktree = nullptr;\n+std::unique_ptr<CCoinsViewDB> pcoinsdbview;\n+std::unique_ptr<CCoinsViewCache> pcoinsTip;\n+std::unique_ptr<CBlockTreeDB> pblocktree;\n \n enum FlushStateMode {\n     FLUSH_STATE_NONE,\n@@ -295,7 +295,7 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool\n     }\n     else {\n         // pcoinsTip contains the UTXO set for chainActive.Tip()\n-        CCoinsViewMemPool viewMemPool(pcoinsTip, mempool);\n+        CCoinsViewMemPool viewMemPool(pcoinsTip.get(), mempool);\n         std::vector<int> prevheights;\n         prevheights.resize(tx.vin.size());\n         for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n@@ -424,7 +424,7 @@ void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool f\n     mempool.UpdateTransactionsFromBlock(vHashUpdate);\n \n     // We also need to remove any now-immature transactions\n-    mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n+    mempool.removeForReorg(pcoinsTip.get(), chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     // Re-limit mempool size, in case we added any transactions\n     LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n }\n@@ -557,7 +557,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         LockPoints lp;\n         {\n         LOCK(pool.cs);\n-        CCoinsViewMemPool viewMemPool(pcoinsTip, pool);\n+        CCoinsViewMemPool viewMemPool(pcoinsTip.get(), pool);\n         view.SetBackend(viewMemPool);\n \n         // do all inputs exist?\n@@ -2105,7 +2105,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     // Apply the block atomically to the chain state.\n     int64_t nStart = GetTimeMicros();\n     {\n-        CCoinsViewCache view(pcoinsTip);\n+        CCoinsViewCache view(pcoinsTip.get());\n         assert(view.GetBestBlock() == pindexDelete->GetBlockHash());\n         if (DisconnectBlock(block, pindexDelete, view) != DISCONNECT_OK)\n             return error(\"DisconnectTip(): DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n@@ -2235,7 +2235,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     int64_t nTime3;\n     LogPrint(BCLog::BENCH, \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * MILLI, nTimeReadFromDisk * MICRO);\n     {\n-        CCoinsViewCache view(pcoinsTip);\n+        CCoinsViewCache view(pcoinsTip.get());\n         bool rv = ConnectBlock(blockConnecting, state, pindexNew, view, chainparams);\n         GetMainSignals().BlockChecked(blockConnecting, state);\n         if (!rv) {\n@@ -2413,7 +2413,7 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n         // any disconnected transactions back to the mempool.\n         UpdateMempoolForReorg(disconnectpool, true);\n     }\n-    mempool.check(pcoinsTip);\n+    mempool.check(pcoinsTip.get());\n \n     // Callbacks/notifications for a new best chain.\n     if (fInvalidFound)\n@@ -3275,7 +3275,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n {\n     AssertLockHeld(cs_main);\n     assert(pindexPrev && pindexPrev == chainActive.Tip());\n-    CCoinsViewCache viewNew(pcoinsTip);\n+    CCoinsViewCache viewNew(pcoinsTip.get());\n     CBlockIndex indexDummy(block);\n     indexDummy.pprev = pindexPrev;\n     indexDummy.nHeight = pindexPrev->nHeight + 1;"
      },
      {
        "sha": "f2ffdc89931af5fc41b58b8f1ac3e8a51c1daa81",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d223bc940a16712f221f634047408e8771dff26c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d223bc940a16712f221f634047408e8771dff26c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=d223bc940a16712f221f634047408e8771dff26c",
        "patch": "@@ -444,13 +444,13 @@ bool ResetBlockFailureFlags(CBlockIndex *pindex);\n extern CChain chainActive;\n \n /** Global variable that points to the coins database (protected by cs_main) */\n-extern CCoinsViewDB *pcoinsdbview;\n+extern std::unique_ptr<CCoinsViewDB> pcoinsdbview;\n \n /** Global variable that points to the active CCoinsView (protected by cs_main) */\n-extern CCoinsViewCache *pcoinsTip;\n+extern std::unique_ptr<CCoinsViewCache> pcoinsTip;\n \n /** Global variable that points to the active block tree (protected by cs_main) */\n-extern CBlockTreeDB *pblocktree;\n+extern std::unique_ptr<CBlockTreeDB> pblocktree;\n \n /**\n  * Return the spend height, which is one more than the inputs.GetBestBlock()."
      }
    ]
  },
  {
    "sha": "86179897e230d8e5244fa7690ae1bc84b7958b9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjE3OTg5N2UyMzBkOGU1MjQ0ZmE3NjkwYWUxYmM4NGI3OTU4Yjli",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-15T04:59:08Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-09T15:53:34Z"
      },
      "message": "Add MakeUnique (substitute for C++14 std::make_unique)\n\nFrom @ryanofsky:s #10973. Thanks!",
      "tree": {
        "sha": "586dd9551d2b5bfb01e25ccdd6a33c1e6b389e26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/586dd9551d2b5bfb01e25ccdd6a33c1e6b389e26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86179897e230d8e5244fa7690ae1bc84b7958b9b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86179897e230d8e5244fa7690ae1bc84b7958b9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86179897e230d8e5244fa7690ae1bc84b7958b9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86179897e230d8e5244fa7690ae1bc84b7958b9b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d223bc940a16712f221f634047408e8771dff26c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d223bc940a16712f221f634047408e8771dff26c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d223bc940a16712f221f634047408e8771dff26c"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "43acd93ee260e640914cc190c3093ab88a64ab77",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86179897e230d8e5244fa7690ae1bc84b7958b9b/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86179897e230d8e5244fa7690ae1bc84b7958b9b/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=86179897e230d8e5244fa7690ae1bc84b7958b9b",
        "patch": "@@ -326,4 +326,11 @@ template <typename Callable> void TraceThread(const char* name,  Callable func)\n \n std::string CopyrightHolders(const std::string& strPrefix);\n \n+//! Substitute for C++14 std::make_unique.\n+template <typename T, typename... Args>\n+std::unique_ptr<T> MakeUnique(Args&&... args)\n+{\n+    return std::unique_ptr<T>(new T(std::forward<Args>(args)...));\n+}\n+\n #endif // BITCOIN_UTIL_H"
      }
    ]
  },
  {
    "sha": "3e09b390b411298b9da8cc3f92132bfad15ac156",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTA5YjM5MGI0MTEyOThiOWRhOGNjM2Y5MjEzMmJmYWQxNWFjMTU2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-15T05:46:56Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-09T15:53:34Z"
      },
      "message": "Use MakeUnique<T>(...) instead of std::unique_ptr<T>(new T(...))",
      "tree": {
        "sha": "034c464e339d74d67ee61f32ca23e82cb03b3d21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/034c464e339d74d67ee61f32ca23e82cb03b3d21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e09b390b411298b9da8cc3f92132bfad15ac156",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e09b390b411298b9da8cc3f92132bfad15ac156",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e09b390b411298b9da8cc3f92132bfad15ac156",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e09b390b411298b9da8cc3f92132bfad15ac156/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86179897e230d8e5244fa7690ae1bc84b7958b9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86179897e230d8e5244fa7690ae1bc84b7958b9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86179897e230d8e5244fa7690ae1bc84b7958b9b"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "dbd09595c6ed21087fb9fc9c78563d3ea8f12ec3",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e09b390b411298b9da8cc3f92132bfad15ac156/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e09b390b411298b9da8cc3f92132bfad15ac156/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=3e09b390b411298b9da8cc3f92132bfad15ac156",
        "patch": "@@ -238,7 +238,7 @@ bool StartHTTPRPC()\n     RegisterHTTPHandler(\"/wallet/\", false, HTTPReq_JSONRPC);\n #endif\n     assert(EventBase());\n-    httpRPCTimerInterface = std::unique_ptr<HTTPRPCTimerInterface>(new HTTPRPCTimerInterface(EventBase()));\n+    httpRPCTimerInterface = MakeUnique<HTTPRPCTimerInterface>(EventBase());\n     RPCSetTimerInterface(httpRPCTimerInterface.get());\n     return true;\n }"
      },
      {
        "sha": "0f9de81d7f9749493adc5ba980b4dfc69bcc3661",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e09b390b411298b9da8cc3f92132bfad15ac156/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e09b390b411298b9da8cc3f92132bfad15ac156/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3e09b390b411298b9da8cc3f92132bfad15ac156",
        "patch": "@@ -2327,11 +2327,11 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n \n     if (semOutbound == nullptr) {\n         // initialize semaphore\n-        semOutbound = std::unique_ptr<CSemaphore>(new CSemaphore(std::min((nMaxOutbound + nMaxFeeler), nMaxConnections)));\n+        semOutbound = MakeUnique<CSemaphore>(std::min((nMaxOutbound + nMaxFeeler), nMaxConnections));\n     }\n     if (semAddnode == nullptr) {\n         // initialize semaphore\n-        semAddnode = std::unique_ptr<CSemaphore>(new CSemaphore(nMaxAddnode));\n+        semAddnode = MakeUnique<CSemaphore>(nMaxAddnode);\n     }\n \n     //\n@@ -2741,7 +2741,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     nNextInvSend = 0;\n     fRelayTxes = false;\n     fSentAddr = false;\n-    pfilter = std::unique_ptr<CBloomFilter>(new CBloomFilter());\n+    pfilter = MakeUnique<CBloomFilter>();\n     timeLastMempoolReq = 0;\n     nLastBlockTime = 0;\n     nLastTXTime = 0;"
      },
      {
        "sha": "c1625cf47617c2a3ea3ac666f641532ee4fbb4b6",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e09b390b411298b9da8cc3f92132bfad15ac156/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e09b390b411298b9da8cc3f92132bfad15ac156/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=3e09b390b411298b9da8cc3f92132bfad15ac156",
        "patch": "@@ -125,7 +125,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n-    std::unique_ptr<CDBWrapper> dbw = std::unique_ptr<CDBWrapper>(new CDBWrapper(ph, (1 << 10), false, false, false));\n+    std::unique_ptr<CDBWrapper> dbw = MakeUnique<CDBWrapper>(ph, (1 << 10), false, false, false);\n     char key = 'k';\n     uint256 in = InsecureRand256();\n     uint256 res;\n@@ -166,7 +166,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n-    std::unique_ptr<CDBWrapper> dbw = std::unique_ptr<CDBWrapper>(new CDBWrapper(ph, (1 << 10), false, false, false));\n+    std::unique_ptr<CDBWrapper> dbw = MakeUnique<CDBWrapper>(ph, (1 << 10), false, false, false);\n     char key = 'k';\n     uint256 in = InsecureRand256();\n     uint256 res;"
      },
      {
        "sha": "0ae5f2b15610f4805beae7d2c554e2ebb1117f14",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e09b390b411298b9da8cc3f92132bfad15ac156/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e09b390b411298b9da8cc3f92132bfad15ac156/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=3e09b390b411298b9da8cc3f92132bfad15ac156",
        "patch": "@@ -222,7 +222,7 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     }\n     LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n \n-    std::unique_ptr<Db> pdbCopy(new Db(bitdb.dbenv.get(), 0));\n+    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(bitdb.dbenv.get(), 0);\n     int ret = pdbCopy->open(nullptr,               // Txn pointer\n                             filename.c_str(),   // Filename\n                             \"main\",             // Logical db name\n@@ -522,7 +522,7 @@ bool CDB::Rewrite(CWalletDBWrapper& dbw, const char* pszSkip)\n                 std::string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     CDB db(dbw, \"r\");\n-                    std::unique_ptr<Db> pdbCopy = std::unique_ptr<Db>(new Db(env->dbenv.get(), 0));\n+                    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n \n                     int ret = pdbCopy->open(nullptr,               // Txn pointer\n                                             strFileRes.c_str(), // Filename"
      },
      {
        "sha": "34f210fcd7572abe3b761d5cb493ca484698c701",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e09b390b411298b9da8cc3f92132bfad15ac156/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e09b390b411298b9da8cc3f92132bfad15ac156/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=3e09b390b411298b9da8cc3f92132bfad15ac156",
        "patch": "@@ -17,7 +17,7 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n \n     bool fFirstRun;\n     std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"));\n-    pwalletMain = std::unique_ptr<CWallet>(new CWallet(std::move(dbw)));\n+    pwalletMain = MakeUnique<CWallet>(std::move(dbw));\n     pwalletMain->LoadWallet(fFirstRun);\n     RegisterValidationInterface(pwalletMain.get());\n "
      },
      {
        "sha": "dceb818b50e0ada5a1e9e2f654233d9003861877",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e09b390b411298b9da8cc3f92132bfad15ac156/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e09b390b411298b9da8cc3f92132bfad15ac156/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3e09b390b411298b9da8cc3f92132bfad15ac156",
        "patch": "@@ -3806,7 +3806,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n \n         std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, walletFile));\n-        std::unique_ptr<CWallet> tempWallet(new CWallet(std::move(dbw)));\n+        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(std::move(dbw));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DB_LOAD_OK) {\n             InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));"
      }
    ]
  },
  {
    "sha": "a357293c871d7eb9ccaf9fff61736248319f7a63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzU3MjkzYzg3MWQ3ZWI5Y2NhZjlmZmY2MTczNjI0ODMxOWY3YTYz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-18T21:21:06Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-09T15:53:34Z"
      },
      "message": "Use MakeUnique<Db>(...)",
      "tree": {
        "sha": "2911d7c26cc83783270549639cefc51c629f871d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2911d7c26cc83783270549639cefc51c629f871d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a357293c871d7eb9ccaf9fff61736248319f7a63",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a357293c871d7eb9ccaf9fff61736248319f7a63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a357293c871d7eb9ccaf9fff61736248319f7a63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a357293c871d7eb9ccaf9fff61736248319f7a63/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e09b390b411298b9da8cc3f92132bfad15ac156",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e09b390b411298b9da8cc3f92132bfad15ac156",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e09b390b411298b9da8cc3f92132bfad15ac156"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ca8e680ff710176e88aaf69fd685cc0f2ff85508",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a357293c871d7eb9ccaf9fff61736248319f7a63/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a357293c871d7eb9ccaf9fff61736248319f7a63/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=a357293c871d7eb9ccaf9fff61736248319f7a63",
        "patch": "@@ -413,7 +413,7 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n         pdb = env->mapDb[strFilename];\n         if (pdb == nullptr) {\n             int ret;\n-            std::unique_ptr<Db> pdb_temp(new Db(env->dbenv, 0));\n+            std::unique_ptr<Db> pdb_temp = MakeUnique<Db>(env->dbenv.get(), 0);\n \n             bool fMockDb = env->IsMock();\n             if (fMockDb) {"
      }
    ]
  }
]