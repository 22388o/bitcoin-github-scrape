[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/509228982",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#issuecomment-509228982",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16334",
    "id": 509228982,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTIyODk4Mg==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-08T13:39:13Z",
    "updated_at": "2019-07-08T13:39:13Z",
    "author_association": "MEMBER",
    "body": "Looks like the \"tidy up run_test\" commit was duplicated!\r\n\r\n> Good refactoring! Ran test locally, checked that they could fail, reviewed code.\r\n\r\nThanks for reviewing/testing.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/509228982/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/509239145",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#issuecomment-509239145",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16334",
    "id": 509239145,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTIzOTE0NQ==",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?u=62e3204f6586795420395a7059ec7dc7c4a40c7d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-08T14:05:14Z",
    "updated_at": "2019-07-08T14:05:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Looks like the \"tidy up run_test\" commit was duplicated!\r\n> \r\n> > Good refactoring! Ran test locally, checked that they could fail, reviewed code.\r\n> \r\n> Thanks for reviewing/testing.\r\n\r\nOh they're not duplicates, both tidy-ups but easier to review when separate. :-) I'm gunna squash everything together after review.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/509239145/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/509308984",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#issuecomment-509308984",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16334",
    "id": 509308984,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTMwODk4NA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-08T17:02:05Z",
    "updated_at": "2019-07-08T17:02:05Z",
    "author_association": "MEMBER",
    "body": "I think they should be kept separate commits, to make review after merge easier and preserve history for future reference.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/509308984/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/509374679",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#issuecomment-509374679",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16334",
    "id": 509374679,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTM3NDY3OQ==",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?u=62e3204f6586795420395a7059ec7dc7c4a40c7d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-08T20:14:46Z",
    "updated_at": "2019-07-08T20:14:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Since we're not squashing, I reworded the commit messages to be more descriptive and rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/509374679/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/511005775",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#issuecomment-511005775",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16334",
    "id": 511005775,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTAwNTc3NQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-12T19:28:13Z",
    "updated_at": "2019-07-12T19:28:13Z",
    "author_association": "MEMBER",
    "body": "ACK e263a343d4b6a2622df6bb734cd9d51a0d20a663",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/511005775/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300216890",
    "pull_request_review_id": 257813629,
    "id": 300216890,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDIxNjg5MA==",
    "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"",
    "path": "test/functional/rpc_users.py",
    "position": null,
    "original_position": 158,
    "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
    "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
    "user": {
      "login": "qmma70",
      "id": 5808517,
      "node_id": "MDQ6VXNlcjU4MDg1MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5808517?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/qmma70",
      "html_url": "https://github.com/qmma70",
      "followers_url": "https://api.github.com/users/qmma70/followers",
      "following_url": "https://api.github.com/users/qmma70/following{/other_user}",
      "gists_url": "https://api.github.com/users/qmma70/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/qmma70/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/qmma70/subscriptions",
      "organizations_url": "https://api.github.com/users/qmma70/orgs",
      "repos_url": "https://api.github.com/users/qmma70/repos",
      "events_url": "https://api.github.com/users/qmma70/events{/privacy}",
      "received_events_url": "https://api.github.com/users/qmma70/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Minor: maybe rename this `rtpassword` or something similar to avoid confusion with `self.password`?",
    "created_at": "2019-07-04T03:26:27Z",
    "updated_at": "2019-07-08T20:13:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300216890",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300216890"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300216890"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300216890/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 91,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300220844",
    "pull_request_review_id": 257818380,
    "id": 300220844,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDIyMDg0NA==",
    "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuser\ud83d\udcbb:rpcpassword\ud83d\udd11\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuser\ud83d\udcbb\", \"rpcpassword\ud83d\udd11\")",
    "path": "test/functional/rpc_users.py",
    "position": null,
    "original_position": 213,
    "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
    "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
    "user": {
      "login": "fqlx",
      "id": 1562849,
      "node_id": "MDQ6VXNlcjE1NjI4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fqlx",
      "html_url": "https://github.com/fqlx",
      "followers_url": "https://api.github.com/users/fqlx/followers",
      "following_url": "https://api.github.com/users/fqlx/following{/other_user}",
      "gists_url": "https://api.github.com/users/fqlx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fqlx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
      "organizations_url": "https://api.github.com/users/fqlx/orgs",
      "repos_url": "https://api.github.com/users/fqlx/repos",
      "events_url": "https://api.github.com/users/fqlx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fqlx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why do we have emojis in the code?",
    "created_at": "2019-07-04T03:57:20Z",
    "updated_at": "2019-07-08T20:13:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300220844",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300220844"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300220844"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300220844/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 104,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300342323",
    "pull_request_review_id": 257970677,
    "id": 300342323,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDM0MjMyMw==",
    "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuser\ud83d\udcbb:rpcpassword\ud83d\udd11\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuser\ud83d\udcbb\", \"rpcpassword\ud83d\udd11\")",
    "path": "test/functional/rpc_users.py",
    "position": null,
    "original_position": 213,
    "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
    "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "it's arbitrary, but the thinking is: if it can handle emoji, it can handle any UTF symbol",
    "created_at": "2019-07-04T10:45:54Z",
    "updated_at": "2019-07-08T20:13:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300342323",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300342323"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300342323"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300342323/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 104,
    "side": "RIGHT",
    "in_reply_to_id": 300220844
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300399720",
    "pull_request_review_id": 258044877,
    "id": 300399720,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDM5OTcyMA==",
    "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuser\ud83d\udcbb:rpcpassword\ud83d\udd11\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuser\ud83d\udcbb\", \"rpcpassword\ud83d\udd11\")",
    "path": "test/functional/rpc_users.py",
    "position": null,
    "original_position": 213,
    "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
    "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
    "user": {
      "login": "fqlx",
      "id": 1562849,
      "node_id": "MDQ6VXNlcjE1NjI4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fqlx",
      "html_url": "https://github.com/fqlx",
      "followers_url": "https://api.github.com/users/fqlx/followers",
      "following_url": "https://api.github.com/users/fqlx/following{/other_user}",
      "gists_url": "https://api.github.com/users/fqlx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fqlx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
      "organizations_url": "https://api.github.com/users/fqlx/orgs",
      "repos_url": "https://api.github.com/users/fqlx/repos",
      "events_url": "https://api.github.com/users/fqlx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fqlx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Just because it can handle emojis doesn't mean it's a good idea to use. Can we remove them?",
    "created_at": "2019-07-04T13:30:40Z",
    "updated_at": "2019-07-08T20:13:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300399720",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300399720"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300399720"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300399720/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 104,
    "side": "RIGHT",
    "in_reply_to_id": 300220844
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300402590",
    "pull_request_review_id": 258048645,
    "id": 300402590,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDQwMjU5MA==",
    "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuser\ud83d\udcbb:rpcpassword\ud83d\udd11\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuser\ud83d\udcbb\", \"rpcpassword\ud83d\udd11\")",
    "path": "test/functional/rpc_users.py",
    "position": null,
    "original_position": 213,
    "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
    "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "We are already using emojis elsewhere in the functional test suite.\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/413e438ea9767710d4810c4400fd1242ca52cd1c/test/functional/test_runner.py#L255",
    "created_at": "2019-07-04T13:37:27Z",
    "updated_at": "2019-07-08T20:13:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300402590",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300402590"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300402590"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300402590/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 104,
    "side": "RIGHT",
    "in_reply_to_id": 300220844
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300455609",
    "pull_request_review_id": 258115619,
    "id": 300455609,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDQ1NTYwOQ==",
    "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuser\ud83d\udcbb:rpcpassword\ud83d\udd11\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuser\ud83d\udcbb\", \"rpcpassword\ud83d\udd11\")",
    "path": "test/functional/rpc_users.py",
    "position": null,
    "original_position": 213,
    "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
    "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Emojis are UTF symbols. It is good to test that we are able to handle UTF symbols, especially in places that people may have entered them such as the configuration files where there may be UTF symbols in passwords or file paths. As such, it would be detrimental to remove them as otherwise we are losing the tests for these.",
    "created_at": "2019-07-04T16:05:31Z",
    "updated_at": "2019-07-08T20:13:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300455609",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300455609"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300455609"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300455609/reactions",
      "total_count": 4,
      "+1": 3,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 104,
    "side": "RIGHT",
    "in_reply_to_id": 300220844
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300463085",
    "pull_request_review_id": 258125366,
    "id": 300463085,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDQ2MzA4NQ==",
    "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"",
    "path": "test/functional/rpc_users.py",
    "position": null,
    "original_position": 158,
    "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
    "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2019-07-04T16:42:44Z",
    "updated_at": "2019-07-08T20:13:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300463085",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300463085"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300463085"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300463085/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 91,
    "side": "RIGHT",
    "in_reply_to_id": 300216890
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300801422",
    "pull_request_review_id": 258555969,
    "id": 300801422,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgwMTQyMg==",
    "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuser\ud83d\udcbb:rpcpassword\ud83d\udd11\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuser\ud83d\udcbb\", \"rpcpassword\ud83d\udd11\")",
    "path": "test/functional/rpc_users.py",
    "position": null,
    "original_position": 213,
    "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
    "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You don't clarify why it is not a good idea, so I am not sure what you are getting at. But in general, I would add that it would be better to have an explicit test for the usage of UTF symbols and not an implicit test within another test.",
    "created_at": "2019-07-05T21:45:40Z",
    "updated_at": "2019-07-08T20:13:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300801422",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300801422"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300801422"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300801422/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 104,
    "side": "RIGHT",
    "in_reply_to_id": 300220844
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300803217",
    "pull_request_review_id": 258558102,
    "id": 300803217,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgwMzIxNw==",
    "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuser\ud83d\udcbb:rpcpassword\ud83d\udd11\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuser\ud83d\udcbb\", \"rpcpassword\ud83d\udd11\")",
    "path": "test/functional/rpc_users.py",
    "position": null,
    "original_position": 213,
    "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
    "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "While I agree that separating tests for \"if `rpcuser`/`rpcpassword` works at all\" from \"if `rpcuser`/`rpcpassword` works with UTF-8\" is worthwhile, it is beyond the scope of this PR.\r\n\r\nHowever, this separation looks like an easy enough change, and perhaps if @fjahr or @fqlx feel strongly about this they can take this up in a separate PR.",
    "created_at": "2019-07-05T22:00:56Z",
    "updated_at": "2019-07-08T20:13:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300803217",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300803217"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300803217"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300803217/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 104,
    "side": "RIGHT",
    "in_reply_to_id": 300220844
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300841063",
    "pull_request_review_id": 258600455,
    "id": 300841063,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg0MTA2Mw==",
    "diff_hunk": "@@ -28,15 +39,24 @@ def set_test_params(self):\n     def setup_chain(self):\n         super().setup_chain()\n         #Append rpcauth to bitcoin.conf before initialization\n+        self.rtpassword = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n         rpcauth = \"rpcauth=rt:93648e835a54c573682c2eb19f882535$7681e9c5b74bdd85e78166031d2058e1069b3ed7ed967c93fc63abba06f31144\"\n-        rpcauth2 = \"rpcauth=rt2:f8607b1a88861fac29dfccf9b52ff9f$ff36a0c23c8c62b4846112e50fa888416e94c17bfd4c42f88fd8f55ec6a3137e\"\n-        rpcuser = \"rpcuser=rpcuser\ud83d\udcbb\"\n-        rpcpassword = \"rpcpassword=rpcpassword\ud83d\udd11\"\n \n-        self.user = ''.join(SystemRandom().choice(string.ascii_letters + string.digits) for _ in range(10))\n+        self.rpcuser = \"rpcuser\ud83d\udcbb\"\n+        self.rpcpassword = \"rpcpassword\ud83d\udd11\"\n+\n         config = configparser.ConfigParser()\n         config.read_file(open(self.options.configfile))\n         gen_rpcauth = config['environment']['RPCAUTH']\n+\n+        # Generate RPCAUTH with specified password\n+        self.rt2password = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n+        p = subprocess.Popen([sys.executable, gen_rpcauth, 'rt2', self.rt2password], stdout=subprocess.PIPE, universal_newlines=True)\n+        lines = p.stdout.read().splitlines()\n+        rpcauth2 = lines[1]\n+\n+        # Generate RPCAUTH without specifying password\n+        self.user = ''.join(SystemRandom().choice(string.ascii_letters + string.digits) for _ in range(10))",
    "path": "test/functional/rpc_users.py",
    "position": 43,
    "original_position": 43,
    "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
    "original_commit_id": "1d5312a9ada85af025f2e92b50a4bdaab3955a11",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit: Why do you generate a random username here instead of just hardcoding one?",
    "created_at": "2019-07-06T19:54:55Z",
    "updated_at": "2019-07-08T20:13:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300841063",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300841063"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300841063"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300841063/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 59,
    "original_line": 59,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300841084",
    "pull_request_review_id": 258600455,
    "id": 300841084,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg0MTA4NA==",
    "diff_hunk": "@@ -47,160 +67,42 @@ def setup_chain(self):\n             f.write(rpcauth2+\"\\n\")\n             f.write(rpcauth3+\"\\n\")\n         with open(os.path.join(get_datadir_path(self.options.tmpdir, 1), \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n-            f.write(rpcuser+\"\\n\")\n-            f.write(rpcpassword+\"\\n\")\n-\n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n+            f.write(\"rpcuser={}\\n\".format(self.rpcuser))\n+            f.write(\"rpcpassword={}\\n\".format(self.rpcpassword))\n \n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)",
    "path": "test/functional/rpc_users.py",
    "position": null,
    "original_position": 169,
    "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
    "original_commit_id": "1d5312a9ada85af025f2e92b50a4bdaab3955a11",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit: Could this not also use the `test_auth` function?",
    "created_at": "2019-07-06T19:55:45Z",
    "updated_at": "2019-07-08T20:13:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300841084",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300841084"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300841084"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300841084/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 94,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300847134",
    "pull_request_review_id": 258606666,
    "id": 300847134,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg0NzEzNA==",
    "diff_hunk": "@@ -47,160 +67,42 @@ def setup_chain(self):\n             f.write(rpcauth2+\"\\n\")\n             f.write(rpcauth3+\"\\n\")\n         with open(os.path.join(get_datadir_path(self.options.tmpdir, 1), \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n-            f.write(rpcuser+\"\\n\")\n-            f.write(rpcpassword+\"\\n\")\n-\n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n+            f.write(\"rpcuser={}\\n\".format(self.rpcuser))\n+            f.write(\"rpcpassword={}\\n\".format(self.rpcpassword))\n \n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)",
    "path": "test/functional/rpc_users.py",
    "position": null,
    "original_position": 169,
    "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
    "original_commit_id": "1d5312a9ada85af025f2e92b50a4bdaab3955a11",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done!",
    "created_at": "2019-07-07T01:54:25Z",
    "updated_at": "2019-07-08T20:13:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300847134",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300847134"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300847134"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300847134/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 94,
    "side": "RIGHT",
    "in_reply_to_id": 300841084
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300847144",
    "pull_request_review_id": 258606678,
    "id": 300847144,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg0NzE0NA==",
    "diff_hunk": "@@ -28,15 +39,24 @@ def set_test_params(self):\n     def setup_chain(self):\n         super().setup_chain()\n         #Append rpcauth to bitcoin.conf before initialization\n+        self.rtpassword = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n         rpcauth = \"rpcauth=rt:93648e835a54c573682c2eb19f882535$7681e9c5b74bdd85e78166031d2058e1069b3ed7ed967c93fc63abba06f31144\"\n-        rpcauth2 = \"rpcauth=rt2:f8607b1a88861fac29dfccf9b52ff9f$ff36a0c23c8c62b4846112e50fa888416e94c17bfd4c42f88fd8f55ec6a3137e\"\n-        rpcuser = \"rpcuser=rpcuser\ud83d\udcbb\"\n-        rpcpassword = \"rpcpassword=rpcpassword\ud83d\udd11\"\n \n-        self.user = ''.join(SystemRandom().choice(string.ascii_letters + string.digits) for _ in range(10))\n+        self.rpcuser = \"rpcuser\ud83d\udcbb\"\n+        self.rpcpassword = \"rpcpassword\ud83d\udd11\"\n+\n         config = configparser.ConfigParser()\n         config.read_file(open(self.options.configfile))\n         gen_rpcauth = config['environment']['RPCAUTH']\n+\n+        # Generate RPCAUTH with specified password\n+        self.rt2password = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n+        p = subprocess.Popen([sys.executable, gen_rpcauth, 'rt2', self.rt2password], stdout=subprocess.PIPE, universal_newlines=True)\n+        lines = p.stdout.read().splitlines()\n+        rpcauth2 = lines[1]\n+\n+        # Generate RPCAUTH without specifying password\n+        self.user = ''.join(SystemRandom().choice(string.ascii_letters + string.digits) for _ in range(10))",
    "path": "test/functional/rpc_users.py",
    "position": 43,
    "original_position": 43,
    "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
    "original_commit_id": "1d5312a9ada85af025f2e92b50a4bdaab3955a11",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Cuz it was originally done this way. Not really within scope but good catch!",
    "created_at": "2019-07-07T01:55:01Z",
    "updated_at": "2019-07-08T20:13:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300847144",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300847144"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300847144"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300847144/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 59,
    "original_line": 59,
    "side": "RIGHT",
    "in_reply_to_id": 300841063
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301096819",
    "pull_request_review_id": 258906214,
    "id": 301096819,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTA5NjgxOQ==",
    "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuser\ud83d\udcbb:rpcpassword\ud83d\udd11\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuser\ud83d\udcbb\", \"rpcpassword\ud83d\udd11\")",
    "path": "test/functional/rpc_users.py",
    "position": null,
    "original_position": 213,
    "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
    "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "UTF handling is not optional in this day and age. I think we should keep this as-is.",
    "created_at": "2019-07-08T13:36:50Z",
    "updated_at": "2019-07-08T20:13:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r301096819",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301096819"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r301096819"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301096819/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 104,
    "side": "RIGHT",
    "in_reply_to_id": 300220844
  }
]