[
  {
    "sha": "e6bb9fde851422808f5d9870782c394f74a1f400",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmJiOWZkZTg1MTQyMjgwOGY1ZDk4NzA3ODJjMzk0Zjc0YTFmNDAw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-24T18:11:55Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-11-12T14:23:17Z"
      },
      "message": "tests: Add fuzzing harness for CAddrMan",
      "tree": {
        "sha": "2d2a6ffbad184b9253020602a08a713ba0462e18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d2a6ffbad184b9253020602a08a713ba0462e18"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6bb9fde851422808f5d9870782c394f74a1f400",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6bb9fde851422808f5d9870782c394f74a1f400",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6bb9fde851422808f5d9870782c394f74a1f400",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6bb9fde851422808f5d9870782c394f74a1f400/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bd1316697292251ed5690390794fc64517fc86b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bd1316697292251ed5690390794fc64517fc86b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bd1316697292251ed5690390794fc64517fc86b"
      }
    ],
    "stats": {
      "total": 140,
      "additions": 140,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9cc383c240d3e2fd3d870143289ba8d6add5f2d8",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6bb9fde851422808f5d9870782c394f74a1f400/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6bb9fde851422808f5d9870782c394f74a1f400/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=e6bb9fde851422808f5d9870782c394f74a1f400",
        "patch": "@@ -7,6 +7,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/addr_info_deserialize \\\n   test/fuzz/addrdb \\\n   test/fuzz/address_deserialize \\\n+  test/fuzz/addrman \\\n   test/fuzz/addrman_deserialize \\\n   test/fuzz/asmap \\\n   test/fuzz/asmap_direct \\\n@@ -353,6 +354,12 @@ test_fuzz_address_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_address_deserialize_LDFLAGS = $(FUZZ_SUITE_LDFLAGS_COMMON)\n test_fuzz_address_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n+test_fuzz_addrman_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_addrman_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_addrman_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_addrman_LDFLAGS = $(FUZZ_SUITE_LDFLAGS_COMMON)\n+test_fuzz_addrman_SOURCES = test/fuzz/addrman.cpp\n+\n test_fuzz_addrman_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDRMAN_DESERIALIZE=1\n test_fuzz_addrman_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_addrman_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "0ceeea2d364c03053b4044ede4c47bda24fe89a4",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "added",
        "additions": 119,
        "deletions": 0,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6bb9fde851422808f5d9870782c394f74a1f400/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6bb9fde851422808f5d9870782c394f74a1f400/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=e6bb9fde851422808f5d9870782c394f74a1f400",
        "patch": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrdb.h>\n+#include <addrman.h>\n+#include <chainparams.h>\n+#include <merkleblock.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <time.h>\n+#include <util/asmap.h>\n+\n+#include <cstdint>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    CAddrMan addr_man;\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        addr_man.m_asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);\n+        if (!SanityCheckASMap(addr_man.m_asmap)) {\n+            addr_man.m_asmap.clear();\n+        }\n+    }\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 11)) {\n+        case 0: {\n+            addr_man.Clear();\n+            break;\n+        }\n+        case 1: {\n+            addr_man.ResolveCollisions();\n+            break;\n+        }\n+        case 2: {\n+            (void)addr_man.SelectTriedCollision();\n+            break;\n+        }\n+        case 3: {\n+            (void)addr_man.Select(fuzzed_data_provider.ConsumeBool());\n+            break;\n+        }\n+        case 4: {\n+            (void)addr_man.GetAddr(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096), fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n+            break;\n+        }\n+        case 5: {\n+            const std::optional<CAddress> opt_address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            const std::optional<CNetAddr> opt_net_addr = ConsumeDeserializable<CNetAddr>(fuzzed_data_provider);\n+            if (opt_address && opt_net_addr) {\n+                addr_man.Add(*opt_address, *opt_net_addr, fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 100000000));\n+            }\n+            break;\n+        }\n+        case 6: {\n+            std::vector<CAddress> addresses;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                const std::optional<CAddress> opt_address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+                if (!opt_address) {\n+                    break;\n+                }\n+                addresses.push_back(*opt_address);\n+            }\n+            const std::optional<CNetAddr> opt_net_addr = ConsumeDeserializable<CNetAddr>(fuzzed_data_provider);\n+            if (opt_net_addr) {\n+                addr_man.Add(addresses, *opt_net_addr, fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 100000000));\n+            }\n+            break;\n+        }\n+        case 7: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.Good(*opt_service, fuzzed_data_provider.ConsumeBool(), ConsumeTime(fuzzed_data_provider));\n+            }\n+            break;\n+        }\n+        case 8: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.Attempt(*opt_service, fuzzed_data_provider.ConsumeBool(), ConsumeTime(fuzzed_data_provider));\n+            }\n+            break;\n+        }\n+        case 9: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.Connected(*opt_service, ConsumeTime(fuzzed_data_provider));\n+            }\n+            break;\n+        }\n+        case 10: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.SetServices(*opt_service, ServiceFlags{fuzzed_data_provider.ConsumeIntegral<uint64_t>()});\n+            }\n+            break;\n+        }\n+        case 11: {\n+            (void)addr_man.Check();\n+            break;\n+        }\n+        }\n+    }\n+    (void)addr_man.size();\n+    CDataStream data_stream(SER_NETWORK, PROTOCOL_VERSION);\n+    data_stream << addr_man;\n+}"
      },
      {
        "sha": "e99ed8d72d319aee400d0679051094a6dd008002",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6bb9fde851422808f5d9870782c394f74a1f400/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6bb9fde851422808f5d9870782c394f74a1f400/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=e6bb9fde851422808f5d9870782c394f74a1f400",
        "patch": "@@ -11,6 +11,7 @@\n #include <chainparamsbase.h>\n #include <coins.h>\n #include <consensus/consensus.h>\n+#include <merkleblock.h>\n #include <net.h>\n #include <netaddress.h>\n #include <netbase.h>\n@@ -24,6 +25,7 @@\n #include <test/util/setup_common.h>\n #include <txmempool.h>\n #include <uint256.h>\n+#include <util/time.h>\n #include <version.h>\n \n #include <algorithm>\n@@ -39,6 +41,11 @@ NODISCARD inline std::vector<uint8_t> ConsumeRandomLengthByteVector(FuzzedDataPr\n     return {s.begin(), s.end()};\n }\n \n+NODISCARD inline std::vector<bool> ConsumeRandomLengthBitVector(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096) noexcept\n+{\n+    return BytesToBits(ConsumeRandomLengthByteVector(fuzzed_data_provider, max_length));\n+}\n+\n NODISCARD inline CDataStream ConsumeDataStream(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096) noexcept\n {\n     return {ConsumeRandomLengthByteVector(fuzzed_data_provider, max_length), SER_NETWORK, INIT_PROTO_VERSION};\n@@ -89,6 +96,13 @@ NODISCARD inline CAmount ConsumeMoney(FuzzedDataProvider& fuzzed_data_provider)\n     return fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, MAX_MONEY);\n }\n \n+NODISCARD inline int64_t ConsumeTime(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    static const int64_t time_min = ParseISO8601DateTime(\"1970-01-01T00:00:00Z\");\n+    static const int64_t time_max = ParseISO8601DateTime(\"9999-12-31T23:59:59Z\");\n+    return fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(time_min, time_max);\n+}\n+\n NODISCARD inline CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n     const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);"
      }
    ]
  },
  {
    "sha": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDRhMTdhNzkwN2M1N2Y3YjU3MGUxYjk3NDNmZDYzNDg5YmRhZDY4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-11-12T14:09:09Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-11-12T15:33:43Z"
      },
      "message": "fuzz: Use ConsumeRandomLengthBitVector(...) in src/test/fuzz/connman and src/test/fuzz/net",
      "tree": {
        "sha": "3f5a2d55f228e5636e197e59c4f41b65fa5bc30a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f5a2d55f228e5636e197e59c4f41b65fa5bc30a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d04a17a7907c57f7b570e1b9743fd63489bdad68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d04a17a7907c57f7b570e1b9743fd63489bdad68/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6bb9fde851422808f5d9870782c394f74a1f400",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6bb9fde851422808f5d9870782c394f74a1f400",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6bb9fde851422808f5d9870782c394f74a1f400"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6521c3f3b2053e86ab01e9c70b5cb7f5abc53e9f",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d04a17a7907c57f7b570e1b9743fd63489bdad68/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d04a17a7907c57f7b570e1b9743fd63489bdad68/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=d04a17a7907c57f7b570e1b9743fd63489bdad68",
        "patch": "@@ -117,7 +117,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             connman.RemoveAddedNode(random_string);\n             break;\n         case 24: {\n-            const std::vector<bool> asmap = ConsumeRandomLengthIntegralVector<bool>(fuzzed_data_provider, 512);\n+            const std::vector<bool> asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);\n             if (SanityCheckASMap(asmap)) {\n                 connman.SetAsmap(asmap);\n             }"
      },
      {
        "sha": "c61d4062918232a779d8543e5b86ed1c36ba430e",
        "filename": "src/test/fuzz/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d04a17a7907c57f7b570e1b9743fd63489bdad68/src/test/fuzz/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d04a17a7907c57f7b570e1b9743fd63489bdad68/src/test/fuzz/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net.cpp?ref=d04a17a7907c57f7b570e1b9743fd63489bdad68",
        "patch": "@@ -63,7 +63,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             break;\n         }\n         case 3: {\n-            const std::vector<bool> asmap = ConsumeRandomLengthIntegralVector<bool>(fuzzed_data_provider, 128);\n+            const std::vector<bool> asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);\n             if (!SanityCheckASMap(asmap)) {\n                 break;\n             }"
      }
    ]
  }
]