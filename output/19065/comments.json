[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650809846",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-650809846",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 650809846,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDgwOTg0Ng==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-28T19:20:54Z",
    "updated_at": "2020-06-28T19:20:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Anything left to do here? :)  The changes are limited to `src/test/fuzz/` and should hopefully be trivial to review.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650809846/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657699951",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-657699951",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 657699951,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzY5OTk1MQ==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-13T17:47:52Z",
    "updated_at": "2020-07-13T17:58:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "I cannot build this branch with either `clang/clang++` or `afl-gcc/afl-g++`:\r\n\r\nclang version: `6.0.0-1ubuntu2 (tags/RELEASE_600/final)`\r\nafl-gcc/afl-g++ built from afl master\r\n\r\nMake output:\r\n```\r\nMaking all in src\r\n  2 make[1]: Entering directory '/root/bitcoin/src'\r\n  3 make[2]: Entering directory '/root/bitcoin/src'\r\n  4   CXX      test/fuzz/test_fuzz_addition_overflow-addition_overflow.o\r\n  5 In file included from test/fuzz/addition_overflow.cpp:7:\r\n  6 ./test/fuzz/util.h:62:18: error: no template named 'optional' in namespace 'std'; did you mean 'Optional'?\r\n  7 NODISCARD inline std::optional<T> ConsumeDeserializable(FuzzedDataProvider& fuzzed_data_provider, const si    ze_t max_length = 4096) noexcept\r\n  8                  ^~~~~~~~~~~~~\r\n  9                  Optional\r\n 10 ./optional.h:14:1: note: 'Optional' declared here\r\n 11 using Optional = boost::optional<T>;\r\n 12 ^\r\n 13 In file included from test/fuzz/addition_overflow.cpp:7:\r\n 14 ./test/fuzz/util.h:70:16: error: no member named 'nullopt' in namespace 'std'; did you mean simply 'nullop    t'?\r\n 15         return std::nullopt;\r\n 16                ^~~~~~~~~~~~\r\n 17                nullopt\r\n 18 ./optional.h:24:14: note: 'nullopt' declared here\r\n 19 static auto& nullopt = boost::none;\r\n 20              ^\r\n 21 2 errors generated.\r\n 22 Makefile:14081: recipe for target 'test/fuzz/test_fuzz_addition_overflow-addition_overflow.o' failed\r\n 23 make[2]: *** [test/fuzz/test_fuzz_addition_overflow-addition_overflow.o] Error 1\r\n 24 make[2]: Leaving directory '/root/bitcoin/src'\r\n 25 Makefile:17268: recipe for target 'all-recursive' failed\r\n 26 make[1]: *** [all-recursive] Error 1\r\n 27 make[1]: Leaving directory '/root/bitcoin/src'\r\n 28 Makefile:785: recipe for target 'all-recursive' failed\r\n 29 make: *** [all-recursive] Error 1\r\n```\r\n\r\nAm I doing something wrong? I have C++17 features and can build on master.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657699951/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657703107",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-657703107",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 657703107,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzcwMzEwNw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-13T17:54:26Z",
    "updated_at": "2020-07-13T17:54:26Z",
    "author_association": "MEMBER",
    "body": "@Crypt-iQ So to clarify, you can build current `master`, but not this pull request merged into current `master`?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657703107/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657704505",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-657704505",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 657704505,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzcwNDUwNQ==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-13T17:57:07Z",
    "updated_at": "2020-07-13T17:57:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MarcoFalke I can build the current `master` branch, but not this branch as it is. I checkout this branch via:\r\n\r\n```\r\ngit fetch origin pull/19065/head:addrmanfuzz\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657704505/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657828502",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-657828502",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 657828502,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzgyODUwMg==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-13T22:37:33Z",
    "updated_at": "2020-07-13T22:37:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Crypt-iQ Oh, that's weird! Thanks for reporting. I've now rebased this PR on current `master`. Would you mind testing again? :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657828502/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657911100",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-657911100",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 657911100,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzkxMTEwMA==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-14T01:20:24Z",
    "updated_at": "2020-07-14T01:20:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "@practicalswift I think you may have forgotten to push it up :) And will test once it's up",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657911100/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658025967",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-658025967",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 658025967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODAyNTk2Nw==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-14T07:44:40Z",
    "updated_at": "2020-07-14T07:44:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Crypt-iQ Oh, thanks for letting me know! Now pushed for real :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658025967/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658472418",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-658472418",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 658472418,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODQ3MjQxOA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-15T00:08:10Z",
    "updated_at": "2020-11-13T03:39:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20138 (net: Assume that SetCommonVersion is called at most once per peer by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658472418/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658819700",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-658819700",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 658819700,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODgxOTcwMA==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-15T14:58:31Z",
    "updated_at": "2020-07-15T15:01:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@practicalswift Able to build this branch with afl and with libfuzzer (clang-10).\r\n\r\nCoverage from 24 hours of AFL fuzzing here: https://crypt-iq.github.io/addrman_fuzz_outs/src/index.html\r\nWith more time it should hit the collision code but it was very slow ~4-5 execs/s.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658819700/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675702991",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-675702991",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 675702991,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTcwMjk5MQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-18T20:37:11Z",
    "updated_at": "2020-08-18T20:37:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Crypt-iQ Thanks a lot for reviewing! Feedback addressed. Would you mind re-reviewing? :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675702991/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682330236",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-682330236",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 682330236,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjMzMDIzNg==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-28T05:17:54Z",
    "updated_at": "2020-08-28T05:17:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MarcoFalke Would you mind reviewing? FWIW this PR touches only `src/test/fuzz/` :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682330236/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686912218",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-686912218",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 686912218,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjkxMjIxOA==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-04T05:14:47Z",
    "updated_at": "2020-09-04T05:20:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "The `CAddrMan` harness looks good to me. \r\nUbuntu 18:\r\n- `./configure --enable-fuzz --with-sanitizers=address,undefined,integer,fuzzer` reports implicit-signed-integer-truncation\r\n- valgrind reports no errors\r\n\r\nmacOS v10.15.4:\r\n- `./configure --enable-fuzz --with-sanitizers=address,fuzzer --disable-asm` reports no errors\r\n- `./configure --enable-fuzz --with-sanitizers=undefined,integer,fuzzer` reports implicit-signed-integer-truncation\r\n\r\n<details>\r\n<summary>implicit-signed-integer-truncation</summary>\r\n\r\n```\r\naddrman.cpp:524:22: runtime error: implicit conversion from type 'int64_t' (aka 'long long') of value 60031562745 (64-bit, signed) to type 'uint32_t' (aka 'unsigned int') changed the value to 4196987897 (32-bit, unsigned)\r\n    #0 0x103319c69 in CAddrMan::Connected_(CService const&, long long) addrman.cpp:524\r\n    #1 0x1032a0a1b in CAddrMan::Connected(CService const&, long long) addrman.h:652\r\n    #2 0x10329c621 in test_one_input(std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > const&) addrman.cpp:89\r\n    #3 0x1042c8ff8 in LLVMFuzzerTestOneInput fuzz.cpp:45\r\n    #4 0x1044cb970 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) FuzzerLoop.cpp:556\r\n    #5 0x1044cb0b5 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool*) FuzzerLoop.cpp:470\r\n    #6 0x1044cd757 in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::__1::vector<fuzzer::SizedFile, fuzzer::fuzzer_allocator<fuzzer::SizedFile> >&) FuzzerLoop.cpp:765\r\n    #7 0x1044cdab9 in fuzzer::Fuzzer::Loop(std::__1::vector<fuzzer::SizedFile, fuzzer::fuzzer_allocator<fuzzer::SizedFile> >&) FuzzerLoop.cpp:792\r\n    #8 0x1044baf7d in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) FuzzerDriver.cpp:829\r\n    #9 0x1044e6c52 in main FuzzerMain.cpp:19\r\n    #10 0x7fff73778cc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)\r\n\r\nSUMMARY: UndefinedBehaviorSanitizer: implicit-signed-integer-truncation addrman.cpp:524:22 in\r\n```\r\n</details>\r\n\r\nHappens here because `info.nTime` is `uint32_t`:\r\nhttps://github.com/bitcoin/bitcoin/blob/a0a422c34cfd6514d0cc445bd784d3ee1a2d1749/src/addrman.cpp#L524\r\n\r\nStill couldn't hit the collision code, so may need to run for longer. Will review and run the changes to the other harnesses.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686912218/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/690838621",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-690838621",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 690838621,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MDgzODYyMQ==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-11T02:39:46Z",
    "updated_at": "2020-09-11T02:39:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "The merkleblock and kitchensink harnesses look good to me. Fuzzers didn't report any errors with sanitizers nor with valgrind.\r\n\r\nSo the reason the `addrman` fuzzer wasn't able to hit the collision code *consistently* is because of `insecure_rand` which changes across runs. Another source of test randomness is the `GetAdjustedTime` function.\r\n\r\nCan also see it when running `make cov_fuzz` twice as the `cov` and `ft` numbers differ with libfuzzer output.\r\nFirst run:\r\n```\r\nRun addrman with args ['/Users/nsa/bitcoin_cov/src/test/fuzz/addrman', '-runs=1', 'qa-assets/fuzz_seed_corpus/addrman']INFO: Seed: 1286454130\r\nINFO: Loaded 1 modules   (264114 inline 8-bit counters): 264114 [0x1114a3ee8, 0x1114e469a), \r\nINFO: Loaded 1 PC tables (264114 PCs): 264114 [0x1114e46a0,0x1118ec1c0), \r\nINFO:     5557 files found in qa-assets/fuzz_seed_corpus/addrman\r\nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4151 bytes\r\nINFO: seed corpus: files: 5557 min: 1b max: 4151b total: 3492077b rss: 44Mb\r\n#1024\tpulse  cov: 3008 ft: 8297 corp: 326/14217b exec/s: 341 rss: 45Mb\r\n#2048\tpulse  cov: 3127 ft: 10801 corp: 530/40Kb exec/s: 89 rss: 45Mb\r\n#4096\tpulse  cov: 3160 ft: 13578 corp: 830/143Kb exec/s: 42 rss: 45Mb\r\n#5558\tINITED cov: 3172 ft: 15459 corp: 1160/728Kb exec/s: 29 rss: 46Mb\r\n#5558\tDONE   cov: 3172 ft: 15459 corp: 1160/728Kb lim: 4147 exec/s: 29 rss: 46Mb\r\nDone 5558 runs in 191 second(s)\r\n```\r\n\r\nSecond run:\r\n```\r\nRun addrman with args ['/Users/nsa/bitcoin_cov/src/test/fuzz/addrman', '-runs=1', 'qa-assets/fuzz_seed_corpus/addrman']INFO: Seed: 1987669807\r\nINFO: Loaded 1 modules   (264114 inline 8-bit counters): 264114 [0x104dd7ee8, 0x104e1869a), \r\nINFO: Loaded 1 PC tables (264114 PCs): 264114 [0x104e186a0,0x1052201c0), \r\nINFO:     5557 files found in qa-assets/fuzz_seed_corpus/addrman\r\nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4151 bytes\r\nINFO: seed corpus: files: 5557 min: 1b max: 4151b total: 3492077b rss: 44Mb\r\n#1024\tpulse  cov: 3008 ft: 8316 corp: 330/14641b exec/s: 204 rss: 45Mb\r\n#2048\tpulse  cov: 3117 ft: 10818 corp: 522/39Kb exec/s: 49 rss: 45Mb\r\n#4096\tpulse  cov: 3159 ft: 13573 corp: 838/148Kb exec/s: 27 rss: 45Mb\r\nSlowest unit: 12 s:\r\nartifact_prefix='./'; Test unit written to ./slow-unit-8450b39fa9bc5a9408007860514c53b0b6bf2723\r\n#5558\tINITED cov: 3181 ft: 15428 corp: 1159/714Kb exec/s: 20 rss: 46Mb\r\n#5558\tDONE   cov: 3181 ft: 15428 corp: 1159/714Kb lim: 4147 exec/s: 20 rss: 46Mb\r\nDone 5558 runs in 267 second(s)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/690838621/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/703887725",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-703887725",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 703887725,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzg4NzcyNQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-05T21:03:50Z",
    "updated_at": "2020-10-05T21:03:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Crypt-iQ I'm afraid we'll have to live with some degree of non-determinism. With that said I'm open to all suggestions on how to reduce the non-determinism in testing, but I guess that is out of scope for this PR :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/703887725/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/705512234",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-705512234",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 705512234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTUxMjIzNA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-08T11:39:08Z",
    "updated_at": "2020-10-09T06:46:14Z",
    "author_association": "MEMBER",
    "body": "> So the reason the addrman fuzzer wasn't able to hit the collision code consistently is because of insecure_rand which changes across runs. Another source of test randomness is the GetAdjustedTime function.\r\n\r\nI presume `GetAdjustedTime` is non-deterministic because it asks the system for the time. With `SetMockTime` you can make it return the time you (or the fuzz engine) set.\r\n\r\n`insecure_rand` could be made deterministic by accepting a bool parameter to the addrman constructor and passing it on to `insecure_rand`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/705512234/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/705659445",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-705659445",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 705659445,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTY1OTQ0NQ==",
    "user": {
      "login": "Emzy",
      "id": 1223908,
      "node_id": "MDQ6VXNlcjEyMjM5MDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1223908?u=66477849292f33a9134f23b8d8000f0492d591b3&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Emzy",
      "html_url": "https://github.com/Emzy",
      "followers_url": "https://api.github.com/users/Emzy/followers",
      "following_url": "https://api.github.com/users/Emzy/following{/other_user}",
      "gists_url": "https://api.github.com/users/Emzy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Emzy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Emzy/subscriptions",
      "organizations_url": "https://api.github.com/users/Emzy/orgs",
      "repos_url": "https://api.github.com/users/Emzy/repos",
      "events_url": "https://api.github.com/users/Emzy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Emzy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-08T15:48:26Z",
    "updated_at": "2020-10-08T15:55:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "tACK\r\nTested and worked (Debian GNU/Linux 10 (buster)):\r\nsrc/test/fuzz/addrman\r\nsrc/test/fuzz/kitchen_sink\r\nsrc/test/fuzz/merkleblock",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/705659445/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/711418326",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-711418326",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 711418326,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMTQxODMyNg==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-18T20:33:07Z",
    "updated_at": "2020-10-18T20:33:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "tested ACK 4bd95f42e2d18bdf86c05f4b9b5e31fcf0e3ba1d\r\n\r\nReviewed code and ran the affected fuzz tests for a while.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/711418326/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/722039392",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-722039392",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 722039392,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMjAzOTM5Mg==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-05T00:00:39Z",
    "updated_at": "2020-11-05T00:03:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ready for merge? :)\r\n\r\nPR touches code only in `src/test/fuzz/` and has two Tested ACK:s.\r\n\r\n_Edit: Noticed that I had unaddressed feedback from @Crypt-iQ in https://github.com/bitcoin/bitcoin/pull/19065#discussion_r501611685. Will address. Sorry._",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/722039392/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723553090",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-723553090",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 723553090,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMzU1MzA5MA==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-08T09:44:00Z",
    "updated_at": "2020-11-08T09:44:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "@practicalswift Just had that one comment remaining about `GetGroup`. I tried with @MarcoFalke suggested patch of `insecure_rand` being deterministic and after about a week the fuzzer still did not hit the collision code according to lcov. Granted, I am not throwing very many cores at it (2), and some input could probably be engineered to trigger it - just haven't had the time. As a newcomer to the codebase, I don't know what is considered out of scope PR-wise, but test determinism is always nice-to-have.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723553090/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723673056",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-723673056",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 723673056,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyMzY3MzA1Ng==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-08T22:09:21Z",
    "updated_at": "2020-11-08T22:09:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Crypt-iQ Thanks for clarifying! I've now moved the AS-map code to allow for use via `GetGroup`. I'm now also mocking the time, but I skipped the suggested `insecure_rand` change since I don't want to change any code outside of `src/test/fuzz/` in this PR. That can be taken in a follow-up if deemed necessary.\r\n\r\nI think this PR should be ready for final review now. Many thanks for your patience: may I ask you to review for the n:th time? :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723673056/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724609226",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-724609226",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 724609226,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNDYwOTIyNg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-10T10:21:37Z",
    "updated_at": "2020-11-10T10:21:37Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. Will review",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724609226/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/725579542",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-725579542",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 725579542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTU3OTU0Mg==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-11T18:12:54Z",
    "updated_at": "2020-11-11T18:12:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MarcoFalke Thanks for reviewing. Addressed your optimization request and dropped all changes that are unrelated to `CAddrMan`. Should hopefully be ready for merge now :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/725579542/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/726110873",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-726110873",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 726110873,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNjExMDg3Mw==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-12T14:26:41Z",
    "updated_at": "2020-11-12T14:26:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MarcoFalke Thanks for re-reviewing! Addressed all feedback. Should hopefully be ready for final review _now_ :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/726110873/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/726153935",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-726153935",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 726153935,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNjE1MzkzNQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-12T15:35:33Z",
    "updated_at": "2020-11-12T15:35:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MarcoFalke Thanks for re-re-reviewing! Addressed all feedback. Should hopefully be ready for final final review now :)\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/726153935/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/726549201",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-726549201",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19065",
    "id": 726549201,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNjU0OTIwMQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-13T06:24:35Z",
    "updated_at": "2020-11-13T06:24:35Z",
    "author_association": "MEMBER",
    "body": "review ACK d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/726549201/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430359949",
    "pull_request_review_id": 418228841,
    "id": 430359949,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM1OTk0OQ==",
    "diff_hunk": "@@ -2,15 +2,27 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <addrdb.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <outputtype.h>\n+#include <policy/fees.h>\n #include <rpc/util.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n #include <util/error.h>\n \n #include <cstdint>\n #include <vector>\n \n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+    StartMutedLogging();",
    "path": "src/test/fuzz/kitchen_sink.cpp",
    "position": null,
    "original_position": 22,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "403c5ad9ad3d9ebbcc7c6ceec0ce677760e0f3b6",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why can't this be a testing setup with logging disabled, like in the other tests?",
    "created_at": "2020-05-26T12:02:33Z",
    "updated_at": "2020-11-12T15:34:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430359949",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430359949"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430359949"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430359949/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 23,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430383126",
    "pull_request_review_id": 418259302,
    "id": 430383126,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4MzEyNg==",
    "diff_hunk": "@@ -2,15 +2,27 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <addrdb.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <outputtype.h>\n+#include <policy/fees.h>\n #include <rpc/util.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n #include <util/error.h>\n \n #include <cstdint>\n #include <vector>\n \n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+    StartMutedLogging();",
    "path": "src/test/fuzz/kitchen_sink.cpp",
    "position": null,
    "original_position": 22,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "403c5ad9ad3d9ebbcc7c6ceec0ce677760e0f3b6",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Unfortunately `TestingSetup` introduces non-determinism which makes coverage vary between runs also when using the same set of inputs, see https://github.com/bitcoin/bitcoin/pull/19067#discussion_r429986672 :)",
    "created_at": "2020-05-26T12:44:38Z",
    "updated_at": "2020-11-12T15:34:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430383126",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430383126"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430383126"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430383126/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 23,
    "side": "RIGHT",
    "in_reply_to_id": 430359949
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430386919",
    "pull_request_review_id": 418264174,
    "id": 430386919,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4NjkxOQ==",
    "diff_hunk": "@@ -2,15 +2,27 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <addrdb.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <outputtype.h>\n+#include <policy/fees.h>\n #include <rpc/util.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n #include <util/error.h>\n \n #include <cstdint>\n #include <vector>\n \n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+    StartMutedLogging();",
    "path": "src/test/fuzz/kitchen_sink.cpp",
    "position": null,
    "original_position": 22,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "403c5ad9ad3d9ebbcc7c6ceec0ce677760e0f3b6",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What about BasicTestgingSetup then?",
    "created_at": "2020-05-26T12:50:51Z",
    "updated_at": "2020-11-12T15:34:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430386919",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430386919"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430386919"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430386919/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 23,
    "side": "RIGHT",
    "in_reply_to_id": 430359949
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430395950",
    "pull_request_review_id": 418276058,
    "id": 430395950,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5NTk1MA==",
    "diff_hunk": "@@ -2,15 +2,27 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <addrdb.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <outputtype.h>\n+#include <policy/fees.h>\n #include <rpc/util.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n #include <util/error.h>\n \n #include <cstdint>\n #include <vector>\n \n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+    StartMutedLogging();",
    "path": "src/test/fuzz/kitchen_sink.cpp",
    "position": null,
    "original_position": 22,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "403c5ad9ad3d9ebbcc7c6ceec0ce677760e0f3b6",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think it is the same problem there: I get more setup than I need and a subset of that setup work introduces coverage non-determinism :)\r\n\r\nI prefer opt-ing in to exactly the setup I need: it avoids the non-determinism problem and I also think that makes it easier to reason about the dependencies of each fuzzing harness.",
    "created_at": "2020-05-26T13:05:00Z",
    "updated_at": "2020-11-12T15:34:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430395950",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430395950"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430395950"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430395950/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 23,
    "side": "RIGHT",
    "in_reply_to_id": 430359949
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430403885",
    "pull_request_review_id": 418286682,
    "id": 430403885,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQwMzg4NQ==",
    "diff_hunk": "@@ -2,15 +2,27 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <addrdb.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <outputtype.h>\n+#include <policy/fees.h>\n #include <rpc/util.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n #include <util/error.h>\n \n #include <cstdint>\n #include <vector>\n \n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+    StartMutedLogging();",
    "path": "src/test/fuzz/kitchen_sink.cpp",
    "position": null,
    "original_position": 22,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "403c5ad9ad3d9ebbcc7c6ceec0ce677760e0f3b6",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If non-determinism is an issue for fuzz tests, it is also an issue for unit tests etc. Instead of solving it fresh in every single test case, I'd rather fix it once and for all.\r\n\r\nUsing hacks that don't clean up after themselves, depend on global state and leave global state dirty is asking for mishaps. Currently the fuzz datadir is set to the default location of the datadir. I don't think I need to repeat why this is bad.\r\n\r\nIf the basic testing setup is still too bloated, then please add one that is stripped down, so that unit and bench tests can use it as well.",
    "created_at": "2020-05-26T13:17:11Z",
    "updated_at": "2020-11-12T15:34:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430403885",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430403885"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430403885"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430403885/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 23,
    "side": "RIGHT",
    "in_reply_to_id": 430359949
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430586406",
    "pull_request_review_id": 418523525,
    "id": 430586406,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4NjQwNg==",
    "diff_hunk": "@@ -2,15 +2,27 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <addrdb.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <outputtype.h>\n+#include <policy/fees.h>\n #include <rpc/util.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n #include <util/error.h>\n \n #include <cstdint>\n #include <vector>\n \n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+    StartMutedLogging();",
    "path": "src/test/fuzz/kitchen_sink.cpp",
    "position": null,
    "original_position": 22,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "403c5ad9ad3d9ebbcc7c6ceec0ce677760e0f3b6",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I was wrong about `BasicTestingSetup`: it seems like only `TestingSetup` introduces coverage non-determinism.\r\n\r\nThis shows the issue with `TestingSetup`:\r\n\r\n```\r\n# With TestingSetup:\r\n$ src/test/fuzz/kitchen_sink corpus/\r\n\u2026\r\n#20425  NEW    cov: 3867 ft: 12141 corp: 248/49Kb lim: 607 exec/s: 464 rss: 357Mb L: 605/607 MS: 5 InsertRepeatedBytes-CopyPart-InsertByte-ChangeBinInt-CopyPart-\r\n        NEW_FUNC[1/68]: 0x56533ed75c60 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:2291\r\n        NEW_FUNC[2/68]: 0x56533f03dfc0 in std::function<void ()>::function(std::function<void ()> const&) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_function.h:655\r\n#20441  NEW    cov: 4384 ft: 12690 corp: 249/49Kb lim: 607 exec/s: 454 rss: 358Mb L: 326/607 MS: 1 CopyPart-\r\n\u2026\r\n#28628        NEW    cov: 4384 ft: 12731 corp: 258/54Kb lim: 652 exec/s: 454 rss: 452Mb L: 652/652 MS: 1 CrossOver-\r\n==6668== libFuzzer: run interrupted; exiting\r\n\r\n$ src/test/fuzz/kitchen_sink corpus/\r\n#423    INITED cov: 3867 ft: 12182 corp: 245/48Kb exec/s: 423 rss: 148Mb\r\n```\r\n\r\nNotice the non-deterministic coverage increase from 3867 to 4384 which drops back to 3867 when the fuzzer is restarted.\r\n\r\nI'll go with `BasicTestingSetup` :)\r\n\r\n",
    "created_at": "2020-05-26T17:32:12Z",
    "updated_at": "2020-11-12T15:34:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430586406",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430586406"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430586406"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430586406/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 23,
    "side": "RIGHT",
    "in_reply_to_id": 430359949
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430599736",
    "pull_request_review_id": 418540251,
    "id": 430599736,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5OTczNg==",
    "diff_hunk": "@@ -2,15 +2,27 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <addrdb.h>\n+#include <chainparams.h>\n+#include <net.h>\n+#include <outputtype.h>\n+#include <policy/fees.h>\n #include <rpc/util.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n #include <util/error.h>\n \n #include <cstdint>\n #include <vector>\n \n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+    StartMutedLogging();",
    "path": "src/test/fuzz/kitchen_sink.cpp",
    "position": null,
    "original_position": 22,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "403c5ad9ad3d9ebbcc7c6ceec0ce677760e0f3b6",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Coverage stability with `BasicTestingSetup` vs `TestingSetup`:\r\n\r\nFuzzer with an empty `test_one_input` function, and an `initialize` function containing `static const BasicTestingSetup basic_testing_setup`:\r\n\r\n```\r\nINFO: A corpus is not provided, starting from an empty corpus\r\n#2      INITED cov: 58 ft: 59 corp: 1/1b exec/s: 0 rss: 125Mb\r\n#65536  pulse  cov: 58 ft: 59 corp: 1/1b lim: 652 exec/s: 21845 rss: 145Mb\r\n#131072 pulse  cov: 58 ft: 59 corp: 1/1b lim: 1300 exec/s: 21845 rss: 188Mb\r\n#262144 pulse  cov: 58 ft: 59 corp: 1/1b lim: 2611 exec/s: 21845 rss: 339Mb\r\n#524288 pulse  cov: 58 ft: 59 corp: 1/1b lim: 4096 exec/s: 20164 rss: 715Mb\r\n#1048576        pulse  cov: 58 ft: 59 corp: 1/1b lim: 4096 exec/s: 20560 rss: 716Mb\r\n#2097152        pulse  cov: 58 ft: 59 corp: 1/1b lim: 4096 exec/s: 20560 rss: 716Mb\r\n```\r\n\r\nFuzzer with an empty `test_one_input` function, and an `initialize` function containing `static const TestingSetup testing_setup`:\r\n\r\n```\r\nINFO: A corpus is not provided, starting from an empty corpus\r\n#2      INITED cov: 58 ft: 59 corp: 1/1b exec/s: 0 rss: 134Mb\r\n#65536  pulse  cov: 58 ft: 59 corp: 1/1b lim: 652 exec/s: 21845 rss: 155Mb\r\n#131072 pulse  cov: 58 ft: 59 corp: 1/1b lim: 1300 exec/s: 21845 rss: 198Mb\r\n#262144 pulse  cov: 58 ft: 59 corp: 1/1b lim: 2611 exec/s: 21845 rss: 348Mb\r\n#524288 pulse  cov: 58 ft: 59 corp: 1/1b lim: 4096 exec/s: 20164 rss: 715Mb\r\n        NEW_FUNC[1/85]: 0x55e526ad96c0 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:516\r\n        NEW_FUNC[2/85]: 0x55e526adc5a0 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:180\r\n#910854 NEW    cov: 663 ft: 143 corp: 2/3b lim: 4096 exec/s: 20241 rss: 717Mb L: 2/2 MS: 2 InsertByte-CopyPart-\r\n#1048576        pulse  cov: 663 ft: 143 corp: 2/3b lim: 4096 exec/s: 20560 rss: 717Mb\r\n        NEW_FUNC[1/10]: 0x55e526ad95c0 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:2291\r\n        NEW_FUNC[2/10]: 0x55e526adc140 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:219\r\n#1830962        NEW    cov: 711 ft: 335 corp: 3/4099b lim: 4096 exec/s: 20572 rss: 717Mb L: 4096/4096 MS: 3 ChangeBinInt-CrossOver-ChangeASCIIInt-\r\n#2097152        pulse  cov: 711 ft: 335 corp: 3/4099b lim: 4096 exec/s: 20360 rss: 717Mb\r\n```\r\n",
    "created_at": "2020-05-26T17:54:55Z",
    "updated_at": "2020-11-12T15:34:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430599736",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430599736"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430599736"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430599736/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 23,
    "side": "RIGHT",
    "in_reply_to_id": 430359949
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456845775",
    "pull_request_review_id": 451091812,
    "id": 456845775,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0NTc3NQ==",
    "diff_hunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrdb.h>\n+#include <addrman.h>\n+#include <chainparams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    CAddrMan addr_man;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 11)) {\n+        case 0: {\n+            addr_man.Clear();\n+            break;\n+        }\n+        case 1: {\n+            addr_man.ResolveCollisions();\n+            break;\n+        }\n+        case 2: {\n+            (void)addr_man.SelectTriedCollision();\n+            break;\n+        }\n+        case 3: {\n+            (void)addr_man.Select(fuzzed_data_provider.ConsumeBool());\n+            break;\n+        }\n+        case 4: {\n+            (void)addr_man.GetAddr();\n+            break;\n+        }\n+        case 5: {\n+            const std::optional<CAddress> opt_address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            const std::optional<CNetAddr> opt_net_addr = ConsumeDeserializable<CNetAddr>(fuzzed_data_provider);\n+            if (opt_address && opt_net_addr) {\n+                addr_man.Add(*opt_address, *opt_net_addr, fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 100000000));\n+            }\n+            break;\n+        }\n+        case 6: {\n+            std::vector<CAddress> addresses;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                const std::optional<CAddress> opt_address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+                if (!opt_address) {\n+                    break;\n+                }\n+                addresses.push_back(*opt_address);\n+            }\n+            const std::optional<CNetAddr> opt_net_addr = ConsumeDeserializable<CNetAddr>(fuzzed_data_provider);\n+            if (opt_net_addr) {\n+                addr_man.Add(addresses, *opt_net_addr, fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 100000000));\n+            }\n+            break;\n+        }\n+        case 7: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.Good(*opt_service, fuzzed_data_provider.ConsumeBool(), ConsumeTime(fuzzed_data_provider));\n+            }\n+            break;\n+        }\n+        case 8: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.Attempt(*opt_service, fuzzed_data_provider.ConsumeBool(), ConsumeTime(fuzzed_data_provider));\n+            }\n+            break;\n+        }\n+        case 9: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.Connected(*opt_service, ConsumeTime(fuzzed_data_provider));\n+            }\n+            break;\n+        }\n+        case 10: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.SetServices(*opt_service, ServiceFlags{fuzzed_data_provider.ConsumeIntegral<uint64_t>()});\n+            }\n+            break;\n+        }\n+        case 11: {\n+            (void)addr_man.Check();\n+            break;\n+        }\n+        }\n+\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            (void)addr_man.size();\n+\n+            CDataStream data_stream(SER_NETWORK, PROTOCOL_VERSION);\n+            data_stream << addr_man;",
    "path": "src/test/fuzz/addrman.cpp",
    "position": null,
    "original_position": 110,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "80ee923d73c7de52a9b3f99ecdb5c3edb39a4893",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is the other way `>>` skipped because it's covered in `deserialize.cpp`? Also since `m_asmap` isn't specified there is a single line that the fuzzer misses:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/090d87716074434bdc6c7656ec44d049197a793a/src/addrman.h#L370-L376__",
    "created_at": "2020-07-19T01:25:40Z",
    "updated_at": "2020-11-12T15:34:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r456845775",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456845775"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r456845775"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456845775/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 110,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456849493",
    "pull_request_review_id": 451091812,
    "id": 456849493,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0OTQ5Mw==",
    "diff_hunk": "@@ -16,12 +16,49 @@\n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n-    std::optional<CPartialMerkleTree> partial_merkle_tree = ConsumeDeserializable<CPartialMerkleTree>(fuzzed_data_provider);\n-    if (!partial_merkle_tree) {\n-        return;\n+\n+    {\n+        std::optional<CPartialMerkleTree> partial_merkle_tree = ConsumeDeserializable<CPartialMerkleTree>(fuzzed_data_provider);\n+        if (partial_merkle_tree) {\n+            (void)partial_merkle_tree->GetNumTransactions();\n+            std::vector<uint256> matches;\n+            std::vector<unsigned int> indices;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                indices.push_back(fuzzed_data_provider.ConsumeIntegral<unsigned int>());\n+            }\n+            (void)partial_merkle_tree->ExtractMatches(matches, indices);\n+        }\n+    }\n+\n+    {\n+        CMerkleBlock merkle_block;\n+        const std::optional<CBlock> opt_block = ConsumeDeserializable<CBlock>(fuzzed_data_provider);\n+        CBloomFilter bloom_filter;\n+        std::set<uint256> txids;\n+        if (opt_block && !opt_block->vtx.empty()) {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                merkle_block = CMerkleBlock{*opt_block, bloom_filter};",
    "path": "src/test/fuzz/merkleblock.cpp",
    "position": null,
    "original_position": 28,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "c8055503f0c26a970ccf1779c6b6fb3fcfa30cee",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could a case be made to not only have the default, match-all filter?",
    "created_at": "2020-07-19T02:24:16Z",
    "updated_at": "2020-11-12T15:34:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r456849493",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456849493"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r456849493"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456849493/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 35,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472475731",
    "pull_request_review_id": 469809848,
    "id": 472475731,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3NTczMQ==",
    "diff_hunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrdb.h>\n+#include <addrman.h>\n+#include <chainparams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    CAddrMan addr_man;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 11)) {\n+        case 0: {\n+            addr_man.Clear();\n+            break;\n+        }\n+        case 1: {\n+            addr_man.ResolveCollisions();\n+            break;\n+        }\n+        case 2: {\n+            (void)addr_man.SelectTriedCollision();\n+            break;\n+        }\n+        case 3: {\n+            (void)addr_man.Select(fuzzed_data_provider.ConsumeBool());\n+            break;\n+        }\n+        case 4: {\n+            (void)addr_man.GetAddr();\n+            break;\n+        }\n+        case 5: {\n+            const std::optional<CAddress> opt_address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            const std::optional<CNetAddr> opt_net_addr = ConsumeDeserializable<CNetAddr>(fuzzed_data_provider);\n+            if (opt_address && opt_net_addr) {\n+                addr_man.Add(*opt_address, *opt_net_addr, fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 100000000));\n+            }\n+            break;\n+        }\n+        case 6: {\n+            std::vector<CAddress> addresses;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                const std::optional<CAddress> opt_address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+                if (!opt_address) {\n+                    break;\n+                }\n+                addresses.push_back(*opt_address);\n+            }\n+            const std::optional<CNetAddr> opt_net_addr = ConsumeDeserializable<CNetAddr>(fuzzed_data_provider);\n+            if (opt_net_addr) {\n+                addr_man.Add(addresses, *opt_net_addr, fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 100000000));\n+            }\n+            break;\n+        }\n+        case 7: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.Good(*opt_service, fuzzed_data_provider.ConsumeBool(), ConsumeTime(fuzzed_data_provider));\n+            }\n+            break;\n+        }\n+        case 8: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.Attempt(*opt_service, fuzzed_data_provider.ConsumeBool(), ConsumeTime(fuzzed_data_provider));\n+            }\n+            break;\n+        }\n+        case 9: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.Connected(*opt_service, ConsumeTime(fuzzed_data_provider));\n+            }\n+            break;\n+        }\n+        case 10: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.SetServices(*opt_service, ServiceFlags{fuzzed_data_provider.ConsumeIntegral<uint64_t>()});\n+            }\n+            break;\n+        }\n+        case 11: {\n+            (void)addr_man.Check();\n+            break;\n+        }\n+        }\n+\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            (void)addr_man.size();\n+\n+            CDataStream data_stream(SER_NETWORK, PROTOCOL_VERSION);\n+            data_stream << addr_man;",
    "path": "src/test/fuzz/addrman.cpp",
    "position": null,
    "original_position": 110,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "80ee923d73c7de52a9b3f99ecdb5c3edb39a4893",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Is the other way `>>` skipped because it's covered in `deserialize.cpp`?\r\n\r\nYes :)\r\n\r\n> Also since `m_asmap` isn't specified there is a single line that the fuzzer misses:\r\n\r\nThanks! Now fixed.",
    "created_at": "2020-08-18T20:33:25Z",
    "updated_at": "2020-11-12T15:34:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r472475731",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472475731"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r472475731"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472475731/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 110,
    "side": "RIGHT",
    "in_reply_to_id": 456845775
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472477852",
    "pull_request_review_id": 469811955,
    "id": 472477852,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3Nzg1Mg==",
    "diff_hunk": "@@ -16,12 +16,49 @@\n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n-    std::optional<CPartialMerkleTree> partial_merkle_tree = ConsumeDeserializable<CPartialMerkleTree>(fuzzed_data_provider);\n-    if (!partial_merkle_tree) {\n-        return;\n+\n+    {\n+        std::optional<CPartialMerkleTree> partial_merkle_tree = ConsumeDeserializable<CPartialMerkleTree>(fuzzed_data_provider);\n+        if (partial_merkle_tree) {\n+            (void)partial_merkle_tree->GetNumTransactions();\n+            std::vector<uint256> matches;\n+            std::vector<unsigned int> indices;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                indices.push_back(fuzzed_data_provider.ConsumeIntegral<unsigned int>());\n+            }\n+            (void)partial_merkle_tree->ExtractMatches(matches, indices);\n+        }\n+    }\n+\n+    {\n+        CMerkleBlock merkle_block;\n+        const std::optional<CBlock> opt_block = ConsumeDeserializable<CBlock>(fuzzed_data_provider);\n+        CBloomFilter bloom_filter;\n+        std::set<uint256> txids;\n+        if (opt_block && !opt_block->vtx.empty()) {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                merkle_block = CMerkleBlock{*opt_block, bloom_filter};",
    "path": "src/test/fuzz/merkleblock.cpp",
    "position": null,
    "original_position": 28,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "c8055503f0c26a970ccf1779c6b6fb3fcfa30cee",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed! I'm now covering all three:\r\n* `CMerkleBlock{*opt_block, bloom_filter}`\r\n* `CMerkleBlock{*opt_block, txids}`\r\n* `CMerkleBlock{}` (added)",
    "created_at": "2020-08-18T20:36:41Z",
    "updated_at": "2020-11-12T15:34:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r472477852",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472477852"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r472477852"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472477852/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 35,
    "side": "RIGHT",
    "in_reply_to_id": 456849493
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483395120",
    "pull_request_review_id": 482367877,
    "id": 483395120,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM5NTEyMA==",
    "diff_hunk": "@@ -0,0 +1,114 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrdb.h>\n+#include <addrman.h>\n+#include <chainparams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    CAddrMan addr_man;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 11)) {\n+        case 0: {\n+            addr_man.Clear();\n+            break;\n+        }\n+        case 1: {\n+            addr_man.ResolveCollisions();\n+            break;\n+        }\n+        case 2: {\n+            (void)addr_man.SelectTriedCollision();\n+            break;\n+        }\n+        case 3: {\n+            (void)addr_man.Select(fuzzed_data_provider.ConsumeBool());\n+            break;\n+        }\n+        case 4: {\n+            (void)addr_man.GetAddr(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096), fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n+            break;\n+        }\n+        case 5: {\n+            const std::optional<CAddress> opt_address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            const std::optional<CNetAddr> opt_net_addr = ConsumeDeserializable<CNetAddr>(fuzzed_data_provider);\n+            if (opt_address && opt_net_addr) {\n+                addr_man.Add(*opt_address, *opt_net_addr, fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 100000000));",
    "path": "src/test/fuzz/addrman.cpp",
    "position": 63,
    "original_position": 53,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "688660d3c4ed2092bce2dec1e554e45ed4af2356",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "How was 100000000 chosen?",
    "created_at": "2020-09-04T05:29:25Z",
    "updated_at": "2020-11-12T15:34:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r483395120",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483395120"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r483395120"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483395120/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 63,
    "original_line": 63,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499868060",
    "pull_request_review_id": 502414830,
    "id": 499868060,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2ODA2MA==",
    "diff_hunk": "@@ -0,0 +1,114 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrdb.h>\n+#include <addrman.h>\n+#include <chainparams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    CAddrMan addr_man;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 11)) {\n+        case 0: {\n+            addr_man.Clear();\n+            break;\n+        }\n+        case 1: {\n+            addr_man.ResolveCollisions();\n+            break;\n+        }\n+        case 2: {\n+            (void)addr_man.SelectTriedCollision();\n+            break;\n+        }\n+        case 3: {\n+            (void)addr_man.Select(fuzzed_data_provider.ConsumeBool());\n+            break;\n+        }\n+        case 4: {\n+            (void)addr_man.GetAddr(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096), fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n+            break;\n+        }\n+        case 5: {\n+            const std::optional<CAddress> opt_address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            const std::optional<CNetAddr> opt_net_addr = ConsumeDeserializable<CNetAddr>(fuzzed_data_provider);\n+            if (opt_address && opt_net_addr) {\n+                addr_man.Add(*opt_address, *opt_net_addr, fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 100000000));",
    "path": "src/test/fuzz/addrman.cpp",
    "position": 63,
    "original_position": 53,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "688660d3c4ed2092bce2dec1e554e45ed4af2356",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "100 000 000  was chosen to avoid this signed integer overflow:\r\n\r\n```\r\naddrman.cpp:306:67: runtime error: signed integer overflow: 100000000 - -9223372036854775808 cannot be represented in type 'long'\r\n    #0 0x5594ad96b160 in CAddrMan::Add_(CAddress const&, CNetAddr const&, long) src/addrman.cpp:306:67\r\n    #1 0x5594ad90d6ce in CAddrMan::Add(CAddress const&, CNetAddr const&, long) src/./addrman.h:556:17\r\n    #2 0x5594ad909041 in test_one_input(std::vector<unsigned char, std::allocator<unsigned char> > const&) src/test/fuzz/addrman.cpp:53:26\r\n```",
    "created_at": "2020-10-05T20:57:13Z",
    "updated_at": "2020-11-12T15:34:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r499868060",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499868060"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r499868060"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499868060/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 63,
    "original_line": 63,
    "side": "RIGHT",
    "in_reply_to_id": 483395120
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501611685",
    "pull_request_review_id": 504638756,
    "id": 501611685,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYxMTY4NQ==",
    "diff_hunk": "@@ -0,0 +1,114 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrdb.h>\n+#include <addrman.h>\n+#include <chainparams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    CAddrMan addr_man;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 11)) {\n+        case 0: {\n+            addr_man.Clear();\n+            break;\n+        }\n+        case 1: {\n+            addr_man.ResolveCollisions();\n+            break;\n+        }\n+        case 2: {\n+            (void)addr_man.SelectTriedCollision();\n+            break;\n+        }\n+        case 3: {\n+            (void)addr_man.Select(fuzzed_data_provider.ConsumeBool());\n+            break;\n+        }\n+        case 4: {\n+            (void)addr_man.GetAddr(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096), fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n+            break;\n+        }\n+        case 5: {\n+            const std::optional<CAddress> opt_address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            const std::optional<CNetAddr> opt_net_addr = ConsumeDeserializable<CNetAddr>(fuzzed_data_provider);\n+            if (opt_address && opt_net_addr) {\n+                addr_man.Add(*opt_address, *opt_net_addr, fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 100000000));\n+            }\n+            break;\n+        }\n+        case 6: {\n+            std::vector<CAddress> addresses;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                const std::optional<CAddress> opt_address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+                if (!opt_address) {\n+                    break;\n+                }\n+                addresses.push_back(*opt_address);\n+            }\n+            const std::optional<CNetAddr> opt_net_addr = ConsumeDeserializable<CNetAddr>(fuzzed_data_provider);\n+            if (opt_net_addr) {\n+                addr_man.Add(addresses, *opt_net_addr, fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 100000000));\n+            }\n+            break;\n+        }\n+        case 7: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.Good(*opt_service, fuzzed_data_provider.ConsumeBool(), ConsumeTime(fuzzed_data_provider));\n+            }\n+            break;\n+        }\n+        case 8: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.Attempt(*opt_service, fuzzed_data_provider.ConsumeBool(), ConsumeTime(fuzzed_data_provider));\n+            }\n+            break;\n+        }\n+        case 9: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.Connected(*opt_service, ConsumeTime(fuzzed_data_provider));\n+            }\n+            break;\n+        }\n+        case 10: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.SetServices(*opt_service, ServiceFlags{fuzzed_data_provider.ConsumeIntegral<uint64_t>()});\n+            }\n+            break;\n+        }\n+        case 11: {\n+            (void)addr_man.Check();\n+            break;\n+        }\n+        }\n+    }\n+    (void)addr_man.size();\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            addr_man.m_asmap.push_back(fuzzed_data_provider.ConsumeBool());",
    "path": "src/test/fuzz/addrman.cpp",
    "position": null,
    "original_position": 109,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "4bd95f42e2d18bdf86c05f4b9b5e31fcf0e3ba1d",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should this be at the beginning so that addrman GetGroup calls use a populated asmap?",
    "created_at": "2020-10-08T10:23:38Z",
    "updated_at": "2020-11-12T15:34:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r501611685",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501611685"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r501611685"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501611685/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 109,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521515259",
    "pull_request_review_id": 528379202,
    "id": 521515259,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxNTI1OQ==",
    "diff_hunk": "@@ -0,0 +1,120 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrdb.h>\n+#include <addrman.h>\n+#include <chainparams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <time.h>\n+#include <util/asmap.h>\n+\n+#include <cstdint>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    CAddrMan addr_man;\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            addr_man.m_asmap.push_back(fuzzed_data_provider.ConsumeBool());\n+        }",
    "path": "src/test/fuzz/addrman.cpp",
    "position": null,
    "original_position": 33,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "c44009bb9f1729ac6898a1250c4a7a1a13cfb220",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Encoding one bit as two bytes in the seed sounds really inefficient",
    "created_at": "2020-11-11T17:20:49Z",
    "updated_at": "2020-11-12T15:34:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521515259",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521515259"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521515259"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521515259/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 34,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521520695",
    "pull_request_review_id": 528379202,
    "id": 521520695,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUyMDY5NQ==",
    "diff_hunk": "@@ -16,12 +16,49 @@\n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n-    std::optional<CPartialMerkleTree> partial_merkle_tree = ConsumeDeserializable<CPartialMerkleTree>(fuzzed_data_provider);\n-    if (!partial_merkle_tree) {\n-        return;\n+\n+    {\n+        std::optional<CPartialMerkleTree> partial_merkle_tree = ConsumeDeserializable<CPartialMerkleTree>(fuzzed_data_provider);\n+        if (partial_merkle_tree) {\n+            (void)partial_merkle_tree->GetNumTransactions();\n+            std::vector<uint256> matches;\n+            std::vector<unsigned int> indices;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                indices.push_back(fuzzed_data_provider.ConsumeIntegral<unsigned int>());\n+            }\n+            (void)partial_merkle_tree->ExtractMatches(matches, indices);\n+        }\n+    }\n+\n+    {\n+        CMerkleBlock merkle_block;\n+        const std::optional<CBlock> opt_block = ConsumeDeserializable<CBlock>(fuzzed_data_provider);",
    "path": "src/test/fuzz/merkleblock.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "c44009bb9f1729ac6898a1250c4a7a1a13cfb220",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It doesn't look like there is any state shared between the two fuzz targets in this file. Often the fuzz engine can only generate random noise and I write initial seeds myself. With a format that has several unrelated seeds concatenated together, this becomes harder.\r\n\r\nI guess the options are:\r\n* Split into two fuzz scripts (requires one more binary)\r\n* Use a switch-case to select a fuzz target within the script (requires one more byte at the end of each fuzz input)",
    "created_at": "2020-11-11T17:29:19Z",
    "updated_at": "2020-11-12T15:34:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521520695",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521520695"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521520695"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521520695/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521521813",
    "pull_request_review_id": 528379202,
    "id": 521521813,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUyMTgxMw==",
    "diff_hunk": "@@ -23,4 +34,21 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     (void)JSONRPCTransactionError(transaction_error);\n     (void)RPCErrorFromTransactionError(transaction_error);\n     (void)TransactionErrorString(transaction_error);\n+\n+    (void)StringForFeeEstimateHorizon(fuzzed_data_provider.PickValueInArray({FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}));\n+\n+    const OutputType output_type = fuzzed_data_provider.PickValueInArray({OutputType::LEGACY, OutputType::P2SH_SEGWIT, OutputType::BECH32});\n+    const std::string& output_type_string = FormatOutputType(output_type);\n+    OutputType output_type_parsed;\n+    bool parsed = ParseOutputType(output_type_string, output_type_parsed);\n+    assert(parsed);\n+    assert(output_type == output_type_parsed);\n+    (void)ParseOutputType(fuzzed_data_provider.ConsumeRandomLengthString(64), output_type_parsed);\n+\n+    CAddrMan addr_man;\n+    CDataStream data_stream_peers = ConsumeDataStream(fuzzed_data_provider);",
    "path": "src/test/fuzz/kitchen_sink.cpp",
    "position": null,
    "original_position": 44,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "c44009bb9f1729ac6898a1250c4a7a1a13cfb220",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same here. Creating an addrman stream seed by hand requires a random length string first.",
    "created_at": "2020-11-11T17:31:12Z",
    "updated_at": "2020-11-12T15:34:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521521813",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521521813"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521521813"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521521813/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 49,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521547212",
    "pull_request_review_id": 528418601,
    "id": 521547212,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU0NzIxMg==",
    "diff_hunk": "@@ -0,0 +1,120 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrdb.h>\n+#include <addrman.h>\n+#include <chainparams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <time.h>\n+#include <util/asmap.h>\n+\n+#include <cstdint>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    CAddrMan addr_man;\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            addr_man.m_asmap.push_back(fuzzed_data_provider.ConsumeBool());\n+        }",
    "path": "src/test/fuzz/addrman.cpp",
    "position": null,
    "original_position": 33,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "c44009bb9f1729ac6898a1250c4a7a1a13cfb220",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Now optimized by using `BytesToBits`.",
    "created_at": "2020-11-11T18:10:57Z",
    "updated_at": "2020-11-12T15:34:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521547212",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521547212"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521547212"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521547212/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 34,
    "side": "RIGHT",
    "in_reply_to_id": 521515259
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521547767",
    "pull_request_review_id": 528419340,
    "id": 521547767,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU0Nzc2Nw==",
    "diff_hunk": "@@ -16,12 +16,49 @@\n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n-    std::optional<CPartialMerkleTree> partial_merkle_tree = ConsumeDeserializable<CPartialMerkleTree>(fuzzed_data_provider);\n-    if (!partial_merkle_tree) {\n-        return;\n+\n+    {\n+        std::optional<CPartialMerkleTree> partial_merkle_tree = ConsumeDeserializable<CPartialMerkleTree>(fuzzed_data_provider);\n+        if (partial_merkle_tree) {\n+            (void)partial_merkle_tree->GetNumTransactions();\n+            std::vector<uint256> matches;\n+            std::vector<unsigned int> indices;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                indices.push_back(fuzzed_data_provider.ConsumeIntegral<unsigned int>());\n+            }\n+            (void)partial_merkle_tree->ExtractMatches(matches, indices);\n+        }\n+    }\n+\n+    {\n+        CMerkleBlock merkle_block;\n+        const std::optional<CBlock> opt_block = ConsumeDeserializable<CBlock>(fuzzed_data_provider);",
    "path": "src/test/fuzz/merkleblock.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "c44009bb9f1729ac6898a1250c4a7a1a13cfb220",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for reviewing. Now skipping all changes that are unrelated to CAddrMan to keep this PR focused.",
    "created_at": "2020-11-11T18:12:05Z",
    "updated_at": "2020-11-12T15:34:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521547767",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521547767"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521547767"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521547767/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT",
    "in_reply_to_id": 521520695
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521547861",
    "pull_request_review_id": 528419471,
    "id": 521547861,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU0Nzg2MQ==",
    "diff_hunk": "@@ -23,4 +34,21 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     (void)JSONRPCTransactionError(transaction_error);\n     (void)RPCErrorFromTransactionError(transaction_error);\n     (void)TransactionErrorString(transaction_error);\n+\n+    (void)StringForFeeEstimateHorizon(fuzzed_data_provider.PickValueInArray({FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}));\n+\n+    const OutputType output_type = fuzzed_data_provider.PickValueInArray({OutputType::LEGACY, OutputType::P2SH_SEGWIT, OutputType::BECH32});\n+    const std::string& output_type_string = FormatOutputType(output_type);\n+    OutputType output_type_parsed;\n+    bool parsed = ParseOutputType(output_type_string, output_type_parsed);\n+    assert(parsed);\n+    assert(output_type == output_type_parsed);\n+    (void)ParseOutputType(fuzzed_data_provider.ConsumeRandomLengthString(64), output_type_parsed);\n+\n+    CAddrMan addr_man;\n+    CDataStream data_stream_peers = ConsumeDataStream(fuzzed_data_provider);",
    "path": "src/test/fuzz/kitchen_sink.cpp",
    "position": null,
    "original_position": 44,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "c44009bb9f1729ac6898a1250c4a7a1a13cfb220",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for reviewing. Now skipping all changes that are unrelated to CAddrMan to keep this PR focused.",
    "created_at": "2020-11-11T18:12:15Z",
    "updated_at": "2020-11-12T15:34:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521547861",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521547861"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521547861"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521547861/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 49,
    "side": "RIGHT",
    "in_reply_to_id": 521521813
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521552709",
    "pull_request_review_id": 528425848,
    "id": 521552709,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1MjcwOQ==",
    "diff_hunk": "@@ -0,0 +1,114 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrdb.h>\n+#include <addrman.h>\n+#include <chainparams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    CAddrMan addr_man;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 11)) {\n+        case 0: {\n+            addr_man.Clear();\n+            break;\n+        }\n+        case 1: {\n+            addr_man.ResolveCollisions();\n+            break;\n+        }\n+        case 2: {\n+            (void)addr_man.SelectTriedCollision();\n+            break;\n+        }\n+        case 3: {\n+            (void)addr_man.Select(fuzzed_data_provider.ConsumeBool());\n+            break;\n+        }\n+        case 4: {\n+            (void)addr_man.GetAddr(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096), fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n+            break;\n+        }\n+        case 5: {\n+            const std::optional<CAddress> opt_address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            const std::optional<CNetAddr> opt_net_addr = ConsumeDeserializable<CNetAddr>(fuzzed_data_provider);\n+            if (opt_address && opt_net_addr) {\n+                addr_man.Add(*opt_address, *opt_net_addr, fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 100000000));\n+            }\n+            break;\n+        }\n+        case 6: {\n+            std::vector<CAddress> addresses;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                const std::optional<CAddress> opt_address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+                if (!opt_address) {\n+                    break;\n+                }\n+                addresses.push_back(*opt_address);\n+            }\n+            const std::optional<CNetAddr> opt_net_addr = ConsumeDeserializable<CNetAddr>(fuzzed_data_provider);\n+            if (opt_net_addr) {\n+                addr_man.Add(addresses, *opt_net_addr, fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 100000000));\n+            }\n+            break;\n+        }\n+        case 7: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.Good(*opt_service, fuzzed_data_provider.ConsumeBool(), ConsumeTime(fuzzed_data_provider));\n+            }\n+            break;\n+        }\n+        case 8: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.Attempt(*opt_service, fuzzed_data_provider.ConsumeBool(), ConsumeTime(fuzzed_data_provider));\n+            }\n+            break;\n+        }\n+        case 9: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.Connected(*opt_service, ConsumeTime(fuzzed_data_provider));\n+            }\n+            break;\n+        }\n+        case 10: {\n+            const std::optional<CService> opt_service = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (opt_service) {\n+                addr_man.SetServices(*opt_service, ServiceFlags{fuzzed_data_provider.ConsumeIntegral<uint64_t>()});\n+            }\n+            break;\n+        }\n+        case 11: {\n+            (void)addr_man.Check();\n+            break;\n+        }\n+        }\n+    }\n+    (void)addr_man.size();\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            addr_man.m_asmap.push_back(fuzzed_data_provider.ConsumeBool());",
    "path": "src/test/fuzz/addrman.cpp",
    "position": null,
    "original_position": 109,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "4bd95f42e2d18bdf86c05f4b9b5e31fcf0e3ba1d",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks! Fixed :)",
    "created_at": "2020-11-11T18:21:22Z",
    "updated_at": "2020-11-12T15:34:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521552709",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521552709"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521552709"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521552709/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 109,
    "side": "RIGHT",
    "in_reply_to_id": 501611685
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521882323",
    "pull_request_review_id": 528800893,
    "id": 521882323,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg4MjMyMw==",
    "diff_hunk": "@@ -0,0 +1,121 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrdb.h>\n+#include <addrman.h>\n+#include <chainparams.h>\n+#include <merkleblock.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <time.h>\n+#include <util/asmap.h>\n+\n+#include <cstdint>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    CAddrMan addr_man;\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            addr_man.m_asmap = BytesToBits(ConsumeRandomLengthByteVector(fuzzed_data_provider));\n+        }",
    "path": "src/test/fuzz/addrman.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "090dd83f7b160b04ad583320bab3b3baf956ee6c",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "any reason to re-assign this in a loop?",
    "created_at": "2020-11-12T07:14:03Z",
    "updated_at": "2020-11-12T15:34:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521882323",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521882323"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521882323"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521882323/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 34,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521947536",
    "pull_request_review_id": 528882064,
    "id": 521947536,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk0NzUzNg==",
    "diff_hunk": "@@ -0,0 +1,121 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrdb.h>\n+#include <addrman.h>\n+#include <chainparams.h>\n+#include <merkleblock.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <time.h>\n+#include <util/asmap.h>\n+\n+#include <cstdint>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    CAddrMan addr_man;\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            addr_man.m_asmap = BytesToBits(ConsumeRandomLengthByteVector(fuzzed_data_provider));\n+        }",
    "path": "src/test/fuzz/addrman.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "090dd83f7b160b04ad583320bab3b3baf956ee6c",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Also to make seeds re-usable it should probably use the same encoding like the other places. `git grep 'asmap = ConsumeRan'`",
    "created_at": "2020-11-12T09:09:11Z",
    "updated_at": "2020-11-12T15:34:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521947536",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521947536"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521947536"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/521947536/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 34,
    "side": "RIGHT",
    "in_reply_to_id": 521882323
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/522144834",
    "pull_request_review_id": 529137024,
    "id": 522144834,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE0NDgzNA==",
    "diff_hunk": "@@ -0,0 +1,121 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrdb.h>\n+#include <addrman.h>\n+#include <chainparams.h>\n+#include <merkleblock.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <time.h>\n+#include <util/asmap.h>\n+\n+#include <cstdint>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    CAddrMan addr_man;\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            addr_man.m_asmap = BytesToBits(ConsumeRandomLengthByteVector(fuzzed_data_provider));\n+        }",
    "path": "src/test/fuzz/addrman.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "090dd83f7b160b04ad583320bab3b3baf956ee6c",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh, the loop was a bug. Sorry about that! Thanks for catching.\r\n\r\nNow using the newly introduced `ConsumeRandomLengthBitVector(...)` also in `src/test/fuzz/net`.",
    "created_at": "2020-11-12T14:26:08Z",
    "updated_at": "2020-11-12T15:34:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r522144834",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/522144834"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r522144834"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/522144834/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 34,
    "side": "RIGHT",
    "in_reply_to_id": 521882323
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/522165832",
    "pull_request_review_id": 529165078,
    "id": 522165832,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE2NTgzMg==",
    "diff_hunk": "@@ -63,7 +63,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             break;\n         }\n         case 3: {\n-            const std::vector<bool> asmap = ConsumeRandomLengthIntegralVector<bool>(fuzzed_data_provider, 128);\n+            const std::vector<bool> asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);",
    "path": "src/test/fuzz/net.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "e535f63cbbae4138f470cacb84e4956656012743",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "please also adjust connman with this patch",
    "created_at": "2020-11-12T14:53:13Z",
    "updated_at": "2020-11-12T15:34:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r522165832",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/522165832"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r522165832"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/522165832/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 66,
    "original_line": 66,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/522198310",
    "pull_request_review_id": 529210009,
    "id": 522198310,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5ODMxMA==",
    "diff_hunk": "@@ -63,7 +63,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             break;\n         }\n         case 3: {\n-            const std::vector<bool> asmap = ConsumeRandomLengthIntegralVector<bool>(fuzzed_data_provider, 128);\n+            const std::vector<bool> asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);",
    "path": "src/test/fuzz/net.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "d04a17a7907c57f7b570e1b9743fd63489bdad68",
    "original_commit_id": "e535f63cbbae4138f470cacb84e4956656012743",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point. Now using `ConsumeRandomLengthBitVector` also in `src/test/fuzz/connman`.",
    "created_at": "2020-11-12T15:35:09Z",
    "updated_at": "2020-11-12T15:35:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r522198310",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/522198310"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19065#discussion_r522198310"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19065"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/522198310/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 66,
    "original_line": 66,
    "side": "RIGHT",
    "in_reply_to_id": 522165832
  }
]