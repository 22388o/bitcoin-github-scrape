practicalswift,2020-06-28 19:20:54,Anything left to do here? :)  The changes are limited to `src/test/fuzz/` and should hopefully be trivial to review.,https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-650809846,650809846,
Crypt-iQ,2020-07-13 17:47:52,"I cannot build this branch with either `clang/clang++` or `afl-gcc/afl-g++`:\n\nclang version: `6.0.0-1ubuntu2 (tags/RELEASE_600/final)`\nafl-gcc/afl-g++ built from afl master\n\nMake output:\n```\nMaking all in src\n  2 make[1]: Entering directory '/root/bitcoin/src'\n  3 make[2]: Entering directory '/root/bitcoin/src'\n  4   CXX      test/fuzz/test_fuzz_addition_overflow-addition_overf",https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-657699951,657699951,
MarcoFalke,2020-07-13 17:54:26,"@Crypt-iQ So to clarify, you can build current `master`, but not this pull request merged into current `master`?",https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-657703107,657703107,
Crypt-iQ,2020-07-13 17:57:07,"@MarcoFalke I can build the current `master` branch, but not this branch as it is. I checkout this branch via:\n\n```\ngit fetch origin pull/19065/head:addrmanfuzz\n```",https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-657704505,657704505,
practicalswift,2020-07-13 22:37:33,"@Crypt-iQ Oh, that's weird! Thanks for reporting. I've now rebased this PR on current `master`. Would you mind testing again? :)",https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-657828502,657828502,
Crypt-iQ,2020-07-14 01:20:24,@practicalswift I think you may have forgotten to push it up :) And will test once it's up,https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-657911100,657911100,
practicalswift,2020-07-14 07:44:40,"@Crypt-iQ Oh, thanks for letting me know! Now pushed for real :)",https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-658025967,658025967,
DrahtBot,2020-07-15 00:08:10,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20138 (net: Assume that SetCommonVersion is called at most once per peer by MarcoFalke)\n\nIf you consider this pull requ",https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-658472418,658472418,
Crypt-iQ,2020-07-15 14:58:31,"@practicalswift Able to build this branch with afl and with libfuzzer (clang-10).\n\nCoverage from 24 hours of AFL fuzzing here: https://crypt-iq.github.io/addrman_fuzz_outs/src/index.html\nWith more time it should hit the collision code but it was very slow ~4-5 execs/s.",https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-658819700,658819700,
practicalswift,2020-08-18 20:37:11,@Crypt-iQ Thanks a lot for reviewing! Feedback addressed. Would you mind re-reviewing? :),https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-675702991,675702991,
practicalswift,2020-08-28 05:17:54,@MarcoFalke Would you mind reviewing? FWIW this PR touches only `src/test/fuzz/` :),https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-682330236,682330236,
Crypt-iQ,2020-09-04 05:14:47,"The `CAddrMan` harness looks good to me. \nUbuntu 18:\n- `./configure --enable-fuzz --with-sanitizers=address,undefined,integer,fuzzer` reports implicit-signed-integer-truncation\n- valgrind reports no errors\n\nmacOS v10.15.4:\n- `./configure --enable-fuzz --with-sanitizers=address,fuzzer --disable-asm` reports no errors\n- `./configure --enable-fuzz --with-sanitizers=undefined,integer,fuz",https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-686912218,686912218,
Crypt-iQ,2020-09-11 02:39:46,"The merkleblock and kitchensink harnesses look good to me. Fuzzers didn't report any errors with sanitizers nor with valgrind.\n\nSo the reason the `addrman` fuzzer wasn't able to hit the collision code *consistently* is because of `insecure_rand` which changes across runs. Another source of test randomness is the `GetAdjustedTime` function.\n\nCan also see it when running `make cov_fuzz` twic",https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-690838621,690838621,
practicalswift,2020-10-05 21:03:50,"@Crypt-iQ I'm afraid we'll have to live with some degree of non-determinism. With that said I'm open to all suggestions on how to reduce the non-determinism in testing, but I guess that is out of scope for this PR :)",https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-703887725,703887725,
MarcoFalke,2020-10-08 11:39:08,"> So the reason the addrman fuzzer wasn't able to hit the collision code consistently is because of insecure_rand which changes across runs. Another source of test randomness is the GetAdjustedTime function.\n\nI presume `GetAdjustedTime` is non-deterministic because it asks the system for the time. With `SetMockTime` you can make it return the time you (or the fuzz engine) set.\n\n`insecure_r",https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-705512234,705512234,
Emzy,2020-10-08 15:48:26,"tACK\nTested and worked (Debian GNU/Linux 10 (buster)):\nsrc/test/fuzz/addrman\nsrc/test/fuzz/kitchen_sink\nsrc/test/fuzz/merkleblock",https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-705659445,705659445,
fjahr,2020-10-18 20:33:07,"tested ACK 4bd95f42e2d18bdf86c05f4b9b5e31fcf0e3ba1d\n\nReviewed code and ran the affected fuzz tests for a while.",https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-711418326,711418326,
practicalswift,2020-11-05 00:00:39,"Ready for merge? :)\n\nPR touches code only in `src/test/fuzz/` and has two Tested ACK:s.\n\n_Edit: Noticed that I had unaddressed feedback from @Crypt-iQ in https://github.com/bitcoin/bitcoin/pull/19065#discussion_r501611685. Will address. Sorry._",https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-722039392,722039392,
Crypt-iQ,2020-11-08 09:44:00,"@practicalswift Just had that one comment remaining about `GetGroup`. I tried with @MarcoFalke suggested patch of `insecure_rand` being deterministic and after about a week the fuzzer still did not hit the collision code according to lcov. Granted, I am not throwing very many cores at it (2), and some input could probably be engineered to trigger it - just haven't had the time. As a newcomer to th",https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-723553090,723553090,
practicalswift,2020-11-08 22:09:21,"@Crypt-iQ Thanks for clarifying! I've now moved the AS-map code to allow for use via `GetGroup`. I'm now also mocking the time, but I skipped the suggested `insecure_rand` change since I don't want to change any code outside of `src/test/fuzz/` in this PR. That can be taken in a follow-up if deemed necessary.\n\nI think this PR should be ready for final review now. Many thanks for your patience:",https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-723673056,723673056,
MarcoFalke,2020-11-10 10:21:37,Concept ACK. Will review,https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-724609226,724609226,
practicalswift,2020-11-11 18:12:54,@MarcoFalke Thanks for reviewing. Addressed your optimization request and dropped all changes that are unrelated to `CAddrMan`. Should hopefully be ready for merge now :),https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-725579542,725579542,
practicalswift,2020-11-12 14:26:41,@MarcoFalke Thanks for re-reviewing! Addressed all feedback. Should hopefully be ready for final review _now_ :),https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-726110873,726110873,
practicalswift,2020-11-12 15:35:33,"@MarcoFalke Thanks for re-re-reviewing! Addressed all feedback. Should hopefully be ready for final final review now :)\n\n",https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-726153935,726153935,
MarcoFalke,2020-11-13 06:24:35,review ACK d04a17a7907c57f7b570e1b9743fd63489bdad68,https://github.com/bitcoin/bitcoin/pull/19065#issuecomment-726549201,726549201,
MarcoFalke,2020-05-26 12:02:33,"Why can't this be a testing setup with logging disabled, like in the other tests?",https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430359949,430359949,src/test/fuzz/kitchen_sink.cpp
practicalswift,2020-05-26 12:44:38,"Unfortunately `TestingSetup` introduces non-determinism which makes coverage vary between runs also when using the same set of inputs, see https://github.com/bitcoin/bitcoin/pull/19067#discussion_r429986672 :)",https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430383126,430383126,src/test/fuzz/kitchen_sink.cpp
MarcoFalke,2020-05-26 12:50:51,What about BasicTestgingSetup then?,https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430386919,430386919,src/test/fuzz/kitchen_sink.cpp
practicalswift,2020-05-26 13:05:00,"I think it is the same problem there: I get more setup than I need and a subset of that setup work introduces coverage non-determinism :)\n\nI prefer opt-ing in to exactly the setup I need: it avoids the non-determinism problem and I also think that makes it easier to reason about the dependencies of each fuzzing harness.",https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430395950,430395950,src/test/fuzz/kitchen_sink.cpp
MarcoFalke,2020-05-26 13:17:11,"If non-determinism is an issue for fuzz tests, it is also an issue for unit tests etc. Instead of solving it fresh in every single test case, I'd rather fix it once and for all.\n\nUsing hacks that don't clean up after themselves, depend on global state and leave global state dirty is asking for mishaps. Currently the fuzz datadir is set to the default location of the datadir. I don't think I ne",https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430403885,430403885,src/test/fuzz/kitchen_sink.cpp
practicalswift,2020-05-26 17:32:12,"I was wrong about `BasicTestingSetup`: it seems like only `TestingSetup` introduces coverage non-determinism.\n\nThis shows the issue with `TestingSetup`:\n\n```\n# With TestingSetup:\n$ src/test/fuzz/kitchen_sink corpus/\n…\n#20425  NEW    cov: 3867 ft: 12141 corp: 248/49Kb lim: 607 exec/s: 464 rss: 357Mb L: 605/607 MS: 5 InsertRepeatedBytes-CopyPart-InsertByte-ChangeBinInt-CopyPart-\n  ",https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430586406,430586406,src/test/fuzz/kitchen_sink.cpp
practicalswift,2020-05-26 17:54:55,"Coverage stability with `BasicTestingSetup` vs `TestingSetup`:\n\nFuzzer with an empty `test_one_input` function, and an `initialize` function containing `static const BasicTestingSetup basic_testing_setup`:\n\n```\nINFO: A corpus is not provided, starting from an empty corpus\n#2      INITED cov: 58 ft: 59 corp: 1/1b exec/s: 0 rss: 125Mb\n#65536  pulse  cov: 58 ft: 59 corp: 1/1b lim: 652 e",https://github.com/bitcoin/bitcoin/pull/19065#discussion_r430599736,430599736,src/test/fuzz/kitchen_sink.cpp
Crypt-iQ,2020-07-19 01:25:40,"Is the other way `>>` skipped because it's covered in `deserialize.cpp`? Also since `m_asmap` isn't specified there is a single line that the fuzzer misses:\n\nhttps://github.com/bitcoin/bitcoin/blob/090d87716074434bdc6c7656ec44d049197a793a/src/addrman.h#L370-L376__",https://github.com/bitcoin/bitcoin/pull/19065#discussion_r456845775,456845775,src/test/fuzz/addrman.cpp
Crypt-iQ,2020-07-19 02:24:16,"Could a case be made to not only have the default, match-all filter?",https://github.com/bitcoin/bitcoin/pull/19065#discussion_r456849493,456849493,src/test/fuzz/merkleblock.cpp
practicalswift,2020-08-18 20:33:25,"> Is the other way `>>` skipped because it's covered in `deserialize.cpp`?\n\nYes :)\n\n> Also since `m_asmap` isn't specified there is a single line that the fuzzer misses:\n\nThanks! Now fixed.",https://github.com/bitcoin/bitcoin/pull/19065#discussion_r472475731,472475731,src/test/fuzz/addrman.cpp
practicalswift,2020-08-18 20:36:41,"Fixed! I'm now covering all three:\n* `CMerkleBlock{*opt_block, bloom_filter}`\n* `CMerkleBlock{*opt_block, txids}`\n* `CMerkleBlock{}` (added)",https://github.com/bitcoin/bitcoin/pull/19065#discussion_r472477852,472477852,src/test/fuzz/merkleblock.cpp
Crypt-iQ,2020-09-04 05:29:25,How was 100000000 chosen?,https://github.com/bitcoin/bitcoin/pull/19065#discussion_r483395120,483395120,src/test/fuzz/addrman.cpp
practicalswift,2020-10-05 20:57:13,"100 000 000  was chosen to avoid this signed integer overflow:\n\n```\naddrman.cpp:306:67: runtime error: signed integer overflow: 100000000 - -9223372036854775808 cannot be represented in type 'long'\n    #0 0x5594ad96b160 in CAddrMan::Add_(CAddress const&, CNetAddr const&, long) src/addrman.cpp:306:67\n    #1 0x5594ad90d6ce in CAddrMan::Add(CAddress const&, CNetAddr const&, long) src/./addr",https://github.com/bitcoin/bitcoin/pull/19065#discussion_r499868060,499868060,src/test/fuzz/addrman.cpp
Crypt-iQ,2020-10-08 10:23:38,Should this be at the beginning so that addrman GetGroup calls use a populated asmap?,https://github.com/bitcoin/bitcoin/pull/19065#discussion_r501611685,501611685,src/test/fuzz/addrman.cpp
MarcoFalke,2020-11-11 17:20:49,Encoding one bit as two bytes in the seed sounds really inefficient,https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521515259,521515259,src/test/fuzz/addrman.cpp
MarcoFalke,2020-11-11 17:29:19,"It doesn't look like there is any state shared between the two fuzz targets in this file. Often the fuzz engine can only generate random noise and I write initial seeds myself. With a format that has several unrelated seeds concatenated together, this becomes harder.\n\nI guess the options are:\n* Split into two fuzz scripts (requires one more binary)\n* Use a switch-case to select a fuzz targ",https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521520695,521520695,src/test/fuzz/merkleblock.cpp
MarcoFalke,2020-11-11 17:31:12,Same here. Creating an addrman stream seed by hand requires a random length string first.,https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521521813,521521813,src/test/fuzz/kitchen_sink.cpp
practicalswift,2020-11-11 18:10:57,Now optimized by using `BytesToBits`.,https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521547212,521547212,src/test/fuzz/addrman.cpp
practicalswift,2020-11-11 18:12:05,Thanks for reviewing. Now skipping all changes that are unrelated to CAddrMan to keep this PR focused.,https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521547767,521547767,src/test/fuzz/merkleblock.cpp
practicalswift,2020-11-11 18:12:15,Thanks for reviewing. Now skipping all changes that are unrelated to CAddrMan to keep this PR focused.,https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521547861,521547861,src/test/fuzz/kitchen_sink.cpp
practicalswift,2020-11-11 18:21:22,Thanks! Fixed :),https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521552709,521552709,src/test/fuzz/addrman.cpp
MarcoFalke,2020-11-12 07:14:03,any reason to re-assign this in a loop?,https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521882323,521882323,src/test/fuzz/addrman.cpp
MarcoFalke,2020-11-12 09:09:11,Also to make seeds re-usable it should probably use the same encoding like the other places. `git grep 'asmap = ConsumeRan'`,https://github.com/bitcoin/bitcoin/pull/19065#discussion_r521947536,521947536,src/test/fuzz/addrman.cpp
practicalswift,2020-11-12 14:26:08,"Oh, the loop was a bug. Sorry about that! Thanks for catching.\n\nNow using the newly introduced `ConsumeRandomLengthBitVector(...)` also in `src/test/fuzz/net`.",https://github.com/bitcoin/bitcoin/pull/19065#discussion_r522144834,522144834,src/test/fuzz/addrman.cpp
MarcoFalke,2020-11-12 14:53:13,please also adjust connman with this patch,https://github.com/bitcoin/bitcoin/pull/19065#discussion_r522165832,522165832,src/test/fuzz/net.cpp
practicalswift,2020-11-12 15:35:09,Good point. Now using `ConsumeRandomLengthBitVector` also in `src/test/fuzz/connman`.,https://github.com/bitcoin/bitcoin/pull/19065#discussion_r522198310,522198310,src/test/fuzz/net.cpp
