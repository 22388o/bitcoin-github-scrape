[
  {
    "sha": "35752e58cc7e75b2e375b0916c48c28803c28d17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTc1MmU1OGNjN2U3NWIyZTM3NWIwOTE2YzQ4YzI4ODAzYzI4ZDE3",
    "commit": {
      "author": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2014-07-11T14:42:49Z"
      },
      "committer": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2015-01-12T16:43:06Z"
      },
      "message": "Refactor startup checks onto a separate function.",
      "tree": {
        "sha": "480486a76e340ba7b79d0f5460949194e8520f3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/480486a76e340ba7b79d0f5460949194e8520f3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35752e58cc7e75b2e375b0916c48c28803c28d17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJUs/mfAAoJEAB9eonG33styLgQAJc2A/Fgk5dmOya0dxIAhqm/\nRXWIjUsVamt9oN5kWTu72TPeex7jXTWXReWzhRdfYtCiQz7mrtukZ54IQHPik6F6\nlXiKR+jf/Q16/4dKq8azkF24/NmpMmVn1fflLRYTWlhs60cm3PUWAlprjHr5pMNi\nGdejMQgeRekLSc9eNvFCUZmKOXqztBFgf+OA3GrOB+pe/Z7iGcI99KEqd+sLYqIF\nxDEGS53c9aXkfDkQFf1Dyl9+NYj+jlMPPVZbCU1/cVxL2zuBScucElKZ8MZy8eig\nEcy8lGDc/yKqTP+x6/L5PoIZOlgDGaP/RWmwiE/b90sCh2+uEaqpiraXi8S7j4gN\n3bcxxtIyKB69kzpkNBo6Pf7yHqGnMRIyU10UBibOed1085zcFlI0s03eJ3hAtcpU\nopVSrsLpoOaSRM9WAq2terpvmzuoiXAjDARYzneUC7TLsE/FHoPBUJ/V2PrirpSp\nf1z3WwAtWyJ24ZV78tCGMEGkB606jlrdKg6+v7G9dRoJPq0msGIcoyftKUr+1JgI\nTwEefj3KM9pOy1Ro8AWwaUMVrXJZ/51rhLmV26Vly6SuyUn5/1ayNbzts6TM5TD3\nxmauFX1ZLQCawQKqrKBjPH+lenlUoRB0wh1MigzQ5go4M2yigXvlK7po4uWdcuCf\nd8jfZI2POH0yg4wvoeST\n=Y7/D\n-----END PGP SIGNATURE-----",
        "payload": "tree 480486a76e340ba7b79d0f5460949194e8520f3e\nparent 868da0f40a48ce12665da2d97d1fe7a3e1e72bf7\nauthor Ruben Dario Ponticelli <rdponticelli@gmail.com> 1405089769 -0300\ncommitter Ruben Dario Ponticelli <rdponticelli@gmail.com> 1421080986 -0300\n\nRefactor startup checks onto a separate function.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35752e58cc7e75b2e375b0916c48c28803c28d17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/35752e58cc7e75b2e375b0916c48c28803c28d17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35752e58cc7e75b2e375b0916c48c28803c28d17/comments",
    "author": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "868da0f40a48ce12665da2d97d1fe7a3e1e72bf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/868da0f40a48ce12665da2d97d1fe7a3e1e72bf7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/868da0f40a48ce12665da2d97d1fe7a3e1e72bf7"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 29,
      "deletions": 18
    },
    "files": [
      {
        "sha": "31470745e326f8a23c040a66789fe3e2788e88e9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35752e58cc7e75b2e375b0916c48c28803c28d17/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35752e58cc7e75b2e375b0916c48c28803c28d17/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=35752e58cc7e75b2e375b0916c48c28803c28d17",
        "patch": "@@ -1029,6 +1029,11 @@ bool AppInit2(boost::thread_group& threadGroup)\n                     break;\n                 }\n \n+                if (!CheckBlockFiles()) {\n+                    strLoadError = _(\"Error checking required block files. There must be missing or unreadable data\");\n+                    break;\n+                }\n+\n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n                 if (!mapBlockIndex.empty() && mapBlockIndex.count(Params().HashGenesisBlock()) == 0)"
      },
      {
        "sha": "f122eb018be79cf5d76ac5f6ec45b2c4fbe48e48",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 18,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35752e58cc7e75b2e375b0916c48c28803c28d17/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35752e58cc7e75b2e375b0916c48c28803c28d17/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=35752e58cc7e75b2e375b0916c48c28803c28d17",
        "patch": "@@ -2925,24 +2925,6 @@ bool static LoadBlockIndexDB()\n         }\n     }\n \n-    // Check presence of blk files\n-    LogPrintf(\"Checking all blk files are present...\\n\");\n-    set<int> setBlkDataFiles;\n-    BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n-    {\n-        CBlockIndex* pindex = item.second;\n-        if (pindex->nStatus & BLOCK_HAVE_DATA) {\n-            setBlkDataFiles.insert(pindex->nFile);\n-        }\n-    }\n-    for (std::set<int>::iterator it = setBlkDataFiles.begin(); it != setBlkDataFiles.end(); it++)\n-    {\n-        CDiskBlockPos pos(*it, 0);\n-        if (CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION).IsNull()) {\n-            return false;\n-        }\n-    }\n-\n     // Check whether we need to continue reindexing\n     bool fReindexing = false;\n     pblocktree->ReadReindexing(fReindexing);\n@@ -2968,6 +2950,28 @@ bool static LoadBlockIndexDB()\n     return true;\n }\n \n+bool CheckBlockFiles()\n+{\n+    // Check presence of blk files\n+    LogPrintf(\"Checking all blk files are present...\\n\");\n+    set<int> setBlkDataFiles;\n+    BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n+    {\n+        CBlockIndex* pindex = item.second;\n+        if (pindex->nStatus & BLOCK_HAVE_DATA) {\n+            setBlkDataFiles.insert(pindex->nFile);\n+        }\n+    }\n+    for (std::set<int>::iterator it = setBlkDataFiles.begin(); it != setBlkDataFiles.end(); it++)\n+    {\n+        CDiskBlockPos pos(*it, 0);\n+        if (!CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION)) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n CVerifyDB::CVerifyDB()\n {\n     uiInterface.ShowProgress(_(\"Verifying blocks...\"), 0);"
      },
      {
        "sha": "9a3524188f29d15047d184effdcc0fcaf109db08",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35752e58cc7e75b2e375b0916c48c28803c28d17/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35752e58cc7e75b2e375b0916c48c28803c28d17/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=35752e58cc7e75b2e375b0916c48c28803c28d17",
        "patch": "@@ -174,6 +174,8 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp = NULL);\n bool InitBlockIndex();\n /** Load the block tree and coins database from disk */\n bool LoadBlockIndex();\n+/** Check all required block files are present */\n+bool CheckBlockFiles();\n /** Unload database information */\n void UnloadBlockIndex();\n /** Process protocol messages received from a given node */"
      }
    ]
  },
  {
    "sha": "63ecce054250c15519e637124212f61d05f49a9f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2M2VjY2UwNTQyNTBjMTU1MTllNjM3MTI0MjEyZjYxZDA1ZjQ5YTlm",
    "commit": {
      "author": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2014-10-16T14:59:07Z"
      },
      "committer": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2015-01-12T16:44:13Z"
      },
      "message": "Split the logic to check if a block file can be opened to a separate function.",
      "tree": {
        "sha": "b01dac2431d3177c2f94a3c719e629ed093ec8e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b01dac2431d3177c2f94a3c719e629ed093ec8e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63ecce054250c15519e637124212f61d05f49a9f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJUs/ndAAoJEAB9eonG33stbfUP/2xFRBcZRhLtOXPnJvcWU11h\nVacMhsenUVlB8HVtZCI/CWqf1Z9SHc4IIXfdsPikMpy3tU443gr+7bw33iWuypyN\ns/bh0EWRXjgL8FyAdovk2054PBGTtEBAPWUgZJZmT5Un4rvF3gwOSdvIBSPf7sdd\nhXO0MY5DjJ3w64Y2P5F2gPtFT4bcvJtGd1LKf/LsiHQTy4yzBoJSOyuK8LmvoHdM\nn/CtTUfRiE/sJXpS9YreCARXEnZanRl5OV2KrrvmtVq/s6EZnafdK0pFHq0kb8AO\nYeH6avf+UIJCL5TyV9kvqdrqocxDUcerAOBlce71mNnPj/U0Tx53pwKwC6AJ9RjC\noAf/2UlkcTQZSy9Ockl2JV1o7Gy8nRqYQwmGut2KrUkUMpR4WNHNNlcSLc4SDGaA\no+kVMg2iNiB7eKkkFFYQ+QgT1Yo8dHW5f0o476QLjEMNrFJ8yHVH9OCJCWfqgcK7\nr8d+7U/5GWVjaLd0tvsVNx+/5TU7QhAOiygya7uBNZUmI9MlS4oE44/xx0prBkic\nuRuqyBn7LV8osa93DIiuBKZnyeGpdSDe1+So0ALow2s+/NYnfqnvwnNRzQJ7ntok\nCLTmZsD6lrJuKsjGeIUu5YjvvgD4YJxnmUplRzoEFIm02B7OWh2O8BaCiygkTJIM\nWpLLU71jZmRt8+wRfo9a\n=LidP\n-----END PGP SIGNATURE-----",
        "payload": "tree b01dac2431d3177c2f94a3c719e629ed093ec8e9\nparent 35752e58cc7e75b2e375b0916c48c28803c28d17\nauthor Ruben Dario Ponticelli <rdponticelli@gmail.com> 1413471547 -0300\ncommitter Ruben Dario Ponticelli <rdponticelli@gmail.com> 1421081053 -0300\n\nSplit the logic to check if a block file can be opened to a separate function.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63ecce054250c15519e637124212f61d05f49a9f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63ecce054250c15519e637124212f61d05f49a9f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63ecce054250c15519e637124212f61d05f49a9f/comments",
    "author": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35752e58cc7e75b2e375b0916c48c28803c28d17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35752e58cc7e75b2e375b0916c48c28803c28d17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35752e58cc7e75b2e375b0916c48c28803c28d17"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0644589220fd6b1edce6b800a54db1ce87ed712e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63ecce054250c15519e637124212f61d05f49a9f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63ecce054250c15519e637124212f61d05f49a9f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=63ecce054250c15519e637124212f61d05f49a9f",
        "patch": "@@ -2950,6 +2950,12 @@ bool static LoadBlockIndexDB()\n     return true;\n }\n \n+bool BlockFileIsOpenable(int nFile)\n+{\n+    CDiskBlockPos pos(nFile, 0);\n+    return !CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION).IsNull();\n+}\n+\n bool CheckBlockFiles()\n {\n     // Check presence of blk files\n@@ -2964,8 +2970,7 @@ bool CheckBlockFiles()\n     }\n     for (std::set<int>::iterator it = setBlkDataFiles.begin(); it != setBlkDataFiles.end(); it++)\n     {\n-        CDiskBlockPos pos(*it, 0);\n-        if (!CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION)) {\n+        if (!BlockFileIsOpenable(*it)) {\n             return false;\n         }\n     }"
      }
    ]
  },
  {
    "sha": "972c5d72baaa691e39b29ea2abcf1075f450b737",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzJjNWQ3MmJhYWE2OTFlMzliMjllYTJhYmNmMTA3NWY0NTBiNzM3",
    "commit": {
      "author": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2014-10-16T17:28:53Z"
      },
      "committer": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2015-01-12T16:44:14Z"
      },
      "message": "Add undo data to checks to be sure all required info can be opened.",
      "tree": {
        "sha": "b59b11453fb45c65f1c7cfcfb461d22936e485fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b59b11453fb45c65f1c7cfcfb461d22936e485fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/972c5d72baaa691e39b29ea2abcf1075f450b737",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJUs/neAAoJEAB9eonG33strFAP/RFqj7UrEkjvYt1M+AUV+BUx\n5yfNmBM3xWdfH/eYAwehc91c2vvTVC3BpFPJvgTOo/TBp57p1YMK2VBPldPjygAk\nF0M/K1lNxMfzFMUo0rcJhQOfLnEzmErkAMdBGv0iNDq00q5Z5HcoIx9WHW+Ropf/\nAFHW0KyhFnFM57E+OPDvjEDU6d6xdVAjVqzTVolx7ej70dpVOhXVj+Q3NzKKoVrH\nOvo6VkJOKwG0IeGTU1k5aMRkR9L+lYQ27e+X/P25aLt/mNNRzaR0T41bsrFwYheE\ny3lIkHsvaxp0VhIu85RvRmkGH7Llb+LdEjD85M4xkCglq0YKtw9SE6TAajknjLqX\nG9LMn0qUq6oJxGwzv+dsr16qlR+HDIkorv9jGDOqtWqAnWTaFt8hNqwNDeSXzv9+\nbDzYMXbYgd2uOWaD4xFagZnDwkBMnI8aroE7k+Mfg/MKepJ/TPzvWZ/IcRCh3sj7\n3BDCCoSpTSZErdb0nOUN8WRApB1AGX3o4haQA7TF6pbZnT3QJpqMLgCOksqn0kMT\nrfkyk/ejBKXZdNKX4swKdRjHbsN8Fm2eeWvfdBRNuJ4f3LL2ZXBpkkOE7vYEtjBY\n7ak+zy+EclTwcEZXJDXFBwqEWV9HXR0gPTHGPmQQc3vpPtuZ73MafjxhE/G4hsbA\npH0u34jyz8H/hIG42Wl9\n=2KWX\n-----END PGP SIGNATURE-----",
        "payload": "tree b59b11453fb45c65f1c7cfcfb461d22936e485fd\nparent 63ecce054250c15519e637124212f61d05f49a9f\nauthor Ruben Dario Ponticelli <rdponticelli@gmail.com> 1413480533 -0300\ncommitter Ruben Dario Ponticelli <rdponticelli@gmail.com> 1421081054 -0300\n\nAdd undo data to checks to be sure all required info can be opened.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/972c5d72baaa691e39b29ea2abcf1075f450b737",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/972c5d72baaa691e39b29ea2abcf1075f450b737",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/972c5d72baaa691e39b29ea2abcf1075f450b737/comments",
    "author": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63ecce054250c15519e637124212f61d05f49a9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63ecce054250c15519e637124212f61d05f49a9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63ecce054250c15519e637124212f61d05f49a9f"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 22,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e77851d223f43213cc8bc469962c01fa3393ca8a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 5,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/972c5d72baaa691e39b29ea2abcf1075f450b737/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/972c5d72baaa691e39b29ea2abcf1075f450b737/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=972c5d72baaa691e39b29ea2abcf1075f450b737",
        "patch": "@@ -2956,21 +2956,38 @@ bool BlockFileIsOpenable(int nFile)\n     return !CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION).IsNull();\n }\n \n+bool UndoFileIsOpenable(int nFile)\n+{\n+    CDiskBlockPos pos(nFile, 0);\n+    return !CAutoFile(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION).IsNull();\n+}\n+\n+bool DataFilesAreOpenable(int nFile)\n+{\n+    if (BlockFileIsOpenable(nFile) && UndoFileIsOpenable(nFile))\n+        return true;\n+    return false;\n+}\n+\n bool CheckBlockFiles()\n {\n     // Check presence of blk files\n     LogPrintf(\"Checking all blk files are present...\\n\");\n-    set<int> setBlkDataFiles;\n+    set<int> setRequiredDataFilesAreOpenable;\n     BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n-        if (pindex->nStatus & BLOCK_HAVE_DATA) {\n-            setBlkDataFiles.insert(pindex->nFile);\n+        if (pindex->nStatus & BLOCK_HAVE_DATA && pindex->nStatus & BLOCK_HAVE_UNDO) {\n+            setRequiredDataFilesAreOpenable.insert(pindex->nFile);\n+        } else {\n+            LogPrintf(\"Error: Required data for block: %i is missing.\\n\", pindex->nHeight);\n+            return false;\n         }\n     }\n-    for (std::set<int>::iterator it = setBlkDataFiles.begin(); it != setBlkDataFiles.end(); it++)\n+    for (std::set<int>::iterator it = setRequiredDataFilesAreOpenable.begin(); it != setRequiredDataFilesAreOpenable.end(); it++)\n     {\n-        if (!BlockFileIsOpenable(*it)) {\n+        if (!DataFilesAreOpenable(*it)) {\n+            LogPrintf(\"Error: Can't open a required block file: %i.\\n\", *it);\n             return false;\n         }\n     }"
      }
    ]
  },
  {
    "sha": "cb883f0e4c204a1eb4245d7afa5dba25358546ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjg4M2YwZTRjMjA0YTFlYjQyNDVkN2FmYTVkYmEyNTM1ODU0NmNl",
    "commit": {
      "author": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2014-10-16T16:53:39Z"
      },
      "committer": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2015-01-12T16:44:15Z"
      },
      "message": "Scan active chain instead of map of blocks.",
      "tree": {
        "sha": "1bb6b8562cbfc935c47b55bd4a59aa9f58115e5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bb6b8562cbfc935c47b55bd4a59aa9f58115e5f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb883f0e4c204a1eb4245d7afa5dba25358546ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJUs/nfAAoJEAB9eonG33st51YP/3i+w9Sr5ekbv+Iad22lhWoG\ns23H+HZxJ/egOfZss6SFHEXTo8Ja5BBqeLCjMbPMT+4wpBYWGWPEiZvEG90CgR6d\n4yCvysg5w3tz+RSpSnYCgndO+PIKbiodWkTu2d+Grl2ZL/ClITUE8znGyBfGXz6n\nWgyVlBOBFTk/6oI71JbYOsh7yEFeJOOkIEq55awb6eQqvet2Wzc2p3dFAvEqsuyp\nAWDXe9+Dn34AVvv48LjcMxDykGa8IvFqjBNBye4YpjeBZh1HlzKJSRyKU1z+eRua\nDlKL5q7Pgve4BYLtGTOXEfEnJA0CNjNK9o8w9Dxxk6PFlwTRQw3hYiG6oyfn/1jZ\nyFAbAeHv5UvSfk6zznjc6KzkwCkOPRh9HdnAoxypATVwhvsnWws14klqMJFZ1KEy\n/4BkahVInCoZ0jZxhhEIIJHXwcLJRcbPBsJFr9TjWK7eDc+wEzLoEZAKRD3zK6Gc\nNn8bQ9BaKQuaGDb54E6G+l2PGT+B+GWS/bf8Qk9cj5QBJnJQWn6K/aAfpDw3zW/e\nSDdX6KoCxZQaS7j5Csoc0cFiiQ6ESyoSLp4MFPuDQbouJRwH//TVc9YbQk6UJ9hx\nqHq1pCMN7fUIm90RolT6Qs/F6SUJAKQaxXWkjAKXs+8l5l3WgS3QWscoFnJVXwp1\n8jj0DMg9fxKrypF18qaX\n=VaNR\n-----END PGP SIGNATURE-----",
        "payload": "tree 1bb6b8562cbfc935c47b55bd4a59aa9f58115e5f\nparent 972c5d72baaa691e39b29ea2abcf1075f450b737\nauthor Ruben Dario Ponticelli <rdponticelli@gmail.com> 1413478419 -0300\ncommitter Ruben Dario Ponticelli <rdponticelli@gmail.com> 1421081055 -0300\n\nScan active chain instead of map of blocks.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb883f0e4c204a1eb4245d7afa5dba25358546ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb883f0e4c204a1eb4245d7afa5dba25358546ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb883f0e4c204a1eb4245d7afa5dba25358546ce/comments",
    "author": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "972c5d72baaa691e39b29ea2abcf1075f450b737",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/972c5d72baaa691e39b29ea2abcf1075f450b737",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/972c5d72baaa691e39b29ea2abcf1075f450b737"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 9,
      "deletions": 11
    },
    "files": [
      {
        "sha": "58ed9b5cba32f241ec65fddcc5b40485b1a86f15",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb883f0e4c204a1eb4245d7afa5dba25358546ce/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb883f0e4c204a1eb4245d7afa5dba25358546ce/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cb883f0e4c204a1eb4245d7afa5dba25358546ce",
        "patch": "@@ -2974,23 +2974,21 @@ bool CheckBlockFiles()\n     // Check presence of blk files\n     LogPrintf(\"Checking all blk files are present...\\n\");\n     set<int> setRequiredDataFilesAreOpenable;\n-    BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n-    {\n-        CBlockIndex* pindex = item.second;\n+    for (CBlockIndex* pindex = chainActive.Tip(); pindex && pindex->pprev; pindex = pindex->pprev) {\n         if (pindex->nStatus & BLOCK_HAVE_DATA && pindex->nStatus & BLOCK_HAVE_UNDO) {\n-            setRequiredDataFilesAreOpenable.insert(pindex->nFile);\n+            if (!setRequiredDataFilesAreOpenable.count(pindex->nFile)) {\n+                if (DataFilesAreOpenable(pindex->nFile))\n+                    setRequiredDataFilesAreOpenable.insert(pindex->nFile);\n+                else {\n+                    LogPrintf(\"Error: Required file for block: %i can't be opened.\\n\", pindex->nHeight);\n+                    return false;\n+                }\n+            }\n         } else {\n             LogPrintf(\"Error: Required data for block: %i is missing.\\n\", pindex->nHeight);\n             return false;\n         }\n     }\n-    for (std::set<int>::iterator it = setRequiredDataFilesAreOpenable.begin(); it != setRequiredDataFilesAreOpenable.end(); it++)\n-    {\n-        if (!DataFilesAreOpenable(*it)) {\n-            LogPrintf(\"Error: Can't open a required block file: %i.\\n\", *it);\n-            return false;\n-        }\n-    }\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "1339b7bbbe2f4d01de1e55f72a4834c3a7d9a148",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzM5YjdiYmJlMmY0ZDAxZGUxZTU1ZjcyYTQ4MzRjM2E3ZDlhMTQ4",
    "commit": {
      "author": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2014-08-19T12:50:29Z"
      },
      "committer": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2015-01-12T16:44:16Z"
      },
      "message": "Accept pruned blocks when loading the database.",
      "tree": {
        "sha": "498bfbff515b93c6a9933023bfe2a065fc8c9424",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/498bfbff515b93c6a9933023bfe2a065fc8c9424"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1339b7bbbe2f4d01de1e55f72a4834c3a7d9a148",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJUs/ngAAoJEAB9eonG33st/a4P/0iIASXWt+Zp+QbggRj8jJrf\n+pItc4QTA3Y/sWm7HmHNDb2ohkOK4MZVCW1ffFYU8Qp9OY8TSRtOiNbDdUyR282d\nJZfOaECMx7LpllOqEFPs1fElnzRQ+sLjz9jWEF2gj3qpgJ9EdcJpWo8a0/MTV6OP\nAke9rXRMfoft33w9dLrJNDekKnzj+zO8wStgDjQ0gQTXpNZ3TX0G6rbabMXtZT44\ntMYoDS2aZgWTVzB3Z1uzvHjzCzRPfca+WiU/XYVl0eGbHVfiJ3dq2yY9bCA6ZM4Y\n+uiVCHj1jMC8OwpZS3RFfUdf5Prx7079454AZReygXBsuyXtuI/fbjgGxGA0ehA6\nwxdPUSPuwsZXVocJIw+Y5ZQd/S9Prstt3QVDIHiQPdjg+EawBXQ9aogsFjDnMEiC\nMgvDZTcBAGQq0U5WKv0oTgd115URb4UGut/0byfWxX/b9HBu6elh2d8CiuYqsnkv\n6zdxJRXQC5qwPO8qZbML+mCedEFWCo/gzEPiv5MBSrFBofLkbn1NB3FXVtqkCC3n\n7+LMjTIFP3WZfpuQ2Jc6uPajhv/EG5H9n6iPbJ9GRRBb4N49TcFf09MdQxAGzxDI\niio/xebWzCLkle7GLSJr8vHyQPbTwKclVHQ/ilrZBG1N35tN+XCsUrGZJMfxJJ8x\noOPM2LPUZsc3Q+HPt6xI\n=eA4s\n-----END PGP SIGNATURE-----",
        "payload": "tree 498bfbff515b93c6a9933023bfe2a065fc8c9424\nparent cb883f0e4c204a1eb4245d7afa5dba25358546ce\nauthor Ruben Dario Ponticelli <rdponticelli@gmail.com> 1408452629 -0300\ncommitter Ruben Dario Ponticelli <rdponticelli@gmail.com> 1421081056 -0300\n\nAccept pruned blocks when loading the database.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1339b7bbbe2f4d01de1e55f72a4834c3a7d9a148",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1339b7bbbe2f4d01de1e55f72a4834c3a7d9a148",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1339b7bbbe2f4d01de1e55f72a4834c3a7d9a148/comments",
    "author": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb883f0e4c204a1eb4245d7afa5dba25358546ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb883f0e4c204a1eb4245d7afa5dba25358546ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb883f0e4c204a1eb4245d7afa5dba25358546ce"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "382374576ed91aa89caf99152977570e40d6ed05",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1339b7bbbe2f4d01de1e55f72a4834c3a7d9a148/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1339b7bbbe2f4d01de1e55f72a4834c3a7d9a148/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1339b7bbbe2f4d01de1e55f72a4834c3a7d9a148",
        "patch": "@@ -2886,7 +2886,7 @@ bool static LoadBlockIndexDB()\n     {\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n-        if (pindex->nStatus & BLOCK_HAVE_DATA) {\n+        if (pindex->nStatus & BLOCK_HAVE_DATA || pindex->nStatus & BLOCK_VALID_CHAIN) {\n             if (pindex->pprev) {\n                 if (pindex->pprev->nChainTx) {\n                     pindex->nChainTx = pindex->pprev->nChainTx + pindex->nTx;"
      }
    ]
  },
  {
    "sha": "c974c570250132286e16fbc430d4637afc10df98",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTc0YzU3MDI1MDEzMjI4NmUxNmZiYzQzMGQ0NjM3YWZjMTBkZjk4",
    "commit": {
      "author": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2014-07-08T12:50:35Z"
      },
      "committer": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2015-01-12T16:44:16Z"
      },
      "message": "Add a switch to allow running in a pruned state.\n\nThese are the main functional changes on this state:\n\n* Do not allow running with a wallet or txindex.\n* Check for data at startup is mandatory only up to the last 288 blocks.\n* NODE_NETWORK flag is unset.\n* Requests for pruned blocks from other peers is answered with \"notfound\" and they are disconnected, not to stall their IBD.",
      "tree": {
        "sha": "3435712ffc9dfa70ca6a3faffbfad6cf1f94d9e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3435712ffc9dfa70ca6a3faffbfad6cf1f94d9e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c974c570250132286e16fbc430d4637afc10df98",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJUs/ngAAoJEAB9eonG33stXqkP/RdyMJmzvfse0AQJ9Cr1FEPg\nHUWp1RiPkWI2gnZnzMHQ4Qp0Nu7vLYuj31j+Z2uWtnSyWGWkjJACAy4OG5NW2inK\nde4I+6C5J5ECL8p9Vk2BaJ4Nk5qCuXuMdSq1nHq8C1nQBYf+fzjfth+3PIFazWvO\nnVOL47ELFSPwzwgn4qiLX29A+uBUxiI9yMzjFoQHzw8xy3IZKjrya7d+8MLcn5RJ\nNov+zJxqB612J617JLj19r1jYtXmYW2WxzOSK8vWj4WtcAdHssXa8BUzva6R70PR\nbXiZDgD6ZkNK/ygyPtLF7YIO4iSXYelF2+FtnvF0pxO048OKcbHNPG24YYDWhcHB\nf4LDCcCqTOGCD+WMLLGhas3esK/rYoZ4vGzyYwiIxWogxW6gES/5AeRIyVZg4QQ1\n/pxtmkGuUsgsmx8KSKKJkNFXdc1UO+yIhJP1eYkz0ZPcIr30IbhSoXP1I7tJ2o+/\nIy9nuE2wWr0yOK0WHrOZmP1Z1txXOIZbfseXYUEg01Lby6iYpUOz3RYc//gYiR4a\n506J8p/T8ZVIxasiRedWtZ2lNljD6ZD6eMhum9zzW1Obk5qakghsjMWjaOZUrJRU\nu0jm5ycQPfJcFZt3HK3XsWHrDeZw9TakOSWvMIbk8coEnP2EPEEPGWK8zNYwSPci\nXQ4ZVYgV73XXUKp0GIcC\n=JgxU\n-----END PGP SIGNATURE-----",
        "payload": "tree 3435712ffc9dfa70ca6a3faffbfad6cf1f94d9e2\nparent 1339b7bbbe2f4d01de1e55f72a4834c3a7d9a148\nauthor Ruben Dario Ponticelli <rdponticelli@gmail.com> 1404823835 -0300\ncommitter Ruben Dario Ponticelli <rdponticelli@gmail.com> 1421081056 -0300\n\nAdd a switch to allow running in a pruned state.\n\nThese are the main functional changes on this state:\n\n* Do not allow running with a wallet or txindex.\n* Check for data at startup is mandatory only up to the last 288 blocks.\n* NODE_NETWORK flag is unset.\n* Requests for pruned blocks from other peers is answered with \"notfound\" and they are disconnected, not to stall their IBD.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c974c570250132286e16fbc430d4637afc10df98",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c974c570250132286e16fbc430d4637afc10df98",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c974c570250132286e16fbc430d4637afc10df98/comments",
    "author": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1339b7bbbe2f4d01de1e55f72a4834c3a7d9a148",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1339b7bbbe2f4d01de1e55f72a4834c3a7d9a148",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1339b7bbbe2f4d01de1e55f72a4834c3a7d9a148"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 84,
      "deletions": 30
    },
    "files": [
      {
        "sha": "19c087e6c93c9586227f09dd64df39cf1af86cce",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c974c570250132286e16fbc430d4637afc10df98/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c974c570250132286e16fbc430d4637afc10df98/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c974c570250132286e16fbc430d4637afc10df98",
        "patch": "@@ -258,6 +258,7 @@ std::string HelpMessage(HelpMessageMode mode)\n #ifndef WIN32\n     strUsage += \"  -pid=<file>            \" + strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\") + \"\\n\";\n #endif\n+    strUsage += \"  -pruned                \" + _(\"Run in a pruned state\") + \"\\n\";\n     strUsage += \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \" \" + _(\"on startup\") + \"\\n\";\n #if !defined(WIN32)\n     strUsage += \"  -sysperms              \" + _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\") + \"\\n\";\n@@ -638,6 +639,19 @@ bool AppInit2(boost::thread_group& threadGroup)\n     if (nFD - MIN_CORE_FILEDESCRIPTORS < nMaxConnections)\n         nMaxConnections = nFD - MIN_CORE_FILEDESCRIPTORS;\n \n+    if (GetBoolArg(\"-pruned\", false)) {\n+        if (GetBoolArg(\"-txindex\", false))\n+            return InitError(_(\"Pruned mode is incompatible with -txindex.\"));\n+#ifdef ENABLE_WALLET\n+        if (!GetBoolArg(\"-disablewallet\", false)) {\n+            if (SoftSetBoolArg(\"-disablewallet\", true))\n+                LogPrintf(\"AppInit2 : parameter interaction: -pruned=1 -> setting -disablewallet=1\\n\");\n+            else\n+                return InitError(_(\"Can't run with a wallet in pruned mode.\"));\n+        }\n+#endif\n+    }\n+\n     // ********************************************************* Step 3: parameter-to-internal-flags\n \n     fDebug = !mapMultiArgs[\"-debug\"].empty();\n@@ -673,6 +687,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n         nScriptCheckThreads = MAX_SCRIPTCHECK_THREADS;\n \n     fServer = GetBoolArg(\"-server\", false);\n+    fPruned = GetBoolArg(\"-pruned\", false);\n #ifdef ENABLE_WALLET\n     bool fDisableWallet = GetBoolArg(\"-disablewallet\", false);\n #endif\n@@ -1276,6 +1291,10 @@ bool AppInit2(boost::thread_group& threadGroup)\n     LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n #endif\n \n+    if (fPruned) {\n+        LogPrintf(\"Unsetting NODE_NETWORK on prune mode\\n\");\n+        nLocalServices &= ~NODE_NETWORK;\n+    }\n     StartNode(threadGroup);\n \n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "56cd0f75e41a2d8843084a49919bbf7dce4cc1c4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 30,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c974c570250132286e16fbc430d4637afc10df98/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c974c570250132286e16fbc430d4637afc10df98/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c974c570250132286e16fbc430d4637afc10df98",
        "patch": "@@ -53,6 +53,7 @@ bool fReindex = false;\n bool fTxIndex = false;\n bool fIsBareMultisigStd = true;\n unsigned int nCoinCacheSize = 5000;\n+bool fPruned = false;\n \n \n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n@@ -2972,21 +2973,46 @@ bool DataFilesAreOpenable(int nFile)\n bool CheckBlockFiles()\n {\n     // Check presence of blk files\n-    LogPrintf(\"Checking all blk files are present...\\n\");\n+    int nKeepBlksFromHeight = fPruned ? (max((int)(chainActive.Height() - MIN_BLOCKS_TO_KEEP), 0)) : 0;\n+    LogPrintf(\"Checking all required data for active chain is available (mandatory from height %i to %i)\\n\", nKeepBlksFromHeight, max(chainActive.Height(), 0));\n+    map<int, bool> mapBlockFileIsOpenable, mapUndoFileIsOpenable;\n     set<int> setRequiredDataFilesAreOpenable;\n     for (CBlockIndex* pindex = chainActive.Tip(); pindex && pindex->pprev; pindex = pindex->pprev) {\n-        if (pindex->nStatus & BLOCK_HAVE_DATA && pindex->nStatus & BLOCK_HAVE_UNDO) {\n-            if (!setRequiredDataFilesAreOpenable.count(pindex->nFile)) {\n+        if (pindex->nHeight > nKeepBlksFromHeight) {\n+            if (!(pindex->nStatus & BLOCK_HAVE_DATA) || !(pindex->nStatus & BLOCK_HAVE_UNDO)) { // Fail immediately if required data is missing\n+                LogPrintf(\"Error: Required data for block: %i is missing.\\n\", pindex->nHeight);\n+                return false;\n+            } else if (!setRequiredDataFilesAreOpenable.count(pindex->nFile)) {\n                 if (DataFilesAreOpenable(pindex->nFile))\n                     setRequiredDataFilesAreOpenable.insert(pindex->nFile);\n-                else {\n+                else { // Or if data is unreadable\n                     LogPrintf(\"Error: Required file for block: %i can't be opened.\\n\", pindex->nHeight);\n                     return false;\n                 }\n             }\n-        } else {\n-            LogPrintf(\"Error: Required data for block: %i is missing.\\n\", pindex->nHeight);\n-            return false;\n+        } else { // Check consistency of unrequired data\n+            if (pindex->nStatus & BLOCK_HAVE_DATA) {\n+                if (!mapBlockFileIsOpenable.count(pindex->nFile))\n+                    mapBlockFileIsOpenable[pindex->nFile] = BlockFileIsOpenable(pindex->nFile);\n+            }\n+            if (pindex->nStatus & BLOCK_HAVE_UNDO) {\n+                if (!mapUndoFileIsOpenable.count(pindex->nFile))\n+                    mapUndoFileIsOpenable[pindex->nFile] = UndoFileIsOpenable(pindex->nFile);\n+            }\n+        }\n+        bool fWrite = false;\n+        if (mapBlockFileIsOpenable.count(pindex->nFile) && !mapBlockFileIsOpenable[pindex->nFile]) {\n+            pindex->nStatus &= ~BLOCK_HAVE_DATA;\n+            fWrite = true;\n+        }\n+        if (mapUndoFileIsOpenable.count(pindex->nFile) && !mapUndoFileIsOpenable[pindex->nFile]) {\n+            pindex->nStatus &= ~BLOCK_HAVE_UNDO;\n+            fWrite = true;\n+        }\n+        if (fWrite) {\n+            CDiskBlockIndex blockindex(pindex);\n+            if (!pblocktree->WriteBlockIndex(blockindex))\n+                return false;\n         }\n     }\n     return true;\n@@ -3371,30 +3397,36 @@ void static ProcessGetData(CNode* pfrom)\n                 {\n                     // Send block from disk\n                     CBlock block;\n-                    if (!ReadBlockFromDisk(block, (*mi).second))\n-                        assert(!\"cannot load block from disk\");\n-                    if (inv.type == MSG_BLOCK)\n-                        pfrom->PushMessage(\"block\", block);\n-                    else // MSG_FILTERED_BLOCK)\n-                    {\n-                        LOCK(pfrom->cs_filter);\n-                        if (pfrom->pfilter)\n-                        {\n-                            CMerkleBlock merkleBlock(block, *pfrom->pfilter);\n-                            pfrom->PushMessage(\"merkleblock\", merkleBlock);\n-                            // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n-                            // This avoids hurting performance by pointlessly requiring a round-trip\n-                            // Note that there is currently no way for a node to request any single transactions we didnt send here -\n-                            // they must either disconnect and retry or request the full block.\n-                            // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n-                            // however we MUST always provide at least what the remote peer needs\n-                            typedef std::pair<unsigned int, uint256> PairType;\n-                            BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n-                                if (!pfrom->setInventoryKnown.count(CInv(MSG_TX, pair.second)))\n-                                    pfrom->PushMessage(\"tx\", block.vtx[pair.first]);\n+                    if (!ReadBlockFromDisk(block, (*mi).second)) {\n+                        if (fPruned) {\n+                            // Disconnect peers asking us for blocks we don't have, not to stall their IBD. They shouldn't ask as we unset NODE_NETWORK on this mode.\n+                            LogPrintf(\"cannot load block from disk, answering notfound, and disconnecting peer:%d\\n\", pfrom->id);\n+                            vNotFound.push_back(inv);\n+                            pfrom->fDisconnect = true;\n+                        } else\n+                            AbortNode(\"cannot load block from disk\");\n+                    } else {\n+                        if (inv.type == MSG_BLOCK)\n+                            pfrom->PushMessage(\"block\", block);\n+                        else { // MSG_FILTERED_BLOCK\n+                            LOCK(pfrom->cs_filter);\n+                            if (pfrom->pfilter) {\n+                                CMerkleBlock merkleBlock(block, *pfrom->pfilter);\n+                                pfrom->PushMessage(\"merkleblock\", merkleBlock);\n+                                // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n+                                // This avoids hurting performance by pointlessly requiring a round-trip\n+                                // Note that there is currently no way for a node to request any single transactions we didnt send here -\n+                                // they must either disconnect and retry or request the full block.\n+                                // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n+                                // however we MUST always provide at least what the remote peer needs\n+                                typedef std::pair<unsigned int, uint256> PairType;\n+                                BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n+                                    if (!pfrom->setInventoryKnown.count(CInv(MSG_TX, pair.second)))\n+                                        pfrom->PushMessage(\"tx\", block.vtx[pair.first]);\n+                            }\n+                            // else\n+                                // no response\n                         }\n-                        // else\n-                            // no response\n                     }\n \n                     // Trigger them to send a getblocks request for the next batch of inventory"
      },
      {
        "sha": "1dde8036c7c124f7268b9ee294e37f36a0dac690",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c974c570250132286e16fbc430d4637afc10df98/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c974c570250132286e16fbc430d4637afc10df98/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=c974c570250132286e16fbc430d4637afc10df98",
        "patch": "@@ -93,6 +93,8 @@ static const unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;\n static const unsigned int DATABASE_WRITE_INTERVAL = 3600;\n /** Maximum length of reject messages. */\n static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n+/** Minimum amount of blocks to keep unpruned, needed to afford deep reorganizations. */\n+static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n \n /** \"reject\" message codes */\n static const unsigned char REJECT_MALFORMED = 0x01;\n@@ -127,6 +129,7 @@ extern bool fTxIndex;\n extern bool fIsBareMultisigStd;\n extern unsigned int nCoinCacheSize;\n extern CFeeRate minRelayTxFee;\n+extern bool fPruned;\n \n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;"
      }
    ]
  },
  {
    "sha": "41c15691cebe2f6c786ddd4e243a24d8c00820e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWMxNTY5MWNlYmUyZjZjNzg2ZGRkNGUyNDNhMjRkOGMwMDgyMGUw",
    "commit": {
      "author": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2014-10-23T11:45:02Z"
      },
      "committer": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2015-01-12T16:44:17Z"
      },
      "message": "Add a counter to log the range of pruned blocks.",
      "tree": {
        "sha": "d5bfb8d4b25d3a0afd7aeb3c531f74cf1ea3711e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5bfb8d4b25d3a0afd7aeb3c531f74cf1ea3711e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41c15691cebe2f6c786ddd4e243a24d8c00820e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJUs/nhAAoJEAB9eonG33styLMP/2hgs8NahwramujZWwlRRQiz\nQH/ldWWnDJ9rJta11fvkgZZFzAkdj8DE0hYyEKSzPhwtMXThdHXre695hPrQ1BM3\nAP2qISafKhpBgHgn0LX/JqRNQKBPiKAmNC+d9eORAJPy26U7jQSM58MzrSW3c2CU\n9zLRgkS57CZeKV8Z+nP4fTRwQBu8PXD7YoTJ23N7YOu+XgcKdIlzoKB32IUtxihj\nPM1WPBut4z6kaP4UgXIimI55ZygWcJNsct2Ez8LVc3R0XMG9l211C9GpEyWK3iTK\nI2zWqaFC5+s58aA6JiJ7pbltEWmvUd/yt3hQxotftERnlTYVxlbQQKRP3qEYbDrf\njrdTMQjG4S4rOrHusYznLdUzIuTXOOPJVky+OM9RLsPM02TVc3D35j272rpVNUff\nsugsDVxs3l71/M1hVvfJoQ834XYBVbU46F4VDlPO/B+hNDwxrVVn7ANNw+Xzd6cN\np/RsS39TTxJgRhaBRgg1ZdblqXv5Z3OqgoOzRZ8ggb6ag3Lkz2iM0//rpOIYG563\n9tVD3MCtCE4pOwQWG3CIzftklm1onrpS/5SUwehPFksf+G/TozIEnVMcACcU0DrZ\naRolCYrjwLHfCLgXx85HEP8PGMgnjnFvMU47/kg6+EN9cq+exhilmnp17cgFY8vc\nxyPY0Q1cz0rCEH+QiQ6c\n=/qkw\n-----END PGP SIGNATURE-----",
        "payload": "tree d5bfb8d4b25d3a0afd7aeb3c531f74cf1ea3711e\nparent c974c570250132286e16fbc430d4637afc10df98\nauthor Ruben Dario Ponticelli <rdponticelli@gmail.com> 1414064702 -0300\ncommitter Ruben Dario Ponticelli <rdponticelli@gmail.com> 1421081057 -0300\n\nAdd a counter to log the range of pruned blocks.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41c15691cebe2f6c786ddd4e243a24d8c00820e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41c15691cebe2f6c786ddd4e243a24d8c00820e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41c15691cebe2f6c786ddd4e243a24d8c00820e0/comments",
    "author": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c974c570250132286e16fbc430d4637afc10df98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c974c570250132286e16fbc430d4637afc10df98",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c974c570250132286e16fbc430d4637afc10df98"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8c81ea06e1dbcf6453ebe4f77f8f1fd74c7d986e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41c15691cebe2f6c786ddd4e243a24d8c00820e0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41c15691cebe2f6c786ddd4e243a24d8c00820e0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=41c15691cebe2f6c786ddd4e243a24d8c00820e0",
        "patch": "@@ -2976,7 +2976,7 @@ bool CheckBlockFiles()\n     int nKeepBlksFromHeight = fPruned ? (max((int)(chainActive.Height() - MIN_BLOCKS_TO_KEEP), 0)) : 0;\n     LogPrintf(\"Checking all required data for active chain is available (mandatory from height %i to %i)\\n\", nKeepBlksFromHeight, max(chainActive.Height(), 0));\n     map<int, bool> mapBlockFileIsOpenable, mapUndoFileIsOpenable;\n-    set<int> setRequiredDataFilesAreOpenable;\n+    set<int> setRequiredDataFilesAreOpenable, setDataPruned, setUndoPruned;\n     for (CBlockIndex* pindex = chainActive.Tip(); pindex && pindex->pprev; pindex = pindex->pprev) {\n         if (pindex->nHeight > nKeepBlksFromHeight) {\n             if (!(pindex->nStatus & BLOCK_HAVE_DATA) || !(pindex->nStatus & BLOCK_HAVE_UNDO)) { // Fail immediately if required data is missing\n@@ -3014,7 +3014,15 @@ bool CheckBlockFiles()\n             if (!pblocktree->WriteBlockIndex(blockindex))\n                 return false;\n         }\n+        if (~pindex->nStatus & BLOCK_HAVE_DATA && pindex->nStatus & BLOCK_VALID_CHAIN)\n+            setDataPruned.insert(pindex->nHeight);\n+        if (~pindex->nStatus & BLOCK_HAVE_UNDO && pindex->nStatus & BLOCK_VALID_CHAIN)\n+            setUndoPruned.insert(pindex->nHeight);\n     }\n+    if (!setDataPruned.empty())\n+        LogPrintf(\"Data for blocks from %i to %i has been pruned\\n\", *setDataPruned.begin(), *setDataPruned.rbegin());\n+    if (!setUndoPruned.empty())\n+        LogPrintf(\"Undo data for blocks from %i to %i has been pruned\\n\", *setUndoPruned.begin(), *setUndoPruned.rbegin());\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "c12d6e5e1597bd08d5746ffa20f5313d7e157306",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTJkNmU1ZTE1OTdiZDA4ZDU3NDZmZmEyMGY1MzEzZDdlMTU3MzA2",
    "commit": {
      "author": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2014-08-14T16:56:48Z"
      },
      "committer": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2015-01-12T16:44:18Z"
      },
      "message": "Implement autoprune.\n\nThis mode introduces a configuration parameter to keep block files at less than a fixed amount of MiB.",
      "tree": {
        "sha": "41feb4cb56058e3f43bd84730851679392f03606",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41feb4cb56058e3f43bd84730851679392f03606"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c12d6e5e1597bd08d5746ffa20f5313d7e157306",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJUs/niAAoJEAB9eonG33stYIwQAKGchCEsNmSPpwfuL5HBgIV6\nGAoFrcdrCJceVSzq33cgFryVB9g/FP274/ibYWIfPSHBDQqwyBpy9Uw2XFVtcx7y\nr/78KMmlP3QYwEdHSEJ4XIBm2tV04dKkkRDggru3zZKH0+3XsLMx1Yxjrj1nngOR\n0Kwa/XgtHX3JAD0/1fT5m15tziluc+CdYRhlmjtkgfieof36XcfX5ZSlJLivhhqt\nHZJpif5nYCe4zcztIXqQGvWKV2VMgmqa+kFYNoRUriDAuxlj+GngQksgowRZiizn\nqMFm3XyUrhlj87IJb31bLPWXPHj4yk4z3aGEmQ8kpjBFLPkXoC86NtcAm7VqGvq/\nMJ2tVT2BWyK5RTBj6HlNkDXx70cIr7O8z4tXFjhADom/BHJJ8dFMBa040uC+0IVi\n5gmywL9D164mIv6pA4+Qr5MLN12xJfmNF1MEBi6OdJ1F7Y67jkH7dAIe9MK2Wt5B\n0e9hYJOYV4HoI7FIOIVhczrAF8TEpaO0RBqOy+5CNpNrjVfBGP87XgjCAZH9ReXW\naEyhAz6aKUl3yGdn3L1lyhgZLUMXPmAbfOLr7FFvDt35hjDMuACfAIHZMSVbhj/C\nqlJvJlgFUW9h/PKV+w0PgxdnBvFqmYV9XsACGURxpZVvT5dpN64f9znYEp5ggczR\nY3unJkvWfR99D3CSnHUI\n=vQcF\n-----END PGP SIGNATURE-----",
        "payload": "tree 41feb4cb56058e3f43bd84730851679392f03606\nparent 41c15691cebe2f6c786ddd4e243a24d8c00820e0\nauthor Ruben Dario Ponticelli <rdponticelli@gmail.com> 1408035408 -0300\ncommitter Ruben Dario Ponticelli <rdponticelli@gmail.com> 1421081058 -0300\n\nImplement autoprune.\n\nThis mode introduces a configuration parameter to keep block files at less than a fixed amount of MiB.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c12d6e5e1597bd08d5746ffa20f5313d7e157306",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c12d6e5e1597bd08d5746ffa20f5313d7e157306",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c12d6e5e1597bd08d5746ffa20f5313d7e157306/comments",
    "author": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41c15691cebe2f6c786ddd4e243a24d8c00820e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41c15691cebe2f6c786ddd4e243a24d8c00820e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41c15691cebe2f6c786ddd4e243a24d8c00820e0"
      }
    ],
    "stats": {
      "total": 189,
      "additions": 159,
      "deletions": 30
    },
    "files": [
      {
        "sha": "962bdb47bf2e7f8b6e15db710acd168d5578c532",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c12d6e5e1597bd08d5746ffa20f5313d7e157306/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c12d6e5e1597bd08d5746ffa20f5313d7e157306/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c12d6e5e1597bd08d5746ffa20f5313d7e157306",
        "patch": "@@ -258,7 +258,10 @@ std::string HelpMessage(HelpMessageMode mode)\n #ifndef WIN32\n     strUsage += \"  -pid=<file>            \" + strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\") + \"\\n\";\n #endif\n-    strUsage += \"  -pruned                \" + _(\"Run in a pruned state\") + \"\\n\";\n+    strUsage += \"  -prune=<n>             \" + _(\"Reduce storage requirements by pruning (deleting) old blocks. This mode disables wallet support and is incompatible with -txindex.\") + \"\\n\";\n+    strUsage += \"                         \" + _(\"Warning: Reverting this setting requires re-downloading the entire blockchain!\") + \"\\n\";\n+    strUsage += \"                         \" + _(\"(default: 0 = disable pruning blocks,\") + \"\\n\";\n+    strUsage += \"                         \" + strprintf(_(\">%u = max size in MiB to use for block files\"), MIN_BLOCK_FILES_SIZE / 1024 / 1024) + \"\\n\";\n     strUsage += \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \" \" + _(\"on startup\") + \"\\n\";\n #if !defined(WIN32)\n     strUsage += \"  -sysperms              \" + _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\") + \"\\n\";\n@@ -639,15 +642,15 @@ bool AppInit2(boost::thread_group& threadGroup)\n     if (nFD - MIN_CORE_FILEDESCRIPTORS < nMaxConnections)\n         nMaxConnections = nFD - MIN_CORE_FILEDESCRIPTORS;\n \n-    if (GetBoolArg(\"-pruned\", false)) {\n+    if (GetArg(\"-prune\", 0)) {\n         if (GetBoolArg(\"-txindex\", false))\n-            return InitError(_(\"Pruned mode is incompatible with -txindex.\"));\n+            return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n #ifdef ENABLE_WALLET\n         if (!GetBoolArg(\"-disablewallet\", false)) {\n             if (SoftSetBoolArg(\"-disablewallet\", true))\n-                LogPrintf(\"AppInit2 : parameter interaction: -pruned=1 -> setting -disablewallet=1\\n\");\n+                LogPrintf(\"%s : parameter interaction: -prune -> setting -disablewallet=1\\n\", __func__);\n             else\n-                return InitError(_(\"Can't run with a wallet in pruned mode.\"));\n+                return InitError(_(\"Can't run with a wallet in prune mode.\"));\n         }\n #endif\n     }\n@@ -687,7 +690,15 @@ bool AppInit2(boost::thread_group& threadGroup)\n         nScriptCheckThreads = MAX_SCRIPTCHECK_THREADS;\n \n     fServer = GetBoolArg(\"-server\", false);\n-    fPruned = GetBoolArg(\"-pruned\", false);\n+    nPrune = GetArg(\"-prune\", 0) * 1024 * 1024;\n+    if (nPrune) {\n+        if (nPrune >= MIN_BLOCK_FILES_SIZE)\n+            LogPrintf(\"Autoprune configured to use less than %uMiB on disk for block files.\\n\", nPrune / 1024 / 1024);\n+        else {\n+            nPrune = ~0;\n+            LogPrintf(\"Autoprune configured below the minimum of %uMiB. Setting at the maximum possible of %uMiB, to avoid pruning too much. Please, check your configuration.\\n\", MIN_BLOCK_FILES_SIZE / 1024 / 1024, nPrune / 1024 / 1024);\n+        }\n+    }\n #ifdef ENABLE_WALLET\n     bool fDisableWallet = GetBoolArg(\"-disablewallet\", false);\n #endif\n@@ -1291,7 +1302,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n #endif\n \n-    if (fPruned) {\n+    if (nPrune) {\n         LogPrintf(\"Unsetting NODE_NETWORK on prune mode\\n\");\n         nLocalServices &= ~NODE_NETWORK;\n     }"
      },
      {
        "sha": "c3e57b12adbd144c7fedda83bd6647146ffe456f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 136,
        "deletions": 22,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c12d6e5e1597bd08d5746ffa20f5313d7e157306/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c12d6e5e1597bd08d5746ffa20f5313d7e157306/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c12d6e5e1597bd08d5746ffa20f5313d7e157306",
        "patch": "@@ -53,7 +53,7 @@ bool fReindex = false;\n bool fTxIndex = false;\n bool fIsBareMultisigStd = true;\n unsigned int nCoinCacheSize = 5000;\n-bool fPruned = false;\n+uintmax_t nPrune = 0;\n \n \n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n@@ -68,6 +68,7 @@ struct COrphanTx {\n map<uint256, COrphanTx> mapOrphanTransactions;\n map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n void EraseOrphansFor(NodeId peer);\n+set<int> setDataFilePrunable, setUndoFilePrunable;\n \n /**\n  * Returns true if there are nRequired or more blocks of minVersion or above\n@@ -2790,6 +2791,80 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n \n \n \n+void ClearBlockFileInfo(int nFile)\n+{\n+    LOCK(cs_main);\n+    if (vinfoBlockFile[nFile].nUndoSize)\n+        vinfoBlockFile[nFile].nSize = 0;\n+    else\n+        vinfoBlockFile[nFile].SetNull();\n+    setDirtyFileInfo.insert(nFile);\n+}\n+\n+void ClearUndoFileInfo(int nFile)\n+{\n+    LOCK(cs_main);\n+    if (vinfoBlockFile[nFile].nSize)\n+        vinfoBlockFile[nFile].nUndoSize = 0;\n+    else\n+        vinfoBlockFile[nFile].SetNull();\n+    setDirtyFileInfo.insert(nFile);\n+}\n+\n+enum BlockOrUndo {\n+    BLOCK = false,\n+    UNDO = true\n+};\n+\n+bool RemoveDiskFile(int nFile, BlockOrUndo blockOrUndo)\n+{\n+    LOCK(cs_main);\n+    CDiskBlockPos pos(nFile, 0);\n+    const char* prefix = blockOrUndo ? \"rev\" : \"blk\";\n+    if (boost::filesystem::remove(GetBlockPosFilename(pos, prefix))) {\n+        LogPrintf(\"File %s removed\\n\", GetBlockPosFilename(pos, prefix));\n+        blockOrUndo ? ClearUndoFileInfo(nFile) : ClearBlockFileInfo(nFile);\n+        return true;\n+    }\n+    LogPrintf(\"Error removing file %s\\n\", GetBlockPosFilename(pos, prefix));\n+    return false;\n+}\n+\n+bool RemoveBlockFile(int nFile)\n+{\n+    return RemoveDiskFile(nFile, BLOCK);\n+}\n+\n+bool RemoveUndoFile(int nFile)\n+{\n+    return RemoveDiskFile(nFile, UNDO);\n+}\n+\n+\n+\n+bool PruneBlockFiles()\n+{\n+    if (!CheckBlockFiles())\n+        return false;\n+    if (setDataFilePrunable.empty() && setUndoFilePrunable.empty()) {\n+        LogPrintf(\"There's nothing to prune.\\n\");\n+        return false;\n+    }\n+    bool fFileRemoved = false;\n+    int dataPrunable = *setDataFilePrunable.begin(), undoPrunable = *setUndoFilePrunable.begin();\n+    if (dataPrunable < undoPrunable) {\n+        fFileRemoved = RemoveBlockFile(dataPrunable);\n+    } else if (undoPrunable < dataPrunable) {\n+        fFileRemoved = RemoveUndoFile(undoPrunable);\n+    } else\n+        fFileRemoved = (RemoveBlockFile(dataPrunable) | RemoveUndoFile(undoPrunable));\n+    if (fFileRemoved) {\n+        CheckBlockFiles();\n+        return true;\n+    }\n+    return false;\n+}\n+\n bool AbortNode(const std::string &strMessage, const std::string &userMessage) {\n     strMiscWarning = strMessage;\n     LogPrintf(\"*** %s\\n\", strMessage);\n@@ -2800,8 +2875,25 @@ bool AbortNode(const std::string &strMessage, const std::string &userMessage) {\n     return false;\n }\n \n+uintmax_t BlockFilesSize()\n+{\n+    uintmax_t size = 0;\n+    BOOST_FOREACH(CBlockFileInfo file, vinfoBlockFile)\n+        size += file.nSize + file.nUndoSize;\n+    return size;\n+}\n+\n bool CheckDiskSpace(uint64_t nAdditionalBytes)\n {\n+    if (nPrune) {\n+        while (BlockFilesSize() + nAdditionalBytes > nPrune) {\n+            if (!PruneBlockFiles()) {\n+                LogPrintf(\"Warning: Can't keep block files size as low as requested\\n\");\n+                break;\n+            }\n+        }\n+    }\n+\n     uint64_t nFreeBytesAvailable = boost::filesystem::space(GetDataDir()).available;\n \n     // Check for nMinDiskSpace bytes (currently 50MB)\n@@ -2954,13 +3046,25 @@ bool static LoadBlockIndexDB()\n bool BlockFileIsOpenable(int nFile)\n {\n     CDiskBlockPos pos(nFile, 0);\n-    return !CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION).IsNull();\n+    if (!vinfoBlockFile[nFile].nSize)\n+        return false;\n+    if (CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION).IsNull()) {\n+        ClearBlockFileInfo(nFile);\n+        return false;\n+    }\n+    return true;\n }\n \n bool UndoFileIsOpenable(int nFile)\n {\n     CDiskBlockPos pos(nFile, 0);\n-    return !CAutoFile(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION).IsNull();\n+    if (!vinfoBlockFile[nFile].nUndoSize)\n+        return false;\n+    if (CAutoFile(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION).IsNull()) {\n+        ClearUndoFileInfo(nFile);\n+        return false;\n+    }\n+    return true;\n }\n \n bool DataFilesAreOpenable(int nFile)\n@@ -2970,49 +3074,59 @@ bool DataFilesAreOpenable(int nFile)\n     return false;\n }\n \n+int LastBlockInFile(int nFile)\n+{\n+    return vinfoBlockFile[nFile].nHeightLast;\n+}\n+\n+\n bool CheckBlockFiles()\n {\n+    LOCK(cs_main);\n     // Check presence of blk files\n-    int nKeepBlksFromHeight = fPruned ? (max((int)(chainActive.Height() - MIN_BLOCKS_TO_KEEP), 0)) : 0;\n-    LogPrintf(\"Checking all required data for active chain is available (mandatory from height %i to %i)\\n\", nKeepBlksFromHeight, max(chainActive.Height(), 0));\n+    int nKeepMinBlksFromHeight = nPrune ? (max((int)(chainActive.Height() - MIN_BLOCKS_TO_KEEP), 0)) : 0;\n+    LogPrintf(\"Checking all required data for active chain is available (mandatory from height %i to %i)\\n\", nKeepMinBlksFromHeight, max(chainActive.Height(), 0));\n     map<int, bool> mapBlockFileIsOpenable, mapUndoFileIsOpenable;\n     set<int> setRequiredDataFilesAreOpenable, setDataPruned, setUndoPruned;\n+    setDataFilePrunable.clear();\n+    setUndoFilePrunable.clear();\n     for (CBlockIndex* pindex = chainActive.Tip(); pindex && pindex->pprev; pindex = pindex->pprev) {\n-        if (pindex->nHeight > nKeepBlksFromHeight) {\n+        if (pindex->nHeight > nKeepMinBlksFromHeight) {\n             if (!(pindex->nStatus & BLOCK_HAVE_DATA) || !(pindex->nStatus & BLOCK_HAVE_UNDO)) { // Fail immediately if required data is missing\n                 LogPrintf(\"Error: Required data for block: %i is missing.\\n\", pindex->nHeight);\n                 return false;\n             } else if (!setRequiredDataFilesAreOpenable.count(pindex->nFile)) {\n-                if (DataFilesAreOpenable(pindex->nFile))\n-                    setRequiredDataFilesAreOpenable.insert(pindex->nFile);\n-                else { // Or if data is unreadable\n+                if (!DataFilesAreOpenable(pindex->nFile)) { // Or if data is unreadable\n                     LogPrintf(\"Error: Required file for block: %i can't be opened.\\n\", pindex->nHeight);\n                     return false;\n-                }\n+                } else\n+                    setRequiredDataFilesAreOpenable.insert(pindex->nFile);\n             }\n-        } else { // Check consistency of unrequired data\n+        } else { // Check consistency and pruneability of unrequired data\n             if (pindex->nStatus & BLOCK_HAVE_DATA) {\n-                if (!mapBlockFileIsOpenable.count(pindex->nFile))\n+                if (!mapBlockFileIsOpenable.count(pindex->nFile)) {\n                     mapBlockFileIsOpenable[pindex->nFile] = BlockFileIsOpenable(pindex->nFile);\n+                    if (mapBlockFileIsOpenable[pindex->nFile] && chainActive.Height() > AUTOPRUNE_AFTER_HEIGHT && LastBlockInFile(pindex->nFile) < nKeepMinBlksFromHeight) { // Mark pruneable data\n+                        setDataFilePrunable.insert(pindex->nFile);\n+                    }\n+                }\n             }\n             if (pindex->nStatus & BLOCK_HAVE_UNDO) {\n-                if (!mapUndoFileIsOpenable.count(pindex->nFile))\n+                if (!mapUndoFileIsOpenable.count(pindex->nFile)) {\n                     mapUndoFileIsOpenable[pindex->nFile] = UndoFileIsOpenable(pindex->nFile);\n+                    if (mapUndoFileIsOpenable[pindex->nFile] && chainActive.Height() > AUTOPRUNE_AFTER_HEIGHT && LastBlockInFile(pindex->nFile) < nKeepMinBlksFromHeight) { // Mark pruneable data\n+                        setUndoFilePrunable.insert(pindex->nFile);\n+                    }\n+                }\n             }\n         }\n-        bool fWrite = false;\n         if (mapBlockFileIsOpenable.count(pindex->nFile) && !mapBlockFileIsOpenable[pindex->nFile]) {\n             pindex->nStatus &= ~BLOCK_HAVE_DATA;\n-            fWrite = true;\n+            setDirtyBlockIndex.insert(pindex);\n         }\n         if (mapUndoFileIsOpenable.count(pindex->nFile) && !mapUndoFileIsOpenable[pindex->nFile]) {\n             pindex->nStatus &= ~BLOCK_HAVE_UNDO;\n-            fWrite = true;\n-        }\n-        if (fWrite) {\n-            CDiskBlockIndex blockindex(pindex);\n-            if (!pblocktree->WriteBlockIndex(blockindex))\n-                return false;\n+            setDirtyBlockIndex.insert(pindex);\n         }\n         if (~pindex->nStatus & BLOCK_HAVE_DATA && pindex->nStatus & BLOCK_VALID_CHAIN)\n             setDataPruned.insert(pindex->nHeight);\n@@ -3406,7 +3520,7 @@ void static ProcessGetData(CNode* pfrom)\n                     // Send block from disk\n                     CBlock block;\n                     if (!ReadBlockFromDisk(block, (*mi).second)) {\n-                        if (fPruned) {\n+                        if (nPrune) {\n                             // Disconnect peers asking us for blocks we don't have, not to stall their IBD. They shouldn't ask as we unset NODE_NETWORK on this mode.\n                             LogPrintf(\"cannot load block from disk, answering notfound, and disconnecting peer:%d\\n\", pfrom->id);\n                             vNotFound.push_back(inv);"
      },
      {
        "sha": "eba4ae3a5ce0c889a81ecabbd2532daef678d50d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c12d6e5e1597bd08d5746ffa20f5313d7e157306/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c12d6e5e1597bd08d5746ffa20f5313d7e157306/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=c12d6e5e1597bd08d5746ffa20f5313d7e157306",
        "patch": "@@ -95,6 +95,10 @@ static const unsigned int DATABASE_WRITE_INTERVAL = 3600;\n static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n /** Minimum amount of blocks to keep unpruned, needed to afford deep reorganizations. */\n static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n+/** Start autopruning after this height. */\n+static const signed int AUTOPRUNE_AFTER_HEIGHT = 100000;\n+/** Minimum amount of bytes needed for block files. */\n+static const unsigned int MIN_BLOCK_FILES_SIZE = 300 * 1024 * 1024;\n \n /** \"reject\" message codes */\n static const unsigned char REJECT_MALFORMED = 0x01;\n@@ -129,7 +133,7 @@ extern bool fTxIndex;\n extern bool fIsBareMultisigStd;\n extern unsigned int nCoinCacheSize;\n extern CFeeRate minRelayTxFee;\n-extern bool fPruned;\n+extern uintmax_t nPrune;\n \n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;"
      }
    ]
  },
  {
    "sha": "bbb769c5c1d7c13f1edc11de3209da10184897d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmI3NjljNWMxZDdjMTNmMWVkYzExZGUzMjA5ZGExMDE4NDg5N2Q1",
    "commit": {
      "author": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2014-11-11T01:01:40Z"
      },
      "committer": {
        "name": "Ruben Dario Ponticelli",
        "email": "rdponticelli@gmail.com",
        "date": "2015-01-12T16:44:18Z"
      },
      "message": "Simplify CheckBlockFiles routine.\n\nWe can do it now that the logic to avoid opening the files several times has been\nmoved to their own functions and is handled mainly through variables.",
      "tree": {
        "sha": "da8ebb51f7c6adc3e7b755fe29133bee8ae31666",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da8ebb51f7c6adc3e7b755fe29133bee8ae31666"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbb769c5c1d7c13f1edc11de3209da10184897d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJUs/niAAoJEAB9eonG33stbkAQALHyw2A3Xj5EPaQfSj1/Q7/y\nSuK+GP92LY3NOkbRWU7iGlHYVQiYkVhDKuHCyjekPXZ4eqw0EzCC2F3cwg6hySga\n3EV23MOssdk0dbmVc3JMsihHyzkwtccLfJUfqh+5+J7ODPekcPxNLVdl44ATN00T\nzQFKKhweqlcaq45djO5e6ROASxvAVCy1ollfZCNc+xnZhj+7e3zJt/inOSEQfkpy\nNWXxz+bxiuep7iFLQJO+XDqlQoBR+88PrnTBrnmfF/w2JBkkZeXGcqvcoOXSxt+w\nmQtd2+9MP5aiqX2HdD4PjAJgfEmbtKK699Yfo9L+UsaG6he1aYNyy8MSKQRssKPa\nha6xCuBobcX97aO6IYcBbRRQopDMQEkYCpBuD6Fbl9PbIer4QHCjw9tSeGIweDQd\nZMx5+ZEEnjjtuCBBdp8AHblu7uJ1+6zUemebYtJM5acON5hoer/vUAp73xSZnov7\n8RQhsb4N2ubJ3Q3g0bj0EWewa9DzW7mESjewMZ3IYd5DTXUo5ENfEJYn5BMhE3t4\nYQd26Nj2V+yNRrm54m/8/pm44M1ai8Fpjj3VCX7/Sld7F04YryBnu5S6EHTRV4/2\n8iv5ureAkrRqfEU0wja2+3frqrk8NlsGXOgCoYtBjV9KEKjFR6diMGyfJCnldPFY\nRNMdcjQBk8YGvWOG7Klk\n=9Czm\n-----END PGP SIGNATURE-----",
        "payload": "tree da8ebb51f7c6adc3e7b755fe29133bee8ae31666\nparent c12d6e5e1597bd08d5746ffa20f5313d7e157306\nauthor Ruben Dario Ponticelli <rdponticelli@gmail.com> 1415667700 -0300\ncommitter Ruben Dario Ponticelli <rdponticelli@gmail.com> 1421081058 -0300\n\nSimplify CheckBlockFiles routine.\n\nWe can do it now that the logic to avoid opening the files several times has been\nmoved to their own functions and is handled mainly through variables.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbb769c5c1d7c13f1edc11de3209da10184897d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbb769c5c1d7c13f1edc11de3209da10184897d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbb769c5c1d7c13f1edc11de3209da10184897d5/comments",
    "author": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rdponticelli",
      "id": 1192483,
      "node_id": "MDQ6VXNlcjExOTI0ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1192483?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rdponticelli",
      "html_url": "https://github.com/rdponticelli",
      "followers_url": "https://api.github.com/users/rdponticelli/followers",
      "following_url": "https://api.github.com/users/rdponticelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/rdponticelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rdponticelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rdponticelli/subscriptions",
      "organizations_url": "https://api.github.com/users/rdponticelli/orgs",
      "repos_url": "https://api.github.com/users/rdponticelli/repos",
      "events_url": "https://api.github.com/users/rdponticelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rdponticelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c12d6e5e1597bd08d5746ffa20f5313d7e157306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c12d6e5e1597bd08d5746ffa20f5313d7e157306",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c12d6e5e1597bd08d5746ffa20f5313d7e157306"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 14,
      "deletions": 22
    },
    "files": [
      {
        "sha": "e7a7acbda65c9d4475387372807c19fa89dd1dd6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 22,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbb769c5c1d7c13f1edc11de3209da10184897d5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbb769c5c1d7c13f1edc11de3209da10184897d5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bbb769c5c1d7c13f1edc11de3209da10184897d5",
        "patch": "@@ -3086,48 +3086,40 @@ bool CheckBlockFiles()\n     // Check presence of blk files\n     int nKeepMinBlksFromHeight = nPrune ? (max((int)(chainActive.Height() - MIN_BLOCKS_TO_KEEP), 0)) : 0;\n     LogPrintf(\"Checking all required data for active chain is available (mandatory from height %i to %i)\\n\", nKeepMinBlksFromHeight, max(chainActive.Height(), 0));\n-    map<int, bool> mapBlockFileIsOpenable, mapUndoFileIsOpenable;\n-    set<int> setRequiredDataFilesAreOpenable, setDataPruned, setUndoPruned;\n+    set<int> setDataPruned, setUndoPruned;\n     setDataFilePrunable.clear();\n     setUndoFilePrunable.clear();\n     for (CBlockIndex* pindex = chainActive.Tip(); pindex && pindex->pprev; pindex = pindex->pprev) {\n         if (pindex->nHeight > nKeepMinBlksFromHeight) {\n             if (!(pindex->nStatus & BLOCK_HAVE_DATA) || !(pindex->nStatus & BLOCK_HAVE_UNDO)) { // Fail immediately if required data is missing\n                 LogPrintf(\"Error: Required data for block: %i is missing.\\n\", pindex->nHeight);\n                 return false;\n-            } else if (!setRequiredDataFilesAreOpenable.count(pindex->nFile)) {\n-                if (!DataFilesAreOpenable(pindex->nFile)) { // Or if data is unreadable\n-                    LogPrintf(\"Error: Required file for block: %i can't be opened.\\n\", pindex->nHeight);\n-                    return false;\n-                } else\n-                    setRequiredDataFilesAreOpenable.insert(pindex->nFile);\n+            } else if (!DataFilesAreOpenable(pindex->nFile)) { // Or if data is unreadable\n+                LogPrintf(\"Error: Required file for block: %i can't be opened.\\n\", pindex->nHeight);\n+                return false;\n             }\n         } else { // Check consistency and pruneability of unrequired data\n             if (pindex->nStatus & BLOCK_HAVE_DATA) {\n-                if (!mapBlockFileIsOpenable.count(pindex->nFile)) {\n-                    mapBlockFileIsOpenable[pindex->nFile] = BlockFileIsOpenable(pindex->nFile);\n-                    if (mapBlockFileIsOpenable[pindex->nFile] && chainActive.Height() > AUTOPRUNE_AFTER_HEIGHT && LastBlockInFile(pindex->nFile) < nKeepMinBlksFromHeight) { // Mark pruneable data\n+                if (BlockFileIsOpenable(pindex->nFile)) {\n+                    if (chainActive.Height() > AUTOPRUNE_AFTER_HEIGHT && LastBlockInFile(pindex->nFile) < nKeepMinBlksFromHeight) { // Mark pruneable data\n                         setDataFilePrunable.insert(pindex->nFile);\n                     }\n+                } else {\n+                    pindex->nStatus &= ~BLOCK_HAVE_DATA;\n+                    setDirtyBlockIndex.insert(pindex);\n                 }\n             }\n             if (pindex->nStatus & BLOCK_HAVE_UNDO) {\n-                if (!mapUndoFileIsOpenable.count(pindex->nFile)) {\n-                    mapUndoFileIsOpenable[pindex->nFile] = UndoFileIsOpenable(pindex->nFile);\n-                    if (mapUndoFileIsOpenable[pindex->nFile] && chainActive.Height() > AUTOPRUNE_AFTER_HEIGHT && LastBlockInFile(pindex->nFile) < nKeepMinBlksFromHeight) { // Mark pruneable data\n+                if (UndoFileIsOpenable(pindex->nFile)) {\n+                    if (chainActive.Height() > AUTOPRUNE_AFTER_HEIGHT && LastBlockInFile(pindex->nFile) < nKeepMinBlksFromHeight) { // Mark pruneable data\n                         setUndoFilePrunable.insert(pindex->nFile);\n                     }\n+                } else {\n+                    pindex->nStatus &= ~BLOCK_HAVE_UNDO;\n+                    setDirtyBlockIndex.insert(pindex);\n                 }\n             }\n         }\n-        if (mapBlockFileIsOpenable.count(pindex->nFile) && !mapBlockFileIsOpenable[pindex->nFile]) {\n-            pindex->nStatus &= ~BLOCK_HAVE_DATA;\n-            setDirtyBlockIndex.insert(pindex);\n-        }\n-        if (mapUndoFileIsOpenable.count(pindex->nFile) && !mapUndoFileIsOpenable[pindex->nFile]) {\n-            pindex->nStatus &= ~BLOCK_HAVE_UNDO;\n-            setDirtyBlockIndex.insert(pindex);\n-        }\n         if (~pindex->nStatus & BLOCK_HAVE_DATA && pindex->nStatus & BLOCK_VALID_CHAIN)\n             setDataPruned.insert(pindex->nHeight);\n         if (~pindex->nStatus & BLOCK_HAVE_UNDO && pindex->nStatus & BLOCK_VALID_CHAIN)"
      }
    ]
  }
]