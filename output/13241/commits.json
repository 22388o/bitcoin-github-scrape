[
  {
    "sha": "9b72c988a0050d8932275c74c60928918ee7ef71",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjcyYzk4OGEwMDUwZDg5MzIyNzVjNzRjNjA5Mjg5MThlZTdlZjcx",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-05-15T22:41:53Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-06-11T20:12:55Z"
      },
      "message": "scripted-diff: Avoid temporary copies when looping over std::map\n\nThe ::value_type of the std::map/std::multimap/std::unordered_map containers is\nstd::pair<const Key, T>. Dropping the const results in an unnecessary copy,\nfor example in C++11 range-based loops.\n\nFor this I started with a more general scripted diff, then narrowed it down\nbased on the inspection showing that all actual map/multimap/unordered_map\nvariables used in loops start with m or have map in the name.\n\n-BEGIN VERIFY SCRIPT-\nsed -i -E 's/for \\(([^<]*)std::pair<([^c])(.+) : m/for (\\1std::pair<const \\2\\3 : m/' src/*.cpp src/**/*.cpp\nsed -i -E 's/for \\(([^<]*)std::pair<([^c])(.+) : (.*)map/for (\\1std::pair<const \\2\\3 : \\4map/' src/*.cpp src/**/*.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "2853b851aaffa1fe04f3f904e094b2962941f120",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2853b851aaffa1fe04f3f904e094b2962941f120"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b72c988a0050d8932275c74c60928918ee7ef71",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlse18kACgkQTYykuhgE\nCQZ4+A//SNK8BD25QzCma9/id0arhsTnWw+YgjfW5YWnET6shEqOLvXBi4nvudL+\nzL4/VAl6xGfuPE9PRjyZgKEk/A8SrVsuXqcdxvNWJ4vVBYZEImLu+Zxgpds/wAFO\ntEAjH6tHA/2Iy2jnUTDm74i4qk9ntgrzvVYFuYkPuGCA2w0RwOiPROTBdghU+4am\nlvZ2sdI9A5yIWil4Ds+7NPHB5sdTYHrp/vzm3BcfF6YpcJQQ4GgeIwq9P6ZlXZrC\nRR5sr1T6LM7BdjFIjZ8LS145dO1MPIK+E+FiE2bfqBvfdCPO4xXPSfW/LpRims9n\nxKzw2wmES5uhn30Xb2/f9gyPOI9g7X1sWFDaF4FQ/fMM+AZgu99cIFxdg4nVShw5\nWh8G8Wiu0YkenHsE+uMTVCDK2QoWwv+3xfiyZrBLB1oWA3/hizWB6WumIC6WNqPo\n+MQSVqUyl2D7H04MPX3h4ghgUxRb1h+NA/ZhKjcFbazV8kiHU2sNEIoYuuWQATmR\nc8p1y596dJ4QfjOkbfKOGH0kwPOvPFJlddg2JCQms869fSlS/ug4Wu39nynhZ+Aa\nXTZjj++exc2sap7DAA+Y2lS2YWxr8L9RXPad+fMXFqr52oSaur3JqtIcxCw0quVA\n21DD4Y60kR7Gs3mgrY/jCiiKyqVRZc1jfuSHEpbHv50TLagcwlY=\n=GoZj\n-----END PGP SIGNATURE-----",
        "payload": "tree 2853b851aaffa1fe04f3f904e094b2962941f120\nparent 7c32b414b6325743c99fed1208bc53ab0fa1996f\nauthor Ben Woosley <ben.woosley@gmail.com> 1526424113 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1528747975 -0700\n\nscripted-diff: Avoid temporary copies when looping over std::map\n\nThe ::value_type of the std::map/std::multimap/std::unordered_map containers is\nstd::pair<const Key, T>. Dropping the const results in an unnecessary copy,\nfor example in C++11 range-based loops.\n\nFor this I started with a more general scripted diff, then narrowed it down\nbased on the inspection showing that all actual map/multimap/unordered_map\nvariables used in loops start with m or have map in the name.\n\n-BEGIN VERIFY SCRIPT-\nsed -i -E 's/for \\(([^<]*)std::pair<([^c])(.+) : m/for (\\1std::pair<const \\2\\3 : m/' src/*.cpp src/**/*.cpp\nsed -i -E 's/for \\(([^<]*)std::pair<([^c])(.+) : (.*)map/for (\\1std::pair<const \\2\\3 : \\4map/' src/*.cpp src/**/*.cpp\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b72c988a0050d8932275c74c60928918ee7ef71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b72c988a0050d8932275c74c60928918ee7ef71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b72c988a0050d8932275c74c60928918ee7ef71/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c32b414b6325743c99fed1208bc53ab0fa1996f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c32b414b6325743c99fed1208bc53ab0fa1996f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c32b414b6325743c99fed1208bc53ab0fa1996f"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 18,
      "deletions": 18
    },
    "files": [
      {
        "sha": "f9af1629dc6ad044e9e1901d56d42aa90310d8f4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b72c988a0050d8932275c74c60928918ee7ef71/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b72c988a0050d8932275c74c60928918ee7ef71/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9b72c988a0050d8932275c74c60928918ee7ef71",
        "patch": "@@ -614,7 +614,7 @@ static void CleanupBlockRevFiles()\n     // keeping a separate counter.  Once we hit a gap (or if 0 doesn't exist)\n     // start removing block files.\n     int nContigCounter = 0;\n-    for (const std::pair<std::string, fs::path>& item : mapBlockFiles) {\n+    for (const std::pair<const std::string, fs::path>& item : mapBlockFiles) {\n         if (atoi(item.first) == nContigCounter) {\n             nContigCounter++;\n             continue;"
      },
      {
        "sha": "8fa56e933544eb4cef71401cd63eb10726af2b4a",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b72c988a0050d8932275c74c60928918ee7ef71/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b72c988a0050d8932275c74c60928918ee7ef71/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=9b72c988a0050d8932275c74c60928918ee7ef71",
        "patch": "@@ -475,7 +475,7 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);\n-        for (const std::pair<CNetAddr, LocalServiceInfo> &item : mapLocalHost)\n+        for (const std::pair<const CNetAddr, LocalServiceInfo> &item : mapLocalHost)\n         {\n             UniValue rec(UniValue::VOBJ);\n             rec.pushKV(\"address\", item.first.ToString());"
      },
      {
        "sha": "12629516498efbe1ce68f0845b1c68535aca1a52",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b72c988a0050d8932275c74c60928918ee7ef71/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b72c988a0050d8932275c74c60928918ee7ef71/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9b72c988a0050d8932275c74c60928918ee7ef71",
        "patch": "@@ -3840,7 +3840,7 @@ bool CChainState::LoadBlockIndex(const Consensus::Params& consensus_params, CBlo\n     // Calculate nChainWork\n     std::vector<std::pair<int, CBlockIndex*> > vSortedByHeight;\n     vSortedByHeight.reserve(mapBlockIndex.size());\n-    for (const std::pair<uint256, CBlockIndex*>& item : mapBlockIndex)\n+    for (const std::pair<const uint256, CBlockIndex*>& item : mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n@@ -3907,7 +3907,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     // Check presence of blk files\n     LogPrintf(\"Checking all blk files are present...\\n\");\n     std::set<int> setBlkDataFiles;\n-    for (const std::pair<uint256, CBlockIndex*>& item : mapBlockIndex)\n+    for (const std::pair<const uint256, CBlockIndex*>& item : mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         if (pindex->nStatus & BLOCK_HAVE_DATA) {"
      },
      {
        "sha": "2cecead0d3398fb636b56e39d6fb8828ebb69603",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b72c988a0050d8932275c74c60928918ee7ef71/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b72c988a0050d8932275c74c60928918ee7ef71/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9b72c988a0050d8932275c74c60928918ee7ef71",
        "patch": "@@ -120,7 +120,7 @@ static void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n     }\n     entry.pushKV(\"bip125-replaceable\", rbfStatus);\n \n-    for (const std::pair<std::string, std::string>& item : wtx.mapValue)\n+    for (const std::pair<const std::string, std::string>& item : wtx.mapValue)\n         entry.pushKV(item.first, item.second);\n }\n \n@@ -343,7 +343,7 @@ static UniValue setlabel(const JSONRPCRequest& request)\n     // If so, delete the account record for it. Labels, unlike addresses, can be deleted,\n     // and if we wouldn't do this, the record would stick around forever.\n     bool found_address = false;\n-    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+    for (const std::pair<const CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n         if (item.second.name == label) {\n             found_address = true;\n             break;\n@@ -440,7 +440,7 @@ static UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n \n     // Find all addresses that have the given account\n     UniValue ret(UniValue::VARR);\n-    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+    for (const std::pair<const CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n         const CTxDestination& dest = item.first;\n         const std::string& strName = item.second.name;\n         if (strName == strAccount) {\n@@ -753,7 +753,7 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n \n     // Tally\n     CAmount nAmount = 0;\n-    for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n+    for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n         if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n             continue;\n@@ -821,7 +821,7 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n \n     // Tally\n     CAmount nAmount = 0;\n-    for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n+    for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n         if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n             continue;\n@@ -1534,7 +1534,7 @@ static UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bo\n \n     // Tally\n     std::map<CTxDestination, tallyitem> mapTally;\n-    for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n+    for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n \n         if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n@@ -2113,13 +2113,13 @@ static UniValue listaccounts(const JSONRPCRequest& request)\n             includeWatchonly = includeWatchonly | ISMINE_WATCH_ONLY;\n \n     std::map<std::string, CAmount> mapAccountBalances;\n-    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+    for (const std::pair<const CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n         if (IsMine(*pwallet, entry.first) & includeWatchonly) {  // This address belongs to me\n             mapAccountBalances[entry.second.name] = 0;\n         }\n     }\n \n-    for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n+    for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n         CAmount nFee;\n         std::string strSentAccount;\n@@ -2148,7 +2148,7 @@ static UniValue listaccounts(const JSONRPCRequest& request)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n     UniValue ret(UniValue::VOBJ);\n-    for (const std::pair<std::string, CAmount>& accountBalance : mapAccountBalances) {\n+    for (const std::pair<const std::string, CAmount>& accountBalance : mapAccountBalances) {\n         ret.pushKV(accountBalance.first, ValueFromAmount(accountBalance.second));\n     }\n     return ret;\n@@ -2257,7 +2257,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n \n     UniValue transactions(UniValue::VARR);\n \n-    for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n+    for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         CWalletTx tx = pairWtx.second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth) {\n@@ -4194,7 +4194,7 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n \n     // Find all addresses that have the given label\n     UniValue ret(UniValue::VOBJ);\n-    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+    for (const std::pair<const CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n         if (item.second.name == label) {\n             ret.pushKV(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false));\n         }\n@@ -4247,7 +4247,7 @@ static UniValue listlabels(const JSONRPCRequest& request)\n \n     // Add to a set to sort by label name, then insert into Univalue array\n     std::set<std::string> label_set;\n-    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+    for (const std::pair<const CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n         if (purpose.empty() || entry.second.purpose == purpose) {\n             label_set.insert(entry.second.name);\n         }"
      },
      {
        "sha": "f55c2262e6c8e63d33b6cb31705cea425b24be70",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b72c988a0050d8932275c74c60928918ee7ef71/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b72c988a0050d8932275c74c60928918ee7ef71/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9b72c988a0050d8932275c74c60928918ee7ef71",
        "patch": "@@ -3284,7 +3284,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n \n         // Delete destdata tuples associated with address\n         std::string strAddress = EncodeDestination(address);\n-        for (const std::pair<std::string, std::string> &item : mapAddressBook[address].destdata)\n+        for (const std::pair<const std::string, std::string> &item : mapAddressBook[address].destdata)\n         {\n             WalletBatch(*database).EraseDestData(strAddress, item.first);\n         }\n@@ -3685,7 +3685,7 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n {\n     LOCK(cs_wallet);\n     std::set<CTxDestination> result;\n-    for (const std::pair<CTxDestination, CAddressBookData>& item : mapAddressBook)\n+    for (const std::pair<const CTxDestination, CAddressBookData>& item : mapAddressBook)\n     {\n         const CTxDestination& address = item.first;\n         const std::string& strName = item.second.name;"
      }
    ]
  }
]