[
  {
    "sha": "a3241998e1e300e87e7c57d92c2478f67ec91db6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzI0MTk5OGUxZTMwMGU4N2U3YzU3ZDkyYzI0NzhmNjdlYzkxZGI2",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-12-19T20:21:29Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-02T20:12:03Z"
      },
      "message": "namespace: remove boost namespace pollution",
      "tree": {
        "sha": "f91f21e03e2ff1d26afbde03bdbc9b29f0fbccc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f91f21e03e2ff1d26afbde03bdbc9b29f0fbccc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3241998e1e300e87e7c57d92c2478f67ec91db6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3241998e1e300e87e7c57d92c2478f67ec91db6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3241998e1e300e87e7c57d92c2478f67ec91db6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3241998e1e300e87e7c57d92c2478f67ec91db6/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f55c5e9749b4d010003d667421f0313e75372ddb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f55c5e9749b4d010003d667421f0313e75372ddb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f55c5e9749b4d010003d667421f0313e75372ddb"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 53,
      "deletions": 67
    },
    "files": [
      {
        "sha": "f273a15713f8702bd618524638dadd86b8e19ee2",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=a3241998e1e300e87e7c57d92c2478f67ec91db6",
        "patch": "@@ -15,8 +15,6 @@\n #define _(x) std::string(x) /* Keep the _() around in case gettext or such will be used later to translate non-UI */\n \n using namespace std;\n-using namespace boost;\n-using namespace boost::asio;\n using namespace json_spirit;\n \n std::string HelpMessageCli()\n@@ -108,12 +106,12 @@ Object CallRPC(const string& strMethod, const Array& params)\n \n     // Connect to localhost\n     bool fUseSSL = GetBoolArg(\"-rpcssl\", false);\n-    asio::io_service io_service;\n-    ssl::context context(io_service, ssl::context::sslv23);\n-    context.set_options(ssl::context::no_sslv2 | ssl::context::no_sslv3);\n-    asio::ssl::stream<asio::ip::tcp::socket> sslStream(io_service, context);\n-    SSLIOStreamDevice<asio::ip::tcp> d(sslStream, fUseSSL);\n-    iostreams::stream< SSLIOStreamDevice<asio::ip::tcp> > stream(d);\n+    boost::asio::io_service io_service;\n+    boost::asio::ssl::context context(io_service, boost::asio::ssl::context::sslv23);\n+    context.set_options(boost::asio::ssl::context::no_sslv2 | boost::asio::ssl::context::no_sslv3);\n+    boost::asio::ssl::stream<boost::asio::ip::tcp::socket> sslStream(io_service, context);\n+    SSLIOStreamDevice<boost::asio::ip::tcp> d(sslStream, fUseSSL);\n+    boost::iostreams::stream< SSLIOStreamDevice<boost::asio::ip::tcp> > stream(d);\n \n     const bool fConnected = d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", itostr(BaseParams().RPCPort())));\n     if (!fConnected)"
      },
      {
        "sha": "85b60e9adba5aea2a42e20f3defb4f2f2e9ab79a",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=a3241998e1e300e87e7c57d92c2478f67ec91db6",
        "patch": "@@ -20,7 +20,6 @@\n #include <boost/algorithm/string/split.hpp>\n #include <boost/assign/list_of.hpp>\n \n-using namespace boost;\n using namespace boost::algorithm;\n using namespace std;\n "
      },
      {
        "sha": "fcc177f1ccde0782579036f3f1acc54af95ba279",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=a3241998e1e300e87e7c57d92c2478f67ec91db6",
        "patch": "@@ -24,7 +24,6 @@\n #include <openssl/rand.h>\n \n using namespace std;\n-using namespace boost;\n \n \n unsigned int nWalletDBUpdated;\n@@ -73,9 +72,9 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     boost::this_thread::interruption_point();\n \n     path = pathIn;\n-    filesystem::path pathLogDir = path / \"database\";\n+    boost::filesystem::path pathLogDir = path / \"database\";\n     TryCreateDirectory(pathLogDir);\n-    filesystem::path pathErrorFile = path / \"db.log\";\n+    boost::filesystem::path pathErrorFile = path / \"db.log\";\n     LogPrintf(\"CDBEnv::Open : LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;"
      },
      {
        "sha": "1b0c909b962b0a6edd1cae2f161dbca1eb684c74",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a3241998e1e300e87e7c57d92c2478f67ec91db6",
        "patch": "@@ -43,7 +43,6 @@\n #include <boost/thread.hpp>\n #include <openssl/crypto.h>\n \n-using namespace boost;\n using namespace std;\n \n #ifdef ENABLE_WALLET\n@@ -427,12 +426,12 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n     }\n \n     // hardcoded $DATADIR/bootstrap.dat\n-    filesystem::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n-    if (filesystem::exists(pathBootstrap)) {\n+    boost::filesystem::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n+    if (boost::filesystem::exists(pathBootstrap)) {\n         FILE *file = fopen(pathBootstrap.string().c_str(), \"rb\");\n         if (file) {\n             CImportingNow imp;\n-            filesystem::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n+            boost::filesystem::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n             LogPrintf(\"Importing bootstrap.dat...\\n\");\n             LoadExternalBlockFile(file);\n             RenameOver(pathBootstrap, pathBootstrapOld);\n@@ -816,7 +815,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n                 return false;\n         }\n \n-        if (filesystem::exists(GetDataDir() / strWalletFile))\n+        if (boost::filesystem::exists(GetDataDir() / strWalletFile))\n         {\n             CDBEnv::VerifyResult r = bitdb.Verify(strWalletFile, CWalletDB::Recover);\n             if (r == CDBEnv::RECOVER_OK)\n@@ -937,20 +936,20 @@ bool AppInit2(boost::thread_group& threadGroup)\n     fReindex = GetBoolArg(\"-reindex\", false);\n \n     // Upgrading to 0.8; hard-link the old blknnnn.dat files into /blocks/\n-    filesystem::path blocksDir = GetDataDir() / \"blocks\";\n-    if (!filesystem::exists(blocksDir))\n+    boost::filesystem::path blocksDir = GetDataDir() / \"blocks\";\n+    if (!boost::filesystem::exists(blocksDir))\n     {\n-        filesystem::create_directories(blocksDir);\n+        boost::filesystem::create_directories(blocksDir);\n         bool linked = false;\n         for (unsigned int i = 1; i < 10000; i++) {\n-            filesystem::path source = GetDataDir() / strprintf(\"blk%04u.dat\", i);\n-            if (!filesystem::exists(source)) break;\n-            filesystem::path dest = blocksDir / strprintf(\"blk%05u.dat\", i-1);\n+            boost::filesystem::path source = GetDataDir() / strprintf(\"blk%04u.dat\", i);\n+            if (!boost::filesystem::exists(source)) break;\n+            boost::filesystem::path dest = blocksDir / strprintf(\"blk%05u.dat\", i-1);\n             try {\n-                filesystem::create_hard_link(source, dest);\n+                boost::filesystem::create_hard_link(source, dest);\n                 LogPrintf(\"Hardlinked %s -> %s\\n\", source.string(), dest.string());\n                 linked = true;\n-            } catch (const filesystem::filesystem_error& e) {\n+            } catch (const boost::filesystem::filesystem_error& e) {\n                 // Note: hardlink creation failing is not a disaster, it just means\n                 // blocks will get re-downloaded from peers.\n                 LogPrintf(\"Error hardlinking blk%04u.dat : %s\\n\", i, e.what());"
      },
      {
        "sha": "f768f1e29fb812c86b614d943504ab8970d49758",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a3241998e1e300e87e7c57d92c2478f67ec91db6",
        "patch": "@@ -28,7 +28,6 @@\n #include <boost/filesystem/fstream.hpp>\n #include <boost/thread.hpp>\n \n-using namespace boost;\n using namespace std;\n \n #if defined(NDEBUG)\n@@ -2788,7 +2787,7 @@ bool AbortNode(const std::string &strMessage, const std::string &userMessage) {\n \n bool CheckDiskSpace(uint64_t nAdditionalBytes)\n {\n-    uint64_t nFreeBytesAvailable = filesystem::space(GetDataDir()).available;\n+    uint64_t nFreeBytesAvailable = boost::filesystem::space(GetDataDir()).available;\n \n     // Check for nMinDiskSpace bytes (currently 50MB)\n     if (nFreeBytesAvailable < nMinDiskSpace + nAdditionalBytes)"
      },
      {
        "sha": "d07882c7f4ca6dbf57f1a6b22027930d58e4e35a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a3241998e1e300e87e7c57d92c2478f67ec91db6",
        "patch": "@@ -49,7 +49,6 @@\n #endif\n #endif\n \n-using namespace boost;\n using namespace std;\n \n namespace {"
      },
      {
        "sha": "66331ee4b4c9f82da24fda4ddb693f1193a48b60",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=a3241998e1e300e87e7c57d92c2478f67ec91db6",
        "patch": "@@ -46,7 +46,6 @@\n #include <QUrlQuery>\n #endif\n \n-using namespace boost;\n using namespace std;\n \n const int BITCOIN_IPC_CONNECT_TIMEOUT = 1000; // milliseconds"
      },
      {
        "sha": "1013418184c101e9a93fb465b41e2cdb7de456d7",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=a3241998e1e300e87e7c57d92c2478f67ec91db6",
        "patch": "@@ -23,7 +23,6 @@\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\"\n \n-using namespace boost;\n using namespace boost::assign;\n using namespace json_spirit;\n using namespace std;"
      },
      {
        "sha": "b08598d0bf9cb53e4e9b9e48fe808c11b767626d",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=a3241998e1e300e87e7c57d92c2478f67ec91db6",
        "patch": "@@ -26,7 +26,6 @@\n #include \"json/json_spirit_writer_template.h\"\n \n using namespace std;\n-using namespace boost;\n using namespace boost::asio;\n using namespace json_spirit;\n "
      },
      {
        "sha": "35319e4803ae80feb7e4bfb88507620a8f52c8eb",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=a3241998e1e300e87e7c57d92c2478f67ec91db6",
        "patch": "@@ -25,7 +25,6 @@\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\"\n \n-using namespace boost;\n using namespace boost::assign;\n using namespace json_spirit;\n using namespace std;"
      },
      {
        "sha": "a070ab5bbe7e7f29f25bc67fe16e105fa7453d21",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 27,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=a3241998e1e300e87e7c57d92c2478f67ec91db6",
        "patch": "@@ -26,7 +26,6 @@\n #include <boost/thread.hpp>\n #include \"json/json_spirit_writer_template.h\"\n \n-using namespace boost;\n using namespace boost::asio;\n using namespace json_spirit;\n using namespace std;\n@@ -39,7 +38,7 @@ static std::string rpcWarmupStatus(\"RPC server started\");\n static CCriticalSection cs_rpcWarmup;\n \n //! These are created by StartRPCThreads, destroyed in StopRPCThreads\n-static asio::io_service* rpc_io_service = NULL;\n+static boost::asio::io_service* rpc_io_service = NULL;\n static map<string, boost::shared_ptr<deadline_timer> > deadlineTimers;\n static ssl::context* rpc_ssl_context = NULL;\n static boost::thread_group* rpc_worker_group = NULL;\n@@ -428,7 +427,7 @@ class AcceptedConnectionImpl : public AcceptedConnection\n {\n public:\n     AcceptedConnectionImpl(\n-            asio::io_service& io_service,\n+            boost::asio::io_service& io_service,\n             ssl::context &context,\n             bool fUseSSL) :\n         sslStream(io_service, context),\n@@ -453,11 +452,11 @@ class AcceptedConnectionImpl : public AcceptedConnection\n     }\n \n     typename Protocol::endpoint peer;\n-    asio::ssl::stream<typename Protocol::socket> sslStream;\n+    boost::asio::ssl::stream<typename Protocol::socket> sslStream;\n \n private:\n     SSLIOStreamDevice<Protocol> _d;\n-    iostreams::stream< SSLIOStreamDevice<Protocol> > _stream;\n+    boost::iostreams::stream< SSLIOStreamDevice<Protocol> > _stream;\n };\n \n void ServiceConnection(AcceptedConnection *conn);\n@@ -504,7 +503,7 @@ static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol,\n                              const boost::system::error_code& error)\n {\n     // Immediately start accepting new connections, except when we're cancelled or our socket is closed.\n-    if (error != asio::error::operation_aborted && acceptor->is_open())\n+    if (error != boost::asio::error::operation_aborted && acceptor->is_open())\n         RPCListen(acceptor, context, fUseSSL);\n \n     AcceptedConnectionImpl<ip::tcp>* tcp_conn = dynamic_cast< AcceptedConnectionImpl<ip::tcp>* >(conn.get());\n@@ -535,7 +534,7 @@ static ip::tcp::endpoint ParseEndpoint(const std::string &strEndpoint, int defau\n     std::string addr;\n     int port = defaultPort;\n     SplitHostPort(strEndpoint, port, addr);\n-    return ip::tcp::endpoint(asio::ip::address::from_string(addr), port);\n+    return ip::tcp::endpoint(boost::asio::ip::address::from_string(addr), port);\n }\n \n void StartRPCThreads()\n@@ -590,7 +589,7 @@ void StartRPCThreads()\n     }\n \n     assert(rpc_io_service == NULL);\n-    rpc_io_service = new asio::io_service();\n+    rpc_io_service = new boost::asio::io_service();\n     rpc_ssl_context = new ssl::context(*rpc_io_service, ssl::context::sslv23);\n \n     const bool fUseSSL = GetBoolArg(\"-rpcssl\", false);\n@@ -599,14 +598,14 @@ void StartRPCThreads()\n     {\n         rpc_ssl_context->set_options(ssl::context::no_sslv2 | ssl::context::no_sslv3);\n \n-        filesystem::path pathCertFile(GetArg(\"-rpcsslcertificatechainfile\", \"server.cert\"));\n-        if (!pathCertFile.is_complete()) pathCertFile = filesystem::path(GetDataDir()) / pathCertFile;\n-        if (filesystem::exists(pathCertFile)) rpc_ssl_context->use_certificate_chain_file(pathCertFile.string());\n+        boost::filesystem::path pathCertFile(GetArg(\"-rpcsslcertificatechainfile\", \"server.cert\"));\n+        if (!pathCertFile.is_complete()) pathCertFile = boost::filesystem::path(GetDataDir()) / pathCertFile;\n+        if (boost::filesystem::exists(pathCertFile)) rpc_ssl_context->use_certificate_chain_file(pathCertFile.string());\n         else LogPrintf(\"ThreadRPCServer ERROR: missing server certificate file %s\\n\", pathCertFile.string());\n \n-        filesystem::path pathPKFile(GetArg(\"-rpcsslprivatekeyfile\", \"server.pem\"));\n-        if (!pathPKFile.is_complete()) pathPKFile = filesystem::path(GetDataDir()) / pathPKFile;\n-        if (filesystem::exists(pathPKFile)) rpc_ssl_context->use_private_key_file(pathPKFile.string(), ssl::context::pem);\n+        boost::filesystem::path pathPKFile(GetArg(\"-rpcsslprivatekeyfile\", \"server.pem\"));\n+        if (!pathPKFile.is_complete()) pathPKFile = boost::filesystem::path(GetDataDir()) / pathPKFile;\n+        if (boost::filesystem::exists(pathPKFile)) rpc_ssl_context->use_private_key_file(pathPKFile.string(), ssl::context::pem);\n         else LogPrintf(\"ThreadRPCServer ERROR: missing server private key file %s\\n\", pathPKFile.string());\n \n         string strCiphers = GetArg(\"-rpcsslciphers\", \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\");\n@@ -618,8 +617,8 @@ void StartRPCThreads()\n     int defaultPort = GetArg(\"-rpcport\", BaseParams().RPCPort());\n     if (!mapArgs.count(\"-rpcallowip\")) // Default to loopback if not allowing external IPs\n     {\n-        vEndpoints.push_back(ip::tcp::endpoint(asio::ip::address_v6::loopback(), defaultPort));\n-        vEndpoints.push_back(ip::tcp::endpoint(asio::ip::address_v4::loopback(), defaultPort));\n+        vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v6::loopback(), defaultPort));\n+        vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v4::loopback(), defaultPort));\n         if (mapArgs.count(\"-rpcbind\"))\n         {\n             LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n@@ -641,8 +640,8 @@ void StartRPCThreads()\n             }\n         }\n     } else { // No specific bind address specified, bind to any\n-        vEndpoints.push_back(ip::tcp::endpoint(asio::ip::address_v6::any(), defaultPort));\n-        vEndpoints.push_back(ip::tcp::endpoint(asio::ip::address_v4::any(), defaultPort));\n+        vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v6::any(), defaultPort));\n+        vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v4::any(), defaultPort));\n         // Prefer making the socket dual IPv6/IPv4 instead of binding\n         // to both addresses seperately.\n         bBindAny = true;\n@@ -654,7 +653,7 @@ void StartRPCThreads()\n     BOOST_FOREACH(const ip::tcp::endpoint &endpoint, vEndpoints)\n     {\n         try {\n-            asio::ip::address bindAddress = endpoint.address();\n+            boost::asio::ip::address bindAddress = endpoint.address();\n             straddress = bindAddress.to_string();\n             LogPrintf(\"Binding RPC on address %s port %i (IPv4+IPv6 bind any: %i)\\n\", straddress, endpoint.port(), bBindAny);\n             boost::system::error_code v6_only_error;\n@@ -665,7 +664,7 @@ void StartRPCThreads()\n \n             // Try making the socket dual IPv6/IPv4 when listening on the IPv6 \"any\" address\n             acceptor->set_option(boost::asio::ip::v6_only(\n-                !bBindAny || bindAddress != asio::ip::address_v6::any()), v6_only_error);\n+                !bBindAny || bindAddress != boost::asio::ip::address_v6::any()), v6_only_error);\n \n             acceptor->bind(endpoint);\n             acceptor->listen(socket_base::max_connections);\n@@ -675,7 +674,7 @@ void StartRPCThreads()\n             fListening = true;\n             rpc_acceptors.push_back(acceptor);\n             // If dual IPv6/IPv4 bind successful, skip binding to IPv4 separately\n-            if(bBindAny && bindAddress == asio::ip::address_v6::any() && !v6_only_error)\n+            if(bBindAny && bindAddress == boost::asio::ip::address_v6::any() && !v6_only_error)\n                 break;\n         }\n         catch (const boost::system::system_error& e)\n@@ -693,20 +692,20 @@ void StartRPCThreads()\n \n     rpc_worker_group = new boost::thread_group();\n     for (int i = 0; i < GetArg(\"-rpcthreads\", 4); i++)\n-        rpc_worker_group->create_thread(boost::bind(&asio::io_service::run, rpc_io_service));\n+        rpc_worker_group->create_thread(boost::bind(&boost::asio::io_service::run, rpc_io_service));\n     fRPCRunning = true;\n }\n \n void StartDummyRPCThread()\n {\n     if(rpc_io_service == NULL)\n     {\n-        rpc_io_service = new asio::io_service();\n+        rpc_io_service = new boost::asio::io_service();\n         /* Create dummy \"work\" to keep the thread from exiting when no timeouts active,\n          * see http://www.boost.org/doc/libs/1_51_0/doc/html/boost_asio/reference/io_service.html#boost_asio.reference.io_service.stopping_the_io_service_from_running_out_of_work */\n-        rpc_dummy_work = new asio::io_service::work(*rpc_io_service);\n+        rpc_dummy_work = new boost::asio::io_service::work(*rpc_io_service);\n         rpc_worker_group = new boost::thread_group();\n-        rpc_worker_group->create_thread(boost::bind(&asio::io_service::run, rpc_io_service));\n+        rpc_worker_group->create_thread(boost::bind(&boost::asio::io_service::run, rpc_io_service));\n         fRPCRunning = true;\n     }\n }\n@@ -719,7 +718,7 @@ void StopRPCThreads()\n \n     // First, cancel all timers and acceptors\n     // This is not done automatically by ->stop(), and in some cases the destructor of\n-    // asio::io_service can hang if this is skipped.\n+    // boost::asio::io_service can hang if this is skipped.\n     boost::system::error_code ec;\n     BOOST_FOREACH(const boost::shared_ptr<ip::tcp::acceptor> &acceptor, rpc_acceptors)\n     {\n@@ -787,7 +786,7 @@ void RPCRunLater(const std::string& name, boost::function<void(void)> func, int6\n         deadlineTimers.insert(make_pair(name,\n                                         boost::shared_ptr<deadline_timer>(new deadline_timer(*rpc_io_service))));\n     }\n-    deadlineTimers[name]->expires_from_now(posix_time::seconds(nSeconds));\n+    deadlineTimers[name]->expires_from_now(boost::posix_time::seconds(nSeconds));\n     deadlineTimers[name]->async_wait(boost::bind(RPCRunHandler, _1, func));\n }\n "
      },
      {
        "sha": "a6b38ead6247ed77308b34c3bf383be821c35450",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=a3241998e1e300e87e7c57d92c2478f67ec91db6",
        "patch": "@@ -23,7 +23,6 @@\n #include \"json/json_spirit_value.h\"\n \n using namespace std;\n-using namespace boost;\n using namespace boost::assign;\n using namespace json_spirit;\n "
      },
      {
        "sha": "668130ed695b2e64627080d1bf2a9c0c3b26f0d2",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3241998e1e300e87e7c57d92c2478f67ec91db6/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=a3241998e1e300e87e7c57d92c2478f67ec91db6",
        "patch": "@@ -18,7 +18,6 @@\n #include <boost/scoped_ptr.hpp>\n #include <boost/thread.hpp>\n \n-using namespace boost;\n using namespace std;\n \n static uint64_t nAccountingEntryNumber = 0;\n@@ -865,20 +864,20 @@ bool BackupWallet(const CWallet& wallet, const string& strDest)\n                 bitdb.mapFileUseCount.erase(wallet.strWalletFile);\n \n                 // Copy wallet.dat\n-                filesystem::path pathSrc = GetDataDir() / wallet.strWalletFile;\n-                filesystem::path pathDest(strDest);\n-                if (filesystem::is_directory(pathDest))\n+                boost::filesystem::path pathSrc = GetDataDir() / wallet.strWalletFile;\n+                boost::filesystem::path pathDest(strDest);\n+                if (boost::filesystem::is_directory(pathDest))\n                     pathDest /= wallet.strWalletFile;\n \n                 try {\n #if BOOST_VERSION >= 104000\n-                    filesystem::copy_file(pathSrc, pathDest, filesystem::copy_option::overwrite_if_exists);\n+                    boost::filesystem::copy_file(pathSrc, pathDest, boost::filesystem::copy_option::overwrite_if_exists);\n #else\n-                    filesystem::copy_file(pathSrc, pathDest);\n+                    boost::filesystem::copy_file(pathSrc, pathDest);\n #endif\n                     LogPrintf(\"copied wallet.dat to %s\\n\", pathDest.string());\n                     return true;\n-                } catch (const filesystem::filesystem_error& e) {\n+                } catch (const boost::filesystem::filesystem_error& e) {\n                     LogPrintf(\"error copying wallet.dat to %s - %s\\n\", pathDest.string(), e.what());\n                     return false;\n                 }"
      }
    ]
  },
  {
    "sha": "9b1ab860ff00180142d9e514f3e1b6a91c86df7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjFhYjg2MGZmMDAxODAxNDJkOWU1MTRmM2UxYjZhOTFjODZkZjdh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-12-19T21:49:00Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-02T20:12:03Z"
      },
      "message": "namespace: drop boost::assign altogether here\n\nStandard functions are even simpler",
      "tree": {
        "sha": "0969c46196f6a32d2577e921b0bbc1315e5f4cf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0969c46196f6a32d2577e921b0bbc1315e5f4cf0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b1ab860ff00180142d9e514f3e1b6a91c86df7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b1ab860ff00180142d9e514f3e1b6a91c86df7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b1ab860ff00180142d9e514f3e1b6a91c86df7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b1ab860ff00180142d9e514f3e1b6a91c86df7a/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3241998e1e300e87e7c57d92c2478f67ec91db6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3241998e1e300e87e7c57d92c2478f67ec91db6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3241998e1e300e87e7c57d92c2478f67ec91db6"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 8,
      "deletions": 12
    },
    "files": [
      {
        "sha": "69d8522188190b6783b495ee4333bebcc4c1075f",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 12,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b1ab860ff00180142d9e514f3e1b6a91c86df7a/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b1ab860ff00180142d9e514f3e1b6a91c86df7a/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=9b1ab860ff00180142d9e514f3e1b6a91c86df7a",
        "patch": "@@ -15,12 +15,10 @@\n #include \"wallet_ismine.h\"\n #endif\n \n-#include <boost/assign/std/vector.hpp>\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n-using namespace boost::assign;\n \n typedef vector<unsigned char> valtype;\n \n@@ -81,22 +79,21 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     CScript s;\n \n     // Test a AND b:\n-    keys.clear();\n-    keys += key[0],key[1]; // magic operator+= from boost.assign\n+    keys.assign(1,key[0]);\n+    keys.push_back(key[1]);\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n     BOOST_CHECK(VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     for (int i = 0; i < 4; i++)\n     {\n-        keys.clear();\n-        keys += key[i];\n+        keys.assign(1,key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n         BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n \n-        keys.clear();\n-        keys += key[1],key[i];\n+        keys.assign(1,key[1]);\n+        keys.push_back(key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n         BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n@@ -105,8 +102,7 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     // Test a OR b:\n     for (int i = 0; i < 4; i++)\n     {\n-        keys.clear();\n-        keys += key[i];\n+        keys.assign(1,key[i]);\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n         {\n@@ -132,8 +128,8 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     for (int i = 0; i < 4; i++)\n         for (int j = 0; j < 4; j++)\n         {\n-            keys.clear();\n-            keys += key[i],key[j];\n+            keys.assign(1,key[i]);\n+            keys.push_back(key[j]);\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n             {"
      }
    ]
  },
  {
    "sha": "856e862f4a736fbdc38daae3b7f0fa34e1da317c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTZlODYyZjRhNzM2ZmJkYzM4ZGFhZTNiN2YwZmEzNGUxZGEzMTdj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-12-19T21:50:15Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-02T20:12:03Z"
      },
      "message": "namespace: drop most boost namespaces and a few header cleanups\n\nA few boost::asio were left around because they're very wordy otherwise.",
      "tree": {
        "sha": "2095eef431d539acfef432321aa82fa6062219fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2095eef431d539acfef432321aa82fa6062219fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/856e862f4a736fbdc38daae3b7f0fa34e1da317c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/856e862f4a736fbdc38daae3b7f0fa34e1da317c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/856e862f4a736fbdc38daae3b7f0fa34e1da317c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/856e862f4a736fbdc38daae3b7f0fa34e1da317c/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b1ab860ff00180142d9e514f3e1b6a91c86df7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b1ab860ff00180142d9e514f3e1b6a91c86df7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b1ab860ff00180142d9e514f3e1b6a91c86df7a"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 29,
      "deletions": 49
    },
    "files": [
      {
        "sha": "ead652a7297cd4352daed4b2f2ead6e230b299b2",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=856e862f4a736fbdc38daae3b7f0fa34e1da317c",
        "patch": "@@ -22,7 +22,6 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/assign/list_of.hpp>\n \n-using namespace boost::assign;\n using namespace std;\n \n static bool fCreateBlank;\n@@ -375,7 +374,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n             if (!prevOut.isObject())\n                 throw runtime_error(\"expected prevtxs internal object\");\n \n-            map<string,UniValue::VType> types = map_list_of(\"txid\", UniValue::VSTR)(\"vout\",UniValue::VNUM)(\"scriptPubKey\",UniValue::VSTR);\n+            map<string,UniValue::VType> types = boost::assign::map_list_of(\"txid\", UniValue::VSTR)(\"vout\",UniValue::VNUM)(\"scriptPubKey\",UniValue::VSTR);\n             if (!prevOut.checkObject(types))\n                 throw runtime_error(\"prevtxs internal object typecheck fail\");\n "
      },
      {
        "sha": "00c2367a6baf011a446d910811fba198b632a228",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=856e862f4a736fbdc38daae3b7f0fa34e1da317c",
        "patch": "@@ -14,7 +14,6 @@\n #include <boost/assign/list_of.hpp>\n \n using namespace std;\n-using namespace boost::assign;\n \n struct SeedSpec6 {\n     uint8_t addr[16];\n@@ -158,11 +157,11 @@ class CMainParams : public CChainParams {\n         vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\"));\n         vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\"));\n \n-        base58Prefixes[PUBKEY_ADDRESS] = list_of(0);\n-        base58Prefixes[SCRIPT_ADDRESS] = list_of(5);\n-        base58Prefixes[SECRET_KEY] =     list_of(128);\n-        base58Prefixes[EXT_PUBLIC_KEY] = list_of(0x04)(0x88)(0xB2)(0x1E);\n-        base58Prefixes[EXT_SECRET_KEY] = list_of(0x04)(0x88)(0xAD)(0xE4);\n+        base58Prefixes[PUBKEY_ADDRESS] = boost::assign::list_of(0);\n+        base58Prefixes[SCRIPT_ADDRESS] = boost::assign::list_of(5);\n+        base58Prefixes[SECRET_KEY] =     boost::assign::list_of(128);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E);\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4);\n \n         convertSeed6(vFixedSeeds, pnSeed6_main, ARRAYLEN(pnSeed6_main));\n \n@@ -217,11 +216,11 @@ class CTestNetParams : public CMainParams {\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"testnet-seed.bluematt.me\"));\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.schildbach.de\", \"testnet-seed.bitcoin.schildbach.de\"));\n \n-        base58Prefixes[PUBKEY_ADDRESS] = list_of(111);\n-        base58Prefixes[SCRIPT_ADDRESS] = list_of(196);\n-        base58Prefixes[SECRET_KEY]     = list_of(239);\n-        base58Prefixes[EXT_PUBLIC_KEY] = list_of(0x04)(0x35)(0x87)(0xCF);\n-        base58Prefixes[EXT_SECRET_KEY] = list_of(0x04)(0x35)(0x83)(0x94);\n+        base58Prefixes[PUBKEY_ADDRESS] = boost::assign::list_of(111);\n+        base58Prefixes[SCRIPT_ADDRESS] = boost::assign::list_of(196);\n+        base58Prefixes[SECRET_KEY]     = boost::assign::list_of(239);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF);\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94);\n \n         convertSeed6(vFixedSeeds, pnSeed6_test, ARRAYLEN(pnSeed6_test));\n "
      },
      {
        "sha": "09fd0df877226db298c0c3e79e380eafeeba156f",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=856e862f4a736fbdc38daae3b7f0fa34e1da317c",
        "patch": "@@ -9,10 +9,6 @@\n \n #include <assert.h>\n \n-#include <boost/assign/list_of.hpp>\n-\n-using namespace boost::assign;\n-\n /**\n  * Main network\n  */"
      },
      {
        "sha": "e064955ff0297813e485ef93dba8268156a423e3",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=856e862f4a736fbdc38daae3b7f0fa34e1da317c",
        "patch": "@@ -20,7 +20,6 @@\n #include <boost/algorithm/string/split.hpp>\n #include <boost/assign/list_of.hpp>\n \n-using namespace boost::algorithm;\n using namespace std;\n \n CScript ParseScript(std::string s)\n@@ -43,34 +42,34 @@ CScript ParseScript(std::string s)\n             string strName(name);\n             mapOpNames[strName] = (opcodetype)op;\n             // Convenience: OP_ADD and just ADD are both recognized:\n-            replace_first(strName, \"OP_\", \"\");\n+            boost::algorithm::replace_first(strName, \"OP_\", \"\");\n             mapOpNames[strName] = (opcodetype)op;\n         }\n     }\n \n     vector<string> words;\n-    split(words, s, is_any_of(\" \\t\\n\"), token_compress_on);\n+    boost::algorithm::split(words, s, boost::algorithm::is_any_of(\" \\t\\n\"), boost::algorithm::token_compress_on);\n \n     for (std::vector<std::string>::const_iterator w = words.begin(); w != words.end(); ++w)\n     {\n         if (w->empty())\n         {\n             // Empty string, ignore. (boost::split given '' will return one word)\n         }\n-        else if (all(*w, is_digit()) ||\n-            (starts_with(*w, \"-\") && all(string(w->begin()+1, w->end()), is_digit())))\n+        else if (all(*w, boost::algorithm::is_digit()) ||\n+            (boost::algorithm::starts_with(*w, \"-\") && all(string(w->begin()+1, w->end()), boost::algorithm::is_digit())))\n         {\n             // Number\n             int64_t n = atoi64(*w);\n             result << n;\n         }\n-        else if (starts_with(*w, \"0x\") && (w->begin()+2 != w->end()) && IsHex(string(w->begin()+2, w->end())))\n+        else if (boost::algorithm::starts_with(*w, \"0x\") && (w->begin()+2 != w->end()) && IsHex(string(w->begin()+2, w->end())))\n         {\n             // Raw hex data, inserted NOT pushed onto stack:\n             std::vector<unsigned char> raw = ParseHex(string(w->begin()+2, w->end()));\n             result.insert(result.end(), raw.begin(), raw.end());\n         }\n-        else if (w->size() >= 2 && starts_with(*w, \"'\") && ends_with(*w, \"'\"))\n+        else if (w->size() >= 2 && boost::algorithm::starts_with(*w, \"'\") && boost::algorithm::ends_with(*w, \"'\"))\n         {\n             // Single-quoted string, pushed as data. NOTE: this is poor-man's\n             // parsing, spaces/tabs/newlines in single-quoted strings won't work."
      },
      {
        "sha": "184aacf5a8817afee04566128b0624cc90c32236",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=856e862f4a736fbdc38daae3b7f0fa34e1da317c",
        "patch": "@@ -23,7 +23,6 @@\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\"\n \n-using namespace boost::assign;\n using namespace json_spirit;\n using namespace std;\n "
      },
      {
        "sha": "95d6b9e5317a8ef0fb6e140b8bbede8275bcea17",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=856e862f4a736fbdc38daae3b7f0fa34e1da317c",
        "patch": "@@ -26,7 +26,6 @@\n #include \"json/json_spirit_writer_template.h\"\n \n using namespace std;\n-using namespace boost::asio;\n using namespace json_spirit;\n \n //! Number of bytes to allocate and read at most at once in post data"
      },
      {
        "sha": "5981134af322b470ad71709fab0b3d84c4c90da8",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=856e862f4a736fbdc38daae3b7f0fa34e1da317c",
        "patch": "@@ -25,7 +25,6 @@\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\"\n \n-using namespace boost::assign;\n using namespace json_spirit;\n using namespace std;\n \n@@ -231,7 +230,7 @@ Value listunspent(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(int_type)(int_type)(array_type));\n+    RPCTypeCheck(params, boost::assign::list_of(int_type)(int_type)(array_type));\n \n     int nMinDepth = 1;\n     if (params.size() > 0)\n@@ -335,7 +334,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(array_type)(obj_type));\n+    RPCTypeCheck(params, boost::assign::list_of(array_type)(obj_type));\n \n     Array inputs = params[0].get_array();\n     Object sendTo = params[1].get_obj();\n@@ -429,7 +428,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(str_type));\n+    RPCTypeCheck(params, boost::assign::list_of(str_type));\n \n     CTransaction tx;\n \n@@ -467,7 +466,7 @@ Value decodescript(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(str_type));\n+    RPCTypeCheck(params, boost::assign::list_of(str_type));\n \n     Object r;\n     CScript script;\n@@ -533,7 +532,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(str_type)(array_type)(array_type)(str_type), true);\n+    RPCTypeCheck(params, boost::assign::list_of(str_type)(array_type)(array_type)(str_type), true);\n \n     vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n@@ -605,7 +604,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n             Object prevOut = p.get_obj();\n \n-            RPCTypeCheck(prevOut, map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type));\n+            RPCTypeCheck(prevOut, boost::assign::map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type));\n \n             uint256 txid = ParseHashO(prevOut, \"txid\");\n \n@@ -633,7 +632,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             // if redeemScript given and not using the local wallet (private keys\n             // given), add redeemScript to the tempKeystore so it can be signed:\n             if (fGivenKeys && scriptPubKey.IsPayToScriptHash()) {\n-                RPCTypeCheck(prevOut, map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type)(\"redeemScript\",str_type));\n+                RPCTypeCheck(prevOut, boost::assign::map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type)(\"redeemScript\",str_type));\n                 Value v = find_value(prevOut, \"redeemScript\");\n                 if (!(v == Value::null)) {\n                     vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n@@ -723,7 +722,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(str_type)(bool_type));\n+    RPCTypeCheck(params, boost::assign::list_of(str_type)(bool_type));\n \n     // parse hex string from parameter\n     CTransaction tx;"
      },
      {
        "sha": "9d51ff20dd4ccdd2e28500861bd5dc734984751c",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=856e862f4a736fbdc38daae3b7f0fa34e1da317c",
        "patch": "@@ -23,7 +23,6 @@\n #include \"json/json_spirit_value.h\"\n \n using namespace std;\n-using namespace boost::assign;\n using namespace json_spirit;\n \n int64_t nWalletUnlockTime;\n@@ -1872,9 +1871,9 @@ Value lockunspent(const Array& params, bool fHelp)\n         );\n \n     if (params.size() == 1)\n-        RPCTypeCheck(params, list_of(bool_type));\n+        RPCTypeCheck(params, boost::assign::list_of(bool_type));\n     else\n-        RPCTypeCheck(params, list_of(bool_type)(array_type));\n+        RPCTypeCheck(params, boost::assign::list_of(bool_type)(array_type));\n \n     bool fUnlock = params[0].get_bool();\n \n@@ -1891,7 +1890,7 @@ Value lockunspent(const Array& params, bool fHelp)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected object\");\n         const Object& o = output.get_obj();\n \n-        RPCTypeCheck(o, map_list_of(\"txid\", str_type)(\"vout\", int_type));\n+        RPCTypeCheck(o, boost::assign::map_list_of(\"txid\", str_type)(\"vout\", int_type));\n \n         string txid = find_value(o, \"txid\").get_str();\n         if (!IsHex(txid))"
      },
      {
        "sha": "98a2cbc92f815f7f11b30048a0da2e38b832f023",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=856e862f4a736fbdc38daae3b7f0fa34e1da317c",
        "patch": "@@ -20,7 +20,6 @@\n #include <boost/tuple/tuple.hpp>\n \n using namespace std;\n-using namespace boost::tuples;\n \n BOOST_AUTO_TEST_SUITE(bloom_tests)\n "
      },
      {
        "sha": "a5c6a21f4b0d8a906d0b52445ebf1dbe2edb5a13",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=856e862f4a736fbdc38daae3b7f0fa34e1da317c",
        "patch": "@@ -23,12 +23,6 @@\n #include <string>\n #include <vector>\n \n-#include <boost/algorithm/string/classification.hpp>\n-#include <boost/algorithm/string/predicate.hpp>\n-#include <boost/algorithm/string/replace.hpp>\n-#include <boost/algorithm/string/split.hpp>\n-#include <boost/filesystem/operations.hpp>\n-#include <boost/filesystem/path.hpp>\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n #include \"json/json_spirit_reader_template.h\"\n@@ -37,7 +31,6 @@\n \n using namespace std;\n using namespace json_spirit;\n-using namespace boost::algorithm;\n \n // Uncomment if you want to output updated JSON tests.\n // #define UPDATE_JSON_TESTS"
      },
      {
        "sha": "48386994af5eb037e8aafb5183e27e94cc000d89",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856e862f4a736fbdc38daae3b7f0fa34e1da317c/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=856e862f4a736fbdc38daae3b7f0fa34e1da317c",
        "patch": "@@ -24,7 +24,6 @@\n \n using namespace std;\n using namespace json_spirit;\n-using namespace boost::algorithm;\n \n // In script_tests.cpp\n extern Array read_json(const std::string& jsondata);\n@@ -47,7 +46,7 @@ unsigned int ParseScriptFlags(string strFlags)\n     }\n     unsigned int flags = 0;\n     vector<string> words;\n-    split(words, strFlags, is_any_of(\",\"));\n+    boost::algorithm::split(words, strFlags, boost::algorithm::is_any_of(\",\"));\n \n     BOOST_FOREACH(string word, words)\n     {"
      }
    ]
  }
]