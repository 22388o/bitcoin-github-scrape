[
  {
    "sha": "ed60970c83d68b2afd60f133f6b9b92797ee6034",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDYwOTcwYzgzZDY4YjJhZmQ2MGYxMzNmNmI5YjkyNzk3ZWU2MDM0",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-04-18T07:53:34Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-04-21T03:51:50Z"
      },
      "message": "[test] Test abortrescan command.",
      "tree": {
        "sha": "401f0c48d69fa1b4c9f6d366dab8e50db2a11d8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/401f0c48d69fa1b4c9f6d366dab8e50db2a11d8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed60970c83d68b2afd60f133f6b9b92797ee6034",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJY+YHWAAoJEFevdi2zNTMiGx8QAJH8VCTFtgB8bahNySHMF4H1\nzkHe2jkdYBAgV/BjPRpPBD8183wg++OOE+DrSPOAS6hopmKciEHf83asiT3eJ2hY\nZ41IviE2a9IRJGcn4vIICuQ12U6hcjs/vAn0onl2JrKdgco45Dm06LQ4Dvjf/KXj\nh2tvB2V6YsoTJTH6kgtAlm7XeJnO47D4RrJIZeFac5qbwIXWe+pyaGRugHW8Y+uq\nP1IUNgu0Z8HikHlF7pIvY4J5MdLXoiR08c+oFgdqvZeoAmTQpkRDwGUVpAIeqo7R\nondaL3qwJ826Y6sDCrVtf8qURCEyUrDFOIGdEfIA9QSenMyu8e4cHwCVz2potPWE\neTbdiDiSQ/jOLwlH060Q2n/2V/5cRBsg06hYzXwhl10KiCivNsJ8QYqMuQ+/oQ5n\n3nE3nGA2J1MC6v1kzgQstAX4PmtclS2EXYsfUDZcDj+L0fVkcULH/HAFlFD6nvTq\nTUbDROlYsELAdvQCbuAm4YqVatXp+WudNG6V+gt6fwmnpHt/zw1P4dmaS/Rvx3nM\nu2IxWQzgLDUXvn/wB0+iARFnbZKwZPSaIc6E/AZTLNYCU1u0eedv3tghqf/MEDpf\n2YnTLH4nXwOpxnVzE++rPize3JLOdRb1PtMap919TMOq3IOB8Ks4EnfY8vXXgh0A\nVEcu4YbN+eSJ9Sy3G7rY\n=T+8C\n-----END PGP SIGNATURE-----",
        "payload": "tree 401f0c48d69fa1b4c9f6d366dab8e50db2a11d8f\nparent a86255b11633fccceffee66e5b79e5954330f3f9\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1492502014 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1492746710 +0900\n\n[test] Test abortrescan command.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed60970c83d68b2afd60f133f6b9b92797ee6034",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed60970c83d68b2afd60f133f6b9b92797ee6034",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed60970c83d68b2afd60f133f6b9b92797ee6034/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a86255b11633fccceffee66e5b79e5954330f3f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a86255b11633fccceffee66e5b79e5954330f3f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a86255b11633fccceffee66e5b79e5954330f3f9"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 67,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ffe45bbb1df6009cf7cdcf98ca5324770b960f00",
        "filename": "test/functional/import-abort-rescan.py",
        "status": "added",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed60970c83d68b2afd60f133f6b9b92797ee6034/test/functional/import-abort-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed60970c83d68b2afd60f133f6b9b92797ee6034/test/functional/import-abort-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-abort-rescan.py?ref=ed60970c83d68b2afd60f133f6b9b92797ee6034",
        "patch": "@@ -0,0 +1,66 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet import RPCs.\n+\n+Test rescan behavior of importprivkey when aborted. The test ensures that:\n+1. The abortrescan command indeed stops the rescan process.\n+2. Subsequent rescan catches the aborted address UTXO\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (assert_equal, get_rpc_proxy)\n+from decimal import Decimal\n+import threading # for bg importprivkey\n+import time      # for sleep\n+\n+class ImportAbortRescanTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        # Generate for BTC\n+        assert_equal(self.nodes[0].getbalance(), 0)\n+        assert_equal(self.nodes[1].getbalance(), 0)\n+        self.nodes[0].generate(300)\n+        assert_equal(self.nodes[1].getbalance(), 0)\n+        # Make blocks with spam to cause rescan delay\n+        for i in range(5):\n+            for j in range(5):\n+                self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 0.1)\n+            self.nodes[0].generate(10)\n+        addr = self.nodes[0].getnewaddress()\n+        privkey = self.nodes[0].dumpprivkey(addr)\n+        self.nodes[0].sendtoaddress(addr, 0.123)\n+        self.nodes[0].generate(10) # mature tx\n+        self.sync_all()\n+\n+        # Import this address in the background ...\n+        node1ref = get_rpc_proxy(self.nodes[1].url, 1, timeout=600)\n+        importthread = threading.Thread(target=node1ref.importprivkey, args=[privkey])\n+        importthread.start()\n+        # ... then abort rescan; try a bunch until abortres becomes true,\n+        # because we will start checking before above thread starts processing\n+        for i in range(2000):\n+            time.sleep(0.001)\n+            abortres = self.nodes[1].abortrescan()\n+            if abortres: break\n+        assert abortres # if false, we failed to abort\n+        # import should die soon\n+        for i in range(10):\n+            time.sleep(0.1)\n+            deadres = not importthread.isAlive()\n+            if deadres: break\n+\n+        assert deadres # if false, importthread did not die soon enough\n+        assert_equal(self.nodes[1].getbalance(), 0.0)\n+\n+        # Import a different address and let it run\n+        self.nodes[1].importprivkey(self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress()))\n+        # Expect original privkey to now also be discovered and added to balance\n+        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.123\"))\n+\n+if __name__ == \"__main__\":\n+    ImportAbortRescanTest().main()"
      },
      {
        "sha": "45a795f064e10a8e1043071b4294f06836eab873",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed60970c83d68b2afd60f133f6b9b92797ee6034/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed60970c83d68b2afd60f133f6b9b92797ee6034/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=ed60970c83d68b2afd60f133f6b9b92797ee6034",
        "patch": "@@ -108,6 +108,7 @@\n     'rpcnamedargs.py',\n     'listsinceblock.py',\n     'p2p-leaktests.py',\n+    'import-abort-rescan.py',\n ]\n \n ZMQ_SCRIPTS = ["
      }
    ]
  }
]