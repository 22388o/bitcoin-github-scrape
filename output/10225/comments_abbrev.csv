jonasschnelli,2017-04-18T08:17:20Z,"Concept ACK.\nNice way with the ref node & threading.",https://github.com/bitcoin/bitcoin/pull/10225#issuecomment-294724868,294724868,
jnewbery,2017-04-18T16:43:40Z,"Thanks for opening this PR to cover abortrescan. Definitely worth doing.\n\nI don't like the change you've made to `start_node()`. Adding an optional parameter to a function called `start_node()` which causes the function to *not* start a node is really an abuse of the function.\n\nI'd much prefer us to move toward having an encapsulated class for a test node, where we could have multiple rpc ",https://github.com/bitcoin/bitcoin/pull/10225#issuecomment-294905696,294905696,
kallewoof,2017-04-19T00:35:30Z,"@jnewbery \n\n> I don't like the change you've made to start_node(). Adding an optional parameter to a function called start_node() which causes the function to not start a node is really an abuse of the function.\n\nYeah, I was wondering if I should have reversed it (i.e. ref_node takes a launch bool and start_node just proxies).\n\nAs for encapsulate with multiple rpc connections, that sou",https://github.com/bitcoin/bitcoin/pull/10225#issuecomment-295025925,295025925,
kallewoof,2017-04-19T02:20:20Z,"#10082 seems like a big project (I'd love to help btw), so I am proposing a solution until that is resolved here. `start_node` now calls `ref_node` which now has an optional `spawnproc` flag. This means `start_node` always starts a node, and `ref_node` can do both, depending on the flag.\n\nUnsquashed history: [1](https://github.com/kallewoof/bitcoin/commit/4dc2c402392cb516c32a7c06720a657a02a755",https://github.com/bitcoin/bitcoin/pull/10225#issuecomment-295043362,295043362,
jnewbery,2017-04-19T21:05:30Z,"@kallewoof thanks for being so accepting of my feedback! I don't like NACKing PRs, but I really want to try to not put any additional complexity in util.py if we can help it.\n\nHave you had a look at getblocktemplate_longpoll.py ? That's doing something similar to this test where an additional asynchronous RPC thread is required. I've tried to rewrite your testcase in the same style here: https",https://github.com/bitcoin/bitcoin/pull/10225#issuecomment-295442292,295442292,
kallewoof,2017-04-20T01:44:22Z,"@jnewbery not a worry at all -- you don't have to hold back the punches with me. I am learning a lot from the feedback I get from you guys. :)\n\nGotcha on the no-touching-util.py. I will look at getblocktemplate_longpoll and see if I can adapt. Worst case I have two options: I can drop this PR until #10082 or I can put the ref_node code into the test itself with a # TODO and we simply rip it ou",https://github.com/bitcoin/bitcoin/pull/10225#issuecomment-295536808,295536808,
kallewoof,2017-04-20T02:16:11Z,"@jnewbery Wow, the solution in getblocktemplate_longpoll.py was so much cleaner. I switched to that and dropped some commits. I also upped the range to hopefully address the intermittent fails you experienced. Edit: beginning to suspect problem is in fact in the abortres aborting too early. Added small sleep ([7''⊱2](https://github.com/kallewoof/bitcoin/commit/f2d65693c6d291267a2e9eb78025de58343de",https://github.com/bitcoin/bitcoin/pull/10225#issuecomment-295548347,295548347,
jnewbery,2017-04-20T13:52:29Z,"Looks better, but the test is still failing more often than not for me. I ran the test 20 times (with 4 tests running in parallel):\n\n```\nTEST                                 | STATUS    | DURATION\n\nimport-abort-rescan.py --portseed=1  | ✓ Passed  | 11 s\nimport-abort-rescan.py --portseed=10 | ✖ Failed  | 11 s\nimport-abort-rescan.py --portseed=11 | ✖ Failed  | 11 s\nimport-abort-resca",https://github.com/bitcoin/bitcoin/pull/10225#issuecomment-295745691,295745691,
kallewoof,2017-04-21T00:30:09Z,"@jnewbery Is there an easy way to run the test like that? E.g. 20 times 4 in parallel?\n\nEdit: tests keep succeeding for me on a MacBook Pro. Running them on a linux machine (lubuntu) resulted in sporadic failures. Looking into it now.\n\nEdit: there are two cases where the test will fail; one is when the abortres loop sleeps right over the importprivkey time-to-finish (for `0.01`), and one, ",https://github.com/bitcoin/bitcoin/pull/10225#issuecomment-295985752,295985752,
kallewoof,2017-04-23T23:31:17Z,"~~Still seeing intermittent failures. Marking this WIP until this is fully resolved.~~\n\nEdit: Actually, the failures I were seeing were related to a debug line that triggered #10265 so I am removing the WIP part.",https://github.com/bitcoin/bitcoin/pull/10225#issuecomment-296496911,296496911,
jnewbery,2017-04-25T14:55:34Z,"> Is there an easy way to run the test like that? E.g. 20 times 4 in parallel?\n\nYou can do this by changing the `BASE_SCRIPTS` list in test_runner.py to be the same test multiple times. test_runner will automatically remove duplicates, but if you add `--portseed=x` to the test name, then it will run them as separate tests. The dummy portseed parameter is overridden by an actual portseed furthe",https://github.com/bitcoin/bitcoin/pull/10225#issuecomment-297056880,297056880,
jnewbery,2017-05-02T19:10:43Z,"This test is still failing intermittently for me in two different ways:\n\n```\n2017-05-02 18:51:29.922000 TestFramework (ERROR): Assertion failed\nTraceback (most recent call last):\n  File ""/home/ubuntu/bitcoin/test/functional/test_framework/test_framework.py"", line 146, in main\n    self.run_test()\n  File ""./import-abort-rescan.py"", line 50, in run_test\n    assert abortres # if false,",https://github.com/bitcoin/bitcoin/pull/10225#issuecomment-298731843,298731843,
laanwj,2017-05-03T13:51:06Z,"> @laanwj - was this merged accidentally? \n\nI think so, sorry @kallewoof, needs a new PR now.",https://github.com/bitcoin/bitcoin/pull/10225#issuecomment-298916684,298916684,
jnewbery,2017-05-03T13:53:04Z,"@kallewoof - this has been backed out by #10327 . Please open a new PR so this test can be reviewed before being merged back in. A few suggestions for making this less flakey:\n\n- increase the number of generated blocks by at least an order of magnitude. Run the test many times on a fast machine, with bitcoind's datadir in /dev/shm. I think this passes on Travis because bitcoind runs slowly so ",https://github.com/bitcoin/bitcoin/pull/10225#issuecomment-298917266,298917266,
kallewoof,2017-05-04T12:13:49Z,No problem - I will do proper testing and make a new PR once done. Sorry for the trouble!,https://github.com/bitcoin/bitcoin/pull/10225#issuecomment-299167849,299167849,
jonasschnelli,2017-04-18T08:16:18Z,"I think we should remove the time hint, otherwise this will become ""the standard"" and, with that, the ""keep-it-updated"" problem will follow.",https://github.com/bitcoin/bitcoin/pull/10225#discussion_r111894262,111894262,test/functional/test_runner.py
kallewoof,2017-04-18T08:20:33Z,"Hm, yeah, you're right. Removing.",https://github.com/bitcoin/bitcoin/pull/10225#discussion_r111895074,111895074,test/functional/test_runner.py
