[
  {
    "sha": "638441928a446726ce3a7fb20433a5478e7585bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Mzg0NDE5MjhhNDQ2NzI2Y2UzYTdmYjIwNDMzYTU0NzhlNzU4NWJi",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-08-23T00:08:45Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-08-23T00:27:09Z"
      },
      "message": "test: add parameterized constructor for msg_sendcmpct()",
      "tree": {
        "sha": "66c3d4c6cffe743fd880d6de2b3fda6be7d6c947",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66c3d4c6cffe743fd880d6de2b3fda6be7d6c947"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/638441928a446726ce3a7fb20433a5478e7585bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/638441928a446726ce3a7fb20433a5478e7585bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/638441928a446726ce3a7fb20433a5478e7585bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/638441928a446726ce3a7fb20433a5478e7585bb/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "197450f80868fe752c6107955e5da80704212b34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/197450f80868fe752c6107955e5da80704212b34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/197450f80868fe752c6107955e5da80704212b34"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 10,
      "deletions": 27
    },
    "files": [
      {
        "sha": "36ce1966945ad3b0c5e7a7b422de17a70fc9095f",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 7,
        "deletions": 24,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/638441928a446726ce3a7fb20433a5478e7585bb/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/638441928a446726ce3a7fb20433a5478e7585bb/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=638441928a446726ce3a7fb20433a5478e7585bb",
        "patch": "@@ -188,28 +188,21 @@ def check_announcement_of_new_block(node, peer, predicate):\n         test_node.request_headers_and_sync(locator=[tip])\n \n         # Now try a SENDCMPCT message with too-high version\n-        sendcmpct = msg_sendcmpct()\n-        sendcmpct.version = preferred_version + 1\n-        sendcmpct.announce = True\n-        test_node.send_and_ping(sendcmpct)\n+        test_node.send_and_ping(msg_sendcmpct(announce=True, version=preferred_version+1))\n         check_announcement_of_new_block(node, test_node, lambda p: \"cmpctblock\" not in p.last_message)\n \n         # Headers sync before next test.\n         test_node.request_headers_and_sync(locator=[tip])\n \n         # Now try a SENDCMPCT message with valid version, but announce=False\n-        sendcmpct.version = preferred_version\n-        sendcmpct.announce = False\n-        test_node.send_and_ping(sendcmpct)\n+        test_node.send_and_ping(msg_sendcmpct(announce=False, version=preferred_version))\n         check_announcement_of_new_block(node, test_node, lambda p: \"cmpctblock\" not in p.last_message)\n \n         # Headers sync before next test.\n         test_node.request_headers_and_sync(locator=[tip])\n \n         # Finally, try a SENDCMPCT message with announce=True\n-        sendcmpct.version = preferred_version\n-        sendcmpct.announce = True\n-        test_node.send_and_ping(sendcmpct)\n+        test_node.send_and_ping(msg_sendcmpct(announce=True, version=preferred_version))\n         check_announcement_of_new_block(node, test_node, lambda p: \"cmpctblock\" in p.last_message)\n \n         # Try one more time (no headers sync should be needed!)\n@@ -220,23 +213,17 @@ def check_announcement_of_new_block(node, peer, predicate):\n         check_announcement_of_new_block(node, test_node, lambda p: \"cmpctblock\" in p.last_message)\n \n         # Try one more time, after sending a version-1, announce=false message.\n-        sendcmpct.version = preferred_version - 1\n-        sendcmpct.announce = False\n-        test_node.send_and_ping(sendcmpct)\n+        test_node.send_and_ping(msg_sendcmpct(announce=False, version=preferred_version-1))\n         check_announcement_of_new_block(node, test_node, lambda p: \"cmpctblock\" in p.last_message)\n \n         # Now turn off announcements\n-        sendcmpct.version = preferred_version\n-        sendcmpct.announce = False\n-        test_node.send_and_ping(sendcmpct)\n+        test_node.send_and_ping(msg_sendcmpct(announce=False, version=preferred_version))\n         check_announcement_of_new_block(node, test_node, lambda p: \"cmpctblock\" not in p.last_message and \"headers\" in p.last_message)\n \n         if old_node is not None:\n             # Verify that a peer using an older protocol version can receive\n             # announcements from this node.\n-            sendcmpct.version = preferred_version - 1\n-            sendcmpct.announce = True\n-            old_node.send_and_ping(sendcmpct)\n+            old_node.send_and_ping(msg_sendcmpct(announce=True, version=preferred_version-1))\n             # Header sync\n             old_node.request_headers_and_sync(locator=[tip])\n             check_announcement_of_new_block(node, old_node, lambda p: \"cmpctblock\" in p.last_message)\n@@ -729,11 +716,7 @@ def request_cb_announcements(self, peer):\n         node = self.nodes[0]\n         tip = node.getbestblockhash()\n         peer.get_headers(locator=[int(tip, 16)], hashstop=0)\n-\n-        msg = msg_sendcmpct()\n-        msg.version = peer.cmpct_version\n-        msg.announce = True\n-        peer.send_and_ping(msg)\n+        peer.send_and_ping(msg_sendcmpct(announce=True, version=peer.cmpct_version))\n \n     def test_compactblock_reconstruction_multiple_peers(self, stalling_peer, delivery_peer):\n         node = self.nodes[0]"
      },
      {
        "sha": "d897ecf4bb300c28926d052f625beb209ad6ac4d",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/638441928a446726ce3a7fb20433a5478e7585bb/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/638441928a446726ce3a7fb20433a5478e7585bb/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=638441928a446726ce3a7fb20433a5478e7585bb",
        "patch": "@@ -1461,9 +1461,9 @@ class msg_sendcmpct:\n     __slots__ = (\"announce\", \"version\")\n     msgtype = b\"sendcmpct\"\n \n-    def __init__(self):\n-        self.announce = False\n-        self.version = 1\n+    def __init__(self, announce=False, version=1):\n+        self.announce = announce\n+        self.version = version\n \n     def deserialize(self, f):\n         self.announce = struct.unpack(\"<?\", f.read(1))[0]"
      }
    ]
  }
]