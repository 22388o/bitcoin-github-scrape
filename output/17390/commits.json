[
  {
    "sha": "286f197704e82045c762d332aba5d1ac52e0212d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODZmMTk3NzA0ZTgyMDQ1Yzc2MmQzMzJhYmE1ZDFhYzUyZTAyMTJk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-05T23:41:49Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-05T23:41:49Z"
      },
      "message": "Add util_ArgParsing test\n\nArgsManager test coverage for parsing of integer and boolean values is\ncurrently very poor and doesn't give us a way of knowing whether changes to\nArgsManager may unintentionally break backwards compatibility, so this adds a\nnew test to catch regressions.",
      "tree": {
        "sha": "e96ac07356eca4d53bec32d29aa231cd05057db6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e96ac07356eca4d53bec32d29aa231cd05057db6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/286f197704e82045c762d332aba5d1ac52e0212d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/286f197704e82045c762d332aba5d1ac52e0212d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/286f197704e82045c762d332aba5d1ac52e0212d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/286f197704e82045c762d332aba5d1ac52e0212d/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e204dc11b562c2cf31d320774a4dcbe49f3b6468",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e204dc11b562c2cf31d320774a4dcbe49f3b6468",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e204dc11b562c2cf31d320774a4dcbe49f3b6468"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 54,
      "deletions": 0
    },
    "files": [
      {
        "sha": "143315ecaa7671604d478bfd1e2655eb13cc0a05",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/286f197704e82045c762d332aba5d1ac52e0212d/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/286f197704e82045c762d332aba5d1ac52e0212d/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=286f197704e82045c762d332aba5d1ac52e0212d",
        "patch": "@@ -231,6 +231,60 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99998), expected_int);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    // Some of these cases could be ambiguous or surprising to users, and might\n+    // be worth triggering errors or warnings in the future. But for now basic\n+    // test coverage is useful to avoid breaking backwards compatibility\n+    // unintentionally.\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0 5\", false, 0);\n+    TestParse(\"5 0\", true, 5);\n+    TestParse(\"050\", true, 50);\n+    TestParse(\"0.\", false, 0);\n+    TestParse(\"5.\", true, 5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);\n+    TestParse(\"0x5\", false, 0);\n+    TestParse(\"false\", false, 0);\n+    TestParse(\"true\", false, 0);\n+    TestParse(\"yes\", false, 0);\n+    TestParse(\"no\", false, 0);\n+}\n+\n BOOST_AUTO_TEST_CASE(util_GetBoolArg)\n {\n     TestArgsManager testArgs;"
      }
    ]
  }
]