[
  {
    "sha": "09502452bbbe21bb974f1de8cf53196373921ab9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTUwMjQ1MmJiYmUyMWJiOTc0ZjFkZThjZjUzMTk2MzczOTIxYWI5",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-11-27T15:56:04Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2020-01-03T22:20:46Z"
      },
      "message": "IsUsedDestination should count any known single-key address",
      "tree": {
        "sha": "04158fc82f0681682f28feded28957fd9f7f8994",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04158fc82f0681682f28feded28957fd9f7f8994"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/09502452bbbe21bb974f1de8cf53196373921ab9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09502452bbbe21bb974f1de8cf53196373921ab9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/09502452bbbe21bb974f1de8cf53196373921ab9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09502452bbbe21bb974f1de8cf53196373921ab9/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8a66626d63135fd245d5afc524b88b9a94d208b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8a66626d63135fd245d5afc524b88b9a94d208b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8a66626d63135fd245d5afc524b88b9a94d208b"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 47,
      "deletions": 15
    },
    "files": [
      {
        "sha": "a1d460317449b86d8e433b5f568b6dcba678ac9e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09502452bbbe21bb974f1de8cf53196373921ab9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09502452bbbe21bb974f1de8cf53196373921ab9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=09502452bbbe21bb974f1de8cf53196373921ab9",
        "patch": "@@ -2927,7 +2927,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n         CTxDestination address;\n         const CScript& scriptPubKey = out.tx->tx->vout[out.i].scriptPubKey;\n         bool fValidAddress = ExtractDestination(scriptPubKey, address);\n-        bool reused = avoid_reuse && pwallet->IsUsedDestination(address);\n+        bool reused = avoid_reuse && pwallet->IsUsedDestination(out.tx->GetHash(), out.i);\n \n         if (destinations.size() && (!fValidAddress || !destinations.count(address)))\n             continue;"
      },
      {
        "sha": "ac167d108af0edfbba547589570c0f0b0538fd90",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 7,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09502452bbbe21bb974f1de8cf53196373921ab9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09502452bbbe21bb974f1de8cf53196373921ab9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=09502452bbbe21bb974f1de8cf53196373921ab9",
        "patch": "@@ -719,17 +719,33 @@ void CWallet::SetUsedDestinationState(WalletBatch& batch, const uint256& hash, u\n     }\n }\n \n-bool CWallet::IsUsedDestination(const CTxDestination& dst) const\n-{\n-    LOCK(cs_wallet);\n-    return IsMine(dst) && GetDestData(dst, \"used\", nullptr);\n-}\n-\n bool CWallet::IsUsedDestination(const uint256& hash, unsigned int n) const\n {\n+    AssertLockHeld(cs_wallet);\n     CTxDestination dst;\n     const CWalletTx* srctx = GetWalletTx(hash);\n-    return srctx && ExtractDestination(srctx->tx->vout[n].scriptPubKey, dst) && IsUsedDestination(dst);\n+    if (srctx) {\n+        assert(srctx->tx->vout.size() > n);\n+        LegacyScriptPubKeyMan* spk_man = GetLegacyScriptPubKeyMan();\n+        // When descriptor wallets arrive, these additional checks are\n+        // likely superfluous and can be optimized out\n+        assert(spk_man != nullptr);\n+        for (const auto& keyid : GetAffectedKeys(srctx->tx->vout[n].scriptPubKey, *spk_man)) {\n+            WitnessV0KeyHash wpkh_dest(keyid);\n+            if (GetDestData(wpkh_dest, \"used\", nullptr)) {\n+                return true;\n+            }\n+            ScriptHash sh_wpkh_dest(wpkh_dest);\n+            if (GetDestData(sh_wpkh_dest, \"used\", nullptr)) {\n+                return true;\n+            }\n+            PKHash pkh_dest(keyid);\n+            if (GetDestData(pkh_dest, \"used\", nullptr)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n }\n \n bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)"
      },
      {
        "sha": "4a4b28e699bf1fe55ef5b9e6a83975e463b4ba71",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09502452bbbe21bb974f1de8cf53196373921ab9/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09502452bbbe21bb974f1de8cf53196373921ab9/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=09502452bbbe21bb974f1de8cf53196373921ab9",
        "patch": "@@ -810,9 +810,8 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     bool IsSpent(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    // Whether this or any UTXO with the same CTxDestination has been spent.\n-    bool IsUsedDestination(const CTxDestination& dst) const;\n-    bool IsUsedDestination(const uint256& hash, unsigned int n) const;\n+    // Whether this or any known UTXO with the same single key has been spent.\n+    bool IsUsedDestination(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void SetUsedDestinationState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const;"
      },
      {
        "sha": "1bde849fa32b4eabbffc33bae0511f3fcd431916",
        "filename": "test/functional/wallet_avoidreuse.py",
        "status": "modified",
        "additions": 21,
        "deletions": 4,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09502452bbbe21bb974f1de8cf53196373921ab9/test/functional/wallet_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09502452bbbe21bb974f1de8cf53196373921ab9/test/functional/wallet_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_avoidreuse.py?ref=09502452bbbe21bb974f1de8cf53196373921ab9",
        "patch": "@@ -86,7 +86,12 @@ def run_test(self):\n         reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n         self.test_fund_send_fund_senddirty()\n         reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n-        self.test_fund_send_fund_send()\n+        self.test_fund_send_fund_send(\"legacy\")\n+        reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n+        self.test_fund_send_fund_send(\"p2sh-segwit\")\n+        reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n+        self.test_fund_send_fund_send(\"bech32\")\n+\n \n     def test_persistence(self):\n         '''Test that wallet files persist the avoid_reuse flag.'''\n@@ -182,7 +187,7 @@ def test_fund_send_fund_senddirty(self):\n         assert_approx(self.nodes[1].getbalance(), 5, 0.001)\n         assert_approx(self.nodes[1].getbalance(avoid_reuse=False), 5, 0.001)\n \n-    def test_fund_send_fund_send(self):\n+    def test_fund_send_fund_send(self, second_addr_type):\n         '''\n         Test the simple case where [1] generates a new address A, then\n         [0] sends 10 BTC to A.\n@@ -193,7 +198,7 @@ def test_fund_send_fund_send(self):\n         '''\n         self.log.info(\"Test fund send fund send\")\n \n-        fundaddr = self.nodes[1].getnewaddress()\n+        fundaddr = self.nodes[1].getnewaddress(label=\"\", address_type=\"legacy\")\n         retaddr = self.nodes[0].getnewaddress()\n \n         self.nodes[0].sendtoaddress(fundaddr, 10)\n@@ -214,7 +219,19 @@ def test_fund_send_fund_send(self):\n         # getbalances should show no used, 5 btc trusted\n         assert_balances(self.nodes[1], mine={\"used\": 0, \"trusted\": 5})\n \n-        self.nodes[0].sendtoaddress(fundaddr, 10)\n+        # For the second send, we transmute it to a related single-key address\n+        # to make sure it's also detected as re-use\n+        fund_spk = self.nodes[0].getaddressinfo(fundaddr)[\"scriptPubKey\"]\n+        fund_decoded = self.nodes[0].decodescript(fund_spk)\n+        if second_addr_type == \"p2sh-segwit\":\n+            new_fundaddr = fund_decoded[\"segwit\"][\"p2sh-segwit\"]\n+        elif second_addr_type == \"bech32\":\n+            new_fundaddr = fund_decoded[\"segwit\"][\"addresses\"][0]\n+        else:\n+            new_fundaddr = fundaddr\n+            assert_equal(second_addr_type, \"legacy\")\n+\n+        self.nodes[0].sendtoaddress(new_fundaddr, 10)\n         self.nodes[0].generate(1)\n         self.sync_all()\n "
      }
    ]
  }
]