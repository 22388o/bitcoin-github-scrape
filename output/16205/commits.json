[
  {
    "sha": "fa72a64b90dc07a80b1ca6127eb50d8244dedc3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTcyYTY0YjkwZGMwN2E4MGIxY2E2MTI3ZWI1MGQ4MjQ0ZGVkYzNi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-13T13:04:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-13T13:30:40Z"
      },
      "message": "tinyformat: Add doc to Bitcoin Core specific strprintf",
      "tree": {
        "sha": "6b4e025d76c383976fd41df4be7d318320c80747",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b4e025d76c383976fd41df4be7d318320c80747"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa72a64b90dc07a80b1ca6127eb50d8244dedc3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi8Igv9H10dQSqd1mjaQapGhif7ovyuUhTnUVCjC1tOX4qlbrPQSIOhvjedrGVD\npouxf7fnOBUstmM5l51XMwUVrNwN/T8LHjo5YhN4y0zMayzvnU0jFWnqYBhGN516\ncUqZBGxmh5E2rs2mFOnV4kfkrT5HuEODQbJ//cY7jl9EXagOfZRNxydbGRf7AA1/\nsOshwQyOWBw/VJWBbprP3sfLuXkYa5Ex1mekcUFklPQGpox0KYrSCEARGlGz7PLt\nJpL2SudGCfziqw7w3Zo3r7kY1nYabxzmK31XASkUV6rbJKSQCU1uDxMf8aFGBu3k\nIYK7NNMTHOYkKuAfDBZOmXYfcOtXNczVXixem4fesvzTLTbteN1HycES/X4TmvVV\n4xQRsdB4nSfiBod/tP11snQ9OHC8oeKPfZ3z1yGihy/eo3eKItPSM0lM7Lefrx1w\nwapv6kYlwA+PpTRT+a44HOzyYMvxWZdgT2ZDj/PItSKwkyR/7Rtw+ivn33Bykbzd\n3Luh9Wqh\n=PbtO\n-----END PGP SIGNATURE-----",
        "payload": "tree 6b4e025d76c383976fd41df4be7d318320c80747\nparent f792395d13aa99ce51887db14e4f77a746d910e3\nauthor MarcoFalke <falke.marco@gmail.com> 1560431083 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1560432640 -0400\n\ntinyformat: Add doc to Bitcoin Core specific strprintf\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa72a64b90dc07a80b1ca6127eb50d8244dedc3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa72a64b90dc07a80b1ca6127eb50d8244dedc3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa72a64b90dc07a80b1ca6127eb50d8244dedc3b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f792395d13aa99ce51887db14e4f77a746d910e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f792395d13aa99ce51887db14e4f77a746d910e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f792395d13aa99ce51887db14e4f77a746d910e3"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "182f518a0b526015ce01f59a4d9d5267a7e7c336",
        "filename": "src/tinyformat.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa72a64b90dc07a80b1ca6127eb50d8244dedc3b/src/tinyformat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa72a64b90dc07a80b1ca6127eb50d8244dedc3b/src/tinyformat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/tinyformat.h?ref=fa72a64b90dc07a80b1ca6127eb50d8244dedc3b",
        "patch": "@@ -1063,6 +1063,7 @@ std::string format(const std::string &fmt, const Args&... args)\n \n } // namespace tinyformat\n \n+/** Format arguments and return the string or write to given std::ostream (see tinyformat::format doc for details) */\n #define strprintf tfm::format\n \n #endif // TINYFORMAT_H_INCLUDED"
      }
    ]
  },
  {
    "sha": "fac03ec43a15ad547161e37e53ea82482cc508f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWMwM2VjNDNhMTVhZDU0NzE2MWUzN2U1M2VhODI0ODJjYzUwOGY5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-13T13:16:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-13T14:32:52Z"
      },
      "message": "scripted-diff: Replace fprintf with tfm::format\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e 's/fprintf\\(std(err|out), /tfm::format(std::c\\1, /g' $(git grep -l 'fprintf(' -- ':(exclude)src/crypto' ':(exclude)src/leveldb' ':(exclude)src/univalue' ':(exclude)src/secp256k1')\n-END VERIFY SCRIPT-\n\nfixup! scripted-diff: Replace fprintf with tfm::format",
      "tree": {
        "sha": "42668094848186068573744f78daa4072314257f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42668094848186068573744f78daa4072314257f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fac03ec43a15ad547161e37e53ea82482cc508f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg4Vwv+KYW/0B5aDKCBBhtqGf2m7aRD5ez0DN+g1qzeRUM+DOX/d7Jda3i7xhdh\nT/Gn8YzjpsP5fZipOyPWul92qZvf222e/2R0nT7mJDNbCEZSnanKmTNSuSxVqzbI\nylRISvS3MXwE9mmvRw+ZZFqtOyTqwNOKDW64rBTqSbAJ7eH5P5ej9AcORRehZeOe\nj5GrlNMUiMGKQZ2RH28ePhE9vGOvzRopZ2+RED7pOQXkRsHXu1O8Rd4tpQLLfo+9\n92yW6tFNT9voYolW77x6DaVYCXrccMn9Dnp3D5C2iUncYTrBISxCujHMZe0ifawl\nRal35TQC8SZFpeQUuHqHYXTEeAUFc+Gyho/2saLFAIdz6lqT0UXUGfTP21MUfOCv\nqTZAavUDvmkswbDAC7FhZDj4vhk4tPnLvz9Nu1hksC2qOejPYieLMYfM56IPwwAc\nkf2FFoC1vokslZHCqs9MNwxwqQg/GTLEcWl9/Sp2N7nYhduETALPQDH46dzo8SLH\nbqTmFo68\n=HVe7\n-----END PGP SIGNATURE-----",
        "payload": "tree 42668094848186068573744f78daa4072314257f\nparent fa72a64b90dc07a80b1ca6127eb50d8244dedc3b\nauthor MarcoFalke <falke.marco@gmail.com> 1560431770 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1560436372 -0400\n\nscripted-diff: Replace fprintf with tfm::format\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e 's/fprintf\\(std(err|out), /tfm::format(std::c\\1, /g' $(git grep -l 'fprintf(' -- ':(exclude)src/crypto' ':(exclude)src/leveldb' ':(exclude)src/univalue' ':(exclude)src/secp256k1')\n-END VERIFY SCRIPT-\n\nfixup! scripted-diff: Replace fprintf with tfm::format\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac03ec43a15ad547161e37e53ea82482cc508f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fac03ec43a15ad547161e37e53ea82482cc508f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac03ec43a15ad547161e37e53ea82482cc508f9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa72a64b90dc07a80b1ca6127eb50d8244dedc3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa72a64b90dc07a80b1ca6127eb50d8244dedc3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa72a64b90dc07a80b1ca6127eb50d8244dedc3b"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 57,
      "deletions": 57
    },
    "files": [
      {
        "sha": "8eea96d9300468332a4fadf65141220ea18c7fd4",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac03ec43a15ad547161e37e53ea82482cc508f9/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac03ec43a15ad547161e37e53ea82482cc508f9/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=fac03ec43a15ad547161e37e53ea82482cc508f9",
        "patch": "@@ -36,7 +36,7 @@ int main(int argc, char** argv)\n     SetupBenchArgs();\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n-        fprintf(stderr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n         return EXIT_FAILURE;\n     }\n \n@@ -53,7 +53,7 @@ int main(int argc, char** argv)\n \n     double scaling_factor;\n     if (!ParseDouble(scaling_str, &scaling_factor)) {\n-        fprintf(stderr, \"Error parsing scaling factor as double: %s\\n\", scaling_str.c_str());\n+        tfm::format(std::cerr, \"Error parsing scaling factor as double: %s\\n\", scaling_str.c_str());\n         return EXIT_FAILURE;\n     }\n "
      },
      {
        "sha": "5abaa16958ff2c2222874f3649d273f996a41bcc",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac03ec43a15ad547161e37e53ea82482cc508f9/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac03ec43a15ad547161e37e53ea82482cc508f9/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=fac03ec43a15ad547161e37e53ea82482cc508f9",
        "patch": "@@ -101,7 +101,7 @@ static int AppInitRPC(int argc, char* argv[])\n     SetupCliArgs();\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n-        fprintf(stderr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n         return EXIT_FAILURE;\n     }\n     if (argc < 2 || HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n@@ -115,26 +115,26 @@ static int AppInitRPC(int argc, char* argv[])\n             strUsage += \"\\n\" + gArgs.GetHelpMessage();\n         }\n \n-        fprintf(stdout, \"%s\", strUsage.c_str());\n+        tfm::format(std::cout, \"%s\", strUsage.c_str());\n         if (argc < 2) {\n-            fprintf(stderr, \"Error: too few parameters\\n\");\n+            tfm::format(std::cerr, \"Error: too few parameters\\n\");\n             return EXIT_FAILURE;\n         }\n         return EXIT_SUCCESS;\n     }\n     if (!fs::is_directory(GetDataDir(false))) {\n-        fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n+        tfm::format(std::cerr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n         return EXIT_FAILURE;\n     }\n     if (!gArgs.ReadConfigFiles(error, true)) {\n-        fprintf(stderr, \"Error reading configuration file: %s\\n\", error.c_str());\n+        tfm::format(std::cerr, \"Error reading configuration file: %s\\n\", error.c_str());\n         return EXIT_FAILURE;\n     }\n     // Check for -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n     try {\n         SelectBaseParams(gArgs.GetChainName());\n     } catch (const std::exception& e) {\n-        fprintf(stderr, \"Error: %s\\n\", e.what());\n+        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n         return EXIT_FAILURE;\n     }\n     return CONTINUE_EXECUTION;\n@@ -508,7 +508,7 @@ int main(int argc, char* argv[])\n #endif\n     SetupEnvironment();\n     if (!SetupNetworking()) {\n-        fprintf(stderr, \"Error: Initializing networking failed\\n\");\n+        tfm::format(std::cerr, \"Error: Initializing networking failed\\n\");\n         return EXIT_FAILURE;\n     }\n     event_set_log_callback(&libevent_log_cb);"
      },
      {
        "sha": "b0a57712d879ed8708467a30bc127b083f386376",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac03ec43a15ad547161e37e53ea82482cc508f9/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac03ec43a15ad547161e37e53ea82482cc508f9/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=fac03ec43a15ad547161e37e53ea82482cc508f9",
        "patch": "@@ -82,15 +82,15 @@ static int AppInitRawTx(int argc, char* argv[])\n     SetupBitcoinTxArgs();\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n-        fprintf(stderr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n         return EXIT_FAILURE;\n     }\n \n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n     try {\n         SelectParams(gArgs.GetChainName());\n     } catch (const std::exception& e) {\n-        fprintf(stderr, \"Error: %s\\n\", e.what());\n+        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n         return EXIT_FAILURE;\n     }\n \n@@ -104,10 +104,10 @@ static int AppInitRawTx(int argc, char* argv[])\n             \"\\n\";\n         strUsage += gArgs.GetHelpMessage();\n \n-        fprintf(stdout, \"%s\", strUsage.c_str());\n+        tfm::format(std::cout, \"%s\", strUsage.c_str());\n \n         if (argc < 2) {\n-            fprintf(stderr, \"Error: too few parameters\\n\");\n+            tfm::format(std::cerr, \"Error: too few parameters\\n\");\n             return EXIT_FAILURE;\n         }\n         return EXIT_SUCCESS;\n@@ -723,21 +723,21 @@ static void OutputTxJSON(const CTransaction& tx)\n     TxToUniv(tx, uint256(), entry);\n \n     std::string jsonOutput = entry.write(4);\n-    fprintf(stdout, \"%s\\n\", jsonOutput.c_str());\n+    tfm::format(std::cout, \"%s\\n\", jsonOutput.c_str());\n }\n \n static void OutputTxHash(const CTransaction& tx)\n {\n     std::string strHexHash = tx.GetHash().GetHex(); // the hex-encoded transaction hash (aka the transaction id)\n \n-    fprintf(stdout, \"%s\\n\", strHexHash.c_str());\n+    tfm::format(std::cout, \"%s\\n\", strHexHash.c_str());\n }\n \n static void OutputTxHex(const CTransaction& tx)\n {\n     std::string strHex = EncodeHexTx(tx);\n \n-    fprintf(stdout, \"%s\\n\", strHex.c_str());\n+    tfm::format(std::cout, \"%s\\n\", strHex.c_str());\n }\n \n static void OutputTx(const CTransaction& tx)"
      },
      {
        "sha": "cbb4ea750cb27951dded314d0770c5e675a5fe01",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac03ec43a15ad547161e37e53ea82482cc508f9/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac03ec43a15ad547161e37e53ea82482cc508f9/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=fac03ec43a15ad547161e37e53ea82482cc508f9",
        "patch": "@@ -36,7 +36,7 @@ static bool WalletAppInit(int argc, char* argv[])\n     SetupWalletToolArgs();\n     std::string error_message;\n     if (!gArgs.ParseParameters(argc, argv, error_message)) {\n-        fprintf(stderr, \"Error parsing command line arguments: %s\\n\", error_message.c_str());\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error_message.c_str());\n         return false;\n     }\n     if (argc < 2 || HelpRequested(gArgs)) {\n@@ -48,15 +48,15 @@ static bool WalletAppInit(int argc, char* argv[])\n                                      \"  bitcoin-wallet [options] <command>\\n\\n\" +\n                                      gArgs.GetHelpMessage();\n \n-        fprintf(stdout, \"%s\", usage.c_str());\n+        tfm::format(std::cout, \"%s\", usage.c_str());\n         return false;\n     }\n \n     // check for printtoconsole, allow -debug\n     LogInstance().m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", gArgs.GetBoolArg(\"-debug\", false));\n \n     if (!fs::is_directory(GetDataDir(false))) {\n-        fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n+        tfm::format(std::cerr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n         return false;\n     }\n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n@@ -87,21 +87,21 @@ int main(int argc, char* argv[])\n     for(int i = 1; i < argc; ++i) {\n         if (!IsSwitchChar(argv[i][0])) {\n             if (!method.empty()) {\n-                fprintf(stderr, \"Error: two methods provided (%s and %s). Only one method should be provided.\\n\", method.c_str(), argv[i]);\n+                tfm::format(std::cerr, \"Error: two methods provided (%s and %s). Only one method should be provided.\\n\", method.c_str(), argv[i]);\n                 return EXIT_FAILURE;\n             }\n             method = argv[i];\n         }\n     }\n \n     if (method.empty()) {\n-        fprintf(stderr, \"No method provided. Run `bitcoin-wallet -help` for valid methods.\\n\");\n+        tfm::format(std::cerr, \"No method provided. Run `bitcoin-wallet -help` for valid methods.\\n\");\n         return EXIT_FAILURE;\n     }\n \n     // A name must be provided when creating a file\n     if (method == \"create\" && !gArgs.IsArgSet(\"-wallet\")) {\n-        fprintf(stderr, \"Wallet name must be provided when creating a new wallet.\\n\");\n+        tfm::format(std::cerr, \"Wallet name must be provided when creating a new wallet.\\n\");\n         return EXIT_FAILURE;\n     }\n "
      },
      {
        "sha": "ba6de702e0d7259cfde94de25b530e58490c948f",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac03ec43a15ad547161e37e53ea82482cc508f9/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac03ec43a15ad547161e37e53ea82482cc508f9/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=fac03ec43a15ad547161e37e53ea82482cc508f9",
        "patch": "@@ -70,7 +70,7 @@ static bool AppInit(int argc, char* argv[])\n     SetupServerArgs();\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n-        fprintf(stderr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n         return false;\n     }\n \n@@ -88,33 +88,33 @@ static bool AppInit(int argc, char* argv[])\n             strUsage += \"\\n\" + gArgs.GetHelpMessage();\n         }\n \n-        fprintf(stdout, \"%s\", strUsage.c_str());\n+        tfm::format(std::cout, \"%s\", strUsage.c_str());\n         return true;\n     }\n \n     try\n     {\n         if (!fs::is_directory(GetDataDir(false)))\n         {\n-            fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n+            tfm::format(std::cerr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n             return false;\n         }\n         if (!gArgs.ReadConfigFiles(error, true)) {\n-            fprintf(stderr, \"Error reading configuration file: %s\\n\", error.c_str());\n+            tfm::format(std::cerr, \"Error reading configuration file: %s\\n\", error.c_str());\n             return false;\n         }\n         // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n         try {\n             SelectParams(gArgs.GetChainName());\n         } catch (const std::exception& e) {\n-            fprintf(stderr, \"Error: %s\\n\", e.what());\n+            tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n             return false;\n         }\n \n         // Error out when loose non-argument tokens are encountered on command line\n         for (int i = 1; i < argc; i++) {\n             if (!IsSwitchChar(argv[i][0])) {\n-                fprintf(stderr, \"Error: Command line contains unexpected token '%s', see bitcoind -h for a list of options.\\n\", argv[i]);\n+                tfm::format(std::cerr, \"Error: Command line contains unexpected token '%s', see bitcoind -h for a list of options.\\n\", argv[i]);\n                 return false;\n             }\n         }\n@@ -146,18 +146,18 @@ static bool AppInit(int argc, char* argv[])\n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n #endif\n-            fprintf(stdout, \"Bitcoin server starting\\n\");\n+            tfm::format(std::cout, \"Bitcoin server starting\\n\");\n \n             // Daemonize\n             if (daemon(1, 0)) { // don't chdir (1), do close FDs (0)\n-                fprintf(stderr, \"Error: daemon() failed: %s\\n\", strerror(errno));\n+                tfm::format(std::cerr, \"Error: daemon() failed: %s\\n\", strerror(errno));\n                 return false;\n             }\n #if defined(MAC_OSX)\n #pragma GCC diagnostic pop\n #endif\n #else\n-            fprintf(stderr, \"Error: -daemon is not supported on this operating system\\n\");\n+            tfm::format(std::cerr, \"Error: -daemon is not supported on this operating system\\n\");\n             return false;\n #endif // HAVE_DECL_DAEMON\n         }"
      },
      {
        "sha": "0c18b0e231c23cdf6737d6e9c9bef99d7e490ce4",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac03ec43a15ad547161e37e53ea82482cc508f9/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac03ec43a15ad547161e37e53ea82482cc508f9/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=fac03ec43a15ad547161e37e53ea82482cc508f9",
        "patch": "@@ -37,7 +37,7 @@ bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& ca\n \n     if (!fSecure)\n         LogPrintf(\"%s: %s\\n\", strCaption, message);\n-    fprintf(stderr, \"%s: %s\\n\", strCaption.c_str(), message.c_str());\n+    tfm::format(std::cerr, \"%s: %s\\n\", strCaption.c_str(), message.c_str());\n     return false;\n }\n "
      },
      {
        "sha": "aa810690c970ba6ecb86bca112130b1803a79c26",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac03ec43a15ad547161e37e53ea82482cc508f9/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac03ec43a15ad547161e37e53ea82482cc508f9/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=fac03ec43a15ad547161e37e53ea82482cc508f9",
        "patch": "@@ -124,7 +124,7 @@ HelpMessageDialog::~HelpMessageDialog()\n void HelpMessageDialog::printToConsole()\n {\n     // On other operating systems, the expected action is to print the message to the console.\n-    fprintf(stdout, \"%s\\n\", qPrintable(text));\n+    tfm::format(std::cout, \"%s\\n\", qPrintable(text));\n }\n \n void HelpMessageDialog::showOrPrint()"
      },
      {
        "sha": "8dfbbf08be138591301d5c27b6c7a72166841324",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac03ec43a15ad547161e37e53ea82482cc508f9/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac03ec43a15ad547161e37e53ea82482cc508f9/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=fac03ec43a15ad547161e37e53ea82482cc508f9",
        "patch": "@@ -118,7 +118,7 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n     if (g_debug_lockorder_abort) {\n-        fprintf(stderr, \"Assertion failed: detected inconsistent lock order at %s:%i, details in debug log.\\n\", __FILE__, __LINE__);\n+        tfm::format(std::cerr, \"Assertion failed: detected inconsistent lock order at %s:%i, details in debug log.\\n\", __FILE__, __LINE__);\n         abort();\n     }\n     throw std::logic_error(\"potential deadlock detected\");\n@@ -175,15 +175,15 @@ void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine,\n     for (const std::pair<void*, CLockLocation>& i : g_lockstack)\n         if (i.first == cs)\n             return;\n-    fprintf(stderr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());\n+    tfm::format(std::cerr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());\n     abort();\n }\n \n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n     for (const std::pair<void*, CLockLocation>& i : g_lockstack) {\n         if (i.first == cs) {\n-            fprintf(stderr, \"Assertion failed: lock %s held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());\n+            tfm::format(std::cerr, \"Assertion failed: lock %s held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());\n             abort();\n         }\n     }"
      },
      {
        "sha": "fca29a9f3174aa3d0825e945a28bdcb8dd8a0eb0",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac03ec43a15ad547161e37e53ea82482cc508f9/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac03ec43a15ad547161e37e53ea82482cc508f9/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=fac03ec43a15ad547161e37e53ea82482cc508f9",
        "patch": "@@ -673,7 +673,7 @@ void PrintExceptionContinue(const std::exception* pex, const char* pszThread)\n {\n     std::string message = FormatException(pex, pszThread);\n     LogPrintf(\"\\n\\n************************\\n%s\\n\", message);\n-    fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message.c_str());\n+    tfm::format(std::cerr, \"\\n\\n************************\\n%s\\n\", message.c_str());\n }\n \n fs::path GetDefaultDataDir()\n@@ -933,7 +933,7 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n                 }\n             }\n             for (const std::string& to_include : includeconf) {\n-                fprintf(stderr, \"warning: -includeconf cannot be used from included files; ignoring -includeconf=%s\\n\", to_include.c_str());\n+                tfm::format(std::cerr, \"warning: -includeconf cannot be used from included files; ignoring -includeconf=%s\\n\", to_include.c_str());\n             }\n         }\n     }"
      },
      {
        "sha": "0843194511f09fbe23a6a3a2236406a93f4f0958",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac03ec43a15ad547161e37e53ea82482cc508f9/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac03ec43a15ad547161e37e53ea82482cc508f9/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=fac03ec43a15ad547161e37e53ea82482cc508f9",
        "patch": "@@ -22,15 +22,15 @@ static void WalletToolReleaseWallet(CWallet* wallet)\n static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::path& path)\n {\n     if (fs::exists(path)) {\n-        fprintf(stderr, \"Error: File exists already\\n\");\n+        tfm::format(std::cerr, \"Error: File exists already\\n\");\n         return nullptr;\n     }\n     // dummy chain interface\n     std::shared_ptr<CWallet> wallet_instance(new CWallet(nullptr /* chain */, WalletLocation(name), WalletDatabase::Create(path)), WalletToolReleaseWallet);\n     bool first_run = true;\n     DBErrors load_wallet_ret = wallet_instance->LoadWallet(first_run);\n     if (load_wallet_ret != DBErrors::LOAD_OK) {\n-        fprintf(stderr, \"Error creating %s\", name.c_str());\n+        tfm::format(std::cerr, \"Error creating %s\", name.c_str());\n         return nullptr;\n     }\n \n@@ -40,15 +40,15 @@ static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::\n     CPubKey seed = wallet_instance->GenerateNewSeed();\n     wallet_instance->SetHDSeed(seed);\n \n-    fprintf(stdout, \"Topping up keypool...\\n\");\n+    tfm::format(std::cout, \"Topping up keypool...\\n\");\n     wallet_instance->TopUpKeyPool();\n     return wallet_instance;\n }\n \n static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::path& path)\n {\n     if (!fs::exists(path)) {\n-        fprintf(stderr, \"Error: Wallet files does not exist\\n\");\n+        tfm::format(std::cerr, \"Error: Wallet files does not exist\\n\");\n         return nullptr;\n     }\n \n@@ -59,28 +59,28 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n         bool first_run;\n         load_wallet_ret = wallet_instance->LoadWallet(first_run);\n     } catch (const std::runtime_error&) {\n-        fprintf(stderr, \"Error loading %s. Is wallet being used by another process?\\n\", name.c_str());\n+        tfm::format(std::cerr, \"Error loading %s. Is wallet being used by another process?\\n\", name.c_str());\n         return nullptr;\n     }\n \n     if (load_wallet_ret != DBErrors::LOAD_OK) {\n         wallet_instance = nullptr;\n         if (load_wallet_ret == DBErrors::CORRUPT) {\n-            fprintf(stderr, \"Error loading %s: Wallet corrupted\", name.c_str());\n+            tfm::format(std::cerr, \"Error loading %s: Wallet corrupted\", name.c_str());\n             return nullptr;\n         } else if (load_wallet_ret == DBErrors::NONCRITICAL_ERROR) {\n-            fprintf(stderr, \"Error reading %s! All keys read correctly, but transaction data\"\n+            tfm::format(std::cerr, \"Error reading %s! All keys read correctly, but transaction data\"\n                             \" or address book entries might be missing or incorrect.\",\n                 name.c_str());\n         } else if (load_wallet_ret == DBErrors::TOO_NEW) {\n-            fprintf(stderr, \"Error loading %s: Wallet requires newer version of %s\",\n+            tfm::format(std::cerr, \"Error loading %s: Wallet requires newer version of %s\",\n                 name.c_str(), PACKAGE_NAME);\n             return nullptr;\n         } else if (load_wallet_ret == DBErrors::NEED_REWRITE) {\n-            fprintf(stderr, \"Wallet needed to be rewritten: restart %s to complete\", PACKAGE_NAME);\n+            tfm::format(std::cerr, \"Wallet needed to be rewritten: restart %s to complete\", PACKAGE_NAME);\n             return nullptr;\n         } else {\n-            fprintf(stderr, \"Error loading %s\", name.c_str());\n+            tfm::format(std::cerr, \"Error loading %s\", name.c_str());\n             return nullptr;\n         }\n     }\n@@ -92,12 +92,12 @@ static void WalletShowInfo(CWallet* wallet_instance)\n {\n     LOCK(wallet_instance->cs_wallet);\n \n-    fprintf(stdout, \"Wallet info\\n===========\\n\");\n-    fprintf(stdout, \"Encrypted: %s\\n\", wallet_instance->IsCrypted() ? \"yes\" : \"no\");\n-    fprintf(stdout, \"HD (hd seed available): %s\\n\", wallet_instance->GetHDChain().seed_id.IsNull() ? \"no\" : \"yes\");\n-    fprintf(stdout, \"Keypool Size: %u\\n\", wallet_instance->GetKeyPoolSize());\n-    fprintf(stdout, \"Transactions: %zu\\n\", wallet_instance->mapWallet.size());\n-    fprintf(stdout, \"Address Book: %zu\\n\", wallet_instance->mapAddressBook.size());\n+    tfm::format(std::cout, \"Wallet info\\n===========\\n\");\n+    tfm::format(std::cout, \"Encrypted: %s\\n\", wallet_instance->IsCrypted() ? \"yes\" : \"no\");\n+    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", wallet_instance->GetHDChain().seed_id.IsNull() ? \"no\" : \"yes\");\n+    tfm::format(std::cout, \"Keypool Size: %u\\n\", wallet_instance->GetKeyPoolSize());\n+    tfm::format(std::cout, \"Transactions: %zu\\n\", wallet_instance->mapWallet.size());\n+    tfm::format(std::cout, \"Address Book: %zu\\n\", wallet_instance->mapAddressBook.size());\n }\n \n bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n@@ -112,20 +112,20 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n         }\n     } else if (command == \"info\") {\n         if (!fs::exists(path)) {\n-            fprintf(stderr, \"Error: no wallet file at %s\\n\", name.c_str());\n+            tfm::format(std::cerr, \"Error: no wallet file at %s\\n\", name.c_str());\n             return false;\n         }\n         std::string error;\n         if (!WalletBatch::VerifyEnvironment(path, error)) {\n-            fprintf(stderr, \"Error loading %s. Is wallet being used by other process?\\n\", name.c_str());\n+            tfm::format(std::cerr, \"Error loading %s. Is wallet being used by other process?\\n\", name.c_str());\n             return false;\n         }\n         std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n         if (!wallet_instance) return false;\n         WalletShowInfo(wallet_instance.get());\n         wallet_instance->Flush(true);\n     } else {\n-        fprintf(stderr, \"Invalid command: %s\\n\", command.c_str());\n+        tfm::format(std::cerr, \"Invalid command: %s\\n\", command.c_str());\n         return false;\n     }\n "
      }
    ]
  },
  {
    "sha": "fa8f195195945ce6258199af0461e3fbfbc1236d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYThmMTk1MTk1OTQ1Y2U2MjU4MTk5YWYwNDYxZTNmYmZiYzEyMzZk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-13T13:43:24Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-13T15:46:38Z"
      },
      "message": "Replace remaining fprintf with tfm::format manually",
      "tree": {
        "sha": "04586bb1d5ee6b4aa00fc13a89baf7d5a22132c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04586bb1d5ee6b4aa00fc13a89baf7d5a22132c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa8f195195945ce6258199af0461e3fbfbc1236d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjg/Av/WsI8IAxw3KqOEgiflsdD64bgStF/vAchCeif6mRimAFNZw9neISHHrUy\nxx6d7QVlrPyAWpsPdUBsI435/vc6M7u8oUp9kR/Vs2huxCRcf6KkoxLStcUTaRap\nL0mtX3ciD3UOK+GVvaZPCNCArABow9doIOughBt8eDKyAKXhU7twlh4DKP9Ttfpt\nbcZcJPka0umsqQe+++Ul+alH3g9X2Q3GxUjMmu/ZrFpTbWsUNRJcMtvCC3P2zZzj\n0m3+o1Gef4AAJ5PhPo9A3rNnwICIDJTZXBza4ijyiASBjtWEt14LLSp4XXeb51u8\nmHXUladzzlB1yvcpXXoSPMaDpe5+yJ+5VYqSZaQk7xB6Z86KDJ5GQvVnNhmoN9w9\nr7H7Msp/C3WhLvjiPKjpbnnoWb3mHmnenxeQakbVf4YApHoza0fA11xZqW7GlaYl\nLdACrrXfm2hpbZbzEANNTR10lS7QWgVygEogUXtUkajT7jiMFpx69XYBg9u/ha+o\nbTWqiEyS\n=g+OB\n-----END PGP SIGNATURE-----",
        "payload": "tree 04586bb1d5ee6b4aa00fc13a89baf7d5a22132c3\nparent fac03ec43a15ad547161e37e53ea82482cc508f9\nauthor MarcoFalke <falke.marco@gmail.com> 1560433404 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1560440798 -0400\n\nReplace remaining fprintf with tfm::format manually\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8f195195945ce6258199af0461e3fbfbc1236d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa8f195195945ce6258199af0461e3fbfbc1236d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8f195195945ce6258199af0461e3fbfbc1236d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fac03ec43a15ad547161e37e53ea82482cc508f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac03ec43a15ad547161e37e53ea82482cc508f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fac03ec43a15ad547161e37e53ea82482cc508f9"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 9,
      "deletions": 11
    },
    "files": [
      {
        "sha": "38010c461e137aa51ac4713b4fa89511023ba847",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8f195195945ce6258199af0461e3fbfbc1236d/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8f195195945ce6258199af0461e3fbfbc1236d/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=fa8f195195945ce6258199af0461e3fbfbc1236d",
        "patch": "@@ -495,7 +495,7 @@ static int CommandLineRPC(int argc, char *argv[])\n     }\n \n     if (strPrint != \"\") {\n-        fprintf((nRet == 0 ? stdout : stderr), \"%s\\n\", strPrint.c_str());\n+        tfm::format(nRet == 0 ? std::cout : std::cerr, \"%s\\n\", strPrint.c_str());\n     }\n     return nRet;\n }"
      },
      {
        "sha": "933b34744dc07299a8c575913db8523e60aa757a",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8f195195945ce6258199af0461e3fbfbc1236d/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8f195195945ce6258199af0461e3fbfbc1236d/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=fa8f195195945ce6258199af0461e3fbfbc1236d",
        "patch": "@@ -828,7 +828,7 @@ static int CommandLineRawTx(int argc, char* argv[])\n     }\n \n     if (strPrint != \"\") {\n-        fprintf((nRet == 0 ? stdout : stderr), \"%s\\n\", strPrint.c_str());\n+        tfm::format(nRet == 0 ? std::cout : std::cerr, \"%s\\n\", strPrint.c_str());\n     }\n     return nRet;\n }"
      },
      {
        "sha": "93aa6f21b55a5da55746cf9ce79b56ee23a89eee",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8f195195945ce6258199af0461e3fbfbc1236d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8f195195945ce6258199af0461e3fbfbc1236d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa8f195195945ce6258199af0461e3fbfbc1236d",
        "patch": "@@ -108,14 +108,13 @@ static fs::path GetPidFile()\n \n NODISCARD static bool CreatePidFile()\n {\n-    FILE* file = fsbridge::fopen(GetPidFile(), \"w\");\n+    fsbridge::ofstream file{GetPidFile()};\n     if (file) {\n #ifdef WIN32\n-        fprintf(file, \"%d\\n\", GetCurrentProcessId());\n+        tfm::format(file, \"%d\\n\", GetCurrentProcessId());\n #else\n-        fprintf(file, \"%d\\n\", getpid());\n+        tfm::format(file, \"%d\\n\", getpid());\n #endif\n-        fclose(file);\n         return true;\n     } else {\n         return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\"), GetPidFile().string(), std::strerror(errno)));"
      },
      {
        "sha": "20258d8e9aad650542423de2a630497a53730653",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8f195195945ce6258199af0461e3fbfbc1236d/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8f195195945ce6258199af0461e3fbfbc1236d/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=fa8f195195945ce6258199af0461e3fbfbc1236d",
        "patch": "@@ -57,7 +57,7 @@ struct CLockLocation {\n \n     std::string ToString() const\n     {\n-        return tfm::format(\n+        return strprintf(\n             \"%s %s:%s%s (in thread %s)\",\n             mutexName, sourceFile, itostr(sourceLine), (fTry ? \" (TRY)\" : \"\"), m_thread_name);\n     }"
      },
      {
        "sha": "cb630c78adeba2242aa33c6ce54edc4c662c8299",
        "filename": "test/lint/lint-format-strings.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8f195195945ce6258199af0461e3fbfbc1236d/test/lint/lint-format-strings.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8f195195945ce6258199af0461e3fbfbc1236d/test/lint/lint-format-strings.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-format-strings.sh?ref=fa8f195195945ce6258199af0461e3fbfbc1236d",
        "patch": "@@ -13,6 +13,7 @@ export LC_ALL=C\n FUNCTION_NAMES_AND_NUMBER_OF_LEADING_ARGUMENTS=(\n     \"FatalError,0\"\n     \"fprintf,1\"\n+    \"tfm::format,1\" # Assuming tfm::::format(std::ostream&, ...\n     \"LogConnectFailure,1\"\n     \"LogPrint,1\"\n     \"LogPrintf,0\""
      },
      {
        "sha": "9a1aa766f79116727692ef6c0a004960bbe75fa5",
        "filename": "test/lint/lint-locale-dependence.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8f195195945ce6258199af0461e3fbfbc1236d/test/lint/lint-locale-dependence.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8f195195945ce6258199af0461e3fbfbc1236d/test/lint/lint-locale-dependence.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-locale-dependence.sh?ref=fa8f195195945ce6258199af0461e3fbfbc1236d",
        "patch": "@@ -8,7 +8,6 @@ KNOWN_VIOLATIONS=(\n     \"src/dbwrapper.cpp:.*vsnprintf\"\n     \"src/httprpc.cpp.*trim\"\n     \"src/init.cpp:.*atoi\"\n-    \"src/init.cpp:.*fprintf\"\n     \"src/qt/rpcconsole.cpp:.*atoi\"\n     \"src/rest.cpp:.*strtol\"\n     \"src/test/dbwrapper_tests.cpp:.*snprintf\"\n@@ -85,7 +84,7 @@ LOCALE_DEPENDENT_FUNCTIONS=(\n     mbtowc       # LC_CTYPE\n     mktime\n     normalize    # boost::locale::normalize\n-#   printf       # LC_NUMERIC\n+    printf       # LC_NUMERIC\n     putwc\n     putwchar\n     scanf        # LC_NUMERIC\n@@ -189,8 +188,7 @@ GIT_GREP_OUTPUT=$(git grep -E \"[^a-zA-Z0-9_\\`'\\\"<>](${REGEXP_LOCALE_DEPENDENT_FU\n EXIT_CODE=0\n for LOCALE_DEPENDENT_FUNCTION in \"${LOCALE_DEPENDENT_FUNCTIONS[@]}\"; do\n     MATCHES=$(grep -E \"[^a-zA-Z0-9_\\`'\\\"<>]${LOCALE_DEPENDENT_FUNCTION}(_r|_s)?[^a-zA-Z0-9_\\`'\\\"<>]\" <<< \"${GIT_GREP_OUTPUT}\" | \\\n-        grep -vE \"\\.(c|cpp|h):\\s*(//|\\*|/\\*|\\\").*${LOCALE_DEPENDENT_FUNCTION}\" | \\\n-        grep -vE 'fprintf\\(.*(stdout|stderr)')\n+        grep -vE \"\\.(c|cpp|h):\\s*(//|\\*|/\\*|\\\").*${LOCALE_DEPENDENT_FUNCTION}\")\n     if [[ ${REGEXP_IGNORE_EXTERNAL_DEPENDENCIES} != \"\" ]]; then\n         MATCHES=$(grep -vE \"${REGEXP_IGNORE_EXTERNAL_DEPENDENCIES}\" <<< \"${MATCHES}\")\n     fi"
      }
    ]
  }
]