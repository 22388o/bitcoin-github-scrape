[
  {
    "sha": "31dd5b37272f162155b3dd944a6f8c2b74c7448c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWRkNWIzNzI3MmYxNjIxNTViM2RkOTQ0YTZmOGMyYjc0Yzc0NDhj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-08-02T22:25:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-08-02T22:29:42Z"
      },
      "message": "Cache signature hashes during evaluation",
      "tree": {
        "sha": "04cc5e66310ada8d36d926591b6e1e5bf9938e67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04cc5e66310ada8d36d926591b6e1e5bf9938e67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31dd5b37272f162155b3dd944a6f8c2b74c7448c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31dd5b37272f162155b3dd944a6f8c2b74c7448c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31dd5b37272f162155b3dd944a6f8c2b74c7448c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31dd5b37272f162155b3dd944a6f8c2b74c7448c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8cb5c30b0db15a1c6786d6575098a66320ffec4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8cb5c30b0db15a1c6786d6575098a66320ffec4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8cb5c30b0db15a1c6786d6575098a66320ffec4"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 33,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c159fbb60d0f34ff938dffee4094fab0111f675b",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 6,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31dd5b37272f162155b3dd944a6f8c2b74c7448c/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31dd5b37272f162155b3dd944a6f8c2b74c7448c/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=31dd5b37272f162155b3dd944a6f8c2b74c7448c",
        "patch": "@@ -33,7 +33,8 @@ static const CScriptNum bnOne(1);\n static const CScriptNum bnFalse(0);\n static const CScriptNum bnTrue(1);\n \n-bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, int flags);\n+struct SigHashCache;\n+bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, int flags, SigHashCache& cache);\n \n bool CastToBool(const valtype& vch)\n {\n@@ -300,6 +301,24 @@ bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n     return true;\n }\n \n+struct SigHashCache\n+{\n+    bool set[6];\n+    uint256 value[6];\n+\n+    void Clear()\n+    {\n+        for (int i=0; i<6; i++) {\n+            set[i] = false;\n+        }\n+    }\n+\n+    SigHashCache()\n+    {\n+        Clear();\n+    }\n+};\n+\n bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType)\n {\n     CScript::const_iterator pc = script.begin();\n@@ -312,6 +331,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n     if (script.size() > 10000)\n         return false;\n     int nOpCount = 0;\n+    SigHashCache cache;\n \n     try\n     {\n@@ -823,6 +843,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                 {\n                     // Hash starts after the code separator\n                     pbegincodehash = pc;\n+                    cache.Clear();\n                 }\n                 break;\n \n@@ -843,7 +864,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     scriptCode.FindAndDelete(CScript(vchSig));\n \n                     bool fSuccess = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                        CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType, flags);\n+                        CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType, flags, cache);\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -904,7 +925,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n \n                         // Check signature\n                         bool fOk = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                            CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType, flags);\n+                            CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType, flags, cache);\n \n                         if (fOk) {\n                             isig++;\n@@ -1151,7 +1172,7 @@ class CSignatureCache\n };\n \n bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char> &vchPubKey, const CScript &scriptCode,\n-              const CTransaction& txTo, unsigned int nIn, int nHashType, int flags)\n+              const CTransaction& txTo, unsigned int nIn, int nHashType, int flags, SigHashCache& cache)\n {\n     static CSignatureCache signatureCache;\n \n@@ -1168,7 +1189,12 @@ bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char> &vchPubK\n         return false;\n     vchSig.pop_back();\n \n-    uint256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n+    int entry = ((nHashType & 0x1F) == SIGHASH_SINGLE ? 0 : ((nHashType & 0x1F) == SIGHASH_NONE ? 1 : 2)) + ((nHashType & 0x80) ? 3 : 0);\n+    uint256& sighash = cache.value[entry];\n+    if (!cache.set[entry]) {\n+        sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n+        cache.set[entry] = true;\n+    }\n \n     if (signatureCache.Get(sighash, vchSig, pubkey))\n         return true;\n@@ -1731,6 +1757,7 @@ static CScript CombineMultisig(CScript scriptPubKey, const CMutableTransaction&\n     unsigned int nSigsRequired = vSolutions.front()[0];\n     unsigned int nPubKeys = vSolutions.size()-2;\n     map<valtype, valtype> sigs;\n+    SigHashCache cache;\n     BOOST_FOREACH(const valtype& sig, allsigs)\n     {\n         for (unsigned int i = 0; i < nPubKeys; i++)\n@@ -1739,7 +1766,7 @@ static CScript CombineMultisig(CScript scriptPubKey, const CMutableTransaction&\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (CheckSig(sig, pubkey, scriptPubKey, txTo, nIn, 0, 0))\n+            if (CheckSig(sig, pubkey, scriptPubKey, txTo, nIn, 0, 0, cache))\n             {\n                 sigs[pubkey] = sig;\n                 break;"
      }
    ]
  }
]