[
  {
    "sha": "0ca4ea7b69d09d9a029a1295361f860ccdb6c769",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2E0ZWE3YjY5ZDA5ZDlhMDI5YTEyOTUzNjFmODYwY2NkYjZjNzY5",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-12-17T17:49:19Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-12-20T13:27:36Z"
      },
      "message": "apply doxygen format to sync.h and change license",
      "tree": {
        "sha": "2fab9aad63b2ed7314550b3d16259e70ee2f9ef2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fab9aad63b2ed7314550b3d16259e70ee2f9ef2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ca4ea7b69d09d9a029a1295361f860ccdb6c769",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ca4ea7b69d09d9a029a1295361f860ccdb6c769",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ca4ea7b69d09d9a029a1295361f860ccdb6c769",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ca4ea7b69d09d9a029a1295361f860ccdb6c769/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "f914f1a746d7f91951c1da262a4a749dd3ebfa71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f914f1a746d7f91951c1da262a4a749dd3ebfa71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f914f1a746d7f91951c1da262a4a749dd3ebfa71"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 40,
      "deletions": 45
    },
    "files": [
      {
        "sha": "13933cc6925a5b45dd6e792daa54803c2a368602",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 40,
        "deletions": 45,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca4ea7b69d09d9a029a1295361f860ccdb6c769/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca4ea7b69d09d9a029a1295361f860ccdb6c769/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=0ca4ea7b69d09d9a029a1295361f860ccdb6c769",
        "patch": "@@ -13,49 +13,44 @@\n #include <boost/thread/mutex.hpp>\n #include <boost/thread/recursive_mutex.hpp>\n \n-\n-////////////////////////////////////////////////\n-//                                            //\n-// THE SIMPLE DEFINITON, EXCLUDING DEBUG CODE //\n-//                                            //\n-////////////////////////////////////////////////\n-\n-/*\n- \n- \n- \n-CCriticalSection mutex;\n-    boost::recursive_mutex mutex;\n-\n-LOCK(mutex);\n-    boost::unique_lock<boost::recursive_mutex> criticalblock(mutex);\n-\n-LOCK2(mutex1, mutex2);\n-    boost::unique_lock<boost::recursive_mutex> criticalblock1(mutex1);\n-    boost::unique_lock<boost::recursive_mutex> criticalblock2(mutex2);\n-\n-TRY_LOCK(mutex, name);\n-    boost::unique_lock<boost::recursive_mutex> name(mutex, boost::try_to_lock_t);\n-\n-ENTER_CRITICAL_SECTION(mutex); // no RAII\n-    mutex.lock();\n-\n-LEAVE_CRITICAL_SECTION(mutex); // no RAII\n-    mutex.unlock();\n- \n- \n- \n+/**\n+ * ////////////////////////////////////////////////\n+ * //                                            //\n+ * // THE SIMPLE DEFINITON, EXCLUDING DEBUG CODE //\n+ * //                                            //\n+ * ////////////////////////////////////////////////\n+ * CCriticalSection mutex;\n+ *     boost::recursive_mutex mutex;\n+ * \n+ * LOCK(mutex);\n+ *     boost::unique_lock<boost::recursive_mutex> criticalblock(mutex);\n+ * \n+ * LOCK2(mutex1, mutex2);\n+ *     boost::unique_lock<boost::recursive_mutex> criticalblock1(mutex1);\n+ *     boost::unique_lock<boost::recursive_mutex> criticalblock2(mutex2);\n+ * \n+ * TRY_LOCK(mutex, name);\n+ *     boost::unique_lock<boost::recursive_mutex> name(mutex, boost::try_to_lock_t);\n+ * \n+ * ENTER_CRITICAL_SECTION(mutex); // no RAII\n+ *     mutex.lock();\n+ * \n+ * LEAVE_CRITICAL_SECTION(mutex); // no RAII\n+ *     mutex.unlock();\n  */\n \n+/**\n+ * ///////////////////////////////\n+ * //                           //\n+ * // THE ACTUAL IMPLEMENTATION //\n+ * //                           //\n+ * ///////////////////////////////\n+ */\n \n-///////////////////////////////\n-//                           //\n-// THE ACTUAL IMPLEMENTATION //\n-//                           //\n-///////////////////////////////\n-\n-// Template mixin that adds -Wthread-safety locking annotations to a\n-// subset of the mutex API.\n+/**\n+ * Template mixin that adds -Wthread-safety locking\n+ * annotations to a subset of the mutex API.\n+ */\n template <typename PARENT>\n class LOCKABLE AnnotatedMixin : public PARENT\n {\n@@ -76,8 +71,10 @@ class LOCKABLE AnnotatedMixin : public PARENT\n     }\n };\n \n-/** Wrapped boost mutex: supports recursive locking, but no waiting  */\n-// TODO: We should move away from using the recursive lock by default.\n+/**\n+ * Wrapped boost mutex: supports recursive locking, but no waiting\n+ * TODO: We should move away from using the recursive lock by default.\n+ */\n typedef AnnotatedMixin<boost::recursive_mutex> CCriticalSection;\n \n /** Wrapped boost mutex: supports waiting but not recursive locking */\n@@ -92,9 +89,7 @@ void LeaveCritical();\n std::string LocksHeld();\n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs);\n #else\n-void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false)\n-{\n-}\n+void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}\n void static inline LeaveCritical() {}\n void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}\n #endif"
      }
    ]
  }
]