[
  {
    "sha": "8d5e5102f6f80c037b6bbc2985b778fd40c80d1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDVlNTEwMmY2ZjgwYzAzN2I2YmJjMjk4NWI3NzhmZDQwYzgwZDFj",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-08-23T01:52:54Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T00:27:03Z"
      },
      "message": "Remove unused function StackString() and class CCoins;",
      "tree": {
        "sha": "9577da55f563de890264df0ee9b1ca034747d688",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9577da55f563de890264df0ee9b1ca034747d688"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d5e5102f6f80c037b6bbc2985b778fd40c80d1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d5e5102f6f80c037b6bbc2985b778fd40c80d1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d5e5102f6f80c037b6bbc2985b778fd40c80d1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d5e5102f6f80c037b6bbc2985b778fd40c80d1c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e731f24b5a5c894e013a6d752f1cd409303e916",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e731f24b5a5c894e013a6d752f1cd409303e916",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e731f24b5a5c894e013a6d752f1cd409303e916"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 0,
      "deletions": 20
    },
    "files": [
      {
        "sha": "c1f5aa1dd528f006c0932683937a1125d7316766",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d5e5102f6f80c037b6bbc2985b778fd40c80d1c/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d5e5102f6f80c037b6bbc2985b778fd40c80d1c/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=8d5e5102f6f80c037b6bbc2985b778fd40c80d1c",
        "patch": "@@ -18,7 +18,6 @@\n #include <boost/foreach.hpp>\n #include <boost/variant.hpp>\n \n-class CCoins;\n class CKeyStore;\n class CTransaction;\n struct CMutableTransaction;\n@@ -411,25 +410,6 @@ inline std::string ValueString(const std::vector<unsigned char>& vch)\n         return HexStr(vch);\n }\n \n-inline std::string StackString(const std::vector<std::vector<unsigned char> >& vStack)\n-{\n-    std::string str;\n-    BOOST_FOREACH(const std::vector<unsigned char>& vch, vStack)\n-    {\n-        if (!str.empty())\n-            str += \" \";\n-        str += ValueString(vch);\n-    }\n-    return str;\n-}\n-\n-\n-\n-\n-\n-\n-\n-\n /** Serialized script, used inside transaction inputs and outputs */\n class CScript : public std::vector<unsigned char>\n {"
      }
    ]
  },
  {
    "sha": "53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2VmYjA5ZTRjZWFhMGNjYjRlNjI3MTM4N2Y1MDEzZmU1ZTFlYzc1",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-08-23T03:09:47Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T00:27:03Z"
      },
      "message": "Discover some missing includes",
      "tree": {
        "sha": "e1059984eca192916527bfb1627594291228e1e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1059984eca192916527bfb1627594291228e1e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d5e5102f6f80c037b6bbc2985b778fd40c80d1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d5e5102f6f80c037b6bbc2985b778fd40c80d1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d5e5102f6f80c037b6bbc2985b778fd40c80d1c"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e34041336fbf4e53039d74bc704daaecdc995158",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75",
        "patch": "@@ -10,6 +10,8 @@\n #include <math.h>\n #include <stdlib.h>\n \n+#include <boost/foreach.hpp>\n+\n #define LN2SQUARED 0.4804530139182014246671025263266649717305529515945455\n #define LN2 0.6931471805599453094172321214581765680755001343602552\n "
      },
      {
        "sha": "8dcda0126a73c9902baf8cf9003d6e7a2dbfce46",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75",
        "patch": "@@ -7,6 +7,8 @@\n \n #include \"tinyformat.h\"\n \n+#include <boost/foreach.hpp>\n+\n std::string COutPoint::ToString() const\n {\n     return strprintf(\"COutPoint(%s, %u)\", hash.ToString().substr(0,10), n);"
      },
      {
        "sha": "e66e75515c3323a19e6afd7f9b126e6f710bf7bb",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75",
        "patch": "@@ -11,6 +11,8 @@\n #include \"utilmoneystr.h\"\n #include \"base58.h\"\n \n+#include <boost/foreach.hpp>\n+\n using namespace std;\n \n string EncodeHexTx(const CTransaction& tx)"
      },
      {
        "sha": "0e5802922c4cf8ade268da69f088c28a5d80ef38",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75",
        "patch": "@@ -8,6 +8,8 @@\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n \n+#include <boost/foreach.hpp>\n+\n RecentRequestsTableModel::RecentRequestsTableModel(CWallet *wallet, WalletModel *parent) :\n     walletModel(parent)\n {"
      },
      {
        "sha": "21883bd41a40c64f65c36990f4908e4499146a5c",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75",
        "patch": "@@ -22,6 +22,8 @@\n #include <boost/tuple/tuple_comparison.hpp>\n #include <boost/tuple/tuple.hpp>\n \n+#include <boost/foreach.hpp>\n+\n using namespace std;\n using namespace boost;\n "
      },
      {
        "sha": "d17cfe3fa4574708a2eef593bef1a1b10012f0c7",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75",
        "patch": "@@ -15,7 +15,6 @@\n #include <string>\n #include <vector>\n \n-#include <boost/foreach.hpp>\n #include <boost/variant.hpp>\n \n class CKeyStore;"
      }
    ]
  },
  {
    "sha": "a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNWFjNjNkZWIzMWM1MmRjZDYxMGU4YzI2MjJjYzRlNzJmNWFhMDky",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-08-14T11:54:05Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T00:27:03Z"
      },
      "message": "Rename script.h/.cpp to scriptutils.h/.cpp (plus remove duplicated includes)",
      "tree": {
        "sha": "fb7a431a499f0ee9437bf29a1896dc879a940ac2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb7a431a499f0ee9437bf29a1896dc879a940ac2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53efb09e4ceaa0ccb4e6271387f5013fe5e1ec75"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 25,
      "deletions": 29
    },
    "files": [
      {
        "sha": "e6fc1fdbefaf45d7578668f54583b1d056419c69",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -98,7 +98,7 @@ BITCOIN_CORE_H = \\\n   rpcclient.h \\\n   rpcprotocol.h \\\n   rpcserver.h \\\n-  script.h \\\n+  scriptutils.h \\\n   serialize.h \\\n   sync.h \\\n   threadsafety.h \\\n@@ -206,7 +206,7 @@ libbitcoin_common_a_SOURCES = \\\n   keystore.cpp \\\n   netbase.cpp \\\n   protocol.cpp \\\n-  script.cpp \\\n+  scriptutils.cpp \\\n   $(BITCOIN_CORE_H)\n \n # util: shared between all executables."
      },
      {
        "sha": "a4dc7267670b0a0b43798ed3f5827fc6fb54a546",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -16,7 +16,7 @@\n \n #include \"chainparams.h\"\n #include \"key.h\"\n-#include \"script.h\"\n+#include \"scriptutils.h\"\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "07990beb15e76050f3323c7f0b189abf445226f6",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -5,7 +5,7 @@\n #include \"bloom.h\"\n \n #include \"core.h\"\n-#include \"script.h\"\n+#include \"scriptutils.h\"\n \n #include <math.h>\n #include <stdlib.h>"
      },
      {
        "sha": "62342d270232c92919008724db13bb4f00a18fce",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_CORE_H\n #define BITCOIN_CORE_H\n \n-#include \"script.h\"\n+#include \"scriptutils.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "41d8d6b492704642331d36d45d88a56562abcc47",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -5,7 +5,7 @@\n #include \"core_io.h\"\n #include \"core.h\"\n #include \"serialize.h\"\n-#include \"script.h\"\n+#include \"scriptutils.h\"\n #include \"util.h\"\n \n #include <boost/assign/list_of.hpp>"
      },
      {
        "sha": "e816611809aa4050400af5220fb3319c2f1d095c",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"core_io.h\"\n #include \"univalue/univalue.h\"\n-#include \"script.h\"\n+#include \"scriptutils.h\"\n #include \"core.h\"\n #include \"serialize.h\"\n #include \"util.h\""
      },
      {
        "sha": "ac5c8952e6383bd9dd81ad2448f77af2eff5b975",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"crypter.h\"\n \n-#include \"script.h\"\n+#include \"scriptutils.h\"\n #include \"util.h\"\n \n #include <string>"
      },
      {
        "sha": "e273bbb1de96abd682a7f1dd39f19535da0d3e08",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -7,7 +7,7 @@\n \n #include \"crypter.h\"\n #include \"key.h\"\n-#include \"script.h\"\n+#include \"scriptutils.h\"\n #include \"util.h\"\n \n #include <boost/foreach.hpp>"
      },
      {
        "sha": "0b13ef8eb0fe405e133f161a3fd290b44811e8f8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -15,7 +15,7 @@\n #include \"core.h\"\n #include \"net.h\"\n #include \"pow.h\"\n-#include \"script.h\"\n+#include \"scriptutils.h\"\n #include \"sync.h\"\n #include \"txmempool.h\"\n #include \"uint256.h\""
      },
      {
        "sha": "d1feeef17949d372a08a69966bc408cdb575b64d",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -11,7 +11,7 @@\n #include \"db.h\"\n #include \"main.h\"\n #include \"paymentserver.h\"\n-#include \"script.h\"\n+#include \"scriptutils.h\"\n #include \"transactionrecord.h\"\n #include \"timedata.h\"\n #include \"ui_interface.h\""
      },
      {
        "sha": "b858d485ea8ea8bac9d97a673557e54335c897d2",
        "filename": "src/scriptutils.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/scriptutils.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/scriptutils.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scriptutils.cpp?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"script.h\"\n+#include \"scriptutils.h\"\n \n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"",
        "previous_filename": "src/script.cpp"
      },
      {
        "sha": "44f18483c38911ae82cba2dc2b3ff3844de04dda",
        "filename": "src/scriptutils.h",
        "status": "renamed",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/scriptutils.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/scriptutils.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scriptutils.h?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -3,8 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef H_BITCOIN_SCRIPT\n-#define H_BITCOIN_SCRIPT\n+#ifndef H_BITCOIN_SCRIPTUTILS\n+#define H_BITCOIN_SCRIPTUTILS\n \n #include \"key.h\"\n #include \"utilstrencodings.h\"",
        "previous_filename": "src/script.h"
      },
      {
        "sha": "a1134258917bf374eafb2f16a7c3c45a19f20d46",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -12,7 +12,7 @@\n #include \"main.h\"\n #include \"net.h\"\n #include \"pow.h\"\n-#include \"script.h\"\n+#include \"scriptutils.h\"\n #include \"serialize.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "0587ddac849368a13bea09e3e6389c599773988e",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -9,7 +9,7 @@\n #include \"data/base58_keys_valid.json.h\"\n \n #include \"key.h\"\n-#include \"script.h\"\n+#include \"scriptutils.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "2d2a600740106f4c489735874f51891be491fb56",
        "filename": "src/test/canonical_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/canonical_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/canonical_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/canonical_tests.cpp?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -9,7 +9,7 @@\n #include \"data/sig_noncanonical.json.h\"\n #include \"data/sig_canonical.json.h\"\n #include \"random.h\"\n-#include \"script.h\"\n+#include \"scriptutils.h\"\n #include \"util.h\"\n \n #include <boost/foreach.hpp>"
      },
      {
        "sha": "c6bf0db3af3f3d9fe9f10e9cca8a61c20473f60c",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -5,7 +5,7 @@\n #include \"key.h\"\n \n #include \"base58.h\"\n-#include \"script.h\"\n+#include \"scriptutils.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "2e45a7a0229ceba9766595ff34489f757fda0b42",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -5,7 +5,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n-#include \"script.h\"\n+#include \"scriptutils.h\"\n #include \"uint256.h\"\n \n #include <boost/assign/std/vector.hpp>"
      },
      {
        "sha": "d27fc71598619b08f634c4c04b7a6899d7b01067",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -2,12 +2,10 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"script.h\"\n-\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n-#include \"script.h\"\n+#include \"scriptutils.h\"\n \n #include <vector>\n "
      },
      {
        "sha": "a8ccd5059804230c5babf6f808dc4590cb13440c",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -2,15 +2,13 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"script.h\"\n-\n #include \"data/script_invalid.json.h\"\n #include \"data/script_valid.json.h\"\n \n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n-#include \"script.h\"\n+#include \"scriptutils.h\"\n #include \"core_io.h\"\n \n #include <fstream>"
      },
      {
        "sha": "c3cd41cf84525137b731941e48c06ea566dc5933",
        "filename": "src/test/scriptnum_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/scriptnum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/scriptnum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum_tests.cpp?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"bignum.h\"\n-#include \"script.h\"\n+#include \"scriptutils.h\"\n #include <boost/test/unit_test.hpp>\n #include <limits.h>\n #include <stdint.h>"
      },
      {
        "sha": "53f4d443c4b436f71eca9011a11614ad7a4b786e",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -6,7 +6,7 @@\n #include \"main.h\"\n #include \"random.h\"\n #include \"serialize.h\"\n-#include \"script.h\"\n+#include \"scriptutils.h\"\n #include \"util.h\"\n #include \"version.h\"\n "
      },
      {
        "sha": "963ccf560d3ccbda36571817d851fb74cc001555",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"key.h\"\n-#include \"script.h\"\n+#include \"scriptutils.h\"\n #include \"uint256.h\"\n \n #include <vector>"
      },
      {
        "sha": "2b5161b0cf69c3a5ddcf949468cf6e62ffd1cbca",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "patch": "@@ -8,7 +8,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n-#include \"script.h\"\n+#include \"scriptutils.h\"\n #include \"core_io.h\"\n \n #include <map>"
      }
    ]
  },
  {
    "sha": "3bcdca6b9f64af647bad74137b6a261d731dcf3e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmNkY2E2YjlmNjRhZjY0N2JhZDc0MTM3YjZhMjYxZDczMWRjZjNl",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-08-20T15:37:40Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T00:27:04Z"
      },
      "message": "Move CScript class and dependencies to script/script",
      "tree": {
        "sha": "84352f9a1171796bd68d17a43e249765d4001a7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84352f9a1171796bd68d17a43e249765d4001a7e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bcdca6b9f64af647bad74137b6a261d731dcf3e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bcdca6b9f64af647bad74137b6a261d731dcf3e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3bcdca6b9f64af647bad74137b6a261d731dcf3e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bcdca6b9f64af647bad74137b6a261d731dcf3e/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5ac63deb31c52dcd610e8c2622cc4e72f5aa092"
      }
    ],
    "stats": {
      "total": 1891,
      "additions": 957,
      "deletions": 934
    },
    "files": [
      {
        "sha": "a9f1ceeeba896809f39e85461aa99765ebd6fb2c",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -98,6 +98,7 @@ BITCOIN_CORE_H = \\\n   rpcclient.h \\\n   rpcprotocol.h \\\n   rpcserver.h \\\n+  script/script.h \\\n   scriptutils.h \\\n   serialize.h \\\n   sync.h \\\n@@ -206,6 +207,7 @@ libbitcoin_common_a_SOURCES = \\\n   keystore.cpp \\\n   netbase.cpp \\\n   protocol.cpp \\\n+  script/script.cpp \\\n   scriptutils.cpp \\\n   $(BITCOIN_CORE_H)\n "
      },
      {
        "sha": "216aca3648599b8a11ba9d3b920531a702548968",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -16,7 +16,7 @@\n \n #include \"chainparams.h\"\n #include \"key.h\"\n-#include \"scriptutils.h\"\n+#include \"script/script.h\"\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "efcecb106ff63469b86feb61fe4b89083c0c0245",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -5,7 +5,7 @@\n #include \"core_io.h\"\n #include \"core.h\"\n #include \"serialize.h\"\n-#include \"scriptutils.h\"\n+#include \"script/script.h\"\n #include \"util.h\"\n \n #include <boost/assign/list_of.hpp>"
      },
      {
        "sha": "3df13021df162699ab493606c15309f9eb24e000",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"crypter.h\"\n \n-#include \"scriptutils.h\"\n+#include \"script/script.h\"\n #include \"util.h\"\n \n #include <string>"
      },
      {
        "sha": "98bc0e9e28b4aecaacb4132506725f1193cd614e",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -7,7 +7,7 @@\n \n #include \"crypter.h\"\n #include \"key.h\"\n-#include \"scriptutils.h\"\n+#include \"script/script.h\"\n #include \"util.h\"\n \n #include <boost/foreach.hpp>"
      },
      {
        "sha": "727b8dc66dac59ea6dfede8ec11c46863d955d3c",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -11,7 +11,7 @@\n #include \"db.h\"\n #include \"main.h\"\n #include \"paymentserver.h\"\n-#include \"scriptutils.h\"\n+#include \"script/script.h\"\n #include \"transactionrecord.h\"\n #include \"timedata.h\"\n #include \"ui_interface.h\""
      },
      {
        "sha": "60d1beac95eb29db499b954213f74e857c15c600",
        "filename": "src/script/script.cpp",
        "status": "added",
        "additions": 295,
        "deletions": 0,
        "changes": 295,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"script.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+using namespace std;\n+\n+const char* GetOpName(opcodetype opcode)\n+{\n+    switch (opcode)\n+    {\n+    // push value\n+    case OP_0                      : return \"0\";\n+    case OP_PUSHDATA1              : return \"OP_PUSHDATA1\";\n+    case OP_PUSHDATA2              : return \"OP_PUSHDATA2\";\n+    case OP_PUSHDATA4              : return \"OP_PUSHDATA4\";\n+    case OP_1NEGATE                : return \"-1\";\n+    case OP_RESERVED               : return \"OP_RESERVED\";\n+    case OP_1                      : return \"1\";\n+    case OP_2                      : return \"2\";\n+    case OP_3                      : return \"3\";\n+    case OP_4                      : return \"4\";\n+    case OP_5                      : return \"5\";\n+    case OP_6                      : return \"6\";\n+    case OP_7                      : return \"7\";\n+    case OP_8                      : return \"8\";\n+    case OP_9                      : return \"9\";\n+    case OP_10                     : return \"10\";\n+    case OP_11                     : return \"11\";\n+    case OP_12                     : return \"12\";\n+    case OP_13                     : return \"13\";\n+    case OP_14                     : return \"14\";\n+    case OP_15                     : return \"15\";\n+    case OP_16                     : return \"16\";\n+\n+    // control\n+    case OP_NOP                    : return \"OP_NOP\";\n+    case OP_VER                    : return \"OP_VER\";\n+    case OP_IF                     : return \"OP_IF\";\n+    case OP_NOTIF                  : return \"OP_NOTIF\";\n+    case OP_VERIF                  : return \"OP_VERIF\";\n+    case OP_VERNOTIF               : return \"OP_VERNOTIF\";\n+    case OP_ELSE                   : return \"OP_ELSE\";\n+    case OP_ENDIF                  : return \"OP_ENDIF\";\n+    case OP_VERIFY                 : return \"OP_VERIFY\";\n+    case OP_RETURN                 : return \"OP_RETURN\";\n+\n+    // stack ops\n+    case OP_TOALTSTACK             : return \"OP_TOALTSTACK\";\n+    case OP_FROMALTSTACK           : return \"OP_FROMALTSTACK\";\n+    case OP_2DROP                  : return \"OP_2DROP\";\n+    case OP_2DUP                   : return \"OP_2DUP\";\n+    case OP_3DUP                   : return \"OP_3DUP\";\n+    case OP_2OVER                  : return \"OP_2OVER\";\n+    case OP_2ROT                   : return \"OP_2ROT\";\n+    case OP_2SWAP                  : return \"OP_2SWAP\";\n+    case OP_IFDUP                  : return \"OP_IFDUP\";\n+    case OP_DEPTH                  : return \"OP_DEPTH\";\n+    case OP_DROP                   : return \"OP_DROP\";\n+    case OP_DUP                    : return \"OP_DUP\";\n+    case OP_NIP                    : return \"OP_NIP\";\n+    case OP_OVER                   : return \"OP_OVER\";\n+    case OP_PICK                   : return \"OP_PICK\";\n+    case OP_ROLL                   : return \"OP_ROLL\";\n+    case OP_ROT                    : return \"OP_ROT\";\n+    case OP_SWAP                   : return \"OP_SWAP\";\n+    case OP_TUCK                   : return \"OP_TUCK\";\n+\n+    // splice ops\n+    case OP_CAT                    : return \"OP_CAT\";\n+    case OP_SUBSTR                 : return \"OP_SUBSTR\";\n+    case OP_LEFT                   : return \"OP_LEFT\";\n+    case OP_RIGHT                  : return \"OP_RIGHT\";\n+    case OP_SIZE                   : return \"OP_SIZE\";\n+\n+    // bit logic\n+    case OP_INVERT                 : return \"OP_INVERT\";\n+    case OP_AND                    : return \"OP_AND\";\n+    case OP_OR                     : return \"OP_OR\";\n+    case OP_XOR                    : return \"OP_XOR\";\n+    case OP_EQUAL                  : return \"OP_EQUAL\";\n+    case OP_EQUALVERIFY            : return \"OP_EQUALVERIFY\";\n+    case OP_RESERVED1              : return \"OP_RESERVED1\";\n+    case OP_RESERVED2              : return \"OP_RESERVED2\";\n+\n+    // numeric\n+    case OP_1ADD                   : return \"OP_1ADD\";\n+    case OP_1SUB                   : return \"OP_1SUB\";\n+    case OP_2MUL                   : return \"OP_2MUL\";\n+    case OP_2DIV                   : return \"OP_2DIV\";\n+    case OP_NEGATE                 : return \"OP_NEGATE\";\n+    case OP_ABS                    : return \"OP_ABS\";\n+    case OP_NOT                    : return \"OP_NOT\";\n+    case OP_0NOTEQUAL              : return \"OP_0NOTEQUAL\";\n+    case OP_ADD                    : return \"OP_ADD\";\n+    case OP_SUB                    : return \"OP_SUB\";\n+    case OP_MUL                    : return \"OP_MUL\";\n+    case OP_DIV                    : return \"OP_DIV\";\n+    case OP_MOD                    : return \"OP_MOD\";\n+    case OP_LSHIFT                 : return \"OP_LSHIFT\";\n+    case OP_RSHIFT                 : return \"OP_RSHIFT\";\n+    case OP_BOOLAND                : return \"OP_BOOLAND\";\n+    case OP_BOOLOR                 : return \"OP_BOOLOR\";\n+    case OP_NUMEQUAL               : return \"OP_NUMEQUAL\";\n+    case OP_NUMEQUALVERIFY         : return \"OP_NUMEQUALVERIFY\";\n+    case OP_NUMNOTEQUAL            : return \"OP_NUMNOTEQUAL\";\n+    case OP_LESSTHAN               : return \"OP_LESSTHAN\";\n+    case OP_GREATERTHAN            : return \"OP_GREATERTHAN\";\n+    case OP_LESSTHANOREQUAL        : return \"OP_LESSTHANOREQUAL\";\n+    case OP_GREATERTHANOREQUAL     : return \"OP_GREATERTHANOREQUAL\";\n+    case OP_MIN                    : return \"OP_MIN\";\n+    case OP_MAX                    : return \"OP_MAX\";\n+    case OP_WITHIN                 : return \"OP_WITHIN\";\n+\n+    // crypto\n+    case OP_RIPEMD160              : return \"OP_RIPEMD160\";\n+    case OP_SHA1                   : return \"OP_SHA1\";\n+    case OP_SHA256                 : return \"OP_SHA256\";\n+    case OP_HASH160                : return \"OP_HASH160\";\n+    case OP_HASH256                : return \"OP_HASH256\";\n+    case OP_CODESEPARATOR          : return \"OP_CODESEPARATOR\";\n+    case OP_CHECKSIG               : return \"OP_CHECKSIG\";\n+    case OP_CHECKSIGVERIFY         : return \"OP_CHECKSIGVERIFY\";\n+    case OP_CHECKMULTISIG          : return \"OP_CHECKMULTISIG\";\n+    case OP_CHECKMULTISIGVERIFY    : return \"OP_CHECKMULTISIGVERIFY\";\n+\n+    // expanson\n+    case OP_NOP1                   : return \"OP_NOP1\";\n+    case OP_NOP2                   : return \"OP_NOP2\";\n+    case OP_NOP3                   : return \"OP_NOP3\";\n+    case OP_NOP4                   : return \"OP_NOP4\";\n+    case OP_NOP5                   : return \"OP_NOP5\";\n+    case OP_NOP6                   : return \"OP_NOP6\";\n+    case OP_NOP7                   : return \"OP_NOP7\";\n+    case OP_NOP8                   : return \"OP_NOP8\";\n+    case OP_NOP9                   : return \"OP_NOP9\";\n+    case OP_NOP10                  : return \"OP_NOP10\";\n+\n+    case OP_INVALIDOPCODE          : return \"OP_INVALIDOPCODE\";\n+\n+    // Note:\n+    //  The template matching params OP_SMALLDATA/etc are defined in opcodetype enum\n+    //  as kind of implementation hack, they are *NOT* real opcodes.  If found in real\n+    //  Script, just let the default: case deal with them.\n+\n+    default:\n+        return \"OP_UNKNOWN\";\n+    }\n+}\n+\n+unsigned int CScript::GetSigOpCount(bool fAccurate) const\n+{\n+    unsigned int n = 0;\n+    const_iterator pc = begin();\n+    opcodetype lastOpcode = OP_INVALIDOPCODE;\n+    while (pc < end())\n+    {\n+        opcodetype opcode;\n+        if (!GetOp(pc, opcode))\n+            break;\n+        if (opcode == OP_CHECKSIG || opcode == OP_CHECKSIGVERIFY)\n+            n++;\n+        else if (opcode == OP_CHECKMULTISIG || opcode == OP_CHECKMULTISIGVERIFY)\n+        {\n+            if (fAccurate && lastOpcode >= OP_1 && lastOpcode <= OP_16)\n+                n += DecodeOP_N(lastOpcode);\n+            else\n+                n += 20;\n+        }\n+        lastOpcode = opcode;\n+    }\n+    return n;\n+}\n+\n+unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\n+{\n+    if (!IsPayToScriptHash())\n+        return GetSigOpCount(true);\n+\n+    // This is a pay-to-script-hash scriptPubKey;\n+    // get the last item that the scriptSig\n+    // pushes onto the stack:\n+    const_iterator pc = scriptSig.begin();\n+    vector<unsigned char> data;\n+    while (pc < scriptSig.end())\n+    {\n+        opcodetype opcode;\n+        if (!scriptSig.GetOp(pc, opcode, data))\n+            return 0;\n+        if (opcode > OP_16)\n+            return 0;\n+    }\n+\n+    /// ... and return its opcount:\n+    CScript subscript(data.begin(), data.end());\n+    return subscript.GetSigOpCount(true);\n+}\n+\n+bool CScript::IsPayToScriptHash() const\n+{\n+    // Extra-fast test for pay-to-script-hash CScripts:\n+    return (this->size() == 23 &&\n+            this->at(0) == OP_HASH160 &&\n+            this->at(1) == 0x14 &&\n+            this->at(22) == OP_EQUAL);\n+}\n+\n+bool CScript::IsPushOnly() const\n+{\n+    const_iterator pc = begin();\n+    while (pc < end())\n+    {\n+        opcodetype opcode;\n+        if (!GetOp(pc, opcode))\n+            return false;\n+        // Note that IsPushOnly() *does* consider OP_RESERVED to be a\n+        // push-type opcode, however execution of OP_RESERVED fails, so\n+        // it's not relevant to P2SH as the scriptSig would fail prior to\n+        // the P2SH special validation code being executed.\n+        if (opcode > OP_16)\n+            return false;\n+    }\n+    return true;\n+}\n+\n+bool CScript::HasCanonicalPushes() const\n+{\n+    const_iterator pc = begin();\n+    while (pc < end())\n+    {\n+        opcodetype opcode;\n+        std::vector<unsigned char> data;\n+        if (!GetOp(pc, opcode, data))\n+            return false;\n+        if (opcode > OP_16)\n+            continue;\n+        if (opcode < OP_PUSHDATA1 && opcode > OP_0 && (data.size() == 1 && data[0] <= 16))\n+            // Could have used an OP_n code, rather than a 1-byte push.\n+            return false;\n+        if (opcode == OP_PUSHDATA1 && data.size() < OP_PUSHDATA1)\n+            // Could have used a normal n-byte push, rather than OP_PUSHDATA1.\n+            return false;\n+        if (opcode == OP_PUSHDATA2 && data.size() <= 0xFF)\n+            // Could have used an OP_PUSHDATA1.\n+            return false;\n+        if (opcode == OP_PUSHDATA4 && data.size() <= 0xFFFF)\n+            // Could have used an OP_PUSHDATA2.\n+            return false;\n+    }\n+    return true;\n+}\n+\n+class CScriptVisitor : public boost::static_visitor<bool>\n+{\n+private:\n+    CScript *script;\n+public:\n+    CScriptVisitor(CScript *scriptin) { script = scriptin; }\n+\n+    bool operator()(const CNoDestination &dest) const {\n+        script->clear();\n+        return false;\n+    }\n+\n+    bool operator()(const CKeyID &keyID) const {\n+        script->clear();\n+        *script << OP_DUP << OP_HASH160 << keyID << OP_EQUALVERIFY << OP_CHECKSIG;\n+        return true;\n+    }\n+\n+    bool operator()(const CScriptID &scriptID) const {\n+        script->clear();\n+        *script << OP_HASH160 << scriptID << OP_EQUAL;\n+        return true;\n+    }\n+};\n+\n+void CScript::SetDestination(const CTxDestination& dest)\n+{\n+    boost::apply_visitor(CScriptVisitor(this), dest);\n+}\n+\n+void CScript::SetMultisig(int nRequired, const std::vector<CPubKey>& keys)\n+{\n+    this->clear();\n+\n+    *this << EncodeOP_N(nRequired);\n+    BOOST_FOREACH(const CPubKey& key, keys)\n+        *this << key;\n+    *this << EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n+}"
      },
      {
        "sha": "21847c09bd8a5ffc82d1010745b4fffc7e4bf221",
        "filename": "src/script/script.h",
        "status": "added",
        "additions": 645,
        "deletions": 0,
        "changes": 645,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -0,0 +1,645 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef H_BITCOIN_SCRIPT\n+#define H_BITCOIN_SCRIPT\n+\n+#include \"key.h\"\n+#include \"tinyformat.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <stdexcept>\n+\n+#include <boost/variant.hpp>\n+\n+static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n+\n+/** Script opcodes */\n+enum opcodetype\n+{\n+    // push value\n+    OP_0 = 0x00,\n+    OP_FALSE = OP_0,\n+    OP_PUSHDATA1 = 0x4c,\n+    OP_PUSHDATA2 = 0x4d,\n+    OP_PUSHDATA4 = 0x4e,\n+    OP_1NEGATE = 0x4f,\n+    OP_RESERVED = 0x50,\n+    OP_1 = 0x51,\n+    OP_TRUE=OP_1,\n+    OP_2 = 0x52,\n+    OP_3 = 0x53,\n+    OP_4 = 0x54,\n+    OP_5 = 0x55,\n+    OP_6 = 0x56,\n+    OP_7 = 0x57,\n+    OP_8 = 0x58,\n+    OP_9 = 0x59,\n+    OP_10 = 0x5a,\n+    OP_11 = 0x5b,\n+    OP_12 = 0x5c,\n+    OP_13 = 0x5d,\n+    OP_14 = 0x5e,\n+    OP_15 = 0x5f,\n+    OP_16 = 0x60,\n+\n+    // control\n+    OP_NOP = 0x61,\n+    OP_VER = 0x62,\n+    OP_IF = 0x63,\n+    OP_NOTIF = 0x64,\n+    OP_VERIF = 0x65,\n+    OP_VERNOTIF = 0x66,\n+    OP_ELSE = 0x67,\n+    OP_ENDIF = 0x68,\n+    OP_VERIFY = 0x69,\n+    OP_RETURN = 0x6a,\n+\n+    // stack ops\n+    OP_TOALTSTACK = 0x6b,\n+    OP_FROMALTSTACK = 0x6c,\n+    OP_2DROP = 0x6d,\n+    OP_2DUP = 0x6e,\n+    OP_3DUP = 0x6f,\n+    OP_2OVER = 0x70,\n+    OP_2ROT = 0x71,\n+    OP_2SWAP = 0x72,\n+    OP_IFDUP = 0x73,\n+    OP_DEPTH = 0x74,\n+    OP_DROP = 0x75,\n+    OP_DUP = 0x76,\n+    OP_NIP = 0x77,\n+    OP_OVER = 0x78,\n+    OP_PICK = 0x79,\n+    OP_ROLL = 0x7a,\n+    OP_ROT = 0x7b,\n+    OP_SWAP = 0x7c,\n+    OP_TUCK = 0x7d,\n+\n+    // splice ops\n+    OP_CAT = 0x7e,\n+    OP_SUBSTR = 0x7f,\n+    OP_LEFT = 0x80,\n+    OP_RIGHT = 0x81,\n+    OP_SIZE = 0x82,\n+\n+    // bit logic\n+    OP_INVERT = 0x83,\n+    OP_AND = 0x84,\n+    OP_OR = 0x85,\n+    OP_XOR = 0x86,\n+    OP_EQUAL = 0x87,\n+    OP_EQUALVERIFY = 0x88,\n+    OP_RESERVED1 = 0x89,\n+    OP_RESERVED2 = 0x8a,\n+\n+    // numeric\n+    OP_1ADD = 0x8b,\n+    OP_1SUB = 0x8c,\n+    OP_2MUL = 0x8d,\n+    OP_2DIV = 0x8e,\n+    OP_NEGATE = 0x8f,\n+    OP_ABS = 0x90,\n+    OP_NOT = 0x91,\n+    OP_0NOTEQUAL = 0x92,\n+\n+    OP_ADD = 0x93,\n+    OP_SUB = 0x94,\n+    OP_MUL = 0x95,\n+    OP_DIV = 0x96,\n+    OP_MOD = 0x97,\n+    OP_LSHIFT = 0x98,\n+    OP_RSHIFT = 0x99,\n+\n+    OP_BOOLAND = 0x9a,\n+    OP_BOOLOR = 0x9b,\n+    OP_NUMEQUAL = 0x9c,\n+    OP_NUMEQUALVERIFY = 0x9d,\n+    OP_NUMNOTEQUAL = 0x9e,\n+    OP_LESSTHAN = 0x9f,\n+    OP_GREATERTHAN = 0xa0,\n+    OP_LESSTHANOREQUAL = 0xa1,\n+    OP_GREATERTHANOREQUAL = 0xa2,\n+    OP_MIN = 0xa3,\n+    OP_MAX = 0xa4,\n+\n+    OP_WITHIN = 0xa5,\n+\n+    // crypto\n+    OP_RIPEMD160 = 0xa6,\n+    OP_SHA1 = 0xa7,\n+    OP_SHA256 = 0xa8,\n+    OP_HASH160 = 0xa9,\n+    OP_HASH256 = 0xaa,\n+    OP_CODESEPARATOR = 0xab,\n+    OP_CHECKSIG = 0xac,\n+    OP_CHECKSIGVERIFY = 0xad,\n+    OP_CHECKMULTISIG = 0xae,\n+    OP_CHECKMULTISIGVERIFY = 0xaf,\n+\n+    // expansion\n+    OP_NOP1 = 0xb0,\n+    OP_NOP2 = 0xb1,\n+    OP_NOP3 = 0xb2,\n+    OP_NOP4 = 0xb3,\n+    OP_NOP5 = 0xb4,\n+    OP_NOP6 = 0xb5,\n+    OP_NOP7 = 0xb6,\n+    OP_NOP8 = 0xb7,\n+    OP_NOP9 = 0xb8,\n+    OP_NOP10 = 0xb9,\n+\n+\n+    // template matching params\n+    OP_SMALLDATA = 0xf9,\n+    OP_SMALLINTEGER = 0xfa,\n+    OP_PUBKEYS = 0xfb,\n+    OP_PUBKEYHASH = 0xfd,\n+    OP_PUBKEY = 0xfe,\n+\n+    OP_INVALIDOPCODE = 0xff,\n+};\n+\n+const char* GetOpName(opcodetype opcode);\n+\n+class scriptnum_error : public std::runtime_error\n+{\n+public:\n+    explicit scriptnum_error(const std::string& str) : std::runtime_error(str) {}\n+};\n+\n+class CScriptNum\n+{\n+// Numeric opcodes (OP_1ADD, etc) are restricted to operating on 4-byte integers.\n+// The semantics are subtle, though: operands must be in the range [-2^31 +1...2^31 -1],\n+// but results may overflow (and are valid as long as they are not used in a subsequent\n+// numeric operation). CScriptNum enforces those semantics by storing results as\n+// an int64 and allowing out-of-range values to be returned as a vector of bytes but\n+// throwing an exception if arithmetic is done or the result is interpreted as an integer.\n+public:\n+\n+    explicit CScriptNum(const int64_t& n)\n+    {\n+        m_value = n;\n+    }\n+\n+    explicit CScriptNum(const std::vector<unsigned char>& vch)\n+    {\n+        if (vch.size() > nMaxNumSize)\n+            throw scriptnum_error(\"CScriptNum(const std::vector<unsigned char>&) : overflow\");\n+        m_value = set_vch(vch);\n+    }\n+\n+    inline bool operator==(const int64_t& rhs) const    { return m_value == rhs; }\n+    inline bool operator!=(const int64_t& rhs) const    { return m_value != rhs; }\n+    inline bool operator<=(const int64_t& rhs) const    { return m_value <= rhs; }\n+    inline bool operator< (const int64_t& rhs) const    { return m_value <  rhs; }\n+    inline bool operator>=(const int64_t& rhs) const    { return m_value >= rhs; }\n+    inline bool operator> (const int64_t& rhs) const    { return m_value >  rhs; }\n+\n+    inline bool operator==(const CScriptNum& rhs) const { return operator==(rhs.m_value); }\n+    inline bool operator!=(const CScriptNum& rhs) const { return operator!=(rhs.m_value); }\n+    inline bool operator<=(const CScriptNum& rhs) const { return operator<=(rhs.m_value); }\n+    inline bool operator< (const CScriptNum& rhs) const { return operator< (rhs.m_value); }\n+    inline bool operator>=(const CScriptNum& rhs) const { return operator>=(rhs.m_value); }\n+    inline bool operator> (const CScriptNum& rhs) const { return operator> (rhs.m_value); }\n+\n+    inline CScriptNum operator+(   const int64_t& rhs)    const { return CScriptNum(m_value + rhs);}\n+    inline CScriptNum operator-(   const int64_t& rhs)    const { return CScriptNum(m_value - rhs);}\n+    inline CScriptNum operator+(   const CScriptNum& rhs) const { return operator+(rhs.m_value);   }\n+    inline CScriptNum operator-(   const CScriptNum& rhs) const { return operator-(rhs.m_value);   }\n+\n+    inline CScriptNum& operator+=( const CScriptNum& rhs)       { return operator+=(rhs.m_value);  }\n+    inline CScriptNum& operator-=( const CScriptNum& rhs)       { return operator-=(rhs.m_value);  }\n+\n+    inline CScriptNum operator-()                         const\n+    {\n+        assert(m_value != std::numeric_limits<int64_t>::min());\n+        return CScriptNum(-m_value);\n+    }\n+\n+    inline CScriptNum& operator=( const int64_t& rhs)\n+    {\n+        m_value = rhs;\n+        return *this;\n+    }\n+\n+    inline CScriptNum& operator+=( const int64_t& rhs)\n+    {\n+        assert(rhs == 0 || (rhs > 0 && m_value <= std::numeric_limits<int64_t>::max() - rhs) ||\n+                           (rhs < 0 && m_value >= std::numeric_limits<int64_t>::min() - rhs));\n+        m_value += rhs;\n+        return *this;\n+    }\n+\n+    inline CScriptNum& operator-=( const int64_t& rhs)\n+    {\n+        assert(rhs == 0 || (rhs > 0 && m_value >= std::numeric_limits<int64_t>::min() + rhs) ||\n+                           (rhs < 0 && m_value <= std::numeric_limits<int64_t>::max() + rhs));\n+        m_value -= rhs;\n+        return *this;\n+    }\n+\n+    int getint() const\n+    {\n+        if (m_value > std::numeric_limits<int>::max())\n+            return std::numeric_limits<int>::max();\n+        else if (m_value < std::numeric_limits<int>::min())\n+            return std::numeric_limits<int>::min();\n+        return m_value;\n+    }\n+\n+    std::vector<unsigned char> getvch() const\n+    {\n+        return serialize(m_value);\n+    }\n+\n+    static std::vector<unsigned char> serialize(const int64_t& value)\n+    {\n+        if(value == 0)\n+            return std::vector<unsigned char>();\n+\n+        std::vector<unsigned char> result;\n+        const bool neg = value < 0;\n+        uint64_t absvalue = neg ? -value : value;\n+\n+        while(absvalue)\n+        {\n+            result.push_back(absvalue & 0xff);\n+            absvalue >>= 8;\n+        }\n+\n+//    - If the most significant byte is >= 0x80 and the value is positive, push a\n+//    new zero-byte to make the significant byte < 0x80 again.\n+\n+//    - If the most significant byte is >= 0x80 and the value is negative, push a\n+//    new 0x80 byte that will be popped off when converting to an integral.\n+\n+//    - If the most significant byte is < 0x80 and the value is negative, add\n+//    0x80 to it, since it will be subtracted and interpreted as a negative when\n+//    converting to an integral.\n+\n+        if (result.back() & 0x80)\n+            result.push_back(neg ? 0x80 : 0);\n+        else if (neg)\n+            result.back() |= 0x80;\n+\n+        return result;\n+    }\n+\n+    static const size_t nMaxNumSize = 4;\n+\n+private:\n+    static int64_t set_vch(const std::vector<unsigned char>& vch)\n+    {\n+      if (vch.empty())\n+          return 0;\n+\n+      int64_t result = 0;\n+      for (size_t i = 0; i != vch.size(); ++i)\n+          result |= static_cast<int64_t>(vch[i]) << 8*i;\n+\n+      // If the input vector's most significant byte is 0x80, remove it from\n+      // the result's msb and return a negative.\n+      if (vch.back() & 0x80)\n+          return -(result & ~(0x80ULL << (8 * (vch.size() - 1))));\n+\n+      return result;\n+    }\n+\n+    int64_t m_value;\n+};\n+\n+inline std::string ValueString(const std::vector<unsigned char>& vch)\n+{\n+    if (vch.size() <= 4)\n+        return strprintf(\"%d\", CScriptNum(vch).getint());\n+    else\n+        return HexStr(vch);\n+}\n+\n+class CNoDestination {\n+public:\n+    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }\n+    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n+};\n+\n+/** A txout script template with a specific destination. It is either:\n+ *  * CNoDestination: no destination set\n+ *  * CKeyID: TX_PUBKEYHASH destination\n+ *  * CScriptID: TX_SCRIPTHASH destination\n+ *  A CTxDestination is the internal data type encoded in a CBitcoinAddress\n+ */\n+typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n+\n+/** Serialized script, used inside transaction inputs and outputs */\n+class CScript : public std::vector<unsigned char>\n+{\n+protected:\n+    CScript& push_int64(int64_t n)\n+    {\n+        if (n == -1 || (n >= 1 && n <= 16))\n+        {\n+            push_back(n + (OP_1 - 1));\n+        }\n+        else\n+        {\n+            *this << CScriptNum::serialize(n);\n+        }\n+        return *this;\n+    }\n+public:\n+    CScript() { }\n+    CScript(const CScript& b) : std::vector<unsigned char>(b.begin(), b.end()) { }\n+    CScript(const_iterator pbegin, const_iterator pend) : std::vector<unsigned char>(pbegin, pend) { }\n+#ifndef _MSC_VER\n+    CScript(const unsigned char* pbegin, const unsigned char* pend) : std::vector<unsigned char>(pbegin, pend) { }\n+#endif\n+\n+    CScript& operator+=(const CScript& b)\n+    {\n+        insert(end(), b.begin(), b.end());\n+        return *this;\n+    }\n+\n+    friend CScript operator+(const CScript& a, const CScript& b)\n+    {\n+        CScript ret = a;\n+        ret += b;\n+        return ret;\n+    }\n+\n+    CScript(int64_t b)        { operator<<(b); }\n+\n+    explicit CScript(opcodetype b)     { operator<<(b); }\n+    explicit CScript(const uint256& b) { operator<<(b); }\n+    explicit CScript(const CScriptNum& b) { operator<<(b); }\n+    explicit CScript(const std::vector<unsigned char>& b) { operator<<(b); }\n+\n+\n+    CScript& operator<<(int64_t b) { return push_int64(b); }\n+\n+    CScript& operator<<(opcodetype opcode)\n+    {\n+        if (opcode < 0 || opcode > 0xff)\n+            throw std::runtime_error(\"CScript::operator<<() : invalid opcode\");\n+        insert(end(), (unsigned char)opcode);\n+        return *this;\n+    }\n+\n+    CScript& operator<<(const uint160& b)\n+    {\n+        insert(end(), sizeof(b));\n+        insert(end(), (unsigned char*)&b, (unsigned char*)&b + sizeof(b));\n+        return *this;\n+    }\n+\n+    CScript& operator<<(const uint256& b)\n+    {\n+        insert(end(), sizeof(b));\n+        insert(end(), (unsigned char*)&b, (unsigned char*)&b + sizeof(b));\n+        return *this;\n+    }\n+\n+    CScript& operator<<(const CPubKey& key)\n+    {\n+        assert(key.size() < OP_PUSHDATA1);\n+        insert(end(), (unsigned char)key.size());\n+        insert(end(), key.begin(), key.end());\n+        return *this;\n+    }\n+\n+    CScript& operator<<(const CScriptNum& b)\n+    {\n+        *this << b.getvch();\n+        return *this;\n+    }\n+\n+    CScript& operator<<(const std::vector<unsigned char>& b)\n+    {\n+        if (b.size() < OP_PUSHDATA1)\n+        {\n+            insert(end(), (unsigned char)b.size());\n+        }\n+        else if (b.size() <= 0xff)\n+        {\n+            insert(end(), OP_PUSHDATA1);\n+            insert(end(), (unsigned char)b.size());\n+        }\n+        else if (b.size() <= 0xffff)\n+        {\n+            insert(end(), OP_PUSHDATA2);\n+            unsigned short nSize = b.size();\n+            insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n+        }\n+        else\n+        {\n+            insert(end(), OP_PUSHDATA4);\n+            unsigned int nSize = b.size();\n+            insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n+        }\n+        insert(end(), b.begin(), b.end());\n+        return *this;\n+    }\n+\n+    CScript& operator<<(const CScript& b)\n+    {\n+        // I'm not sure if this should push the script or concatenate scripts.\n+        // If there's ever a use for pushing a script onto a script, delete this member fn\n+        assert(!\"Warning: Pushing a CScript onto a CScript with << is probably not intended, use + to concatenate!\");\n+        return *this;\n+    }\n+\n+\n+    bool GetOp(iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet)\n+    {\n+         // Wrapper so it can be called with either iterator or const_iterator\n+         const_iterator pc2 = pc;\n+         bool fRet = GetOp2(pc2, opcodeRet, &vchRet);\n+         pc = begin() + (pc2 - begin());\n+         return fRet;\n+    }\n+\n+    bool GetOp(iterator& pc, opcodetype& opcodeRet)\n+    {\n+         const_iterator pc2 = pc;\n+         bool fRet = GetOp2(pc2, opcodeRet, NULL);\n+         pc = begin() + (pc2 - begin());\n+         return fRet;\n+    }\n+\n+    bool GetOp(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet) const\n+    {\n+        return GetOp2(pc, opcodeRet, &vchRet);\n+    }\n+\n+    bool GetOp(const_iterator& pc, opcodetype& opcodeRet) const\n+    {\n+        return GetOp2(pc, opcodeRet, NULL);\n+    }\n+\n+    bool GetOp2(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet) const\n+    {\n+        opcodeRet = OP_INVALIDOPCODE;\n+        if (pvchRet)\n+            pvchRet->clear();\n+        if (pc >= end())\n+            return false;\n+\n+        // Read instruction\n+        if (end() - pc < 1)\n+            return false;\n+        unsigned int opcode = *pc++;\n+\n+        // Immediate operand\n+        if (opcode <= OP_PUSHDATA4)\n+        {\n+            unsigned int nSize = 0;\n+            if (opcode < OP_PUSHDATA1)\n+            {\n+                nSize = opcode;\n+            }\n+            else if (opcode == OP_PUSHDATA1)\n+            {\n+                if (end() - pc < 1)\n+                    return false;\n+                nSize = *pc++;\n+            }\n+            else if (opcode == OP_PUSHDATA2)\n+            {\n+                if (end() - pc < 2)\n+                    return false;\n+                nSize = 0;\n+                memcpy(&nSize, &pc[0], 2);\n+                pc += 2;\n+            }\n+            else if (opcode == OP_PUSHDATA4)\n+            {\n+                if (end() - pc < 4)\n+                    return false;\n+                memcpy(&nSize, &pc[0], 4);\n+                pc += 4;\n+            }\n+            if (end() - pc < 0 || (unsigned int)(end() - pc) < nSize)\n+                return false;\n+            if (pvchRet)\n+                pvchRet->assign(pc, pc + nSize);\n+            pc += nSize;\n+        }\n+\n+        opcodeRet = (opcodetype)opcode;\n+        return true;\n+    }\n+\n+    // Encode/decode small integers:\n+    static int DecodeOP_N(opcodetype opcode)\n+    {\n+        if (opcode == OP_0)\n+            return 0;\n+        assert(opcode >= OP_1 && opcode <= OP_16);\n+        return (int)opcode - (int)(OP_1 - 1);\n+    }\n+    static opcodetype EncodeOP_N(int n)\n+    {\n+        assert(n >= 0 && n <= 16);\n+        if (n == 0)\n+            return OP_0;\n+        return (opcodetype)(OP_1+n-1);\n+    }\n+\n+    int FindAndDelete(const CScript& b)\n+    {\n+        int nFound = 0;\n+        if (b.empty())\n+            return nFound;\n+        iterator pc = begin();\n+        opcodetype opcode;\n+        do\n+        {\n+            while (end() - pc >= (long)b.size() && memcmp(&pc[0], &b[0], b.size()) == 0)\n+            {\n+                erase(pc, pc + b.size());\n+                ++nFound;\n+            }\n+        }\n+        while (GetOp(pc, opcode));\n+        return nFound;\n+    }\n+    int Find(opcodetype op) const\n+    {\n+        int nFound = 0;\n+        opcodetype opcode;\n+        for (const_iterator pc = begin(); pc != end() && GetOp(pc, opcode);)\n+            if (opcode == op)\n+                ++nFound;\n+        return nFound;\n+    }\n+\n+    // Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\n+    // as 20 sigops. With pay-to-script-hash, that changed:\n+    // CHECKMULTISIGs serialized in scriptSigs are\n+    // counted more accurately, assuming they are of the form\n+    //  ... OP_N CHECKMULTISIG ...\n+    unsigned int GetSigOpCount(bool fAccurate) const;\n+\n+    // Accurately count sigOps, including sigOps in\n+    // pay-to-script-hash transactions:\n+    unsigned int GetSigOpCount(const CScript& scriptSig) const;\n+\n+    bool IsPayToScriptHash() const;\n+\n+    // Called by IsStandardTx and P2SH VerifyScript (which makes it consensus-critical).\n+    bool IsPushOnly() const;\n+\n+    // Called by IsStandardTx.\n+    bool HasCanonicalPushes() const;\n+\n+    // Returns whether the script is guaranteed to fail at execution,\n+    // regardless of the initial stack. This allows outputs to be pruned\n+    // instantly when entering the UTXO set.\n+    bool IsUnspendable() const\n+    {\n+        return (size() > 0 && *begin() == OP_RETURN);\n+    }\n+\n+    void SetDestination(const CTxDestination& address);\n+    void SetMultisig(int nRequired, const std::vector<CPubKey>& keys);\n+\n+    std::string ToString() const\n+    {\n+        std::string str;\n+        opcodetype opcode;\n+        std::vector<unsigned char> vch;\n+        const_iterator pc = begin();\n+        while (pc < end())\n+        {\n+            if (!str.empty())\n+                str += \" \";\n+            if (!GetOp(pc, opcode, vch))\n+            {\n+                str += \"[error]\";\n+                return str;\n+            }\n+            if (0 <= opcode && opcode <= OP_PUSHDATA4)\n+                str += ValueString(vch);\n+            else\n+                str += GetOpName(opcode);\n+        }\n+        return str;\n+    }\n+\n+    CScriptID GetID() const\n+    {\n+        return CScriptID(Hash160(*this));\n+    }\n+\n+    void clear()\n+    {\n+        // The default std::vector::clear() does not release memory.\n+        std::vector<unsigned char>().swap(*this);\n+    }\n+};\n+\n+#endif"
      },
      {
        "sha": "c1fc83328e4d552963846fb28f3fe0a106aec5dc",
        "filename": "src/scriptutils.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 288,
        "changes": 288,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/scriptutils.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/scriptutils.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scriptutils.cpp?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -83,150 +83,6 @@ const char* GetTxnOutputType(txnouttype t)\n     return NULL;\n }\n \n-\n-const char* GetOpName(opcodetype opcode)\n-{\n-    switch (opcode)\n-    {\n-    // push value\n-    case OP_0                      : return \"0\";\n-    case OP_PUSHDATA1              : return \"OP_PUSHDATA1\";\n-    case OP_PUSHDATA2              : return \"OP_PUSHDATA2\";\n-    case OP_PUSHDATA4              : return \"OP_PUSHDATA4\";\n-    case OP_1NEGATE                : return \"-1\";\n-    case OP_RESERVED               : return \"OP_RESERVED\";\n-    case OP_1                      : return \"1\";\n-    case OP_2                      : return \"2\";\n-    case OP_3                      : return \"3\";\n-    case OP_4                      : return \"4\";\n-    case OP_5                      : return \"5\";\n-    case OP_6                      : return \"6\";\n-    case OP_7                      : return \"7\";\n-    case OP_8                      : return \"8\";\n-    case OP_9                      : return \"9\";\n-    case OP_10                     : return \"10\";\n-    case OP_11                     : return \"11\";\n-    case OP_12                     : return \"12\";\n-    case OP_13                     : return \"13\";\n-    case OP_14                     : return \"14\";\n-    case OP_15                     : return \"15\";\n-    case OP_16                     : return \"16\";\n-\n-    // control\n-    case OP_NOP                    : return \"OP_NOP\";\n-    case OP_VER                    : return \"OP_VER\";\n-    case OP_IF                     : return \"OP_IF\";\n-    case OP_NOTIF                  : return \"OP_NOTIF\";\n-    case OP_VERIF                  : return \"OP_VERIF\";\n-    case OP_VERNOTIF               : return \"OP_VERNOTIF\";\n-    case OP_ELSE                   : return \"OP_ELSE\";\n-    case OP_ENDIF                  : return \"OP_ENDIF\";\n-    case OP_VERIFY                 : return \"OP_VERIFY\";\n-    case OP_RETURN                 : return \"OP_RETURN\";\n-\n-    // stack ops\n-    case OP_TOALTSTACK             : return \"OP_TOALTSTACK\";\n-    case OP_FROMALTSTACK           : return \"OP_FROMALTSTACK\";\n-    case OP_2DROP                  : return \"OP_2DROP\";\n-    case OP_2DUP                   : return \"OP_2DUP\";\n-    case OP_3DUP                   : return \"OP_3DUP\";\n-    case OP_2OVER                  : return \"OP_2OVER\";\n-    case OP_2ROT                   : return \"OP_2ROT\";\n-    case OP_2SWAP                  : return \"OP_2SWAP\";\n-    case OP_IFDUP                  : return \"OP_IFDUP\";\n-    case OP_DEPTH                  : return \"OP_DEPTH\";\n-    case OP_DROP                   : return \"OP_DROP\";\n-    case OP_DUP                    : return \"OP_DUP\";\n-    case OP_NIP                    : return \"OP_NIP\";\n-    case OP_OVER                   : return \"OP_OVER\";\n-    case OP_PICK                   : return \"OP_PICK\";\n-    case OP_ROLL                   : return \"OP_ROLL\";\n-    case OP_ROT                    : return \"OP_ROT\";\n-    case OP_SWAP                   : return \"OP_SWAP\";\n-    case OP_TUCK                   : return \"OP_TUCK\";\n-\n-    // splice ops\n-    case OP_CAT                    : return \"OP_CAT\";\n-    case OP_SUBSTR                 : return \"OP_SUBSTR\";\n-    case OP_LEFT                   : return \"OP_LEFT\";\n-    case OP_RIGHT                  : return \"OP_RIGHT\";\n-    case OP_SIZE                   : return \"OP_SIZE\";\n-\n-    // bit logic\n-    case OP_INVERT                 : return \"OP_INVERT\";\n-    case OP_AND                    : return \"OP_AND\";\n-    case OP_OR                     : return \"OP_OR\";\n-    case OP_XOR                    : return \"OP_XOR\";\n-    case OP_EQUAL                  : return \"OP_EQUAL\";\n-    case OP_EQUALVERIFY            : return \"OP_EQUALVERIFY\";\n-    case OP_RESERVED1              : return \"OP_RESERVED1\";\n-    case OP_RESERVED2              : return \"OP_RESERVED2\";\n-\n-    // numeric\n-    case OP_1ADD                   : return \"OP_1ADD\";\n-    case OP_1SUB                   : return \"OP_1SUB\";\n-    case OP_2MUL                   : return \"OP_2MUL\";\n-    case OP_2DIV                   : return \"OP_2DIV\";\n-    case OP_NEGATE                 : return \"OP_NEGATE\";\n-    case OP_ABS                    : return \"OP_ABS\";\n-    case OP_NOT                    : return \"OP_NOT\";\n-    case OP_0NOTEQUAL              : return \"OP_0NOTEQUAL\";\n-    case OP_ADD                    : return \"OP_ADD\";\n-    case OP_SUB                    : return \"OP_SUB\";\n-    case OP_MUL                    : return \"OP_MUL\";\n-    case OP_DIV                    : return \"OP_DIV\";\n-    case OP_MOD                    : return \"OP_MOD\";\n-    case OP_LSHIFT                 : return \"OP_LSHIFT\";\n-    case OP_RSHIFT                 : return \"OP_RSHIFT\";\n-    case OP_BOOLAND                : return \"OP_BOOLAND\";\n-    case OP_BOOLOR                 : return \"OP_BOOLOR\";\n-    case OP_NUMEQUAL               : return \"OP_NUMEQUAL\";\n-    case OP_NUMEQUALVERIFY         : return \"OP_NUMEQUALVERIFY\";\n-    case OP_NUMNOTEQUAL            : return \"OP_NUMNOTEQUAL\";\n-    case OP_LESSTHAN               : return \"OP_LESSTHAN\";\n-    case OP_GREATERTHAN            : return \"OP_GREATERTHAN\";\n-    case OP_LESSTHANOREQUAL        : return \"OP_LESSTHANOREQUAL\";\n-    case OP_GREATERTHANOREQUAL     : return \"OP_GREATERTHANOREQUAL\";\n-    case OP_MIN                    : return \"OP_MIN\";\n-    case OP_MAX                    : return \"OP_MAX\";\n-    case OP_WITHIN                 : return \"OP_WITHIN\";\n-\n-    // crypto\n-    case OP_RIPEMD160              : return \"OP_RIPEMD160\";\n-    case OP_SHA1                   : return \"OP_SHA1\";\n-    case OP_SHA256                 : return \"OP_SHA256\";\n-    case OP_HASH160                : return \"OP_HASH160\";\n-    case OP_HASH256                : return \"OP_HASH256\";\n-    case OP_CODESEPARATOR          : return \"OP_CODESEPARATOR\";\n-    case OP_CHECKSIG               : return \"OP_CHECKSIG\";\n-    case OP_CHECKSIGVERIFY         : return \"OP_CHECKSIGVERIFY\";\n-    case OP_CHECKMULTISIG          : return \"OP_CHECKMULTISIG\";\n-    case OP_CHECKMULTISIGVERIFY    : return \"OP_CHECKMULTISIGVERIFY\";\n-\n-    // expanson\n-    case OP_NOP1                   : return \"OP_NOP1\";\n-    case OP_NOP2                   : return \"OP_NOP2\";\n-    case OP_NOP3                   : return \"OP_NOP3\";\n-    case OP_NOP4                   : return \"OP_NOP4\";\n-    case OP_NOP5                   : return \"OP_NOP5\";\n-    case OP_NOP6                   : return \"OP_NOP6\";\n-    case OP_NOP7                   : return \"OP_NOP7\";\n-    case OP_NOP8                   : return \"OP_NOP8\";\n-    case OP_NOP9                   : return \"OP_NOP9\";\n-    case OP_NOP10                  : return \"OP_NOP10\";\n-\n-    case OP_INVALIDOPCODE          : return \"OP_INVALIDOPCODE\";\n-\n-    // Note:\n-    //  The template matching params OP_SMALLDATA/etc are defined in opcodetype enum\n-    //  as kind of implementation hack, they are *NOT* real opcodes.  If found in real\n-    //  Script, just let the default: case deal with them.\n-\n-    default:\n-        return \"OP_UNKNOWN\";\n-    }\n-}\n-\n bool IsCanonicalPubKey(const valtype &vchPubKey, unsigned int flags) {\n     if (!(flags & SCRIPT_VERIFY_STRICTENC))\n         return true;\n@@ -1815,150 +1671,6 @@ CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsign\n     return CombineSignatures(scriptPubKey, txTo, nIn, txType, vSolutions, stack1, stack2);\n }\n \n-unsigned int CScript::GetSigOpCount(bool fAccurate) const\n-{\n-    unsigned int n = 0;\n-    const_iterator pc = begin();\n-    opcodetype lastOpcode = OP_INVALIDOPCODE;\n-    while (pc < end())\n-    {\n-        opcodetype opcode;\n-        if (!GetOp(pc, opcode))\n-            break;\n-        if (opcode == OP_CHECKSIG || opcode == OP_CHECKSIGVERIFY)\n-            n++;\n-        else if (opcode == OP_CHECKMULTISIG || opcode == OP_CHECKMULTISIGVERIFY)\n-        {\n-            if (fAccurate && lastOpcode >= OP_1 && lastOpcode <= OP_16)\n-                n += DecodeOP_N(lastOpcode);\n-            else\n-                n += 20;\n-        }\n-        lastOpcode = opcode;\n-    }\n-    return n;\n-}\n-\n-unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\n-{\n-    if (!IsPayToScriptHash())\n-        return GetSigOpCount(true);\n-\n-    // This is a pay-to-script-hash scriptPubKey;\n-    // get the last item that the scriptSig\n-    // pushes onto the stack:\n-    const_iterator pc = scriptSig.begin();\n-    vector<unsigned char> data;\n-    while (pc < scriptSig.end())\n-    {\n-        opcodetype opcode;\n-        if (!scriptSig.GetOp(pc, opcode, data))\n-            return 0;\n-        if (opcode > OP_16)\n-            return 0;\n-    }\n-\n-    /// ... and return its opcount:\n-    CScript subscript(data.begin(), data.end());\n-    return subscript.GetSigOpCount(true);\n-}\n-\n-bool CScript::IsPayToScriptHash() const\n-{\n-    // Extra-fast test for pay-to-script-hash CScripts:\n-    return (this->size() == 23 &&\n-            this->at(0) == OP_HASH160 &&\n-            this->at(1) == 0x14 &&\n-            this->at(22) == OP_EQUAL);\n-}\n-\n-bool CScript::IsPushOnly() const\n-{\n-    const_iterator pc = begin();\n-    while (pc < end())\n-    {\n-        // Note how a script with an invalid PUSHDATA returns False.\n-        opcodetype opcode;\n-        if (!GetOp(pc, opcode))\n-            return false;\n-\n-        // Note that IsPushOnly() *does* consider OP_RESERVED to be a\n-        // push-type opcode, however execution of OP_RESERVED fails, so\n-        // it's not relevant to P2SH as the scriptSig would fail prior to\n-        // the P2SH special validation code being executed.\n-        if (opcode > OP_16)\n-            return false;\n-    }\n-    return true;\n-}\n-\n-bool CScript::HasCanonicalPushes() const\n-{\n-    const_iterator pc = begin();\n-    while (pc < end())\n-    {\n-        opcodetype opcode;\n-        std::vector<unsigned char> data;\n-        if (!GetOp(pc, opcode, data))\n-            return false;\n-        if (opcode > OP_16)\n-            continue;\n-        if (opcode < OP_PUSHDATA1 && opcode > OP_0 && (data.size() == 1 && data[0] <= 16))\n-            // Could have used an OP_n code, rather than a 1-byte push.\n-            return false;\n-        if (opcode == OP_PUSHDATA1 && data.size() < OP_PUSHDATA1)\n-            // Could have used a normal n-byte push, rather than OP_PUSHDATA1.\n-            return false;\n-        if (opcode == OP_PUSHDATA2 && data.size() <= 0xFF)\n-            // Could have used an OP_PUSHDATA1.\n-            return false;\n-        if (opcode == OP_PUSHDATA4 && data.size() <= 0xFFFF)\n-            // Could have used an OP_PUSHDATA2.\n-            return false;\n-    }\n-    return true;\n-}\n-\n-class CScriptVisitor : public boost::static_visitor<bool>\n-{\n-private:\n-    CScript *script;\n-public:\n-    CScriptVisitor(CScript *scriptin) { script = scriptin; }\n-\n-    bool operator()(const CNoDestination &dest) const {\n-        script->clear();\n-        return false;\n-    }\n-\n-    bool operator()(const CKeyID &keyID) const {\n-        script->clear();\n-        *script << OP_DUP << OP_HASH160 << keyID << OP_EQUALVERIFY << OP_CHECKSIG;\n-        return true;\n-    }\n-\n-    bool operator()(const CScriptID &scriptID) const {\n-        script->clear();\n-        *script << OP_HASH160 << scriptID << OP_EQUAL;\n-        return true;\n-    }\n-};\n-\n-void CScript::SetDestination(const CTxDestination& dest)\n-{\n-    boost::apply_visitor(CScriptVisitor(this), dest);\n-}\n-\n-void CScript::SetMultisig(int nRequired, const std::vector<CPubKey>& keys)\n-{\n-    this->clear();\n-\n-    *this << EncodeOP_N(nRequired);\n-    BOOST_FOREACH(const CPubKey& key, keys)\n-        *this << key;\n-    *this << EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n-}\n-\n bool CScriptCompressor::IsToKeyID(CKeyID &hash) const\n {\n     if (script.size() == 25 && script[0] == OP_DUP && script[1] == OP_HASH160"
      },
      {
        "sha": "4f29f7ab29dcc2b63900376030e1ed120cdd7118",
        "filename": "src/scriptutils.h",
        "status": "modified",
        "additions": 1,
        "deletions": 636,
        "changes": 637,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/scriptutils.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/scriptutils.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scriptutils.h?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -7,172 +7,19 @@\n #define H_BITCOIN_SCRIPTUTILS\n \n #include \"key.h\"\n-#include \"utilstrencodings.h\"\n-#include \"tinyformat.h\"\n+#include \"script/script.h\"\n \n #include <stdexcept>\n #include <stdint.h>\n #include <string>\n #include <vector>\n \n-#include <boost/variant.hpp>\n-\n class CKeyStore;\n class CTransaction;\n struct CMutableTransaction;\n \n-static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n static const unsigned int MAX_OP_RETURN_RELAY = 40;      // bytes\n \n-class scriptnum_error : public std::runtime_error\n-{\n-public:\n-    explicit scriptnum_error(const std::string& str) : std::runtime_error(str) {}\n-};\n-\n-class CScriptNum\n-{\n-// Numeric opcodes (OP_1ADD, etc) are restricted to operating on 4-byte integers.\n-// The semantics are subtle, though: operands must be in the range [-2^31 +1...2^31 -1],\n-// but results may overflow (and are valid as long as they are not used in a subsequent\n-// numeric operation). CScriptNum enforces those semantics by storing results as\n-// an int64 and allowing out-of-range values to be returned as a vector of bytes but\n-// throwing an exception if arithmetic is done or the result is interpreted as an integer.\n-public:\n-\n-    explicit CScriptNum(const int64_t& n)\n-    {\n-        m_value = n;\n-    }\n-\n-    explicit CScriptNum(const std::vector<unsigned char>& vch)\n-    {\n-        if (vch.size() > nMaxNumSize)\n-            throw scriptnum_error(\"CScriptNum(const std::vector<unsigned char>&) : overflow\");\n-        m_value = set_vch(vch);\n-    }\n-\n-    inline bool operator==(const int64_t& rhs) const    { return m_value == rhs; }\n-    inline bool operator!=(const int64_t& rhs) const    { return m_value != rhs; }\n-    inline bool operator<=(const int64_t& rhs) const    { return m_value <= rhs; }\n-    inline bool operator< (const int64_t& rhs) const    { return m_value <  rhs; }\n-    inline bool operator>=(const int64_t& rhs) const    { return m_value >= rhs; }\n-    inline bool operator> (const int64_t& rhs) const    { return m_value >  rhs; }\n-\n-    inline bool operator==(const CScriptNum& rhs) const { return operator==(rhs.m_value); }\n-    inline bool operator!=(const CScriptNum& rhs) const { return operator!=(rhs.m_value); }\n-    inline bool operator<=(const CScriptNum& rhs) const { return operator<=(rhs.m_value); }\n-    inline bool operator< (const CScriptNum& rhs) const { return operator< (rhs.m_value); }\n-    inline bool operator>=(const CScriptNum& rhs) const { return operator>=(rhs.m_value); }\n-    inline bool operator> (const CScriptNum& rhs) const { return operator> (rhs.m_value); }\n-\n-    inline CScriptNum operator+(   const int64_t& rhs)    const { return CScriptNum(m_value + rhs);}\n-    inline CScriptNum operator-(   const int64_t& rhs)    const { return CScriptNum(m_value - rhs);}\n-    inline CScriptNum operator+(   const CScriptNum& rhs) const { return operator+(rhs.m_value);   }\n-    inline CScriptNum operator-(   const CScriptNum& rhs) const { return operator-(rhs.m_value);   }\n-\n-    inline CScriptNum& operator+=( const CScriptNum& rhs)       { return operator+=(rhs.m_value);  }\n-    inline CScriptNum& operator-=( const CScriptNum& rhs)       { return operator-=(rhs.m_value);  }\n-\n-    inline CScriptNum operator-()                         const\n-    {\n-        assert(m_value != std::numeric_limits<int64_t>::min());\n-        return CScriptNum(-m_value);\n-    }\n-\n-    inline CScriptNum& operator=( const int64_t& rhs)\n-    {\n-        m_value = rhs;\n-        return *this;\n-    }\n-\n-    inline CScriptNum& operator+=( const int64_t& rhs)\n-    {\n-        assert(rhs == 0 || (rhs > 0 && m_value <= std::numeric_limits<int64_t>::max() - rhs) ||\n-                           (rhs < 0 && m_value >= std::numeric_limits<int64_t>::min() - rhs));\n-        m_value += rhs;\n-        return *this;\n-    }\n-\n-    inline CScriptNum& operator-=( const int64_t& rhs)\n-    {\n-        assert(rhs == 0 || (rhs > 0 && m_value >= std::numeric_limits<int64_t>::min() + rhs) ||\n-                           (rhs < 0 && m_value <= std::numeric_limits<int64_t>::max() + rhs));\n-        m_value -= rhs;\n-        return *this;\n-    }\n-\n-    int getint() const\n-    {\n-        if (m_value > std::numeric_limits<int>::max())\n-            return std::numeric_limits<int>::max();\n-        else if (m_value < std::numeric_limits<int>::min())\n-            return std::numeric_limits<int>::min();\n-        return m_value;\n-    }\n-\n-    std::vector<unsigned char> getvch() const\n-    {\n-        return serialize(m_value);\n-    }\n-\n-    static std::vector<unsigned char> serialize(const int64_t& value)\n-    {\n-        if(value == 0)\n-            return std::vector<unsigned char>();\n-\n-        std::vector<unsigned char> result;\n-        const bool neg = value < 0;\n-        uint64_t absvalue = neg ? -value : value;\n-\n-        while(absvalue)\n-        {\n-            result.push_back(absvalue & 0xff);\n-            absvalue >>= 8;\n-        }\n-\n-\n-//    - If the most significant byte is >= 0x80 and the value is positive, push a\n-//    new zero-byte to make the significant byte < 0x80 again.\n-\n-//    - If the most significant byte is >= 0x80 and the value is negative, push a\n-//    new 0x80 byte that will be popped off when converting to an integral.\n-\n-//    - If the most significant byte is < 0x80 and the value is negative, add\n-//    0x80 to it, since it will be subtracted and interpreted as a negative when\n-//    converting to an integral.\n-\n-        if (result.back() & 0x80)\n-            result.push_back(neg ? 0x80 : 0);\n-        else if (neg)\n-            result.back() |= 0x80;\n-\n-        return result;\n-    }\n-\n-    static const size_t nMaxNumSize = 4;\n-\n-private:\n-    static int64_t set_vch(const std::vector<unsigned char>& vch)\n-    {\n-      if (vch.empty())\n-          return 0;\n-\n-      int64_t result = 0;\n-      for (size_t i = 0; i != vch.size(); ++i)\n-          result |= static_cast<int64_t>(vch[i]) << 8*i;\n-\n-      // If the input vector's most significant byte is 0x80, remove it from\n-      // the result's msb and return a negative.\n-      if (vch.back() & 0x80)\n-          return -(result & ~(0x80ULL << (8 * (vch.size() - 1))));\n-\n-      return result;\n-    }\n-\n-    int64_t m_value;\n-};\n-\n /** Signature hash types/flags */\n enum\n {\n@@ -234,490 +81,8 @@ enum txnouttype\n     TX_NULL_DATA,\n };\n \n-class CNoDestination {\n-public:\n-    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }\n-    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n-};\n-\n-/** A txout script template with a specific destination. It is either:\n- *  * CNoDestination: no destination set\n- *  * CKeyID: TX_PUBKEYHASH destination\n- *  * CScriptID: TX_SCRIPTHASH destination\n- *  A CTxDestination is the internal data type encoded in a CBitcoinAddress\n- */\n-typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n-\n const char* GetTxnOutputType(txnouttype t);\n \n-/** Script opcodes */\n-enum opcodetype\n-{\n-    // push value\n-    OP_0 = 0x00,\n-    OP_FALSE = OP_0,\n-    OP_PUSHDATA1 = 0x4c,\n-    OP_PUSHDATA2 = 0x4d,\n-    OP_PUSHDATA4 = 0x4e,\n-    OP_1NEGATE = 0x4f,\n-    OP_RESERVED = 0x50,\n-    OP_1 = 0x51,\n-    OP_TRUE=OP_1,\n-    OP_2 = 0x52,\n-    OP_3 = 0x53,\n-    OP_4 = 0x54,\n-    OP_5 = 0x55,\n-    OP_6 = 0x56,\n-    OP_7 = 0x57,\n-    OP_8 = 0x58,\n-    OP_9 = 0x59,\n-    OP_10 = 0x5a,\n-    OP_11 = 0x5b,\n-    OP_12 = 0x5c,\n-    OP_13 = 0x5d,\n-    OP_14 = 0x5e,\n-    OP_15 = 0x5f,\n-    OP_16 = 0x60,\n-\n-    // control\n-    OP_NOP = 0x61,\n-    OP_VER = 0x62,\n-    OP_IF = 0x63,\n-    OP_NOTIF = 0x64,\n-    OP_VERIF = 0x65,\n-    OP_VERNOTIF = 0x66,\n-    OP_ELSE = 0x67,\n-    OP_ENDIF = 0x68,\n-    OP_VERIFY = 0x69,\n-    OP_RETURN = 0x6a,\n-\n-    // stack ops\n-    OP_TOALTSTACK = 0x6b,\n-    OP_FROMALTSTACK = 0x6c,\n-    OP_2DROP = 0x6d,\n-    OP_2DUP = 0x6e,\n-    OP_3DUP = 0x6f,\n-    OP_2OVER = 0x70,\n-    OP_2ROT = 0x71,\n-    OP_2SWAP = 0x72,\n-    OP_IFDUP = 0x73,\n-    OP_DEPTH = 0x74,\n-    OP_DROP = 0x75,\n-    OP_DUP = 0x76,\n-    OP_NIP = 0x77,\n-    OP_OVER = 0x78,\n-    OP_PICK = 0x79,\n-    OP_ROLL = 0x7a,\n-    OP_ROT = 0x7b,\n-    OP_SWAP = 0x7c,\n-    OP_TUCK = 0x7d,\n-\n-    // splice ops\n-    OP_CAT = 0x7e,\n-    OP_SUBSTR = 0x7f,\n-    OP_LEFT = 0x80,\n-    OP_RIGHT = 0x81,\n-    OP_SIZE = 0x82,\n-\n-    // bit logic\n-    OP_INVERT = 0x83,\n-    OP_AND = 0x84,\n-    OP_OR = 0x85,\n-    OP_XOR = 0x86,\n-    OP_EQUAL = 0x87,\n-    OP_EQUALVERIFY = 0x88,\n-    OP_RESERVED1 = 0x89,\n-    OP_RESERVED2 = 0x8a,\n-\n-    // numeric\n-    OP_1ADD = 0x8b,\n-    OP_1SUB = 0x8c,\n-    OP_2MUL = 0x8d,\n-    OP_2DIV = 0x8e,\n-    OP_NEGATE = 0x8f,\n-    OP_ABS = 0x90,\n-    OP_NOT = 0x91,\n-    OP_0NOTEQUAL = 0x92,\n-\n-    OP_ADD = 0x93,\n-    OP_SUB = 0x94,\n-    OP_MUL = 0x95,\n-    OP_DIV = 0x96,\n-    OP_MOD = 0x97,\n-    OP_LSHIFT = 0x98,\n-    OP_RSHIFT = 0x99,\n-\n-    OP_BOOLAND = 0x9a,\n-    OP_BOOLOR = 0x9b,\n-    OP_NUMEQUAL = 0x9c,\n-    OP_NUMEQUALVERIFY = 0x9d,\n-    OP_NUMNOTEQUAL = 0x9e,\n-    OP_LESSTHAN = 0x9f,\n-    OP_GREATERTHAN = 0xa0,\n-    OP_LESSTHANOREQUAL = 0xa1,\n-    OP_GREATERTHANOREQUAL = 0xa2,\n-    OP_MIN = 0xa3,\n-    OP_MAX = 0xa4,\n-\n-    OP_WITHIN = 0xa5,\n-\n-    // crypto\n-    OP_RIPEMD160 = 0xa6,\n-    OP_SHA1 = 0xa7,\n-    OP_SHA256 = 0xa8,\n-    OP_HASH160 = 0xa9,\n-    OP_HASH256 = 0xaa,\n-    OP_CODESEPARATOR = 0xab,\n-    OP_CHECKSIG = 0xac,\n-    OP_CHECKSIGVERIFY = 0xad,\n-    OP_CHECKMULTISIG = 0xae,\n-    OP_CHECKMULTISIGVERIFY = 0xaf,\n-\n-    // expansion\n-    OP_NOP1 = 0xb0,\n-    OP_NOP2 = 0xb1,\n-    OP_NOP3 = 0xb2,\n-    OP_NOP4 = 0xb3,\n-    OP_NOP5 = 0xb4,\n-    OP_NOP6 = 0xb5,\n-    OP_NOP7 = 0xb6,\n-    OP_NOP8 = 0xb7,\n-    OP_NOP9 = 0xb8,\n-    OP_NOP10 = 0xb9,\n-\n-\n-\n-    // template matching params\n-    OP_SMALLDATA = 0xf9,\n-    OP_SMALLINTEGER = 0xfa,\n-    OP_PUBKEYS = 0xfb,\n-    OP_PUBKEYHASH = 0xfd,\n-    OP_PUBKEY = 0xfe,\n-\n-    OP_INVALIDOPCODE = 0xff,\n-};\n-\n-const char* GetOpName(opcodetype opcode);\n-\n-\n-\n-inline std::string ValueString(const std::vector<unsigned char>& vch)\n-{\n-    if (vch.size() <= 4)\n-        return strprintf(\"%d\", CScriptNum(vch).getint());\n-    else\n-        return HexStr(vch);\n-}\n-\n-/** Serialized script, used inside transaction inputs and outputs */\n-class CScript : public std::vector<unsigned char>\n-{\n-protected:\n-    CScript& push_int64(int64_t n)\n-    {\n-        if (n == -1 || (n >= 1 && n <= 16))\n-        {\n-            push_back(n + (OP_1 - 1));\n-        }\n-        else\n-        {\n-            *this << CScriptNum::serialize(n);\n-        }\n-        return *this;\n-    }\n-public:\n-    CScript() { }\n-    CScript(const CScript& b) : std::vector<unsigned char>(b.begin(), b.end()) { }\n-    CScript(const_iterator pbegin, const_iterator pend) : std::vector<unsigned char>(pbegin, pend) { }\n-#ifndef _MSC_VER\n-    CScript(const unsigned char* pbegin, const unsigned char* pend) : std::vector<unsigned char>(pbegin, pend) { }\n-#endif\n-\n-    CScript& operator+=(const CScript& b)\n-    {\n-        insert(end(), b.begin(), b.end());\n-        return *this;\n-    }\n-\n-    friend CScript operator+(const CScript& a, const CScript& b)\n-    {\n-        CScript ret = a;\n-        ret += b;\n-        return ret;\n-    }\n-\n-\n-    CScript(int64_t b)        { operator<<(b); }\n-\n-    explicit CScript(opcodetype b)     { operator<<(b); }\n-    explicit CScript(const uint256& b) { operator<<(b); }\n-    explicit CScript(const CScriptNum& b) { operator<<(b); }\n-    explicit CScript(const std::vector<unsigned char>& b) { operator<<(b); }\n-\n-\n-    CScript& operator<<(int64_t b) { return push_int64(b); }\n-\n-    CScript& operator<<(opcodetype opcode)\n-    {\n-        if (opcode < 0 || opcode > 0xff)\n-            throw std::runtime_error(\"CScript::operator<<() : invalid opcode\");\n-        insert(end(), (unsigned char)opcode);\n-        return *this;\n-    }\n-\n-    CScript& operator<<(const uint160& b)\n-    {\n-        insert(end(), sizeof(b));\n-        insert(end(), (unsigned char*)&b, (unsigned char*)&b + sizeof(b));\n-        return *this;\n-    }\n-\n-    CScript& operator<<(const uint256& b)\n-    {\n-        insert(end(), sizeof(b));\n-        insert(end(), (unsigned char*)&b, (unsigned char*)&b + sizeof(b));\n-        return *this;\n-    }\n-\n-    CScript& operator<<(const CPubKey& key)\n-    {\n-        assert(key.size() < OP_PUSHDATA1);\n-        insert(end(), (unsigned char)key.size());\n-        insert(end(), key.begin(), key.end());\n-        return *this;\n-    }\n-\n-    CScript& operator<<(const CScriptNum& b)\n-    {\n-        *this << b.getvch();\n-        return *this;\n-    }\n-\n-    CScript& operator<<(const std::vector<unsigned char>& b)\n-    {\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            unsigned short nSize = b.size();\n-            insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            unsigned int nSize = b.size();\n-            insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n-        }\n-        insert(end(), b.begin(), b.end());\n-        return *this;\n-    }\n-\n-    CScript& operator<<(const CScript& b)\n-    {\n-        // I'm not sure if this should push the script or concatenate scripts.\n-        // If there's ever a use for pushing a script onto a script, delete this member fn\n-        assert(!\"Warning: Pushing a CScript onto a CScript with << is probably not intended, use + to concatenate!\");\n-        return *this;\n-    }\n-\n-\n-    bool GetOp(iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet)\n-    {\n-         // Wrapper so it can be called with either iterator or const_iterator\n-         const_iterator pc2 = pc;\n-         bool fRet = GetOp2(pc2, opcodeRet, &vchRet);\n-         pc = begin() + (pc2 - begin());\n-         return fRet;\n-    }\n-\n-    bool GetOp(iterator& pc, opcodetype& opcodeRet)\n-    {\n-         const_iterator pc2 = pc;\n-         bool fRet = GetOp2(pc2, opcodeRet, NULL);\n-         pc = begin() + (pc2 - begin());\n-         return fRet;\n-    }\n-\n-    bool GetOp(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet) const\n-    {\n-        return GetOp2(pc, opcodeRet, &vchRet);\n-    }\n-\n-    bool GetOp(const_iterator& pc, opcodetype& opcodeRet) const\n-    {\n-        return GetOp2(pc, opcodeRet, NULL);\n-    }\n-\n-    bool GetOp2(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet) const\n-    {\n-        opcodeRet = OP_INVALIDOPCODE;\n-        if (pvchRet)\n-            pvchRet->clear();\n-        if (pc >= end())\n-            return false;\n-\n-        // Read instruction\n-        if (end() - pc < 1)\n-            return false;\n-        unsigned int opcode = *pc++;\n-\n-        // Immediate operand\n-        if (opcode <= OP_PUSHDATA4)\n-        {\n-            unsigned int nSize = 0;\n-            if (opcode < OP_PUSHDATA1)\n-            {\n-                nSize = opcode;\n-            }\n-            else if (opcode == OP_PUSHDATA1)\n-            {\n-                if (end() - pc < 1)\n-                    return false;\n-                nSize = *pc++;\n-            }\n-            else if (opcode == OP_PUSHDATA2)\n-            {\n-                if (end() - pc < 2)\n-                    return false;\n-                nSize = 0;\n-                memcpy(&nSize, &pc[0], 2);\n-                pc += 2;\n-            }\n-            else if (opcode == OP_PUSHDATA4)\n-            {\n-                if (end() - pc < 4)\n-                    return false;\n-                memcpy(&nSize, &pc[0], 4);\n-                pc += 4;\n-            }\n-            if (end() - pc < 0 || (unsigned int)(end() - pc) < nSize)\n-                return false;\n-            if (pvchRet)\n-                pvchRet->assign(pc, pc + nSize);\n-            pc += nSize;\n-        }\n-\n-        opcodeRet = (opcodetype)opcode;\n-        return true;\n-    }\n-\n-    // Encode/decode small integers:\n-    static int DecodeOP_N(opcodetype opcode)\n-    {\n-        if (opcode == OP_0)\n-            return 0;\n-        assert(opcode >= OP_1 && opcode <= OP_16);\n-        return (int)opcode - (int)(OP_1 - 1);\n-    }\n-    static opcodetype EncodeOP_N(int n)\n-    {\n-        assert(n >= 0 && n <= 16);\n-        if (n == 0)\n-            return OP_0;\n-        return (opcodetype)(OP_1+n-1);\n-    }\n-\n-    int FindAndDelete(const CScript& b)\n-    {\n-        int nFound = 0;\n-        if (b.empty())\n-            return nFound;\n-        iterator pc = begin();\n-        opcodetype opcode;\n-        do\n-        {\n-            while (end() - pc >= (long)b.size() && memcmp(&pc[0], &b[0], b.size()) == 0)\n-            {\n-                erase(pc, pc + b.size());\n-                ++nFound;\n-            }\n-        }\n-        while (GetOp(pc, opcode));\n-        return nFound;\n-    }\n-    int Find(opcodetype op) const\n-    {\n-        int nFound = 0;\n-        opcodetype opcode;\n-        for (const_iterator pc = begin(); pc != end() && GetOp(pc, opcode);)\n-            if (opcode == op)\n-                ++nFound;\n-        return nFound;\n-    }\n-\n-    // Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\n-    // as 20 sigops. With pay-to-script-hash, that changed:\n-    // CHECKMULTISIGs serialized in scriptSigs are\n-    // counted more accurately, assuming they are of the form\n-    //  ... OP_N CHECKMULTISIG ...\n-    unsigned int GetSigOpCount(bool fAccurate) const;\n-\n-    // Accurately count sigOps, including sigOps in\n-    // pay-to-script-hash transactions:\n-    unsigned int GetSigOpCount(const CScript& scriptSig) const;\n-\n-    bool IsPayToScriptHash() const;\n-\n-    // Called by IsStandardTx and P2SH VerifyScript (which makes it consensus-critical).\n-    bool IsPushOnly() const;\n-\n-    // Called by IsStandardTx.\n-    bool HasCanonicalPushes() const;\n-\n-    // Returns whether the script is guaranteed to fail at execution,\n-    // regardless of the initial stack. This allows outputs to be pruned\n-    // instantly when entering the UTXO set.\n-    bool IsUnspendable() const\n-    {\n-        return (size() > 0 && *begin() == OP_RETURN);\n-    }\n-\n-    void SetDestination(const CTxDestination& address);\n-    void SetMultisig(int nRequired, const std::vector<CPubKey>& keys);\n-\n-    std::string ToString() const\n-    {\n-        std::string str;\n-        opcodetype opcode;\n-        std::vector<unsigned char> vch;\n-        const_iterator pc = begin();\n-        while (pc < end())\n-        {\n-            if (!str.empty())\n-                str += \" \";\n-            if (!GetOp(pc, opcode, vch))\n-            {\n-                str += \"[error]\";\n-                return str;\n-            }\n-            if (0 <= opcode && opcode <= OP_PUSHDATA4)\n-                str += ValueString(vch);\n-            else\n-                str += GetOpName(opcode);\n-        }\n-        return str;\n-    }\n-\n-    CScriptID GetID() const\n-    {\n-        return CScriptID(Hash160(*this));\n-    }\n-\n-    void clear()\n-    {\n-        // The default std::vector::clear() does not release memory.\n-        std::vector<unsigned char>().swap(*this);\n-    }\n-};\n-\n /** Compact serializer for scripts.\n  *\n  *  It detects common cases and encodes them much more efficiently."
      },
      {
        "sha": "fe68e9e9744f07e55a3db792a3442dce8e4ff4bf",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -9,7 +9,7 @@\n #include \"data/base58_keys_valid.json.h\"\n \n #include \"key.h\"\n-#include \"scriptutils.h\"\n+#include \"script/script.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "203c20731afc6aacaeeb5ab519b7817174045b35",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -5,7 +5,7 @@\n #include \"key.h\"\n \n #include \"base58.h\"\n-#include \"scriptutils.h\"\n+#include \"script/script.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "aa9b0de4ce89210705600b3b0cbf51575c8450dc",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -5,6 +5,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"script/script.h\"\n #include \"scriptutils.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "9136d6229286a2804e660a5a7c7a0c534024b452",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -5,6 +5,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"script/script.h\"\n #include \"scriptutils.h\"\n \n #include <vector>"
      },
      {
        "sha": "ff56bdf13bae4ab2f74cbc1def863dba5ab12632",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -8,6 +8,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"script/script.h\"\n #include \"scriptutils.h\"\n #include \"core_io.h\"\n "
      },
      {
        "sha": "ac60fa426f895bfbb97f4be1136a7a0c19700595",
        "filename": "src/test/scriptnum_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/test/scriptnum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/test/scriptnum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum_tests.cpp?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"bignum.h\"\n-#include \"scriptutils.h\"\n+#include \"script/script.h\"\n #include <boost/test/unit_test.hpp>\n #include <limits.h>\n #include <stdint.h>"
      },
      {
        "sha": "1421288eed30ddc0d2158de62ec85e39d1b96fe7",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -6,6 +6,7 @@\n #include \"main.h\"\n #include \"random.h\"\n #include \"serialize.h\"\n+#include \"script/script.h\"\n #include \"scriptutils.h\"\n #include \"util.h\"\n #include \"version.h\""
      },
      {
        "sha": "2d10c356ac1a23b752e03d4e6fdd5b1ba2e3de21",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"key.h\"\n-#include \"scriptutils.h\"\n+#include \"script/script.h\"\n #include \"uint256.h\"\n \n #include <vector>"
      },
      {
        "sha": "943568e89d2508c3c3e446c301f8300badf18b3c",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bcdca6b9f64af647bad74137b6a261d731dcf3e/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "patch": "@@ -8,7 +8,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n-#include \"scriptutils.h\"\n+#include \"script/script.h\"\n #include \"core_io.h\"\n \n #include <map>"
      }
    ]
  },
  {
    "sha": "36dc780db62ee93bda6e240a1c2608174cf0bcaa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmRjNzgwZGI2MmVlOTNiZGE2ZTI0MGExYzI2MDgxNzRjZjBiY2Fh",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-08-27T18:11:41Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T00:27:04Z"
      },
      "message": "Separate script/interpreter",
      "tree": {
        "sha": "9012d7fad1d90c0d7bc95e55a643bb5d85a9cfc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9012d7fad1d90c0d7bc95e55a643bb5d85a9cfc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36dc780db62ee93bda6e240a1c2608174cf0bcaa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36dc780db62ee93bda6e240a1c2608174cf0bcaa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36dc780db62ee93bda6e240a1c2608174cf0bcaa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36dc780db62ee93bda6e240a1c2608174cf0bcaa/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bcdca6b9f64af647bad74137b6a261d731dcf3e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bcdca6b9f64af647bad74137b6a261d731dcf3e"
      }
    ],
    "stats": {
      "total": 2189,
      "additions": 1101,
      "deletions": 1088
    },
    "files": [
      {
        "sha": "a3fdd3ee6a60544d20faf0b867ef4bd3c02ba043",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36dc780db62ee93bda6e240a1c2608174cf0bcaa/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36dc780db62ee93bda6e240a1c2608174cf0bcaa/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=36dc780db62ee93bda6e240a1c2608174cf0bcaa",
        "patch": "@@ -98,6 +98,7 @@ BITCOIN_CORE_H = \\\n   rpcclient.h \\\n   rpcprotocol.h \\\n   rpcserver.h \\\n+  script/interpreter.h \\\n   script/script.h \\\n   scriptutils.h \\\n   serialize.h \\\n@@ -207,6 +208,7 @@ libbitcoin_common_a_SOURCES = \\\n   keystore.cpp \\\n   netbase.cpp \\\n   protocol.cpp \\\n+  script/interpreter.cpp \\\n   script/script.cpp \\\n   scriptutils.cpp \\\n   $(BITCOIN_CORE_H)"
      },
      {
        "sha": "2ba04b86aaf4529f243914c0e57f9a6bf4ae6cb3",
        "filename": "src/script/interpreter.cpp",
        "status": "added",
        "additions": 1048,
        "deletions": 0,
        "changes": 1048,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36dc780db62ee93bda6e240a1c2608174cf0bcaa/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36dc780db62ee93bda6e240a1c2608174cf0bcaa/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=36dc780db62ee93bda6e240a1c2608174cf0bcaa",
        "patch": "@@ -0,0 +1,1048 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"interpreter.h\"\n+\n+#include \"core.h\"\n+#include \"crypto/ripemd160.h\"\n+#include \"crypto/sha1.h\"\n+#include \"crypto/sha2.h\"\n+#include \"random.h\"\n+#include \"script/script.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/thread.hpp>\n+#include <boost/tuple/tuple_comparison.hpp>\n+\n+using namespace std;\n+\n+typedef vector<unsigned char> valtype;\n+static const valtype vchFalse(0);\n+static const valtype vchZero(0);\n+static const valtype vchTrue(1, 1);\n+static const CScriptNum bnZero(0);\n+static const CScriptNum bnOne(1);\n+static const CScriptNum bnFalse(0);\n+static const CScriptNum bnTrue(1);\n+\n+bool CastToBool(const valtype& vch)\n+{\n+    for (unsigned int i = 0; i < vch.size(); i++)\n+    {\n+        if (vch[i] != 0)\n+        {\n+            // Can be negative zero\n+            if (i == vch.size()-1 && vch[i] == 0x80)\n+                return false;\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+//\n+// Script is a stack machine (like Forth) that evaluates a predicate\n+// returning a bool indicating valid or not.  There are no loops.\n+//\n+#define stacktop(i)  (stack.at(stack.size()+(i)))\n+#define altstacktop(i)  (altstack.at(altstack.size()+(i)))\n+static inline void popstack(vector<valtype>& stack)\n+{\n+    if (stack.empty())\n+        throw runtime_error(\"popstack() : stack empty\");\n+    stack.pop_back();\n+}\n+\n+bool IsCanonicalPubKey(const valtype &vchPubKey, unsigned int flags) {\n+    if (!(flags & SCRIPT_VERIFY_STRICTENC))\n+        return true;\n+\n+    if (vchPubKey.size() < 33)\n+        return error(\"Non-canonical public key: too short\");\n+    if (vchPubKey[0] == 0x04) {\n+        if (vchPubKey.size() != 65)\n+            return error(\"Non-canonical public key: invalid length for uncompressed key\");\n+    } else if (vchPubKey[0] == 0x02 || vchPubKey[0] == 0x03) {\n+        if (vchPubKey.size() != 33)\n+            return error(\"Non-canonical public key: invalid length for compressed key\");\n+    } else {\n+        return error(\"Non-canonical public key: compressed nor uncompressed\");\n+    }\n+    return true;\n+}\n+\n+bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n+    if (!(flags & SCRIPT_VERIFY_STRICTENC))\n+        return true;\n+\n+    // See https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623\n+    // A canonical signature exists of: <30> <total len> <02> <len R> <R> <02> <len S> <S> <hashtype>\n+    // Where R and S are not negative (their first byte has its highest bit not set), and not\n+    // excessively padded (do not start with a 0 byte, unless an otherwise negative number follows,\n+    // in which case a single 0 byte is necessary and even required).\n+    if (vchSig.size() < 9)\n+        return error(\"Non-canonical signature: too short\");\n+    if (vchSig.size() > 73)\n+        return error(\"Non-canonical signature: too long\");\n+    unsigned char nHashType = vchSig[vchSig.size() - 1] & (~(SIGHASH_ANYONECANPAY));\n+    if (nHashType < SIGHASH_ALL || nHashType > SIGHASH_SINGLE)\n+        return error(\"Non-canonical signature: unknown hashtype byte\");\n+    if (vchSig[0] != 0x30)\n+        return error(\"Non-canonical signature: wrong type\");\n+    if (vchSig[1] != vchSig.size()-3)\n+        return error(\"Non-canonical signature: wrong length marker\");\n+    unsigned int nLenR = vchSig[3];\n+    if (5 + nLenR >= vchSig.size())\n+        return error(\"Non-canonical signature: S length misplaced\");\n+    unsigned int nLenS = vchSig[5+nLenR];\n+    if ((unsigned long)(nLenR+nLenS+7) != vchSig.size())\n+        return error(\"Non-canonical signature: R+S length mismatch\");\n+\n+    const unsigned char *R = &vchSig[4];\n+    if (R[-2] != 0x02)\n+        return error(\"Non-canonical signature: R value type mismatch\");\n+    if (nLenR == 0)\n+        return error(\"Non-canonical signature: R length is zero\");\n+    if (R[0] & 0x80)\n+        return error(\"Non-canonical signature: R value negative\");\n+    if (nLenR > 1 && (R[0] == 0x00) && !(R[1] & 0x80))\n+        return error(\"Non-canonical signature: R value excessively padded\");\n+\n+    const unsigned char *S = &vchSig[6+nLenR];\n+    if (S[-2] != 0x02)\n+        return error(\"Non-canonical signature: S value type mismatch\");\n+    if (nLenS == 0)\n+        return error(\"Non-canonical signature: S length is zero\");\n+    if (S[0] & 0x80)\n+        return error(\"Non-canonical signature: S value negative\");\n+    if (nLenS > 1 && (S[0] == 0x00) && !(S[1] & 0x80))\n+        return error(\"Non-canonical signature: S value excessively padded\");\n+\n+    if (flags & SCRIPT_VERIFY_LOW_S) {\n+        // If the S value is above the order of the curve divided by two, its\n+        // complement modulo the order could have been used instead, which is\n+        // one byte shorter when encoded correctly.\n+        if (!CKey::CheckSignatureElement(S, nLenS, true))\n+            return error(\"Non-canonical signature: S value is unnecessarily high\");\n+    }\n+\n+    return true;\n+}\n+\n+bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType)\n+{\n+    CScript::const_iterator pc = script.begin();\n+    CScript::const_iterator pend = script.end();\n+    CScript::const_iterator pbegincodehash = script.begin();\n+    opcodetype opcode;\n+    valtype vchPushValue;\n+    vector<bool> vfExec;\n+    vector<valtype> altstack;\n+    if (script.size() > 10000)\n+        return false;\n+    int nOpCount = 0;\n+\n+    try\n+    {\n+        while (pc < pend)\n+        {\n+            bool fExec = !count(vfExec.begin(), vfExec.end(), false);\n+\n+            //\n+            // Read instruction\n+            //\n+            if (!script.GetOp(pc, opcode, vchPushValue))\n+                return false;\n+            if (vchPushValue.size() > MAX_SCRIPT_ELEMENT_SIZE)\n+                return false;\n+\n+            // Note how OP_RESERVED does not count towards the opcode limit.\n+            if (opcode > OP_16 && ++nOpCount > 201)\n+                return false;\n+\n+            if (opcode == OP_CAT ||\n+                opcode == OP_SUBSTR ||\n+                opcode == OP_LEFT ||\n+                opcode == OP_RIGHT ||\n+                opcode == OP_INVERT ||\n+                opcode == OP_AND ||\n+                opcode == OP_OR ||\n+                opcode == OP_XOR ||\n+                opcode == OP_2MUL ||\n+                opcode == OP_2DIV ||\n+                opcode == OP_MUL ||\n+                opcode == OP_DIV ||\n+                opcode == OP_MOD ||\n+                opcode == OP_LSHIFT ||\n+                opcode == OP_RSHIFT)\n+                return false; // Disabled opcodes.\n+\n+            if (fExec && 0 <= opcode && opcode <= OP_PUSHDATA4)\n+                stack.push_back(vchPushValue);\n+            else if (fExec || (OP_IF <= opcode && opcode <= OP_ENDIF))\n+            switch (opcode)\n+            {\n+                //\n+                // Push value\n+                //\n+                case OP_1NEGATE:\n+                case OP_1:\n+                case OP_2:\n+                case OP_3:\n+                case OP_4:\n+                case OP_5:\n+                case OP_6:\n+                case OP_7:\n+                case OP_8:\n+                case OP_9:\n+                case OP_10:\n+                case OP_11:\n+                case OP_12:\n+                case OP_13:\n+                case OP_14:\n+                case OP_15:\n+                case OP_16:\n+                {\n+                    // ( -- value)\n+                    CScriptNum bn((int)opcode - (int)(OP_1 - 1));\n+                    stack.push_back(bn.getvch());\n+                }\n+                break;\n+\n+\n+                //\n+                // Control\n+                //\n+                case OP_NOP:\n+                case OP_NOP1: case OP_NOP2: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n+                case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\n+                break;\n+\n+                case OP_IF:\n+                case OP_NOTIF:\n+                {\n+                    // <expression> if [statements] [else [statements]] endif\n+                    bool fValue = false;\n+                    if (fExec)\n+                    {\n+                        if (stack.size() < 1)\n+                            return false;\n+                        valtype& vch = stacktop(-1);\n+                        fValue = CastToBool(vch);\n+                        if (opcode == OP_NOTIF)\n+                            fValue = !fValue;\n+                        popstack(stack);\n+                    }\n+                    vfExec.push_back(fValue);\n+                }\n+                break;\n+\n+                case OP_ELSE:\n+                {\n+                    if (vfExec.empty())\n+                        return false;\n+                    vfExec.back() = !vfExec.back();\n+                }\n+                break;\n+\n+                case OP_ENDIF:\n+                {\n+                    if (vfExec.empty())\n+                        return false;\n+                    vfExec.pop_back();\n+                }\n+                break;\n+\n+                case OP_VERIFY:\n+                {\n+                    // (true -- ) or\n+                    // (false -- false) and return\n+                    if (stack.size() < 1)\n+                        return false;\n+                    bool fValue = CastToBool(stacktop(-1));\n+                    if (fValue)\n+                        popstack(stack);\n+                    else\n+                        return false;\n+                }\n+                break;\n+\n+                case OP_RETURN:\n+                {\n+                    return false;\n+                }\n+                break;\n+\n+\n+                //\n+                // Stack ops\n+                //\n+                case OP_TOALTSTACK:\n+                {\n+                    if (stack.size() < 1)\n+                        return false;\n+                    altstack.push_back(stacktop(-1));\n+                    popstack(stack);\n+                }\n+                break;\n+\n+                case OP_FROMALTSTACK:\n+                {\n+                    if (altstack.size() < 1)\n+                        return false;\n+                    stack.push_back(altstacktop(-1));\n+                    popstack(altstack);\n+                }\n+                break;\n+\n+                case OP_2DROP:\n+                {\n+                    // (x1 x2 -- )\n+                    if (stack.size() < 2)\n+                        return false;\n+                    popstack(stack);\n+                    popstack(stack);\n+                }\n+                break;\n+\n+                case OP_2DUP:\n+                {\n+                    // (x1 x2 -- x1 x2 x1 x2)\n+                    if (stack.size() < 2)\n+                        return false;\n+                    valtype vch1 = stacktop(-2);\n+                    valtype vch2 = stacktop(-1);\n+                    stack.push_back(vch1);\n+                    stack.push_back(vch2);\n+                }\n+                break;\n+\n+                case OP_3DUP:\n+                {\n+                    // (x1 x2 x3 -- x1 x2 x3 x1 x2 x3)\n+                    if (stack.size() < 3)\n+                        return false;\n+                    valtype vch1 = stacktop(-3);\n+                    valtype vch2 = stacktop(-2);\n+                    valtype vch3 = stacktop(-1);\n+                    stack.push_back(vch1);\n+                    stack.push_back(vch2);\n+                    stack.push_back(vch3);\n+                }\n+                break;\n+\n+                case OP_2OVER:\n+                {\n+                    // (x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2)\n+                    if (stack.size() < 4)\n+                        return false;\n+                    valtype vch1 = stacktop(-4);\n+                    valtype vch2 = stacktop(-3);\n+                    stack.push_back(vch1);\n+                    stack.push_back(vch2);\n+                }\n+                break;\n+\n+                case OP_2ROT:\n+                {\n+                    // (x1 x2 x3 x4 x5 x6 -- x3 x4 x5 x6 x1 x2)\n+                    if (stack.size() < 6)\n+                        return false;\n+                    valtype vch1 = stacktop(-6);\n+                    valtype vch2 = stacktop(-5);\n+                    stack.erase(stack.end()-6, stack.end()-4);\n+                    stack.push_back(vch1);\n+                    stack.push_back(vch2);\n+                }\n+                break;\n+\n+                case OP_2SWAP:\n+                {\n+                    // (x1 x2 x3 x4 -- x3 x4 x1 x2)\n+                    if (stack.size() < 4)\n+                        return false;\n+                    swap(stacktop(-4), stacktop(-2));\n+                    swap(stacktop(-3), stacktop(-1));\n+                }\n+                break;\n+\n+                case OP_IFDUP:\n+                {\n+                    // (x - 0 | x x)\n+                    if (stack.size() < 1)\n+                        return false;\n+                    valtype vch = stacktop(-1);\n+                    if (CastToBool(vch))\n+                        stack.push_back(vch);\n+                }\n+                break;\n+\n+                case OP_DEPTH:\n+                {\n+                    // -- stacksize\n+                    CScriptNum bn(stack.size());\n+                    stack.push_back(bn.getvch());\n+                }\n+                break;\n+\n+                case OP_DROP:\n+                {\n+                    // (x -- )\n+                    if (stack.size() < 1)\n+                        return false;\n+                    popstack(stack);\n+                }\n+                break;\n+\n+                case OP_DUP:\n+                {\n+                    // (x -- x x)\n+                    if (stack.size() < 1)\n+                        return false;\n+                    valtype vch = stacktop(-1);\n+                    stack.push_back(vch);\n+                }\n+                break;\n+\n+                case OP_NIP:\n+                {\n+                    // (x1 x2 -- x2)\n+                    if (stack.size() < 2)\n+                        return false;\n+                    stack.erase(stack.end() - 2);\n+                }\n+                break;\n+\n+                case OP_OVER:\n+                {\n+                    // (x1 x2 -- x1 x2 x1)\n+                    if (stack.size() < 2)\n+                        return false;\n+                    valtype vch = stacktop(-2);\n+                    stack.push_back(vch);\n+                }\n+                break;\n+\n+                case OP_PICK:\n+                case OP_ROLL:\n+                {\n+                    // (xn ... x2 x1 x0 n - xn ... x2 x1 x0 xn)\n+                    // (xn ... x2 x1 x0 n - ... x2 x1 x0 xn)\n+                    if (stack.size() < 2)\n+                        return false;\n+                    int n = CScriptNum(stacktop(-1)).getint();\n+                    popstack(stack);\n+                    if (n < 0 || n >= (int)stack.size())\n+                        return false;\n+                    valtype vch = stacktop(-n-1);\n+                    if (opcode == OP_ROLL)\n+                        stack.erase(stack.end()-n-1);\n+                    stack.push_back(vch);\n+                }\n+                break;\n+\n+                case OP_ROT:\n+                {\n+                    // (x1 x2 x3 -- x2 x3 x1)\n+                    //  x2 x1 x3  after first swap\n+                    //  x2 x3 x1  after second swap\n+                    if (stack.size() < 3)\n+                        return false;\n+                    swap(stacktop(-3), stacktop(-2));\n+                    swap(stacktop(-2), stacktop(-1));\n+                }\n+                break;\n+\n+                case OP_SWAP:\n+                {\n+                    // (x1 x2 -- x2 x1)\n+                    if (stack.size() < 2)\n+                        return false;\n+                    swap(stacktop(-2), stacktop(-1));\n+                }\n+                break;\n+\n+                case OP_TUCK:\n+                {\n+                    // (x1 x2 -- x2 x1 x2)\n+                    if (stack.size() < 2)\n+                        return false;\n+                    valtype vch = stacktop(-1);\n+                    stack.insert(stack.end()-2, vch);\n+                }\n+                break;\n+\n+\n+                case OP_SIZE:\n+                {\n+                    // (in -- in size)\n+                    if (stack.size() < 1)\n+                        return false;\n+                    CScriptNum bn(stacktop(-1).size());\n+                    stack.push_back(bn.getvch());\n+                }\n+                break;\n+\n+\n+                //\n+                // Bitwise logic\n+                //\n+                case OP_EQUAL:\n+                case OP_EQUALVERIFY:\n+                //case OP_NOTEQUAL: // use OP_NUMNOTEQUAL\n+                {\n+                    // (x1 x2 - bool)\n+                    if (stack.size() < 2)\n+                        return false;\n+                    valtype& vch1 = stacktop(-2);\n+                    valtype& vch2 = stacktop(-1);\n+                    bool fEqual = (vch1 == vch2);\n+                    // OP_NOTEQUAL is disabled because it would be too easy to say\n+                    // something like n != 1 and have some wiseguy pass in 1 with extra\n+                    // zero bytes after it (numerically, 0x01 == 0x0001 == 0x000001)\n+                    //if (opcode == OP_NOTEQUAL)\n+                    //    fEqual = !fEqual;\n+                    popstack(stack);\n+                    popstack(stack);\n+                    stack.push_back(fEqual ? vchTrue : vchFalse);\n+                    if (opcode == OP_EQUALVERIFY)\n+                    {\n+                        if (fEqual)\n+                            popstack(stack);\n+                        else\n+                            return false;\n+                    }\n+                }\n+                break;\n+\n+\n+                //\n+                // Numeric\n+                //\n+                case OP_1ADD:\n+                case OP_1SUB:\n+                case OP_NEGATE:\n+                case OP_ABS:\n+                case OP_NOT:\n+                case OP_0NOTEQUAL:\n+                {\n+                    // (in -- out)\n+                    if (stack.size() < 1)\n+                        return false;\n+                    CScriptNum bn(stacktop(-1));\n+                    switch (opcode)\n+                    {\n+                    case OP_1ADD:       bn += bnOne; break;\n+                    case OP_1SUB:       bn -= bnOne; break;\n+                    case OP_NEGATE:     bn = -bn; break;\n+                    case OP_ABS:        if (bn < bnZero) bn = -bn; break;\n+                    case OP_NOT:        bn = (bn == bnZero); break;\n+                    case OP_0NOTEQUAL:  bn = (bn != bnZero); break;\n+                    default:            assert(!\"invalid opcode\"); break;\n+                    }\n+                    popstack(stack);\n+                    stack.push_back(bn.getvch());\n+                }\n+                break;\n+\n+                case OP_ADD:\n+                case OP_SUB:\n+                case OP_BOOLAND:\n+                case OP_BOOLOR:\n+                case OP_NUMEQUAL:\n+                case OP_NUMEQUALVERIFY:\n+                case OP_NUMNOTEQUAL:\n+                case OP_LESSTHAN:\n+                case OP_GREATERTHAN:\n+                case OP_LESSTHANOREQUAL:\n+                case OP_GREATERTHANOREQUAL:\n+                case OP_MIN:\n+                case OP_MAX:\n+                {\n+                    // (x1 x2 -- out)\n+                    if (stack.size() < 2)\n+                        return false;\n+                    CScriptNum bn1(stacktop(-2));\n+                    CScriptNum bn2(stacktop(-1));\n+                    CScriptNum bn(0);\n+                    switch (opcode)\n+                    {\n+                    case OP_ADD:\n+                        bn = bn1 + bn2;\n+                        break;\n+\n+                    case OP_SUB:\n+                        bn = bn1 - bn2;\n+                        break;\n+\n+                    case OP_BOOLAND:             bn = (bn1 != bnZero && bn2 != bnZero); break;\n+                    case OP_BOOLOR:              bn = (bn1 != bnZero || bn2 != bnZero); break;\n+                    case OP_NUMEQUAL:            bn = (bn1 == bn2); break;\n+                    case OP_NUMEQUALVERIFY:      bn = (bn1 == bn2); break;\n+                    case OP_NUMNOTEQUAL:         bn = (bn1 != bn2); break;\n+                    case OP_LESSTHAN:            bn = (bn1 < bn2); break;\n+                    case OP_GREATERTHAN:         bn = (bn1 > bn2); break;\n+                    case OP_LESSTHANOREQUAL:     bn = (bn1 <= bn2); break;\n+                    case OP_GREATERTHANOREQUAL:  bn = (bn1 >= bn2); break;\n+                    case OP_MIN:                 bn = (bn1 < bn2 ? bn1 : bn2); break;\n+                    case OP_MAX:                 bn = (bn1 > bn2 ? bn1 : bn2); break;\n+                    default:                     assert(!\"invalid opcode\"); break;\n+                    }\n+                    popstack(stack);\n+                    popstack(stack);\n+                    stack.push_back(bn.getvch());\n+\n+                    if (opcode == OP_NUMEQUALVERIFY)\n+                    {\n+                        if (CastToBool(stacktop(-1)))\n+                            popstack(stack);\n+                        else\n+                            return false;\n+                    }\n+                }\n+                break;\n+\n+                case OP_WITHIN:\n+                {\n+                    // (x min max -- out)\n+                    if (stack.size() < 3)\n+                        return false;\n+                    CScriptNum bn1(stacktop(-3));\n+                    CScriptNum bn2(stacktop(-2));\n+                    CScriptNum bn3(stacktop(-1));\n+                    bool fValue = (bn2 <= bn1 && bn1 < bn3);\n+                    popstack(stack);\n+                    popstack(stack);\n+                    popstack(stack);\n+                    stack.push_back(fValue ? vchTrue : vchFalse);\n+                }\n+                break;\n+\n+\n+                //\n+                // Crypto\n+                //\n+                case OP_RIPEMD160:\n+                case OP_SHA1:\n+                case OP_SHA256:\n+                case OP_HASH160:\n+                case OP_HASH256:\n+                {\n+                    // (in -- hash)\n+                    if (stack.size() < 1)\n+                        return false;\n+                    valtype& vch = stacktop(-1);\n+                    valtype vchHash((opcode == OP_RIPEMD160 || opcode == OP_SHA1 || opcode == OP_HASH160) ? 20 : 32);\n+                    if (opcode == OP_RIPEMD160)\n+                        CRIPEMD160().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n+                    else if (opcode == OP_SHA1)\n+                        CSHA1().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n+                    else if (opcode == OP_SHA256)\n+                        CSHA256().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n+                    else if (opcode == OP_HASH160)\n+                        CHash160().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n+                    else if (opcode == OP_HASH256)\n+                        CHash256().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n+                    popstack(stack);\n+                    stack.push_back(vchHash);\n+                }\n+                break;\n+\n+                case OP_CODESEPARATOR:\n+                {\n+                    // Hash starts after the code separator\n+                    pbegincodehash = pc;\n+                }\n+                break;\n+\n+                case OP_CHECKSIG:\n+                case OP_CHECKSIGVERIFY:\n+                {\n+                    // (sig pubkey -- bool)\n+                    if (stack.size() < 2)\n+                        return false;\n+\n+                    valtype& vchSig    = stacktop(-2);\n+                    valtype& vchPubKey = stacktop(-1);\n+\n+                    // Subset of script starting at the most recent codeseparator\n+                    CScript scriptCode(pbegincodehash, pend);\n+\n+                    // Drop the signature, since there's no way for a signature to sign itself\n+                    scriptCode.FindAndDelete(CScript(vchSig));\n+\n+                    bool fSuccess = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n+                        CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType, flags);\n+\n+                    popstack(stack);\n+                    popstack(stack);\n+                    stack.push_back(fSuccess ? vchTrue : vchFalse);\n+                    if (opcode == OP_CHECKSIGVERIFY)\n+                    {\n+                        if (fSuccess)\n+                            popstack(stack);\n+                        else\n+                            return false;\n+                    }\n+                }\n+                break;\n+\n+                case OP_CHECKMULTISIG:\n+                case OP_CHECKMULTISIGVERIFY:\n+                {\n+                    // ([sig ...] num_of_signatures [pubkey ...] num_of_pubkeys -- bool)\n+\n+                    int i = 1;\n+                    if ((int)stack.size() < i)\n+                        return false;\n+\n+                    int nKeysCount = CScriptNum(stacktop(-i)).getint();\n+                    if (nKeysCount < 0 || nKeysCount > 20)\n+                        return false;\n+                    nOpCount += nKeysCount;\n+                    if (nOpCount > 201)\n+                        return false;\n+                    int ikey = ++i;\n+                    i += nKeysCount;\n+                    if ((int)stack.size() < i)\n+                        return false;\n+\n+                    int nSigsCount = CScriptNum(stacktop(-i)).getint();\n+                    if (nSigsCount < 0 || nSigsCount > nKeysCount)\n+                        return false;\n+                    int isig = ++i;\n+                    i += nSigsCount;\n+                    if ((int)stack.size() < i)\n+                        return false;\n+\n+                    // Subset of script starting at the most recent codeseparator\n+                    CScript scriptCode(pbegincodehash, pend);\n+\n+                    // Drop the signatures, since there's no way for a signature to sign itself\n+                    for (int k = 0; k < nSigsCount; k++)\n+                    {\n+                        valtype& vchSig = stacktop(-isig-k);\n+                        scriptCode.FindAndDelete(CScript(vchSig));\n+                    }\n+\n+                    bool fSuccess = true;\n+                    while (fSuccess && nSigsCount > 0)\n+                    {\n+                        valtype& vchSig    = stacktop(-isig);\n+                        valtype& vchPubKey = stacktop(-ikey);\n+\n+                        // Check signature\n+                        bool fOk = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n+                            CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType, flags);\n+\n+                        if (fOk) {\n+                            isig++;\n+                            nSigsCount--;\n+                        }\n+                        ikey++;\n+                        nKeysCount--;\n+\n+                        // If there are more signatures left than keys left,\n+                        // then too many signatures have failed\n+                        if (nSigsCount > nKeysCount)\n+                            fSuccess = false;\n+                    }\n+\n+                    // Clean up stack of actual arguments\n+                    while (i-- > 1)\n+                        popstack(stack);\n+\n+                    // A bug causes CHECKMULTISIG to consume one extra argument\n+                    // whose contents were not checked in any way.\n+                    //\n+                    // Unfortunately this is a potential source of mutability,\n+                    // so optionally verify it is exactly equal to zero prior\n+                    // to removing it from the stack.\n+                    if (stack.size() < 1)\n+                        return false;\n+                    if ((flags & SCRIPT_VERIFY_NULLDUMMY) && stacktop(-1).size())\n+                        return error(\"CHECKMULTISIG dummy argument not null\");\n+                    popstack(stack);\n+\n+                    stack.push_back(fSuccess ? vchTrue : vchFalse);\n+\n+                    if (opcode == OP_CHECKMULTISIGVERIFY)\n+                    {\n+                        if (fSuccess)\n+                            popstack(stack);\n+                        else\n+                            return false;\n+                    }\n+                }\n+                break;\n+\n+                default:\n+                    return false;\n+            }\n+\n+            // Size limits\n+            if (stack.size() + altstack.size() > 1000)\n+                return false;\n+        }\n+    }\n+    catch (...)\n+    {\n+        return false;\n+    }\n+\n+    if (!vfExec.empty())\n+        return false;\n+\n+    return true;\n+}\n+\n+namespace {\n+\n+/** Wrapper that serializes like CTransaction, but with the modifications\n+ *  required for the signature hash done in-place\n+ */\n+class CTransactionSignatureSerializer {\n+private:\n+    const CTransaction &txTo;  // reference to the spending transaction (the one being serialized)\n+    const CScript &scriptCode; // output script being consumed\n+    const unsigned int nIn;    // input index of txTo being signed\n+    const bool fAnyoneCanPay;  // whether the hashtype has the SIGHASH_ANYONECANPAY flag set\n+    const bool fHashSingle;    // whether the hashtype is SIGHASH_SINGLE\n+    const bool fHashNone;      // whether the hashtype is SIGHASH_NONE\n+\n+public:\n+    CTransactionSignatureSerializer(const CTransaction &txToIn, const CScript &scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :\n+        txTo(txToIn), scriptCode(scriptCodeIn), nIn(nInIn),\n+        fAnyoneCanPay(!!(nHashTypeIn & SIGHASH_ANYONECANPAY)),\n+        fHashSingle((nHashTypeIn & 0x1f) == SIGHASH_SINGLE),\n+        fHashNone((nHashTypeIn & 0x1f) == SIGHASH_NONE) {}\n+\n+    /** Serialize the passed scriptCode, skipping OP_CODESEPARATORs */\n+    template<typename S>\n+    void SerializeScriptCode(S &s, int nType, int nVersion) const {\n+        CScript::const_iterator it = scriptCode.begin();\n+        CScript::const_iterator itBegin = it;\n+        opcodetype opcode;\n+        unsigned int nCodeSeparators = 0;\n+        while (scriptCode.GetOp(it, opcode)) {\n+            if (opcode == OP_CODESEPARATOR)\n+                nCodeSeparators++;\n+        }\n+        ::WriteCompactSize(s, scriptCode.size() - nCodeSeparators);\n+        it = itBegin;\n+        while (scriptCode.GetOp(it, opcode)) {\n+            if (opcode == OP_CODESEPARATOR) {\n+                s.write((char*)&itBegin[0], it-itBegin-1);\n+                itBegin = it;\n+            }\n+        }\n+        s.write((char*)&itBegin[0], it-itBegin);\n+    }\n+\n+    /** Serialize an input of txTo */\n+    template<typename S>\n+    void SerializeInput(S &s, unsigned int nInput, int nType, int nVersion) const {\n+        // In case of SIGHASH_ANYONECANPAY, only the input being signed is serialized\n+        if (fAnyoneCanPay)\n+            nInput = nIn;\n+        // Serialize the prevout\n+        ::Serialize(s, txTo.vin[nInput].prevout, nType, nVersion);\n+        // Serialize the script\n+        if (nInput != nIn)\n+            // Blank out other inputs' signatures\n+            ::Serialize(s, CScript(), nType, nVersion);\n+        else\n+            SerializeScriptCode(s, nType, nVersion);\n+        // Serialize the nSequence\n+        if (nInput != nIn && (fHashSingle || fHashNone))\n+            // let the others update at will\n+            ::Serialize(s, (int)0, nType, nVersion);\n+        else\n+            ::Serialize(s, txTo.vin[nInput].nSequence, nType, nVersion);\n+    }\n+\n+    /** Serialize an output of txTo */\n+    template<typename S>\n+    void SerializeOutput(S &s, unsigned int nOutput, int nType, int nVersion) const {\n+        if (fHashSingle && nOutput != nIn)\n+            // Do not lock-in the txout payee at other indices as txin\n+            ::Serialize(s, CTxOut(), nType, nVersion);\n+        else\n+            ::Serialize(s, txTo.vout[nOutput], nType, nVersion);\n+    }\n+\n+    /** Serialize txTo */\n+    template<typename S>\n+    void Serialize(S &s, int nType, int nVersion) const {\n+        // Serialize nVersion\n+        ::Serialize(s, txTo.nVersion, nType, nVersion);\n+        // Serialize vin\n+        unsigned int nInputs = fAnyoneCanPay ? 1 : txTo.vin.size();\n+        ::WriteCompactSize(s, nInputs);\n+        for (unsigned int nInput = 0; nInput < nInputs; nInput++)\n+             SerializeInput(s, nInput, nType, nVersion);\n+        // Serialize vout\n+        unsigned int nOutputs = fHashNone ? 0 : (fHashSingle ? nIn+1 : txTo.vout.size());\n+        ::WriteCompactSize(s, nOutputs);\n+        for (unsigned int nOutput = 0; nOutput < nOutputs; nOutput++)\n+             SerializeOutput(s, nOutput, nType, nVersion);\n+        // Serialie nLockTime\n+        ::Serialize(s, txTo.nLockTime, nType, nVersion);\n+    }\n+};\n+\n+} // anon namespace\n+\n+uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+{\n+    if (nIn >= txTo.vin.size()) {\n+        LogPrintf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n+        return 1;\n+    }\n+\n+    // Check for invalid use of SIGHASH_SINGLE\n+    if ((nHashType & 0x1f) == SIGHASH_SINGLE) {\n+        if (nIn >= txTo.vout.size()) {\n+            LogPrintf(\"ERROR: SignatureHash() : nOut=%d out of range\\n\", nIn);\n+            return 1;\n+        }\n+    }\n+\n+    // Wrapper to serialize only the necessary parts of the transaction being signed\n+    CTransactionSignatureSerializer txTmp(txTo, scriptCode, nIn, nHashType);\n+\n+    // Serialize and hash\n+    CHashWriter ss(SER_GETHASH, 0);\n+    ss << txTmp << nHashType;\n+    return ss.GetHash();\n+}\n+\n+// Valid signature cache, to avoid doing expensive ECDSA signature checking\n+// twice for every transaction (once when accepted into memory pool, and\n+// again when accepted into the block chain)\n+class CSignatureCache\n+{\n+private:\n+     // sigdata_type is (signature hash, signature, public key):\n+    typedef boost::tuple<uint256, std::vector<unsigned char>, CPubKey> sigdata_type;\n+    std::set< sigdata_type> setValid;\n+    boost::shared_mutex cs_sigcache;\n+\n+public:\n+    bool\n+    Get(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n+    {\n+        boost::shared_lock<boost::shared_mutex> lock(cs_sigcache);\n+\n+        sigdata_type k(hash, vchSig, pubKey);\n+        std::set<sigdata_type>::iterator mi = setValid.find(k);\n+        if (mi != setValid.end())\n+            return true;\n+        return false;\n+    }\n+\n+    void Set(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n+    {\n+        // DoS prevention: limit cache size to less than 10MB\n+        // (~200 bytes per cache entry times 50,000 entries)\n+        // Since there are a maximum of 20,000 signature operations per block\n+        // 50,000 is a reasonable default.\n+        int64_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", 50000);\n+        if (nMaxCacheSize <= 0) return;\n+\n+        boost::unique_lock<boost::shared_mutex> lock(cs_sigcache);\n+\n+        while (static_cast<int64_t>(setValid.size()) > nMaxCacheSize)\n+        {\n+            // Evict a random entry. Random because that helps\n+            // foil would-be DoS attackers who might try to pre-generate\n+            // and re-use a set of valid signatures just-slightly-greater\n+            // than our cache size.\n+            uint256 randomHash = GetRandHash();\n+            std::vector<unsigned char> unused;\n+            std::set<sigdata_type>::iterator it =\n+                setValid.lower_bound(sigdata_type(randomHash, unused, unused));\n+            if (it == setValid.end())\n+                it = setValid.begin();\n+            setValid.erase(*it);\n+        }\n+\n+        sigdata_type k(hash, vchSig, pubKey);\n+        setValid.insert(k);\n+    }\n+};\n+\n+bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, int flags)\n+{\n+    static CSignatureCache signatureCache;\n+\n+    CPubKey pubkey(vchPubKey);\n+    if (!pubkey.IsValid())\n+        return false;\n+\n+    // Hash type is one byte tacked on to the end of the signature\n+    if (vchSig.empty())\n+        return false;\n+    if (nHashType == 0)\n+        nHashType = vchSig.back();\n+    else if (nHashType != vchSig.back())\n+        return false;\n+    vchSig.pop_back();\n+\n+    uint256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n+\n+    if (signatureCache.Get(sighash, vchSig, pubkey))\n+        return true;\n+\n+    if (!pubkey.Verify(sighash, vchSig))\n+        return false;\n+\n+    if (!(flags & SCRIPT_VERIFY_NOCACHE))\n+        signatureCache.Set(sighash, vchSig, pubkey);\n+\n+    return true;\n+}\n+\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n+                  unsigned int flags, int nHashType)\n+{\n+    vector<vector<unsigned char> > stack, stackCopy;\n+    if (!EvalScript(stack, scriptSig, txTo, nIn, flags, nHashType))\n+        return false;\n+    if (flags & SCRIPT_VERIFY_P2SH)\n+        stackCopy = stack;\n+    if (!EvalScript(stack, scriptPubKey, txTo, nIn, flags, nHashType))\n+        return false;\n+    if (stack.empty())\n+        return false;\n+\n+    if (CastToBool(stack.back()) == false)\n+        return false;\n+\n+    // Additional validation for spend-to-script-hash transactions:\n+    if ((flags & SCRIPT_VERIFY_P2SH) && scriptPubKey.IsPayToScriptHash())\n+    {\n+        if (!scriptSig.IsPushOnly()) // scriptSig must be literals-only\n+            return false;            // or validation fails\n+\n+        // stackCopy cannot be empty here, because if it was the\n+        // P2SH  HASH <> EQUAL  scriptPubKey would be evaluated with\n+        // an empty stack and the EvalScript above would return false.\n+        assert(!stackCopy.empty());\n+\n+        const valtype& pubKeySerialized = stackCopy.back();\n+        CScript pubKey2(pubKeySerialized.begin(), pubKeySerialized.end());\n+        popstack(stackCopy);\n+\n+        if (!EvalScript(stackCopy, pubKey2, txTo, nIn, flags, nHashType))\n+            return false;\n+        if (stackCopy.empty())\n+            return false;\n+        return CastToBool(stackCopy.back());\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "0c6f8b9d134a89fc246db20213144c0673c10716",
        "filename": "src/script/interpreter.h",
        "status": "added",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36dc780db62ee93bda6e240a1c2608174cf0bcaa/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36dc780db62ee93bda6e240a1c2608174cf0bcaa/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=36dc780db62ee93bda6e240a1c2608174cf0bcaa",
        "patch": "@@ -0,0 +1,45 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef H_BITCOIN_SCRIPT_INTERPRETER\n+#define H_BITCOIN_SCRIPT_INTERPRETER\n+\n+#include <vector>\n+#include <stdint.h>\n+#include <string>\n+\n+class uint256;\n+class CScript;\n+class CTransaction;\n+\n+/** Signature hash types/flags */\n+enum\n+{\n+    SIGHASH_ALL = 1,\n+    SIGHASH_NONE = 2,\n+    SIGHASH_SINGLE = 3,\n+    SIGHASH_ANYONECANPAY = 0x80,\n+};\n+\n+/** Script verification flags */\n+enum\n+{\n+    SCRIPT_VERIFY_NONE      = 0,\n+    SCRIPT_VERIFY_P2SH      = (1U << 0), // evaluate P2SH (BIP16) subscripts\n+    SCRIPT_VERIFY_STRICTENC = (1U << 1), // enforce strict conformance to DER and SEC2 for signatures and pubkeys\n+    SCRIPT_VERIFY_LOW_S     = (1U << 2), // enforce low S values (<n/2) in signatures (depends on STRICTENC)\n+    SCRIPT_VERIFY_NOCACHE   = (1U << 3), // do not store results in signature cache (but do query it)\n+    SCRIPT_VERIFY_NULLDUMMY = (1U << 4), // verify dummy stack item consumed by CHECKMULTISIG is of zero-length\n+};\n+\n+bool IsCanonicalPubKey(const std::vector<unsigned char> &vchPubKey, unsigned int flags);\n+bool IsCanonicalSignature(const std::vector<unsigned char> &vchSig, unsigned int flags);\n+\n+uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+bool CheckSig(std::vector<unsigned char> vchSig, const std::vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, int flags);\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n+\n+#endif"
      },
      {
        "sha": "fb3766ab158d86f014789eb524a9630081100f6d",
        "filename": "src/scriptutils.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1060,
        "changes": 1060,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36dc780db62ee93bda6e240a1c2608174cf0bcaa/src/scriptutils.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36dc780db62ee93bda6e240a1c2608174cf0bcaa/src/scriptutils.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scriptutils.cpp?ref=36dc780db62ee93bda6e240a1c2608174cf0bcaa",
        "patch": "@@ -5,69 +5,17 @@\n \n #include \"scriptutils.h\"\n \n-#include \"crypto/ripemd160.h\"\n-#include \"crypto/sha1.h\"\n-#include \"crypto/sha2.h\"\n #include \"core.h\"\n-#include \"hash.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"random.h\"\n-#include \"sync.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n \n-#include <boost/foreach.hpp>\n-#include <boost/thread.hpp>\n-#include <boost/tuple/tuple_comparison.hpp>\n-#include <boost/tuple/tuple.hpp>\n-\n #include <boost/foreach.hpp>\n \n using namespace std;\n-using namespace boost;\n \n typedef vector<unsigned char> valtype;\n-static const valtype vchFalse(0);\n-static const valtype vchZero(0);\n-static const valtype vchTrue(1, 1);\n-static const CScriptNum bnZero(0);\n-static const CScriptNum bnOne(1);\n-static const CScriptNum bnFalse(0);\n-static const CScriptNum bnTrue(1);\n-\n-bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, int flags);\n-\n-bool CastToBool(const valtype& vch)\n-{\n-    for (unsigned int i = 0; i < vch.size(); i++)\n-    {\n-        if (vch[i] != 0)\n-        {\n-            // Can be negative zero\n-            if (i == vch.size()-1 && vch[i] == 0x80)\n-                return false;\n-            return true;\n-        }\n-    }\n-    return false;\n-}\n-\n-\n-\n-//\n-// Script is a stack machine (like Forth) that evaluates a predicate\n-// returning a bool indicating valid or not.  There are no loops.\n-//\n-#define stacktop(i)  (stack.at(stack.size()+(i)))\n-#define altstacktop(i)  (altstack.at(altstack.size()+(i)))\n-static inline void popstack(vector<valtype>& stack)\n-{\n-    if (stack.empty())\n-        throw runtime_error(\"popstack() : stack empty\");\n-    stack.pop_back();\n-}\n-\n \n const char* GetTxnOutputType(txnouttype t)\n {\n@@ -83,972 +31,6 @@ const char* GetTxnOutputType(txnouttype t)\n     return NULL;\n }\n \n-bool IsCanonicalPubKey(const valtype &vchPubKey, unsigned int flags) {\n-    if (!(flags & SCRIPT_VERIFY_STRICTENC))\n-        return true;\n-\n-    if (vchPubKey.size() < 33)\n-        return error(\"Non-canonical public key: too short\");\n-    if (vchPubKey[0] == 0x04) {\n-        if (vchPubKey.size() != 65)\n-            return error(\"Non-canonical public key: invalid length for uncompressed key\");\n-    } else if (vchPubKey[0] == 0x02 || vchPubKey[0] == 0x03) {\n-        if (vchPubKey.size() != 33)\n-            return error(\"Non-canonical public key: invalid length for compressed key\");\n-    } else {\n-        return error(\"Non-canonical public key: compressed nor uncompressed\");\n-    }\n-    return true;\n-}\n-\n-bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n-    if (!(flags & SCRIPT_VERIFY_STRICTENC))\n-        return true;\n-\n-    // See https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623\n-    // A canonical signature exists of: <30> <total len> <02> <len R> <R> <02> <len S> <S> <hashtype>\n-    // Where R and S are not negative (their first byte has its highest bit not set), and not\n-    // excessively padded (do not start with a 0 byte, unless an otherwise negative number follows,\n-    // in which case a single 0 byte is necessary and even required).\n-    if (vchSig.size() < 9)\n-        return error(\"Non-canonical signature: too short\");\n-    if (vchSig.size() > 73)\n-        return error(\"Non-canonical signature: too long\");\n-    unsigned char nHashType = vchSig[vchSig.size() - 1] & (~(SIGHASH_ANYONECANPAY));\n-    if (nHashType < SIGHASH_ALL || nHashType > SIGHASH_SINGLE)\n-        return error(\"Non-canonical signature: unknown hashtype byte\");\n-    if (vchSig[0] != 0x30)\n-        return error(\"Non-canonical signature: wrong type\");\n-    if (vchSig[1] != vchSig.size()-3)\n-        return error(\"Non-canonical signature: wrong length marker\");\n-    unsigned int nLenR = vchSig[3];\n-    if (5 + nLenR >= vchSig.size())\n-        return error(\"Non-canonical signature: S length misplaced\");\n-    unsigned int nLenS = vchSig[5+nLenR];\n-    if ((unsigned long)(nLenR+nLenS+7) != vchSig.size())\n-        return error(\"Non-canonical signature: R+S length mismatch\");\n-\n-    const unsigned char *R = &vchSig[4];\n-    if (R[-2] != 0x02)\n-        return error(\"Non-canonical signature: R value type mismatch\");\n-    if (nLenR == 0)\n-        return error(\"Non-canonical signature: R length is zero\");\n-    if (R[0] & 0x80)\n-        return error(\"Non-canonical signature: R value negative\");\n-    if (nLenR > 1 && (R[0] == 0x00) && !(R[1] & 0x80))\n-        return error(\"Non-canonical signature: R value excessively padded\");\n-\n-    const unsigned char *S = &vchSig[6+nLenR];\n-    if (S[-2] != 0x02)\n-        return error(\"Non-canonical signature: S value type mismatch\");\n-    if (nLenS == 0)\n-        return error(\"Non-canonical signature: S length is zero\");\n-    if (S[0] & 0x80)\n-        return error(\"Non-canonical signature: S value negative\");\n-    if (nLenS > 1 && (S[0] == 0x00) && !(S[1] & 0x80))\n-        return error(\"Non-canonical signature: S value excessively padded\");\n-\n-    if (flags & SCRIPT_VERIFY_LOW_S) {\n-        // If the S value is above the order of the curve divided by two, its\n-        // complement modulo the order could have been used instead, which is\n-        // one byte shorter when encoded correctly.\n-        if (!CKey::CheckSignatureElement(S, nLenS, true))\n-            return error(\"Non-canonical signature: S value is unnecessarily high\");\n-    }\n-\n-    return true;\n-}\n-\n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType)\n-{\n-    CScript::const_iterator pc = script.begin();\n-    CScript::const_iterator pend = script.end();\n-    CScript::const_iterator pbegincodehash = script.begin();\n-    opcodetype opcode;\n-    valtype vchPushValue;\n-    vector<bool> vfExec;\n-    vector<valtype> altstack;\n-    if (script.size() > 10000)\n-        return false;\n-    int nOpCount = 0;\n-\n-    try\n-    {\n-        while (pc < pend)\n-        {\n-            bool fExec = !count(vfExec.begin(), vfExec.end(), false);\n-\n-            //\n-            // Read instruction\n-            //\n-            if (!script.GetOp(pc, opcode, vchPushValue))\n-                return false;\n-            if (vchPushValue.size() > MAX_SCRIPT_ELEMENT_SIZE)\n-                return false;\n-\n-            // Note how OP_RESERVED does not count towards the opcode limit.\n-            if (opcode > OP_16 && ++nOpCount > 201)\n-                return false;\n-\n-            if (opcode == OP_CAT ||\n-                opcode == OP_SUBSTR ||\n-                opcode == OP_LEFT ||\n-                opcode == OP_RIGHT ||\n-                opcode == OP_INVERT ||\n-                opcode == OP_AND ||\n-                opcode == OP_OR ||\n-                opcode == OP_XOR ||\n-                opcode == OP_2MUL ||\n-                opcode == OP_2DIV ||\n-                opcode == OP_MUL ||\n-                opcode == OP_DIV ||\n-                opcode == OP_MOD ||\n-                opcode == OP_LSHIFT ||\n-                opcode == OP_RSHIFT)\n-                return false; // Disabled opcodes.\n-\n-            if (fExec && 0 <= opcode && opcode <= OP_PUSHDATA4)\n-                stack.push_back(vchPushValue);\n-            else if (fExec || (OP_IF <= opcode && opcode <= OP_ENDIF))\n-            switch (opcode)\n-            {\n-                //\n-                // Push value\n-                //\n-                case OP_1NEGATE:\n-                case OP_1:\n-                case OP_2:\n-                case OP_3:\n-                case OP_4:\n-                case OP_5:\n-                case OP_6:\n-                case OP_7:\n-                case OP_8:\n-                case OP_9:\n-                case OP_10:\n-                case OP_11:\n-                case OP_12:\n-                case OP_13:\n-                case OP_14:\n-                case OP_15:\n-                case OP_16:\n-                {\n-                    // ( -- value)\n-                    CScriptNum bn((int)opcode - (int)(OP_1 - 1));\n-                    stack.push_back(bn.getvch());\n-                }\n-                break;\n-\n-\n-                //\n-                // Control\n-                //\n-                case OP_NOP:\n-                case OP_NOP1: case OP_NOP2: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n-                case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\n-                break;\n-\n-                case OP_IF:\n-                case OP_NOTIF:\n-                {\n-                    // <expression> if [statements] [else [statements]] endif\n-                    bool fValue = false;\n-                    if (fExec)\n-                    {\n-                        if (stack.size() < 1)\n-                            return false;\n-                        valtype& vch = stacktop(-1);\n-                        fValue = CastToBool(vch);\n-                        if (opcode == OP_NOTIF)\n-                            fValue = !fValue;\n-                        popstack(stack);\n-                    }\n-                    vfExec.push_back(fValue);\n-                }\n-                break;\n-\n-                case OP_ELSE:\n-                {\n-                    if (vfExec.empty())\n-                        return false;\n-                    vfExec.back() = !vfExec.back();\n-                }\n-                break;\n-\n-                case OP_ENDIF:\n-                {\n-                    if (vfExec.empty())\n-                        return false;\n-                    vfExec.pop_back();\n-                }\n-                break;\n-\n-                case OP_VERIFY:\n-                {\n-                    // (true -- ) or\n-                    // (false -- false) and return\n-                    if (stack.size() < 1)\n-                        return false;\n-                    bool fValue = CastToBool(stacktop(-1));\n-                    if (fValue)\n-                        popstack(stack);\n-                    else\n-                        return false;\n-                }\n-                break;\n-\n-                case OP_RETURN:\n-                {\n-                    return false;\n-                }\n-                break;\n-\n-\n-                //\n-                // Stack ops\n-                //\n-                case OP_TOALTSTACK:\n-                {\n-                    if (stack.size() < 1)\n-                        return false;\n-                    altstack.push_back(stacktop(-1));\n-                    popstack(stack);\n-                }\n-                break;\n-\n-                case OP_FROMALTSTACK:\n-                {\n-                    if (altstack.size() < 1)\n-                        return false;\n-                    stack.push_back(altstacktop(-1));\n-                    popstack(altstack);\n-                }\n-                break;\n-\n-                case OP_2DROP:\n-                {\n-                    // (x1 x2 -- )\n-                    if (stack.size() < 2)\n-                        return false;\n-                    popstack(stack);\n-                    popstack(stack);\n-                }\n-                break;\n-\n-                case OP_2DUP:\n-                {\n-                    // (x1 x2 -- x1 x2 x1 x2)\n-                    if (stack.size() < 2)\n-                        return false;\n-                    valtype vch1 = stacktop(-2);\n-                    valtype vch2 = stacktop(-1);\n-                    stack.push_back(vch1);\n-                    stack.push_back(vch2);\n-                }\n-                break;\n-\n-                case OP_3DUP:\n-                {\n-                    // (x1 x2 x3 -- x1 x2 x3 x1 x2 x3)\n-                    if (stack.size() < 3)\n-                        return false;\n-                    valtype vch1 = stacktop(-3);\n-                    valtype vch2 = stacktop(-2);\n-                    valtype vch3 = stacktop(-1);\n-                    stack.push_back(vch1);\n-                    stack.push_back(vch2);\n-                    stack.push_back(vch3);\n-                }\n-                break;\n-\n-                case OP_2OVER:\n-                {\n-                    // (x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2)\n-                    if (stack.size() < 4)\n-                        return false;\n-                    valtype vch1 = stacktop(-4);\n-                    valtype vch2 = stacktop(-3);\n-                    stack.push_back(vch1);\n-                    stack.push_back(vch2);\n-                }\n-                break;\n-\n-                case OP_2ROT:\n-                {\n-                    // (x1 x2 x3 x4 x5 x6 -- x3 x4 x5 x6 x1 x2)\n-                    if (stack.size() < 6)\n-                        return false;\n-                    valtype vch1 = stacktop(-6);\n-                    valtype vch2 = stacktop(-5);\n-                    stack.erase(stack.end()-6, stack.end()-4);\n-                    stack.push_back(vch1);\n-                    stack.push_back(vch2);\n-                }\n-                break;\n-\n-                case OP_2SWAP:\n-                {\n-                    // (x1 x2 x3 x4 -- x3 x4 x1 x2)\n-                    if (stack.size() < 4)\n-                        return false;\n-                    swap(stacktop(-4), stacktop(-2));\n-                    swap(stacktop(-3), stacktop(-1));\n-                }\n-                break;\n-\n-                case OP_IFDUP:\n-                {\n-                    // (x - 0 | x x)\n-                    if (stack.size() < 1)\n-                        return false;\n-                    valtype vch = stacktop(-1);\n-                    if (CastToBool(vch))\n-                        stack.push_back(vch);\n-                }\n-                break;\n-\n-                case OP_DEPTH:\n-                {\n-                    // -- stacksize\n-                    CScriptNum bn(stack.size());\n-                    stack.push_back(bn.getvch());\n-                }\n-                break;\n-\n-                case OP_DROP:\n-                {\n-                    // (x -- )\n-                    if (stack.size() < 1)\n-                        return false;\n-                    popstack(stack);\n-                }\n-                break;\n-\n-                case OP_DUP:\n-                {\n-                    // (x -- x x)\n-                    if (stack.size() < 1)\n-                        return false;\n-                    valtype vch = stacktop(-1);\n-                    stack.push_back(vch);\n-                }\n-                break;\n-\n-                case OP_NIP:\n-                {\n-                    // (x1 x2 -- x2)\n-                    if (stack.size() < 2)\n-                        return false;\n-                    stack.erase(stack.end() - 2);\n-                }\n-                break;\n-\n-                case OP_OVER:\n-                {\n-                    // (x1 x2 -- x1 x2 x1)\n-                    if (stack.size() < 2)\n-                        return false;\n-                    valtype vch = stacktop(-2);\n-                    stack.push_back(vch);\n-                }\n-                break;\n-\n-                case OP_PICK:\n-                case OP_ROLL:\n-                {\n-                    // (xn ... x2 x1 x0 n - xn ... x2 x1 x0 xn)\n-                    // (xn ... x2 x1 x0 n - ... x2 x1 x0 xn)\n-                    if (stack.size() < 2)\n-                        return false;\n-                    int n = CScriptNum(stacktop(-1)).getint();\n-                    popstack(stack);\n-                    if (n < 0 || n >= (int)stack.size())\n-                        return false;\n-                    valtype vch = stacktop(-n-1);\n-                    if (opcode == OP_ROLL)\n-                        stack.erase(stack.end()-n-1);\n-                    stack.push_back(vch);\n-                }\n-                break;\n-\n-                case OP_ROT:\n-                {\n-                    // (x1 x2 x3 -- x2 x3 x1)\n-                    //  x2 x1 x3  after first swap\n-                    //  x2 x3 x1  after second swap\n-                    if (stack.size() < 3)\n-                        return false;\n-                    swap(stacktop(-3), stacktop(-2));\n-                    swap(stacktop(-2), stacktop(-1));\n-                }\n-                break;\n-\n-                case OP_SWAP:\n-                {\n-                    // (x1 x2 -- x2 x1)\n-                    if (stack.size() < 2)\n-                        return false;\n-                    swap(stacktop(-2), stacktop(-1));\n-                }\n-                break;\n-\n-                case OP_TUCK:\n-                {\n-                    // (x1 x2 -- x2 x1 x2)\n-                    if (stack.size() < 2)\n-                        return false;\n-                    valtype vch = stacktop(-1);\n-                    stack.insert(stack.end()-2, vch);\n-                }\n-                break;\n-\n-\n-                case OP_SIZE:\n-                {\n-                    // (in -- in size)\n-                    if (stack.size() < 1)\n-                        return false;\n-                    CScriptNum bn(stacktop(-1).size());\n-                    stack.push_back(bn.getvch());\n-                }\n-                break;\n-\n-\n-                //\n-                // Bitwise logic\n-                //\n-                case OP_EQUAL:\n-                case OP_EQUALVERIFY:\n-                //case OP_NOTEQUAL: // use OP_NUMNOTEQUAL\n-                {\n-                    // (x1 x2 - bool)\n-                    if (stack.size() < 2)\n-                        return false;\n-                    valtype& vch1 = stacktop(-2);\n-                    valtype& vch2 = stacktop(-1);\n-                    bool fEqual = (vch1 == vch2);\n-                    // OP_NOTEQUAL is disabled because it would be too easy to say\n-                    // something like n != 1 and have some wiseguy pass in 1 with extra\n-                    // zero bytes after it (numerically, 0x01 == 0x0001 == 0x000001)\n-                    //if (opcode == OP_NOTEQUAL)\n-                    //    fEqual = !fEqual;\n-                    popstack(stack);\n-                    popstack(stack);\n-                    stack.push_back(fEqual ? vchTrue : vchFalse);\n-                    if (opcode == OP_EQUALVERIFY)\n-                    {\n-                        if (fEqual)\n-                            popstack(stack);\n-                        else\n-                            return false;\n-                    }\n-                }\n-                break;\n-\n-\n-                //\n-                // Numeric\n-                //\n-                case OP_1ADD:\n-                case OP_1SUB:\n-                case OP_NEGATE:\n-                case OP_ABS:\n-                case OP_NOT:\n-                case OP_0NOTEQUAL:\n-                {\n-                    // (in -- out)\n-                    if (stack.size() < 1)\n-                        return false;\n-                    CScriptNum bn(stacktop(-1));\n-                    switch (opcode)\n-                    {\n-                    case OP_1ADD:       bn += bnOne; break;\n-                    case OP_1SUB:       bn -= bnOne; break;\n-                    case OP_NEGATE:     bn = -bn; break;\n-                    case OP_ABS:        if (bn < bnZero) bn = -bn; break;\n-                    case OP_NOT:        bn = (bn == bnZero); break;\n-                    case OP_0NOTEQUAL:  bn = (bn != bnZero); break;\n-                    default:            assert(!\"invalid opcode\"); break;\n-                    }\n-                    popstack(stack);\n-                    stack.push_back(bn.getvch());\n-                }\n-                break;\n-\n-                case OP_ADD:\n-                case OP_SUB:\n-                case OP_BOOLAND:\n-                case OP_BOOLOR:\n-                case OP_NUMEQUAL:\n-                case OP_NUMEQUALVERIFY:\n-                case OP_NUMNOTEQUAL:\n-                case OP_LESSTHAN:\n-                case OP_GREATERTHAN:\n-                case OP_LESSTHANOREQUAL:\n-                case OP_GREATERTHANOREQUAL:\n-                case OP_MIN:\n-                case OP_MAX:\n-                {\n-                    // (x1 x2 -- out)\n-                    if (stack.size() < 2)\n-                        return false;\n-                    CScriptNum bn1(stacktop(-2));\n-                    CScriptNum bn2(stacktop(-1));\n-                    CScriptNum bn(0);\n-                    switch (opcode)\n-                    {\n-                    case OP_ADD:\n-                        bn = bn1 + bn2;\n-                        break;\n-\n-                    case OP_SUB:\n-                        bn = bn1 - bn2;\n-                        break;\n-\n-                    case OP_BOOLAND:             bn = (bn1 != bnZero && bn2 != bnZero); break;\n-                    case OP_BOOLOR:              bn = (bn1 != bnZero || bn2 != bnZero); break;\n-                    case OP_NUMEQUAL:            bn = (bn1 == bn2); break;\n-                    case OP_NUMEQUALVERIFY:      bn = (bn1 == bn2); break;\n-                    case OP_NUMNOTEQUAL:         bn = (bn1 != bn2); break;\n-                    case OP_LESSTHAN:            bn = (bn1 < bn2); break;\n-                    case OP_GREATERTHAN:         bn = (bn1 > bn2); break;\n-                    case OP_LESSTHANOREQUAL:     bn = (bn1 <= bn2); break;\n-                    case OP_GREATERTHANOREQUAL:  bn = (bn1 >= bn2); break;\n-                    case OP_MIN:                 bn = (bn1 < bn2 ? bn1 : bn2); break;\n-                    case OP_MAX:                 bn = (bn1 > bn2 ? bn1 : bn2); break;\n-                    default:                     assert(!\"invalid opcode\"); break;\n-                    }\n-                    popstack(stack);\n-                    popstack(stack);\n-                    stack.push_back(bn.getvch());\n-\n-                    if (opcode == OP_NUMEQUALVERIFY)\n-                    {\n-                        if (CastToBool(stacktop(-1)))\n-                            popstack(stack);\n-                        else\n-                            return false;\n-                    }\n-                }\n-                break;\n-\n-                case OP_WITHIN:\n-                {\n-                    // (x min max -- out)\n-                    if (stack.size() < 3)\n-                        return false;\n-                    CScriptNum bn1(stacktop(-3));\n-                    CScriptNum bn2(stacktop(-2));\n-                    CScriptNum bn3(stacktop(-1));\n-                    bool fValue = (bn2 <= bn1 && bn1 < bn3);\n-                    popstack(stack);\n-                    popstack(stack);\n-                    popstack(stack);\n-                    stack.push_back(fValue ? vchTrue : vchFalse);\n-                }\n-                break;\n-\n-\n-                //\n-                // Crypto\n-                //\n-                case OP_RIPEMD160:\n-                case OP_SHA1:\n-                case OP_SHA256:\n-                case OP_HASH160:\n-                case OP_HASH256:\n-                {\n-                    // (in -- hash)\n-                    if (stack.size() < 1)\n-                        return false;\n-                    valtype& vch = stacktop(-1);\n-                    valtype vchHash((opcode == OP_RIPEMD160 || opcode == OP_SHA1 || opcode == OP_HASH160) ? 20 : 32);\n-                    if (opcode == OP_RIPEMD160)\n-                        CRIPEMD160().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n-                    else if (opcode == OP_SHA1)\n-                        CSHA1().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n-                    else if (opcode == OP_SHA256)\n-                        CSHA256().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n-                    else if (opcode == OP_HASH160)\n-                        CHash160().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n-                    else if (opcode == OP_HASH256)\n-                        CHash256().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n-                    popstack(stack);\n-                    stack.push_back(vchHash);\n-                }\n-                break;\n-\n-                case OP_CODESEPARATOR:\n-                {\n-                    // Hash starts after the code separator\n-                    pbegincodehash = pc;\n-                }\n-                break;\n-\n-                case OP_CHECKSIG:\n-                case OP_CHECKSIGVERIFY:\n-                {\n-                    // (sig pubkey -- bool)\n-                    if (stack.size() < 2)\n-                        return false;\n-\n-                    valtype& vchSig    = stacktop(-2);\n-                    valtype& vchPubKey = stacktop(-1);\n-\n-                    // Subset of script starting at the most recent codeseparator\n-                    CScript scriptCode(pbegincodehash, pend);\n-\n-                    // Drop the signature, since there's no way for a signature to sign itself\n-                    scriptCode.FindAndDelete(CScript(vchSig));\n-\n-                    bool fSuccess = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                        CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType, flags);\n-\n-                    popstack(stack);\n-                    popstack(stack);\n-                    stack.push_back(fSuccess ? vchTrue : vchFalse);\n-                    if (opcode == OP_CHECKSIGVERIFY)\n-                    {\n-                        if (fSuccess)\n-                            popstack(stack);\n-                        else\n-                            return false;\n-                    }\n-                }\n-                break;\n-\n-                case OP_CHECKMULTISIG:\n-                case OP_CHECKMULTISIGVERIFY:\n-                {\n-                    // ([sig ...] num_of_signatures [pubkey ...] num_of_pubkeys -- bool)\n-\n-                    int i = 1;\n-                    if ((int)stack.size() < i)\n-                        return false;\n-\n-                    int nKeysCount = CScriptNum(stacktop(-i)).getint();\n-                    if (nKeysCount < 0 || nKeysCount > 20)\n-                        return false;\n-                    nOpCount += nKeysCount;\n-                    if (nOpCount > 201)\n-                        return false;\n-                    int ikey = ++i;\n-                    i += nKeysCount;\n-                    if ((int)stack.size() < i)\n-                        return false;\n-\n-                    int nSigsCount = CScriptNum(stacktop(-i)).getint();\n-                    if (nSigsCount < 0 || nSigsCount > nKeysCount)\n-                        return false;\n-                    int isig = ++i;\n-                    i += nSigsCount;\n-                    if ((int)stack.size() < i)\n-                        return false;\n-\n-                    // Subset of script starting at the most recent codeseparator\n-                    CScript scriptCode(pbegincodehash, pend);\n-\n-                    // Drop the signatures, since there's no way for a signature to sign itself\n-                    for (int k = 0; k < nSigsCount; k++)\n-                    {\n-                        valtype& vchSig = stacktop(-isig-k);\n-                        scriptCode.FindAndDelete(CScript(vchSig));\n-                    }\n-\n-                    bool fSuccess = true;\n-                    while (fSuccess && nSigsCount > 0)\n-                    {\n-                        valtype& vchSig    = stacktop(-isig);\n-                        valtype& vchPubKey = stacktop(-ikey);\n-\n-                        // Check signature\n-                        bool fOk = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                            CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType, flags);\n-\n-                        if (fOk) {\n-                            isig++;\n-                            nSigsCount--;\n-                        }\n-                        ikey++;\n-                        nKeysCount--;\n-\n-                        // If there are more signatures left than keys left,\n-                        // then too many signatures have failed\n-                        if (nSigsCount > nKeysCount)\n-                            fSuccess = false;\n-                    }\n-\n-                    // Clean up stack of actual arguments\n-                    while (i-- > 1)\n-                        popstack(stack);\n-\n-                    // A bug causes CHECKMULTISIG to consume one extra argument\n-                    // whose contents were not checked in any way.\n-                    //\n-                    // Unfortunately this is a potential source of mutability,\n-                    // so optionally verify it is exactly equal to zero prior\n-                    // to removing it from the stack.\n-                    if (stack.size() < 1)\n-                        return false;\n-                    if ((flags & SCRIPT_VERIFY_NULLDUMMY) && stacktop(-1).size())\n-                        return error(\"CHECKMULTISIG dummy argument not null\");\n-                    popstack(stack);\n-\n-                    stack.push_back(fSuccess ? vchTrue : vchFalse);\n-\n-                    if (opcode == OP_CHECKMULTISIGVERIFY)\n-                    {\n-                        if (fSuccess)\n-                            popstack(stack);\n-                        else\n-                            return false;\n-                    }\n-                }\n-                break;\n-\n-                default:\n-                    return false;\n-            }\n-\n-            // Size limits\n-            if (stack.size() + altstack.size() > 1000)\n-                return false;\n-        }\n-    }\n-    catch (...)\n-    {\n-        return false;\n-    }\n-\n-\n-    if (!vfExec.empty())\n-        return false;\n-\n-    return true;\n-}\n-\n-\n-\n-\n-\n-\n-\n-namespace {\n-\n-/** Wrapper that serializes like CTransaction, but with the modifications\n- *  required for the signature hash done in-place\n- */\n-class CTransactionSignatureSerializer {\n-private:\n-    const CTransaction &txTo;  // reference to the spending transaction (the one being serialized)\n-    const CScript &scriptCode; // output script being consumed\n-    const unsigned int nIn;    // input index of txTo being signed\n-    const bool fAnyoneCanPay;  // whether the hashtype has the SIGHASH_ANYONECANPAY flag set\n-    const bool fHashSingle;    // whether the hashtype is SIGHASH_SINGLE\n-    const bool fHashNone;      // whether the hashtype is SIGHASH_NONE\n-\n-public:\n-    CTransactionSignatureSerializer(const CTransaction &txToIn, const CScript &scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :\n-        txTo(txToIn), scriptCode(scriptCodeIn), nIn(nInIn),\n-        fAnyoneCanPay(!!(nHashTypeIn & SIGHASH_ANYONECANPAY)),\n-        fHashSingle((nHashTypeIn & 0x1f) == SIGHASH_SINGLE),\n-        fHashNone((nHashTypeIn & 0x1f) == SIGHASH_NONE) {}\n-\n-    /** Serialize the passed scriptCode, skipping OP_CODESEPARATORs */\n-    template<typename S>\n-    void SerializeScriptCode(S &s, int nType, int nVersion) const {\n-        CScript::const_iterator it = scriptCode.begin();\n-        CScript::const_iterator itBegin = it;\n-        opcodetype opcode;\n-        unsigned int nCodeSeparators = 0;\n-        while (scriptCode.GetOp(it, opcode)) {\n-            if (opcode == OP_CODESEPARATOR)\n-                nCodeSeparators++;\n-        }\n-        ::WriteCompactSize(s, scriptCode.size() - nCodeSeparators);\n-        it = itBegin;\n-        while (scriptCode.GetOp(it, opcode)) {\n-            if (opcode == OP_CODESEPARATOR) {\n-                s.write((char*)&itBegin[0], it-itBegin-1);\n-                itBegin = it;\n-            }\n-        }\n-        s.write((char*)&itBegin[0], it-itBegin);\n-    }\n-\n-    /** Serialize an input of txTo */\n-    template<typename S>\n-    void SerializeInput(S &s, unsigned int nInput, int nType, int nVersion) const {\n-        // In case of SIGHASH_ANYONECANPAY, only the input being signed is serialized\n-        if (fAnyoneCanPay)\n-            nInput = nIn;\n-        // Serialize the prevout\n-        ::Serialize(s, txTo.vin[nInput].prevout, nType, nVersion);\n-        // Serialize the script\n-        if (nInput != nIn)\n-            // Blank out other inputs' signatures\n-            ::Serialize(s, CScript(), nType, nVersion);\n-        else\n-            SerializeScriptCode(s, nType, nVersion);\n-        // Serialize the nSequence\n-        if (nInput != nIn && (fHashSingle || fHashNone))\n-            // let the others update at will\n-            ::Serialize(s, (int)0, nType, nVersion);\n-        else\n-            ::Serialize(s, txTo.vin[nInput].nSequence, nType, nVersion);\n-    }\n-\n-    /** Serialize an output of txTo */\n-    template<typename S>\n-    void SerializeOutput(S &s, unsigned int nOutput, int nType, int nVersion) const {\n-        if (fHashSingle && nOutput != nIn)\n-            // Do not lock-in the txout payee at other indices as txin\n-            ::Serialize(s, CTxOut(), nType, nVersion);\n-        else\n-            ::Serialize(s, txTo.vout[nOutput], nType, nVersion);\n-    }\n-\n-    /** Serialize txTo */\n-    template<typename S>\n-    void Serialize(S &s, int nType, int nVersion) const {\n-        // Serialize nVersion\n-        ::Serialize(s, txTo.nVersion, nType, nVersion);\n-        // Serialize vin\n-        unsigned int nInputs = fAnyoneCanPay ? 1 : txTo.vin.size();\n-        ::WriteCompactSize(s, nInputs);\n-        for (unsigned int nInput = 0; nInput < nInputs; nInput++)\n-             SerializeInput(s, nInput, nType, nVersion);\n-        // Serialize vout\n-        unsigned int nOutputs = fHashNone ? 0 : (fHashSingle ? nIn+1 : txTo.vout.size());\n-        ::WriteCompactSize(s, nOutputs);\n-        for (unsigned int nOutput = 0; nOutput < nOutputs; nOutput++)\n-             SerializeOutput(s, nOutput, nType, nVersion);\n-        // Serialie nLockTime\n-        ::Serialize(s, txTo.nLockTime, nType, nVersion);\n-    }\n-};\n-\n-} // anon namespace\n-\n-uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n-{\n-    if (nIn >= txTo.vin.size()) {\n-        LogPrintf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n-        return 1;\n-    }\n-\n-    // Check for invalid use of SIGHASH_SINGLE\n-    if ((nHashType & 0x1f) == SIGHASH_SINGLE) {\n-        if (nIn >= txTo.vout.size()) {\n-            LogPrintf(\"ERROR: SignatureHash() : nOut=%d out of range\\n\", nIn);\n-            return 1;\n-        }\n-    }\n-\n-    // Wrapper to serialize only the necessary parts of the transaction being signed\n-    CTransactionSignatureSerializer txTmp(txTo, scriptCode, nIn, nHashType);\n-\n-    // Serialize and hash\n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << txTmp << nHashType;\n-    return ss.GetHash();\n-}\n-\n-// Valid signature cache, to avoid doing expensive ECDSA signature checking\n-// twice for every transaction (once when accepted into memory pool, and\n-// again when accepted into the block chain)\n-class CSignatureCache\n-{\n-private:\n-     // sigdata_type is (signature hash, signature, public key):\n-    typedef boost::tuple<uint256, std::vector<unsigned char>, CPubKey> sigdata_type;\n-    std::set< sigdata_type> setValid;\n-    boost::shared_mutex cs_sigcache;\n-\n-public:\n-    bool\n-    Get(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n-    {\n-        boost::shared_lock<boost::shared_mutex> lock(cs_sigcache);\n-\n-        sigdata_type k(hash, vchSig, pubKey);\n-        std::set<sigdata_type>::iterator mi = setValid.find(k);\n-        if (mi != setValid.end())\n-            return true;\n-        return false;\n-    }\n-\n-    void Set(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n-    {\n-        // DoS prevention: limit cache size to less than 10MB\n-        // (~200 bytes per cache entry times 50,000 entries)\n-        // Since there are a maximum of 20,000 signature operations per block\n-        // 50,000 is a reasonable default.\n-        int64_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", 50000);\n-        if (nMaxCacheSize <= 0) return;\n-\n-        boost::unique_lock<boost::shared_mutex> lock(cs_sigcache);\n-\n-        while (static_cast<int64_t>(setValid.size()) > nMaxCacheSize)\n-        {\n-            // Evict a random entry. Random because that helps\n-            // foil would-be DoS attackers who might try to pre-generate\n-            // and re-use a set of valid signatures just-slightly-greater\n-            // than our cache size.\n-            uint256 randomHash = GetRandHash();\n-            std::vector<unsigned char> unused;\n-            std::set<sigdata_type>::iterator it =\n-                setValid.lower_bound(sigdata_type(randomHash, unused, unused));\n-            if (it == setValid.end())\n-                it = setValid.begin();\n-            setValid.erase(*it);\n-        }\n-\n-        sigdata_type k(hash, vchSig, pubKey);\n-        setValid.insert(k);\n-    }\n-};\n-\n-bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char> &vchPubKey, const CScript &scriptCode,\n-              const CTransaction& txTo, unsigned int nIn, int nHashType, int flags)\n-{\n-    static CSignatureCache signatureCache;\n-\n-    CPubKey pubkey(vchPubKey);\n-    if (!pubkey.IsValid())\n-        return false;\n-\n-    // Hash type is one byte tacked on to the end of the signature\n-    if (vchSig.empty())\n-        return false;\n-    if (nHashType == 0)\n-        nHashType = vchSig.back();\n-    else if (nHashType != vchSig.back())\n-        return false;\n-    vchSig.pop_back();\n-\n-    uint256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n-\n-    if (signatureCache.Get(sighash, vchSig, pubkey))\n-        return true;\n-\n-    if (!pubkey.Verify(sighash, vchSig))\n-        return false;\n-\n-    if (!(flags & SCRIPT_VERIFY_NOCACHE))\n-        signatureCache.Set(sighash, vchSig, pubkey);\n-\n-    return true;\n-}\n-\n-\n-\n-\n-\n-\n-\n-\n-\n //\n // Return public keys or hashes from scriptPubKey, for 'standard' transaction types.\n //\n@@ -1461,48 +443,6 @@ void ExtractAffectedKeys(const CKeyStore &keystore, const CScript& scriptPubKey,\n     CAffectedKeysVisitor(keystore, vKeys).Process(scriptPubKey);\n }\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n-                  unsigned int flags, int nHashType)\n-{\n-    vector<vector<unsigned char> > stack, stackCopy;\n-    if (!EvalScript(stack, scriptSig, txTo, nIn, flags, nHashType))\n-        return false;\n-    if (flags & SCRIPT_VERIFY_P2SH)\n-        stackCopy = stack;\n-    if (!EvalScript(stack, scriptPubKey, txTo, nIn, flags, nHashType))\n-        return false;\n-    if (stack.empty())\n-        return false;\n-\n-    if (CastToBool(stack.back()) == false)\n-        return false;\n-\n-    // Additional validation for spend-to-script-hash transactions:\n-    if ((flags & SCRIPT_VERIFY_P2SH) && scriptPubKey.IsPayToScriptHash())\n-    {\n-        if (!scriptSig.IsPushOnly()) // scriptSig must be literals-only\n-            return false;            // or validation fails\n-\n-        // stackCopy cannot be empty here, because if it was the\n-        // P2SH  HASH <> EQUAL  scriptPubKey would be evaluated with\n-        // an empty stack and the EvalScript above would return false.\n-        assert(!stackCopy.empty());\n-\n-        const valtype& pubKeySerialized = stackCopy.back();\n-        CScript pubKey2(pubKeySerialized.begin(), pubKeySerialized.end());\n-        popstack(stackCopy);\n-\n-        if (!EvalScript(stackCopy, pubKey2, txTo, nIn, flags, nHashType))\n-            return false;\n-        if (stackCopy.empty())\n-            return false;\n-        return CastToBool(stackCopy.back());\n-    }\n-\n-    return true;\n-}\n-\n-\n bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n {\n     assert(nIn < txTo.vin.size());"
      },
      {
        "sha": "1df95b1fa08c1636e8cb1bea133f8142d8b15792",
        "filename": "src/scriptutils.h",
        "status": "modified",
        "additions": 1,
        "deletions": 26,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36dc780db62ee93bda6e240a1c2608174cf0bcaa/src/scriptutils.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36dc780db62ee93bda6e240a1c2608174cf0bcaa/src/scriptutils.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scriptutils.h?ref=36dc780db62ee93bda6e240a1c2608174cf0bcaa",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"key.h\"\n #include \"script/script.h\"\n+#include \"script/interpreter.h\"\n \n #include <stdexcept>\n #include <stdint.h>\n@@ -20,26 +21,6 @@ struct CMutableTransaction;\n \n static const unsigned int MAX_OP_RETURN_RELAY = 40;      // bytes\n \n-/** Signature hash types/flags */\n-enum\n-{\n-    SIGHASH_ALL = 1,\n-    SIGHASH_NONE = 2,\n-    SIGHASH_SINGLE = 3,\n-    SIGHASH_ANYONECANPAY = 0x80,\n-};\n-\n-/** Script verification flags */\n-enum\n-{\n-    SCRIPT_VERIFY_NONE      = 0,\n-    SCRIPT_VERIFY_P2SH      = (1U << 0), // evaluate P2SH (BIP16) subscripts\n-    SCRIPT_VERIFY_STRICTENC = (1U << 1), // enforce strict conformance to DER and SEC2 for signatures and pubkeys\n-    SCRIPT_VERIFY_LOW_S     = (1U << 2), // enforce low S values (<n/2) in signatures (depends on STRICTENC)\n-    SCRIPT_VERIFY_NOCACHE   = (1U << 3), // do not store results in signature cache (but do query it)\n-    SCRIPT_VERIFY_NULLDUMMY = (1U << 4), // verify dummy stack item consumed by CHECKMULTISIG is of zero-length\n-};\n-\n /** IsMine() return codes */\n enum isminetype\n {\n@@ -156,11 +137,6 @@ class CScriptCompressor\n     }\n };\n \n-bool IsCanonicalPubKey(const std::vector<unsigned char> &vchPubKey, unsigned int flags);\n-bool IsCanonicalSignature(const std::vector<unsigned char> &vchSig, unsigned int flags);\n-\n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n-uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n@@ -171,7 +147,6 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n \n // Given two sets of signatures for scriptPubKey, possibly with OP_0 placeholders,\n // combine them intelligently and return the result."
      },
      {
        "sha": "a17099de72752307ddfe015f985abaf9221c1bb3",
        "filename": "src/test/canonical_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36dc780db62ee93bda6e240a1c2608174cf0bcaa/src/test/canonical_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36dc780db62ee93bda6e240a1c2608174cf0bcaa/src/test/canonical_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/canonical_tests.cpp?ref=36dc780db62ee93bda6e240a1c2608174cf0bcaa",
        "patch": "@@ -8,9 +8,11 @@\n \n #include \"data/sig_noncanonical.json.h\"\n #include \"data/sig_canonical.json.h\"\n+#include \"key.h\"\n #include \"random.h\"\n-#include \"scriptutils.h\"\n+#include \"script/interpreter.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "e28682522bbe0661fccc82619fc5a13a1402ea70",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36dc780db62ee93bda6e240a1c2608174cf0bcaa/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36dc780db62ee93bda6e240a1c2608174cf0bcaa/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=36dc780db62ee93bda6e240a1c2608174cf0bcaa",
        "patch": "@@ -6,6 +6,7 @@\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"script/script.h\"\n+#include \"script/interpreter.h\"\n #include \"scriptutils.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "8abde887ceef9c828bb968e641c4dff6a41b31f1",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36dc780db62ee93bda6e240a1c2608174cf0bcaa/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36dc780db62ee93bda6e240a1c2608174cf0bcaa/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=36dc780db62ee93bda6e240a1c2608174cf0bcaa",
        "patch": "@@ -7,7 +7,7 @@\n #include \"random.h\"\n #include \"serialize.h\"\n #include \"script/script.h\"\n-#include \"scriptutils.h\"\n+#include \"script/interpreter.h\"\n #include \"util.h\"\n #include \"version.h\"\n "
      }
    ]
  },
  {
    "sha": "ad80b044a60c0561ac8225cfef8dc0385c886120",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDgwYjA0NGE2MGMwNTYxYWM4MjI1Y2ZlZjhkYzAzODVjODg2MTIw",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-08-23T01:35:51Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T00:27:04Z"
      },
      "message": "Separate script/standard",
      "tree": {
        "sha": "991de0f7b3180a2a41bb8238b5a22fcaaae3480b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/991de0f7b3180a2a41bb8238b5a22fcaaae3480b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad80b044a60c0561ac8225cfef8dc0385c886120",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad80b044a60c0561ac8225cfef8dc0385c886120",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad80b044a60c0561ac8225cfef8dc0385c886120",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad80b044a60c0561ac8225cfef8dc0385c886120/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36dc780db62ee93bda6e240a1c2608174cf0bcaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36dc780db62ee93bda6e240a1c2608174cf0bcaa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36dc780db62ee93bda6e240a1c2608174cf0bcaa"
      }
    ],
    "stats": {
      "total": 607,
      "additions": 324,
      "deletions": 283
    },
    "files": [
      {
        "sha": "c3e2f7ed824319b3a78c9ccee574023cc14ce68f",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad80b044a60c0561ac8225cfef8dc0385c886120/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad80b044a60c0561ac8225cfef8dc0385c886120/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ad80b044a60c0561ac8225cfef8dc0385c886120",
        "patch": "@@ -100,6 +100,7 @@ BITCOIN_CORE_H = \\\n   rpcserver.h \\\n   script/interpreter.h \\\n   script/script.h \\\n+  script/standard.h \\\n   scriptutils.h \\\n   serialize.h \\\n   sync.h \\\n@@ -210,6 +211,7 @@ libbitcoin_common_a_SOURCES = \\\n   protocol.cpp \\\n   script/interpreter.cpp \\\n   script/script.cpp \\\n+  script/standard.cpp \\\n   scriptutils.cpp \\\n   $(BITCOIN_CORE_H)\n "
      },
      {
        "sha": "3f12304bb20f0e5737d3ac277592558b171a8bca",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad80b044a60c0561ac8225cfef8dc0385c886120/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad80b044a60c0561ac8225cfef8dc0385c886120/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=ad80b044a60c0561ac8225cfef8dc0385c886120",
        "patch": "@@ -8,6 +8,8 @@\n #include \"core.h\"\n #include \"main.h\"         // for MAX_BLOCK_SIZE\n #include \"keystore.h\"\n+#include \"script/script.h\"\n+#include \"scriptutils.h\"\n #include \"ui_interface.h\" // for _(...)\n #include \"univalue/univalue.h\"\n #include \"core_io.h\""
      },
      {
        "sha": "cef74a3a545a2a79b1d69c7f3cfe146399576725",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad80b044a60c0561ac8225cfef8dc0385c886120/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad80b044a60c0561ac8225cfef8dc0385c886120/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=ad80b044a60c0561ac8225cfef8dc0385c886120",
        "patch": "@@ -5,7 +5,8 @@\n #include \"bloom.h\"\n \n #include \"core.h\"\n-#include \"scriptutils.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n \n #include <math.h>\n #include <stdlib.h>"
      },
      {
        "sha": "62712b1ba061a1cf44eb6011e9860be8ccd5815d",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad80b044a60c0561ac8225cfef8dc0385c886120/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad80b044a60c0561ac8225cfef8dc0385c886120/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=ad80b044a60c0561ac8225cfef8dc0385c886120",
        "patch": "@@ -4,7 +4,8 @@\n \n #include \"core_io.h\"\n #include \"univalue/univalue.h\"\n-#include \"scriptutils.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"core.h\"\n #include \"serialize.h\"\n #include \"util.h\""
      },
      {
        "sha": "ad1c1fbcee19f318f6d784f270da5d29898424ba",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad80b044a60c0561ac8225cfef8dc0385c886120/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad80b044a60c0561ac8225cfef8dc0385c886120/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ad80b044a60c0561ac8225cfef8dc0385c886120",
        "patch": "@@ -15,7 +15,8 @@\n #include \"core.h\"\n #include \"net.h\"\n #include \"pow.h\"\n-#include \"scriptutils.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"sync.h\"\n #include \"txmempool.h\"\n #include \"uint256.h\""
      },
      {
        "sha": "a8904a2313263aede27819b4addbfedfae69d33f",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad80b044a60c0561ac8225cfef8dc0385c886120/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad80b044a60c0561ac8225cfef8dc0385c886120/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=ad80b044a60c0561ac8225cfef8dc0385c886120",
        "patch": "@@ -11,6 +11,8 @@\n #include \"main.h\"\n #include \"net.h\"\n #include \"rpcserver.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"uint256.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet.h\""
      },
      {
        "sha": "684edff4d23049554cfcf3e09255a4b7231ac547",
        "filename": "src/script/standard.cpp",
        "status": "added",
        "additions": 254,
        "deletions": 0,
        "changes": 254,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad80b044a60c0561ac8225cfef8dc0385c886120/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad80b044a60c0561ac8225cfef8dc0385c886120/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=ad80b044a60c0561ac8225cfef8dc0385c886120",
        "patch": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"script/standard.h\"\n+\n+#include \"script/script.h\"\n+#include \"util.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+using namespace std;\n+\n+typedef vector<unsigned char> valtype;\n+\n+const char* GetTxnOutputType(txnouttype t)\n+{\n+    switch (t)\n+    {\n+    case TX_NONSTANDARD: return \"nonstandard\";\n+    case TX_PUBKEY: return \"pubkey\";\n+    case TX_PUBKEYHASH: return \"pubkeyhash\";\n+    case TX_SCRIPTHASH: return \"scripthash\";\n+    case TX_MULTISIG: return \"multisig\";\n+    case TX_NULL_DATA: return \"nulldata\";\n+    }\n+    return NULL;\n+}\n+\n+//\n+// Return public keys or hashes from scriptPubKey, for 'standard' transaction types.\n+//\n+bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsigned char> >& vSolutionsRet)\n+{\n+    // Templates\n+    static multimap<txnouttype, CScript> mTemplates;\n+    if (mTemplates.empty())\n+    {\n+        // Standard tx, sender provides pubkey, receiver adds signature\n+        mTemplates.insert(make_pair(TX_PUBKEY, CScript() << OP_PUBKEY << OP_CHECKSIG));\n+\n+        // Bitcoin address tx, sender provides hash of pubkey, receiver provides signature and pubkey\n+        mTemplates.insert(make_pair(TX_PUBKEYHASH, CScript() << OP_DUP << OP_HASH160 << OP_PUBKEYHASH << OP_EQUALVERIFY << OP_CHECKSIG));\n+\n+        // Sender provides N pubkeys, receivers provides M signatures\n+        mTemplates.insert(make_pair(TX_MULTISIG, CScript() << OP_SMALLINTEGER << OP_PUBKEYS << OP_SMALLINTEGER << OP_CHECKMULTISIG));\n+\n+        // Empty, provably prunable, data-carrying output\n+        if (GetBoolArg(\"-datacarrier\", true))\n+            mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN << OP_SMALLDATA));\n+        mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN));\n+    }\n+\n+    // Shortcut for pay-to-script-hash, which are more constrained than the other types:\n+    // it is always OP_HASH160 20 [20 byte hash] OP_EQUAL\n+    if (scriptPubKey.IsPayToScriptHash())\n+    {\n+        typeRet = TX_SCRIPTHASH;\n+        vector<unsigned char> hashBytes(scriptPubKey.begin()+2, scriptPubKey.begin()+22);\n+        vSolutionsRet.push_back(hashBytes);\n+        return true;\n+    }\n+\n+    // Scan templates\n+    const CScript& script1 = scriptPubKey;\n+    BOOST_FOREACH(const PAIRTYPE(txnouttype, CScript)& tplate, mTemplates)\n+    {\n+        const CScript& script2 = tplate.second;\n+        vSolutionsRet.clear();\n+\n+        opcodetype opcode1, opcode2;\n+        vector<unsigned char> vch1, vch2;\n+\n+        // Compare\n+        CScript::const_iterator pc1 = script1.begin();\n+        CScript::const_iterator pc2 = script2.begin();\n+        while (true)\n+        {\n+            if (pc1 == script1.end() && pc2 == script2.end())\n+            {\n+                // Found a match\n+                typeRet = tplate.first;\n+                if (typeRet == TX_MULTISIG)\n+                {\n+                    // Additional checks for TX_MULTISIG:\n+                    unsigned char m = vSolutionsRet.front()[0];\n+                    unsigned char n = vSolutionsRet.back()[0];\n+                    if (m < 1 || n < 1 || m > n || vSolutionsRet.size()-2 != n)\n+                        return false;\n+                }\n+                return true;\n+            }\n+            if (!script1.GetOp(pc1, opcode1, vch1))\n+                break;\n+            if (!script2.GetOp(pc2, opcode2, vch2))\n+                break;\n+\n+            // Template matching opcodes:\n+            if (opcode2 == OP_PUBKEYS)\n+            {\n+                while (vch1.size() >= 33 && vch1.size() <= 65)\n+                {\n+                    vSolutionsRet.push_back(vch1);\n+                    if (!script1.GetOp(pc1, opcode1, vch1))\n+                        break;\n+                }\n+                if (!script2.GetOp(pc2, opcode2, vch2))\n+                    break;\n+                // Normal situation is to fall through\n+                // to other if/else statements\n+            }\n+\n+            if (opcode2 == OP_PUBKEY)\n+            {\n+                if (vch1.size() < 33 || vch1.size() > 65)\n+                    break;\n+                vSolutionsRet.push_back(vch1);\n+            }\n+            else if (opcode2 == OP_PUBKEYHASH)\n+            {\n+                if (vch1.size() != sizeof(uint160))\n+                    break;\n+                vSolutionsRet.push_back(vch1);\n+            }\n+            else if (opcode2 == OP_SMALLINTEGER)\n+            {   // Single-byte small integer pushed onto vSolutions\n+                if (opcode1 == OP_0 ||\n+                    (opcode1 >= OP_1 && opcode1 <= OP_16))\n+                {\n+                    char n = (char)CScript::DecodeOP_N(opcode1);\n+                    vSolutionsRet.push_back(valtype(1, n));\n+                }\n+                else\n+                    break;\n+            }\n+            else if (opcode2 == OP_SMALLDATA)\n+            {\n+                // small pushdata, <= MAX_OP_RETURN_RELAY bytes\n+                if (vch1.size() > MAX_OP_RETURN_RELAY)\n+                    break;\n+            }\n+            else if (opcode1 != opcode2 || vch1 != vch2)\n+            {\n+                // Others must match exactly\n+                break;\n+            }\n+        }\n+    }\n+\n+    vSolutionsRet.clear();\n+    typeRet = TX_NONSTANDARD;\n+    return false;\n+}\n+\n+int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions)\n+{\n+    switch (t)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+        return -1;\n+    case TX_PUBKEY:\n+        return 1;\n+    case TX_PUBKEYHASH:\n+        return 2;\n+    case TX_MULTISIG:\n+        if (vSolutions.size() < 1 || vSolutions[0].size() < 1)\n+            return -1;\n+        return vSolutions[0][0] + 1;\n+    case TX_SCRIPTHASH:\n+        return 1; // doesn't include args needed by the script\n+    }\n+    return -1;\n+}\n+\n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n+{\n+    vector<valtype> vSolutions;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n+        return false;\n+\n+    if (whichType == TX_MULTISIG)\n+    {\n+        unsigned char m = vSolutions.front()[0];\n+        unsigned char n = vSolutions.back()[0];\n+        // Support up to x-of-3 multisig txns as standard\n+        if (n < 1 || n > 3)\n+            return false;\n+        if (m < 1 || m > n)\n+            return false;\n+    }\n+\n+    return whichType != TX_NONSTANDARD;\n+}\n+\n+bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n+{\n+    vector<valtype> vSolutions;\n+    txnouttype whichType;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n+        return false;\n+\n+    if (whichType == TX_PUBKEY)\n+    {\n+        addressRet = CPubKey(vSolutions[0]).GetID();\n+        return true;\n+    }\n+    else if (whichType == TX_PUBKEYHASH)\n+    {\n+        addressRet = CKeyID(uint160(vSolutions[0]));\n+        return true;\n+    }\n+    else if (whichType == TX_SCRIPTHASH)\n+    {\n+        addressRet = CScriptID(uint160(vSolutions[0]));\n+        return true;\n+    }\n+    // Multisig txns have more than one address...\n+    return false;\n+}\n+\n+bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vector<CTxDestination>& addressRet, int& nRequiredRet)\n+{\n+    addressRet.clear();\n+    typeRet = TX_NONSTANDARD;\n+    vector<valtype> vSolutions;\n+    if (!Solver(scriptPubKey, typeRet, vSolutions))\n+        return false;\n+    if (typeRet == TX_NULL_DATA){\n+        // This is data, not addresses\n+        return false;\n+    }\n+\n+    if (typeRet == TX_MULTISIG)\n+    {\n+        nRequiredRet = vSolutions.front()[0];\n+        for (unsigned int i = 1; i < vSolutions.size()-1; i++)\n+        {\n+            CTxDestination address = CPubKey(vSolutions[i]).GetID();\n+            addressRet.push_back(address);\n+        }\n+    }\n+    else\n+    {\n+        nRequiredRet = 1;\n+        CTxDestination address;\n+        if (!ExtractDestination(scriptPubKey, address))\n+           return false;\n+        addressRet.push_back(address);\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "18092e879e7ec55e848f53b6e72a480b881b7818",
        "filename": "src/script/standard.h",
        "status": "added",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad80b044a60c0561ac8225cfef8dc0385c886120/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad80b044a60c0561ac8225cfef8dc0385c886120/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=ad80b044a60c0561ac8225cfef8dc0385c886120",
        "patch": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef H_BITCOIN_SCRIPT_STANDARD\n+#define H_BITCOIN_SCRIPT_STANDARD\n+\n+#include \"script/script.h\"\n+#include \"script/interpreter.h\"\n+\n+#include <stdint.h>\n+\n+class CScript;\n+\n+static const unsigned int MAX_OP_RETURN_RELAY = 40;      // bytes\n+\n+// Mandatory script verification flags that all new blocks must comply with for\n+// them to be valid. (but old blocks may not comply with) Currently just P2SH,\n+// but in the future other flags may be added, such as a soft-fork to enforce\n+// strict DER encoding.\n+//\n+// Failing one of these tests may trigger a DoS ban - see CheckInputs() for\n+// details.\n+static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;\n+\n+// Standard script verification flags that standard transactions will comply\n+// with. However scripts violating these flags may still be present in valid\n+// blocks and we must accept those blocks.\n+static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n+                                                         SCRIPT_VERIFY_STRICTENC |\n+                                                         SCRIPT_VERIFY_NULLDUMMY;\n+\n+// For convenience, standard but not mandatory verify flags.\n+static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n+\n+enum txnouttype\n+{\n+    TX_NONSTANDARD,\n+    // 'standard' transaction types:\n+    TX_PUBKEY,\n+    TX_PUBKEYHASH,\n+    TX_SCRIPTHASH,\n+    TX_MULTISIG,\n+    TX_NULL_DATA,\n+};\n+\n+const char* GetTxnOutputType(txnouttype t);\n+\n+bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n+int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n+bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n+bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n+\n+#endif"
      },
      {
        "sha": "cede11d6a7481da477156b1034f9822bd7473b35",
        "filename": "src/scriptutils.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 241,
        "changes": 241,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad80b044a60c0561ac8225cfef8dc0385c886120/src/scriptutils.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad80b044a60c0561ac8225cfef8dc0385c886120/src/scriptutils.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scriptutils.cpp?ref=ad80b044a60c0561ac8225cfef8dc0385c886120",
        "patch": "@@ -17,146 +17,6 @@ using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n-const char* GetTxnOutputType(txnouttype t)\n-{\n-    switch (t)\n-    {\n-    case TX_NONSTANDARD: return \"nonstandard\";\n-    case TX_PUBKEY: return \"pubkey\";\n-    case TX_PUBKEYHASH: return \"pubkeyhash\";\n-    case TX_SCRIPTHASH: return \"scripthash\";\n-    case TX_MULTISIG: return \"multisig\";\n-    case TX_NULL_DATA: return \"nulldata\";\n-    }\n-    return NULL;\n-}\n-\n-//\n-// Return public keys or hashes from scriptPubKey, for 'standard' transaction types.\n-//\n-bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsigned char> >& vSolutionsRet)\n-{\n-    // Templates\n-    static multimap<txnouttype, CScript> mTemplates;\n-    if (mTemplates.empty())\n-    {\n-        // Standard tx, sender provides pubkey, receiver adds signature\n-        mTemplates.insert(make_pair(TX_PUBKEY, CScript() << OP_PUBKEY << OP_CHECKSIG));\n-\n-        // Bitcoin address tx, sender provides hash of pubkey, receiver provides signature and pubkey\n-        mTemplates.insert(make_pair(TX_PUBKEYHASH, CScript() << OP_DUP << OP_HASH160 << OP_PUBKEYHASH << OP_EQUALVERIFY << OP_CHECKSIG));\n-\n-        // Sender provides N pubkeys, receivers provides M signatures\n-        mTemplates.insert(make_pair(TX_MULTISIG, CScript() << OP_SMALLINTEGER << OP_PUBKEYS << OP_SMALLINTEGER << OP_CHECKMULTISIG));\n-\n-        // Empty, provably prunable, data-carrying output\n-        if (GetBoolArg(\"-datacarrier\", true))\n-            mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN << OP_SMALLDATA));\n-        mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN));\n-    }\n-\n-    // Shortcut for pay-to-script-hash, which are more constrained than the other types:\n-    // it is always OP_HASH160 20 [20 byte hash] OP_EQUAL\n-    if (scriptPubKey.IsPayToScriptHash())\n-    {\n-        typeRet = TX_SCRIPTHASH;\n-        vector<unsigned char> hashBytes(scriptPubKey.begin()+2, scriptPubKey.begin()+22);\n-        vSolutionsRet.push_back(hashBytes);\n-        return true;\n-    }\n-\n-    // Scan templates\n-    const CScript& script1 = scriptPubKey;\n-    BOOST_FOREACH(const PAIRTYPE(txnouttype, CScript)& tplate, mTemplates)\n-    {\n-        const CScript& script2 = tplate.second;\n-        vSolutionsRet.clear();\n-\n-        opcodetype opcode1, opcode2;\n-        vector<unsigned char> vch1, vch2;\n-\n-        // Compare\n-        CScript::const_iterator pc1 = script1.begin();\n-        CScript::const_iterator pc2 = script2.begin();\n-        while (true)\n-        {\n-            if (pc1 == script1.end() && pc2 == script2.end())\n-            {\n-                // Found a match\n-                typeRet = tplate.first;\n-                if (typeRet == TX_MULTISIG)\n-                {\n-                    // Additional checks for TX_MULTISIG:\n-                    unsigned char m = vSolutionsRet.front()[0];\n-                    unsigned char n = vSolutionsRet.back()[0];\n-                    if (m < 1 || n < 1 || m > n || vSolutionsRet.size()-2 != n)\n-                        return false;\n-                }\n-                return true;\n-            }\n-            if (!script1.GetOp(pc1, opcode1, vch1))\n-                break;\n-            if (!script2.GetOp(pc2, opcode2, vch2))\n-                break;\n-\n-            // Template matching opcodes:\n-            if (opcode2 == OP_PUBKEYS)\n-            {\n-                while (vch1.size() >= 33 && vch1.size() <= 65)\n-                {\n-                    vSolutionsRet.push_back(vch1);\n-                    if (!script1.GetOp(pc1, opcode1, vch1))\n-                        break;\n-                }\n-                if (!script2.GetOp(pc2, opcode2, vch2))\n-                    break;\n-                // Normal situation is to fall through\n-                // to other if/else statements\n-            }\n-\n-            if (opcode2 == OP_PUBKEY)\n-            {\n-                if (vch1.size() < 33 || vch1.size() > 65)\n-                    break;\n-                vSolutionsRet.push_back(vch1);\n-            }\n-            else if (opcode2 == OP_PUBKEYHASH)\n-            {\n-                if (vch1.size() != sizeof(uint160))\n-                    break;\n-                vSolutionsRet.push_back(vch1);\n-            }\n-            else if (opcode2 == OP_SMALLINTEGER)\n-            {   // Single-byte small integer pushed onto vSolutions\n-                if (opcode1 == OP_0 ||\n-                    (opcode1 >= OP_1 && opcode1 <= OP_16))\n-                {\n-                    char n = (char)CScript::DecodeOP_N(opcode1);\n-                    vSolutionsRet.push_back(valtype(1, n));\n-                }\n-                else\n-                    break;\n-            }\n-            else if (opcode2 == OP_SMALLDATA)\n-            {\n-                // small pushdata, <= MAX_OP_RETURN_RELAY bytes\n-                if (vch1.size() > MAX_OP_RETURN_RELAY)\n-                    break;\n-            }\n-            else if (opcode1 != opcode2 || vch1 != vch2)\n-            {\n-                // Others must match exactly\n-                break;\n-            }\n-        }\n-    }\n-\n-    vSolutionsRet.clear();\n-    typeRet = TX_NONSTANDARD;\n-    return false;\n-}\n-\n-\n bool Sign1(const CKeyID& address, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n {\n     CKey key;\n@@ -231,48 +91,6 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n     return false;\n }\n \n-int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions)\n-{\n-    switch (t)\n-    {\n-    case TX_NONSTANDARD:\n-    case TX_NULL_DATA:\n-        return -1;\n-    case TX_PUBKEY:\n-        return 1;\n-    case TX_PUBKEYHASH:\n-        return 2;\n-    case TX_MULTISIG:\n-        if (vSolutions.size() < 1 || vSolutions[0].size() < 1)\n-            return -1;\n-        return vSolutions[0][0] + 1;\n-    case TX_SCRIPTHASH:\n-        return 1; // doesn't include args needed by the script\n-    }\n-    return -1;\n-}\n-\n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n-{\n-    vector<valtype> vSolutions;\n-    if (!Solver(scriptPubKey, whichType, vSolutions))\n-        return false;\n-\n-    if (whichType == TX_MULTISIG)\n-    {\n-        unsigned char m = vSolutions.front()[0];\n-        unsigned char n = vSolutions.back()[0];\n-        // Support up to x-of-3 multisig txns as standard\n-        if (n < 1 || n > 3)\n-            return false;\n-        if (m < 1 || m > n)\n-            return false;\n-    }\n-\n-    return whichType != TX_NONSTANDARD;\n-}\n-\n-\n unsigned int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)\n {\n     unsigned int nResult = 0;\n@@ -348,65 +166,6 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     return ISMINE_NO;\n }\n \n-bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n-{\n-    vector<valtype> vSolutions;\n-    txnouttype whichType;\n-    if (!Solver(scriptPubKey, whichType, vSolutions))\n-        return false;\n-\n-    if (whichType == TX_PUBKEY)\n-    {\n-        addressRet = CPubKey(vSolutions[0]).GetID();\n-        return true;\n-    }\n-    else if (whichType == TX_PUBKEYHASH)\n-    {\n-        addressRet = CKeyID(uint160(vSolutions[0]));\n-        return true;\n-    }\n-    else if (whichType == TX_SCRIPTHASH)\n-    {\n-        addressRet = CScriptID(uint160(vSolutions[0]));\n-        return true;\n-    }\n-    // Multisig txns have more than one address...\n-    return false;\n-}\n-\n-bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vector<CTxDestination>& addressRet, int& nRequiredRet)\n-{\n-    addressRet.clear();\n-    typeRet = TX_NONSTANDARD;\n-    vector<valtype> vSolutions;\n-    if (!Solver(scriptPubKey, typeRet, vSolutions))\n-        return false;\n-    if (typeRet == TX_NULL_DATA){\n-        // This is data, not addresses\n-        return false;\n-    }\n-\n-    if (typeRet == TX_MULTISIG)\n-    {\n-        nRequiredRet = vSolutions.front()[0];\n-        for (unsigned int i = 1; i < vSolutions.size()-1; i++)\n-        {\n-            CTxDestination address = CPubKey(vSolutions[i]).GetID();\n-            addressRet.push_back(address);\n-        }\n-    }\n-    else\n-    {\n-        nRequiredRet = 1;\n-        CTxDestination address;\n-        if (!ExtractDestination(scriptPubKey, address))\n-           return false;\n-        addressRet.push_back(address);\n-    }\n-\n-    return true;\n-}\n-\n class CAffectedKeysVisitor : public boost::static_visitor<void> {\n private:\n     const CKeyStore &keystore;"
      },
      {
        "sha": "7ea2c9e6a59e824fbb4d113162a65a9aca55e95b",
        "filename": "src/scriptutils.h",
        "status": "modified",
        "additions": 1,
        "deletions": 39,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad80b044a60c0561ac8225cfef8dc0385c886120/src/scriptutils.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad80b044a60c0561ac8225cfef8dc0385c886120/src/scriptutils.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scriptutils.h?ref=ad80b044a60c0561ac8225cfef8dc0385c886120",
        "patch": "@@ -9,6 +9,7 @@\n #include \"key.h\"\n #include \"script/script.h\"\n #include \"script/interpreter.h\"\n+#include \"script/standard.h\"\n \n #include <stdexcept>\n #include <stdint.h>\n@@ -19,8 +20,6 @@ class CKeyStore;\n class CTransaction;\n struct CMutableTransaction;\n \n-static const unsigned int MAX_OP_RETURN_RELAY = 40;      // bytes\n-\n /** IsMine() return codes */\n enum isminetype\n {\n@@ -32,38 +31,6 @@ enum isminetype\n /** used for bitflags of isminetype */\n typedef uint8_t isminefilter;\n \n-// Mandatory script verification flags that all new blocks must comply with for\n-// them to be valid. (but old blocks may not comply with) Currently just P2SH,\n-// but in the future other flags may be added, such as a soft-fork to enforce\n-// strict DER encoding.\n-//\n-// Failing one of these tests may trigger a DoS ban - see CheckInputs() for\n-// details.\n-static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;\n-\n-// Standard script verification flags that standard transactions will comply\n-// with. However scripts violating these flags may still be present in valid\n-// blocks and we must accept those blocks.\n-static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n-                                                         SCRIPT_VERIFY_STRICTENC |\n-                                                         SCRIPT_VERIFY_NULLDUMMY;\n-\n-// For convenience, standard but not mandatory verify flags.\n-static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n-\n-enum txnouttype\n-{\n-    TX_NONSTANDARD,\n-    // 'standard' transaction types:\n-    TX_PUBKEY,\n-    TX_PUBKEYHASH,\n-    TX_SCRIPTHASH,\n-    TX_MULTISIG,\n-    TX_NULL_DATA,\n-};\n-\n-const char* GetTxnOutputType(txnouttype t);\n-\n /** Compact serializer for scripts.\n  *\n  *  It detects common cases and encodes them much more efficiently.\n@@ -137,14 +104,9 @@ class CScriptCompressor\n     }\n };\n \n-bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n-int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest);\n void ExtractAffectedKeys(const CKeyStore &keystore, const CScript& scriptPubKey, std::vector<CKeyID> &vKeys);\n-bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n-bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n "
      },
      {
        "sha": "24e8a51f7dcf070cef222478657822eefa796d69",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad80b044a60c0561ac8225cfef8dc0385c886120/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad80b044a60c0561ac8225cfef8dc0385c886120/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=ad80b044a60c0561ac8225cfef8dc0385c886120",
        "patch": "@@ -11,6 +11,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"scriptutils.h\"\n #include \"ui_interface.h\"\n #include \"walletdb.h\"\n "
      }
    ]
  },
  {
    "sha": "24ce53d2ae7d4d51aca39affc9452f6b66c79024",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNGNlNTNkMmFlN2Q0ZDUxYWNhMzlhZmZjOTQ1MmY2YjY2Yzc5MDI0",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-08-20T16:33:30Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T00:27:04Z"
      },
      "message": "Separate CScriptCompressor",
      "tree": {
        "sha": "5c517e8fbdc1b2ce3c2f05ab3a4f11743b046737",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c517e8fbdc1b2ce3c2f05ab3a4f11743b046737"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24ce53d2ae7d4d51aca39affc9452f6b66c79024",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24ce53d2ae7d4d51aca39affc9452f6b66c79024",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24ce53d2ae7d4d51aca39affc9452f6b66c79024",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24ce53d2ae7d4d51aca39affc9452f6b66c79024/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad80b044a60c0561ac8225cfef8dc0385c886120",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad80b044a60c0561ac8225cfef8dc0385c886120",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad80b044a60c0561ac8225cfef8dc0385c886120"
      }
    ],
    "stats": {
      "total": 410,
      "additions": 215,
      "deletions": 195
    },
    "files": [
      {
        "sha": "efa55f0dc2c74ca3ca80f5045d06f8ff9c7dbe27",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24ce53d2ae7d4d51aca39affc9452f6b66c79024/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24ce53d2ae7d4d51aca39affc9452f6b66c79024/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=24ce53d2ae7d4d51aca39affc9452f6b66c79024",
        "patch": "@@ -99,6 +99,7 @@ BITCOIN_CORE_H = \\\n   rpcprotocol.h \\\n   rpcserver.h \\\n   script/interpreter.h \\\n+  script/compressor.h \\\n   script/script.h \\\n   script/standard.h \\\n   scriptutils.h \\\n@@ -210,6 +211,7 @@ libbitcoin_common_a_SOURCES = \\\n   netbase.cpp \\\n   protocol.cpp \\\n   script/interpreter.cpp \\\n+  script/compressor.cpp \\\n   script/script.cpp \\\n   script/standard.cpp \\\n   scriptutils.cpp \\"
      },
      {
        "sha": "02e167a3ce26f9f5eba6858ea06f5a86e1686641",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24ce53d2ae7d4d51aca39affc9452f6b66c79024/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24ce53d2ae7d4d51aca39affc9452f6b66c79024/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=24ce53d2ae7d4d51aca39affc9452f6b66c79024",
        "patch": "@@ -6,7 +6,8 @@\n #ifndef BITCOIN_CORE_H\n #define BITCOIN_CORE_H\n \n-#include \"scriptutils.h\"\n+#include \"script/compressor.h\"\n+#include \"script/script.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "2f8df602bf54d1fa18ccb7ffd97f97b526d0a782",
        "filename": "src/script/compressor.cpp",
        "status": "added",
        "additions": 127,
        "deletions": 0,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24ce53d2ae7d4d51aca39affc9452f6b66c79024/src/script/compressor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24ce53d2ae7d4d51aca39affc9452f6b66c79024/src/script/compressor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/compressor.cpp?ref=24ce53d2ae7d4d51aca39affc9452f6b66c79024",
        "patch": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"compressor.h\"\n+\n+bool CScriptCompressor::IsToKeyID(CKeyID &hash) const\n+{\n+    if (script.size() == 25 && script[0] == OP_DUP && script[1] == OP_HASH160\n+                            && script[2] == 20 && script[23] == OP_EQUALVERIFY\n+                            && script[24] == OP_CHECKSIG) {\n+        memcpy(&hash, &script[3], 20);\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CScriptCompressor::IsToScriptID(CScriptID &hash) const\n+{\n+    if (script.size() == 23 && script[0] == OP_HASH160 && script[1] == 20\n+                            && script[22] == OP_EQUAL) {\n+        memcpy(&hash, &script[2], 20);\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CScriptCompressor::IsToPubKey(CPubKey &pubkey) const\n+{\n+    if (script.size() == 35 && script[0] == 33 && script[34] == OP_CHECKSIG\n+                            && (script[1] == 0x02 || script[1] == 0x03)) {\n+        pubkey.Set(&script[1], &script[34]);\n+        return true;\n+    }\n+    if (script.size() == 67 && script[0] == 65 && script[66] == OP_CHECKSIG\n+                            && script[1] == 0x04) {\n+        pubkey.Set(&script[1], &script[66]);\n+        return pubkey.IsFullyValid(); // if not fully valid, a case that would not be compressible\n+    }\n+    return false;\n+}\n+\n+bool CScriptCompressor::Compress(std::vector<unsigned char> &out) const\n+{\n+    CKeyID keyID;\n+    if (IsToKeyID(keyID)) {\n+        out.resize(21);\n+        out[0] = 0x00;\n+        memcpy(&out[1], &keyID, 20);\n+        return true;\n+    }\n+    CScriptID scriptID;\n+    if (IsToScriptID(scriptID)) {\n+        out.resize(21);\n+        out[0] = 0x01;\n+        memcpy(&out[1], &scriptID, 20);\n+        return true;\n+    }\n+    CPubKey pubkey;\n+    if (IsToPubKey(pubkey)) {\n+        out.resize(33);\n+        memcpy(&out[1], &pubkey[1], 32);\n+        if (pubkey[0] == 0x02 || pubkey[0] == 0x03) {\n+            out[0] = pubkey[0];\n+            return true;\n+        } else if (pubkey[0] == 0x04) {\n+            out[0] = 0x04 | (pubkey[64] & 0x01);\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+unsigned int CScriptCompressor::GetSpecialSize(unsigned int nSize) const\n+{\n+    if (nSize == 0 || nSize == 1)\n+        return 20;\n+    if (nSize == 2 || nSize == 3 || nSize == 4 || nSize == 5)\n+        return 32;\n+    return 0;\n+}\n+\n+bool CScriptCompressor::Decompress(unsigned int nSize, const std::vector<unsigned char> &in)\n+{\n+    switch(nSize) {\n+    case 0x00:\n+        script.resize(25);\n+        script[0] = OP_DUP;\n+        script[1] = OP_HASH160;\n+        script[2] = 20;\n+        memcpy(&script[3], &in[0], 20);\n+        script[23] = OP_EQUALVERIFY;\n+        script[24] = OP_CHECKSIG;\n+        return true;\n+    case 0x01:\n+        script.resize(23);\n+        script[0] = OP_HASH160;\n+        script[1] = 20;\n+        memcpy(&script[2], &in[0], 20);\n+        script[22] = OP_EQUAL;\n+        return true;\n+    case 0x02:\n+    case 0x03:\n+        script.resize(35);\n+        script[0] = 33;\n+        script[1] = nSize;\n+        memcpy(&script[2], &in[0], 32);\n+        script[34] = OP_CHECKSIG;\n+        return true;\n+    case 0x04:\n+    case 0x05:\n+        unsigned char vch[33] = {};\n+        vch[0] = nSize - 2;\n+        memcpy(&vch[1], &in[0], 32);\n+        CPubKey pubkey(&vch[0], &vch[33]);\n+        if (!pubkey.Decompress())\n+            return false;\n+        assert(pubkey.size() == 65);\n+        script.resize(67);\n+        script[0] = 65;\n+        memcpy(&script[1], pubkey.begin(), 65);\n+        script[66] = OP_CHECKSIG;\n+        return true;\n+    }\n+    return false;\n+}"
      },
      {
        "sha": "f0a3754f02b475a07d116b49023be8d54d129652",
        "filename": "src/script/compressor.h",
        "status": "added",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24ce53d2ae7d4d51aca39affc9452f6b66c79024/src/script/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24ce53d2ae7d4d51aca39affc9452f6b66c79024/src/script/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/compressor.h?ref=24ce53d2ae7d4d51aca39affc9452f6b66c79024",
        "patch": "@@ -0,0 +1,84 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef H_BITCOIN_SCRIPT_COMPRESSOR\n+#define H_BITCOIN_SCRIPT_COMPRESSOR\n+\n+#include \"script/script.h\"\n+\n+/** Compact serializer for scripts.\n+ *\n+ *  It detects common cases and encodes them much more efficiently.\n+ *  3 special cases are defined:\n+ *  * Pay to pubkey hash (encoded as 21 bytes)\n+ *  * Pay to script hash (encoded as 21 bytes)\n+ *  * Pay to pubkey starting with 0x02, 0x03 or 0x04 (encoded as 33 bytes)\n+ *\n+ *  Other scripts up to 121 bytes require 1 byte + script length. Above\n+ *  that, scripts up to 16505 bytes require 2 bytes + script length.\n+ */\n+class CScriptCompressor\n+{\n+private:\n+    // make this static for now (there are only 6 special scripts defined)\n+    // this can potentially be extended together with a new nVersion for\n+    // transactions, in which case this value becomes dependent on nVersion\n+    // and nHeight of the enclosing transaction.\n+    static const unsigned int nSpecialScripts = 6;\n+\n+    CScript &script;\n+protected:\n+    // These check for scripts for which a special case with a shorter encoding is defined.\n+    // They are implemented separately from the CScript test, as these test for exact byte\n+    // sequence correspondences, and are more strict. For example, IsToPubKey also verifies\n+    // whether the public key is valid (as invalid ones cannot be represented in compressed\n+    // form).\n+    bool IsToKeyID(CKeyID &hash) const;\n+    bool IsToScriptID(CScriptID &hash) const;\n+    bool IsToPubKey(CPubKey &pubkey) const;\n+\n+    bool Compress(std::vector<unsigned char> &out) const;\n+    unsigned int GetSpecialSize(unsigned int nSize) const;\n+    bool Decompress(unsigned int nSize, const std::vector<unsigned char> &out);\n+public:\n+    CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }\n+\n+    unsigned int GetSerializeSize(int nType, int nVersion) const {\n+        std::vector<unsigned char> compr;\n+        if (Compress(compr))\n+            return compr.size();\n+        unsigned int nSize = script.size() + nSpecialScripts;\n+        return script.size() + VARINT(nSize).GetSerializeSize(nType, nVersion);\n+    }\n+\n+    template<typename Stream>\n+    void Serialize(Stream &s, int nType, int nVersion) const {\n+        std::vector<unsigned char> compr;\n+        if (Compress(compr)) {\n+            s << CFlatData(compr);\n+            return;\n+        }\n+        unsigned int nSize = script.size() + nSpecialScripts;\n+        s << VARINT(nSize);\n+        s << CFlatData(script);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream &s, int nType, int nVersion) {\n+        unsigned int nSize = 0;\n+        s >> VARINT(nSize);\n+        if (nSize < nSpecialScripts) {\n+            std::vector<unsigned char> vch(GetSpecialSize(nSize), 0x00);\n+            s >> REF(CFlatData(vch));\n+            Decompress(nSize, vch);\n+            return;\n+        }\n+        nSize -= nSpecialScripts;\n+        script.resize(nSize);\n+        s >> REF(CFlatData(script));\n+    }\n+};\n+\n+#endif"
      },
      {
        "sha": "cc38706d34d3163f9a1664f536e36eef9480522b",
        "filename": "src/scriptutils.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 121,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24ce53d2ae7d4d51aca39affc9452f6b66c79024/src/scriptutils.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24ce53d2ae7d4d51aca39affc9452f6b66c79024/src/scriptutils.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scriptutils.cpp?ref=24ce53d2ae7d4d51aca39affc9452f6b66c79024",
        "patch": "@@ -369,124 +369,3 @@ CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsign\n \n     return CombineSignatures(scriptPubKey, txTo, nIn, txType, vSolutions, stack1, stack2);\n }\n-\n-bool CScriptCompressor::IsToKeyID(CKeyID &hash) const\n-{\n-    if (script.size() == 25 && script[0] == OP_DUP && script[1] == OP_HASH160\n-                            && script[2] == 20 && script[23] == OP_EQUALVERIFY\n-                            && script[24] == OP_CHECKSIG) {\n-        memcpy(&hash, &script[3], 20);\n-        return true;\n-    }\n-    return false;\n-}\n-\n-bool CScriptCompressor::IsToScriptID(CScriptID &hash) const\n-{\n-    if (script.size() == 23 && script[0] == OP_HASH160 && script[1] == 20\n-                            && script[22] == OP_EQUAL) {\n-        memcpy(&hash, &script[2], 20);\n-        return true;\n-    }\n-    return false;\n-}\n-\n-bool CScriptCompressor::IsToPubKey(CPubKey &pubkey) const\n-{\n-    if (script.size() == 35 && script[0] == 33 && script[34] == OP_CHECKSIG\n-                            && (script[1] == 0x02 || script[1] == 0x03)) {\n-        pubkey.Set(&script[1], &script[34]);\n-        return true;\n-    }\n-    if (script.size() == 67 && script[0] == 65 && script[66] == OP_CHECKSIG\n-                            && script[1] == 0x04) {\n-        pubkey.Set(&script[1], &script[66]);\n-        return pubkey.IsFullyValid(); // if not fully valid, a case that would not be compressible\n-    }\n-    return false;\n-}\n-\n-bool CScriptCompressor::Compress(std::vector<unsigned char> &out) const\n-{\n-    CKeyID keyID;\n-    if (IsToKeyID(keyID)) {\n-        out.resize(21);\n-        out[0] = 0x00;\n-        memcpy(&out[1], &keyID, 20);\n-        return true;\n-    }\n-    CScriptID scriptID;\n-    if (IsToScriptID(scriptID)) {\n-        out.resize(21);\n-        out[0] = 0x01;\n-        memcpy(&out[1], &scriptID, 20);\n-        return true;\n-    }\n-    CPubKey pubkey;\n-    if (IsToPubKey(pubkey)) {\n-        out.resize(33);\n-        memcpy(&out[1], &pubkey[1], 32);\n-        if (pubkey[0] == 0x02 || pubkey[0] == 0x03) {\n-            out[0] = pubkey[0];\n-            return true;\n-        } else if (pubkey[0] == 0x04) {\n-            out[0] = 0x04 | (pubkey[64] & 0x01);\n-            return true;\n-        }\n-    }\n-    return false;\n-}\n-\n-unsigned int CScriptCompressor::GetSpecialSize(unsigned int nSize) const\n-{\n-    if (nSize == 0 || nSize == 1)\n-        return 20;\n-    if (nSize == 2 || nSize == 3 || nSize == 4 || nSize == 5)\n-        return 32;\n-    return 0;\n-}\n-\n-bool CScriptCompressor::Decompress(unsigned int nSize, const std::vector<unsigned char> &in)\n-{\n-    switch(nSize) {\n-    case 0x00:\n-        script.resize(25);\n-        script[0] = OP_DUP;\n-        script[1] = OP_HASH160;\n-        script[2] = 20;\n-        memcpy(&script[3], &in[0], 20);\n-        script[23] = OP_EQUALVERIFY;\n-        script[24] = OP_CHECKSIG;\n-        return true;\n-    case 0x01:\n-        script.resize(23);\n-        script[0] = OP_HASH160;\n-        script[1] = 20;\n-        memcpy(&script[2], &in[0], 20);\n-        script[22] = OP_EQUAL;\n-        return true;\n-    case 0x02:\n-    case 0x03:\n-        script.resize(35);\n-        script[0] = 33;\n-        script[1] = nSize;\n-        memcpy(&script[2], &in[0], 32);\n-        script[34] = OP_CHECKSIG;\n-        return true;\n-    case 0x04:\n-    case 0x05:\n-        unsigned char vch[33] = {};\n-        vch[0] = nSize - 2;\n-        memcpy(&vch[1], &in[0], 32);\n-        CPubKey pubkey(&vch[0], &vch[33]);\n-        if (!pubkey.Decompress())\n-            return false;\n-        assert(pubkey.size() == 65);\n-        script.resize(67);\n-        script[0] = 65;\n-        memcpy(&script[1], pubkey.begin(), 65);\n-        script[66] = OP_CHECKSIG;\n-        return true;\n-    }\n-    return false;\n-}"
      },
      {
        "sha": "1c7408124e10850fdefb53f6cac24d1a490ea7da",
        "filename": "src/scriptutils.h",
        "status": "modified",
        "additions": 0,
        "deletions": 73,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24ce53d2ae7d4d51aca39affc9452f6b66c79024/src/scriptutils.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24ce53d2ae7d4d51aca39affc9452f6b66c79024/src/scriptutils.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scriptutils.h?ref=24ce53d2ae7d4d51aca39affc9452f6b66c79024",
        "patch": "@@ -31,79 +31,6 @@ enum isminetype\n /** used for bitflags of isminetype */\n typedef uint8_t isminefilter;\n \n-/** Compact serializer for scripts.\n- *\n- *  It detects common cases and encodes them much more efficiently.\n- *  3 special cases are defined:\n- *  * Pay to pubkey hash (encoded as 21 bytes)\n- *  * Pay to script hash (encoded as 21 bytes)\n- *  * Pay to pubkey starting with 0x02, 0x03 or 0x04 (encoded as 33 bytes)\n- *\n- *  Other scripts up to 121 bytes require 1 byte + script length. Above\n- *  that, scripts up to 16505 bytes require 2 bytes + script length.\n- */\n-class CScriptCompressor\n-{\n-private:\n-    // make this static for now (there are only 6 special scripts defined)\n-    // this can potentially be extended together with a new nVersion for\n-    // transactions, in which case this value becomes dependent on nVersion\n-    // and nHeight of the enclosing transaction.\n-    static const unsigned int nSpecialScripts = 6;\n-\n-    CScript &script;\n-protected:\n-    // These check for scripts for which a special case with a shorter encoding is defined.\n-    // They are implemented separately from the CScript test, as these test for exact byte\n-    // sequence correspondences, and are more strict. For example, IsToPubKey also verifies\n-    // whether the public key is valid (as invalid ones cannot be represented in compressed\n-    // form).\n-    bool IsToKeyID(CKeyID &hash) const;\n-    bool IsToScriptID(CScriptID &hash) const;\n-    bool IsToPubKey(CPubKey &pubkey) const;\n-\n-    bool Compress(std::vector<unsigned char> &out) const;\n-    unsigned int GetSpecialSize(unsigned int nSize) const;\n-    bool Decompress(unsigned int nSize, const std::vector<unsigned char> &out);\n-public:\n-    CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }\n-\n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n-        std::vector<unsigned char> compr;\n-        if (Compress(compr))\n-            return compr.size();\n-        unsigned int nSize = script.size() + nSpecialScripts;\n-        return script.size() + VARINT(nSize).GetSerializeSize(nType, nVersion);\n-    }\n-\n-    template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersion) const {\n-        std::vector<unsigned char> compr;\n-        if (Compress(compr)) {\n-            s << CFlatData(compr);\n-            return;\n-        }\n-        unsigned int nSize = script.size() + nSpecialScripts;\n-        s << VARINT(nSize);\n-        s << CFlatData(script);\n-    }\n-\n-    template<typename Stream>\n-    void Unserialize(Stream &s, int nType, int nVersion) {\n-        unsigned int nSize = 0;\n-        s >> VARINT(nSize);\n-        if (nSize < nSpecialScripts) {\n-            std::vector<unsigned char> vch(GetSpecialSize(nSize), 0x00);\n-            s >> REF(CFlatData(vch));\n-            Decompress(nSize, vch);\n-            return;\n-        }\n-        nSize -= nSpecialScripts;\n-        script.resize(nSize);\n-        s >> REF(CFlatData(script));\n-    }\n-};\n-\n isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest);\n void ExtractAffectedKeys(const CKeyStore &keystore, const CScript& scriptPubKey, std::vector<CKeyID> &vKeys);"
      }
    ]
  },
  {
    "sha": "24eb154855fa8d93c7130ead16b81151ee37cfdb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNGViMTU0ODU1ZmE4ZDkzYzcxMzBlYWQxNmI4MTE1MWVlMzdjZmRi",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-08-27T15:22:33Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T00:27:04Z"
      },
      "message": "Separate script/sign",
      "tree": {
        "sha": "63ba02f8073681c7db19364af405f38e8d250c55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63ba02f8073681c7db19364af405f38e8d250c55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24eb154855fa8d93c7130ead16b81151ee37cfdb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24eb154855fa8d93c7130ead16b81151ee37cfdb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24eb154855fa8d93c7130ead16b81151ee37cfdb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24eb154855fa8d93c7130ead16b81151ee37cfdb/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24ce53d2ae7d4d51aca39affc9452f6b66c79024",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24ce53d2ae7d4d51aca39affc9452f6b66c79024",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24ce53d2ae7d4d51aca39affc9452f6b66c79024"
      }
    ],
    "stats": {
      "total": 557,
      "additions": 294,
      "deletions": 263
    },
    "files": [
      {
        "sha": "9b7e99861dd65e1cf3b19012929d42982908707c",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=24eb154855fa8d93c7130ead16b81151ee37cfdb",
        "patch": "@@ -101,6 +101,7 @@ BITCOIN_CORE_H = \\\n   script/interpreter.h \\\n   script/compressor.h \\\n   script/script.h \\\n+  script/sign.h \\\n   script/standard.h \\\n   scriptutils.h \\\n   serialize.h \\\n@@ -213,6 +214,7 @@ libbitcoin_common_a_SOURCES = \\\n   script/interpreter.cpp \\\n   script/compressor.cpp \\\n   script/script.cpp \\\n+  script/sign.cpp \\\n   script/standard.cpp \\\n   scriptutils.cpp \\\n   $(BITCOIN_CORE_H)"
      },
      {
        "sha": "c455351411df7aac593f89b4bebcf177c9af8998",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=24eb154855fa8d93c7130ead16b81151ee37cfdb",
        "patch": "@@ -9,7 +9,7 @@\n #include \"main.h\"         // for MAX_BLOCK_SIZE\n #include \"keystore.h\"\n #include \"script/script.h\"\n-#include \"scriptutils.h\"\n+#include \"script/sign.h\"\n #include \"ui_interface.h\" // for _(...)\n #include \"univalue/univalue.h\"\n #include \"core_io.h\""
      },
      {
        "sha": "f2736c4f63f066809fac140e905497e19a5b5d1a",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=24eb154855fa8d93c7130ead16b81151ee37cfdb",
        "patch": "@@ -13,6 +13,7 @@\n #include \"rpcserver.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n+#include \"script/sign.h\"\n #include \"uint256.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet.h\""
      },
      {
        "sha": "958177de3d8024b51c5e5a12fcb826d0a27e00db",
        "filename": "src/script/sign.cpp",
        "status": "added",
        "additions": 260,
        "deletions": 0,
        "changes": 260,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=24eb154855fa8d93c7130ead16b81151ee37cfdb",
        "patch": "@@ -0,0 +1,260 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"script/sign.h\"\n+\n+#include \"core.h\"\n+#include \"key.h\"\n+#include \"keystore.h\"\n+#include \"script/standard.h\"\n+#include \"uint256.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+using namespace std;\n+\n+typedef vector<unsigned char> valtype;\n+\n+bool Sign1(const CKeyID& address, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n+{\n+    CKey key;\n+    if (!keystore.GetKey(address, key))\n+        return false;\n+\n+    vector<unsigned char> vchSig;\n+    if (!key.Sign(hash, vchSig))\n+        return false;\n+    vchSig.push_back((unsigned char)nHashType);\n+    scriptSigRet << vchSig;\n+\n+    return true;\n+}\n+\n+bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n+{\n+    int nSigned = 0;\n+    int nRequired = multisigdata.front()[0];\n+    for (unsigned int i = 1; i < multisigdata.size()-1 && nSigned < nRequired; i++)\n+    {\n+        const valtype& pubkey = multisigdata[i];\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (Sign1(keyID, keystore, hash, nHashType, scriptSigRet))\n+            ++nSigned;\n+    }\n+    return nSigned==nRequired;\n+}\n+\n+//\n+// Sign scriptPubKey with private keys stored in keystore, given transaction hash and hash type.\n+// Signatures are returned in scriptSigRet (or returns false if scriptPubKey can't be signed),\n+// unless whichTypeRet is TX_SCRIPTHASH, in which case scriptSigRet is the redemption script.\n+// Returns false if scriptPubKey could not be completely satisfied.\n+//\n+bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash, int nHashType,\n+                  CScript& scriptSigRet, txnouttype& whichTypeRet)\n+{\n+    scriptSigRet.clear();\n+\n+    vector<valtype> vSolutions;\n+    if (!Solver(scriptPubKey, whichTypeRet, vSolutions))\n+        return false;\n+\n+    CKeyID keyID;\n+    switch (whichTypeRet)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+        return false;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        return Sign1(keyID, keystore, hash, nHashType, scriptSigRet);\n+    case TX_PUBKEYHASH:\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        if (!Sign1(keyID, keystore, hash, nHashType, scriptSigRet))\n+            return false;\n+        else\n+        {\n+            CPubKey vch;\n+            keystore.GetPubKey(keyID, vch);\n+            scriptSigRet << vch;\n+        }\n+        return true;\n+    case TX_SCRIPTHASH:\n+        return keystore.GetCScript(uint160(vSolutions[0]), scriptSigRet);\n+\n+    case TX_MULTISIG:\n+        scriptSigRet << OP_0; // workaround CHECKMULTISIG bug\n+        return (SignN(vSolutions, keystore, hash, nHashType, scriptSigRet));\n+    }\n+    return false;\n+}\n+\n+bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n+{\n+    assert(nIn < txTo.vin.size());\n+    CTxIn& txin = txTo.vin[nIn];\n+\n+    // Leave out the signature from the hash, since a signature can't sign itself.\n+    // The checksig op will also drop the signatures from its hash.\n+    uint256 hash = SignatureHash(fromPubKey, txTo, nIn, nHashType);\n+\n+    txnouttype whichType;\n+    if (!Solver(keystore, fromPubKey, hash, nHashType, txin.scriptSig, whichType))\n+        return false;\n+\n+    if (whichType == TX_SCRIPTHASH)\n+    {\n+        // Solver returns the subscript that need to be evaluated;\n+        // the final scriptSig is the signatures from that\n+        // and then the serialized subscript:\n+        CScript subscript = txin.scriptSig;\n+\n+        // Recompute txn hash using subscript in place of scriptPubKey:\n+        uint256 hash2 = SignatureHash(subscript, txTo, nIn, nHashType);\n+\n+        txnouttype subType;\n+        bool fSolved =\n+            Solver(keystore, subscript, hash2, nHashType, txin.scriptSig, subType) && subType != TX_SCRIPTHASH;\n+        // Append serialized subscript whether or not it is completely signed:\n+        txin.scriptSig << static_cast<valtype>(subscript);\n+        if (!fSolved) return false;\n+    }\n+\n+    // Test solution\n+    return VerifyScript(txin.scriptSig, fromPubKey, txTo, nIn, STANDARD_SCRIPT_VERIFY_FLAGS, 0);\n+}\n+\n+bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n+{\n+    assert(nIn < txTo.vin.size());\n+    CTxIn& txin = txTo.vin[nIn];\n+    assert(txin.prevout.n < txFrom.vout.size());\n+    const CTxOut& txout = txFrom.vout[txin.prevout.n];\n+\n+    return SignSignature(keystore, txout.scriptPubKey, txTo, nIn, nHashType);\n+}\n+\n+static CScript PushAll(const vector<valtype>& values)\n+{\n+    CScript result;\n+    BOOST_FOREACH(const valtype& v, values)\n+        result << v;\n+    return result;\n+}\n+\n+static CScript CombineMultisig(CScript scriptPubKey, const CMutableTransaction& txTo, unsigned int nIn,\n+                               const vector<valtype>& vSolutions,\n+                               vector<valtype>& sigs1, vector<valtype>& sigs2)\n+{\n+    // Combine all the signatures we've got:\n+    set<valtype> allsigs;\n+    BOOST_FOREACH(const valtype& v, sigs1)\n+    {\n+        if (!v.empty())\n+            allsigs.insert(v);\n+    }\n+    BOOST_FOREACH(const valtype& v, sigs2)\n+    {\n+        if (!v.empty())\n+            allsigs.insert(v);\n+    }\n+\n+    // Build a map of pubkey -> signature by matching sigs to pubkeys:\n+    assert(vSolutions.size() > 1);\n+    unsigned int nSigsRequired = vSolutions.front()[0];\n+    unsigned int nPubKeys = vSolutions.size()-2;\n+    map<valtype, valtype> sigs;\n+    BOOST_FOREACH(const valtype& sig, allsigs)\n+    {\n+        for (unsigned int i = 0; i < nPubKeys; i++)\n+        {\n+            const valtype& pubkey = vSolutions[i+1];\n+            if (sigs.count(pubkey))\n+                continue; // Already got a sig for this pubkey\n+\n+            if (CheckSig(sig, pubkey, scriptPubKey, txTo, nIn, 0, 0))\n+            {\n+                sigs[pubkey] = sig;\n+                break;\n+            }\n+        }\n+    }\n+    // Now build a merged CScript:\n+    unsigned int nSigsHave = 0;\n+    CScript result; result << OP_0; // pop-one-too-many workaround\n+    for (unsigned int i = 0; i < nPubKeys && nSigsHave < nSigsRequired; i++)\n+    {\n+        if (sigs.count(vSolutions[i+1]))\n+        {\n+            result << sigs[vSolutions[i+1]];\n+            ++nSigsHave;\n+        }\n+    }\n+    // Fill any missing with OP_0:\n+    for (unsigned int i = nSigsHave; i < nSigsRequired; i++)\n+        result << OP_0;\n+\n+    return result;\n+}\n+\n+static CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n+                                 const txnouttype txType, const vector<valtype>& vSolutions,\n+                                 vector<valtype>& sigs1, vector<valtype>& sigs2)\n+{\n+    switch (txType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+        // Don't know anything about this, assume bigger one is correct:\n+        if (sigs1.size() >= sigs2.size())\n+            return PushAll(sigs1);\n+        return PushAll(sigs2);\n+    case TX_PUBKEY:\n+    case TX_PUBKEYHASH:\n+        // Signatures are bigger than placeholders or empty scripts:\n+        if (sigs1.empty() || sigs1[0].empty())\n+            return PushAll(sigs2);\n+        return PushAll(sigs1);\n+    case TX_SCRIPTHASH:\n+        if (sigs1.empty() || sigs1.back().empty())\n+            return PushAll(sigs2);\n+        else if (sigs2.empty() || sigs2.back().empty())\n+            return PushAll(sigs1);\n+        else\n+        {\n+            // Recur to combine:\n+            valtype spk = sigs1.back();\n+            CScript pubKey2(spk.begin(), spk.end());\n+\n+            txnouttype txType2;\n+            vector<vector<unsigned char> > vSolutions2;\n+            Solver(pubKey2, txType2, vSolutions2);\n+            sigs1.pop_back();\n+            sigs2.pop_back();\n+            CScript result = CombineSignatures(pubKey2, txTo, nIn, txType2, vSolutions2, sigs1, sigs2);\n+            result << spk;\n+            return result;\n+        }\n+    case TX_MULTISIG:\n+        return CombineMultisig(scriptPubKey, txTo, nIn, vSolutions, sigs1, sigs2);\n+    }\n+\n+    return CScript();\n+}\n+\n+CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n+                          const CScript& scriptSig1, const CScript& scriptSig2)\n+{\n+    txnouttype txType;\n+    vector<vector<unsigned char> > vSolutions;\n+    Solver(scriptPubKey, txType, vSolutions);\n+\n+    vector<valtype> stack1;\n+    EvalScript(stack1, scriptSig1, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC, 0);\n+    vector<valtype> stack2;\n+    EvalScript(stack2, scriptSig2, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC, 0);\n+\n+    return CombineSignatures(scriptPubKey, txTo, nIn, txType, vSolutions, stack1, stack2);\n+}"
      },
      {
        "sha": "51723b53af552da084283fc74c2039d73a8142be",
        "filename": "src/script/sign.h",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=24eb154855fa8d93c7130ead16b81151ee37cfdb",
        "patch": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef H_BITCOIN_SCRIPT_SIGN\n+#define H_BITCOIN_SCRIPT_SIGN\n+\n+#include \"script/interpreter.h\"\n+\n+class CKeyStore;\n+class CScript;\n+class CTransaction;\n+struct CMutableTransaction;\n+\n+bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n+bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n+\n+// Given two sets of signatures for scriptPubKey, possibly with OP_0 placeholders,\n+// combine them intelligently and return the result.\n+CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsigned int nIn, const CScript& scriptSig1, const CScript& scriptSig2);\n+\n+#endif"
      },
      {
        "sha": "a636eeedab774e4a5499f9b34f17b4d1712b030d",
        "filename": "src/scriptutils.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 245,
        "changes": 246,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/scriptutils.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/scriptutils.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scriptutils.cpp?ref=24eb154855fa8d93c7130ead16b81151ee37cfdb",
        "patch": "@@ -5,92 +5,16 @@\n \n #include \"scriptutils.h\"\n \n-#include \"core.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n+#include \"script/standard.h\"\n \n #include <boost/foreach.hpp>\n \n using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n-bool Sign1(const CKeyID& address, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n-{\n-    CKey key;\n-    if (!keystore.GetKey(address, key))\n-        return false;\n-\n-    vector<unsigned char> vchSig;\n-    if (!key.Sign(hash, vchSig))\n-        return false;\n-    vchSig.push_back((unsigned char)nHashType);\n-    scriptSigRet << vchSig;\n-\n-    return true;\n-}\n-\n-bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n-{\n-    int nSigned = 0;\n-    int nRequired = multisigdata.front()[0];\n-    for (unsigned int i = 1; i < multisigdata.size()-1 && nSigned < nRequired; i++)\n-    {\n-        const valtype& pubkey = multisigdata[i];\n-        CKeyID keyID = CPubKey(pubkey).GetID();\n-        if (Sign1(keyID, keystore, hash, nHashType, scriptSigRet))\n-            ++nSigned;\n-    }\n-    return nSigned==nRequired;\n-}\n-\n-//\n-// Sign scriptPubKey with private keys stored in keystore, given transaction hash and hash type.\n-// Signatures are returned in scriptSigRet (or returns false if scriptPubKey can't be signed),\n-// unless whichTypeRet is TX_SCRIPTHASH, in which case scriptSigRet is the redemption script.\n-// Returns false if scriptPubKey could not be completely satisfied.\n-//\n-bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash, int nHashType,\n-                  CScript& scriptSigRet, txnouttype& whichTypeRet)\n-{\n-    scriptSigRet.clear();\n-\n-    vector<valtype> vSolutions;\n-    if (!Solver(scriptPubKey, whichTypeRet, vSolutions))\n-        return false;\n-\n-    CKeyID keyID;\n-    switch (whichTypeRet)\n-    {\n-    case TX_NONSTANDARD:\n-    case TX_NULL_DATA:\n-        return false;\n-    case TX_PUBKEY:\n-        keyID = CPubKey(vSolutions[0]).GetID();\n-        return Sign1(keyID, keystore, hash, nHashType, scriptSigRet);\n-    case TX_PUBKEYHASH:\n-        keyID = CKeyID(uint160(vSolutions[0]));\n-        if (!Sign1(keyID, keystore, hash, nHashType, scriptSigRet))\n-            return false;\n-        else\n-        {\n-            CPubKey vch;\n-            keystore.GetPubKey(keyID, vch);\n-            scriptSigRet << vch;\n-        }\n-        return true;\n-    case TX_SCRIPTHASH:\n-        return keystore.GetCScript(uint160(vSolutions[0]), scriptSigRet);\n-\n-    case TX_MULTISIG:\n-        scriptSigRet << OP_0; // workaround CHECKMULTISIG bug\n-        return (SignN(vSolutions, keystore, hash, nHashType, scriptSigRet));\n-    }\n-    return false;\n-}\n-\n unsigned int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)\n {\n     unsigned int nResult = 0;\n@@ -201,171 +125,3 @@ class CAffectedKeysVisitor : public boost::static_visitor<void> {\n void ExtractAffectedKeys(const CKeyStore &keystore, const CScript& scriptPubKey, std::vector<CKeyID> &vKeys) {\n     CAffectedKeysVisitor(keystore, vKeys).Process(scriptPubKey);\n }\n-\n-bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n-{\n-    assert(nIn < txTo.vin.size());\n-    CTxIn& txin = txTo.vin[nIn];\n-\n-    // Leave out the signature from the hash, since a signature can't sign itself.\n-    // The checksig op will also drop the signatures from its hash.\n-    uint256 hash = SignatureHash(fromPubKey, txTo, nIn, nHashType);\n-\n-    txnouttype whichType;\n-    if (!Solver(keystore, fromPubKey, hash, nHashType, txin.scriptSig, whichType))\n-        return false;\n-\n-    if (whichType == TX_SCRIPTHASH)\n-    {\n-        // Solver returns the subscript that need to be evaluated;\n-        // the final scriptSig is the signatures from that\n-        // and then the serialized subscript:\n-        CScript subscript = txin.scriptSig;\n-\n-        // Recompute txn hash using subscript in place of scriptPubKey:\n-        uint256 hash2 = SignatureHash(subscript, txTo, nIn, nHashType);\n-\n-        txnouttype subType;\n-        bool fSolved =\n-            Solver(keystore, subscript, hash2, nHashType, txin.scriptSig, subType) && subType != TX_SCRIPTHASH;\n-        // Append serialized subscript whether or not it is completely signed:\n-        txin.scriptSig << static_cast<valtype>(subscript);\n-        if (!fSolved) return false;\n-    }\n-\n-    // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, txTo, nIn, STANDARD_SCRIPT_VERIFY_FLAGS, 0);\n-}\n-\n-bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n-{\n-    assert(nIn < txTo.vin.size());\n-    CTxIn& txin = txTo.vin[nIn];\n-    assert(txin.prevout.n < txFrom.vout.size());\n-    const CTxOut& txout = txFrom.vout[txin.prevout.n];\n-\n-    return SignSignature(keystore, txout.scriptPubKey, txTo, nIn, nHashType);\n-}\n-\n-static CScript PushAll(const vector<valtype>& values)\n-{\n-    CScript result;\n-    BOOST_FOREACH(const valtype& v, values)\n-        result << v;\n-    return result;\n-}\n-\n-static CScript CombineMultisig(CScript scriptPubKey, const CMutableTransaction& txTo, unsigned int nIn,\n-                               const vector<valtype>& vSolutions,\n-                               vector<valtype>& sigs1, vector<valtype>& sigs2)\n-{\n-    // Combine all the signatures we've got:\n-    set<valtype> allsigs;\n-    BOOST_FOREACH(const valtype& v, sigs1)\n-    {\n-        if (!v.empty())\n-            allsigs.insert(v);\n-    }\n-    BOOST_FOREACH(const valtype& v, sigs2)\n-    {\n-        if (!v.empty())\n-            allsigs.insert(v);\n-    }\n-\n-    // Build a map of pubkey -> signature by matching sigs to pubkeys:\n-    assert(vSolutions.size() > 1);\n-    unsigned int nSigsRequired = vSolutions.front()[0];\n-    unsigned int nPubKeys = vSolutions.size()-2;\n-    map<valtype, valtype> sigs;\n-    BOOST_FOREACH(const valtype& sig, allsigs)\n-    {\n-        for (unsigned int i = 0; i < nPubKeys; i++)\n-        {\n-            const valtype& pubkey = vSolutions[i+1];\n-            if (sigs.count(pubkey))\n-                continue; // Already got a sig for this pubkey\n-\n-            if (CheckSig(sig, pubkey, scriptPubKey, txTo, nIn, 0, 0))\n-            {\n-                sigs[pubkey] = sig;\n-                break;\n-            }\n-        }\n-    }\n-    // Now build a merged CScript:\n-    unsigned int nSigsHave = 0;\n-    CScript result; result << OP_0; // pop-one-too-many workaround\n-    for (unsigned int i = 0; i < nPubKeys && nSigsHave < nSigsRequired; i++)\n-    {\n-        if (sigs.count(vSolutions[i+1]))\n-        {\n-            result << sigs[vSolutions[i+1]];\n-            ++nSigsHave;\n-        }\n-    }\n-    // Fill any missing with OP_0:\n-    for (unsigned int i = nSigsHave; i < nSigsRequired; i++)\n-        result << OP_0;\n-\n-    return result;\n-}\n-\n-static CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n-                                 const txnouttype txType, const vector<valtype>& vSolutions,\n-                                 vector<valtype>& sigs1, vector<valtype>& sigs2)\n-{\n-    switch (txType)\n-    {\n-    case TX_NONSTANDARD:\n-    case TX_NULL_DATA:\n-        // Don't know anything about this, assume bigger one is correct:\n-        if (sigs1.size() >= sigs2.size())\n-            return PushAll(sigs1);\n-        return PushAll(sigs2);\n-    case TX_PUBKEY:\n-    case TX_PUBKEYHASH:\n-        // Signatures are bigger than placeholders or empty scripts:\n-        if (sigs1.empty() || sigs1[0].empty())\n-            return PushAll(sigs2);\n-        return PushAll(sigs1);\n-    case TX_SCRIPTHASH:\n-        if (sigs1.empty() || sigs1.back().empty())\n-            return PushAll(sigs2);\n-        else if (sigs2.empty() || sigs2.back().empty())\n-            return PushAll(sigs1);\n-        else\n-        {\n-            // Recur to combine:\n-            valtype spk = sigs1.back();\n-            CScript pubKey2(spk.begin(), spk.end());\n-\n-            txnouttype txType2;\n-            vector<vector<unsigned char> > vSolutions2;\n-            Solver(pubKey2, txType2, vSolutions2);\n-            sigs1.pop_back();\n-            sigs2.pop_back();\n-            CScript result = CombineSignatures(pubKey2, txTo, nIn, txType2, vSolutions2, sigs1, sigs2);\n-            result << spk;\n-            return result;\n-        }\n-    case TX_MULTISIG:\n-        return CombineMultisig(scriptPubKey, txTo, nIn, vSolutions, sigs1, sigs2);\n-    }\n-\n-    return CScript();\n-}\n-\n-CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n-                          const CScript& scriptSig1, const CScript& scriptSig2)\n-{\n-    txnouttype txType;\n-    vector<vector<unsigned char> > vSolutions;\n-    Solver(scriptPubKey, txType, vSolutions);\n-\n-    vector<valtype> stack1;\n-    EvalScript(stack1, scriptSig1, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC, 0);\n-    vector<valtype> stack2;\n-    EvalScript(stack2, scriptSig2, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC, 0);\n-\n-    return CombineSignatures(scriptPubKey, txTo, nIn, txType, vSolutions, stack1, stack2);\n-}"
      },
      {
        "sha": "98080fc456cbde128531308ff62acbc53a8031ae",
        "filename": "src/scriptutils.h",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/scriptutils.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/scriptutils.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scriptutils.h?ref=24eb154855fa8d93c7130ead16b81151ee37cfdb",
        "patch": "@@ -8,17 +8,8 @@\n \n #include \"key.h\"\n #include \"script/script.h\"\n-#include \"script/interpreter.h\"\n-#include \"script/standard.h\"\n-\n-#include <stdexcept>\n-#include <stdint.h>\n-#include <string>\n-#include <vector>\n \n class CKeyStore;\n-class CTransaction;\n-struct CMutableTransaction;\n \n /** IsMine() return codes */\n enum isminetype\n@@ -34,11 +25,5 @@ typedef uint8_t isminefilter;\n isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest);\n void ExtractAffectedKeys(const CKeyStore &keystore, const CScript& scriptPubKey, std::vector<CKeyID> &vKeys);\n-bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n-bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n-\n-// Given two sets of signatures for scriptPubKey, possibly with OP_0 placeholders,\n-// combine them intelligently and return the result.\n-CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsigned int nIn, const CScript& scriptSig1, const CScript& scriptSig2);\n \n #endif // H_BITCOIN_SCRIPT"
      },
      {
        "sha": "fa4edff63f1e9b7aba3bb454200e07193e6d1bc5",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=24eb154855fa8d93c7130ead16b81151ee37cfdb",
        "patch": "@@ -12,7 +12,7 @@\n #include \"main.h\"\n #include \"net.h\"\n #include \"pow.h\"\n-#include \"scriptutils.h\"\n+#include \"script/sign.h\"\n #include \"serialize.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "6c5afa130c76c406a5eeb2cc05d2cc2faf9914b3",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=24eb154855fa8d93c7130ead16b81151ee37cfdb",
        "patch": "@@ -7,6 +7,7 @@\n #include \"main.h\"\n #include \"script/script.h\"\n #include \"script/interpreter.h\"\n+#include \"script/sign.h\"\n #include \"scriptutils.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "b7e7487bb2bb8b39d7d84257148f03c1e42cb240",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=24eb154855fa8d93c7130ead16b81151ee37cfdb",
        "patch": "@@ -6,6 +6,7 @@\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"script/script.h\"\n+#include \"script/sign.h\"\n #include \"scriptutils.h\"\n \n #include <vector>"
      },
      {
        "sha": "88efc3896493b4461b8dbbf928fee41d73954d23",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=24eb154855fa8d93c7130ead16b81151ee37cfdb",
        "patch": "@@ -9,7 +9,7 @@\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"script/script.h\"\n-#include \"scriptutils.h\"\n+#include \"script/sign.h\"\n #include \"core_io.h\"\n \n #include <fstream>"
      },
      {
        "sha": "55cc6e04ed45fcce40fd1ef1ee4624ac88b0eee3",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24eb154855fa8d93c7130ead16b81151ee37cfdb/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=24eb154855fa8d93c7130ead16b81151ee37cfdb",
        "patch": "@@ -9,6 +9,8 @@\n #include \"checkpoints.h\"\n #include \"coincontrol.h\"\n #include \"net.h\"\n+#include \"script/script.h\"\n+#include \"script/sign.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\""
      }
    ]
  },
  {
    "sha": "46fe90bdc840b50fee9261499479026ca4d1ef47",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmZlOTBiZGM4NDBiNTBmZWU5MjYxNDk5NDc5MDI2Y2E0ZDFlZjQ3",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-08-29T20:07:39Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T00:27:04Z"
      },
      "message": "Move scriptutils.o to wallet",
      "tree": {
        "sha": "bf58a505fb8ace4ab42a02c4187bd1ef6f906e05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf58a505fb8ace4ab42a02c4187bd1ef6f906e05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46fe90bdc840b50fee9261499479026ca4d1ef47",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46fe90bdc840b50fee9261499479026ca4d1ef47",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46fe90bdc840b50fee9261499479026ca4d1ef47",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46fe90bdc840b50fee9261499479026ca4d1ef47/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24eb154855fa8d93c7130ead16b81151ee37cfdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24eb154855fa8d93c7130ead16b81151ee37cfdb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24eb154855fa8d93c7130ead16b81151ee37cfdb"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "27bcdc7bcc1677b67feab57fa72fc13cc27ebb26",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46fe90bdc840b50fee9261499479026ca4d1ef47/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46fe90bdc840b50fee9261499479026ca4d1ef47/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=46fe90bdc840b50fee9261499479026ca4d1ef47",
        "patch": "@@ -173,6 +173,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   crypter.cpp \\\n   rpcdump.cpp \\\n   rpcwallet.cpp \\\n+  scriptutils.cpp \\\n   wallet.cpp \\\n   walletdb.cpp \\\n   $(BITCOIN_CORE_H)\n@@ -216,7 +217,6 @@ libbitcoin_common_a_SOURCES = \\\n   script/script.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n-  scriptutils.cpp \\\n   $(BITCOIN_CORE_H)\n \n # util: shared between all executables."
      },
      {
        "sha": "935bb4f599a78e9cc2e32e1a0cae7492ec714317",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46fe90bdc840b50fee9261499479026ca4d1ef47/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46fe90bdc840b50fee9261499479026ca4d1ef47/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=46fe90bdc840b50fee9261499479026ca4d1ef47",
        "patch": "@@ -195,8 +195,10 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         CTxDestination addr;\n         BOOST_CHECK(ExtractDestination(s, addr));\n         BOOST_CHECK(addr == keyaddr[0]);\n+#ifdef ENABLE_WALLET\n         BOOST_CHECK(IsMine(keystore, s));\n         BOOST_CHECK(!IsMine(emptykeystore, s));\n+#endif\n     }\n     {\n         vector<valtype> solutions;\n@@ -208,8 +210,10 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         CTxDestination addr;\n         BOOST_CHECK(ExtractDestination(s, addr));\n         BOOST_CHECK(addr == keyaddr[0]);\n+#ifdef ENABLE_WALLET\n         BOOST_CHECK(IsMine(keystore, s));\n         BOOST_CHECK(!IsMine(emptykeystore, s));\n+#endif\n     }\n     {\n         vector<valtype> solutions;\n@@ -220,9 +224,11 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         BOOST_CHECK_EQUAL(solutions.size(), 4U);\n         CTxDestination addr;\n         BOOST_CHECK(!ExtractDestination(s, addr));\n+#ifdef ENABLE_WALLET\n         BOOST_CHECK(IsMine(keystore, s));\n         BOOST_CHECK(!IsMine(emptykeystore, s));\n         BOOST_CHECK(!IsMine(partialkeystore, s));\n+#endif\n     }\n     {\n         vector<valtype> solutions;\n@@ -237,9 +243,11 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         BOOST_CHECK(addrs[0] == keyaddr[0]);\n         BOOST_CHECK(addrs[1] == keyaddr[1]);\n         BOOST_CHECK(nRequired == 1);\n+#ifdef ENABLE_WALLET\n         BOOST_CHECK(IsMine(keystore, s));\n         BOOST_CHECK(!IsMine(emptykeystore, s));\n         BOOST_CHECK(!IsMine(partialkeystore, s));\n+#endif\n     }\n     {\n         vector<valtype> solutions;"
      },
      {
        "sha": "ad9378a7262e7b7ff94f4766ea79f254b79e8b43",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46fe90bdc840b50fee9261499479026ca4d1ef47/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46fe90bdc840b50fee9261499479026ca4d1ef47/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=46fe90bdc840b50fee9261499479026ca4d1ef47",
        "patch": "@@ -95,7 +95,9 @@ BOOST_AUTO_TEST_CASE(sign)\n         txTo[i].vin[0].prevout.n = i;\n         txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n         txTo[i].vout[0].nValue = 1;\n+#ifdef ENABLE_WALLET\n         BOOST_CHECK_MESSAGE(IsMine(keystore, txFrom.vout[i].scriptPubKey), strprintf(\"IsMine %d\", i));\n+#endif\n     }\n     for (int i = 0; i < 8; i++)\n     {\n@@ -189,7 +191,9 @@ BOOST_AUTO_TEST_CASE(set)\n         txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n         txTo[i].vout[0].nValue = 1*CENT;\n         txTo[i].vout[0].scriptPubKey = inner[i];\n+#ifdef ENABLE_WALLET\n         BOOST_CHECK_MESSAGE(IsMine(keystore, txFrom.vout[i].scriptPubKey), strprintf(\"IsMine %d\", i));\n+#endif\n     }\n     for (int i = 0; i < 4; i++)\n     {"
      }
    ]
  },
  {
    "sha": "31cbecf56661a99559306661f1c70354ef9be201",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWNiZWNmNTY2NjFhOTk1NTkzMDY2NjFmMWM3MDM1NGVmOWJlMjAx",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-08-27T15:46:30Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T00:27:04Z"
      },
      "message": "Move CAffectedKeysVisitor to wallet.cpp (remove ExtractAffectedKeys)",
      "tree": {
        "sha": "38795929524f811514e171130c3745b8eb208bc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38795929524f811514e171130c3745b8eb208bc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31cbecf56661a99559306661f1c70354ef9be201",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31cbecf56661a99559306661f1c70354ef9be201",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31cbecf56661a99559306661f1c70354ef9be201",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31cbecf56661a99559306661f1c70354ef9be201/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46fe90bdc840b50fee9261499479026ca4d1ef47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46fe90bdc840b50fee9261499479026ca4d1ef47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46fe90bdc840b50fee9261499479026ca4d1ef47"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 34,
      "deletions": 38
    },
    "files": [
      {
        "sha": "5099d7515a433cb6492340bc8b3a7cb05ab3081a",
        "filename": "src/scriptutils.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 36,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31cbecf56661a99559306661f1c70354ef9be201/src/scriptutils.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31cbecf56661a99559306661f1c70354ef9be201/src/scriptutils.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scriptutils.cpp?ref=31cbecf56661a99559306661f1c70354ef9be201",
        "patch": "@@ -89,39 +89,3 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         return ISMINE_WATCH_ONLY;\n     return ISMINE_NO;\n }\n-\n-class CAffectedKeysVisitor : public boost::static_visitor<void> {\n-private:\n-    const CKeyStore &keystore;\n-    std::vector<CKeyID> &vKeys;\n-\n-public:\n-    CAffectedKeysVisitor(const CKeyStore &keystoreIn, std::vector<CKeyID> &vKeysIn) : keystore(keystoreIn), vKeys(vKeysIn) {}\n-\n-    void Process(const CScript &script) {\n-        txnouttype type;\n-        std::vector<CTxDestination> vDest;\n-        int nRequired;\n-        if (ExtractDestinations(script, type, vDest, nRequired)) {\n-            BOOST_FOREACH(const CTxDestination &dest, vDest)\n-                boost::apply_visitor(*this, dest);\n-        }\n-    }\n-\n-    void operator()(const CKeyID &keyId) {\n-        if (keystore.HaveKey(keyId))\n-            vKeys.push_back(keyId);\n-    }\n-\n-    void operator()(const CScriptID &scriptId) {\n-        CScript script;\n-        if (keystore.GetCScript(scriptId, script))\n-            Process(script);\n-    }\n-\n-    void operator()(const CNoDestination &none) {}\n-};\n-\n-void ExtractAffectedKeys(const CKeyStore &keystore, const CScript& scriptPubKey, std::vector<CKeyID> &vKeys) {\n-    CAffectedKeysVisitor(keystore, vKeys).Process(scriptPubKey);\n-}"
      },
      {
        "sha": "4e98a1f74fa29f2fc80dca552c68809681be7e92",
        "filename": "src/scriptutils.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31cbecf56661a99559306661f1c70354ef9be201/src/scriptutils.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31cbecf56661a99559306661f1c70354ef9be201/src/scriptutils.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scriptutils.h?ref=31cbecf56661a99559306661f1c70354ef9be201",
        "patch": "@@ -24,6 +24,5 @@ typedef uint8_t isminefilter;\n \n isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest);\n-void ExtractAffectedKeys(const CKeyStore &keystore, const CScript& scriptPubKey, std::vector<CKeyID> &vKeys);\n \n #endif // H_BITCOIN_SCRIPT"
      },
      {
        "sha": "0caac87bf28de2c304a333a84f165773934eff29",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 1,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31cbecf56661a99559306661f1c70354ef9be201/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31cbecf56661a99559306661f1c70354ef9be201/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=31cbecf56661a99559306661f1c70354ef9be201",
        "patch": "@@ -2086,6 +2086,39 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts)\n     }\n }\n \n+\n+class CAffectedKeysVisitor : public boost::static_visitor<void> {\n+private:\n+    const CKeyStore &keystore;\n+    std::vector<CKeyID> &vKeys;\n+\n+public:\n+    CAffectedKeysVisitor(const CKeyStore &keystoreIn, std::vector<CKeyID> &vKeysIn) : keystore(keystoreIn), vKeys(vKeysIn) {}\n+\n+    void Process(const CScript &script) {\n+        txnouttype type;\n+        std::vector<CTxDestination> vDest;\n+        int nRequired;\n+        if (ExtractDestinations(script, type, vDest, nRequired)) {\n+            BOOST_FOREACH(const CTxDestination &dest, vDest)\n+                boost::apply_visitor(*this, dest);\n+        }\n+    }\n+\n+    void operator()(const CKeyID &keyId) {\n+        if (keystore.HaveKey(keyId))\n+            vKeys.push_back(keyId);\n+    }\n+\n+    void operator()(const CScriptID &scriptId) {\n+        CScript script;\n+        if (keystore.GetCScript(scriptId, script))\n+            Process(script);\n+    }\n+\n+    void operator()(const CNoDestination &none) {}\n+};\n+\n void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     mapKeyBirth.clear();\n@@ -2121,7 +2154,7 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n             int nHeight = blit->second->nHeight;\n             BOOST_FOREACH(const CTxOut &txout, wtx.vout) {\n                 // iterate over all their outputs\n-                ::ExtractAffectedKeys(*this, txout.scriptPubKey, vAffected);\n+                CAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n                 BOOST_FOREACH(const CKeyID &keyid, vAffected) {\n                     // ... and all their affected keys\n                     std::map<CKeyID, CBlockIndex*>::iterator rit = mapKeyFirstBlock.find(keyid);"
      }
    ]
  },
  {
    "sha": "ad52c234d91f95caf884390fa072b2f866d43297",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDUyYzIzNGQ5MWY5NWNhZjg4NDM5MGZhMDcyYjJmODY2ZDQzMjk3",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-08-30T11:40:37Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T00:27:04Z"
      },
      "message": "Rename scriptutils.o to wallet_ismine.o",
      "tree": {
        "sha": "27517ba9d74a120349e2dc712b9d40f65465f1cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27517ba9d74a120349e2dc712b9d40f65465f1cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad52c234d91f95caf884390fa072b2f866d43297",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad52c234d91f95caf884390fa072b2f866d43297",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad52c234d91f95caf884390fa072b2f866d43297",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad52c234d91f95caf884390fa072b2f866d43297/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31cbecf56661a99559306661f1c70354ef9be201",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31cbecf56661a99559306661f1c70354ef9be201",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31cbecf56661a99559306661f1c70354ef9be201"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "b2071f49e2358545aebbc2cbd103bfc691474dc3",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad52c234d91f95caf884390fa072b2f866d43297/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad52c234d91f95caf884390fa072b2f866d43297/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ad52c234d91f95caf884390fa072b2f866d43297",
        "patch": "@@ -103,7 +103,7 @@ BITCOIN_CORE_H = \\\n   script/script.h \\\n   script/sign.h \\\n   script/standard.h \\\n-  scriptutils.h \\\n+  wallet_ismine.h \\\n   serialize.h \\\n   sync.h \\\n   threadsafety.h \\\n@@ -173,7 +173,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   crypter.cpp \\\n   rpcdump.cpp \\\n   rpcwallet.cpp \\\n-  scriptutils.cpp \\\n+  wallet_ismine.cpp \\\n   wallet.cpp \\\n   walletdb.cpp \\\n   $(BITCOIN_CORE_H)"
      },
      {
        "sha": "6008bda7fe5a5b303443f3f959e64d4d10cdc386",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad52c234d91f95caf884390fa072b2f866d43297/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad52c234d91f95caf884390fa072b2f866d43297/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=ad52c234d91f95caf884390fa072b2f866d43297",
        "patch": "@@ -8,7 +8,7 @@\n #include \"script/script.h\"\n #include \"script/interpreter.h\"\n #include \"script/sign.h\"\n-#include \"scriptutils.h\"\n+#include \"wallet_ismine.h\"\n #include \"uint256.h\"\n \n #include <boost/assign/std/vector.hpp>"
      },
      {
        "sha": "0bbc0d42a8e68317401895b404c2c786822f6ee2",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad52c234d91f95caf884390fa072b2f866d43297/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad52c234d91f95caf884390fa072b2f866d43297/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=ad52c234d91f95caf884390fa072b2f866d43297",
        "patch": "@@ -7,7 +7,7 @@\n #include \"main.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n-#include \"scriptutils.h\"\n+#include \"wallet_ismine.h\"\n \n #include <vector>\n "
      },
      {
        "sha": "5c6f09606420b623ec0a6f36da0b3769e04e4537",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad52c234d91f95caf884390fa072b2f866d43297/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad52c234d91f95caf884390fa072b2f866d43297/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=ad52c234d91f95caf884390fa072b2f866d43297",
        "patch": "@@ -11,7 +11,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n-#include \"scriptutils.h\"\n+#include \"wallet_ismine.h\"\n #include \"ui_interface.h\"\n #include \"walletdb.h\"\n "
      },
      {
        "sha": "1c2c117fadbb5c6173d97877a2e4c4cca4b0cce1",
        "filename": "src/wallet_ismine.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad52c234d91f95caf884390fa072b2f866d43297/src/wallet_ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad52c234d91f95caf884390fa072b2f866d43297/src/wallet_ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet_ismine.cpp?ref=ad52c234d91f95caf884390fa072b2f866d43297",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"scriptutils.h\"\n+#include \"wallet_ismine.h\"\n \n #include \"key.h\"\n #include \"keystore.h\"",
        "previous_filename": "src/scriptutils.cpp"
      },
      {
        "sha": "9915e9f7bba3ac7a94d0498626470c0188898aba",
        "filename": "src/wallet_ismine.h",
        "status": "renamed",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad52c234d91f95caf884390fa072b2f866d43297/src/wallet_ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad52c234d91f95caf884390fa072b2f866d43297/src/wallet_ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet_ismine.h?ref=ad52c234d91f95caf884390fa072b2f866d43297",
        "patch": "@@ -3,8 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef H_BITCOIN_SCRIPTUTILS\n-#define H_BITCOIN_SCRIPTUTILS\n+#ifndef H_BITCOIN_WALLET_ISMINE\n+#define H_BITCOIN_WALLET_ISMINE\n \n #include \"key.h\"\n #include \"script/script.h\"",
        "previous_filename": "src/scriptutils.h"
      }
    ]
  },
  {
    "sha": "d07dc11ccdfa7b5371396f882266f83c4956111e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDdkYzExY2NkZmE3YjUzNzEzOTZmODgyMjY2ZjgzYzQ5NTYxMTFl",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-07-18T13:41:55Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T01:09:36Z"
      },
      "message": "Remove unused function main:VerifySignature",
      "tree": {
        "sha": "c7a25f6a40e5d5769ba5039568b4dde623eace02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7a25f6a40e5d5769ba5039568b4dde623eace02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d07dc11ccdfa7b5371396f882266f83c4956111e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d07dc11ccdfa7b5371396f882266f83c4956111e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d07dc11ccdfa7b5371396f882266f83c4956111e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d07dc11ccdfa7b5371396f882266f83c4956111e/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad52c234d91f95caf884390fa072b2f866d43297",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad52c234d91f95caf884390fa072b2f866d43297",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad52c234d91f95caf884390fa072b2f866d43297"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 1,
      "deletions": 8
    },
    "files": [
      {
        "sha": "98528189b24bca103e2c02757c6647699773c0ae",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d07dc11ccdfa7b5371396f882266f83c4956111e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d07dc11ccdfa7b5371396f882266f83c4956111e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d07dc11ccdfa7b5371396f882266f83c4956111e",
        "patch": "@@ -1345,11 +1345,6 @@ bool CScriptCheck::operator()() const {\n     return true;\n }\n \n-bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType)\n-{\n-    return CScriptCheck(txFrom, txTo, nIn, flags, nHashType)();\n-}\n-\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())"
      },
      {
        "sha": "5c34ce529474c2633fe3537b89e6b83cbc57ffb7",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d07dc11ccdfa7b5371396f882266f83c4956111e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d07dc11ccdfa7b5371396f882266f83c4956111e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d07dc11ccdfa7b5371396f882266f83c4956111e",
        "patch": "@@ -167,8 +167,6 @@ int64_t GetBlockValue(int nHeight, int64_t nFees);\n \n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n-/** Verify a signature */\n-bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n /** Abort with a message */\n bool AbortNode(const std::string &msg);\n /** Get statistics from node state */"
      },
      {
        "sha": "7a8b24eed73d7b2f9bd85737132c37434efa23c0",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d07dc11ccdfa7b5371396f882266f83c4956111e/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d07dc11ccdfa7b5371396f882266f83c4956111e/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=d07dc11ccdfa7b5371396f882266f83c4956111e",
        "patch": "@@ -110,7 +110,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         {\n             CScript sigSave = txTo[i].vin[0].scriptSig;\n             txTo[i].vin[0].scriptSig = txTo[j].vin[0].scriptSig;\n-            bool sigOK = VerifySignature(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, 0);\n+            bool sigOK = CScriptCheck(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, 0)();\n             if (i == j)\n                 BOOST_CHECK_MESSAGE(sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n             else"
      }
    ]
  },
  {
    "sha": "039ff170658b7db7202ef4d71928e83c7fe539da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzlmZjE3MDY1OGI3ZGI3MjAyZWY0ZDcxOTI4ZTgzYzdmZTUzOWRh",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-07-18T14:51:33Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T01:09:37Z"
      },
      "message": "Remove CScriptCheck::nHashType (was always 0)",
      "tree": {
        "sha": "80c24773dd3b4de09d23c5e3119fba0d5db8462f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80c24773dd3b4de09d23c5e3119fba0d5db8462f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/039ff170658b7db7202ef4d71928e83c7fe539da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/039ff170658b7db7202ef4d71928e83c7fe539da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/039ff170658b7db7202ef4d71928e83c7fe539da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/039ff170658b7db7202ef4d71928e83c7fe539da/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d07dc11ccdfa7b5371396f882266f83c4956111e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d07dc11ccdfa7b5371396f882266f83c4956111e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d07dc11ccdfa7b5371396f882266f83c4956111e"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 7,
      "deletions": 9
    },
    "files": [
      {
        "sha": "23051d8d98726abd794af7cc1d6181b754aca6a0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/039ff170658b7db7202ef4d71928e83c7fe539da/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/039ff170658b7db7202ef4d71928e83c7fe539da/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=039ff170658b7db7202ef4d71928e83c7fe539da",
        "patch": "@@ -1340,7 +1340,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n bool CScriptCheck::operator()() const {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    if (!VerifyScript(scriptSig, scriptPubKey, *ptxTo, nIn, nFlags, nHashType))\n+    if (!VerifyScript(scriptSig, scriptPubKey, *ptxTo, nIn, nFlags, 0))\n         return error(\"CScriptCheck() : %s VerifySignature failed\", ptxTo->GetHash().ToString());\n     return true;\n }\n@@ -1411,7 +1411,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                 const CCoins &coins = inputs.GetCoins(prevout.hash);\n \n                 // Verify signature\n-                CScriptCheck check(coins, tx, i, flags, 0);\n+                CScriptCheck check(coins, tx, i, flags);\n                 if (pvChecks) {\n                     pvChecks->push_back(CScriptCheck());\n                     check.swap(pvChecks->back());\n@@ -1424,7 +1424,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                         // avoid splitting the network between upgraded and\n                         // non-upgraded nodes.\n                         CScriptCheck check(coins, tx, i,\n-                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, 0);\n+                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS);\n                         if (check())\n                             return state.Invalid(false, REJECT_NONSTANDARD, \"non-mandatory-script-verify-flag\");\n                     }"
      },
      {
        "sha": "5d1f1e5d635c72cdafc1dc7fc13adfdc08b7f983",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/039ff170658b7db7202ef4d71928e83c7fe539da/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/039ff170658b7db7202ef4d71928e83c7fe539da/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=039ff170658b7db7202ef4d71928e83c7fe539da",
        "patch": "@@ -333,13 +333,12 @@ class CScriptCheck\n     const CTransaction *ptxTo;\n     unsigned int nIn;\n     unsigned int nFlags;\n-    int nHashType;\n \n public:\n-    CScriptCheck(): ptxTo(0), nIn(0), nFlags(0), nHashType(0) {}\n-    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, int nHashTypeIn) :\n+    CScriptCheck(): ptxTo(0), nIn(0), nFlags(0) {}\n+    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn) :\n         scriptPubKey(txFromIn.vout[txToIn.vin[nInIn].prevout.n].scriptPubKey),\n-        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), nHashType(nHashTypeIn) { }\n+        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn) { }\n \n     bool operator()() const;\n \n@@ -348,7 +347,6 @@ class CScriptCheck\n         std::swap(ptxTo, check.ptxTo);\n         std::swap(nIn, check.nIn);\n         std::swap(nFlags, check.nFlags);\n-        std::swap(nHashType, check.nHashType);\n     }\n };\n "
      },
      {
        "sha": "5354efa9da9115d731705c44b3e81b2fbc7bd8b5",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/039ff170658b7db7202ef4d71928e83c7fe539da/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/039ff170658b7db7202ef4d71928e83c7fe539da/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=039ff170658b7db7202ef4d71928e83c7fe539da",
        "patch": "@@ -110,7 +110,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         {\n             CScript sigSave = txTo[i].vin[0].scriptSig;\n             txTo[i].vin[0].scriptSig = txTo[j].vin[0].scriptSig;\n-            bool sigOK = CScriptCheck(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, 0)();\n+            bool sigOK = CScriptCheck(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC)();\n             if (i == j)\n                 BOOST_CHECK_MESSAGE(sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n             else"
      }
    ]
  },
  {
    "sha": "36663ac332ee555dbd05a543fa20c510392f8a9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjY2M2FjMzMyZWU1NTVkYmQwNWE1NDNmYTIwYzUxMDM5MmY4YTli",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-07-18T15:48:00Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T01:09:37Z"
      },
      "message": "Don't pass nHashType to VerifyScript",
      "tree": {
        "sha": "5a5af8d138ea58683a0ab8d29046bf29d851429a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a5af8d138ea58683a0ab8d29046bf29d851429a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36663ac332ee555dbd05a543fa20c510392f8a9b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36663ac332ee555dbd05a543fa20c510392f8a9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36663ac332ee555dbd05a543fa20c510392f8a9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36663ac332ee555dbd05a543fa20c510392f8a9b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "039ff170658b7db7202ef4d71928e83c7fe539da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/039ff170658b7db7202ef4d71928e83c7fe539da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/039ff170658b7db7202ef4d71928e83c7fe539da"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 36,
      "deletions": 37
    },
    "files": [
      {
        "sha": "1cd9b81fbcf275157907fec67640cd91c434a75f",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36663ac332ee555dbd05a543fa20c510392f8a9b/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36663ac332ee555dbd05a543fa20c510392f8a9b/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=36663ac332ee555dbd05a543fa20c510392f8a9b",
        "patch": "@@ -436,7 +436,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx, i, STANDARD_SCRIPT_VERIFY_FLAGS, 0))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx, i, STANDARD_SCRIPT_VERIFY_FLAGS))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "88af540cfab5350960cb8da28fac4d4280489d08",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36663ac332ee555dbd05a543fa20c510392f8a9b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36663ac332ee555dbd05a543fa20c510392f8a9b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=36663ac332ee555dbd05a543fa20c510392f8a9b",
        "patch": "@@ -1340,7 +1340,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n bool CScriptCheck::operator()() const {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    if (!VerifyScript(scriptSig, scriptPubKey, *ptxTo, nIn, nFlags, 0))\n+    if (!VerifyScript(scriptSig, scriptPubKey, *ptxTo, nIn, nFlags))\n         return error(\"CScriptCheck() : %s VerifySignature failed\", ptxTo->GetHash().ToString());\n     return true;\n }"
      },
      {
        "sha": "692e272ccefd8d1494aa3d1ba85e2719a74b65ca",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36663ac332ee555dbd05a543fa20c510392f8a9b/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36663ac332ee555dbd05a543fa20c510392f8a9b/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=36663ac332ee555dbd05a543fa20c510392f8a9b",
        "patch": "@@ -688,7 +688,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx, i, STANDARD_SCRIPT_VERIFY_FLAGS, 0))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx, i, STANDARD_SCRIPT_VERIFY_FLAGS))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "f29d105fd1ef330e5790714fb2e8ad26d3cdb5ec",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36663ac332ee555dbd05a543fa20c510392f8a9b/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36663ac332ee555dbd05a543fa20c510392f8a9b/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=36663ac332ee555dbd05a543fa20c510392f8a9b",
        "patch": "@@ -1006,15 +1006,14 @@ bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char> &vchPubK\n     return true;\n }\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n-                  unsigned int flags, int nHashType)\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n {\n     vector<vector<unsigned char> > stack, stackCopy;\n-    if (!EvalScript(stack, scriptSig, txTo, nIn, flags, nHashType))\n+    if (!EvalScript(stack, scriptSig, txTo, nIn, flags, 0))\n         return false;\n     if (flags & SCRIPT_VERIFY_P2SH)\n         stackCopy = stack;\n-    if (!EvalScript(stack, scriptPubKey, txTo, nIn, flags, nHashType))\n+    if (!EvalScript(stack, scriptPubKey, txTo, nIn, flags, 0))\n         return false;\n     if (stack.empty())\n         return false;\n@@ -1037,7 +1036,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n         CScript pubKey2(pubKeySerialized.begin(), pubKeySerialized.end());\n         popstack(stackCopy);\n \n-        if (!EvalScript(stackCopy, pubKey2, txTo, nIn, flags, nHashType))\n+        if (!EvalScript(stackCopy, pubKey2, txTo, nIn, flags, 0))\n             return false;\n         if (stackCopy.empty())\n             return false;"
      },
      {
        "sha": "ca57387a138237bc114bee15309c24e4b341c0c0",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36663ac332ee555dbd05a543fa20c510392f8a9b/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36663ac332ee555dbd05a543fa20c510392f8a9b/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=36663ac332ee555dbd05a543fa20c510392f8a9b",
        "patch": "@@ -40,6 +40,6 @@ bool IsCanonicalSignature(const std::vector<unsigned char> &vchSig, unsigned int\n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n bool CheckSig(std::vector<unsigned char> vchSig, const std::vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, int flags);\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags);\n \n #endif"
      },
      {
        "sha": "7037193b9c7ef3072b4ce10afc238748d5840329",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36663ac332ee555dbd05a543fa20c510392f8a9b/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36663ac332ee555dbd05a543fa20c510392f8a9b/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=36663ac332ee555dbd05a543fa20c510392f8a9b",
        "patch": "@@ -123,7 +123,7 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n     }\n \n     // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, txTo, nIn, STANDARD_SCRIPT_VERIFY_FLAGS, 0);\n+    return VerifyScript(txin.scriptSig, fromPubKey, txTo, nIn, STANDARD_SCRIPT_VERIFY_FLAGS);\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)"
      },
      {
        "sha": "39b154111065a19f247449a6a990e7b84497cc8b",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36663ac332ee555dbd05a543fa20c510392f8a9b/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36663ac332ee555dbd05a543fa20c510392f8a9b/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=36663ac332ee555dbd05a543fa20c510392f8a9b",
        "patch": "@@ -79,19 +79,19 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.clear();\n     keys += key[0],key[1]; // magic operator+= from boost.assign\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, txTo[0], 0, flags, 0));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, txTo[0], 0, flags));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.clear();\n         keys += key[i];\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, flags, 0), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, flags), strprintf(\"a&b 1: %d\", i));\n \n         keys.clear();\n         keys += key[1],key[i];\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, flags, 0), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, flags), strprintf(\"a&b 2: %d\", i));\n     }\n \n     // Test a OR b:\n@@ -101,16 +101,16 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         keys += key[i];\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, txTo[1], 0, flags, 0), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, txTo[1], 0, flags), strprintf(\"a|b: %d\", i));\n         else\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, txTo[1], 0, flags, 0), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, txTo[1], 0, flags), strprintf(\"a|b: %d\", i));\n     }\n     s.clear();\n     s << OP_0 << OP_0;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, flags));\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, flags));\n \n \n     for (int i = 0; i < 4; i++)\n@@ -120,9 +120,9 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             keys += key[i],key[j];\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, txTo[2], 0, flags, 0), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, txTo[2], 0, flags), strprintf(\"escrow 1: %d %d\", i, j));\n             else\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, txTo[2], 0, flags, 0), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, txTo[2], 0, flags), strprintf(\"escrow 2: %d %d\", i, j));\n         }\n }\n "
      },
      {
        "sha": "7673ff06c397e053a905a9c8dcfcdf1c7171ffa8",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36663ac332ee555dbd05a543fa20c510392f8a9b/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36663ac332ee555dbd05a543fa20c510392f8a9b/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=36663ac332ee555dbd05a543fa20c510392f8a9b",
        "patch": "@@ -39,7 +39,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict)\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, txTo, 0, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, 0);\n+    return VerifyScript(scriptSig, scriptPubKey, txTo, 0, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE);\n }\n \n "
      },
      {
        "sha": "4ff5d24d936d5f6707777313b9f688861540a884",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36663ac332ee555dbd05a543fa20c510392f8a9b/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36663ac332ee555dbd05a543fa20c510392f8a9b/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=36663ac332ee555dbd05a543fa20c510392f8a9b",
        "patch": "@@ -74,7 +74,7 @@ BOOST_AUTO_TEST_CASE(script_valid)\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n \n         CTransaction tx;\n-        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, tx, 0, flags, SIGHASH_NONE), strTest);\n+        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, tx, 0, flags), strTest);\n     }\n }\n \n@@ -98,7 +98,7 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n \n         CTransaction tx;\n-        BOOST_CHECK_MESSAGE(!VerifyScript(scriptSig, scriptPubKey, tx, 0, flags, SIGHASH_NONE), strTest);\n+        BOOST_CHECK_MESSAGE(!VerifyScript(scriptSig, scriptPubKey, tx, 0, flags), strTest);\n     }\n }\n \n@@ -181,15 +181,15 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     txTo12.vout[0].nValue = 1;\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, flags, 0));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, flags));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, flags));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, txTo12, 0, flags, 0));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, txTo12, 0, flags));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, txTo12, 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, txTo12, 0, flags));\n }\n \n BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n@@ -217,46 +217,46 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, txTo23, 0, flags, 0));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, txTo23, 0, flags));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, txTo23, 0, flags, 0));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, txTo23, 0, flags));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, txTo23, 0, flags, 0));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, txTo23, 0, flags));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, txTo23, 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, txTo23, 0, flags));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, txTo23, 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, txTo23, 0, flags));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, txTo23, 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, txTo23, 0, flags));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, txTo23, 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, txTo23, 0, flags));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, txTo23, 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, txTo23, 0, flags));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, txTo23, 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, txTo23, 0, flags));\n }    \n \n BOOST_AUTO_TEST_CASE(script_combineSigs)"
      },
      {
        "sha": "1316aeb8fd88ea8fb5898e789706973ad4a5e97d",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36663ac332ee555dbd05a543fa20c510392f8a9b/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36663ac332ee555dbd05a543fa20c510392f8a9b/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=36663ac332ee555dbd05a543fa20c510392f8a9b",
        "patch": "@@ -121,7 +121,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n \n                 unsigned int verify_flags = ParseFlags(test[2].get_str());\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 tx, i, verify_flags, 0),\n+                                                 tx, i, verify_flags),\n                                     strTest);\n             }\n         }\n@@ -194,7 +194,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n                 unsigned int verify_flags = ParseFlags(test[2].get_str());\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      tx, i, verify_flags, 0);\n+                                      tx, i, verify_flags);\n             }\n \n             BOOST_CHECK_MESSAGE(!fValid, strTest);"
      }
    ]
  },
  {
    "sha": "93640f6fb408b6f8179cb43d1ed584e5e8816cb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzY0MGY2ZmI0MDhiNmY4MTc5Y2I0M2QxZWQ1ODRlNWU4ODE2Y2I3",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-07-18T16:47:10Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T01:09:37Z"
      },
      "message": "Don't pass nHashType to EvalScript nor CheckSig",
      "tree": {
        "sha": "3904d05378cd61700d5de525e70c9caa43f492b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3904d05378cd61700d5de525e70c9caa43f492b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93640f6fb408b6f8179cb43d1ed584e5e8816cb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93640f6fb408b6f8179cb43d1ed584e5e8816cb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93640f6fb408b6f8179cb43d1ed584e5e8816cb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93640f6fb408b6f8179cb43d1ed584e5e8816cb7/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36663ac332ee555dbd05a543fa20c510392f8a9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36663ac332ee555dbd05a543fa20c510392f8a9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36663ac332ee555dbd05a543fa20c510392f8a9b"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 18,
      "deletions": 21
    },
    "files": [
      {
        "sha": "35cd05934c5cf881a0a343c3fbf2ed2d8c4c2490",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93640f6fb408b6f8179cb43d1ed584e5e8816cb7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93640f6fb408b6f8179cb43d1ed584e5e8816cb7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=93640f6fb408b6f8179cb43d1ed584e5e8816cb7",
        "patch": "@@ -670,7 +670,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         // IsStandard() will have already returned false\n         // and this method isn't called.\n         vector<vector<unsigned char> > stack;\n-        if (!EvalScript(stack, tx.vin[i].scriptSig, tx, i, false, 0))\n+        if (!EvalScript(stack, tx.vin[i].scriptSig, tx, i, false))\n             return false;\n \n         if (whichType == TX_SCRIPTHASH)"
      },
      {
        "sha": "3d35a31571e9cdcd1bc34031f234d5c8cf9428c3",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 11,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93640f6fb408b6f8179cb43d1ed584e5e8816cb7/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93640f6fb408b6f8179cb43d1ed584e5e8816cb7/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=93640f6fb408b6f8179cb43d1ed584e5e8816cb7",
        "patch": "@@ -132,7 +132,7 @@ bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n     return true;\n }\n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType)\n+bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n {\n     CScript::const_iterator pc = script.begin();\n     CScript::const_iterator pend = script.end();\n@@ -675,7 +675,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     scriptCode.FindAndDelete(CScript(vchSig));\n \n                     bool fSuccess = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                        CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType, flags);\n+                        CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, flags);\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -736,7 +736,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n \n                         // Check signature\n                         bool fOk = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                            CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType, flags);\n+                            CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, flags);\n \n                         if (fOk) {\n                             isig++;\n@@ -975,7 +975,7 @@ class CSignatureCache\n     }\n };\n \n-bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, int flags)\n+bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char>& vchPubKey, const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int flags)\n {\n     static CSignatureCache signatureCache;\n \n@@ -986,10 +986,7 @@ bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char> &vchPubK\n     // Hash type is one byte tacked on to the end of the signature\n     if (vchSig.empty())\n         return false;\n-    if (nHashType == 0)\n-        nHashType = vchSig.back();\n-    else if (nHashType != vchSig.back())\n-        return false;\n+    int nHashType = vchSig.back();\n     vchSig.pop_back();\n \n     uint256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n@@ -1009,11 +1006,11 @@ bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char> &vchPubK\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n {\n     vector<vector<unsigned char> > stack, stackCopy;\n-    if (!EvalScript(stack, scriptSig, txTo, nIn, flags, 0))\n+    if (!EvalScript(stack, scriptSig, txTo, nIn, flags))\n         return false;\n     if (flags & SCRIPT_VERIFY_P2SH)\n         stackCopy = stack;\n-    if (!EvalScript(stack, scriptPubKey, txTo, nIn, flags, 0))\n+    if (!EvalScript(stack, scriptPubKey, txTo, nIn, flags))\n         return false;\n     if (stack.empty())\n         return false;\n@@ -1036,7 +1033,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n         CScript pubKey2(pubKeySerialized.begin(), pubKeySerialized.end());\n         popstack(stackCopy);\n \n-        if (!EvalScript(stackCopy, pubKey2, txTo, nIn, flags, 0))\n+        if (!EvalScript(stackCopy, pubKey2, txTo, nIn, flags))\n             return false;\n         if (stackCopy.empty())\n             return false;"
      },
      {
        "sha": "0c00eefe7d4ad5c433860daf2c41ea19d0d20b8d",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93640f6fb408b6f8179cb43d1ed584e5e8816cb7/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93640f6fb408b6f8179cb43d1ed584e5e8816cb7/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=93640f6fb408b6f8179cb43d1ed584e5e8816cb7",
        "patch": "@@ -38,8 +38,8 @@ bool IsCanonicalPubKey(const std::vector<unsigned char> &vchPubKey, unsigned int\n bool IsCanonicalSignature(const std::vector<unsigned char> &vchSig, unsigned int flags);\n \n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-bool CheckSig(std::vector<unsigned char> vchSig, const std::vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, int flags);\n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n+bool CheckSig(std::vector<unsigned char> vchSig, const std::vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int flags);\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags);\n \n #endif"
      },
      {
        "sha": "cbddc1b72a237e443965041a4a3b149889127d08",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93640f6fb408b6f8179cb43d1ed584e5e8816cb7/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93640f6fb408b6f8179cb43d1ed584e5e8816cb7/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=93640f6fb408b6f8179cb43d1ed584e5e8816cb7",
        "patch": "@@ -174,7 +174,7 @@ static CScript CombineMultisig(CScript scriptPubKey, const CMutableTransaction&\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (CheckSig(sig, pubkey, scriptPubKey, txTo, nIn, 0, 0))\n+            if (CheckSig(sig, pubkey, scriptPubKey, txTo, nIn, 0))\n             {\n                 sigs[pubkey] = sig;\n                 break;\n@@ -252,9 +252,9 @@ CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsign\n     Solver(scriptPubKey, txType, vSolutions);\n \n     vector<valtype> stack1;\n-    EvalScript(stack1, scriptSig1, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC, 0);\n+    EvalScript(stack1, scriptSig1, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC);\n     vector<valtype> stack2;\n-    EvalScript(stack2, scriptSig2, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC, 0);\n+    EvalScript(stack2, scriptSig2, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC);\n \n     return CombineSignatures(scriptPubKey, txTo, nIn, txType, vSolutions, stack1, stack2);\n }"
      },
      {
        "sha": "2340d1cdfacdfde023265a9922f00bf0dd1f7801",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93640f6fb408b6f8179cb43d1ed584e5e8816cb7/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93640f6fb408b6f8179cb43d1ed584e5e8816cb7/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=93640f6fb408b6f8179cb43d1ed584e5e8816cb7",
        "patch": "@@ -112,18 +112,18 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n     static const unsigned char pushdata4[] = { OP_PUSHDATA4, 1, 0, 0, 0, 0x5a };\n \n     vector<vector<unsigned char> > directStack;\n-    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), CTransaction(), 0, true, 0));\n+    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), CTransaction(), 0, true));\n \n     vector<vector<unsigned char> > pushdata1Stack;\n-    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), CTransaction(), 0, true, 0));\n+    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), CTransaction(), 0, true));\n     BOOST_CHECK(pushdata1Stack == directStack);\n \n     vector<vector<unsigned char> > pushdata2Stack;\n-    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), CTransaction(), 0, true, 0));\n+    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), CTransaction(), 0, true));\n     BOOST_CHECK(pushdata2Stack == directStack);\n \n     vector<vector<unsigned char> > pushdata4Stack;\n-    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), CTransaction(), 0, true, 0));\n+    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), CTransaction(), 0, true));\n     BOOST_CHECK(pushdata4Stack == directStack);\n }\n "
      }
    ]
  },
  {
    "sha": "38074cc2b96ee710a38befde8242775d45680b22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODA3NGNjMmI5NmVlNzEwYTM4YmVmZGU4MjQyNzc1ZDQ1NjgwYjIy",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-01T21:41:59Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T01:09:37Z"
      },
      "message": "Decouple interpreter from core",
      "tree": {
        "sha": "c4426acef00421ca1057196658276857768ea553",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4426acef00421ca1057196658276857768ea553"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38074cc2b96ee710a38befde8242775d45680b22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38074cc2b96ee710a38befde8242775d45680b22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38074cc2b96ee710a38befde8242775d45680b22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38074cc2b96ee710a38befde8242775d45680b22/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93640f6fb408b6f8179cb43d1ed584e5e8816cb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93640f6fb408b6f8179cb43d1ed584e5e8816cb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93640f6fb408b6f8179cb43d1ed584e5e8816cb7"
      }
    ],
    "stats": {
      "total": 365,
      "additions": 227,
      "deletions": 138
    },
    "files": [
      {
        "sha": "001ebf8f293512b4a03e87ff3d8485f523ecda43",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38074cc2b96ee710a38befde8242775d45680b22/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38074cc2b96ee710a38befde8242775d45680b22/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=38074cc2b96ee710a38befde8242775d45680b22",
        "patch": "@@ -99,6 +99,7 @@ BITCOIN_CORE_H = \\\n   rpcprotocol.h \\\n   rpcserver.h \\\n   script/interpreter.h \\\n+  script/interpreter_core.h \\\n   script/compressor.h \\\n   script/script.h \\\n   script/sign.h \\\n@@ -215,6 +216,7 @@ libbitcoin_common_a_SOURCES = \\\n   script/interpreter.cpp \\\n   script/compressor.cpp \\\n   script/script.cpp \\\n+  script/script_core.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n   $(BITCOIN_CORE_H)"
      },
      {
        "sha": "47cd20a00c15488bbbd5dd2793d68750b99beb3e",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38074cc2b96ee710a38befde8242775d45680b22/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38074cc2b96ee710a38befde8242775d45680b22/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=38074cc2b96ee710a38befde8242775d45680b22",
        "patch": "@@ -8,6 +8,8 @@\n #include \"core.h\"\n #include \"main.h\"         // for MAX_BLOCK_SIZE\n #include \"keystore.h\"\n+#include \"script/interpreter.h\"\n+#include \"script/interpreter_core.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"ui_interface.h\" // for _(...)"
      },
      {
        "sha": "46da5511727df2db6879404fefe9dbb7f0698dff",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38074cc2b96ee710a38befde8242775d45680b22/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38074cc2b96ee710a38befde8242775d45680b22/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=38074cc2b96ee710a38befde8242775d45680b22",
        "patch": "@@ -13,6 +13,8 @@\n #include \"init.h\"\n #include \"net.h\"\n #include \"pow.h\"\n+#include \"script/interpreter.h\"\n+#include \"script/interpreter_core.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\""
      },
      {
        "sha": "62a184a6d09acacce961da9cc1d492d8527cfb28",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38074cc2b96ee710a38befde8242775d45680b22/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38074cc2b96ee710a38befde8242775d45680b22/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=38074cc2b96ee710a38befde8242775d45680b22",
        "patch": "@@ -11,9 +11,10 @@\n #include \"main.h\"\n #include \"net.h\"\n #include \"rpcserver.h\"\n+#include \"script/interpreter_core.h\"\n #include \"script/script.h\"\n-#include \"script/standard.h\"\n #include \"script/sign.h\"\n+#include \"script/standard.h\"\n #include \"uint256.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet.h\""
      },
      {
        "sha": "a17d2184847b0d7a1aac4dd57c8f08c41f7d9c95",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 130,
        "changes": 142,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38074cc2b96ee710a38befde8242775d45680b22/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38074cc2b96ee710a38befde8242775d45680b22/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=38074cc2b96ee710a38befde8242775d45680b22",
        "patch": "@@ -3,9 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"interpreter.h\"\n+#include \"script/interpreter.h\"\n \n-#include \"core.h\"\n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"\n #include \"crypto/sha2.h\"\n@@ -132,7 +131,7 @@ bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n     return true;\n }\n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CSignatureSerializer& tx, unsigned int flags)\n {\n     CScript::const_iterator pc = script.begin();\n     CScript::const_iterator pend = script.end();\n@@ -675,7 +674,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     scriptCode.FindAndDelete(CScript(vchSig));\n \n                     bool fSuccess = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                        CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, flags);\n+                        CheckSig(vchSig, vchPubKey, scriptCode, tx, flags);\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -736,7 +735,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n \n                         // Check signature\n                         bool fOk = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                            CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, flags);\n+                            CheckSig(vchSig, vchPubKey, scriptCode, tx, flags);\n \n                         if (fOk) {\n                             isig++;\n@@ -801,125 +800,6 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n \n namespace {\n \n-/** Wrapper that serializes like CTransaction, but with the modifications\n- *  required for the signature hash done in-place\n- */\n-class CTransactionSignatureSerializer {\n-private:\n-    const CTransaction &txTo;  // reference to the spending transaction (the one being serialized)\n-    const CScript &scriptCode; // output script being consumed\n-    const unsigned int nIn;    // input index of txTo being signed\n-    const bool fAnyoneCanPay;  // whether the hashtype has the SIGHASH_ANYONECANPAY flag set\n-    const bool fHashSingle;    // whether the hashtype is SIGHASH_SINGLE\n-    const bool fHashNone;      // whether the hashtype is SIGHASH_NONE\n-\n-public:\n-    CTransactionSignatureSerializer(const CTransaction &txToIn, const CScript &scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :\n-        txTo(txToIn), scriptCode(scriptCodeIn), nIn(nInIn),\n-        fAnyoneCanPay(!!(nHashTypeIn & SIGHASH_ANYONECANPAY)),\n-        fHashSingle((nHashTypeIn & 0x1f) == SIGHASH_SINGLE),\n-        fHashNone((nHashTypeIn & 0x1f) == SIGHASH_NONE) {}\n-\n-    /** Serialize the passed scriptCode, skipping OP_CODESEPARATORs */\n-    template<typename S>\n-    void SerializeScriptCode(S &s, int nType, int nVersion) const {\n-        CScript::const_iterator it = scriptCode.begin();\n-        CScript::const_iterator itBegin = it;\n-        opcodetype opcode;\n-        unsigned int nCodeSeparators = 0;\n-        while (scriptCode.GetOp(it, opcode)) {\n-            if (opcode == OP_CODESEPARATOR)\n-                nCodeSeparators++;\n-        }\n-        ::WriteCompactSize(s, scriptCode.size() - nCodeSeparators);\n-        it = itBegin;\n-        while (scriptCode.GetOp(it, opcode)) {\n-            if (opcode == OP_CODESEPARATOR) {\n-                s.write((char*)&itBegin[0], it-itBegin-1);\n-                itBegin = it;\n-            }\n-        }\n-        s.write((char*)&itBegin[0], it-itBegin);\n-    }\n-\n-    /** Serialize an input of txTo */\n-    template<typename S>\n-    void SerializeInput(S &s, unsigned int nInput, int nType, int nVersion) const {\n-        // In case of SIGHASH_ANYONECANPAY, only the input being signed is serialized\n-        if (fAnyoneCanPay)\n-            nInput = nIn;\n-        // Serialize the prevout\n-        ::Serialize(s, txTo.vin[nInput].prevout, nType, nVersion);\n-        // Serialize the script\n-        if (nInput != nIn)\n-            // Blank out other inputs' signatures\n-            ::Serialize(s, CScript(), nType, nVersion);\n-        else\n-            SerializeScriptCode(s, nType, nVersion);\n-        // Serialize the nSequence\n-        if (nInput != nIn && (fHashSingle || fHashNone))\n-            // let the others update at will\n-            ::Serialize(s, (int)0, nType, nVersion);\n-        else\n-            ::Serialize(s, txTo.vin[nInput].nSequence, nType, nVersion);\n-    }\n-\n-    /** Serialize an output of txTo */\n-    template<typename S>\n-    void SerializeOutput(S &s, unsigned int nOutput, int nType, int nVersion) const {\n-        if (fHashSingle && nOutput != nIn)\n-            // Do not lock-in the txout payee at other indices as txin\n-            ::Serialize(s, CTxOut(), nType, nVersion);\n-        else\n-            ::Serialize(s, txTo.vout[nOutput], nType, nVersion);\n-    }\n-\n-    /** Serialize txTo */\n-    template<typename S>\n-    void Serialize(S &s, int nType, int nVersion) const {\n-        // Serialize nVersion\n-        ::Serialize(s, txTo.nVersion, nType, nVersion);\n-        // Serialize vin\n-        unsigned int nInputs = fAnyoneCanPay ? 1 : txTo.vin.size();\n-        ::WriteCompactSize(s, nInputs);\n-        for (unsigned int nInput = 0; nInput < nInputs; nInput++)\n-             SerializeInput(s, nInput, nType, nVersion);\n-        // Serialize vout\n-        unsigned int nOutputs = fHashNone ? 0 : (fHashSingle ? nIn+1 : txTo.vout.size());\n-        ::WriteCompactSize(s, nOutputs);\n-        for (unsigned int nOutput = 0; nOutput < nOutputs; nOutput++)\n-             SerializeOutput(s, nOutput, nType, nVersion);\n-        // Serialie nLockTime\n-        ::Serialize(s, txTo.nLockTime, nType, nVersion);\n-    }\n-};\n-\n-} // anon namespace\n-\n-uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n-{\n-    if (nIn >= txTo.vin.size()) {\n-        LogPrintf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n-        return 1;\n-    }\n-\n-    // Check for invalid use of SIGHASH_SINGLE\n-    if ((nHashType & 0x1f) == SIGHASH_SINGLE) {\n-        if (nIn >= txTo.vout.size()) {\n-            LogPrintf(\"ERROR: SignatureHash() : nOut=%d out of range\\n\", nIn);\n-            return 1;\n-        }\n-    }\n-\n-    // Wrapper to serialize only the necessary parts of the transaction being signed\n-    CTransactionSignatureSerializer txTmp(txTo, scriptCode, nIn, nHashType);\n-\n-    // Serialize and hash\n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << txTmp << nHashType;\n-    return ss.GetHash();\n-}\n-\n // Valid signature cache, to avoid doing expensive ECDSA signature checking\n // twice for every transaction (once when accepted into memory pool, and\n // again when accepted into the block chain)\n@@ -975,7 +855,9 @@ class CSignatureCache\n     }\n };\n \n-bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char>& vchPubKey, const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int flags)\n+} // anon namespace\n+\n+bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char>& vchPubKey, const CScript& scriptCode, const CSignatureSerializer& tx, int flags)\n {\n     static CSignatureCache signatureCache;\n \n@@ -989,7 +871,7 @@ bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char>& vchPubK\n     int nHashType = vchSig.back();\n     vchSig.pop_back();\n \n-    uint256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n+    uint256 sighash = tx.SignatureHash(scriptCode, nHashType);\n \n     if (signatureCache.Get(sighash, vchSig, pubkey))\n         return true;\n@@ -1003,14 +885,14 @@ bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char>& vchPubK\n     return true;\n }\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CSignatureSerializer& tx, unsigned int flags)\n {\n     vector<vector<unsigned char> > stack, stackCopy;\n-    if (!EvalScript(stack, scriptSig, txTo, nIn, flags))\n+    if (!EvalScript(stack, scriptSig, tx, flags))\n         return false;\n     if (flags & SCRIPT_VERIFY_P2SH)\n         stackCopy = stack;\n-    if (!EvalScript(stack, scriptPubKey, txTo, nIn, flags))\n+    if (!EvalScript(stack, scriptPubKey, tx, flags))\n         return false;\n     if (stack.empty())\n         return false;\n@@ -1033,7 +915,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n         CScript pubKey2(pubKeySerialized.begin(), pubKeySerialized.end());\n         popstack(stackCopy);\n \n-        if (!EvalScript(stackCopy, pubKey2, txTo, nIn, flags))\n+        if (!EvalScript(stackCopy, pubKey2, tx, flags))\n             return false;\n         if (stackCopy.empty())\n             return false;"
      },
      {
        "sha": "b3b97bd92c449f05848b42b90488073c0ac23b2f",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38074cc2b96ee710a38befde8242775d45680b22/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38074cc2b96ee710a38befde8242775d45680b22/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=38074cc2b96ee710a38befde8242775d45680b22",
        "patch": "@@ -7,12 +7,9 @@\n #define H_BITCOIN_SCRIPT_INTERPRETER\n \n #include <vector>\n-#include <stdint.h>\n-#include <string>\n \n class uint256;\n class CScript;\n-class CTransaction;\n \n /** Signature hash types/flags */\n enum\n@@ -34,12 +31,17 @@ enum\n     SCRIPT_VERIFY_NULLDUMMY = (1U << 4), // verify dummy stack item consumed by CHECKMULTISIG is of zero-length\n };\n \n+class CSignatureSerializer\n+{\n+public:\n+    virtual uint256 SignatureHash(const CScript &scriptCode, int nHashType) const = 0;\n+};\n+\n bool IsCanonicalPubKey(const std::vector<unsigned char> &vchPubKey, unsigned int flags);\n bool IsCanonicalSignature(const std::vector<unsigned char> &vchSig, unsigned int flags);\n \n-uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-bool CheckSig(std::vector<unsigned char> vchSig, const std::vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int flags);\n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags);\n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags);\n+bool CheckSig(std::vector<unsigned char> vchSig, const std::vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CSignatureSerializer& tx, int flags);\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CSignatureSerializer& tx, unsigned int flags);\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CSignatureSerializer& tx, unsigned int flags);\n \n #endif"
      },
      {
        "sha": "b6b246162a47ca29cfdee0c0abbad04985dc88fc",
        "filename": "src/script/interpreter_core.h",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38074cc2b96ee710a38befde8242775d45680b22/src/script/interpreter_core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38074cc2b96ee710a38befde8242775d45680b22/src/script/interpreter_core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter_core.h?ref=38074cc2b96ee710a38befde8242775d45680b22",
        "patch": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef H_BITCOIN_SCRIPT_INTERPRETER_CORE\n+#define H_BITCOIN_SCRIPT_INTERPRETER_CORE\n+\n+#include \"script/interpreter.h\"\n+\n+#include <vector>\n+\n+class uint256;\n+class CScript;\n+class CTransaction;\n+\n+class CTxSignatureSerializer : public CSignatureSerializer \n+{\n+private:\n+    const CTransaction& txTo;  // reference to the spending transaction (the one being serialized)\n+    const unsigned int nIn;    // input index of txTo being signed\n+public:\n+    CTxSignatureSerializer(const CTransaction& txToIn, unsigned int nInIn) :\n+        txTo(txToIn), nIn(nInIn) {}\n+    virtual uint256 SignatureHash(const CScript& scriptCode, int nHashType) const;\n+};\n+\n+uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+bool CheckSig(std::vector<unsigned char> vchSig, const std::vector<unsigned char>& vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int flags);\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags);\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags);\n+\n+#endif"
      },
      {
        "sha": "4aee0e830dd84e7fb5aa718edf2135a16b287ea6",
        "filename": "src/script/script_core.cpp",
        "status": "added",
        "additions": 156,
        "deletions": 0,
        "changes": 156,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38074cc2b96ee710a38befde8242775d45680b22/src/script/script_core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38074cc2b96ee710a38befde8242775d45680b22/src/script/script_core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_core.cpp?ref=38074cc2b96ee710a38befde8242775d45680b22",
        "patch": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"script/interpreter_core.h\"\n+\n+#include \"core.h\"\n+#include \"script/script.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+namespace {\n+\n+/** Wrapper that serializes like CTransaction, but with the modifications\n+ *  required for the signature hash done in-place\n+ */\n+class CTransactionSignatureSerializer {\n+private:\n+    const CTransaction &txTo;  // reference to the spending transaction (the one being serialized)\n+    const CScript &scriptCode; // output script being consumed\n+    const unsigned int nIn;    // input index of txTo being signed\n+    const bool fAnyoneCanPay;  // whether the hashtype has the SIGHASH_ANYONECANPAY flag set\n+    const bool fHashSingle;    // whether the hashtype is SIGHASH_SINGLE\n+    const bool fHashNone;      // whether the hashtype is SIGHASH_NONE\n+\n+public:\n+    CTransactionSignatureSerializer(const CTransaction &txToIn, const CScript &scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :\n+        txTo(txToIn), scriptCode(scriptCodeIn), nIn(nInIn),\n+        fAnyoneCanPay(!!(nHashTypeIn & SIGHASH_ANYONECANPAY)),\n+        fHashSingle((nHashTypeIn & 0x1f) == SIGHASH_SINGLE),\n+        fHashNone((nHashTypeIn & 0x1f) == SIGHASH_NONE) {}\n+\n+    /** Serialize the passed scriptCode, skipping OP_CODESEPARATORs */\n+    template<typename S>\n+    void SerializeScriptCode(S &s, int nType, int nVersion) const {\n+        CScript::const_iterator it = scriptCode.begin();\n+        CScript::const_iterator itBegin = it;\n+        opcodetype opcode;\n+        unsigned int nCodeSeparators = 0;\n+        while (scriptCode.GetOp(it, opcode)) {\n+            if (opcode == OP_CODESEPARATOR)\n+                nCodeSeparators++;\n+        }\n+        ::WriteCompactSize(s, scriptCode.size() - nCodeSeparators);\n+        it = itBegin;\n+        while (scriptCode.GetOp(it, opcode)) {\n+            if (opcode == OP_CODESEPARATOR) {\n+                s.write((char*)&itBegin[0], it-itBegin-1);\n+                itBegin = it;\n+            }\n+        }\n+        s.write((char*)&itBegin[0], it-itBegin);\n+    }\n+\n+    /** Serialize an input of txTo */\n+    template<typename S>\n+    void SerializeInput(S &s, unsigned int nInput, int nType, int nVersion) const {\n+        // In case of SIGHASH_ANYONECANPAY, only the input being signed is serialized\n+        if (fAnyoneCanPay)\n+            nInput = nIn;\n+        // Serialize the prevout\n+        ::Serialize(s, txTo.vin[nInput].prevout, nType, nVersion);\n+        // Serialize the script\n+        if (nInput != nIn)\n+            // Blank out other inputs' signatures\n+            ::Serialize(s, CScript(), nType, nVersion);\n+        else\n+            SerializeScriptCode(s, nType, nVersion);\n+        // Serialize the nSequence\n+        if (nInput != nIn && (fHashSingle || fHashNone))\n+            // let the others update at will\n+            ::Serialize(s, (int)0, nType, nVersion);\n+        else\n+            ::Serialize(s, txTo.vin[nInput].nSequence, nType, nVersion);\n+    }\n+\n+    /** Serialize an output of txTo */\n+    template<typename S>\n+    void SerializeOutput(S &s, unsigned int nOutput, int nType, int nVersion) const {\n+        if (fHashSingle && nOutput != nIn)\n+            // Do not lock-in the txout payee at other indices as txin\n+            ::Serialize(s, CTxOut(), nType, nVersion);\n+        else\n+            ::Serialize(s, txTo.vout[nOutput], nType, nVersion);\n+    }\n+\n+    /** Serialize txTo */\n+    template<typename S>\n+    void Serialize(S &s, int nType, int nVersion) const {\n+        // Serialize nVersion\n+        ::Serialize(s, txTo.nVersion, nType, nVersion);\n+        // Serialize vin\n+        unsigned int nInputs = fAnyoneCanPay ? 1 : txTo.vin.size();\n+        ::WriteCompactSize(s, nInputs);\n+        for (unsigned int nInput = 0; nInput < nInputs; nInput++)\n+             SerializeInput(s, nInput, nType, nVersion);\n+        // Serialize vout\n+        unsigned int nOutputs = fHashNone ? 0 : (fHashSingle ? nIn+1 : txTo.vout.size());\n+        ::WriteCompactSize(s, nOutputs);\n+        for (unsigned int nOutput = 0; nOutput < nOutputs; nOutput++)\n+             SerializeOutput(s, nOutput, nType, nVersion);\n+        // Serialie nLockTime\n+        ::Serialize(s, txTo.nLockTime, nType, nVersion);\n+    }\n+};\n+\n+} // anon namespace\n+\n+uint256 CTxSignatureSerializer::SignatureHash(const CScript& scriptCode, int nHashType) const\n+{\n+    if (nIn >= txTo.vin.size()) {\n+        LogPrintf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n+        return 1;\n+    }\n+\n+    // Check for invalid use of SIGHASH_SINGLE\n+    if ((nHashType & 0x1f) == SIGHASH_SINGLE) {\n+        if (nIn >= txTo.vout.size()) {\n+            LogPrintf(\"ERROR: SignatureHash() : nOut=%d out of range\\n\", nIn);\n+            return 1;\n+        }\n+    }\n+\n+    // Wrapper to serialize only the necessary parts of the transaction being signed\n+    CTransactionSignatureSerializer txTmp(txTo, scriptCode, nIn, nHashType);\n+\n+    // Serialize and hash\n+    CHashWriter ss(SER_GETHASH, 0);\n+    ss << txTmp << nHashType;\n+    return ss.GetHash();\n+}\n+\n+uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+{\n+    CTxSignatureSerializer tx(txTo, nIn);\n+    return tx.SignatureHash(scriptCode, nHashType);\n+}\n+\n+bool CheckSig(std::vector<unsigned char> vchSig, const std::vector<unsigned char>& vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int flags)\n+{\n+    CTxSignatureSerializer tx(txTo, nIn);\n+    return CheckSig(vchSig, vchPubKey, scriptCode, tx, flags);\n+}\n+\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+{\n+    CTxSignatureSerializer tx(txTo, nIn);\n+    return EvalScript(stack, script, tx, flags);\n+}\n+\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+{\n+    CTxSignatureSerializer tx(txTo, nIn);\n+    return VerifyScript(scriptSig, scriptPubKey, tx, flags);\n+}"
      },
      {
        "sha": "1363fadc6d5659c96f6ab44eb7dcb370e0bb04fe",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38074cc2b96ee710a38befde8242775d45680b22/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38074cc2b96ee710a38befde8242775d45680b22/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=38074cc2b96ee710a38befde8242775d45680b22",
        "patch": "@@ -8,6 +8,7 @@\n #include \"core.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n+#include \"script/interpreter_core.h\"\n #include \"script/standard.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "0667171988be893caa148afaa2ea4b35181987ff",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38074cc2b96ee710a38befde8242775d45680b22/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38074cc2b96ee710a38befde8242775d45680b22/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=38074cc2b96ee710a38befde8242775d45680b22",
        "patch": "@@ -7,6 +7,7 @@\n #include \"main.h\"\n #include \"script/script.h\"\n #include \"script/interpreter.h\"\n+#include \"script/interpreter_core.h\"\n #include \"script/sign.h\"\n #include \"wallet_ismine.h\"\n #include \"uint256.h\""
      },
      {
        "sha": "13ff3a919df946d0ca05d071ce3d30610080d766",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38074cc2b96ee710a38befde8242775d45680b22/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38074cc2b96ee710a38befde8242775d45680b22/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=38074cc2b96ee710a38befde8242775d45680b22",
        "patch": "@@ -5,6 +5,8 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"script/interpreter.h\"\n+#include \"script/interpreter_core.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"wallet_ismine.h\""
      },
      {
        "sha": "1af01ef786be47ff1f1780bb5a84001e8bc4cd4a",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38074cc2b96ee710a38befde8242775d45680b22/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38074cc2b96ee710a38befde8242775d45680b22/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=38074cc2b96ee710a38befde8242775d45680b22",
        "patch": "@@ -8,6 +8,8 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"script/interpreter.h\"\n+#include \"script/interpreter_core.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"core_io.h\""
      },
      {
        "sha": "a7a103a80ebdcc043cbf13602d506a471d75550c",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38074cc2b96ee710a38befde8242775d45680b22/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38074cc2b96ee710a38befde8242775d45680b22/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=38074cc2b96ee710a38befde8242775d45680b22",
        "patch": "@@ -8,6 +8,7 @@\n #include \"serialize.h\"\n #include \"script/script.h\"\n #include \"script/interpreter.h\"\n+#include \"script/interpreter_core.h\"\n #include \"util.h\"\n #include \"version.h\"\n "
      },
      {
        "sha": "da2d990286b06f95874e53ca3224380f9ca826b7",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38074cc2b96ee710a38befde8242775d45680b22/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38074cc2b96ee710a38befde8242775d45680b22/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=38074cc2b96ee710a38befde8242775d45680b22",
        "patch": "@@ -8,6 +8,8 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"script/interpreter.h\"\n+#include \"script/interpreter_core.h\"\n #include \"script/script.h\"\n #include \"core_io.h\"\n "
      }
    ]
  },
  {
    "sha": "7cbd86f2915b49a2dbea9837fa3f302f6fe885a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2JkODZmMjkxNWI0OWEyZGJlYTk4MzdmYTNmMzAyZjZmZTg4NWE0",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-01T22:03:00Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T01:09:37Z"
      },
      "message": "move transaction serializer out of script_score.cpp",
      "tree": {
        "sha": "9af48192e1411081121afbdaedc1aee3b0f05e03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9af48192e1411081121afbdaedc1aee3b0f05e03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cbd86f2915b49a2dbea9837fa3f302f6fe885a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cbd86f2915b49a2dbea9837fa3f302f6fe885a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cbd86f2915b49a2dbea9837fa3f302f6fe885a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cbd86f2915b49a2dbea9837fa3f302f6fe885a4/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38074cc2b96ee710a38befde8242775d45680b22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38074cc2b96ee710a38befde8242775d45680b22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38074cc2b96ee710a38befde8242775d45680b22"
      }
    ],
    "stats": {
      "total": 204,
      "additions": 107,
      "deletions": 97
    },
    "files": [
      {
        "sha": "7d96984e6f8e170e76c324ca1fbd4c60e8ca5bc8",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cbd86f2915b49a2dbea9837fa3f302f6fe885a4/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cbd86f2915b49a2dbea9837fa3f302f6fe885a4/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=7cbd86f2915b49a2dbea9837fa3f302f6fe885a4",
        "patch": "@@ -104,6 +104,7 @@ BITCOIN_CORE_H = \\\n   script/script.h \\\n   script/sign.h \\\n   script/standard.h \\\n+  script/transaction_serializer.h \\\n   wallet_ismine.h \\\n   serialize.h \\\n   sync.h \\"
      },
      {
        "sha": "b5573446fa991e18648def2f929bdccf1432d8a9",
        "filename": "src/script/script_core.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 97,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cbd86f2915b49a2dbea9837fa3f302f6fe885a4/src/script/script_core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cbd86f2915b49a2dbea9837fa3f302f6fe885a4/src/script/script_core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_core.cpp?ref=7cbd86f2915b49a2dbea9837fa3f302f6fe885a4",
        "patch": "@@ -7,106 +7,10 @@\n \n #include \"core.h\"\n #include \"script/script.h\"\n+#include \"script/transaction_serializer.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n \n-namespace {\n-\n-/** Wrapper that serializes like CTransaction, but with the modifications\n- *  required for the signature hash done in-place\n- */\n-class CTransactionSignatureSerializer {\n-private:\n-    const CTransaction &txTo;  // reference to the spending transaction (the one being serialized)\n-    const CScript &scriptCode; // output script being consumed\n-    const unsigned int nIn;    // input index of txTo being signed\n-    const bool fAnyoneCanPay;  // whether the hashtype has the SIGHASH_ANYONECANPAY flag set\n-    const bool fHashSingle;    // whether the hashtype is SIGHASH_SINGLE\n-    const bool fHashNone;      // whether the hashtype is SIGHASH_NONE\n-\n-public:\n-    CTransactionSignatureSerializer(const CTransaction &txToIn, const CScript &scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :\n-        txTo(txToIn), scriptCode(scriptCodeIn), nIn(nInIn),\n-        fAnyoneCanPay(!!(nHashTypeIn & SIGHASH_ANYONECANPAY)),\n-        fHashSingle((nHashTypeIn & 0x1f) == SIGHASH_SINGLE),\n-        fHashNone((nHashTypeIn & 0x1f) == SIGHASH_NONE) {}\n-\n-    /** Serialize the passed scriptCode, skipping OP_CODESEPARATORs */\n-    template<typename S>\n-    void SerializeScriptCode(S &s, int nType, int nVersion) const {\n-        CScript::const_iterator it = scriptCode.begin();\n-        CScript::const_iterator itBegin = it;\n-        opcodetype opcode;\n-        unsigned int nCodeSeparators = 0;\n-        while (scriptCode.GetOp(it, opcode)) {\n-            if (opcode == OP_CODESEPARATOR)\n-                nCodeSeparators++;\n-        }\n-        ::WriteCompactSize(s, scriptCode.size() - nCodeSeparators);\n-        it = itBegin;\n-        while (scriptCode.GetOp(it, opcode)) {\n-            if (opcode == OP_CODESEPARATOR) {\n-                s.write((char*)&itBegin[0], it-itBegin-1);\n-                itBegin = it;\n-            }\n-        }\n-        s.write((char*)&itBegin[0], it-itBegin);\n-    }\n-\n-    /** Serialize an input of txTo */\n-    template<typename S>\n-    void SerializeInput(S &s, unsigned int nInput, int nType, int nVersion) const {\n-        // In case of SIGHASH_ANYONECANPAY, only the input being signed is serialized\n-        if (fAnyoneCanPay)\n-            nInput = nIn;\n-        // Serialize the prevout\n-        ::Serialize(s, txTo.vin[nInput].prevout, nType, nVersion);\n-        // Serialize the script\n-        if (nInput != nIn)\n-            // Blank out other inputs' signatures\n-            ::Serialize(s, CScript(), nType, nVersion);\n-        else\n-            SerializeScriptCode(s, nType, nVersion);\n-        // Serialize the nSequence\n-        if (nInput != nIn && (fHashSingle || fHashNone))\n-            // let the others update at will\n-            ::Serialize(s, (int)0, nType, nVersion);\n-        else\n-            ::Serialize(s, txTo.vin[nInput].nSequence, nType, nVersion);\n-    }\n-\n-    /** Serialize an output of txTo */\n-    template<typename S>\n-    void SerializeOutput(S &s, unsigned int nOutput, int nType, int nVersion) const {\n-        if (fHashSingle && nOutput != nIn)\n-            // Do not lock-in the txout payee at other indices as txin\n-            ::Serialize(s, CTxOut(), nType, nVersion);\n-        else\n-            ::Serialize(s, txTo.vout[nOutput], nType, nVersion);\n-    }\n-\n-    /** Serialize txTo */\n-    template<typename S>\n-    void Serialize(S &s, int nType, int nVersion) const {\n-        // Serialize nVersion\n-        ::Serialize(s, txTo.nVersion, nType, nVersion);\n-        // Serialize vin\n-        unsigned int nInputs = fAnyoneCanPay ? 1 : txTo.vin.size();\n-        ::WriteCompactSize(s, nInputs);\n-        for (unsigned int nInput = 0; nInput < nInputs; nInput++)\n-             SerializeInput(s, nInput, nType, nVersion);\n-        // Serialize vout\n-        unsigned int nOutputs = fHashNone ? 0 : (fHashSingle ? nIn+1 : txTo.vout.size());\n-        ::WriteCompactSize(s, nOutputs);\n-        for (unsigned int nOutput = 0; nOutput < nOutputs; nOutput++)\n-             SerializeOutput(s, nOutput, nType, nVersion);\n-        // Serialie nLockTime\n-        ::Serialize(s, txTo.nLockTime, nType, nVersion);\n-    }\n-};\n-\n-} // anon namespace\n-\n uint256 CTxSignatureSerializer::SignatureHash(const CScript& scriptCode, int nHashType) const\n {\n     if (nIn >= txTo.vin.size()) {"
      },
      {
        "sha": "000d1120641924ad9a9fdb63b985583a2e7d35b3",
        "filename": "src/script/transaction_serializer.h",
        "status": "added",
        "additions": 105,
        "deletions": 0,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cbd86f2915b49a2dbea9837fa3f302f6fe885a4/src/script/transaction_serializer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cbd86f2915b49a2dbea9837fa3f302f6fe885a4/src/script/transaction_serializer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/transaction_serializer.h?ref=7cbd86f2915b49a2dbea9837fa3f302f6fe885a4",
        "patch": "@@ -0,0 +1,105 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"core.h\"\n+#include \"script/script.h\"\n+#include \"uint256.h\"\n+\n+namespace {\n+\n+/** Wrapper that serializes like CTransaction, but with the modifications\n+ *  required for the signature hash done in-place\n+ */\n+class CTransactionSignatureSerializer {\n+private:\n+    const CTransaction &txTo;  // reference to the spending transaction (the one being serialized)\n+    const CScript &scriptCode; // output script being consumed\n+    const unsigned int nIn;    // input index of txTo being signed\n+    const bool fAnyoneCanPay;  // whether the hashtype has the SIGHASH_ANYONECANPAY flag set\n+    const bool fHashSingle;    // whether the hashtype is SIGHASH_SINGLE\n+    const bool fHashNone;      // whether the hashtype is SIGHASH_NONE\n+\n+public:\n+    CTransactionSignatureSerializer(const CTransaction &txToIn, const CScript &scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :\n+        txTo(txToIn), scriptCode(scriptCodeIn), nIn(nInIn),\n+        fAnyoneCanPay(!!(nHashTypeIn & SIGHASH_ANYONECANPAY)),\n+        fHashSingle((nHashTypeIn & 0x1f) == SIGHASH_SINGLE),\n+        fHashNone((nHashTypeIn & 0x1f) == SIGHASH_NONE) {}\n+\n+    /** Serialize the passed scriptCode, skipping OP_CODESEPARATORs */\n+    template<typename S>\n+    void SerializeScriptCode(S &s, int nType, int nVersion) const {\n+        CScript::const_iterator it = scriptCode.begin();\n+        CScript::const_iterator itBegin = it;\n+        opcodetype opcode;\n+        unsigned int nCodeSeparators = 0;\n+        while (scriptCode.GetOp(it, opcode)) {\n+            if (opcode == OP_CODESEPARATOR)\n+                nCodeSeparators++;\n+        }\n+        ::WriteCompactSize(s, scriptCode.size() - nCodeSeparators);\n+        it = itBegin;\n+        while (scriptCode.GetOp(it, opcode)) {\n+            if (opcode == OP_CODESEPARATOR) {\n+                s.write((char*)&itBegin[0], it-itBegin-1);\n+                itBegin = it;\n+            }\n+        }\n+        s.write((char*)&itBegin[0], it-itBegin);\n+    }\n+\n+    /** Serialize an input of txTo */\n+    template<typename S>\n+    void SerializeInput(S &s, unsigned int nInput, int nType, int nVersion) const {\n+        // In case of SIGHASH_ANYONECANPAY, only the input being signed is serialized\n+        if (fAnyoneCanPay)\n+            nInput = nIn;\n+        // Serialize the prevout\n+        ::Serialize(s, txTo.vin[nInput].prevout, nType, nVersion);\n+        // Serialize the script\n+        if (nInput != nIn)\n+            // Blank out other inputs' signatures\n+            ::Serialize(s, CScript(), nType, nVersion);\n+        else\n+            SerializeScriptCode(s, nType, nVersion);\n+        // Serialize the nSequence\n+        if (nInput != nIn && (fHashSingle || fHashNone))\n+            // let the others update at will\n+            ::Serialize(s, (int)0, nType, nVersion);\n+        else\n+            ::Serialize(s, txTo.vin[nInput].nSequence, nType, nVersion);\n+    }\n+\n+    /** Serialize an output of txTo */\n+    template<typename S>\n+    void SerializeOutput(S &s, unsigned int nOutput, int nType, int nVersion) const {\n+        if (fHashSingle && nOutput != nIn)\n+            // Do not lock-in the txout payee at other indices as txin\n+            ::Serialize(s, CTxOut(), nType, nVersion);\n+        else\n+            ::Serialize(s, txTo.vout[nOutput], nType, nVersion);\n+    }\n+\n+    /** Serialize txTo */\n+    template<typename S>\n+    void Serialize(S &s, int nType, int nVersion) const {\n+        // Serialize nVersion\n+        ::Serialize(s, txTo.nVersion, nType, nVersion);\n+        // Serialize vin\n+        unsigned int nInputs = fAnyoneCanPay ? 1 : txTo.vin.size();\n+        ::WriteCompactSize(s, nInputs);\n+        for (unsigned int nInput = 0; nInput < nInputs; nInput++)\n+             SerializeInput(s, nInput, nType, nVersion);\n+        // Serialize vout\n+        unsigned int nOutputs = fHashNone ? 0 : (fHashSingle ? nIn+1 : txTo.vout.size());\n+        ::WriteCompactSize(s, nOutputs);\n+        for (unsigned int nOutput = 0; nOutput < nOutputs; nOutput++)\n+             SerializeOutput(s, nOutput, nType, nVersion);\n+        // Serialie nLockTime\n+        ::Serialize(s, txTo.nLockTime, nType, nVersion);\n+    }\n+};\n+\n+} // anon namespace"
      }
    ]
  },
  {
    "sha": "d26e58e550aa0f4e4918dd43c12bd1115328d1a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjZlNThlNTUwYWEwZjRlNDkxOGRkNDNjMTJiZDExMTUzMjhkMWE0",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-01T22:23:46Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T01:09:37Z"
      },
      "message": "template CTransactionSignatureSerializer",
      "tree": {
        "sha": "7af88ad7ae609a031c99f7f710bc3f032d118311",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7af88ad7ae609a031c99f7f710bc3f032d118311"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d26e58e550aa0f4e4918dd43c12bd1115328d1a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d26e58e550aa0f4e4918dd43c12bd1115328d1a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d26e58e550aa0f4e4918dd43c12bd1115328d1a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d26e58e550aa0f4e4918dd43c12bd1115328d1a4/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cbd86f2915b49a2dbea9837fa3f302f6fe885a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cbd86f2915b49a2dbea9837fa3f302f6fe885a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cbd86f2915b49a2dbea9837fa3f302f6fe885a4"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 9,
      "deletions": 8
    },
    "files": [
      {
        "sha": "5e31ba936d7fe038706e2d430c1ad9c1cbe470e1",
        "filename": "src/script/script_core.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d26e58e550aa0f4e4918dd43c12bd1115328d1a4/src/script/script_core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d26e58e550aa0f4e4918dd43c12bd1115328d1a4/src/script/script_core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_core.cpp?ref=d26e58e550aa0f4e4918dd43c12bd1115328d1a4",
        "patch": "@@ -7,7 +7,7 @@\n \n #include \"core.h\"\n #include \"script/script.h\"\n-#include \"script/transaction_serializer.h\"\n+#include \"script/transaction_serializer.hpp\"\n #include \"uint256.h\"\n #include \"util.h\"\n \n@@ -27,7 +27,7 @@ uint256 CTxSignatureSerializer::SignatureHash(const CScript& scriptCode, int nHa\n     }\n \n     // Wrapper to serialize only the necessary parts of the transaction being signed\n-    CTransactionSignatureSerializer txTmp(txTo, scriptCode, nIn, nHashType);\n+    CTransactionSignatureSerializer<CTransaction> txTmp(txTo, scriptCode, nIn, nHashType);\n \n     // Serialize and hash\n     CHashWriter ss(SER_GETHASH, 0);"
      },
      {
        "sha": "b658d20504bde1a18cab01caf18b74523bf577b9",
        "filename": "src/script/transaction_serializer.hpp",
        "status": "renamed",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d26e58e550aa0f4e4918dd43c12bd1115328d1a4/src/script/transaction_serializer.hpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d26e58e550aa0f4e4918dd43c12bd1115328d1a4/src/script/transaction_serializer.hpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/transaction_serializer.hpp?ref=d26e58e550aa0f4e4918dd43c12bd1115328d1a4",
        "patch": "@@ -3,26 +3,27 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"core.h\"\n+#ifndef H_BITCOIN_SCRIPT_TRANSACTION_SERIALIZER\n+#define H_BITCOIN_SCRIPT_TRANSACTION_SERIALIZER\n+\n #include \"script/script.h\"\n #include \"uint256.h\"\n \n-namespace {\n-\n /** Wrapper that serializes like CTransaction, but with the modifications\n  *  required for the signature hash done in-place\n  */\n+template<typename T>\n class CTransactionSignatureSerializer {\n private:\n-    const CTransaction &txTo;  // reference to the spending transaction (the one being serialized)\n+    const T &txTo;  // reference to the spending transaction (the one being serialized)\n     const CScript &scriptCode; // output script being consumed\n     const unsigned int nIn;    // input index of txTo being signed\n     const bool fAnyoneCanPay;  // whether the hashtype has the SIGHASH_ANYONECANPAY flag set\n     const bool fHashSingle;    // whether the hashtype is SIGHASH_SINGLE\n     const bool fHashNone;      // whether the hashtype is SIGHASH_NONE\n \n public:\n-    CTransactionSignatureSerializer(const CTransaction &txToIn, const CScript &scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :\n+    CTransactionSignatureSerializer(const T &txToIn, const CScript &scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :\n         txTo(txToIn), scriptCode(scriptCodeIn), nIn(nInIn),\n         fAnyoneCanPay(!!(nHashTypeIn & SIGHASH_ANYONECANPAY)),\n         fHashSingle((nHashTypeIn & 0x1f) == SIGHASH_SINGLE),\n@@ -102,4 +103,4 @@ class CTransactionSignatureSerializer {\n     }\n };\n \n-} // anon namespace\n+#endif",
        "previous_filename": "src/script/transaction_serializer.h"
      }
    ]
  },
  {
    "sha": "eefc0d995c096292d26fc8289c4e9ae1e519a938",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWZjMGQ5OTVjMDk2MjkyZDI2ZmM4Mjg5YzRlOWFlMWU1MTlhOTM4",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-01T23:16:43Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T01:09:38Z"
      },
      "message": "Compile a standalone VerifyScript()",
      "tree": {
        "sha": "95547389b3347ca6acb8dc69ea99b7bbec35473d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95547389b3347ca6acb8dc69ea99b7bbec35473d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eefc0d995c096292d26fc8289c4e9ae1e519a938",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eefc0d995c096292d26fc8289c4e9ae1e519a938",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eefc0d995c096292d26fc8289c4e9ae1e519a938",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eefc0d995c096292d26fc8289c4e9ae1e519a938/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d26e58e550aa0f4e4918dd43c12bd1115328d1a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d26e58e550aa0f4e4918dd43c12bd1115328d1a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d26e58e550aa0f4e4918dd43c12bd1115328d1a4"
      }
    ],
    "stats": {
      "total": 113,
      "additions": 109,
      "deletions": 4
    },
    "files": [
      {
        "sha": "aab357a1b27a4a241fa4e0e7ff57358f1ba93eb0",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefc0d995c096292d26fc8289c4e9ae1e519a938/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefc0d995c096292d26fc8289c4e9ae1e519a938/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=eefc0d995c096292d26fc8289c4e9ae1e519a938",
        "patch": "@@ -219,6 +219,7 @@ libbitcoin_common_a_SOURCES = \\\n   script/script.cpp \\\n   script/script_core.cpp \\\n   script/sign.cpp \\\n+  script/standalone.cpp \\\n   script/standard.cpp \\\n   $(BITCOIN_CORE_H)\n "
      },
      {
        "sha": "5366f293a4357cb5444625fe779c325b28000170",
        "filename": "src/script/script_core.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefc0d995c096292d26fc8289c4e9ae1e519a938/src/script/script_core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefc0d995c096292d26fc8289c4e9ae1e519a938/src/script/script_core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_core.cpp?ref=eefc0d995c096292d26fc8289c4e9ae1e519a938",
        "patch": "@@ -27,7 +27,7 @@ uint256 CTxSignatureSerializer::SignatureHash(const CScript& scriptCode, int nHa\n     }\n \n     // Wrapper to serialize only the necessary parts of the transaction being signed\n-    CTransactionSignatureSerializer<CTransaction> txTmp(txTo, scriptCode, nIn, nHashType);\n+    CTransactionSignatureSerializer<CTransaction, CTxOut> txTmp(txTo, scriptCode, nIn, nHashType);\n \n     // Serialize and hash\n     CHashWriter ss(SER_GETHASH, 0);"
      },
      {
        "sha": "ba89ab1c5bd620464be0c6ca191bbba5389f545f",
        "filename": "src/script/standalone.cpp",
        "status": "added",
        "additions": 104,
        "deletions": 0,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefc0d995c096292d26fc8289c4e9ae1e519a938/src/script/standalone.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefc0d995c096292d26fc8289c4e9ae1e519a938/src/script/standalone.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standalone.cpp?ref=eefc0d995c096292d26fc8289c4e9ae1e519a938",
        "patch": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"script/interpreter.h\"\n+#include \"script/script.h\"\n+#include \"script/transaction_serializer.hpp\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+namespace {\n+\n+class COutPoint\n+{\n+public:\n+    uint256 hash;\n+    uint32_t n;\n+    COutPoint() { hash = 0; n = (uint32_t) -1; }\n+    IMPLEMENT_SERIALIZE( READWRITE(FLATDATA(*this)); )\n+};\n+\n+class COutPoint;\n+\n+class CTxIn\n+{\n+public:\n+    COutPoint prevout;\n+    uint32_t nSequence;\n+    CTxIn() {}\n+};\n+\n+class CTxOut\n+{\n+public:\n+    int64_t nValue;\n+    CScript scriptPubKey;\n+\n+    CTxOut()\n+    {\n+        nValue = -1;\n+        scriptPubKey.clear();\n+    }\n+\n+    IMPLEMENT_SERIALIZE\n+    (\n+        READWRITE(nValue);\n+        READWRITE(scriptPubKey);\n+    )\n+};\n+\n+class CTransaction\n+{\n+public:\n+    static const int32_t CURRENT_VERSION=1;\n+    const int32_t nVersion;\n+    const std::vector<CTxIn> vin;\n+    const std::vector<CTxOut> vout;\n+    const uint32_t nLockTime;\n+    CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n+};\n+\n+class CTxSignatureSerializer : public CSignatureSerializer \n+{\n+private:\n+    const CTransaction& txTo;  // reference to the spending transaction (the one being serialized)\n+    const unsigned int nIn;    // input index of txTo being signed\n+public:\n+    CTxSignatureSerializer(const CTransaction& txToIn, unsigned int nInIn) :\n+        txTo(txToIn), nIn(nInIn) {}\n+    virtual uint256 SignatureHash(const CScript& scriptCode, int nHashType) const;\n+};\n+\n+uint256 CTxSignatureSerializer::SignatureHash(const CScript& scriptCode, int nHashType) const\n+{\n+    if (nIn >= txTo.vin.size()) {\n+        LogPrintf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n+        return 1;\n+    }\n+\n+    // Check for invalid use of SIGHASH_SINGLE\n+    if ((nHashType & 0x1f) == SIGHASH_SINGLE) {\n+        if (nIn >= txTo.vout.size()) {\n+            LogPrintf(\"ERROR: SignatureHash() : nOut=%d out of range\\n\", nIn);\n+            return 1;\n+        }\n+    }\n+\n+    // Wrapper to serialize only the necessary parts of the transaction being signed\n+    CTransactionSignatureSerializer<CTransaction, CTxOut> txTmp(txTo, scriptCode, nIn, nHashType);\n+\n+    // Serialize and hash\n+    CHashWriter ss(SER_GETHASH, 0);\n+    ss << txTmp << nHashType;\n+    return ss.GetHash();\n+}\n+\n+} // anon namespace\n+\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+{\n+    CTxSignatureSerializer tx(txTo, nIn);\n+    return VerifyScript(scriptSig, scriptPubKey, tx, flags);\n+}"
      },
      {
        "sha": "4ad72d41c785c95ee192efa35ce4df23f55715f1",
        "filename": "src/script/transaction_serializer.hpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefc0d995c096292d26fc8289c4e9ae1e519a938/src/script/transaction_serializer.hpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefc0d995c096292d26fc8289c4e9ae1e519a938/src/script/transaction_serializer.hpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/transaction_serializer.hpp?ref=eefc0d995c096292d26fc8289c4e9ae1e519a938",
        "patch": "@@ -12,18 +12,18 @@\n /** Wrapper that serializes like CTransaction, but with the modifications\n  *  required for the signature hash done in-place\n  */\n-template<typename T>\n+template<typename CTransaction, typename CTxOut>\n class CTransactionSignatureSerializer {\n private:\n-    const T &txTo;  // reference to the spending transaction (the one being serialized)\n+    const CTransaction &txTo;  // reference to the spending transaction (the one being serialized)\n     const CScript &scriptCode; // output script being consumed\n     const unsigned int nIn;    // input index of txTo being signed\n     const bool fAnyoneCanPay;  // whether the hashtype has the SIGHASH_ANYONECANPAY flag set\n     const bool fHashSingle;    // whether the hashtype is SIGHASH_SINGLE\n     const bool fHashNone;      // whether the hashtype is SIGHASH_NONE\n \n public:\n-    CTransactionSignatureSerializer(const T &txToIn, const CScript &scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :\n+    CTransactionSignatureSerializer(const CTransaction &txToIn, const CScript &scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :\n         txTo(txToIn), scriptCode(scriptCodeIn), nIn(nInIn),\n         fAnyoneCanPay(!!(nHashTypeIn & SIGHASH_ANYONECANPAY)),\n         fHashSingle((nHashTypeIn & 0x1f) == SIGHASH_SINGLE),"
      }
    ]
  }
]