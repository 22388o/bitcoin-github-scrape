[
  {
    "sha": "1abcecc40c518a98b7d17880657ec0247abdf125",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWJjZWNjNDBjNTE4YTk4YjdkMTc4ODA2NTdlYzAyNDdhYmRmMTI1",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-08-22T16:17:31Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-10-26T11:24:39Z"
      },
      "message": "Tests: Use self.chain instead of 'regtest' in almost all current tests",
      "tree": {
        "sha": "b78f9540641279b72e2288e278b54ef08c6c2fcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b78f9540641279b72e2288e278b54ef08c6c2fcb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1abcecc40c518a98b7d17880657ec0247abdf125",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEIuvzCd8AbOwfprXViGbBjqHJRKIFAl20LPcACgkQiGbBjqHJ\nRKIJTg//T9T6R959RbuzQ9yiLJLgOR5xb3ycpiUfhLuSvJOB/htzntO68ni1S9v5\n+UpE+5Q0vnHlzqS4cXlVCCi+X2c6vnqUH+YaUsBH+5lw1Aax0z5CzILSlwpncgiA\nVHiYbdGX3IQrz6fvDiLHbjeRwoQXIdrpC2S+ZRxqmRmqQS3C4PluD+cwBzOt2yxF\n4gD5XVt9dpelk7r/LXd4lIrP3sshPzTJWBzvdiqwaSFwOjSdDL3RByqs0VFiy6FU\n9HLmPZ4rC5puUQ+pO/QHM/39/H2Q2EDsz7o7yVkIwGmvKjc7oKAWWkOHZKCOcfnI\neLw02cMbc7JaybYPzORZI3En3MSV286Z8f00gYGSD/2hs0X7SUopU7qSm+LAAm3u\n+xqjkQqjChWXHOtB8sHRxhwHiM8VElWa9Q0OE2OkMwQGCwQW3my7Afu393XRwyZ4\n1j4d5NxFtFMYAUDei/jAg74NBcG+yFPhpohadZsDsTEfFEQJJ5v5DdEGEwSr1t9h\nTOipZlwSfHEI1YGr8R+AYgbNx/RLYiUs8VRIozaQv6TzSNhcOWrG5xovayj1mG8/\nQgJwFWc0+JzBpLEdC6BXdCW11beXRUzcKmhKM0QxGsCKlay9x6QafNq739ipN8mb\nKoAEfFBDzlxuK8G6VT7W7keXbfVlJYBKwJtGG8EhRLkOSMInzSg=\n=TxOT\n-----END PGP SIGNATURE-----",
        "payload": "tree b78f9540641279b72e2288e278b54ef08c6c2fcb\nparent be50469217bd775c4305938634c32e5932f47841\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1566490651 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1572089079 +0200\n\nTests: Use self.chain instead of 'regtest' in almost all current tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1abcecc40c518a98b7d17880657ec0247abdf125",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1abcecc40c518a98b7d17880657ec0247abdf125",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1abcecc40c518a98b7d17880657ec0247abdf125/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be50469217bd775c4305938634c32e5932f47841",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be50469217bd775c4305938634c32e5932f47841",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be50469217bd775c4305938634c32e5932f47841"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 44,
      "deletions": 44
    },
    "files": [
      {
        "sha": "874243ec5d6335e160dd9852e57ab4a5220e56e9",
        "filename": "test/functional/feature_abortnode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/feature_abortnode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/feature_abortnode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_abortnode.py?ref=1abcecc40c518a98b7d17880657ec0247abdf125",
        "patch": "@@ -29,7 +29,7 @@ def run_test(self):\n         datadir = get_datadir_path(self.options.tmpdir, 0)\n \n         # Deleting the undo file will result in reorg failure\n-        os.unlink(os.path.join(datadir, 'regtest', 'blocks', 'rev00000.dat'))\n+        os.unlink(os.path.join(datadir, self.chain, 'blocks', 'rev00000.dat'))\n \n         # Connecting to a node with a more work chain will trigger a reorg\n         # attempt."
      },
      {
        "sha": "1b1ff14151e1542322b0b20a08e5665ee8710cc2",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=1abcecc40c518a98b7d17880657ec0247abdf125",
        "patch": "@@ -38,7 +38,7 @@ def test_config_file_parser(self):\n         if self.is_wallet_compiled():\n             with open(inc_conf_file_path, 'w', encoding='utf8') as conf:\n                 conf.write(\"wallet=foo\\n\")\n-            self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Config setting for -wallet only applied on regtest network when in [regtest] section.')\n+            self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Config setting for -wallet only applied on %s network when in [%s] section.' % (self.chain, self.chain))\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('regtest=0\\n') # mainnet\n@@ -103,7 +103,7 @@ def run_test(self):\n         # Check that using non-existent datadir in conf file fails\n         conf_file = os.path.join(default_data_dir, \"bitcoin.conf\")\n \n-        # datadir needs to be set before [regtest] section\n+        # datadir needs to be set before [chain] section\n         conf_file_contents = open(conf_file, encoding='utf8').read()\n         with open(conf_file, 'w', encoding='utf8') as f:\n             f.write(\"datadir=\" + new_data_dir + \"\\n\")\n@@ -115,17 +115,17 @@ def run_test(self):\n         os.mkdir(new_data_dir)\n         self.start_node(0, ['-conf='+conf_file, '-wallet=w1'])\n         self.stop_node(0)\n-        assert os.path.exists(os.path.join(new_data_dir, 'regtest', 'blocks'))\n+        assert os.path.exists(os.path.join(new_data_dir, self.chain, 'blocks'))\n         if self.is_wallet_compiled():\n-            assert os.path.exists(os.path.join(new_data_dir, 'regtest', 'wallets', 'w1'))\n+            assert os.path.exists(os.path.join(new_data_dir, self.chain, 'wallets', 'w1'))\n \n         # Ensure command line argument overrides datadir in conf\n         os.mkdir(new_data_dir_2)\n         self.nodes[0].datadir = new_data_dir_2\n         self.start_node(0, ['-datadir='+new_data_dir_2, '-conf='+conf_file, '-wallet=w2'])\n-        assert os.path.exists(os.path.join(new_data_dir_2, 'regtest', 'blocks'))\n+        assert os.path.exists(os.path.join(new_data_dir_2, self.chain, 'blocks'))\n         if self.is_wallet_compiled():\n-            assert os.path.exists(os.path.join(new_data_dir_2, 'regtest', 'wallets', 'w2'))\n+            assert os.path.exists(os.path.join(new_data_dir_2, self.chain, 'wallets', 'w2'))\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "89843f84f7c9e5f57823db57988d283f6a26b5d0",
        "filename": "test/functional/feature_filelock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/feature_filelock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/feature_filelock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_filelock.py?ref=1abcecc40c518a98b7d17880657ec0247abdf125",
        "patch": "@@ -19,7 +19,7 @@ def setup_network(self):\n         self.nodes[0].wait_for_rpc_connection()\n \n     def run_test(self):\n-        datadir = os.path.join(self.nodes[0].datadir, 'regtest')\n+        datadir = os.path.join(self.nodes[0].datadir, self.chain)\n         self.log.info(\"Using datadir {}\".format(datadir))\n \n         self.log.info(\"Check that we can't start a second bitcoind instance using the same datadir\")"
      },
      {
        "sha": "5dd0b0e5acc20c2d8da71ffb0cdc0833f9f2f340",
        "filename": "test/functional/feature_loadblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/feature_loadblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/feature_loadblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_loadblock.py?ref=1abcecc40c518a98b7d17880657ec0247abdf125",
        "patch": "@@ -37,7 +37,7 @@ def run_test(self):\n         cfg_file = os.path.join(data_dir, \"linearize.cfg\")\n         bootstrap_file = os.path.join(self.options.tmpdir, \"bootstrap.dat\")\n         genesis_block = self.nodes[0].getblockhash(0)\n-        blocks_dir = os.path.join(data_dir, \"regtest\", \"blocks\")\n+        blocks_dir = os.path.join(data_dir, self.chain, \"blocks\")\n         hash_list = tempfile.NamedTemporaryFile(dir=data_dir,\n                                                 mode='w',\n                                                 delete=False,"
      },
      {
        "sha": "4065572510bc14599a116fc05234126686141500",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=1abcecc40c518a98b7d17880657ec0247abdf125",
        "patch": "@@ -16,7 +16,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n \n     def relative_log_path(self, name):\n-        return os.path.join(self.nodes[0].datadir, \"regtest\", name)\n+        return os.path.join(self.nodes[0].datadir, self.chain, name)\n \n     def run_test(self):\n         # test default log file name"
      },
      {
        "sha": "b2ae76eb5a574953471f56899d708f45754d5687",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=1abcecc40c518a98b7d17880657ec0247abdf125",
        "patch": "@@ -100,7 +100,7 @@ def skip_test_if_missing_module(self):\n     def setup_network(self):\n         self.setup_nodes()\n \n-        self.prunedir = os.path.join(self.nodes[2].datadir, 'regtest', 'blocks', '')\n+        self.prunedir = os.path.join(self.nodes[2].datadir, self.chain, 'blocks', '')\n \n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[1], 2)\n@@ -278,7 +278,7 @@ def prune(index):\n             assert_equal(ret, node.getblockchaininfo()['pruneheight'])\n \n         def has_block(index):\n-            return os.path.isfile(os.path.join(self.nodes[node_number].datadir, \"regtest\", \"blocks\", \"blk{:05}.dat\".format(index)))\n+            return os.path.isfile(os.path.join(self.nodes[node_number].datadir, self.chain, \"blocks\", \"blk{:05}.dat\".format(index)))\n \n         # should not prune because chain tip of node 3 (995) < PruneAfterHeight (1000)\n         assert_raises_rpc_error(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))"
      },
      {
        "sha": "62f5cd277150651cb507e478daa60be9892d653a",
        "filename": "test/functional/interface_rpc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/interface_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/interface_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rpc.py?ref=1abcecc40c518a98b7d17880657ec0247abdf125",
        "patch": "@@ -32,7 +32,7 @@ def test_getrpcinfo(self):\n         command = info['active_commands'][0]\n         assert_equal(command['method'], 'getrpcinfo')\n         assert_greater_than_or_equal(command['duration'], 0)\n-        assert_equal(info['logpath'], os.path.join(self.nodes[0].datadir, 'regtest', 'debug.log'))\n+        assert_equal(info['logpath'], os.path.join(self.nodes[0].datadir, self.chain, 'debug.log'))\n \n     def test_batch_request(self):\n         self.log.info(\"Testing basic JSON-RPC batch request...\")"
      },
      {
        "sha": "5ce23af94fbe4f77cde41b687b9a96be7507f603",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=1abcecc40c518a98b7d17880657ec0247abdf125",
        "patch": "@@ -117,8 +117,8 @@ def run_test(self):\n         wait_until(lambda: self.nodes[0].getmempoolinfo()[\"loaded\"])\n         assert_equal(len(self.nodes[0].getrawmempool()), 5)\n \n-        mempooldat0 = os.path.join(self.nodes[0].datadir, 'regtest', 'mempool.dat')\n-        mempooldat1 = os.path.join(self.nodes[1].datadir, 'regtest', 'mempool.dat')\n+        mempooldat0 = os.path.join(self.nodes[0].datadir, self.chain, 'mempool.dat')\n+        mempooldat1 = os.path.join(self.nodes[1].datadir, self.chain, 'mempool.dat')\n         self.log.debug(\"Remove the mempool.dat file. Verify that savemempool to disk via RPC re-creates it\")\n         os.remove(mempooldat0)\n         self.nodes[0].savemempool()"
      },
      {
        "sha": "a32e4b8ff95045a08df9787fce4b0b28da36e64f",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=1abcecc40c518a98b7d17880657ec0247abdf125",
        "patch": "@@ -69,7 +69,7 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         self.log.info('getmininginfo')\n         mining_info = node.getmininginfo()\n         assert_equal(mining_info['blocks'], 200)\n-        assert_equal(mining_info['chain'], 'regtest')\n+        assert_equal(mining_info['chain'], self.chain)\n         assert 'currentblocktx' not in mining_info\n         assert 'currentblockweight' not in mining_info\n         assert_equal(mining_info['difficulty'], Decimal('4.656542373906925E-10'))"
      },
      {
        "sha": "e08731dc977083486876fc479a0c98688e29f3ee",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=1abcecc40c518a98b7d17880657ec0247abdf125",
        "patch": "@@ -54,7 +54,7 @@ def run_test(self):\n \n         self.log.info(\"Stop node, remove wallet, mine again some blocks...\")\n         self.stop_node(0)\n-        shutil.rmtree(os.path.join(self.nodes[0].datadir, \"regtest\", 'wallets'))\n+        shutil.rmtree(os.path.join(self.nodes[0].datadir, self.chain, 'wallets'))\n         self.start_node(0)\n         self.nodes[0].generate(110)\n "
      },
      {
        "sha": "2c224671f33c3ce837736b0c9798991c70326d1a",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=1abcecc40c518a98b7d17880657ec0247abdf125",
        "patch": "@@ -26,7 +26,7 @@ def skip_test_if_missing_module(self):\n \n     def bitcoin_wallet_process(self, *args):\n         binary = self.config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoin-wallet' + self.config[\"environment\"][\"EXEEXT\"]\n-        args = ['-datadir={}'.format(self.nodes[0].datadir), '-regtest'] + list(args)\n+        args = ['-datadir={}'.format(self.nodes[0].datadir), '-chain=%s' % self.chain] + list(args)\n         return subprocess.Popen([binary] + args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n \n     def assert_raises_tool_error(self, error, *args):\n@@ -197,7 +197,7 @@ def test_getwalletinfo_on_different_wallet(self):\n         self.log.debug('Wallet file shasum unchanged\\n')\n \n     def run_test(self):\n-        self.wallet_path = os.path.join(self.nodes[0].datadir, 'regtest', 'wallets', 'wallet.dat')\n+        self.wallet_path = os.path.join(self.nodes[0].datadir, self.chain, 'wallets', 'wallet.dat')\n         self.test_invalid_tool_commands_and_args()\n         # Warning: The following tests are order-dependent.\n         self.test_tool_wallet_info()"
      },
      {
        "sha": "16c69f304a30e8baf02639da0ac86f81ecb82150",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=1abcecc40c518a98b7d17880657ec0247abdf125",
        "patch": "@@ -107,9 +107,9 @@ def stop_three(self):\n         self.stop_node(2)\n \n     def erase_three(self):\n-        os.remove(os.path.join(self.nodes[0].datadir, 'regtest', 'wallets', 'wallet.dat'))\n-        os.remove(os.path.join(self.nodes[1].datadir, 'regtest', 'wallets', 'wallet.dat'))\n-        os.remove(os.path.join(self.nodes[2].datadir, 'regtest', 'wallets', 'wallet.dat'))\n+        os.remove(os.path.join(self.nodes[0].datadir, self.chain, 'wallets', 'wallet.dat'))\n+        os.remove(os.path.join(self.nodes[1].datadir, self.chain, 'wallets', 'wallet.dat'))\n+        os.remove(os.path.join(self.nodes[2].datadir, self.chain, 'wallets', 'wallet.dat'))\n \n     def run_test(self):\n         self.log.info(\"Generating initial blockchain\")\n@@ -167,13 +167,13 @@ def run_test(self):\n         self.erase_three()\n \n         # Start node2 with no chain\n-        shutil.rmtree(os.path.join(self.nodes[2].datadir, 'regtest', 'blocks'))\n-        shutil.rmtree(os.path.join(self.nodes[2].datadir, 'regtest', 'chainstate'))\n+        shutil.rmtree(os.path.join(self.nodes[2].datadir, self.chain, 'blocks'))\n+        shutil.rmtree(os.path.join(self.nodes[2].datadir, self.chain, 'chainstate'))\n \n         # Restore wallets from backup\n-        shutil.copyfile(os.path.join(self.nodes[0].datadir, 'wallet.bak'), os.path.join(self.nodes[0].datadir, 'regtest', 'wallets', 'wallet.dat'))\n-        shutil.copyfile(os.path.join(self.nodes[1].datadir, 'wallet.bak'), os.path.join(self.nodes[1].datadir, 'regtest', 'wallets', 'wallet.dat'))\n-        shutil.copyfile(os.path.join(self.nodes[2].datadir, 'wallet.bak'), os.path.join(self.nodes[2].datadir, 'regtest', 'wallets', 'wallet.dat'))\n+        shutil.copyfile(os.path.join(self.nodes[0].datadir, 'wallet.bak'), os.path.join(self.nodes[0].datadir, self.chain, 'wallets', 'wallet.dat'))\n+        shutil.copyfile(os.path.join(self.nodes[1].datadir, 'wallet.bak'), os.path.join(self.nodes[1].datadir, self.chain, 'wallets', 'wallet.dat'))\n+        shutil.copyfile(os.path.join(self.nodes[2].datadir, 'wallet.bak'), os.path.join(self.nodes[2].datadir, self.chain, 'wallets', 'wallet.dat'))\n \n         self.log.info(\"Re-starting nodes\")\n         self.start_three()\n@@ -188,8 +188,8 @@ def run_test(self):\n         self.erase_three()\n \n         #start node2 with no chain\n-        shutil.rmtree(os.path.join(self.nodes[2].datadir, 'regtest', 'blocks'))\n-        shutil.rmtree(os.path.join(self.nodes[2].datadir, 'regtest', 'chainstate'))\n+        shutil.rmtree(os.path.join(self.nodes[2].datadir, self.chain, 'blocks'))\n+        shutil.rmtree(os.path.join(self.nodes[2].datadir, self.chain, 'chainstate'))\n \n         self.start_three()\n \n@@ -209,10 +209,10 @@ def run_test(self):\n \n         # Backup to source wallet file must fail\n         sourcePaths = [\n-            os.path.join(self.nodes[0].datadir, 'regtest', 'wallets', 'wallet.dat'),\n-            os.path.join(self.nodes[0].datadir, 'regtest', '.', 'wallets', 'wallet.dat'),\n-            os.path.join(self.nodes[0].datadir, 'regtest', 'wallets', ''),\n-            os.path.join(self.nodes[0].datadir, 'regtest', 'wallets')]\n+            os.path.join(self.nodes[0].datadir, self.chain, 'wallets', 'wallet.dat'),\n+            os.path.join(self.nodes[0].datadir, self.chain, '.', 'wallets', 'wallet.dat'),\n+            os.path.join(self.nodes[0].datadir, self.chain, 'wallets', ''),\n+            os.path.join(self.nodes[0].datadir, self.chain, 'wallets')]\n \n         for sourcePath in sourcePaths:\n             assert_raises_rpc_error(-4, \"backup failed\", self.nodes[0].backupwallet, sourcePath)"
      },
      {
        "sha": "3107d44e9b381331933a9060af8e5ab8e5be56ec",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=1abcecc40c518a98b7d17880657ec0247abdf125",
        "patch": "@@ -67,11 +67,11 @@ def run_test(self):\n \n         self.log.info(\"Restore backup ...\")\n         self.stop_node(1)\n-        # we need to delete the complete regtest directory\n+        # we need to delete the complete chain directory\n         # otherwise node1 would auto-recover all funds in flag the keypool keys as used\n-        shutil.rmtree(os.path.join(self.nodes[1].datadir, \"regtest\", \"blocks\"))\n-        shutil.rmtree(os.path.join(self.nodes[1].datadir, \"regtest\", \"chainstate\"))\n-        shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\"))\n+        shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"blocks\"))\n+        shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"chainstate\"))\n+        shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, self.chain, \"wallets\", \"wallet.dat\"))\n         self.start_node(1)\n \n         # Assert that derivation is deterministic\n@@ -92,9 +92,9 @@ def run_test(self):\n \n         # Try a RPC based rescan\n         self.stop_node(1)\n-        shutil.rmtree(os.path.join(self.nodes[1].datadir, \"regtest\", \"blocks\"))\n-        shutil.rmtree(os.path.join(self.nodes[1].datadir, \"regtest\", \"chainstate\"))\n-        shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\"))\n+        shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"blocks\"))\n+        shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"chainstate\"))\n+        shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, self.chain, \"wallets\", \"wallet.dat\"))\n         self.start_node(1, extra_args=self.extra_args[1])\n         connect_nodes(self.nodes[0], 1)\n         self.sync_all()"
      },
      {
        "sha": "829633a05004b73419d4cff33ce5d97a8a8a2701",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=1abcecc40c518a98b7d17880657ec0247abdf125",
        "patch": "@@ -30,7 +30,7 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        wallet_path = os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\")\n+        wallet_path = os.path.join(self.nodes[1].datadir, self.chain, \"wallets\", \"wallet.dat\")\n         wallet_backup_path = os.path.join(self.nodes[1].datadir, \"wallet.bak\")\n         self.nodes[0].generate(101)\n "
      },
      {
        "sha": "72f1b4c5cd9b35a8b5bfc0eab4183810f1b82e02",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=1abcecc40c518a98b7d17880657ec0247abdf125",
        "patch": "@@ -39,7 +39,7 @@ def add_options(self, parser):\n     def run_test(self):\n         node = self.nodes[0]\n \n-        data_dir = lambda *p: os.path.join(node.datadir, 'regtest', *p)\n+        data_dir = lambda *p: os.path.join(node.datadir, self.chain, *p)\n         wallet_dir = lambda *p: data_dir('wallets', *p)\n         wallet = lambda name: node.get_wallet_rpc(name)\n \n@@ -187,7 +187,7 @@ def wallet_file(name):\n         assert_equal(w4.getbalance(), 3)\n \n         batch = w1.batch([w1.getblockchaininfo.get_request(), w1.getwalletinfo.get_request()])\n-        assert_equal(batch[0][\"result\"][\"chain\"], \"regtest\")\n+        assert_equal(batch[0][\"result\"][\"chain\"], self.chain)\n         assert_equal(batch[1][\"result\"][\"walletname\"], \"w1\")\n \n         self.log.info('Check for per-wallet settxfee call')"
      },
      {
        "sha": "497a5dd95e4444aaae52e1655ae939dcaba44c27",
        "filename": "test/functional/wallet_reorgsrestore.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/wallet_reorgsrestore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abcecc40c518a98b7d17880657ec0247abdf125/test/functional/wallet_reorgsrestore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_reorgsrestore.py?ref=1abcecc40c518a98b7d17880657ec0247abdf125",
        "patch": "@@ -90,7 +90,7 @@ def run_test(self):\n         # Node0 wallet file is loaded on longest sync'ed node1\n         self.stop_node(1)\n         self.nodes[0].backupwallet(os.path.join(self.nodes[0].datadir, 'wallet.bak'))\n-        shutil.copyfile(os.path.join(self.nodes[0].datadir, 'wallet.bak'), os.path.join(self.nodes[1].datadir, 'regtest', 'wallet.dat'))\n+        shutil.copyfile(os.path.join(self.nodes[0].datadir, 'wallet.bak'), os.path.join(self.nodes[1].datadir, self.chain, 'wallet.dat'))\n         self.start_node(1)\n         tx_after_reorg = self.nodes[1].gettransaction(txid)\n         # Check that normal confirmed tx is confirmed again but with different blockhash"
      }
    ]
  }
]