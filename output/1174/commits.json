[
  {
    "sha": "c4c99ade653e8e8f62ed4af4c22e196c8310d0d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNGM5OWFkZTY1M2U4ZThmNjJlZDRhZjRjMjJlMTk2YzgzMTBkMGQ4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-01-22T19:32:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-06-22T15:19:28Z"
      },
      "message": "Base32 encoding/decoding",
      "tree": {
        "sha": "b790d4530a15cc420e5b683e1be3f9cf26b1672b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b790d4530a15cc420e5b683e1be3f9cf26b1672b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4c99ade653e8e8f62ed4af4c22e196c8310d0d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4c99ade653e8e8f62ed4af4c22e196c8310d0d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4c99ade653e8e8f62ed4af4c22e196c8310d0d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4c99ade653e8e8f62ed4af4c22e196c8310d0d8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a08e1826981e02c7a5f18fc30b4f40a780e4e86d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a08e1826981e02c7a5f18fc30b4f40a780e4e86d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a08e1826981e02c7a5f18fc30b4f40a780e4e86d"
      }
    ],
    "stats": {
      "total": 191,
      "additions": 191,
      "deletions": 0
    },
    "files": [
      {
        "sha": "931d27ba00a07444a3af3577afac6d2ae0408829",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 187,
        "deletions": 0,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4c99ade653e8e8f62ed4af4c22e196c8310d0d8/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4c99ade653e8e8f62ed4af4c22e196c8310d0d8/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=c4c99ade653e8e8f62ed4af4c22e196c8310d0d8",
        "patch": "@@ -702,6 +702,193 @@ string DecodeBase64(const string& str)\n     return string((const char*)&vchRet[0], vchRet.size());\n }\n \n+string EncodeBase32(const unsigned char* pch, size_t len)\n+{\n+    static const char *pbase32 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\n+\n+    string strRet=\"\";\n+    strRet.reserve((len+4)/5*8);\n+\n+    int mode=0, left=0;\n+    const unsigned char *pchEnd = pch+len;\n+\n+    while (pch<pchEnd)\n+    {\n+        int enc = *(pch++);\n+        switch (mode)\n+        {\n+            case 0: // we have no bits\n+                strRet += pbase32[enc >> 3];\n+                left = (enc & 7) << 2;\n+                mode = 1;\n+                break;\n+\n+            case 1: // we have three bits\n+                strRet += pbase32[left | (enc >> 6)];\n+                strRet += pbase32[(enc >> 1) & 31];\n+                left = (enc & 1) << 4;\n+                mode = 2;\n+                break;\n+\n+            case 2: // we have one bit\n+                strRet += pbase32[left | (enc >> 4)];\n+                left = (enc & 15) << 1;\n+                mode = 3;\n+                break;\n+\n+            case 3: // we have four bits\n+                strRet += pbase32[left | (enc >> 7)];\n+                strRet += pbase32[(enc >> 2) & 31];\n+                left = (enc & 3) << 3;\n+                mode = 4;\n+                break;\n+\n+            case 4: // we have two bits\n+                strRet += pbase32[left | (enc >> 5)];\n+                strRet += pbase32[enc & 31];\n+                mode = 0;\n+        }\n+    }\n+\n+    static const int nPadding[5] = {0, 6, 4, 3, 1};\n+    if (mode)\n+    {\n+        strRet += pbase32[left];\n+        for (int n=0; n<nPadding[mode]; n++)\n+             strRet += '=';\n+    }\n+\n+    return strRet;\n+}\n+\n+string EncodeBase32(const string& str)\n+{\n+    return EncodeBase32((const unsigned char*)str.c_str(), str.size());\n+}\n+\n+vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)\n+{\n+    static const int decode32_table[256] =\n+    {\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n+        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1,  0,  1,  2,\n+         3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n+        23, 24, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n+    };\n+\n+    if (pfInvalid)\n+        *pfInvalid = false;\n+\n+    vector<unsigned char> vchRet;\n+    vchRet.reserve((strlen(p))*5/8);\n+\n+    int mode = 0;\n+    int left = 0;\n+\n+    while (1)\n+    {\n+         int dec = decode32_table[(unsigned char)*p];\n+         if (dec == -1) break;\n+         p++;\n+         switch (mode)\n+         {\n+             case 0: // we have no bits and get 5\n+                 left = dec;\n+                 mode = 1;\n+                 break;\n+\n+              case 1: // we have 5 bits and keep 2\n+                  vchRet.push_back((left<<3) | (dec>>2));\n+                  left = dec & 3;\n+                  mode = 2;\n+                  break;\n+\n+             case 2: // we have 2 bits and keep 7\n+                 left = left << 5 | dec;\n+                 mode = 3;\n+                 break;\n+\n+             case 3: // we have 7 bits and keep 4\n+                 vchRet.push_back((left<<1) | (dec>>4));\n+                 left = dec & 15;\n+                 mode = 4;\n+                 break;\n+\n+             case 4: // we have 4 bits, and keep 1\n+                 vchRet.push_back((left<<4) | (dec>>1));\n+                 left = dec & 1;\n+                 mode = 5;\n+                 break;\n+\n+             case 5: // we have 1 bit, and keep 6\n+                 left = left << 5 | dec;\n+                 mode = 6;\n+                 break;\n+\n+             case 6: // we have 6 bits, and keep 3\n+                 vchRet.push_back((left<<2) | (dec>>3));\n+                 left = dec & 7;\n+                 mode = 7;\n+                 break;\n+\n+             case 7: // we have 3 bits, and keep 0\n+                 vchRet.push_back((left<<5) | dec);\n+                 mode = 0;\n+                 break;\n+         }\n+    }\n+\n+    if (pfInvalid)\n+        switch (mode)\n+        {\n+            case 0: // 8n base32 characters processed: ok\n+                break;\n+\n+            case 1: // 8n+1 base32 characters processed: impossible\n+            case 3: //   +3\n+            case 6: //   +6\n+                *pfInvalid = true;\n+                break;\n+\n+            case 2: // 8n+2 base32 characters processed: require '======'\n+                if (left || p[0] != '=' || p[1] != '=' || p[2] != '=' || p[3] != '=' || p[4] != '=' || p[5] != '=' || decode32_table[(unsigned char)p[6]] != -1)\n+                    *pfInvalid = true;\n+                break;\n+\n+            case 4: // 8n+4 base32 characters processed: require '===='\n+                if (left || p[0] != '=' || p[1] != '=' || p[2] != '=' || p[3] != '=' || decode32_table[(unsigned char)p[4]] != -1)\n+                    *pfInvalid = true;\n+                break;\n+\n+            case 5: // 8n+5 base32 characters processed: require '==='\n+                if (left || p[0] != '=' || p[1] != '=' || p[2] != '=' || decode32_table[(unsigned char)p[3]] != -1)\n+                    *pfInvalid = true;\n+                break;\n+\n+            case 7: // 8n+7 base32 characters processed: require '='\n+                if (left || p[0] != '=' || decode32_table[(unsigned char)p[1]] != -1)\n+                    *pfInvalid = true;\n+                break;\n+        }\n+\n+    return vchRet;\n+}\n+\n+string DecodeBase32(const string& str)\n+{\n+    vector<unsigned char> vchRet = DecodeBase32(str.c_str());\n+    return string((const char*)&vchRet[0], vchRet.size());\n+}\n+\n \n bool WildcardMatch(const char* psz, const char* mask)\n {"
      },
      {
        "sha": "058f9097969039b1ef1bd1016d69f68f2f4a775c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4c99ade653e8e8f62ed4af4c22e196c8310d0d8/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4c99ade653e8e8f62ed4af4c22e196c8310d0d8/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=c4c99ade653e8e8f62ed4af4c22e196c8310d0d8",
        "patch": "@@ -146,6 +146,10 @@ std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid = NULL);\n std::string DecodeBase64(const std::string& str);\n std::string EncodeBase64(const unsigned char* pch, size_t len);\n std::string EncodeBase64(const std::string& str);\n+std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid = NULL);\n+std::string DecodeBase32(const std::string& str);\n+std::string EncodeBase32(const unsigned char* pch, size_t len);\n+std::string EncodeBase32(const std::string& str);\n void ParseParameters(int argc, const char*const argv[]);\n bool WildcardMatch(const char* psz, const char* mask);\n bool WildcardMatch(const std::string& str, const std::string& mask);"
      }
    ]
  },
  {
    "sha": "e0be8da3924031ea115c93551dfa463f84d3a120",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGJlOGRhMzkyNDAzMWVhMTE1YzkzNTUxZGZhNDYzZjg0ZDNhMTIw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-01-29T10:38:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-06-22T15:19:28Z"
      },
      "message": "Unit tests for base32 encode/decode",
      "tree": {
        "sha": "de7b2a38757bdb60d7ea37e9e9d9836d73a495e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de7b2a38757bdb60d7ea37e9e9d9836d73a495e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0be8da3924031ea115c93551dfa463f84d3a120",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0be8da3924031ea115c93551dfa463f84d3a120",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0be8da3924031ea115c93551dfa463f84d3a120",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0be8da3924031ea115c93551dfa463f84d3a120/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c4c99ade653e8e8f62ed4af4c22e196c8310d0d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4c99ade653e8e8f62ed4af4c22e196c8310d0d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4c99ade653e8e8f62ed4af4c22e196c8310d0d8"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "756c72b94d47f70991ac51cf5a73094823fa306f",
        "filename": "src/test/base32_tests.cpp",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0be8da3924031ea115c93551dfa463f84d3a120/src/test/base32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0be8da3924031ea115c93551dfa463f84d3a120/src/test/base32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base32_tests.cpp?ref=e0be8da3924031ea115c93551dfa463f84d3a120",
        "patch": "@@ -0,0 +1,20 @@\n+#include <boost/test/unit_test.hpp>\n+\n+#include \"util.h\"\n+\n+BOOST_AUTO_TEST_SUITE(base32_tests)\n+\n+BOOST_AUTO_TEST_CASE(base32_testvectors)\n+{\n+    static const std::string vstrIn[]  = {\"\",\"f\",\"fo\",\"foo\",\"foob\",\"fooba\",\"foobar\"};\n+    static const std::string vstrOut[] = {\"\",\"MY======\",\"MZXQ====\",\"MZXW6===\",\"MZXW6YQ=\",\"MZXW6YTB\",\"MZXW6YTBOI======\"};\n+    for (unsigned int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n+    {\n+        std::string strEnc = EncodeBase32(vstrIn[i]);\n+        BOOST_CHECK(strEnc == vstrOut[i]);\n+        std::string strDec = DecodeBase32(vstrOut[i]);\n+        BOOST_CHECK(strDec == vstrIn[i]);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "70f7f0038592a28e846f02d084f0119fc34eb52f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGY3ZjAwMzg1OTJhMjhlODQ2ZjAyZDA4NGYwMTE5ZmMzNGViNTJm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-29T00:11:56Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-06-22T23:11:32Z"
      },
      "message": "Node support for Tor hidden services\n\nThis commit adds support for .onion addresses (mapped into the IPv6\nby using OnionCat's range and encoding), and the ability to connect\nto them via a SOCKS5 proxy.",
      "tree": {
        "sha": "7439cec074260c4eee55026c5a9ab37e0bcf6f58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7439cec074260c4eee55026c5a9ab37e0bcf6f58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70f7f0038592a28e846f02d084f0119fc34eb52f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70f7f0038592a28e846f02d084f0119fc34eb52f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70f7f0038592a28e846f02d084f0119fc34eb52f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70f7f0038592a28e846f02d084f0119fc34eb52f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0be8da3924031ea115c93551dfa463f84d3a120",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0be8da3924031ea115c93551dfa463f84d3a120",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0be8da3924031ea115c93551dfa463f84d3a120"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 94,
      "deletions": 21
    },
    "files": [
      {
        "sha": "21fca4737a0ad3697c37c077625e333ce6e1ae88",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 76,
        "deletions": 15,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70f7f0038592a28e846f02d084f0119fc34eb52f/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70f7f0038592a28e846f02d084f0119fc34eb52f/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=70f7f0038592a28e846f02d084f0119fc34eb52f",
        "patch": "@@ -57,6 +57,15 @@ void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {\n bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n {\n     vIP.clear();\n+\n+    {\n+        CNetAddr addr;\n+        if (addr.SetSpecial(std::string(pszName))) {\n+            vIP.push_back(addr);\n+            return true;\n+        }\n+    }\n+\n     struct addrinfo aiHint;\n     memset(&aiHint, 0, sizeof(struct addrinfo));\n \n@@ -530,6 +539,32 @@ void CNetAddr::SetIP(const CNetAddr& ipIn)\n     memcpy(ip, ipIn.ip, sizeof(ip));\n }\n \n+static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};\n+static const unsigned char pchGarliCat[] = {0xFD,0x60,0xDB,0x4D,0xDD,0xB5};\n+\n+bool CNetAddr::SetSpecial(const std::string &strName)\n+{\n+    if (strName.size()>6 && strName.substr(strName.size() - 6, 6) == \".onion\") {\n+        std::vector<unsigned char> vchAddr = DecodeBase32(strName.substr(0, strName.size() - 6).c_str());\n+        if (vchAddr.size() != 16-sizeof(pchOnionCat))\n+            return false;\n+        memcpy(ip, pchOnionCat, sizeof(pchOnionCat));\n+        for (unsigned int i=0; i<16-sizeof(pchOnionCat); i++)\n+            ip[i + sizeof(pchOnionCat)] = vchAddr[i];\n+        return true;\n+    }\n+    if (strName.size()>11 && strName.substr(strName.size() - 11, 11) == \".oc.b32.i2p\") {\n+        std::vector<unsigned char> vchAddr = DecodeBase32(strName.substr(0, strName.size() - 11).c_str());\n+        if (vchAddr.size() != 16-sizeof(pchGarliCat))\n+            return false;\n+        memcpy(ip, pchOnionCat, sizeof(pchGarliCat));\n+        for (unsigned int i=0; i<16-sizeof(pchGarliCat); i++)\n+            ip[i + sizeof(pchGarliCat)] = vchAddr[i];\n+        return true;\n+    }\n+    return false;\n+}\n+\n CNetAddr::CNetAddr()\n {\n     Init();\n@@ -576,7 +611,7 @@ bool CNetAddr::IsIPv4() const\n \n bool CNetAddr::IsIPv6() const\n {\n-    return (!IsIPv4());\n+    return (!IsIPv4() && !IsTor() && !IsI2P());\n }\n \n bool CNetAddr::IsRFC1918() const\n@@ -635,15 +670,13 @@ bool CNetAddr::IsRFC4843() const\n     return (GetByte(15) == 0x20 && GetByte(14) == 0x01 && GetByte(13) == 0x00 && (GetByte(12) & 0xF0) == 0x10);\n }\n \n-bool CNetAddr::IsOnionCat() const\n+bool CNetAddr::IsTor() const\n {\n-    static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};\n     return (memcmp(ip, pchOnionCat, sizeof(pchOnionCat)) == 0);\n }\n \n-bool CNetAddr::IsGarliCat() const\n+bool CNetAddr::IsI2P() const\n {\n-    static const unsigned char pchGarliCat[] = {0xFD,0x60,0xDB,0x4D,0xDD,0xB5};\n     return (memcmp(ip, pchGarliCat, sizeof(pchGarliCat)) == 0);\n }\n \n@@ -705,7 +738,7 @@ bool CNetAddr::IsValid() const\n \n bool CNetAddr::IsRoutable() const\n {\n-    return IsValid() && !(IsRFC1918() || IsRFC3927() || IsRFC4862() || (IsRFC4193() && !IsOnionCat() && !IsGarliCat()) || IsRFC4843() || IsLocal());\n+    return IsValid() && !(IsRFC1918() || IsRFC3927() || IsRFC4862() || (IsRFC4193() && !IsTor() && !IsI2P()) || IsRFC4843() || IsLocal());\n }\n \n enum Network CNetAddr::GetNetwork() const\n@@ -716,17 +749,21 @@ enum Network CNetAddr::GetNetwork() const\n     if (IsIPv4())\n         return NET_IPV4;\n \n-    if (IsOnionCat())\n+    if (IsTor())\n         return NET_TOR;\n \n-    if (IsGarliCat())\n+    if (IsI2P())\n         return NET_I2P;\n \n     return NET_IPV6;\n }\n \n std::string CNetAddr::ToStringIP() const\n {\n+    if (IsTor())\n+        return EncodeBase32(&ip[6], 10) + \".onion\";\n+    if (IsI2P())\n+        return EncodeBase32(&ip[6], 10) + \".oc.b32.i2p\";\n     CService serv(*this, 0);\n #ifdef USE_IPV6\n     struct sockaddr_storage sockaddr;\n@@ -739,7 +776,7 @@ std::string CNetAddr::ToStringIP() const\n         if (!getnameinfo((const struct sockaddr*)&sockaddr, socklen, name, sizeof(name), NULL, 0, NI_NUMERICHOST))\n             return std::string(name);\n     }\n-    if (IsIPv4()) \n+    if (IsIPv4())\n         return strprintf(\"%u.%u.%u.%u\", GetByte(3), GetByte(2), GetByte(1), GetByte(0));\n     else\n         return strprintf(\"%x:%x:%x:%x:%x:%x:%x:%x\",\n@@ -828,6 +865,18 @@ std::vector<unsigned char> CNetAddr::GetGroup() const\n         vchRet.push_back(GetByte(2) ^ 0xFF);\n         return vchRet;\n     }\n+    else if (IsTor())\n+    {\n+        nClass = NET_TOR;\n+        nStartByte = 6;\n+        nBits = 4;\n+    }\n+    else if (IsI2P())\n+    {\n+        nClass = NET_I2P;\n+        nStartByte = 6;\n+        nBits = 4;\n+    }\n     // for he.net, use /36 groups\n     else if (GetByte(15) == 0x20 && GetByte(14) == 0x11 && GetByte(13) == 0x04 && GetByte(12) == 0x70)\n         nBits = 36;\n@@ -861,18 +910,30 @@ void CNetAddr::print() const\n     printf(\"CNetAddr(%s)\\n\", ToString().c_str());\n }\n \n-// for IPv6 partners:        for unknown/Teredo partners:      for IPv4 partners:\n-// 0 - unroutable            // 0 - unroutable                 // 0 - unroutable\n-// 1 - teredo                // 1 - teredo                     // 1 - ipv4\n-// 2 - tunneled ipv6         // 2 - tunneled ipv6\n-// 3 - ipv4                  // 3 - ipv6\n+// for IPv6 partners:        for unknown/Teredo partners:      for IPv4 partners:     for Tor partners:     for I2P partners:\n+// 0 - unroutable            // 0 - unroutable                 // 0 - unroutable      // 0 - unroutable     // 0 - unroutable\n+// 1 - teredo                // 1 - teredo                     // 1 - ipv4            // 1 - the rest       // 1 - the rest\n+// 2 - tunneled ipv6         // 2 - tunneled ipv6                                     // 2 - ip4            // 2 - I2P\n+// 3 - ipv4                  // 3 - ipv6                                              // 3 - tor\n // 4 - ipv6                  // 4 - ipv4\n int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const\n {\n     if (!IsValid() || !IsRoutable())\n         return 0;\n     if (paddrPartner && paddrPartner->IsIPv4())\n         return IsIPv4() ? 1 : 0;\n+    if (paddrPartner && paddrPartner->IsTor()) {\n+        if (IsIPv4())\n+            return 2;\n+        if (IsTor())\n+            return 3;\n+        return 1;\n+    }\n+    if (paddrPartner && paddrPartner->IsI2P()) {\n+        if (IsI2P())\n+            return 2;\n+        return 1;\n+    }\n     if (IsRFC4380())\n         return 1;\n     if (IsRFC3964() || IsRFC6052())\n@@ -1036,7 +1097,7 @@ std::string CService::ToStringPort() const\n \n std::string CService::ToStringIPPort() const\n {\n-    if (IsIPv4()) {\n+    if (IsIPv4() || IsTor() || IsI2P()) {\n         return ToStringIP() + \":\" + ToStringPort();\n     } else {\n         return \"[\" + ToStringIP() + \"]:\" + ToStringPort();"
      },
      {
        "sha": "36f29b0b3256b040cf091968bde5dbe65a62f077",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70f7f0038592a28e846f02d084f0119fc34eb52f/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70f7f0038592a28e846f02d084f0119fc34eb52f/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=70f7f0038592a28e846f02d084f0119fc34eb52f",
        "patch": "@@ -44,8 +44,9 @@ class CNetAddr\n         explicit CNetAddr(const std::string &strIp, bool fAllowLookup = false);\n         void Init();\n         void SetIP(const CNetAddr& ip);\n+        bool SetSpecial(const std::string &strName); // for Tor and I2P addresses\n         bool IsIPv4() const;    // IPv4 mapped address (::FFFF:0:0/96, 0.0.0.0/0)\n-        bool IsIPv6() const;    // IPv6 address (not IPv4)\n+        bool IsIPv6() const;    // IPv6 address (not mapped IPv4, not Tor/I2P)\n         bool IsRFC1918() const; // IPv4 private networks (10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12)\n         bool IsRFC3849() const; // IPv6 documentation address (2001:0DB8::/32)\n         bool IsRFC3927() const; // IPv4 autoconfig (169.254.0.0/16)\n@@ -56,8 +57,8 @@ class CNetAddr\n         bool IsRFC4862() const; // IPv6 autoconfig (FE80::/64)\n         bool IsRFC6052() const; // IPv6 well-known prefix (64:FF9B::/96)\n         bool IsRFC6145() const; // IPv6 IPv4-translated address (::FFFF:0:0:0/96)\n-        bool IsOnionCat() const;\n-        bool IsGarliCat() const;\n+        bool IsTor() const;\n+        bool IsI2P() const;\n         bool IsLocal() const;\n         bool IsRoutable() const;\n         bool IsValid() const;"
      },
      {
        "sha": "fdf3285913817bb9712a50b80d8c2f1769eb4e07",
        "filename": "src/test/base32_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70f7f0038592a28e846f02d084f0119fc34eb52f/src/test/base32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70f7f0038592a28e846f02d084f0119fc34eb52f/src/test/base32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base32_tests.cpp?ref=70f7f0038592a28e846f02d084f0119fc34eb52f",
        "patch": "@@ -7,7 +7,7 @@ BOOST_AUTO_TEST_SUITE(base32_tests)\n BOOST_AUTO_TEST_CASE(base32_testvectors)\n {\n     static const std::string vstrIn[]  = {\"\",\"f\",\"fo\",\"foo\",\"foob\",\"fooba\",\"foobar\"};\n-    static const std::string vstrOut[] = {\"\",\"MY======\",\"MZXQ====\",\"MZXW6===\",\"MZXW6YQ=\",\"MZXW6YTB\",\"MZXW6YTBOI======\"};\n+    static const std::string vstrOut[] = {\"\",\"my======\",\"mzxq====\",\"mzxw6===\",\"mzxw6yq=\",\"mzxw6ytb\",\"mzxw6ytboi======\"};\n     for (unsigned int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n     {\n         std::string strEnc = EncodeBase32(vstrIn[i]);"
      },
      {
        "sha": "e5a7562d97510188867906b9b414b65c01430b96",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70f7f0038592a28e846f02d084f0119fc34eb52f/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70f7f0038592a28e846f02d084f0119fc34eb52f/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=70f7f0038592a28e846f02d084f0119fc34eb52f",
        "patch": "@@ -34,7 +34,7 @@ BOOST_AUTO_TEST_CASE(netbase_properties)\n     BOOST_CHECK(CNetAddr(\"2001:10::\").IsRFC4843());\n     BOOST_CHECK(CNetAddr(\"FE80::\").IsRFC4862());\n     BOOST_CHECK(CNetAddr(\"64:FF9B::\").IsRFC6052());\n-    BOOST_CHECK(CNetAddr(\"FD87:D87E:EB43:edb1:8e4:3588:e546:35ca\").IsOnionCat());\n+    BOOST_CHECK(CNetAddr(\"FD87:D87E:EB43:edb1:8e4:3588:e546:35ca\").IsTor());\n     BOOST_CHECK(CNetAddr(\"127.0.0.1\").IsLocal());\n     BOOST_CHECK(CNetAddr(\"::1\").IsLocal());\n     BOOST_CHECK(CNetAddr(\"8.8.8.8\").IsRoutable());\n@@ -88,4 +88,15 @@ BOOST_AUTO_TEST_CASE(netbase_lookupnumeric)\n     BOOST_CHECK(TestParse(\":::\", \"\"));\n }\n \n+BOOST_AUTO_TEST_CASE(onioncat_test)\n+{\n+    // values from http://www.cypherpunk.at/onioncat/wiki/OnionCat\n+    CNetAddr addr1(\"5wyqrzbvrdsumnok.onion\");\n+    CNetAddr addr2(\"FD87:D87E:EB43:edb1:8e4:3588:e546:35ca\");\n+    BOOST_CHECK(addr1 == addr2);\n+    BOOST_CHECK(addr1.IsTor());\n+    BOOST_CHECK(addr1.ToStringIP() == \"5wyqrzbvrdsumnok.onion\");\n+    BOOST_CHECK(addr1.IsRoutable());\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "5fff27160f6f5c86ef4a2bb0ae25d672c446ea33",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70f7f0038592a28e846f02d084f0119fc34eb52f/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70f7f0038592a28e846f02d084f0119fc34eb52f/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=70f7f0038592a28e846f02d084f0119fc34eb52f",
        "patch": "@@ -704,7 +704,7 @@ string DecodeBase64(const string& str)\n \n string EncodeBase32(const unsigned char* pch, size_t len)\n {\n-    static const char *pbase32 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\n+    static const char *pbase32 = \"abcdefghijklmnopqrstuvwxyz234567\";\n \n     string strRet=\"\";\n     strRet.reserve((len+4)/5*8);"
      }
    ]
  },
  {
    "sha": "d077dd2a6ed4519d201a2a17ab151303ac3866f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDc3ZGQyYTZlZDQ1MTlkMjAxYTJhMTdhYjE1MTMwM2FjMzg2NmY1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-01T15:32:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-06-22T23:11:38Z"
      },
      "message": "Rewrite CNetAddr::GetReachabilityFrom()\n\nAdd support for Tor/I2P networks, and make code more readable.",
      "tree": {
        "sha": "4b2d065942e91d4876f33767213d6812a8d583cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b2d065942e91d4876f33767213d6812a8d583cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d077dd2a6ed4519d201a2a17ab151303ac3866f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d077dd2a6ed4519d201a2a17ab151303ac3866f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d077dd2a6ed4519d201a2a17ab151303ac3866f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d077dd2a6ed4519d201a2a17ab151303ac3866f5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70f7f0038592a28e846f02d084f0119fc34eb52f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70f7f0038592a28e846f02d084f0119fc34eb52f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70f7f0038592a28e846f02d084f0119fc34eb52f"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 74,
      "deletions": 31
    },
    "files": [
      {
        "sha": "aa767cd3eb2555690bba3d33bdc9967e2ab5de63",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 73,
        "deletions": 30,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d077dd2a6ed4519d201a2a17ab151303ac3866f5/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d077dd2a6ed4519d201a2a17ab151303ac3866f5/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=d077dd2a6ed4519d201a2a17ab151303ac3866f5",
        "patch": "@@ -910,39 +910,82 @@ void CNetAddr::print() const\n     printf(\"CNetAddr(%s)\\n\", ToString().c_str());\n }\n \n-// for IPv6 partners:        for unknown/Teredo partners:      for IPv4 partners:     for Tor partners:     for I2P partners:\n-// 0 - unroutable            // 0 - unroutable                 // 0 - unroutable      // 0 - unroutable     // 0 - unroutable\n-// 1 - teredo                // 1 - teredo                     // 1 - ipv4            // 1 - the rest       // 1 - the rest\n-// 2 - tunneled ipv6         // 2 - tunneled ipv6                                     // 2 - ip4            // 2 - I2P\n-// 3 - ipv4                  // 3 - ipv6                                              // 3 - tor\n-// 4 - ipv6                  // 4 - ipv4\n+// private extensions to enum Network, only returned by GetExtNetwork,\n+// and only used in GetReachabilityFrom\n+static const int NET_UNKNOWN = NET_MAX + 0;\n+static const int NET_TEREDO  = NET_MAX + 1;\n+int static GetExtNetwork(const CNetAddr *addr)\n+{\n+    if (addr == NULL)\n+        return NET_UNKNOWN;\n+    if (addr->IsRFC4380())\n+        return NET_TEREDO;\n+    return addr->GetNetwork();\n+}\n+\n+/** Calculates a metric for how reachable (*this) is from a given partner */\n int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const\n {\n-    if (!IsValid() || !IsRoutable())\n-        return 0;\n-    if (paddrPartner && paddrPartner->IsIPv4())\n-        return IsIPv4() ? 1 : 0;\n-    if (paddrPartner && paddrPartner->IsTor()) {\n-        if (IsIPv4())\n-            return 2;\n-        if (IsTor())\n-            return 3;\n-        return 1;\n-    }\n-    if (paddrPartner && paddrPartner->IsI2P()) {\n-        if (IsI2P())\n-            return 2;\n-        return 1;\n+    enum Reachability {\n+        REACH_UNREACHABLE,\n+        REACH_DEFAULT,\n+        REACH_TEREDO,\n+        REACH_IPV6_WEAK,\n+        REACH_IPV4,\n+        REACH_IPV6_STRONG,\n+        REACH_PRIVATE\n+    };\n+\n+    if (!IsRoutable())\n+        return REACH_UNREACHABLE;\n+\n+    int ourNet = GetExtNetwork(this);\n+    int theirNet = GetExtNetwork(paddrPartner);\n+    bool fTunnel = IsRFC3964() || IsRFC6052() || IsRFC6145();\n+\n+    switch(theirNet) {\n+    case NET_IPV4:\n+        switch(ourNet) {\n+        default:       return REACH_DEFAULT;\n+        case NET_IPV4: return REACH_IPV4;\n+        }\n+    case NET_IPV6:\n+        switch(ourNet) {\n+        default:         return REACH_DEFAULT;\n+        case NET_TEREDO: return REACH_TEREDO;\n+        case NET_IPV4:   return REACH_IPV4;\n+        case NET_IPV6:   return fTunnel ? REACH_IPV6_WEAK : REACH_IPV6_STRONG; // only prefer giving our IPv6 address if it's not tunneled\n+        }\n+    case NET_TOR:\n+        switch(ourNet) {\n+        default:         return REACH_DEFAULT;\n+        case NET_IPV4:   return REACH_IPV4; // Tor users can connect to IPv4 as well\n+        case NET_TOR:    return REACH_PRIVATE;\n+        }\n+    case NET_I2P:\n+        switch(ourNet) {\n+        default:         return REACH_DEFAULT;\n+        case NET_I2P:    return REACH_PRIVATE;\n+        }\n+    case NET_TEREDO:\n+        switch(ourNet) {\n+        default:          return REACH_DEFAULT;\n+        case NET_TEREDO:  return REACH_TEREDO;\n+        case NET_IPV6:    return REACH_IPV6_WEAK;\n+        case NET_IPV4:    return REACH_IPV4;\n+        }\n+    case NET_UNKNOWN:\n+    case NET_UNROUTABLE:\n+    default:\n+        switch(ourNet) {\n+        default:          return REACH_DEFAULT;\n+        case NET_TEREDO:  return REACH_TEREDO;\n+        case NET_IPV6:    return REACH_IPV6_WEAK;\n+        case NET_IPV4:    return REACH_IPV4;\n+        case NET_I2P:     return REACH_PRIVATE; // assume connections from unroutable addresses are\n+        case NET_TOR:     return REACH_PRIVATE; // either from Tor/I2P, or don't care about our address\n+        }\n     }\n-    if (IsRFC4380())\n-        return 1;\n-    if (IsRFC3964() || IsRFC6052())\n-        return 2;\n-    bool fRealIPv6 = paddrPartner && !paddrPartner->IsRFC4380() && paddrPartner->IsValid() && paddrPartner->IsRoutable();\n-    if (fRealIPv6)\n-        return IsIPv4() ? 3 : 4;\n-    else\n-        return IsIPv4() ? 4 : 3;\n }\n \n void CService::Init()"
      },
      {
        "sha": "f097d7f5aeafa8a067258c4dcc6febf769722378",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d077dd2a6ed4519d201a2a17ab151303ac3866f5/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d077dd2a6ed4519d201a2a17ab151303ac3866f5/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=d077dd2a6ed4519d201a2a17ab151303ac3866f5",
        "patch": "@@ -25,7 +25,7 @@ enum Network\n     NET_TOR,\n     NET_I2P,\n \n-    NET_MAX\n+    NET_MAX,\n };\n \n extern int nConnectTimeout;"
      }
    ]
  },
  {
    "sha": "54ce3bad64ea4dff64f16c12b287383ad96a875a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGNlM2JhZDY0ZWE0ZGZmNjRmMTZjMTJiMjg3MzgzYWQ5NmE4NzVh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-01T19:04:07Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-06-22T23:11:38Z"
      },
      "message": "Add -tor and related configuration",
      "tree": {
        "sha": "09dba5fc6f636d8c578e033d6b013f7018bf1119",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09dba5fc6f636d8c578e033d6b013f7018bf1119"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54ce3bad64ea4dff64f16c12b287383ad96a875a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54ce3bad64ea4dff64f16c12b287383ad96a875a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54ce3bad64ea4dff64f16c12b287383ad96a875a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54ce3bad64ea4dff64f16c12b287383ad96a875a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d077dd2a6ed4519d201a2a17ab151303ac3866f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d077dd2a6ed4519d201a2a17ab151303ac3866f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d077dd2a6ed4519d201a2a17ab151303ac3866f5"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 30,
      "deletions": 6
    },
    "files": [
      {
        "sha": "62fff5f9e63f6691a4f4047e8518ee330380f57d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 3,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54ce3bad64ea4dff64f16c12b287383ad96a875a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54ce3bad64ea4dff64f16c12b287383ad96a875a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=54ce3bad64ea4dff64f16c12b287383ad96a875a",
        "patch": "@@ -222,19 +222,20 @@ std::string HelpMessage()\n         \"  -timeout=<n>           \" + _(\"Specify connection timeout (in milliseconds)\") + \"\\n\" +\n         \"  -proxy=<ip:port>       \" + _(\"Connect through socks proxy\") + \"\\n\" +\n         \"  -socks=<n>             \" + _(\"Select the version of socks proxy to use (4-5, default: 5)\") + \"\\n\" +\n+        \"  -tor=<ip:port>         \" + _(\"Use proxy to reach tor hidden services (default: same as -proxy)\") + \"\\n\"\n         \"  -dns                   \" + _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \"\\n\" +\n         \"  -port=<port>           \" + _(\"Listen for connections on <port> (default: 8333 or testnet: 18333)\") + \"\\n\" +\n         \"  -maxconnections=<n>    \" + _(\"Maintain at most <n> connections to peers (default: 125)\") + \"\\n\" +\n         \"  -addnode=<ip>          \" + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\" +\n         \"  -connect=<ip>          \" + _(\"Connect only to the specified node(s)\") + \"\\n\" +\n         \"  -seednode=<ip>         \" + _(\"Connect to a node to retrieve peer addresses, and disconnect\") + \"\\n\" +\n         \"  -externalip=<ip>       \" + _(\"Specify your own public address\") + \"\\n\" +\n-        \"  -onlynet=<net>         \" + _(\"Only connect to nodes in network <net> (IPv4 or IPv6)\") + \"\\n\" +\n+        \"  -onlynet=<net>         \" + _(\"Only connect to nodes in network <net> (IPv4, IPv6 or Tor)\") + \"\\n\" +\n         \"  -discover              \" + _(\"Discover own IP address (default: 1 when listening and no -externalip)\") + \"\\n\" +\n         \"  -irc                   \" + _(\"Find peers using internet relay chat (default: 0)\") + \"\\n\" +\n         \"  -listen                \" + _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\") + \"\\n\" +\n         \"  -bind=<addr>           \" + _(\"Bind to given address. Use [host]:port notation for IPv6\") + \"\\n\" +\n-        \"  -dnsseed               \" + _(\"Find peers using DNS lookup (default: 1)\") + \"\\n\" +\n+        \"  -dnsseed               \" + _(\"Find peers using DNS lookup (default: 1 unless -connect)\") + \"\\n\" +\n         \"  -banscore=<n>          \" + _(\"Threshold for disconnecting misbehaving peers (default: 100)\") + \"\\n\" +\n         \"  -bantime=<n>           \" + _(\"Number of seconds to keep misbehaving peers from reconnecting (default: 86400)\") + \"\\n\" +\n         \"  -maxreceivebuffer=<n>  \" + _(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: 10000)\") + \"\\n\" +\n@@ -469,8 +470,10 @@ bool AppInit2()\n         }\n     }\n \n+    CService addrProxy;\n+    bool fProxy = false;\n     if (mapArgs.count(\"-proxy\")) {\n-        CService addrProxy = CService(mapArgs[\"-proxy\"], 9050);\n+        addrProxy = CService(mapArgs[\"-proxy\"], 9050);\n         if (!addrProxy.IsValid())\n             return InitError(strprintf(_(\"Invalid -proxy address: '%s'\"), mapArgs[\"-proxy\"].c_str()));\n \n@@ -483,6 +486,20 @@ bool AppInit2()\n #endif\n             SetNameProxy(addrProxy, nSocksVersion);\n         }\n+        fProxy = true;\n+    }\n+\n+    // -tor can override normal proxy, -notor disables tor entirely\n+    if (!(mapArgs.count(\"-tor\") && mapArgs[\"-tor\"] == \"0\") && (fProxy || mapArgs.count(\"-tor\"))) {\n+        CService addrOnion;\n+        if (!mapArgs.count(\"-tor\"))\n+            addrOnion = addrProxy;\n+        else\n+            addrOnion = CService(mapArgs[\"-tor\"], 9050);\n+        if (!addrOnion.IsValid())\n+            return InitError(strprintf(_(\"Invalid -tor address: '%s'\"), mapArgs[\"-tor\"].c_str()));\n+        SetProxy(NET_TOR, addrOnion, 5);\n+        SetReachable(NET_TOR);\n     }\n \n     // see Step 2: parameter interactions for more information about these"
      },
      {
        "sha": "441d28bb919e9477058eb5a980d2d11b4c16a334",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54ce3bad64ea4dff64f16c12b287383ad96a875a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54ce3bad64ea4dff64f16c12b287383ad96a875a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=54ce3bad64ea4dff64f16c12b287383ad96a875a",
        "patch": "@@ -206,6 +206,14 @@ void static AdvertizeLocal()\n     }\n }\n \n+void SetReachable(enum Network net, bool fFlag)\n+{\n+    LOCK(cs_mapLocalHost);\n+    vfReachable[net] = fFlag;\n+    if (net == NET_IPV6 && fFlag)\n+        vfReachable[NET_IPV4] = true;\n+}\n+\n // learn a new local address\n bool AddLocal(const CService& addr, int nScore)\n {\n@@ -228,9 +236,7 @@ bool AddLocal(const CService& addr, int nScore)\n             info.nScore = nScore;\n             info.nPort = addr.GetPort() + (fAlready ? 1 : 0);\n         }\n-        enum Network net = addr.GetNetwork();\n-        vfReachable[net] = true;\n-        if (net == NET_IPV6) vfReachable[NET_IPV4] = true;\n+        SetReachable(addr.GetNetwork());\n     }\n \n     AdvertizeLocal();"
      },
      {
        "sha": "fb998a29e223ed5311b2be35cc3ebbd7fa60ab3b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54ce3bad64ea4dff64f16c12b287383ad96a875a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54ce3bad64ea4dff64f16c12b287383ad96a875a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=54ce3bad64ea4dff64f16c12b287383ad96a875a",
        "patch": "@@ -64,6 +64,7 @@ bool SeenLocal(const CService& addr);\n bool IsLocal(const CService& addr);\n bool GetLocal(CService &addr, const CNetAddr *paddrPeer = NULL);\n bool IsReachable(const CNetAddr &addr);\n+void SetReachable(enum Network net, bool fFlag = true);\n CAddress GetLocalAddress(const CNetAddr *paddrPeer = NULL);\n \n "
      }
    ]
  },
  {
    "sha": "863e995b79ec388bf292d80f181912d01e20e2e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjNlOTk1Yjc5ZWMzODhiZjI5MmQ4MGYxODE5MTJkMDFlMjBlMmU1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-01T20:03:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-06-22T23:11:38Z"
      },
      "message": "Debug version messages",
      "tree": {
        "sha": "c8b732a9d5de07994896058269858060c8c85392",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8b732a9d5de07994896058269858060c8c85392"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/863e995b79ec388bf292d80f181912d01e20e2e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/863e995b79ec388bf292d80f181912d01e20e2e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/863e995b79ec388bf292d80f181912d01e20e2e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/863e995b79ec388bf292d80f181912d01e20e2e5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54ce3bad64ea4dff64f16c12b287383ad96a875a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54ce3bad64ea4dff64f16c12b287383ad96a875a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54ce3bad64ea4dff64f16c12b287383ad96a875a"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9ca4889be5f1c04953d7751f2c93bc4f6d03b27c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/863e995b79ec388bf292d80f181912d01e20e2e5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/863e995b79ec388bf292d80f181912d01e20e2e5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=863e995b79ec388bf292d80f181912d01e20e2e5",
        "patch": "@@ -2419,7 +2419,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         pfrom->fSuccessfullyConnected = true;\n \n-        printf(\"version message: version %d, blocks=%d\\n\", pfrom->nVersion, pfrom->nStartingHeight);\n+        printf(\"receive version message: version %d, blocks=%d, us=%s, them=%s, peer=%s\\n\", pfrom->nVersion, pfrom->nStartingHeight, addrMe.ToString().c_str(), addrFrom.ToString().c_str(), pfrom->addr.ToString().c_str());\n \n         cPeerBlockCounts.input(pfrom->nStartingHeight);\n     }"
      },
      {
        "sha": "77fd334ee47fb40566b0f5d77c7b26d1d9912217",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/863e995b79ec388bf292d80f181912d01e20e2e5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/863e995b79ec388bf292d80f181912d01e20e2e5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=863e995b79ec388bf292d80f181912d01e20e2e5",
        "patch": "@@ -549,6 +549,7 @@ void CNode::PushVersion()\n     CAddress addrYou = (addr.IsRoutable() && !IsProxy(addr) ? addr : CAddress(CService(\"0.0.0.0\",0)));\n     CAddress addrMe = GetLocalAddress(&addr);\n     RAND_bytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n+    printf(\"send version message: version %d, blocks=%d, us=%s, them=%s, peer=%s\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString().c_str(), addrYou.ToString().c_str(), addr.ToString().c_str());\n     PushMessage(\"version\", PROTOCOL_VERSION, nLocalServices, nTime, addrYou, addrMe,\n                 nLocalHostNonce, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>()), nBestHeight);\n }"
      }
    ]
  },
  {
    "sha": "d789a3f1403fb6709a3ca26ef9ecc75b0b0a68a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzg5YTNmMTQwM2ZiNjcwOWEzY2EyNmVmOWVjYzc1YjBiMGE2OGE0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-01T19:53:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-06-22T23:11:38Z"
      },
      "message": "Some documentation about tor",
      "tree": {
        "sha": "d451c2d1756d6bb402a0fcde17d3439ea181972e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d451c2d1756d6bb402a0fcde17d3439ea181972e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d789a3f1403fb6709a3ca26ef9ecc75b0b0a68a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d789a3f1403fb6709a3ca26ef9ecc75b0b0a68a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d789a3f1403fb6709a3ca26ef9ecc75b0b0a68a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d789a3f1403fb6709a3ca26ef9ecc75b0b0a68a4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "863e995b79ec388bf292d80f181912d01e20e2e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/863e995b79ec388bf292d80f181912d01e20e2e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/863e995b79ec388bf292d80f181912d01e20e2e5"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 96,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f44b016f22e67ddc3eda187db646def715e3f9a4",
        "filename": "doc/Tor.txt",
        "status": "added",
        "additions": 96,
        "deletions": 0,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d789a3f1403fb6709a3ca26ef9ecc75b0b0a68a4/doc/Tor.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d789a3f1403fb6709a3ca26ef9ecc75b0b0a68a4/doc/Tor.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Tor.txt?ref=d789a3f1403fb6709a3ca26ef9ecc75b0b0a68a4",
        "patch": "@@ -0,0 +1,96 @@\n+TOR SUPPORT IN BITCOIN\n+======================\n+\n+It is possible to run Bitcoin as a Tor hidden service, and connect to such services.\n+\n+The following assumes you have a Tor proxy running on port 9050. Many distributions\n+default to having a SOCKS proxy listening on port 9050, but others may not.\n+In particular, the Tor Browser Bundle defaults to listening on a random port. See\n+https://www.torproject.org/docs/faq.html.en#TBBSocksPort for how to properly\n+configure Tor.\n+\n+\n+1. Run bitcoin behind a Tor proxy\n+---------------------------------\n+\n+The first step is running Bitcoin behind a Tor proxy. This will already make all\n+outgoing connections be anonimized, but more is possible.\n+\n+-socks=5        SOCKS5 supports connecting-to-hostname, which can be used instead\n+                of doing a (leaking) local DNS lookup. SOCKS5 is the default,\n+                but SOCKS4 does not support this. (SOCKS4a does, but isn't\n+                implemented).\n+\n+-proxy=ip:port  Set the proxy server. If SOCKS5 is selected (default), this proxy\n+                server will be used to try to reach .onion addresses as well.\n+\n+-tor=ip:port    Set the proxy server to use for tor hidden services. You do not\n+                need to set this if it's the same as -proxy. You can use -notor\n+                to explicitly disable access to hidden service.\n+\n+-dnsseed        DNS seeds are not resolved directly when a SOCKS5 proxy server is\n+                set. Rather, a short-lived proxy connection to the dns seed\n+                hostname is attempted, and peer addresses are requested.\n+\n+-listen         When using -proxy, listening is disabled by default. If you want\n+                to run a hidden service (see next section), you'll need to enable\n+                it explicitly.\n+\n+-connect=X      When behing a Tor proxy, you can specify .onion addresses instead\n+-addnode=X      of IP addresses or hostnames in these parameters. It requires\n+-seednode=X     SOCKS5. In Tor mode, such addresses can also be exchanged with\n+                other P2P nodes.\n+\n+In a typical situation, this suffices to run behind a Tor proxy:\n+\n+  ./bitcoin -proxy=127.0.0.1:9050\n+\n+\n+2. Run a bitcoin hidden server\n+------------------------------\n+\n+If you configure your Tor system accordingly, it is possible to make your node also\n+reachable from the Tor network. Add these lines to your /etc/tor/torrc (or equivalent\n+config file):\n+\n+  HiddenServiceDir /var/lib/tor/bitcoin-service/\n+  HiddenServicePort 8333 127.0.0.1:8333\n+\n+The directory can be different of course, but (both) 8333's should be equal to your\n+bitcoind's P2P listen port (8333 by default).\n+\n+-externalip=X   You can tell bitcoin about its publically reachable address using\n+                this option, and this can be a .onion address. Given the above\n+                configuration, you can find your onion address in\n+                /var/lib/tor/bitcoin-service/hostname. Onion addresses are given\n+                preference for your node to advertize itself with, for connections\n+                coming from unroutable addresses (such as 127.0.0.1, where the\n+                Tor proxy typically runs).\n+\n+-listen         You'll need to enable listening for incoming connections, as this\n+                is off by default behind a proxy.\n+\n+-discover       When -externalip is specified, no attempt is made to discover local\n+                IPv4 or IPv6 addresses. If you want to run a dual stack, reachable\n+                from both Tor and IPv4 (or IPv6), you'll need to either pass your\n+                other addresses using -externalip, or explicitly enable -discover.\n+                Note that both addresses of a dual-stack system may be easily\n+                linkable using traffic analysis.\n+\n+In a typical situation, where you're only reachable via Tor, this should suffice:\n+\n+  ./bitcoind -proxy=127.0.0.1:9050 -externalip=57qr3yd1nyntf5k.onion -listen\n+\n+(obviously replace the Onion address with your own). If you don't care too much\n+about hiding your node, and want to be reachable on IPv4 as well, additionally\n+specify:\n+\n+  ./bitcoind ... -discover\n+\n+and open port 8333 on your firewall (or use -upnp).\n+\n+If you only want to use Tor to reach onion addresses, but not use it as a proxy\n+for normal IPv4/IPv6 communication, use:\n+\n+  ./bitcoin -tor=127.0.0.1:9050 -externalip=57qr3yd1nyntf5k.onion -discover\n+"
      }
    ]
  }
]