[
  {
    "sha": "45cf55ccac94689e48dd0648ed2401918a778024",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWNmNTVjY2FjOTQ2ODllNDhkZDA2NDhlZDI0MDE5MThhNzc4MDI0",
    "commit": {
      "author": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2020-08-15T05:38:27Z"
      },
      "committer": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2020-08-18T20:06:09Z"
      },
      "message": "test: remove `CNodeNoVersionMisbehavior` from p2p_leak.py\n\nIt's also clearer to have `no_version_disconnect_node` send a message\nother than version or verack in order to reach the peer discouragement\nthreshold.",
      "tree": {
        "sha": "ebade3c0763b12324fb694c89d9c2b3f0eea9883",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ebade3c0763b12324fb694c89d9c2b3f0eea9883"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45cf55ccac94689e48dd0648ed2401918a778024",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45cf55ccac94689e48dd0648ed2401918a778024",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45cf55ccac94689e48dd0648ed2401918a778024",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45cf55ccac94689e48dd0648ed2401918a778024/comments",
    "author": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e31ea9fa0a59ced2293057acb14c71ec97db689",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e31ea9fa0a59ced2293057acb14c71ec97db689",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e31ea9fa0a59ced2293057acb14c71ec97db689"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 9,
      "deletions": 12
    },
    "files": [
      {
        "sha": "b3b61b560b19b92d6e80534eb2a1b44f7b26641c",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45cf55ccac94689e48dd0648ed2401918a778024/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45cf55ccac94689e48dd0648ed2401918a778024/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=45cf55ccac94689e48dd0648ed2401918a778024",
        "patch": "@@ -15,7 +15,6 @@\n from test_framework.messages import (\n     msg_getaddr,\n     msg_ping,\n-    msg_verack,\n     msg_version,\n )\n from test_framework.mininode import mininode_lock, P2PInterface\n@@ -42,6 +41,7 @@ def bad_message(self, message):\n     def on_open(self):\n         self.ever_connected = True\n \n+    # Does not respond to \"version\" with \"verack\"\n     def on_version(self, message): self.bad_message(message)\n     def on_verack(self, message): self.bad_message(message)\n     def on_inv(self, message): self.bad_message(message)\n@@ -64,12 +64,6 @@ def on_getblocktxn(self, message): self.bad_message(message)\n     def on_blocktxn(self, message): self.bad_message(message)\n \n \n-# Node that never sends a version. We'll use this to send a bunch of messages\n-# anyway, and eventually get disconnected.\n-class CNodeNoVersionMisbehavior(CLazyNode):\n-    pass\n-\n-\n # Node that never sends a version. This one just sits idle and hopes to receive\n # any message (it shouldn't!)\n class CNodeNoVersionIdle(CLazyNode):\n@@ -97,6 +91,7 @@ class P2PVersionStore(P2PInterface):\n     version_received = None\n \n     def on_version(self, msg):\n+        # Responds with an appropriate verack\n         super().on_version(msg)\n         self.version_received = msg\n \n@@ -106,15 +101,17 @@ def set_test_params(self):\n         self.num_nodes = 1\n \n     def run_test(self):\n+        # Peer that never sends a version. We will send a bunch of messages\n+        # from this node anyway and verify eventual disconnection.\n         no_version_disconnect_node = self.nodes[0].add_p2p_connection(\n-            CNodeNoVersionMisbehavior(), send_version=False, wait_for_verack=False)\n+            CLazyNode(), send_version=False, wait_for_verack=False)\n         no_version_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVersionIdle(), send_version=False, wait_for_verack=False)\n         no_verack_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVerackIdle(), wait_for_verack=False)\n \n-        # Send enough veracks without a message to reach the peer discouragement\n-        # threshold. This should get us disconnected.\n+        # Send enough ping messages (any non-version message will do) prior to sending\n+        # version to reach the peer discouragement threshold. This should get us disconnected.\n         for _ in range(DISCOURAGEMENT_THRESHOLD):\n-            no_version_disconnect_node.send_message(msg_verack())\n+            no_version_disconnect_node.send_message(msg_ping())\n \n         # Wait until we got the verack in response to the version. Though, don't wait for the other node to receive the\n         # verack, since we never sent one\n@@ -125,7 +122,7 @@ def run_test(self):\n         wait_until(lambda: no_verack_idlenode.version_received, timeout=10, lock=mininode_lock)\n \n         # Mine a block and make sure that it's not sent to the connected nodes\n-        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(nblocks=1)\n \n         #Give the node enough time to possibly leak out a message\n         time.sleep(5)"
      }
    ]
  },
  {
    "sha": "f6f082b9343522bc8005f23937ac6ecf56548c98",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmYwODJiOTM0MzUyMmJjODAwNWYyMzkzN2FjNmVjZjU2NTQ4Yzk4",
    "commit": {
      "author": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2020-08-15T05:42:30Z"
      },
      "committer": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2020-08-18T20:06:15Z"
      },
      "message": "test: remove `CNodeNoVersionIdle` from p2p_leak.py",
      "tree": {
        "sha": "119968e9bf6c7297bdc03be3e4c6f176775eef70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/119968e9bf6c7297bdc03be3e4c6f176775eef70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6f082b9343522bc8005f23937ac6ecf56548c98",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6f082b9343522bc8005f23937ac6ecf56548c98",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6f082b9343522bc8005f23937ac6ecf56548c98",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6f082b9343522bc8005f23937ac6ecf56548c98/comments",
    "author": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45cf55ccac94689e48dd0648ed2401918a778024",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45cf55ccac94689e48dd0648ed2401918a778024",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45cf55ccac94689e48dd0648ed2401918a778024"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 7,
      "deletions": 9
    },
    "files": [
      {
        "sha": "23152c9dcf83d20c27a7b9a528896eb2fd0a9e39",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6f082b9343522bc8005f23937ac6ecf56548c98/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6f082b9343522bc8005f23937ac6ecf56548c98/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=f6f082b9343522bc8005f23937ac6ecf56548c98",
        "patch": "@@ -64,13 +64,6 @@ def on_getblocktxn(self, message): self.bad_message(message)\n     def on_blocktxn(self, message): self.bad_message(message)\n \n \n-# Node that never sends a version. This one just sits idle and hopes to receive\n-# any message (it shouldn't!)\n-class CNodeNoVersionIdle(CLazyNode):\n-    def __init__(self):\n-        super().__init__()\n-\n-\n # Node that sends a version but not a verack.\n class CNodeNoVerackIdle(CLazyNode):\n     def __init__(self):\n@@ -105,15 +98,20 @@ def run_test(self):\n         # from this node anyway and verify eventual disconnection.\n         no_version_disconnect_node = self.nodes[0].add_p2p_connection(\n             CLazyNode(), send_version=False, wait_for_verack=False)\n-        no_version_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVersionIdle(), send_version=False, wait_for_verack=False)\n+\n+        # Another peer that never sends a version. Just sits idle and hopes to receive\n+        # any message (it shouldn't!)\n+        no_version_idlenode = self.nodes[0].add_p2p_connection(CLazyNode(), send_version=False, wait_for_verack=False)\n+\n+        # Peer that sends a version but not a verack.\n         no_verack_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVerackIdle(), wait_for_verack=False)\n \n         # Send enough ping messages (any non-version message will do) prior to sending\n         # version to reach the peer discouragement threshold. This should get us disconnected.\n         for _ in range(DISCOURAGEMENT_THRESHOLD):\n             no_version_disconnect_node.send_message(msg_ping())\n \n-        # Wait until we got the verack in response to the version. Though, don't wait for the other node to receive the\n+        # Wait until we got the verack in response to the version. Though, don't wait for self.nodes[0] to receive the\n         # verack, since we never sent one\n         no_verack_idlenode.wait_for_verack()\n "
      }
    ]
  },
  {
    "sha": "ed5cd12869e0691a785199d2d977ce5879095180",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDVjZDEyODY5ZTA2OTFhNzg1MTk5ZDJkOTc3Y2U1ODc5MDk1MTgw",
    "commit": {
      "author": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2020-08-17T00:08:44Z"
      },
      "committer": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2020-08-18T20:13:19Z"
      },
      "message": "test: Distinguish between nodes(bitcoind) and peers(mininodes) in p2p_leak.py\n\nAlso, remove \"C\" prefix from class names to match new style",
      "tree": {
        "sha": "0830e1c995828c5df35db23beb4680daa44dbea2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0830e1c995828c5df35db23beb4680daa44dbea2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed5cd12869e0691a785199d2d977ce5879095180",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed5cd12869e0691a785199d2d977ce5879095180",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed5cd12869e0691a785199d2d977ce5879095180",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed5cd12869e0691a785199d2d977ce5879095180/comments",
    "author": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6f082b9343522bc8005f23937ac6ecf56548c98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6f082b9343522bc8005f23937ac6ecf56548c98",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6f082b9343522bc8005f23937ac6ecf56548c98"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 25,
      "deletions": 26
    },
    "files": [
      {
        "sha": "79bf7b2e7cc8e6aab39ccc6f8b667b3cbfbd582f",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 25,
        "deletions": 26,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed5cd12869e0691a785199d2d977ce5879095180/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed5cd12869e0691a785199d2d977ce5879095180/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=ed5cd12869e0691a785199d2d977ce5879095180",
        "patch": "@@ -28,7 +28,7 @@\n DISCOURAGEMENT_THRESHOLD = 100\n \n \n-class CLazyNode(P2PInterface):\n+class LazyPeer(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.unexpected_msg = False\n@@ -64,8 +64,8 @@ def on_getblocktxn(self, message): self.bad_message(message)\n     def on_blocktxn(self, message): self.bad_message(message)\n \n \n-# Node that sends a version but not a verack.\n-class CNodeNoVerackIdle(CLazyNode):\n+# Peer that sends a version but not a verack.\n+class NoVerackIdlePeer(LazyPeer):\n     def __init__(self):\n         self.version_received = False\n         super().__init__()\n@@ -95,45 +95,44 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Peer that never sends a version. We will send a bunch of messages\n-        # from this node anyway and verify eventual disconnection.\n-        no_version_disconnect_node = self.nodes[0].add_p2p_connection(\n-            CLazyNode(), send_version=False, wait_for_verack=False)\n+        # from this peer anyway and verify eventual disconnection.\n+        no_version_disconnect_peer = self.nodes[0].add_p2p_connection(\n+            LazyPeer(), send_version=False, wait_for_verack=False)\n \n-        # Another peer that never sends a version. Just sits idle and hopes to receive\n-        # any message (it shouldn't!)\n-        no_version_idlenode = self.nodes[0].add_p2p_connection(CLazyNode(), send_version=False, wait_for_verack=False)\n+        # Another peer that never sends a version, nor any other messages. It shouldn't receive anything from the node.\n+        no_version_idle_peer = self.nodes[0].add_p2p_connection(LazyPeer(), send_version=False, wait_for_verack=False)\n \n         # Peer that sends a version but not a verack.\n-        no_verack_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVerackIdle(), wait_for_verack=False)\n+        no_verack_idle_peer = self.nodes[0].add_p2p_connection(NoVerackIdlePeer(), wait_for_verack=False)\n \n         # Send enough ping messages (any non-version message will do) prior to sending\n         # version to reach the peer discouragement threshold. This should get us disconnected.\n         for _ in range(DISCOURAGEMENT_THRESHOLD):\n-            no_version_disconnect_node.send_message(msg_ping())\n+            no_version_disconnect_peer.send_message(msg_ping())\n \n-        # Wait until we got the verack in response to the version. Though, don't wait for self.nodes[0] to receive the\n+        # Wait until we got the verack in response to the version. Though, don't wait for the node to receive the\n         # verack, since we never sent one\n-        no_verack_idlenode.wait_for_verack()\n+        no_verack_idle_peer.wait_for_verack()\n \n-        wait_until(lambda: no_version_disconnect_node.ever_connected, timeout=10, lock=mininode_lock)\n-        wait_until(lambda: no_version_idlenode.ever_connected, timeout=10, lock=mininode_lock)\n-        wait_until(lambda: no_verack_idlenode.version_received, timeout=10, lock=mininode_lock)\n+        wait_until(lambda: no_version_disconnect_peer.ever_connected, timeout=10, lock=mininode_lock)\n+        wait_until(lambda: no_version_idle_peer.ever_connected, timeout=10, lock=mininode_lock)\n+        wait_until(lambda: no_verack_idle_peer.version_received, timeout=10, lock=mininode_lock)\n \n-        # Mine a block and make sure that it's not sent to the connected nodes\n+        # Mine a block and make sure that it's not sent to the connected peers\n         self.nodes[0].generate(nblocks=1)\n \n         #Give the node enough time to possibly leak out a message\n         time.sleep(5)\n \n-        # Expect this node to be disconnected for misbehavior\n-        assert not no_version_disconnect_node.is_connected\n+        # Expect this peer to be disconnected for misbehavior\n+        assert not no_version_disconnect_peer.is_connected\n \n         self.nodes[0].disconnect_p2ps()\n \n         # Make sure no unexpected messages came in\n-        assert no_version_disconnect_node.unexpected_msg == False\n-        assert no_version_idlenode.unexpected_msg == False\n-        assert no_verack_idlenode.unexpected_msg == False\n+        assert no_version_disconnect_peer.unexpected_msg == False\n+        assert no_version_idle_peer.unexpected_msg == False\n+        assert no_verack_idle_peer.unexpected_msg == False\n \n         self.log.info('Check that the version message does not leak the local address of the node')\n         p2p_version_store = self.nodes[0].add_p2p_connection(P2PVersionStore())\n@@ -146,13 +145,13 @@ def run_test(self):\n         assert_equal(ver.nStartingHeight, 201)\n         assert_equal(ver.nRelay, 1)\n \n-        self.log.info('Check that old nodes are disconnected')\n-        p2p_old_node = self.nodes[0].add_p2p_connection(P2PInterface(), send_version=False, wait_for_verack=False)\n+        self.log.info('Check that old peers are disconnected')\n+        p2p_old_peer = self.nodes[0].add_p2p_connection(P2PInterface(), send_version=False, wait_for_verack=False)\n         old_version_msg = msg_version()\n         old_version_msg.nVersion = 31799\n         with self.nodes[0].assert_debug_log(['peer=4 using obsolete version 31799; disconnecting']):\n-            p2p_old_node.send_message(old_version_msg)\n-            p2p_old_node.wait_for_disconnect()\n+            p2p_old_peer.send_message(old_version_msg)\n+            p2p_old_peer.wait_for_disconnect()\n \n \n if __name__ == '__main__':"
      }
    ]
  }
]