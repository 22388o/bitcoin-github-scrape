[
  {
    "sha": "4b0eb790681673e169c8a421150ddac4b0a949a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjBlYjc5MDY4MTY3M2UxNjljOGE0MjExNTBkZGFjNGIwYTk0OWE5",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2013-12-24T12:57:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-04-03T12:20:38Z"
      },
      "message": "Move IsInitialBlockDownload from main to checkpoints\n\nRebased-By: Wladimir J. van der Laan <laanwj@gmail.com>",
      "tree": {
        "sha": "c9c34efe430efc9f903ad9cf5dd8c122328b37d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9c34efe430efc9f903ad9cf5dd8c122328b37d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b0eb790681673e169c8a421150ddac4b0a949a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b0eb790681673e169c8a421150ddac4b0a949a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b0eb790681673e169c8a421150ddac4b0a949a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b0eb790681673e169c8a421150ddac4b0a949a9/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fecda6853d9bbc3b6df13e48cb0283e7c8ab7d52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fecda6853d9bbc3b6df13e48cb0283e7c8ab7d52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fecda6853d9bbc3b6df13e48cb0283e7c8ab7d52"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 34,
      "deletions": 29
    },
    "files": [
      {
        "sha": "8fcc7440b4ac82fd605eadce00962f1ba863fc87",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b0eb790681673e169c8a421150ddac4b0a949a9/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b0eb790681673e169c8a421150ddac4b0a949a9/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=4b0eb790681673e169c8a421150ddac4b0a949a9",
        "patch": "@@ -161,4 +161,20 @@ namespace Checkpoints\n         }\n         return NULL;\n     }\n+\n+    bool IsInitialBlockDownload()\n+    {\n+        if (fImporting || fReindex || chainActive.Height() < GetTotalBlocksEstimate())\n+            return true;\n+        static int64_t nLastUpdate;\n+        static CBlockIndex* pindexLastBest;\n+        if (chainActive.Tip() != pindexLastBest)\n+        {\n+            pindexLastBest = chainActive.Tip();\n+            nLastUpdate = GetTime();\n+        }\n+        return (GetTime() - nLastUpdate < 10 &&\n+                chainActive.Tip()->GetBlockTime() < GetTime() - 24 * 60 * 60);\n+    }\n+\n }"
      },
      {
        "sha": "e0c5467ee54e20179b65d65e6154bfff16ea4532",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b0eb790681673e169c8a421150ddac4b0a949a9/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b0eb790681673e169c8a421150ddac4b0a949a9/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=4b0eb790681673e169c8a421150ddac4b0a949a9",
        "patch": "@@ -27,6 +27,10 @@ namespace Checkpoints\n     double GuessVerificationProgress(CBlockIndex *pindex, bool fSigchecks = true);\n \n     extern bool fEnabled;\n+\n+    /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n+    bool IsInitialBlockDownload();\n }\n \n+\n #endif"
      },
      {
        "sha": "6ee5fd488e155a1807e809578875e636c77d2bfb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 23,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b0eb790681673e169c8a421150ddac4b0a949a9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b0eb790681673e169c8a421150ddac4b0a949a9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4b0eb790681673e169c8a421150ddac4b0a949a9",
        "patch": "@@ -1094,7 +1094,7 @@ bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n \n     // Flush stdio buffers and commit to disk before returning\n     fflush(fileout);\n-    if (!IsInitialBlockDownload())\n+    if (!Checkpoints::IsInitialBlockDownload())\n         FileCommit(fileout);\n \n     return true;\n@@ -1302,21 +1302,6 @@ int GetNumBlocksOfPeers()\n     return std::max(cPeerBlockCounts.median(), Checkpoints::GetTotalBlocksEstimate());\n }\n \n-bool IsInitialBlockDownload()\n-{\n-    if (fImporting || fReindex || chainActive.Height() < Checkpoints::GetTotalBlocksEstimate())\n-        return true;\n-    static int64_t nLastUpdate;\n-    static CBlockIndex* pindexLastBest;\n-    if (chainActive.Tip() != pindexLastBest)\n-    {\n-        pindexLastBest = chainActive.Tip();\n-        nLastUpdate = GetTime();\n-    }\n-    return (GetTime() - nLastUpdate < 10 &&\n-            chainActive.Tip()->GetBlockTime() < GetTime() - 24 * 60 * 60);\n-}\n-\n bool fLargeWorkForkFound = false;\n bool fLargeWorkInvalidChainFound = false;\n CBlockIndex *pindexBestForkTip = NULL, *pindexBestForkBase = NULL;\n@@ -1325,7 +1310,7 @@ void CheckForkWarningConditions()\n {\n     // Before we get past initial download, we cannot reliably alert about forks\n     // (we assume we don't get stuck on a fork before the last checkpoint)\n-    if (IsInitialBlockDownload())\n+    if (Checkpoints::IsInitialBlockDownload())\n         return;\n \n     // If our best fork is no longer within 72 blocks (+/- 12 hours if no one mines it)\n@@ -1880,7 +1865,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n // Update the on-disk chain state.\n bool static WriteChainState(CValidationState &state) {\n     static int64_t nLastWrite = 0;\n-    if (!IsInitialBlockDownload() || pcoinsTip->GetCacheSize() > nCoinCacheSize || GetTimeMicros() > nLastWrite + 600*1000000) {\n+    if (!Checkpoints::IsInitialBlockDownload() || pcoinsTip->GetCacheSize() > nCoinCacheSize || GetTimeMicros() > nLastWrite + 600*1000000) {\n         // Typical CCoins structures on disk are around 100 bytes in size.\n         // Pushing a new one to the database can cause it to be written\n         // twice (once in the log, and once in the tables). This is already\n@@ -1902,7 +1887,7 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     chainActive.SetTip(pindexNew);\n \n     // Update best block in wallet (so we can detect restored wallets)\n-    bool fIsInitialDownload = IsInitialBlockDownload();\n+    bool fIsInitialDownload = Checkpoints::IsInitialBlockDownload();\n     if ((chainActive.Height() % 20160) == 0 || (!fIsInitialDownload && (chainActive.Height() % 144) == 0))\n         g_signals.SetBestChain(chainActive.GetLocator());\n \n@@ -2114,7 +2099,7 @@ bool ActivateBestChain(CValidationState &state) {\n \n     if (chainActive.Tip() != pindexOldTip) {\n         std::string strCmd = GetArg(\"-blocknotify\", \"\");\n-        if (!IsInitialBlockDownload() && !strCmd.empty())\n+        if (!Checkpoints::IsInitialBlockDownload() && !strCmd.empty())\n         {\n             boost::replace_all(strCmd, \"%s\", chainActive.Tip()->GetBlockHash().GetHex());\n             boost::thread t(runCommand, strCmd); // thread runs free\n@@ -3432,7 +3417,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (!pfrom->fInbound)\n         {\n             // Advertise our address\n-            if (!fNoListen && !IsInitialBlockDownload())\n+            if (!fNoListen && !Checkpoints::IsInitialBlockDownload())\n             {\n                 CAddress addr = GetLocalAddress(&pfrom->addr);\n                 if (addr.IsRoutable())\n@@ -4188,7 +4173,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n \n         // Address refresh broadcast\n         static int64_t nLastRebroadcast;\n-        if (!IsInitialBlockDownload() && (GetTime() - nLastRebroadcast > 24 * 60 * 60))\n+        if (!Checkpoints::IsInitialBlockDownload() && (GetTime() - nLastRebroadcast > 24 * 60 * 60))\n         {\n             {\n                 LOCK(cs_vNodes);\n@@ -4264,7 +4249,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         // Resend wallet transactions that haven't gotten in a block yet\n         // Except during reindex, importing and IBD, when old wallet\n         // transactions become unconfirmed and spams other nodes.\n-        if (!fReindex && !fImporting && !IsInitialBlockDownload())\n+        if (!fReindex && !fImporting && !Checkpoints::IsInitialBlockDownload())\n         {\n             g_signals.Broadcast();\n         }"
      },
      {
        "sha": "80c8477fb7c056307a9e782895a3270b170e6de1",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b0eb790681673e169c8a421150ddac4b0a949a9/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b0eb790681673e169c8a421150ddac4b0a949a9/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=4b0eb790681673e169c8a421150ddac4b0a949a9",
        "patch": "@@ -12,6 +12,7 @@\n \n #include \"bignum.h\"\n #include \"chainparams.h\"\n+#include \"checkpoints.h\"\n #include \"coins.h\"\n #include \"core.h\"\n #include \"net.h\"\n@@ -162,8 +163,6 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n unsigned int ComputeMinWork(unsigned int nBase, int64_t nTime);\n /** Get the number of active peers */\n int GetNumBlocksOfPeers();\n-/** Check whether we are doing an initial block download (synchronizing from disk or network) */\n-bool IsInitialBlockDownload();\n /** Format a string that describes several potential problems detected by the core */\n std::string GetWarnings(std::string strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n@@ -361,7 +360,7 @@ class CBlockUndo\n \n         // Flush stdio buffers and commit to disk before returning\n         fflush(fileout);\n-        if (!IsInitialBlockDownload())\n+        if (!Checkpoints::IsInitialBlockDownload())\n             FileCommit(fileout);\n \n         return true;"
      },
      {
        "sha": "b4266085ee2569ebe6cbd618fa06f888ed45060c",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b0eb790681673e169c8a421150ddac4b0a949a9/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b0eb790681673e169c8a421150ddac4b0a949a9/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=4b0eb790681673e169c8a421150ddac4b0a949a9",
        "patch": "@@ -142,7 +142,7 @@ QString ClientModel::getNetworkName() const\n \n bool ClientModel::inInitialBlockDownload() const\n {\n-    return IsInitialBlockDownload();\n+    return Checkpoints::IsInitialBlockDownload();\n }\n \n enum BlockSource ClientModel::getBlockSource() const"
      },
      {
        "sha": "62a152a2a9625bb1ac08eed457307a5b7094d2ae",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b0eb790681673e169c8a421150ddac4b0a949a9/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b0eb790681673e169c8a421150ddac4b0a949a9/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=4b0eb790681673e169c8a421150ddac4b0a949a9",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"rpcserver.h\"\n #include \"chainparams.h\"\n+#include \"checkpoints.h\"\n #include \"init.h\"\n #include \"net.h\"\n #include \"main.h\"\n@@ -301,7 +302,7 @@ Value getwork(const Array& params, bool fHelp)\n     if (vNodes.empty())\n         throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Bitcoin is not connected!\");\n \n-    if (IsInitialBlockDownload())\n+    if (Checkpoints::IsInitialBlockDownload())\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Bitcoin is downloading blocks...\");\n \n     typedef map<uint256, pair<CBlock*, CScript> > mapNewBlock_t;\n@@ -483,7 +484,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     if (vNodes.empty())\n         throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Bitcoin is not connected!\");\n \n-    if (IsInitialBlockDownload())\n+    if (Checkpoints::IsInitialBlockDownload())\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Bitcoin is downloading blocks...\");\n \n     // Update block"
      }
    ]
  }
]