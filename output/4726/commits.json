[
  {
    "sha": "aa4cd5a6b6502d6747294b49935089692676d8c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTRjZDVhNmI2NTAyZDY3NDcyOTRiNDk5MzUwODk2OTI2NzZkOGMx",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-08-18T20:22:37Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-08-18T20:22:37Z"
      },
      "message": "Squashed 'src/libbase58/' content from commit 3e3cfa8\n\ngit-subtree-dir: src/libbase58\ngit-subtree-split: 3e3cfa849e8e1b6a82bb2a5656fe670a0cffafeb",
      "tree": {
        "sha": "c39497b2623962605f0345e26d407ee021e4a554",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c39497b2623962605f0345e26d407ee021e4a554"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa4cd5a6b6502d6747294b49935089692676d8c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa4cd5a6b6502d6747294b49935089692676d8c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa4cd5a6b6502d6747294b49935089692676d8c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa4cd5a6b6502d6747294b49935089692676d8c1/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [],
    "stats": {
      "total": 555,
      "additions": 555,
      "deletions": 0
    },
    "files": [
      {
        "sha": "44cf2eaa484921f8623ebdc1b749fc518ac56e39",
        "filename": ".gitignore",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,25 @@\n+*~\n+*.pc\n+*.la\n+*.o\n+libtool\n+ltmain.sh\n+missing\n+install-sh\n+depcomp\n+configure\n+config.*\n+*.lo\n+autom4te.cache\n+ar-lib\n+test-driver\n+aclocal.m4\n+Makefile\n+Makefile.in\n+.deps\n+*.log\n+.libs\n+ii\n+*.tar*\n+base58\n+tests/*.trs"
      },
      {
        "sha": "a788880f2a2f43816a4ecb00cce409dd19e2fa7b",
        "filename": "Makefile.am",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,41 @@\n+# Copyright 2014 Luke Dashjr\n+#\n+# This program is free software; you can redistribute it and/or modify it\n+# under the terms of the standard MIT license.  See COPYING for more details.\n+\n+lib_LTLIBRARIES = libbase58.la\n+libbase58_la_SOURCES = base58.c\n+libbase58_la_LDFLAGS = -version-info $(LIBBASE58_SO_VERSION) -no-undefined\n+\n+libbase58_includedir = $(includedir)\n+libbase58_include_HEADERS = libbase58.h\n+\n+pkgconfigdir = $(libdir)/pkgconfig\n+pkgconfig_DATA = libbase58.pc\n+\n+dist_noinst_SCRIPTS = autogen.sh\n+dist_doc_DATA = README\n+\n+if USE_TOOL\n+bin_PROGRAMS = base58\n+base58_SOURCES = clitool.c\n+base58_CFLAGS = $(LIBGCRYPT_CFLAGS)\n+base58_LDADD = libbase58.la $(LIBGCRYPT_LIBS)\n+\n+TESTS = \\\n+\ttests/decode.sh \\\n+\ttests/decode-b58c.sh \\\n+\ttests/decode-b58c-fail.sh \\\n+\ttests/decode-b58c-null.sh \\\n+\ttests/decode-b58c-toolong.sh \\\n+\ttests/decode-b58c-tooshort.sh \\\n+\ttests/decode-small.sh \\\n+\ttests/decode-zero.sh \\\n+\ttests/encode.sh \\\n+\ttests/encode-b58c.sh \\\n+\ttests/encode-fail.sh \\\n+\ttests/encode-small.sh\n+SH_LOG_COMPILER = /bin/sh\n+AM_TESTS_ENVIRONMENT = PATH='$(srcdir)':\"$$PATH\"; export PATH;\n+endif\n+TEST_EXTENSIONS = .sh"
      },
      {
        "sha": "46a6a632f06bf50849d21bd5799ca13ee0bbf600",
        "filename": "README",
        "status": "added",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,56 @@\n+Initialisation\n+--------------\n+\n+Before you can use libbase58 for base58check, you must provide a SHA256\n+function. The required function signature is:\n+\tbool my_sha256(void *digest, const void *data, size_t datasz)\n+Simply assign your function to b58_sha256_impl:\n+\tb58_sha256_impl = my_sha256;\n+\n+This is only required if base58check is used. Raw base58 does not need SHA256.\n+\n+\n+Decoding Base58\n+---------------\n+\n+Simply allocate a buffer to store the binary data in, and set a variable with\n+the buffer size, and call the b58tobin function:\n+\tbool b58tobin(void *bin, size_t *binsz, const char *b58, size_t b58sz)\n+The \"canonical\" base58 byte length will be assigned to binsz on success, which\n+may be larger than the actual buffer if the input has many leading zeros.\n+Regardless of the canonical byte length, the full binary buffer will be used.\n+If b58sz is zero, it will be initialised with strlen(b58); note that a true\n+zero-length base58 string is not supported here.\n+\n+\n+Validating Base58Check\n+----------------------\n+\n+After calling b58tobin, you can validate base58check data using the b58check\n+function:\n+\tint b58check(const void *bin, size_t binsz, const char *b58, size_t b58sz)\n+Call it with the same buffers used for b58tobin. If the return value is\n+negative, an error occurred. Otherwise, the return value is the base58check\n+\"version\" byte from the decoded data.\n+\n+\n+Encoding Base58\n+---------------\n+\n+Allocate a string to store the base58 content, create a size_t variable with the\n+size of that allocation, and call:\n+\tbool b58enc(char *b58, size_t *b58sz, const void *data, size_t binsz)\n+Note that you must pass a pointer to the string size variable, not the size\n+itself. When b58enc returns, the variable will be modified to contain the actual\n+number of bytes used (including the null terminator). If encoding fails for any\n+reason, or if the string buffer is not large enough for the result, b58enc will\n+return false. Otherwise, it returns true to indicate success.\n+\n+\n+Encoding Base58Check\n+--------------------\n+\n+Targetting base58check is done similarly to raw base58 encoding, but you must\n+also provide a version byte:\n+\tbool b58check_enc(char *b58c, size_t *b58c_sz, uint8_t ver,\n+\t                  const void *data, size_t datasz)"
      },
      {
        "sha": "0e2f2d1434f349aa4a0974d51f23e53e07c362f0",
        "filename": "autogen.sh",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/autogen.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/autogen.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/autogen.sh?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,11 @@\n+#!/bin/sh -e\n+# Written by Luke Dashjr in 2012\n+# This program is released under the terms of the Creative Commons \"CC0 1.0 Universal\" license and/or copyright waiver.\n+\n+if test -z \"$srcdir\"; then\n+\tsrcdir=`dirname \"$0\"`\n+\tif test -z \"$srcdir\"; then\n+\t\tsrcdir=.\n+\tfi\n+fi\n+autoreconf --force --install --verbose \"$srcdir\""
      },
      {
        "sha": "998a8025832c903fa240dadc2c82fdfb8af74e98",
        "filename": "base58.c",
        "status": "added",
        "additions": 197,
        "deletions": 0,
        "changes": 197,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/base58.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/base58.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/base58.c?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright 2012-2014 Luke Dashjr\n+ *\n+ * This program is free software; you can redistribute it and/or modify it\n+ * under the terms of the standard MIT license.  See COPYING for more details.\n+ */\n+\n+#ifndef WIN32\n+#include <arpa/inet.h>\n+#else\n+#include <winsock2.h>\n+#endif\n+\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <string.h>\n+\n+bool (*b58_sha256_impl)(void *, const void *, size_t) = NULL;\n+\n+static const int8_t b58digits_map[] = {\n+\t-1,-1,-1,-1,-1,-1,-1,-1, -1,-1,-1,-1,-1,-1,-1,-1,\n+\t-1,-1,-1,-1,-1,-1,-1,-1, -1,-1,-1,-1,-1,-1,-1,-1,\n+\t-1,-1,-1,-1,-1,-1,-1,-1, -1,-1,-1,-1,-1,-1,-1,-1,\n+\t-1, 0, 1, 2, 3, 4, 5, 6,  7, 8,-1,-1,-1,-1,-1,-1,\n+\t-1, 9,10,11,12,13,14,15, 16,-1,17,18,19,20,21,-1,\n+\t22,23,24,25,26,27,28,29, 30,31,32,-1,-1,-1,-1,-1,\n+\t-1,33,34,35,36,37,38,39, 40,41,42,43,-1,44,45,46,\n+\t47,48,49,50,51,52,53,54, 55,56,57,-1,-1,-1,-1,-1,\n+};\n+\n+bool b58tobin(void *bin, size_t *binszp, const char *b58, size_t b58sz)\n+{\n+\tsize_t binsz = *binszp;\n+\tconst unsigned char *b58u = (void*)b58;\n+\tunsigned char *binu = bin;\n+\tsize_t outisz = (binsz + 3) / 4;\n+\tuint32_t outi[outisz];\n+\tuint64_t t;\n+\tuint32_t c;\n+\tsize_t i, j;\n+\tuint8_t bytesleft = binsz % 4;\n+\tuint32_t zeromask = ~((1 << ((bytesleft ?: 4) * 8)) - 1);\n+\tunsigned zerocount = 0;\n+\t\n+\tif (!b58sz)\n+\t\tb58sz = strlen(b58);\n+\t\n+\tmemset(outi, 0, outisz * sizeof(*outi));\n+\t\n+\t// Leading zeros, just count\n+\tfor (i = 0; i < b58sz && !b58digits_map[b58u[i]]; ++i)\n+\t\t++zerocount;\n+\t\n+\tfor ( ; i < b58sz; ++i)\n+\t{\n+\t\tif (b58u[i] & 0x80)\n+\t\t\t// High-bit set on invalid digit\n+\t\t\treturn false;\n+\t\tif (b58digits_map[b58u[i]] == -1)\n+\t\t\t// Invalid base58 digit\n+\t\t\treturn false;\n+\t\tc = b58digits_map[b58u[i]];\n+\t\tfor (j = outisz; j--; )\n+\t\t{\n+\t\t\tt = ((uint64_t)outi[j]) * 58 + c;\n+\t\t\tc = (t & 0x3f00000000) >> 32;\n+\t\t\touti[j] = t & 0xffffffff;\n+\t\t}\n+\t\tif (c)\n+\t\t\t// Output number too big (carry to the next int32)\n+\t\t\treturn false;\n+\t\tif (outi[0] & zeromask)\n+\t\t\t// Output number too big (last int32 filled too far)\n+\t\t\treturn false;\n+\t}\n+\t\n+\tj = 0;\n+\tswitch (bytesleft) {\n+\t\tcase 3:\n+\t\t\t*(binu++) = (outi[0] &   0xff0000) >> 16;\n+\t\tcase 2:\n+\t\t\t*(binu++) = (outi[0] &     0xff00) >>  8;\n+\t\tcase 1:\n+\t\t\t*(binu++) = (outi[0] &       0xff);\n+\t\t\t++j;\n+\t\tdefault:\n+\t\t\tbreak;\n+\t}\n+\t\n+\tfor (; j < outisz; ++j)\n+\t{\n+\t\t*(binu++) = outi[j] >> 0x18;\n+\t\t*(binu++) = outi[j] >> 0x10;\n+\t\t*(binu++) = outi[j] >>    8;\n+\t\t*(binu++) = outi[j];\n+\t}\n+\t\n+\t// Count canonical base58 byte count\n+\tbinu = bin;\n+\tfor (i = 0; i < binsz; ++i)\n+\t{\n+\t\tif (binu[i])\n+\t\t\tbreak;\n+\t\t--*binszp;\n+\t}\n+\t*binszp += zerocount;\n+\t\n+\treturn true;\n+}\n+\n+static\n+bool my_dblsha256(void *hash, const void *data, size_t datasz)\n+{\n+\tuint8_t buf[0x20];\n+\treturn b58_sha256_impl(buf, data, datasz) && b58_sha256_impl(hash, buf, sizeof(buf));\n+}\n+\n+int b58check(const void *bin, size_t binsz, const char *base58str, size_t b58sz)\n+{\n+\tunsigned char buf[32];\n+\tconst uint8_t *binc = bin;\n+\tunsigned i;\n+\tif (binsz < 4)\n+\t\treturn -4;\n+\tif (!my_dblsha256(buf, bin, binsz - 4))\n+\t\treturn -2;\n+\tif (memcmp(&binc[binsz - 4], buf, 4))\n+\t\treturn -1;\n+\t\n+\t// Check number of zeros is correct AFTER verifying checksum (to avoid possibility of accessing base58str beyond the end)\n+\tfor (i = 0; binc[i] == '\\0' && base58str[i] == '1'; ++i)\n+\t{}  // Just finding the end of zeros, nothing to do in loop\n+\tif (binc[i] == '\\0' || base58str[i] == '1')\n+\t\treturn -3;\n+\t\n+\treturn binc[0];\n+}\n+\n+static const char b58digits_ordered[] = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n+\n+bool b58enc(char *b58, size_t *b58sz, const void *data, size_t binsz)\n+{\n+\tconst uint8_t *bin = data;\n+\tint i, j, carry, high, zcount = 0;\n+\tsize_t size;\n+\t\n+\twhile (zcount < binsz && !bin[zcount])\n+\t\t++zcount;\n+\t\n+\tsize = (binsz - zcount) * 138 / 100 + 1;\n+\tuint8_t buf[size];\n+\tmemset(buf, 0, size);\n+\t\n+\tfor (i = zcount, high = size - 1; i < binsz; ++i, high = j)\n+\t{\n+\t\tfor (carry = bin[i], j = size - 1; (j > high) || carry; --j)\n+\t\t{\n+\t\t\tcarry += 256 * buf[j];\n+\t\t\tbuf[j] = carry % 58;\n+\t\t\tcarry /= 58;\n+\t\t}\n+\t}\n+\t\n+\tfor (j = 0; j < size && !buf[j]; ++j);\n+\t\n+\tif (*b58sz <= zcount + size - j)\n+\t{\n+\t\t*b58sz = zcount + size - j + 1;\n+\t\treturn false;\n+\t}\n+\t\n+\tif (zcount)\n+\t\tmemset(b58, '1', zcount);\n+\tfor (i = zcount; j < size; ++i, ++j)\n+\t\tb58[i] = b58digits_ordered[buf[j]];\n+\tb58[i] = '\\0';\n+\t*b58sz = i + 1;\n+\t\n+\treturn true;\n+}\n+\n+bool b58check_enc(char *b58c, size_t *b58c_sz, uint8_t ver, const void *data, size_t datasz)\n+{\n+\tuint8_t buf[1 + datasz + 0x20];\n+\tuint8_t *hash = &buf[1 + datasz];\n+\t\n+\tbuf[0] = ver;\n+\tmemcpy(&buf[1], data, datasz);\n+\tif (!my_dblsha256(hash, buf, datasz + 1))\n+\t{\n+\t\t*b58c_sz = 0;\n+\t\treturn false;\n+\t}\n+\t\n+\treturn b58enc(b58c, b58c_sz, buf, 1 + datasz + 4);\n+}"
      },
      {
        "sha": "dca01b2699cb1e90dab9782cce53aafda8012562",
        "filename": "clitool.c",
        "status": "added",
        "additions": 115,
        "deletions": 0,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/clitool.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/clitool.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/clitool.c?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,115 @@\n+#include <ctype.h>\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <unistd.h>\n+\n+#include <gcrypt.h>\n+\n+#include \"libbase58.h\"\n+\n+static\n+bool my_sha256(void *digest, const void *data, size_t datasz)\n+{\n+\tgcry_md_hash_buffer(GCRY_MD_SHA256, digest, data, datasz);\n+\treturn true;\n+}\n+\n+static\n+void usage(const char *prog)\n+{\n+\tfprintf(stderr, \"Usage: %s [-c] [-d] [data]\\n\", prog);\n+\tfprintf(stderr, \"\\t-c         Use base58check (default: raw base58)\\n\");\n+\tfprintf(stderr, \"\\t-d <size>  Decode <size> bytes\\n\");\n+\texit(1);\n+}\n+\n+int main(int argc, char **argv)\n+{\n+\tbool b58c = false;\n+\tint decode = 0;\n+\tint opt;\n+\twhile ( (opt = getopt(argc, argv, \"cd:h\")) != -1)\n+\t{\n+\t\tswitch (opt)\n+\t\t{\n+\t\t\tcase 'c':\n+\t\t\t\tb58c = true;\n+\t\t\t\tb58_sha256_impl = my_sha256;\n+\t\t\t\tbreak;\n+\t\t\tcase 'd':\n+\t\t\t\tdecode = atoi(optarg);\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tusage(argv[0]);\n+\t\t}\n+\t}\n+\t\n+\tsize_t rt;\n+\tuint8_t *r;\n+\tif (optind >= argc)\n+\t{\n+\t\trt = 0;\n+\t\tr = NULL;\n+\t\twhile (!feof(stdin))\n+\t\t{\n+\t\t\tr = realloc(r, rt + 0x100);\n+\t\t\trt += fread(&r[rt], 1, 0x100, stdin);\n+\t\t}\n+\t\tif (decode)\n+\t\t\twhile (isspace(r[rt-1]))\n+\t\t\t\t--rt;\n+\t}\n+\telse\n+\t{\n+\t\tr = argv[optind];\n+\t\trt = strlen(r);\n+\t}\n+\t\n+\tif (decode)\n+\t{\n+\t\tuint8_t bin[decode];\n+\t\tsize_t ssz = decode;\n+\t\tif (!b58tobin(bin, &ssz, r, rt))\n+\t\t\treturn 2;\n+\t\tif (b58c)\n+\t\t{\n+\t\t\tint chk = b58check(bin, decode, r, rt);\n+\t\t\tif (chk < 0)\n+\t\t\t\treturn chk;\n+\t\t\tif (fwrite(bin, decode, 1, stdout) != 1)\n+\t\t\t\treturn 3;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t// Raw base58 doesn't check length match\n+\t\t\tuint8_t cbin[ssz];\n+\t\t\tif (ssz > decode)\n+\t\t\t{\n+\t\t\t\tsize_t zeros = ssz - decode;\n+\t\t\t\tmemset(cbin, 0, zeros);\n+\t\t\t\tmemcpy(&cbin[zeros], bin, decode);\n+\t\t\t}\n+\t\t\telse\n+\t\t\t\tmemcpy(cbin, &bin[decode - ssz], ssz);\n+\t\t\t\n+\t\t\tif (fwrite(cbin, ssz, 1, stdout) != 1)\n+\t\t\t\treturn 3;\n+\t\t}\n+\t}\n+\telse\n+\t{\n+\t\tsize_t ssz = rt * 2;\n+\t\tchar s[ssz];\n+\t\tbool rv;\n+\t\tif (b58c)\n+\t\t\trv = rt && b58check_enc(s, &ssz, r[0], &r[1], rt-1);\n+\t\telse\n+\t\t\trv = b58enc(s, &ssz, r, rt);\n+\t\tif (!rv)\n+\t\t\treturn 2;\n+\t\tputs(s);\n+\t}\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "f5a6a0836aeb8a648b05c068b4a473dbf668233c",
        "filename": "configure.ac",
        "status": "added",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,45 @@\n+dnl * Copyright 2012-2014 Luke Dashjr\n+dnl *\n+dnl * This program is free software; you can redistribute it and/or modify it\n+dnl * under the terms of the standard MIT license.  See COPYING for more details.\n+\n+AC_INIT(\n+\t[libbase58],\n+\t[0.1],\n+\t[luke_libbase58@dashjr.org],\n+\t[libbase58])\n+AC_CONFIG_AUX_DIR([.])\n+AC_PREREQ([2.59])\n+AM_INIT_AUTOMAKE([1.12 -Wall dist-xz foreign])\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_PROG_CC_C99\n+m4_ifdef([AM_PROG_AR], [AM_PROG_AR])\n+LT_INIT([])\n+\n+# http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html\n+AC_SUBST([LIBBASE58_SO_VERSION], [0:0:0])\n+\n+AC_CONFIG_FILES([Makefile\n+\tlibbase58.pc:libbase58.pc.in\n+])\n+\n+AC_CHECK_LIB([ws2_32], [strchr])\n+\n+AC_ARG_ENABLE([tool],\n+\t[AC_HELP_STRING([--disable-tool],[Compile command line base58 tool (default enabled)])],\n+\t[use_tool=$enableval],\n+\t[use_tool=auto])\n+if test x$use_tool != xno; then\n+\tAM_PATH_LIBGCRYPT([],[\n+\t\tuse_tool=yes\n+\t],[\n+\t\tif test x$use_tool = xyes; then\n+\t\t\tAC_MSG_ERROR([libgcrypt not found; use --disable-tool])\n+\t\tfi\n+\t\tuse_tool=no\n+\t])\n+fi\n+AM_CONDITIONAL([USE_TOOL], [test x$use_tool = xyes])\n+\n+AC_OUTPUT"
      },
      {
        "sha": "fafe6539fc9cdfff4f963037eb68e36a4d174d7e",
        "filename": "libbase58.h",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/libbase58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/libbase58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/libbase58.h?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,23 @@\n+#ifndef LIBBASE58_H\n+#define LIBBASE58_H\n+\n+#include <stdbool.h>\n+#include <stddef.h>\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+extern bool (*b58_sha256_impl)(void *, const void *, size_t);\n+\n+extern bool b58tobin(void *bin, size_t *binsz, const char *b58, size_t b58sz);\n+extern int b58check(const void *bin, size_t binsz, const char *b58, size_t b58sz);\n+\n+extern bool b58enc(char *b58, size_t *b58sz, const void *bin, size_t binsz);\n+extern bool b58check_enc(char *b58c, size_t *b58c_sz, uint8_t ver, const void *data, size_t datasz);\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif"
      },
      {
        "sha": "0dd00b2a8cd07368d40eba4d8a536aa713644cfe",
        "filename": "libbase58.pc.in",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/libbase58.pc.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/libbase58.pc.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/libbase58.pc.in?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,9 @@\n+prefix=@prefix@\n+exec_prefix=@exec_prefix@\n+libdir=@libdir@\n+includedir=@includedir@\n+\n+Name: @PACKAGE_NAME@\n+Description: Library for Bitcoin's base58 encoding.\n+Version: @PACKAGE_VERSION@\n+Libs: -L${libdir} -lbase58"
      },
      {
        "sha": "15fefe14c3c136582249f32c693dfaad4324d233",
        "filename": "tests/decode-b58c-fail.sh",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/decode-b58c-fail.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/decode-b58c-fail.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/tests/decode-b58c-fail.sh?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,2 @@\n+#!/bin/sh\n+! base58 -d 25 -c 19DXstMaV43WpYg4ceREiiTv2UntmoiA9a >/dev/null\n\\ No newline at end of file"
      },
      {
        "sha": "81a25ec455a755d6005920634f43187e59e17e9e",
        "filename": "tests/decode-b58c-null.sh",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/decode-b58c-null.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/decode-b58c-null.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/tests/decode-b58c-null.sh?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+hex=$(base58 -d 25 -c 19DXstMaV43WpYg4ceREiiTv2UntmoiA9a | xxd -p)\n+test x$hex = x"
      },
      {
        "sha": "aed0f680c2db1f1faa54cb9c600a388a7ef170ee",
        "filename": "tests/decode-b58c-toolong.sh",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/decode-b58c-toolong.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/decode-b58c-toolong.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/tests/decode-b58c-toolong.sh?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,2 @@\n+#!/bin/sh\n+! base58 -d 25 -c 1119DXstMaV43WpYg4ceREiiTv2UntmoiA9a >/dev/null"
      },
      {
        "sha": "da592e10595e725c3c3a1cb0e93a5ec3db302155",
        "filename": "tests/decode-b58c-tooshort.sh",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/decode-b58c-tooshort.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/decode-b58c-tooshort.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/tests/decode-b58c-tooshort.sh?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,2 @@\n+#!/bin/sh\n+! base58 -d 25 -c 111111111111111111114oLvT2 >/dev/null"
      },
      {
        "sha": "36ce4306b040527d27bcd20744869962e0ab48fa",
        "filename": "tests/decode-b58c.sh",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/decode-b58c.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/decode-b58c.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/tests/decode-b58c.sh?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+hex=$(base58 -d 25 -c 19DXstMaV43WpYg4ceREiiTv2UntmoiA9j | xxd -p)\n+test x$hex != x005a1fc5dd9e6f03819fca94a2d89669469667f9a1"
      },
      {
        "sha": "acd3bc6b2ae03efef4334fbf7d8131dade7be200",
        "filename": "tests/decode-small.sh",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/decode-small.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/decode-small.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/tests/decode-small.sh?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+hex=$(base58 -d 4 2 | xxd -p)\n+test x$hex = x01"
      },
      {
        "sha": "aac81f744c9c4a667264b30cfb492a611be7dee8",
        "filename": "tests/decode-zero.sh",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/decode-zero.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/decode-zero.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/tests/decode-zero.sh?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+hex=$(base58 -d 25 111111 | xxd -p)\n+test x$hex = x000000000000"
      },
      {
        "sha": "38e74aff5d61d6794c018b282954f551df64a0fe",
        "filename": "tests/decode.sh",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/decode.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/decode.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/tests/decode.sh?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+hex=$(base58 -d 50 19DXstMaV43WpYg4ceREiiTv2UntmoiA9j | xxd -p)\n+test x$hex = x005a1fc5dd9e6f03819fca94a2d89669469667f9a074655946"
      },
      {
        "sha": "1f317805ef93d7d6c1a9aac4b332695578a9a6a8",
        "filename": "tests/encode-b58c.sh",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/encode-b58c.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/encode-b58c.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/tests/encode-b58c.sh?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+b58=$(echo '005a1fc5dd9e6f03819fca94a2d89669469667f9a0' | xxd -r -p | base58 -c)\n+test x$b58 = x19DXstMaV43WpYg4ceREiiTv2UntmoiA9j"
      },
      {
        "sha": "398016a0288a4c49f3d472f0205a6b4be813222b",
        "filename": "tests/encode-fail.sh",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/encode-fail.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/encode-fail.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/tests/encode-fail.sh?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+b58=$(echo '005a1fc5dd9e6f03819fca94a2d89669469667f9a174655946' | xxd -r -p | base58)\n+test x$b58 != x19DXstMaV43WpYg4ceREiiTv2UntmoiA9j"
      },
      {
        "sha": "790e95c2f8a5a565f6856b5c6fc787b79a7ccbba",
        "filename": "tests/encode-small.sh",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/encode-small.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/encode-small.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/tests/encode-small.sh?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+b58=$(base58 1)\n+test x$b58 = xr"
      },
      {
        "sha": "54ea7139fa453b00ee40a2d393ea07542d395245",
        "filename": "tests/encode.sh",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/encode.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa4cd5a6b6502d6747294b49935089692676d8c1/tests/encode.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/tests/encode.sh?ref=aa4cd5a6b6502d6747294b49935089692676d8c1",
        "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+b58=$(echo '005a1fc5dd9e6f03819fca94a2d89669469667f9a074655946' | xxd -r -p | base58)\n+test x$b58 = x19DXstMaV43WpYg4ceREiiTv2UntmoiA9j"
      }
    ]
  },
  {
    "sha": "6ef5cde5eb508f4738e9e74f948d073dfcd66896",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWY1Y2RlNWViNTA4ZjQ3MzhlOWU3NGY5NDhkMDczZGZjZDY2ODk2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-08-18T20:22:37Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-08-18T20:22:37Z"
      },
      "message": "Merge commit 'aa4cd5a6b6502d6747294b49935089692676d8c1' as 'src/libbase58'",
      "tree": {
        "sha": "a1b8a8d9d1689a35ebdfa8b481155f7dc428b0e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1b8a8d9d1689a35ebdfa8b481155f7dc428b0e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ef5cde5eb508f4738e9e74f948d073dfcd66896",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ef5cde5eb508f4738e9e74f948d073dfcd66896",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ef5cde5eb508f4738e9e74f948d073dfcd66896",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ef5cde5eb508f4738e9e74f948d073dfcd66896/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd45b1abd31ff75461407c7fe904b9e924dc576a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd45b1abd31ff75461407c7fe904b9e924dc576a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd45b1abd31ff75461407c7fe904b9e924dc576a"
      },
      {
        "sha": "aa4cd5a6b6502d6747294b49935089692676d8c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa4cd5a6b6502d6747294b49935089692676d8c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa4cd5a6b6502d6747294b49935089692676d8c1"
      }
    ],
    "stats": {
      "total": 555,
      "additions": 555,
      "deletions": 0
    },
    "files": [
      {
        "sha": "44cf2eaa484921f8623ebdc1b749fc518ac56e39",
        "filename": "src/libbase58/.gitignore",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/.gitignore?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,25 @@\n+*~\n+*.pc\n+*.la\n+*.o\n+libtool\n+ltmain.sh\n+missing\n+install-sh\n+depcomp\n+configure\n+config.*\n+*.lo\n+autom4te.cache\n+ar-lib\n+test-driver\n+aclocal.m4\n+Makefile\n+Makefile.in\n+.deps\n+*.log\n+.libs\n+ii\n+*.tar*\n+base58\n+tests/*.trs"
      },
      {
        "sha": "a788880f2a2f43816a4ecb00cce409dd19e2fa7b",
        "filename": "src/libbase58/Makefile.am",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/Makefile.am?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,41 @@\n+# Copyright 2014 Luke Dashjr\n+#\n+# This program is free software; you can redistribute it and/or modify it\n+# under the terms of the standard MIT license.  See COPYING for more details.\n+\n+lib_LTLIBRARIES = libbase58.la\n+libbase58_la_SOURCES = base58.c\n+libbase58_la_LDFLAGS = -version-info $(LIBBASE58_SO_VERSION) -no-undefined\n+\n+libbase58_includedir = $(includedir)\n+libbase58_include_HEADERS = libbase58.h\n+\n+pkgconfigdir = $(libdir)/pkgconfig\n+pkgconfig_DATA = libbase58.pc\n+\n+dist_noinst_SCRIPTS = autogen.sh\n+dist_doc_DATA = README\n+\n+if USE_TOOL\n+bin_PROGRAMS = base58\n+base58_SOURCES = clitool.c\n+base58_CFLAGS = $(LIBGCRYPT_CFLAGS)\n+base58_LDADD = libbase58.la $(LIBGCRYPT_LIBS)\n+\n+TESTS = \\\n+\ttests/decode.sh \\\n+\ttests/decode-b58c.sh \\\n+\ttests/decode-b58c-fail.sh \\\n+\ttests/decode-b58c-null.sh \\\n+\ttests/decode-b58c-toolong.sh \\\n+\ttests/decode-b58c-tooshort.sh \\\n+\ttests/decode-small.sh \\\n+\ttests/decode-zero.sh \\\n+\ttests/encode.sh \\\n+\ttests/encode-b58c.sh \\\n+\ttests/encode-fail.sh \\\n+\ttests/encode-small.sh\n+SH_LOG_COMPILER = /bin/sh\n+AM_TESTS_ENVIRONMENT = PATH='$(srcdir)':\"$$PATH\"; export PATH;\n+endif\n+TEST_EXTENSIONS = .sh"
      },
      {
        "sha": "46a6a632f06bf50849d21bd5799ca13ee0bbf600",
        "filename": "src/libbase58/README",
        "status": "added",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/README?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,56 @@\n+Initialisation\n+--------------\n+\n+Before you can use libbase58 for base58check, you must provide a SHA256\n+function. The required function signature is:\n+\tbool my_sha256(void *digest, const void *data, size_t datasz)\n+Simply assign your function to b58_sha256_impl:\n+\tb58_sha256_impl = my_sha256;\n+\n+This is only required if base58check is used. Raw base58 does not need SHA256.\n+\n+\n+Decoding Base58\n+---------------\n+\n+Simply allocate a buffer to store the binary data in, and set a variable with\n+the buffer size, and call the b58tobin function:\n+\tbool b58tobin(void *bin, size_t *binsz, const char *b58, size_t b58sz)\n+The \"canonical\" base58 byte length will be assigned to binsz on success, which\n+may be larger than the actual buffer if the input has many leading zeros.\n+Regardless of the canonical byte length, the full binary buffer will be used.\n+If b58sz is zero, it will be initialised with strlen(b58); note that a true\n+zero-length base58 string is not supported here.\n+\n+\n+Validating Base58Check\n+----------------------\n+\n+After calling b58tobin, you can validate base58check data using the b58check\n+function:\n+\tint b58check(const void *bin, size_t binsz, const char *b58, size_t b58sz)\n+Call it with the same buffers used for b58tobin. If the return value is\n+negative, an error occurred. Otherwise, the return value is the base58check\n+\"version\" byte from the decoded data.\n+\n+\n+Encoding Base58\n+---------------\n+\n+Allocate a string to store the base58 content, create a size_t variable with the\n+size of that allocation, and call:\n+\tbool b58enc(char *b58, size_t *b58sz, const void *data, size_t binsz)\n+Note that you must pass a pointer to the string size variable, not the size\n+itself. When b58enc returns, the variable will be modified to contain the actual\n+number of bytes used (including the null terminator). If encoding fails for any\n+reason, or if the string buffer is not large enough for the result, b58enc will\n+return false. Otherwise, it returns true to indicate success.\n+\n+\n+Encoding Base58Check\n+--------------------\n+\n+Targetting base58check is done similarly to raw base58 encoding, but you must\n+also provide a version byte:\n+\tbool b58check_enc(char *b58c, size_t *b58c_sz, uint8_t ver,\n+\t                  const void *data, size_t datasz)"
      },
      {
        "sha": "0e2f2d1434f349aa4a0974d51f23e53e07c362f0",
        "filename": "src/libbase58/autogen.sh",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/autogen.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/autogen.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/autogen.sh?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,11 @@\n+#!/bin/sh -e\n+# Written by Luke Dashjr in 2012\n+# This program is released under the terms of the Creative Commons \"CC0 1.0 Universal\" license and/or copyright waiver.\n+\n+if test -z \"$srcdir\"; then\n+\tsrcdir=`dirname \"$0\"`\n+\tif test -z \"$srcdir\"; then\n+\t\tsrcdir=.\n+\tfi\n+fi\n+autoreconf --force --install --verbose \"$srcdir\""
      },
      {
        "sha": "998a8025832c903fa240dadc2c82fdfb8af74e98",
        "filename": "src/libbase58/base58.c",
        "status": "added",
        "additions": 197,
        "deletions": 0,
        "changes": 197,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/base58.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/base58.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/base58.c?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright 2012-2014 Luke Dashjr\n+ *\n+ * This program is free software; you can redistribute it and/or modify it\n+ * under the terms of the standard MIT license.  See COPYING for more details.\n+ */\n+\n+#ifndef WIN32\n+#include <arpa/inet.h>\n+#else\n+#include <winsock2.h>\n+#endif\n+\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <string.h>\n+\n+bool (*b58_sha256_impl)(void *, const void *, size_t) = NULL;\n+\n+static const int8_t b58digits_map[] = {\n+\t-1,-1,-1,-1,-1,-1,-1,-1, -1,-1,-1,-1,-1,-1,-1,-1,\n+\t-1,-1,-1,-1,-1,-1,-1,-1, -1,-1,-1,-1,-1,-1,-1,-1,\n+\t-1,-1,-1,-1,-1,-1,-1,-1, -1,-1,-1,-1,-1,-1,-1,-1,\n+\t-1, 0, 1, 2, 3, 4, 5, 6,  7, 8,-1,-1,-1,-1,-1,-1,\n+\t-1, 9,10,11,12,13,14,15, 16,-1,17,18,19,20,21,-1,\n+\t22,23,24,25,26,27,28,29, 30,31,32,-1,-1,-1,-1,-1,\n+\t-1,33,34,35,36,37,38,39, 40,41,42,43,-1,44,45,46,\n+\t47,48,49,50,51,52,53,54, 55,56,57,-1,-1,-1,-1,-1,\n+};\n+\n+bool b58tobin(void *bin, size_t *binszp, const char *b58, size_t b58sz)\n+{\n+\tsize_t binsz = *binszp;\n+\tconst unsigned char *b58u = (void*)b58;\n+\tunsigned char *binu = bin;\n+\tsize_t outisz = (binsz + 3) / 4;\n+\tuint32_t outi[outisz];\n+\tuint64_t t;\n+\tuint32_t c;\n+\tsize_t i, j;\n+\tuint8_t bytesleft = binsz % 4;\n+\tuint32_t zeromask = ~((1 << ((bytesleft ?: 4) * 8)) - 1);\n+\tunsigned zerocount = 0;\n+\t\n+\tif (!b58sz)\n+\t\tb58sz = strlen(b58);\n+\t\n+\tmemset(outi, 0, outisz * sizeof(*outi));\n+\t\n+\t// Leading zeros, just count\n+\tfor (i = 0; i < b58sz && !b58digits_map[b58u[i]]; ++i)\n+\t\t++zerocount;\n+\t\n+\tfor ( ; i < b58sz; ++i)\n+\t{\n+\t\tif (b58u[i] & 0x80)\n+\t\t\t// High-bit set on invalid digit\n+\t\t\treturn false;\n+\t\tif (b58digits_map[b58u[i]] == -1)\n+\t\t\t// Invalid base58 digit\n+\t\t\treturn false;\n+\t\tc = b58digits_map[b58u[i]];\n+\t\tfor (j = outisz; j--; )\n+\t\t{\n+\t\t\tt = ((uint64_t)outi[j]) * 58 + c;\n+\t\t\tc = (t & 0x3f00000000) >> 32;\n+\t\t\touti[j] = t & 0xffffffff;\n+\t\t}\n+\t\tif (c)\n+\t\t\t// Output number too big (carry to the next int32)\n+\t\t\treturn false;\n+\t\tif (outi[0] & zeromask)\n+\t\t\t// Output number too big (last int32 filled too far)\n+\t\t\treturn false;\n+\t}\n+\t\n+\tj = 0;\n+\tswitch (bytesleft) {\n+\t\tcase 3:\n+\t\t\t*(binu++) = (outi[0] &   0xff0000) >> 16;\n+\t\tcase 2:\n+\t\t\t*(binu++) = (outi[0] &     0xff00) >>  8;\n+\t\tcase 1:\n+\t\t\t*(binu++) = (outi[0] &       0xff);\n+\t\t\t++j;\n+\t\tdefault:\n+\t\t\tbreak;\n+\t}\n+\t\n+\tfor (; j < outisz; ++j)\n+\t{\n+\t\t*(binu++) = outi[j] >> 0x18;\n+\t\t*(binu++) = outi[j] >> 0x10;\n+\t\t*(binu++) = outi[j] >>    8;\n+\t\t*(binu++) = outi[j];\n+\t}\n+\t\n+\t// Count canonical base58 byte count\n+\tbinu = bin;\n+\tfor (i = 0; i < binsz; ++i)\n+\t{\n+\t\tif (binu[i])\n+\t\t\tbreak;\n+\t\t--*binszp;\n+\t}\n+\t*binszp += zerocount;\n+\t\n+\treturn true;\n+}\n+\n+static\n+bool my_dblsha256(void *hash, const void *data, size_t datasz)\n+{\n+\tuint8_t buf[0x20];\n+\treturn b58_sha256_impl(buf, data, datasz) && b58_sha256_impl(hash, buf, sizeof(buf));\n+}\n+\n+int b58check(const void *bin, size_t binsz, const char *base58str, size_t b58sz)\n+{\n+\tunsigned char buf[32];\n+\tconst uint8_t *binc = bin;\n+\tunsigned i;\n+\tif (binsz < 4)\n+\t\treturn -4;\n+\tif (!my_dblsha256(buf, bin, binsz - 4))\n+\t\treturn -2;\n+\tif (memcmp(&binc[binsz - 4], buf, 4))\n+\t\treturn -1;\n+\t\n+\t// Check number of zeros is correct AFTER verifying checksum (to avoid possibility of accessing base58str beyond the end)\n+\tfor (i = 0; binc[i] == '\\0' && base58str[i] == '1'; ++i)\n+\t{}  // Just finding the end of zeros, nothing to do in loop\n+\tif (binc[i] == '\\0' || base58str[i] == '1')\n+\t\treturn -3;\n+\t\n+\treturn binc[0];\n+}\n+\n+static const char b58digits_ordered[] = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n+\n+bool b58enc(char *b58, size_t *b58sz, const void *data, size_t binsz)\n+{\n+\tconst uint8_t *bin = data;\n+\tint i, j, carry, high, zcount = 0;\n+\tsize_t size;\n+\t\n+\twhile (zcount < binsz && !bin[zcount])\n+\t\t++zcount;\n+\t\n+\tsize = (binsz - zcount) * 138 / 100 + 1;\n+\tuint8_t buf[size];\n+\tmemset(buf, 0, size);\n+\t\n+\tfor (i = zcount, high = size - 1; i < binsz; ++i, high = j)\n+\t{\n+\t\tfor (carry = bin[i], j = size - 1; (j > high) || carry; --j)\n+\t\t{\n+\t\t\tcarry += 256 * buf[j];\n+\t\t\tbuf[j] = carry % 58;\n+\t\t\tcarry /= 58;\n+\t\t}\n+\t}\n+\t\n+\tfor (j = 0; j < size && !buf[j]; ++j);\n+\t\n+\tif (*b58sz <= zcount + size - j)\n+\t{\n+\t\t*b58sz = zcount + size - j + 1;\n+\t\treturn false;\n+\t}\n+\t\n+\tif (zcount)\n+\t\tmemset(b58, '1', zcount);\n+\tfor (i = zcount; j < size; ++i, ++j)\n+\t\tb58[i] = b58digits_ordered[buf[j]];\n+\tb58[i] = '\\0';\n+\t*b58sz = i + 1;\n+\t\n+\treturn true;\n+}\n+\n+bool b58check_enc(char *b58c, size_t *b58c_sz, uint8_t ver, const void *data, size_t datasz)\n+{\n+\tuint8_t buf[1 + datasz + 0x20];\n+\tuint8_t *hash = &buf[1 + datasz];\n+\t\n+\tbuf[0] = ver;\n+\tmemcpy(&buf[1], data, datasz);\n+\tif (!my_dblsha256(hash, buf, datasz + 1))\n+\t{\n+\t\t*b58c_sz = 0;\n+\t\treturn false;\n+\t}\n+\t\n+\treturn b58enc(b58c, b58c_sz, buf, 1 + datasz + 4);\n+}"
      },
      {
        "sha": "dca01b2699cb1e90dab9782cce53aafda8012562",
        "filename": "src/libbase58/clitool.c",
        "status": "added",
        "additions": 115,
        "deletions": 0,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/clitool.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/clitool.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/clitool.c?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,115 @@\n+#include <ctype.h>\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <unistd.h>\n+\n+#include <gcrypt.h>\n+\n+#include \"libbase58.h\"\n+\n+static\n+bool my_sha256(void *digest, const void *data, size_t datasz)\n+{\n+\tgcry_md_hash_buffer(GCRY_MD_SHA256, digest, data, datasz);\n+\treturn true;\n+}\n+\n+static\n+void usage(const char *prog)\n+{\n+\tfprintf(stderr, \"Usage: %s [-c] [-d] [data]\\n\", prog);\n+\tfprintf(stderr, \"\\t-c         Use base58check (default: raw base58)\\n\");\n+\tfprintf(stderr, \"\\t-d <size>  Decode <size> bytes\\n\");\n+\texit(1);\n+}\n+\n+int main(int argc, char **argv)\n+{\n+\tbool b58c = false;\n+\tint decode = 0;\n+\tint opt;\n+\twhile ( (opt = getopt(argc, argv, \"cd:h\")) != -1)\n+\t{\n+\t\tswitch (opt)\n+\t\t{\n+\t\t\tcase 'c':\n+\t\t\t\tb58c = true;\n+\t\t\t\tb58_sha256_impl = my_sha256;\n+\t\t\t\tbreak;\n+\t\t\tcase 'd':\n+\t\t\t\tdecode = atoi(optarg);\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tusage(argv[0]);\n+\t\t}\n+\t}\n+\t\n+\tsize_t rt;\n+\tuint8_t *r;\n+\tif (optind >= argc)\n+\t{\n+\t\trt = 0;\n+\t\tr = NULL;\n+\t\twhile (!feof(stdin))\n+\t\t{\n+\t\t\tr = realloc(r, rt + 0x100);\n+\t\t\trt += fread(&r[rt], 1, 0x100, stdin);\n+\t\t}\n+\t\tif (decode)\n+\t\t\twhile (isspace(r[rt-1]))\n+\t\t\t\t--rt;\n+\t}\n+\telse\n+\t{\n+\t\tr = argv[optind];\n+\t\trt = strlen(r);\n+\t}\n+\t\n+\tif (decode)\n+\t{\n+\t\tuint8_t bin[decode];\n+\t\tsize_t ssz = decode;\n+\t\tif (!b58tobin(bin, &ssz, r, rt))\n+\t\t\treturn 2;\n+\t\tif (b58c)\n+\t\t{\n+\t\t\tint chk = b58check(bin, decode, r, rt);\n+\t\t\tif (chk < 0)\n+\t\t\t\treturn chk;\n+\t\t\tif (fwrite(bin, decode, 1, stdout) != 1)\n+\t\t\t\treturn 3;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t// Raw base58 doesn't check length match\n+\t\t\tuint8_t cbin[ssz];\n+\t\t\tif (ssz > decode)\n+\t\t\t{\n+\t\t\t\tsize_t zeros = ssz - decode;\n+\t\t\t\tmemset(cbin, 0, zeros);\n+\t\t\t\tmemcpy(&cbin[zeros], bin, decode);\n+\t\t\t}\n+\t\t\telse\n+\t\t\t\tmemcpy(cbin, &bin[decode - ssz], ssz);\n+\t\t\t\n+\t\t\tif (fwrite(cbin, ssz, 1, stdout) != 1)\n+\t\t\t\treturn 3;\n+\t\t}\n+\t}\n+\telse\n+\t{\n+\t\tsize_t ssz = rt * 2;\n+\t\tchar s[ssz];\n+\t\tbool rv;\n+\t\tif (b58c)\n+\t\t\trv = rt && b58check_enc(s, &ssz, r[0], &r[1], rt-1);\n+\t\telse\n+\t\t\trv = b58enc(s, &ssz, r, rt);\n+\t\tif (!rv)\n+\t\t\treturn 2;\n+\t\tputs(s);\n+\t}\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "f5a6a0836aeb8a648b05c068b4a473dbf668233c",
        "filename": "src/libbase58/configure.ac",
        "status": "added",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/configure.ac?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,45 @@\n+dnl * Copyright 2012-2014 Luke Dashjr\n+dnl *\n+dnl * This program is free software; you can redistribute it and/or modify it\n+dnl * under the terms of the standard MIT license.  See COPYING for more details.\n+\n+AC_INIT(\n+\t[libbase58],\n+\t[0.1],\n+\t[luke_libbase58@dashjr.org],\n+\t[libbase58])\n+AC_CONFIG_AUX_DIR([.])\n+AC_PREREQ([2.59])\n+AM_INIT_AUTOMAKE([1.12 -Wall dist-xz foreign])\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_PROG_CC_C99\n+m4_ifdef([AM_PROG_AR], [AM_PROG_AR])\n+LT_INIT([])\n+\n+# http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html\n+AC_SUBST([LIBBASE58_SO_VERSION], [0:0:0])\n+\n+AC_CONFIG_FILES([Makefile\n+\tlibbase58.pc:libbase58.pc.in\n+])\n+\n+AC_CHECK_LIB([ws2_32], [strchr])\n+\n+AC_ARG_ENABLE([tool],\n+\t[AC_HELP_STRING([--disable-tool],[Compile command line base58 tool (default enabled)])],\n+\t[use_tool=$enableval],\n+\t[use_tool=auto])\n+if test x$use_tool != xno; then\n+\tAM_PATH_LIBGCRYPT([],[\n+\t\tuse_tool=yes\n+\t],[\n+\t\tif test x$use_tool = xyes; then\n+\t\t\tAC_MSG_ERROR([libgcrypt not found; use --disable-tool])\n+\t\tfi\n+\t\tuse_tool=no\n+\t])\n+fi\n+AM_CONDITIONAL([USE_TOOL], [test x$use_tool = xyes])\n+\n+AC_OUTPUT"
      },
      {
        "sha": "fafe6539fc9cdfff4f963037eb68e36a4d174d7e",
        "filename": "src/libbase58/libbase58.h",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/libbase58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/libbase58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/libbase58.h?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,23 @@\n+#ifndef LIBBASE58_H\n+#define LIBBASE58_H\n+\n+#include <stdbool.h>\n+#include <stddef.h>\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+extern bool (*b58_sha256_impl)(void *, const void *, size_t);\n+\n+extern bool b58tobin(void *bin, size_t *binsz, const char *b58, size_t b58sz);\n+extern int b58check(const void *bin, size_t binsz, const char *b58, size_t b58sz);\n+\n+extern bool b58enc(char *b58, size_t *b58sz, const void *bin, size_t binsz);\n+extern bool b58check_enc(char *b58c, size_t *b58c_sz, uint8_t ver, const void *data, size_t datasz);\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif"
      },
      {
        "sha": "0dd00b2a8cd07368d40eba4d8a536aa713644cfe",
        "filename": "src/libbase58/libbase58.pc.in",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/libbase58.pc.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/libbase58.pc.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/libbase58.pc.in?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,9 @@\n+prefix=@prefix@\n+exec_prefix=@exec_prefix@\n+libdir=@libdir@\n+includedir=@includedir@\n+\n+Name: @PACKAGE_NAME@\n+Description: Library for Bitcoin's base58 encoding.\n+Version: @PACKAGE_VERSION@\n+Libs: -L${libdir} -lbase58"
      },
      {
        "sha": "15fefe14c3c136582249f32c693dfaad4324d233",
        "filename": "src/libbase58/tests/decode-b58c-fail.sh",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/decode-b58c-fail.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/decode-b58c-fail.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/tests/decode-b58c-fail.sh?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,2 @@\n+#!/bin/sh\n+! base58 -d 25 -c 19DXstMaV43WpYg4ceREiiTv2UntmoiA9a >/dev/null\n\\ No newline at end of file"
      },
      {
        "sha": "81a25ec455a755d6005920634f43187e59e17e9e",
        "filename": "src/libbase58/tests/decode-b58c-null.sh",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/decode-b58c-null.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/decode-b58c-null.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/tests/decode-b58c-null.sh?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+hex=$(base58 -d 25 -c 19DXstMaV43WpYg4ceREiiTv2UntmoiA9a | xxd -p)\n+test x$hex = x"
      },
      {
        "sha": "aed0f680c2db1f1faa54cb9c600a388a7ef170ee",
        "filename": "src/libbase58/tests/decode-b58c-toolong.sh",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/decode-b58c-toolong.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/decode-b58c-toolong.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/tests/decode-b58c-toolong.sh?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,2 @@\n+#!/bin/sh\n+! base58 -d 25 -c 1119DXstMaV43WpYg4ceREiiTv2UntmoiA9a >/dev/null"
      },
      {
        "sha": "da592e10595e725c3c3a1cb0e93a5ec3db302155",
        "filename": "src/libbase58/tests/decode-b58c-tooshort.sh",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/decode-b58c-tooshort.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/decode-b58c-tooshort.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/tests/decode-b58c-tooshort.sh?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,2 @@\n+#!/bin/sh\n+! base58 -d 25 -c 111111111111111111114oLvT2 >/dev/null"
      },
      {
        "sha": "36ce4306b040527d27bcd20744869962e0ab48fa",
        "filename": "src/libbase58/tests/decode-b58c.sh",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/decode-b58c.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/decode-b58c.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/tests/decode-b58c.sh?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+hex=$(base58 -d 25 -c 19DXstMaV43WpYg4ceREiiTv2UntmoiA9j | xxd -p)\n+test x$hex != x005a1fc5dd9e6f03819fca94a2d89669469667f9a1"
      },
      {
        "sha": "acd3bc6b2ae03efef4334fbf7d8131dade7be200",
        "filename": "src/libbase58/tests/decode-small.sh",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/decode-small.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/decode-small.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/tests/decode-small.sh?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+hex=$(base58 -d 4 2 | xxd -p)\n+test x$hex = x01"
      },
      {
        "sha": "aac81f744c9c4a667264b30cfb492a611be7dee8",
        "filename": "src/libbase58/tests/decode-zero.sh",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/decode-zero.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/decode-zero.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/tests/decode-zero.sh?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+hex=$(base58 -d 25 111111 | xxd -p)\n+test x$hex = x000000000000"
      },
      {
        "sha": "38e74aff5d61d6794c018b282954f551df64a0fe",
        "filename": "src/libbase58/tests/decode.sh",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/decode.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/decode.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/tests/decode.sh?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+hex=$(base58 -d 50 19DXstMaV43WpYg4ceREiiTv2UntmoiA9j | xxd -p)\n+test x$hex = x005a1fc5dd9e6f03819fca94a2d89669469667f9a074655946"
      },
      {
        "sha": "1f317805ef93d7d6c1a9aac4b332695578a9a6a8",
        "filename": "src/libbase58/tests/encode-b58c.sh",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/encode-b58c.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/encode-b58c.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/tests/encode-b58c.sh?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+b58=$(echo '005a1fc5dd9e6f03819fca94a2d89669469667f9a0' | xxd -r -p | base58 -c)\n+test x$b58 = x19DXstMaV43WpYg4ceREiiTv2UntmoiA9j"
      },
      {
        "sha": "398016a0288a4c49f3d472f0205a6b4be813222b",
        "filename": "src/libbase58/tests/encode-fail.sh",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/encode-fail.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/encode-fail.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/tests/encode-fail.sh?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+b58=$(echo '005a1fc5dd9e6f03819fca94a2d89669469667f9a174655946' | xxd -r -p | base58)\n+test x$b58 != x19DXstMaV43WpYg4ceREiiTv2UntmoiA9j"
      },
      {
        "sha": "790e95c2f8a5a565f6856b5c6fc787b79a7ccbba",
        "filename": "src/libbase58/tests/encode-small.sh",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/encode-small.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/encode-small.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/tests/encode-small.sh?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+b58=$(base58 1)\n+test x$b58 = xr"
      },
      {
        "sha": "54ea7139fa453b00ee40a2d393ea07542d395245",
        "filename": "src/libbase58/tests/encode.sh",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/encode.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef5cde5eb508f4738e9e74f948d073dfcd66896/src/libbase58/tests/encode.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/libbase58/tests/encode.sh?ref=6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+b58=$(echo '005a1fc5dd9e6f03819fca94a2d89669469667f9a074655946' | xxd -r -p | base58)\n+test x$b58 = x19DXstMaV43WpYg4ceREiiTv2UntmoiA9j"
      }
    ]
  },
  {
    "sha": "b85330254cd4f1f463dd5297a832ed14dd3415ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODUzMzAyNTRjZDRmMWY0NjNkZDUyOTdhODMyZWQxNGRkMzQxNWVm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-08-18T20:35:44Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-08-18T20:35:44Z"
      },
      "message": "Use libbase58 for base58 and base58check encoding/decoding",
      "tree": {
        "sha": "142e2238ee7a0d16cb70a0c8712caa8ebfe83d5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/142e2238ee7a0d16cb70a0c8712caa8ebfe83d5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b85330254cd4f1f463dd5297a832ed14dd3415ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b85330254cd4f1f463dd5297a832ed14dd3415ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b85330254cd4f1f463dd5297a832ed14dd3415ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b85330254cd4f1f463dd5297a832ed14dd3415ef/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ef5cde5eb508f4738e9e74f948d073dfcd66896",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ef5cde5eb508f4738e9e74f948d073dfcd66896"
      }
    ],
    "stats": {
      "total": 171,
      "additions": 87,
      "deletions": 84
    },
    "files": [
      {
        "sha": "aedb0717e628821a9abf83a808422db1e36e1a29",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b85330254cd4f1f463dd5297a832ed14dd3415ef/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b85330254cd4f1f463dd5297a832ed14dd3415ef/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=b85330254cd4f1f463dd5297a832ed14dd3415ef",
        "patch": "@@ -35,6 +35,7 @@ COVERAGE_INFO = baseline_filtered_combined.info baseline.info block_test.info \\\n \n dist-hook:\n \t-$(MAKE) -C $(top_distdir)/src/leveldb clean\n+\t-$(MAKE) -C $(top_distdir)/src/libbase58 clean\n \t-$(MAKE) -C $(top_distdir)/src/secp256k1 distclean\n \t-$(GIT) archive --format=tar HEAD -- src/version.cpp | $(AMTAR) -C $(top_distdir) -xf -\n "
      },
      {
        "sha": "952bf81278f527646cdcf2692bba2d2a0814e1ab",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b85330254cd4f1f463dd5297a832ed14dd3415ef/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b85330254cd4f1f463dd5297a832ed14dd3415ef/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b85330254cd4f1f463dd5297a832ed14dd3415ef",
        "patch": "@@ -444,6 +444,18 @@ AC_SUBST(LEVELDB_CPPFLAGS)\n AC_SUBST(LIBLEVELDB)\n AC_SUBST(LIBMEMENV)\n \n+LIBBASE58_CPPFLAGS=\n+LIBBASE58=\n+AM_CONDITIONAL([EMBEDDED_LIBBASE58],[true])\n+if false; then\n+\tAC_CONFIG_SUBDIRS([src/libbase58])\n+fi\n+custom_subdirs=\"$custom_subdirs src/libbase58\"\n+custom_subdir_libbase58_args=\"--disable-shared --disable-tool\"\n+custom_subdir_libbase58_forceargs=\"CFLAGS=\\\"$CFLAGS -fPIC\\\"\"\n+AC_SUBST(LIBBASE58_CPPFLAGS)\n+AC_SUBST(LIBBASE58)\n+\n if test x$enable_wallet != xno; then\n     dnl Check for libdb_cxx only if wallet enabled\n     BITCOIN_FIND_BDB48\n@@ -794,6 +806,18 @@ AC_CONFIG_FILES([Makefile src/Makefile share/setup.nsi share/qt/Info.plist])\n AC_CONFIG_FILES([qa/pull-tester/run-bitcoind-for-test.sh],[chmod +x qa/pull-tester/run-bitcoind-for-test.sh])\n AC_CONFIG_FILES([qa/pull-tester/build-tests.sh],[chmod +x qa/pull-tester/build-tests.sh])\n AC_OUTPUT\n+if test \"$no_recursion\" != yes; then\n+\torig_subdirs=\"$subdirs\"\n+\torig_ac_configure_args=\"$ac_configure_args\"\n+\tfor custom_subdir in $custom_subdirs; do\n+\t\tsubdirs=\"$custom_subdir\"\n+\t\tcustom_subdir_base=$(basename \"$custom_subdir\")\n+\t\teval 'ac_configure_args=\"$custom_subdir_'\"$custom_subdir_base\"'_args $orig_ac_configure_args $custom_subdir_'\"$custom_subdir_base\"'_forceargs\"'\n+\t\t_AC_OUTPUT_SUBDIRS\n+\tdone\n+\tsubdirs=\"$orig_subdirs\"\n+\tac_configure_args=\"$orig_ac_configure_args\"\n+fi\n \n dnl Taken from https://wiki.debian.org/RpathIssue\n case $host in"
      },
      {
        "sha": "93b549e2c635e52fef5d7e19a8038de115fbd037",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b85330254cd4f1f463dd5297a832ed14dd3415ef/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b85330254cd4f1f463dd5297a832ed14dd3415ef/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b85330254cd4f1f463dd5297a832ed14dd3415ef",
        "patch": "@@ -20,16 +20,24 @@ $(LIBLEVELDB) $(LIBMEMENV):\n           OPT=\"$(CXXFLAGS) $(CPPFLAGS)\"\n endif\n \n+if EMBEDDED_LIBBASE58\n+LIBBASE58_CPPFLAGS += -I$(srcdir)/libbase58\n+LIBBASE58 += $(builddir)/libbase58/libbase58.la\n+\n+$(LIBBASE58):\n+\t@echo \"Building libbase58 ...\" && $(MAKE) -C $(@D) $(@F)\n+endif\n+\n BITCOIN_CONFIG_INCLUDES=-I$(builddir)/config\n-BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n+BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(LIBBASE58_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n \n if USE_LIBSECP256K1\n BITCOIN_INCLUDES += -I$(srcdir)/secp256k1/include\n endif\n \n LIBBITCOIN_SERVER=libbitcoin_server.a\n LIBBITCOIN_WALLET=libbitcoin_wallet.a\n-LIBBITCOIN_COMMON=libbitcoin_common.a\n+LIBBITCOIN_COMMON=libbitcoin_common.a $(LIBBASE58)\n LIBBITCOIN_CLI=libbitcoin_cli.a\n LIBBITCOIN_UTIL=libbitcoin_util.a\n LIBBITCOIN_CRYPTO=crypto/libbitcoin_crypto.a\n@@ -306,14 +314,15 @@ bitcoin_cli_SOURCES += bitcoin-cli-res.rc\n endif\n bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS)\n \n-CLEANFILES = leveldb/libleveldb.a leveldb/libmemenv.a *.gcda *.gcno\n+CLEANFILES = leveldb/libleveldb.a leveldb/libmemenv.a libbase58/libbase58.a *.gcda *.gcno\n \n DISTCLEANFILES = obj/build.h\n \n-EXTRA_DIST = leveldb secp256k1\n+EXTRA_DIST = leveldb libbase58 secp256k1\n \n clean-local:\n \t-$(MAKE) -C leveldb clean\n+\t-$(MAKE) -C libbase58 clean\n \t-$(MAKE) -C secp256k1 clean 2>/dev/null\n \trm -f leveldb/*/*.gcno leveldb/helpers/memenv/*.gcno\n \t-rm -f config.h"
      },
      {
        "sha": "a3cafe9757b423b63982f52c400766b82797a9c0",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 80,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b85330254cd4f1f463dd5297a832ed14dd3415ef/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b85330254cd4f1f463dd5297a832ed14dd3415ef/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=b85330254cd4f1f463dd5297a832ed14dd3415ef",
        "patch": "@@ -8,93 +8,54 @@\n #include \"uint256.h\"\n \n #include <assert.h>\n+#include <libbase58.h>\n #include <stdint.h>\n #include <string.h>\n #include <vector>\n #include <string>\n #include <boost/variant/apply_visitor.hpp>\n #include <boost/variant/static_visitor.hpp>\n \n-/* All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n-static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n-\n-bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+static\n+bool DecodeBase58_internal(const char *&psz, size_t &len, std::vector<unsigned char>& vch) {\n     // Skip leading spaces.\n     while (*psz && isspace(*psz))\n         psz++;\n-    // Skip and count leading '1's.\n-    int zeroes = 0;\n-    while (*psz == '1') {\n-        zeroes++;\n-        psz++;\n+\n+    // Skip trailing spaces.\n+    len = strlen(psz);\n+    while (len && isspace(psz[len-1]))\n+        --len;\n+    if (!len)\n+    {\n+        vch.clear();\n+        return true;\n     }\n+\n     // Allocate enough space in big-endian base256 representation.\n-    std::vector<unsigned char> b256(strlen(psz) * 733 / 1000 + 1); // log(58) / log(256), rounded up.\n-    // Process the characters.\n-    while (*psz && !isspace(*psz)) {\n-        // Decode base58 character\n-        const char *ch = strchr(pszBase58, *psz);\n-        if (ch == NULL)\n-            return false;\n-        // Apply \"b256 = b256 * 58 + ch\".\n-        int carry = ch - pszBase58;\n-        for (std::vector<unsigned char>::reverse_iterator it = b256.rbegin(); it != b256.rend(); it++) {\n-            carry += 58 * (*it);\n-            *it = carry % 256;\n-            carry /= 256;\n-        }\n-        assert(carry == 0);\n-        psz++;\n-    }\n-    // Skip trailing spaces.\n-    while (isspace(*psz))\n-        psz++;\n-    if (*psz != 0)\n-        return false;\n-    // Skip leading zeroes in b256.\n-    std::vector<unsigned char>::iterator it = b256.begin();\n-    while (it != b256.end() && *it == 0)\n-        it++;\n-    // Copy result into output vector.\n-    vch.reserve(zeroes + (b256.end() - it));\n-    vch.assign(zeroes, 0x00);\n-    while (it != b256.end())\n-      vch.push_back(*(it++));\n-    return true;\n+    size_t binlen = len * 733 / 1000 + 2;  // log(58) / log(256), rounded up.\n+    vch.resize(binlen);\n+    bool rv = b58tobin(vch.data(), &binlen, psz, len);\n+    if (rv)\n+        vch.erase(vch.begin(), vch.begin() + (vch.size() - binlen));\n+    else\n+        vch.clear();\n+    return rv;\n+}\n+\n+bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+    size_t dummy;\n+    return DecodeBase58_internal(psz, dummy, vch);\n }\n \n std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend) {\n-    // Skip & count leading zeroes.\n-    int zeroes = 0;\n-    while (pbegin != pend && *pbegin == 0) {\n-        pbegin++;\n-        zeroes++;\n-    }\n     // Allocate enough space in big-endian base58 representation.\n-    std::vector<unsigned char> b58((pend - pbegin) * 138 / 100 + 1); // log(256) / log(58), rounded up.\n-    // Process the bytes.\n-    while (pbegin != pend) {\n-        int carry = *pbegin;\n-        // Apply \"b58 = b58 * 256 + ch\".\n-        for (std::vector<unsigned char>::reverse_iterator it = b58.rbegin(); it != b58.rend(); it++) {\n-            carry += 256 * (*it);\n-            *it = carry % 58;\n-            carry /= 58;\n-        }\n-        assert(carry == 0);\n-        pbegin++;\n-    }\n-    // Skip leading zeroes in base58 result.\n-    std::vector<unsigned char>::iterator it = b58.begin();\n-    while (it != b58.end() && *it == 0)\n-        it++;\n+    std::vector<char> b58((pend - pbegin) * 138 / 100 + 2);  // log(256) / log(58), rounded up.\n+    size_t len = b58.size();\n+    if (!b58enc(b58.data(), &len, pbegin, pend - pbegin))\n+        return std::string();\n     // Translate the result into a string.\n-    std::string str;\n-    str.reserve(zeroes + (b58.end() - it));\n-    str.assign(zeroes, '1');\n-    while (it != b58.end())\n-        str += pszBase58[*(it++)];\n-    return str;\n+    return std::string(b58.data(), len - 1);\n }\n \n std::string EncodeBase58(const std::vector<unsigned char>& vch) {\n@@ -105,24 +66,32 @@ bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet) {\n     return DecodeBase58(str.c_str(), vchRet);\n }\n \n+static bool my_sha256_impl(void *digest, const void *data, size_t datasz)\n+{\n+    CSHA256().Write((unsigned char *)data, datasz).Finalize((unsigned char*)digest);\n+    return true;\n+}\n+\n std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn) {\n-    // add 4-byte hash check to the end\n-    std::vector<unsigned char> vch(vchIn);\n-    uint256 hash = Hash(vch.begin(), vch.end());\n-    vch.insert(vch.end(), (unsigned char*)&hash, (unsigned char*)&hash + 4);\n-    return EncodeBase58(vch);\n+    if (vchIn.size() < 1)\n+        return std::string();\n+    b58_sha256_impl = my_sha256_impl;\n+    std::vector<char> b58c((vchIn.size() + 4) * 138 / 100 + 2);\n+    size_t len = b58c.size();\n+    if (!b58check_enc(b58c.data(), &len, vchIn[0], &vchIn.data()[1], vchIn.size()-1))\n+        return std::string();\n+    return std::string(b58c.data(), len - 1);\n }\n \n bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet) {\n-    if (!DecodeBase58(psz, vchRet) ||\n-        (vchRet.size() < 4))\n+    size_t b58len;\n+    if (!DecodeBase58_internal(psz, b58len, vchRet))\n     {\n         vchRet.clear();\n         return false;\n     }\n-    // re-calculate the checksum, insure it matches the included 4-byte checksum\n-    uint256 hash = Hash(vchRet.begin(), vchRet.end()-4);\n-    if (memcmp(&hash, &vchRet.end()[-4], 4) != 0)\n+    b58_sha256_impl = my_sha256_impl;\n+    if (b58check(vchRet.data(), vchRet.size(), psz, b58len) < 0)\n     {\n         vchRet.clear();\n         return false;"
      }
    ]
  }
]