[
  {
    "sha": "b3b8df31343d4b1c8d0bfdfb3d94d1ae959048f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2I4ZGYzMTM0M2Q0YjFjOGQwYmZkZmIzZDk0ZDFhZTk1OTA0OGY5",
    "commit": {
      "author": {
        "name": "ptschip",
        "email": "peter.tschipper@gmail.com",
        "date": "2015-10-10T14:40:05Z"
      },
      "committer": {
        "name": "ptschip",
        "email": "peter.tschipper@gmail.com",
        "date": "2015-10-30T20:02:09Z"
      },
      "message": "Automatically adjusting Spam Block\n\nAuto adjusts -limitfreerelay and\n-minrelaytxfee up or down as the\nmemory pool grows or falls",
      "tree": {
        "sha": "ec6fa1b435d3288f073e7a0ff2c96914d643dc11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec6fa1b435d3288f073e7a0ff2c96914d643dc11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3b8df31343d4b1c8d0bfdfb3d94d1ae959048f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3b8df31343d4b1c8d0bfdfb3d94d1ae959048f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3b8df31343d4b1c8d0bfdfb3d94d1ae959048f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3b8df31343d4b1c8d0bfdfb3d94d1ae959048f9/comments",
    "author": {
      "login": "ptschip",
      "id": 12862928,
      "node_id": "MDQ6VXNlcjEyODYyOTI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/12862928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ptschip",
      "html_url": "https://github.com/ptschip",
      "followers_url": "https://api.github.com/users/ptschip/followers",
      "following_url": "https://api.github.com/users/ptschip/following{/other_user}",
      "gists_url": "https://api.github.com/users/ptschip/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ptschip/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ptschip/subscriptions",
      "organizations_url": "https://api.github.com/users/ptschip/orgs",
      "repos_url": "https://api.github.com/users/ptschip/repos",
      "events_url": "https://api.github.com/users/ptschip/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ptschip/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ptschip",
      "id": 12862928,
      "node_id": "MDQ6VXNlcjEyODYyOTI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/12862928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ptschip",
      "html_url": "https://github.com/ptschip",
      "followers_url": "https://api.github.com/users/ptschip/followers",
      "following_url": "https://api.github.com/users/ptschip/following{/other_user}",
      "gists_url": "https://api.github.com/users/ptschip/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ptschip/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ptschip/subscriptions",
      "organizations_url": "https://api.github.com/users/ptschip/orgs",
      "repos_url": "https://api.github.com/users/ptschip/repos",
      "events_url": "https://api.github.com/users/ptschip/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ptschip/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "725539ea03769416d3502feeb4dfcbec3fbb7ae0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/725539ea03769416d3502feeb4dfcbec3fbb7ae0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/725539ea03769416d3502feeb4dfcbec3fbb7ae0"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 71,
      "deletions": 7
    },
    "files": [
      {
        "sha": "ebf1a0de487d5a489fc0e166b4eb08d4a437030e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3b8df31343d4b1c8d0bfdfb3d94d1ae959048f9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3b8df31343d4b1c8d0bfdfb3d94d1ae959048f9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b3b8df31343d4b1c8d0bfdfb3d94d1ae959048f9",
        "patch": "@@ -52,6 +52,7 @@\n #include <boost/function.hpp>\n #include <boost/interprocess/sync/file_lock.hpp>\n #include <boost/thread.hpp>\n+#include <boost/lexical_cast.hpp>\n #include <openssl/crypto.h>\n \n #if ENABLE_ZMQ\n@@ -438,6 +439,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     }\n     strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(::minRelayTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-maxrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) larger than this will always be relayed (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(::minRelayTxFee.GetFeePerK() * 5)));\n     strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (showDebug)\n     {\n@@ -854,6 +857,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (nMempoolSizeLimit < 0 || nMempoolSizeLimit < nMempoolDescendantSizeLimit * 40)\n         return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) / 25));\n \n+    // -maxrelaytxfee and minrelaytxfee limits\n+    if (boost::lexical_cast<double>(GetArg(\"-minrelaytxfee\",FormatMoney(::minRelayTxFee.GetFeePerK()))) > \n+        boost::lexical_cast<double>(GetArg(\"-maxrelaytxfee\",FormatMoney(::minRelayTxFee.GetFeePerK() * 5))))\n+        return InitError(_(\"-minrelaytxfee must be less than -maxrelaytxfee.\"));\n+\n+\n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n     nScriptCheckThreads = GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n     if (nScriptCheckThreads <= 0)"
      },
      {
        "sha": "1596cc31d2375cd0993d73aac9e3666922c01918",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 7,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3b8df31343d4b1c8d0bfdfb3d94d1ae959048f9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3b8df31343d4b1c8d0bfdfb3d94d1ae959048f9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b3b8df31343d4b1c8d0bfdfb3d94d1ae959048f9",
        "patch": "@@ -918,28 +918,77 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n         }\n \n-        // Continuously rate-limit free (really, very-low-fee) transactions\n-        // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n-        // be annoying or make others' transactions take longer to confirm.\n+        /* Continuously rate-limit free (really, very-low-fee) transactions\n+         * This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n+         * be annoying or make others' transactions take longer to confirm. */\n+        static const double maxFeeCutoff = boost::lexical_cast<double>(GetArg(\"-maxrelaytxfee\",FormatMoney(::minRelayTxFee.GetFeePerK() * 5))) * 100000000/1000; /* maximum feeCutoff in satoshi per byte */\n+\tstatic const double initFeeCutoff = boost::lexical_cast<double>(GetArg(\"-minrelaytxfee\",FormatMoney(::minRelayTxFee.GetFeePerK()))) * 100000000/1000; /* starting value for feeCutoff in satoshi per byte*/\n+        static const uint64_t maxBlockSize = GetArg(\"-blockmaxsize\", MAX_BLOCK_SIZE); \n+        static const int nLimitFreeRelay = GetArg(\"-limitfreerelay\", DEFAULT_LIMIT_FREE_RELAY); \n+\n+        // get current memory pool size\n+        uint64_t poolBytes = pool.GetTotalTxSize();\n+\n+\t// Calculate feeCutoff in satoshis per byte:\n+\t//   When the feeCutoff is larger than the satoshiPerByte of the \n+\t//   current transaction then spam blocking will be in effect. However\n+\t//   Some free transactions will still get through based on -limitfreerelay\n+        static double feeCutoff;\n+        static double nFreeLimit = nLimitFreeRelay;\n+        static int64_t nLastTime;\n+        int64_t nNow = GetTime();\n+\n+        // When the mempool starts falling use an exponentially decaying ~24 hour window:\n+        //nFreeLimit = nFreeLimit + ((double)(DEFAULT_LIMIT_FREE_RELAY - nFreeLimit)/pow(1.0 - 1.0/86400, (double)(nNow - nLastTime)));\n+        nFreeLimit /= pow(1.0 - 1.0/86400, (double)(nNow - nLastTime));\n+\n+        // When the mempool starts falling use an exponentially decaying ~24 hour window:\n+        feeCutoff *= pow(1.0 - 1.0/86400, (double)(nNow - nLastTime));\n+\n+        if (poolBytes < maxBlockSize) {\n+            feeCutoff = std::max(feeCutoff,initFeeCutoff);\n+            nFreeLimit = std::min(nFreeLimit,(double)nLimitFreeRelay);\n+        }\n+        else if(poolBytes < (maxBlockSize * MAX_BLOCK_SIZE_MULTIPLYER)) {\n+            // Gradually choke off what is considered a free transaction\n+            feeCutoff = std::max(feeCutoff,initFeeCutoff + ((maxFeeCutoff - initFeeCutoff) * (poolBytes - maxBlockSize) / (maxBlockSize * (MAX_BLOCK_SIZE_MULTIPLYER-1))));\n+\n+            // Gradually choke off the nFreeLimit as well but leave at least MIN_LIMIT_FREE_RELAY\n+            // So that some free transactions can still get through\n+            nFreeLimit = std::min(nFreeLimit,((double)nLimitFreeRelay - ((double)(nLimitFreeRelay - MIN_LIMIT_FREE_RELAY) * (double)(poolBytes - maxBlockSize) / (maxBlockSize * (MAX_BLOCK_SIZE_MULTIPLYER-1)))));\n+            if(nFreeLimit < MIN_LIMIT_FREE_RELAY)\n+                nFreeLimit = MIN_LIMIT_FREE_RELAY;\n+        }\n+        else {\n+            feeCutoff = maxFeeCutoff;\n+            nFreeLimit = MIN_LIMIT_FREE_RELAY;\n+        }\n+\n+        minRelayTxFee = CFeeRate(feeCutoff * 1000); \n+        LogPrint(\"mempool\",\n+                 \"MempoolBytes:%d  LimitFreeRelay:%.5g  FeeCutOff:%.4g  FeesSatoshiPerByte:%.4g  TxBytes:%d  TxFees:%d\\n\",\n+                  poolBytes,nFreeLimit,((double)::minRelayTxFee.GetFee(nSize))/nSize, ((double)nFees)/nSize,nSize, nFees);\n         if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize))\n         {\n             static CCriticalSection csFreeLimiter;\n             static double dFreeCount;\n-            static int64_t nLastTime;\n-            int64_t nNow = GetTime();\n \n             LOCK(csFreeLimiter);\n \n             // Use an exponentially decaying ~10-minute window:\n             dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n             nLastTime = nNow;\n+\n             // -limitfreerelay unit is thousand-bytes-per-minute\n             // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n+            if ((dFreeCount + nSize) >= nFreeLimit*10*1000)\n+                return state.DoS(0, \n+                       error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n+                       REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n             dFreeCount += nSize;\n         }\n+        nLastTime = nNow;\n \n         if (fRejectAbsurdFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n             return state.Invalid(false,"
      },
      {
        "sha": "1f9d4a097b948bef4b70c7781ba6192a5e42830d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3b8df31343d4b1c8d0bfdfb3d94d1ae959048f9/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3b8df31343d4b1c8d0bfdfb3d94d1ae959048f9/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b3b8df31343d4b1c8d0bfdfb3d94d1ae959048f9",
        "patch": "@@ -83,6 +83,12 @@ static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;\n static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;\n /** Maximum length of reject messages. */\n static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n+/** The number of block heights to gradually choke spam transactions over */\n+static const unsigned int MAX_BLOCK_SIZE_MULTIPLYER = 10;\n+/** The minimum value possible for -limitfreerelay when rate limiting */\n+static const unsigned int MIN_LIMIT_FREE_RELAY = 1;\n+/** The default value for -limitfreerelay */\n+static const unsigned int DEFAULT_LIMIT_FREE_RELAY = 15;\n \n struct BlockHasher\n {"
      }
    ]
  }
]