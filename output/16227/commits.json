[
  {
    "sha": "1b699a5083b435c2b79f3951f94ac9f967d24f6c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjY5OWE1MDgzYjQzNWMyYjc5ZjM5NTFmOTRhYzlmOTY3ZDI0ZjZj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-06T07:53:01Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-03T23:43:02Z"
      },
      "message": "Add HaveKey and HaveCScript to SigningProvider",
      "tree": {
        "sha": "3147f82544a1cbd3dbb645be255cebba788b140a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3147f82544a1cbd3dbb645be255cebba788b140a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b699a5083b435c2b79f3951f94ac9f967d24f6c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b699a5083b435c2b79f3951f94ac9f967d24f6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b699a5083b435c2b79f3951f94ac9f967d24f6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b699a5083b435c2b79f3951f94ac9f967d24f6c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1381ddbcfcb6429b1327fd3db91ef97d8603aef9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1381ddbcfcb6429b1327fd3db91ef97d8603aef9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1381ddbcfcb6429b1327fd3db91ef97d8603aef9"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fd2212afcb51ae2207087bbe7d7c2cf9b02c2b2a",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b699a5083b435c2b79f3951f94ac9f967d24f6c/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b699a5083b435c2b79f3951f94ac9f967d24f6c/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=1b699a5083b435c2b79f3951f94ac9f967d24f6c",
        "patch": "@@ -23,12 +23,10 @@ class CKeyStore : public SigningProvider\n     virtual bool AddKeyPubKey(const CKey &key, const CPubKey &pubkey) =0;\n \n     //! Check whether a key corresponding to a given address is present in the store.\n-    virtual bool HaveKey(const CKeyID &address) const =0;\n     virtual std::set<CKeyID> GetKeys() const =0;\n \n     //! Support for BIP 0013 : see https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki\n     virtual bool AddCScript(const CScript& redeemScript) =0;\n-    virtual bool HaveCScript(const CScriptID &hash) const =0;\n     virtual std::set<CScriptID> GetCScripts() const =0;\n \n     //! Support for Watch-only addresses"
      },
      {
        "sha": "9df4dc98fa47277bfd071270e69724f2972b33d4",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b699a5083b435c2b79f3951f94ac9f967d24f6c/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b699a5083b435c2b79f3951f94ac9f967d24f6c/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=1b699a5083b435c2b79f3951f94ac9f967d24f6c",
        "patch": "@@ -51,8 +51,10 @@ class SigningProvider\n public:\n     virtual ~SigningProvider() {}\n     virtual bool GetCScript(const CScriptID &scriptid, CScript& script) const { return false; }\n+    virtual bool HaveCScript(const CScriptID &scriptid) const { return false; }\n     virtual bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const { return false; }\n     virtual bool GetKey(const CKeyID &address, CKey& key) const { return false; }\n+    virtual bool HaveKey(const CKeyID &address) const { return false; }\n     virtual bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const { return false; }\n };\n "
      }
    ]
  },
  {
    "sha": "c7797ec65544bd23a2e571b2892e1bf512f2a485",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzc5N2VjNjU1NDRiZDIzYTJlNTcxYjI4OTJlMWJmNTEyZjJhNDg1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-06T14:31:31Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T19:28:41Z"
      },
      "message": "Remove CKeyStore and squash into CBasicKeyStore",
      "tree": {
        "sha": "d473c0d165c5fda861811ee0403f8a6ca2b0c846",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d473c0d165c5fda861811ee0403f8a6ca2b0c846"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7797ec65544bd23a2e571b2892e1bf512f2a485",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7797ec65544bd23a2e571b2892e1bf512f2a485",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7797ec65544bd23a2e571b2892e1bf512f2a485",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7797ec65544bd23a2e571b2892e1bf512f2a485/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b699a5083b435c2b79f3951f94ac9f967d24f6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b699a5083b435c2b79f3951f94ac9f967d24f6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b699a5083b435c2b79f3951f94ac9f967d24f6c"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 31,
      "deletions": 52
    },
    "files": [
      {
        "sha": "75776727a6162ef1ff0f353afaf8b1ea0501681f",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7797ec65544bd23a2e571b2892e1bf512f2a485/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7797ec65544bd23a2e571b2892e1bf512f2a485/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=c7797ec65544bd23a2e571b2892e1bf512f2a485",
        "patch": "@@ -631,7 +631,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n         }\n     }\n \n-    const CKeyStore& keystore = tempKeystore;\n+    const CBasicKeyStore& keystore = tempKeystore;\n \n     bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n "
      },
      {
        "sha": "8c149a92500579cfcc5296cb0e87bd118f17975d",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7797ec65544bd23a2e571b2892e1bf512f2a485/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7797ec65544bd23a2e571b2892e1bf512f2a485/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=c7797ec65544bd23a2e571b2892e1bf512f2a485",
        "patch": "@@ -174,7 +174,7 @@ bool CBasicKeyStore::HaveWatchOnly() const\n     return (!setWatchOnly.empty());\n }\n \n-CKeyID GetKeyForDestination(const CKeyStore& store, const CTxDestination& dest)\n+CKeyID GetKeyForDestination(const CBasicKeyStore& store, const CTxDestination& dest)\n {\n     // Only supports destinations which map to single public keys, i.e. P2PKH,\n     // P2WPKH, and P2SH-P2WPKH.\n@@ -197,7 +197,7 @@ CKeyID GetKeyForDestination(const CKeyStore& store, const CTxDestination& dest)\n     return CKeyID();\n }\n \n-bool HaveKey(const CKeyStore& store, const CKey& key)\n+bool HaveKey(const CBasicKeyStore& store, const CKey& key)\n {\n     CKey key2;\n     key2.Set(key.begin(), key.end(), !key.IsCompressed());"
      },
      {
        "sha": "b8f5a430eb6fab4393cfc4e2f0eee85db565b335",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 19,
        "deletions": 40,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7797ec65544bd23a2e571b2892e1bf512f2a485/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7797ec65544bd23a2e571b2892e1bf512f2a485/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=c7797ec65544bd23a2e571b2892e1bf512f2a485",
        "patch": "@@ -15,29 +15,8 @@\n \n #include <boost/signals2/signal.hpp>\n \n-/** A virtual base class for key stores */\n-class CKeyStore : public SigningProvider\n-{\n-public:\n-    //! Add a key to the store.\n-    virtual bool AddKeyPubKey(const CKey &key, const CPubKey &pubkey) =0;\n-\n-    //! Check whether a key corresponding to a given address is present in the store.\n-    virtual std::set<CKeyID> GetKeys() const =0;\n-\n-    //! Support for BIP 0013 : see https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki\n-    virtual bool AddCScript(const CScript& redeemScript) =0;\n-    virtual std::set<CScriptID> GetCScripts() const =0;\n-\n-    //! Support for Watch-only addresses\n-    virtual bool AddWatchOnly(const CScript &dest) =0;\n-    virtual bool RemoveWatchOnly(const CScript &dest) =0;\n-    virtual bool HaveWatchOnly(const CScript &dest) const =0;\n-    virtual bool HaveWatchOnly() const =0;\n-};\n-\n /** Basic key store, that keeps keys in an address->secret map */\n-class CBasicKeyStore : public CKeyStore\n+class CBasicKeyStore : public SigningProvider\n {\n protected:\n     mutable CCriticalSection cs_KeyStore;\n@@ -55,27 +34,27 @@ class CBasicKeyStore : public CKeyStore\n     void ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n public:\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n-    bool AddKey(const CKey &key) { return AddKeyPubKey(key, key.GetPubKey()); }\n-    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n-    bool HaveKey(const CKeyID &address) const override;\n-    std::set<CKeyID> GetKeys() const override;\n-    bool GetKey(const CKeyID &address, CKey &keyOut) const override;\n-    bool AddCScript(const CScript& redeemScript) override;\n-    bool HaveCScript(const CScriptID &hash) const override;\n-    std::set<CScriptID> GetCScripts() const override;\n-    bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;\n-\n-    bool AddWatchOnly(const CScript &dest) override;\n-    bool RemoveWatchOnly(const CScript &dest) override;\n-    bool HaveWatchOnly(const CScript &dest) const override;\n-    bool HaveWatchOnly() const override;\n+    virtual bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n+    virtual bool AddKey(const CKey &key) { return AddKeyPubKey(key, key.GetPubKey()); }\n+    virtual bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    virtual bool HaveKey(const CKeyID &address) const override;\n+    virtual std::set<CKeyID> GetKeys() const;\n+    virtual bool GetKey(const CKeyID &address, CKey &keyOut) const override;\n+    virtual bool AddCScript(const CScript& redeemScript);\n+    virtual bool HaveCScript(const CScriptID &hash) const override;\n+    virtual std::set<CScriptID> GetCScripts() const;\n+    virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;\n+\n+    virtual bool AddWatchOnly(const CScript &dest);\n+    virtual bool RemoveWatchOnly(const CScript &dest);\n+    virtual bool HaveWatchOnly(const CScript &dest) const;\n+    virtual bool HaveWatchOnly() const;\n };\n \n /** Return the CKeyID of the key involved in a script (if there is a unique one). */\n-CKeyID GetKeyForDestination(const CKeyStore& store, const CTxDestination& dest);\n+CKeyID GetKeyForDestination(const CBasicKeyStore& store, const CTxDestination& dest);\n \n-/** Checks if a CKey is in the given CKeyStore compressed or otherwise*/\n-bool HaveKey(const CKeyStore& store, const CKey& key);\n+/** Checks if a CKey is in the given CBasicKeyStore compressed or otherwise*/\n+bool HaveKey(const CBasicKeyStore& store, const CKey& key);\n \n #endif // BITCOIN_KEYSTORE_H"
      },
      {
        "sha": "13ce1e29a26a4142d1e6e5ae7845fe1e16740ed9",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7797ec65544bd23a2e571b2892e1bf512f2a485/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7797ec65544bd23a2e571b2892e1bf512f2a485/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=c7797ec65544bd23a2e571b2892e1bf512f2a485",
        "patch": "@@ -73,7 +73,7 @@ std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key)\n     }\n }\n \n-CTxDestination AddAndGetDestinationForScript(CKeyStore& keystore, const CScript& script, OutputType type)\n+CTxDestination AddAndGetDestinationForScript(CBasicKeyStore& keystore, const CScript& script, OutputType type)\n {\n     // Add script to keystore\n     keystore.AddCScript(script);"
      },
      {
        "sha": "d07e6ba08cdc5fcfaaf7746348048c3b62535965",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7797ec65544bd23a2e571b2892e1bf512f2a485/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7797ec65544bd23a2e571b2892e1bf512f2a485/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=c7797ec65544bd23a2e571b2892e1bf512f2a485",
        "patch": "@@ -44,7 +44,7 @@ std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key);\n  * This function will automatically add the script (and any other\n  * necessary scripts) to the keystore.\n  */\n-CTxDestination AddAndGetDestinationForScript(CKeyStore& keystore, const CScript& script, OutputType);\n+CTxDestination AddAndGetDestinationForScript(CBasicKeyStore& keystore, const CScript& script, OutputType);\n \n #endif // BITCOIN_OUTPUTTYPE_H\n "
      },
      {
        "sha": "65a1b39dd04da03a3508a6c6fc8b4690c0de34b4",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7797ec65544bd23a2e571b2892e1bf512f2a485/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7797ec65544bd23a2e571b2892e1bf512f2a485/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=c7797ec65544bd23a2e571b2892e1bf512f2a485",
        "patch": "@@ -131,8 +131,8 @@ CPubKey HexToPubKey(const std::string& hex_in)\n     return vchPubKey;\n }\n \n-// Retrieves a public key for an address from the given CKeyStore\n-CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in)\n+// Retrieves a public key for an address from the given CBasicKeyStore\n+CPubKey AddrToPubKey(CBasicKeyStore* const keystore, const std::string& addr_in)\n {\n     CTxDestination dest = DecodeDestination(addr_in);\n     if (!IsValidDestination(dest)) {\n@@ -153,7 +153,7 @@ CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in)\n }\n \n // Creates a multisig address from a given list of public keys, number of signatures required, and the address type\n-CTxDestination AddAndGetMultisigDestination(const int required, const std::vector<CPubKey>& pubkeys, OutputType type, CKeyStore& keystore, CScript& script_out)\n+CTxDestination AddAndGetMultisigDestination(const int required, const std::vector<CPubKey>& pubkeys, OutputType type, CBasicKeyStore& keystore, CScript& script_out)\n {\n     // Gather public keys\n     if (required < 1) {"
      },
      {
        "sha": "b22b4dd54e97d278e83d83f23d8883bdc1bc8a76",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7797ec65544bd23a2e571b2892e1bf512f2a485/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7797ec65544bd23a2e571b2892e1bf512f2a485/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=c7797ec65544bd23a2e571b2892e1bf512f2a485",
        "patch": "@@ -19,7 +19,7 @@\n \n #include <boost/variant.hpp>\n \n-class CKeyStore;\n+class CBasicKeyStore;\n class CPubKey;\n class CScript;\n struct InitInterfaces;\n@@ -72,8 +72,8 @@ extern std::string HelpExampleCli(const std::string& methodname, const std::stri\n extern std::string HelpExampleRpc(const std::string& methodname, const std::string& args);\n \n CPubKey HexToPubKey(const std::string& hex_in);\n-CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in);\n-CTxDestination AddAndGetMultisigDestination(const int required, const std::vector<CPubKey>& pubkeys, OutputType type, CKeyStore& keystore, CScript& script_out);\n+CPubKey AddrToPubKey(CBasicKeyStore* const keystore, const std::string& addr_in);\n+CTxDestination AddAndGetMultisigDestination(const int required, const std::vector<CPubKey>& pubkeys, OutputType type, CBasicKeyStore& keystore, CScript& script_out);\n \n UniValue DescribeAddress(const CTxDestination& dest);\n "
      },
      {
        "sha": "8c1b56ccf2bab2a2b674e4918e996ff2d6971407",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7797ec65544bd23a2e571b2892e1bf512f2a485/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7797ec65544bd23a2e571b2892e1bf512f2a485/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=c7797ec65544bd23a2e571b2892e1bf512f2a485",
        "patch": "@@ -346,7 +346,7 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     BOOST_CHECK_EQUAL(coins.GetValueIn(CTransaction(t1)), (50+21+22)*CENT);\n }\n \n-static void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, CTransactionRef& output, CMutableTransaction& input, bool success = true)\n+static void CreateCreditAndSpend(const CBasicKeyStore& keystore, const CScript& outscript, CTransactionRef& output, CMutableTransaction& input, bool success = true)\n {\n     CMutableTransaction outputm;\n     outputm.nVersion = 1;"
      }
    ]
  },
  {
    "sha": "a913e3f2fbeb1352fc66f334d4f5f7332ea89ad7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTEzZTNmMmZiZWIxMzUyZmM2NmYzMzRkNGY1ZjczMzJlYTg5YWQ3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-06T14:49:52Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T20:20:12Z"
      },
      "message": "Move HaveKey static function from keystore to rpcwallet where it is used",
      "tree": {
        "sha": "72bd15fc29edf598ed19f61959a78d9270033768",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72bd15fc29edf598ed19f61959a78d9270033768"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a913e3f2fbeb1352fc66f334d4f5f7332ea89ad7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a913e3f2fbeb1352fc66f334d4f5f7332ea89ad7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a913e3f2fbeb1352fc66f334d4f5f7332ea89ad7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a913e3f2fbeb1352fc66f334d4f5f7332ea89ad7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7797ec65544bd23a2e571b2892e1bf512f2a485",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7797ec65544bd23a2e571b2892e1bf512f2a485",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7797ec65544bd23a2e571b2892e1bf512f2a485"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 8,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0319c469fcd895c8990d05e66d106d3fceeab06c",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a913e3f2fbeb1352fc66f334d4f5f7332ea89ad7/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a913e3f2fbeb1352fc66f334d4f5f7332ea89ad7/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=a913e3f2fbeb1352fc66f334d4f5f7332ea89ad7",
        "patch": "@@ -196,10 +196,3 @@ CKeyID GetKeyForDestination(const CBasicKeyStore& store, const CTxDestination& d\n     }\n     return CKeyID();\n }\n-\n-bool HaveKey(const CBasicKeyStore& store, const CKey& key)\n-{\n-    CKey key2;\n-    key2.Set(key.begin(), key.end(), !key.IsCompressed());\n-    return store.HaveKey(key.GetPubKey().GetID()) || store.HaveKey(key2.GetPubKey().GetID());\n-}"
      },
      {
        "sha": "3e46acda1d098c78d6a760a497df4efa850a83d8",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a913e3f2fbeb1352fc66f334d4f5f7332ea89ad7/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a913e3f2fbeb1352fc66f334d4f5f7332ea89ad7/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=a913e3f2fbeb1352fc66f334d4f5f7332ea89ad7",
        "patch": "@@ -54,7 +54,4 @@ class CBasicKeyStore : public SigningProvider\n /** Return the CKeyID of the key involved in a script (if there is a unique one). */\n CKeyID GetKeyForDestination(const CBasicKeyStore& store, const CTxDestination& dest);\n \n-/** Checks if a CKey is in the given CBasicKeyStore compressed or otherwise*/\n-bool HaveKey(const CBasicKeyStore& store, const CKey& key);\n-\n #endif // BITCOIN_KEYSTORE_H"
      },
      {
        "sha": "bc8666578258e0c0258ec8518d7c725c1164749a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a913e3f2fbeb1352fc66f334d4f5f7332ea89ad7/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a913e3f2fbeb1352fc66f334d4f5f7332ea89ad7/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a913e3f2fbeb1352fc66f334d4f5f7332ea89ad7",
        "patch": "@@ -52,6 +52,14 @@ static inline bool GetAvoidReuseFlag(CWallet * const pwallet, const UniValue& pa\n     return avoid_reuse;\n }\n \n+/** Checks if a CKey is in the given CWallet compressed or otherwise*/\n+bool HaveKey(const CWallet& wallet, const CKey& key)\n+{\n+    CKey key2;\n+    key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+    return wallet.HaveKey(key.GetPubKey().GetID()) || wallet.HaveKey(key2.GetPubKey().GetID());\n+}\n+\n bool GetWalletNameFromJSONRPCRequest(const JSONRPCRequest& request, std::string& wallet_name)\n {\n     if (request.URI.substr(0, WALLET_ENDPOINT_BASE.size()) == WALLET_ENDPOINT_BASE) {"
      }
    ]
  },
  {
    "sha": "d9becff4e13da8e182631baa79b9794c03d44434",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWJlY2ZmNGUxM2RhOGUxODI2MzFiYWE3OWI5Nzk0YzAzZDQ0NDM0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-06T14:33:23Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T20:20:18Z"
      },
      "message": "scripted-diff: rename CBasicKeyStore to FillableSigningProvider\n\n-BEGIN VERIFY SCRIPT-\ngit grep -l \"CBasicKeyStore\" | xargs sed -i -e 's/CBasicKeyStore/FillableSigningProvider/g'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "8b793f84bd72bd11b9753a1591f811fefafe1da2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b793f84bd72bd11b9753a1591f811fefafe1da2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9becff4e13da8e182631baa79b9794c03d44434",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9becff4e13da8e182631baa79b9794c03d44434",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9becff4e13da8e182631baa79b9794c03d44434",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9becff4e13da8e182631baa79b9794c03d44434/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a913e3f2fbeb1352fc66f334d4f5f7332ea89ad7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a913e3f2fbeb1352fc66f334d4f5f7332ea89ad7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a913e3f2fbeb1352fc66f334d4f5f7332ea89ad7"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 58,
      "deletions": 58
    },
    "files": [
      {
        "sha": "39463dc6f8aa4149b63836f92adac60cde31b2c1",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -375,7 +375,7 @@ reported in the debug.log file.\n \n Re-architecting the core code so there are better-defined interfaces\n between the various components is a goal, with any necessary locking\n-done by the components (e.g. see the self-contained `CBasicKeyStore` class\n+done by the components (e.g. see the self-contained `FillableSigningProvider` class\n and its `cs_KeyStore` lock for example).\n \n Threads"
      },
      {
        "sha": "57a8e164cb402c02a04370c36488bceb63ac3287",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -17,7 +17,7 @@\n // paid to a TX_PUBKEYHASH.\n //\n static std::vector<CMutableTransaction>\n-SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n+SetupDummyInputs(FillableSigningProvider& keystoreRet, CCoinsViewCache& coinsRet)\n {\n     std::vector<CMutableTransaction> dummyTransactions;\n     dummyTransactions.resize(2);\n@@ -55,7 +55,7 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n // (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n static void CCoinsCaching(benchmark::State& state)\n {\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n     std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);"
      },
      {
        "sha": "271f064690def7dd2ef9eb9837bdb10bd84a9834",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -557,7 +557,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n \n     if (!registers.count(\"privatekeys\"))\n         throw std::runtime_error(\"privatekeys register variable must be set.\");\n-    CBasicKeyStore tempKeystore;\n+    FillableSigningProvider tempKeystore;\n     UniValue keysObj = registers[\"privatekeys\"];\n \n     for (unsigned int kidx = 0; kidx < keysObj.size(); kidx++) {\n@@ -631,7 +631,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n         }\n     }\n \n-    const CBasicKeyStore& keystore = tempKeystore;\n+    const FillableSigningProvider& keystore = tempKeystore;\n \n     bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n "
      },
      {
        "sha": "6f331ffa5ec86e5af733e847f69fd8855de0ce39",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -7,7 +7,7 @@\n \n #include <util/system.h>\n \n-void CBasicKeyStore::ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey)\n+void FillableSigningProvider::ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey)\n {\n     AssertLockHeld(cs_KeyStore);\n     CKeyID key_id = pubkey.GetID();\n@@ -32,7 +32,7 @@ void CBasicKeyStore::ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey)\n     }\n }\n \n-bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n+bool FillableSigningProvider::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n {\n     CKey key;\n     if (!GetKey(address, key)) {\n@@ -48,21 +48,21 @@ bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) con\n     return true;\n }\n \n-bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n+bool FillableSigningProvider::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n {\n     LOCK(cs_KeyStore);\n     mapKeys[pubkey.GetID()] = key;\n     ImplicitlyLearnRelatedKeyScripts(pubkey);\n     return true;\n }\n \n-bool CBasicKeyStore::HaveKey(const CKeyID &address) const\n+bool FillableSigningProvider::HaveKey(const CKeyID &address) const\n {\n     LOCK(cs_KeyStore);\n     return mapKeys.count(address) > 0;\n }\n \n-std::set<CKeyID> CBasicKeyStore::GetKeys() const\n+std::set<CKeyID> FillableSigningProvider::GetKeys() const\n {\n     LOCK(cs_KeyStore);\n     std::set<CKeyID> set_address;\n@@ -72,7 +72,7 @@ std::set<CKeyID> CBasicKeyStore::GetKeys() const\n     return set_address;\n }\n \n-bool CBasicKeyStore::GetKey(const CKeyID &address, CKey &keyOut) const\n+bool FillableSigningProvider::GetKey(const CKeyID &address, CKey &keyOut) const\n {\n     LOCK(cs_KeyStore);\n     KeyMap::const_iterator mi = mapKeys.find(address);\n@@ -83,23 +83,23 @@ bool CBasicKeyStore::GetKey(const CKeyID &address, CKey &keyOut) const\n     return false;\n }\n \n-bool CBasicKeyStore::AddCScript(const CScript& redeemScript)\n+bool FillableSigningProvider::AddCScript(const CScript& redeemScript)\n {\n     if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n-        return error(\"CBasicKeyStore::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n+        return error(\"FillableSigningProvider::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n \n     LOCK(cs_KeyStore);\n     mapScripts[CScriptID(redeemScript)] = redeemScript;\n     return true;\n }\n \n-bool CBasicKeyStore::HaveCScript(const CScriptID& hash) const\n+bool FillableSigningProvider::HaveCScript(const CScriptID& hash) const\n {\n     LOCK(cs_KeyStore);\n     return mapScripts.count(hash) > 0;\n }\n \n-std::set<CScriptID> CBasicKeyStore::GetCScripts() const\n+std::set<CScriptID> FillableSigningProvider::GetCScripts() const\n {\n     LOCK(cs_KeyStore);\n     std::set<CScriptID> set_script;\n@@ -109,7 +109,7 @@ std::set<CScriptID> CBasicKeyStore::GetCScripts() const\n     return set_script;\n }\n \n-bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const\n+bool FillableSigningProvider::GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const\n {\n     LOCK(cs_KeyStore);\n     ScriptMap::const_iterator mi = mapScripts.find(hash);\n@@ -137,7 +137,7 @@ static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)\n     return true;\n }\n \n-bool CBasicKeyStore::AddWatchOnly(const CScript &dest)\n+bool FillableSigningProvider::AddWatchOnly(const CScript &dest)\n {\n     LOCK(cs_KeyStore);\n     setWatchOnly.insert(dest);\n@@ -149,7 +149,7 @@ bool CBasicKeyStore::AddWatchOnly(const CScript &dest)\n     return true;\n }\n \n-bool CBasicKeyStore::RemoveWatchOnly(const CScript &dest)\n+bool FillableSigningProvider::RemoveWatchOnly(const CScript &dest)\n {\n     LOCK(cs_KeyStore);\n     setWatchOnly.erase(dest);\n@@ -162,19 +162,19 @@ bool CBasicKeyStore::RemoveWatchOnly(const CScript &dest)\n     return true;\n }\n \n-bool CBasicKeyStore::HaveWatchOnly(const CScript &dest) const\n+bool FillableSigningProvider::HaveWatchOnly(const CScript &dest) const\n {\n     LOCK(cs_KeyStore);\n     return setWatchOnly.count(dest) > 0;\n }\n \n-bool CBasicKeyStore::HaveWatchOnly() const\n+bool FillableSigningProvider::HaveWatchOnly() const\n {\n     LOCK(cs_KeyStore);\n     return (!setWatchOnly.empty());\n }\n \n-CKeyID GetKeyForDestination(const CBasicKeyStore& store, const CTxDestination& dest)\n+CKeyID GetKeyForDestination(const FillableSigningProvider& store, const CTxDestination& dest)\n {\n     // Only supports destinations which map to single public keys, i.e. P2PKH,\n     // P2WPKH, and P2SH-P2WPKH."
      },
      {
        "sha": "98209d4a4390b9e5338cc9f9ab3a12edd69db209",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -16,7 +16,7 @@\n #include <boost/signals2/signal.hpp>\n \n /** Basic key store, that keeps keys in an address->secret map */\n-class CBasicKeyStore : public SigningProvider\n+class FillableSigningProvider : public SigningProvider\n {\n protected:\n     mutable CCriticalSection cs_KeyStore;\n@@ -52,6 +52,6 @@ class CBasicKeyStore : public SigningProvider\n };\n \n /** Return the CKeyID of the key involved in a script (if there is a unique one). */\n-CKeyID GetKeyForDestination(const CBasicKeyStore& store, const CTxDestination& dest);\n+CKeyID GetKeyForDestination(const FillableSigningProvider& store, const CTxDestination& dest);\n \n #endif // BITCOIN_KEYSTORE_H"
      },
      {
        "sha": "fce5a1783acd531d6d4e97eabfd83a45367ce850",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -73,7 +73,7 @@ std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key)\n     }\n }\n \n-CTxDestination AddAndGetDestinationForScript(CBasicKeyStore& keystore, const CScript& script, OutputType type)\n+CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore, const CScript& script, OutputType type)\n {\n     // Add script to keystore\n     keystore.AddCScript(script);"
      },
      {
        "sha": "dbaf0ee380557befd5842e7ffe108a99f4b19a9a",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -44,7 +44,7 @@ std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key);\n  * This function will automatically add the script (and any other\n  * necessary scripts) to the keystore.\n  */\n-CTxDestination AddAndGetDestinationForScript(CBasicKeyStore& keystore, const CScript& script, OutputType);\n+CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore, const CScript& script, OutputType);\n \n #endif // BITCOIN_OUTPUTTYPE_H\n "
      },
      {
        "sha": "103ae62834efb362441f038e25494692a742faad",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -122,7 +122,7 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     }\n \n     // Construct using pay-to-script-hash:\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     CScript inner;\n     const CTxDestination dest = AddAndGetMultisigDestination(required, pubkeys, output_type, keystore, inner);\n "
      },
      {
        "sha": "b8cc4abbd7f6975c044992b8cae84220f363ff5d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -761,7 +761,7 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     }\n \n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     const UniValue& keys = request.params[1].get_array();\n     for (unsigned int idx = 0; idx < keys.size(); ++idx) {\n         UniValue k = keys[idx];"
      },
      {
        "sha": "9da48da0ab41b81c6c6b9c31c76c0e3201a08e53",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -148,7 +148,7 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n     vErrorsRet.push_back(entry);\n }\n \n-UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore* keystore, std::map<COutPoint, Coin>& coins, bool is_temp_keystore, const UniValue& hashType)\n+UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins, bool is_temp_keystore, const UniValue& hashType)\n {\n     // Add previous txouts given in the RPC call:\n     if (!prevTxsUnival.isNull()) {"
      },
      {
        "sha": "d198887b935d77a8614be71fe22b9b032fafd3c9",
        "filename": "src/rpc/rawtransaction_util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/rpc/rawtransaction_util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/rpc/rawtransaction_util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.h?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -7,7 +7,7 @@\n \n #include <map>\n \n-class CBasicKeyStore;\n+class FillableSigningProvider;\n class UniValue;\n struct CMutableTransaction;\n class Coin;\n@@ -24,7 +24,7 @@ class COutPoint;\n  * @param  hashType      The signature hash type\n  * @returns JSON object with details of signed transaction\n  */\n-UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxs, CBasicKeyStore* keystore, std::map<COutPoint, Coin>& coins, bool tempKeystore, const UniValue& hashType);\n+UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxs, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins, bool tempKeystore, const UniValue& hashType);\n \n /** Create a transaction from univalue parameters */\n CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, const UniValue& rbf);"
      },
      {
        "sha": "86f0dd24bb007292cf822ee0a65134750ea057d5",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -131,8 +131,8 @@ CPubKey HexToPubKey(const std::string& hex_in)\n     return vchPubKey;\n }\n \n-// Retrieves a public key for an address from the given CBasicKeyStore\n-CPubKey AddrToPubKey(CBasicKeyStore* const keystore, const std::string& addr_in)\n+// Retrieves a public key for an address from the given FillableSigningProvider\n+CPubKey AddrToPubKey(FillableSigningProvider* const keystore, const std::string& addr_in)\n {\n     CTxDestination dest = DecodeDestination(addr_in);\n     if (!IsValidDestination(dest)) {\n@@ -153,7 +153,7 @@ CPubKey AddrToPubKey(CBasicKeyStore* const keystore, const std::string& addr_in)\n }\n \n // Creates a multisig address from a given list of public keys, number of signatures required, and the address type\n-CTxDestination AddAndGetMultisigDestination(const int required, const std::vector<CPubKey>& pubkeys, OutputType type, CBasicKeyStore& keystore, CScript& script_out)\n+CTxDestination AddAndGetMultisigDestination(const int required, const std::vector<CPubKey>& pubkeys, OutputType type, FillableSigningProvider& keystore, CScript& script_out)\n {\n     // Gather public keys\n     if (required < 1) {"
      },
      {
        "sha": "c7d2c4dad68f83f65c610a2cce42456255f17e84",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -19,7 +19,7 @@\n \n #include <boost/variant.hpp>\n \n-class CBasicKeyStore;\n+class FillableSigningProvider;\n class CPubKey;\n class CScript;\n struct InitInterfaces;\n@@ -72,8 +72,8 @@ extern std::string HelpExampleCli(const std::string& methodname, const std::stri\n extern std::string HelpExampleRpc(const std::string& methodname, const std::string& args);\n \n CPubKey HexToPubKey(const std::string& hex_in);\n-CPubKey AddrToPubKey(CBasicKeyStore* const keystore, const std::string& addr_in);\n-CTxDestination AddAndGetMultisigDestination(const int required, const std::vector<CPubKey>& pubkeys, OutputType type, CBasicKeyStore& keystore, CScript& script_out);\n+CPubKey AddrToPubKey(FillableSigningProvider* const keystore, const std::string& addr_in);\n+CTxDestination AddAndGetMultisigDestination(const int required, const std::vector<CPubKey>& pubkeys, OutputType type, FillableSigningProvider& keystore, CScript& script_out);\n \n UniValue DescribeAddress(const CTxDestination& dest);\n "
      },
      {
        "sha": "0fc682f76490035db213ada2ef05a2dd5cf58221",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -369,7 +369,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n {\n     CKey key;\n     key.MakeNewKey(true);\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     BOOST_CHECK(keystore.AddKey(key));\n \n     // 50 orphan transactions:"
      },
      {
        "sha": "8fc36ebc8bdbf79a7db9e00a53d319dd0eb0d5a6",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -174,7 +174,7 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n BOOST_AUTO_TEST_CASE(multisig_Sign)\n {\n     // Test SignSignature() (and therefore the version of Solver() that signs transactions)\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     CKey key[4];\n     for (int i = 0; i < 4; i++)\n     {"
      },
      {
        "sha": "0c701a4130e15fa428fca4a9e24e0717832235c5",
        "filename": "src/test/script_p2sh_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/test/script_p2sh_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/test/script_p2sh_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_p2sh_tests.cpp?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -55,7 +55,7 @@ BOOST_AUTO_TEST_CASE(sign)\n     // scriptPubKey: HASH160 <hash> EQUAL\n \n     // Test SignSignature() (and therefore the version of Solver() that signs transactions)\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     CKey key[4];\n     for (int i = 0; i < 4; i++)\n     {\n@@ -151,7 +151,7 @@ BOOST_AUTO_TEST_CASE(set)\n {\n     LOCK(cs_main);\n     // Test the CScript::Set* methods\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     CKey key[4];\n     std::vector<CPubKey> keys;\n     for (int i = 0; i < 4; i++)\n@@ -265,7 +265,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     LOCK(cs_main);\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     CKey key[6];\n     std::vector<CPubKey> keys;\n     for (int i = 0; i < 6; i++)"
      },
      {
        "sha": "c8c2f7783d6aab376af34a6809f580231f1e6790",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -1199,7 +1199,7 @@ SignatureData CombineSignatures(const CTxOut& txout, const CMutableTransaction&\n BOOST_AUTO_TEST_CASE(script_combineSigs)\n {\n     // Test the ProduceSignature's ability to combine signatures function\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     std::vector<CKey> keys;\n     std::vector<CPubKey> pubkeys;\n     for (int i = 0; i < 3; i++)"
      },
      {
        "sha": "634985abc4313a598a765bb0bfa0349fd7c13b6c",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -289,7 +289,7 @@ BOOST_AUTO_TEST_CASE(basic_transaction_tests)\n // paid to a TX_PUBKEYHASH.\n //\n static std::vector<CMutableTransaction>\n-SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n+SetupDummyInputs(FillableSigningProvider& keystoreRet, CCoinsViewCache& coinsRet)\n {\n     std::vector<CMutableTransaction> dummyTransactions;\n     dummyTransactions.resize(2);\n@@ -322,7 +322,7 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n \n BOOST_AUTO_TEST_CASE(test_Get)\n {\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n     std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n@@ -346,7 +346,7 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     BOOST_CHECK_EQUAL(coins.GetValueIn(CTransaction(t1)), (50+21+22)*CENT);\n }\n \n-static void CreateCreditAndSpend(const CBasicKeyStore& keystore, const CScript& outscript, CTransactionRef& output, CMutableTransaction& input, bool success = true)\n+static void CreateCreditAndSpend(const FillableSigningProvider& keystore, const CScript& outscript, CTransactionRef& output, CMutableTransaction& input, bool success = true)\n {\n     CMutableTransaction outputm;\n     outputm.nVersion = 1;\n@@ -423,7 +423,7 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction)\n \n     CKey key;\n     key.MakeNewKey(true); // Need to use compressed keys in segwit or the signing will fail\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     BOOST_CHECK(keystore.AddKeyPubKey(key, key.GetPubKey()));\n     CKeyID hash = key.GetPubKey().GetID();\n     CScript scriptPubKey = CScript() << OP_0 << std::vector<unsigned char>(hash.begin(), hash.end());\n@@ -507,7 +507,7 @@ SignatureData CombineSignatures(const CMutableTransaction& input1, const CMutabl\n \n BOOST_AUTO_TEST_CASE(test_witness)\n {\n-    CBasicKeyStore keystore, keystore2;\n+    FillableSigningProvider keystore, keystore2;\n     CKey key1, key2, key3, key1L, key2L;\n     CPubKey pubkey1, pubkey2, pubkey3, pubkey1L, pubkey2L;\n     key1.MakeNewKey(true);\n@@ -682,7 +682,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n BOOST_AUTO_TEST_CASE(test_IsStandard)\n {\n     LOCK(cs_main);\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n     std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);"
      },
      {
        "sha": "379c84e33ee32dcce831aef42602d1d8bee78f4c",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -161,7 +161,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n     CScript p2pkh_scriptPubKey = GetScriptForDestination(PKHash(coinbaseKey.GetPubKey()));\n     CScript p2wpkh_scriptPubKey = GetScriptForWitness(p2pkh_scriptPubKey);\n \n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     BOOST_CHECK(keystore.AddKey(coinbaseKey));\n     BOOST_CHECK(keystore.AddCScript(p2pk_scriptPubKey));\n "
      },
      {
        "sha": "3070454b1b92ccbc2853a4eda956ebed2aa73d72",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -217,7 +217,7 @@ bool CCryptoKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n {\n     LOCK(cs_KeyStore);\n     if (!IsCrypted()) {\n-        return CBasicKeyStore::AddKeyPubKey(key, pubkey);\n+        return FillableSigningProvider::AddKeyPubKey(key, pubkey);\n     }\n \n     if (IsLocked()) {\n@@ -253,7 +253,7 @@ bool CCryptoKeyStore::HaveKey(const CKeyID &address) const\n {\n     LOCK(cs_KeyStore);\n     if (!IsCrypted()) {\n-        return CBasicKeyStore::HaveKey(address);\n+        return FillableSigningProvider::HaveKey(address);\n     }\n     return mapCryptedKeys.count(address) > 0;\n }\n@@ -262,7 +262,7 @@ bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const\n {\n     LOCK(cs_KeyStore);\n     if (!IsCrypted()) {\n-        return CBasicKeyStore::GetKey(address, keyOut);\n+        return FillableSigningProvider::GetKey(address, keyOut);\n     }\n \n     CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n@@ -279,7 +279,7 @@ bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) co\n {\n     LOCK(cs_KeyStore);\n     if (!IsCrypted())\n-        return CBasicKeyStore::GetPubKey(address, vchPubKeyOut);\n+        return FillableSigningProvider::GetPubKey(address, vchPubKeyOut);\n \n     CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n     if (mi != mapCryptedKeys.end())\n@@ -288,14 +288,14 @@ bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) co\n         return true;\n     }\n     // Check for watch-only pubkeys\n-    return CBasicKeyStore::GetPubKey(address, vchPubKeyOut);\n+    return FillableSigningProvider::GetPubKey(address, vchPubKeyOut);\n }\n \n std::set<CKeyID> CCryptoKeyStore::GetKeys() const\n {\n     LOCK(cs_KeyStore);\n     if (!IsCrypted()) {\n-        return CBasicKeyStore::GetKeys();\n+        return FillableSigningProvider::GetKeys();\n     }\n     std::set<CKeyID> set_address;\n     for (const auto& mi : mapCryptedKeys) {"
      },
      {
        "sha": "95235903f4ba601e9384dd1d3748b1ab352199ce",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -112,7 +112,7 @@ friend class wallet_crypto_tests::TestCrypter; // for test access to chKey/chIV\n /** Keystore which keeps the private keys encrypted.\n  * It derives from the basic key store, which is used if no encryption is active.\n  */\n-class CCryptoKeyStore : public CBasicKeyStore\n+class CCryptoKeyStore : public FillableSigningProvider\n {\n private:\n "
      },
      {
        "sha": "cbb05596b864833dd42f282889f3c7daae4b3f52",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -488,7 +488,7 @@ static size_t CalculateNestedKeyhashInputSize(bool use_max_sig)\n     CScript script_pubkey = CScript() << OP_HASH160 << std::vector<unsigned char>(script_id.begin(), script_id.end()) << OP_EQUAL;\n \n     // Add inner-script to key store and key to watchonly\n-    CBasicKeyStore keystore;\n+    FillableSigningProvider keystore;\n     keystore.AddCScript(inner_script);\n     keystore.AddKeyPubKey(key, pubkey);\n "
      },
      {
        "sha": "3c1d998d19e48cea5341b5cf155fcedfdb613907",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9becff4e13da8e182631baa79b9794c03d44434/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9becff4e13da8e182631baa79b9794c03d44434/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d9becff4e13da8e182631baa79b9794c03d44434",
        "patch": "@@ -1296,7 +1296,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     /**\n      * Explicitly make the wallet learn the related scripts for outputs to the\n      * given key. This is purely to make the wallet file compatible with older\n-     * software, as CBasicKeyStore automatically does this implicitly for all\n+     * software, as FillableSigningProvider automatically does this implicitly for all\n      * keys now.\n      */\n     void LearnRelatedScripts(const CPubKey& key, OutputType);"
      }
    ]
  },
  {
    "sha": "16f8096e911e4d59292240a17e2d4004f0500b9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmY4MDk2ZTkxMWU0ZDU5MjkyMjQwYTE3ZTJkNDAwNGYwNTAwYjll",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-17T19:47:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T20:20:18Z"
      },
      "message": "Move KeyOriginInfo to its own header file",
      "tree": {
        "sha": "d5d878d2f0384ef78dedf5f4ae3f95512e4fd416",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5d878d2f0384ef78dedf5f4ae3f95512e4fd416"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16f8096e911e4d59292240a17e2d4004f0500b9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16f8096e911e4d59292240a17e2d4004f0500b9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16f8096e911e4d59292240a17e2d4004f0500b9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16f8096e911e4d59292240a17e2d4004f0500b9e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9becff4e13da8e182631baa79b9794c03d44434",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9becff4e13da8e182631baa79b9794c03d44434",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9becff4e13da8e182631baa79b9794c03d44434"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 39,
      "deletions": 25
    },
    "files": [
      {
        "sha": "30058d9541a22e07ad509da115ea6c9325f15644",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16f8096e911e4d59292240a17e2d4004f0500b9e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16f8096e911e4d59292240a17e2d4004f0500b9e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=16f8096e911e4d59292240a17e2d4004f0500b9e",
        "patch": "@@ -181,6 +181,7 @@ BITCOIN_CORE_H = \\\n   rpc/util.h \\\n   scheduler.h \\\n   script/descriptor.h \\\n+  script/keyorigin.h \\\n   script/sigcache.h \\\n   script/sign.h \\\n   script/standard.h \\"
      },
      {
        "sha": "610f2335009d1aad827c91bc7b7091bca012b97a",
        "filename": "src/script/keyorigin.h",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16f8096e911e4d59292240a17e2d4004f0500b9e/src/script/keyorigin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16f8096e911e4d59292240a17e2d4004f0500b9e/src/script/keyorigin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/keyorigin.h?ref=16f8096e911e4d59292240a17e2d4004f0500b9e",
        "patch": "@@ -0,0 +1,37 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCRIPT_KEYORIGIN_H\n+#define BITCOIN_SCRIPT_KEYORIGIN_H\n+\n+#include <serialize.h>\n+#include <streams.h>\n+#include <vector>\n+\n+struct KeyOriginInfo\n+{\n+    unsigned char fingerprint[4]; //!< First 32 bits of the Hash160 of the public key at the root of the path\n+    std::vector<uint32_t> path;\n+\n+    friend bool operator==(const KeyOriginInfo& a, const KeyOriginInfo& b)\n+    {\n+        return std::equal(std::begin(a.fingerprint), std::end(a.fingerprint), std::begin(b.fingerprint)) && a.path == b.path;\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n+    {\n+        READWRITE(fingerprint);\n+        READWRITE(path);\n+    }\n+\n+    void clear()\n+    {\n+        memset(fingerprint, 0, 4);\n+        path.clear();\n+    }\n+};\n+\n+#endif // BITCOIN_SCRIPT_KEYORIGIN_H"
      },
      {
        "sha": "7b4627cca2c0dd89534301c8c063b73814ffa365",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 25,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16f8096e911e4d59292240a17e2d4004f0500b9e/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16f8096e911e4d59292240a17e2d4004f0500b9e/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=16f8096e911e4d59292240a17e2d4004f0500b9e",
        "patch": "@@ -10,6 +10,7 @@\n #include <hash.h>\n #include <pubkey.h>\n #include <script/interpreter.h>\n+#include <script/keyorigin.h>\n #include <streams.h>\n \n class CKey;\n@@ -20,31 +21,6 @@ class CTransaction;\n \n struct CMutableTransaction;\n \n-struct KeyOriginInfo\n-{\n-    unsigned char fingerprint[4]; //!< First 32 bits of the Hash160 of the public key at the root of the path\n-    std::vector<uint32_t> path;\n-\n-    friend bool operator==(const KeyOriginInfo& a, const KeyOriginInfo& b)\n-    {\n-        return std::equal(std::begin(a.fingerprint), std::end(a.fingerprint), std::begin(b.fingerprint)) && a.path == b.path;\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n-    {\n-        READWRITE(fingerprint);\n-        READWRITE(path);\n-    }\n-\n-    void clear()\n-    {\n-        memset(fingerprint, 0, 4);\n-        path.clear();\n-    }\n-};\n-\n /** An interface to be implemented by keystores that support signing. */\n class SigningProvider\n {"
      }
    ]
  },
  {
    "sha": "37a79a4fccbf6cd65a933594e24e59d36e674653",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2E3OWE0ZmNjYmY2Y2Q2NWE5MzM1OTRlMjRlNTlkMzZlNjc0NjUz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-06T20:52:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T20:20:18Z"
      },
      "message": "Move various SigningProviders to signingprovider.{cpp,h}\n\nMoves all of the various SigningProviders out of sign.{cpp,h} and\nkeystore.{cpp,h}. As such, keystore.{cpp,h} is also removed.\n\nIncludes and the Makefile are updated to reflect this. Includes were largely\nchanged using:\ngit grep -l \"keystore.h\" | xargs sed -i -e 's;keystore.h;script/signingprovider.h;g'",
      "tree": {
        "sha": "3ef48673c8380a9c7a18cd2e790512177384ca54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ef48673c8380a9c7a18cd2e790512177384ca54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37a79a4fccbf6cd65a933594e24e59d36e674653",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37a79a4fccbf6cd65a933594e24e59d36e674653",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37a79a4fccbf6cd65a933594e24e59d36e674653",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37a79a4fccbf6cd65a933594e24e59d36e674653/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16f8096e911e4d59292240a17e2d4004f0500b9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16f8096e911e4d59292240a17e2d4004f0500b9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16f8096e911e4d59292240a17e2d4004f0500b9e"
      }
    ],
    "stats": {
      "total": 378,
      "additions": 194,
      "deletions": 184
    },
    "files": [
      {
        "sha": "c2174e9a0b709cc1d085313393865044d853ec4f",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -143,7 +143,6 @@ BITCOIN_CORE_H = \\\n   interfaces/wallet.h \\\n   key.h \\\n   key_io.h \\\n-  keystore.h \\\n   dbwrapper.h \\\n   limitedmap.h \\\n   logging.h \\\n@@ -184,6 +183,7 @@ BITCOIN_CORE_H = \\\n   script/keyorigin.h \\\n   script/sigcache.h \\\n   script/sign.h \\\n+  script/signingprovider.h \\\n   script/standard.h \\\n   shutdown.h \\\n   streams.h \\\n@@ -447,7 +447,6 @@ libbitcoin_common_a_SOURCES = \\\n   core_write.cpp \\\n   key.cpp \\\n   key_io.cpp \\\n-  keystore.cpp \\\n   merkleblock.cpp \\\n   netaddress.cpp \\\n   netbase.cpp \\\n@@ -461,6 +460,7 @@ libbitcoin_common_a_SOURCES = \\\n   scheduler.cpp \\\n   script/descriptor.cpp \\\n   script/sign.cpp \\\n+  script/signingprovider.cpp \\\n   script/standard.cpp \\\n   versionbitsinfo.cpp \\\n   warnings.cpp \\"
      },
      {
        "sha": "39cab092cf6f0f2abb8b252772a568240c7395a6",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -5,7 +5,7 @@\n #include <bench/bench.h>\n #include <coins.h>\n #include <policy/policy.h>\n-#include <wallet/crypter.h>\n+#include <script/signingprovider.h>\n \n #include <vector>\n "
      },
      {
        "sha": "4d513deed89b58945cef9c270762c4a03581b122",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -11,12 +11,12 @@\n #include <consensus/consensus.h>\n #include <core_io.h>\n #include <key_io.h>\n-#include <keystore.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n #include <univalue.h>\n #include <util/rbf.h>\n #include <util/system.h>"
      },
      {
        "sha": "98209d4a4390b9e5338cc9f9ab3a12edd69db209",
        "filename": "src/keystore.h",
        "status": "removed",
        "additions": 0,
        "deletions": 57,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16f8096e911e4d59292240a17e2d4004f0500b9e/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16f8096e911e4d59292240a17e2d4004f0500b9e/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=16f8096e911e4d59292240a17e2d4004f0500b9e",
        "patch": "@@ -1,57 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_KEYSTORE_H\n-#define BITCOIN_KEYSTORE_H\n-\n-#include <key.h>\n-#include <pubkey.h>\n-#include <script/script.h>\n-#include <script/sign.h>\n-#include <script/standard.h>\n-#include <sync.h>\n-\n-#include <boost/signals2/signal.hpp>\n-\n-/** Basic key store, that keeps keys in an address->secret map */\n-class FillableSigningProvider : public SigningProvider\n-{\n-protected:\n-    mutable CCriticalSection cs_KeyStore;\n-\n-    using KeyMap = std::map<CKeyID, CKey>;\n-    using WatchKeyMap = std::map<CKeyID, CPubKey>;\n-    using ScriptMap = std::map<CScriptID, CScript>;\n-    using WatchOnlySet = std::set<CScript>;\n-\n-    KeyMap mapKeys GUARDED_BY(cs_KeyStore);\n-    WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n-    ScriptMap mapScripts GUARDED_BY(cs_KeyStore);\n-    WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n-\n-    void ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n-\n-public:\n-    virtual bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n-    virtual bool AddKey(const CKey &key) { return AddKeyPubKey(key, key.GetPubKey()); }\n-    virtual bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n-    virtual bool HaveKey(const CKeyID &address) const override;\n-    virtual std::set<CKeyID> GetKeys() const;\n-    virtual bool GetKey(const CKeyID &address, CKey &keyOut) const override;\n-    virtual bool AddCScript(const CScript& redeemScript);\n-    virtual bool HaveCScript(const CScriptID &hash) const override;\n-    virtual std::set<CScriptID> GetCScripts() const;\n-    virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;\n-\n-    virtual bool AddWatchOnly(const CScript &dest);\n-    virtual bool RemoveWatchOnly(const CScript &dest);\n-    virtual bool HaveWatchOnly(const CScript &dest) const;\n-    virtual bool HaveWatchOnly() const;\n-};\n-\n-/** Return the CKeyID of the key involved in a script (if there is a unique one). */\n-CKeyID GetKeyForDestination(const FillableSigningProvider& store, const CTxDestination& dest);\n-\n-#endif // BITCOIN_KEYSTORE_H"
      },
      {
        "sha": "bcaa05f4b67a8626737b4a898c5480dc24a9d7e4",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -5,9 +5,10 @@\n \n #include <outputtype.h>\n \n-#include <keystore.h>\n #include <pubkey.h>\n #include <script/script.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n #include <script/standard.h>\n \n #include <assert.h>\n@@ -98,4 +99,3 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n     default: assert(false);\n     }\n }\n-"
      },
      {
        "sha": "6acbaa2f3e2a8bc7c5f88ba2b70580257584cf8c",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -7,7 +7,7 @@\n #define BITCOIN_OUTPUTTYPE_H\n \n #include <attributes.h>\n-#include <keystore.h>\n+#include <script/signingprovider.h>\n #include <script/standard.h>\n \n #include <string>"
      },
      {
        "sha": "6d77db0c6f8f43535fd2b4e864f743776fe1b770",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -12,6 +12,7 @@\n #include <primitives/transaction.h>\n #include <pubkey.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n \n // Magic bytes\n static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};"
      },
      {
        "sha": "b9628bafb94e4f1ceac99007dd7bce18eab25a62",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -10,7 +10,6 @@\n #include <core_io.h>\n #include <index/txindex.h>\n #include <key_io.h>\n-#include <keystore.h>\n #include <merkleblock.h>\n #include <node/coin.h>\n #include <node/psbt.h>\n@@ -24,6 +23,7 @@\n #include <script/script.h>\n #include <script/script_error.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n #include <script/standard.h>\n #include <uint256.h>\n #include <util/moneystr.h>"
      },
      {
        "sha": "f5730b7e144402b8083a348d549ce002901e1029",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -8,11 +8,12 @@\n #include <coins.h>\n #include <core_io.h>\n #include <key_io.h>\n-#include <keystore.h>\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n #include <rpc/protocol.h>\n #include <rpc/util.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n #include <tinyformat.h>\n #include <univalue.h>\n #include <util/rbf.h>"
      },
      {
        "sha": "de90276677272db28339ca97c0bc74fc3527b846",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -3,8 +3,8 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <key_io.h>\n-#include <keystore.h>\n #include <outputtype.h>\n+#include <script/signingprovider.h>\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <tinyformat.h>"
      },
      {
        "sha": "29915c6c923620f145867fbae1afffabce06d1cf",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <script/script.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n \n #include <vector>\n "
      },
      {
        "sha": "13481af9c50636d4f527fe7648ab626b65ea1791",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 59,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -8,6 +8,7 @@\n #include <key.h>\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n+#include <script/signingprovider.h>\n #include <script/standard.h>\n #include <uint256.h>\n \n@@ -423,22 +424,10 @@ class DummySignatureCreator final : public BaseSignatureCreator {\n     }\n };\n \n-template<typename M, typename K, typename V>\n-bool LookupHelper(const M& map, const K& key, V& value)\n-{\n-    auto it = map.find(key);\n-    if (it != map.end()) {\n-        value = it->second;\n-        return true;\n-    }\n-    return false;\n-}\n-\n }\n \n const BaseSignatureCreator& DUMMY_SIGNATURE_CREATOR = DummySignatureCreator(32, 32);\n const BaseSignatureCreator& DUMMY_MAXIMUM_SIGNATURE_CREATOR = DummySignatureCreator(33, 32);\n-const SigningProvider& DUMMY_SIGNING_PROVIDER = SigningProvider();\n \n bool IsSolvable(const SigningProvider& provider, const CScript& script)\n {\n@@ -459,53 +448,6 @@ bool IsSolvable(const SigningProvider& provider, const CScript& script)\n     return false;\n }\n \n-bool HidingSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const\n-{\n-    return m_provider->GetCScript(scriptid, script);\n-}\n-\n-bool HidingSigningProvider::GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const\n-{\n-    return m_provider->GetPubKey(keyid, pubkey);\n-}\n-\n-bool HidingSigningProvider::GetKey(const CKeyID& keyid, CKey& key) const\n-{\n-    if (m_hide_secret) return false;\n-    return m_provider->GetKey(keyid, key);\n-}\n-\n-bool HidingSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const\n-{\n-    if (m_hide_origin) return false;\n-    return m_provider->GetKeyOrigin(keyid, info);\n-}\n-\n-bool FlatSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const { return LookupHelper(scripts, scriptid, script); }\n-bool FlatSigningProvider::GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const { return LookupHelper(pubkeys, keyid, pubkey); }\n-bool FlatSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const\n-{\n-    std::pair<CPubKey, KeyOriginInfo> out;\n-    bool ret = LookupHelper(origins, keyid, out);\n-    if (ret) info = std::move(out.second);\n-    return ret;\n-}\n-bool FlatSigningProvider::GetKey(const CKeyID& keyid, CKey& key) const { return LookupHelper(keys, keyid, key); }\n-\n-FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b)\n-{\n-    FlatSigningProvider ret;\n-    ret.scripts = a.scripts;\n-    ret.scripts.insert(b.scripts.begin(), b.scripts.end());\n-    ret.pubkeys = a.pubkeys;\n-    ret.pubkeys.insert(b.pubkeys.begin(), b.pubkeys.end());\n-    ret.keys = a.keys;\n-    ret.keys.insert(b.keys.begin(), b.keys.end());\n-    ret.origins = a.origins;\n-    ret.origins.insert(b.origins.begin(), b.origins.end());\n-    return ret;\n-}\n-\n bool IsSegWitOutput(const SigningProvider& provider, const CScript& script)\n {\n     std::vector<valtype> solutions;"
      },
      {
        "sha": "0e751afd3ba5e4951745f01d9d2cba720ecf3856",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 45,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -18,54 +18,10 @@ class CKeyID;\n class CScript;\n class CScriptID;\n class CTransaction;\n+class SigningProvider;\n \n struct CMutableTransaction;\n \n-/** An interface to be implemented by keystores that support signing. */\n-class SigningProvider\n-{\n-public:\n-    virtual ~SigningProvider() {}\n-    virtual bool GetCScript(const CScriptID &scriptid, CScript& script) const { return false; }\n-    virtual bool HaveCScript(const CScriptID &scriptid) const { return false; }\n-    virtual bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const { return false; }\n-    virtual bool GetKey(const CKeyID &address, CKey& key) const { return false; }\n-    virtual bool HaveKey(const CKeyID &address) const { return false; }\n-    virtual bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const { return false; }\n-};\n-\n-extern const SigningProvider& DUMMY_SIGNING_PROVIDER;\n-\n-class HidingSigningProvider : public SigningProvider\n-{\n-private:\n-    const bool m_hide_secret;\n-    const bool m_hide_origin;\n-    const SigningProvider* m_provider;\n-\n-public:\n-    HidingSigningProvider(const SigningProvider* provider, bool hide_secret, bool hide_origin) : m_hide_secret(hide_secret), m_hide_origin(hide_origin), m_provider(provider) {}\n-    bool GetCScript(const CScriptID& scriptid, CScript& script) const override;\n-    bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;\n-    bool GetKey(const CKeyID& keyid, CKey& key) const override;\n-    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n-};\n-\n-struct FlatSigningProvider final : public SigningProvider\n-{\n-    std::map<CScriptID, CScript> scripts;\n-    std::map<CKeyID, CPubKey> pubkeys;\n-    std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> origins;\n-    std::map<CKeyID, CKey> keys;\n-\n-    bool GetCScript(const CScriptID& scriptid, CScript& script) const override;\n-    bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;\n-    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n-    bool GetKey(const CKeyID& keyid, CKey& key) const override;\n-};\n-\n-FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b);\n-\n /** Interface for signature creators. */\n class BaseSignatureCreator {\n public:"
      },
      {
        "sha": "a859a41c50ba96cefc10d89190a5695e0878b183",
        "filename": "src/script/signingprovider.cpp",
        "status": "renamed",
        "additions": 65,
        "deletions": 3,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/script/signingprovider.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/script/signingprovider.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.cpp?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -1,12 +1,74 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <keystore.h>\n+#include <script/keyorigin.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n \n #include <util/system.h>\n \n+const SigningProvider& DUMMY_SIGNING_PROVIDER = SigningProvider();\n+\n+template<typename M, typename K, typename V>\n+bool LookupHelper(const M& map, const K& key, V& value)\n+{\n+    auto it = map.find(key);\n+    if (it != map.end()) {\n+        value = it->second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool HidingSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const\n+{\n+    return m_provider->GetCScript(scriptid, script);\n+}\n+\n+bool HidingSigningProvider::GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const\n+{\n+    return m_provider->GetPubKey(keyid, pubkey);\n+}\n+\n+bool HidingSigningProvider::GetKey(const CKeyID& keyid, CKey& key) const\n+{\n+    if (m_hide_secret) return false;\n+    return m_provider->GetKey(keyid, key);\n+}\n+\n+bool HidingSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const\n+{\n+    if (m_hide_origin) return false;\n+    return m_provider->GetKeyOrigin(keyid, info);\n+}\n+\n+bool FlatSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const { return LookupHelper(scripts, scriptid, script); }\n+bool FlatSigningProvider::GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const { return LookupHelper(pubkeys, keyid, pubkey); }\n+bool FlatSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const\n+{\n+    std::pair<CPubKey, KeyOriginInfo> out;\n+    bool ret = LookupHelper(origins, keyid, out);\n+    if (ret) info = std::move(out.second);\n+    return ret;\n+}\n+bool FlatSigningProvider::GetKey(const CKeyID& keyid, CKey& key) const { return LookupHelper(keys, keyid, key); }\n+\n+FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b)\n+{\n+    FlatSigningProvider ret;\n+    ret.scripts = a.scripts;\n+    ret.scripts.insert(b.scripts.begin(), b.scripts.end());\n+    ret.pubkeys = a.pubkeys;\n+    ret.pubkeys.insert(b.pubkeys.begin(), b.pubkeys.end());\n+    ret.keys = a.keys;\n+    ret.keys.insert(b.keys.begin(), b.keys.end());\n+    ret.origins = a.origins;\n+    ret.origins.insert(b.origins.begin(), b.origins.end());\n+    return ret;\n+}\n+\n void FillableSigningProvider::ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey)\n {\n     AssertLockHeld(cs_KeyStore);\n@@ -174,7 +236,7 @@ bool FillableSigningProvider::HaveWatchOnly() const\n     return (!setWatchOnly.empty());\n }\n \n-CKeyID GetKeyForDestination(const FillableSigningProvider& store, const CTxDestination& dest)\n+CKeyID GetKeyForDestination(const SigningProvider& store, const CTxDestination& dest)\n {\n     // Only supports destinations which map to single public keys, i.e. P2PKH,\n     // P2WPKH, and P2SH-P2WPKH.",
        "previous_filename": "src/keystore.cpp"
      },
      {
        "sha": "5ead7638260cd413b472a0181e6dfe54453bbec7",
        "filename": "src/script/signingprovider.h",
        "status": "added",
        "additions": 101,
        "deletions": 0,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/script/signingprovider.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/script/signingprovider.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.h?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCRIPT_SIGNINGPROVIDER_H\n+#define BITCOIN_SCRIPT_SIGNINGPROVIDER_H\n+\n+#include <key.h>\n+#include <pubkey.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+\n+struct KeyOriginInfo;\n+\n+/** An interface to be implemented by keystores that support signing. */\n+class SigningProvider\n+{\n+public:\n+    virtual ~SigningProvider() {}\n+    virtual bool GetCScript(const CScriptID &scriptid, CScript& script) const { return false; }\n+    virtual bool HaveCScript(const CScriptID &scriptid) const { return false; }\n+    virtual bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const { return false; }\n+    virtual bool GetKey(const CKeyID &address, CKey& key) const { return false; }\n+    virtual bool HaveKey(const CKeyID &address) const { return false; }\n+    virtual bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const { return false; }\n+};\n+\n+extern const SigningProvider& DUMMY_SIGNING_PROVIDER;\n+\n+class HidingSigningProvider : public SigningProvider\n+{\n+private:\n+    const bool m_hide_secret;\n+    const bool m_hide_origin;\n+    const SigningProvider* m_provider;\n+\n+public:\n+    HidingSigningProvider(const SigningProvider* provider, bool hide_secret, bool hide_origin) : m_hide_secret(hide_secret), m_hide_origin(hide_origin), m_provider(provider) {}\n+    bool GetCScript(const CScriptID& scriptid, CScript& script) const override;\n+    bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;\n+    bool GetKey(const CKeyID& keyid, CKey& key) const override;\n+    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n+};\n+\n+struct FlatSigningProvider final : public SigningProvider\n+{\n+    std::map<CScriptID, CScript> scripts;\n+    std::map<CKeyID, CPubKey> pubkeys;\n+    std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> origins;\n+    std::map<CKeyID, CKey> keys;\n+\n+    bool GetCScript(const CScriptID& scriptid, CScript& script) const override;\n+    bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;\n+    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n+    bool GetKey(const CKeyID& keyid, CKey& key) const override;\n+};\n+\n+FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b);\n+\n+/** Fillable signing provider that keeps keys in an address->secret map */\n+class FillableSigningProvider : public SigningProvider\n+{\n+protected:\n+    mutable CCriticalSection cs_KeyStore;\n+\n+    using KeyMap = std::map<CKeyID, CKey>;\n+    using WatchKeyMap = std::map<CKeyID, CPubKey>;\n+    using ScriptMap = std::map<CScriptID, CScript>;\n+    using WatchOnlySet = std::set<CScript>;\n+\n+    KeyMap mapKeys GUARDED_BY(cs_KeyStore);\n+    WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n+    ScriptMap mapScripts GUARDED_BY(cs_KeyStore);\n+    WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n+\n+    void ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+public:\n+    virtual bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n+    virtual bool AddKey(const CKey &key) { return AddKeyPubKey(key, key.GetPubKey()); }\n+    virtual bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    virtual bool HaveKey(const CKeyID &address) const override;\n+    virtual std::set<CKeyID> GetKeys() const;\n+    virtual bool GetKey(const CKeyID &address, CKey &keyOut) const override;\n+    virtual bool AddCScript(const CScript& redeemScript);\n+    virtual bool HaveCScript(const CScriptID &hash) const override;\n+    virtual std::set<CScriptID> GetCScripts() const;\n+    virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;\n+\n+    virtual bool AddWatchOnly(const CScript &dest);\n+    virtual bool RemoveWatchOnly(const CScript &dest);\n+    virtual bool HaveWatchOnly(const CScript &dest) const;\n+    virtual bool HaveWatchOnly() const;\n+};\n+\n+/** Return the CKeyID of the key involved in a script (if there is a unique one). */\n+CKeyID GetKeyForDestination(const SigningProvider& store, const CTxDestination& dest);\n+\n+#endif // BITCOIN_SCRIPT_SIGNINGPROVIDER_H"
      },
      {
        "sha": "fc6898f4445c64ebc348d2b95a699acbcb269376",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -9,7 +9,6 @@\n #include <pubkey.h>\n #include <script/script.h>\n \n-\n typedef std::vector<unsigned char> valtype;\n \n bool fAcceptDatacarrier = DEFAULT_ACCEPT_DATACARRIER;"
      },
      {
        "sha": "a50d6854f89831cc2cf36eb1818d137f998065c0",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -6,10 +6,11 @@\n \n #include <banman.h>\n #include <chainparams.h>\n-#include <keystore.h>\n #include <net.h>\n #include <net_processing.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n #include <serialize.h>\n #include <util/memory.h>\n #include <util/system.h>"
      },
      {
        "sha": "7c60abb93febb9f48ba0e874b7d21f955c5fb571",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -3,12 +3,12 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <key.h>\n-#include <keystore.h>\n #include <policy/policy.h>\n #include <script/script.h>\n #include <script/script_error.h>\n #include <script/interpreter.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n #include <tinyformat.h>\n #include <uint256.h>\n #include <test/setup_common.h>"
      },
      {
        "sha": "f451d809842729080c860492f73c9e0fa9adc598",
        "filename": "src/test/script_p2sh_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/test/script_p2sh_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/test/script_p2sh_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_p2sh_tests.cpp?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -4,13 +4,13 @@\n \n #include <consensus/tx_verify.h>\n #include <key.h>\n-#include <keystore.h>\n #include <validation.h>\n #include <policy/policy.h>\n #include <script/script.h>\n #include <script/script_error.h>\n #include <policy/settings.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n #include <test/setup_common.h>\n \n #include <vector>"
      },
      {
        "sha": "412a57dd9db399ffaa5c6e3dce1b261c54199b49",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -3,8 +3,8 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <key.h>\n-#include <keystore.h>\n #include <script/script.h>\n+#include <script/signingprovider.h>\n #include <script/standard.h>\n #include <test/setup_common.h>\n "
      },
      {
        "sha": "84a70fe78bc6e9187abdbe8188c68dc61dce7211",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -6,10 +6,10 @@\n \n #include <core_io.h>\n #include <key.h>\n-#include <keystore.h>\n #include <script/script.h>\n #include <script/script_error.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n #include <test/setup_common.h>"
      },
      {
        "sha": "34192c6b6a0eb89e23b9e07603b58958dcb600f6",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -12,12 +12,12 @@\n #include <consensus/validation.h>\n #include <core_io.h>\n #include <key.h>\n-#include <keystore.h>\n #include <validation.h>\n #include <policy/policy.h>\n #include <policy/settings.h>\n #include <script/script.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n #include <script/script_error.h>\n #include <script/standard.h>\n #include <streams.h>"
      },
      {
        "sha": "f99a3748c9fb5c3a6d89de941a923326f0bb3524",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -8,8 +8,8 @@\n #include <txmempool.h>\n #include <script/standard.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n #include <test/setup_common.h>\n-#include <keystore.h>\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "4cc40a8c6fa3282383394db06eab2462a3ec7fa7",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -5,12 +5,14 @@\n #ifndef BITCOIN_WALLET_CRYPTER_H\n #define BITCOIN_WALLET_CRYPTER_H\n \n-#include <keystore.h>\n #include <serialize.h>\n #include <support/allocators/secure.h>\n+#include <script/signingprovider.h>\n \n #include <atomic>\n \n+#include <boost/signals2/signal.hpp>\n+\n const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;\n const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;\n const unsigned int WALLET_CRYPTO_IV_SIZE = 16;"
      },
      {
        "sha": "b7ef2d44904acf9322d3bb72714e03603ec00c10",
        "filename": "src/wallet/ismine.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/wallet/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/wallet/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/ismine.cpp?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -8,6 +8,7 @@\n #include <key.h>\n #include <script/script.h>\n #include <script/sign.h>\n+#include <script/signingprovider.h>\n #include <wallet/wallet.h>\n \n typedef std::vector<unsigned char> valtype;"
      },
      {
        "sha": "054123880b7653972142638deaa1b52266e69da5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a79a4fccbf6cd65a933594e24e59d36e674653/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a79a4fccbf6cd65a933594e24e59d36e674653/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=37a79a4fccbf6cd65a933594e24e59d36e674653",
        "patch": "@@ -13,13 +13,13 @@\n #include <interfaces/wallet.h>\n #include <key.h>\n #include <key_io.h>\n-#include <keystore.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <script/descriptor.h>\n #include <script/script.h>\n+#include <script/signingprovider.h>\n #include <util/bip32.h>\n #include <util/error.h>\n #include <util/fees.h>"
      }
    ]
  },
  {
    "sha": "8f5b81e6edae9cb22559545de63f391d97c15701",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjViODFlNmVkYWU5Y2IyMjU1OTU0NWRlNjNmMzkxZDk3YzE1NzAx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-06T21:58:21Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T20:20:18Z"
      },
      "message": "Remove CCryptoKeyStore and move all of it's functionality into CWallet\n\nInstead of having a separate CCryptoKeyStore that handles the encryption\nstuff, just roll it all into CWallet.",
      "tree": {
        "sha": "006eebcef692712932b0b674b05a6a90c72de5ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/006eebcef692712932b0b674b05a6a90c72de5ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f5b81e6edae9cb22559545de63f391d97c15701",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f5b81e6edae9cb22559545de63f391d97c15701",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f5b81e6edae9cb22559545de63f391d97c15701",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f5b81e6edae9cb22559545de63f391d97c15701/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37a79a4fccbf6cd65a933594e24e59d36e674653",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37a79a4fccbf6cd65a933594e24e59d36e674653",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37a79a4fccbf6cd65a933594e24e59d36e674653"
      }
    ],
    "stats": {
      "total": 503,
      "additions": 247,
      "deletions": 256
    },
    "files": [
      {
        "sha": "f4d25d1f90fa16f85101575c95042437256a87c1",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f5b81e6edae9cb22559545de63f391d97c15701/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f5b81e6edae9cb22559545de63f391d97c15701/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=8f5b81e6edae9cb22559545de63f391d97c15701",
        "patch": "@@ -476,7 +476,7 @@ class WalletImpl : public Wallet\n     }\n     std::unique_ptr<Handler> handleStatusChanged(StatusChangedFn fn) override\n     {\n-        return MakeHandler(m_wallet->NotifyStatusChanged.connect([fn](CCryptoKeyStore*) { fn(); }));\n+        return MakeHandler(m_wallet->NotifyStatusChanged.connect([fn](CWallet*) { fn(); }));\n     }\n     std::unique_ptr<Handler> handleAddressBookChanged(AddressBookChangedFn fn) override\n     {"
      },
      {
        "sha": "0b76c1a0eb54eee6fca70955b8a16fc8871eb011",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 189,
        "changes": 192,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f5b81e6edae9cb22559545de63f391d97c15701/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f5b81e6edae9cb22559545de63f391d97c15701/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=8f5b81e6edae9cb22559545de63f391d97c15701",
        "patch": "@@ -107,8 +107,7 @@ bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingM\n     return true;\n }\n \n-\n-static bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)\n+bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)\n {\n     CCrypter cKeyCrypter;\n     std::vector<unsigned char> chIV(WALLET_CRYPTO_IV_SIZE);\n@@ -118,7 +117,7 @@ static bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMateri\n     return cKeyCrypter.Encrypt(*((const CKeyingMaterial*)&vchPlaintext), vchCiphertext);\n }\n \n-static bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n+bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n {\n     CCrypter cKeyCrypter;\n     std::vector<unsigned char> chIV(WALLET_CRYPTO_IV_SIZE);\n@@ -128,7 +127,7 @@ static bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<u\n     return cKeyCrypter.Decrypt(vchCiphertext, *((CKeyingMaterial*)&vchPlaintext));\n }\n \n-static bool DecryptKey(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCryptedSecret, const CPubKey& vchPubKey, CKey& key)\n+bool DecryptKey(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCryptedSecret, const CPubKey& vchPubKey, CKey& key)\n {\n     CKeyingMaterial vchSecret;\n     if(!DecryptSecret(vMasterKey, vchCryptedSecret, vchPubKey.GetHash(), vchSecret))\n@@ -140,188 +139,3 @@ static bool DecryptKey(const CKeyingMaterial& vMasterKey, const std::vector<unsi\n     key.Set(vchSecret.begin(), vchSecret.end(), vchPubKey.IsCompressed());\n     return key.VerifyPubKey(vchPubKey);\n }\n-\n-bool CCryptoKeyStore::SetCrypted()\n-{\n-    LOCK(cs_KeyStore);\n-    if (fUseCrypto)\n-        return true;\n-    if (!mapKeys.empty())\n-        return false;\n-    fUseCrypto = true;\n-    return true;\n-}\n-\n-bool CCryptoKeyStore::IsLocked() const\n-{\n-    if (!IsCrypted()) {\n-        return false;\n-    }\n-    LOCK(cs_KeyStore);\n-    return vMasterKey.empty();\n-}\n-\n-bool CCryptoKeyStore::Lock()\n-{\n-    if (!SetCrypted())\n-        return false;\n-\n-    {\n-        LOCK(cs_KeyStore);\n-        vMasterKey.clear();\n-    }\n-\n-    NotifyStatusChanged(this);\n-    return true;\n-}\n-\n-bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n-{\n-    {\n-        LOCK(cs_KeyStore);\n-        if (!SetCrypted())\n-            return false;\n-\n-        bool keyPass = mapCryptedKeys.empty(); // Always pass when there are no encrypted keys\n-        bool keyFail = false;\n-        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n-        for (; mi != mapCryptedKeys.end(); ++mi)\n-        {\n-            const CPubKey &vchPubKey = (*mi).second.first;\n-            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-            CKey key;\n-            if (!DecryptKey(vMasterKeyIn, vchCryptedSecret, vchPubKey, key))\n-            {\n-                keyFail = true;\n-                break;\n-            }\n-            keyPass = true;\n-            if (fDecryptionThoroughlyChecked)\n-                break;\n-        }\n-        if (keyPass && keyFail)\n-        {\n-            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n-            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n-        }\n-        if (keyFail || (!keyPass && !accept_no_keys))\n-            return false;\n-        vMasterKey = vMasterKeyIn;\n-        fDecryptionThoroughlyChecked = true;\n-    }\n-    NotifyStatusChanged(this);\n-    return true;\n-}\n-\n-bool CCryptoKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n-{\n-    LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n-        return FillableSigningProvider::AddKeyPubKey(key, pubkey);\n-    }\n-\n-    if (IsLocked()) {\n-        return false;\n-    }\n-\n-    std::vector<unsigned char> vchCryptedSecret;\n-    CKeyingMaterial vchSecret(key.begin(), key.end());\n-    if (!EncryptSecret(vMasterKey, vchSecret, pubkey.GetHash(), vchCryptedSecret)) {\n-        return false;\n-    }\n-\n-    if (!AddCryptedKey(pubkey, vchCryptedSecret)) {\n-        return false;\n-    }\n-    return true;\n-}\n-\n-\n-bool CCryptoKeyStore::AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n-{\n-    LOCK(cs_KeyStore);\n-    if (!SetCrypted()) {\n-        return false;\n-    }\n-\n-    mapCryptedKeys[vchPubKey.GetID()] = make_pair(vchPubKey, vchCryptedSecret);\n-    ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n-    return true;\n-}\n-\n-bool CCryptoKeyStore::HaveKey(const CKeyID &address) const\n-{\n-    LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n-        return FillableSigningProvider::HaveKey(address);\n-    }\n-    return mapCryptedKeys.count(address) > 0;\n-}\n-\n-bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const\n-{\n-    LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n-        return FillableSigningProvider::GetKey(address, keyOut);\n-    }\n-\n-    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n-    if (mi != mapCryptedKeys.end())\n-    {\n-        const CPubKey &vchPubKey = (*mi).second.first;\n-        const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-        return DecryptKey(vMasterKey, vchCryptedSecret, vchPubKey, keyOut);\n-    }\n-    return false;\n-}\n-\n-bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n-{\n-    LOCK(cs_KeyStore);\n-    if (!IsCrypted())\n-        return FillableSigningProvider::GetPubKey(address, vchPubKeyOut);\n-\n-    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n-    if (mi != mapCryptedKeys.end())\n-    {\n-        vchPubKeyOut = (*mi).second.first;\n-        return true;\n-    }\n-    // Check for watch-only pubkeys\n-    return FillableSigningProvider::GetPubKey(address, vchPubKeyOut);\n-}\n-\n-std::set<CKeyID> CCryptoKeyStore::GetKeys() const\n-{\n-    LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n-        return FillableSigningProvider::GetKeys();\n-    }\n-    std::set<CKeyID> set_address;\n-    for (const auto& mi : mapCryptedKeys) {\n-        set_address.insert(mi.first);\n-    }\n-    return set_address;\n-}\n-\n-bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n-{\n-    LOCK(cs_KeyStore);\n-    if (!mapCryptedKeys.empty() || IsCrypted())\n-        return false;\n-\n-    fUseCrypto = true;\n-    for (const KeyMap::value_type& mKey : mapKeys)\n-    {\n-        const CKey &key = mKey.second;\n-        CPubKey vchPubKey = key.GetPubKey();\n-        CKeyingMaterial vchSecret(key.begin(), key.end());\n-        std::vector<unsigned char> vchCryptedSecret;\n-        if (!EncryptSecret(vMasterKeyIn, vchSecret, vchPubKey.GetHash(), vchCryptedSecret))\n-            return false;\n-        if (!AddCryptedKey(vchPubKey, vchCryptedSecret))\n-            return false;\n-    }\n-    mapKeys.clear();\n-    return true;\n-}"
      },
      {
        "sha": "17a4e9820ce1b4a88da116a907c8e6a30cb4b5ff",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 51,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f5b81e6edae9cb22559545de63f391d97c15701/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f5b81e6edae9cb22559545de63f391d97c15701/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=8f5b81e6edae9cb22559545de63f391d97c15701",
        "patch": "@@ -11,8 +11,6 @@\n \n #include <atomic>\n \n-#include <boost/signals2/signal.hpp>\n-\n const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;\n const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;\n const unsigned int WALLET_CRYPTO_IV_SIZE = 16;\n@@ -111,54 +109,8 @@ friend class wallet_crypto_tests::TestCrypter; // for test access to chKey/chIV\n     }\n };\n \n-/** Keystore which keeps the private keys encrypted.\n- * It derives from the basic key store, which is used if no encryption is active.\n- */\n-class CCryptoKeyStore : public FillableSigningProvider\n-{\n-private:\n-\n-    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);\n-\n-    //! if fUseCrypto is true, mapKeys must be empty\n-    //! if fUseCrypto is false, vMasterKey must be empty\n-    std::atomic<bool> fUseCrypto;\n-\n-    //! keeps track of whether Unlock has run a thorough check before\n-    bool fDecryptionThoroughlyChecked;\n-\n-protected:\n-    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n-\n-    bool SetCrypted();\n-\n-    //! will encrypt previously unencrypted keys\n-    bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n-\n-    bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false);\n-    CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n-\n-public:\n-    CCryptoKeyStore() : fUseCrypto(false), fDecryptionThoroughlyChecked(false)\n-    {\n-    }\n-\n-    bool IsCrypted() const { return fUseCrypto; }\n-    bool IsLocked() const;\n-    bool Lock();\n-\n-    virtual bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n-    bool HaveKey(const CKeyID &address) const override;\n-    bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n-    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n-    std::set<CKeyID> GetKeys() const override;\n-\n-    /**\n-     * Wallet status (encrypted, locked) changed.\n-     * Note: Called without locks held.\n-     */\n-    boost::signals2::signal<void (CCryptoKeyStore* wallet)> NotifyStatusChanged;\n-};\n+bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext);\n+bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext);\n+bool DecryptKey(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCryptedSecret, const CPubKey& vchPubKey, CKey& key);\n \n #endif // BITCOIN_WALLET_CRYPTER_H"
      },
      {
        "sha": "0a915ff9a11420d2a175c9f5d5ee149ea15a0408",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 196,
        "deletions": 11,
        "changes": 207,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f5b81e6edae9cb22559545de63f391d97c15701/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f5b81e6edae9cb22559545de63f391d97c15701/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8f5b81e6edae9cb22559545de63f391d97c15701",
        "patch": "@@ -294,14 +294,14 @@ bool CWallet::AddKeyPubKeyWithDB(WalletBatch& batch, const CKey& secret, const C\n     // Make sure we aren't adding private keys to private key disabled wallets\n     assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n \n-    // CCryptoKeyStore has no concept of wallet databases, but calls AddCryptedKey\n+    // FillableSigningProvider has no concept of wallet databases, but calls AddCryptedKey\n     // which is overridden below.  To avoid flushes, the database handle is\n     // tunneled through to it.\n     bool needsDB = !encrypted_batch;\n     if (needsDB) {\n         encrypted_batch = &batch;\n     }\n-    if (!CCryptoKeyStore::AddKeyPubKey(secret, pubkey)) {\n+    if (!AddKeyPubKeyInner(secret, pubkey)) {\n         if (needsDB) encrypted_batch = nullptr;\n         return false;\n     }\n@@ -336,7 +336,7 @@ bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n                             const std::vector<unsigned char> &vchCryptedSecret)\n {\n-    if (!CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret))\n+    if (!AddCryptedKeyInner(vchPubKey, vchCryptedSecret))\n         return false;\n     {\n         LOCK(cs_wallet);\n@@ -404,7 +404,7 @@ void CWallet::UpgradeKeyMetadata()\n \n bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n-    return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n+    return AddCryptedKeyInner(vchPubKey, vchCryptedSecret);\n }\n \n /**\n@@ -431,7 +431,7 @@ bool CWallet::AddCScript(const CScript& redeemScript)\n \n bool CWallet::AddCScriptWithDB(WalletBatch& batch, const CScript& redeemScript)\n {\n-    if (!CCryptoKeyStore::AddCScript(redeemScript))\n+    if (!FillableSigningProvider::AddCScript(redeemScript))\n         return false;\n     if (batch.WriteCScript(Hash160(redeemScript), redeemScript)) {\n         UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n@@ -452,12 +452,12 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n         return true;\n     }\n \n-    return CCryptoKeyStore::AddCScript(redeemScript);\n+    return FillableSigningProvider::AddCScript(redeemScript);\n }\n \n bool CWallet::AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest)\n {\n-    if (!CCryptoKeyStore::AddWatchOnly(dest))\n+    if (!FillableSigningProvider::AddWatchOnly(dest))\n         return false;\n     const CKeyMetadata& meta = m_script_metadata[CScriptID(dest)];\n     UpdateTimeFirstKey(meta.nCreateTime);\n@@ -490,7 +490,7 @@ bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n bool CWallet::RemoveWatchOnly(const CScript &dest)\n {\n     AssertLockHeld(cs_wallet);\n-    if (!CCryptoKeyStore::RemoveWatchOnly(dest))\n+    if (!FillableSigningProvider::RemoveWatchOnly(dest))\n         return false;\n     if (!HaveWatchOnly())\n         NotifyWatchonlyChanged(false);\n@@ -502,7 +502,7 @@ bool CWallet::RemoveWatchOnly(const CScript &dest)\n \n bool CWallet::LoadWatchOnly(const CScript &dest)\n {\n-    return CCryptoKeyStore::AddWatchOnly(dest);\n+    return FillableSigningProvider::AddWatchOnly(dest);\n }\n \n bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_keys)\n@@ -518,7 +518,7 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_key\n                 return false;\n             if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, _vMasterKey))\n                 continue; // try another master key\n-            if (CCryptoKeyStore::Unlock(_vMasterKey, accept_no_keys)) {\n+            if (Unlock(_vMasterKey, accept_no_keys)) {\n                 // Now that we've unlocked, upgrade the key metadata\n                 UpgradeKeyMetadata();\n                 return true;\n@@ -544,7 +544,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n                 return false;\n             if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, _vMasterKey))\n                 return false;\n-            if (CCryptoKeyStore::Unlock(_vMasterKey))\n+            if (Unlock(_vMasterKey))\n             {\n                 int64_t nStartTime = GetTimeMillis();\n                 crypter.SetKeyFromPassphrase(strNewWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod);\n@@ -4588,3 +4588,188 @@ bool CWallet::AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, cons\n     mapKeyMetadata[pubkey.GetID()].hdKeypath = WriteHDKeypath(info.path);\n     return batch.WriteKeyMetadata(mapKeyMetadata[pubkey.GetID()], pubkey, true);\n }\n+\n+bool CWallet::SetCrypted()\n+{\n+    LOCK(cs_KeyStore);\n+    if (fUseCrypto)\n+        return true;\n+    if (!mapKeys.empty())\n+        return false;\n+    fUseCrypto = true;\n+    return true;\n+}\n+\n+bool CWallet::IsLocked() const\n+{\n+    if (!IsCrypted()) {\n+        return false;\n+    }\n+    LOCK(cs_KeyStore);\n+    return vMasterKey.empty();\n+}\n+\n+bool CWallet::Lock()\n+{\n+    if (!SetCrypted())\n+        return false;\n+\n+    {\n+        LOCK(cs_KeyStore);\n+        vMasterKey.clear();\n+    }\n+\n+    NotifyStatusChanged(this);\n+    return true;\n+}\n+\n+bool CWallet::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!SetCrypted())\n+            return false;\n+\n+        bool keyPass = mapCryptedKeys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n+        for (; mi != mapCryptedKeys.end(); ++mi)\n+        {\n+            const CPubKey &vchPubKey = (*mi).second.first;\n+            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(vMasterKeyIn, vchCryptedSecret, vchPubKey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (fDecryptionThoroughlyChecked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        vMasterKey = vMasterKeyIn;\n+        fDecryptionThoroughlyChecked = true;\n+    }\n+    NotifyStatusChanged(this);\n+    return true;\n+}\n+\n+bool CWallet::HaveKey(const CKeyID &address) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted()) {\n+        return FillableSigningProvider::HaveKey(address);\n+    }\n+    return mapCryptedKeys.count(address) > 0;\n+}\n+\n+bool CWallet::GetKey(const CKeyID &address, CKey& keyOut) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted()) {\n+        return FillableSigningProvider::GetKey(address, keyOut);\n+    }\n+\n+    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n+    if (mi != mapCryptedKeys.end())\n+    {\n+        const CPubKey &vchPubKey = (*mi).second.first;\n+        const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+        return DecryptKey(vMasterKey, vchCryptedSecret, vchPubKey, keyOut);\n+    }\n+    return false;\n+}\n+\n+bool CWallet::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted())\n+        return FillableSigningProvider::GetPubKey(address, vchPubKeyOut);\n+\n+    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n+    if (mi != mapCryptedKeys.end())\n+    {\n+        vchPubKeyOut = (*mi).second.first;\n+        return true;\n+    }\n+    // Check for watch-only pubkeys\n+    return FillableSigningProvider::GetPubKey(address, vchPubKeyOut);\n+}\n+\n+std::set<CKeyID> CWallet::GetKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted()) {\n+        return FillableSigningProvider::GetKeys();\n+    }\n+    std::set<CKeyID> set_address;\n+    for (const auto& mi : mapCryptedKeys) {\n+        set_address.insert(mi.first);\n+    }\n+    return set_address;\n+}\n+\n+bool CWallet::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n+{\n+    LOCK(cs_KeyStore);\n+    if (!mapCryptedKeys.empty() || IsCrypted())\n+        return false;\n+\n+    fUseCrypto = true;\n+    for (const KeyMap::value_type& mKey : mapKeys)\n+    {\n+        const CKey &key = mKey.second;\n+        CPubKey vchPubKey = key.GetPubKey();\n+        CKeyingMaterial vchSecret(key.begin(), key.end());\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!EncryptSecret(vMasterKeyIn, vchSecret, vchPubKey.GetHash(), vchCryptedSecret))\n+            return false;\n+        if (!AddCryptedKey(vchPubKey, vchCryptedSecret))\n+            return false;\n+    }\n+    mapKeys.clear();\n+    return true;\n+}\n+\n+bool CWallet::AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted()) {\n+        return FillableSigningProvider::AddKeyPubKey(key, pubkey);\n+    }\n+\n+    if (IsLocked()) {\n+        return false;\n+    }\n+\n+    std::vector<unsigned char> vchCryptedSecret;\n+    CKeyingMaterial vchSecret(key.begin(), key.end());\n+    if (!EncryptSecret(vMasterKey, vchSecret, pubkey.GetHash(), vchCryptedSecret)) {\n+        return false;\n+    }\n+\n+    if (!AddCryptedKey(pubkey, vchCryptedSecret)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+\n+bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    LOCK(cs_KeyStore);\n+    if (!SetCrypted()) {\n+        return false;\n+    }\n+\n+    mapCryptedKeys[vchPubKey.GetID()] = make_pair(vchPubKey, vchCryptedSecret);\n+    ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n+    return true;\n+}"
      },
      {
        "sha": "bd92147a599949169f6e6e20bfa1b070725f0227",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 44,
        "deletions": 4,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f5b81e6edae9cb22559545de63f391d97c15701/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f5b81e6edae9cb22559545de63f391d97c15701/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8f5b81e6edae9cb22559545de63f391d97c15701",
        "patch": "@@ -35,6 +35,8 @@\n #include <utility>\n #include <vector>\n \n+#include <boost/signals2/signal.hpp>\n+\n //! Explicitly unload and delete the wallet.\n //! Blocks the current thread after signaling the unload intent so that all\n //! wallet clients release the wallet.\n@@ -709,9 +711,31 @@ class WalletRescanReserver; //forward declarations for ScanForWalletTransactions\n  * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n-class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notifications\n+class CWallet final : public FillableSigningProvider, private interfaces::Chain::Notifications\n {\n private:\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);\n+\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto;\n+\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked;\n+\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+\n+    bool SetCrypted();\n+\n+    //! will encrypt previously unencrypted keys\n+    bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n+\n+    bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false);\n+    CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n+\n+    bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    bool AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey);\n+\n     std::atomic<bool> fAbortRescan{false};\n     std::atomic<bool> fScanningWallet{false}; // controlled by WalletRescanReserver\n     std::atomic<int64_t> m_scanning_start{0};\n@@ -879,7 +903,9 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n \n     /** Construct wallet with specified name and database implementation. */\n     CWallet(interfaces::Chain* chain, const WalletLocation& location, std::unique_ptr<WalletDatabase> database)\n-        : m_chain(chain),\n+        : fUseCrypto(false),\n+          fDecryptionThoroughlyChecked(false),\n+          m_chain(chain),\n           m_location(location),\n           database(std::move(database))\n     {\n@@ -893,6 +919,10 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n         encrypted_batch = nullptr;\n     }\n \n+    bool IsCrypted() const { return fUseCrypto; }\n+    bool IsLocked() const;\n+    bool Lock();\n+\n     std::map<uint256, CWalletTx> mapWallet GUARDED_BY(cs_wallet);\n \n     typedef std::multimap<int64_t, CWalletTx*> TxItems;\n@@ -975,7 +1005,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     //! Adds a key to the store, and saves it to disk.\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n-    bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n+    bool LoadKey(const CKey& key, const CPubKey &pubkey) { return AddKeyPubKeyInner(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n     void LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n@@ -986,9 +1016,13 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Adds an encrypted key to the store, and saves it to disk.\n-    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) override;\n+    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    bool HaveKey(const CKeyID &address) const override;\n+    std::set<CKeyID> GetKeys() const override;\n     bool AddCScript(const CScript& redeemScript) override;\n     bool LoadCScript(const CScript& redeemScript);\n \n@@ -1232,6 +1266,12 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     /** Keypool has new keys */\n     boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n \n+    /**\n+     * Wallet status (encrypted, locked) changed.\n+     * Note: Called without locks held.\n+     */\n+    boost::signals2::signal<void (CWallet* wallet)> NotifyStatusChanged;\n+\n     /** Inquire whether this wallet broadcasts transactions. */\n     bool GetBroadcastTransactions() const { return fBroadcastTransactions; }\n     /** Set whether this wallet broadcasts transactions. */"
      }
    ]
  },
  {
    "sha": "93ce4a0b6fb54efb1f424a71dfc09cc33307e5b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2NlNGEwYjZmYjU0ZWZiMWY0MjRhNzFkZmMwOWNjMzMzMDdlNWI5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-17T21:46:52Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T20:20:18Z"
      },
      "message": "Move WatchOnly stuff from SigningProvider to CWallet",
      "tree": {
        "sha": "6c909466c7cc676aa7ec477e89c0c4ab87f65fd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c909466c7cc676aa7ec477e89c0c4ab87f65fd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93ce4a0b6fb54efb1f424a71dfc09cc33307e5b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93ce4a0b6fb54efb1f424a71dfc09cc33307e5b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93ce4a0b6fb54efb1f424a71dfc09cc33307e5b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93ce4a0b6fb54efb1f424a71dfc09cc33307e5b9/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f5b81e6edae9cb22559545de63f391d97c15701",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f5b81e6edae9cb22559545de63f391d97c15701",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f5b81e6edae9cb22559545de63f391d97c15701"
      }
    ],
    "stats": {
      "total": 163,
      "additions": 84,
      "deletions": 79
    },
    "files": [
      {
        "sha": "01757e2f655375c37e4f5e57c61445ec30837ed9",
        "filename": "src/script/signingprovider.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 61,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93ce4a0b6fb54efb1f424a71dfc09cc33307e5b9/src/script/signingprovider.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93ce4a0b6fb54efb1f424a71dfc09cc33307e5b9/src/script/signingprovider.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.cpp?ref=93ce4a0b6fb54efb1f424a71dfc09cc33307e5b9",
        "patch": "@@ -73,8 +73,6 @@ void FillableSigningProvider::ImplicitlyLearnRelatedKeyScripts(const CPubKey& pu\n {\n     AssertLockHeld(cs_KeyStore);\n     CKeyID key_id = pubkey.GetID();\n-    // We must actually know about this key already.\n-    assert(HaveKey(key_id) || mapWatchKeys.count(key_id));\n     // This adds the redeemscripts necessary to detect P2WPKH and P2SH-P2WPKH\n     // outputs. Technically P2WPKH outputs don't have a redeemscript to be\n     // spent. However, our current IsMine logic requires the corresponding\n@@ -98,12 +96,6 @@ bool FillableSigningProvider::GetPubKey(const CKeyID &address, CPubKey &vchPubKe\n {\n     CKey key;\n     if (!GetKey(address, key)) {\n-        LOCK(cs_KeyStore);\n-        WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n-        if (it != mapWatchKeys.end()) {\n-            vchPubKeyOut = it->second;\n-            return true;\n-        }\n         return false;\n     }\n     vchPubKeyOut = key.GetPubKey();\n@@ -183,59 +175,6 @@ bool FillableSigningProvider::GetCScript(const CScriptID &hash, CScript& redeemS\n     return false;\n }\n \n-static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)\n-{\n-    //TODO: Use Solver to extract this?\n-    CScript::const_iterator pc = dest.begin();\n-    opcodetype opcode;\n-    std::vector<unsigned char> vch;\n-    if (!dest.GetOp(pc, opcode, vch) || !CPubKey::ValidSize(vch))\n-        return false;\n-    pubKeyOut = CPubKey(vch);\n-    if (!pubKeyOut.IsFullyValid())\n-        return false;\n-    if (!dest.GetOp(pc, opcode, vch) || opcode != OP_CHECKSIG || dest.GetOp(pc, opcode, vch))\n-        return false;\n-    return true;\n-}\n-\n-bool FillableSigningProvider::AddWatchOnly(const CScript &dest)\n-{\n-    LOCK(cs_KeyStore);\n-    setWatchOnly.insert(dest);\n-    CPubKey pubKey;\n-    if (ExtractPubKey(dest, pubKey)) {\n-        mapWatchKeys[pubKey.GetID()] = pubKey;\n-        ImplicitlyLearnRelatedKeyScripts(pubKey);\n-    }\n-    return true;\n-}\n-\n-bool FillableSigningProvider::RemoveWatchOnly(const CScript &dest)\n-{\n-    LOCK(cs_KeyStore);\n-    setWatchOnly.erase(dest);\n-    CPubKey pubKey;\n-    if (ExtractPubKey(dest, pubKey)) {\n-        mapWatchKeys.erase(pubKey.GetID());\n-    }\n-    // Related CScripts are not removed; having superfluous scripts around is\n-    // harmless (see comment in ImplicitlyLearnRelatedKeyScripts).\n-    return true;\n-}\n-\n-bool FillableSigningProvider::HaveWatchOnly(const CScript &dest) const\n-{\n-    LOCK(cs_KeyStore);\n-    return setWatchOnly.count(dest) > 0;\n-}\n-\n-bool FillableSigningProvider::HaveWatchOnly() const\n-{\n-    LOCK(cs_KeyStore);\n-    return (!setWatchOnly.empty());\n-}\n-\n CKeyID GetKeyForDestination(const SigningProvider& store, const CTxDestination& dest)\n {\n     // Only supports destinations which map to single public keys, i.e. P2PKH,"
      },
      {
        "sha": "4eec2311d4144ea863b67b24e8aae31281b24081",
        "filename": "src/script/signingprovider.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93ce4a0b6fb54efb1f424a71dfc09cc33307e5b9/src/script/signingprovider.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93ce4a0b6fb54efb1f424a71dfc09cc33307e5b9/src/script/signingprovider.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.h?ref=93ce4a0b6fb54efb1f424a71dfc09cc33307e5b9",
        "patch": "@@ -66,14 +66,10 @@ class FillableSigningProvider : public SigningProvider\n     mutable CCriticalSection cs_KeyStore;\n \n     using KeyMap = std::map<CKeyID, CKey>;\n-    using WatchKeyMap = std::map<CKeyID, CPubKey>;\n     using ScriptMap = std::map<CScriptID, CScript>;\n-    using WatchOnlySet = std::set<CScript>;\n \n     KeyMap mapKeys GUARDED_BY(cs_KeyStore);\n-    WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n     ScriptMap mapScripts GUARDED_BY(cs_KeyStore);\n-    WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n \n     void ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n@@ -88,11 +84,6 @@ class FillableSigningProvider : public SigningProvider\n     virtual bool HaveCScript(const CScriptID &hash) const override;\n     virtual std::set<CScriptID> GetCScripts() const;\n     virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;\n-\n-    virtual bool AddWatchOnly(const CScript &dest);\n-    virtual bool RemoveWatchOnly(const CScript &dest);\n-    virtual bool HaveWatchOnly(const CScript &dest) const;\n-    virtual bool HaveWatchOnly() const;\n };\n \n /** Return the CKeyID of the key involved in a script (if there is a unique one). */"
      },
      {
        "sha": "f4472d5bf44bdeb14a84e748bb30fb65cca65e04",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 7,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93ce4a0b6fb54efb1f424a71dfc09cc33307e5b9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93ce4a0b6fb54efb1f424a71dfc09cc33307e5b9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=93ce4a0b6fb54efb1f424a71dfc09cc33307e5b9",
        "patch": "@@ -455,9 +455,37 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n     return FillableSigningProvider::AddCScript(redeemScript);\n }\n \n+static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)\n+{\n+    //TODO: Use Solver to extract this?\n+    CScript::const_iterator pc = dest.begin();\n+    opcodetype opcode;\n+    std::vector<unsigned char> vch;\n+    if (!dest.GetOp(pc, opcode, vch) || !CPubKey::ValidSize(vch))\n+        return false;\n+    pubKeyOut = CPubKey(vch);\n+    if (!pubKeyOut.IsFullyValid())\n+        return false;\n+    if (!dest.GetOp(pc, opcode, vch) || opcode != OP_CHECKSIG || dest.GetOp(pc, opcode, vch))\n+        return false;\n+    return true;\n+}\n+\n+bool CWallet::AddWatchOnlyInMem(const CScript &dest)\n+{\n+    LOCK(cs_KeyStore);\n+    setWatchOnly.insert(dest);\n+    CPubKey pubKey;\n+    if (ExtractPubKey(dest, pubKey)) {\n+        mapWatchKeys[pubKey.GetID()] = pubKey;\n+        ImplicitlyLearnRelatedKeyScripts(pubKey);\n+    }\n+    return true;\n+}\n+\n bool CWallet::AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest)\n {\n-    if (!FillableSigningProvider::AddWatchOnly(dest))\n+    if (!AddWatchOnlyInMem(dest))\n         return false;\n     const CKeyMetadata& meta = m_script_metadata[CScriptID(dest)];\n     UpdateTimeFirstKey(meta.nCreateTime);\n@@ -490,8 +518,17 @@ bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n bool CWallet::RemoveWatchOnly(const CScript &dest)\n {\n     AssertLockHeld(cs_wallet);\n-    if (!FillableSigningProvider::RemoveWatchOnly(dest))\n-        return false;\n+    {\n+        LOCK(cs_KeyStore);\n+        setWatchOnly.erase(dest);\n+        CPubKey pubKey;\n+        if (ExtractPubKey(dest, pubKey)) {\n+            mapWatchKeys.erase(pubKey.GetID());\n+        }\n+        // Related CScripts are not removed; having superfluous scripts around is\n+        // harmless (see comment in ImplicitlyLearnRelatedKeyScripts).\n+    }\n+\n     if (!HaveWatchOnly())\n         NotifyWatchonlyChanged(false);\n     if (!WalletBatch(*database).EraseWatchOnly(dest))\n@@ -502,7 +539,19 @@ bool CWallet::RemoveWatchOnly(const CScript &dest)\n \n bool CWallet::LoadWatchOnly(const CScript &dest)\n {\n-    return FillableSigningProvider::AddWatchOnly(dest);\n+    return AddWatchOnlyInMem(dest);\n+}\n+\n+bool CWallet::HaveWatchOnly(const CScript &dest) const\n+{\n+    LOCK(cs_KeyStore);\n+    return setWatchOnly.count(dest) > 0;\n+}\n+\n+bool CWallet::HaveWatchOnly() const\n+{\n+    LOCK(cs_KeyStore);\n+    return (!setWatchOnly.empty());\n }\n \n bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_keys)\n@@ -4687,11 +4736,26 @@ bool CWallet::GetKey(const CKeyID &address, CKey& keyOut) const\n     return false;\n }\n \n+bool CWallet::GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const\n+{\n+    LOCK(cs_KeyStore);\n+    WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n+    if (it != mapWatchKeys.end()) {\n+        pubkey_out = it->second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n bool CWallet::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n {\n     LOCK(cs_KeyStore);\n-    if (!IsCrypted())\n-        return FillableSigningProvider::GetPubKey(address, vchPubKeyOut);\n+    if (!IsCrypted()) {\n+        if (!FillableSigningProvider::GetPubKey(address, vchPubKeyOut)) {\n+            return GetWatchPubKey(address, vchPubKeyOut);\n+        }\n+        return true;\n+    }\n \n     CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n     if (mi != mapCryptedKeys.end())\n@@ -4700,7 +4764,7 @@ bool CWallet::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n         return true;\n     }\n     // Check for watch-only pubkeys\n-    return FillableSigningProvider::GetPubKey(address, vchPubKeyOut);\n+    return GetWatchPubKey(address, vchPubKeyOut);\n }\n \n std::set<CKeyID> CWallet::GetKeys() const"
      },
      {
        "sha": "80fb128f80c2cd6f3a881a015bc3ebdb4745b254",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93ce4a0b6fb54efb1f424a71dfc09cc33307e5b9/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93ce4a0b6fb54efb1f424a71dfc09cc33307e5b9/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=93ce4a0b6fb54efb1f424a71dfc09cc33307e5b9",
        "patch": "@@ -724,6 +724,8 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     bool fDecryptionThoroughlyChecked;\n \n     using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+    using WatchOnlySet = std::set<CScript>;\n+    using WatchKeyMap = std::map<CKeyID, CPubKey>;\n \n     bool SetCrypted();\n \n@@ -732,6 +734,8 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n \n     bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false);\n     CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n+    WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n+    WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n \n     bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     bool AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey);\n@@ -818,8 +822,9 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n      * of the other AddWatchOnly which accepts a timestamp and sets\n      * nTimeFirstKey more intelligently for more efficient rescans.\n      */\n-    bool AddWatchOnly(const CScript& dest) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool AddWatchOnly(const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool AddWatchOnlyInMem(const CScript &dest);\n \n     /** Add a KeyOriginInfo to the wallet */\n     bool AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info);\n@@ -1039,9 +1044,15 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    bool RemoveWatchOnly(const CScript &dest) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool RemoveWatchOnly(const CScript &dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n+    //! Returns whether the watch-only script is in the wallet\n+    bool HaveWatchOnly(const CScript &dest) const;\n+    //! Returns whether there are any watch-only things in the wallet\n+    bool HaveWatchOnly() const;\n+    //! Fetches a pubkey from mapWatchKeys if it exists there\n+    bool GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const;\n \n     //! Holds a timestamp at which point the wallet is scheduled (externally) to be relocked. Caller must arrange for actual relocking to occur via Lock().\n     int64_t nRelockTime = 0;"
      }
    ]
  }
]