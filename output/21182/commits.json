[
  {
    "sha": "7bf04e358a6550ac9851f1b2d87795927fc5ff4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmYwNGUzNThhNjU1MGFjOTg1MWYxYjJkODc3OTU5MjdmYzVmZjRi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-02-15T07:53:02Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-02-17T00:04:11Z"
      },
      "message": "build: remove mostly pointless BOOST_PROCESS macro\n\nPerforming a series of link checks for a Boost component that is\nheader-only doesn't make much sense, and currently means we just have\nanother confusing Boost macro in our tree. I'm not sure why this was\noriginally done this way; maybe Sjors or luke-jr can elaborate\n(#15382 (929cda5470f98d1ef85c05b1cad4e2fb9227e3b0))?\n\nThe macro also has the side-effect of producing confusing error\nmessages. i.e in #20744, the CI is currently failing with:\n```bash\nchecking for boostlib >= 1.58.0 (105800) lib path in \"/tmp/cirrus-ci-build/depends/x86_64-pc-linux-gnu/lib\"... yes\nchecking for boostlib >= 1.58.0 (105800)... yes\nchecking whether the Boost::Process library is available... yes\nconfigure: error: Could not find a version of the Boost::Process library!\n```\n\nThis isn't useful, given there is no such thing as a `Boost::Process`\nlibrary.\n\nThis PR just removes the macro entirely, but maintains a `--with-boost-process`\n(defaulting to off), flag to configure. Hopefully this will also be\nremoved, in favour of `--enable-disable-external-signer` if/when #16546\nis merged.",
      "tree": {
        "sha": "534789b5b5795fc4fd456746fb04d5635869a6a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/534789b5b5795fc4fd456746fb04d5635869a6a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bf04e358a6550ac9851f1b2d87795927fc5ff4b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmAsXXsACgkQLuufXMCV\nJsHrPRAAojwktOticDuH4qdPBunBQVbQ1N8ukRvV6V+ClGy6DZIrYvRK1P76rQ2t\nj02E191pHeUTodP6PqxdsNCkAJqaW4c40V9pyl1coj091noFBbNWMs49sxjKg9h7\nJaVIrCjkjAyX3uOiDWUrsIsZ3ClQjdXekGLH+l51HthmSsZnK1ZA3+X09P0d8Fyn\nXKRbzaxsFhLOIwvXM+MWIO13FhQjSzB0acH/tpsXoqaO8XbvV1pcfhXvN7fky3mB\n0kIx6h6yw703//PUC4T0kKCjY/wkG/cYUIDgFOxWO0ALP42LWq/ACU5bcrKcYWH0\nmyT0+wDtS3fAw/6VTTmsSSWk7yQZ50hpaYhtQWegR9W8ZvFn9xZmPUoHanMxRB34\ny0NprQyf88kRa73HB2UaRBGhYgqQ5TuBaSm91g1n0YGE8eyX+aV9gTx/ygxyZUMs\nQYnn2+D2SUjQ5YHHvF1wrAU5pSIR6dvE/k9vWehJN8+Dc1SKw8bkzk7d0G/Eh/9+\n9Hj3i92AwucKHzl5MGZYyQ9EjCE7Lod+pfnZTYNh2uJe4yTCfsFFFZwSoVlqWL1m\nvpFVKqvhnEZnKyi43qYkq4Z/P3DxTBLtWXhv/nGqQyxE0t+sUYBQTvUyLSLq+dWr\nqH5TGTMKZuvHxgNzTqaS1F9Jf+oYRCJ7GXKDx13n4RQb3KU4gbI=\n=0Ssz\n-----END PGP SIGNATURE-----",
        "payload": "tree 534789b5b5795fc4fd456746fb04d5635869a6a7\nparent 92fee79dab384acea47bf20741a9847a58253330\nauthor fanquake <fanquake@gmail.com> 1613375582 +0800\ncommitter fanquake <fanquake@gmail.com> 1613520251 +0800\n\nbuild: remove mostly pointless BOOST_PROCESS macro\n\nPerforming a series of link checks for a Boost component that is\nheader-only doesn't make much sense, and currently means we just have\nanother confusing Boost macro in our tree. I'm not sure why this was\noriginally done this way; maybe Sjors or luke-jr can elaborate\n(#15382 (929cda5470f98d1ef85c05b1cad4e2fb9227e3b0))?\n\nThe macro also has the side-effect of producing confusing error\nmessages. i.e in #20744, the CI is currently failing with:\n```bash\nchecking for boostlib >= 1.58.0 (105800) lib path in \"/tmp/cirrus-ci-build/depends/x86_64-pc-linux-gnu/lib\"... yes\nchecking for boostlib >= 1.58.0 (105800)... yes\nchecking whether the Boost::Process library is available... yes\nconfigure: error: Could not find a version of the Boost::Process library!\n```\n\nThis isn't useful, given there is no such thing as a `Boost::Process`\nlibrary.\n\nThis PR just removes the macro entirely, but maintains a `--with-boost-process`\n(defaulting to off), flag to configure. Hopefully this will also be\nremoved, in favour of `--enable-disable-external-signer` if/when #16546\nis merged.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf04e358a6550ac9851f1b2d87795927fc5ff4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7bf04e358a6550ac9851f1b2d87795927fc5ff4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf04e358a6550ac9851f1b2d87795927fc5ff4b/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92fee79dab384acea47bf20741a9847a58253330",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92fee79dab384acea47bf20741a9847a58253330",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92fee79dab384acea47bf20741a9847a58253330"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 15,
      "deletions": 124
    },
    "files": [
      {
        "sha": "5d20e67464fcde6ee00f2582607e59f0759115b8",
        "filename": "build-aux/m4/ax_boost_process.m4",
        "status": "removed",
        "additions": 0,
        "deletions": 121,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fee79dab384acea47bf20741a9847a58253330/build-aux/m4/ax_boost_process.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fee79dab384acea47bf20741a9847a58253330/build-aux/m4/ax_boost_process.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_process.m4?ref=92fee79dab384acea47bf20741a9847a58253330",
        "patch": "@@ -1,121 +0,0 @@\n-# ===========================================================================\n-#     https://www.gnu.org/software/autoconf-archive/ax_boost_process.html\n-# ===========================================================================\n-#\n-# SYNOPSIS\n-#\n-#   AX_BOOST_PROCESS\n-#\n-# DESCRIPTION\n-#\n-#   Test for Process library from the Boost C++ libraries. The macro\n-#   requires a preceding call to AX_BOOST_BASE. Further documentation is\n-#   available at <http://randspringer.de/boost/index.html>.\n-#\n-#   This macro calls:\n-#\n-#     AC_SUBST(BOOST_PROCESS_LIB)\n-#\n-#   And sets:\n-#\n-#     HAVE_BOOST_PROCESS\n-#\n-# LICENSE\n-#\n-#   Copyright (c) 2008 Thomas Porschberg <thomas@randspringer.de>\n-#   Copyright (c) 2008 Michael Tindal\n-#   Copyright (c) 2008 Daniel Casimiro <dan.casimiro@gmail.com>\n-#\n-#   Copying and distribution of this file, with or without modification, are\n-#   permitted in any medium without royalty provided the copyright notice\n-#   and this notice are preserved. This file is offered as-is, without any\n-#   warranty.\n-\n-#serial 2\n-\n-AC_DEFUN([AX_BOOST_PROCESS],\n-[\n-\tAC_ARG_WITH([boost-process],\n-\tAS_HELP_STRING([--with-boost-process@<:@=special-lib@:>@],\n-                   [use the Process library from boost - it is possible to specify a certain library for the linker\n-                        e.g. --with-boost-process=boost_process-gcc-mt ]),\n-        [\n-        if test \"$withval\" = \"no\"; then\n-\t\t\twant_boost_process=\"no\"\n-        elif test \"$withval\" = \"yes\"; then\n-            want_boost_process=\"yes\"\n-            ax_boost_user_process_lib=\"\"\n-        else\n-\t\t    want_boost_process=\"yes\"\n-\t\tax_boost_user_process_lib=\"$withval\"\n-\t\tfi\n-        ],\n-        [want_boost_process=\"yes\"]\n-\t)\n-\n-\tif test \"x$want_boost_process\" = \"xyes\"; then\n-        AC_REQUIRE([AC_PROG_CC])\n-        AC_REQUIRE([AC_CANONICAL_BUILD])\n-\t\tCPPFLAGS_SAVED=\"$CPPFLAGS\"\n-\t\tCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n-\t\texport CPPFLAGS\n-\n-\t\tLDFLAGS_SAVED=\"$LDFLAGS\"\n-\t\tLDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n-\t\texport LDFLAGS\n-\n-        AC_CACHE_CHECK(whether the Boost::Process library is available,\n-\t\t\t\t\t   ax_cv_boost_process,\n-        [AC_LANG_PUSH([C++])\n-\t\t\t CXXFLAGS_SAVE=$CXXFLAGS\n-\t\t\t CXXFLAGS=\n-\n-             AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/process.hpp>]],\n-                [[boost::process::child* child = new boost::process::child; delete child;]])],\n-                ax_cv_boost_process=yes, ax_cv_boost_process=no)\n-\t\t\t CXXFLAGS=$CXXFLAGS_SAVE\n-             AC_LANG_POP([C++])\n-\t\t])\n-\t\tif test \"x$ax_cv_boost_process\" = \"xyes\"; then\n-\t\t\tAC_SUBST(BOOST_CPPFLAGS)\n-\n-\t\t\tAC_DEFINE(HAVE_BOOST_PROCESS,,[define if the Boost::Process library is available])\n-            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n-\n-\t\t\tLDFLAGS_SAVE=$LDFLAGS\n-            if test \"x$ax_boost_user_process_lib\" = \"x\"; then\n-                for libextension in `ls -r $BOOSTLIBDIR/libboost_process* 2>/dev/null | sed 's,.*/lib,,' | sed 's,\\..*,,'` ; do\n-                     ax_lib=${libextension}\n-\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n-                                 [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n-                                 [link_process=\"no\"])\n-\t\t\t\tdone\n-                if test \"x$link_process\" != \"xyes\"; then\n-                for libextension in `ls -r $BOOSTLIBDIR/boost_process* 2>/dev/null | sed 's,.*/,,' | sed -e 's,\\..*,,'` ; do\n-                     ax_lib=${libextension}\n-\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n-                                 [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n-                                 [link_process=\"no\"])\n-\t\t\t\tdone\n-                fi\n-\n-            else\n-               for ax_lib in $ax_boost_user_process_lib boost_process-$ax_boost_user_process_lib; do\n-\t\t\t\t      AC_CHECK_LIB($ax_lib, exit,\n-                                   [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n-                                   [link_process=\"no\"])\n-                  done\n-\n-            fi\n-            if test \"x$ax_lib\" = \"x\"; then\n-                AC_MSG_ERROR(Could not find a version of the Boost::Process library!)\n-            fi\n-\t\t\tif test \"x$link_process\" = \"xno\"; then\n-\t\t\t\tAC_MSG_ERROR(Could not link against $ax_lib !)\n-\t\t\tfi\n-\t\tfi\n-\n-\t\tCPPFLAGS=\"$CPPFLAGS_SAVED\"\n-\tLDFLAGS=\"$LDFLAGS_SAVED\"\n-\tfi\n-])"
      },
      {
        "sha": "0b2721673fcd7a0b254085349e72caa9c1436711",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf04e358a6550ac9851f1b2d87795927fc5ff4b/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf04e358a6550ac9851f1b2d87795927fc5ff4b/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=7bf04e358a6550ac9851f1b2d87795927fc5ff4b",
        "patch": "@@ -338,6 +338,11 @@ AC_ARG_ENABLE([werror],\n     [enable_werror=$enableval],\n     [enable_werror=no])\n \n+AC_ARG_WITH([boost-process],\n+    [AS_HELP_STRING([--with-boost-process],[Opt in to using Boost Process (default is no)])],\n+    [boost_process=$withval],\n+    [boost_process=no])\n+\n AC_LANG_PUSH([C++])\n \n dnl Check for a flag to turn compiler warnings into errors. This is helpful for checks which may\n@@ -1388,8 +1393,15 @@ fi\n AX_BOOST_SYSTEM\n AX_BOOST_FILESYSTEM\n \n-dnl Opt-in to boost-process\n-AS_IF([ test x$with_boost_process != x ], [ AX_BOOST_PROCESS ], [ ax_cv_boost_process=no ] )\n+dnl Opt-in to Boost Process\n+if test \"x$boost_process\" != xno; then\n+AC_MSG_CHECKING(for Boost Process)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <boost/process.hpp>]],\n+ [[ boost::process::child* child = new boost::process::child; delete child; ]])],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_BOOST_PROCESS],,[define if Boost::Process is available])],\n+ [ AC_MSG_ERROR([Boost::Process is not available!])]\n+)\n+fi\n \n if test x$suppress_external_warnings != xno; then\n     BOOST_CPPFLAGS=SUPPRESS_WARNINGS($BOOST_CPPFLAGS)\n@@ -1876,7 +1888,7 @@ esac\n \n echo\n echo \"Options used to compile and link:\"\n-echo \"  boost process = $ax_cv_boost_process\"\n+echo \"  boost process = $with_boost_process\"\n echo \"  multiprocess  = $build_multiprocess\"\n echo \"  with libs     = $build_bitcoin_libs\"\n echo \"  with wallet   = $enable_wallet\""
      }
    ]
  }
]