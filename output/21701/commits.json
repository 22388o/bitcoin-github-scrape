[
  {
    "sha": "2e9e7f4329fc313adf9ba2394edbaf2a69b59bc1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTllN2Y0MzI5ZmMzMTNhZGY5YmEyMzk0ZWRiYWYyYTY5YjU5YmMx",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-27T10:17:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-15T16:03:22Z"
      },
      "message": "tests: pull ComputeBlockVersion test into its own function\n\nThe intent here is to allow checking ComputeBlockVersion behaviour with\neach deployment, rather than only testdummy on mainnet. This commit does\nthe trivial refactoring component of that change.\n\nGithub-Pull: #21377\nRebased-From: 63879f0a4760c0c0f784029849cb5d21ee088abb",
      "tree": {
        "sha": "0b6f2f19bda1c1bd9caeeb06377d3668f0e8c9dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b6f2f19bda1c1bd9caeeb06377d3668f0e8c9dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e9e7f4329fc313adf9ba2394edbaf2a69b59bc1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEFSgSMAeFyWRE0zNNF1ZXMuCOXkEFAmB4Y8oACgkQF1ZXMuCO\nXkGg4w//bHvjAa0NsLDpTL6reSqHAOfT3z93+R4agXB+SbvYLmrBm0udCGBA3J7f\nxQ95RXxtD+vfMpdAzE3++QdUZfW4HmSdCJXAjNrRZeMc3RKd9zHZ/yov23KgxL4o\nCrKR1/eTE+V5FyQsjEcuGVv8xt05j3HOc4t/5NygvwfEHT9bQwFh1aZ5YAscloEs\nt6moo8vNINK9e8BDW2WzqNc4XmPS19P5boFKlCvcmwDE4CtcWrmoLjH+iwfDyDs2\nUsBR2mAfsh9RT5c2kDWCDu64mJW70T4WDCxbVNwKjvrYYTzIdTUB2UbF4ffJIxZB\nDfmZC7yZtst3eRP1D08np0N4MKukzo3SZUUL/W6t0FcHTPJUdjOjRdEMR3+jzNoV\njaEa1Vr8bAPdUePe/ciC7JEB0HjDMpCQQffRtT2ZsPsNsqVWbgPH33kMm3l4CiDG\n550kl7xyHSsds1qYi/heqcKbtxQnNCRtsJq0t5fd/gS3d0JeHFYtPUEHrpS/CAOH\nklaOACGvSnwSC5hmLDZPi7DZ/ei5bF+sV7mHFs50tQnlnjxHNCPYus+M2WWrJwVA\naHzbc9VbCZDSyfVPI2ZnTlhGpLsJhK0WLBEahhGWlmex4NrnEId8yTu8g/7aVDCp\nyooXX1Dwqub7yVCZ8XbMxth4BGpzdkUD9Zrs3MBk7VVwJK28Uac=\n=uL5C\n-----END PGP SIGNATURE-----",
        "payload": "tree 0b6f2f19bda1c1bd9caeeb06377d3668f0e8c9dd\nparent e358b43f7d89a1950d70b21763232cb2cfd70606\nauthor Anthony Towns <aj@erisian.com.au> 1616840276 +1000\ncommitter Andrew Chow <achow101-github@achow101.com> 1618502602 -0400\n\ntests: pull ComputeBlockVersion test into its own function\n\nThe intent here is to allow checking ComputeBlockVersion behaviour with\neach deployment, rather than only testdummy on mainnet. This commit does\nthe trivial refactoring component of that change.\n\nGithub-Pull: #21377\nRebased-From: 63879f0a4760c0c0f784029849cb5d21ee088abb\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e9e7f4329fc313adf9ba2394edbaf2a69b59bc1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e9e7f4329fc313adf9ba2394edbaf2a69b59bc1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e9e7f4329fc313adf9ba2394edbaf2a69b59bc1/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e358b43f7d89a1950d70b21763232cb2cfd70606",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e358b43f7d89a1950d70b21763232cb2cfd70606",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e358b43f7d89a1950d70b21763232cb2cfd70606"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 39,
      "deletions": 35
    },
    "files": [
      {
        "sha": "b09827ffe5db1925110df0735a22b618d3f6f09a",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 35,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e9e7f4329fc313adf9ba2394edbaf2a69b59bc1/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e9e7f4329fc313adf9ba2394edbaf2a69b59bc1/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=2e9e7f4329fc313adf9ba2394edbaf2a69b59bc1",
        "patch": "@@ -242,17 +242,15 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n     }\n }\n \n-BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n+/** Check that ComputeBlockVersion will set the appropriate bit correctly */\n+static void check_computeblockversion(const Consensus::Params& params, Consensus::DeploymentPos dep)\n {\n-    // Check that ComputeBlockVersion will set the appropriate bit correctly\n-    // on mainnet.\n-    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n-    const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n+    // This implicitly uses versionbitscache, so clear it every time\n+    versionbitscache.Clear();\n \n-    // Use the TESTDUMMY deployment for testing purposes.\n-    int64_t bit = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit;\n-    int64_t nStartTime = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime;\n-    int64_t nTimeout = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout;\n+    int64_t bit = params.vDeployments[dep].bit;\n+    int64_t nStartTime = params.vDeployments[dep].nStartTime;\n+    int64_t nTimeout = params.vDeployments[dep].nTimeout;\n \n     assert(nStartTime < nTimeout);\n \n@@ -267,40 +265,40 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n     // Before MedianTimePast of the chain has crossed nStartTime, the bit\n     // should not be set.\n     CBlockIndex *lastBlock = nullptr;\n-    lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+    lastBlock = firstChain.Mine(params.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n \n     // Mine more blocks (4 less than the adjustment period) at the old time, and check that CBV isn't setting the bit yet.\n-    for (uint32_t i = 1; i < mainnetParams.nMinerConfirmationWindow - 4; i++) {\n-        lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    for (uint32_t i = 1; i < params.nMinerConfirmationWindow - 4; i++) {\n+        lastBlock = firstChain.Mine(params.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n         // This works because VERSIONBITS_LAST_OLD_BLOCK_VERSION happens\n         // to be 4, and the bit we're testing happens to be bit 28.\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n     }\n     // Now mine 5 more blocks at the start time -- MTP should not have passed yet, so\n     // CBV should still not yet set the bit.\n     nTime = nStartTime;\n-    for (uint32_t i = mainnetParams.nMinerConfirmationWindow - 4; i <= mainnetParams.nMinerConfirmationWindow; i++) {\n-        lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+    for (uint32_t i = params.nMinerConfirmationWindow - 4; i <= params.nMinerConfirmationWindow; i++) {\n+        lastBlock = firstChain.Mine(params.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n     }\n \n     // Advance to the next period and transition to STARTED,\n-    lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    lastBlock = firstChain.Mine(params.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     // so ComputeBlockVersion should now set the bit,\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n     // and should also be using the VERSIONBITS_TOP_BITS.\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n \n     // Check that ComputeBlockVersion will set the bit until nTimeout\n     nTime += 600;\n-    uint32_t blocksToMine = mainnetParams.nMinerConfirmationWindow * 2; // test blocks for up to 2 time periods\n-    uint32_t nHeight = mainnetParams.nMinerConfirmationWindow * 3;\n+    uint32_t blocksToMine = params.nMinerConfirmationWindow * 2; // test blocks for up to 2 time periods\n+    uint32_t nHeight = params.nMinerConfirmationWindow * 3;\n     // These blocks are all before nTimeout is reached.\n     while (nTime < nTimeout && blocksToMine > 0) {\n         lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+        BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n         blocksToMine--;\n         nTime += 600;\n         nHeight += 1;\n@@ -309,14 +307,14 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n     nTime = nTimeout;\n     // FAILED is only triggered at the end of a period, so CBV should be setting\n     // the bit until the period transition.\n-    for (uint32_t i = 0; i < mainnetParams.nMinerConfirmationWindow - 1; i++) {\n+    for (uint32_t i = 0; i < params.nMinerConfirmationWindow - 1; i++) {\n         lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+        BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n         nHeight += 1;\n     }\n     // The next block should trigger no longer setting the bit.\n     lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n \n     // On a new chain:\n     // verify that the bit will be set after lock-in, and then stop being set\n@@ -325,26 +323,32 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n \n     // Mine one period worth of blocks, and check that the bit will be on for the\n     // next period.\n-    lastBlock = secondChain.Mine(mainnetParams.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+    lastBlock = secondChain.Mine(params.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n \n     // Mine another period worth of blocks, signaling the new bit.\n-    lastBlock = secondChain.Mine(mainnetParams.nMinerConfirmationWindow * 2, nTime, VERSIONBITS_TOP_BITS | (1<<bit)).Tip();\n+    lastBlock = secondChain.Mine(params.nMinerConfirmationWindow * 2, nTime, VERSIONBITS_TOP_BITS | (1<<bit)).Tip();\n     // After one period of setting the bit on each block, it should have locked in.\n     // We keep setting the bit for one more period though, until activation.\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n \n     // Now check that we keep mining the block until the end of this period, and\n     // then stop at the beginning of the next period.\n-    lastBlock = secondChain.Mine((mainnetParams.nMinerConfirmationWindow * 3) - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1 << bit)) != 0);\n-    lastBlock = secondChain.Mine(mainnetParams.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+    lastBlock = secondChain.Mine((params.nMinerConfirmationWindow * 3) - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n+    lastBlock = secondChain.Mine(params.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n \n     // Finally, verify that after a soft fork has activated, CBV no longer uses\n     // VERSIONBITS_LAST_OLD_BLOCK_VERSION.\n     //BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n }\n \n+BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n+{\n+    // Use the TESTDUMMY deployment for testing purposes.\n+    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n+    check_computeblockversion(chainParams->GetConsensus(), Consensus::DEPLOYMENT_TESTDUMMY);\n+}\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "1c0164544c66b691f93b3b1114eee97cbabd99b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzAxNjQ1NDRjNjZiNjkxZjkzYjNiMTExNGVlZTk3Y2JhYmQ5OWIy",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-27T17:10:48Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-15T16:03:24Z"
      },
      "message": "tests: test ComputeBlockVersion for all deployments\n\nThis generalises the ComputeBlockVersion test so that it can apply to\nany activation parameters we might set, and checks all the parameters\nset for each deployment on each chain, to simultaneously ensure that the\ndeployments we have configured work sensibly, and that the test code\ndoes not suffer bitrot in the event that all interesting deployments\nare buried.\n\nGithub-Pull: #21377\nRebased-From: 593274445004506c921d5d851361aefb3434d744",
      "tree": {
        "sha": "840512cf22befa6ecc92fb728429014a25527250",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/840512cf22befa6ecc92fb728429014a25527250"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c0164544c66b691f93b3b1114eee97cbabd99b2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEFSgSMAeFyWRE0zNNF1ZXMuCOXkEFAmB4Y8wACgkQF1ZXMuCO\nXkFVvRAAhnerneXa7noA3NMZv4H+vsdD6AKbjiamsjjGM7sX4be+4m9iDq012aFg\nPA2wjZfoVvFjIe3nZO+RXgpBTYbN6S5U20YO+3kZkYoxgNHNU7blCaLsPrCAdTKo\nLEh+tVhywRbhAXidI7+2OxFm9+Pl6m3Vk4epVwiftjrhIF7CpyO6EM9xVuGnMus3\nw/ugRRqBfjDcTF2N1Od20KEV2xBIg8BgXPY9XiPcpIk6yXFc05uSuaTEdcS75Txf\nplmbnIaYE6W1WIviPiS3bkzCsuFcMVkkbPs816DdY2ZClp617TPr1FDemPA7BBSt\nvgy2aQ5UBnR4dlg1JSNVsJKY71TtIQs6WMsKAA1kA69Man5Sn2Rs1g1/1cEClyaU\nl11nqCWDS0TXOHEdsl3+NJ6S5EIsCgU6DDafSMv6NPFBjwEI0SWHgKoZpJVApkc0\ns1cD0j8dNgLxouKFNGbKElqlW0ZO6L2cplTnT4RwKtKPwuacvCdjUtwBCkWGrBkP\nqAuKmUtZskPYFgMJJTO2JZjfVf7S9434oYHEgecwyP0T1QkdkbJ22ctW2ASp0cQ8\nBmX5+ARXRhmuGrdDL5xppOZnqZw2xQeKuG0hxaZ2Hn64ECcDykyITXTSwp1/7KEi\nXK4pAaSDlH/hxZVl3S1Vtk6LbDLiU+qIhgm/jNP3+Bt/7ZklE50=\n=yKJF\n-----END PGP SIGNATURE-----",
        "payload": "tree 840512cf22befa6ecc92fb728429014a25527250\nparent 2e9e7f4329fc313adf9ba2394edbaf2a69b59bc1\nauthor Anthony Towns <aj@erisian.com.au> 1616865048 +1000\ncommitter Andrew Chow <achow101-github@achow101.com> 1618502604 -0400\n\ntests: test ComputeBlockVersion for all deployments\n\nThis generalises the ComputeBlockVersion test so that it can apply to\nany activation parameters we might set, and checks all the parameters\nset for each deployment on each chain, to simultaneously ensure that the\ndeployments we have configured work sensibly, and that the test code\ndoes not suffer bitrot in the event that all interesting deployments\nare buried.\n\nGithub-Pull: #21377\nRebased-From: 593274445004506c921d5d851361aefb3434d744\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c0164544c66b691f93b3b1114eee97cbabd99b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c0164544c66b691f93b3b1114eee97cbabd99b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c0164544c66b691f93b3b1114eee97cbabd99b2/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e9e7f4329fc313adf9ba2394edbaf2a69b59bc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e9e7f4329fc313adf9ba2394edbaf2a69b59bc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e9e7f4329fc313adf9ba2394edbaf2a69b59bc1"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 71,
      "deletions": 35
    },
    "files": [
      {
        "sha": "7e96ef923ea0c847ffdc3ef4e0cb62f9b5f3a631",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 35,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c0164544c66b691f93b3b1114eee97cbabd99b2/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c0164544c66b691f93b3b1114eee97cbabd99b2/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=1c0164544c66b691f93b3b1114eee97cbabd99b2",
        "patch": "@@ -252,38 +252,61 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n     int64_t nStartTime = params.vDeployments[dep].nStartTime;\n     int64_t nTimeout = params.vDeployments[dep].nTimeout;\n \n-    assert(nStartTime < nTimeout);\n+    // should not be any signalling for first block\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(nullptr, params), VERSIONBITS_TOP_BITS);\n+\n+    // always active deployments shouldn't need to be tested further\n+    if (nStartTime == Consensus::BIP9Deployment::ALWAYS_ACTIVE) return;\n+\n+    BOOST_REQUIRE(nStartTime < nTimeout);\n+    BOOST_REQUIRE(nStartTime >= 0);\n+    BOOST_REQUIRE(nTimeout <= std::numeric_limits<uint32_t>::max() || nTimeout == Consensus::BIP9Deployment::NO_TIMEOUT);\n+    BOOST_REQUIRE(0 <= bit && bit < 32);\n+    BOOST_REQUIRE(((1 << bit) & VERSIONBITS_TOP_MASK) == 0);\n \n     // In the first chain, test that the bit is set by CBV until it has failed.\n     // In the second chain, test the bit is set by CBV while STARTED and\n     // LOCKED-IN, and then no longer set while ACTIVE.\n     VersionBitsTester firstChain, secondChain;\n \n-    // Start generating blocks before nStartTime\n-    int64_t nTime = nStartTime - 1;\n+    int64_t nTime = nStartTime;\n \n-    // Before MedianTimePast of the chain has crossed nStartTime, the bit\n-    // should not be set.\n     CBlockIndex *lastBlock = nullptr;\n-    lastBlock = firstChain.Mine(params.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n \n-    // Mine more blocks (4 less than the adjustment period) at the old time, and check that CBV isn't setting the bit yet.\n-    for (uint32_t i = 1; i < params.nMinerConfirmationWindow - 4; i++) {\n-        lastBlock = firstChain.Mine(params.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        // This works because VERSIONBITS_LAST_OLD_BLOCK_VERSION happens\n-        // to be 4, and the bit we're testing happens to be bit 28.\n+    // Before MedianTimePast of the chain has crossed nStartTime, the bit\n+    // should not be set.\n+    if (nTime == 0) {\n+        // since CBlockIndex::nTime is uint32_t we can't represent any\n+        // earlier time, so will transition from DEFINED to STARTED at the\n+        // end of the first period by mining blocks at nTime == 0\n+        lastBlock = firstChain.Mine(params.nMinerConfirmationWindow - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n         BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n-    }\n-    // Now mine 5 more blocks at the start time -- MTP should not have passed yet, so\n-    // CBV should still not yet set the bit.\n-    nTime = nStartTime;\n-    for (uint32_t i = params.nMinerConfirmationWindow - 4; i <= params.nMinerConfirmationWindow; i++) {\n-        lastBlock = firstChain.Mine(params.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+        lastBlock = firstChain.Mine(params.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+        BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+        // then we'll keep mining at nStartTime...\n+    } else {\n+        // use a time 1s earlier than start time to check we stay DEFINED\n+        --nTime;\n+\n+        // Start generating blocks before nStartTime\n+        lastBlock = firstChain.Mine(params.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n         BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+\n+        // Mine more blocks (4 less than the adjustment period) at the old time, and check that CBV isn't setting the bit yet.\n+        for (uint32_t i = 1; i < params.nMinerConfirmationWindow - 4; i++) {\n+            lastBlock = firstChain.Mine(params.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+            BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+        }\n+        // Now mine 5 more blocks at the start time -- MTP should not have passed yet, so\n+        // CBV should still not yet set the bit.\n+        nTime = nStartTime;\n+        for (uint32_t i = params.nMinerConfirmationWindow - 4; i <= params.nMinerConfirmationWindow; i++) {\n+            lastBlock = firstChain.Mine(params.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+            BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+        }\n+        // Next we will advance to the next period and transition to STARTED,\n     }\n \n-    // Advance to the next period and transition to STARTED,\n     lastBlock = firstChain.Mine(params.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     // so ComputeBlockVersion should now set the bit,\n     BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n@@ -304,17 +327,29 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n         nHeight += 1;\n     }\n \n-    nTime = nTimeout;\n-    // FAILED is only triggered at the end of a period, so CBV should be setting\n-    // the bit until the period transition.\n-    for (uint32_t i = 0; i < params.nMinerConfirmationWindow - 1; i++) {\n+    if (nTimeout != Consensus::BIP9Deployment::NO_TIMEOUT) {\n+        // can reach any nTimeout other than NO_TIMEOUT due to earlier BOOST_REQUIRE\n+\n+        nTime = nTimeout;\n+\n+        // finish the last period before we start timing out\n+        while (nHeight % params.nMinerConfirmationWindow != 0) {\n+            lastBlock = firstChain.Mine(nHeight+1, nTime - 1, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+            BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+            nHeight += 1;\n+        }\n+\n+        // FAILED is only triggered at the end of a period, so CBV should be setting\n+        // the bit until the period transition.\n+        for (uint32_t i = 0; i < params.nMinerConfirmationWindow - 1; i++) {\n+            lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+            BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+            nHeight += 1;\n+        }\n+        // The next block should trigger no longer setting the bit.\n         lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n-        nHeight += 1;\n+        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n     }\n-    // The next block should trigger no longer setting the bit.\n-    lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n \n     // On a new chain:\n     // verify that the bit will be set after lock-in, and then stop being set\n@@ -338,17 +373,18 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n     BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n     lastBlock = secondChain.Mine(params.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n-\n-    // Finally, verify that after a soft fork has activated, CBV no longer uses\n-    // VERSIONBITS_LAST_OLD_BLOCK_VERSION.\n-    //BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n }\n \n BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n {\n-    // Use the TESTDUMMY deployment for testing purposes.\n-    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n-    check_computeblockversion(chainParams->GetConsensus(), Consensus::DEPLOYMENT_TESTDUMMY);\n+    // check that any deployment on any chain can conceivably reach both\n+    // ACTIVE and FAILED states in roughly the way we expect\n+    for (const auto& chain_name : {CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::SIGNET, CBaseChainParams::REGTEST}) {\n+        const auto chainParams = CreateChainParams(*m_node.args, chain_name);\n+        for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++i) {\n+            check_computeblockversion(chainParams->GetConsensus(), static_cast<Consensus::DeploymentPos>(i));\n+        }\n+    }\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "f9517e6014ccfe91d5a77e2bacca928bdce7c285",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTUxN2U2MDE0Y2NmZTkxZDVhNzdlMmJhY2NhOTI4YmRjZTdjMjg1",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-27T14:07:49Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-15T16:03:25Z"
      },
      "message": "tests: clean up versionbits test\n\nSimplify the versionbits unit test slightly to make the next set of\nchanges a little easier to follow.\n\nGithub-Pull: #21377\nRebased-From: 9e6b65f6fa205eee5c3b99343988adcb8d320460",
      "tree": {
        "sha": "b5c1276c4bb1528e2a1c90c8344685cada7ecaf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5c1276c4bb1528e2a1c90c8344685cada7ecaf4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9517e6014ccfe91d5a77e2bacca928bdce7c285",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEFSgSMAeFyWRE0zNNF1ZXMuCOXkEFAmB4Y80ACgkQF1ZXMuCO\nXkFWbA//WsnaV5qXyx+d/7DihWd+MyTTKdEAbKbG/5TYIgjLJZiFE1hVYXBa1Dor\nCp9GWC8249cD+WK4aardk5ZiNKTbJcWgHlVCeGStELMUKuRxmRXSFhECCTUdoeCX\nlKXM/davoZn/gbvbU+78Wfon8scSJFKxNlCDtc+t8WuYIZWBw4G+2puIIM8Y9jKX\nZzu4hGM3wAT7QjfZmN9H+ioaUQy909+1fj7M4UBjEZ1mPPjfOvHMB4PL0VJ47sAU\nCtmPRUas7DhV8n9AV+PJD0FUgas6Lh6fPF81luq/AsKStkF1lDydTUO3tZS2U5Xy\nrTuib19Nrxdj6o15Noa3XKEfpmHNFfPaa5SY4ycOr5bIP5vFTGNH3V9AfUo0d+Gm\ndsG3MfvawcsPGrjUtT2DxsPcSn7ZuO6tUT+DgQBlKi7bvT/YA5VjPPHNsmahkDJv\nANXU43xZ58mO4ggt6LAGjj5UrhJmoOo/2eeix2Uacma5eZ3ONfBI16BzWofLgUf5\n3WETo6ecCGRYPgy2HY+ELs4HmdnzZvz4/iU3UcgK3v00pY4C/0FxMqD5MocbnXAe\nKoIy9q93ku+/IN0UQGZYEPf/Mmp44PI2qLfdM7k1jdgmPLQ1iAMv2RjArisu6WP+\nq69IJfzq2SxaOVE7AOec/jL5RJJruNTE0Ti9uaTvq43Jc9A08EQ=\n=SiHf\n-----END PGP SIGNATURE-----",
        "payload": "tree b5c1276c4bb1528e2a1c90c8344685cada7ecaf4\nparent 1c0164544c66b691f93b3b1114eee97cbabd99b2\nauthor Anthony Towns <aj@erisian.com.au> 1616854069 +1000\ncommitter Andrew Chow <achow101-github@achow101.com> 1618502605 -0400\n\ntests: clean up versionbits test\n\nSimplify the versionbits unit test slightly to make the next set of\nchanges a little easier to follow.\n\nGithub-Pull: #21377\nRebased-From: 9e6b65f6fa205eee5c3b99343988adcb8d320460\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9517e6014ccfe91d5a77e2bacca928bdce7c285",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9517e6014ccfe91d5a77e2bacca928bdce7c285",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9517e6014ccfe91d5a77e2bacca928bdce7c285/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c0164544c66b691f93b3b1114eee97cbabd99b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c0164544c66b691f93b3b1114eee97cbabd99b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c0164544c66b691f93b3b1114eee97cbabd99b2"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 11,
      "deletions": 7
    },
    "files": [
      {
        "sha": "b42aaff9ad154847bbcc0d4179de8fc95128e707",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9517e6014ccfe91d5a77e2bacca928bdce7c285/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9517e6014ccfe91d5a77e2bacca928bdce7c285/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=f9517e6014ccfe91d5a77e2bacca928bdce7c285",
        "patch": "@@ -100,7 +100,7 @@ class VersionBitsTester\n         while (vpblock.size() < height) {\n             CBlockIndex* pindex = new CBlockIndex();\n             pindex->nHeight = vpblock.size();\n-            pindex->pprev = vpblock.size() > 0 ? vpblock.back() : nullptr;\n+            pindex->pprev = Tip();\n             pindex->nTime = nTime;\n             pindex->nVersion = nVersion;\n             pindex->BuildSkip();\n@@ -110,13 +110,14 @@ class VersionBitsTester\n     }\n \n     VersionBitsTester& TestStateSinceHeight(int height) {\n+        const CBlockIndex* tip = Tip();\n         for (int i = 0; i < CHECKERS; i++) {\n             if (InsecureRandBits(i) == 0) {\n-                BOOST_CHECK_MESSAGE(checker[i].GetStateSinceHeightFor(vpblock.empty() ? nullptr : vpblock.back()) == height, strprintf(\"Test %i for StateSinceHeight\", num));\n-                BOOST_CHECK_MESSAGE(checker_always[i].GetStateSinceHeightFor(vpblock.empty() ? nullptr : vpblock.back()) == 0, strprintf(\"Test %i for StateSinceHeight (always active)\", num));\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateSinceHeightFor(tip) == height, strprintf(\"Test %i for StateSinceHeight\", num));\n+                BOOST_CHECK_MESSAGE(checker_always[i].GetStateSinceHeightFor(tip) == 0, strprintf(\"Test %i for StateSinceHeight (always active)\", num));\n \n                 // never active may go from DEFINED -> FAILED at the first period\n-                const auto never_height = checker_never[i].GetStateSinceHeightFor(vpblock.empty() ? nullptr : vpblock.back());\n+                const auto never_height = checker_never[i].GetStateSinceHeightFor(tip);\n                 BOOST_CHECK_MESSAGE(never_height == 0 || never_height == checker_never[i].Period(paramsDummy), strprintf(\"Test %i for StateSinceHeight (never active)\", num));\n             }\n         }\n@@ -125,9 +126,9 @@ class VersionBitsTester\n     }\n \n     VersionBitsTester& TestState(ThresholdState exp) {\n+        const CBlockIndex* pindex = Tip();\n         for (int i = 0; i < CHECKERS; i++) {\n             if (InsecureRandBits(i) == 0) {\n-                const CBlockIndex* pindex = vpblock.empty() ? nullptr : vpblock.back();\n                 ThresholdState got = checker[i].GetStateFor(pindex);\n                 ThresholdState got_always = checker_always[i].GetStateFor(pindex);\n                 ThresholdState got_never = checker_never[i].GetStateFor(pindex);\n@@ -149,7 +150,7 @@ class VersionBitsTester\n     VersionBitsTester& TestActive() { return TestState(ThresholdState::ACTIVE); }\n     VersionBitsTester& TestFailed() { return TestState(ThresholdState::FAILED); }\n \n-    CBlockIndex * Tip() { return vpblock.size() ? vpblock.back() : nullptr; }\n+    CBlockIndex* Tip() { return vpblock.empty() ? nullptr : vpblock.back(); }\n };\n \n BOOST_FIXTURE_TEST_SUITE(versionbits_tests, TestingSetup)\n@@ -217,7 +218,10 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n                            .Mine(6000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(6000)\n                            .Mine(7000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(6000);\n     }\n+}\n \n+BOOST_AUTO_TEST_CASE(versionbits_sanity)\n+{\n     // Sanity checks of version bit deployments\n     const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n     const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n@@ -271,7 +275,7 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n \n     int64_t nTime = nStartTime;\n \n-    CBlockIndex *lastBlock = nullptr;\n+    const CBlockIndex *lastBlock = nullptr;\n \n     // Before MedianTimePast of the chain has crossed nStartTime, the bit\n     // should not be set."
      }
    ]
  },
  {
    "sha": "4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2FiODRjZmRmYzk4Y2QxMDQ2MjY4MWI1ZWIwZmJiYzA4YWZkMmE3",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-06T08:18:49Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-15T16:03:27Z"
      },
      "message": "versionbits: Add support for delayed activation\n\nGithub-Pull: #21377\nRebased-From: 73d4a706393e6dbd6b6d6b6428f8d3233ac0a2d8",
      "tree": {
        "sha": "5161469f332752ee172989c7012ad85741950cd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5161469f332752ee172989c7012ad85741950cd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEFSgSMAeFyWRE0zNNF1ZXMuCOXkEFAmB4Y88ACgkQF1ZXMuCO\nXkEBTBAAkzMMx1pwu/536JFP8WeDAP808Jnoi0jCNSYx1bN8RCYRdYH/n3Yafjyf\nULiNyFeKJ1wLAtC7i3PF57/SI/8YVnCnmKe3TW/koNLaaxtKRo3EheyB0leVEpUt\n9UGrdnvHrCEy2j6zw7hc74GfP61Igf6gqhvoq5bhxTewau4EMzXh80Q/wDHbJIlx\npG9lofpWnKReJko4YRoc7aM7utmpPyvAjNkHRXXsMNuhea0C0k5y7rI2yMtHSYVN\nfwCh2uNGLN76TSWb5OE5oSbf0H39oLhGf/kyy0rnnvEmbQ5SnrBkZ5oXyLEuNMYn\nSrHIhJH+swY8rjUWWH3lXQLZ+FQRkPU9C7i4tHcreF1fYG3T7gDJHLGcbyX17kD4\nhL+Asrz26NqbiAs1QHhmKrCoWUdbu9DfAWhX9OeRiT47wxvFYvTJ9vo+ADO54K6u\nkxZg4x0AhnGDB1DsssVXhZUCsNYg+iVFU7rItB6BEKv883lGIJa3AzKa5AhGQmH6\n+4hIJ9rJxP7OEBpDXpB3Q1oMMhUUqSLeTAh165z+ZKlpuip9XUt3Kqx3xoVxY4ac\nMyM2ggoNLoKYSwu5nrbApx17CLgCPnKXv9rosopdZGlUGkzjHf4U74iBwykMcFBo\nsHk21oa/YGQtVoMkH3BKsd8yEVDYwFCG7pDrvs4YD6lzBq9LeIw=\n=COZz\n-----END PGP SIGNATURE-----",
        "payload": "tree 5161469f332752ee172989c7012ad85741950cd9\nparent f9517e6014ccfe91d5a77e2bacca928bdce7c285\nauthor Anthony Towns <aj@erisian.com.au> 1615018729 +1000\ncommitter Andrew Chow <achow101-github@achow101.com> 1618502607 -0400\n\nversionbits: Add support for delayed activation\n\nGithub-Pull: #21377\nRebased-From: 73d4a706393e6dbd6b6d6b6428f8d3233ac0a2d8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9517e6014ccfe91d5a77e2bacca928bdce7c285",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9517e6014ccfe91d5a77e2bacca928bdce7c285",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9517e6014ccfe91d5a77e2bacca928bdce7c285"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 41,
      "deletions": 10
    },
    "files": [
      {
        "sha": "402229effacf31b95e3ff6c8e65f111e252be47b",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 5,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7",
        "patch": "@@ -85,11 +85,13 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].min_activation_height = 0; // No activation delay\n \n         // Deployment of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 0; // No activation delay\n \n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000001533efd8d716a517fe2c5008\");\n         consensus.defaultAssumeValid = uint256S(\"0x0000000000000000000b9d2ec5a352ecba0592946514a92f14319dc2b367fc72\"); // 654683\n@@ -198,11 +200,13 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].min_activation_height = 0; // No activation delay\n \n         // Deployment of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 0; // No activation delay\n \n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000001db6ec4ac88cf2272c6\");\n         consensus.defaultAssumeValid = uint256S(\"0x000000000000006433d1efec504c53ca332b64963c425395515b01977bd7b3b0\"); // 1864000\n@@ -329,11 +333,13 @@ class SigNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].min_activation_height = 0; // No activation delay\n \n         // Activation of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 0; // No activation delay\n \n         // message start is defined as the first 4 bytes of the sha256d of the block script\n         CHashWriter h(SER_DISK, 0);\n@@ -391,12 +397,16 @@ class CRegTestParams : public CChainParams {\n         consensus.fPowNoRetargeting = true;\n         consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n+\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].min_activation_height = 0; // No activation delay\n+\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 0; // No activation delay\n \n         consensus.nMinimumChainWork = uint256{};\n         consensus.defaultAssumeValid = uint256{};\n@@ -449,10 +459,11 @@ class CRegTestParams : public CChainParams {\n     /**\n      * Allows modifying the Version Bits regtest parameters.\n      */\n-    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n+    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout, int min_activation_height)\n     {\n         consensus.vDeployments[d].nStartTime = nStartTime;\n         consensus.vDeployments[d].nTimeout = nTimeout;\n+        consensus.vDeployments[d].min_activation_height = min_activation_height;\n     }\n     void UpdateActivationParametersFromArgs(const ArgsManager& args);\n };\n@@ -475,22 +486,26 @@ void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n     for (const std::string& strDeployment : args.GetArgs(\"-vbparams\")) {\n         std::vector<std::string> vDeploymentParams;\n         boost::split(vDeploymentParams, strDeployment, boost::is_any_of(\":\"));\n-        if (vDeploymentParams.size() != 3) {\n-            throw std::runtime_error(\"Version bits parameters malformed, expecting deployment:start:end\");\n+        if (vDeploymentParams.size() < 3 || 4 < vDeploymentParams.size()) {\n+            throw std::runtime_error(\"Version bits parameters malformed, expecting deployment:start:end[:min_activation_height]\");\n         }\n         int64_t nStartTime, nTimeout;\n+        int min_activation_height = 0;\n         if (!ParseInt64(vDeploymentParams[1], &nStartTime)) {\n             throw std::runtime_error(strprintf(\"Invalid nStartTime (%s)\", vDeploymentParams[1]));\n         }\n         if (!ParseInt64(vDeploymentParams[2], &nTimeout)) {\n             throw std::runtime_error(strprintf(\"Invalid nTimeout (%s)\", vDeploymentParams[2]));\n         }\n+        if (vDeploymentParams.size() >= 4 && !ParseInt32(vDeploymentParams[3], &min_activation_height)) {\n+            throw std::runtime_error(strprintf(\"Invalid min_activation_height (%s)\", vDeploymentParams[3]));\n+        }\n         bool found = false;\n         for (int j=0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n             if (vDeploymentParams[0] == VersionBitsDeploymentInfo[j].name) {\n-                UpdateVersionBitsParameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);\n+                UpdateVersionBitsParameters(Consensus::DeploymentPos(j), nStartTime, nTimeout, min_activation_height);\n                 found = true;\n-                LogPrintf(\"Setting version bits activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\n+                LogPrintf(\"Setting version bits activation parameters for %s to start=%ld, timeout=%ld, min_activation_height=%d\\n\", vDeploymentParams[0], nStartTime, nTimeout, min_activation_height);\n                 break;\n             }\n         }"
      },
      {
        "sha": "be33bb94c84d4f7ba3a87efe3ee8703e68a9cfa3",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7",
        "patch": "@@ -23,7 +23,7 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n                  \"This is intended for regression testing tools and app development. Equivalent to -chain=regtest.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-vbparams=deployment:start:end[:min_activation_height]\", \"Use given start/end times and min_activation_height for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);"
      },
      {
        "sha": "5d566a01b93398de37e8e3d77011239cd3ea13e0",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7",
        "patch": "@@ -29,6 +29,11 @@ struct BIP9Deployment {\n     int64_t nStartTime;\n     /** Timeout/expiry MedianTime for the deployment attempt. */\n     int64_t nTimeout;\n+    /** If lock in occurs, delay activation until at least this block\n+     *  height.  Note that activation will only occur on a retarget\n+     *  boundary.\n+     */\n+    int min_activation_height{0};\n \n     /** Constant for nTimeout very far in the future. */\n     static constexpr int64_t NO_TIMEOUT = std::numeric_limits<int64_t>::max();"
      },
      {
        "sha": "2b4d26d8550036283e68228901653b726cb571b7",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7",
        "patch": "@@ -1247,6 +1247,7 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n         statsUV.pushKV(\"possible\", statsStruct.possible);\n         bip9.pushKV(\"statistics\", statsUV);\n     }\n+    bip9.pushKV(\"min_activation_height\", consensusParams.vDeployments[id].min_activation_height);\n \n     UniValue rv(UniValue::VOBJ);\n     rv.pushKV(\"type\", \"bip9\");\n@@ -1293,6 +1294,7 @@ RPCHelpMan getblockchaininfo()\n                                     {RPCResult::Type::NUM_TIME, \"start_time\", \"the minimum median time past of a block at which the bit gains its meaning\"},\n                                     {RPCResult::Type::NUM_TIME, \"timeout\", \"the median time past of a block at which the deployment is considered failed if not yet locked in\"},\n                                     {RPCResult::Type::NUM, \"since\", \"height of the first block to which the status applies\"},\n+                                    {RPCResult::Type::NUM, \"min_activation_height\", \"minimum height of blocks for which the rules may be enforced\"},\n                                     {RPCResult::Type::OBJ, \"statistics\", \"numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\",\n                                     {\n                                         {RPCResult::Type::NUM, \"period\", \"the length in blocks of the BIP9 signalling period\"},"
      },
      {
        "sha": "ae0d47b2b43cf96f404f71728141e813e5904220",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7",
        "patch": "@@ -255,6 +255,7 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n     int64_t bit = params.vDeployments[dep].bit;\n     int64_t nStartTime = params.vDeployments[dep].nStartTime;\n     int64_t nTimeout = params.vDeployments[dep].nTimeout;\n+    int min_activation_height = params.vDeployments[dep].min_activation_height;\n \n     // should not be any signalling for first block\n     BOOST_CHECK_EQUAL(ComputeBlockVersion(nullptr, params), VERSIONBITS_TOP_BITS);\n@@ -267,6 +268,7 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n     BOOST_REQUIRE(nTimeout <= std::numeric_limits<uint32_t>::max() || nTimeout == Consensus::BIP9Deployment::NO_TIMEOUT);\n     BOOST_REQUIRE(0 <= bit && bit < 32);\n     BOOST_REQUIRE(((1 << bit) & VERSIONBITS_TOP_MASK) == 0);\n+    BOOST_REQUIRE(min_activation_height == 0);\n \n     // In the first chain, test that the bit is set by CBV until it has failed.\n     // In the second chain, test the bit is set by CBV while STARTED and"
      },
      {
        "sha": "11da729596f50da2ca119bd08c733dd4a9ee152d",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7",
        "patch": "@@ -9,6 +9,7 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n {\n     int nPeriod = Period(params);\n     int nThreshold = Threshold(params);\n+    int min_activation_height = MinActivationHeight(params);\n     int64_t nTimeStart = BeginTime(params);\n     int64_t nTimeTimeout = EndTime(params);\n \n@@ -78,8 +79,10 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n                 break;\n             }\n             case ThresholdState::LOCKED_IN: {\n-                // Always progresses into ACTIVE.\n-                stateNext = ThresholdState::ACTIVE;\n+                // Progresses into ACTIVE provided activation height will have been reached.\n+                if (pindexPrev->nHeight + 1 >= min_activation_height) {\n+                    stateNext = ThresholdState::ACTIVE;\n+                }\n                 break;\n             }\n             case ThresholdState::FAILED:\n@@ -170,6 +173,7 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n protected:\n     int64_t BeginTime(const Consensus::Params& params) const override { return params.vDeployments[id].nStartTime; }\n     int64_t EndTime(const Consensus::Params& params) const override { return params.vDeployments[id].nTimeout; }\n+    int MinActivationHeight(const Consensus::Params& params) const override { return params.vDeployments[id].min_activation_height; }\n     int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n     int Threshold(const Consensus::Params& params) const override { return params.nRuleChangeActivationThreshold; }\n "
      },
      {
        "sha": "faf09343eabf7b55b967147faf83462fd4113a8f",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7",
        "patch": "@@ -25,7 +25,7 @@ static const int32_t VERSIONBITS_NUM_BITS = 29;\n enum class ThresholdState {\n     DEFINED,   // First state that each softfork starts out as. The genesis block is by definition in this state for each deployment.\n     STARTED,   // For blocks past the starttime.\n-    LOCKED_IN, // For one retarget period after the first retarget period with STARTED blocks of which at least threshold have the associated bit set in nVersion.\n+    LOCKED_IN, // For at least one retarget period after the first retarget period with STARTED blocks of which at least threshold have the associated bit set in nVersion, until min_activation_height is reached.\n     ACTIVE,    // For all blocks after the LOCKED_IN retarget period (final state)\n     FAILED,    // For all blocks once the first retarget period after the timeout time is hit, if LOCKED_IN wasn't already reached (final state)\n };\n@@ -57,6 +57,7 @@ class AbstractThresholdConditionChecker {\n     virtual bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const =0;\n     virtual int64_t BeginTime(const Consensus::Params& params) const =0;\n     virtual int64_t EndTime(const Consensus::Params& params) const =0;\n+    virtual int MinActivationHeight(const Consensus::Params& params) const { return 0; }\n     virtual int Period(const Consensus::Params& params) const =0;\n     virtual int Threshold(const Consensus::Params& params) const =0;\n "
      },
      {
        "sha": "79d437abd3e3216480678840d8e0ffe35d825a45",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7",
        "patch": "@@ -145,6 +145,7 @@ def _test_getblockchaininfo(self):\n                         'count': 57,\n                         'possible': True,\n                     },\n+                    'min_activation_height': 0,\n                 },\n                 'active': False\n             },\n@@ -154,7 +155,8 @@ def _test_getblockchaininfo(self):\n                     'status': 'active',\n                     'start_time': -1,\n                     'timeout': 9223372036854775807,\n-                    'since': 0\n+                    'since': 0,\n+                    'min_activation_height': 0,\n                 },\n                 'height': 0,\n                 'active': True"
      }
    ]
  },
  {
    "sha": "71917e01ebf48790b9df48421d8e97986f92e2e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTkxN2UwMWViZjQ4NzkwYjlkZjQ4NDIxZDhlOTc5ODZmOTJlMmU0",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-04-07T01:37:47Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-16T00:58:42Z"
      },
      "message": "tests: test versionbits delayed activation\n\nGithub-Pull: #21377\nRebased-From: dd85d5411c1702c8ae259610fe55050ba212e21e",
      "tree": {
        "sha": "15b77a86bc514435fc7b9f245eef3be4641fc527",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15b77a86bc514435fc7b9f245eef3be4641fc527"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71917e01ebf48790b9df48421d8e97986f92e2e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71917e01ebf48790b9df48421d8e97986f92e2e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71917e01ebf48790b9df48421d8e97986f92e2e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71917e01ebf48790b9df48421d8e97986f92e2e4/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cab84cfdfc98cd10462681b5eb0fbbc08afd2a7"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 74,
      "deletions": 9
    },
    "files": [
      {
        "sha": "f1b131b49839f48f24f528819ad814f25e259567",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 74,
        "deletions": 9,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71917e01ebf48790b9df48421d8e97986f92e2e4/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71917e01ebf48790b9df48421d8e97986f92e2e4/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=71917e01ebf48790b9df48421d8e97986f92e2e4",
        "patch": "@@ -44,6 +44,12 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, paramsDummy, cache); }\n };\n \n+class TestDelayedActivationConditionChecker : public TestConditionChecker\n+{\n+public:\n+    int MinActivationHeight(const Consensus::Params& params) const override { return 15000; }\n+};\n+\n class TestAlwaysActiveConditionChecker : public TestConditionChecker\n {\n public:\n@@ -68,6 +74,8 @@ class VersionBitsTester\n     // The first one performs all checks, the second only 50%, the third only 25%, etc...\n     // This is to test whether lack of cached information leads to the same results.\n     TestConditionChecker checker[CHECKERS];\n+    // Another 6 that assume delayed activation\n+    TestDelayedActivationConditionChecker checker_delayed[CHECKERS];\n     // Another 6 that assume always active activation\n     TestAlwaysActiveConditionChecker checker_always[CHECKERS];\n     // Another 6 that assume never active activation\n@@ -77,14 +85,18 @@ class VersionBitsTester\n     int num;\n \n public:\n-    VersionBitsTester() : num(0) {}\n+    VersionBitsTester() : num(1000) {}\n \n     VersionBitsTester& Reset() {\n+        // Have each group of tests be counted by the 1000s part, starting at 1000\n+        num = num - (num % 1000) + 1000;\n+\n         for (unsigned int i = 0; i < vpblock.size(); i++) {\n             delete vpblock[i];\n         }\n         for (unsigned int  i = 0; i < CHECKERS; i++) {\n             checker[i] = TestConditionChecker();\n+            checker_delayed[i] = TestDelayedActivationConditionChecker();\n             checker_always[i] = TestAlwaysActiveConditionChecker();\n             checker_never[i] = TestNeverActiveConditionChecker();\n         }\n@@ -109,11 +121,18 @@ class VersionBitsTester\n         return *this;\n     }\n \n-    VersionBitsTester& TestStateSinceHeight(int height) {\n+    VersionBitsTester& TestStateSinceHeight(int height)\n+    {\n+        return TestStateSinceHeight(height, height);\n+    }\n+\n+    VersionBitsTester& TestStateSinceHeight(int height, int height_delayed)\n+    {\n         const CBlockIndex* tip = Tip();\n         for (int i = 0; i < CHECKERS; i++) {\n             if (InsecureRandBits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateSinceHeightFor(tip) == height, strprintf(\"Test %i for StateSinceHeight\", num));\n+                BOOST_CHECK_MESSAGE(checker_delayed[i].GetStateSinceHeightFor(tip) == height_delayed, strprintf(\"Test %i for StateSinceHeight (delayed)\", num));\n                 BOOST_CHECK_MESSAGE(checker_always[i].GetStateSinceHeightFor(tip) == 0, strprintf(\"Test %i for StateSinceHeight (always active)\", num));\n \n                 // never active may go from DEFINED -> FAILED at the first period\n@@ -125,17 +144,31 @@ class VersionBitsTester\n         return *this;\n     }\n \n-    VersionBitsTester& TestState(ThresholdState exp) {\n+    VersionBitsTester& TestState(ThresholdState exp)\n+    {\n+        return TestState(exp, exp);\n+    }\n+\n+    VersionBitsTester& TestState(ThresholdState exp, ThresholdState exp_delayed)\n+    {\n+        if (exp != exp_delayed) {\n+            // only expected differences are that delayed stays in locked_in longer\n+            BOOST_CHECK_EQUAL(exp, ThresholdState::ACTIVE);\n+            BOOST_CHECK_EQUAL(exp_delayed, ThresholdState::LOCKED_IN);\n+        }\n+\n         const CBlockIndex* pindex = Tip();\n         for (int i = 0; i < CHECKERS; i++) {\n             if (InsecureRandBits(i) == 0) {\n                 ThresholdState got = checker[i].GetStateFor(pindex);\n+                ThresholdState got_delayed = checker_delayed[i].GetStateFor(pindex);\n                 ThresholdState got_always = checker_always[i].GetStateFor(pindex);\n                 ThresholdState got_never = checker_never[i].GetStateFor(pindex);\n                 // nHeight of the next block. If vpblock is empty, the next (ie first)\n                 // block should be the genesis block with nHeight == 0.\n                 int height = pindex == nullptr ? 0 : pindex->nHeight + 1;\n                 BOOST_CHECK_MESSAGE(got == exp, strprintf(\"Test %i for %s height %d (got %s)\", num, StateName(exp), height, StateName(got)));\n+                BOOST_CHECK_MESSAGE(got_delayed == exp_delayed, strprintf(\"Test %i for %s height %d (got %s; delayed case)\", num, StateName(exp_delayed), height, StateName(got_delayed)));\n                 BOOST_CHECK_MESSAGE(got_always == ThresholdState::ACTIVE, strprintf(\"Test %i for ACTIVE height %d (got %s; always active case)\", num, height, StateName(got_always)));\n                 BOOST_CHECK_MESSAGE(got_never == ThresholdState::DEFINED|| got_never == ThresholdState::FAILED, strprintf(\"Test %i for DEFINED/FAILED height %d (got %s; never active case)\", num, height, StateName(got_never)));\n             }\n@@ -150,6 +183,9 @@ class VersionBitsTester\n     VersionBitsTester& TestActive() { return TestState(ThresholdState::ACTIVE); }\n     VersionBitsTester& TestFailed() { return TestState(ThresholdState::FAILED); }\n \n+    // non-delayed should be active; delayed should still be locked in\n+    VersionBitsTester& TestActiveDelayed() { return TestState(ThresholdState::ACTIVE, ThresholdState::LOCKED_IN); }\n+\n     CBlockIndex* Tip() { return vpblock.empty() ? nullptr : vpblock.back(); }\n };\n \n@@ -170,7 +206,6 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n                            .Mine(2001, TestTime(30003), 0x100).TestFailed().TestStateSinceHeight(1000)\n                            .Mine(2999, TestTime(30004), 0x100).TestFailed().TestStateSinceHeight(1000)\n                            .Mine(3000, TestTime(30005), 0x100).TestFailed().TestStateSinceHeight(1000)\n-\n         // DEFINED -> STARTED -> FAILED\n                            .Reset().TestDefined().TestStateSinceHeight(0)\n                            .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n@@ -203,9 +238,10 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n                            .Mine(2999, TestTime(19999), 0x200).TestStarted().TestStateSinceHeight(2000) // 49 old blocks\n                            .Mine(3000, TestTime(29999), 0x200).TestLockedIn().TestStateSinceHeight(3000) // 1 old block (so 900 out of the past 1000)\n                            .Mine(3999, TestTime(30001), 0).TestLockedIn().TestStateSinceHeight(3000)\n-                           .Mine(4000, TestTime(30002), 0).TestActive().TestStateSinceHeight(4000)\n-                           .Mine(14333, TestTime(30003), 0).TestActive().TestStateSinceHeight(4000)\n-                           .Mine(24000, TestTime(40000), 0).TestActive().TestStateSinceHeight(4000)\n+                           .Mine(4000, TestTime(30002), 0).TestActiveDelayed().TestStateSinceHeight(4000, 3000) // delayed will not become active until height=15000\n+                           .Mine(14333, TestTime(30003), 0).TestActiveDelayed().TestStateSinceHeight(4000, 3000)\n+                           .Mine(15000, TestTime(40000), 0).TestActive().TestStateSinceHeight(4000, 15000)\n+                           .Mine(24000, TestTime(40000), 0).TestActive().TestStateSinceHeight(4000, 15000)\n \n         // DEFINED multiple periods -> STARTED multiple periods -> FAILED\n                            .Reset().TestDefined().TestStateSinceHeight(0)\n@@ -216,7 +252,8 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n                            .Mine(4000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n                            .Mine(5000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n                            .Mine(6000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(6000)\n-                           .Mine(7000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(6000);\n+                           .Mine(7000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(6000)\n+        ;\n     }\n }\n \n@@ -230,6 +267,13 @@ BOOST_AUTO_TEST_CASE(versionbits_sanity)\n         // Make sure that no deployment tries to set an invalid bit.\n         BOOST_CHECK_EQUAL(bitmask & ~(uint32_t)VERSIONBITS_TOP_MASK, bitmask);\n \n+        // Check min_activation_height is on a retarget boundary\n+        BOOST_CHECK_EQUAL(mainnetParams.vDeployments[i].min_activation_height % mainnetParams.nMinerConfirmationWindow, 0U);\n+        // Check min_activation_height is 0 for ALWAYS_ACTIVE and never active deployments\n+        if (mainnetParams.vDeployments[i].nStartTime == Consensus::BIP9Deployment::ALWAYS_ACTIVE || mainnetParams.vDeployments[i].nTimeout <= 1230768000) {\n+            BOOST_CHECK_EQUAL(mainnetParams.vDeployments[i].min_activation_height, 0);\n+        }\n+\n         // Verify that the deployment windows of different deployment using the\n         // same bit are disjoint.\n         // This test may need modification at such time as a new deployment\n@@ -268,7 +312,8 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n     BOOST_REQUIRE(nTimeout <= std::numeric_limits<uint32_t>::max() || nTimeout == Consensus::BIP9Deployment::NO_TIMEOUT);\n     BOOST_REQUIRE(0 <= bit && bit < 32);\n     BOOST_REQUIRE(((1 << bit) & VERSIONBITS_TOP_MASK) == 0);\n-    BOOST_REQUIRE(min_activation_height == 0);\n+    BOOST_REQUIRE(min_activation_height >= 0);\n+    BOOST_REQUIRE_EQUAL(min_activation_height % params.nMinerConfirmationWindow, 0U);\n \n     // In the first chain, test that the bit is set by CBV until it has failed.\n     // In the second chain, test the bit is set by CBV while STARTED and\n@@ -378,6 +423,16 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n     lastBlock = secondChain.Mine((params.nMinerConfirmationWindow * 3) - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n     lastBlock = secondChain.Mine(params.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+\n+    if (lastBlock->nHeight + 1 < min_activation_height) {\n+        // check signalling continues while min_activation_height is not reached\n+        lastBlock = secondChain.Mine(min_activation_height - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+        BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n+        // then reach min_activation_height, which was already REQUIRE'd to start a new period\n+        lastBlock = secondChain.Mine(min_activation_height, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    }\n+\n+    // Check that we don't signal after activation\n     BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n }\n \n@@ -391,6 +446,16 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n             check_computeblockversion(chainParams->GetConsensus(), static_cast<Consensus::DeploymentPos>(i));\n         }\n     }\n+\n+    {\n+        // Use regtest/testdummy to ensure we always exercise the\n+        // min_activation_height test, even if we're not using that in a\n+        // live deployment\n+        ArgsManager args;\n+        args.ForceSetArg(\"-vbparams\", \"testdummy:1199145601:1230767999:403200\"); // January 1, 2008 - December 31, 2008, min act height 403200\n+        const auto chainParams = CreateChainParams(args, CBaseChainParams::REGTEST);\n+        check_computeblockversion(chainParams->GetConsensus(), Consensus::DEPLOYMENT_TESTDUMMY);\n+    }\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "b529222ad18f7facbaff394455875b4aa65d653e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTI5MjIyYWQxOGY3ZmFjYmFmZjM5NDQ1NTg3NWI0YWE2NWQ2NTNl",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-16T12:12:19Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-16T00:58:49Z"
      },
      "message": "fuzz: test versionbits delayed activation\n\nGithub-Pull: #21377\nRebased-From: dd07e6da48040dc7eae46bc7941db48d98a669fd",
      "tree": {
        "sha": "67433bf356b9de35673cdb7fbaff9c2d64690b7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67433bf356b9de35673cdb7fbaff9c2d64690b7d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b529222ad18f7facbaff394455875b4aa65d653e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEFSgSMAeFyWRE0zNNF1ZXMuCOXkEFAmB44UoACgkQF1ZXMuCO\nXkFC3A/7BbW1o/7SoR7UbBbwMLqCM1NrrjoYDb1mCF35hN5YL6557LTjeysT60zg\n9gMkt3NuwXF8vyc7S+KsgvFwiZVdHq62OEXuWnxpGQ54W0L/7aY94WKk4GhKIF40\nMN+qr6ooLEWKUHnzov/IPZv7+kb31mfGhi5/wtJLSwTAp4icZSpNYPmADzq0TTdr\nMn3VKPquG2SJDUuB34cCN0F+ypBGkoE1eqUgVCk6gw85Y8Gd2QnaSqR4rQ3V1ogq\n8EXocVMkj2TGLf0e6SOzFKA0aKBoeanw9Y1vXk9Ke36VYbRRLfbud7o+YyoHQwRs\nSwQeUD7cBvVm7lwoHvE4f66VgOwcYTsmTENKtoKRmkUwQyx3XJ5GXyg0pFO4xDS4\nKCPMja2qQdP/baV7NIzOrwlvcA6w3pSgZaIQ7m2dUK9rAQNARU8p2OfWf9gDtTKD\n25dujyMZt8upmX8hSkollMOpJJxbwGbz6R/ok1l1rRAZfcge26RJ+Xa2nmNaZrw9\nBMiZXiroeljPSkGcanBLGAi0KMGSatXXOkoMYfeUYvfxtAnnJHjuXT72JiCKeQfr\np/TYggiouiTQGadU28oQokbpVrn1oEkGrUqMwmwO1zzADH6BUL21/adTrcY8HjvU\ncKl3H6+oRjw5BQ8mjqVL2oKlWlo1P+QjuNzEAfC451/RM1VgEk8=\n=nE2U\n-----END PGP SIGNATURE-----",
        "payload": "tree 67433bf356b9de35673cdb7fbaff9c2d64690b7d\nparent 71917e01ebf48790b9df48421d8e97986f92e2e4\nauthor Anthony Towns <aj@erisian.com.au> 1615896739 +1000\ncommitter Andrew Chow <achow101-github@achow101.com> 1618534729 -0400\n\nfuzz: test versionbits delayed activation\n\nGithub-Pull: #21377\nRebased-From: dd07e6da48040dc7eae46bc7941db48d98a669fd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b529222ad18f7facbaff394455875b4aa65d653e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b529222ad18f7facbaff394455875b4aa65d653e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b529222ad18f7facbaff394455875b4aa65d653e/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71917e01ebf48790b9df48421d8e97986f92e2e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71917e01ebf48790b9df48421d8e97986f92e2e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71917e01ebf48790b9df48421d8e97986f92e2e4"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 22,
      "deletions": 13
    },
    "files": [
      {
        "sha": "220e29ab04c00f35e05ba9b44b52768d39a34547",
        "filename": "src/test/fuzz/versionbits.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 13,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b529222ad18f7facbaff394455875b4aa65d653e/src/test/fuzz/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b529222ad18f7facbaff394455875b4aa65d653e/src/test/fuzz/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/versionbits.cpp?ref=b529222ad18f7facbaff394455875b4aa65d653e",
        "patch": "@@ -25,25 +25,28 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     const Consensus::Params dummy_params{};\n \n public:\n-    const int64_t m_begin = 0;\n-    const int64_t m_end = 0;\n-    const int m_period = 0;\n-    const int m_threshold = 0;\n-    const int m_bit = 0;\n-\n-    TestConditionChecker(int64_t begin, int64_t end, int period, int threshold, int bit)\n-        : m_begin{begin}, m_end{end}, m_period{period}, m_threshold{threshold}, m_bit{bit}\n+    const int64_t m_begin;\n+    const int64_t m_end;\n+    const int m_period;\n+    const int m_threshold;\n+    const int m_min_activation_height;\n+    const int m_bit;\n+\n+    TestConditionChecker(int64_t begin, int64_t end, int period, int threshold, int min_activation_height, int bit)\n+        : m_begin{begin}, m_end{end}, m_period{period}, m_threshold{threshold}, m_min_activation_height{min_activation_height}, m_bit{bit}\n     {\n         assert(m_period > 0);\n         assert(0 <= m_threshold && m_threshold <= m_period);\n-        assert(0 <= m_bit && m_bit <= 32 && m_bit < VERSIONBITS_NUM_BITS);\n+        assert(0 <= m_bit && m_bit < 32 && m_bit < VERSIONBITS_NUM_BITS);\n+        assert(0 <= m_min_activation_height);\n     }\n \n     bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override { return Condition(pindex->nVersion); }\n     int64_t BeginTime(const Consensus::Params& params) const override { return m_begin; }\n     int64_t EndTime(const Consensus::Params& params) const override { return m_end; }\n     int Period(const Consensus::Params& params) const override { return m_period; }\n     int Threshold(const Consensus::Params& params) const override { return m_threshold; }\n+    int MinActivationHeight(const Consensus::Params& params) const override { return m_min_activation_height; }\n \n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, dummy_params, m_cache); }\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, dummy_params, m_cache); }\n@@ -165,8 +168,9 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             never_active_test = true;\n         }\n     }\n+    int min_activation = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, period * max_periods);\n \n-    TestConditionChecker checker(start_time, timeout, period, threshold, bit);\n+    TestConditionChecker checker(start_time, timeout, period, threshold, min_activation, bit);\n \n     // Early exit if the versions don't signal sensibly for the deployment\n     if (!checker.Condition(ver_signal)) return;\n@@ -301,11 +305,16 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         }\n         break;\n     case ThresholdState::LOCKED_IN:\n-        assert(exp_state == ThresholdState::STARTED);\n-        assert(current_block->GetMedianTimePast() < checker.m_end);\n-        assert(blocks_sig >= threshold);\n+        if (exp_state == ThresholdState::LOCKED_IN) {\n+            assert(current_block->nHeight + 1 < min_activation);\n+        } else {\n+            assert(exp_state == ThresholdState::STARTED);\n+            assert(current_block->GetMedianTimePast() < checker.m_end);\n+            assert(blocks_sig >= threshold);\n+        }\n         break;\n     case ThresholdState::ACTIVE:\n+        assert(always_active_test || min_activation <= current_block->nHeight + 1);\n         assert(exp_state == ThresholdState::ACTIVE || exp_state == ThresholdState::LOCKED_IN);\n         break;\n     case ThresholdState::FAILED:"
      }
    ]
  },
  {
    "sha": "3acf0379e0979ea4bdd03976f4987aa6711eb92f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYWNmMDM3OWUwOTc5ZWE0YmRkMDM5NzZmNDk4N2FhNjcxMWViOTJm",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-27T13:00:14Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-16T00:59:13Z"
      },
      "message": "versionbits: Add explicit NEVER_ACTIVE deployments\n\nPreviously we used deployments that would timeout prior to Bitcoin's\ninvention, which allowed the deployment to still be activated in unit\ntests. This switches those deployments to be truly never active.\n\nGithub-Pull: #21377\nRebased-From: 55ac5f568a3b73d6f1ef4654617fb76e8bcbccdf",
      "tree": {
        "sha": "03f6ae026ba46234871db7ba08f789d67f60620d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03f6ae026ba46234871db7ba08f789d67f60620d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3acf0379e0979ea4bdd03976f4987aa6711eb92f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEFSgSMAeFyWRE0zNNF1ZXMuCOXkEFAmB44WMACgkQF1ZXMuCO\nXkGNnw/+NakdALDSCQvaSW/C64zyG6mNqD5uproOIAVoTlS5UeCuzPU8B3UwSLZC\n5MwZN2UvQ0LToV57cH4hh2/ss6Bisesbl+nyXMO3zlMkBlhNMOSmXnDRJDFLL0E8\nElI4PnF7Nf20PvMviupLd7Uca+NIvTrgML4p/LykhXOj8UWF2PdqlXvRP9pdWQFy\nxKxM77hkqOyOff+JHCN4krhj+T2vroqtoEKvCLmuHGXJ8gCYRWrecDvBVc7Uybgs\njPXeEft3gfxMdaXHwb1CpaQsEC3ZbA4ElTnq5bYaKa4702lgBelW7D9S67c0WezA\nUWXuycQBwIINQ3i1Zs5mHz6+XDsswvXEE6V6tpjxwYtjnalf/v8pzr9Uh92RaB5M\nbAE0hPkupqxci2hgly1xsOiwaqzNUUTlDRis47H2aFmeZANXtEdruZ0boOXAqRF7\nq0yxP0M791Yfpc4p2429f1T3fih29p4KZdMF4mu1iqc3OoLbD+jzHxPiIzlO44bW\nCGqblkMPZVilLeY7Xc/oCQ2D4eoba+GVlHpOo6vM4lcYpyAhsuo9Hy9kuv8clvqd\np/Q0czxv8xKVML205gOegffzZS5CKB+bmDGfdQPHGbfpngAdQ7wJZzk0ochfwPFG\nx/XCQlG9QbLrU7zXOC/V9aaDmds+0zoyzNOQN03leEjpHcdkExM=\n=IszN\n-----END PGP SIGNATURE-----",
        "payload": "tree 03f6ae026ba46234871db7ba08f789d67f60620d\nparent b529222ad18f7facbaff394455875b4aa65d653e\nauthor Anthony Towns <aj@erisian.com.au> 1616850014 +1000\ncommitter Andrew Chow <achow101-github@achow101.com> 1618534753 -0400\n\nversionbits: Add explicit NEVER_ACTIVE deployments\n\nPreviously we used deployments that would timeout prior to Bitcoin's\ninvention, which allowed the deployment to still be activated in unit\ntests. This switches those deployments to be truly never active.\n\nGithub-Pull: #21377\nRebased-From: 55ac5f568a3b73d6f1ef4654617fb76e8bcbccdf\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3acf0379e0979ea4bdd03976f4987aa6711eb92f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3acf0379e0979ea4bdd03976f4987aa6711eb92f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3acf0379e0979ea4bdd03976f4987aa6711eb92f/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b529222ad18f7facbaff394455875b4aa65d653e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b529222ad18f7facbaff394455875b4aa65d653e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b529222ad18f7facbaff394455875b4aa65d653e"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 48,
      "deletions": 41
    },
    "files": [
      {
        "sha": "005ac5a37979aa875a96a812b1878f54e9f1f65c",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3acf0379e0979ea4bdd03976f4987aa6711eb92f/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3acf0379e0979ea4bdd03976f4987aa6711eb92f/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3acf0379e0979ea4bdd03976f4987aa6711eb92f",
        "patch": "@@ -83,14 +83,14 @@ class CMainParams : public CChainParams {\n         consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].min_activation_height = 0; // No activation delay\n \n         // Deployment of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 0; // No activation delay\n \n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000001533efd8d716a517fe2c5008\");\n@@ -198,14 +198,14 @@ class CTestNetParams : public CChainParams {\n         consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].min_activation_height = 0; // No activation delay\n \n         // Deployment of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 0; // No activation delay\n \n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000001db6ec4ac88cf2272c6\");\n@@ -331,8 +331,8 @@ class SigNetParams : public CChainParams {\n         consensus.MinBIP9WarningHeight = 0;\n         consensus.powLimit = uint256S(\"00000377ae000000000000000000000000000000000000000000000000000000\");\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].min_activation_height = 0; // No activation delay\n \n         // Activation of Taproot (BIPs 340-342)"
      },
      {
        "sha": "1b1c7f24b6e6d55f06a44b17458ea80287202f8b",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3acf0379e0979ea4bdd03976f4987aa6711eb92f/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3acf0379e0979ea4bdd03976f4987aa6711eb92f/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=3acf0379e0979ea4bdd03976f4987aa6711eb92f",
        "patch": "@@ -43,6 +43,11 @@ struct BIP9Deployment {\n      *  process (which takes at least 3 BIP9 intervals). Only tests that specifically test the\n      *  behaviour during activation cannot use this. */\n     static constexpr int64_t ALWAYS_ACTIVE = -1;\n+\n+    /** Special value for nStartTime indicating that the deployment is never active.\n+     *  This is useful for integrating the code changes for a new feature\n+     *  prior to deploying it on some or all networks. */\n+    static constexpr int64_t NEVER_ACTIVE = -2;\n };\n \n /**"
      },
      {
        "sha": "90cf8d6d1431955737715cb3d814c51a6afe9204",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3acf0379e0979ea4bdd03976f4987aa6711eb92f/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3acf0379e0979ea4bdd03976f4987aa6711eb92f/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3acf0379e0979ea4bdd03976f4987aa6711eb92f",
        "patch": "@@ -1214,10 +1214,8 @@ static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name,\n static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // For BIP9 deployments.\n-    // Deployments (e.g. testdummy) with timeout value before Jan 1, 2009 are hidden.\n-    // A timeout value of 0 guarantees a softfork will never be activated.\n-    // This is used when merging logic to implement a proposed softfork without a specified deployment schedule.\n-    if (consensusParams.vDeployments[id].nTimeout <= 1230768000) return;\n+    // Deployments that are never active are hidden.\n+    if (consensusParams.vDeployments[id].nStartTime == Consensus::BIP9Deployment::NEVER_ACTIVE) return;\n \n     UniValue bip9(UniValue::VOBJ);\n     const ThresholdState thresholdState = VersionBitsTipState(consensusParams, id);"
      },
      {
        "sha": "5d859c911cbfeb92eb447355b7767b4c1094be1e",
        "filename": "src/test/fuzz/versionbits.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 17,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3acf0379e0979ea4bdd03976f4987aa6711eb92f/src/test/fuzz/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3acf0379e0979ea4bdd03976f4987aa6711eb92f/src/test/fuzz/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/versionbits.cpp?ref=3acf0379e0979ea4bdd03976f4987aa6711eb92f",
        "patch": "@@ -160,13 +160,12 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     } else {\n         if (fuzzed_data_provider.ConsumeBool()) {\n             start_time = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n-            timeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n             always_active_test = true;\n         } else {\n-            start_time = 1199145601; // January 1, 2008\n-            timeout = 1230767999;    // December 31, 2008\n+            start_time = Consensus::BIP9Deployment::NEVER_ACTIVE;\n             never_active_test = true;\n         }\n+        timeout = fuzzed_data_provider.ConsumeBool() ? Consensus::BIP9Deployment::NO_TIMEOUT : fuzzed_data_provider.ConsumeIntegral<int64_t>();\n     }\n     int min_activation = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, period * max_periods);\n \n@@ -318,7 +317,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         assert(exp_state == ThresholdState::ACTIVE || exp_state == ThresholdState::LOCKED_IN);\n         break;\n     case ThresholdState::FAILED:\n-        assert(current_block->GetMedianTimePast() >= checker.m_end);\n+        assert(never_active_test || current_block->GetMedianTimePast() >= checker.m_end);\n         assert(exp_state != ThresholdState::LOCKED_IN && exp_state != ThresholdState::ACTIVE);\n         break;\n     default:\n@@ -330,25 +329,19 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         assert(state == ThresholdState::ACTIVE || state == ThresholdState::FAILED);\n     }\n \n-    // \"always active\" has additional restrictions\n     if (always_active_test) {\n+        // \"always active\" has additional restrictions\n         assert(state == ThresholdState::ACTIVE);\n         assert(exp_state == ThresholdState::ACTIVE);\n         assert(since == 0);\n+    } else if (never_active_test) {\n+        // \"never active\" does too\n+        assert(state == ThresholdState::FAILED);\n+        assert(exp_state == ThresholdState::FAILED);\n+        assert(since == 0);\n     } else {\n-        // except for always active, the initial state is always DEFINED\n+        // for signalled deployments, the initial state is always DEFINED\n         assert(since > 0 || state == ThresholdState::DEFINED);\n         assert(exp_since > 0 || exp_state == ThresholdState::DEFINED);\n     }\n-\n-    // \"never active\" does too\n-    if (never_active_test) {\n-        assert(state == ThresholdState::FAILED);\n-        assert(since == period);\n-        if (exp_since == 0) {\n-            assert(exp_state == ThresholdState::DEFINED);\n-        } else {\n-            assert(exp_state == ThresholdState::FAILED);\n-        }\n-    }\n }"
      },
      {
        "sha": "0bf5bce27f3f088780352cecfa9bfd43f305c8ba",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 9,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3acf0379e0979ea4bdd03976f4987aa6711eb92f/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3acf0379e0979ea4bdd03976f4987aa6711eb92f/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=3acf0379e0979ea4bdd03976f4987aa6711eb92f",
        "patch": "@@ -59,8 +59,7 @@ class TestAlwaysActiveConditionChecker : public TestConditionChecker\n class TestNeverActiveConditionChecker : public TestConditionChecker\n {\n public:\n-    int64_t BeginTime(const Consensus::Params& params) const override { return 0; }\n-    int64_t EndTime(const Consensus::Params& params) const override { return 1230768000; }\n+    int64_t BeginTime(const Consensus::Params& params) const override { return Consensus::BIP9Deployment::NEVER_ACTIVE; }\n };\n \n #define CHECKERS 6\n@@ -134,10 +133,7 @@ class VersionBitsTester\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateSinceHeightFor(tip) == height, strprintf(\"Test %i for StateSinceHeight\", num));\n                 BOOST_CHECK_MESSAGE(checker_delayed[i].GetStateSinceHeightFor(tip) == height_delayed, strprintf(\"Test %i for StateSinceHeight (delayed)\", num));\n                 BOOST_CHECK_MESSAGE(checker_always[i].GetStateSinceHeightFor(tip) == 0, strprintf(\"Test %i for StateSinceHeight (always active)\", num));\n-\n-                // never active may go from DEFINED -> FAILED at the first period\n-                const auto never_height = checker_never[i].GetStateSinceHeightFor(tip);\n-                BOOST_CHECK_MESSAGE(never_height == 0 || never_height == checker_never[i].Period(paramsDummy), strprintf(\"Test %i for StateSinceHeight (never active)\", num));\n+                BOOST_CHECK_MESSAGE(checker_never[i].GetStateSinceHeightFor(tip) == 0, strprintf(\"Test %i for StateSinceHeight (never active)\", num));\n             }\n         }\n         num++;\n@@ -170,7 +166,7 @@ class VersionBitsTester\n                 BOOST_CHECK_MESSAGE(got == exp, strprintf(\"Test %i for %s height %d (got %s)\", num, StateName(exp), height, StateName(got)));\n                 BOOST_CHECK_MESSAGE(got_delayed == exp_delayed, strprintf(\"Test %i for %s height %d (got %s; delayed case)\", num, StateName(exp_delayed), height, StateName(got_delayed)));\n                 BOOST_CHECK_MESSAGE(got_always == ThresholdState::ACTIVE, strprintf(\"Test %i for ACTIVE height %d (got %s; always active case)\", num, height, StateName(got_always)));\n-                BOOST_CHECK_MESSAGE(got_never == ThresholdState::DEFINED|| got_never == ThresholdState::FAILED, strprintf(\"Test %i for DEFINED/FAILED height %d (got %s; never active case)\", num, height, StateName(got_never)));\n+                BOOST_CHECK_MESSAGE(got_never == ThresholdState::FAILED, strprintf(\"Test %i for FAILED height %d (got %s; never active case)\", num, height, StateName(got_never)));\n             }\n         }\n         num++;\n@@ -270,7 +266,7 @@ BOOST_AUTO_TEST_CASE(versionbits_sanity)\n         // Check min_activation_height is on a retarget boundary\n         BOOST_CHECK_EQUAL(mainnetParams.vDeployments[i].min_activation_height % mainnetParams.nMinerConfirmationWindow, 0U);\n         // Check min_activation_height is 0 for ALWAYS_ACTIVE and never active deployments\n-        if (mainnetParams.vDeployments[i].nStartTime == Consensus::BIP9Deployment::ALWAYS_ACTIVE || mainnetParams.vDeployments[i].nTimeout <= 1230768000) {\n+        if (mainnetParams.vDeployments[i].nStartTime == Consensus::BIP9Deployment::ALWAYS_ACTIVE || mainnetParams.vDeployments[i].nStartTime == Consensus::BIP9Deployment::NEVER_ACTIVE) {\n             BOOST_CHECK_EQUAL(mainnetParams.vDeployments[i].min_activation_height, 0);\n         }\n \n@@ -304,8 +300,9 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n     // should not be any signalling for first block\n     BOOST_CHECK_EQUAL(ComputeBlockVersion(nullptr, params), VERSIONBITS_TOP_BITS);\n \n-    // always active deployments shouldn't need to be tested further\n+    // always/never active deployments shouldn't need to be tested further\n     if (nStartTime == Consensus::BIP9Deployment::ALWAYS_ACTIVE) return;\n+    if (nStartTime == Consensus::BIP9Deployment::NEVER_ACTIVE) return;\n \n     BOOST_REQUIRE(nStartTime < nTimeout);\n     BOOST_REQUIRE(nStartTime >= 0);\n@@ -447,6 +444,15 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n         }\n     }\n \n+    {\n+        // Use regtest/testdummy to ensure we always exercise some\n+        // deployment that's not always/never active\n+        ArgsManager args;\n+        args.ForceSetArg(\"-vbparams\", \"testdummy:1199145601:1230767999\"); // January 1, 2008 - December 31, 2008\n+        const auto chainParams = CreateChainParams(args, CBaseChainParams::REGTEST);\n+        check_computeblockversion(chainParams->GetConsensus(), Consensus::DEPLOYMENT_TESTDUMMY);\n+    }\n+\n     {\n         // Use regtest/testdummy to ensure we always exercise the\n         // min_activation_height test, even if we're not using that in a"
      },
      {
        "sha": "df666c963fa4d3fd3811bd2dac944489fc7e5907",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3acf0379e0979ea4bdd03976f4987aa6711eb92f/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3acf0379e0979ea4bdd03976f4987aa6711eb92f/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=3acf0379e0979ea4bdd03976f4987aa6711eb92f",
        "patch": "@@ -18,6 +18,11 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n         return ThresholdState::ACTIVE;\n     }\n \n+    // Check if this deployment is never active.\n+    if (nTimeStart == Consensus::BIP9Deployment::NEVER_ACTIVE) {\n+        return ThresholdState::FAILED;\n+    }\n+\n     // A block's state is always the same as that of the first of its period, so it is computed based on a pindexPrev whose height equals a multiple of nPeriod - 1.\n     if (pindexPrev != nullptr) {\n         pindexPrev = pindexPrev->GetAncestor(pindexPrev->nHeight - ((pindexPrev->nHeight + 1) % nPeriod));\n@@ -129,7 +134,7 @@ BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockI\n int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const\n {\n     int64_t start_time = BeginTime(params);\n-    if (start_time == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n+    if (start_time == Consensus::BIP9Deployment::ALWAYS_ACTIVE || start_time == Consensus::BIP9Deployment::NEVER_ACTIVE) {\n         return 0;\n     }\n "
      }
    ]
  },
  {
    "sha": "600357306e2e182a457174862ea2e41c7ba39c64",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDAzNTczMDZlMmUxODJhNDU3MTc0ODYyZWEyZTQxYzdiYTM5YzY0",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-04-07T00:20:46Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-16T00:59:17Z"
      },
      "message": "versionbits: simplify state transitions\n\nThis removes the DEFINED->FAILED transition and changes the\nSTARTED->FAILED transition to only occur if signalling didn't pass the\nthreshold. This ensures that it is always possible for activation to\noccur, no matter what settings are chosen, or the speed at which blocks\nare found.\n\nGithub-Pull: #21377\nRebased-From: f054f6bcd2c2ce5fea84cf8681013f85a444e7ea",
      "tree": {
        "sha": "693bb010f1d57671469e536456356d3149de8d64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/693bb010f1d57671469e536456356d3149de8d64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/600357306e2e182a457174862ea2e41c7ba39c64",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEFSgSMAeFyWRE0zNNF1ZXMuCOXkEFAmB44WUACgkQF1ZXMuCO\nXkEz3w//ZygIBEQkQDrKpTTdm+S54dE1Gx9BXqwca5zEXsGa26m+pUr3Yt5BaHDX\nIihTqoSO/Qsu4UYVo2E32/h0b+r+vspwPUsBMfvZKsAdcKYaL/Hy+GFZbZRcU1n9\n23UDSJLz8PnRErrsahC7VIq11aGOoURhUE3SP0sPUrnHpAXs98E8XzlzagXhqhpM\ncdKBYdZkc4b7geepvtAWDlb8GGbb0P8aETmRw0KUUbxAmvEIReMOnUMbVFxXYnOw\n+Yh79QIEn2SbWUU9X9e9SbBaSDMCuI2AJMW1TLOnNWda1XgG8RtPfCvhUrF9MjXp\nTemS/o60JDVoRZk0c9rQCLk4t9S08ZVn0OFw2fS9NkbfS0fUgZXqkexfY8FBJpYq\nOhOBzGkGTnUhnMHp80+FQLcoSKyP+IQiUBQt3mIGhcId47L4AGqBiBNm5vswmCKt\nSQ20MmO9zRdsDmDMH/jvdnlNphbj35DcNl5ig6Xanfl6AqqKBZKQ8OxTxe5790MW\nmfXjWUroTAHpXjEPq9kdlGD+aYSj8ht3Q5MH2bIKPSI9dsWL4h894gr27VA8ip7g\n/SkgstMSocQ24R6SYb0GgG23fz5srNC+j8cIe7rzmuCb9PTPG/qswi8gJfHq6jLZ\nWcvI+iqX6eQa5uU394DPvSZqU6URc7fayIzs57TkwsS1hll0OsE=\n=gnww\n-----END PGP SIGNATURE-----",
        "payload": "tree 693bb010f1d57671469e536456356d3149de8d64\nparent 3acf0379e0979ea4bdd03976f4987aa6711eb92f\nauthor Anthony Towns <aj@erisian.com.au> 1617754846 +1000\ncommitter Andrew Chow <achow101-github@achow101.com> 1618534757 -0400\n\nversionbits: simplify state transitions\n\nThis removes the DEFINED->FAILED transition and changes the\nSTARTED->FAILED transition to only occur if signalling didn't pass the\nthreshold. This ensures that it is always possible for activation to\noccur, no matter what settings are chosen, or the speed at which blocks\nare found.\n\nGithub-Pull: #21377\nRebased-From: f054f6bcd2c2ce5fea84cf8681013f85a444e7ea\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/600357306e2e182a457174862ea2e41c7ba39c64",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/600357306e2e182a457174862ea2e41c7ba39c64",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/600357306e2e182a457174862ea2e41c7ba39c64/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3acf0379e0979ea4bdd03976f4987aa6711eb92f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3acf0379e0979ea4bdd03976f4987aa6711eb92f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3acf0379e0979ea4bdd03976f4987aa6711eb92f"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 29,
      "deletions": 32
    },
    "files": [
      {
        "sha": "645c0d23c0c772eb0443cfd94a22a01d70843358",
        "filename": "src/test/fuzz/versionbits.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/600357306e2e182a457174862ea2e41c7ba39c64/src/test/fuzz/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/600357306e2e182a457174862ea2e41c7ba39c64/src/test/fuzz/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/versionbits.cpp?ref=600357306e2e182a457174862ea2e41c7ba39c64",
        "patch": "@@ -144,19 +144,14 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         // pick the timestamp to switch based on a block\n         // note states will change *after* these blocks because mediantime lags\n         int start_block = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, period * (max_periods - 3));\n-        int end_block = fuzzed_data_provider.ConsumeIntegralInRange<int>(start_block, period * (max_periods - 3));\n+        int end_block = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, period * (max_periods - 3));\n \n         start_time = block_start_time + start_block * interval;\n         timeout = block_start_time + end_block * interval;\n \n-        assert(start_time <= timeout);\n-\n         // allow for times to not exactly match a block\n         if (fuzzed_data_provider.ConsumeBool()) start_time += interval / 2;\n         if (fuzzed_data_provider.ConsumeBool()) timeout += interval / 2;\n-\n-        // this may make timeout too early; if so, don't run the test\n-        if (start_time > timeout) return;\n     } else {\n         if (fuzzed_data_provider.ConsumeBool()) {\n             start_time = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n@@ -292,13 +287,12 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         assert(since == 0);\n         assert(exp_state == ThresholdState::DEFINED);\n         assert(current_block->GetMedianTimePast() < checker.m_begin);\n-        assert(current_block->GetMedianTimePast() < checker.m_end);\n         break;\n     case ThresholdState::STARTED:\n         assert(current_block->GetMedianTimePast() >= checker.m_begin);\n-        assert(current_block->GetMedianTimePast() < checker.m_end);\n         if (exp_state == ThresholdState::STARTED) {\n             assert(blocks_sig < threshold);\n+            assert(current_block->GetMedianTimePast() < checker.m_end);\n         } else {\n             assert(exp_state == ThresholdState::DEFINED);\n         }\n@@ -308,7 +302,6 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             assert(current_block->nHeight + 1 < min_activation);\n         } else {\n             assert(exp_state == ThresholdState::STARTED);\n-            assert(current_block->GetMedianTimePast() < checker.m_end);\n             assert(blocks_sig >= threshold);\n         }\n         break;\n@@ -318,7 +311,11 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         break;\n     case ThresholdState::FAILED:\n         assert(never_active_test || current_block->GetMedianTimePast() >= checker.m_end);\n-        assert(exp_state != ThresholdState::LOCKED_IN && exp_state != ThresholdState::ACTIVE);\n+        if (exp_state == ThresholdState::STARTED) {\n+            assert(blocks_sig < threshold);\n+        } else {\n+            assert(exp_state == ThresholdState::FAILED);\n+        }\n         break;\n     default:\n         assert(false);"
      },
      {
        "sha": "774c5670cb1bd6385a38a84041cad14fe7859d7e",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 15,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/600357306e2e182a457174862ea2e41c7ba39c64/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/600357306e2e182a457174862ea2e41c7ba39c64/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=600357306e2e182a457174862ea2e41c7ba39c64",
        "patch": "@@ -190,18 +190,20 @@ BOOST_FIXTURE_TEST_SUITE(versionbits_tests, TestingSetup)\n BOOST_AUTO_TEST_CASE(versionbits_test)\n {\n     for (int i = 0; i < 64; i++) {\n-        // DEFINED -> FAILED\n+        // DEFINED -> STARTED after timeout reached -> FAILED\n         VersionBitsTester().TestDefined().TestStateSinceHeight(0)\n                            .Mine(1, TestTime(1), 0x100).TestDefined().TestStateSinceHeight(0)\n                            .Mine(11, TestTime(11), 0x100).TestDefined().TestStateSinceHeight(0)\n                            .Mine(989, TestTime(989), 0x100).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(999, TestTime(20000), 0x100).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(1999, TestTime(30001), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(2000, TestTime(30002), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(2001, TestTime(30003), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(2999, TestTime(30004), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(3000, TestTime(30005), 0x100).TestFailed().TestStateSinceHeight(1000)\n+                           .Mine(999, TestTime(20000), 0x100).TestDefined().TestStateSinceHeight(0) // Timeout and start time reached simultaneously\n+                           .Mine(1000, TestTime(20000), 0).TestStarted().TestStateSinceHeight(1000) // Hit started, stop signalling\n+                           .Mine(1999, TestTime(30001), 0).TestStarted().TestStateSinceHeight(1000)\n+                           .Mine(2000, TestTime(30002), 0x100).TestFailed().TestStateSinceHeight(2000) // Hit failed, start signalling again\n+                           .Mine(2001, TestTime(30003), 0x100).TestFailed().TestStateSinceHeight(2000)\n+                           .Mine(2999, TestTime(30004), 0x100).TestFailed().TestStateSinceHeight(2000)\n+                           .Mine(3000, TestTime(30005), 0x100).TestFailed().TestStateSinceHeight(2000)\n+                           .Mine(4000, TestTime(30006), 0x100).TestFailed().TestStateSinceHeight(2000)\n+\n         // DEFINED -> STARTED -> FAILED\n                            .Reset().TestDefined().TestStateSinceHeight(0)\n                            .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n@@ -212,19 +214,19 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n                            .Mine(3000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(3000) // 50 old blocks (so 899 out of the past 1000)\n                            .Mine(4000, TestTime(20010), 0x100).TestFailed().TestStateSinceHeight(3000)\n \n-        // DEFINED -> STARTED -> FAILED while threshold reached\n+        // DEFINED -> STARTED -> LOCKEDIN after timeout reached -> ACTIVE\n                            .Reset().TestDefined().TestStateSinceHeight(0)\n                            .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n                            .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n                            .Mine(2000, TestTime(10000), 0x101).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n                            .Mine(2999, TestTime(30000), 0x100).TestStarted().TestStateSinceHeight(2000) // 999 new blocks\n-                           .Mine(3000, TestTime(30000), 0x100).TestFailed().TestStateSinceHeight(3000) // 1 new block (so 1000 out of the past 1000 are new)\n-                           .Mine(3999, TestTime(30001), 0).TestFailed().TestStateSinceHeight(3000)\n-                           .Mine(4000, TestTime(30002), 0).TestFailed().TestStateSinceHeight(3000)\n-                           .Mine(14333, TestTime(30003), 0).TestFailed().TestStateSinceHeight(3000)\n-                           .Mine(24000, TestTime(40000), 0).TestFailed().TestStateSinceHeight(3000)\n+                           .Mine(3000, TestTime(30000), 0x100).TestLockedIn().TestStateSinceHeight(3000) // 1 new block (so 1000 out of the past 1000 are new)\n+                           .Mine(3999, TestTime(30001), 0).TestLockedIn().TestStateSinceHeight(3000)\n+                           .Mine(4000, TestTime(30002), 0).TestActiveDelayed().TestStateSinceHeight(4000, 3000)\n+                           .Mine(14333, TestTime(30003), 0).TestActiveDelayed().TestStateSinceHeight(4000, 3000)\n+                           .Mine(24000, TestTime(40000), 0).TestActive().TestStateSinceHeight(4000, 15000)\n \n-        // DEFINED -> STARTED -> LOCKEDIN at the last minute -> ACTIVE\n+        // DEFINED -> STARTED -> LOCKEDIN before timeout -> ACTIVE\n                            .Reset().TestDefined()\n                            .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n                            .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n@@ -247,8 +249,10 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n                            .Mine(3000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n                            .Mine(4000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n                            .Mine(5000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n+                           .Mine(5999, TestTime(20000), 0).TestStarted().TestStateSinceHeight(3000)\n                            .Mine(6000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(6000)\n                            .Mine(7000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(6000)\n+                           .Mine(24000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(6000) // stay in FAILED no matter how much we signal\n         ;\n     }\n }"
      },
      {
        "sha": "df2ec4e056ed7d3a938bcada3343f140ab90d429",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/600357306e2e182a457174862ea2e41c7ba39c64/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/600357306e2e182a457174862ea2e41c7ba39c64/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=600357306e2e182a457174862ea2e41c7ba39c64",
        "patch": "@@ -57,18 +57,12 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n \n         switch (state) {\n             case ThresholdState::DEFINED: {\n-                if (pindexPrev->GetMedianTimePast() >= nTimeTimeout) {\n-                    stateNext = ThresholdState::FAILED;\n-                } else if (pindexPrev->GetMedianTimePast() >= nTimeStart) {\n+                if (pindexPrev->GetMedianTimePast() >= nTimeStart) {\n                     stateNext = ThresholdState::STARTED;\n                 }\n                 break;\n             }\n             case ThresholdState::STARTED: {\n-                if (pindexPrev->GetMedianTimePast() >= nTimeTimeout) {\n-                    stateNext = ThresholdState::FAILED;\n-                    break;\n-                }\n                 // We need to count\n                 const CBlockIndex* pindexCount = pindexPrev;\n                 int count = 0;\n@@ -80,6 +74,8 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n                 }\n                 if (count >= nThreshold) {\n                     stateNext = ThresholdState::LOCKED_IN;\n+                } else if (pindexPrev->GetMedianTimePast() >= nTimeTimeout) {\n+                    stateNext = ThresholdState::FAILED;\n                 }\n                 break;\n             }"
      }
    ]
  },
  {
    "sha": "ec7824396bdd2e93b429ddce9fea6bb29695454a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzc4MjQzOTZiZGQyZTkzYjQyOWRkY2U5ZmVhNmJiMjk2OTU0NTRh",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-06T08:42:58Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-16T00:59:19Z"
      },
      "message": "chainparams: drop versionbits threshold to 90% for mainnnet and signet\n\nGithub-Pull: #21377\nRebased-From: ffe33dfbd4c3b11e3475b022b6c1dd077613de79",
      "tree": {
        "sha": "e4715982bcdfd086f8642c28c722dedd5baad03f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4715982bcdfd086f8642c28c722dedd5baad03f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec7824396bdd2e93b429ddce9fea6bb29695454a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEFSgSMAeFyWRE0zNNF1ZXMuCOXkEFAmB44WcACgkQF1ZXMuCO\nXkF6tg/9Gc1NbTfW+6iMqmn04A3FBwXsTWK2URav/RktUtwJsgHcUN4VWQuNCoJg\n68M9O/u9D3yuDisr50e0E+ubJPmQmUc69FwCjbB1ZpnvcTS2JkMMoWTIUTLDNthr\nqvfW1ATtn0zGUKY9hrkNa8DbY1rhDvnA8PwIX6lPDKpllx6IgbhrEHaSQrBgKh31\nVAkvq6dh3aHT6y9rYdaf1els2QkD3IMeLX0Gvr6vyItAjuokbJb/N+IvFA4zPTd4\nczBLXYaFNuWq+QwLT2eDdNNiq9vdvHQ9nTTwIQqArP/mQE9yHSiCcFVG98fOEX0w\nOOeqm1rYakMjROEr1CG1KWNXkVdoGnFXvBEZuimkf7b9+l8XK5MkfRJG2f+KSFMi\n6jlKQSNrfdnSMxrwoAtUpiK9FLkhBHLu3+3aect2PVv5FFOQ6hvmMCXKP8ki3AzM\nIi5ZFi4NTor2f3m0uC0/okJYcUk3K5kXHm9bOn7QiE1exHvSD4V6VpYA/fFTBeS6\nUFI7bM/EIP2wRiZWq9I0nv6F10bBKk+ORNO/vNxBjyxiMz2iUqczn3IUPpKlkWeT\n5+I0o0Fdw7EOG0MzgMdUmI5ps0reSK8p+cXVNhPJ+MPF6Ft43hcC0NOLS/WMXFF+\nQoxYT2/Ld/iaGthI82w5jhNvcgKl4pS1khlOk0kwydBfcy2hZmk=\n=XLrI\n-----END PGP SIGNATURE-----",
        "payload": "tree e4715982bcdfd086f8642c28c722dedd5baad03f\nparent 600357306e2e182a457174862ea2e41c7ba39c64\nauthor Anthony Towns <aj@erisian.com.au> 1615020178 +1000\ncommitter Andrew Chow <achow101-github@achow101.com> 1618534759 -0400\n\nchainparams: drop versionbits threshold to 90% for mainnnet and signet\n\nGithub-Pull: #21377\nRebased-From: ffe33dfbd4c3b11e3475b022b6c1dd077613de79\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec7824396bdd2e93b429ddce9fea6bb29695454a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec7824396bdd2e93b429ddce9fea6bb29695454a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec7824396bdd2e93b429ddce9fea6bb29695454a/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "600357306e2e182a457174862ea2e41c7ba39c64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/600357306e2e182a457174862ea2e41c7ba39c64",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/600357306e2e182a457174862ea2e41c7ba39c64"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "16dde1c5770515c4fa7c26d5999c0128836d67ac",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec7824396bdd2e93b429ddce9fea6bb29695454a/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec7824396bdd2e93b429ddce9fea6bb29695454a/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=ec7824396bdd2e93b429ddce9fea6bb29695454a",
        "patch": "@@ -80,7 +80,7 @@ class CMainParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;\n-        consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n+        consensus.nRuleChangeActivationThreshold = 1815; // 90% of 2016\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\n@@ -326,7 +326,7 @@ class SigNetParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;\n-        consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n+        consensus.nRuleChangeActivationThreshold = 1815; // 90% of 2016\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.MinBIP9WarningHeight = 0;\n         consensus.powLimit = uint256S(\"00000377ae000000000000000000000000000000000000000000000000000000\");"
      }
    ]
  },
  {
    "sha": "cbd64c3a28a7466f421477daadc6e6e6b69b898a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmQ2NGMzYTI4YTc0NjZmNDIxNDc3ZGFhZGM2ZTZlNmI2OWI4OThh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-15T02:36:19Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-16T00:59:21Z"
      },
      "message": "Add mainnet and testnet taproot activation params\n\nGithub-Pull: #21686\nRebased-From: f979b3237f1cfc28f9c4ccb07beab558d5357a55",
      "tree": {
        "sha": "00230433826f344300a0dc00f4f16274c602ff5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00230433826f344300a0dc00f4f16274c602ff5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbd64c3a28a7466f421477daadc6e6e6b69b898a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEFSgSMAeFyWRE0zNNF1ZXMuCOXkEFAmB44WkACgkQF1ZXMuCO\nXkEVxRAAnMqmwGzN8CdhbS2wT/uirEnpjQE9VBdV7ruIHJK088n2PzIWyzCI6Cyg\niqLGAYYrxKYMqa4GsFhpm4+naaJIIynLD1atizHmGByO2VLyrUkDlGmDI1GXpd48\nk5CKcQfhuwhKbdrRPqSmXsWxBHNFgpsomeqDpRUDblVq/yeqycRBhZrMucjQATkd\npyV2BEWhRpVBWaRxX1z0UAtscIu6NHmlp4dBQyJ+cjJkAi4GPaVk0LUMqWp1TAlm\nCswkFrqjvnSWZ+YUjrfH0Pq5Y6r3N2MDBQfvLImM25mwAgHDpFbXWhqF86Wmj6U2\n73szxtkMDLKw76CyLwEaRfuhJsAZXceQmoHytTHgV0buvF1Gkb0OsLudtjYGn7Yi\n600CbMbglaQaeiLFceui8Z+rX9D3/MY9/mT0wc+PL10+W3x+2imctuh4suhIYjAk\nojPLmla051z22OUYmBntHmsDnm5K95mOZh6/HHHciY6YqJ0PEIAfO6JwG52l83YE\n1x0ImvGQoJrXFBP/jrfGeDEUsaQwqgL/i9FrqxUg7fond4MvZemUzfoQIxfA5m26\n4f80vRQOMukCZIFN6/XlJAMVfbt9+USPD95zu1bFo5Tp7FDDdU66uItSaCXB9bVe\nsAGIgk4T73Xfdk6fr7Al++G48cPGzptCIVIIBH17/slhdZMdGFk=\n=ySQu\n-----END PGP SIGNATURE-----",
        "payload": "tree 00230433826f344300a0dc00f4f16274c602ff5d\nparent ec7824396bdd2e93b429ddce9fea6bb29695454a\nauthor Andrew Chow <achow101-github@achow101.com> 1618454179 -0400\ncommitter Andrew Chow <achow101-github@achow101.com> 1618534761 -0400\n\nAdd mainnet and testnet taproot activation params\n\nGithub-Pull: #21686\nRebased-From: f979b3237f1cfc28f9c4ccb07beab558d5357a55\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbd64c3a28a7466f421477daadc6e6e6b69b898a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cbd64c3a28a7466f421477daadc6e6e6b69b898a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbd64c3a28a7466f421477daadc6e6e6b69b898a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec7824396bdd2e93b429ddce9fea6bb29695454a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec7824396bdd2e93b429ddce9fea6bb29695454a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec7824396bdd2e93b429ddce9fea6bb29695454a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "0a45b782b971581c19a4c9052d183677570f8245",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbd64c3a28a7466f421477daadc6e6e6b69b898a/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbd64c3a28a7466f421477daadc6e6e6b69b898a/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=cbd64c3a28a7466f421477daadc6e6e6b69b898a",
        "patch": "@@ -89,9 +89,9 @@ class CMainParams : public CChainParams {\n \n         // Deployment of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 0; // No activation delay\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1619222400; // April 24th, 2021\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1628640000; // August 11th, 2021\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 709632; // Approximately November 12th, 2021\n \n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000001533efd8d716a517fe2c5008\");\n         consensus.defaultAssumeValid = uint256S(\"0x0000000000000000000b9d2ec5a352ecba0592946514a92f14319dc2b367fc72\"); // 654683\n@@ -204,8 +204,8 @@ class CTestNetParams : public CChainParams {\n \n         // Deployment of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1619222400; // April 24th, 2021\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1628640000; // August 11th, 2021\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 0; // No activation delay\n \n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000001db6ec4ac88cf2272c6\");"
      }
    ]
  }
]