DrahtBot,2019-11-19 11:45:09,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16673](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16673.html) (Relog configuration args on debug.log rotat",https://github.com/bitcoin/bitcoin/pull/17514#issuecomment-555471685,555471685,
laanwj,2019-11-19 11:55:39,"FYI, these are the potential tinyformat exceptions:\n```\nTINYFORMAT_ERROR(""tinyformat: Cannot convert from argument type to integer for use as variable width or precision"");\nTINYFORMAT_ERROR(""tinyformat: Not enough conversion specifiers in format string"");\nTINYFORMAT_ERROR(""tinyformat: Not enough arguments to read variable width"");\nTINYFORMAT_ERROR(""tinyformat: Not enough arguments to rea",https://github.com/bitcoin/bitcoin/pull/17514#issuecomment-555475214,555475214,
practicalswift,2019-11-19 12:03:06,"Concept ACK on making logging `noexcept`\n\nSome comments:\n\n> The only functions I'm slightly uncertain about are the boost posix_time functions in\n> GetTimeMicros/GetTimeMillis, but I could not find any documented exceptions in\n> https://www.boost.org/doc/libs/1_71_0/doc/html/date_time/posix_time.html\n\n`GetTimeMillis()` does `boost::posix_time::ptime(boost::gregorian::date(1970,1,1)",https://github.com/bitcoin/bitcoin/pull/17514#issuecomment-555477666,555477666,
laanwj,2019-11-19 12:22:30,"> GetTimeMillis() does boost::posix_time::ptime(boost::gregorian::date(1970,1,1))) which can throw:\n\nOh crap. Thanks for noticing. Though, I guess that will never happen with this static input. But I think your commit improves the code anyway.\n\nThanks, will cherry-pick that!\n\nEdit: replaced my commit\n",https://github.com/bitcoin/bitcoin/pull/17514#issuecomment-555484009,555484009,
fanquake,2019-11-19 13:25:58,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17514#issuecomment-555506306,555506306,
fanquake,2019-11-27 15:01:39,"> It will abort on any tinyformat error.\n\nIs this still the case? I'm testing 71493f0a55f6fa0a23e00d9d239aa6d8210d89ab with this diff:\n\n```diff\n     RandAddStaticEnv(hasher);\n-    LogPrintf(""Feeding %i bytes of environment data into RNG\n"", hasher.Size() - old_size);\n+    LogPrintf(""Feeding %a bytes of environment data into RNG\n"", hasher.Size() - old_size);\n```\n\nwhich triggers",https://github.com/bitcoin/bitcoin/pull/17514#issuecomment-559123543,559123543,
laanwj,2019-11-28 08:50:59,"> Is this still the case? I'm testing 71493f0 with this diff:\n\nNo, not *in general*.  `strprintf`still raises `tinyformat_error`. `LogPrintf`'s behavior for invalid format strings is unchanged (the exception is caught and reported, but does not leak out)\n\nNote that the paragraph related to the use of `tfm::format_noexcept` specifically. I even mention in the second post\n\n> I have inten",https://github.com/bitcoin/bitcoin/pull/17514#issuecomment-559398813,559398813,
laanwj,2019-12-05 09:05:21,"I'm not entirely sure this is worth doing anymore. noexcept works slightly different from what I thought when I wrote this PR.\nit seems it's perfectly fine to use non-noexcept functions from except context if you expect they don't ever except anyway. I'm not sure what this adds at all.\nso this is not a requirement for #17507 at all",https://github.com/bitcoin/bitcoin/pull/17514#issuecomment-562036908,562036908,
practicalswift,2019-12-05 09:37:39,"@laanwj \n\nI think it is worth doing.\n\nWhat this adds is a guarantee that logging won't throw any exceptions. That enables the compiler to apply optimisations that otherwise would not be possible (by reducing the number of alternative execution paths), and it also simplifies control flow analysis from the perspective of static analysers and human reviewers.\n\nThis is why Scott Mayer of """,https://github.com/bitcoin/bitcoin/pull/17514#issuecomment-562049097,562049097,
laanwj,2019-12-06 08:00:32,Squashed the fixup commit and rebased.,https://github.com/bitcoin/bitcoin/pull/17514#issuecomment-562472975,562472975,
practicalswift,2019-11-19 11:28:42,"Instead of aborting what about returning `Unable to format: ""…""` in case of a format string mistake?\n\nPerhaps with an `ASSUME(false);` to make it abort if `--enable-debug` (674f9d59ba4c1a1d4662e79467cc417a2988cf15 in #16136 gives us `ASSUME(…)`).",https://github.com/bitcoin/bitcoin/pull/17514#discussion_r347871169,347871169,src/tinyformat.h
laanwj,2019-11-19 11:33:06,"This is intended for use in utility functions (say, date-time formatting, string encodings, and whatnot), in neither of these cases it's acceptable to end up with ""Unable to format: "" in the string! That's much worse than to just terminate the process. It is assumed these functions have proper unit tests.\n\nNo opinion on how to terminate the process, though. I did not use `assert(0)` because I ",https://github.com/bitcoin/bitcoin/pull/17514#discussion_r347872898,347872898,src/tinyformat.h
practicalswift,2019-11-19 12:30:20,"Oh, sorry: I now re-read the diff and understand that the use of `format_noexcept` is extremely limited. Makes perfect sense. Sorry for the misunderstanding.",https://github.com/bitcoin/bitcoin/pull/17514#discussion_r347895390,347895390,src/tinyformat.h
MarcoFalke,2019-11-19 12:40:30,"I think you don't have to call `std::abort` in a throwing function that is marked `noexcept(true)`. An exception will `std::terminate` the program anyway, no?",https://github.com/bitcoin/bitcoin/pull/17514#discussion_r347899485,347899485,src/tinyformat.h
laanwj,2019-11-20 09:25:26,"@MarcoFalke correct. I was not sure to make this explicit or not. If you think it's ok to rely on C++'s behavior here, I'll remove the catch entirely (maybe replace it with a comment?).",https://github.com/bitcoin/bitcoin/pull/17514#discussion_r348371112,348371112,src/tinyformat.h
MarcoFalke,2019-11-20 14:16:13,"Yes, I believe that the program will always abort, even if someone sets a terminate handler that does not abort: https://en.cppreference.com/w/cpp/error/terminate_handler\n\nSo it should be fine to remove this and add a comment instead.",https://github.com/bitcoin/bitcoin/pull/17514#discussion_r348504676,348504676,src/tinyformat.h
laanwj,2019-11-20 14:34:28,Done,https://github.com/bitcoin/bitcoin/pull/17514#discussion_r348515334,348515334,src/tinyformat.h
MarcoFalke,2019-12-04 20:35:33,"Could make this shorter by removing the copy-pasted body?\n\n```suggestion\nstd::string format_noexcept(const std::string &fmt, const Args&... args) noexcept {return format(fmt, args...);}\n```",https://github.com/bitcoin/bitcoin/pull/17514#discussion_r353968761,353968761,src/tinyformat.h
laanwj,2019-12-05 09:03:24,"it looks really weird like this, having ` _noexcept` that simply calls the normal function\n",https://github.com/bitcoin/bitcoin/pull/17514#discussion_r354179674,354179674,src/tinyformat.h
MarcoFalke,2019-12-05 18:21:57,"But it is exactly what happens here. Inlining `format` doesn't make it throw less exceptions. The only difference between them is the `noexcept` keyword, which makes the program terminate immediately should any exception be thrown.",https://github.com/bitcoin/bitcoin/pull/17514#discussion_r354473109,354473109,src/tinyformat.h
laanwj,2019-12-06 07:40:06,"yes, that's true",https://github.com/bitcoin/bitcoin/pull/17514#discussion_r354698147,354698147,src/tinyformat.h
laanwj,2019-12-06 07:42:51,"OTOH this is only three lines, I'd like to keep the comment too, and this adds yet another layer of indirection with `std::string` return value, it's kind of marginal\nto be honest I think it's more readable like this",https://github.com/bitcoin/bitcoin/pull/17514#discussion_r354698877,354698877,src/tinyformat.h
