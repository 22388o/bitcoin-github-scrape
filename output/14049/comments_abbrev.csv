DrahtBot,2019-05-07T17:06:36Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 252 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/14049#issuecomment-490166457,490166457,
DrahtBot,2019-08-09T09:09:17Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16573](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16573.html) (build: disable building libsecp256k1 benchm",https://github.com/bitcoin/bitcoin/pull/14049#issuecomment-519844572,519844572,
DrahtBot,2019-08-09T20:48:28Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/14049#issuecomment-520058776,520058776,
dongcarl,2020-06-02T16:26:01Z,Rebased this PR for you :relaxed:: https://github.com/bitcoin/bitcoin/compare/master...dongcarl:2020-06-bip151_ecdh-rebased,https://github.com/bitcoin/bitcoin/pull/14049#issuecomment-637663909,637663909,
fanquake,2021-08-18T12:24:41Z,"My understanding is that someone else is helping with / taking over these changes, and that the BIP is still being overhauled. \nI think we'll be better off with new PRs, and clean discussion when work on the implementation resumes in this repo.\nChanges from here are be cherry-picked if / when needed. So I'm going to close this PR for now. ",https://github.com/bitcoin/bitcoin/pull/14049#issuecomment-901069356,901069356,
gmaxwell,2018-08-24T16:29:57Z,Needs a test where the pubkey doesn't decode.,https://github.com/bitcoin/bitcoin/pull/14049#discussion_r212684014,212684014,src/test/key_tests.cpp
Empact,2018-08-24T23:38:14Z,"Is it better to pass a `SECP256K1_CONTEXT_NONE` context, given the context is not currently used by these functions?",https://github.com/bitcoin/bitcoin/pull/14049#discussion_r212777152,212777152,src/key.cpp
gmaxwell,2018-08-25T04:32:11Z,"That would require creating a dummy context just for this purpose, so I don't think that would be best.",https://github.com/bitcoin/bitcoin/pull/14049#discussion_r212788466,212788466,src/key.cpp
l2a5b1,2018-08-26T07:24:12Z,"Extract `ComputeECDHSecret` from `CKey` to make it a freestanding function? \n```c++\nbool ComputeECDHSecret(const CKey& key, const CPubKey& pubkey, CPrivKey& secret_out);\n```\nAlthough it is convenient to add new BIP responsibilities directly to `CKey`, I would recommend against adding more responsibilities to `CKey` than it already has.\n\n",https://github.com/bitcoin/bitcoin/pull/14049#discussion_r212817244,212817244,src/key.h
l2a5b1,2018-08-26T07:24:28Z,Maybe replace the `&keydata[0]` argument with `keydata.data()`?,https://github.com/bitcoin/bitcoin/pull/14049#discussion_r212817252,212817252,src/key.cpp
l2a5b1,2018-08-26T07:34:30Z,Maybe rename `secp256k1_context_sign` to `secp256k1_context`?,https://github.com/bitcoin/bitcoin/pull/14049#discussion_r212817497,212817497,src/key.cpp
jonasschnelli,2018-08-27T11:58:18Z,Added,https://github.com/bitcoin/bitcoin/pull/14049#discussion_r212950004,212950004,src/test/key_tests.cpp
jonasschnelli,2018-08-27T11:58:29Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14049#discussion_r212950033,212950033,src/key.cpp
gmaxwell,2018-08-27T16:02:25Z,"Thanks but please also add one that could actually have come in over the wire for BIP151, -- the first byte isn't sent there.  What I'm hoping we check for is that it correctly rejects points that aren't on the curve here, rather than performing operations on the twist.",https://github.com/bitcoin/bitcoin/pull/14049#discussion_r213027446,213027446,src/test/key_tests.cpp
Sjors,2018-09-02T09:03:03Z,"The new `pubkeydata[9] = 0xFF;` line checks that, right? Maybe add a comment to clarify?",https://github.com/bitcoin/bitcoin/pull/14049#discussion_r214533696,214533696,src/test/key_tests.cpp
Sjors,2018-09-02T09:04:23Z,"Is this `--enable-experimental` ""permanent""? Perhaps this change should be behind a `./configure --enable-experimental-ecdh`, or is overly pedantic? ",https://github.com/bitcoin/bitcoin/pull/14049#discussion_r214533720,214533720,configure.ac
jonasschnelli,2018-09-27T09:03:40Z,It's an upstream question. Should be asked at https://github.com/bitcoin-core/secp256k1,https://github.com/bitcoin/bitcoin/pull/14049#discussion_r220846065,220846065,configure.ac
jonasschnelli,2018-09-27T09:04:42Z,I think this makes sense to be a member function (in align with `Derive` and other member functions of `CKey`).,https://github.com/bitcoin/bitcoin/pull/14049#discussion_r220846385,220846385,src/key.h
l2a5b1,2018-09-27T12:30:32Z,"""*A function that can be simply, elegantly, and efficiently implemented as a freestanding function (that is, as a nonmember function) should be implemented outside the class.*"" (Stroustrup) is a very commonly used and well documented best practice in C++ development.\n\nSee [C.4. Make a function a member only if it needs direct access to the representation of a class](https://isocpp.github.io/Cp",https://github.com/bitcoin/bitcoin/pull/14049#discussion_r220903405,220903405,src/key.h
Sjors,2018-09-28T10:15:59Z,"It's declared experimental upstream. Asking upstream to no longer declare it experimental is an upstream question. My point is about using it here; as long as it's experimental upstream, shouldn't it be considered experimental here?",https://github.com/bitcoin/bitcoin/pull/14049#discussion_r221206571,221206571,configure.ac
jonasschnelli,2019-08-13T13:20:07Z,I think it's best to not hide it behind a configuration option on our side. I think we should always compile BIP324 features but only activate them when passing a startup argument (can be switched to default later),https://github.com/bitcoin/bitcoin/pull/14049#discussion_r313391363,313391363,configure.ac
