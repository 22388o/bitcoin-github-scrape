[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348052948",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348052948",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 348052948,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODA1Mjk0OA==",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?u=a0e0040aacd7d4f0787481e8ac30b494fa429e11&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-30T01:26:06Z",
    "updated_at": "2017-11-30T01:26:06Z",
    "author_association": "MEMBER",
    "body": "Needs a rebase.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348052948/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348072720",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348072720",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 348072720,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODA3MjcyMA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-30T03:33:40Z",
    "updated_at": "2017-11-30T03:33:40Z",
    "author_association": "MEMBER",
    "body": "rebased",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348072720/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348702632",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348702632",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 348702632,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODcwMjYzMg==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-02T16:23:33Z",
    "updated_at": "2017-12-02T16:23:33Z",
    "author_association": "MEMBER",
    "body": "Rebased and made slight improvements to the P2PStub class.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348702632/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348724367",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348724367",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 348724367,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODcyNDM2Nw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-02T22:20:14Z",
    "updated_at": "2017-12-02T22:20:14Z",
    "author_association": "MEMBER",
    "body": "Thanks for the review @jamesob . I've removed the errant comment, and improved comments for the P2PStub methods.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348724367/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348741681",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348741681",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 348741681,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODc0MTY4MQ==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-03T05:30:09Z",
    "updated_at": "2017-12-03T05:30:09Z",
    "author_association": "MEMBER",
    "body": "utACK https://github.com/bitcoin/bitcoin/pull/11771/commits/e72c94cda663102c7e188b80e9cdb76026c0b6a7",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348741681/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348741769",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348741769",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 348741769,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODc0MTc2OQ==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-03T05:33:13Z",
    "updated_at": "2017-12-03T05:33:13Z",
    "author_association": "MEMBER",
    "body": "...modulo the legitimate-looking test failure: \r\n```\r\n  File \"/home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-unknown-linux-gnu/test/functional/invalidtxrequest.py\", line 50, in run_test\r\n    node.p2p.send_txs_and_test([tx1], node, False, 16, b'mandatory-script-verify-flag-failed (Invalid OP_IF construction)')\r\n  File \"/home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-unknown-linux-gnu/test/functional/test_framework/mininode.py\", line 540, in send_txs_and_test\r\n    assert_equal(reject_code, self.reject_code_received)\r\n  File \"/home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-unknown-linux-gnu/test/functional/test_framework/util.py\", line 38, in assert_equal\r\n    raise AssertionError(\"not(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))\r\nAssertionError: not(16 == None)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348741769/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348985760",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348985760",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 348985760,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODk4NTc2MA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-04T14:55:58Z",
    "updated_at": "2017-12-04T14:55:58Z",
    "author_association": "MEMBER",
    "body": "Great. Travis caught a race condition. I wasn't able to reproduce it locally.\r\n\r\nShould be fixed in the final commit. @jamesob - let me know when you've taken a look and I'll squash into the *Add P2PStub class* commit.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348985760/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350740471",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-350740471",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 350740471,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDc0MDQ3MQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-11T14:32:07Z",
    "updated_at": "2017-12-11T14:32:07Z",
    "author_association": "MEMBER",
    "body": "squashed fix and rebased",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350740471/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351801429",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-351801429",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 351801429,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTgwMTQyOQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-14T18:49:27Z",
    "updated_at": "2017-12-14T18:49:27Z",
    "author_association": "MEMBER",
    "body": "Fixed @MarcoFalke's comments, along with a few variable renamings. I've pushed as a fixup commit. Will squash once Marco confirms he's happy with the fixup.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351801429/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351864741",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-351864741",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 351864741,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTg2NDc0MQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-14T23:13:00Z",
    "updated_at": "2017-12-14T23:13:00Z",
    "author_association": "MEMBER",
    "body": "fixups look good, though a travis failure:\r\n\r\n```\r\n./test/functional/test_framework/mininode.py:26:1: F401 'test_framework.util.assert_equal' imported but unused\r\n\r\n^---- failure generated from contrib/devtools/lint-python.sh\r\n```\r\n\r\nFeel free to squash. I am going to review from scratch anyway.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351864741/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/352129111",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-352129111",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 352129111,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjEyOTExMQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T22:35:49Z",
    "updated_at": "2017-12-15T22:35:49Z",
    "author_association": "MEMBER",
    "body": "squashed && rebased",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/352129111/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/358781287",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-358781287",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 358781287,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODc4MTI4Nw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-18T21:05:20Z",
    "updated_at": "2018-01-18T21:05:20Z",
    "author_association": "MEMBER",
    "body": "Thanks for the review @ryanofsky - I think I've addressed all your comments",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/358781287/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/361269654",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-361269654",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 361269654,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTI2OTY1NA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-29T14:53:43Z",
    "updated_at": "2018-01-29T14:53:43Z",
    "author_association": "MEMBER",
    "body": "rebased to conform with new naming convention.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/361269654/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/361424329",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-361424329",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 361424329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTQyNDMyOQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-29T23:34:53Z",
    "updated_at": "2018-01-29T23:34:53Z",
    "author_association": "MEMBER",
    "body": "Thanks for the review @jamesob . I've added a fixup commit that adds logging as suggested. If you're happy with that I'll squash it into the P2PDataStore commit.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/361424329/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/361610392",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-361610392",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 361610392,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTYxMDM5Mg==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-30T14:31:47Z",
    "updated_at": "2018-01-30T14:31:47Z",
    "author_association": "MEMBER",
    "body": "thanks. Fixup commit squashed",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/361610392/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/361737826",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-361737826",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 361737826,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTczNzgyNg==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-30T21:20:07Z",
    "updated_at": "2018-01-30T21:20:07Z",
    "author_association": "MEMBER",
    "body": "utACK https://github.com/bitcoin/bitcoin/pull/11771/commits/359d06757249b34b36688eaef31e7626a46bd52a",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/361737826/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365204517",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-365204517",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 365204517,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTIwNDUxNw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-13T09:30:20Z",
    "updated_at": "2018-02-13T09:30:20Z",
    "author_association": "MEMBER",
    "body": "Seems to be ready for merge. If you don't mind @conscott I'll leave your suggestions for a future PR, this is only the first in a series.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365204517/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365273318",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-365273318",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 365273318,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTI3MzMxOA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-13T13:55:37Z",
    "updated_at": "2018-02-13T13:55:37Z",
    "author_association": "MEMBER",
    "body": "Thanks for the review @conscott . I'll address your points in #11772.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365273318/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/374063356",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-374063356",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "id": 374063356,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDA2MzM1Ng==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-18T23:04:57Z",
    "updated_at": "2018-03-18T23:04:57Z",
    "author_association": "MEMBER",
    "body": "Agree with all of @MarcoFalke's comments, which can be addressed in a future PR.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/374063356/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154506637",
    "pull_request_review_id": 80684762,
    "id": 154506637,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDUwNjYzNw==",
    "diff_hunk": "@@ -412,3 +414,110 @@ def run(self):\n             [obj.handle_close() for obj in disconnected]\n             asyncore.loop(0.1, use_poll=True, map=mininode_socket_map, count=1)\n         logger.debug(\"Network thread closing\")\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        # current_block_header = super(current_tip)",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 67,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "f4c080ff63ae819d794fb11634af00397714f844",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Unnecessary comment?",
    "created_at": "2017-12-02T20:50:45Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r154506637",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154506637"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r154506637"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154506637/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 448,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154508628",
    "pull_request_review_id": 80686571,
    "id": 154508628,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDUwODYyOA==",
    "diff_hunk": "@@ -412,3 +414,110 @@ def run(self):\n             [obj.handle_close() for obj in disconnected]\n             asyncore.loop(0.1, use_poll=True, map=mininode_socket_map, count=1)\n         logger.debug(\"Network thread closing\")\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        # current_block_header = super(current_tip)",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 67,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "f4c080ff63ae819d794fb11634af00397714f844",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "duh. Vestigial garbage. I'll remove.",
    "created_at": "2017-12-02T22:19:43Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r154508628",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154508628"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r154508628"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154508628/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 448,
    "side": "RIGHT",
    "in_reply_to_id": 154506637
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156986892",
    "pull_request_review_id": 83554929,
    "id": 156986892,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njk4Njg5Mg==",
    "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 64,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Mind to simplify the nested ifs?\r\n\r\n```py\r\nelif inv.type & MSG_TX and inv.hash in self.block_store.keys():\r\n    self.send...",
    "created_at": "2017-12-14T16:08:30Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156986892",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156986892"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156986892"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156986892/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 480,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156988773",
    "pull_request_review_id": 83554929,
    "id": 156988773,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njk4ODc3Mw==",
    "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        if current_block_header is None:",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 75,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: Add a comment why this would ever be true and not dead code?",
    "created_at": "2017-12-14T16:14:41Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156988773",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156988773"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156988773"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156988773/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 491,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156992833",
    "pull_request_review_id": 83554929,
    "id": 156992833,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njk5MjgzMw==",
    "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        if current_block_header is None:\n+            return\n+\n+        response = msg_headers()\n+        headersList = [current_block_header]\n+        maxheaders = 2000\n+        while (headersList[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headersList\n+            # as we go.\n+            prevBlockHash = headersList[0].hashPrevBlock\n+            if prevBlockHash in self.block_store:\n+                prevBlockHeader = self.block_store[prevBlockHash]\n+                headersList.insert(0, prevBlockHeader)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headersList = headersList[:maxheaders]\n+        hashList = [x.sha256 for x in headersList]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headersList)\n+        if (hash_stop in hashList):\n+            index = hashList.index(hash_stop) + 1\n+        response.headers = headersList[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, reject_code=None, reject_reason=None, request_block=True):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\n+         - if success is True: assert that the node's tip advances to the most recent block.\n+         - if success is False: assert that the node's tip doesn't advance.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests)",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 131,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Since `getdata_requests` is written to with the mininode lock, why is a `lock=mininode_lock` not required when reading?",
    "created_at": "2017-12-14T16:27:51Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156992833",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156992833"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156992833"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156992833/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 547,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156996583",
    "pull_request_review_id": 83554929,
    "id": 156996583,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njk5NjU4Mw==",
    "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        if current_block_header is None:\n+            return\n+\n+        response = msg_headers()\n+        headersList = [current_block_header]\n+        maxheaders = 2000\n+        while (headersList[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headersList\n+            # as we go.\n+            prevBlockHash = headersList[0].hashPrevBlock\n+            if prevBlockHash in self.block_store:\n+                prevBlockHeader = self.block_store[prevBlockHash]\n+                headersList.insert(0, prevBlockHeader)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headersList = headersList[:maxheaders]\n+        hashList = [x.sha256 for x in headersList]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headersList)\n+        if (hash_stop in hashList):\n+            index = hashList.index(hash_stop) + 1\n+        response.headers = headersList[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, reject_code=None, reject_reason=None, request_block=True):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\n+         - if success is True: assert that the node's tip advances to the most recent block.\n+         - if success is False: assert that the node's tip doesn't advance.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+            if reject_code is not None:\n+                wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+            if reject_reason is not None:\n+                wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool.\"\"\"\n+\n+        for tx in txs:\n+            self.tx_store[tx.sha256] = tx\n+            self.send_message(msg_tx(tx))\n+\n+        self.sync_with_ping()\n+\n+        if success:\n+            assert tx.hash in rpc.getrawmempool()",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 158,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The documentation states \"whether *they* are accepted\", but you only check one.",
    "created_at": "2017-12-14T16:39:49Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156996583",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156996583"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156996583"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156996583/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 574,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157002945",
    "pull_request_review_id": 83574367,
    "id": 157002945,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzAwMjk0NQ==",
    "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 64,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "inv types are not bit flags in general, so `inv.type & MSG_TX` evaluates to true for MSG_FILTERED_BLOCK (and `inv.type & MSG_BLOCK` also evalutes to true for MSG_FILTERED_BLOCK).\r\n\r\nFlattening the nested ifs would give:\r\n\r\n```python\r\n            if (inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG) and inv.hash in self.tx_store.keys():\r\n                self.send_message(msg_tx(self.tx_store[inv.hash]))\r\n            elif (inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG) and inv.hash in self.block_store.keys():\r\n                self.send_message(msg_block(self.block_store[inv.hash]))\r\n```\r\n\r\nI'm not sure if that's any clearer due to the length of the if statements, but I'm happy to change it if you think it's an improvement.",
    "created_at": "2017-12-14T17:01:45Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157002945",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157002945"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157002945"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157002945/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 480,
    "side": "RIGHT",
    "in_reply_to_id": 156986892
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157015179",
    "pull_request_review_id": 83588664,
    "id": 157015179,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzAxNTE3OQ==",
    "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 64,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nope, fine to leave as is.",
    "created_at": "2017-12-14T17:47:46Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157015179",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157015179"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157015179"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157015179/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 480,
    "side": "RIGHT",
    "in_reply_to_id": 156986892
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157019524",
    "pull_request_review_id": 83593794,
    "id": 157019524,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzAxOTUyNA==",
    "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        if current_block_header is None:",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 75,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This isn't actually required. Removing.",
    "created_at": "2017-12-14T18:05:23Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157019524",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157019524"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157019524"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157019524/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 491,
    "side": "RIGHT",
    "in_reply_to_id": 156988773
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157019699",
    "pull_request_review_id": 83594018,
    "id": 157019699,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzAxOTY5OQ==",
    "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        if current_block_header is None:\n+            return\n+\n+        response = msg_headers()\n+        headersList = [current_block_header]\n+        maxheaders = 2000\n+        while (headersList[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headersList\n+            # as we go.\n+            prevBlockHash = headersList[0].hashPrevBlock\n+            if prevBlockHash in self.block_store:\n+                prevBlockHeader = self.block_store[prevBlockHash]\n+                headersList.insert(0, prevBlockHeader)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headersList = headersList[:maxheaders]\n+        hashList = [x.sha256 for x in headersList]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headersList)\n+        if (hash_stop in hashList):\n+            index = hashList.index(hash_stop) + 1\n+        response.headers = headersList[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, reject_code=None, reject_reason=None, request_block=True):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\n+         - if success is True: assert that the node's tip advances to the most recent block.\n+         - if success is False: assert that the node's tip doesn't advance.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests)",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 131,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You're right. This is required. Updating.",
    "created_at": "2017-12-14T18:06:10Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157019699",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157019699"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157019699"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157019699/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 547,
    "side": "RIGHT",
    "in_reply_to_id": 156992833
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157029429",
    "pull_request_review_id": 83605941,
    "id": 157029429,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzAyOTQyOQ==",
    "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        if current_block_header is None:\n+            return\n+\n+        response = msg_headers()\n+        headersList = [current_block_header]\n+        maxheaders = 2000\n+        while (headersList[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headersList\n+            # as we go.\n+            prevBlockHash = headersList[0].hashPrevBlock\n+            if prevBlockHash in self.block_store:\n+                prevBlockHeader = self.block_store[prevBlockHash]\n+                headersList.insert(0, prevBlockHeader)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headersList = headersList[:maxheaders]\n+        hashList = [x.sha256 for x in headersList]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headersList)\n+        if (hash_stop in hashList):\n+            index = hashList.index(hash_stop) + 1\n+        response.headers = headersList[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, reject_code=None, reject_reason=None, request_block=True):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\n+         - if success is True: assert that the node's tip advances to the most recent block.\n+         - if success is False: assert that the node's tip doesn't advance.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+            if reject_code is not None:\n+                wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+            if reject_reason is not None:\n+                wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool.\"\"\"\n+\n+        for tx in txs:\n+            self.tx_store[tx.sha256] = tx\n+            self.send_message(msg_tx(tx))\n+\n+        self.sync_with_ping()\n+\n+        if success:\n+            assert tx.hash in rpc.getrawmempool()",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 158,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed",
    "created_at": "2017-12-14T18:48:32Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157029429",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157029429"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157029429"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157029429/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 574,
    "side": "RIGHT",
    "in_reply_to_id": 156996583
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157845293",
    "pull_request_review_id": 84555442,
    "id": 157845293,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg0NTI5Mw==",
    "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 64,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156986892\r\n\r\nIn commit \"Add P2PStub class\"\r\n\r\nI also think this is fine as is, but I would suggest taking constants from the c++ code and writing:\r\n\r\n```python3\r\nif (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\r\n```",
    "created_at": "2017-12-19T19:00:25Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157845293",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157845293"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157845293"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157845293/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 480,
    "side": "RIGHT",
    "in_reply_to_id": 156986892
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157846565",
    "pull_request_review_id": 84555442,
    "id": 157846565,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg0NjU2NQ==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 72,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add P2PStub class\"\r\n\r\nIf following PEP8 this should be `if not self.block_store:`",
    "created_at": "2017-12-19T19:05:38Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157846565",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157846565"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157846565"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157846565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 488,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157846703",
    "pull_request_review_id": 84555442,
    "id": 157846703,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg0NjcwMw==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 79,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add P2PStub class\"\r\n\r\nUnnecessary parentheses",
    "created_at": "2017-12-19T19:06:09Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157846703",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157846703"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157846703"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157846703/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 495,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157848246",
    "pull_request_review_id": 84555442,
    "id": 157848246,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg0ODI0Ng==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[0].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.insert(0, prev_block_header)",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 85,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add P2PStub class\"\r\n\r\nUsually better to append to end of list than insert at beginning of list. You can get the last maxheaders in reverse order with `header_list[:-maxheaders-1:-1]",
    "created_at": "2017-12-19T19:12:10Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157848246",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157848246"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157848246"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157848246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 501,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157849606",
    "pull_request_review_id": 84555442,
    "id": 157849606,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg0OTYwNg==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[0].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.insert(0, prev_block_header)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:maxheaders]\n+        hash_list = [x.sha256 for x in headers_list]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headers_list)\n+        if (hash_stop in hash_list):\n+            index = hash_list.index(hash_stop) + 1\n+        response.headers = headers_list[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 124,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe `assert block.sha256 not in block_store` because if this is not true, ordering assumption could be broken and next(reversed(block_store)) might not actually return the last block.",
    "created_at": "2017-12-19T19:17:56Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157849606",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157849606"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157849606"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157849606/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 540,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157851175",
    "pull_request_review_id": 84555442,
    "id": 157851175,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg1MTE3NQ==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 51,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add P2PStub class\"\r\n\r\nUsing OrderedDict for this seems fragile, and also seems like it requires storing unnecessary ordering information. The only place ordering seems to be used is in the `reversed(next(block_store))` call returning the most recent block hash. But it would seem more straightforward and efficient just to add a `last_block_hash` member variable to hold this instead of trying to encode it within the dict.",
    "created_at": "2017-12-19T19:23:56Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157851175",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157851175"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157851175"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157851175/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 467,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157851682",
    "pull_request_review_id": 84555442,
    "id": 157851682,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg1MTY4Mg==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 51,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add P2PStub class\"\r\n\r\nCould use a comment here like `# block hash -> CBlock` to indicate what the keys and values are.",
    "created_at": "2017-12-19T19:25:42Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157851682",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157851682"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157851682"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157851682/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 467,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157851969",
    "pull_request_review_id": 84555442,
    "id": 157851969,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg1MTk2OQ==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 52,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add P2PStub class\"\r\n\r\nCould use a comment here like `# tx hash -> CTransaction` to indicate what the keys and values are.",
    "created_at": "2017-12-19T19:26:47Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157851969",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157851969"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157851969"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157851969/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 471,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157853684",
    "pull_request_review_id": 84555442,
    "id": 157853684,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg1MzY4NA==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[0].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.insert(0, prev_block_header)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:maxheaders]\n+        hash_list = [x.sha256 for x in headers_list]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headers_list)\n+        if (hash_stop in hash_list):",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 95,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add P2PStub class\"\r\n\r\nUnnecessary parentheses. Also it, seems like you could just check `headers_list[0].sha256 != hash_stop` in the while loop above and drop this extra truncation code.",
    "created_at": "2017-12-19T19:33:25Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157853684",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157853684"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157853684"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157853684/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 511,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157854985",
    "pull_request_review_id": 84555442,
    "id": 157854985,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg1NDk4NQ==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[0].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.insert(0, prev_block_header)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:maxheaders]\n+        hash_list = [x.sha256 for x in headers_list]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headers_list)\n+        if (hash_stop in hash_list):\n+            index = hash_list.index(hash_stop) + 1\n+        response.headers = headers_list[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 124,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add P2PStub class\"\r\n\r\nNeed mininode_lock here?",
    "created_at": "2017-12-19T19:38:33Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157854985",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157854985"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157854985"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157854985/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 540,
    "side": "RIGHT",
    "in_reply_to_id": 157849606
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157855530",
    "pull_request_review_id": 84555442,
    "id": 157855530,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg1NTUzMA==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[0].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.insert(0, prev_block_header)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:maxheaders]\n+        hash_list = [x.sha256 for x in headers_list]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headers_list)\n+        if (hash_stop in hash_list):\n+            index = hash_list.index(hash_stop) + 1\n+        response.headers = headers_list[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+\n+        if reject_code is not None:\n+            wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+        if reject_reason is not None:\n+            wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for tx in txs:\n+            self.tx_store[tx.sha256] = tx",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 155,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add P2PStub class\"\r\n\r\nNeed mininode_lock?",
    "created_at": "2017-12-19T19:40:48Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157855530",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157855530"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157855530"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157855530/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 571,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157858302",
    "pull_request_review_id": 84555442,
    "id": 157858302,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg1ODMwMg==",
    "diff_hunk": "@@ -32,13 +28,10 @@ def run_test(self):\n         test.run()\n \n     def get_tests(self):\n-        if self.tip is None:",
    "path": "test/functional/invalidtxrequest.py",
    "position": null,
    "original_position": 32,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "534e6092b4bbb544587c743bc03f855799593df9",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit `[tests] Fix flake8 warnings in invalidtxrequest`\r\n\r\nI see you are removing `self.tip` variable entirely in next commit, but it seems safer not to drop the `None` condition in this commit, which is supposed to only be fixing flake8 warnings.",
    "created_at": "2017-12-19T19:51:23Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157858302",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157858302"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157858302"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157858302/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 35,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157859281",
    "pull_request_review_id": 84555442,
    "id": 157859281,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg1OTI4MQ==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 42,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Add P2PStub class\"\r\n\r\nName like `P2PDataStore` might more suggestive than `P2PStub`",
    "created_at": "2017-12-19T19:55:23Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157859281",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157859281"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157859281"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157859281/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 458,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157859689",
    "pull_request_review_id": 84555442,
    "id": 157859689,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg1OTY4OQ==",
    "diff_hunk": "@@ -8,55 +8,46 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start\n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.mininode import network_thread_start, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n \n-class InvalidTxRequestTest(ComparisonTestFramework):\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time()) + 1\n+        tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)",
    "path": "test/functional/invalidtxrequest.py",
    "position": null,
    "original_position": 35,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "1c5aa93034a7ad213727ffdfb1bb71eab20f1f80",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Change invalidtxrequest to use BitcoinTestFramework\"\r\n\r\nCould do `int(self.nodes[0].getbestblockhash(), 16)` and drop \"0x\" prefix, I think.",
    "created_at": "2017-12-19T19:57:12Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157859689",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157859689"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157859689"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157859689/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157860199",
    "pull_request_review_id": 84555442,
    "id": 157860199,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg2MDE5OQ==",
    "diff_hunk": "@@ -8,55 +8,46 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start\n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.mininode import network_thread_start, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n \n-class InvalidTxRequestTest(ComparisonTestFramework):\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time()) + 1\n+        tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        block_time = int(time.time()) + 1\n \n         self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n         block.solve()\n         # Save the coinbase for later\n-        self.block1 = block\n-        self.tip = block.sha256\n+        block1 = block\n+        tip = block.sha256\n         height += 1\n-        yield TestInstance([[block, True]])\n+        node.p2p.send_blocks_and_test([block], node, True)",
    "path": "test/functional/invalidtxrequest.py",
    "position": null,
    "original_position": 52,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "1c5aa93034a7ad213727ffdfb1bb71eab20f1f80",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Change invalidtxrequest to use BitcoinTestFramework\"\r\n\r\nMaybe drop `True` since that seems to be the default value, or write `success=True`. Plain `True` by itself doesn't convey anything and just seems suspicious.",
    "created_at": "2017-12-19T19:59:15Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157860199",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157860199"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157860199"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157860199/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 42,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157860702",
    "pull_request_review_id": 84555442,
    "id": 157860702,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg2MDcwMg==",
    "diff_hunk": "@@ -8,55 +8,46 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start\n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.mininode import network_thread_start, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n \n-class InvalidTxRequestTest(ComparisonTestFramework):\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time()) + 1\n+        tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        block_time = int(time.time()) + 1\n \n         self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n         block.solve()\n         # Save the coinbase for later\n-        self.block1 = block\n-        self.tip = block.sha256\n+        block1 = block\n+        tip = block.sha256\n         height += 1\n-        yield TestInstance([[block, True]])\n+        node.p2p.send_blocks_and_test([block], node, True)\n \n         self.log.info(\"Mature the block.\")\n-        test = TestInstance(sync_every_block=False)\n-        for i in range(100):\n-            block = create_block(self.tip, create_coinbase(height), self.block_time)\n-            block.solve()\n-            self.tip = block.sha256\n-            self.block_time += 1\n-            test.blocks_and_transactions.append([block, True])\n-            height += 1\n-        yield test\n+        self.nodes[0].generate(100)\n \n         # b'\\x64' is OP_NOTIF\n         # Transaction will be rejected with code 16 (REJECT_INVALID)\n-        tx1 = create_transaction(self.block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n-        yield TestInstance([[tx1, RejectResult(16, b'mandatory-script-verify-flag-failed')]])\n+        tx1 = create_transaction(block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n+        node.p2p.send_txs_and_test([tx1], node, False, 16, b'mandatory-script-verify-flag-failed (Invalid OP_IF construction)')",
    "path": "test/functional/invalidtxrequest.py",
    "position": null,
    "original_position": 71,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "1c5aa93034a7ad213727ffdfb1bb71eab20f1f80",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Change invalidtxrequest to use BitcoinTestFramework\"\r\n\r\nMaybe add `success=`, `reject_code=`, keywords for future proofing and clarity.",
    "created_at": "2017-12-19T20:01:31Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157860702",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157860702"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157860702"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157860702/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158123643",
    "pull_request_review_id": 84882686,
    "id": 158123643,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODEyMzY0Mw==",
    "diff_hunk": "@@ -8,55 +8,46 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start\n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.mininode import network_thread_start, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n \n-class InvalidTxRequestTest(ComparisonTestFramework):\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time()) + 1\n+        tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        block_time = int(time.time()) + 1",
    "path": "test/functional/invalidtxrequest.py",
    "position": null,
    "original_position": 36,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "1c5aa93034a7ad213727ffdfb1bb71eab20f1f80",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Change invalidtxrequest to use BitcoinTestFramework\"\r\n\r\nCould maybe switch from time.time() to best_block[\"time\"] to be consistent with invalidblockrequest change in #11172. It seems better in a test environment, to be using information from the environment instead of calling out to the OS.",
    "created_at": "2017-12-20T20:07:43Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r158123643",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158123643"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r158123643"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158123643/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 31,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162058516",
    "pull_request_review_id": 89449917,
    "id": 162058516,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjA1ODUxNg==",
    "diff_hunk": "@@ -32,13 +28,10 @@ def run_test(self):\n         test.run()\n \n     def get_tests(self):\n-        if self.tip is None:",
    "path": "test/functional/invalidtxrequest.py",
    "position": null,
    "original_position": 32,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "534e6092b4bbb544587c743bc03f855799593df9",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`self.tip` is set to `None` in `run_test()` and then `run()` is called, which calls `get_tests()`, so `self.tip` has to be `None` at this point.\r\n\r\nSo yes, this isn't strictly fixing a flake8 warning, but it's a safe tidy-up which is removed in the next commit.",
    "created_at": "2018-01-17T14:05:37Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162058516",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162058516"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162058516"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162058516/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 35,
    "side": "LEFT",
    "in_reply_to_id": 157858302
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162422447",
    "pull_request_review_id": 89877438,
    "id": 162422447,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQyMjQ0Nw==",
    "diff_hunk": "@@ -8,55 +8,46 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start\n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.mininode import network_thread_start, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n \n-class InvalidTxRequestTest(ComparisonTestFramework):\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time()) + 1\n+        tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)",
    "path": "test/functional/invalidtxrequest.py",
    "position": null,
    "original_position": 35,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "1c5aa93034a7ad213727ffdfb1bb71eab20f1f80",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "agree. That's better",
    "created_at": "2018-01-18T18:01:46Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162422447",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162422447"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162422447"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162422447/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT",
    "in_reply_to_id": 157859689
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162422751",
    "pull_request_review_id": 89877797,
    "id": 162422751,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQyMjc1MQ==",
    "diff_hunk": "@@ -8,55 +8,46 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start\n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.mininode import network_thread_start, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n \n-class InvalidTxRequestTest(ComparisonTestFramework):\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time()) + 1\n+        tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        block_time = int(time.time()) + 1\n \n         self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n         block.solve()\n         # Save the coinbase for later\n-        self.block1 = block\n-        self.tip = block.sha256\n+        block1 = block\n+        tip = block.sha256\n         height += 1\n-        yield TestInstance([[block, True]])\n+        node.p2p.send_blocks_and_test([block], node, True)",
    "path": "test/functional/invalidtxrequest.py",
    "position": null,
    "original_position": 52,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "1c5aa93034a7ad213727ffdfb1bb71eab20f1f80",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "yes",
    "created_at": "2018-01-18T18:03:02Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162422751",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162422751"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162422751"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162422751/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 42,
    "side": "RIGHT",
    "in_reply_to_id": 157860199
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162424116",
    "pull_request_review_id": 89879272,
    "id": 162424116,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQyNDExNg==",
    "diff_hunk": "@@ -8,55 +8,46 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start\n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.mininode import network_thread_start, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n \n-class InvalidTxRequestTest(ComparisonTestFramework):\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time()) + 1\n+        tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        block_time = int(time.time()) + 1\n \n         self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n         block.solve()\n         # Save the coinbase for later\n-        self.block1 = block\n-        self.tip = block.sha256\n+        block1 = block\n+        tip = block.sha256\n         height += 1\n-        yield TestInstance([[block, True]])\n+        node.p2p.send_blocks_and_test([block], node, True)\n \n         self.log.info(\"Mature the block.\")\n-        test = TestInstance(sync_every_block=False)\n-        for i in range(100):\n-            block = create_block(self.tip, create_coinbase(height), self.block_time)\n-            block.solve()\n-            self.tip = block.sha256\n-            self.block_time += 1\n-            test.blocks_and_transactions.append([block, True])\n-            height += 1\n-        yield test\n+        self.nodes[0].generate(100)\n \n         # b'\\x64' is OP_NOTIF\n         # Transaction will be rejected with code 16 (REJECT_INVALID)\n-        tx1 = create_transaction(self.block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n-        yield TestInstance([[tx1, RejectResult(16, b'mandatory-script-verify-flag-failed')]])\n+        tx1 = create_transaction(block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n+        node.p2p.send_txs_and_test([tx1], node, False, 16, b'mandatory-script-verify-flag-failed (Invalid OP_IF construction)')",
    "path": "test/functional/invalidtxrequest.py",
    "position": null,
    "original_position": 71,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "1c5aa93034a7ad213727ffdfb1bb71eab20f1f80",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "yes",
    "created_at": "2018-01-18T18:07:55Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162424116",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162424116"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162424116"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162424116/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT",
    "in_reply_to_id": 157860702
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162424146",
    "pull_request_review_id": 89879316,
    "id": 162424146,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQyNDE0Ng==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 42,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ok, changed to `P2PDataStore`",
    "created_at": "2018-01-18T18:08:04Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162424146",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162424146"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162424146"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162424146/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 458,
    "side": "RIGHT",
    "in_reply_to_id": 157859281
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162458575",
    "pull_request_review_id": 89920463,
    "id": 162458575,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ1ODU3NQ==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 51,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "yes - makes more sense.",
    "created_at": "2018-01-18T20:21:36Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162458575",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162458575"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162458575"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162458575/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 467,
    "side": "RIGHT",
    "in_reply_to_id": 157851175
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162458847",
    "pull_request_review_id": 89920801,
    "id": 162458847,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ1ODg0Nw==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 51,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "added",
    "created_at": "2018-01-18T20:22:44Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162458847",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162458847"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162458847"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162458847/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 467,
    "side": "RIGHT",
    "in_reply_to_id": 157851682
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162458865",
    "pull_request_review_id": 89920822,
    "id": 162458865,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ1ODg2NQ==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 52,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "added",
    "created_at": "2018-01-18T20:22:49Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162458865",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162458865"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162458865"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162458865/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 471,
    "side": "RIGHT",
    "in_reply_to_id": 157851969
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461080",
    "pull_request_review_id": 89923458,
    "id": 162461080,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ2MTA4MA==",
    "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 64,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "taken @ryanofsky's suggested change",
    "created_at": "2018-01-18T20:32:09Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162461080",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461080"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162461080"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461080/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 480,
    "side": "RIGHT",
    "in_reply_to_id": 156986892
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461207",
    "pull_request_review_id": 89923605,
    "id": 162461207,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ2MTIwNw==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 72,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "indeed",
    "created_at": "2018-01-18T20:32:46Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162461207",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461207"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162461207"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461207/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 488,
    "side": "RIGHT",
    "in_reply_to_id": 157846565
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461266",
    "pull_request_review_id": 89923672,
    "id": 162461266,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ2MTI2Ng==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 79,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "removed",
    "created_at": "2018-01-18T20:33:01Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162461266",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461266"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162461266"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461266/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 495,
    "side": "RIGHT",
    "in_reply_to_id": 157846703
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461717",
    "pull_request_review_id": 89924170,
    "id": 162461717,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ2MTcxNw==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[0].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.insert(0, prev_block_header)",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 85,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "changed",
    "created_at": "2018-01-18T20:34:44Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162461717",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461717"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162461717"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461717/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 501,
    "side": "RIGHT",
    "in_reply_to_id": 157848246
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162465832",
    "pull_request_review_id": 89928956,
    "id": 162465832,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ2NTgzMg==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[0].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.insert(0, prev_block_header)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:maxheaders]\n+        hash_list = [x.sha256 for x in headers_list]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headers_list)\n+        if (hash_stop in hash_list):",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 95,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "yes. This code was copied from an blockstore.py. I've tidied up as you've suggested.",
    "created_at": "2018-01-18T20:51:34Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162465832",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162465832"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162465832"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162465832/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 511,
    "side": "RIGHT",
    "in_reply_to_id": 157853684
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162467440",
    "pull_request_review_id": 89930823,
    "id": 162467440,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ2NzQ0MA==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[0].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.insert(0, prev_block_header)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:maxheaders]\n+        hash_list = [x.sha256 for x in headers_list]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headers_list)\n+        if (hash_stop in hash_list):\n+            index = hash_list.index(hash_stop) + 1\n+        response.headers = headers_list[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 124,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "added mininode_lock. I don't think the assert is necessary - we may wish to send the same block over the same P2P interface more than once.",
    "created_at": "2018-01-18T20:58:10Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162467440",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162467440"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162467440"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162467440/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 540,
    "side": "RIGHT",
    "in_reply_to_id": 157849606
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162467464",
    "pull_request_review_id": 89930849,
    "id": 162467464,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ2NzQ2NA==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[0].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.insert(0, prev_block_header)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:maxheaders]\n+        hash_list = [x.sha256 for x in headers_list]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headers_list)\n+        if (hash_stop in hash_list):\n+            index = hash_list.index(hash_stop) + 1\n+        response.headers = headers_list[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+\n+        if reject_code is not None:\n+            wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+        if reject_reason is not None:\n+            wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for tx in txs:\n+            self.tx_store[tx.sha256] = tx",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 155,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "added",
    "created_at": "2018-01-18T20:58:14Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162467464",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162467464"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162467464"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162467464/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 571,
    "side": "RIGHT",
    "in_reply_to_id": 157855530
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162469069",
    "pull_request_review_id": 89932830,
    "id": 162469069,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ2OTA2OQ==",
    "diff_hunk": "@@ -8,55 +8,46 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start\n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.mininode import network_thread_start, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n \n-class InvalidTxRequestTest(ComparisonTestFramework):\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time()) + 1\n+        tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        block_time = int(time.time()) + 1",
    "path": "test/functional/invalidtxrequest.py",
    "position": null,
    "original_position": 36,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "1c5aa93034a7ad213727ffdfb1bb71eab20f1f80",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, good idea",
    "created_at": "2018-01-18T21:04:51Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162469069",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162469069"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162469069"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162469069/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 31,
    "side": "RIGHT",
    "in_reply_to_id": 158123643
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163369999",
    "pull_request_review_id": 90972937,
    "id": 163369999,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzM2OTk5OQ==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+        current_block_header = self.last_block_hash\n+\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is gthe hashstop header, stop here",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 84,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "b987a946aeb8983ef176f41cabbcd55290e3c1f5",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "[tests] Add P2PDataStore class\r\n\r\nTypo \"gthe\"",
    "created_at": "2018-01-23T20:39:34Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163369999",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163369999"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163369999"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163369999/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 503,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163377563",
    "pull_request_review_id": 90981886,
    "id": 163377563,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzM3NzU2Mw==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+        current_block_header = self.last_block_hash\n+\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is gthe hashstop header, stop here",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 84,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "b987a946aeb8983ef176f41cabbcd55290e3c1f5",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed",
    "created_at": "2018-01-23T21:09:45Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163377563",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163377563"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163377563"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163377563/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 503,
    "side": "RIGHT",
    "in_reply_to_id": 163369999
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163599441",
    "pull_request_review_id": 91237918,
    "id": 163599441,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzU5OTQ0MQ==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+        current_block_header = self.last_block_hash\n+\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 85,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "c9772a83644e3c212d87dd0866384533054923a0",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "the type is already a hash (i.e. int)\r\n```\r\nAttributeError: 'int' object has no attribute 'sha256'",
    "created_at": "2018-01-24T16:24:33Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163599441",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163599441"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163599441"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163599441/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 496,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163603978",
    "pull_request_review_id": 91243444,
    "id": 163603978,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzYwMzk3OA==",
    "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+        current_block_header = self.last_block_hash\n+\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 85,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "c9772a83644e3c212d87dd0866384533054923a0",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks Marco. This was a bug introduced when changing from an orderedDict to just storing the last_block_hash in the P2PDataStore class. Only hit on travis because of a timing window.\r\n\r\nThis is now fixed.",
    "created_at": "2018-01-24T16:38:51Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163603978",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163603978"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163603978"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163603978/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 496,
    "side": "RIGHT",
    "in_reply_to_id": 163599441
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163703787",
    "pull_request_review_id": 91360476,
    "id": 163703787,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzcwMzc4Nw==",
    "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 98,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "949074892393a683f4f56e1a162ec1397563e153",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This will send the headers in the opposite order of what the protocol requires?",
    "created_at": "2018-01-24T22:52:12Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163703787",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163703787"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163703787"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163703787/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 511,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163703992",
    "pull_request_review_id": 91360713,
    "id": 163703992,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzcwMzk5Mg==",
    "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:",
    "path": "test/functional/test_framework/mininode.py",
    "position": 104,
    "original_position": 101,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "949074892393a683f4f56e1a162ec1397563e153",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't see how this could be None",
    "created_at": "2018-01-24T22:53:08Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163703992",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163703992"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163703992"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163703992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 514,
    "original_line": 514,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163704370",
    "pull_request_review_id": 91361173,
    "id": 163704370,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzcwNDM3MA==",
    "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:",
    "path": "test/functional/test_framework/mininode.py",
    "position": 104,
    "original_position": 101,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "949074892393a683f4f56e1a162ec1397563e153",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Couldn't you use the existing blockstore code? I know that for the purpose of this test saving blocks to disk twice is overkill, but by reducing the code and diff, wouldn't that be preferable?",
    "created_at": "2018-01-24T22:55:10Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163704370",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163704370"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163704370"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163704370/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 514,
    "original_line": 514,
    "side": "RIGHT",
    "in_reply_to_id": 163703992
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163717494",
    "pull_request_review_id": 91376023,
    "id": 163717494,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzcxNzQ5NA==",
    "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:",
    "path": "test/functional/test_framework/mininode.py",
    "position": 104,
    "original_position": 101,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "949074892393a683f4f56e1a162ec1397563e153",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is just ported directly from `on_getheaders()` in comptool.py (which calls into `headers_for()` in blockstore.py).\r\n\r\nYou're right that this could never be `None`. That was the case before in the original code. I could fix this here (which would make the logical diff from the existing code bigger), or fix it in a follow-up PR.",
    "created_at": "2018-01-25T00:08:53Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163717494",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163717494"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163717494"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163717494/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 514,
    "original_line": 514,
    "side": "RIGHT",
    "in_reply_to_id": 163703992
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163717972",
    "pull_request_review_id": 91376578,
    "id": 163717972,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzcxNzk3Mg==",
    "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]",
    "path": "test/functional/test_framework/mininode.py",
    "position": null,
    "original_position": 98,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "949074892393a683f4f56e1a162ec1397563e153",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is the same as the existing blockstore.py code. In that code, the headers were inserted at the front of the list and then a msg_headers was constructed. In this version we append the headers at the end of the list and then reverse the order before constructing the msg_headers.",
    "created_at": "2018-01-25T00:12:04Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163717972",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163717972"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163717972"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163717972/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 511,
    "side": "RIGHT",
    "in_reply_to_id": 163703787
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164586641",
    "pull_request_review_id": 92382585,
    "id": 164586641,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDU4NjY0MQ==",
    "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))",
    "path": "test/functional/test_framework/mininode.py",
    "position": 71,
    "original_position": 71,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "e4a1b3bf7ef90afbd5cd5e957f36f22631fd5fb7",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Minor thought for debuggability: is it conceivable there's a case for which an `else:` clause that logs an unexpected message type might come in handy? ",
    "created_at": "2018-01-29T22:34:05Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164586641",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164586641"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164586641"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164586641/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 481,
    "original_line": 481,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164586814",
    "pull_request_review_id": 92382585,
    "id": 164586814,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDU4NjgxNA==",
    "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:",
    "path": "test/functional/test_framework/mininode.py",
    "position": 96,
    "original_position": 94,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "e4a1b3bf7ef90afbd5cd5e957f36f22631fd5fb7",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Worth logging some indication of a miss?",
    "created_at": "2018-01-29T22:34:56Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164586814",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164586814"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164586814"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164586814/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 506,
    "original_line": 506,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164589777",
    "pull_request_review_id": 92382585,
    "id": 164589777,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDU4OTc3Nw==",
    "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+\n+        if reject_code is not None:\n+            wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+        if reject_reason is not None:\n+            wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for tx in txs:\n+                self.tx_store[tx.sha256] = tx\n+\n+        for tx in txs:\n+            self.send_message(msg_tx(tx))\n+\n+        self.sync_with_ping()\n+\n+        raw_mempool = rpc.getrawmempool()\n+        if success:\n+            # Check that all txs are now in the mempool\n+            for tx in txs:\n+                assert tx.hash in raw_mempool, \"{} not found in mempool\".format(tx.hash)",
    "path": "test/functional/test_framework/mininode.py",
    "position": 172,
    "original_position": 169,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "e4a1b3bf7ef90afbd5cd5e957f36f22631fd5fb7",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I've found f strings convenient (`f'{tx.hash} not found in mempool'`) but that's personal preference.",
    "created_at": "2018-01-29T22:48:16Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164589777",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164589777"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164589777"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164589777/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 582,
    "original_line": 582,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164590810",
    "pull_request_review_id": 92387395,
    "id": 164590810,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDU5MDgxMA==",
    "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+\n+        if reject_code is not None:\n+            wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+        if reject_reason is not None:\n+            wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for tx in txs:\n+                self.tx_store[tx.sha256] = tx\n+\n+        for tx in txs:\n+            self.send_message(msg_tx(tx))\n+\n+        self.sync_with_ping()\n+\n+        raw_mempool = rpc.getrawmempool()\n+        if success:\n+            # Check that all txs are now in the mempool\n+            for tx in txs:\n+                assert tx.hash in raw_mempool, \"{} not found in mempool\".format(tx.hash)",
    "path": "test/functional/test_framework/mininode.py",
    "position": 172,
    "original_position": 169,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "e4a1b3bf7ef90afbd5cd5e957f36f22631fd5fb7",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I also like f strings, but they're new in v3.6, and we support older Python versions than that (back to v3.4 at least).",
    "created_at": "2018-01-29T22:53:32Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164590810",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164590810"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164590810"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164590810/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 582,
    "original_line": 582,
    "side": "RIGHT",
    "in_reply_to_id": 164589777
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164591418",
    "pull_request_review_id": 92388159,
    "id": 164591418,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDU5MTQxOA==",
    "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+\n+        if reject_code is not None:\n+            wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+        if reject_reason is not None:\n+            wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for tx in txs:\n+                self.tx_store[tx.sha256] = tx\n+\n+        for tx in txs:\n+            self.send_message(msg_tx(tx))\n+\n+        self.sync_with_ping()\n+\n+        raw_mempool = rpc.getrawmempool()\n+        if success:\n+            # Check that all txs are now in the mempool\n+            for tx in txs:\n+                assert tx.hash in raw_mempool, \"{} not found in mempool\".format(tx.hash)",
    "path": "test/functional/test_framework/mininode.py",
    "position": 172,
    "original_position": 169,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "e4a1b3bf7ef90afbd5cd5e957f36f22631fd5fb7",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah, makes sense.",
    "created_at": "2018-01-29T22:56:42Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164591418",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164591418"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164591418"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164591418/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 582,
    "original_line": 582,
    "side": "RIGHT",
    "in_reply_to_id": 164589777
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164599000",
    "pull_request_review_id": 92396793,
    "id": 164599000,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDU5OTAwMA==",
    "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))",
    "path": "test/functional/test_framework/mininode.py",
    "position": 71,
    "original_position": 71,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "e4a1b3bf7ef90afbd5cd5e957f36f22631fd5fb7",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "added logging",
    "created_at": "2018-01-29T23:34:00Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164599000",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164599000"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164599000"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164599000/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 481,
    "original_line": 481,
    "side": "RIGHT",
    "in_reply_to_id": 164586641
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164599019",
    "pull_request_review_id": 92396816,
    "id": 164599019,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDU5OTAxOQ==",
    "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:",
    "path": "test/functional/test_framework/mininode.py",
    "position": 96,
    "original_position": 94,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "e4a1b3bf7ef90afbd5cd5e957f36f22631fd5fb7",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "added logging",
    "created_at": "2018-01-29T23:34:07Z",
    "updated_at": "2018-01-30T14:31:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164599019",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164599019"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164599019"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164599019/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 506,
    "original_line": 506,
    "side": "RIGHT",
    "in_reply_to_id": 164586814
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167710791",
    "pull_request_review_id": 95969920,
    "id": 167710791,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzcxMDc5MQ==",
    "diff_hunk": "@@ -4,68 +4,50 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node responses to invalid transactions.\n \n-In this test we connect to one node over p2p, and test tx requests.\n-\"\"\"\n+In this test we connect to one node over p2p, and test tx requests.\"\"\"\n+from test_framework.blocktools import create_block, create_coinbase, create_transaction\n+from test_framework.messages import COIN\n+from test_framework.mininode import network_thread_start, P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n \n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.blocktools import *\n-import time\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n-\n-\n-# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n-class InvalidTxRequestTest(ComparisonTestFramework):\n-\n-    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n-        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PDataStore())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        if self.tip is None:\n-            self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time())+1\n+        best_block = self.nodes[0].getbestblockhash()\n+        tip = int(best_block, 16)\n+        best_block_time = self.nodes[0].getblock(best_block)['time']\n+        block_time = best_block_time + 1\n \n-        '''\n-        Create a new block with an anyone-can-spend coinbase\n-        '''\n+        self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1",
    "path": "test/functional/p2p_invalid_tx.py",
    "position": 60,
    "original_position": 60,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "user": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This line can be removed. `block_time` is never used again. ",
    "created_at": "2018-02-12T22:44:32Z",
    "updated_at": "2018-02-12T22:44:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r167710791",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167710791"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r167710791"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167710791/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 36,
    "original_line": 36,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167710892",
    "pull_request_review_id": 95970049,
    "id": 167710892,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzcxMDg5Mg==",
    "diff_hunk": "@@ -4,68 +4,50 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node responses to invalid transactions.\n \n-In this test we connect to one node over p2p, and test tx requests.\n-\"\"\"\n+In this test we connect to one node over p2p, and test tx requests.\"\"\"\n+from test_framework.blocktools import create_block, create_coinbase, create_transaction\n+from test_framework.messages import COIN\n+from test_framework.mininode import network_thread_start, P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n \n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.blocktools import *\n-import time\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n-\n-\n-# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n-class InvalidTxRequestTest(ComparisonTestFramework):\n-\n-    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n-        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PDataStore())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        if self.tip is None:\n-            self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time())+1\n+        best_block = self.nodes[0].getbestblockhash()\n+        tip = int(best_block, 16)\n+        best_block_time = self.nodes[0].getblock(best_block)['time']\n+        block_time = best_block_time + 1\n \n-        '''\n-        Create a new block with an anyone-can-spend coinbase\n-        '''\n+        self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n         block.solve()\n         # Save the coinbase for later\n-        self.block1 = block\n-        self.tip = block.sha256\n+        block1 = block\n+        tip = block.sha256\n         height += 1",
    "path": "test/functional/p2p_invalid_tx.py",
    "position": 67,
    "original_position": 67,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "user": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This line can also be removed. `height` is never used again. ",
    "created_at": "2018-02-12T22:45:00Z",
    "updated_at": "2018-02-12T22:45:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r167710892",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167710892"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r167710892"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167710892/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 41,
    "original_line": 41,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167718956",
    "pull_request_review_id": 95979452,
    "id": 167718956,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzcxODk1Ng==",
    "diff_hunk": "@@ -4,68 +4,50 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node responses to invalid transactions.\n \n-In this test we connect to one node over p2p, and test tx requests.\n-\"\"\"\n+In this test we connect to one node over p2p, and test tx requests.\"\"\"\n+from test_framework.blocktools import create_block, create_coinbase, create_transaction\n+from test_framework.messages import COIN\n+from test_framework.mininode import network_thread_start, P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n \n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.blocktools import *\n-import time\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n-\n-\n-# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n-class InvalidTxRequestTest(ComparisonTestFramework):\n-\n-    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n-        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PDataStore())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        if self.tip is None:\n-            self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time())+1\n+        best_block = self.nodes[0].getbestblockhash()\n+        tip = int(best_block, 16)\n+        best_block_time = self.nodes[0].getblock(best_block)['time']\n+        block_time = best_block_time + 1\n \n-        '''\n-        Create a new block with an anyone-can-spend coinbase\n-        '''\n+        self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n         block.solve()\n         # Save the coinbase for later\n-        self.block1 = block\n-        self.tip = block.sha256\n+        block1 = block\n+        tip = block.sha256\n         height += 1\n-        yield TestInstance([[block, True]])\n+        node.p2p.send_blocks_and_test([block], node, success=True)\n \n-        '''\n-        Now we need that block to mature so we can spend the coinbase.\n-        '''\n-        test = TestInstance(sync_every_block=False)\n-        for i in range(100):\n-            block = create_block(self.tip, create_coinbase(height), self.block_time)\n-            block.solve()\n-            self.tip = block.sha256\n-            self.block_time += 1\n-            test.blocks_and_transactions.append([block, True])\n-            height += 1\n-        yield test\n+        self.log.info(\"Mature the block.\")\n+        self.nodes[0].generate(100)\n \n         # b'\\x64' is OP_NOTIF\n         # Transaction will be rejected with code 16 (REJECT_INVALID)\n-        tx1 = create_transaction(self.block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n-        yield TestInstance([[tx1, RejectResult(16, b'mandatory-script-verify-flag-failed')]])\n+        tx1 = create_transaction(block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n+        node.p2p.send_txs_and_test([tx1], node, success=False, reject_code=16, reject_reason=b'mandatory-script-verify-flag-failed (Invalid OP_IF construction)')",
    "path": "test/functional/p2p_invalid_tx.py",
    "position": 91,
    "original_position": 91,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "user": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`send_txs_and_test` is created in this PR, but I do not see it being called with `sucess=True` in any PRs mentioned in #10603 \r\n\r\nDoes it make sense to also send a valid transaction in this code block as well, to verify that codepath? ",
    "created_at": "2018-02-12T23:24:47Z",
    "updated_at": "2018-02-12T23:24:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r167718956",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167718956"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r167718956"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167718956/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 50,
    "original_line": 50,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174269247",
    "pull_request_review_id": 103594904,
    "id": 174269247,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDI2OTI0Nw==",
    "diff_hunk": "@@ -440,3 +454,138 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+            else:\n+                logger.debug('getdata message type {} received.'.format(hex(inv.type)))",
    "path": "test/functional/test_framework/mininode.py",
    "position": 73,
    "original_position": 73,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could be removed. This is already done by `P2PConnection._log_message`.",
    "created_at": "2018-03-13T20:14:28Z",
    "updated_at": "2018-03-13T20:25:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r174269247",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174269247"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r174269247"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174269247/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 483,
    "original_line": 483,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174269362",
    "pull_request_review_id": 103594904,
    "id": 174269362,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDI2OTM2Mg==",
    "diff_hunk": "@@ -440,3 +454,138 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+            else:\n+                logger.debug('getdata message type {} received.'.format(hex(inv.type)))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                logger.debug('block hash {} not found in block store'.format(hex(prev_block_hash)))\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:",
    "path": "test/functional/test_framework/mininode.py",
    "position": 104,
    "original_position": 104,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could be removed per my previous review.",
    "created_at": "2018-03-13T20:14:50Z",
    "updated_at": "2018-03-13T20:25:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r174269362",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174269362"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r174269362"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174269362/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 514,
    "original_line": 514,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174269574",
    "pull_request_review_id": 103594904,
    "id": 174269574,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDI2OTU3NA==",
    "diff_hunk": "@@ -440,3 +454,138 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+            else:\n+                logger.debug('getdata message type {} received.'.format(hex(inv.type)))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                logger.debug('block hash {} not found in block store'.format(hex(prev_block_hash)))\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+\n+        if reject_code is not None:\n+            wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+        if reject_reason is not None:\n+            wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool",
    "path": "test/functional/test_framework/mininode.py",
    "position": 153,
    "original_position": 153,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: Replace \"tx is\" with \"txs are\"",
    "created_at": "2018-03-13T20:15:41Z",
    "updated_at": "2018-03-13T20:25:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r174269574",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174269574"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r174269574"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174269574/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 563,
    "original_line": 563,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178179559",
    "pull_request_review_id": 108201503,
    "id": 178179559,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODE3OTU1OQ==",
    "diff_hunk": "@@ -440,3 +454,138 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+            else:\n+                logger.debug('getdata message type {} received.'.format(hex(inv.type)))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                logger.debug('block hash {} not found in block store'.format(hex(prev_block_hash)))\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+        self.send_message(msg_headers([blocks[-1]]))",
    "path": "test/functional/test_framework/mininode.py",
    "position": 132,
    "original_position": 132,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I can't find a reason why you are sending the full block in a headers message instead of just the header? If there is a reason, it should be documented, otherwise I'd suggest sending just the header.",
    "created_at": "2018-03-29T20:57:25Z",
    "updated_at": "2018-03-29T20:57:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r178179559",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178179559"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r178179559"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178179559/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 542,
    "original_line": 542,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178370087",
    "pull_request_review_id": 108425794,
    "id": 178370087,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODM3MDA4Nw==",
    "diff_hunk": "@@ -440,3 +454,138 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+            else:\n+                logger.debug('getdata message type {} received.'.format(hex(inv.type)))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                logger.debug('block hash {} not found in block store'.format(hex(prev_block_hash)))\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+        self.send_message(msg_headers([blocks[-1]]))",
    "path": "test/functional/test_framework/mininode.py",
    "position": 132,
    "original_position": 132,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, I agree - this should be changed to just be the header.",
    "created_at": "2018-03-30T20:21:12Z",
    "updated_at": "2018-03-30T20:21:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r178370087",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178370087"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r178370087"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178370087/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 542,
    "original_line": 542,
    "side": "RIGHT",
    "in_reply_to_id": 178179559
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178630570",
    "pull_request_review_id": 108718371,
    "id": 178630570,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODYzMDU3MA==",
    "diff_hunk": "@@ -440,3 +454,138 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+            else:\n+                logger.debug('getdata message type {} received.'.format(hex(inv.type)))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                logger.debug('block hash {} not found in block store'.format(hex(prev_block_hash)))\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+        self.send_message(msg_headers([blocks[-1]]))",
    "path": "test/functional/test_framework/mininode.py",
    "position": 132,
    "original_position": 132,
    "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "original_commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed in #12861",
    "created_at": "2018-04-02T19:45:03Z",
    "updated_at": "2018-04-02T19:45:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r178630570",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178630570"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r178630570"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178630570/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 542,
    "original_line": 542,
    "side": "RIGHT",
    "in_reply_to_id": 178179559
  }
]