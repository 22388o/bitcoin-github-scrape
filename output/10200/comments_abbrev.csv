gmaxwell,2017-04-14T20:27:42Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/10200#issuecomment-294230277,294230277,
luke-jr,2017-04-19T18:46:11Z,"Concept OK, not so sure about implementation. This seems to be all-or-nothing with regard to recent transactions - wouldn't you want to evaluate it as a gradient (eg, maybe it makes sense to include 29-second-old txs, but not newer)?",https://github.com/bitcoin/bitcoin/pull/10200#issuecomment-295386666,295386666,
gmaxwell,2017-04-20T00:42:41Z,"@luke-jr   You could go hog wild with multiple choices,  >X, >Y, >Z second old.. but if its tuned right it should pretty much always be choosing to exclude recent transactions, and the other alternative is just so that you don't regret your decisions when some bozo sends a very high fee transaction.   The marginal gain from more options is going to be pretty small compared to the block creation de",https://github.com/bitcoin/bitcoin/pull/10200#issuecomment-295515125,295515125,
luke-jr,2017-04-20T00:45:57Z,"I didn't mean more options, just that the algorithm could evaluate the age-cost/value initially when building the template rather than building the entire template twice. :)",https://github.com/bitcoin/bitcoin/pull/10200#issuecomment-295516333,295516333,
sdaftuar,2017-04-21T15:29:18Z,"> I didn't mean more options, just that the algorithm could evaluate the age-cost/value initially when building the template rather than building the entire template twice. :)\n\n@luke-jr  Well note that this implementation doesn't build the entire template twice; it copies the template, and throws out the recent transactions and rebuilds from there.\n\nIf I understand it right, I think it's h",https://github.com/bitcoin/bitcoin/pull/10200#issuecomment-296223025,296223025,
sdaftuar,2017-05-06T09:59:48Z,Rebased,https://github.com/bitcoin/bitcoin/pull/10200#issuecomment-299629274,299629274,
gmaxwell,2017-07-18T17:46:22Z,@sdaftuar Needs rebase soonish. Lets get this in after branching.,https://github.com/bitcoin/bitcoin/pull/10200#issuecomment-316141998,316141998,
sdaftuar,2017-08-16T19:11:13Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10200#issuecomment-322870496,322870496,
sdaftuar,2017-09-05T19:44:57Z,"Updated to address @ryanofsky's comments.  I think I managed to avoid a rebase due to test framework changes with a hacky change to the new test in this PR, but I can squash/rebase whenever reviewers are ready.",https://github.com/bitcoin/bitcoin/pull/10200#issuecomment-327282610,327282610,
sdaftuar,2017-10-05T17:02:37Z,"Not sure if/when I'll pick this up, so closing for now.",https://github.com/bitcoin/bitcoin/pull/10200#issuecomment-334528553,334528553,
ryanofsky,2017-10-05T17:32:26Z,"@sdaftuar, I'd volunteer to periodically rebase this & respond to review comments if that's the only thing holding this back.",https://github.com/bitcoin/bitcoin/pull/10200#issuecomment-334536485,334536485,
TheBlueMatt,2017-10-05T21:55:55Z,"I would also like to see this one happen, sorry I've been lax on review, too many PRs :(.",https://github.com/bitcoin/bitcoin/pull/10200#issuecomment-334603232,334603232,
sdaftuar,2017-10-13T19:20:35Z,"@ryanofsky gmaxwell made a good suggestion on IRC recently for simplifying the feature/functionality provided here.  If I remember right, I think he suggested that we could just keep a cache of the last block generated in the BlockAssembler, and when a new call to CNB is made, after we addPackages, but before we call TBV, check to see if this criteria for recent transactions has been met -- if not",https://github.com/bitcoin/bitcoin/pull/10200#issuecomment-336544515,336544515,
naumenkogs,2019-07-11T18:07:03Z,"According to my simulation(see [source code](https://github.com/naumenkogs/bitcoin_network_analysis/tree/master/propagation_cmpct_blocks)), current strategy (assuming that only coinbase tx is missing) works almost perfect (0.2 RTT or 10% overhead comparing to the best case (relaying empty block), in terms of end-to-end compact block relay between two random private nodes in the network).\n\nErla",https://github.com/bitcoin/bitcoin/pull/10200#issuecomment-510593304,510593304,
luke-jr,2017-04-19T18:46:46Z,"How does this differ from the default copy constructor?\n",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r112284136,112284136,src/miner.h
sdaftuar,2017-04-20T16:41:02Z,"Apparently it doesn't (I was confused by whether a CBlock could be copy-constructed from another CBlock).  Will remove.\n\nRemoved in dfd4e73c97818eb57bdf9e34a9085904a5250a92",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r112501675,112501675,src/miner.h
ryanofsky,2017-06-09T18:11:40Z,"In commit ""Eliminate unnecessary call to UpdatePackagesForAdded""\n\nNote: reason this call is not needed is that resetBlock is called right before addPackageTxs, so inBlock will be empty.",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r121189676,121189676,src/miner.cpp
ryanofsky,2017-06-09T18:13:33Z,"In commit ""Move mapModifiedTx outside of addPackageTxs""\n\nNote: Reason for the move is to be able to reuse mapModifiedTx when a second\n`addPackageTxs` call is added later (to refill the block after removing recent transactions).",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r121190072,121190072,src/miner.cpp
ryanofsky,2017-06-09T18:15:49Z,"In commit ""Encapsulate working state for a single call to CNB""\n\nNote: Reason for moving state to this struct is to be able to make a second `addPackageTxs()` call in a later commit without losing the state of the first call.",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r121190582,121190582,src/miner.h
ryanofsky,2017-06-09T18:36:47Z,"In commit ""Mining: Add not-yet-used option to avoid recent transactions""\n\nI think it might be slightly better to do `|| mi->GetTime() > nTimeCutoff` here instead of modifying `SkipMapTxEntry`, both for consistency with the `mapModifiedTx` check below, and because `SkipMapTxEntry` is already a pretty overloaded function with a paragraph of text describing it, so it's not like it  needs another ",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r121195068,121195068,src/miner.cpp
ryanofsky,2017-06-09T18:46:04Z,"In commit ""Add helper to remove transactions from block""\n\nStrictly speaking `<` should probably be `<=` to be consistent with the addPackageTxs and SkipMapTxEntry code also applying the cutoff.\n\n(Update: fixed in new version of PR)",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r121197115,121197115,src/miner.cpp
ryanofsky,2017-06-09T18:56:47Z,"In commit ""Add helper to remove transactions from block\n\nMaybe should be called ""removed"" rather than ""skipped"" for consistency with the function name (especially since this gets exposed in the next commit).\n\n(Update: variable is removed in new version of PR)",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r121199430,121199430,src/miner.cpp
ryanofsky,2017-06-09T19:13:34Z,"In commit ""Skip recent transactions in CNB if fee difference is small""\n\nCould you add a comment explaining why this skips updating `mapModifiedTx` entries of transactions that were removed? I'm probably misunderstanding something, but It seems like if you skip those, you won't be updating any `mapModifiedTx` entries at all, because `RemoveRecentTransactionsFromBlock` also removes descendants.",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r121202679,121202679,src/miner.cpp
ryanofsky,2017-06-09T19:20:29Z,"In commit ""Skip recent transactions in CNB if fee difference is small""\n\nIt seems like this will always log information about the noRecent block even if it wasn't the winner. Maybe move nPackagesSelected and nDescendantsUpdated variables into the state struct to keep separate copies of them and print them here. (This would also cut down on the number of arguments you need to pass to addPackageT",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r121203897,121203897,src/miner.cpp
ryanofsky,2017-06-09T19:35:45Z,"In commit ""Mining: configure 'recency' and 'stale rate' from command line""\n\nI would maybe say ""if a recently received transaction were included"" instead of ""given that a recently received transaction was included."" It doesn't seem like ""given"" is right here in the probabilistic sense.",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r121206593,121206593,src/init.cpp
ryanofsky,2017-06-09T19:49:09Z,"In commit ""Add functional test for CreateNewBlock""\n\nCould go with `for extra_arg, cnb_arg in zip(extra_args, self.cnb_args):` to shorten code below and avoid hardcoded 3.",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r121208973,121208973,test/functional/mining.py
ryanofsky,2017-06-09T19:54:09Z,"In commit ""Add functional test for CreateNewBlock""\n\nancestor_size unused",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r121209822,121209822,test/functional/mining.py
ryanofsky,2017-06-09T20:02:28Z,"In commit ""Add functional test for CreateNewBlock""\n\nCould move comment down closer to -blockmaxweight setting.",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r121211261,121211261,test/functional/mining.py
ryanofsky,2017-06-09T20:03:14Z,"In commit ""Add functional test for CreateNewBlock""\n\nSome of the comments on top these python functions could be made into docstrings.",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r121211402,121211402,test/functional/mining.py
ryanofsky,2017-06-09T20:05:00Z,"In commit ""Add functional test for CreateNewBlock""\n\n`i` should be `0` here I think",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r121211706,121211706,test/functional/mining.py
ryanofsky,2017-06-09T20:10:21Z,"In commit ""Add functional test for CreateNewBlock""\n\nassert isn't really a function call in python, so the parentheses aren't needed. Also asserts are skipped if python is running with optimizations (`-O`), so maybe prefer to use one of the test framework assert functions.\n\nAlso lots of if statements in this test with extra parentheses.",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r121212644,121212644,test/functional/mining.py
ryanofsky,2017-06-09T20:18:50Z,"In commit ""Add functional test for CreateNewBlock""\n\nI guess it's too late for the prioritize spelling to catch on in bitcoin.",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r121214104,121214104,test/functional/mining.py
ryanofsky,2017-06-09T20:20:25Z,"In commit ""Add functional test for CreateNewBlock""\n\nCan use `//` operator for integer division in python",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r121214405,121214405,test/functional/mining.py
ryanofsky,2017-06-09T20:41:37Z,"In commit ""Add functional test for CreateNewBlock""\n\nMaybe spell this out a little more. It seems like the point of setting fees to 0 is to force gbt to generate and return the `noRecent` block which lost the competition against the recent block. But if the `noRecent` block currently includes these ancestor transactions, then why set their fees to 0 here?",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r121218426,121218426,test/functional/mining.py
sdaftuar,2017-08-15T20:57:02Z,"FYI I've reworked this code in the latest version, combining the removal of transactions and updating `mapModifiedTx`, as this was needlessly inefficient (with an extra call to `CalculateDescendants`).\n\nBut to answer your question: `mapModifiedTx` contains transactions that are not in the constructed block which have ancestors that are in the block.  When we remove a transaction from the block",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r133301496,133301496,src/miner.cpp
sdaftuar,2017-08-15T20:59:41Z,"I think ""given"" is right in the probabilistic sense here; I think I do mean `P(stale block | block has recent tx)`.",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r133302141,133302141,src/init.cpp
sdaftuar,2017-08-16T19:11:01Z,"My thought was that `nPackagesSelected` and `nDescendantsUpdated` are mostly here to help parameterize the runtime, as we expect this to be slower the more packages are looked at and the more descendants that have to be walked to update scores.  \n\nI guess it can be a little confusing if someone might try to interpret this as the actual number of packages in the block, because that will be inco",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r133540494,133540494,src/miner.cpp
ryanofsky,2017-08-30T15:00:49Z,"In commit ""Encapsulate working state for a single call to CreateNewBlock()""\n\nMight be good to make these 4000/1000 values constants since they are used in other places.",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r136094399,136094399,src/miner.h
ryanofsky,2017-08-30T15:09:43Z,"In commit ""Encapsulate working state for a single call to CreateNewBlock()""\n\nLooks like AddToBlock, addPackageTxs, onlyUnconfirmed, TestPackageTransactions, SkipMapTxEntry, SortForBlock, and UpdatePackagesForAdded could all be const methods now.",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r136097428,136097428,src/miner.h
ryanofsky,2017-08-30T15:56:53Z,Makes sense. I don't actually remember what I meant in that comment.,https://github.com/bitcoin/bitcoin/pull/10200#discussion_r136112193,136112193,src/init.cpp
ryanofsky,2017-08-30T16:18:40Z,"In commit ""Skip recent transactions in CNB if fee difference is small""\n\nSince this isn't penalizing recent transactions yet, does this commit change behavior at all? Might be worth mentioning if it does in the commit message.",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r136118045,136118045,src/miner.cpp
ryanofsky,2017-08-30T17:50:17Z,"In commit ""Skip recent transactions in CNB if fee difference is small""\n\nShould this say older? Child having a newer arrival time sounds like the normal case.",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r136142314,136142314,src/miner.cpp
ryanofsky,2017-08-30T18:23:57Z,"In commit ""[qa] Add functional test for CreateNewBlock""\n\nDon't need to pass max_income and cur_time variables as arguments since they are already in scope.",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r136151439,136151439,test/functional/createnewblock.py
ryanofsky,2017-08-30T18:26:39Z,"In commit ""Mining: configure 'recency' and 'stale rate' from command line""\n\nShould convert milliseconds -> seconds?",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r136152186,136152186,src/miner.cpp
ryanofsky,2017-08-30T18:44:39Z,"In commit ""[qa] Add functional test for CreateNewBlock""\n\nCould you add a comment saying why it is right to treat node 3 income as max income. This seems like it would be correct if node 3 were started with `-recenttxwindow=0 -recenttxstalerate=0`, but nodes 0 & 2 have shorter recent window and stale rate values (respectively) than node 3.\n",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r136156848,136156848,test/functional/createnewblock.py
ryanofsky,2017-08-30T18:53:20Z,"In commit ""[qa] Add functional test for CreateNewBlock""\n\nCan you expand comment to say why the transaction should exactly one ancestor not in the block. I notice in the previous version of the test it was looking for a transaction with at least one ancestor not in the block.",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r136158939,136158939,test/functional/createnewblock.py
ryanofsky,2017-08-30T19:00:49Z,"In commit ""[qa] Add functional test for CreateNewBlock""\n\nDoes it make sense to warn if no block contains recent transactions?",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r136160667,136160667,test/functional/createnewblock.py
sdaftuar,2017-08-31T17:40:39Z,"Yeah that's worth explaining.  The issue was that if you got unlucky you might find a transaction with, eg, 2 ancestors, one in the block and one not in the block.  Then the ancestor feerate stats for the child tx would not be correct for determining how much to fee bump (eg you might be including some higher feerate parent in the calculation!) which could cause the test to fail.\n\nBy requiring",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r136400820,136400820,test/functional/createnewblock.py
sdaftuar,2017-08-31T18:05:09Z,"This does change behavior, both performance and there's some chance that you choose different transactions (eg if you get the same fees or higher by looking at only an older set of transactions, which is possible, eg if all the fees in the mempool were the same, or just by chance due to what ends up fitting in the block etc).",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r136407145,136407145,src/miner.cpp
sdaftuar,2017-09-05T17:17:09Z,"I made the functional tests default to having -recenttxstalerate=0, to avoid breakage of existing tests due to this new behavior (see the change to `test_node.py` in https://github.com/bitcoin/bitcoin/pull/10200/commits/72e2ab0378c2baa13b6f1e80b3adcc302787c367#diff-86294e5ae5283eebdd9f98d79007a0e1).  I can add a comment as well...",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r137058357,137058357,test/functional/createnewblock.py
sdaftuar,2017-09-05T19:42:01Z,Done in 97d439af0feb8b4ccc34e7226cd11a791393c93a,https://github.com/bitcoin/bitcoin/pull/10200#discussion_r137094068,137094068,src/miner.h
sdaftuar,2017-09-05T19:42:09Z,done,https://github.com/bitcoin/bitcoin/pull/10200#discussion_r137094100,137094100,src/miner.cpp
sdaftuar,2017-09-05T19:42:22Z,"Thanks, fixed.",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r137094149,137094149,src/miner.cpp
sdaftuar,2017-09-05T19:43:06Z,Fixed in 497ae4844922caf4e2244b847a5a63fd2d1a999a,https://github.com/bitcoin/bitcoin/pull/10200#discussion_r137094366,137094366,test/functional/createnewblock.py
sdaftuar,2017-09-05T19:43:14Z,Done in 497ae4844922caf4e2244b847a5a63fd2d1a999a,https://github.com/bitcoin/bitcoin/pull/10200#discussion_r137094398,137094398,test/functional/createnewblock.py
sdaftuar,2017-09-05T19:43:57Z,"Holding off on this one until after #11100, which I think will cause a rebase for this PR anyway.",https://github.com/bitcoin/bitcoin/pull/10200#discussion_r137094552,137094552,src/miner.h
