[
  {
    "sha": "9cea7e37158aa85119de2c81e93901da9e476ee5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2VhN2UzNzE1OGFhODUxMTlkZTJjODFlOTM5MDFkYTllNDc2ZWU1",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-04-12T14:55:57Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-08-16T15:47:04Z"
      },
      "message": "Eliminate unnecessary call to UpdatePackagesForAdded\n\nThis is unnecessary now that priority transaction selection is gone.",
      "tree": {
        "sha": "bfe36459d0644af29dc796d37855116e34f2a239",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfe36459d0644af29dc796d37855116e34f2a239"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9cea7e37158aa85119de2c81e93901da9e476ee5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cea7e37158aa85119de2c81e93901da9e476ee5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9cea7e37158aa85119de2c81e93901da9e476ee5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cea7e37158aa85119de2c81e93901da9e476ee5/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22e301a3d56dc9e6878380ee92c7d19ca43119d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22e301a3d56dc9e6878380ee92c7d19ca43119d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22e301a3d56dc9e6878380ee92c7d19ca43119d2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e0e93fd9cce28d7e5d8c156d85250f1e17847e46",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cea7e37158aa85119de2c81e93901da9e476ee5/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cea7e37158aa85119de2c81e93901da9e476ee5/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=9cea7e37158aa85119de2c81e93901da9e476ee5",
        "patch": "@@ -351,10 +351,6 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n     // Keep track of entries that failed inclusion, to avoid duplicate work\n     CTxMemPool::setEntries failedTx;\n \n-    // Start by adding all descendants of previously added txs to mapModifiedTx\n-    // and modifying them for their already included ancestors\n-    UpdatePackagesForAdded(inBlock, mapModifiedTx);\n-\n     CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n     CTxMemPool::txiter iter;\n "
      }
    ]
  },
  {
    "sha": "b9d26428cef7c5e687ac09d526acc27d53ce52e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWQyNjQyOGNlZjdjNWU2ODdhYzA5ZDUyNmFjYzI3ZDUzY2U1MmU3",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-04-12T14:57:01Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-08-16T15:47:04Z"
      },
      "message": "Move mapModifiedTx outside of addPackageTxs\n\nThis will allow the updated package scores to be reused in a second call to\naddPackageTxs that will be added later.",
      "tree": {
        "sha": "de22faaddbe805964caf2345d3446aa59e95f6c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de22faaddbe805964caf2345d3446aa59e95f6c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9d26428cef7c5e687ac09d526acc27d53ce52e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9d26428cef7c5e687ac09d526acc27d53ce52e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9d26428cef7c5e687ac09d526acc27d53ce52e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9d26428cef7c5e687ac09d526acc27d53ce52e7/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9cea7e37158aa85119de2c81e93901da9e476ee5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cea7e37158aa85119de2c81e93901da9e476ee5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9cea7e37158aa85119de2c81e93901da9e476ee5"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 10,
      "deletions": 7
    },
    "files": [
      {
        "sha": "e852357a5764551a83b368d8253b665dc8be0b07",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9d26428cef7c5e687ac09d526acc27d53ce52e7/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9d26428cef7c5e687ac09d526acc27d53ce52e7/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=b9d26428cef7c5e687ac09d526acc27d53ce52e7",
        "patch": "@@ -168,9 +168,13 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // transaction (which in most cases can be a no-op).\n     fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus()) && fMineWitnessTx;\n \n+    // mapModifiedTx will store sorted packages after they are modified\n+    // because some of their txs are already in the block\n+    indexed_modified_transaction_set mapModifiedTx;\n+\n     int nPackagesSelected = 0;\n     int nDescendantsUpdated = 0;\n-    addPackageTxs(nPackagesSelected, nDescendantsUpdated);\n+    addPackageTxs(nPackagesSelected, nDescendantsUpdated, mapModifiedTx);\n \n     int64_t nTime1 = GetTimeMicros();\n \n@@ -343,11 +347,8 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemP\n // Each time through the loop, we compare the best transaction in\n // mapModifiedTxs with the next transaction in the mempool to decide what\n // transaction package to work on next.\n-void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated)\n+void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated, indexed_modified_transaction_set &mapModifiedTx)\n {\n-    // mapModifiedTx will store sorted packages after they are modified\n-    // because some of their txs are already in the block\n-    indexed_modified_transaction_set mapModifiedTx;\n     // Keep track of entries that failed inclusion, to avoid duplicate work\n     CTxMemPool::setEntries failedTx;\n "
      },
      {
        "sha": "73d24e6a1f488c069eb21a14be9bb23e7a1f8afa",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9d26428cef7c5e687ac09d526acc27d53ce52e7/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9d26428cef7c5e687ac09d526acc27d53ce52e7/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=b9d26428cef7c5e687ac09d526acc27d53ce52e7",
        "patch": "@@ -180,8 +180,10 @@ class BlockAssembler\n     // Methods for how to add transactions to a block.\n     /** Add transactions based on feerate including unconfirmed ancestors\n       * Increments nPackagesSelected / nDescendantsUpdated with corresponding\n-      * statistics from the package selection (for logging statistics). */\n-    void addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated);\n+      * statistics from the package selection (for logging statistics).\n+     *  mapModifiedTx will track the updated ancestor feerate score of\n+     *  not-in-block transactions that have parents in the block */\n+    void addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated, indexed_modified_transaction_set &mapModifiedTx);\n \n     // helper functions for addPackageTxs()\n     /** Remove confirmed (inBlock) entries from given set */"
      }
    ]
  },
  {
    "sha": "86cf1386db813734b35a587ba02b650c0ec5fb9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmNmMTM4NmRiODEzNzM0YjM1YTU4N2JhMDJiNjUwYzBlYzVmYjlk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-03-02T17:16:27Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-08-16T17:07:34Z"
      },
      "message": "Encapsulate working state for a single call to CreateNewBlock()\n\nCreate block working state in CreateNewBlock(), and pass where needed.",
      "tree": {
        "sha": "20121164dbf82a152edf10506d27d37f29976bfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20121164dbf82a152edf10506d27d37f29976bfe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86cf1386db813734b35a587ba02b650c0ec5fb9d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86cf1386db813734b35a587ba02b650c0ec5fb9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86cf1386db813734b35a587ba02b650c0ec5fb9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86cf1386db813734b35a587ba02b650c0ec5fb9d/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9d26428cef7c5e687ac09d526acc27d53ce52e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9d26428cef7c5e687ac09d526acc27d53ce52e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9d26428cef7c5e687ac09d526acc27d53ce52e7"
      }
    ],
    "stats": {
      "total": 194,
      "additions": 99,
      "deletions": 95
    },
    "files": [
      {
        "sha": "f2f8eabf7ff159892004ff16e0d633f788e235c9",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 75,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86cf1386db813734b35a587ba02b650c0ec5fb9d/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86cf1386db813734b35a587ba02b650c0ec5fb9d/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=86cf1386db813734b35a587ba02b650c0ec5fb9d",
        "patch": "@@ -111,54 +111,33 @@ static BlockAssembler::Options DefaultOptions(const CChainParams& params)\n \n BlockAssembler::BlockAssembler(const CChainParams& params) : BlockAssembler(params, DefaultOptions(params)) {}\n \n-void BlockAssembler::resetBlock()\n-{\n-    inBlock.clear();\n-\n-    // Reserve space for coinbase tx\n-    nBlockSize = 1000;\n-    nBlockWeight = 4000;\n-    nBlockSigOpsCost = 400;\n-    fIncludeWitness = false;\n-\n-    // These counters do not include coinbase tx\n-    nBlockTx = 0;\n-    nFees = 0;\n-}\n-\n std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn, bool fMineWitnessTx)\n {\n     int64_t nTimeStart = GetTimeMicros();\n \n-    resetBlock();\n-\n-    pblocktemplate.reset(new CBlockTemplate());\n-\n-    if(!pblocktemplate.get())\n-        return nullptr;\n-    pblock = &pblocktemplate->block; // pointer for convenience\n+    WorkingState workState;\n \n     // Add dummy coinbase tx as first transaction\n-    pblock->vtx.emplace_back();\n-    pblocktemplate->vTxFees.push_back(-1); // updated at end\n-    pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n+    workState.pblock->vtx.emplace_back();\n+    workState.pblocktemplate->vTxFees.push_back(-1); // updated at end\n+    workState.pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n \n     LOCK2(cs_main, mempool.cs);\n     CBlockIndex* pindexPrev = chainActive.Tip();\n     nHeight = pindexPrev->nHeight + 1;\n \n-    pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());\n+    workState.pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());\n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n     if (chainparams.MineBlocksOnDemand())\n-        pblock->nVersion = gArgs.GetArg(\"-blockversion\", pblock->nVersion);\n+        workState.pblock->nVersion = gArgs.GetArg(\"-blockversion\", workState.pblock->nVersion);\n \n-    pblock->nTime = GetAdjustedTime();\n+    workState.pblock->nTime = GetAdjustedTime();\n     const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n \n     nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n                        ? nMedianTimePast\n-                       : pblock->GetBlockTime();\n+                       : workState.pblock->GetBlockTime();\n \n     // Decide whether to include witness transactions\n     // This is only needed in case the witness softfork activation is reverted\n@@ -174,52 +153,52 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \n     int nPackagesSelected = 0;\n     int nDescendantsUpdated = 0;\n-    addPackageTxs(nPackagesSelected, nDescendantsUpdated, mapModifiedTx);\n+    addPackageTxs(workState, nPackagesSelected, nDescendantsUpdated, mapModifiedTx);\n \n     int64_t nTime1 = GetTimeMicros();\n \n-    nLastBlockTx = nBlockTx;\n-    nLastBlockSize = nBlockSize;\n-    nLastBlockWeight = nBlockWeight;\n+    nLastBlockTx = workState.nBlockTx;\n+    nLastBlockSize = workState.nBlockSize;\n+    nLastBlockWeight = workState.nBlockWeight;\n \n     // Create coinbase transaction.\n     CMutableTransaction coinbaseTx;\n     coinbaseTx.vin.resize(1);\n     coinbaseTx.vin[0].prevout.SetNull();\n     coinbaseTx.vout.resize(1);\n     coinbaseTx.vout[0].scriptPubKey = scriptPubKeyIn;\n-    coinbaseTx.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n+    coinbaseTx.vout[0].nValue = workState.nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n     coinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n-    pblock->vtx[0] = MakeTransactionRef(std::move(coinbaseTx));\n-    pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());\n-    pblocktemplate->vTxFees[0] = -nFees;\n+    workState.pblock->vtx[0] = MakeTransactionRef(std::move(coinbaseTx));\n+    workState.pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*workState.pblock, pindexPrev, chainparams.GetConsensus());\n+    workState.pblocktemplate->vTxFees[0] = -workState.nFees;\n \n-    uint64_t nSerializeSize = GetSerializeSize(*pblock, SER_NETWORK, PROTOCOL_VERSION);\n-    LogPrintf(\"CreateNewBlock(): total size: %u block weight: %u txs: %u fees: %ld sigops %d\\n\", nSerializeSize, GetBlockWeight(*pblock), nBlockTx, nFees, nBlockSigOpsCost);\n+    uint64_t nSerializeSize = GetSerializeSize(*workState.pblock, SER_NETWORK, PROTOCOL_VERSION);\n+    LogPrintf(\"CreateNewBlock(): total size: %u block weight: %u txs: %u fees: %ld sigops %d\\n\", nSerializeSize, GetBlockWeight(*workState.pblock), workState.nBlockTx, workState.nFees, workState.nBlockSigOpsCost);\n \n     // Fill in header\n-    pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n-    UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n-    pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());\n-    pblock->nNonce         = 0;\n-    pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n+    workState.pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n+    UpdateTime(workState.pblock, chainparams.GetConsensus(), pindexPrev);\n+    workState.pblock->nBits          = GetNextWorkRequired(pindexPrev, workState.pblock, chainparams.GetConsensus());\n+    workState.pblock->nNonce         = 0;\n+    workState.pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*workState.pblock->vtx[0]);\n \n     CValidationState state;\n-    if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {\n+    if (!TestBlockValidity(state, chainparams, *workState.pblock, pindexPrev, false, false)) {\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n     }\n     int64_t nTime2 = GetTimeMicros();\n \n     LogPrint(BCLog::BENCH, \"CreateNewBlock() packages: %.2fms (%d packages, %d updated descendants), validity: %.2fms (total %.2fms)\\n\", 0.001 * (nTime1 - nTimeStart), nPackagesSelected, nDescendantsUpdated, 0.001 * (nTime2 - nTime1), 0.001 * (nTime2 - nTimeStart));\n \n-    return std::move(pblocktemplate);\n+    return std::move(workState.pblocktemplate);\n }\n \n-void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)\n+void BlockAssembler::onlyUnconfirmed(WorkingState &workState, CTxMemPool::setEntries& testSet)\n {\n     for (CTxMemPool::setEntries::iterator iit = testSet.begin(); iit != testSet.end(); ) {\n         // Only test txs not already in the block\n-        if (inBlock.count(*iit)) {\n+        if (workState.inBlock.count(*iit)) {\n             testSet.erase(iit++);\n         }\n         else {\n@@ -228,12 +207,12 @@ void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)\n     }\n }\n \n-bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost) const\n+bool BlockAssembler::TestPackage(const WorkingState &workState, uint64_t packageSize, int64_t packageSigOpsCost) const\n {\n     // TODO: switch to weight-based accounting for packages instead of vsize-based accounting.\n-    if (nBlockWeight + WITNESS_SCALE_FACTOR * packageSize >= nBlockMaxWeight)\n+    if (workState.nBlockWeight + WITNESS_SCALE_FACTOR * packageSize >= nBlockMaxWeight)\n         return false;\n-    if (nBlockSigOpsCost + packageSigOpsCost >= MAX_BLOCK_SIGOPS_COST)\n+    if (workState.nBlockSigOpsCost + packageSigOpsCost >= MAX_BLOCK_SIGOPS_COST)\n         return false;\n     return true;\n }\n@@ -243,9 +222,9 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n // - premature witness (in case segwit transactions are added to mempool before\n //   segwit activation)\n // - serialized size (in case -blockmaxsize is in use)\n-bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package)\n+bool BlockAssembler::TestPackageTransactions(WorkingState &workState, const CTxMemPool::setEntries& package)\n {\n-    uint64_t nPotentialBlockSize = nBlockSize; // only used with fNeedSizeAccounting\n+    uint64_t nPotentialBlockSize = workState.nBlockSize; // only used with fNeedSizeAccounting\n     for (const CTxMemPool::txiter it : package) {\n         if (!IsFinalTx(it->GetTx(), nHeight, nLockTimeCutoff))\n             return false;\n@@ -262,19 +241,19 @@ bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& packa\n     return true;\n }\n \n-void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n+void BlockAssembler::AddToBlock(WorkingState &workState, CTxMemPool::txiter iter)\n {\n-    pblock->vtx.emplace_back(iter->GetSharedTx());\n-    pblocktemplate->vTxFees.push_back(iter->GetFee());\n-    pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n+    workState.pblock->vtx.emplace_back(iter->GetSharedTx());\n+    workState.pblocktemplate->vTxFees.push_back(iter->GetFee());\n+    workState.pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n     if (fNeedSizeAccounting) {\n-        nBlockSize += ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION);\n+        workState.nBlockSize += ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION);\n     }\n-    nBlockWeight += iter->GetTxWeight();\n-    ++nBlockTx;\n-    nBlockSigOpsCost += iter->GetSigOpCost();\n-    nFees += iter->GetFee();\n-    inBlock.insert(iter);\n+    workState.nBlockWeight += iter->GetTxWeight();\n+    ++workState.nBlockTx;\n+    workState.nBlockSigOpsCost += iter->GetSigOpCost();\n+    workState.nFees += iter->GetFee();\n+    workState.inBlock.insert(iter);\n \n     bool fPrintPriority = gArgs.GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n     if (fPrintPriority) {\n@@ -320,10 +299,10 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n // guaranteed to fail again, but as a belt-and-suspenders check we put it in\n // failedTx and avoid re-evaluation, since the re-evaluation would be using\n // cached size/sigops/fee values that are not actually correct.\n-bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)\n+bool BlockAssembler::SkipMapTxEntry(WorkingState &workState, CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)\n {\n     assert (it != mempool.mapTx.end());\n-    return mapModifiedTx.count(it) || inBlock.count(it) || failedTx.count(it);\n+    return mapModifiedTx.count(it) || workState.inBlock.count(it) || failedTx.count(it);\n }\n \n void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries)\n@@ -347,7 +326,7 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemP\n // Each time through the loop, we compare the best transaction in\n // mapModifiedTxs with the next transaction in the mempool to decide what\n // transaction package to work on next.\n-void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated, indexed_modified_transaction_set &mapModifiedTx)\n+void BlockAssembler::addPackageTxs(WorkingState &workState, int &nPackagesSelected, int &nDescendantsUpdated, indexed_modified_transaction_set &mapModifiedTx)\n {\n     // Keep track of entries that failed inclusion, to avoid duplicate work\n     CTxMemPool::setEntries failedTx;\n@@ -365,7 +344,7 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n     {\n         // First try to find a new transaction in mapTx to evaluate.\n         if (mi != mempool.mapTx.get<ancestor_score>().end() &&\n-                SkipMapTxEntry(mempool.mapTx.project<0>(mi), mapModifiedTx, failedTx)) {\n+                SkipMapTxEntry(workState, mempool.mapTx.project<0>(mi), mapModifiedTx, failedTx)) {\n             ++mi;\n             continue;\n         }\n@@ -396,9 +375,9 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n             }\n         }\n \n-        // We skip mapTx entries that are inBlock, and mapModifiedTx shouldn't\n-        // contain anything that is inBlock.\n-        assert(!inBlock.count(iter));\n+        // We skip mapTx entries that are workState.inBlock, and mapModifiedTx shouldn't\n+        // contain anything that is workState.inBlock.\n+        assert(!workState.inBlock.count(iter));\n \n         uint64_t packageSize = iter->GetSizeWithAncestors();\n         CAmount packageFees = iter->GetModFeesWithAncestors();\n@@ -414,7 +393,7 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n             return;\n         }\n \n-        if (!TestPackage(packageSize, packageSigOpsCost)) {\n+        if (!TestPackage(workState, packageSize, packageSigOpsCost)) {\n             if (fUsingModified) {\n                 // Since we always look at the best entry in mapModifiedTx,\n                 // we must erase failed entries so that we can consider the\n@@ -425,7 +404,7 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n \n             ++nConsecutiveFailed;\n \n-            if (nConsecutiveFailed > MAX_CONSECUTIVE_FAILURES && nBlockWeight >\n+            if (nConsecutiveFailed > MAX_CONSECUTIVE_FAILURES && workState.nBlockWeight >\n                     nBlockMaxWeight - 4000) {\n                 // Give up if we're close to full and haven't succeeded in a while\n                 break;\n@@ -438,11 +417,11 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n         std::string dummy;\n         mempool.CalculateMemPoolAncestors(*iter, ancestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n \n-        onlyUnconfirmed(ancestors);\n+        onlyUnconfirmed(workState, ancestors);\n         ancestors.insert(iter);\n \n         // Test if all tx's are Final\n-        if (!TestPackageTransactions(ancestors)) {\n+        if (!TestPackageTransactions(workState, ancestors)) {\n             if (fUsingModified) {\n                 mapModifiedTx.get<ancestor_score>().erase(modit);\n                 failedTx.insert(iter);\n@@ -458,7 +437,7 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n         SortForBlock(ancestors, iter, sortedEntries);\n \n         for (size_t i=0; i<sortedEntries.size(); ++i) {\n-            AddToBlock(sortedEntries[i]);\n+            AddToBlock(workState, sortedEntries[i]);\n             // Erase from the modified set, if present\n             mapModifiedTx.erase(sortedEntries[i]);\n         }"
      },
      {
        "sha": "9cd1b7fe59634cca92aa4aff75ad00c292bbafa9",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 45,
        "deletions": 20,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86cf1386db813734b35a587ba02b650c0ec5fb9d/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86cf1386db813734b35a587ba02b650c0ec5fb9d/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=86cf1386db813734b35a587ba02b650c0ec5fb9d",
        "patch": "@@ -132,25 +132,52 @@ struct update_for_parent_inclusion\n class BlockAssembler\n {\n private:\n-    // The constructed block template\n-    std::unique_ptr<CBlockTemplate> pblocktemplate;\n-    // A convenience pointer that always refers to the CBlock in pblocktemplate\n-    CBlock* pblock;\n+    // The state associated with construction of a block.\n+    struct WorkingState {\n+        WorkingState() :\n+            pblocktemplate(new CBlockTemplate()),\n+            pblock(&pblocktemplate->block),\n+            // Reserve space for coinbase tx\n+            nBlockWeight(4000),\n+            nBlockSize(1000),\n+            nBlockSigOpsCost(400),\n+            // These counters do not include coinbase tx\n+            nBlockTx(0),\n+            nFees(0),\n+            nModifiedFees(0) { }\n+\n+        WorkingState(const WorkingState &ws) :\n+            pblocktemplate(new CBlockTemplate(*ws.pblocktemplate)),\n+            pblock(&pblocktemplate->block),\n+            nBlockWeight(ws.nBlockWeight),\n+            nBlockSize(ws.nBlockSize),\n+            nBlockSigOpsCost(ws.nBlockSigOpsCost),\n+            nBlockTx(ws.nBlockTx),\n+            nFees(ws.nFees),\n+            nModifiedFees(ws.nModifiedFees),\n+            inBlock(ws.inBlock) { }\n+\n+        // The constructed block template\n+        std::unique_ptr<CBlockTemplate> pblocktemplate;\n+        // A convenience pointer that always refers to the CBlock in pblocktemplate\n+        CBlock* pblock;\n+\n+        // Information on the current status of the block\n+        uint64_t nBlockWeight;\n+        uint64_t nBlockSize;\n+        uint64_t nBlockSigOpsCost;\n+        uint64_t nBlockTx;\n+        CAmount nFees;\n+        CAmount nModifiedFees;\n+        CTxMemPool::setEntries inBlock;\n+    };\n \n     // Configuration parameters for the block size\n     bool fIncludeWitness;\n     unsigned int nBlockMaxWeight, nBlockMaxSize;\n     bool fNeedSizeAccounting;\n     CFeeRate blockMinFeeRate;\n \n-    // Information on the current status of the block\n-    uint64_t nBlockWeight;\n-    uint64_t nBlockSize;\n-    uint64_t nBlockTx;\n-    uint64_t nBlockSigOpsCost;\n-    CAmount nFees;\n-    CTxMemPool::setEntries inBlock;\n-\n     // Chain context for the block\n     int nHeight;\n     int64_t nLockTimeCutoff;\n@@ -172,32 +199,30 @@ class BlockAssembler\n \n private:\n     // utility functions\n-    /** Clear the block's state and prepare for assembling a new block */\n-    void resetBlock();\n     /** Add a tx to the block */\n-    void AddToBlock(CTxMemPool::txiter iter);\n+    void AddToBlock(WorkingState &workState, CTxMemPool::txiter iter);\n \n     // Methods for how to add transactions to a block.\n     /** Add transactions based on feerate including unconfirmed ancestors\n       * Increments nPackagesSelected / nDescendantsUpdated with corresponding\n       * statistics from the package selection (for logging statistics).\n      *  mapModifiedTx will track the updated ancestor feerate score of\n      *  not-in-block transactions that have parents in the block */\n-    void addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated, indexed_modified_transaction_set &mapModifiedTx);\n+    void addPackageTxs(WorkingState &workState, int &nPackagesSelected, int &nDescendantsUpdated, indexed_modified_transaction_set &mapModifiedTx);\n \n     // helper functions for addPackageTxs()\n     /** Remove confirmed (inBlock) entries from given set */\n-    void onlyUnconfirmed(CTxMemPool::setEntries& testSet);\n+    void onlyUnconfirmed(WorkingState &workState, CTxMemPool::setEntries& testSet);\n     /** Test if a new package would \"fit\" in the block */\n-    bool TestPackage(uint64_t packageSize, int64_t packageSigOpsCost) const;\n+    bool TestPackage(const WorkingState &workState, uint64_t packageSize, int64_t packageSigOpsCost) const;\n     /** Perform checks on each transaction in a package:\n       * locktime, premature-witness, serialized size (if necessary)\n       * These checks should always succeed, and they're here\n       * only as an extra check in case of suboptimal node configuration */\n-    bool TestPackageTransactions(const CTxMemPool::setEntries& package);\n+    bool TestPackageTransactions(WorkingState &workState, const CTxMemPool::setEntries& package);\n     /** Return true if given transaction from mapTx has already been evaluated,\n       * or if the transaction's cached data in mapTx is incorrect. */\n-    bool SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx);\n+    bool SkipMapTxEntry(WorkingState &workState, CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx);\n     /** Sort the package in an order that is valid to appear in a block */\n     void SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries);\n     /** Add descendants of given transactions to mapModifiedTx with ancestor"
      }
    ]
  },
  {
    "sha": "92aa82233955d50ae8d84a66843ce511c7638758",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmFhODIyMzM5NTVkNTBhZThkODRhNjY4NDNjZTUxMWM3NjM4NzU4",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-03-01T20:00:25Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-08-16T17:07:36Z"
      },
      "message": "Mining: Add not-yet-used option to avoid recent transactions in addPackageTxs",
      "tree": {
        "sha": "5c0d20ad664f6a553e80de576f997c9f2fa315bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c0d20ad664f6a553e80de576f997c9f2fa315bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92aa82233955d50ae8d84a66843ce511c7638758",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92aa82233955d50ae8d84a66843ce511c7638758",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92aa82233955d50ae8d84a66843ce511c7638758",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92aa82233955d50ae8d84a66843ce511c7638758/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86cf1386db813734b35a587ba02b650c0ec5fb9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86cf1386db813734b35a587ba02b650c0ec5fb9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86cf1386db813734b35a587ba02b650c0ec5fb9d"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 12,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b762ee536c393f7c33ff44f64f44b3cb589bc75e",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92aa82233955d50ae8d84a66843ce511c7638758/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92aa82233955d50ae8d84a66843ce511c7638758/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=92aa82233955d50ae8d84a66843ce511c7638758",
        "patch": "@@ -153,7 +153,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \n     int nPackagesSelected = 0;\n     int nDescendantsUpdated = 0;\n-    addPackageTxs(workState, nPackagesSelected, nDescendantsUpdated, mapModifiedTx);\n+    addPackageTxs(workState, nPackagesSelected, nDescendantsUpdated, std::numeric_limits<int64_t>::max(), mapModifiedTx);\n \n     int64_t nTime1 = GetTimeMicros();\n \n@@ -326,7 +326,7 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemP\n // Each time through the loop, we compare the best transaction in\n // mapModifiedTxs with the next transaction in the mempool to decide what\n // transaction package to work on next.\n-void BlockAssembler::addPackageTxs(WorkingState &workState, int &nPackagesSelected, int &nDescendantsUpdated, indexed_modified_transaction_set &mapModifiedTx)\n+void BlockAssembler::addPackageTxs(WorkingState &workState, int &nPackagesSelected, int &nDescendantsUpdated, int64_t nTimeCutoff, indexed_modified_transaction_set &mapModifiedTx)\n {\n     // Keep track of entries that failed inclusion, to avoid duplicate work\n     CTxMemPool::setEntries failedTx;\n@@ -344,7 +344,8 @@ void BlockAssembler::addPackageTxs(WorkingState &workState, int &nPackagesSelect\n     {\n         // First try to find a new transaction in mapTx to evaluate.\n         if (mi != mempool.mapTx.get<ancestor_score>().end() &&\n-                SkipMapTxEntry(workState, mempool.mapTx.project<0>(mi), mapModifiedTx, failedTx)) {\n+                (mi->GetTime() > nTimeCutoff ||\n+                 SkipMapTxEntry(workState, mempool.mapTx.project<0>(mi), mapModifiedTx, failedTx))) {\n             ++mi;\n             continue;\n         }\n@@ -354,6 +355,13 @@ void BlockAssembler::addPackageTxs(WorkingState &workState, int &nPackagesSelect\n         bool fUsingModified = false;\n \n         modtxscoreiter modit = mapModifiedTx.get<ancestor_score>().begin();\n+\n+        // Remove too-recent entries from mapModifiedTx.\n+        if (modit != mapModifiedTx.get<ancestor_score>().end() && modit->iter->GetTime() > nTimeCutoff) {\n+            mapModifiedTx.get<ancestor_score>().erase(modit);\n+            continue;\n+        }\n+\n         if (mi == mempool.mapTx.get<ancestor_score>().end()) {\n             // We're out of entries in mapTx; use the entry from mapModifiedTx\n             iter = modit->iter;"
      },
      {
        "sha": "6ec791681ea020af8c851f4c547dbd2703169c26",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92aa82233955d50ae8d84a66843ce511c7638758/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92aa82233955d50ae8d84a66843ce511c7638758/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=92aa82233955d50ae8d84a66843ce511c7638758",
        "patch": "@@ -208,7 +208,7 @@ class BlockAssembler\n       * statistics from the package selection (for logging statistics).\n      *  mapModifiedTx will track the updated ancestor feerate score of\n      *  not-in-block transactions that have parents in the block */\n-    void addPackageTxs(WorkingState &workState, int &nPackagesSelected, int &nDescendantsUpdated, indexed_modified_transaction_set &mapModifiedTx);\n+    void addPackageTxs(WorkingState &workState, int &nPackagesSelected, int &nDescendantsUpdated, int64_t nTimeCutoff, indexed_modified_transaction_set &mapModifiedTx);\n \n     // helper functions for addPackageTxs()\n     /** Remove confirmed (inBlock) entries from given set */"
      }
    ]
  },
  {
    "sha": "e8dcf5018c29a2609b673d7cae88144ad82ad5bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGRjZjUwMThjMjlhMjYwOWI2NzNkN2NhZTg4MTQ0YWQ4MmFkNWJi",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-03-02T16:30:18Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-08-16T17:07:36Z"
      },
      "message": "Skip recent transactions in CNB if fee difference is small",
      "tree": {
        "sha": "1bcc471af94732af432a674a50098a523db8bf27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bcc471af94732af432a674a50098a523db8bf27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8dcf5018c29a2609b673d7cae88144ad82ad5bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8dcf5018c29a2609b673d7cae88144ad82ad5bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8dcf5018c29a2609b673d7cae88144ad82ad5bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8dcf5018c29a2609b673d7cae88144ad82ad5bb/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92aa82233955d50ae8d84a66843ce511c7638758",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92aa82233955d50ae8d84a66843ce511c7638758",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92aa82233955d50ae8d84a66843ce511c7638758"
      }
    ],
    "stats": {
      "total": 172,
      "additions": 156,
      "deletions": 16
    },
    "files": [
      {
        "sha": "7b0152e007229f026658045b22d82af663a93306",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 137,
        "deletions": 16,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8dcf5018c29a2609b673d7cae88144ad82ad5bb/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8dcf5018c29a2609b673d7cae88144ad82ad5bb/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=e8dcf5018c29a2609b673d7cae88144ad82ad5bb",
        "patch": "@@ -65,6 +65,7 @@ BlockAssembler::Options::Options() {\n     blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n     nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;\n     nBlockMaxSize = DEFAULT_BLOCK_MAX_SIZE;\n+    nRecentTxWindow = 10; // TODO: make this configurable\n }\n \n BlockAssembler::BlockAssembler(const CChainParams& params, const Options& options) : chainparams(params)\n@@ -76,6 +77,7 @@ BlockAssembler::BlockAssembler(const CChainParams& params, const Options& option\n     nBlockMaxSize = std::max<size_t>(1000, std::min<size_t>(MAX_BLOCK_SERIALIZED_SIZE - 1000, options.nBlockMaxSize));\n     // Whether we need to account for byte usage (in addition to weight usage)\n     fNeedSizeAccounting = (nBlockMaxSize < MAX_BLOCK_SERIALIZED_SIZE - 1000);\n+    nRecentTxWindow = options.nRecentTxWindow;\n }\n \n static BlockAssembler::Options DefaultOptions(const CChainParams& params)\n@@ -106,11 +108,37 @@ static BlockAssembler::Options DefaultOptions(const CChainParams& params)\n     } else {\n         options.blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n     }\n+    options.nRecentTxWindow = 10;\n     return options;\n }\n \n BlockAssembler::BlockAssembler(const CChainParams& params) : BlockAssembler(params, DefaultOptions(params)) {}\n \n+/*\n+ * CreateNewBlock:\n+ *\n+ * This selects transactions for a new candidate block, and verifies that the\n+ * resulting block is valid (aside from proof-of-work). If the resulting block\n+ * is not valid, then an error is thrown.  Relies on mempool consistency (no\n+ * invalid transactions in the mempool given our current tip).\n+ *\n+ * Transaction selection is initially done by selecting highest feerate\n+ * transactions, taking into account ancestors that are not yet in the\n+ * candidate block, and adding those transactions with their ancestors to the\n+ * block.\n+ *\n+ * Then, we model that block propagation can be affected by the presence of\n+ * recently received transactions that may not have propagated across the\n+ * network (see BIP 152): transactions that have been recently received are\n+ * removed (and we re-fill the block with non-recent transactions) unless the\n+ * block income from doing so drops by some percentage.  Miners can view this\n+ * as a statement: blocks that contain transactions received less than X\n+ * seconds ago are orphaned with probability Y.  By setting the recently\n+ * received threshold window to X and the income reduction threshold to Y,\n+ * CreateNewBlock ought to perform more optimally (and generally result in\n+ * blocks that propagate quicker).\n+ */\n+\n std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn, bool fMineWitnessTx)\n {\n     int64_t nTimeStart = GetTimeMicros();\n@@ -153,45 +181,67 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \n     int nPackagesSelected = 0;\n     int nDescendantsUpdated = 0;\n+\n+    // First, we add transactions without regard to received time of\n+    // transactions, based on ancestor feerate score.\n     addPackageTxs(workState, nPackagesSelected, nDescendantsUpdated, std::numeric_limits<int64_t>::max(), mapModifiedTx);\n \n+    // Duplicate the working state, and remove the recently received\n+    // transactions from the block.\n+    WorkingState noRecentWorkState(workState);\n+\n+    // TODO: allow the time window to be configurable\n+    int64_t nTimeCutoff = GetTime() - nRecentTxWindow;\n+    RemoveRecentTransactionsFromBlockAndUpdatePackages(noRecentWorkState, nTimeCutoff, mapModifiedTx);\n+\n+    // Re-add to this block, skipping recent transactions from transaction selection.\n+    addPackageTxs(noRecentWorkState, nPackagesSelected, nDescendantsUpdated, nTimeCutoff, mapModifiedTx);\n+\n     int64_t nTime1 = GetTimeMicros();\n \n-    nLastBlockTx = workState.nBlockTx;\n-    nLastBlockSize = workState.nBlockSize;\n-    nLastBlockWeight = workState.nBlockWeight;\n+    // Now compare and decide which block to use\n+    WorkingState *winner = &workState;\n+    // TODO: replace this with a configurable threshold\n+    CAmount blockSubsidy = GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n+    if (blockSubsidy + noRecentWorkState.nModifiedFees >= 1.0 * (workState.nModifiedFees + blockSubsidy)) {\n+        winner = &noRecentWorkState;\n+    }\n+\n+    nLastBlockTx = winner->nBlockTx;\n+    nLastBlockSize = winner->nBlockSize;\n+    nLastBlockWeight = winner->nBlockWeight;\n \n     // Create coinbase transaction.\n     CMutableTransaction coinbaseTx;\n     coinbaseTx.vin.resize(1);\n     coinbaseTx.vin[0].prevout.SetNull();\n     coinbaseTx.vout.resize(1);\n     coinbaseTx.vout[0].scriptPubKey = scriptPubKeyIn;\n-    coinbaseTx.vout[0].nValue = workState.nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n+    coinbaseTx.vout[0].nValue = winner->nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n     coinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n-    workState.pblock->vtx[0] = MakeTransactionRef(std::move(coinbaseTx));\n-    workState.pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*workState.pblock, pindexPrev, chainparams.GetConsensus());\n-    workState.pblocktemplate->vTxFees[0] = -workState.nFees;\n+    winner->pblock->vtx[0] = MakeTransactionRef(std::move(coinbaseTx));\n+    winner->pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*winner->pblock, pindexPrev, chainparams.GetConsensus());\n+    winner->pblocktemplate->vTxFees[0] = -winner->nFees;\n \n-    uint64_t nSerializeSize = GetSerializeSize(*workState.pblock, SER_NETWORK, PROTOCOL_VERSION);\n-    LogPrintf(\"CreateNewBlock(): total size: %u block weight: %u txs: %u fees: %ld sigops %d\\n\", nSerializeSize, GetBlockWeight(*workState.pblock), workState.nBlockTx, workState.nFees, workState.nBlockSigOpsCost);\n+    uint64_t nSerializeSize = GetSerializeSize(*winner->pblock, SER_NETWORK, PROTOCOL_VERSION);\n+    LogPrintf(\"CreateNewBlock(): total size: %u block weight: %u txs: %u fees: %ld sigops %d\\n\", nSerializeSize, GetBlockWeight(*winner->pblock), winner->nBlockTx, winner->nFees, winner->nBlockSigOpsCost);\n \n     // Fill in header\n-    workState.pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n-    UpdateTime(workState.pblock, chainparams.GetConsensus(), pindexPrev);\n-    workState.pblock->nBits          = GetNextWorkRequired(pindexPrev, workState.pblock, chainparams.GetConsensus());\n-    workState.pblock->nNonce         = 0;\n-    workState.pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*workState.pblock->vtx[0]);\n+    winner->pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n+    UpdateTime(winner->pblock, chainparams.GetConsensus(), pindexPrev);\n+    winner->pblock->nBits          = GetNextWorkRequired(pindexPrev, winner->pblock, chainparams.GetConsensus());\n+    winner->pblock->nNonce         = 0;\n+    winner->pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*winner->pblock->vtx[0]);\n \n     CValidationState state;\n-    if (!TestBlockValidity(state, chainparams, *workState.pblock, pindexPrev, false, false)) {\n+    if (!TestBlockValidity(state, chainparams, *winner->pblock, pindexPrev, false, false)) {\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n     }\n     int64_t nTime2 = GetTimeMicros();\n \n     LogPrint(BCLog::BENCH, \"CreateNewBlock() packages: %.2fms (%d packages, %d updated descendants), validity: %.2fms (total %.2fms)\\n\", 0.001 * (nTime1 - nTimeStart), nPackagesSelected, nDescendantsUpdated, 0.001 * (nTime2 - nTime1), 0.001 * (nTime2 - nTimeStart));\n \n-    return std::move(workState.pblocktemplate);\n+    return std::move(winner->pblocktemplate);\n }\n \n void BlockAssembler::onlyUnconfirmed(WorkingState &workState, CTxMemPool::setEntries& testSet)\n@@ -253,6 +303,7 @@ void BlockAssembler::AddToBlock(WorkingState &workState, CTxMemPool::txiter iter\n     ++workState.nBlockTx;\n     workState.nBlockSigOpsCost += iter->GetSigOpCost();\n     workState.nFees += iter->GetFee();\n+    workState.nModifiedFees += iter->GetModifiedFee();\n     workState.inBlock.insert(iter);\n \n     bool fPrintPriority = gArgs.GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n@@ -263,6 +314,74 @@ void BlockAssembler::AddToBlock(WorkingState &workState, CTxMemPool::txiter iter\n     }\n }\n \n+void BlockAssembler::RemoveRecentTransactionsFromBlockAndUpdatePackages(WorkingState &workState, int64_t timeCutoff, indexed_modified_transaction_set &mapModifiedTx)\n+{\n+    std::vector<CTransactionRef> vtxCopy;\n+    vtxCopy.reserve(workState.pblocktemplate->block.vtx.size());\n+    std::vector<CAmount> vTxFeesCopy;\n+    vTxFeesCopy.reserve(vtxCopy.size());\n+    std::vector<int64_t> vTxSigOpsCostCopy;\n+    vTxSigOpsCostCopy.reserve(vtxCopy.size());\n+\n+    CTxMemPool::setEntries descendantTransactions;\n+    for (const CTransactionRef &ptx : workState.pblocktemplate->block.vtx) {\n+        if (vtxCopy.empty()) {\n+            // This is the coinbase placeholder; just copy its\n+            // information over.\n+            vtxCopy.push_back(ptx);\n+            vTxFeesCopy.push_back(workState.pblocktemplate->vTxFees[0]);\n+            vTxSigOpsCostCopy.push_back(workState.pblocktemplate->vTxSigOpsCost[0]);\n+            continue;\n+        }\n+        // TODO: Store the mempool entry iterators in another vector to save this\n+        // lookup.\n+        CTxMemPool::txiter it = mempool.mapTx.find(ptx->GetHash());\n+        assert(it != mempool.mapTx.end());\n+        // Keep any transactions that are sufficiently old, but skip transactions\n+        // that depend on removed transactions.  (Note that it's technically\n+        // possible for a child tx to have a newer arrival time than its\n+        // parent, eg after a reorg.)\n+        if (it->GetTime() <= timeCutoff && descendantTransactions.count(it) == 0) {\n+            vtxCopy.push_back(ptx);\n+            vTxFeesCopy.push_back(it->GetFee());\n+            vTxSigOpsCostCopy.push_back(it->GetSigOpCost());\n+        } else {\n+            // Update block statistics for transactions being skipped.\n+            if (fNeedSizeAccounting) {\n+                workState.nBlockSize -= ::GetSerializeSize(*ptx, SER_NETWORK, PROTOCOL_VERSION);\n+            }\n+            workState.nBlockWeight -= it->GetTxWeight();\n+            --workState.nBlockTx;\n+            workState.nBlockSigOpsCost -= it->GetSigOpCost();\n+            workState.nFees -= it->GetFee();\n+            workState.nModifiedFees -= it->GetModifiedFee();\n+            workState.inBlock.erase(it);\n+\n+            // Update the packages to account for this transaction's removal\n+            // from the block.\n+            CTxMemPool::setEntries tx_descendants;\n+            mempool.CalculateDescendants(it, tx_descendants);\n+            for (auto desc : tx_descendants) {\n+                modtxiter mit = mapModifiedTx.find(desc);\n+                // Only descendants that are not in the block should exist in\n+                // mapModifiedTx\n+                if (mit != mapModifiedTx.end()) {\n+                    mapModifiedTx.modify(mit, update_for_parent_removal(it));\n+                }\n+            }\n+\n+            // Add all of this transaction's descendants into the master list\n+            // of transactions that must be removed (missing inputs).\n+            descendantTransactions.insert(tx_descendants.begin(), tx_descendants.end());\n+        }\n+    }\n+\n+    // Now we have a new version of the block.  Swap out with what is stored.\n+    std::swap(workState.pblocktemplate->block.vtx, vtxCopy);\n+    std::swap(workState.pblocktemplate->vTxFees, vTxFeesCopy);\n+    std::swap(workState.pblocktemplate->vTxSigOpsCost, vTxSigOpsCostCopy);\n+}\n+\n int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded,\n         indexed_modified_transaction_set &mapModifiedTx)\n {\n@@ -290,6 +409,8 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n     return nDescendantsUpdated;\n }\n \n+\n+\n // Skip entries in mapTx that are already in a block or are present\n // in mapModifiedTx (which implies that the mapTx ancestor state is\n // stale due to ancestor inclusion in the block)"
      },
      {
        "sha": "6a6df2d972725507e67e3e2f204f5fd4e8e69ee0",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8dcf5018c29a2609b673d7cae88144ad82ad5bb/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8dcf5018c29a2609b673d7cae88144ad82ad5bb/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=e8dcf5018c29a2609b673d7cae88144ad82ad5bb",
        "patch": "@@ -128,6 +128,20 @@ struct update_for_parent_inclusion\n     CTxMemPool::txiter iter;\n };\n \n+struct update_for_parent_removal\n+{\n+    update_for_parent_removal(CTxMemPool::txiter it) : iter(it) {}\n+\n+    void operator() (CTxMemPoolModifiedEntry &e)\n+    {\n+        e.nModFeesWithAncestors += iter->GetFee();\n+        e.nSizeWithAncestors += iter->GetTxSize();\n+        e.nSigOpCostWithAncestors += iter->GetSigOpCost();\n+    }\n+\n+    CTxMemPool::txiter iter;\n+};\n+\n /** Generate a new block, without valid proof-of-work */\n class BlockAssembler\n {\n@@ -177,6 +191,7 @@ class BlockAssembler\n     unsigned int nBlockMaxWeight, nBlockMaxSize;\n     bool fNeedSizeAccounting;\n     CFeeRate blockMinFeeRate;\n+    int64_t nRecentTxWindow;\n \n     // Chain context for the block\n     int nHeight;\n@@ -189,6 +204,7 @@ class BlockAssembler\n         size_t nBlockMaxWeight;\n         size_t nBlockMaxSize;\n         CFeeRate blockMinFeeRate;\n+        int64_t nRecentTxWindow;\n     };\n \n     BlockAssembler(const CChainParams& params);\n@@ -201,6 +217,8 @@ class BlockAssembler\n     // utility functions\n     /** Add a tx to the block */\n     void AddToBlock(WorkingState &workState, CTxMemPool::txiter iter);\n+    /** Remove recent transactions from a block, including any descendants */\n+    void RemoveRecentTransactionsFromBlockAndUpdatePackages(WorkingState &workState, int64_t timeCutoff, indexed_modified_transaction_set &mapModifiedTx);\n \n     // Methods for how to add transactions to a block.\n     /** Add transactions based on feerate including unconfirmed ancestors"
      },
      {
        "sha": "86a90c953eef29278a9ebb1d79e9ed18d7a8f964",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8dcf5018c29a2609b673d7cae88144ad82ad5bb/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8dcf5018c29a2609b673d7cae88144ad82ad5bb/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=e8dcf5018c29a2609b673d7cae88144ad82ad5bb",
        "patch": "@@ -34,6 +34,7 @@ static BlockAssembler AssemblerForTest(const CChainParams& params) {\n     options.nBlockMaxWeight = MAX_BLOCK_WEIGHT;\n     options.nBlockMaxSize = MAX_BLOCK_SERIALIZED_SIZE;\n     options.blockMinFeeRate = blockMinFeeRate;\n+    options.nRecentTxWindow = 0;\n     return BlockAssembler(params, options);\n }\n "
      }
    ]
  },
  {
    "sha": "72e2ab0378c2baa13b6f1e80b3adcc302787c367",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmUyYWIwMzc4YzJiYWExM2I2ZjFlODBiM2FkY2MzMDI3ODdjMzY3",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-04-05T19:15:27Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-08-16T19:00:01Z"
      },
      "message": "Mining: configure 'recency' and 'stale rate' from command line\n\nThis adds two command line arguments, -recenttxwindow and\n-recenttxstalerate, which control the new transaction selection model.\n\nDisables new mining behavior by default in functional tests by setting\n-recenttxstalerate=0.",
      "tree": {
        "sha": "8de9dfd33b07c2f32e9776dfd3928df3ea4ccf63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8de9dfd33b07c2f32e9776dfd3928df3ea4ccf63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72e2ab0378c2baa13b6f1e80b3adcc302787c367",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72e2ab0378c2baa13b6f1e80b3adcc302787c367",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72e2ab0378c2baa13b6f1e80b3adcc302787c367",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72e2ab0378c2baa13b6f1e80b3adcc302787c367/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8dcf5018c29a2609b673d7cae88144ad82ad5bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8dcf5018c29a2609b673d7cae88144ad82ad5bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8dcf5018c29a2609b673d7cae88144ad82ad5bb"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 42,
      "deletions": 8
    },
    "files": [
      {
        "sha": "e8ec93e03c91224acf44c2fcf5c88df392a43542",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72e2ab0378c2baa13b6f1e80b3adcc302787c367/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72e2ab0378c2baa13b6f1e80b3adcc302787c367/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=72e2ab0378c2baa13b6f1e80b3adcc302787c367",
        "patch": "@@ -496,6 +496,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n     strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n+    strUsage += HelpMessageOpt(\"-recenttxwindow=<n>\", strprintf(_(\"Set window size in milliseconds for defining transactions as 'recently received' (default: %d)\"), DEFAULT_RECENT_TX_WINDOW));\n+    strUsage += HelpMessageOpt(\"-recenttxstalerate=<n>\", strprintf(_(\"Set stale (orphan) rate for blocks that contain 'recently received' transactions. This is the probability that block income will be lost given that a recently received transaction was included; transaction selection skips over recently received transactions (defined by -recenttxwindow) unless doing so would result in a decrease of block income exceeding this rate (default: %f)\"), DEFAULT_RECENT_TX_STALE_RATE));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blockversion=<n>\", \"Override block version to test forking scenarios\");\n \n@@ -1052,6 +1054,16 @@ bool AppInitParameterInteraction()\n             return InitError(AmountErrMsg(\"blockmintxfee\", gArgs.GetArg(\"-blockmintxfee\", \"\")));\n     }\n \n+    // Sanity check -recenttxstalerate\n+    if (gArgs.IsArgSet(\"-recenttxstalerate\")) {\n+        double dummy;\n+        if (!ParseDouble(gArgs.GetArg(\"-recenttxstalerate\", \"\"), &dummy)) {\n+            return InitError(\"-recenttxstalerate is invalid\");\n+        } else if (dummy < 0.0 || dummy > 1.0) {\n+            LogPrintf(\"Warning: -recenttxstalerate (%f) will be bounded between 0 and 1\\n\", dummy);\n+        }\n+    }\n+\n     // Feerate used to define dust.  Shouldn't be changed lightly as old\n     // implementations may inadvertently create non-standard transactions\n     if (gArgs.IsArgSet(\"-dustrelayfee\"))"
      },
      {
        "sha": "79b61e91e12794211eec985335dcb55975839b26",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 6,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72e2ab0378c2baa13b6f1e80b3adcc302787c367/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72e2ab0378c2baa13b6f1e80b3adcc302787c367/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=72e2ab0378c2baa13b6f1e80b3adcc302787c367",
        "patch": "@@ -25,6 +25,7 @@\n #include \"txmempool.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n \n #include <algorithm>\n@@ -65,7 +66,8 @@ BlockAssembler::Options::Options() {\n     blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n     nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;\n     nBlockMaxSize = DEFAULT_BLOCK_MAX_SIZE;\n-    nRecentTxWindow = 10; // TODO: make this configurable\n+    nRecentTxWindow = DEFAULT_RECENT_TX_WINDOW;\n+    dRecentTxStaleRate = DEFAULT_RECENT_TX_STALE_RATE;\n }\n \n BlockAssembler::BlockAssembler(const CChainParams& params, const Options& options) : chainparams(params)\n@@ -75,9 +77,13 @@ BlockAssembler::BlockAssembler(const CChainParams& params, const Options& option\n     nBlockMaxWeight = std::max<size_t>(4000, std::min<size_t>(MAX_BLOCK_WEIGHT - 4000, options.nBlockMaxWeight));\n     // Limit size to between 1K and MAX_BLOCK_SERIALIZED_SIZE-1K for sanity:\n     nBlockMaxSize = std::max<size_t>(1000, std::min<size_t>(MAX_BLOCK_SERIALIZED_SIZE - 1000, options.nBlockMaxSize));\n+    nRecentTxWindow = options.nRecentTxWindow;\n+    // 1 - stale rate is the income threshold we want to use for our comparison\n+    // in CreateNewBlock. Bound it between 0 and 1.\n+    dIncomeThreshold = std::max<double>(0.0, std::min<double>(1.0, 1 - options.dRecentTxStaleRate));\n+\n     // Whether we need to account for byte usage (in addition to weight usage)\n     fNeedSizeAccounting = (nBlockMaxSize < MAX_BLOCK_SERIALIZED_SIZE - 1000);\n-    nRecentTxWindow = options.nRecentTxWindow;\n }\n \n static BlockAssembler::Options DefaultOptions(const CChainParams& params)\n@@ -108,7 +114,14 @@ static BlockAssembler::Options DefaultOptions(const CChainParams& params)\n     } else {\n         options.blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n     }\n-    options.nRecentTxWindow = 10;\n+    // Convert -recenttxwindow to seconds, since that's what the mempool stores (rounding up).\n+    options.nRecentTxWindow = (gArgs.GetArg(\"-recenttxwindow\", DEFAULT_RECENT_TX_WINDOW) + 999)/1000;\n+    // If the user specified a parseable stale rate to use, use it.\n+    if (!gArgs.IsArgSet(\"-recenttxstalerate\") ||\n+            !ParseDouble(gArgs.GetArg(\"-recenttxstalerate\", \"\"), &options.dRecentTxStaleRate)) {\n+        options.dRecentTxStaleRate = DEFAULT_RECENT_TX_STALE_RATE;\n+    }\n+\n     return options;\n }\n \n@@ -190,7 +203,6 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // transactions from the block.\n     WorkingState noRecentWorkState(workState);\n \n-    // TODO: allow the time window to be configurable\n     int64_t nTimeCutoff = GetTime() - nRecentTxWindow;\n     RemoveRecentTransactionsFromBlockAndUpdatePackages(noRecentWorkState, nTimeCutoff, mapModifiedTx);\n \n@@ -201,9 +213,8 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \n     // Now compare and decide which block to use\n     WorkingState *winner = &workState;\n-    // TODO: replace this with a configurable threshold\n     CAmount blockSubsidy = GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n-    if (blockSubsidy + noRecentWorkState.nModifiedFees >= 1.0 * (workState.nModifiedFees + blockSubsidy)) {\n+    if (blockSubsidy + noRecentWorkState.nModifiedFees >= dIncomeThreshold * (workState.nModifiedFees + blockSubsidy)) {\n         winner = &noRecentWorkState;\n     }\n "
      },
      {
        "sha": "9d266761fedc231eec40027a2cf395a601e3acdf",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72e2ab0378c2baa13b6f1e80b3adcc302787c367/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72e2ab0378c2baa13b6f1e80b3adcc302787c367/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=72e2ab0378c2baa13b6f1e80b3adcc302787c367",
        "patch": "@@ -189,9 +189,13 @@ class BlockAssembler\n     // Configuration parameters for the block size\n     bool fIncludeWitness;\n     unsigned int nBlockMaxWeight, nBlockMaxSize;\n+    // Exclude transactions received in nRecentTxWindow if the income\n+    // reduction from doing so is below (1-dRecentTxStaleRate).\n+    // See comment above CreateNewBlock().\n+    int64_t nRecentTxWindow;\n+    double dIncomeThreshold;\n     bool fNeedSizeAccounting;\n     CFeeRate blockMinFeeRate;\n-    int64_t nRecentTxWindow;\n \n     // Chain context for the block\n     int nHeight;\n@@ -205,6 +209,7 @@ class BlockAssembler\n         size_t nBlockMaxSize;\n         CFeeRate blockMinFeeRate;\n         int64_t nRecentTxWindow;\n+        double dRecentTxStaleRate;\n     };\n \n     BlockAssembler(const CChainParams& params);"
      },
      {
        "sha": "9dc01feaf5865119e4ac1d0bf1021444bfc6734b",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72e2ab0378c2baa13b6f1e80b3adcc302787c367/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72e2ab0378c2baa13b6f1e80b3adcc302787c367/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=72e2ab0378c2baa13b6f1e80b3adcc302787c367",
        "patch": "@@ -22,6 +22,11 @@ static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = 3000000;\n /** Default for -blockmintxfee, which sets the minimum feerate for a transaction in blocks created by mining code **/\n static const unsigned int DEFAULT_BLOCK_MIN_TX_FEE = 1000;\n+/** Default in milliseconds for how we define 'recent' transactions, which we might omit in block creation */\n+static constexpr int64_t DEFAULT_RECENT_TX_WINDOW = 30000;\n+/** Default stale rate assumed for blocks with transactions in RECENT_TX_WINDOW; this gets interpreted as\n+ * the amount of income we're willing to forgo to avoid selecting recent transactions */\n+static constexpr double DEFAULT_RECENT_TX_STALE_RATE = 0.005;\n /** The maximum weight for transactions we're willing to relay/mine */\n static const unsigned int MAX_STANDARD_TX_WEIGHT = 400000;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */"
      },
      {
        "sha": "23b39b16a4d3f676144e0fdae247042679bfffd5",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72e2ab0378c2baa13b6f1e80b3adcc302787c367/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72e2ab0378c2baa13b6f1e80b3adcc302787c367/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=72e2ab0378c2baa13b6f1e80b3adcc302787c367",
        "patch": "@@ -35,6 +35,7 @@ static BlockAssembler AssemblerForTest(const CChainParams& params) {\n     options.nBlockMaxSize = MAX_BLOCK_SERIALIZED_SIZE;\n     options.blockMinFeeRate = blockMinFeeRate;\n     options.nRecentTxWindow = 0;\n+    options.dRecentTxStaleRate = 0;\n     return BlockAssembler(params, options);\n }\n "
      },
      {
        "sha": "c5dd630198f27294158eca9ef8d4109b425ea8e2",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72e2ab0378c2baa13b6f1e80b3adcc302787c367/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72e2ab0378c2baa13b6f1e80b3adcc302787c367/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=72e2ab0378c2baa13b6f1e80b3adcc302787c367",
        "patch": "@@ -43,7 +43,7 @@ def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mo\n         self.coverage_dir = coverage_dir\n         # Most callers will just need to add extra args to the standard list below. For those callers that need more flexibity, they can just set the args property directly.\n         self.extra_args = extra_args\n-        self.args = [self.binary, \"-datadir=\" + self.datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(mocktime), \"-uacomment=testnode%d\" % i]\n+        self.args = [self.binary, \"-datadir=\" + self.datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(mocktime), \"-uacomment=testnode%d\" % i, \"-recenttxstalerate=0\" ]\n \n         self.running = False\n         self.process = None"
      }
    ]
  },
  {
    "sha": "23e212410f0441730be6e288d1bc0deaa99271e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2UyMTI0MTBmMDQ0MTczMGJlNmUyODhkMWJjMGRlYWE5OTI3MWUy",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-04-04T12:14:54Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-08-16T19:00:03Z"
      },
      "message": "[qa] random_transaction can use unconfirmed inputs",
      "tree": {
        "sha": "d853feb399058d44d2cff794e4d81873018b22ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d853feb399058d44d2cff794e4d81873018b22ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23e212410f0441730be6e288d1bc0deaa99271e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23e212410f0441730be6e288d1bc0deaa99271e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23e212410f0441730be6e288d1bc0deaa99271e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23e212410f0441730be6e288d1bc0deaa99271e2/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72e2ab0378c2baa13b6f1e80b3adcc302787c367",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72e2ab0378c2baa13b6f1e80b3adcc302787c367",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72e2ab0378c2baa13b6f1e80b3adcc302787c367"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5cd1e8b49ae166d4d97b59cde5de2ff47e3e7e5d",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23e212410f0441730be6e288d1bc0deaa99271e2/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23e212410f0441730be6e288d1bc0deaa99271e2/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=23e212410f0441730be6e288d1bc0deaa99271e2",
        "patch": "@@ -390,7 +390,7 @@ def make_change(from_node, amount_in, amount_out, fee):\n         outputs[from_node.getnewaddress()] = change\n     return outputs\n \n-def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n+def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants, confirmations_required=1):\n     \"\"\"\n     Create a random transaction.\n     Returns (txid, hex-encoded-transaction-data, fee)\n@@ -399,7 +399,7 @@ def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n     to_node = random.choice(nodes)\n     fee = min_fee + fee_increment * random.randint(0, fee_variants)\n \n-    (total_in, inputs) = gather_inputs(from_node, amount + fee)\n+    (total_in, inputs) = gather_inputs(from_node, amount + fee, confirmations_required)\n     outputs = make_change(from_node, total_in, amount, fee)\n     outputs[to_node.getnewaddress()] = float(amount)\n "
      }
    ]
  },
  {
    "sha": "5b4b0854f6ee7c2c24f44b6932c920dbe6a8e45d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjRiMDg1NGY2ZWU3YzJjMjRmNDRiNjkzMmM5MjBkYmU2YThlNDVk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-04-04T12:15:26Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-08-16T19:00:03Z"
      },
      "message": "[qa] mininode.ToHex() always serializes with witness",
      "tree": {
        "sha": "6b202828ab667fc947a2bb96e9b334ee74ac0002",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b202828ab667fc947a2bb96e9b334ee74ac0002"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b4b0854f6ee7c2c24f44b6932c920dbe6a8e45d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b4b0854f6ee7c2c24f44b6932c920dbe6a8e45d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b4b0854f6ee7c2c24f44b6932c920dbe6a8e45d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b4b0854f6ee7c2c24f44b6932c920dbe6a8e45d/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23e212410f0441730be6e288d1bc0deaa99271e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23e212410f0441730be6e288d1bc0deaa99271e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23e212410f0441730be6e288d1bc0deaa99271e2"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7057a64d848f771c279376c1c0d32db0b6bcec4e",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b4b0854f6ee7c2c24f44b6932c920dbe6a8e45d/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b4b0854f6ee7c2c24f44b6932c920dbe6a8e45d/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=5b4b0854f6ee7c2c24f44b6932c920dbe6a8e45d",
        "patch": "@@ -215,7 +215,7 @@ def FromHex(obj, hex_string):\n \n # Convert a binary-serializable object to hex (eg for submission via RPC)\n def ToHex(obj):\n-    return bytes_to_hex_str(obj.serialize())\n+    return bytes_to_hex_str(obj.serialize_with_witness())\n \n # Objects that map to bitcoind objects, which can be serialized/deserialized\n \n@@ -612,6 +612,9 @@ def serialize(self, with_witness=False):\n             r += ser_vector(self.vtx)\n         return r\n \n+    def serialize_with_witness(self):\n+        return self.serialize(with_witness=True)\n+\n     # Calculate the merkle root given a vector of transaction hashes\n     @classmethod\n     def get_merkle_root(cls, hashes):"
      }
    ]
  },
  {
    "sha": "9662d42142e7efa8e5add8e6953566c95e7735cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjYyZDQyMTQyZTdlZmE4ZTVhZGQ4ZTY5NTM1NjZjOTVlNzczNWNj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-04-04T14:24:49Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-08-29T17:57:32Z"
      },
      "message": "[qa] Add functional test for CreateNewBlock",
      "tree": {
        "sha": "b8ff5c7310252d300b3530ec2d0833fd1032f742",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8ff5c7310252d300b3530ec2d0833fd1032f742"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9662d42142e7efa8e5add8e6953566c95e7735cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9662d42142e7efa8e5add8e6953566c95e7735cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9662d42142e7efa8e5add8e6953566c95e7735cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9662d42142e7efa8e5add8e6953566c95e7735cc/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b4b0854f6ee7c2c24f44b6932c920dbe6a8e45d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b4b0854f6ee7c2c24f44b6932c920dbe6a8e45d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b4b0854f6ee7c2c24f44b6932c920dbe6a8e45d"
      }
    ],
    "stats": {
      "total": 330,
      "additions": 328,
      "deletions": 2
    },
    "files": [
      {
        "sha": "064ed5bc5e2a7fa58575c34dc6780931accdaac0",
        "filename": "test/functional/createnewblock.py",
        "status": "added",
        "additions": 322,
        "deletions": 0,
        "changes": 322,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9662d42142e7efa8e5add8e6953566c95e7735cc/test/functional/createnewblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9662d42142e7efa8e5add8e6953566c95e7735cc/test/functional/createnewblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/createnewblock.py?ref=9662d42142e7efa8e5add8e6953566c95e7735cc",
        "patch": "@@ -0,0 +1,322 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test transaction selection (CreateNewBlock).\n+\n+  - Test that block max weight is respected (no blocks too big).\n+  - Test that if the mempool has a tx that fits in a block, it will always be\n+    included unless the block is within 4000 of max weight.\n+  - Test that transaction selection takes into account feerate-with-ancestors\n+    when creating blocks.\n+  - Test that recently received transactions aren't selected unless the\n+    feerate for including them is high.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.mininode import ToHex\n+from test_framework.util import (\n+    random_transaction,\n+    connect_nodes,\n+)\n+from test_framework.authproxy import JSONRPCException\n+from decimal import Decimal\n+import random\n+import time\n+\n+class CreateNewBlockTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 4\n+        self.setup_clean_chain = True\n+\n+    def setup_network(self, split=False):\n+        self.cnb_args = [{\n+            'window': 10000,\n+            'stalerate': 0.02\n+        }, {\n+            'window': 30000,\n+            'stalerate': 0.1\n+        }, {\n+            'window': 50000,\n+            'stalerate': 0.001\n+        }]\n+\n+        # Ancestor/descendant size limits are boosted because this test will\n+        # populate and sync mempools using unconfirmed transaction chains, and\n+        # failure to sync the mempool between nodes (eg due to descendant\n+        # counts differing between nodes that see transactions in different\n+        # order) will cause test failure.\n+        # Set blockmaxweight to be low, to require fewer transactions\n+        # to fill up a block.\n+        extra_args = [[\n+            \"-debug\", \"-blockmaxweight=400000\", \"-minrelaytxfee=0\",\n+            \"-limitancestorcount=100\", \"-limitdescendantcount=100\"\n+        ] for i in range(self.num_nodes)]\n+        for extra_arg, cnb_arg in zip(extra_args, self.cnb_args):\n+            extra_arg.extend([\n+                \"-recenttxwindow=%s\" % cnb_arg['window'],\n+                \"-recenttxstalerate=%s\" % cnb_arg['stalerate']\n+            ])\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir,\n+                                      extra_args)\n+\n+        # Connect the network in a loop\n+        for i in range(self.num_nodes - 1):\n+            connect_nodes(self.nodes[i], i + 1)\n+        connect_nodes(self.nodes[-1], 0)\n+\n+        self.is_network_split = False\n+\n+    def populate_mempool(self, desired_transactions):\n+        num_transactions = 0\n+        while (num_transactions < desired_transactions):\n+            try:\n+                random_amount = random.randint(1, 10) * Decimal('0.1')\n+                random_transaction(\n+                    self.nodes,\n+                    amount=random_amount,\n+                    min_fee=Decimal(\"0.00001\"),\n+                    fee_increment=Decimal(\"0.000005\"),\n+                    fee_variants=5000,\n+                    confirmations_required=0,\n+                    allow_segwit=True)\n+                num_transactions += 1\n+            except RuntimeError as e:\n+                # We might run out of funds; just count these as valid attempts\n+                if \"Insufficient funds\" in e.error['message']:\n+                    num_transactions += 1\n+                else:\n+                    raise AssertionError(\"Unexpected run time error: \" +\n+                                         e.error['message'])\n+            except JSONRPCException as e:\n+                if \"too-long-mempool\" in e.error['message']:\n+                    num_transactions += 1\n+                else:\n+                    raise AssertionError(\"Unexpected JSON-RPC error: \" +\n+                                         e.error['message'])\n+            except Exception as e:\n+                raise AssertionError(\"Unexpected exception raised: \" +\n+                                     type(e).__name__)\n+        self.sync_all()\n+\n+    # Approximate weight of the transactions in the mempool\n+    def get_mempool_weight(self, node):\n+        mempool = node.getrawmempool(verbose=True)\n+        weight = 0\n+        for txid, entry in mempool.items():\n+            # Scale by the witness multiplier, since we get vsize back\n+            weight += entry['size'] * 4\n+        return weight\n+\n+    # Requires mempool to be populated ahead of time\n+    def test_max_block_weight(self, node):\n+        block_max_weight = 400000 - 4000  # 4000 reserved for coinbase\n+        assert self.get_mempool_weight(node) > block_max_weight\n+\n+        template = node.getblocktemplate({\"rules\": [\"segwit\"]})\n+        block_weight = 0\n+        for x in template['transactions']:\n+            block_weight += x['weight']\n+        assert (block_weight > block_max_weight - 4000)\n+        assert (block_weight < block_max_weight)\n+\n+    def add_empty_block(self, node):\n+        height = node.getblockcount()\n+        tip = node.getbestblockhash()\n+        mtp = node.getblockheader(tip)['mediantime']\n+        block = create_block(\n+            int(tip, 16), create_coinbase(height + 1), mtp + 1)\n+        block.nVersion = 4\n+        block.solve()\n+        node.submitblock(ToHex(block))\n+\n+        # Log the hash to make it easier to figure out where we are in the\n+        # test, when debugging.\n+        self.log.debug(\"Added empty block %s\", block.hash)\n+\n+    # Test that transaction selection is via ancestor feerate, by showing that\n+    # it's sufficient to bump a child tx's fee to get it and its parent\n+    # included.\n+    def test_ancestor_feerate_sort(self, node, recent_tx_window):\n+\n+        # Advance time to the future, to ensure recent-transaction-filtering\n+        # isn't affecting the test.\n+        node.setmocktime(int(time.time()) + (recent_tx_window + 999) // 1000 + 1)\n+        self.add_empty_block(node)  # bypass the gbt cache\n+\n+        # Call getblocktemplate.  Find a transaction in the mempool that is not\n+        # in the block, which has exactly 1 ancestor that is also not in the\n+        # block.  Call prioritisetransaction on the child tx to boost its\n+        # ancestor feerate to be above the maximum feerate of transactions in\n+        # the last ancestor_size space in the block, and verify that the child\n+        # transaction is in the next block template.\n+        template = node.getblocktemplate({\"rules\": [\"segwit\"]})\n+        block_txids = [x[\"txid\"] for x in template[\"transactions\"]]\n+        mempool_txids = node.getrawmempool()\n+\n+        # Find a transaction that has exactly one ancestor that is also not in\n+        # the block.\n+        txid_to_bump = None\n+\n+        for txid in mempool_txids:\n+            if txid not in block_txids:\n+                ancestor_txids = node.getmempoolancestors(\n+                    txid=txid, verbose=False)\n+                if len(ancestor_txids) != 1:\n+                    continue\n+                if ancestor_txids[0] not in block_txids:\n+                    txid_to_bump = txid\n+                    break\n+            if txid_to_bump is not None:\n+                break\n+        if txid_to_bump is None:\n+            raise AssertionError(\n+                \"Can't find candidate to test ancestor feerate score (test setup bug)\"\n+            )\n+\n+        # Calculate the ancestor feerate of the candidate transaction.\n+        mempool_entry = node.getmempoolentry(txid_to_bump)\n+        ancestor_size = mempool_entry['ancestorsize']\n+        ancestor_fee = mempool_entry['ancestorfees']\n+        tx_fee = mempool_entry['modifiedfee']\n+        tx_size = mempool_entry['size']\n+        self.log.debug(\n+                \"Found txid to bump: %s, ancestor_size = %d, ancestor_fee = %f (ancestor feerate: %f) size = %d mod_fee = %d (feerate: %f)\",\n+            txid_to_bump, ancestor_size, ancestor_fee, ancestor_fee/ancestor_size, tx_size, tx_fee, tx_fee/tx_size)\n+\n+        # Determine feerate of the last ancestor_size portion of the block.\n+        cumulative_weight = 0\n+        max_feerate = 0\n+        for block_tx in reversed(template[\"transactions\"]):\n+            # The fee is the consensus correct one, not the policy modified\n+            # one, but we haven't prioritized anything yet, so this should be\n+            # fine.\n+            self.log.debug(\"End of block tx: txid %s, fee %d, weight %d\",\n+                    block_tx[\"txid\"], block_tx[\"fee\"], block_tx[\"weight\"])\n+            if 4 * block_tx[\"fee\"] / block_tx[\"weight\"] > max_feerate:\n+                max_feerate = 4 * block_tx[\"fee\"] / block_tx[\"weight\"]\n+            cumulative_weight += block_tx[\"weight\"]\n+            if cumulative_weight > 4 * ancestor_size:\n+                break\n+\n+        # Bump the candidate transaction so that it has a higher feerate than\n+        # the max feerate observed in the last portion of the block that we\n+        # seek to replace\n+        fee_bump = int(max_feerate * ancestor_size - ancestor_fee) + 1\n+        self.log.debug(\"Setting fee_bump to %d\", fee_bump)\n+\n+        node.prioritisetransaction(txid=txid_to_bump, fee_delta=fee_bump)\n+\n+        # Check that the next block template has txid_to_bump in it.\n+        self.add_empty_block(node)  # bypass the gbt cache\n+        template = node.getblocktemplate({\"rules\": [\"segwit\"]})\n+        new_block_txids = [x[\"txid\"] for x in template[\"transactions\"]]\n+\n+        assert txid_to_bump in new_block_txids\n+\n+        # Get rid of our prioritisation\n+        node.prioritisetransaction(txid=txid_to_bump, fee_delta=-fee_bump)\n+\n+    def test_recent_transactions(self):\n+        # Populate the mempool with some transactions, and compare gbt results\n+        # across the nodes.  Repeat.\n+        self.add_empty_block(self.nodes[0])  # Bypass gbt cache.\n+        self.sync_all()\n+        recent_tx_block_count = [0, 0, 0]\n+\n+        max_iterations = 20\n+        for i in range(max_iterations):\n+            self.populate_mempool(random.randint(5, 15))  # 5-15 transactions\n+\n+            # Freeze current time, so that our recent tx window calculations\n+            # will be consistent.\n+            cur_time = int(time.time())\n+            [node.setmocktime(cur_time) for node in self.nodes]\n+\n+            # Check that total block reward is within stale_rate of node3\n+            max_income = self.nodes[3].getblocktemplate({\n+                \"rules\": [\"segwit\"]\n+                })['coinbasevalue']\n+\n+            # Check that calling gbt on the given node produces a block\n+            # within the expected tolerance of max_income.\n+            # Return true if the returned block includes recent transactions;\n+            # false otherwise\n+            def check_gbt_results(node, max_income, cnb_args, cur_time):\n+                template = node.getblocktemplate({\"rules\": [\"segwit\"]})\n+                mempool = node.getrawmempool(verbose=True)\n+                stale_rate = cnb_args['stalerate']\n+                # Convert window from milliseconds to seconds\n+                window = (cnb_args['window'] + 999) // 1000\n+\n+                # We should always be within stale_rate of best possible block\n+                assert template['coinbasevalue'] >= stale_rate * max_income\n+\n+                # Check that if we're including any recent transactions, then\n+                # we achieve the max_income\n+                includes_recent_transactions = False\n+                for x in template['transactions']:\n+                    if mempool[x['txid']]['time'] > cur_time - window:\n+                        includes_recent_transactions = True\n+                        break\n+\n+                if includes_recent_transactions:\n+                    assert template['coinbasevalue'] == max_income\n+\n+                return includes_recent_transactions\n+\n+            for j in range(3):\n+                if check_gbt_results(self.nodes[j], max_income,\n+                                     self.cnb_args[j], cur_time):\n+                    recent_tx_block_count[j] += 1\n+\n+            # Drain the mempool if it gets big\n+            if self.nodes[0].getmempoolinfo()['bytes'] > 400000:\n+                self.nodes[0].generate(1)\n+            else:\n+                [node.setmocktime(0) for node in self.nodes]\n+                self.add_empty_block(self.nodes[0])\n+            self.sync_all()\n+\n+        if sum(recent_tx_block_count) == 3 * max_iterations:\n+            self.log.warn(\n+                \"Warning: every block contained recent transactions!\"\n+            )\n+        self.log.debug(recent_tx_block_count)\n+\n+    def run_test(self):\n+        # Leave IBD and generate some coins to spend.\n+        # Give everyone plenty of coins\n+        self.log.info(\"Generating initial coins for all nodes\")\n+        for i in range(2):\n+            for x in self.nodes:\n+                # Building a long blockchain here will make the block reward\n+                # smaller, compared to the fees -- this is helpful for\n+                # test_recent_transactions()\n+                x.generate(201)\n+                self.sync_all()\n+\n+        # Run tests...\n+        self.log.info(\"Populating mempool with a lot of transactions\")\n+        self.populate_mempool(300)\n+\n+        self.log.info(\"Running recent transactions test\")\n+        self.test_recent_transactions()\n+\n+        self.log.info(\"Repopulating mempool\")\n+        self.populate_mempool(500)\n+\n+        self.log.info(\"Running test_max_block_weight\")\n+        self.test_max_block_weight(self.nodes[0])\n+\n+        self.sync_all()\n+\n+        self.log.info(\"Running test_ancestor_feerate_sort\")\n+        self.test_ancestor_feerate_sort(\n+            self.nodes[0], recent_tx_window=self.cnb_args[0]['window'])\n+\n+\n+if __name__ == \"__main__\":\n+    CreateNewBlockTest().main()"
      },
      {
        "sha": "54d8ebec6e6ca7cbfef51227ce0b7daa263d9c43",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9662d42142e7efa8e5add8e6953566c95e7735cc/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9662d42142e7efa8e5add8e6953566c95e7735cc/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=9662d42142e7efa8e5add8e6953566c95e7735cc",
        "patch": "@@ -390,7 +390,7 @@ def make_change(from_node, amount_in, amount_out, fee):\n         outputs[from_node.getnewaddress()] = change\n     return outputs\n \n-def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants, confirmations_required=1):\n+def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants, confirmations_required=1, allow_segwit=False):\n     \"\"\"\n     Create a random transaction.\n     Returns (txid, hex-encoded-transaction-data, fee)\n@@ -401,7 +401,10 @@ def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants, conf\n \n     (total_in, inputs) = gather_inputs(from_node, amount + fee, confirmations_required)\n     outputs = make_change(from_node, total_in, amount, fee)\n-    outputs[to_node.getnewaddress()] = float(amount)\n+    if (allow_segwit and random.randint(0, 1)):\n+        outputs[to_node.addwitnessaddress(to_node.getnewaddress())] = float(amount)\n+    else:\n+        outputs[to_node.getnewaddress()] = float(amount)\n \n     rawtx = from_node.createrawtransaction(inputs, outputs)\n     signresult = from_node.signrawtransaction(rawtx)"
      },
      {
        "sha": "eeabda38290daa37273a001bc5ca68684518193d",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9662d42142e7efa8e5add8e6953566c95e7735cc/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9662d42142e7efa8e5add8e6953566c95e7735cc/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=9662d42142e7efa8e5add8e6953566c95e7735cc",
        "patch": "@@ -132,6 +132,7 @@\n     'maxuploadtarget.py',\n     'mempool_packages.py',\n     'dbcrash.py',\n+    'createnewblock.py',\n     # vv Tests less than 2m vv\n     'bip68-sequence.py',\n     'getblocktemplate_longpoll.py',"
      }
    ]
  },
  {
    "sha": "97d439af0feb8b4ccc34e7226cd11a791393c93a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2Q0MzlhZjBmZWI4YjRjY2MzNGU3MjI2Y2QxMWE3OTEzOTNjOTNh",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-08-31T17:41:47Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-08-31T17:41:47Z"
      },
      "message": "Make some BlockAssembler methods const",
      "tree": {
        "sha": "c344ca0cb4cf5b4e0b1ed16a172633b095e391c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c344ca0cb4cf5b4e0b1ed16a172633b095e391c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97d439af0feb8b4ccc34e7226cd11a791393c93a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97d439af0feb8b4ccc34e7226cd11a791393c93a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97d439af0feb8b4ccc34e7226cd11a791393c93a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97d439af0feb8b4ccc34e7226cd11a791393c93a/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9662d42142e7efa8e5add8e6953566c95e7735cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9662d42142e7efa8e5add8e6953566c95e7735cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9662d42142e7efa8e5add8e6953566c95e7735cc"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 14,
      "deletions": 14
    },
    "files": [
      {
        "sha": "9e165010916393aa95d799ce97ab0dbbe0fa5b22",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97d439af0feb8b4ccc34e7226cd11a791393c93a/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97d439af0feb8b4ccc34e7226cd11a791393c93a/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=97d439af0feb8b4ccc34e7226cd11a791393c93a",
        "patch": "@@ -255,7 +255,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     return std::move(winner->pblocktemplate);\n }\n \n-void BlockAssembler::onlyUnconfirmed(WorkingState &workState, CTxMemPool::setEntries& testSet)\n+void BlockAssembler::onlyUnconfirmed(WorkingState &workState, CTxMemPool::setEntries& testSet) const\n {\n     for (CTxMemPool::setEntries::iterator iit = testSet.begin(); iit != testSet.end(); ) {\n         // Only test txs not already in the block\n@@ -283,7 +283,7 @@ bool BlockAssembler::TestPackage(const WorkingState &workState, uint64_t package\n // - premature witness (in case segwit transactions are added to mempool before\n //   segwit activation)\n // - serialized size (in case -blockmaxsize is in use)\n-bool BlockAssembler::TestPackageTransactions(WorkingState &workState, const CTxMemPool::setEntries& package)\n+bool BlockAssembler::TestPackageTransactions(WorkingState &workState, const CTxMemPool::setEntries& package) const\n {\n     uint64_t nPotentialBlockSize = workState.nBlockSize; // only used with fNeedSizeAccounting\n     for (const CTxMemPool::txiter it : package) {\n@@ -302,7 +302,7 @@ bool BlockAssembler::TestPackageTransactions(WorkingState &workState, const CTxM\n     return true;\n }\n \n-void BlockAssembler::AddToBlock(WorkingState &workState, CTxMemPool::txiter iter)\n+void BlockAssembler::AddToBlock(WorkingState &workState, CTxMemPool::txiter iter) const\n {\n     workState.pblock->vtx.emplace_back(iter->GetSharedTx());\n     workState.pblocktemplate->vTxFees.push_back(iter->GetFee());\n@@ -394,7 +394,7 @@ void BlockAssembler::RemoveRecentTransactionsFromBlockAndUpdatePackages(WorkingS\n }\n \n int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded,\n-        indexed_modified_transaction_set &mapModifiedTx)\n+        indexed_modified_transaction_set &mapModifiedTx) const\n {\n     int nDescendantsUpdated = 0;\n     for (const CTxMemPool::txiter it : alreadyAdded) {\n@@ -431,13 +431,13 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n // guaranteed to fail again, but as a belt-and-suspenders check we put it in\n // failedTx and avoid re-evaluation, since the re-evaluation would be using\n // cached size/sigops/fee values that are not actually correct.\n-bool BlockAssembler::SkipMapTxEntry(WorkingState &workState, CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)\n+bool BlockAssembler::SkipMapTxEntry(WorkingState &workState, CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx) const\n {\n     assert (it != mempool.mapTx.end());\n     return mapModifiedTx.count(it) || workState.inBlock.count(it) || failedTx.count(it);\n }\n \n-void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries)\n+void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries) const\n {\n     // Sort package by ancestor count\n     // If a transaction A depends on transaction B, then A's ancestor count\n@@ -458,7 +458,7 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemP\n // Each time through the loop, we compare the best transaction in\n // mapModifiedTxs with the next transaction in the mempool to decide what\n // transaction package to work on next.\n-void BlockAssembler::addPackageTxs(WorkingState &workState, int &nPackagesSelected, int &nDescendantsUpdated, int64_t nTimeCutoff, indexed_modified_transaction_set &mapModifiedTx)\n+void BlockAssembler::addPackageTxs(WorkingState &workState, int &nPackagesSelected, int &nDescendantsUpdated, int64_t nTimeCutoff, indexed_modified_transaction_set &mapModifiedTx) const\n {\n     // Keep track of entries that failed inclusion, to avoid duplicate work\n     CTxMemPool::setEntries failedTx;"
      },
      {
        "sha": "ca67dd405d8c6f32b18c17d76a3e6d19d6a137ab",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97d439af0feb8b4ccc34e7226cd11a791393c93a/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97d439af0feb8b4ccc34e7226cd11a791393c93a/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=97d439af0feb8b4ccc34e7226cd11a791393c93a",
        "patch": "@@ -221,7 +221,7 @@ class BlockAssembler\n private:\n     // utility functions\n     /** Add a tx to the block */\n-    void AddToBlock(WorkingState &workState, CTxMemPool::txiter iter);\n+    void AddToBlock(WorkingState &workState, CTxMemPool::txiter iter) const;\n     /** Remove recent transactions from a block, including any descendants */\n     void RemoveRecentTransactionsFromBlockAndUpdatePackages(WorkingState &workState, int64_t timeCutoff, indexed_modified_transaction_set &mapModifiedTx);\n \n@@ -231,27 +231,27 @@ class BlockAssembler\n       * statistics from the package selection (for logging statistics).\n      *  mapModifiedTx will track the updated ancestor feerate score of\n      *  not-in-block transactions that have parents in the block */\n-    void addPackageTxs(WorkingState &workState, int &nPackagesSelected, int &nDescendantsUpdated, int64_t nTimeCutoff, indexed_modified_transaction_set &mapModifiedTx);\n+    void addPackageTxs(WorkingState &workState, int &nPackagesSelected, int &nDescendantsUpdated, int64_t nTimeCutoff, indexed_modified_transaction_set &mapModifiedTx) const;\n \n     // helper functions for addPackageTxs()\n     /** Remove confirmed (inBlock) entries from given set */\n-    void onlyUnconfirmed(WorkingState &workState, CTxMemPool::setEntries& testSet);\n+    void onlyUnconfirmed(WorkingState &workState, CTxMemPool::setEntries& testSet) const;\n     /** Test if a new package would \"fit\" in the block */\n     bool TestPackage(const WorkingState &workState, uint64_t packageSize, int64_t packageSigOpsCost) const;\n     /** Perform checks on each transaction in a package:\n       * locktime, premature-witness, serialized size (if necessary)\n       * These checks should always succeed, and they're here\n       * only as an extra check in case of suboptimal node configuration */\n-    bool TestPackageTransactions(WorkingState &workState, const CTxMemPool::setEntries& package);\n+    bool TestPackageTransactions(WorkingState &workState, const CTxMemPool::setEntries& package) const;\n     /** Return true if given transaction from mapTx has already been evaluated,\n       * or if the transaction's cached data in mapTx is incorrect. */\n-    bool SkipMapTxEntry(WorkingState &workState, CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx);\n+    bool SkipMapTxEntry(WorkingState &workState, CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx) const;\n     /** Sort the package in an order that is valid to appear in a block */\n-    void SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries);\n+    void SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries) const;\n     /** Add descendants of given transactions to mapModifiedTx with ancestor\n       * state updated assuming given transactions are inBlock. Returns number\n       * of updated descendants. */\n-    int UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded, indexed_modified_transaction_set &mapModifiedTx);\n+    int UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded, indexed_modified_transaction_set &mapModifiedTx) const;\n };\n \n /** Modify the extranonce in a block */"
      }
    ]
  },
  {
    "sha": "c94248c9105e0a998ef58a6248e170a77cc330f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTQyNDhjOTEwNWUwYTk5OGVmNThhNjI0OGUxNzBhNzdjYzMzMGYy",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-08-31T18:02:16Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-08-31T18:02:16Z"
      },
      "message": "fixup! Mining: configure 'recency' and 'stale rate' from command line",
      "tree": {
        "sha": "360a2a932fa3e8444f746b68e62679a3a25fe8af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/360a2a932fa3e8444f746b68e62679a3a25fe8af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c94248c9105e0a998ef58a6248e170a77cc330f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c94248c9105e0a998ef58a6248e170a77cc330f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c94248c9105e0a998ef58a6248e170a77cc330f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c94248c9105e0a998ef58a6248e170a77cc330f2/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97d439af0feb8b4ccc34e7226cd11a791393c93a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97d439af0feb8b4ccc34e7226cd11a791393c93a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97d439af0feb8b4ccc34e7226cd11a791393c93a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a6180c5d1300d11d4c42c31f77f99375b69ebae8",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c94248c9105e0a998ef58a6248e170a77cc330f2/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c94248c9105e0a998ef58a6248e170a77cc330f2/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=c94248c9105e0a998ef58a6248e170a77cc330f2",
        "patch": "@@ -66,7 +66,7 @@ BlockAssembler::Options::Options() {\n     blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n     nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;\n     nBlockMaxSize = DEFAULT_BLOCK_MAX_SIZE;\n-    nRecentTxWindow = DEFAULT_RECENT_TX_WINDOW;\n+    nRecentTxWindow = (DEFAULT_RECENT_TX_WINDOW + 999) / 1000;\n     dRecentTxStaleRate = DEFAULT_RECENT_TX_STALE_RATE;\n }\n "
      }
    ]
  },
  {
    "sha": "35882579ba4e2ad8f524514a28eb94dfcf59140d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTg4MjU3OWJhNGUyYWQ4ZjUyNDUxNGEyOGViOTRkZmNmNTkxNDBk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-08-31T18:17:34Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-08-31T18:17:34Z"
      },
      "message": "fixup! Skip recent transactions in CNB if fee difference is small",
      "tree": {
        "sha": "5614298e823518aee860461d4e49f458fc88b58c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5614298e823518aee860461d4e49f458fc88b58c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35882579ba4e2ad8f524514a28eb94dfcf59140d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35882579ba4e2ad8f524514a28eb94dfcf59140d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/35882579ba4e2ad8f524514a28eb94dfcf59140d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35882579ba4e2ad8f524514a28eb94dfcf59140d/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c94248c9105e0a998ef58a6248e170a77cc330f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c94248c9105e0a998ef58a6248e170a77cc330f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c94248c9105e0a998ef58a6248e170a77cc330f2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d7b3931b82049721986b5aa6928ff26c1cac5d61",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35882579ba4e2ad8f524514a28eb94dfcf59140d/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35882579ba4e2ad8f524514a28eb94dfcf59140d/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=35882579ba4e2ad8f524514a28eb94dfcf59140d",
        "patch": "@@ -350,7 +350,7 @@ void BlockAssembler::RemoveRecentTransactionsFromBlockAndUpdatePackages(WorkingS\n         assert(it != mempool.mapTx.end());\n         // Keep any transactions that are sufficiently old, but skip transactions\n         // that depend on removed transactions.  (Note that it's technically\n-        // possible for a child tx to have a newer arrival time than its\n+        // possible for a child tx to have an older arrival time than its\n         // parent, eg after a reorg.)\n         if (it->GetTime() <= timeCutoff && descendantTransactions.count(it) == 0) {\n             vtxCopy.push_back(ptx);"
      }
    ]
  },
  {
    "sha": "497ae4844922caf4e2244b847a5a63fd2d1a999a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTdhZTQ4NDQ5MjJjYWY0ZTIyNDRiODQ3YTVhNjNmZDJkMWE5OTlh",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-09-05T19:40:17Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-09-05T19:40:17Z"
      },
      "message": "fixup! [qa] Add functional test for CreateNewBlock",
      "tree": {
        "sha": "205f368369ea493070bab0623bbc8932da3b7c16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/205f368369ea493070bab0623bbc8932da3b7c16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/497ae4844922caf4e2244b847a5a63fd2d1a999a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/497ae4844922caf4e2244b847a5a63fd2d1a999a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/497ae4844922caf4e2244b847a5a63fd2d1a999a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/497ae4844922caf4e2244b847a5a63fd2d1a999a/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35882579ba4e2ad8f524514a28eb94dfcf59140d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35882579ba4e2ad8f524514a28eb94dfcf59140d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35882579ba4e2ad8f524514a28eb94dfcf59140d"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 15,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8010fe8f1c2ce2527a909dedb4e5d0b242f428b8",
        "filename": "test/functional/createnewblock.py",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/497ae4844922caf4e2244b847a5a63fd2d1a999a/test/functional/createnewblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/497ae4844922caf4e2244b847a5a63fd2d1a999a/test/functional/createnewblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/createnewblock.py?ref=497ae4844922caf4e2244b847a5a63fd2d1a999a",
        "patch": "@@ -25,9 +25,13 @@\n import random\n import time\n \n+\n class CreateNewBlockTest(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n+        self.set_test_params()\n+\n+    def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n@@ -157,7 +161,13 @@ def test_ancestor_feerate_sort(self, node, recent_tx_window):\n         mempool_txids = node.getrawmempool()\n \n         # Find a transaction that has exactly one ancestor that is also not in\n-        # the block.\n+        # the block. Exactly one ancestor is required so that we aren't trying\n+        # to fee bump something that has, eg, one in-block ancestors and one\n+        # not-in-block ancestor, because in such a situation the package feerate\n+        # used in CreateNewBlock will not be the ancestor feerate we get from\n+        # looking up the transaction in the mempool; it'll be modified by the\n+        # in-block parent.  Consequently we could bump the feerate by too little\n+        # fee in the test, causing test failure.\n         txid_to_bump = None\n \n         for txid in mempool_txids:\n@@ -244,7 +254,7 @@ def test_recent_transactions(self):\n             # within the expected tolerance of max_income.\n             # Return true if the returned block includes recent transactions;\n             # false otherwise\n-            def check_gbt_results(node, max_income, cnb_args, cur_time):\n+            def check_gbt_results(node, cnb_args):\n                 template = node.getblocktemplate({\"rules\": [\"segwit\"]})\n                 mempool = node.getrawmempool(verbose=True)\n                 stale_rate = cnb_args['stalerate']\n@@ -268,8 +278,7 @@ def check_gbt_results(node, max_income, cnb_args, cur_time):\n                 return includes_recent_transactions\n \n             for j in range(3):\n-                if check_gbt_results(self.nodes[j], max_income,\n-                                     self.cnb_args[j], cur_time):\n+                if check_gbt_results(self.nodes[j], self.cnb_args[j]):\n                     recent_tx_block_count[j] += 1\n \n             # Drain the mempool if it gets big\n@@ -284,6 +293,8 @@ def check_gbt_results(node, max_income, cnb_args, cur_time):\n             self.log.warn(\n                 \"Warning: every block contained recent transactions!\"\n             )\n+        if sum(recent_tx_block_count) == 0:\n+            self.log.warn(\"Warning: no block contained recent transactions!\")\n         self.log.debug(recent_tx_block_count)\n \n     def run_test(self):"
      }
    ]
  }
]