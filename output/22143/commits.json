[
  {
    "sha": "c9e73928e6eeab9e16d88efd06ccae2501fd97b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWU3MzkyOGU2ZWVhYjllMTZkODhlZmQwNmNjYWUyNTAxZmQ5N2I0",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-06-03T13:34:55Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-06-03T15:15:58Z"
      },
      "message": "p2p: pass spans in CNetAddr by reference to const",
      "tree": {
        "sha": "2068d464bf7ccafed0c8fe51a9e8716f3d6af844",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2068d464bf7ccafed0c8fe51a9e8716f3d6af844"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9e73928e6eeab9e16d88efd06ccae2501fd97b4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmC48k8ACgkQT1chs9Dj\nkh0VYhAAjd+6r4+uOslfDQ8+HTly5evHTfJ7/XS2XO4qxLDif+12k+pc9d8OrW3U\nlYFsItJILw52qe85ybJcfXV4agWkFTXVcj0ZevxcTbQuC8X1FT25F2uMyN74+vqa\nEThcSG+dhNC9pJC8IO/Mcv6lEB+b7FOuLRVPf4FpcT/Rk/Y72VHmbXC9+vOMYV5d\nv3t9leli7SjXHWluTYUALlbU8x/ABqPDyiEKjl5fieq12R1lHk90n3J1FSryUk0B\n6YcVVfMC+NcK9CkTB6mhkox8DUJn/9P6WTJhlhj8eO9mzmHt8OWksFOKyVABOJCN\npyP50wTTtTk5OQkSc27bzcEbmxR/UYAIfGY0jQVxWF/QVt5tiD7Ls7XtyLC9Dkfc\n/0Vr7dPsM5dcfvDUmqO8ZdUBkUVX+/IFtVHDyZLf8+jdQpqRtUz9cdytqlpV7pAB\nZ6cLa5R4Xma0qT0m+DnYigRkLt0Y4rvmKOK707rLx3TTFRH5nqREtrt+s45Ri6Ar\nnOqSPHTJr/ReHVT0UIJf7JiH4TnYws6hf5m6677PTpP/BeqgiumMxAdIwUylycTg\natqNMoqJMI8DGpZTWCllnbHsihZ4CpIvpqm1E9pxxnsMR1pv0yx3jsjLEVN+bIrH\nDE5ZlAeI2TqOy/ubZK6Wl8NyDWVDD4OX7YAQeTZzhco574IVIkw=\n=oG/D\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIKwo8AiiBJDGsBzJuEG8rdWRuzk6gQzrt5mdutANHFIICP/wEEHs5Ck627jS\nVlLZZi7VTdAI8QRguPJQ8Aiju+Zznx1upgCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEEv/oTLM7+OTbclDd/04\nb40I8QRguPJQ8AhFfH16/N8j8gCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BB1scwQgwQEeaahbLm1noJECPEE\nYLjyUPAIX2dOfTmUdFMAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNh\ndGFsbGF4eS5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 2068d464bf7ccafed0c8fe51a9e8716f3d6af844\nparent 6fe012c6bd6a7977281df0b9292dc9c684915aba\nauthor Jon Atack <jon@atack.com> 1622727295 +0200\ncommitter Jon Atack <jon@atack.com> 1622733358 +0200\n\np2p: pass spans in CNetAddr by reference to const\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9e73928e6eeab9e16d88efd06ccae2501fd97b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9e73928e6eeab9e16d88efd06ccae2501fd97b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9e73928e6eeab9e16d88efd06ccae2501fd97b4/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fe012c6bd6a7977281df0b9292dc9c684915aba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fe012c6bd6a7977281df0b9292dc9c684915aba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fe012c6bd6a7977281df0b9292dc9c684915aba"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "8f4607e59566ae7aa00c088469ddde79d1b7cce7",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9e73928e6eeab9e16d88efd06ccae2501fd97b4/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9e73928e6eeab9e16d88efd06ccae2501fd97b4/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=c9e73928e6eeab9e16d88efd06ccae2501fd97b4",
        "patch": "@@ -150,7 +150,7 @@ void CNetAddr::SetIP(const CNetAddr& ipIn)\n     m_addr = ipIn.m_addr;\n }\n \n-void CNetAddr::SetLegacyIPv6(Span<const uint8_t> ipv6)\n+void CNetAddr::SetLegacyIPv6(const Span<const uint8_t>& ipv6)\n {\n     assert(ipv6.size() == ADDR_IPV6_SIZE);\n \n@@ -200,7 +200,7 @@ static constexpr size_t CHECKSUM_LEN = 2;\n static const unsigned char VERSION[] = {3};\n static constexpr size_t TOTAL_LEN = ADDR_TORV3_SIZE + CHECKSUM_LEN + sizeof(VERSION);\n \n-static void Checksum(Span<const uint8_t> addr_pubkey, uint8_t (&checksum)[CHECKSUM_LEN])\n+static void Checksum(const Span<const uint8_t>& addr_pubkey, uint8_t (&checksum)[CHECKSUM_LEN])\n {\n     // TORv3 CHECKSUM = H(\".onion checksum\" | PUBKEY | VERSION)[:2]\n     static const unsigned char prefix[] = \".onion checksum\";\n@@ -260,9 +260,9 @@ bool CNetAddr::SetTor(const std::string& addr)\n         m_addr.assign(input.begin(), input.end());\n         return true;\n     case torv3::TOTAL_LEN: {\n-        Span<const uint8_t> input_pubkey{input.data(), ADDR_TORV3_SIZE};\n-        Span<const uint8_t> input_checksum{input.data() + ADDR_TORV3_SIZE, torv3::CHECKSUM_LEN};\n-        Span<const uint8_t> input_version{input.data() + ADDR_TORV3_SIZE + torv3::CHECKSUM_LEN, sizeof(torv3::VERSION)};\n+        const Span<const uint8_t> input_pubkey{input.data(), ADDR_TORV3_SIZE};\n+        const Span<const uint8_t> input_checksum{input.data() + ADDR_TORV3_SIZE, torv3::CHECKSUM_LEN};\n+        const Span<const uint8_t> input_version{input.data() + ADDR_TORV3_SIZE + torv3::CHECKSUM_LEN, sizeof(torv3::VERSION)};\n \n         if (input_version != torv3::VERSION) {\n             return false;\n@@ -551,14 +551,14 @@ enum Network CNetAddr::GetNetwork() const\n     return m_net;\n }\n \n-static std::string IPv4ToString(Span<const uint8_t> a)\n+static std::string IPv4ToString(const Span<const uint8_t>& a)\n {\n     return strprintf(\"%u.%u.%u.%u\", a[0], a[1], a[2], a[3]);\n }\n \n // Return an IPv6 address text representation with zero compression as described in RFC 5952\n // (\"A Recommendation for IPv6 Address Text Representation\").\n-static std::string IPv6ToString(Span<const uint8_t> a, uint32_t scope_id)\n+static std::string IPv6ToString(const Span<const uint8_t>& a, uint32_t scope_id)\n {\n     assert(a.size() == ADDR_IPV6_SIZE);\n     const std::array groups{"
      },
      {
        "sha": "af5eb08e7fda32d567cfce9e3a52734cdd75ee93",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9e73928e6eeab9e16d88efd06ccae2501fd97b4/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9e73928e6eeab9e16d88efd06ccae2501fd97b4/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=c9e73928e6eeab9e16d88efd06ccae2501fd97b4",
        "patch": "@@ -147,7 +147,7 @@ class CNetAddr\n          * (e.g. IPv4) disguised as IPv6. This encoding is used in the legacy\n          * `addr` encoding.\n          */\n-        void SetLegacyIPv6(Span<const uint8_t> ipv6);\n+        void SetLegacyIPv6(const Span<const uint8_t>& ipv6);\n \n         bool SetInternal(const std::string& name);\n "
      }
    ]
  }
]