JeremyRubin,2020-01-27 22:09:34,"Strong concept ACK! Seems like a big improvement.\n\nCan you comment more on the 6 seconds claim? AFAIK each bench was supposed to target running for 1 second? Is this no longer required to reduce variance?\n\n\nSecondly -- and separately -- can you comment on how this might impact the need for something like #17375? Can we add better support for benchmarks where we want to run with different",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-578978817,578978817,
martinus,2020-01-27 22:21:27,"I calculate a good number of iterations based on the clock accuracy, then perform these iterations a few times and use the median to get rid of outliers. I found it actually to be more reliable with shorter runs, because there is less chance for random fluctuations to interfer. It is necessary though to disable frequency scaling etc (but this should be done with the old framework too anyways). Thi",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-578983430,578983430,
DrahtBot,2020-01-28 01:49:02,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19377 (bench: Add OrphanTxPool benchmark by hebasto)\n* #19326 (Simplify hash.h interface using Spans by sipa)\n* #19280 ",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579041181,579041181,
martinus,2020-01-28 07:00:27,"The lint check currently fails with this error:\n\n> fatal: bad revision '8b138526b5dc...488d538cbf6f'\n\nI believe the reason is some key verification check at the end of ci/lint/06_script.sh, but I can't really say why this is failing",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579108323,579108323,
MarcoFalke,2020-01-28 15:05:07,"Concept ACK\n\n\n\nThe travis failure is\n\n```\nThe locale dependent function std::to_string(...) appears to be used:\n\nsrc/bench/nanobench.h:            auto sysCpu = ""/sys/devices/system/cpu/cpu"" + std::to_string(id);\n\nsrc/bench/nanobench.h:                warnings.emplace_back(""CPU frequency scaling enabled: CPU "" + std::to_string(id) + "" between "" +\n\nUnnecessary locale depen",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579288765,579288765,
jamesob,2020-01-28 15:24:58,"Would it be easy to hack in csv output that is somewhat similar to the existing output? The markdown table looks a little tricky to parse programmatically (though it could be done). For example, bitcoinperf (https://github.com/chaincodelabs/bitcoinperf) currently relies on this format. ",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579298846,579298846,
martinus,2020-01-28 15:53:10,"> The locale dependent function std::to_string(...) appears to be used:\n\nAh, ok I'll fix this\n\n> Would it be easy to hack in csv output that is somewhat similar to the existing output?\n\nI think it should be easy, in nanobench I already have CSV & JSON output format using [mustache-like templates](https://github.com/martinus/nanobench/blob/master/docs/reference.md#processing-results), s",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579315933,579315933,
practicalswift,2020-01-28 16:49:12,"Strong concept ACK\n\n@martinus, thanks for your great contributions! Please keep them coming :)",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579345876,579345876,
elichai,2020-01-28 17:02:35,"Does this library also does memory clobbers and barriers? (like google's `DoNotOptimize`[0], `ClobberMemory`[1], or Rust's `black_box`[2])\n\n[0] https://github.com/google/benchmark/blob/master/include/benchmark/benchmark.h#L307\n[1] https://github.com/google/benchmark/blob/master/include/benchmark/benchmark.h#L326\n[2] https://doc.rust-lang.org/std/hint/fn.black_box.html",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579352138,579352138,
martinus,2020-01-28 17:11:37,"> Does this library also does memory clobbers and barriers? (like google's `DoNotOptimize`[0], `ClobberMemory`[1], or Rust's `black_box`[2])\n\nI currently have `doNotOptimizeAway`, which is based on [folly](https://github.com/facebook/folly/blob/master/folly/Benchmark.h)'s benchmark. I think folly's version is based on google benchmark. I have not added `doNotOptimizeAway` calls in the PR becau",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579356379,579356379,
JeremyRubin,2020-01-28 20:11:21,"Is it possible to make the nanobench include a submodule (like secp256k1 or univalue) so that it's easier for us to pull in updates from upstream? If you plan on adding new features to nanobench, that should help streamline review potentially. If you think that there will be Bitcoin specific changes made to the header that you wouldn't want to upstream, then I would leave it as you've done.",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579433076,579433076,
JeremyRubin,2020-01-28 20:21:43,"Closed https://github.com/bitcoin/bitcoin/pull/17375 in favor of nanobench. When you have time would love assistance in making the asymptotic test introduced there nanobench compatible.\n\n\nBeing able to run asymptotic tests on the code is going to be a huge help with advocating for mempool policy changes in the future (e.g., loosening descendants limit) once the epoch mempool work is complete",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579437431,579437431,
martinus,2020-01-29 09:46:35,"> Is it possible to make the nanobench include a submodule (like secp256k1 or univalue)\n\nI think it should be possible, I need to read up how git-subtree works... I prefer if nanobench stays generic, and try to implement bitcoin's requirement in a generic way so it's usable by others too. So no separate repository if possible.\n\n> When you have time would love assistance in making the asymp",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579675970,579675970,
elichai,2020-01-29 09:52:52,"Haven't looked at the library itself yet, but Concept ACK on replacing the current framework. (I really dislike it)\nPersonally I also would've been fine with dynamically linking against google's benchmarking library (https://github.com/google/benchmark)",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579678349,579678349,
martinus,2020-01-29 11:46:43,">  Personally I also would've been fine with dynamically linking against google's benchmarking library (https://github.com/google/benchmark)\n\nI don't think google benchmark is viable here. It's a large dependency, and you also need to use the gtest framework for this. It would be quite a big change.",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-579719346,579719346,
Empact,2020-01-30 03:16:17,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-580065007,580065007,
JeremyRubin,2020-01-30 20:15:47,"We discussed nanobench today in the IRC Meeting. There's seems to be general agreement that this is a nice idea, and that the current bench framework isn't perfect.\n\nOur current bench framework is actually based on Google's, and I think most people are opposed to linking google's whole thing.\n\nWith respect to the question of if to subtree or not: let's ignore that for now, copied in is fin",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-580440077,580440077,
martinus,2020-01-30 21:50:36,"Thanks for the summary! I just read through the log [here](http://www.erisian.com.au/meetbot/bitcoin-core-dev/2020/bitcoin-core-dev.2020-01-30-19.00.log.html) and think I can add a few clarifications:\n\n> I think if we can do a cursory check it's not actually malware\n\nIt's not malware, not sure how I can help here :) I've created nanobench because I was annoyed at how difficult other benchm",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-580477347,580477347,
martinus,2020-02-20 16:17:10,"I've rebased & pushed a big update to the code. In addition to the markdown output, I also generate a file `benchmarkresults.csv` which has practically the same content as the output had previously. This should can be used by any tools that rely on the benchmark output. On my computer, the file has this output:\n\n```\n# Benchmark, evals, iterations, total, min, max, median\nAssembleBlock, 11,",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-589162113,589162113,
JeremyRubin,2020-02-20 18:55:35,"utACK 83a7839\n\nVerified that only benchmarks are effected, checked that the high level design seems reasonable & an improvement over what we do presently.",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-589251617,589251617,
martinus,2020-02-20 21:47:19,"In bf5ae5e I've added some support for asymptotes. I hope that's somewhat similar to what you did in #17375, @JeremyRubin?\n\nUsage is e.g. like this:\n\n```\n./bench_bitcoin -filter=ComplexMemPool -asymptote=25,50,100,200,400,600,800\n```\n\nThis runs the benchmark `ComplexMemPool` several times but with  different complexityN settings. The benchmark can extract that number and use it acc",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-589335251,589335251,
JeremyRubin,2020-02-20 22:51:36,"utACK bf5ae5e\n\nbravo!",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-589392669,589392669,
Empact,2020-03-01 09:44:44,ACK https://github.com/bitcoin/bitcoin/pull/18011/commits/c2e924fc046110eb7ac5ab7bf19cfaf6daf1c44b,https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-593076531,593076531,
martinus,2020-03-08 07:22:41,"I've pushed a few updates:\n\n* updated `nanobench.h` with a (bit) faster RNG, and explicit constructors so `extended-lint-all.h` doesn't complain any more\n* add command line options `-output_csv` to enable creation of legacy CSV file\n* add command line optoin `-output_json` to create a big JSON with all data\n\nNot sure if I should squash all the changes into a single commit or leave the ",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-596175247,596175247,
jonatack,2020-03-08 09:55:22,"Perhaps the `gArgs.AddArg(""-list"")` fix and the ""comment nits"" changes ought to be in 79fd93a where they are first changed rather than 51b83e1 and 9d6eb72. Alternatively, with 2 ACKs it may have been good to rebase with no changes to preserve existing review and do the rest in a follow-up PR (I'm not sure).",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-596186855,596186855,
martinus,2020-03-28 07:32:43,rebased,https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-605408603,605408603,
MarcoFalke,2020-04-09 14:55:54,"I tried running this locally, and it seems I am getting varying results:\n\n```\nmac-mini:bitcoin-core marco$ git log -1 && make -j 9 && ./src/bench/bench_bitcoin --filter=VerifyNestedIfScript\ncommit a841d1e25b1b26b6381f36e14307c2549a79edb4 (HEAD)\nAuthor: Martin Ankerl <martin.ankerl@gmail.com>\nDate:   Sun Mar 8 16:20:55 2020 +0100\n\n    remove unnecessary include util/time.h\nMaking ",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-611573379,611573379,
MarcoFalke,2020-04-09 14:57:48,"Notably:\n\n* Consecutive runs are off by a factor of 2\n* There is a warning `Warning, results might be unstable: NDEBUG not defined, assert() macros are evaluated`, but I think it is impossible to compile Bitcoin Core with assert disabled\n* There is a warning from the framework itself: `:wavy_dash: `VerifyNestedIfScript` (Unstable with ~1.0 iters. Increase `minEpochIterations` to e.g. 10)`",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-611574488,611574488,
martinus,2020-06-13 11:03:41,"I've finally found the time to rebased my branch with a major update of nanobench, and updated the new benchmarks too.\n\n@MarcoFalke, I am pretty sure your instability comes from CPU frequency scaling / turbo mode. For nanobench to be able to have accurate runtime results it needs a CPU locked to fixed frequency. Under Linux I print warnings & suggestions if I detect this, but I don't have such",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-643607657,643607657,
JeremyRubin,2020-06-13 18:33:48,"utack 78c312c.\n\n@MarcoFalke can you repeat your benchmark after running pyperf system tune?",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-643660924,643660924,
dongcarl,2020-07-02 19:37:00,"@martinus While going thru this in July 2nd, 2020's meeting, I believe people were wondering what the support is like for non x86 architectures. Would it fail to compile? Have limited functionality? Or fail at runtime?",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-653187037,653187037,
laanwj,2020-07-02 21:37:15,"FWIW, I could compile and run this PR (as merged on master) on RV64. It doesn't seem there is any compatibility issue as was implied by the travis run.\n\nConcept ACK.",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-653230966,653230966,
martinus,2020-07-03 07:10:02,"> @martinus While going thru this in July 2nd, 2020's meeting, I believe people were wondering what the support is like for non x86 architectures. Would it fail to compile? Have limited functionality? Or fail at runtime?\n\nThe CPU statistics like instructions, cycles, branch misspredictions are only available on Linux through perf events. But it should compile on any platform with C++11 support",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-653390772,653390772,
fjahr,2020-07-10 20:51:37,"Concept ACK\n\nSo far I have built the PR and run some tests without any problems.",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-656884602,656884602,
laanwj,2020-07-30 13:33:49,ACK 78c312c983255e15fc274de2368a2ec13ce81cbf,https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-666367610,666367610,
laanwj,2020-07-30 13:45:40,"I've merged this because there was unanimous agreement that we want the new benchmark framework and it works as expected here (as well as for @fjahr and @JeremyRubin ). If @MarcoFalke's issue, is still a problem we should look into it, please open a github issue for it.",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-666374177,666374177,
jonatack,2020-07-30 14:17:58,👍 per my ACK a few months ago https://github.com/bitcoin/bitcoin/pull/18011#pullrequestreview-366872789,https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-666393224,666393224,
martinus,2020-07-30 17:43:21,Thanks for merging! If anyone has any questions or issue with nanobench please notify me,https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-666556750,666556750,
hebasto,2020-07-31 18:27:38,@martinus Mind looking into #18710 if it has any performance regression on supported platforms? ,https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-667287740,667287740,
hebasto,2020-08-14 11:04:03,@martinus How to conditionally skip a benchmark in nanobench framework (wrt https://github.com/bitcoin/bitcoin/pull/19710#issuecomment-673547482 and https://github.com/bitcoin/bitcoin/pull/19710#issuecomment-674016320)?,https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-674020807,674020807,
martinus,2020-08-14 11:07:06,You can use `-filter` to specify a regular expression for which tests to run,https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-674021899,674021899,
hebasto,2020-08-14 11:08:55,"> You can use `-filter` to specify a regular expression for which tests to run\n\nI mean in the code, e.g., skip `CCheckQueueSpeedPrevectorJob` if `GetNumCores() < 2`",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-674022527,674022527,
martinus,2020-08-14 11:20:39,"> > You can use `-filter` to specify a regular expression for which tests to run\n> \n> I mean in the code, e.g., skip `CCheckQueueSpeedPrevectorJob` if `GetNumCores() < 2`\n\nAh, of course\n\nBefore benchmark is run you can do a check and then simply return, e.g. like so:\n\n```cpp\nstatic void CCheckQueueSpeedPrevectorJob(benchmark::Bench& bench)\n{\n    if (GetNumCores() < 2) {\n   ",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-674026621,674026621,
hebasto,2020-08-14 12:26:31,@martinus Thanks! I've submitted a commit (ce3e6a7cb21d1aa455513970846e1f70c01472a4) in #19710.,https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-674049619,674049619,
MarcoFalke,2020-08-24 09:25:00,"Not sure if this is caused by this pull, but some benchmarks changed performance quite significantly:\n\n* `BenchLockedPool` went down almost 100% to approx 0 compared to before: https://codespeed.bitcoinperf.com/timeline/#/?exe=3,4,2,1,5&base=1+23&ben=micro.clang.BenchLockedPool&env=1&revs=200&equid=off&quarts=on&extr=on\n* All the prevector ones as well (except the serialization one): https:/",https://github.com/bitcoin/bitcoin/pull/18011#issuecomment-679015075,679015075,
Empact,2020-02-28 18:11:45,"nit: How about:\n```cpp\nnamespace nanobench { using namespace ankerl::nanobench; }\n```\nSo that all the external nanobench members are more explicitly identified?",https://github.com/bitcoin/bitcoin/pull/18011#discussion_r385845065,385845065,src/bench/bench.h
martinus,2020-02-29 12:11:22,"Sure I can do that. Would you do that inside the benchmark namespace? then all benchmark arguments would become e.g. \n```cpp\nstatic void Base58Encode(benchmark::nanobench::Bench& bench)\n```\nWhich is a bit long. ",https://github.com/bitcoin/bitcoin/pull/18011#discussion_r386024046,386024046,src/bench/bench.h
Empact,2020-02-29 19:58:04,"How about doing individual assignments for the classes in use, e.g.:\n\n```cpp\nnamespace benchmark { using ankerl::nanobench::Bench; }\n```",https://github.com/bitcoin/bitcoin/pull/18011#discussion_r386051798,386051798,src/bench/bench.h
martinus,2020-03-01 06:45:21,"I think that's better, `Bench` is the only thing that's needed in the benchmarks anyway. I've commited c2e924f which does that",https://github.com/bitcoin/bitcoin/pull/18011#discussion_r386081966,386081966,src/bench/bench.h
jonatack,2020-03-01 17:08:42,can remove `#include <util/time.h>`,https://github.com/bitcoin/bitcoin/pull/18011#discussion_r386124056,386124056,src/bench/examples.cpp
jonatack,2020-03-01 17:24:17,nit here and L::1056: s/that/that is/,https://github.com/bitcoin/bitcoin/pull/18011#discussion_r386125092,386125092,src/bench/nanobench.h
jonatack,2020-03-01 17:28:21,nit: of?,https://github.com/bitcoin/bitcoin/pull/18011#discussion_r386125344,386125344,src/bench/nanobench.h
jonatack,2020-03-01 18:08:09,"remove ""-scaling and""... as the option is now removed",https://github.com/bitcoin/bitcoin/pull/18011#discussion_r386128046,386128046,src/bench/bench_bitcoin.cpp
jonatack,2020-03-01 18:18:01,thought: would `benchmark_results.csv` be more consistent with the project file naming (I'm not sure and won't bikeshed further),https://github.com/bitcoin/bitcoin/pull/18011#discussion_r386128767,386128767,src/bench/bench.cpp
martinus,2020-03-02 14:41:13,it should say `Windows version of doNotOptimizeAway`,https://github.com/bitcoin/bitcoin/pull/18011#discussion_r386431558,386431558,src/bench/nanobench.h
martinus,2020-03-02 14:46:58,"maybe I should add an option like `-csv=<filename>` that enables writing the .csv to the given file, if the option is present. Currently I always write a ""benchmarkresults.csv"", which can be a bit annoying when not wanted",https://github.com/bitcoin/bitcoin/pull/18011#discussion_r386435113,386435113,src/bench/bench.cpp
elichai,2020-03-08 10:33:58,Why did you remove this test? (should probably move to tests though),https://github.com/bitcoin/bitcoin/pull/18011#discussion_r389356113,389356113,src/bench/examples.cpp
elichai,2020-03-08 10:37:34,"It seems to have been added here: https://github.com/bitcoin/bitcoin/commit/535ed9223dcb32bf90ead5b2c95052838b780620#diff-5f8387aba8e5e6c0c871e093c9145085R9\nSo I guess it is somewhat a useless test",https://github.com/bitcoin/bitcoin/pull/18011#discussion_r389356343,389356343,src/bench/examples.cpp
martinus,2020-03-08 10:55:22,"I removed this test because it's rather useless, it would uselessly slow down the whole benchmark run quite a bit compared to the others, and since it's in `examples.cpp` I assumed that it's just an example anyways",https://github.com/bitcoin/bitcoin/pull/18011#discussion_r389357673,389357673,src/bench/examples.cpp
jonatack,2020-03-08 12:52:50,"Unless I was missing something, if you remove this test then the `#include <util/time.h>` can be removed with it.",https://github.com/bitcoin/bitcoin/pull/18011#discussion_r389366619,389366619,src/bench/examples.cpp
martinus,2020-03-08 15:19:46,Ah right I totally forgot removing the include,https://github.com/bitcoin/bitcoin/pull/18011#discussion_r389378976,389378976,src/bench/examples.cpp
martinus,2020-03-08 15:24:43,Done in https://github.com/bitcoin/bitcoin/pull/18011/commits/5bd582bbadb90970f631a7c4c4d793689584ca4e,https://github.com/bitcoin/bitcoin/pull/18011#discussion_r389379424,389379424,src/bench/examples.cpp
martinus,2020-03-08 15:25:16,I've reworded it a bit in rebase with new version of nanobench.h  in https://github.com/bitcoin/bitcoin/pull/18011/commits/79fd93ae7da64aa6d7532aa46734623d0824098d,https://github.com/bitcoin/bitcoin/pull/18011#discussion_r389379453,389379453,src/bench/nanobench.h
martinus,2020-03-08 15:25:59,Done in https://github.com/bitcoin/bitcoin/pull/18011/commits/5bd582bbadb90970f631a7c4c4d793689584ca4e,https://github.com/bitcoin/bitcoin/pull/18011#discussion_r389379530,389379530,src/bench/examples.cpp
