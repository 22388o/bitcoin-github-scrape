[
  {
    "sha": "b28a3bee9f8250e083b715a98df7dd7208db0f37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjhhM2JlZTlmODI1MGUwODNiNzE1YTk4ZGY3ZGQ3MjA4ZGIwZjM3",
    "commit": {
      "author": {
        "name": "Huang Le",
        "email": "4tarhl@gmail.com",
        "date": "2014-05-30T14:23:29Z"
      },
      "committer": {
        "name": "Huang Le",
        "email": "4tarhl@gmail.com",
        "date": "2014-05-30T14:23:29Z"
      },
      "message": "Use async name resolving to improve net thread responsiveness\n\nIn the LookupIntern(), things changed are:\n  1. Call getaddrinfo_a() instead of getaddrinfo() if available, the former is a sync version of the latter;\n  2. Try using inet_pton()/inet_addr() to convert the input text to a network addr structure at first, if success the extra name resolving thread inside the async getaddrinfo_a() could be avoided;\n  3. An inturrption point added in the waiting loop for return from getaddrinfo_a(), which completes the improve for thread responsiveness.\n\nSigned-off-by: Huang Le <4tarhl@gmail.com>",
      "tree": {
        "sha": "99b8e5cbb8852d7316ad431fde4c12d437e3522b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99b8e5cbb8852d7316ad431fde4c12d437e3522b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b28a3bee9f8250e083b715a98df7dd7208db0f37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b28a3bee9f8250e083b715a98df7dd7208db0f37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b28a3bee9f8250e083b715a98df7dd7208db0f37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b28a3bee9f8250e083b715a98df7dd7208db0f37/comments",
    "author": {
      "login": "4tar",
      "id": 882771,
      "node_id": "MDQ6VXNlcjg4Mjc3MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/882771?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/4tar",
      "html_url": "https://github.com/4tar",
      "followers_url": "https://api.github.com/users/4tar/followers",
      "following_url": "https://api.github.com/users/4tar/following{/other_user}",
      "gists_url": "https://api.github.com/users/4tar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/4tar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/4tar/subscriptions",
      "organizations_url": "https://api.github.com/users/4tar/orgs",
      "repos_url": "https://api.github.com/users/4tar/repos",
      "events_url": "https://api.github.com/users/4tar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/4tar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "4tar",
      "id": 882771,
      "node_id": "MDQ6VXNlcjg4Mjc3MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/882771?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/4tar",
      "html_url": "https://github.com/4tar",
      "followers_url": "https://api.github.com/users/4tar/followers",
      "following_url": "https://api.github.com/users/4tar/following{/other_user}",
      "gists_url": "https://api.github.com/users/4tar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/4tar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/4tar/subscriptions",
      "organizations_url": "https://api.github.com/users/4tar/orgs",
      "repos_url": "https://api.github.com/users/4tar/repos",
      "events_url": "https://api.github.com/users/4tar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/4tar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97ab93f50b6f35bc362990e9dd665b90ca4132df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97ab93f50b6f35bc362990e9dd665b90ca4132df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97ab93f50b6f35bc362990e9dd665b90ca4132df"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 61,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b7b3c79a7b3ba934caa6cb098640b6e4281da5c1",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b28a3bee9f8250e083b715a98df7dd7208db0f37/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b28a3bee9f8250e083b715a98df7dd7208db0f37/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b28a3bee9f8250e083b715a98df7dd7208db0f37",
        "patch": "@@ -369,6 +369,8 @@ if test x$TARGET_OS = xdarwin; then\n fi\n \n AC_CHECK_HEADERS([stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h])\n+AC_SEARCH_LIBS([getaddrinfo_a], [anl], [AC_DEFINE(HAVE_GETADDRINFO_A, 1, [Define this symbol if you have getaddrinfo_a])])\n+AC_SEARCH_LIBS([inet_pton], [nsl resolv], [AC_DEFINE(HAVE_INET_PTON, 1, [Define this symbol if you have inet_pton])])\n \n dnl Check for MSG_NOSIGNAL\n AC_MSG_CHECKING(for MSG_NOSIGNAL)"
      },
      {
        "sha": "d93e672a4171f7ecda953ff6df5bea355005306e",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 1,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b28a3bee9f8250e083b715a98df7dd7208db0f37/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b28a3bee9f8250e083b715a98df7dd7208db0f37/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=b28a3bee9f8250e083b715a98df7dd7208db0f37",
        "patch": "@@ -3,6 +3,18 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#ifdef HAVE_CONFIG_H\n+#include \"bitcoin-config.h\"\n+#endif\n+\n+#ifdef HAVE_INET_PTON\n+#include <arpa/inet.h>\n+#endif\n+\n+#ifdef HAVE_GETADDRINFO_A\n+#include <netdb.h>\n+#endif\n+\n #include \"netbase.h\"\n \n #include \"hash.h\"\n@@ -71,9 +83,30 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n         }\n     }\n \n+#ifdef HAVE_GETADDRINFO_A\n+    struct in_addr ipv4_addr;\n+#ifdef HAVE_INET_PTON\n+    if (inet_pton(AF_INET, pszName, &ipv4_addr) > 0) {\n+        vIP.push_back(CNetAddr(ipv4_addr));\n+        return true;\n+    }\n+\n+    struct in6_addr ipv6_addr;\n+    if (inet_pton(AF_INET6, pszName, &ipv6_addr) > 0) {\n+        vIP.push_back(CNetAddr(ipv6_addr));\n+        return true;\n+    }\n+#else\n+    ipv4_addr.s_addr = inet_addr(pszName);\n+    if (ipv4_addr.s_addr != INADDR_NONE) {\n+        vIP.push_back(CNetAddr(ipv4_addr));\n+        return true;\n+    }\n+#endif\n+#endif\n+\n     struct addrinfo aiHint;\n     memset(&aiHint, 0, sizeof(struct addrinfo));\n-\n     aiHint.ai_socktype = SOCK_STREAM;\n     aiHint.ai_protocol = IPPROTO_TCP;\n     aiHint.ai_family = AF_UNSPEC;\n@@ -82,8 +115,33 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n #else\n     aiHint.ai_flags = fAllowLookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n #endif\n+\n     struct addrinfo *aiRes = NULL;\n+#ifdef HAVE_GETADDRINFO_A\n+    struct gaicb gcb, *query = &gcb;\n+    memset(query, 0, sizeof(struct gaicb));\n+    gcb.ar_name = pszName;\n+    gcb.ar_request = &aiHint;\n+    int nErr = getaddrinfo_a(GAI_NOWAIT, &query, 1, NULL);\n+    if (nErr)\n+        return false;\n+\n+    do {\n+        // Should set the timeout limit to a resonable value to avoid\n+        // generating unnecessary checking call during the polling loop,\n+        // while it can still response to stop request quick enough.\n+        // 2 seconds looks fine in our situation.\n+        struct timespec ts = { 2, 0 };\n+        gai_suspend(&query, 1, &ts);\n+        boost::this_thread::interruption_point();\n+\n+        nErr = gai_error(query);\n+        if (0 == nErr)\n+            aiRes = query->ar_result;\n+    } while (nErr == EAI_INPROGRESS);\n+#else\n     int nErr = getaddrinfo(pszName, NULL, &aiHint, &aiRes);\n+#endif\n     if (nErr)\n         return false;\n "
      }
    ]
  }
]