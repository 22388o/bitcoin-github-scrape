ryanofsky,2017-02-27T17:22:44Z,"I think it would be better to have the new code in `MultiChainBitcoinTestFramework` replace the existing code in `BitcoinTestFramework` instead of selectively overriding it, given that it seems to be backwards compatible. All you would have to do is add a new optional named argument to `split_network` and `setup_network` and interpret it in the backwards compatible way when it is not specified. I ",https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-282787952,282787952,
sdaftuar,2017-02-27T19:35:17Z,"I tend to think that this is unnecessary (and is just adding complication to the qa codebase).  I find the existing `is_chain_split` stuff already confusing and relatively unused, basically because having to stop/restart nodes in order to change network topology is pretty clunky.\n\nMoreover I think your listsinceblock.py test in this PR is not actually testing what you want; after you reconnect",https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-282827275,282827275,
kallewoof,2017-02-27T20:56:47Z,"@ryanofsky It's not backwards compatible with everything, which is why I wanted to temporarily put it aside, instead of fixing everything. I may be overlooking something but if you do the change you suggest, you'll see that fundraw does some funky stuff which I'm not sure how to interpret using the new method. I'll dig though. I like your suggestions about where to split the chain though. Will cha",https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-282850673,282850673,
kallewoof,2017-02-28T01:52:31Z,"@ryanofsky I ended up finding the cause for why `fundrawtransaction.py` failed, and removed the old framework, leaving only the new one in place. I still intend to change out the splitting part to use your suggested method.\n\nUnsquashed branch (pardon sloppy commit messages): https://github.com/kallewoof/bitcoin/commits/qa-multi-chain-support-unsquashed",https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-282917011,282917011,
kallewoof,2017-02-28T06:24:10Z,@ryanofsky Switched to using splits array.,https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-282953694,282953694,
sdaftuar,2017-02-28T14:14:23Z,"> @sdaftuar The reason this PR exists is because I was asked to test 3+ chains in #9622 but realized I can't do this easily. The old set up is clunky, as you say, and even without using the 3+ chain functionality, this change would remove the dependency on 4 nodes.\n\nDid you look at the patch I proposed for implementing that 3-chain test?  I believe it is correct (unlike the test provided in th",https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-283049542,283049542,
ryanofsky,2017-02-28T14:54:22Z,"Yes, you guys should look at each others patches if you have not already. @sdaftuar, not sure if you have seen the newest changes to test_framework.py from @kallewoof:\n\nhttps://github.com/kallewoof/bitcoin/compare/6206252e5073c1cde2e313f2e5a3ca17582c5823...02647ff75b8ac1d46a9c9048176bccaebc90e9bc#diff-6a670fff9d11003cce8baa0518efd7a9\n\nI think this could be tidied up a little more, but that",https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-283060427,283060427,
kallewoof,2017-02-28T16:31:40Z,"@sdaftuar I did look at it and intended to respond but was caught up doing other things. The test does not test whether all 3 chains are downloaded at all. It tests whether the transaction, given a reorg, is in its expected place. Whether the client downloads chains or not is completely irrelevant, and in fact is something listsinceblock should not care about -- think of it as a reiteration from a",https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-283090376,283090376,
sdaftuar,2017-02-28T16:47:51Z,"@kallewoof I'm sorry if I'm misunderstanding the intent here -- but if you don't care whether node0 downloads all 3 chains, then what is the point of `test_reorg3` (ie how is it different from `test_reorg`)?  Aren't you then just testing that bitcoind's listsinceblock behavior is unaffected by information that is unknown to it?  That seems tautological...\n\n> In either case, there is no guarant",https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-283095479,283095479,
kallewoof,2017-02-28T17:01:12Z,"To be honest, I was kind of making that test as a POC that the multi-chain code works as intended, aside from the actual multi-chain test script itself. I should have obviously given more thought to it..\n\nA more obvious use case (but still convoluted) is one of the tests I intend to write for #9622 once merged where\n```\n           aaa0\n      /     |     \\na1         b1       c1-tx2'\n",https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-283099790,283099790,
jnewbery,2017-02-28T17:32:03Z,"I'm sorry, but I'm also tending towards a NACK.\n\nI think the `split_network()` method is too specific and is a trap for test writers that don't know that it stop-starts all the nodes and may have unexpected side-effects. I'd much rather replace it with a more powerful interface which allows test-writers to control network topology when it's required. Adding to split_network() is a step in the ",https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-283108693,283108693,
kallewoof,2017-02-28T17:55:45Z,"What if it didn't stop/start the nodes? What other unexpected side-effects does it have?\n\nI'm all for switching, assuming you get the exact same results as if you were splitting for real. What about things like mempool and such? Are these the same with both styles?",https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-283114851,283114851,
jnewbery,2017-02-28T18:36:39Z,"I'd be a lot happier if it didn't stop-start the nodes and instead called into the disconnectnode() RPC on the nodes you want to disconnect from each other.\n\nMy other concern is that splitnodes() is too specific, and is unlikely to get used in many other tests. I think a better interface would be for the BitcoinTestFramework class to expose a disconnectnodes() method in the BitcoinTestFramewor",https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-283124658,283124658,
kallewoof,2017-02-28T19:39:36Z,"@sdaftuar To better explain the purpose of this feature, I have made a branch which incorporates this and #9622 and adds a test for 3 chains (`test_doublespend3`) here: https://github.com/kallewoof/bitcoin/tree/nomerge-multichains (test is in https://github.com/kallewoof/bitcoin/commit/22a5509e5c84219074c3cd10e0c1b0916b97daa9)\n\n* Am I right in assuming that this can be replicated using `invali",https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-283140941,283140941,
ryanofsky,2017-02-28T20:12:40Z,">I'd be a lot happier if it didn't stop-start the nodes\n\nI don't object to your overall point, but just would note that we already have `split_network` function right now that is used in two tests and stop-starts the nodes. Maybe it should be renamed. Maybe it should be made super smart and efficient. But the only thing kallewoof's branch does to `split_network` is give it a new optional argum",https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-283148349,283148349,
jnewbery,2017-04-12T16:11:42Z,I've just opened #10198 that rewrites `split_network()` and `join_network()`. I think it's a better approach and makes the test framework more generic by not making assumptions about test network topology.,https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-293628885,293628885,
kallewoof,2017-04-13T02:05:54Z,"@jnewbery I'm confused. #10198 doesn't look like it allows splitting the network into 3+ partitions, which is what this PR is about. Otherwise, it looks like a great improvement!",https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-293756643,293756643,
jnewbery,2017-04-13T12:54:08Z,"Right. My main point in #10198 is that the test framework shouldn't have such specific assumptions about the test network topology. If #10198 is merged, then your testcase should just call disconnect_nodes directly, or define helper functions locally.",https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-293886971,293886971,
kallewoof,2017-04-14T05:33:57Z,@jnewbery I guess you're right that there is not a lot of reason for testing 3+ chains in other tests. Closing.,https://github.com/bitcoin/bitcoin/pull/9872#issuecomment-294093636,294093636,
