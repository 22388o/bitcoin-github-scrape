[
  {
    "sha": "c0cbb3153ee6bea0711000b625008c9974442148",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGNiYjMxNTNlZTZiZWEwNzExMDAwYjYyNTAwOGM5OTc0NDQyMTQ4",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-02-25T23:02:23Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-03-22T18:45:38Z"
      },
      "message": "[qa] Multi chain support in new MultiChainBitcoinTestFramework class.",
      "tree": {
        "sha": "e163f9260da456baacc007c2d30e9916d0e03147",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e163f9260da456baacc007c2d30e9916d0e03147"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0cbb3153ee6bea0711000b625008c9974442148",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJY0sZcAAoJEFevdi2zNTMii78P/RGn2aiauwwfLQkWeHzyYamv\nHifBcGSQxjLeRkhzU4alCxYhKVe4cd8HG9I/1epawcxFry6EOEHcHnV4D+yPS138\nn/RaATokuI9USeNtQsfjQ5EB9kTXn0bKdKzKdR8ZLwgZyYlrcN499omOY1wC/Ru4\n3sBb0WIMxM6iS2XWP+o92ZpSF9LC7+KyvZsEGNXbyW1bo//g8OesJElbQthjPK5y\nk0Jiwv5kAqu1GrI3bALBpcdEubLgZArlxh4Kq/vFwTw+u3JIqFFMdUCpaIJKBPLz\nFdmNYd7fUtxjxhzj7Fxt2BOQsVZlbPk0GgSAxzBzoZxr1sPig4Os9e7VwLmNM83e\nUuH8ZLd+QnvyuPN8rLUMDfV1Exh/jISBH7EQIzUSbOpb0oPwo8c/rF4EA+XM+iI4\nEDrTVv86r9G8La9OlczY9Vlu++dG+aUrPGJVgW8dzoeJRCmRgbepMDPFS+W6Yt68\nUd+Wq0RwzmOPfWh+2qPFG/HLHR/lpjz/uNJXG6VSkKOfOzZ8QewQepUI5VBAWn34\nMzAIhWK0D6EKjilZGKiZnSM4FOPR/l/6WcBzn6dCkW2KzXsPHiRA0lM2Sw4lAZVw\nM4ZmNY5V4/vrgt2LdQoTmvuRFMV3OMZknD7/NrOV4SFBTBx/QuV5ShHhUCyG+2pG\nc+ClaGDy8WcwgSI4uPEv\n=pkuR\n-----END PGP SIGNATURE-----",
        "payload": "tree e163f9260da456baacc007c2d30e9916d0e03147\nparent 02d64bd929c9663ba38e96721c6dbd89972d043d\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1488063743 -0800\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1490208338 -0700\n\n[qa] Multi chain support in new MultiChainBitcoinTestFramework class.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0cbb3153ee6bea0711000b625008c9974442148",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0cbb3153ee6bea0711000b625008c9974442148",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0cbb3153ee6bea0711000b625008c9974442148/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02d64bd929c9663ba38e96721c6dbd89972d043d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d64bd929c9663ba38e96721c6dbd89972d043d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02d64bd929c9663ba38e96721c6dbd89972d043d"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 42,
      "deletions": 25
    },
    "files": [
      {
        "sha": "3535d1a7a1ebc6bd3f78f51dbe16c9fb7812a6df",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 42,
        "deletions": 25,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0cbb3153ee6bea0711000b625008c9974442148/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0cbb3153ee6bea0711000b625008c9974442148/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=c0cbb3153ee6bea0711000b625008c9974442148",
        "patch": "@@ -30,11 +30,11 @@\n \n \n class BitcoinTestFramework(object):\n-\n     def __init__(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n         self.nodes = None\n+        self.chains = None\n \n     def run_test(self):\n         raise NotImplementedError\n@@ -55,42 +55,60 @@ def stop_node(self, num_node):\n     def setup_nodes(self):\n         return start_nodes(self.num_nodes, self.options.tmpdir)\n \n-    def setup_network(self, split = False):\n+    def setup_network(self, splits = None):\n+        \"\"\"\n+        Set up the network to be split into chains according to splits.\n+        If splits is a boolean, it is interpreted as \"split down the half\" for True,\n+        and \"do not split\" for False. Otherwise, it must be an array of indices\n+        indicating at which node the next split should occur. E.g. [2] would mean\n+        the network is split into\n+            node 0          node 2\n+            node 1          node 3\n+                            ...\n+        [3, 5] would mean\n+            node 0          node 3      node 5\n+            node 1          node 4      node 6\n+            node 2                      ...\n+        \"\"\"\n         self.nodes = self.setup_nodes()\n+        if splits == False or not splits: splits = []\n+        if splits == True: splits = [int(self.num_nodes/2)]\n+        splits.append(self.num_nodes)\n \n         # Connect the nodes as a \"chain\".  This allows us\n-        # to split the network between nodes 1 and 2 to get\n+        # to split the network between e.g. nodes 1 and 2 to get\n         # two halves that can work on competing chains.\n \n-        # If we joined network halves, connect the nodes from the joint\n-        # on outward.  This ensures that chains are properly reorganised.\n-        if not split:\n-            connect_nodes_bi(self.nodes, 1, 2)\n-            sync_blocks(self.nodes[1:3])\n-            sync_mempools(self.nodes[1:3])\n-\n-        connect_nodes_bi(self.nodes, 0, 1)\n-        connect_nodes_bi(self.nodes, 2, 3)\n-        self.is_network_split = split\n+        self.chains = []\n+        curr_chain = []\n+        for i in range(self.num_nodes - 1):\n+            curr_chain.append(self.nodes[i])\n+            if i + 1 == splits[len(self.chains)]:\n+                self.chains.append(curr_chain)\n+                curr_chain = []\n+            else:\n+                connect_nodes_bi(self.nodes, i, i + 1)\n+        curr_chain.append(self.nodes[self.num_nodes - 1])\n+        self.chains.append(curr_chain)\n+\n+        self.is_network_split = len(self.chains) > 1\n         self.sync_all()\n \n-    def split_network(self):\n+    def split_network(self, splits = True):\n         \"\"\"\n-        Split the network of four nodes into nodes 0/1 and 2/3.\n+        Split the network into chains.\n+        With 4 nodes and two chains = 2, we split the nodes into nodes 0/1 and 2/3.\n+        If splits is a boolean, it is interpreted as \"split down the half\" for True,\n+        and \"do not split\" for False.\n         \"\"\"\n         assert not self.is_network_split\n         stop_nodes(self.nodes)\n-        self.setup_network(True)\n+        self.setup_network(splits)\n \n     def sync_all(self):\n-        if self.is_network_split:\n-            sync_blocks(self.nodes[:2])\n-            sync_blocks(self.nodes[2:])\n-            sync_mempools(self.nodes[:2])\n-            sync_mempools(self.nodes[2:])\n-        else:\n-            sync_blocks(self.nodes)\n-            sync_mempools(self.nodes)\n+        for chain in self.chains if self.chains else [self.nodes]:\n+            sync_blocks(chain)\n+            sync_mempools(chain)\n \n     def join_network(self):\n         \"\"\"\n@@ -101,7 +119,6 @@ def join_network(self):\n         self.setup_network(False)\n \n     def main(self):\n-\n         parser = optparse.OptionParser(usage=\"%prog [options]\")\n         parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n                           help=\"Leave bitcoinds and test.* datadir on exit or error\")"
      }
    ]
  },
  {
    "sha": "ee97293c6833b97fb7900c86f94d2e3d39776723",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTk3MjkzYzY4MzNiOTdmYjc5MDBjODZmOTRkMmUzZDM5Nzc2NzIz",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-02-27T02:26:34Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-03-22T20:25:53Z"
      },
      "message": "[qa] listsinceblock.py updated to include a 3-chain version of testreorg.",
      "tree": {
        "sha": "151d2d5cfbd9fefddd2d553ce799518897c4ede3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/151d2d5cfbd9fefddd2d553ce799518897c4ede3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee97293c6833b97fb7900c86f94d2e3d39776723",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJY0t3RAAoJEFevdi2zNTMiiy8P/AyAVYCTBukAcNtEHM/g+Bkn\nDvXUlVoaT29v/wvdc7TJCAehy2zrMCTn0LRG/JsmaOl7YlXezVxMa8qkp6Jjg0U5\ni2Aqzp//EZAIFN08zE9PnZjn+iMWcl/ek/V84fyy6/tb1erFyMTItKAOCXGxv8+s\niXJzbH632Ihwl72rCAOPJhDkFluHLNW09PAf1T8RdeTrQ72W4KAF8dYUFEVhEyEK\nFtZkIGJm3iRDDqktwAvtw1xCUH/hRKsB6+zgUfoX6uxMS0vH+tyvm7aiKnyPvauQ\nHzskrIhirBosrnJgzw4v77eM/BpPgaG3bnI7N6QKTv9/CuyFY4WdplCm4u+mZlgF\n4jtJgK6TOvJ03ycO0DYL83DPPW567IKQI+hLuARNdpoOk/YROzPi+UVDVWRzCvzY\n1SYHgPZNTnI+8MBoQ+t9ntIhdl/HiW8xINX0vZ4MyPQQs0TzZtK9/EXcfkzZRL9c\nYjB2NGshKnqJLGn+mf9oFGZCJ1NmV8OBOQJV57xI2XH2SdUpCh+AVhQsIw7s1PkM\n1bLT/pHC48We0JsvRiHwtpsZTks+LTlbg9q3H5hNU9bD7Z/J5uCEGkaVjas7cvI4\ndJE5FxzCIVIlIPg1BPIm8OD6oGKZ6xPdmWpJ1uLggPjzhNRCky+Kh27CN7FkREMA\nkv9ZGzm/2cesaLKqiosV\n=f6hg\n-----END PGP SIGNATURE-----",
        "payload": "tree 151d2d5cfbd9fefddd2d553ce799518897c4ede3\nparent c0cbb3153ee6bea0711000b625008c9974442148\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1488162394 -0800\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1490214353 -0700\n\n[qa] listsinceblock.py updated to include a 3-chain version of testreorg.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee97293c6833b97fb7900c86f94d2e3d39776723",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee97293c6833b97fb7900c86f94d2e3d39776723",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee97293c6833b97fb7900c86f94d2e3d39776723/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0cbb3153ee6bea0711000b625008c9974442148",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0cbb3153ee6bea0711000b625008c9974442148",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0cbb3153ee6bea0711000b625008c9974442148"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 47,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fa650af20ee58f70998bfa6d61be45636685d7be",
        "filename": "test/functional/listsinceblock.py",
        "status": "modified",
        "additions": 47,
        "deletions": 2,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee97293c6833b97fb7900c86f94d2e3d39776723/test/functional/listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee97293c6833b97fb7900c86f94d2e3d39776723/test/functional/listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listsinceblock.py?ref=ee97293c6833b97fb7900c86f94d2e3d39776723",
        "patch": "@@ -12,9 +12,9 @@ class ListSinceBlockTest (BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n-        self.num_nodes = 4\n+        self.num_nodes = 6\n \n-    def run_test (self):\n+    def test_reorg(self):\n         '''\n         `listsinceblock` did not behave correctly when handed a block that was\n         no longer in the main chain:\n@@ -77,5 +77,50 @@ def run_test (self):\n                 break\n         assert_equal(found, True)\n \n+    def test_reorg3(self):\n+        '''\n+        Same as above, except there are now three conflicting chains (the middle\n+        one being the longest).\n+        '''\n+\n+        assert_equal(self.is_network_split, False)\n+        assert_equal(len(self.nodes), 6)\n+        self.sync_all()\n+\n+        # Split network into three chains\n+        self.split_network([2, 4])\n+        assert_equal(len(self.chains), 3)\n+        assert_equal(len(self.chains[0]), 2)\n+        assert_equal(len(self.chains[1]), 2)\n+        assert_equal(len(self.chains[2]), 2)\n+        assert_equal(self.is_network_split, True)\n+\n+        # send to nodes[0] from nodes[2]\n+        senttx = self.nodes[2].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+\n+        # generate on all sides\n+        lastblockhash = self.nodes[1].generate(6)[5]\n+        self.nodes[2].generate(8)\n+        self.nodes[4].generate(7)\n+        self.log.info('lastblockhash=%s' % (lastblockhash))\n+\n+        self.sync_all()\n+\n+        self.join_network()\n+        assert_equal(len(self.chains), 1)\n+\n+        # listsinceblock(lastblockhash) should now include tx, as seen from nodes[0]\n+        lsbres = self.nodes[0].listsinceblock(lastblockhash)\n+        found = False\n+        for tx in lsbres['transactions']:\n+            if tx['txid'] == senttx:\n+                found = True\n+                break\n+        assert_equal(found, True)\n+\n+    def run_test(self):\n+        self.test_reorg()\n+        self.test_reorg3()\n+\n if __name__ == '__main__':\n     ListSinceBlockTest().main()"
      }
    ]
  },
  {
    "sha": "0975369885d9abcbc749767b99ae9751704eb359",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTc1MzY5ODg1ZDlhYmNiYzc0OTc2N2I5OWFlOTc1MTcwNGViMzU5",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-02-27T03:21:32Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-03-22T20:25:54Z"
      },
      "message": "[qa] Add multichaintest.py for testing the multi chain test framework.",
      "tree": {
        "sha": "f1803cbfc519aae82d46142c680aa8ca733a17aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1803cbfc519aae82d46142c680aa8ca733a17aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0975369885d9abcbc749767b99ae9751704eb359",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJY0t3SAAoJEFevdi2zNTMi1tMP/RAnAOfsKrgD/Xj+RKn3QlTt\n14HtV9bvFLOmWPmHF+BMhuh0BuPWOnAZjElO2FFPs3yZW5jnjZOugQVuo0rfTet6\nN/F9s9FMC2KeBBnKnUc7c/u37z5emx9KiN/LIcK4AkOMX3gNe7Io9vlJ1bJWwK2O\nXXHyNFXDgQQzTtPnHabyulPApQ6SaKRBqTsw5sDW3BqayqVjCyCpAfeXCGc2RC1o\nk794blLRRP+qVIBOpWKlywdmlwWO4SSlguUgGJc58vCuD/q1AcfeMiNooYAtUVMh\nwyzcOxE1StKS3F0Gnl4ULR4I5lexKo1IwMN6zUFdZsDny6DizloNqnbg15G4YrVv\naYHRwdLUvxiqLzXFLf/xNiwnlweZUtuIeBd5+dt0AXy0eZ4bcoP/EZzRYJYVjMf3\nr2V6qL8CxqlT6nfK336hN3bgL1GzYjVf/MRPA/arJRR5JPHzM7rQk2UddxBlUGNT\n50TSDJjbIhLADXAc7Vj9peQwN/BjzSpJ8h+V5813KXYDZ6KZIR3CFBu+sU9Ff8nF\nVW4p5LtAkJFjzB158tYRSZFEVf5/syXL0lJEzgobojj+qT5PxtWEEDJWnNAfBkqE\nmX33WYTho/6YaCrcsl+qG+bxSVjqLn8UE2AM5PVEbuwkX/7QK8xEjsu3RyzU6tCc\nchT8qmiWI+piYTN1h33Z\n=umNM\n-----END PGP SIGNATURE-----",
        "payload": "tree f1803cbfc519aae82d46142c680aa8ca733a17aa\nparent ee97293c6833b97fb7900c86f94d2e3d39776723\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1488165692 -0800\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1490214354 -0700\n\n[qa] Add multichaintest.py for testing the multi chain test framework.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0975369885d9abcbc749767b99ae9751704eb359",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0975369885d9abcbc749767b99ae9751704eb359",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0975369885d9abcbc749767b99ae9751704eb359/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee97293c6833b97fb7900c86f94d2e3d39776723",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee97293c6833b97fb7900c86f94d2e3d39776723",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee97293c6833b97fb7900c86f94d2e3d39776723"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 76,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0981fb3ec512fdb79c4847680e7c2ce379093b76",
        "filename": "test/functional/multichaintest.py",
        "status": "added",
        "additions": 75,
        "deletions": 0,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0975369885d9abcbc749767b99ae9751704eb359/test/functional/multichaintest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0975369885d9abcbc749767b99ae9751704eb359/test/functional/multichaintest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multichaintest.py?ref=0975369885d9abcbc749767b99ae9751704eb359",
        "patch": "@@ -0,0 +1,75 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the MultiChainBitcoinTestFramework implementation.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class MultiChainBitcoinTestFrameworkTest (BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 8\n+\n+    def run_test(self):\n+        assert_equal(self.is_network_split, False)\n+        self.nodes[2].generate(101)\n+        self.sync_all()\n+        blockcount = self.nodes[0].getblockcount()\n+\n+        # Split network into two\n+        self.split_network([4])\n+        assert_equal(self.is_network_split, True)\n+        assert_equal(len(self.chains), 2)\n+        assert_equal(len(self.chains[0]), 4)\n+        assert_equal(len(self.chains[1]), 4)\n+\n+        self.chains[0][0].generate(5)\n+        block = self.chains[1][0].generate(6)[5]\n+        blockcount += 6\n+        self.sync_all()\n+        self.join_network()\n+        assert_equal(self.nodes[0].getblockcount(), blockcount)\n+        assert_equal(self.nodes[0].getblockhash(blockcount), block)\n+\n+        # Split network into three\n+        self.split_network([3, 6])\n+        assert_equal(self.is_network_split, True)\n+        assert_equal(len(self.chains), 3)\n+        assert_equal(len(self.chains[0]), 3)\n+        assert_equal(len(self.chains[1]), 3)\n+        assert_equal(len(self.chains[2]), 2)\n+\n+        self.chains[0][0].generate(5)\n+        block = self.chains[1][0].generate(6)[5]\n+        self.chains[2][0].generate(5)\n+        blockcount += 6\n+        self.sync_all()\n+        self.join_network()\n+        assert_equal(self.nodes[0].getblockcount(), blockcount)\n+        assert_equal(self.nodes[0].getblockhash(blockcount), block)\n+\n+        # Split network into four\n+        self.split_network([2, 4, 6])\n+        assert_equal(self.is_network_split, True)\n+        assert_equal(len(self.chains), 4)\n+        assert_equal(len(self.chains[0]), 2)\n+        assert_equal(len(self.chains[1]), 2)\n+        assert_equal(len(self.chains[2]), 2)\n+        assert_equal(len(self.chains[3]), 2)\n+\n+        self.chains[0][0].generate(5)\n+        block = self.chains[1][0].generate(6)[5]\n+        self.chains[2][0].generate(5)\n+        self.chains[3][0].generate(5)\n+        blockcount += 6\n+        self.sync_all()\n+        self.join_network()\n+        assert_equal(self.nodes[0].getblockcount(), blockcount)\n+        assert_equal(self.nodes[0].getblockhash(blockcount), block)\n+\n+if __name__ == '__main__':\n+    MultiChainBitcoinTestFrameworkTest().main()"
      },
      {
        "sha": "c81f82b15e3620a398710fab474202be69eff703",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0975369885d9abcbc749767b99ae9751704eb359/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0975369885d9abcbc749767b99ae9751704eb359/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=0975369885d9abcbc749767b99ae9751704eb359",
        "patch": "@@ -34,6 +34,7 @@\n     'fundrawtransaction.py',\n     'p2p-compactblocks.py',\n     'segwit.py',\n+    'multichaintest.py',\n     # vv Tests less than 2m vv\n     'wallet.py',\n     'wallet-accounts.py',"
      }
    ]
  }
]