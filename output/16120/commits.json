[
  {
    "sha": "fa517ac9ec7c808b986e0a79f0e0cc77571bd19b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTUxN2FjOWVjN2M4MDhiOTg2ZTBhNzlmMGUwY2M3NzU3MWJkMTli",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-29T14:20:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-29T14:58:30Z"
      },
      "message": "test: Compile json to hex separately, at most once",
      "tree": {
        "sha": "e2b2227d5b83f4b532e7c44f1896768bfe223a4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2b2227d5b83f4b532e7c44f1896768bfe223a4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiWfAwAlMBp1sGva7NUO+aUxl29gIeVtqj3uHNkr8vfqn5fUp/ElQg+vWDSyq6k\nwMTv3vbvAzu2Y5j4XEub4EPvuIvxKQbqTN1i7jgFpPsycJwkIuYdZA8nZbfiExOG\nqF266eyrLEGZE5x0ZTQXdtDU1M3oRGlITQlJwmnFpR6RD6D6uCyVPD0C/+kNm1bx\nNgeQ7fb1SPQYmYfAmXswzUjHQ1ozFon6CuQ4hrmpskS1YODSlw0PzF4TNFjvjZWq\nEk6S6kord5TF9mp9L8vE72CAys7Qb4IWnz+VY1RKBuOVOgUt7I0pTPROgCjYaI+Z\ncjQeq6xNRpHfv6NICrrBTvj/KB1yagvlZT0XO8Hbaz1aatBSx39pkoq6P6yUYkCt\nFLyoAOnFeq7hfbLMPBN/lnRyd6kpZztMxGRFXoEC1kqnEOdZ7Ur+Mk0XxF3v24gx\nH6IB0f+Q/te6DulyVvqCdfNYKk/fYsTXwbATARSX4OKBaEIIS270oM1WgDoQ3iDT\nnaRqRxR7\n=bsu5\n-----END PGP SIGNATURE-----",
        "payload": "tree e2b2227d5b83f4b532e7c44f1896768bfe223a4d\nparent 1dbbfea9cd910f8e658bc1ab0b70dc89ba1313f9\nauthor MarcoFalke <falke.marco@gmail.com> 1559139608 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1559141910 -0400\n\ntest: Compile json to hex separately, at most once\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1dbbfea9cd910f8e658bc1ab0b70dc89ba1313f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1dbbfea9cd910f8e658bc1ab0b70dc89ba1313f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1dbbfea9cd910f8e658bc1ab0b70dc89ba1313f9"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 31,
      "deletions": 18
    },
    "files": [
      {
        "sha": "1dd04e6bb09ca47203806c11adc1a29519c2ee61",
        "filename": "build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin/test_bitcoin.vcxproj?ref=fa517ac9ec7c808b986e0a79f0e0cc77571bd19b",
        "patch": "@@ -204,7 +204,7 @@\n     <ItemGroup>\n       <JsonTestFile Include=\"..\\..\\src\\test\\data\\*.json\" />\n     </ItemGroup>\n-    <HeaderFromHexdump RawFilePath=\"%(JsonTestFile.FullPath)\" HeaderFilePath=\"%(JsonTestFile.FullPath).h\" SourceHeader=\"namespace json_tests{ static unsigned const char %(JsonTestFile.Filename)[] = {\" SourceFooter=\"};}\" />\n+    <HeaderFromHexdump RawFilePath=\"%(JsonTestFile.FullPath)\" HeaderFilePath=\"%(JsonTestFile.FullPath).h\" SourceHeader=\"#include &lt;string&gt;&#10; namespace json_tests{ static unsigned const char %(JsonTestFile.Filename)[] = {\" SourceFooter=\"}; std::string hex_str_%(JsonTestFile.Filename)() { return std::string{%(JsonTestFile.Filename), %(JsonTestFile.Filename) + sizeof(%(JsonTestFile.Filename))}; }; }\" />\n   </Target>\n   <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n   <Import Label=\"hexdumpTarget\" Project=\"..\\msbuild\\tasks\\hexdump.targets\" />"
      },
      {
        "sha": "a617d33e72414b105b7b76ae4aedacd4c6559c23",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 19,
        "deletions": 4,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=fa517ac9ec7c808b986e0a79f0e0cc77571bd19b",
        "patch": "@@ -36,19 +36,21 @@ TEST_SRCDIR = test\n TEST_BINARY=test/test_bitcoin$(EXEEXT)\n \n JSON_TEST_FILES = \\\n-  test/data/script_tests.json \\\n   test/data/base58_encode_decode.json \\\n   test/data/blockfilters.json \\\n-  test/data/key_io_valid.json \\\n   test/data/key_io_invalid.json \\\n+  test/data/key_io_valid.json \\\n   test/data/script_tests.json \\\n   test/data/sighash.json \\\n   test/data/tx_invalid.json \\\n   test/data/tx_valid.json\n \n RAW_TEST_FILES =\n \n-GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)\n+GENERATED_TEST_FILES = \\\n+  $(JSON_TEST_FILES:.json=.json_hex.cpp) \\\n+  $(JSON_TEST_FILES:.json=.json.h) \\\n+  $(RAW_TEST_FILES:.raw=.raw.h)\n \n BITCOIN_TEST_SUITE = \\\n   test/main.cpp \\\n@@ -371,9 +373,22 @@ endif\n %.json.h: %.json\n \t@$(MKDIR_P) $(@D)\n \t@{ \\\n+\t echo \"#include <string>\" && \\\n+\t echo \"namespace json_tests{\" && \\\n+\t echo \"std::string hex_str_$(*F)();\" && \\\n+\t echo \"};\"; \\\n+\t} > \"$@.new\" && mv -f \"$@.new\" \"$@\"\n+\t@echo \"Generated $@\"\n+\n+%.json_hex.cpp: %.json\n+\t@$(MKDIR_P) $(@D)\n+\t@{ \\\n+\t echo \"#include <string>\" && \\\n \t echo \"namespace json_tests{\" && \\\n \t echo \"static unsigned const char $(*F)[] = {\" && \\\n \t $(HEXDUMP) -v -e '8/1 \"0x%02x, \"' -e '\"\\n\"' $< | $(SED) -e 's/0x  ,//g' && \\\n-\t echo \"};};\"; \\\n+\t echo \"};\" && \\\n+\t echo \"std::string hex_str_$(*F)() { return std::string{$(*F), $(*F) + sizeof($(*F))}; }\" && \\\n+\t echo \"};\"; \\\n \t} > \"$@.new\" && mv -f \"$@.new\" \"$@\"\n \t@echo \"Generated $@\""
      },
      {
        "sha": "a2fe7c47b9545c8d1585b61fc6b9c8f168a07350",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=fa517ac9ec7c808b986e0a79f0e0cc77571bd19b",
        "patch": "@@ -20,7 +20,7 @@ BOOST_FIXTURE_TEST_SUITE(base58_tests, BasicTestingSetup)\n // Goal: test low-level base58 encoding functionality\n BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n {\n-    UniValue tests = read_json(std::string(json_tests::base58_encode_decode, json_tests::base58_encode_decode + sizeof(json_tests::base58_encode_decode)));\n+    UniValue tests = read_json(json_tests::hex_str_base58_encode_decode());\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         std::string strTest = test.write();\n@@ -40,7 +40,7 @@ BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n // Goal: test low-level base58 decoding functionality\n BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n {\n-    UniValue tests = read_json(std::string(json_tests::base58_encode_decode, json_tests::base58_encode_decode + sizeof(json_tests::base58_encode_decode)));\n+    UniValue tests = read_json(json_tests::hex_str_base58_encode_decode());\n     std::vector<unsigned char> result;\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {"
      },
      {
        "sha": "d7c4d409a9fdc173ea11c3f4f0570e8fd2c37358",
        "filename": "src/test/blockfilter_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b/src/test/blockfilter_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b/src/test/blockfilter_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_tests.cpp?ref=fa517ac9ec7c808b986e0a79f0e0cc77571bd19b",
        "patch": "@@ -128,9 +128,7 @@ BOOST_AUTO_TEST_CASE(blockfilter_basic_test)\n BOOST_AUTO_TEST_CASE(blockfilters_json_test)\n {\n     UniValue json;\n-    std::string json_data(json_tests::blockfilters,\n-                          json_tests::blockfilters + sizeof(json_tests::blockfilters));\n-    if (!json.read(json_data) || !json.isArray()) {\n+    if (!json.read(json_tests::hex_str_blockfilters()) || !json.isArray()) {\n         BOOST_ERROR(\"Parse error.\");\n         return;\n     }"
      },
      {
        "sha": "b8ac0400c9d2b4e12f00b7b319dac59d7f8d68dd",
        "filename": "src/test/key_io_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b/src/test/key_io_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b/src/test/key_io_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_io_tests.cpp?ref=fa517ac9ec7c808b986e0a79f0e0cc77571bd19b",
        "patch": "@@ -22,7 +22,7 @@ BOOST_FIXTURE_TEST_SUITE(key_io_tests, BasicTestingSetup)\n // Goal: check that parsed keys match test payload\n BOOST_AUTO_TEST_CASE(key_io_valid_parse)\n {\n-    UniValue tests = read_json(std::string(json_tests::key_io_valid, json_tests::key_io_valid + sizeof(json_tests::key_io_valid)));\n+    UniValue tests = read_json(json_tests::hex_str_key_io_valid());\n     CKey privkey;\n     CTxDestination destination;\n     SelectParams(CBaseChainParams::MAIN);\n@@ -83,7 +83,7 @@ BOOST_AUTO_TEST_CASE(key_io_valid_parse)\n // Goal: check that generated keys match test vectors\n BOOST_AUTO_TEST_CASE(key_io_valid_gen)\n {\n-    UniValue tests = read_json(std::string(json_tests::key_io_valid, json_tests::key_io_valid + sizeof(json_tests::key_io_valid)));\n+    UniValue tests = read_json(json_tests::hex_str_key_io_valid());\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n@@ -121,7 +121,7 @@ BOOST_AUTO_TEST_CASE(key_io_valid_gen)\n // Goal: check that base58 parsing code is robust against a variety of corrupted data\n BOOST_AUTO_TEST_CASE(key_io_invalid)\n {\n-    UniValue tests = read_json(std::string(json_tests::key_io_invalid, json_tests::key_io_invalid + sizeof(json_tests::key_io_invalid))); // Negative testcases\n+    UniValue tests = read_json(json_tests::hex_str_key_io_invalid()); // Negative testcases\n     CKey privkey;\n     CTxDestination destination;\n "
      },
      {
        "sha": "e0c8edc6382e05e31ffa318271108f913b532d33",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=fa517ac9ec7c808b986e0a79f0e0cc77571bd19b",
        "patch": "@@ -930,7 +930,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n     std::set<std::string> tests_set;\n \n     {\n-        UniValue json_tests = read_json(std::string(json_tests::script_tests, json_tests::script_tests + sizeof(json_tests::script_tests)));\n+        UniValue json_tests = read_json(json_tests::hex_str_script_tests());\n \n         for (unsigned int idx = 0; idx < json_tests.size(); idx++) {\n             const UniValue& tv = json_tests[idx];\n@@ -969,7 +969,7 @@ BOOST_AUTO_TEST_CASE(script_json_test)\n     // scripts.\n     // If a witness is given, then the last value in the array should be the\n     // amount (nValue) to use in the crediting tx\n-    UniValue tests = read_json(std::string(json_tests::script_tests, json_tests::script_tests + sizeof(json_tests::script_tests)));\n+    UniValue tests = read_json(json_tests::hex_str_script_tests());\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];"
      },
      {
        "sha": "4e58112d4f95883feb92cf83ffdb0672036e3cd9",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=fa517ac9ec7c808b986e0a79f0e0cc77571bd19b",
        "patch": "@@ -164,7 +164,7 @@ BOOST_AUTO_TEST_CASE(sighash_test)\n // Goal: check that SignatureHash generates correct hash\n BOOST_AUTO_TEST_CASE(sighash_from_data)\n {\n-    UniValue tests = read_json(std::string(json_tests::sighash, json_tests::sighash + sizeof(json_tests::sighash)));\n+    UniValue tests = read_json(json_tests::hex_str_sighash());\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];"
      },
      {
        "sha": "d85e480d023ef85322e457535eaca7cc138aa062",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa517ac9ec7c808b986e0a79f0e0cc77571bd19b/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=fa517ac9ec7c808b986e0a79f0e0cc77571bd19b",
        "patch": "@@ -103,7 +103,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n     // ... where all scripts are stringified scripts.\n     //\n     // verifyFlags is a comma separated list of script verification flags to apply, or \"NONE\"\n-    UniValue tests = read_json(std::string(json_tests::tx_valid, json_tests::tx_valid + sizeof(json_tests::tx_valid)));\n+    UniValue tests = read_json(json_tests::hex_str_tx_valid());\n \n     ScriptError err;\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n@@ -188,7 +188,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n     // ... where all scripts are stringified scripts.\n     //\n     // verifyFlags is a comma separated list of script verification flags to apply, or \"NONE\"\n-    UniValue tests = read_json(std::string(json_tests::tx_invalid, json_tests::tx_invalid + sizeof(json_tests::tx_invalid)));\n+    UniValue tests = read_json(json_tests::hex_str_tx_invalid());\n \n     // Initialize to SCRIPT_ERR_OK. The tests expect err to be changed to a\n     // value other than SCRIPT_ERR_OK."
      }
    ]
  }
]