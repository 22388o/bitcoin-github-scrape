[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297214943",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-297214943",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10279",
    "id": 297214943,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzIxNDk0Mw==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-26T01:53:33Z",
    "updated_at": "2017-04-26T01:53:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Obviously the end goal here is to take revenge for #771 :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297214943/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297741469",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-297741469",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10279",
    "id": 297741469,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5Nzc0MTQ2OQ==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-27T15:04:14Z",
    "updated_at": "2017-04-27T15:04:14Z",
    "author_association": "MEMBER",
    "body": "utACK (beyond nits, most of them not very important):\r\n- Make DisconnectBlock unaware of where undo data resides on disk e32dc53af14aa28d936da9c9b5a80b5fe522ad18 \r\n- Create initial CChainState to hold chain state information 20aa3811df65e39d60572876ab2850eea6194429\r\n- Move block writing out of AcceptBlock 33aad08c6e7b0a9e291163c39538bee00be7e953\r\n- Move some additional variables into CChainState private 0acb237f752c0cf7fd783e8c09c0cb55203a6a83\r\n\r\nStill trying to understand: Make ConnectBlock unaware of txindex/undo data disk locations f2e9d9a5d8d57b277634c5f822134aab7fc05b7b\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297741469/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/298249683",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-298249683",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10279",
    "id": 298249683,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODI0OTY4Mw==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-30T18:51:11Z",
    "updated_at": "2017-04-30T18:51:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Removed InsertBlockIndex from validation.h since it was moved into CChainState (there were no external callers already).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/298249683/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/298796875",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-298796875",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10279",
    "id": 298796875,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODc5Njg3NQ==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-03T00:21:58Z",
    "updated_at": "2017-05-03T00:21:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "As for removing the global references to member parts of CChainState...that's probably a ways out. First step is to clarify the internal stuff within validation.cpp and make external accesses to it const, then I'll expose the class itself (unless you feel particularly inclined to build the scripted diff before I get to it - need #10189 first, probably.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/298796875/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/298915852",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-298915852",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10279",
    "id": 298915852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODkxNTg1Mg==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-03T13:48:17Z",
    "updated_at": "2017-05-03T13:48:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "utACK 120743a83f26923cd9ef4db068fd6c9b8b8ea4dd",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/298915852/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306356477",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-306356477",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10279",
    "id": 306356477,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjM1NjQ3Nw==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-06T01:34:45Z",
    "updated_at": "2017-06-06T01:34:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306356477/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307449855",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-307449855",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10279",
    "id": 307449855,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzQ0OTg1NQ==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T17:26:07Z",
    "updated_at": "2017-06-09T17:26:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Indeed, rebased the copy that was on my workstation and not my laptop, re-rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307449855/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307968048",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-307968048",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10279",
    "id": 307968048,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzk2ODA0OA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-13T00:00:22Z",
    "updated_at": "2017-06-13T00:00:22Z",
    "author_association": "MEMBER",
    "body": "Nice, concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307968048/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/322591032",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-322591032",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10279",
    "id": 322591032,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjU5MTAzMg==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-15T21:13:15Z",
    "updated_at": "2017-08-15T21:13:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased properly this time, with the various 0.15 changes.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/322591032/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/336210888",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-336210888",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10279",
    "id": 336210888,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjIxMDg4OA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-12T17:36:09Z",
    "updated_at": "2017-10-12T17:36:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Should this be merged? It has utACKs from jtimon, instagibbs, and me, and a concept ACK from sipa.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/336210888/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/336590003",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-336590003",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10279",
    "id": 336590003,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjU5MDAwMw==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-13T23:29:10Z",
    "updated_at": "2017-10-13T23:29:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "Addressed @ryanofsky's nits and noted where I disagreed.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/336590003/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348980904",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-348980904",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10279",
    "id": 348980904,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODk4MDkwNA==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-04T14:40:05Z",
    "updated_at": "2017-12-04T14:40:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348980904/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351053110",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-351053110",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10279",
    "id": 351053110,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTA1MzExMA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T13:36:42Z",
    "updated_at": "2017-12-12T13:36:42Z",
    "author_association": "MEMBER",
    "body": "utACK 22fdddeabb17881af2004c45538f91514837d363",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351053110/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351172215",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-351172215",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10279",
    "id": 351172215,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTE3MjIxNQ==",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-12T19:45:34Z",
    "updated_at": "2017-12-12T19:45:34Z",
    "author_association": "MEMBER",
    "body": "post-merge utACK 22fdddeabb17881af2004c45538f91514837d363. Very nice!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351172215/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113708480",
    "pull_request_review_id": 35120146,
    "id": 113708480,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzcwODQ4MA==",
    "diff_hunk": "@@ -3511,9 +3538,9 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     return pindexNew;\n }\n \n-bool static LoadBlockIndexDB(const CChainParams& chainparams)\n+bool CChainState::Load(CBlockTreeDB& blocktree)",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 121,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "20aa3811df65e39d60572876ab2850eea6194429",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The CChainParams are still needed (or at least Consensus::Params) see https://github.com/bitcoin/bitcoin/pull/9176",
    "created_at": "2017-04-27T14:23:18Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113708480",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113708480"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113708480"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113708480/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3399,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113709236",
    "pull_request_review_id": 35120955,
    "id": 113709236,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzcwOTIzNg==",
    "diff_hunk": "@@ -3160,6 +3160,24 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n     return true;\n }\n \n+static CDiskBlockPos WriteBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const CDiskBlockPos* dbp) {\n+    unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+    CDiskBlockPos blockPos;\n+    if (dbp != NULL)\n+        blockPos = *dbp;\n+    if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != NULL)) {\n+        error(\"AcceptBlock(): FindBlockPos failed\");\n+        return CDiskBlockPos();\n+    }\n+    if (dbp == NULL) {\n+        if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart())) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "33aad08c6e7b0a9e291163c39538bee00be7e953",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If this is the only use of chainparams, perhaps it is better to just pass chainparams.MessageStart() directly instead.",
    "created_at": "2017-04-27T14:26:16Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113709236",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113709236"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113709236"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113709236/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3293,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113712885",
    "pull_request_review_id": 35125101,
    "id": 113712885,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzcxMjg4NQ==",
    "diff_hunk": "@@ -1446,8 +1446,12 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     return true;\n }\n \n-bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uint256& hashBlock)\n+bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex *pindex)",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "e32dc53af14aa28d936da9c9b5a80b5fe522ad18",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think UndoReadFromDisk can be static.",
    "created_at": "2017-04-27T14:40:03Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113712885",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113712885"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113712885"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113712885/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1325,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113713105",
    "pull_request_review_id": 35125339,
    "id": 113713105,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzcxMzEwNQ==",
    "diff_hunk": "@@ -1898,28 +1928,16 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     if (fJustCheck)\n         return true;\n \n-    // Write undo information to disk\n-    if (pindex->GetUndoPos().IsNull() || !pindex->IsValid(BLOCK_VALID_SCRIPTS))\n-    {\n-        if (pindex->GetUndoPos().IsNull()) {\n-            CDiskBlockPos _pos;\n-            if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n-                return error(\"ConnectBlock(): FindUndoPos failed\");\n-            if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n-                return AbortNode(state, \"Failed to write undo data\");\n-\n-            // update nUndoPos in block index\n-            pindex->nUndoPos = _pos.nPos;\n-            pindex->nStatus |= BLOCK_HAVE_UNDO;\n-        }\n+    if (!WriteUndoDataForBlock(blockundo, state, pindex, chainparams))\n+        return false;\n \n+    if (!pindex->IsValid(BLOCK_VALID_SCRIPTS)) {",
    "path": "src/validation.cpp",
    "position": 382,
    "original_position": 84,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "f2e9d9a5d8d57b277634c5f822134aab7fc05b7b",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "just noting: previously the following two lines are hit even if this conditional isn't true(and `pindex->GetUndoPos().IsNull()` is). No idea if this is a behavior change",
    "created_at": "2017-04-27T14:40:47Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113713105",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113713105"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113713105"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113713105/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1977,
    "original_line": 1977,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113713158",
    "pull_request_review_id": 35125101,
    "id": 113713158,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzcxMzE1OA==",
    "diff_hunk": "@@ -1624,6 +1624,42 @@ void static FlushBlockFile(bool fFinalize = false)\n \n bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n \n+static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams)\n+{\n+    // Write undo information to disk\n+    if (pindex->GetUndoPos().IsNull()) {\n+        CDiskBlockPos _pos;\n+        if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n+            return error(\"ConnectBlock(): FindUndoPos failed\");\n+        if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))",
    "path": "src/validation.cpp",
    "position": 295,
    "original_position": 11,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "f2e9d9a5d8d57b277634c5f822134aab7fc05b7b",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Again, If this is the only use of chainparams, perhaps it is better to just pass chainparams.MessageStart() directly instead.",
    "created_at": "2017-04-27T14:40:59Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113713158",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113713158"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113713158"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113713158/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1636,
    "original_line": 1636,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113715158",
    "pull_request_review_id": 35125339,
    "id": 113715158,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzcxNTE1OA==",
    "diff_hunk": "@@ -1624,6 +1624,42 @@ void static FlushBlockFile(bool fFinalize = false)\n \n bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n \n+static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams)\n+{\n+    // Write undo information to disk\n+    if (pindex->GetUndoPos().IsNull()) {\n+        CDiskBlockPos _pos;\n+        if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n+            return error(\"ConnectBlock(): FindUndoPos failed\");\n+        if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n+            return AbortNode(state, \"Failed to write undo data\");\n+\n+        // update nUndoPos in block index\n+        pindex->nUndoPos = _pos.nPos;\n+        pindex->nStatus |= BLOCK_HAVE_UNDO;\n+    }\n+\n+    return true;\n+}\n+\n+static bool WriteTxIndexDataForBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const CTransactionRef& tx : block.vtx)\n+    {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+\n+    if (fTxIndex)",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 33,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "f2e9d9a5d8d57b277634c5f822134aab7fc05b7b",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why do any of this if `fTxIndex` is false?",
    "created_at": "2017-04-27T14:45:57Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113715158",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113715158"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113715158"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113715158/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1656,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113715268",
    "pull_request_review_id": 35127668,
    "id": 113715268,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzcxNTI2OA==",
    "diff_hunk": "@@ -53,11 +53,60 @@\n /**\n  * Global state\n  */\n+namespace {\n+    struct CBlockIndexWorkComparator\n+    {\n+        bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {\n+            // First sort by most total work, ...\n+            if (pa->nChainWork > pb->nChainWork) return false;\n+            if (pa->nChainWork < pb->nChainWork) return true;\n+\n+            // ... then by earliest time received, ...\n+            if (pa->nSequenceId < pb->nSequenceId) return false;\n+            if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+            // Use pointer address as tie breaker (should only happen with blocks\n+            // loaded from disk, as those all have id 0).\n+            if (pa < pb) return false;\n+            if (pa > pb) return true;\n+\n+            // Identical blocks.\n+            return false;\n+        }\n+    };\n+};",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "20aa3811df65e39d60572876ab2850eea6194429",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "There was a PR uniforming comments for ending namespaces. Also, according to our style, we don't indent on namespaces: https://github.com/bitcoin/bitcoin/blob/master/src/.clang-format#L32",
    "created_at": "2017-04-27T14:46:14Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113715268",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113715268"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113715268"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113715268/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 76,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113715447",
    "pull_request_review_id": 35127854,
    "id": 113715447,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzcxNTQ0Nw==",
    "diff_hunk": "@@ -3511,9 +3538,9 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     return pindexNew;\n }\n \n-bool static LoadBlockIndexDB(const CChainParams& chainparams)\n+bool CChainState::Load(CBlockTreeDB& blocktree)",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 121,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "20aa3811df65e39d60572876ab2850eea6194429",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Probably better to move the CheckProofOfWord check into CChainParams::InsertBlockIndex (or the lambda). As eventually CChainParams should be a local variable inside CChainState, any objections to leaving this for later?",
    "created_at": "2017-04-27T14:46:39Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113715447",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113715447"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113715447"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113715447/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3399,
    "side": "RIGHT",
    "in_reply_to_id": 113708480
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113716280",
    "pull_request_review_id": 35128719,
    "id": 113716280,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzcxNjI4MA==",
    "diff_hunk": "@@ -3160,6 +3160,24 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n     return true;\n }\n \n+static CDiskBlockPos WriteBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const CDiskBlockPos* dbp) {\n+    unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+    CDiskBlockPos blockPos;\n+    if (dbp != NULL)\n+        blockPos = *dbp;\n+    if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != NULL)) {\n+        error(\"AcceptBlock(): FindBlockPos failed\");\n+        return CDiskBlockPos();\n+    }\n+    if (dbp == NULL) {\n+        if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart())) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "33aad08c6e7b0a9e291163c39538bee00be7e953",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Seems somewhat strange for CChainState to care at all about the existance of MessageStart(), no?",
    "created_at": "2017-04-27T14:48:34Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113716280",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113716280"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113716280"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113716280/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3293,
    "side": "RIGHT",
    "in_reply_to_id": 113709236
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113716676",
    "pull_request_review_id": 35129126,
    "id": 113716676,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzcxNjY3Ng==",
    "diff_hunk": "@@ -1446,8 +1446,12 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     return true;\n }\n \n-bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uint256& hashBlock)\n+bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex *pindex)",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "e32dc53af14aa28d936da9c9b5a80b5fe522ad18",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It is already in an anonymous namespace, which I believe is equivalent.",
    "created_at": "2017-04-27T14:49:27Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113716676",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113716676"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113716676"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113716676/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1325,
    "side": "RIGHT",
    "in_reply_to_id": 113712885
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113717313",
    "pull_request_review_id": 35129755,
    "id": 113717313,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzcxNzMxMw==",
    "diff_hunk": "@@ -53,11 +53,60 @@\n /**\n  * Global state\n  */\n+namespace {\n+    struct CBlockIndexWorkComparator\n+    {\n+        bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {\n+            // First sort by most total work, ...\n+            if (pa->nChainWork > pb->nChainWork) return false;\n+            if (pa->nChainWork < pb->nChainWork) return true;\n+\n+            // ... then by earliest time received, ...\n+            if (pa->nSequenceId < pb->nSequenceId) return false;\n+            if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+            // Use pointer address as tie breaker (should only happen with blocks\n+            // loaded from disk, as those all have id 0).\n+            if (pa < pb) return false;\n+            if (pa > pb) return true;\n+\n+            // Identical blocks.\n+            return false;\n+        }\n+    };\n+};",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "20aa3811df65e39d60572876ab2850eea6194429",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2017-04-27T14:50:53Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113717313",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113717313"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113717313"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113717313/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 76,
    "side": "RIGHT",
    "in_reply_to_id": 113715268
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113718994",
    "pull_request_review_id": 35131603,
    "id": 113718994,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzcxODk5NA==",
    "diff_hunk": "@@ -3215,19 +3233,13 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     if (!IsInitialBlockDownload() && chainActive.Tip() == pindex->pprev)\n         GetMainSignals().NewPoWValidBlock(pindex, pblock);\n \n-    int nHeight = pindex->nHeight;\n-\n     // Write block to history file\n     try {\n-        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n-        CDiskBlockPos blockPos;\n-        if (dbp != NULL)\n-            blockPos = *dbp;\n-        if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != NULL))\n-            return error(\"AcceptBlock(): FindBlockPos failed\");\n-        if (dbp == NULL)\n-            if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart()))\n-                AbortNode(state, \"Failed to write block\");\n+        CDiskBlockPos blockPos = WriteBlockToDisk(block, pindex->nHeight, chainparams, dbp);\n+        if (blockPos.IsNull()) {\n+            state.Error(\"AcceptBlock(): Failed to find position to write new block to disk\");",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 62,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "33aad08c6e7b0a9e291163c39538bee00be7e953",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```strprintf(\"%s: Failed to find position to write new block to disk\", __func__)```",
    "created_at": "2017-04-27T14:56:18Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113718994",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113718994"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113718994"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113718994/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3240,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113719134",
    "pull_request_review_id": 35131751,
    "id": 113719134,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzcxOTEzNA==",
    "diff_hunk": "@@ -3160,6 +3160,24 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n     return true;\n }\n \n+static CDiskBlockPos WriteBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const CDiskBlockPos* dbp) {\n+    unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+    CDiskBlockPos blockPos;\n+    if (dbp != NULL)\n+        blockPos = *dbp;\n+    if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != NULL)) {\n+        error(\"AcceptBlock(): FindBlockPos failed\");",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 28,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "33aad08c6e7b0a9e291163c39538bee00be7e953",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```strprintf(\"%s: FindBlockPos failed\", __func__)```",
    "created_at": "2017-04-27T14:56:51Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113719134",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113719134"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113719134"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113719134/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3169,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113720238",
    "pull_request_review_id": 35132988,
    "id": 113720238,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzcyMDIzOA==",
    "diff_hunk": "@@ -3215,19 +3233,13 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     if (!IsInitialBlockDownload() && chainActive.Tip() == pindex->pprev)\n         GetMainSignals().NewPoWValidBlock(pindex, pblock);\n \n-    int nHeight = pindex->nHeight;\n-\n     // Write block to history file\n     try {\n-        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n-        CDiskBlockPos blockPos;\n-        if (dbp != NULL)\n-            blockPos = *dbp;\n-        if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != NULL))\n-            return error(\"AcceptBlock(): FindBlockPos failed\");\n-        if (dbp == NULL)\n-            if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart()))\n-                AbortNode(state, \"Failed to write block\");\n+        CDiskBlockPos blockPos = WriteBlockToDisk(block, pindex->nHeight, chainparams, dbp);\n+        if (blockPos.IsNull()) {\n+            state.Error(\"AcceptBlock(): Failed to find position to write new block to disk\");",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 62,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "33aad08c6e7b0a9e291163c39538bee00be7e953",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2017-04-27T15:00:43Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113720238",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113720238"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113720238"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113720238/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3240,
    "side": "RIGHT",
    "in_reply_to_id": 113718994
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113720248",
    "pull_request_review_id": 35132997,
    "id": 113720248,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzcyMDI0OA==",
    "diff_hunk": "@@ -3160,6 +3160,24 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n     return true;\n }\n \n+static CDiskBlockPos WriteBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const CDiskBlockPos* dbp) {\n+    unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+    CDiskBlockPos blockPos;\n+    if (dbp != NULL)\n+        blockPos = *dbp;\n+    if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != NULL)) {\n+        error(\"AcceptBlock(): FindBlockPos failed\");",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 28,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "33aad08c6e7b0a9e291163c39538bee00be7e953",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2017-04-27T15:00:46Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113720248",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113720248"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113720248"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113720248/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3169,
    "side": "RIGHT",
    "in_reply_to_id": 113719134
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113728255",
    "pull_request_review_id": 35142010,
    "id": 113728255,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzcyODI1NQ==",
    "diff_hunk": "@@ -1624,6 +1624,42 @@ void static FlushBlockFile(bool fFinalize = false)\n \n bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n \n+static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams)\n+{\n+    // Write undo information to disk\n+    if (pindex->GetUndoPos().IsNull()) {\n+        CDiskBlockPos _pos;\n+        if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n+            return error(\"ConnectBlock(): FindUndoPos failed\");\n+        if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n+            return AbortNode(state, \"Failed to write undo data\");\n+\n+        // update nUndoPos in block index\n+        pindex->nUndoPos = _pos.nPos;\n+        pindex->nStatus |= BLOCK_HAVE_UNDO;\n+    }\n+\n+    return true;\n+}\n+\n+static bool WriteTxIndexDataForBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const CTransactionRef& tx : block.vtx)\n+    {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+\n+    if (fTxIndex)",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 33,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "f2e9d9a5d8d57b277634c5f822134aab7fc05b7b",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Because it used to be? Anyway, fixed in new commit.",
    "created_at": "2017-04-27T15:30:08Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113728255",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113728255"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113728255"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113728255/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1656,
    "side": "RIGHT",
    "in_reply_to_id": 113715158
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113730369",
    "pull_request_review_id": 35142010,
    "id": 113730369,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzczMDM2OQ==",
    "diff_hunk": "@@ -1898,28 +1928,16 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     if (fJustCheck)\n         return true;\n \n-    // Write undo information to disk\n-    if (pindex->GetUndoPos().IsNull() || !pindex->IsValid(BLOCK_VALID_SCRIPTS))\n-    {\n-        if (pindex->GetUndoPos().IsNull()) {\n-            CDiskBlockPos _pos;\n-            if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n-                return error(\"ConnectBlock(): FindUndoPos failed\");\n-            if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n-                return AbortNode(state, \"Failed to write undo data\");\n-\n-            // update nUndoPos in block index\n-            pindex->nUndoPos = _pos.nPos;\n-            pindex->nStatus |= BLOCK_HAVE_UNDO;\n-        }\n+    if (!WriteUndoDataForBlock(blockundo, state, pindex, chainparams))\n+        return false;\n \n+    if (!pindex->IsValid(BLOCK_VALID_SCRIPTS)) {",
    "path": "src/validation.cpp",
    "position": 382,
    "original_position": 84,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "f2e9d9a5d8d57b277634c5f822134aab7fc05b7b",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hmm, it may be, though not sure you could ever tickle it. I went ahead and duplicated the setDirtyBlockIndex.insert() call inside of WriteUndoDataForBlock.",
    "created_at": "2017-04-27T15:37:39Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113730369",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113730369"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113730369"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113730369/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1977,
    "original_line": 1977,
    "side": "RIGHT",
    "in_reply_to_id": 113713105
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113731298",
    "pull_request_review_id": 35145342,
    "id": 113731298,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzczMTI5OA==",
    "diff_hunk": "@@ -3160,6 +3160,24 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n     return true;\n }\n \n+static CDiskBlockPos WriteBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const CDiskBlockPos* dbp) {\n+    unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+    CDiskBlockPos blockPos;\n+    if (dbp != NULL)\n+        blockPos = *dbp;\n+    if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != NULL)) {\n+        error(\"AcceptBlock(): FindBlockPos failed\");\n+        return CDiskBlockPos();\n+    }\n+    if (dbp == NULL) {\n+        if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart())) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "33aad08c6e7b0a9e291163c39538bee00be7e953",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Strange or not, it does care about ut. It seems more strange for this new function to take the whole CChainParams class only for one getter, no?",
    "created_at": "2017-04-27T15:41:36Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113731298",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113731298"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113731298"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113731298/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3293,
    "side": "RIGHT",
    "in_reply_to_id": 113709236
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113732571",
    "pull_request_review_id": 35146747,
    "id": 113732571,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzczMjU3MQ==",
    "diff_hunk": "@@ -3511,9 +3538,9 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     return pindexNew;\n }\n \n-bool static LoadBlockIndexDB(const CChainParams& chainparams)\n+bool CChainState::Load(CBlockTreeDB& blocktree)",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 121,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "20aa3811df65e39d60572876ab2850eea6194429",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What lambda?\r\nAnyway, if we plan not to do #9176 and moving the check instead, then there's no point in passing Consensus::Params to CChainState::Load if it's going to be only temporary.\r\n",
    "created_at": "2017-04-27T15:46:49Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113732571",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113732571"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113732571"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113732571/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3399,
    "side": "RIGHT",
    "in_reply_to_id": 113708480
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113736111",
    "pull_request_review_id": 35150546,
    "id": 113736111,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzczNjExMQ==",
    "diff_hunk": "@@ -3160,6 +3160,24 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n     return true;\n }\n \n+static CDiskBlockPos WriteBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const CDiskBlockPos* dbp) {\n+    unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+    CDiskBlockPos blockPos;\n+    if (dbp != NULL)\n+        blockPos = *dbp;\n+    if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != NULL)) {\n+        error(\"AcceptBlock(): FindBlockPos failed\");\n+        return CDiskBlockPos();\n+    }\n+    if (dbp == NULL) {\n+        if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart())) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "33aad08c6e7b0a9e291163c39538bee00be7e953",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Well CChainState doesn't care about MessageStart(), it only cares that the write function figures out what it needs to do, if that means using Messagestart() thats between the write function and chainparams, not CChainState's business. Eventually the write function should be a virtual function inside an interface class and that class can hold the chainparams locally with CChainState only having a Consensus::Params.",
    "created_at": "2017-04-27T15:59:53Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113736111",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113736111"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113736111"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113736111/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3293,
    "side": "RIGHT",
    "in_reply_to_id": 113709236
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113736813",
    "pull_request_review_id": 35151298,
    "id": 113736813,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzczNjgxMw==",
    "diff_hunk": "@@ -3511,9 +3538,9 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     return pindexNew;\n }\n \n-bool static LoadBlockIndexDB(const CChainParams& chainparams)\n+bool CChainState::Load(CBlockTreeDB& blocktree)",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 121,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "20aa3811df65e39d60572876ab2850eea6194429",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "eg the CheckProofOfWork call that is currently in LoadBlockIndexGuts can just go in the insertBlockIndex lambda function and the call to that should be a fully-filled CBlockIndex instead of that getting filled by LoadBlockIndexGuts.",
    "created_at": "2017-04-27T16:02:38Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113736813",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113736813"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113736813"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113736813/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3399,
    "side": "RIGHT",
    "in_reply_to_id": 113708480
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113741574",
    "pull_request_review_id": 35156565,
    "id": 113741574,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzc0MTU3NA==",
    "diff_hunk": "@@ -3160,6 +3160,24 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n     return true;\n }\n \n+static CDiskBlockPos WriteBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const CDiskBlockPos* dbp) {\n+    unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+    CDiskBlockPos blockPos;\n+    if (dbp != NULL)\n+        blockPos = *dbp;\n+    if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != NULL)) {\n+        error(\"AcceptBlock(): FindBlockPos failed\");\n+        return CDiskBlockPos();\n+    }\n+    if (dbp == NULL) {\n+        if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart())) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "33aad08c6e7b0a9e291163c39538bee00be7e953",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "CChainState::Load definitely cares about MessageStart(). But we disagree on next steps, I won't insist further.",
    "created_at": "2017-04-27T16:22:14Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113741574",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113741574"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113741574"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113741574/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3293,
    "side": "RIGHT",
    "in_reply_to_id": 113709236
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114376205",
    "pull_request_review_id": 35836989,
    "id": 114376205,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDM3NjIwNQ==",
    "diff_hunk": "@@ -1446,8 +1446,12 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     return true;\n }\n \n-bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uint256& hashBlock)\n+bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex *pindex)\n {\n+    CDiskBlockPos pos = pindex->GetUndoPos();\n+    if (pos.IsNull())\n+        return error(\"%s: Undo data not available\", __func__);",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "e32dc53af14aa28d936da9c9b5a80b5fe522ad18",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Make DisconnectBlock unaware of where undo data resides on disk\"\r\n\r\nNote slight change in behavior here. \"no undo data available\" is now \"Undo data not available\"",
    "created_at": "2017-05-02T17:28:48Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114376205",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114376205"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114376205"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114376205/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1329,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114378475",
    "pull_request_review_id": 35836989,
    "id": 114378475,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDM3ODQ3NQ==",
    "diff_hunk": "@@ -1624,6 +1624,43 @@ void static FlushBlockFile(bool fFinalize = false)\n \n bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n \n+static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams)",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "41fef26554096f04dcf55c8a3dea6c17369d0da3",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Make ConnectBlock unaware of txindex/undo data disk locations\"\r\n\r\n`MaybeWriteUndoDataForBlock` might be a more descriptive name.",
    "created_at": "2017-05-02T17:38:25Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114378475",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114378475"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114378475"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114378475/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1629,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114380423",
    "pull_request_review_id": 35836989,
    "id": 114380423,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDM4MDQyMw==",
    "diff_hunk": "@@ -1624,6 +1624,43 @@ void static FlushBlockFile(bool fFinalize = false)\n \n bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n \n+static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams)\n+{\n+    // Write undo information to disk\n+    if (pindex->GetUndoPos().IsNull()) {\n+        CDiskBlockPos _pos;\n+        if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n+            return error(\"ConnectBlock(): FindUndoPos failed\");\n+        if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n+            return AbortNode(state, \"Failed to write undo data\");\n+\n+        // update nUndoPos in block index\n+        pindex->nUndoPos = _pos.nPos;\n+        pindex->nStatus |= BLOCK_HAVE_UNDO;\n+        setDirtyBlockIndex.insert(pindex);\n+    }\n+\n+    return true;\n+}\n+\n+static bool WriteTxIndexDataForBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const CTransactionRef& tx : block.vtx)\n+    {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));",
    "path": "src/validation.cpp",
    "position": 316,
    "original_position": 30,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "41fef26554096f04dcf55c8a3dea6c17369d0da3",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Make ConnectBlock unaware of txindex/undo data disk locations\":\r\n\r\nThis is just moved code, but could get rid of make_pair using emplace_back here. Could also get rid of pos variable using vPos.back().",
    "created_at": "2017-05-02T17:46:56Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114380423",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114380423"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114380423"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114380423/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1657,
    "original_line": 1657,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114386766",
    "pull_request_review_id": 35836989,
    "id": 114386766,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDM4Njc2Ng==",
    "diff_hunk": "@@ -98,6 +98,7 @@ class CChainState {\n     bool Load(CBlockTreeDB& blocktree);\n \n private:\n+    /** Create a new block index entry for a given block hash */",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "48e4cb59718223a56e4bd3dea579ff8768450296",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should squash the two \"Create initial CChainState to hold chain state information\" commits.",
    "created_at": "2017-05-02T18:13:10Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114386766",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114386766"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114386766"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114386766/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 188,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114387276",
    "pull_request_review_id": 35836989,
    "id": 114387276,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDM4NzI3Ng==",
    "diff_hunk": "@@ -53,11 +53,60 @@\n /**\n  * Global state\n  */\n+namespace {\n+struct CBlockIndexWorkComparator\n+{\n+    bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {\n+        // First sort by most total work, ...\n+        if (pa->nChainWork > pb->nChainWork) return false;\n+        if (pa->nChainWork < pb->nChainWork) return true;\n+\n+        // ... then by earliest time received, ...\n+        if (pa->nSequenceId < pb->nSequenceId) return false;\n+        if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+        // Use pointer address as tie breaker (should only happen with blocks\n+        // loaded from disk, as those all have id 0).\n+        if (pa < pb) return false;\n+        if (pa > pb) return true;\n+\n+        // Identical blocks.\n+        return false;\n+    }\n+};\n+};\n+\n+/**\n+ * CChainState stores and provides an API to update our local copy of the chain\n+ *\n+ * It generally provides access to the current chain tree, as well as functions\n+ * to provide it new data, which it will appropriately validate and incorporate\n+ * in its state as neccessary.",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "b8f6d69812b4d8e16f242c26c2a000b65de134d2",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Create initial CChainState to hold chain state information\"\r\n\r\nSpelling \"necessary\"",
    "created_at": "2017-05-02T18:15:13Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114387276",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114387276"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114387276"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114387276/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 93,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114387564",
    "pull_request_review_id": 35836989,
    "id": 114387564,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDM4NzU2NA==",
    "diff_hunk": "@@ -53,11 +53,60 @@\n /**\n  * Global state\n  */\n+namespace {\n+struct CBlockIndexWorkComparator\n+{\n+    bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {\n+        // First sort by most total work, ...\n+        if (pa->nChainWork > pb->nChainWork) return false;\n+        if (pa->nChainWork < pb->nChainWork) return true;\n+\n+        // ... then by earliest time received, ...\n+        if (pa->nSequenceId < pb->nSequenceId) return false;\n+        if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+        // Use pointer address as tie breaker (should only happen with blocks\n+        // loaded from disk, as those all have id 0).\n+        if (pa < pb) return false;\n+        if (pa > pb) return true;\n+\n+        // Identical blocks.\n+        return false;\n+    }\n+};\n+};\n+\n+/**\n+ * CChainState stores and provides an API to update our local copy of the chain",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 28,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "b8f6d69812b4d8e16f242c26c2a000b65de134d2",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Create initial CChainState to hold chain state information\"\r\n\r\nStores what? May be some words missing.",
    "created_at": "2017-05-02T18:16:31Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114387564",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114387564"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114387564"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114387564/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 89,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114388186",
    "pull_request_review_id": 35836989,
    "id": 114388186,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDM4ODE4Ng==",
    "diff_hunk": "@@ -53,11 +53,60 @@\n /**\n  * Global state\n  */\n+namespace {\n+struct CBlockIndexWorkComparator\n+{\n+    bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {\n+        // First sort by most total work, ...\n+        if (pa->nChainWork > pb->nChainWork) return false;\n+        if (pa->nChainWork < pb->nChainWork) return true;\n+\n+        // ... then by earliest time received, ...\n+        if (pa->nSequenceId < pb->nSequenceId) return false;\n+        if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+        // Use pointer address as tie breaker (should only happen with blocks\n+        // loaded from disk, as those all have id 0).\n+        if (pa < pb) return false;\n+        if (pa > pb) return true;\n+\n+        // Identical blocks.\n+        return false;\n+    }\n+};\n+};\n+\n+/**\n+ * CChainState stores and provides an API to update our local copy of the chain\n+ *\n+ * It generally provides access to the current chain tree, as well as functions\n+ * to provide it new data, which it will appropriately validate and incorporate\n+ * in its state as neccessary.\n+ *\n+ * Eventually, the API here is targeted at being exposed externally as a\n+ * consumable libconsensus library, so any functions added must only call\n+ * external functions via callbacks, or to read/write data from disk.",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 36,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "b8f6d69812b4d8e16f242c26c2a000b65de134d2",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Create initial CChainState to hold chain state information\"\r\n\r\nWhat's an external function? Would be helpful to say something about which functions are and aren't external.",
    "created_at": "2017-05-02T18:19:18Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114388186",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114388186"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114388186"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114388186/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 97,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114388901",
    "pull_request_review_id": 35836989,
    "id": 114388901,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDM4ODkwMQ==",
    "diff_hunk": "@@ -53,11 +53,60 @@\n /**\n  * Global state\n  */\n+namespace {\n+struct CBlockIndexWorkComparator\n+{\n+    bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {\n+        // First sort by most total work, ...\n+        if (pa->nChainWork > pb->nChainWork) return false;\n+        if (pa->nChainWork < pb->nChainWork) return true;\n+\n+        // ... then by earliest time received, ...\n+        if (pa->nSequenceId < pb->nSequenceId) return false;\n+        if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+        // Use pointer address as tie breaker (should only happen with blocks\n+        // loaded from disk, as those all have id 0).\n+        if (pa < pb) return false;\n+        if (pa > pb) return true;\n+\n+        // Identical blocks.\n+        return false;\n+    }\n+};\n+};\n+\n+/**\n+ * CChainState stores and provides an API to update our local copy of the chain\n+ *\n+ * It generally provides access to the current chain tree, as well as functions\n+ * to provide it new data, which it will appropriately validate and incorporate\n+ * in its state as neccessary.\n+ *\n+ * Eventually, the API here is targeted at being exposed externally as a\n+ * consumable libconsensus library, so any functions added must only call\n+ * external functions via callbacks, or to read/write data from disk.\n+ */\n+class CChainState {\n+public:\n+    CChain chainActive;\n+    BlockMap mapBlockIndex;\n+    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n+    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n+    CBlockIndex *pindexBestInvalid;",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 44,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "b8f6d69812b4d8e16f242c26c2a000b65de134d2",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Create initial CChainState to hold chain state information\"\r\n\r\nShould add `= nullptr;`",
    "created_at": "2017-05-02T18:22:32Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114388901",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114388901"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114388901"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114388901/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 123,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114389918",
    "pull_request_review_id": 35836989,
    "id": 114389918,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDM4OTkxOA==",
    "diff_hunk": "@@ -3512,9 +3539,9 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     return pindexNew;\n }\n \n-bool static LoadBlockIndexDB(const CChainParams& chainparams)\n+bool CChainState::Load(CBlockTreeDB& blocktree)\n {\n-    if (!pblocktree->LoadBlockIndexGuts(InsertBlockIndex))\n+    if (!blocktree.LoadBlockIndexGuts([this](uint256 hash){ return this->InsertBlockIndex(hash); }))",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 124,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "b8f6d69812b4d8e16f242c26c2a000b65de134d2",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Create initial CChainState to hold chain state information\"\r\n\r\nProbably should pass hash by const reference.",
    "created_at": "2017-05-02T18:26:48Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114389918",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114389918"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114389918"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114389918/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3401,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114390883",
    "pull_request_review_id": 35836989,
    "id": 114390883,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDM5MDg4Mw==",
    "diff_hunk": "@@ -53,11 +53,60 @@\n /**\n  * Global state\n  */\n+namespace {\n+struct CBlockIndexWorkComparator\n+{\n+    bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {\n+        // First sort by most total work, ...\n+        if (pa->nChainWork > pb->nChainWork) return false;\n+        if (pa->nChainWork < pb->nChainWork) return true;\n+\n+        // ... then by earliest time received, ...\n+        if (pa->nSequenceId < pb->nSequenceId) return false;\n+        if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+        // Use pointer address as tie breaker (should only happen with blocks\n+        // loaded from disk, as those all have id 0).\n+        if (pa < pb) return false;\n+        if (pa > pb) return true;\n+\n+        // Identical blocks.\n+        return false;\n+    }\n+};\n+};\n+\n+/**\n+ * CChainState stores and provides an API to update our local copy of the chain\n+ *\n+ * It generally provides access to the current chain tree, as well as functions\n+ * to provide it new data, which it will appropriately validate and incorporate\n+ * in its state as neccessary.\n+ *\n+ * Eventually, the API here is targeted at being exposed externally as a\n+ * consumable libconsensus library, so any functions added must only call\n+ * external functions via callbacks, or to read/write data from disk.\n+ */\n+class CChainState {\n+public:\n+    CChain chainActive;\n+    BlockMap mapBlockIndex;\n+    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n+    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n+    CBlockIndex *pindexBestInvalid;\n+\n+    bool Load(CBlockTreeDB& blocktree);",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 46,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "b8f6d69812b4d8e16f242c26c2a000b65de134d2",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Create initial CChainState to hold chain state information\"\r\n\r\nMaybe `Load` and `InsertBlockIndex` should be static while they aren't (yet?) accessing any class members.",
    "created_at": "2017-05-02T18:30:38Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114390883",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114390883"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114390883"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114390883/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 126,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114396882",
    "pull_request_review_id": 35836989,
    "id": 114396882,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDM5Njg4Mg==",
    "diff_hunk": "@@ -3278,6 +3324,8 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     if (fCheckForPruning)\n         FlushStateToDisk(state, FLUSH_STATE_NONE); // we just allocated more disk space for block files\n \n+    CheckBlockIndex(chainparams.GetConsensus());",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 280,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "a49f6add324a4a765ec75bd9a20cef06e0e230d1",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Move a bunch of chainstate-manipulation functions into CChainState\"\r\n\r\nCheckBlockIndex call added accidentally here? Behavior change should probably go in a separate commit.",
    "created_at": "2017-05-02T18:55:41Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114396882",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114396882"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114396882"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114396882/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3378,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114399620",
    "pull_request_review_id": 35836989,
    "id": 114399620,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDM5OTYyMA==",
    "diff_hunk": "@@ -3881,6 +3942,17 @@ bool LoadBlockIndex(const CChainParams& chainparams)\n     return true;\n }\n \n+\n+bool CChainState::ReceiveGenesisBlock(const CBlock &block, const CDiskBlockPos& blockPos, const Consensus::Params& consensusParams) {\n+    CBlockIndex *pindex = AddToBlockIndex(block);\n+    CValidationState state;\n+    if (!ReceivedBlockTransactions(block, state, pindex, blockPos, consensusParams)) {\n+        return error(\"LoadBlockIndex(): genesis block not accepted\");",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 402,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "a49f6add324a4a765ec75bd9a20cef06e0e230d1",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Move a bunch of chainstate-manipulation functions into CChainState\":\r\n\r\nLoadBlockIndex should be ReceiveGenesisBlock or \\_\\_func__ now.",
    "created_at": "2017-05-02T19:08:09Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114399620",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114399620"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114399620"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114399620/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3794,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114401375",
    "pull_request_review_id": 35836989,
    "id": 114401375,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDQwMTM3NQ==",
    "diff_hunk": "@@ -88,18 +90,59 @@ struct CBlockIndexWorkComparator\n  * external functions via callbacks, or to read/write data from disk.\n  */\n class CChainState {\n+private:\n+    /**\n+     * The set of all CBlockIndex entries with BLOCK_VALID_TRANSACTIONS (for itself and all ancestors) and\n+     * as good as our current tip or better. Entries may be failed, though, and pruning nodes may be\n+     * missing the data for the block.\n+     */\n+    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n public:\n     CChain chainActive;\n     BlockMap mapBlockIndex;\n     std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n-    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n     CBlockIndex *pindexBestInvalid;\n \n     bool Load(CBlockTreeDB& blocktree);\n \n+    bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock);\n+\n+    bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex);\n+    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock);\n+\n+    // Block (dis)connection on a given view:\n+    bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean = NULL);\n+    bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n+                    CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false);\n+\n+    // Block disconnection on our pcoinsTip:\n+    bool DisconnectTip(CValidationState& state, const CChainParams& chainparams, bool fBare = false);\n+\n+    // Manual block validity manipulation:\n+    bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n+    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n+    bool ResetBlockFailureFlags(CBlockIndex *pindex);\n+\n+    bool RewindBlockIndex(const CChainParams& params);\n+\n+    void PruneBlockIndexCandidates();\n+\n+    bool ReceiveGenesisBlock(const CBlock &block, const CDiskBlockPos& blockPos, const Consensus::Params& consensusParams);\n+\n+    void UnloadBlockIndex();",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 53,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "a49f6add324a4a765ec75bd9a20cef06e0e230d1",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Move a bunch of chainstate-manipulation functions into CChainState\"\r\n\r\nMaybe this method should just be called `Unload` to be consistent with the `Load` method (which was previously `LoadBlockIndexDB`)",
    "created_at": "2017-05-02T19:16:36Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114401375",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114401375"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114401375"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114401375/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 181,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114452539",
    "pull_request_review_id": 35919600,
    "id": 114452539,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDQ1MjUzOQ==",
    "diff_hunk": "@@ -98,6 +98,7 @@ class CChainState {\n     bool Load(CBlockTreeDB& blocktree);\n \n private:\n+    /** Create a new block index entry for a given block hash */",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "48e4cb59718223a56e4bd3dea579ff8768450296",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh, no idea how that came about, thanks.",
    "created_at": "2017-05-03T00:00:07Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114452539",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114452539"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114452539"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114452539/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 188,
    "side": "RIGHT",
    "in_reply_to_id": 114386766
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114452597",
    "pull_request_review_id": 35919663,
    "id": 114452597,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDQ1MjU5Nw==",
    "diff_hunk": "@@ -53,11 +53,60 @@\n /**\n  * Global state\n  */\n+namespace {\n+struct CBlockIndexWorkComparator\n+{\n+    bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {\n+        // First sort by most total work, ...\n+        if (pa->nChainWork > pb->nChainWork) return false;\n+        if (pa->nChainWork < pb->nChainWork) return true;\n+\n+        // ... then by earliest time received, ...\n+        if (pa->nSequenceId < pb->nSequenceId) return false;\n+        if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+        // Use pointer address as tie breaker (should only happen with blocks\n+        // loaded from disk, as those all have id 0).\n+        if (pa < pb) return false;\n+        if (pa > pb) return true;\n+\n+        // Identical blocks.\n+        return false;\n+    }\n+};\n+};\n+\n+/**\n+ * CChainState stores and provides an API to update our local copy of the chain",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 28,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "b8f6d69812b4d8e16f242c26c2a000b65de134d2",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'll clarify. It pretty much means mapBlockIndex/chainActive.",
    "created_at": "2017-05-03T00:00:38Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114452597",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114452597"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114452597"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114452597/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 89,
    "side": "RIGHT",
    "in_reply_to_id": 114387564
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114453010",
    "pull_request_review_id": 35920115,
    "id": 114453010,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDQ1MzAxMA==",
    "diff_hunk": "@@ -1624,6 +1624,43 @@ void static FlushBlockFile(bool fFinalize = false)\n \n bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n \n+static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams)\n+{\n+    // Write undo information to disk\n+    if (pindex->GetUndoPos().IsNull()) {\n+        CDiskBlockPos _pos;\n+        if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n+            return error(\"ConnectBlock(): FindUndoPos failed\");\n+        if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n+            return AbortNode(state, \"Failed to write undo data\");\n+\n+        // update nUndoPos in block index\n+        pindex->nUndoPos = _pos.nPos;\n+        pindex->nStatus |= BLOCK_HAVE_UNDO;\n+        setDirtyBlockIndex.insert(pindex);\n+    }\n+\n+    return true;\n+}\n+\n+static bool WriteTxIndexDataForBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const CTransactionRef& tx : block.vtx)\n+    {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));",
    "path": "src/validation.cpp",
    "position": 316,
    "original_position": 30,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "41fef26554096f04dcf55c8a3dea6c17369d0da3",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Clarified in the commit message instead, thanks for pointing this out (the intent is to not do the actual reading from disk calls inside of CChainState). Will leave other cleanups for later PRs.",
    "created_at": "2017-05-03T00:04:22Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114453010",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114453010"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114453010"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114453010/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1657,
    "original_line": 1657,
    "side": "RIGHT",
    "in_reply_to_id": 114380423
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114453026",
    "pull_request_review_id": 35920125,
    "id": 114453026,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDQ1MzAyNg==",
    "diff_hunk": "@@ -53,11 +53,60 @@\n /**\n  * Global state\n  */\n+namespace {\n+struct CBlockIndexWorkComparator\n+{\n+    bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {\n+        // First sort by most total work, ...\n+        if (pa->nChainWork > pb->nChainWork) return false;\n+        if (pa->nChainWork < pb->nChainWork) return true;\n+\n+        // ... then by earliest time received, ...\n+        if (pa->nSequenceId < pb->nSequenceId) return false;\n+        if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+        // Use pointer address as tie breaker (should only happen with blocks\n+        // loaded from disk, as those all have id 0).\n+        if (pa < pb) return false;\n+        if (pa > pb) return true;\n+\n+        // Identical blocks.\n+        return false;\n+    }\n+};\n+};\n+\n+/**\n+ * CChainState stores and provides an API to update our local copy of the chain\n+ *\n+ * It generally provides access to the current chain tree, as well as functions\n+ * to provide it new data, which it will appropriately validate and incorporate\n+ * in its state as neccessary.",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "b8f6d69812b4d8e16f242c26c2a000b65de134d2",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2017-05-03T00:04:26Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114453026",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114453026"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114453026"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114453026/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 93,
    "side": "RIGHT",
    "in_reply_to_id": 114387276
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114453212",
    "pull_request_review_id": 35920322,
    "id": 114453212,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDQ1MzIxMg==",
    "diff_hunk": "@@ -53,11 +53,60 @@\n /**\n  * Global state\n  */\n+namespace {\n+struct CBlockIndexWorkComparator\n+{\n+    bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {\n+        // First sort by most total work, ...\n+        if (pa->nChainWork > pb->nChainWork) return false;\n+        if (pa->nChainWork < pb->nChainWork) return true;\n+\n+        // ... then by earliest time received, ...\n+        if (pa->nSequenceId < pb->nSequenceId) return false;\n+        if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+        // Use pointer address as tie breaker (should only happen with blocks\n+        // loaded from disk, as those all have id 0).\n+        if (pa < pb) return false;\n+        if (pa > pb) return true;\n+\n+        // Identical blocks.\n+        return false;\n+    }\n+};\n+};\n+\n+/**\n+ * CChainState stores and provides an API to update our local copy of the chain\n+ *\n+ * It generally provides access to the current chain tree, as well as functions\n+ * to provide it new data, which it will appropriately validate and incorporate\n+ * in its state as neccessary.\n+ *\n+ * Eventually, the API here is targeted at being exposed externally as a\n+ * consumable libconsensus library, so any functions added must only call\n+ * external functions via callbacks, or to read/write data from disk.\n+ */\n+class CChainState {\n+public:\n+    CChain chainActive;\n+    BlockMap mapBlockIndex;\n+    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n+    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n+    CBlockIndex *pindexBestInvalid;",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 44,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "b8f6d69812b4d8e16f242c26c2a000b65de134d2",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed.",
    "created_at": "2017-05-03T00:06:10Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114453212",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114453212"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114453212"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114453212/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 123,
    "side": "RIGHT",
    "in_reply_to_id": 114388901
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454782",
    "pull_request_review_id": 35921921,
    "id": 114454782,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDQ1NDc4Mg==",
    "diff_hunk": "@@ -1446,8 +1446,12 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     return true;\n }\n \n-bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uint256& hashBlock)\n+bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex *pindex)\n {\n+    CDiskBlockPos pos = pindex->GetUndoPos();\n+    if (pos.IsNull())\n+        return error(\"%s: Undo data not available\", __func__);",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "e32dc53af14aa28d936da9c9b5a80b5fe522ad18",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Reverted the string change.",
    "created_at": "2017-05-03T00:20:03Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454782",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454782"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454782"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454782/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1329,
    "side": "RIGHT",
    "in_reply_to_id": 114376205
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454789",
    "pull_request_review_id": 35921926,
    "id": 114454789,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDQ1NDc4OQ==",
    "diff_hunk": "@@ -53,11 +53,60 @@\n /**\n  * Global state\n  */\n+namespace {\n+struct CBlockIndexWorkComparator\n+{\n+    bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {\n+        // First sort by most total work, ...\n+        if (pa->nChainWork > pb->nChainWork) return false;\n+        if (pa->nChainWork < pb->nChainWork) return true;\n+\n+        // ... then by earliest time received, ...\n+        if (pa->nSequenceId < pb->nSequenceId) return false;\n+        if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+        // Use pointer address as tie breaker (should only happen with blocks\n+        // loaded from disk, as those all have id 0).\n+        if (pa < pb) return false;\n+        if (pa > pb) return true;\n+\n+        // Identical blocks.\n+        return false;\n+    }\n+};\n+};\n+\n+/**\n+ * CChainState stores and provides an API to update our local copy of the chain\n+ *\n+ * It generally provides access to the current chain tree, as well as functions\n+ * to provide it new data, which it will appropriately validate and incorporate\n+ * in its state as neccessary.\n+ *\n+ * Eventually, the API here is targeted at being exposed externally as a\n+ * consumable libconsensus library, so any functions added must only call\n+ * external functions via callbacks, or to read/write data from disk.",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 36,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "b8f6d69812b4d8e16f242c26c2a000b65de134d2",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Clarified a bunch.",
    "created_at": "2017-05-03T00:20:05Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454789",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454789"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454789"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454789/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 97,
    "side": "RIGHT",
    "in_reply_to_id": 114388186
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454794",
    "pull_request_review_id": 35921933,
    "id": 114454794,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDQ1NDc5NA==",
    "diff_hunk": "@@ -53,11 +53,60 @@\n /**\n  * Global state\n  */\n+namespace {\n+struct CBlockIndexWorkComparator\n+{\n+    bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {\n+        // First sort by most total work, ...\n+        if (pa->nChainWork > pb->nChainWork) return false;\n+        if (pa->nChainWork < pb->nChainWork) return true;\n+\n+        // ... then by earliest time received, ...\n+        if (pa->nSequenceId < pb->nSequenceId) return false;\n+        if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+        // Use pointer address as tie breaker (should only happen with blocks\n+        // loaded from disk, as those all have id 0).\n+        if (pa < pb) return false;\n+        if (pa > pb) return true;\n+\n+        // Identical blocks.\n+        return false;\n+    }\n+};\n+};\n+\n+/**\n+ * CChainState stores and provides an API to update our local copy of the chain\n+ *\n+ * It generally provides access to the current chain tree, as well as functions\n+ * to provide it new data, which it will appropriately validate and incorporate\n+ * in its state as neccessary.\n+ *\n+ * Eventually, the API here is targeted at being exposed externally as a\n+ * consumable libconsensus library, so any functions added must only call\n+ * external functions via callbacks, or to read/write data from disk.\n+ */\n+class CChainState {\n+public:\n+    CChain chainActive;\n+    BlockMap mapBlockIndex;\n+    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n+    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n+    CBlockIndex *pindexBestInvalid;\n+\n+    bool Load(CBlockTreeDB& blocktree);",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 46,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "b8f6d69812b4d8e16f242c26c2a000b65de134d2",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Load adds to mapBlocksUnlinked and InsertBlockIndex into mapBlockIndex. In the next PR mapBlockIndex and chainActive will be const when accessed via the global references, so would prefer to leave it.",
    "created_at": "2017-05-03T00:20:08Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454794",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454794"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454794"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454794/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 126,
    "side": "RIGHT",
    "in_reply_to_id": 114390883
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454795",
    "pull_request_review_id": 35921935,
    "id": 114454795,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDQ1NDc5NQ==",
    "diff_hunk": "@@ -88,18 +90,59 @@ struct CBlockIndexWorkComparator\n  * external functions via callbacks, or to read/write data from disk.\n  */\n class CChainState {\n+private:\n+    /**\n+     * The set of all CBlockIndex entries with BLOCK_VALID_TRANSACTIONS (for itself and all ancestors) and\n+     * as good as our current tip or better. Entries may be failed, though, and pruning nodes may be\n+     * missing the data for the block.\n+     */\n+    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n public:\n     CChain chainActive;\n     BlockMap mapBlockIndex;\n     std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n-    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n     CBlockIndex *pindexBestInvalid;\n \n     bool Load(CBlockTreeDB& blocktree);\n \n+    bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock);\n+\n+    bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex);\n+    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock);\n+\n+    // Block (dis)connection on a given view:\n+    bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean = NULL);\n+    bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n+                    CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false);\n+\n+    // Block disconnection on our pcoinsTip:\n+    bool DisconnectTip(CValidationState& state, const CChainParams& chainparams, bool fBare = false);\n+\n+    // Manual block validity manipulation:\n+    bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n+    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n+    bool ResetBlockFailureFlags(CBlockIndex *pindex);\n+\n+    bool RewindBlockIndex(const CChainParams& params);\n+\n+    void PruneBlockIndexCandidates();\n+\n+    bool ReceiveGenesisBlock(const CBlock &block, const CDiskBlockPos& blockPos, const Consensus::Params& consensusParams);\n+\n+    void UnloadBlockIndex();",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 53,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "a49f6add324a4a765ec75bd9a20cef06e0e230d1",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Changed Load to LoadBlockIndex instead.",
    "created_at": "2017-05-03T00:20:10Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454795",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454795"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454795"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454795/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 181,
    "side": "RIGHT",
    "in_reply_to_id": 114401375
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454798",
    "pull_request_review_id": 35921939,
    "id": 114454798,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDQ1NDc5OA==",
    "diff_hunk": "@@ -3512,9 +3539,9 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     return pindexNew;\n }\n \n-bool static LoadBlockIndexDB(const CChainParams& chainparams)\n+bool CChainState::Load(CBlockTreeDB& blocktree)\n {\n-    if (!pblocktree->LoadBlockIndexGuts(InsertBlockIndex))\n+    if (!blocktree.LoadBlockIndexGuts([this](uint256 hash){ return this->InsertBlockIndex(hash); }))",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 124,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "b8f6d69812b4d8e16f242c26c2a000b65de134d2",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Indeed, not actually 100% sure why that compiled...",
    "created_at": "2017-05-03T00:20:11Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454798",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454798"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454798"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454798/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3401,
    "side": "RIGHT",
    "in_reply_to_id": 114389918
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454800",
    "pull_request_review_id": 35921940,
    "id": 114454800,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDQ1NDgwMA==",
    "diff_hunk": "@@ -3278,6 +3324,8 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     if (fCheckForPruning)\n         FlushStateToDisk(state, FLUSH_STATE_NONE); // we just allocated more disk space for block files\n \n+    CheckBlockIndex(chainparams.GetConsensus());",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 280,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "a49f6add324a4a765ec75bd9a20cef06e0e230d1",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This was to replace the one removed from ProcessNewBlock. Should be +/- equivalent to the old version, I believe?",
    "created_at": "2017-05-03T00:20:13Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454800",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454800"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454800"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454800/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3378,
    "side": "RIGHT",
    "in_reply_to_id": 114396882
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454804",
    "pull_request_review_id": 35921943,
    "id": 114454804,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDQ1NDgwNA==",
    "diff_hunk": "@@ -3881,6 +3942,17 @@ bool LoadBlockIndex(const CChainParams& chainparams)\n     return true;\n }\n \n+\n+bool CChainState::ReceiveGenesisBlock(const CBlock &block, const CDiskBlockPos& blockPos, const Consensus::Params& consensusParams) {\n+    CBlockIndex *pindex = AddToBlockIndex(block);\n+    CValidationState state;\n+    if (!ReceivedBlockTransactions(block, state, pindex, blockPos, consensusParams)) {\n+        return error(\"LoadBlockIndex(): genesis block not accepted\");",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 402,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "a49f6add324a4a765ec75bd9a20cef06e0e230d1",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed",
    "created_at": "2017-05-03T00:20:14Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454804",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454804"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454804"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114454804/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3794,
    "side": "RIGHT",
    "in_reply_to_id": 114399620
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120986424",
    "pull_request_review_id": 42999643,
    "id": 120986424,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDk4NjQyNA==",
    "diff_hunk": "@@ -1446,8 +1446,12 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     return true;\n }\n \n-bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uint256& hashBlock)\n+bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex *pindex)\n {\n+    CDiskBlockPos pos = pindex->GetUndoPos();\n+    if (pos.IsNull())\n+        return error(\"%s: Undo data not available\", __func__);",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "e32dc53af14aa28d936da9c9b5a80b5fe522ad18",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Make DisconnectBlock unaware of where undo data resides on disk\"\r\n\r\nString changed back again. Did you maybe rebase an older version of this PR? It seems like some of the changes you made between https://github.com/bitcoin/bitcoin/commits/c431484b612c68d4faf7f8d6af858729f2b9a56d and https://github.com/bitcoin/bitcoin/commits/120743a83f26923cd9ef4db068fd6c9b8b8ea4dd got reverted.",
    "created_at": "2017-06-08T20:09:40Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r120986424",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120986424"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r120986424"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120986424/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1329,
    "side": "RIGHT",
    "in_reply_to_id": 114376205
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120987698",
    "pull_request_review_id": 42999643,
    "id": 120987698,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDk4NzY5OA==",
    "diff_hunk": "@@ -53,11 +53,60 @@\n /**\n  * Global state\n  */\n+namespace {\n+struct CBlockIndexWorkComparator\n+{\n+    bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {\n+        // First sort by most total work, ...\n+        if (pa->nChainWork > pb->nChainWork) return false;\n+        if (pa->nChainWork < pb->nChainWork) return true;\n+\n+        // ... then by earliest time received, ...\n+        if (pa->nSequenceId < pb->nSequenceId) return false;\n+        if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+        // Use pointer address as tie breaker (should only happen with blocks\n+        // loaded from disk, as those all have id 0).\n+        if (pa < pb) return false;\n+        if (pa > pb) return true;\n+\n+        // Identical blocks.\n+        return false;\n+    }\n+};\n+};\n+\n+/**\n+ * CChainState stores and provides an API to update our local copy of the chain\n+ *\n+ * It generally provides access to the current chain tree, as well as functions\n+ * to provide it new data, which it will appropriately validate and incorporate\n+ * in its state as neccessary.\n+ *\n+ * Eventually, the API here is targeted at being exposed externally as a\n+ * consumable libconsensus library, so any functions added must only call\n+ * external functions via callbacks, or to read/write data from disk.",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 36,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "b8f6d69812b4d8e16f242c26c2a000b65de134d2",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Create initial CChainState to hold chain state information\"\r\n\r\nCChainState comment updates made previously seem to be lost, pindexBestInvalid initialization is gone, LoadBlockIndex() got changed back to Load(), and InsertBlockIndex() documentation is gone.",
    "created_at": "2017-06-08T20:14:15Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r120987698",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120987698"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r120987698"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/120987698/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 97,
    "side": "RIGHT",
    "in_reply_to_id": 114388186
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129372775",
    "pull_request_review_id": 52139201,
    "id": 129372775,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTM3Mjc3NQ==",
    "diff_hunk": "@@ -53,11 +53,60 @@\n /**\n  * Global state\n  */\n+namespace {\n+struct CBlockIndexWorkComparator\n+{\n+    bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {\n+        // First sort by most total work, ...\n+        if (pa->nChainWork > pb->nChainWork) return false;\n+        if (pa->nChainWork < pb->nChainWork) return true;\n+\n+        // ... then by earliest time received, ...\n+        if (pa->nSequenceId < pb->nSequenceId) return false;\n+        if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+        // Use pointer address as tie breaker (should only happen with blocks\n+        // loaded from disk, as those all have id 0).\n+        if (pa < pb) return false;\n+        if (pa > pb) return true;\n+\n+        // Identical blocks.\n+        return false;\n+    }\n+};\n+};\n+\n+/**\n+ * CChainState stores and provides an API to update our local copy of the chain\n+ *\n+ * It generally provides access to the current chain tree, as well as functions\n+ * to provide it new data, which it will appropriately validate and incorporate\n+ * in its state as neccessary.\n+ *\n+ * Eventually, the API here is targeted at being exposed externally as a\n+ * consumable libconsensus library, so any functions added must only call\n+ * external functions via callbacks, or to read/write data from disk.",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 36,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "b8f6d69812b4d8e16f242c26c2a000b65de134d2",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thread https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114388186\r\n\r\nNewer comment got reverted somehow. It was:\r\n\r\n```\r\n/**\r\n * CChainState stores and provides an API to update our local knowledge of the\r\n * current best chain and header tree.\r\n *\r\n * It generally provides access to the current block tree, as well as functions\r\n * to provide new data, which it will appropriately validate and incorporate in\r\n * its state as necessary.\r\n *\r\n * Eventually, the API here is targeted at being exposed externally as a\r\n * consumable libconsensus library, so any functions added must only call\r\n * other class member functions, pure functions in other parts of the consensus\r\n * library, callbacks, or read/write-to-disk functions (eventually this will\r\n * also be via callbacks).\r\n */\r\n```",
    "created_at": "2017-07-25T17:33:28Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r129372775",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129372775"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r129372775"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/129372775/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 97,
    "side": "RIGHT",
    "in_reply_to_id": 114388186
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133469435",
    "pull_request_review_id": 56653313,
    "id": 133469435,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzQ2OTQzNQ==",
    "diff_hunk": "@@ -1820,28 +1851,16 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     if (fJustCheck)\n         return true;\n \n-    // Write undo information to disk\n-    if (pindex->GetUndoPos().IsNull() || !pindex->IsValid(BLOCK_VALID_SCRIPTS))\n-    {\n-        if (pindex->GetUndoPos().IsNull()) {\n-            CDiskBlockPos _pos;\n-            if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n-                return error(\"ConnectBlock(): FindUndoPos failed\");\n-            if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n-                return AbortNode(state, \"Failed to write undo data\");\n-\n-            // update nUndoPos in block index\n-            pindex->nUndoPos = _pos.nPos;\n-            pindex->nStatus |= BLOCK_HAVE_UNDO;\n-        }\n+    if (!WriteUndoDataForBlock(blockundo, state, pindex, chainparams))\n+        return false;\n \n+    if (!pindex->IsValid(BLOCK_VALID_SCRIPTS)) {\n         pindex->RaiseValidity(BLOCK_VALID_SCRIPTS);",
    "path": "src/validation.cpp",
    "position": 383,
    "original_position": 86,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "85596371283b8e069b9088500206d8ffbf81bb0d",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Move txindex/undo data disk location stuff out of ConnectBlock\"\r\n\r\nIt seems RaiseValidity call used to happen in the case pindex->GetUndoPos().IsNull() && pindex->IsValid(BLOCK_VALID_SCRIPTS) but now doesn't happen anymore.\r\n\r\nGuessing this is not an issue but wanted to point out the change.",
    "created_at": "2017-08-16T14:40:23Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133469435",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133469435"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133469435"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133469435/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1978,
    "original_line": 1978,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133478853",
    "pull_request_review_id": 56653313,
    "id": 133478853,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzQ3ODg1Mw==",
    "diff_hunk": "@@ -3103,6 +3103,25 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n+static CDiskBlockPos WriteBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const CDiskBlockPos* dbp) {\n+    unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+    CDiskBlockPos blockPos;\n+    if (dbp != nullptr)\n+        blockPos = *dbp;\n+    if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != nullptr)) {",
    "path": "src/validation.cpp",
    "position": 615,
    "original_position": 27,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "dc461681ff9d5883decc4031c5c1d66029d61600",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Move block writing out of AcceptBlock\"\r\n\r\nYou aren't changing this, but a harder to screw up interface to FindBlockPos might take an `optional<CDiskBlockPos>&` argument, instead of `CDiskBlockPos&` and `fKnown` arguments.",
    "created_at": "2017-08-16T15:11:39Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133478853",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133478853"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133478853"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133478853/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3288,
    "original_line": 3288,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133480412",
    "pull_request_review_id": 56653313,
    "id": 133480412,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzQ4MDQxMg==",
    "diff_hunk": "@@ -3103,6 +3103,25 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n+static CDiskBlockPos WriteBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const CDiskBlockPos* dbp) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 22,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "dc461681ff9d5883decc4031c5c1d66029d61600",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Move block writing out of AcceptBlock\"\r\n\r\nMight call this SaveBlockToDisk or since it doesn't actually write to disk if it's already written.",
    "created_at": "2017-08-16T15:16:15Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133480412",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133480412"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133480412"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133480412/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3106,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133483381",
    "pull_request_review_id": 56653313,
    "id": 133483381,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzQ4MzM4MQ==",
    "diff_hunk": "@@ -3157,19 +3176,13 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     if (!IsInitialBlockDownload() && chainActive.Tip() == pindex->pprev)\n         GetMainSignals().NewPoWValidBlock(pindex, pblock);\n \n-    int nHeight = pindex->nHeight;\n-\n     // Write block to history file\n     try {\n-        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n-        CDiskBlockPos blockPos;\n-        if (dbp != nullptr)\n-            blockPos = *dbp;\n-        if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != nullptr))\n-            return error(\"AcceptBlock(): FindBlockPos failed\");\n-        if (dbp == nullptr)\n-            if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart()))\n-                AbortNode(state, \"Failed to write block\");\n+        CDiskBlockPos blockPos = WriteBlockToDisk(block, pindex->nHeight, chainparams, dbp);\n+        if (blockPos.IsNull()) {\n+            state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 63,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "dc461681ff9d5883decc4031c5c1d66029d61600",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Move block writing out of AcceptBlock\":\r\n\r\nThis seems misleading since the error can also happen if the internal WriteBlockToDisk call fails. Maybe the new WriteBlockToDisk should just call state.Error itself, or return the error strings it already generates. Returning an error might also make sense because in both WriteBlockToDisk calls, the returned blockpos isn't actually used for anything.",
    "created_at": "2017-08-16T15:26:08Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133483381",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133483381"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133483381"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133483381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3366,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133486660",
    "pull_request_review_id": 56653313,
    "id": 133486660,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzQ4NjY2MA==",
    "diff_hunk": "@@ -56,11 +56,117 @@\n /**\n  * Global state\n  */\n+namespace {\n+    struct CBlockIndexWorkComparator\n+    {\n+        bool operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {\n+            // First sort by most total work, ...\n+            if (pa->nChainWork > pb->nChainWork) return false;\n+            if (pa->nChainWork < pb->nChainWork) return true;\n+\n+            // ... then by earliest time received, ...\n+            if (pa->nSequenceId < pb->nSequenceId) return false;\n+            if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+            // Use pointer address as tie breaker (should only happen with blocks\n+            // loaded from disk, as those all have id 0).\n+            if (pa < pb) return false;\n+            if (pa > pb) return true;\n+\n+            // Identical blocks.\n+            return false;\n+        }\n+    };\n+} // anon namespace\n+\n+enum DisconnectResult\n+{\n+    DISCONNECT_OK,      // All good.\n+    DISCONNECT_UNCLEAN, // Rolled back, but UTXO set was inconsistent with block.\n+    DISCONNECT_FAILED   // Something else went wrong.\n+};\n+\n+class ConnectTrace;\n+\n+/**\n+ * CChainState stores and provides an API to update our local knowledge of the\n+ * current best chain and header tree.\n+ *\n+ * It generally provides access to the current block tree, as well as functions\n+ * to provide new data, which it will appropriately validate and incorporate in\n+ * its state as necessary.\n+ *\n+ * Eventually, the API here is targeted at being exposed externally as a\n+ * consumable libconsensus library, so any functions added must only call\n+ * other class member functions, pure functions in other parts of the consensus\n+ * library, callbacks, or read/write-to-disk functions (eventually this will\n+ * also be via callbacks).",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 48,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "a6e978884ea5046f4d36c80338ca69c3f1c7b46d",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Create initial CChainState to hold chain state information\"\r\n\r\nMaybe mention:\r\n\r\n- Things that methods in this class should not be accessing. Presumably mempool & network?\r\n- Examples of where this class is currently doing something that it shouldn't and will be cleaned up later.",
    "created_at": "2017-08-16T15:37:28Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133486660",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133486660"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133486660"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133486660/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 103,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133488685",
    "pull_request_review_id": 56653313,
    "id": 133488685,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzQ4ODY4NQ==",
    "diff_hunk": "@@ -56,11 +56,117 @@\n /**\n  * Global state\n  */\n+namespace {\n+    struct CBlockIndexWorkComparator\n+    {\n+        bool operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {\n+            // First sort by most total work, ...\n+            if (pa->nChainWork > pb->nChainWork) return false;\n+            if (pa->nChainWork < pb->nChainWork) return true;\n+\n+            // ... then by earliest time received, ...\n+            if (pa->nSequenceId < pb->nSequenceId) return false;\n+            if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+            // Use pointer address as tie breaker (should only happen with blocks\n+            // loaded from disk, as those all have id 0).\n+            if (pa < pb) return false;\n+            if (pa > pb) return true;\n+\n+            // Identical blocks.\n+            return false;\n+        }\n+    };\n+} // anon namespace\n+\n+enum DisconnectResult\n+{\n+    DISCONNECT_OK,      // All good.\n+    DISCONNECT_UNCLEAN, // Rolled back, but UTXO set was inconsistent with block.\n+    DISCONNECT_FAILED   // Something else went wrong.\n+};\n+\n+class ConnectTrace;\n+\n+/**\n+ * CChainState stores and provides an API to update our local knowledge of the\n+ * current best chain and header tree.\n+ *\n+ * It generally provides access to the current block tree, as well as functions\n+ * to provide new data, which it will appropriately validate and incorporate in\n+ * its state as necessary.\n+ *\n+ * Eventually, the API here is targeted at being exposed externally as a\n+ * consumable libconsensus library, so any functions added must only call\n+ * other class member functions, pure functions in other parts of the consensus\n+ * library, callbacks, or read/write-to-disk functions (eventually this will\n+ * also be via callbacks).\n+ */\n+class CChainState {\n+private:\n+    /**\n+     * The set of all CBlockIndex entries with BLOCK_VALID_TRANSACTIONS (for itself and all ancestors) and\n+     * as good as our current tip or better. Entries may be failed, though, and pruning nodes may be\n+     * missing the data for the block.\n+     */\n+    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n+public:\n+    CChain chainActive;\n+    BlockMap mapBlockIndex;\n+    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n+    CBlockIndex *pindexBestInvalid = nullptr;",
    "path": "src/validation.cpp",
    "position": 111,
    "original_position": 62,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "a6e978884ea5046f4d36c80338ca69c3f1c7b46d",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Create initial CChainState to hold chain state information\"\r\n\r\nSince you're creating backwards compatible aliases for these variables anyway, it seems like you could easily give them updated names that follow the style guide (e.g. m_best_invalid_block).",
    "created_at": "2017-08-16T15:44:27Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133488685",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133488685"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133488685"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133488685/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 153,
    "original_line": 153,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133489324",
    "pull_request_review_id": 56653313,
    "id": 133489324,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzQ4OTMyNA==",
    "diff_hunk": "@@ -56,11 +56,117 @@\n /**\n  * Global state\n  */\n+namespace {\n+    struct CBlockIndexWorkComparator\n+    {\n+        bool operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {\n+            // First sort by most total work, ...\n+            if (pa->nChainWork > pb->nChainWork) return false;\n+            if (pa->nChainWork < pb->nChainWork) return true;\n+\n+            // ... then by earliest time received, ...\n+            if (pa->nSequenceId < pb->nSequenceId) return false;\n+            if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+            // Use pointer address as tie breaker (should only happen with blocks\n+            // loaded from disk, as those all have id 0).\n+            if (pa < pb) return false;\n+            if (pa > pb) return true;\n+\n+            // Identical blocks.\n+            return false;\n+        }\n+    };\n+} // anon namespace\n+\n+enum DisconnectResult\n+{\n+    DISCONNECT_OK,      // All good.\n+    DISCONNECT_UNCLEAN, // Rolled back, but UTXO set was inconsistent with block.\n+    DISCONNECT_FAILED   // Something else went wrong.\n+};\n+\n+class ConnectTrace;\n+\n+/**\n+ * CChainState stores and provides an API to update our local knowledge of the\n+ * current best chain and header tree.\n+ *\n+ * It generally provides access to the current block tree, as well as functions\n+ * to provide new data, which it will appropriately validate and incorporate in\n+ * its state as necessary.\n+ *\n+ * Eventually, the API here is targeted at being exposed externally as a\n+ * consumable libconsensus library, so any functions added must only call\n+ * other class member functions, pure functions in other parts of the consensus\n+ * library, callbacks, or read/write-to-disk functions (eventually this will\n+ * also be via callbacks).\n+ */\n+class CChainState {\n+private:\n+    /**\n+     * The set of all CBlockIndex entries with BLOCK_VALID_TRANSACTIONS (for itself and all ancestors) and\n+     * as good as our current tip or better. Entries may be failed, though, and pruning nodes may be\n+     * missing the data for the block.\n+     */\n+    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n+public:\n+    CChain chainActive;\n+    BlockMap mapBlockIndex;\n+    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n+    CBlockIndex *pindexBestInvalid = nullptr;\n+\n+    bool LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree);\n+\n+    bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock);\n+\n+    bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex);\n+    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock);\n+\n+    // Block (dis)connection on a given view:\n+    DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view);\n+    bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n+                    CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false);\n+\n+    // Block disconnection on our pcoinsTip:\n+    bool DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool);\n+\n+    // Manual block validity manipulation:\n+    bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n+    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n+    bool ResetBlockFailureFlags(CBlockIndex *pindex);\n+\n+    bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n+    bool RewindBlockIndex(const CChainParams& params);\n+    bool LoadGenesisBlock(const CChainParams& chainparams);\n+\n+    void PruneBlockIndexCandidates();\n+\n+    void UnloadBlockIndex();\n+\n+private:\n+    bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace);\n+    bool ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool);\n+\n+    CBlockIndex* AddToBlockIndex(const CBlockHeader& block);\n+    /** Create a new block index entry for a given block hash */\n+    CBlockIndex * InsertBlockIndex(const uint256& hash);\n+    void CheckBlockIndex(const Consensus::Params& consensusParams);\n+\n+    void InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state);\n+    CBlockIndex* FindMostWorkChain();\n+    bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n+\n+\n+    bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params);\n+} chainstate;",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 107,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "a6e978884ea5046f4d36c80338ca69c3f1c7b46d",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Move a bunch of chainstate-manipulation functions into CChainState\"\r\n\r\nMaybe g_chainstate",
    "created_at": "2017-08-16T15:46:43Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133489324",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133489324"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133489324"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133489324/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 162,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133494353",
    "pull_request_review_id": 56653313,
    "id": 133494353,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzQ5NDM1Mw==",
    "diff_hunk": "@@ -3864,10 +3957,21 @@ bool RewindBlockIndex(const CChainParams& params)\n         PruneBlockIndexCandidates();\n \n         CheckBlockIndex(params.GetConsensus());\n+    }\n+\n+    return true;\n+}\n+\n+bool RewindBlockIndex(const CChainParams& params) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 502,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "a6e978884ea5046f4d36c80338ca69c3f1c7b46d",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Move a bunch of chainstate-manipulation functions into CChainState\"\r\n\r\nTwo RewindBlockIndex functions with the same name & params but slightly different behavior seems not great.\r\n\r\nMaybe should have RewindBlockIndexDB / CChainState::RewindBlockIndex, analogous to LoadBlockIndexDB / CChainState::LoadBlockIndex.",
    "created_at": "2017-08-16T16:05:16Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133494353",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133494353"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133494353"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133494353/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 4074,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133495272",
    "pull_request_review_id": 56653313,
    "id": 133495272,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzQ5NTI3Mg==",
    "diff_hunk": "@@ -2080,10 +2080,8 @@ static void DoWarning(const std::string& strWarning)\n     }\n }\n \n-/** Update chainActive and related internal data structures. */\n+/** Check warning conditions and do some notifications on new chain tip set. */\n void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n-    chainActive.SetTip(pindexNew);",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 45,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "21ec3737e59a8aa5e996de3303c6b566b89513dd",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"Move some additional variables into CChainState private\"\r\n\r\nThis seems like a strange change. Maybe assert chainActive tip is pindexNew here? pindexNew argument is otherwise no longer used in this function.",
    "created_at": "2017-08-16T16:08:55Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133495272",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133495272"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133495272"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/133495272/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2046,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144673591",
    "pull_request_review_id": 69369715,
    "id": 144673591,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDY3MzU5MQ==",
    "diff_hunk": "@@ -3103,6 +3103,25 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n+static CDiskBlockPos WriteBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const CDiskBlockPos* dbp) {\n+    unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n+    CDiskBlockPos blockPos;\n+    if (dbp != nullptr)\n+        blockPos = *dbp;\n+    if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != nullptr)) {",
    "path": "src/validation.cpp",
    "position": 615,
    "original_position": 27,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "dc461681ff9d5883decc4031c5c1d66029d61600",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'll leave interface changes for later - eventually I'd like to move the disk-writing/reading stuff out of validation.cpp, then it'll be easy to play with interfaces that wont even be exposed (plus the functions will reside beside each other, so harder to mess up).",
    "created_at": "2017-10-13T23:07:17Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144673591",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144673591"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144673591"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144673591/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3288,
    "original_line": 3288,
    "side": "RIGHT",
    "in_reply_to_id": 133478853
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144673594",
    "pull_request_review_id": 69369718,
    "id": 144673594,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDY3MzU5NA==",
    "diff_hunk": "@@ -2080,10 +2080,8 @@ static void DoWarning(const std::string& strWarning)\n     }\n }\n \n-/** Update chainActive and related internal data structures. */\n+/** Check warning conditions and do some notifications on new chain tip set. */\n void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n-    chainActive.SetTip(pindexNew);",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 45,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "21ec3737e59a8aa5e996de3303c6b566b89513dd",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think it feels strange mostly because UpdateTip is (now) poorly named - all it does is fire warnings, log messages, and a few notifications for mining longpolling. Eventually it should be a CValidationInterface listener (or its notifications should be routed through it. I went ahead and used pindexNew in place of chainActive.Tip() everywhere here.",
    "created_at": "2017-10-13T23:07:17Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144673594",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144673594"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144673594"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144673594/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2046,
    "side": "LEFT",
    "in_reply_to_id": 133495272
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144673871",
    "pull_request_review_id": 69370017,
    "id": 144673871,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDY3Mzg3MQ==",
    "diff_hunk": "@@ -3103,6 +3103,25 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n+static CDiskBlockPos WriteBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const CDiskBlockPos* dbp) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 22,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "dc461681ff9d5883decc4031c5c1d66029d61600",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "SaveBlockToDisk it is, that is much less confusing.",
    "created_at": "2017-10-13T23:10:09Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144673871",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144673871"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144673871"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144673871/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3106,
    "side": "RIGHT",
    "in_reply_to_id": 133480412
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144674247",
    "pull_request_review_id": 69370394,
    "id": 144674247,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDY3NDI0Nw==",
    "diff_hunk": "@@ -56,11 +56,117 @@\n /**\n  * Global state\n  */\n+namespace {\n+    struct CBlockIndexWorkComparator\n+    {\n+        bool operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {\n+            // First sort by most total work, ...\n+            if (pa->nChainWork > pb->nChainWork) return false;\n+            if (pa->nChainWork < pb->nChainWork) return true;\n+\n+            // ... then by earliest time received, ...\n+            if (pa->nSequenceId < pb->nSequenceId) return false;\n+            if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+            // Use pointer address as tie breaker (should only happen with blocks\n+            // loaded from disk, as those all have id 0).\n+            if (pa < pb) return false;\n+            if (pa > pb) return true;\n+\n+            // Identical blocks.\n+            return false;\n+        }\n+    };\n+} // anon namespace\n+\n+enum DisconnectResult\n+{\n+    DISCONNECT_OK,      // All good.\n+    DISCONNECT_UNCLEAN, // Rolled back, but UTXO set was inconsistent with block.\n+    DISCONNECT_FAILED   // Something else went wrong.\n+};\n+\n+class ConnectTrace;\n+\n+/**\n+ * CChainState stores and provides an API to update our local knowledge of the\n+ * current best chain and header tree.\n+ *\n+ * It generally provides access to the current block tree, as well as functions\n+ * to provide new data, which it will appropriately validate and incorporate in\n+ * its state as necessary.\n+ *\n+ * Eventually, the API here is targeted at being exposed externally as a\n+ * consumable libconsensus library, so any functions added must only call\n+ * other class member functions, pure functions in other parts of the consensus\n+ * library, callbacks, or read/write-to-disk functions (eventually this will\n+ * also be via callbacks).",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 48,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "a6e978884ea5046f4d36c80338ca69c3f1c7b46d",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I clarified that callbacks should all be via the validation interface. I think that is sufficiently restirctive? Anything not in those categories is clearly not kosher, not sure what specific examples should be given without trawling through the code there again.",
    "created_at": "2017-10-13T23:13:56Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144674247",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144674247"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144674247"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144674247/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 103,
    "side": "RIGHT",
    "in_reply_to_id": 133486660
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144674310",
    "pull_request_review_id": 69370466,
    "id": 144674310,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDY3NDMxMA==",
    "diff_hunk": "@@ -56,11 +56,117 @@\n /**\n  * Global state\n  */\n+namespace {\n+    struct CBlockIndexWorkComparator\n+    {\n+        bool operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {\n+            // First sort by most total work, ...\n+            if (pa->nChainWork > pb->nChainWork) return false;\n+            if (pa->nChainWork < pb->nChainWork) return true;\n+\n+            // ... then by earliest time received, ...\n+            if (pa->nSequenceId < pb->nSequenceId) return false;\n+            if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+            // Use pointer address as tie breaker (should only happen with blocks\n+            // loaded from disk, as those all have id 0).\n+            if (pa < pb) return false;\n+            if (pa > pb) return true;\n+\n+            // Identical blocks.\n+            return false;\n+        }\n+    };\n+} // anon namespace\n+\n+enum DisconnectResult\n+{\n+    DISCONNECT_OK,      // All good.\n+    DISCONNECT_UNCLEAN, // Rolled back, but UTXO set was inconsistent with block.\n+    DISCONNECT_FAILED   // Something else went wrong.\n+};\n+\n+class ConnectTrace;\n+\n+/**\n+ * CChainState stores and provides an API to update our local knowledge of the\n+ * current best chain and header tree.\n+ *\n+ * It generally provides access to the current block tree, as well as functions\n+ * to provide new data, which it will appropriately validate and incorporate in\n+ * its state as necessary.\n+ *\n+ * Eventually, the API here is targeted at being exposed externally as a\n+ * consumable libconsensus library, so any functions added must only call\n+ * other class member functions, pure functions in other parts of the consensus\n+ * library, callbacks, or read/write-to-disk functions (eventually this will\n+ * also be via callbacks).\n+ */\n+class CChainState {\n+private:\n+    /**\n+     * The set of all CBlockIndex entries with BLOCK_VALID_TRANSACTIONS (for itself and all ancestors) and\n+     * as good as our current tip or better. Entries may be failed, though, and pruning nodes may be\n+     * missing the data for the block.\n+     */\n+    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n+public:\n+    CChain chainActive;\n+    BlockMap mapBlockIndex;\n+    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n+    CBlockIndex *pindexBestInvalid = nullptr;",
    "path": "src/validation.cpp",
    "position": 111,
    "original_position": 62,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "a6e978884ea5046f4d36c80338ca69c3f1c7b46d",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I wanted this PR to not conflict needlessly with every change to validation.cpp, so avoided doing so for now. In the future we should do that, agreed, but I dont want to rebase this PR every few days.",
    "created_at": "2017-10-13T23:14:35Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144674310",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144674310"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144674310"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144674310/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 153,
    "original_line": 153,
    "side": "RIGHT",
    "in_reply_to_id": 133488685
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144674604",
    "pull_request_review_id": 69370797,
    "id": 144674604,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDY3NDYwNA==",
    "diff_hunk": "@@ -3157,19 +3176,13 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     if (!IsInitialBlockDownload() && chainActive.Tip() == pindex->pprev)\n         GetMainSignals().NewPoWValidBlock(pindex, pblock);\n \n-    int nHeight = pindex->nHeight;\n-\n     // Write block to history file\n     try {\n-        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n-        CDiskBlockPos blockPos;\n-        if (dbp != nullptr)\n-            blockPos = *dbp;\n-        if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != nullptr))\n-            return error(\"AcceptBlock(): FindBlockPos failed\");\n-        if (dbp == nullptr)\n-            if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart()))\n-                AbortNode(state, \"Failed to write block\");\n+        CDiskBlockPos blockPos = WriteBlockToDisk(block, pindex->nHeight, chainparams, dbp);\n+        if (blockPos.IsNull()) {\n+            state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 63,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "dc461681ff9d5883decc4031c5c1d66029d61600",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The goal here is that SaveBlockToDisk falls outside the scope of our consensus logic, and, thus, should have no idea about CValidationStates. The errors when writing to disk are entirely separate (and logged themselves, so its not like its going to result in materially different useability here).",
    "created_at": "2017-10-13T23:17:38Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144674604",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144674604"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144674604"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144674604/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3366,
    "side": "RIGHT",
    "in_reply_to_id": 133483381
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144675534",
    "pull_request_review_id": 69371887,
    "id": 144675534,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDY3NTUzNA==",
    "diff_hunk": "@@ -56,11 +56,117 @@\n /**\n  * Global state\n  */\n+namespace {\n+    struct CBlockIndexWorkComparator\n+    {\n+        bool operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {\n+            // First sort by most total work, ...\n+            if (pa->nChainWork > pb->nChainWork) return false;\n+            if (pa->nChainWork < pb->nChainWork) return true;\n+\n+            // ... then by earliest time received, ...\n+            if (pa->nSequenceId < pb->nSequenceId) return false;\n+            if (pa->nSequenceId > pb->nSequenceId) return true;\n+\n+            // Use pointer address as tie breaker (should only happen with blocks\n+            // loaded from disk, as those all have id 0).\n+            if (pa < pb) return false;\n+            if (pa > pb) return true;\n+\n+            // Identical blocks.\n+            return false;\n+        }\n+    };\n+} // anon namespace\n+\n+enum DisconnectResult\n+{\n+    DISCONNECT_OK,      // All good.\n+    DISCONNECT_UNCLEAN, // Rolled back, but UTXO set was inconsistent with block.\n+    DISCONNECT_FAILED   // Something else went wrong.\n+};\n+\n+class ConnectTrace;\n+\n+/**\n+ * CChainState stores and provides an API to update our local knowledge of the\n+ * current best chain and header tree.\n+ *\n+ * It generally provides access to the current block tree, as well as functions\n+ * to provide new data, which it will appropriately validate and incorporate in\n+ * its state as necessary.\n+ *\n+ * Eventually, the API here is targeted at being exposed externally as a\n+ * consumable libconsensus library, so any functions added must only call\n+ * other class member functions, pure functions in other parts of the consensus\n+ * library, callbacks, or read/write-to-disk functions (eventually this will\n+ * also be via callbacks).\n+ */\n+class CChainState {\n+private:\n+    /**\n+     * The set of all CBlockIndex entries with BLOCK_VALID_TRANSACTIONS (for itself and all ancestors) and\n+     * as good as our current tip or better. Entries may be failed, though, and pruning nodes may be\n+     * missing the data for the block.\n+     */\n+    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n+public:\n+    CChain chainActive;\n+    BlockMap mapBlockIndex;\n+    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n+    CBlockIndex *pindexBestInvalid = nullptr;\n+\n+    bool LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree);\n+\n+    bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock);\n+\n+    bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex);\n+    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock);\n+\n+    // Block (dis)connection on a given view:\n+    DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view);\n+    bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n+                    CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false);\n+\n+    // Block disconnection on our pcoinsTip:\n+    bool DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool);\n+\n+    // Manual block validity manipulation:\n+    bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n+    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n+    bool ResetBlockFailureFlags(CBlockIndex *pindex);\n+\n+    bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n+    bool RewindBlockIndex(const CChainParams& params);\n+    bool LoadGenesisBlock(const CChainParams& chainparams);\n+\n+    void PruneBlockIndexCandidates();\n+\n+    void UnloadBlockIndex();\n+\n+private:\n+    bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace);\n+    bool ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool);\n+\n+    CBlockIndex* AddToBlockIndex(const CBlockHeader& block);\n+    /** Create a new block index entry for a given block hash */\n+    CBlockIndex * InsertBlockIndex(const uint256& hash);\n+    void CheckBlockIndex(const Consensus::Params& consensusParams);\n+\n+    void InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state);\n+    CBlockIndex* FindMostWorkChain();\n+    bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n+\n+\n+    bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params);\n+} chainstate;",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 107,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "a6e978884ea5046f4d36c80338ca69c3f1c7b46d",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2017-10-13T23:27:30Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144675534",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144675534"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144675534"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144675534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 162,
    "side": "RIGHT",
    "in_reply_to_id": 133489324
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144675657",
    "pull_request_review_id": 69372034,
    "id": 144675657,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDY3NTY1Nw==",
    "diff_hunk": "@@ -3864,10 +3957,21 @@ bool RewindBlockIndex(const CChainParams& params)\n         PruneBlockIndexCandidates();\n \n         CheckBlockIndex(params.GetConsensus());\n+    }\n+\n+    return true;\n+}\n+\n+bool RewindBlockIndex(const CChainParams& params) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 502,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "a6e978884ea5046f4d36c80338ca69c3f1c7b46d",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "They dont (really) have different behavior, just the public wrapper version does a DB flush, but that isnt strictly required (I believe). But, really, CChainState/validation should have no concept of the DB backend in use/the disk, hence the reason for the flush outside, its just a thin wrapper functions to expose it publicly.",
    "created_at": "2017-10-13T23:28:53Z",
    "updated_at": "2017-12-04T14:39:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144675657",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144675657"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144675657"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/144675657/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 4074,
    "side": "RIGHT",
    "in_reply_to_id": 133494353
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156471596",
    "pull_request_review_id": 82954072,
    "id": 156471596,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjQ3MTU5Ng==",
    "diff_hunk": "@@ -3864,10 +3957,21 @@ bool RewindBlockIndex(const CChainParams& params)\n         PruneBlockIndexCandidates();\n \n         CheckBlockIndex(params.GetConsensus());\n+    }\n+\n+    return true;\n+}\n+\n+bool RewindBlockIndex(const CChainParams& params) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 502,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "a6e978884ea5046f4d36c80338ca69c3f1c7b46d",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agree with @ryanofsky. Especially since the other wrappers just forward to g_chainstate. Why not just flush in init after the RewindBlockIndex call?",
    "created_at": "2017-12-12T19:31:20Z",
    "updated_at": "2017-12-12T19:31:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r156471596",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156471596"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r156471596"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156471596/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 4074,
    "side": "RIGHT",
    "in_reply_to_id": 133494353
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156478966",
    "pull_request_review_id": 82962653,
    "id": 156478966,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjQ3ODk2Ng==",
    "diff_hunk": "@@ -3864,10 +3957,21 @@ bool RewindBlockIndex(const CChainParams& params)\n         PruneBlockIndexCandidates();\n \n         CheckBlockIndex(params.GetConsensus());\n+    }\n+\n+    return true;\n+}\n+\n+bool RewindBlockIndex(const CChainParams& params) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 502,
    "commit_id": "22fdddeabb17881af2004c45538f91514837d363",
    "original_commit_id": "a6e978884ea5046f4d36c80338ca69c3f1c7b46d",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'd be fine with a flush in init, but it seems weird given its kinda a validation-disk-storage-layer thing, and I hate adding more low-level logic in init.",
    "created_at": "2017-12-12T19:58:21Z",
    "updated_at": "2017-12-12T19:58:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r156478966",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156478966"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10279#discussion_r156478966"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10279"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156478966/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 4074,
    "side": "RIGHT",
    "in_reply_to_id": 133494353
  }
]