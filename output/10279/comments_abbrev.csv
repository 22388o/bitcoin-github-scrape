TheBlueMatt,2017-04-26T01:53:33Z,Obviously the end goal here is to take revenge for #771 :),https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-297214943,297214943,
jtimon,2017-04-27T15:04:14Z,"utACK (beyond nits, most of them not very important):\n- Make DisconnectBlock unaware of where undo data resides on disk e32dc53af14aa28d936da9c9b5a80b5fe522ad18 \n- Create initial CChainState to hold chain state information 20aa3811df65e39d60572876ab2850eea6194429\n- Move block writing out of AcceptBlock 33aad08c6e7b0a9e291163c39538bee00be7e953\n- Move some additional variables into CChainSta",https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-297741469,297741469,
TheBlueMatt,2017-04-30T18:51:11Z,Removed InsertBlockIndex from validation.h since it was moved into CChainState (there were no external callers already).,https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-298249683,298249683,
TheBlueMatt,2017-05-03T00:21:58Z,"As for removing the global references to member parts of CChainState...that's probably a ways out. First step is to clarify the internal stuff within validation.cpp and make external accesses to it const, then I'll expose the class itself (unless you feel particularly inclined to build the scripted diff before I get to it - need #10189 first, probably.",https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-298796875,298796875,
ryanofsky,2017-05-03T13:48:17Z,utACK 120743a83f26923cd9ef4db068fd6c9b8b8ea4dd,https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-298915852,298915852,
TheBlueMatt,2017-06-06T01:34:45Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-306356477,306356477,
TheBlueMatt,2017-06-09T17:26:07Z,"Indeed, rebased the copy that was on my workstation and not my laptop, re-rebased.",https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-307449855,307449855,
sipa,2017-06-13T00:00:22Z,"Nice, concept ACK",https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-307968048,307968048,
TheBlueMatt,2017-08-15T21:13:15Z,"Rebased properly this time, with the various 0.15 changes.",https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-322591032,322591032,
ryanofsky,2017-10-12T17:36:09Z,"Should this be merged? It has utACKs from jtimon, instagibbs, and me, and a concept ACK from sipa.\n",https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-336210888,336210888,
TheBlueMatt,2017-10-13T23:29:10Z,Addressed @ryanofsky's nits and noted where I disagreed.,https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-336590003,336590003,
TheBlueMatt,2017-12-04T14:40:05Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-348980904,348980904,
laanwj,2017-12-12T13:36:42Z,utACK 22fdddeabb17881af2004c45538f91514837d363,https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-351053110,351053110,
theuni,2017-12-12T19:45:34Z,post-merge utACK 22fdddeabb17881af2004c45538f91514837d363. Very nice!,https://github.com/bitcoin/bitcoin/pull/10279#issuecomment-351172215,351172215,
jtimon,2017-04-27T14:23:18Z,The CChainParams are still needed (or at least Consensus::Params) see https://github.com/bitcoin/bitcoin/pull/9176,https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113708480,113708480,src/validation.cpp
jtimon,2017-04-27T14:26:16Z,"If this is the only use of chainparams, perhaps it is better to just pass chainparams.MessageStart() directly instead.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113709236,113709236,src/validation.cpp
jtimon,2017-04-27T14:40:03Z,I think UndoReadFromDisk can be static.,https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113712885,113712885,src/validation.cpp
instagibbs,2017-04-27T14:40:47Z,just noting: previously the following two lines are hit even if this conditional isn't true(and `pindex->GetUndoPos().IsNull()` is). No idea if this is a behavior change,https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113713105,113713105,src/validation.cpp
jtimon,2017-04-27T14:40:59Z,"Again, If this is the only use of chainparams, perhaps it is better to just pass chainparams.MessageStart() directly instead.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113713158,113713158,src/validation.cpp
instagibbs,2017-04-27T14:45:57Z,Why do any of this if `fTxIndex` is false?,https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113715158,113715158,src/validation.cpp
jtimon,2017-04-27T14:46:14Z,"There was a PR uniforming comments for ending namespaces. Also, according to our style, we don't indent on namespaces: https://github.com/bitcoin/bitcoin/blob/master/src/.clang-format#L32",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113715268,113715268,src/validation.cpp
TheBlueMatt,2017-04-27T14:46:39Z,"Probably better to move the CheckProofOfWord check into CChainParams::InsertBlockIndex (or the lambda). As eventually CChainParams should be a local variable inside CChainState, any objections to leaving this for later?",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113715447,113715447,src/validation.cpp
TheBlueMatt,2017-04-27T14:48:34Z,"Seems somewhat strange for CChainState to care at all about the existance of MessageStart(), no?",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113716280,113716280,src/validation.cpp
TheBlueMatt,2017-04-27T14:49:27Z,"It is already in an anonymous namespace, which I believe is equivalent.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113716676,113716676,src/validation.cpp
TheBlueMatt,2017-04-27T14:50:53Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113717313,113717313,src/validation.cpp
jtimon,2017-04-27T14:56:18Z,"```strprintf(""%s: Failed to find position to write new block to disk"", __func__)```",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113718994,113718994,src/validation.cpp
jtimon,2017-04-27T14:56:51Z,"```strprintf(""%s: FindBlockPos failed"", __func__)```",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113719134,113719134,src/validation.cpp
TheBlueMatt,2017-04-27T15:00:43Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113720238,113720238,src/validation.cpp
TheBlueMatt,2017-04-27T15:00:46Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113720248,113720248,src/validation.cpp
TheBlueMatt,2017-04-27T15:30:08Z,"Because it used to be? Anyway, fixed in new commit.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113728255,113728255,src/validation.cpp
TheBlueMatt,2017-04-27T15:37:39Z,"Hmm, it may be, though not sure you could ever tickle it. I went ahead and duplicated the setDirtyBlockIndex.insert() call inside of WriteUndoDataForBlock.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113730369,113730369,src/validation.cpp
jtimon,2017-04-27T15:41:36Z,"Strange or not, it does care about ut. It seems more strange for this new function to take the whole CChainParams class only for one getter, no?",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113731298,113731298,src/validation.cpp
jtimon,2017-04-27T15:46:49Z,"What lambda?\nAnyway, if we plan not to do #9176 and moving the check instead, then there's no point in passing Consensus::Params to CChainState::Load if it's going to be only temporary.\n",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113732571,113732571,src/validation.cpp
TheBlueMatt,2017-04-27T15:59:53Z,"Well CChainState doesn't care about MessageStart(), it only cares that the write function figures out what it needs to do, if that means using Messagestart() thats between the write function and chainparams, not CChainState's business. Eventually the write function should be a virtual function inside an interface class and that class can hold the chainparams locally with CChainState only having a ",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113736111,113736111,src/validation.cpp
TheBlueMatt,2017-04-27T16:02:38Z,eg the CheckProofOfWork call that is currently in LoadBlockIndexGuts can just go in the insertBlockIndex lambda function and the call to that should be a fully-filled CBlockIndex instead of that getting filled by LoadBlockIndexGuts.,https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113736813,113736813,src/validation.cpp
jtimon,2017-04-27T16:22:14Z,"CChainState::Load definitely cares about MessageStart(). But we disagree on next steps, I won't insist further.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r113741574,113741574,src/validation.cpp
ryanofsky,2017-05-02T17:28:48Z,"In commit ""Make DisconnectBlock unaware of where undo data resides on disk""\n\nNote slight change in behavior here. ""no undo data available"" is now ""Undo data not available""",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114376205,114376205,src/validation.cpp
ryanofsky,2017-05-02T17:38:25Z,"In commit ""Make ConnectBlock unaware of txindex/undo data disk locations""\n\n`MaybeWriteUndoDataForBlock` might be a more descriptive name.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114378475,114378475,src/validation.cpp
ryanofsky,2017-05-02T17:46:56Z,"In commit ""Make ConnectBlock unaware of txindex/undo data disk locations"":\n\nThis is just moved code, but could get rid of make_pair using emplace_back here. Could also get rid of pos variable using vPos.back().",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114380423,114380423,src/validation.cpp
ryanofsky,2017-05-02T18:13:10Z,"Should squash the two ""Create initial CChainState to hold chain state information"" commits.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114386766,114386766,src/validation.cpp
ryanofsky,2017-05-02T18:15:13Z,"In commit ""Create initial CChainState to hold chain state information""\n\nSpelling ""necessary""",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114387276,114387276,src/validation.cpp
ryanofsky,2017-05-02T18:16:31Z,"In commit ""Create initial CChainState to hold chain state information""\n\nStores what? May be some words missing.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114387564,114387564,src/validation.cpp
ryanofsky,2017-05-02T18:19:18Z,"In commit ""Create initial CChainState to hold chain state information""\n\nWhat's an external function? Would be helpful to say something about which functions are and aren't external.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114388186,114388186,src/validation.cpp
ryanofsky,2017-05-02T18:22:32Z,"In commit ""Create initial CChainState to hold chain state information""\n\nShould add `= nullptr;`",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114388901,114388901,src/validation.cpp
ryanofsky,2017-05-02T18:26:48Z,"In commit ""Create initial CChainState to hold chain state information""\n\nProbably should pass hash by const reference.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114389918,114389918,src/validation.cpp
ryanofsky,2017-05-02T18:30:38Z,"In commit ""Create initial CChainState to hold chain state information""\n\nMaybe `Load` and `InsertBlockIndex` should be static while they aren't (yet?) accessing any class members.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114390883,114390883,src/validation.cpp
ryanofsky,2017-05-02T18:55:41Z,"In commit ""Move a bunch of chainstate-manipulation functions into CChainState""\n\nCheckBlockIndex call added accidentally here? Behavior change should probably go in a separate commit.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114396882,114396882,src/validation.cpp
ryanofsky,2017-05-02T19:08:09Z,"In commit ""Move a bunch of chainstate-manipulation functions into CChainState"":\n\nLoadBlockIndex should be ReceiveGenesisBlock or \_\_func__ now.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114399620,114399620,src/validation.cpp
ryanofsky,2017-05-02T19:16:36Z,"In commit ""Move a bunch of chainstate-manipulation functions into CChainState""\n\nMaybe this method should just be called `Unload` to be consistent with the `Load` method (which was previously `LoadBlockIndexDB`)",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114401375,114401375,src/validation.cpp
TheBlueMatt,2017-05-03T00:00:07Z,"Oh, no idea how that came about, thanks.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114452539,114452539,src/validation.cpp
TheBlueMatt,2017-05-03T00:00:38Z,I'll clarify. It pretty much means mapBlockIndex/chainActive.,https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114452597,114452597,src/validation.cpp
TheBlueMatt,2017-05-03T00:04:22Z,"Clarified in the commit message instead, thanks for pointing this out (the intent is to not do the actual reading from disk calls inside of CChainState). Will leave other cleanups for later PRs.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114453010,114453010,src/validation.cpp
TheBlueMatt,2017-05-03T00:04:26Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114453026,114453026,src/validation.cpp
TheBlueMatt,2017-05-03T00:06:10Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114453212,114453212,src/validation.cpp
TheBlueMatt,2017-05-03T00:20:03Z,Reverted the string change.,https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454782,114454782,src/validation.cpp
TheBlueMatt,2017-05-03T00:20:05Z,Clarified a bunch.,https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454789,114454789,src/validation.cpp
TheBlueMatt,2017-05-03T00:20:08Z,"Load adds to mapBlocksUnlinked and InsertBlockIndex into mapBlockIndex. In the next PR mapBlockIndex and chainActive will be const when accessed via the global references, so would prefer to leave it.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454794,114454794,src/validation.cpp
TheBlueMatt,2017-05-03T00:20:10Z,Changed Load to LoadBlockIndex instead.,https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454795,114454795,src/validation.cpp
TheBlueMatt,2017-05-03T00:20:11Z,"Indeed, not actually 100% sure why that compiled...",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454798,114454798,src/validation.cpp
TheBlueMatt,2017-05-03T00:20:13Z,"This was to replace the one removed from ProcessNewBlock. Should be +/- equivalent to the old version, I believe?",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454800,114454800,src/validation.cpp
TheBlueMatt,2017-05-03T00:20:14Z,Fixed,https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114454804,114454804,src/validation.cpp
ryanofsky,2017-06-08T20:09:40Z,"In commit ""Make DisconnectBlock unaware of where undo data resides on disk""\n\nString changed back again. Did you maybe rebase an older version of this PR? It seems like some of the changes you made between https://github.com/bitcoin/bitcoin/commits/c431484b612c68d4faf7f8d6af858729f2b9a56d and https://github.com/bitcoin/bitcoin/commits/120743a83f26923cd9ef4db068fd6c9b8b8ea4dd got reverted.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r120986424,120986424,src/validation.cpp
ryanofsky,2017-06-08T20:14:15Z,"In commit ""Create initial CChainState to hold chain state information""\n\nCChainState comment updates made previously seem to be lost, pindexBestInvalid initialization is gone, LoadBlockIndex() got changed back to Load(), and InsertBlockIndex() documentation is gone.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r120987698,120987698,src/validation.cpp
ryanofsky,2017-07-25T17:33:28Z,"Thread https://github.com/bitcoin/bitcoin/pull/10279#discussion_r114388186\n\nNewer comment got reverted somehow. It was:\n\n```\n/**\n * CChainState stores and provides an API to update our local knowledge of the\n * current best chain and header tree.\n *\n * It generally provides access to the current block tree, as well as functions\n * to provide new data, which it will appropriatel",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r129372775,129372775,src/validation.cpp
ryanofsky,2017-08-16T14:40:23Z,"In commit ""Move txindex/undo data disk location stuff out of ConnectBlock""\n\nIt seems RaiseValidity call used to happen in the case pindex->GetUndoPos().IsNull() && pindex->IsValid(BLOCK_VALID_SCRIPTS) but now doesn't happen anymore.\n\nGuessing this is not an issue but wanted to point out the change.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133469435,133469435,src/validation.cpp
ryanofsky,2017-08-16T15:11:39Z,"In commit ""Move block writing out of AcceptBlock""\n\nYou aren't changing this, but a harder to screw up interface to FindBlockPos might take an `optional<CDiskBlockPos>&` argument, instead of `CDiskBlockPos&` and `fKnown` arguments.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133478853,133478853,src/validation.cpp
ryanofsky,2017-08-16T15:16:15Z,"In commit ""Move block writing out of AcceptBlock""\n\nMight call this SaveBlockToDisk or since it doesn't actually write to disk if it's already written.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133480412,133480412,src/validation.cpp
ryanofsky,2017-08-16T15:26:08Z,"In commit ""Move block writing out of AcceptBlock"":\n\nThis seems misleading since the error can also happen if the internal WriteBlockToDisk call fails. Maybe the new WriteBlockToDisk should just call state.Error itself, or return the error strings it already generates. Returning an error might also make sense because in both WriteBlockToDisk calls, the returned blockpos isn't actually used for ",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133483381,133483381,src/validation.cpp
ryanofsky,2017-08-16T15:37:28Z,"In commit ""Create initial CChainState to hold chain state information""\n\nMaybe mention:\n\n- Things that methods in this class should not be accessing. Presumably mempool & network?\n- Examples of where this class is currently doing something that it shouldn't and will be cleaned up later.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133486660,133486660,src/validation.cpp
ryanofsky,2017-08-16T15:44:27Z,"In commit ""Create initial CChainState to hold chain state information""\n\nSince you're creating backwards compatible aliases for these variables anyway, it seems like you could easily give them updated names that follow the style guide (e.g. m_best_invalid_block).",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133488685,133488685,src/validation.cpp
ryanofsky,2017-08-16T15:46:43Z,"In commit ""Move a bunch of chainstate-manipulation functions into CChainState""\n\nMaybe g_chainstate",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133489324,133489324,src/validation.cpp
ryanofsky,2017-08-16T16:05:16Z,"In commit ""Move a bunch of chainstate-manipulation functions into CChainState""\n\nTwo RewindBlockIndex functions with the same name & params but slightly different behavior seems not great.\n\nMaybe should have RewindBlockIndexDB / CChainState::RewindBlockIndex, analogous to LoadBlockIndexDB / CChainState::LoadBlockIndex.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133494353,133494353,src/validation.cpp
ryanofsky,2017-08-16T16:08:55Z,"In commit ""Move some additional variables into CChainState private""\n\nThis seems like a strange change. Maybe assert chainActive tip is pindexNew here? pindexNew argument is otherwise no longer used in this function.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r133495272,133495272,src/validation.cpp
TheBlueMatt,2017-10-13T23:07:17Z,"I'll leave interface changes for later - eventually I'd like to move the disk-writing/reading stuff out of validation.cpp, then it'll be easy to play with interfaces that wont even be exposed (plus the functions will reside beside each other, so harder to mess up).",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144673591,144673591,src/validation.cpp
TheBlueMatt,2017-10-13T23:07:17Z,"I think it feels strange mostly because UpdateTip is (now) poorly named - all it does is fire warnings, log messages, and a few notifications for mining longpolling. Eventually it should be a CValidationInterface listener (or its notifications should be routed through it. I went ahead and used pindexNew in place of chainActive.Tip() everywhere here.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144673594,144673594,src/validation.cpp
TheBlueMatt,2017-10-13T23:10:09Z,"SaveBlockToDisk it is, that is much less confusing.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144673871,144673871,src/validation.cpp
TheBlueMatt,2017-10-13T23:13:56Z,"I clarified that callbacks should all be via the validation interface. I think that is sufficiently restirctive? Anything not in those categories is clearly not kosher, not sure what specific examples should be given without trawling through the code there again.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144674247,144674247,src/validation.cpp
TheBlueMatt,2017-10-13T23:14:35Z,"I wanted this PR to not conflict needlessly with every change to validation.cpp, so avoided doing so for now. In the future we should do that, agreed, but I dont want to rebase this PR every few days.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144674310,144674310,src/validation.cpp
TheBlueMatt,2017-10-13T23:17:38Z,"The goal here is that SaveBlockToDisk falls outside the scope of our consensus logic, and, thus, should have no idea about CValidationStates. The errors when writing to disk are entirely separate (and logged themselves, so its not like its going to result in materially different useability here).",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144674604,144674604,src/validation.cpp
TheBlueMatt,2017-10-13T23:27:30Z,Done.,https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144675534,144675534,src/validation.cpp
TheBlueMatt,2017-10-13T23:28:53Z,"They dont (really) have different behavior, just the public wrapper version does a DB flush, but that isnt strictly required (I believe). But, really, CChainState/validation should have no concept of the DB backend in use/the disk, hence the reason for the flush outside, its just a thin wrapper functions to expose it publicly.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r144675657,144675657,src/validation.cpp
theuni,2017-12-12T19:31:20Z,Agree with @ryanofsky. Especially since the other wrappers just forward to g_chainstate. Why not just flush in init after the RewindBlockIndex call?,https://github.com/bitcoin/bitcoin/pull/10279#discussion_r156471596,156471596,src/validation.cpp
TheBlueMatt,2017-12-12T19:58:21Z,"I'd be fine with a flush in init, but it seems weird given its kinda a validation-disk-storage-layer thing, and I hate adding more low-level logic in init.",https://github.com/bitcoin/bitcoin/pull/10279#discussion_r156478966,156478966,src/validation.cpp
