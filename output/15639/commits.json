[
  {
    "sha": "fbc6bb8e8310ddf12e675d698cda3bdae4f361b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmM2YmI4ZTgzMTBkZGYxMmU2NzVkNjk4Y2RhM2JkYWU0ZjM2MWI4",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-03-22T04:24:55Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-04-10T13:51:37Z"
      },
      "message": "bitcoin-wallet tool: Drop MakeChain calls\n\nPass null Chain interface pointer to CWallet. This is needed to drop\nlibbitcoin_server dependency and avoid linking node code.",
      "tree": {
        "sha": "9d07dd4bd95627d4d997aebedfd2135ba2ccbbc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d07dd4bd95627d4d997aebedfd2135ba2ccbbc4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a135fbe5b30c3603616589b4779b1ce602c9392",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a135fbe5b30c3603616589b4779b1ce602c9392",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a135fbe5b30c3603616589b4779b1ce602c9392"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 24,
      "deletions": 28
    },
    "files": [
      {
        "sha": "f2ab03e20e9e262c827501ee2eaf4895e5847f64",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=fbc6bb8e8310ddf12e675d698cda3bdae4f361b8",
        "patch": "@@ -29,7 +29,7 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<st\n static void CoinSelection(benchmark::State& state)\n {\n     auto chain = interfaces::MakeChain();\n-    const CWallet wallet(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n+    const CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n     std::vector<std::unique_ptr<CWalletTx>> wtxs;\n     LOCK(wallet.cs_wallet);\n \n@@ -61,7 +61,7 @@ static void CoinSelection(benchmark::State& state)\n \n typedef std::set<CInputCoin> CoinSet;\n static auto testChain = interfaces::MakeChain();\n-static const CWallet testWallet(*testChain, WalletLocation(), WalletDatabase::CreateDummy());\n+static const CWallet testWallet(testChain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n std::vector<std::unique_ptr<CWalletTx>> wtxn;\n \n // Copied from src/wallet/test/coinselector_tests.cpp"
      },
      {
        "sha": "e33a9a4e1ea61f4a59d94b8b62d59836332db0e0",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=fbc6bb8e8310ddf12e675d698cda3bdae4f361b8",
        "patch": "@@ -58,7 +58,7 @@ void TestAddAddressesToSendBook()\n {\n     TestChain100Setup test;\n     auto chain = interfaces::MakeChain();\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(*chain, WalletLocation(), WalletDatabase::CreateMock());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n     bool firstRun;\n     wallet->LoadWallet(firstRun);\n "
      },
      {
        "sha": "bd1c6cf0f4ceb63f2dc62bb2dde2ae213b60569f",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=fbc6bb8e8310ddf12e675d698cda3bdae4f361b8",
        "patch": "@@ -135,7 +135,7 @@ void TestGUI()\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n     auto chain = interfaces::MakeChain();\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(*chain, WalletLocation(), WalletDatabase::CreateMock());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n     bool firstRun;\n     wallet->LoadWallet(firstRun);\n     {"
      },
      {
        "sha": "6c2003e274f0b6caa38ea7cac3995091b6051d35",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=fbc6bb8e8310ddf12e675d698cda3bdae4f361b8",
        "patch": "@@ -29,7 +29,7 @@ typedef std::set<CInputCoin> CoinSet;\n \n static std::vector<COutput> vCoins;\n static auto testChain = interfaces::MakeChain();\n-static CWallet testWallet(*testChain, WalletLocation(), WalletDatabase::CreateDummy());\n+static CWallet testWallet(testChain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n static CAmount balance = 0;\n \n CoinEligibilityFilter filter_standard(1, 6, 0);"
      },
      {
        "sha": "7b829945399c7ab30ad0a883fc7daee520de3dd4",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=fbc6bb8e8310ddf12e675d698cda3bdae4f361b8",
        "patch": "@@ -9,7 +9,7 @@\n #include <wallet/rpcwallet.h>\n \n WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n-    TestingSetup(chainName), m_wallet(*m_chain, WalletLocation(), WalletDatabase::CreateMock())\n+    TestingSetup(chainName), m_wallet(m_chain.get(), WalletLocation(), WalletDatabase::CreateMock())\n {\n     bool fFirstRun;\n     m_wallet.LoadWallet(fFirstRun);"
      },
      {
        "sha": "54e12f36eda3c47fb93b3ffa3184346e974ab5e8",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=fbc6bb8e8310ddf12e675d698cda3bdae4f361b8",
        "patch": "@@ -49,7 +49,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n \n     // Verify ScanForWalletTransactions accommodates a null start block.\n     {\n-        CWallet wallet(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -64,7 +64,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     // Verify ScanForWalletTransactions picks up transactions in both the old\n     // and new block files.\n     {\n-        CWallet wallet(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -83,7 +83,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     // Verify ScanForWalletTransactions only picks transactions in the new block\n     // file.\n     {\n-        CWallet wallet(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -101,7 +101,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n \n     // Verify ScanForWalletTransactions scans no blocks.\n     {\n-        CWallet wallet(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -135,7 +135,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n     // before the missing block, and success for a key whose creation time is\n     // after.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n         AddWallet(wallet);\n         UniValue keys;\n         keys.setArray();\n@@ -198,7 +198,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n     // Import key into wallet and call dumpwallet to create backup file.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n         LOCK(wallet->cs_wallet);\n         wallet->mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n         wallet->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n@@ -214,7 +214,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n     // were scanned, and no prior blocks were scanned.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n \n         JSONRPCRequest request;\n         request.params.setArray();\n@@ -245,7 +245,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n {\n     auto chain = interfaces::MakeChain();\n-    CWallet wallet(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n+    CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n     CWalletTx wtx(&wallet, m_coinbase_txns.back());\n     auto locked_chain = chain->lock();\n     LOCK(wallet.cs_wallet);\n@@ -340,7 +340,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ListCoinsTestingSetup()\n     {\n         CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        wallet = MakeUnique<CWallet>(*m_chain, WalletLocation(), WalletDatabase::CreateMock());\n+        wallet = MakeUnique<CWallet>(m_chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         AddKey(*wallet, coinbaseKey);\n@@ -451,7 +451,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n {\n     auto chain = interfaces::MakeChain();\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n     wallet->SetMinVersion(FEATURE_LATEST);\n     wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n     BOOST_CHECK(!wallet->TopUpKeyPool(1000));"
      },
      {
        "sha": "68e2bb0252a2f69256b70d9d8fbbb25f6f0db2be",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fbc6bb8e8310ddf12e675d698cda3bdae4f361b8",
        "patch": "@@ -3112,7 +3112,6 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n \n DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n {\n-    auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n \n     fFirstRunRet = false;\n@@ -3976,7 +3975,7 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n \n     if (salvage_wallet) {\n         // Recover readable keypairs:\n-        CWallet dummyWallet(chain, WalletLocation(), WalletDatabase::CreateDummy());\n+        CWallet dummyWallet(&chain, WalletLocation(), WalletDatabase::CreateDummy());\n         std::string backup_filename;\n         if (!WalletBatch::Recover(wallet_path, (void *)&dummyWallet, WalletBatch::RecoverKeysOnlyFilter, backup_filename)) {\n             return false;\n@@ -3996,7 +3995,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n         chain.initMessage(_(\"Zapping all transactions from wallet...\"));\n \n-        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(chain, location, WalletDatabase::Create(location.GetPath()));\n+        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(&chain, location, WalletDatabase::Create(location.GetPath()));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DBErrors::LOAD_OK) {\n             chain.initError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n@@ -4010,7 +4009,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     bool fFirstRun = true;\n     // TODO: Can't use std::make_shared because we need a custom deleter but\n     // should be possible to use std::allocate_shared.\n-    std::shared_ptr<CWallet> walletInstance(new CWallet(chain, location, WalletDatabase::Create(location.GetPath())), ReleaseWallet);\n+    std::shared_ptr<CWallet> walletInstance(new CWallet(&chain, location, WalletDatabase::Create(location.GetPath())), ReleaseWallet);\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DBErrors::LOAD_OK)\n     {"
      },
      {
        "sha": "a09c27262ed8d888a761789b0a0dd26505290f2c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fbc6bb8e8310ddf12e675d698cda3bdae4f361b8",
        "patch": "@@ -704,7 +704,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     bool AddWatchOnly(const CScript& dest) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /** Interface for accessing chain state. */\n-    interfaces::Chain& m_chain;\n+    interfaces::Chain* m_chain;\n \n     /** Wallet location which includes wallet name (see WalletLocation). */\n     WalletLocation m_location;\n@@ -767,7 +767,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     unsigned int nMasterKeyMaxID = 0;\n \n     /** Construct wallet with specified name and database implementation. */\n-    CWallet(interfaces::Chain& chain, const WalletLocation& location, std::unique_ptr<WalletDatabase> database) : m_chain(chain), m_location(location), database(std::move(database))\n+    CWallet(interfaces::Chain* chain, const WalletLocation& location, std::unique_ptr<WalletDatabase> database) : m_chain(chain), m_location(location), database(std::move(database))\n     {\n     }\n \n@@ -795,7 +795,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     std::unique_ptr<interfaces::Handler> m_chain_notifications_handler;\n \n     /** Interface for accessing chain state. */\n-    interfaces::Chain& chain() const { return m_chain; }\n+    interfaces::Chain& chain() const { assert(m_chain); return *m_chain; }\n \n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n "
      },
      {
        "sha": "1ff1e8b840d7e72c67080c840b0ad0b703ce02b8",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=fbc6bb8e8310ddf12e675d698cda3bdae4f361b8",
        "patch": "@@ -4,7 +4,6 @@\n \n #include <base58.h>\n #include <fs.h>\n-#include <interfaces/chain.h>\n #include <util/system.h>\n #include <wallet/wallet.h>\n #include <wallet/walletutil.h>\n@@ -28,8 +27,7 @@ static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::\n         return nullptr;\n     }\n     // dummy chain interface\n-    auto chain = interfaces::MakeChain();\n-    std::shared_ptr<CWallet> wallet_instance(new CWallet(*chain, WalletLocation(name), WalletDatabase::Create(path)), WalletToolReleaseWallet);\n+    std::shared_ptr<CWallet> wallet_instance(new CWallet(nullptr /* chain */, WalletLocation(name), WalletDatabase::Create(path)), WalletToolReleaseWallet);\n     bool first_run = true;\n     DBErrors load_wallet_ret = wallet_instance->LoadWallet(first_run);\n     if (load_wallet_ret != DBErrors::LOAD_OK) {\n@@ -56,8 +54,7 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n     }\n \n     // dummy chain interface\n-    auto chain = interfaces::MakeChain();\n-    std::shared_ptr<CWallet> wallet_instance(new CWallet(*chain, WalletLocation(name), WalletDatabase::Create(path)), WalletToolReleaseWallet);\n+    std::shared_ptr<CWallet> wallet_instance(new CWallet(nullptr /* chain */, WalletLocation(name), WalletDatabase::Create(path)), WalletToolReleaseWallet);\n     DBErrors load_wallet_ret;\n     try {\n         bool first_run;"
      }
    ]
  },
  {
    "sha": "b874747b51882a613895a100c4210c7f1dddde30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODc0NzQ3YjUxODgyYTYxMzg5NWExMDBjNDIxMGM3ZjFkZGRkZTMw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-03-22T04:42:17Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-04-10T13:51:37Z"
      },
      "message": "Remove access to node globals from wallet-linked code\n\nRemove last few instances of accesses to node global variables from wallet\ncode. Also remove accesses to node globals from code in policy/policy.cpp that\nisn't actually called by wallet code, but does get linked into wallet code.\n\nThis is the last change needed to allow bitcoin-wallet tool to be linked\nwithout depending on libbitcoin_server.a, to ensure wallet code doesn't access\nnode global state and avoid bugs like\nhttps://github.com/bitcoin/bitcoin/pull/15557#discussion_r267735431",
      "tree": {
        "sha": "3b8473c9c2a94aec786c27c9c3c2b5f297cf1fdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b8473c9c2a94aec786c27c9c3c2b5f297cf1fdf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b874747b51882a613895a100c4210c7f1dddde30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b874747b51882a613895a100c4210c7f1dddde30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b874747b51882a613895a100c4210c7f1dddde30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b874747b51882a613895a100c4210c7f1dddde30/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fbc6bb8e8310ddf12e675d698cda3bdae4f361b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fbc6bb8e8310ddf12e675d698cda3bdae4f361b8"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 65,
      "deletions": 18
    },
    "files": [
      {
        "sha": "b61a51b2351efa8c03600c1b6bf877bd16ff60db",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b874747b51882a613895a100c4210c7f1dddde30/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b874747b51882a613895a100c4210c7f1dddde30/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=b874747b51882a613895a100c4210c7f1dddde30",
        "patch": "@@ -363,6 +363,12 @@ class ChainImpl : public Chain\n     {\n         return MakeUnique<RpcHandlerImpl>(command);\n     }\n+    bool rpcEnableDeprecated(const std::string& method) override { return IsDeprecatedRPCEnabled(method); }\n+    void rpcRunLater(const std::string& name, std::function<void()> fn, int64_t seconds) override\n+    {\n+        RPCRunLater(name, std::move(fn), seconds);\n+    }\n+    int rpcSerializationFlags() override { return RPCSerializationFlags(); }\n     void requestMempoolTransactions(Notifications& notifications) override\n     {\n         LOCK2(::cs_main, ::mempool.cs);"
      },
      {
        "sha": "17d7b6d8f15449a88c992881c5169816b63d3cdd",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b874747b51882a613895a100c4210c7f1dddde30/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b874747b51882a613895a100c4210c7f1dddde30/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=b874747b51882a613895a100c4210c7f1dddde30",
        "patch": "@@ -57,6 +57,10 @@ class Wallet;\n //!   notifications to the GUI should go away when GUI and wallet can directly\n //!   communicate with each other without going through the node\n //!   (https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253321096).\n+//!\n+//! * The handleRpc, registerRpcs, rpcEnableDeprecated methods and other RPC\n+//!   methods can go away if wallets listen for HTTP requests on their own\n+//!   ports instead of registering to handle requests on the node HTTP port.\n class Chain\n {\n public:\n@@ -274,6 +278,15 @@ class Chain\n     //! needs to remain valid until Handler is disconnected.\n     virtual std::unique_ptr<Handler> handleRpc(const CRPCCommand& command) = 0;\n \n+    //! Check if deprecated RPC is enabled.\n+    virtual bool rpcEnableDeprecated(const std::string& method) = 0;\n+\n+    //! Run function after given number of seconds. Cancel any previous calls with same name.\n+    virtual void rpcRunLater(const std::string& name, std::function<void()> fn, int64_t seconds) = 0;\n+\n+    //! Current RPC serialization flags.\n+    virtual int rpcSerializationFlags() = 0;\n+\n     //! Synchronously send TransactionAddedToMempool notifications about all\n     //! current mempool transactions to the specified handler and return after\n     //! the last one is sent. These notifications aren't coordinated with async"
      },
      {
        "sha": "6f8542123d40301baf2d2cbb772a92e813a68ec3",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b874747b51882a613895a100c4210c7f1dddde30/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b874747b51882a613895a100c4210c7f1dddde30/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=b874747b51882a613895a100c4210c7f1dddde30",
        "patch": "@@ -77,7 +77,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n     return true;\n }\n \n-bool IsStandardTx(const CTransaction& tx, std::string& reason)\n+bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeRate& dust_relay_fee, std::string& reason)\n {\n     if (tx.nVersion > CTransaction::MAX_STANDARD_VERSION || tx.nVersion < 1) {\n         reason = \"version\";\n@@ -123,10 +123,10 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason)\n \n         if (whichType == TX_NULL_DATA)\n             nDataOut++;\n-        else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n+        else if ((whichType == TX_MULTISIG) && (!permit_bare_multisig)) {\n             reason = \"bare-multisig\";\n             return false;\n-        } else if (IsDust(txout, ::dustRelayFee)) {\n+        } else if (IsDust(txout, dust_relay_fee)) {\n             reason = \"dust\";\n             return false;\n         }\n@@ -239,17 +239,17 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n-int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost)\n+int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost, unsigned int bytes_per_sigop)\n {\n-    return (std::max(nWeight, nSigOpCost * nBytesPerSigOp) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n+    return (std::max(nWeight, nSigOpCost * bytes_per_sigop) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n }\n \n-int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t nSigOpCost)\n+int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t nSigOpCost, unsigned int bytes_per_sigop)\n {\n-    return GetVirtualTransactionSize(GetTransactionWeight(tx), nSigOpCost);\n+    return GetVirtualTransactionSize(GetTransactionWeight(tx), nSigOpCost, bytes_per_sigop);\n }\n \n-int64_t GetVirtualTransactionInputSize(const CTxIn& txin, int64_t nSigOpCost)\n+int64_t GetVirtualTransactionInputSize(const CTxIn& txin, int64_t nSigOpCost, unsigned int bytes_per_sigop)\n {\n-    return GetVirtualTransactionSize(GetTransactionInputWeight(txin), nSigOpCost);\n+    return GetVirtualTransactionSize(GetTransactionInputWeight(txin), nSigOpCost, bytes_per_sigop);\n }"
      },
      {
        "sha": "ebe040f0ea7cfdbc05a942ade85b4987eb20e54f",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b874747b51882a613895a100c4210c7f1dddde30/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b874747b51882a613895a100c4210c7f1dddde30/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=b874747b51882a613895a100c4210c7f1dddde30",
        "patch": "@@ -86,7 +86,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n      * Check for standard transaction types\n      * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n      */\n-bool IsStandardTx(const CTransaction& tx, std::string& reason);\n+bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeRate& dust_relay_fee, std::string& reason);\n     /**\n      * Check for standard transaction types\n      * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n@@ -101,8 +101,18 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n /** Compute the virtual transaction size (weight reinterpreted as bytes). */\n-int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost);\n-int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t nSigOpCost = 0);\n-int64_t GetVirtualTransactionInputSize(const CTxIn& tx, int64_t nSigOpCost = 0);\n+int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost, unsigned int bytes_per_sigop);\n+int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t nSigOpCost, unsigned int bytes_per_sigop);\n+int64_t GetVirtualTransactionInputSize(const CTxIn& tx, int64_t nSigOpCost, unsigned int bytes_per_sigop);\n+\n+static inline int64_t GetVirtualTransactionSize(const CTransaction& tx)\n+{\n+    return GetVirtualTransactionSize(tx, 0, 0);\n+}\n+\n+static inline int64_t GetVirtualTransactionInputSize(const CTxIn& tx)\n+{\n+    return GetVirtualTransactionInputSize(tx, 0, 0);\n+}\n \n #endif // BITCOIN_POLICY_POLICY_H"
      },
      {
        "sha": "30a7189c93d3056c8ae7a9f77be71eb7f4e663e4",
        "filename": "src/policy/settings.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b874747b51882a613895a100c4210c7f1dddde30/src/policy/settings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b874747b51882a613895a100c4210c7f1dddde30/src/policy/settings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/settings.h?ref=b874747b51882a613895a100c4210c7f1dddde30",
        "patch": "@@ -6,12 +6,30 @@\n #ifndef BITCOIN_POLICY_SETTINGS_H\n #define BITCOIN_POLICY_SETTINGS_H\n \n+#include <policy/policy.h>\n+\n class CFeeRate;\n+class CTransaction;\n \n // Policy settings which are configurable at runtime.\n extern CFeeRate incrementalRelayFee;\n extern CFeeRate dustRelayFee;\n extern unsigned int nBytesPerSigOp;\n extern bool fIsBareMultisigStd;\n \n+static inline bool IsStandardTx(const CTransaction& tx, std::string& reason)\n+{\n+    return IsStandardTx(tx, ::fIsBareMultisigStd, ::dustRelayFee, reason);\n+}\n+\n+static inline int64_t GetVirtualTransactionSize(int64_t weight, int64_t sigop_cost)\n+{\n+    return GetVirtualTransactionSize(weight, sigop_cost, ::nBytesPerSigOp);\n+}\n+\n+static inline int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t sigop_cost)\n+{\n+    return GetVirtualTransactionSize(tx, sigop_cost, ::nBytesPerSigOp);\n+}\n+\n #endif // BITCOIN_POLICY_SETTINGS_H"
      },
      {
        "sha": "91331198e295b8bba270a7357095afa70ea903fa",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b874747b51882a613895a100c4210c7f1dddde30/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b874747b51882a613895a100c4210c7f1dddde30/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=b874747b51882a613895a100c4210c7f1dddde30",
        "patch": "@@ -19,6 +19,7 @@\n #include <node/transaction.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n+#include <policy/settings.h>\n #include <primitives/transaction.h>\n #include <psbt.h>\n #include <rpc/rawtransaction_util.h>"
      },
      {
        "sha": "b547ea21d94a0d046308006d9bbc42627c37c761",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b874747b51882a613895a100c4210c7f1dddde30/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b874747b51882a613895a100c4210c7f1dddde30/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=b874747b51882a613895a100c4210c7f1dddde30",
        "patch": "@@ -174,7 +174,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n     // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n     // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n     // moment earlier. In this case, we report an error to the user, who may use total_fee to make an adjustment.\n-    CFeeRate minMempoolFeeRate = mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    CFeeRate minMempoolFeeRate = wallet->chain().mempoolMinFee();\n     if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n         errors.push_back(strprintf(\n             \"New fee rate (%s) is lower than the minimum fee rate (%s) to get into the mempool -- \""
      },
      {
        "sha": "cb6f7637adf55590f5474ecd569874cba04c1155",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b874747b51882a613895a100c4210c7f1dddde30/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b874747b51882a613895a100c4210c7f1dddde30/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b874747b51882a613895a100c4210c7f1dddde30",
        "patch": "@@ -1756,7 +1756,7 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n     ListTransactions(*locked_chain, pwallet, wtx, 0, false, details, filter, nullptr /* filter_label */);\n     entry.pushKV(\"details\", details);\n \n-    std::string strHex = EncodeHexTx(*wtx.tx, RPCSerializationFlags());\n+    std::string strHex = EncodeHexTx(*wtx.tx, pwallet->chain().rpcSerializationFlags());\n     entry.pushKV(\"hex\", strHex);\n \n     return entry;\n@@ -1974,7 +1974,7 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n     // wallet before the following callback is called. If a valid shared pointer\n     // is acquired in the callback then the wallet is still loaded.\n     std::weak_ptr<CWallet> weak_wallet = wallet;\n-    RPCRunLater(strprintf(\"lockwallet(%s)\", pwallet->GetName()), [weak_wallet] {\n+    pwallet->chain().rpcRunLater(strprintf(\"lockwallet(%s)\", pwallet->GetName()), [weak_wallet] {\n         if (auto shared_wallet = weak_wallet.lock()) {\n             LOCK(shared_wallet->cs_wallet);\n             shared_wallet->Lock();\n@@ -3471,7 +3471,7 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n         if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            ProcessSubScript(subscript, obj, IsDeprecatedRPCEnabled(\"validateaddress\"));\n+            ProcessSubScript(subscript, obj, pwallet->chain().rpcEnableDeprecated(\"validateaddress\"));\n         }\n         return obj;\n     }"
      },
      {
        "sha": "212bce49fed5942155b9708adc07c696e61531d1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b874747b51882a613895a100c4210c7f1dddde30/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b874747b51882a613895a100c4210c7f1dddde30/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b874747b51882a613895a100c4210c7f1dddde30",
        "patch": "@@ -1287,7 +1287,6 @@ void CWallet::UpdatedBlockTip()\n \n \n void CWallet::BlockUntilSyncedToCurrentChain() {\n-    AssertLockNotHeld(cs_main);\n     AssertLockNotHeld(cs_wallet);\n \n     {"
      }
    ]
  },
  {
    "sha": "78a2fb55c97fbc26f7b74c5b1fb999a2aff8ce88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGEyZmI1NWM5N2ZiYzI2ZjdiNzRjNWIxZmI5OTlhMmFmZjhjZTg4",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-03-22T04:47:54Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-04-10T13:51:37Z"
      },
      "message": "bitcoin-wallet tool: Drop libbitcoin_server.a dependency\n\nThis ensures wallet code doesn't access node global state, avoiding bugs like\nhttps://github.com/bitcoin/bitcoin/pull/15557#discussion_r267735431",
      "tree": {
        "sha": "580bf7f4b1c62bc9276a20aea54bfa228489c449",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/580bf7f4b1c62bc9276a20aea54bfa228489c449"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78a2fb55c97fbc26f7b74c5b1fb999a2aff8ce88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78a2fb55c97fbc26f7b74c5b1fb999a2aff8ce88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78a2fb55c97fbc26f7b74c5b1fb999a2aff8ce88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78a2fb55c97fbc26f7b74c5b1fb999a2aff8ce88/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b874747b51882a613895a100c4210c7f1dddde30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b874747b51882a613895a100c4210c7f1dddde30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b874747b51882a613895a100c4210c7f1dddde30"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6bc3655cad6ff025cdbc0cf1afa33b0c2d872d41",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78a2fb55c97fbc26f7b74c5b1fb999a2aff8ce88/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78a2fb55c97fbc26f7b74c5b1fb999a2aff8ce88/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=78a2fb55c97fbc26f7b74c5b1fb999a2aff8ce88",
        "patch": "@@ -593,7 +593,6 @@ endif\n bitcoin_wallet_LDADD = \\\n   $(LIBBITCOIN_WALLET_TOOL) \\\n   $(LIBBITCOIN_WALLET) \\\n-  $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_UTIL) \\"
      }
    ]
  }
]