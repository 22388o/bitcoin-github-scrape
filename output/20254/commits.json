[
  {
    "sha": "151786fb4b587a7630f21c4a0562f71748998895",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTE3ODZmYjRiNTg3YTc2MzBmMjFjNGEwNTYyZjcxNzQ4OTk4ODk1",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-21T09:32:22Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-22T17:11:48Z"
      },
      "message": "util: support DecodeBase32() without padding\n\nI2P addresses are Base32 encoded but have the padding `=` omitted.\nExtend `DecodeBase32()` to support that.",
      "tree": {
        "sha": "b07de7fa1fb7376cf622593455fec3432487279a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b07de7fa1fb7376cf622593455fec3432487279a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/151786fb4b587a7630f21c4a0562f71748998895",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl+RvVQACgkQVN8G9ktV\ny78GDh//Sv2CRxithtw/nXBIRJevKtyfUZa257Auw8ShedTT9hQ4+XHx+s0gClGP\nWC/KbLr1qkoKuZMhUFnPrESa1mQ/GR6VSfxlAtF/814bP+4SbDGl2zMHx3VU62sr\nFXE/fWdmOrMMU7jj4FbU0IouuedQov+fEj+NZQt5AekHO8kg+eB5rUiUlomc0Onk\nv8NMzbCM9ZQfIQKY6ILIqcuPMUS1RM5fcajfdft1cXdx9c8n8pWQQGl7BmTaBRDu\nXokYlFjmFehVDa4JBhs0wtc50wDv1yjSq3QgIpQA0kA+FLhqLIgUjefvmSu5/DgW\ny/fcQJyJgAODEmCkF/CMuAVjkuVeG/BdZUhvMKGaVu3uWBIebPsG1AxeTVgDJXL3\nLn5h99ha2jyVUpXUn1KtMn0LdvLo0ukHIBwwzFin//9Ni+56yVSN+yDJ0KJExMcq\nN6T90P4po8pzxh+VWQ7B+UA2gcz614n8yme+Kq3BqJeQqNkDRneV11Dyq/if1PF9\nqSjSVJr6k1/D240oRp2Li0ji65RrF6Snp5GdTAnWZXBBvgYInTnHEW7k/4F4ZPA0\nsmjyLmYBK1Ysf/CYGsh9te2J7HxabxmsMTsYrSXMsS972+6SBr2V6ILHNeg/eCTs\niHDzhN+BXyHOMGBUFi2feq8dszXb+G6RA0G6Q8FaBBTwVINBJDlmE6fhndiuDSAK\np5ezfbikVRFQDZtlDDnhRyRtvPhNm8bddCpkVuDAcz7gZPjpS1T+65N/dMR1HHx1\nCHXWPEXSPIZt1SN3uFmwpBcGZnXO1lhbPNROkZ20qOjD73Z1uqEJad4OkTF9xWhS\n4c9JoCcmxNnkyCUlLExIX+Rm3UM3VbxJWa5gUMm+FSEn2HJis8tqXGUcB6mifJfK\n86UPnEPdYqnHHpsVLlrztFZf0K0s7lEuJolNumjC2ap4zdKkFdGIT4ReHLVdPg5n\n1wb05QfqHcCWVOy0u6GNhIxv/0LASUU1eAcAy52DwhWYLg32dbrzjMPDN+sD2Ym4\nKL6D62tLY5g1aDRxFtn5Fv1dRvpdY2cPvdam62XrfayMSt2eA9FfJ3vMEL0er/29\nTkX9SPfTqNxzQBbKIpAZcTqqtWVUL2KhfB7EtmlZc2PVPgm7PWvtbJKIsG2JfR1J\nW57HIzXfVScLkFZ8ZXX0HK4c6T6A6PfL2P5EktmGckoOcZ29nPjmjEx6xDEymwwf\ni6NFuBuFcaVScJ963Jq7v4N66sym5qc79Cxnm3AOgpOc5B3gdxirnlNOsRtt+qGJ\nNlM3vpNCQWSDjT57Y5S1QXxpuZfHB3gvBlpjyWaa1ej9xmRA0c8fECyTkJW4S7Un\nfW6fx428plOrUyR3oW+MTbJ2juvSDw==\n=osEL\n-----END PGP SIGNATURE-----",
        "payload": "tree b07de7fa1fb7376cf622593455fec3432487279a\nparent 88271184e82222f556d67511cc64230b0532f40d\nauthor Vasil Dimov <vd@FreeBSD.org> 1603272742 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1603386708 +0200\n\nutil: support DecodeBase32() without padding\n\nI2P addresses are Base32 encoded but have the padding `=` omitted.\nExtend `DecodeBase32()` to support that.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/151786fb4b587a7630f21c4a0562f71748998895",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/151786fb4b587a7630f21c4a0562f71748998895",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/151786fb4b587a7630f21c4a0562f71748998895/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88271184e82222f556d67511cc64230b0532f40d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88271184e82222f556d67511cc64230b0532f40d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88271184e82222f556d67511cc64230b0532f40d"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 35,
      "deletions": 12
    },
    "files": [
      {
        "sha": "b6e8c0d58e2368c00b8e441701dbfccd01f32e78",
        "filename": "src/test/base32_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/151786fb4b587a7630f21c4a0562f71748998895/src/test/base32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/151786fb4b587a7630f21c4a0562f71748998895/src/test/base32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base32_tests.cpp?ref=151786fb4b587a7630f21c4a0562f71748998895",
        "patch": "@@ -16,12 +16,16 @@ BOOST_AUTO_TEST_CASE(base32_testvectors)\n     static const std::string vstrOutNoPadding[] = {\"\",\"my\",\"mzxq\",\"mzxw6\",\"mzxw6yq\",\"mzxw6ytb\",\"mzxw6ytboi\"};\n     for (unsigned int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n     {\n-        std::string strEnc = EncodeBase32(vstrIn[i]);\n-        BOOST_CHECK_EQUAL(strEnc, vstrOut[i]);\n-        strEnc = EncodeBase32(vstrIn[i], false);\n-        BOOST_CHECK_EQUAL(strEnc, vstrOutNoPadding[i]);\n-        std::string strDec = DecodeBase32(vstrOut[i]);\n-        BOOST_CHECK_EQUAL(strDec, vstrIn[i]);\n+        BOOST_CHECK_EQUAL(EncodeBase32(vstrIn[i]), vstrOut[i]);\n+        BOOST_CHECK_EQUAL(EncodeBase32(vstrIn[i], false), vstrOutNoPadding[i]);\n+\n+        bool invalid;\n+\n+        BOOST_CHECK_EQUAL(DecodeBase32(vstrOut[i], &invalid), vstrIn[i]);\n+        BOOST_CHECK(!invalid);\n+\n+        BOOST_CHECK_EQUAL(DecodeBase32(vstrOutNoPadding[i], &invalid, false), vstrIn[i]);\n+        BOOST_CHECK(!invalid);\n     }\n \n     // Decoding strings with embedded NUL characters should fail"
      },
      {
        "sha": "9c28b07bac47d528085bdf753a5c83fdd3d0ac9e",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/151786fb4b587a7630f21c4a0562f71748998895/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/151786fb4b587a7630f21c4a0562f71748998895/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=151786fb4b587a7630f21c4a0562f71748998895",
        "patch": "@@ -221,7 +221,7 @@ std::string EncodeBase32(const std::string& str, bool pad)\n     return EncodeBase32(MakeUCharSpan(str), pad);\n }\n \n-std::vector<unsigned char> DecodeBase32(const char* p, bool* pf_invalid)\n+std::vector<unsigned char> DecodeBase32(const char* p, bool* pf_invalid, bool require_padding)\n {\n     static const int decode32_table[256] =\n     {\n@@ -262,21 +262,22 @@ std::vector<unsigned char> DecodeBase32(const char* p, bool* pf_invalid)\n         }\n         ++p;\n     }\n-    valid = valid && (p - e) % 8 == 0 && p - q < 8;\n+    const bool pad_ok = (p - e) % 8 == 0 || !require_padding;\n+    valid = valid && pad_ok && p - q < 8;\n     if (pf_invalid) *pf_invalid = !valid;\n \n     return ret;\n }\n \n-std::string DecodeBase32(const std::string& str, bool* pf_invalid)\n+std::string DecodeBase32(const std::string& str, bool* pf_invalid, bool require_padding)\n {\n     if (!ValidAsCString(str)) {\n         if (pf_invalid) {\n             *pf_invalid = true;\n         }\n         return {};\n     }\n-    std::vector<unsigned char> vchRet = DecodeBase32(str.c_str(), pf_invalid);\n+    std::vector<unsigned char> vchRet = DecodeBase32(str.c_str(), pf_invalid, require_padding);\n     return std::string((const char*)vchRet.data(), vchRet.size());\n }\n "
      },
      {
        "sha": "02bd21f06c92c475ade74b95f71fda9bf6bf86af",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 20,
        "deletions": 2,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/151786fb4b587a7630f21c4a0562f71748998895/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/151786fb4b587a7630f21c4a0562f71748998895/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=151786fb4b587a7630f21c4a0562f71748998895",
        "patch": "@@ -50,8 +50,26 @@ std::vector<unsigned char> DecodeBase64(const char* p, bool* pf_invalid = nullpt\n std::string DecodeBase64(const std::string& str, bool* pf_invalid = nullptr);\n std::string EncodeBase64(Span<const unsigned char> input);\n std::string EncodeBase64(const std::string& str);\n-std::vector<unsigned char> DecodeBase32(const char* p, bool* pf_invalid = nullptr);\n-std::string DecodeBase32(const std::string& str, bool* pf_invalid = nullptr);\n+\n+/**\n+ * Base32 decode.\n+ * If `allow_nopad` is true, then the input is allowed to have length that is not\n+ * a multiple of 8 and is assumed to have been padded with `=` up to a multiple\n+ * of 8.\n+ */\n+std::vector<unsigned char> DecodeBase32(const char* p,\n+                                        bool* pf_invalid = nullptr,\n+                                        bool require_padding = true);\n+\n+/**\n+ * Base32 decode.\n+ * If `allow_nopad` is true, then the input is allowed to have length that is not\n+ * a multiple of 8 and is assumed to have been padded with `=` up to a multiple\n+ * of 8.\n+ */\n+std::string DecodeBase32(const std::string& str,\n+                         bool* pf_invalid = nullptr,\n+                         bool require_padding = true);\n \n /**\n  * Base32 encode."
      }
    ]
  },
  {
    "sha": "8f55c06127adc2a3e7f797c0ffd8c1d9030bc4a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjU1YzA2MTI3YWRjMmEzZTdmNzk3YzBmZmQ4YzFkOTAzMGJjNGEx",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-21T09:48:18Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-22T17:11:48Z"
      },
      "message": "init: add config option to specify I2P proxy\n\nAdd a new config option so that users can specify a dedicated SOCKS5\nproxy for reaching I2P peers.\n\nI2P is a closed network (almost). The I2P proxy cannot be used to reach\nnon-I2P peers and the other proxies (the generic one and the Tor one)\ncannot be used to reach I2P peers. Thus the new option is unrelated to\nthe other options: does not default to `-proxy` and `-proxy` is not used\nto reach I2P peers.\n\nWhen the new option is set the I2P network will be set as reachable,\nthus making the node relay I2P addresses to its peers (see\n`RelayAddress()`).",
      "tree": {
        "sha": "027f8fcdcf214235dda75c4c98743d84bb450b5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/027f8fcdcf214235dda75c4c98743d84bb450b5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f55c06127adc2a3e7f797c0ffd8c1d9030bc4a1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl+RvVQACgkQVN8G9ktV\ny7+w+B/8DKCLfNKLXD4xO72ftU+tzGBfYbp15Tgs4MI01YXg8mQEAn/BifG3d5pO\nLuijaRG/6WkGaoE0vO06xX30oDPnPirRGFG5qJ7rPNpJ+lMb0O1OoG9VK2BJr1jz\nY2tjTk+pzfDDJ8ctAvvS5mkD4ViSsewwhyKBOD+zjSCFYKSC6YvKfbcUGtSIXRim\nKVu5+u5H7bIy1d2mNgLJCOt5trOpU2kHfa1D846x4m3ieQE6zvuAbm//0JCF1c90\nSaL7KQAY3iLSPHiExJZphBUAYfGn+S8CwIWaIw4OQcSxUs1ErO0oDYCrkneKHgJS\nWTiVRHKLZf0rTyryeZ8DbSLVPlrV4mYFCfMlQtXjlAA3HOYtToOoXGZQ+GZGBXQr\n0w/T3HkvInjjayTb8dAQJ2Sxauz1Ks0NGjwrJ59OOyxK4mjc5j+heh6uENxJ+E9v\nj35u69pkjq99AoNJtlPViUhf59DjVrVvEMpiareAJqypOja0VVXZck4jVbgngeK2\n6zO3xD4KXMJeaoZOZOWYo3FWvWnQJpjnxsy/lpo4kO3pdcpJrj2gjMDtAZ8jymcD\nj+bTHE/Y6AgI031wqD6MpedA+mEf6GBoXpNbGHq51T8Tevw1JaSTQXNbyyN50h+s\nU7QE5A8LoDsTbn8msDhrNB2DbhelP3iHRfK7N13W8caXKRyDfA31ZsNekcOd7nVv\nKvvytHlpBZn62wa00QVqXzzGS1wCwsp9cM14+lbcGh59KdyJ2ZAxkPPFjM3jasav\n3I3fvkRnQHrLxLavlaLnD7X/qUKVwVlZsSC0bnP8ABB/I1aIhzT58G26MhTNVH8k\ngW9epQABOF6Q4MX4/gLS9h/Yz2QrNWPZxVJLAWZXs1FG9XOQf13FpqtVCtRGiFat\nDBG6pQAoE+wzl0H/jDc3Lxk1HrvgePkUZtvNG9bQhdtCu273rthXTOGdVXOLRLLl\n+w5P1au4qftmZ7UKFCXa9vbLvuvpqwtJdc6ej69bvL5p4ed6yAZn05wizQc7W9OE\nLD9svj6ta8iq7gF6trM4IZyCRZ6hzudP8cnvNZ2k/zaIIuvFKFNJE6JQQ9uouPB9\nCRDwkslUOO1lNsZ1vdGMY+9ArXbAXrRyt+3OM2KkAd04Gp+xdcyQSGGM5wJ40hag\naESAQdhbWM9vBJvuaq2uWa8H5drZvL0yne1bwTCEESNT20IThsz80gS97FIKAU/k\nJJIHrEZgBDLeB+8iLUtOQ9AkgC6bBAPJV6vB9gL3OHGI3oUH1oSqFiZXMZqVrdeZ\nJEEROhjGogN5mZ3tj5yxAnsV9PF7MGFEo2C11UiZY61kJCZK3mQetUs4Ga1UOHCt\nguqKBaMVLQfCRqLO/LGLjw2E2Cwtlg==\n=3eU/\n-----END PGP SIGNATURE-----",
        "payload": "tree 027f8fcdcf214235dda75c4c98743d84bb450b5b\nparent 151786fb4b587a7630f21c4a0562f71748998895\nauthor Vasil Dimov <vd@FreeBSD.org> 1603273698 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1603386708 +0200\n\ninit: add config option to specify I2P proxy\n\nAdd a new config option so that users can specify a dedicated SOCKS5\nproxy for reaching I2P peers.\n\nI2P is a closed network (almost). The I2P proxy cannot be used to reach\nnon-I2P peers and the other proxies (the generic one and the Tor one)\ncannot be used to reach I2P peers. Thus the new option is unrelated to\nthe other options: does not default to `-proxy` and `-proxy` is not used\nto reach I2P peers.\n\nWhen the new option is set the I2P network will be set as reachable,\nthus making the node relay I2P addresses to its peers (see\n`RelayAddress()`).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f55c06127adc2a3e7f797c0ffd8c1d9030bc4a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f55c06127adc2a3e7f797c0ffd8c1d9030bc4a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f55c06127adc2a3e7f797c0ffd8c1d9030bc4a1/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "151786fb4b587a7630f21c4a0562f71748998895",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/151786fb4b587a7630f21c4a0562f71748998895",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/151786fb4b587a7630f21c4a0562f71748998895"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 22,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8dd9b9bf54ad846ba116f0913d1e5554eb56b9e5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f55c06127adc2a3e7f797c0ffd8c1d9030bc4a1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f55c06127adc2a3e7f797c0ffd8c1d9030bc4a1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8f55c06127adc2a3e7f797c0ffd8c1d9030bc4a1",
        "patch": "@@ -457,12 +457,13 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h). Limit does not apply to peers with 'download' permission. 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor onion services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-i2pproxy=<ip:port>\", \"SOCKS5 proxy to reach I2P peers (default: none, I2P peers are not reachable)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u, testnet: %u signet: %u, regtest: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), signetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-proxy=<ip:port>\", \"Make outbound connections to IPv4, IPv6 and Tor networks through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-networkactive\", \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n@@ -1480,6 +1481,26 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         }\n     }\n \n+    const std::string& i2p_proxy_arg = args.GetArg(\"-i2pproxy\", \"\");\n+    if (!i2p_proxy_arg.empty()) {\n+        CService i2p_proxy;\n+        constexpr uint16_t dummy_port{0};\n+        if (!Lookup(i2p_proxy_arg, i2p_proxy, dummy_port, fNameLookup)) {\n+            return InitError(strprintf(_(\"Invalid -i2pproxy=%s: lookup failure\"), i2p_proxy_arg));\n+        }\n+        if (!i2p_proxy.IsValid()) {\n+            return InitError(\n+                strprintf(_(\"Invalid -i2pproxy=%s: lookup returned invalid address: %s\"),\n+                          i2p_proxy_arg, i2p_proxy.ToString()));\n+        }\n+        if (i2p_proxy.GetPort() == dummy_port) {\n+            return InitError(\n+                strprintf(_(\"Invalid -i2pproxy=%s: must contain a port\"), i2p_proxy_arg));\n+        }\n+        SetProxy(NET_I2P, proxyType{i2p_proxy, proxyRandomize});\n+        SetReachable(NET_I2P, true);\n+    }\n+\n     // see Step 2: parameter interactions for more information about these\n     fListen = args.GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n     fDiscover = args.GetBoolArg(\"-discover\", true);"
      }
    ]
  },
  {
    "sha": "7cbc804402bcac551e0d1236edc3be95b520f20d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2JjODA0NDAyYmNhYzU1MWUwZDEyMzZlZGMzYmU5NWI1MjBmMjBk",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-21T09:35:19Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-22T17:11:48Z"
      },
      "message": "net: extend CNetAddr::SetSpecial() to support I2P\n\nRecognize also I2P addresses in the form `base32encodedpublickey.b32.i2p`\nfrom `CNetAddr::SetSpecial()`.\n\nThis makes `Lookup()` support them, which in turn makes it possible to\nmanually connect to an I2P node by using\n`-i2pproxy=i2p_proxy:port -addnode=i2p_address.b32.i2p:port`",
      "tree": {
        "sha": "87d4271323dcc3724bf56f3518af0e978210bda4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87d4271323dcc3724bf56f3518af0e978210bda4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cbc804402bcac551e0d1236edc3be95b520f20d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl+RvVQACgkQVN8G9ktV\ny79OiB//Yq5O7UDvtbhuNePcQZd3FCiEJIpbTyAx/YPuesd71yp+PY4I5RArK4UR\nnoitK57NpWlZVDg/diIJkQLcgBiYfrVij9M3yWeImhY3BjQQcyTUDVz+EcQPeSr8\nzddPqXGI5wRK7EjjmlchJ/Czui6CJ8MCWks8X5Sza/HP2EOYREhrYBwcNu7vcgZi\nEzpXWxm/H/dmaJggtXG1//n+jwVZh21qijTgeuTMMDKwIKrOQ8lJBPV9SH3l9oJb\nDB1KNsQHgT7EeZHpC+wT/NxSBoNRGawX5GKxIogtyThrHAts85lGRAINubO3v1QL\nxTWFFQ2UrjgW/9dJ7kYwIWQWoqbwszkqAp49zeNjl275e6Hr20L9pL3BU8HIv4u1\nLJcauoBDc05YI84SzfZO7/MBefljauBBqEZNBos//TtDIDlh/3WKS1rbLLLkReJF\nYBQsWwKJlaNBGCtKy0Q/p9aqN8Xx6wOVLU+6SUNdu58+Pt2IgHc5LWxKQ3B+uEOV\nVaOAmSf+X6+6H16tVFh3MSlHPc0MzFBScVGNvSLVxth2CfSBZ5XD8pcKeW0rU7sW\nLJwUe9omr8N8ozf3vZ9W/n1e3anXBTKTs9ubXR7DWiq5N3lUZAxFO8P2EQPKDL3W\nS4J+Aq52Frl5RbFZVd7q/rA7I4jeKGfTpVwxpYtJ/rzEYAJQom4C8QDV/Bt4D9+x\nzrKWHFm+d5hpWRW+nUGtfwygoTDQbMrHMPmquLCGcV36kjbCmn9mDyzLcQ98RUTt\nddmq8LymznZXDLMuTyZbH28TfFfblDkpd1yDKXulll1mnul+N8GhrX+jPqwih7Of\niDdeHRhIsQq3lPjZjZzPH1ugGJxz5fhuhzLOrSel9caKZYvL5uXIHLAeX5+Aiumv\nQ02PyHOXEmkPQVKbI/LNxS/1LfIABhWOMJtS9+tvGk/mglE0bxCTlOL0vJYzM7SC\nWGLjX0yRmI0RN41p05Hd6nvY5zt2k4R3/w/UAee59tkn4SrybvgKq+sVIZBPAaUi\nZY9kq5jFmWpw+rjXFxCyE1UOUTiL62tnWEGAVVKUGUYLcWVG3EevDGwosm6guP28\nRSAAR7Rptji+2MvohDR7mSLDNpOO9Ww8w9WhHKByeNQSb9mWceBgNinAfra3jm6L\nC3yh18eHXYG8r4JU/9QvCnV52JKfOCSX1Ho2XxdvwWt8LrfrIYWXz2CVWBBw/7HB\ntJ1At4jVqfWYnU0e6uwp4CfhUneeZN25DIqomFAK9GTWcvJiX/VIFZe9wYH5PCXm\nG63hOCxwcrdK5k9op/Fqs+J7R9qh1NZKjXjUD6lmZE+Y/y1wCY2Z4CzhhXNKM3uV\nuzPVfmgC6Yk0mcliOPt7iHyEVkG3LQ==\n=OqrV\n-----END PGP SIGNATURE-----",
        "payload": "tree 87d4271323dcc3724bf56f3518af0e978210bda4\nparent 8f55c06127adc2a3e7f797c0ffd8c1d9030bc4a1\nauthor Vasil Dimov <vd@FreeBSD.org> 1603272919 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1603386708 +0200\n\nnet: extend CNetAddr::SetSpecial() to support I2P\n\nRecognize also I2P addresses in the form `base32encodedpublickey.b32.i2p`\nfrom `CNetAddr::SetSpecial()`.\n\nThis makes `Lookup()` support them, which in turn makes it possible to\nmanually connect to an I2P node by using\n`-i2pproxy=i2p_proxy:port -addnode=i2p_address.b32.i2p:port`\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cbc804402bcac551e0d1236edc3be95b520f20d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cbc804402bcac551e0d1236edc3be95b520f20d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cbc804402bcac551e0d1236edc3be95b520f20d/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f55c06127adc2a3e7f797c0ffd8c1d9030bc4a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f55c06127adc2a3e7f797c0ffd8c1d9030bc4a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f55c06127adc2a3e7f797c0ffd8c1d9030bc4a1"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 56,
      "deletions": 9
    },
    "files": [
      {
        "sha": "d30309c8b38e22abfc72b290aff0dc7c2c318c6c",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 8,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cbc804402bcac551e0d1236edc3be95b520f20d/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cbc804402bcac551e0d1236edc3be95b520f20d/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=7cbc804402bcac551e0d1236edc3be95b520f20d",
        "patch": "@@ -221,14 +221,18 @@ static void Checksum(Span<const uint8_t> addr_pubkey, uint8_t (&checksum)[CHECKS\n \n }; // namespace torv3\n \n-/**\n- * Parse a TOR address and set this object to it.\n- *\n- * @returns Whether or not the operation was successful.\n- *\n- * @see CNetAddr::IsTor()\n- */\n-bool CNetAddr::SetSpecial(const std::string& str)\n+bool CNetAddr::SetSpecial(const std::string& name)\n+{\n+    if (SetTor(name)) {\n+        return true;\n+    }\n+    if (SetI2P(name)) {\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CNetAddr::SetTor(const std::string& str)\n {\n     static const char* suffix{\".onion\"};\n     static constexpr size_t suffix_len{6};\n@@ -271,6 +275,30 @@ bool CNetAddr::SetSpecial(const std::string& str)\n     return false;\n }\n \n+bool CNetAddr::SetI2P(const std::string& str)\n+{\n+    static const char* suffix{\".b32.i2p\"};\n+    static constexpr size_t suffix_len{8};\n+\n+    if (!ValidAsCString(str) || str.size() <= suffix_len ||\n+        str.substr(str.size() - suffix_len) != suffix) {\n+        return false;\n+    }\n+\n+    bool invalid;\n+    const auto& input =\n+        DecodeBase32(str.substr(0, str.size() - suffix_len).c_str(), &invalid, false);\n+\n+    if (invalid || input.size() != ADDR_I2P_SIZE) {\n+        return false;\n+    }\n+\n+    m_net = NET_I2P;\n+    m_addr.assign(input.begin(), input.end());\n+\n+    return true;\n+}\n+\n CNetAddr::CNetAddr(const struct in_addr& ipv4Addr)\n {\n     m_net = NET_IPV4;"
      },
      {
        "sha": "b912e011fd714e4183bfacffbe688904ecb70822",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cbc804402bcac551e0d1236edc3be95b520f20d/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cbc804402bcac551e0d1236edc3be95b520f20d/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=7cbc804402bcac551e0d1236edc3be95b520f20d",
        "patch": "@@ -151,7 +151,12 @@ class CNetAddr\n \n         bool SetInternal(const std::string& name);\n \n-        bool SetSpecial(const std::string &strName); // for Tor addresses\n+        /**\n+         * Parse a Tor or I2P address and set this object to it.\n+         * @returns whether or not the operation was successful.\n+         * @see CNetAddr::IsTor(), CNetAddr::IsI2P()\n+         */\n+        bool SetSpecial(const std::string& name);\n         bool IsBindAny() const; // INADDR_ANY equivalent\n         bool IsIPv4() const;    // IPv4 mapped address (::FFFF:0:0/96, 0.0.0.0/0)\n         bool IsIPv6() const;    // IPv6 address (not mapped IPv4, not Tor)\n@@ -248,6 +253,20 @@ class CNetAddr\n         friend class CSubNet;\n \n     private:\n+        /**\n+         * Parse a Tor address and set this object to it.\n+         * @returns Whether or not the operation was successful.\n+         * @see CNetAddr::IsTor()\n+         */\n+        bool SetTor(const std::string& name);\n+\n+        /**\n+         * Parse an I2P address and set this object to it.\n+         * @returns Whether or not the operation was successful.\n+         * @see CNetAddr::IsI2P()\n+         */\n+        bool SetI2P(const std::string& name);\n+\n         /**\n          * BIP155 network ids recognized by this software.\n          */"
      }
    ]
  },
  {
    "sha": "ba87ca49cf968ef7b73468605fbf99f90e9aab41",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTg3Y2E0OWNmOTY4ZWY3YjczNDY4NjA1ZmJmOTlmOTBlOWFhYjQx",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-21T12:48:18Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-22T17:11:49Z"
      },
      "message": "net: extend GetNetworkName() to recognize I2P\n\nWith this change the output of `getpeerinfo` and `getnetworkinfo`\ncontains proper `i2p` instead of an empty string:\n\n```\nbitcoin-cli getpeerinfo 2>&1 |jq '.[].network'\nbitcoin-cli getnetworkinfo 2>&1 |jq '.networks[].name'\n```",
      "tree": {
        "sha": "95aab21dc251198b8f7b8f311c0eac4533a9fc09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95aab21dc251198b8f7b8f311c0eac4533a9fc09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba87ca49cf968ef7b73468605fbf99f90e9aab41",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl+RvVUACgkQVN8G9ktV\ny7/yWx//Vvmf7vVqgLWjn8cl2IyHJYD466VzogIhbNY7hWtshEYNOxHMPTx+7MdA\nCYPfHhmyQdk25Ri2VquCEYNsVP5y0p6kbkJApzanaavmHqzwZAN70kG7asmk0mLl\nY2T2ryWKD2MG31vJzX+jPkmdI93zGH70tVx1ovQtPwzcslEC2rIZTZf8tbQb81t6\nkU0wKCAiER7934b/wpDx9MveznsLYdH9LyUVpPPf6xHWbJsCa2yQoXOS/ztjZUSc\nkoCqbK5Q7aaoswVuQfn9Fs0bKECz9D8FYd+8pHdc5gFRfC07VMzWNwP/3U4XaOQO\n5fTQJCqHL2ir45SQOEXV5+1lwz/OHK79KUNnSjPbCarmGteX+KQjoQVjIaDBLYi2\n2Il8uGrMD2AYSjKAFGCzimCjiHoP/dwmakfbV2oH7KVJQk7+keQItdtZ56ffJB/b\nHTxCelIfhamnjYNHKIl8xXLNjVc/fdnMmgbZdQYsG6F+o7CzPOGQNQgmaU/de+Um\nLxKB8MSgvxVoMiPBFyIIYcNWUxR3WQ8YIh4/IQHQlSkeXRP48Z5Nrt7tyfvh2TfM\nLIPYMfDHkMeL8yBgGK9lUF2/wW/CKNsrHOrqfm7wId5S1ucjIq2O0Twd070q97f/\nJjpc/DWQoe7ogCs3xOs+JJhFTTndSrjOkV/5/NuyikBtetytmkOC5bbf9On8M7XP\n4GXFlOAiE/wKVEPO3/LwPj8KKSD6fy+Wkl3WN6/SeRedFoHEGnhHBxW4DurMFpdr\nyPba6rM5nHiTDJVQwxoTssY6fxeUlFCWJIUZaZjz4BHTP/5Aj8MDyrWwEPtV24Yy\nrIRI705OTdfigzK4lv75HQVGRFp6WemgPk4MWJxqetcThLnn/kBJfP/c0sQpN8Pn\n6/2CLMqTSiDeRT5M/Xx/+orakjVUHch1LgSlYSHR5anNtrEny0slhgtORc72WHN7\no9wXKeordRN+toHEItKgjzW49/KL3kf4koRcfARb9bulI1myr7ECwMMqihP/cEEi\n6f83/Kls6dQ9ua/mj4stIgtAlQmQ8Pq5jogzIQv90EZTQgNjT9yTG1Q3EDHJAgP/\nvFVYmxYpe2DYwCTaTMeO+rH2LzRCstggoXjAQjOOB1TSaM3IDlCMyomzFm7VFcKm\nXHc3jtZTAPtte/oe9FDVtv99J2jORkqiCLCK8pNonJ56NmW8S5Mf1T0Bofrq0n39\nWnQtfsanZ3Fp+r+TOT2NWlNNEqVdMhlYvhGiRVCnlNFtHCkbefC7qGgDm6XdW3GX\n6dMrO+yVQZShLRic8fIje9obQ+CjBuPUWCGBYj1acLSyUxm5aJ9RGaAxpq8EEAuf\nGEWXHOsExw2S8BNbCgmZ514mR7S8Pg==\n=9hIp\n-----END PGP SIGNATURE-----",
        "payload": "tree 95aab21dc251198b8f7b8f311c0eac4533a9fc09\nparent 7cbc804402bcac551e0d1236edc3be95b520f20d\nauthor Vasil Dimov <vd@FreeBSD.org> 1603284498 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1603386709 +0200\n\nnet: extend GetNetworkName() to recognize I2P\n\nWith this change the output of `getpeerinfo` and `getnetworkinfo`\ncontains proper `i2p` instead of an empty string:\n\n```\nbitcoin-cli getpeerinfo 2>&1 |jq '.[].network'\nbitcoin-cli getnetworkinfo 2>&1 |jq '.networks[].name'\n```\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba87ca49cf968ef7b73468605fbf99f90e9aab41",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba87ca49cf968ef7b73468605fbf99f90e9aab41",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba87ca49cf968ef7b73468605fbf99f90e9aab41/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cbc804402bcac551e0d1236edc3be95b520f20d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cbc804402bcac551e0d1236edc3be95b520f20d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cbc804402bcac551e0d1236edc3be95b520f20d"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a6a02da9685a319d65e79b63c624b93d95792d3c",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba87ca49cf968ef7b73468605fbf99f90e9aab41/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba87ca49cf968ef7b73468605fbf99f90e9aab41/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=ba87ca49cf968ef7b73468605fbf99f90e9aab41",
        "patch": "@@ -58,6 +58,7 @@ std::string GetNetworkName(enum Network net) {\n     case NET_IPV4: return \"ipv4\";\n     case NET_IPV6: return \"ipv6\";\n     case NET_ONION: return \"onion\";\n+    case NET_I2P: return \"i2p\";\n     default: return \"\";\n     }\n }"
      }
    ]
  },
  {
    "sha": "8b4a3714b91639ac9ccd0720bb4d8b13f35ebcea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjRhMzcxNGI5MTYzOWFjOWNjZDA3MjBiYjRkOGIxM2YzNWViY2Vh",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-22T08:50:41Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-22T17:11:49Z"
      },
      "message": "test: extend feature_proxy.py to test -i2pproxy",
      "tree": {
        "sha": "d1d11e85f61851c53d436e97ba157437c59f88cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1d11e85f61851c53d436e97ba157437c59f88cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b4a3714b91639ac9ccd0720bb4d8b13f35ebcea",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl+RvVUACgkQVN8G9ktV\ny7/jZB/+JNasrLaEjDogG6MwVTxazmMIBN+5z28ZKudEzTsdt3ZtYKe/8pIOwsXo\nWpkTXVkQbzgMT9yOEv2wY5bBCRBi2ya+lGZqycnNV9QPycNOzMWTqx+0eqlz+FwY\nTBEi7PBCMCrUKLnq3BVrhEb2QkPVd7v8KJmvMbd5K5wjn3WW3j3gdj1umoU8Qqam\nW2y27QEelDNtC30VoPtKFTD2WsHfoH50mZkjxdPxVkvM60m1ivMwaZ1M/vhNMZfu\nO5Ey0zuoiM0fQqmdIbon51Wq57d/7rQZWeiKPd4WHy+U86tJZ661iO4ULg7v6bji\nlayCrH2dyIbELkXQJrGKmTfqu/aQaasFXoih+0kDP1x0C+qnqX82GZr+QleOVJb/\n9tDw6n34Ze7h1/QTHYtSGSkv5v+PRqdSl/jbExUbp6z0byFiMSAmg1cdt/KppC4b\nlCpA45QF2Bo+QcUedOgIXK+u6EM1loV3CoElVjyZ9ppfDn0CxMRfOFNPOlY/Py7B\nkJ7cBEjUEsoum6LLRv8yxWWeidqz4+QALvcfyLkUAVbt+koC11hYLgV+n9KQ4u3w\nWpnBdvMJ0dCD7CQwfOLz+AI0uPfpcW0mYu8upuVSzvRGxzRKRvsYvOTLoSuLydv3\noYWEmku+sSF+M4isKqtcbytLdUDCYr6+wl5MkA1dWrHeAn3vBSknCrHK9RZS3LJY\nkumXbL1JK7BmpOx0j4QcJ5OLYUpJpeKBnjsBwSKVIqK+bqrS0/OQ1X4A9atyRifT\n61G2ZdOz+nZ+L/5HiGTPbxg6hXssTnFcyPbzfZsw+hsD1quAa5s1x2MQgXLxbDLV\n0rP/SFQJUZfgKL31s8ArDVN2893XsciIcqujcjMnLhG671vypS4WjcqJn+JrdI3v\nCsaiPyW246Lutbv8/PtCaozYzgFh/FKYV8ATkF3PAqZxQO4GHxzMf6cbmKp/ZRO4\n6XypbbbZycs/dmd55Fjvm9KqjF6FY2v79RPHc6EodssfQVScsfD2Evfcp+38SLgt\nNCu0eJbU72mmQcCz80/jSEPkSlTFF65WiM20Z4hj9RF4Ab8jReRWv7ltTb71Xm7B\ntMI60L1iCcKjnV2Ii2Ye+e8Efsps6EjKbbszpVBzxn+3J132Qqp1x4pvOXX/eKG0\nUTBNH4p5X+1U9mSwfRxk8l3cj42JBdkd8NnbcNlncrsYRWU4OMnRlQfQ8nvKqhSm\nDMVDQB1j7TYZ1vhAlQWKrSLap1pRIc3qzeqc54SZhr5/bZHqSHW7WpF+dIXb9v+i\nWEWn7QbX4FUzlQPtmPaEkK1TSVpNCzEYkC/Bw+xSYsd68vqvMKOk618WfM0UHz+2\nfQbgQ2R7+GhO2PbZfByEaiJzhhy3qw==\n=v/6u\n-----END PGP SIGNATURE-----",
        "payload": "tree d1d11e85f61851c53d436e97ba157437c59f88cb\nparent ba87ca49cf968ef7b73468605fbf99f90e9aab41\nauthor Vasil Dimov <vd@FreeBSD.org> 1603356641 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1603386709 +0200\n\ntest: extend feature_proxy.py to test -i2pproxy\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b4a3714b91639ac9ccd0720bb4d8b13f35ebcea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b4a3714b91639ac9ccd0720bb4d8b13f35ebcea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b4a3714b91639ac9ccd0720bb4d8b13f35ebcea/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba87ca49cf968ef7b73468605fbf99f90e9aab41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba87ca49cf968ef7b73468605fbf99f90e9aab41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba87ca49cf968ef7b73468605fbf99f90e9aab41"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 32,
      "deletions": 4
    },
    "files": [
      {
        "sha": "7969d331f34abc1037f57d228f16c791cd956e46",
        "filename": "test/functional/feature_proxy.py",
        "status": "modified",
        "additions": 32,
        "deletions": 4,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b4a3714b91639ac9ccd0720bb4d8b13f35ebcea/test/functional/feature_proxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b4a3714b91639ac9ccd0720bb4d8b13f35ebcea/test/functional/feature_proxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_proxy.py?ref=8b4a3714b91639ac9ccd0720bb4d8b13f35ebcea",
        "patch": "@@ -46,11 +46,12 @@\n NET_IPV4 = \"ipv4\"\n NET_IPV6 = \"ipv6\"\n NET_ONION = \"onion\"\n+NET_I2P = \"i2p\"\n \n \n class ProxyTest(BitcoinTestFramework):\n     def set_test_params(self):\n-        self.num_nodes = 4\n+        self.num_nodes = 5\n         self.setup_clean_chain = True\n \n     def setup_nodes(self):\n@@ -61,7 +62,7 @@ def setup_nodes(self):\n         self.conf1.addr = ('127.0.0.1', RANGE_BEGIN + (os.getpid() % 1000))\n         self.conf1.unauth = True\n         self.conf1.auth = False\n-        # ... one supporting authenticated and unauthenticated (Tor)\n+        # ... one supporting authenticated and unauthenticated (Tor and I2P)\n         self.conf2 = Socks5Configuration()\n         self.conf2.addr = ('127.0.0.1', RANGE_BEGIN + 1000 + (os.getpid() % 1000))\n         self.conf2.unauth = True\n@@ -90,7 +91,8 @@ def setup_nodes(self):\n             ['-listen', '-proxy=%s:%i' % (self.conf1.addr),'-proxyrandomize=1'],\n             ['-listen', '-proxy=%s:%i' % (self.conf1.addr),'-onion=%s:%i' % (self.conf2.addr),'-proxyrandomize=0'],\n             ['-listen', '-proxy=%s:%i' % (self.conf2.addr),'-proxyrandomize=1'],\n-            []\n+            [],\n+            ['-listen', '-proxy=%s:%i' % (self.conf1.addr),'-i2pproxy=%s:%i' % (self.conf2.addr),'-proxyrandomize=1'],\n             ]\n         if self.have_ipv6:\n             args[3] = ['-listen', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n@@ -102,7 +104,7 @@ def network_test(self, node, addr, network):\n             if peer[\"addr\"] == addr:\n                 assert_equal(peer[\"network\"], network)\n \n-    def node_test(self, node, proxies, auth, test_onion=True):\n+    def node_test(self, node, proxies, auth, test_onion=True, test_i2p=False):\n         rv = []\n         addr = \"15.61.23.23:1234\"\n         self.log.debug(\"Test: outgoing IPv4 connection through node for address {}\".format(addr))\n@@ -164,6 +166,21 @@ def node_test(self, node, proxies, auth, test_onion=True):\n         rv.append(cmd)\n         self.network_test(node, addr, network=NET_UNROUTABLE)\n \n+        if test_i2p:\n+            addr = \"ukeu3k5oycgaauneqgtnvselmt4yemvoilkln7jpvamvfx7dnkdq.b32.i2p:8333\"\n+            self.log.debug(\"Test: outgoing I2P connection through node for address {}\".format(addr))\n+            node.addnode(addr, \"onetry\")\n+            cmd = proxies[2].queue.get()\n+            assert isinstance(cmd, Socks5Command)\n+            assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n+            assert_equal(cmd.addr, b\"ukeu3k5oycgaauneqgtnvselmt4yemvoilkln7jpvamvfx7dnkdq.b32.i2p\")\n+            assert_equal(cmd.port, 8333)\n+            if not auth:\n+                assert_equal(cmd.username, None)\n+                assert_equal(cmd.password, None)\n+            rv.append(cmd)\n+            self.network_test(node, addr, network=NET_I2P)\n+\n         return rv\n \n     def run_test(self):\n@@ -183,6 +200,10 @@ def run_test(self):\n             # proxy on IPv6 localhost\n             self.node_test(self.nodes[3], [self.serv3, self.serv3, self.serv3, self.serv3], False, False)\n \n+        # -proxy plus -i2pproxy\n+        self.node_test(self.nodes[4], [self.serv1, self.serv1, self.serv2, self.serv1],\n+                       auth=True, test_onion=False, test_i2p=True)\n+\n         def networks_dict(d):\n             r = {}\n             for x in d['networks']:\n@@ -217,6 +238,13 @@ def networks_dict(d):\n                 assert_equal(n3[net]['proxy_randomize_credentials'], False)\n             assert_equal(n3['onion']['reachable'], False)\n \n+        n4 = networks_dict(self.nodes[4].getnetworkinfo())\n+        for net in ['ipv4','ipv6','onion']:\n+            assert_equal(n4[net]['proxy'], '%s:%i' % (self.conf1.addr))\n+            assert_equal(n4[net]['proxy_randomize_credentials'], True)\n+        assert_equal(n4['i2p']['reachable'], True)\n+        assert_equal(n4['i2p']['proxy'], '%s:%i' % (self.conf2.addr))\n+\n \n if __name__ == '__main__':\n     ProxyTest().main()"
      }
    ]
  }
]