[
  {
    "sha": "fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTdhNmNmMWIzNjI4NGRiNzBlOTQxYmQyOTE1ZmQ2ZWRiYjBmOWQ2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-04-29T23:34:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-05-29T20:49:52Z"
      },
      "message": "policy: Treat segwit as always active",
      "tree": {
        "sha": "7a69ae65066c91fec3f7a0c23debf8905d793f55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a69ae65066c91fec3f7a0c23debf8905d793f55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbDbzwAAoJEM4rdWl+aaVIPskL/RzWE8ktmrj3ZHP6kGKOjbes\noIkDDAugVH5MCvDtzXbjWqai98WG5iwXpWXKzW2amqWxG/+5nLCMe00KlWcntltn\ngqLU+cJS7qJuOZRi7fAGCtG+GR4EkeCpUuaOwOXy+i7ICcZ3ZxkqNzKCHqHf3Mub\nt74YV9h+RewwZqRbEAOFSa7YX29zCXHXmoFJHO3A1YZjph2fNdLcMnFxqCYXl4Ol\nsikUSxRKbHt4vs+NnJ/5mJist4EMeEyQmiGPxHyDQtYAALZxAwFVPILXFTqeaOjp\non0rL8ggVPEO/Vh9CazpanAy/K41ZLYJT0k/qrBqnbfD4clohCU/WqeMiMrTqnOF\n5EBkFTPWaxzSK/19T54CGZHfRu5F8RctYYm2D8W/5j068m1KNbiLHY5al4I98FLW\ntR4biu91pZkfs7DriwmmuhNQ32ANDzl/EVeDnWIWaIYQm2Gyi3jQg0hjl4benTGW\njO3iSeMe4z7TeOvC2yJoa2aa8gbL98u4l1T8I3QV4A==\n=GBgW\n-----END PGP SIGNATURE-----",
        "payload": "tree 7a69ae65066c91fec3f7a0c23debf8905d793f55\nparent 3a8e3f480612e29f5a8b208f31cedc687f66b9df\nauthor MarcoFalke <falke.marco@gmail.com> 1525044897 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1527626992 -0400\n\npolicy: Treat segwit as always active\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a8e3f480612e29f5a8b208f31cedc687f66b9df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a8e3f480612e29f5a8b208f31cedc687f66b9df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a8e3f480612e29f5a8b208f31cedc687f66b9df"
      }
    ],
    "stats": {
      "total": 225,
      "additions": 107,
      "deletions": 118
    },
    "files": [
      {
        "sha": "aac3fe5c14b9d8c04529ecc0070f3098bbaefb79",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6",
        "patch": "@@ -54,7 +54,7 @@ bool IsDust(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)\n     return (txout.nValue < GetDustThreshold(txout, dustRelayFeeIn));\n }\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool witnessEnabled)\n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n {\n     std::vector<std::vector<unsigned char> > vSolutions;\n     if (!Solver(scriptPubKey, whichType, vSolutions))\n@@ -73,13 +73,10 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool w\n                (!fAcceptDatacarrier || scriptPubKey.size() > nMaxDatacarrierBytes))\n           return false;\n \n-    else if (!witnessEnabled && (whichType == TX_WITNESS_V0_KEYHASH || whichType == TX_WITNESS_V0_SCRIPTHASH))\n-        return false;\n-\n     return whichType != TX_NONSTANDARD && whichType != TX_WITNESS_UNKNOWN;\n }\n \n-bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnessEnabled)\n+bool IsStandardTx(const CTransaction& tx, std::string& reason)\n {\n     if (tx.nVersion > CTransaction::MAX_STANDARD_VERSION || tx.nVersion < 1) {\n         reason = \"version\";\n@@ -118,7 +115,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnes\n     unsigned int nDataOut = 0;\n     txnouttype whichType;\n     for (const CTxOut& txout : tx.vout) {\n-        if (!::IsStandard(txout.scriptPubKey, whichType, witnessEnabled)) {\n+        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n             reason = \"scriptpubkey\";\n             return false;\n         }"
      },
      {
        "sha": "035627bd603c96baa4dc4fbc78acd81abcacc8a9",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6",
        "patch": "@@ -79,12 +79,12 @@ CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFee);\n \n bool IsDust(const CTxOut& txout, const CFeeRate& dustRelayFee);\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool witnessEnabled = false);\n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n     /**\n      * Check for standard transaction types\n      * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n      */\n-bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnessEnabled = false);\n+bool IsStandardTx(const CTransaction& tx, std::string& reason);\n     /**\n      * Check for standard transaction types\n      * @param[in] mapInputs    Map of previous transactions that have outputs we're spending"
      },
      {
        "sha": "60b48d38c31c2e1b0a14e54e2c3e37ffae1d1982",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6",
        "patch": "@@ -577,15 +577,9 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n     if (tx.IsCoinBase())\n         return state.DoS(100, false, REJECT_INVALID, \"coinbase\");\n \n-    // Reject transactions with witness before segregated witness activates (override with -prematurewitness)\n-    bool witnessEnabled = IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus());\n-    if (!gArgs.GetBoolArg(\"-prematurewitness\", false) && tx.HasWitness() && !witnessEnabled) {\n-        return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n-    }\n-\n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     std::string reason;\n-    if (fRequireStandard && !IsStandardTx(tx, reason, witnessEnabled))\n+    if (fRequireStandard && !IsStandardTx(tx, reason))\n         return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n \n     // Do not work on transactions that are too small."
      },
      {
        "sha": "f4bb5ce95d1e15775eabcad992badd273ab485ae",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6",
        "patch": "@@ -1457,13 +1457,6 @@ static UniValue addwitnessaddress(const JSONRPCRequest& request)\n             \"Projects should transition to using the address_type argument of getnewaddress, or option -addresstype=[bech32|p2sh-segwit] instead.\\n\");\n     }\n \n-    {\n-        LOCK(cs_main);\n-        if (!IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus()) && !gArgs.GetBoolArg(\"-walletprematurewitness\", false)) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"Segregated witness not enabled on network\");\n-        }\n-    }\n-\n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n     if (!IsValidDestination(dest)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");"
      },
      {
        "sha": "6577d83f5cfc7ef3d872e97e922a4d2492d47477",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6",
        "patch": "@@ -42,7 +42,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         # This script tests NULLDUMMY activation, which is part of the 'segwit' deployment, so we go through\n         # normal segwit activation here (and don't use the default always-on behaviour).\n-        self.extra_args = [['-whitelist=127.0.0.1', '-walletprematurewitness', '-vbparams=segwit:0:999999999999', '-addresstype=legacy', \"-deprecatedrpc=addwitnessaddress\"]]\n+        self.extra_args = [['-whitelist=127.0.0.1', '-vbparams=segwit:0:999999999999', '-addresstype=legacy', \"-deprecatedrpc=addwitnessaddress\"]]\n \n     def run_test(self):\n         self.address = self.nodes[0].getnewaddress()"
      },
      {
        "sha": "b10306b283fb1e2726adf442fdf3f22fd9908b75",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 13,
        "deletions": 18,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6",
        "patch": "@@ -42,9 +42,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n-        self.extra_args = [[\"-walletprematurewitness\", \"-rpcserialversion=0\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-rpcserialversion=1\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n+        self.extra_args = [[\"-rpcserialversion=0\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n+                           [\"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-rpcserialversion=1\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n+                           [\"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n \n     def setup_network(self):\n         super().setup_network()\n@@ -129,21 +129,6 @@ def run_test(self):\n         self.nodes[0].generate(260) #block 423\n         sync_blocks(self.nodes)\n \n-        self.log.info(\"Verify default node can't accept any witness format txs before fork\")\n-        # unsigned, no scriptsig\n-        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", wit_ids[NODE_0][WIT_V0][0], False)\n-        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", wit_ids[NODE_0][WIT_V1][0], False)\n-        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V0][0], False)\n-        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V1][0], False)\n-        # unsigned with redeem script\n-        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V0][0], False, witness_script(False, self.pubkey[0]))\n-        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V1][0], False, witness_script(True, self.pubkey[0]))\n-        # signed\n-        self.fail_accept(self.nodes[0], \"no-witness-yet\", wit_ids[NODE_0][WIT_V0][0], True)\n-        self.fail_accept(self.nodes[0], \"no-witness-yet\", wit_ids[NODE_0][WIT_V1][0], True)\n-        self.fail_accept(self.nodes[0], \"no-witness-yet\", p2sh_ids[NODE_0][WIT_V0][0], True)\n-        self.fail_accept(self.nodes[0], \"no-witness-yet\", p2sh_ids[NODE_0][WIT_V1][0], True)\n-\n         self.log.info(\"Verify witness txs are skipped for mining before the fork\")\n         self.skip_mine(self.nodes[2], wit_ids[NODE_2][WIT_V0][0], True) #block 424\n         self.skip_mine(self.nodes[2], wit_ids[NODE_2][WIT_V1][0], True) #block 425\n@@ -164,6 +149,16 @@ def run_test(self):\n         segwit_tx_list = self.nodes[2].getblock(block[0])[\"tx\"]\n         assert_equal(len(segwit_tx_list), 5)\n \n+        self.log.info(\"Verify default node can't accept txs with missing witness\")\n+        # unsigned, no scriptsig\n+        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", wit_ids[NODE_0][WIT_V0][0], False)\n+        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", wit_ids[NODE_0][WIT_V1][0], False)\n+        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V0][0], False)\n+        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V1][0], False)\n+        # unsigned with redeem script\n+        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V0][0], False, witness_script(False, self.pubkey[0]))\n+        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V1][0], False, witness_script(True, self.pubkey[0]))\n+\n         self.log.info(\"Verify block and transaction serialization rpcs return differing serializations depending on rpc serialization flag\")\n         assert(self.nodes[2].getblock(block[0], False) !=  self.nodes[0].getblock(block[0], False))\n         assert(self.nodes[1].getblock(block[0], False) ==  self.nodes[2].getblock(block[0], False))"
      },
      {
        "sha": "940d085e8948b37664b61212383ed64a3270b5d1",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 85,
        "deletions": 75,
        "changes": 160,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6",
        "patch": "@@ -230,55 +230,9 @@ def test_unnecessary_witness_before_segwit_activation(self):\n \n         sync_blocks(self.nodes)\n \n-        # Create a p2sh output -- this is so we can pass the standardness\n-        # rules (an anyone-can-spend OP_TRUE would be rejected, if not wrapped\n-        # in P2SH).\n-        p2sh_program = CScript([OP_TRUE])\n-        p2sh_pubkey = hash160(p2sh_program)\n-        scriptPubKey = CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])\n-\n-        # Now check that unnecessary witnesses can't be used to blind a node\n-        # to a transaction, eg by violating standardness checks.\n-        tx2 = CTransaction()\n-        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n-        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, scriptPubKey))\n-        tx2.rehash()\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, False, True)\n-        self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n-\n-        # We'll add an unnecessary witness to this transaction that would cause\n-        # it to be non-standard, to test that violating policy with a witness before\n-        # segwit activation doesn't blind a node to a transaction.  Transactions\n-        # rejected for having a witness before segwit activation shouldn't be added\n-        # to the rejection cache.\n-        tx3 = CTransaction()\n-        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), CScript([p2sh_program])))\n-        tx3.vout.append(CTxOut(tx2.vout[0].nValue-1000, scriptPubKey))\n-        tx3.wit.vtxinwit.append(CTxInWitness())\n-        tx3.wit.vtxinwit[0].scriptWitness.stack = [b'a'*400000]\n-        tx3.rehash()\n-        # Note that this should be rejected for the premature witness reason,\n-        # rather than a policy check, since segwit hasn't activated yet.\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, True, False, b'no-witness-yet')\n-\n-        # If we send without witness, it should be accepted.\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, False, True)\n-\n-        # Now create a new anyone-can-spend utxo for the next test.\n-        tx4 = CTransaction()\n-        tx4.vin.append(CTxIn(COutPoint(tx3.sha256, 0), CScript([p2sh_program])))\n-        tx4.vout.append(CTxOut(tx3.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))\n-        tx4.rehash()\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, False, True)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx4, False, True)\n-\n-        self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n-\n         # Update our utxo list; we spent the first entry.\n         self.utxo.pop(0)\n-        self.utxo.append(UTXO(tx4.sha256, 0, tx4.vout[0].nValue))\n+        self.utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n \n     # ~6 months after segwit activation, the SCRIPT_VERIFY_WITNESS flag was\n     # backdated so that it applies to all blocks, going back to the genesis\n@@ -1119,7 +1073,7 @@ def test_block_relay(self, segwit_activated):\n             self.old_node.announce_tx_and_wait_for_getdata(block4.vtx[0])\n             assert(block4.sha256 not in self.old_node.getdataset)\n \n-    # V0 segwit outputs should be standard after activation, but not before.\n+    # V0 segwit outputs and inputs are always standard. V0 segwit inputs may only be mined after activation, but not before.\n     def test_standardness_v0(self, segwit_activated):\n         self.log.info(\"Testing standardness of v0 outputs (%s activation)\" % (\"after\" if segwit_activated else \"before\"))\n         assert(len(self.utxo))\n@@ -1148,45 +1102,46 @@ def test_standardness_v0(self, segwit_activated):\n         tx.vin = [CTxIn(COutPoint(p2sh_tx.sha256, 0), CScript([witness_program]))]\n         tx.vout = [CTxOut(p2sh_tx.vout[0].nValue-10000, scriptPubKey)]\n         tx.vout.append(CTxOut(8000, scriptPubKey)) # Might burn this later\n+        tx.vin[0].nSequence = BIP125_SEQUENCE_NUMBER  # Just to have the option to bump this tx from the mempool\n         tx.rehash()\n \n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx, with_witness=True, accepted=segwit_activated)\n+        # This is always accepted, since the mempool policy is to consider segwit as always active\n+        # and thus allow segwit outputs\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx, with_witness=True, accepted=True)\n \n         # Now create something that looks like a P2PKH output. This won't be spendable.\n         scriptPubKey = CScript([OP_0, hash160(witness_hash)])\n         tx2 = CTransaction()\n-        if segwit_activated:\n-            # if tx was accepted, then we spend the second output.\n-            tx2.vin = [CTxIn(COutPoint(tx.sha256, 1), b\"\")]\n-            tx2.vout = [CTxOut(7000, scriptPubKey)]\n-            tx2.wit.vtxinwit.append(CTxInWitness())\n-            tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n-        else:\n-            # if tx wasn't accepted, we just re-spend the p2sh output we started with.\n-            tx2.vin = [CTxIn(COutPoint(p2sh_tx.sha256, 0), CScript([witness_program]))]\n-            tx2.vout = [CTxOut(p2sh_tx.vout[0].nValue-1000, scriptPubKey)]\n+        # tx was accepted, so we spend the second output.\n+        tx2.vin = [CTxIn(COutPoint(tx.sha256, 1), b\"\")]\n+        tx2.vout = [CTxOut(7000, scriptPubKey)]\n+        tx2.wit.vtxinwit.append(CTxInWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n         tx2.rehash()\n \n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, with_witness=True, accepted=segwit_activated)\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, with_witness=True, accepted=True)\n \n         # Now update self.utxo for later tests.\n         tx3 = CTransaction()\n-        if segwit_activated:\n-            # tx and tx2 were both accepted.  Don't bother trying to reclaim the\n-            # P2PKH output; just send tx's first output back to an anyone-can-spend.\n-            sync_mempools([self.nodes[0], self.nodes[1]])\n-            tx3.vin = [CTxIn(COutPoint(tx.sha256, 0), b\"\")]\n-            tx3.vout = [CTxOut(tx.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE]))]\n-            tx3.wit.vtxinwit.append(CTxInWitness())\n-            tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n-            tx3.rehash()\n-            test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n-        else:\n-            # tx and tx2 didn't go anywhere; just clean up the p2sh_tx output.\n-            tx3.vin = [CTxIn(COutPoint(p2sh_tx.sha256, 0), CScript([witness_program]))]\n-            tx3.vout = [CTxOut(p2sh_tx.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE]))]\n+        # tx and tx2 were both accepted.  Don't bother trying to reclaim the\n+        # P2PKH output; just send tx's first output back to an anyone-can-spend.\n+        sync_mempools([self.nodes[0], self.nodes[1]])\n+        tx3.vin = [CTxIn(COutPoint(tx.sha256, 0), b\"\")]\n+        tx3.vout = [CTxOut(tx.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE]))]\n+        tx3.wit.vtxinwit.append(CTxInWitness())\n+        tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n+        tx3.rehash()\n+        if not segwit_activated:\n+            # Just check mempool acceptance, but don't add the transaction to the mempool, since witness is disallowed\n+            # in blocks and the tx is impossible to mine right now.\n+            assert_equal(self.nodes[0].testmempoolaccept([bytes_to_hex_str(tx3.serialize_with_witness())]), [{'txid': tx3.hash, 'allowed': True}])\n+            # Create the same output as tx3, but by replacing tx\n+            tx3_out = tx3.vout[0]\n+            tx3 = tx\n+            tx3.vout = [tx3_out]\n             tx3.rehash()\n-            test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n+            assert_equal(self.nodes[0].testmempoolaccept([bytes_to_hex_str(tx3.serialize_with_witness())]), [{'txid': tx3.hash, 'allowed': True}])\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -1855,6 +1810,60 @@ def test_uncompressed_pubkey(self):\n         test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n         self.utxo.append(UTXO(tx5.sha256, 0, tx5.vout[0].nValue))\n \n+    def test_non_standard_witness_blinding(self):\n+        self.log.info(\"Testing behavior of unnecessary witnesses in transactions does not blind the node for the transaction\")\n+        assert (len(self.utxo) > 0)\n+\n+        # Create a p2sh output -- this is so we can pass the standardness\n+        # rules (an anyone-can-spend OP_TRUE would be rejected, if not wrapped\n+        # in P2SH).\n+        p2sh_program = CScript([OP_TRUE])\n+        p2sh_pubkey = hash160(p2sh_program)\n+        scriptPubKey = CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])\n+\n+        # Now check that unnecessary witnesses can't be used to blind a node\n+        # to a transaction, eg by violating standardness checks.\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, scriptPubKey))\n+        tx.rehash()\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, False, True)\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # We'll add an unnecessary witness to this transaction that would cause\n+        # it to be non-standard, to test that violating policy with a witness\n+        # doesn't blind a node to a transaction.  Transactions\n+        # rejected for having a witness shouldn't be added\n+        # to the rejection cache.\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), CScript([p2sh_program])))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue - 1000, scriptPubKey))\n+        tx2.wit.vtxinwit.append(CTxInWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [b'a' * 400]\n+        tx2.rehash()\n+        # This will be rejected due to a policy check:\n+        # No witness is allowed, since it is not a witness program but a p2sh program\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, True, False, b'bad-witness-nonstandard')\n+\n+        # If we send without witness, it should be accepted.\n+        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, False, True)\n+\n+        # Now create a new anyone-can-spend utxo for the next test.\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), CScript([p2sh_program])))\n+        tx3.vout.append(CTxOut(tx2.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))\n+        tx3.rehash()\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, False, True)\n+        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, False, True)\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # Update our utxo list; we spent the first entry.\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+\n     def test_non_standard_witness(self):\n         self.log.info(\"Testing detection of non-standard P2WSH witness\")\n         pad = chr(1).encode('latin-1')\n@@ -2023,6 +2032,7 @@ def run_test(self):\n         self.test_premature_coinbase_witness_spend()\n         self.test_uncompressed_pubkey()\n         self.test_signature_version_1()\n+        self.test_non_standard_witness_blinding()\n         self.test_non_standard_witness()\n         sync_blocks(self.nodes)\n         self.test_upgrade_after_activation(node_id=2)"
      },
      {
        "sha": "f07041706a475a69ccc91cd9114633fb844e8a8d",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6",
        "patch": "@@ -31,7 +31,7 @@ class BumpFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[\"-prematurewitness\", \"-walletprematurewitness\", \"-deprecatedrpc=addwitnessaddress\", \"-walletrbf={}\".format(i)]\n+        self.extra_args = [[\"-deprecatedrpc=addwitnessaddress\", \"-walletrbf={}\".format(i)]\n                            for i in range(self.num_nodes)]\n \n     def run_test(self):"
      },
      {
        "sha": "89776b2a6b93b9ff495475bd55ff5ff5fbf399a7",
        "filename": "test/lint/check-doc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/test/lint/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6/test/lint/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/check-doc.py?ref=fa7a6cf1b36284db70e941bd2915fd6edbb0f9d6",
        "patch": "@@ -22,7 +22,7 @@\n CMD_GREP_ARGS = r\"git grep --perl-regexp '{}' -- {} ':(exclude){}'\".format(REGEX_ARG, CMD_ROOT_DIR, FOLDER_TEST)\n CMD_GREP_DOCS = r\"git grep --perl-regexp '{}' {}\".format(REGEX_DOC, CMD_ROOT_DIR)\n # list unsupported, deprecated and duplicate args as they need no documentation\n-SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-walletprematurewitness', '-promiscuousmempoolflags', '-blockminsize', '-dbcrashratio', '-forcecompactdb', '-usehd'])\n+SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-promiscuousmempoolflags', '-blockminsize', '-dbcrashratio', '-forcecompactdb', '-usehd'])\n \n \n def main():"
      }
    ]
  }
]