sipa,2021-06-18 20:39:15,"Interesting, I wouldn't have considered using `lifetimebound` for those, but it makes sense.\n\nutACK fabcaf39cd1516923c818b382ee3478b340f3db7.\n\nMy understanding is that this cannot introduce bugs if it compiles with issues, as the attribute only adds warning/errors.\n\n",https://github.com/bitcoin/bitcoin/pull/22278#issuecomment-864262868,864262868,
DrahtBot,2021-06-18 23:36:29,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/22278#issuecomment-864319695,864319695,
fanquake,2021-09-02 03:34:57,@theuni want to take a look here?,https://github.com/bitcoin/bitcoin/pull/22278#issuecomment-911112147,911112147,
sipa,2021-09-02 03:43:53,utACK,https://github.com/bitcoin/bitcoin/pull/22278#issuecomment-911119317,911119317,
theuni,2021-09-02 18:24:02,"Concept ACK/utACK. I guess ideally we'd annotate anywhere we return references to `*this` or `*this.foo`?\n\nI tried switching the return type from `decltype(auto)` to `auto`, which works around this problem by allowing copies to be made as a typical `return` would, but that disables the ability to bind to a legit returned reference. However, it does have the nice side-effect of showing where th",https://github.com/bitcoin/bitcoin/pull/22278#issuecomment-911945361,911945361,
MarcoFalke,2021-09-03 11:41:02,"> Concept ACK/utACK. I guess ideally we'd annotate anywhere we return references to *this or *this.foo?\n\nCorrect. I think where `foo` is a (trivial?) built-in type, the annotation isn't needed because at least clang will figure it out by itself. Though, it shouldn't hurt, so maybe someone writes a clang-tidy script to do the refactor in a follow-up?\n\n> The one it turned up is ChainstateMan",https://github.com/bitcoin/bitcoin/pull/22278#issuecomment-912473858,912473858,
theuni,2021-09-03 16:35:08,utACK fa7e6c56f58678b310898a158053ee9ff8b27fe7.,https://github.com/bitcoin/bitcoin/pull/22278#issuecomment-912667041,912667041,
