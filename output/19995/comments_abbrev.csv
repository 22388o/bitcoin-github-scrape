DrahtBot,2020-09-22 18:55:49,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19809 (log: Prefix log messages with function name if -logfunctionnames is set by practicalswift)\n* #16673 (Relog config",https://github.com/bitcoin/bitcoin/pull/19995#issuecomment-696915422,696915422,
naumenkogs,2020-09-23 07:25:55,"Concept ACK. I was wondering about this threat several times over last year, but never managed to look into it for real.",https://github.com/bitcoin/bitcoin/pull/19995#issuecomment-697185481,697185481,
laanwj,2020-09-23 12:04:34,"~~I'm not sure about this. This kind of ""drop everything"" rate limiting can be used for a different kind of DoS that might be even more serious than just shutting down: prevent important things from being logged.~~\nEdit: I misunderstood the code here, it tracks per source location. Concept ACK.",https://github.com/bitcoin/bitcoin/pull/19995#issuecomment-697319173,697319173,
practicalswift,2020-09-23 13:14:25,"@laanwj \n\nHave you looked at the implementation? It certainly doesn't drop everything :)\n\nThe implementation was carefully written to minimise the risk of suppressing something important from being logged while at the same time killing the disk-fill-via-peer-triggered-logging bug class for good.\n\nDo you have any ideas on how to improve the implementation in a way to reduce the ""prevent",https://github.com/bitcoin/bitcoin/pull/19995#issuecomment-697356204,697356204,
naumenkogs,2020-09-23 13:56:04,"I don't know how hard of a task that would be, but it would be great to see how easy it is to fill disk space depending on the protocol piece (message but also context).\nFor example,\ntx INV: X bytes per second\nADDR: Y bytes per second\nGETADDR: Z bytes per second\n\nFrom there we could make sure our rate-limiting is effective?",https://github.com/bitcoin/bitcoin/pull/19995#issuecomment-697394173,697394173,
practicalswift,2020-09-23 14:21:47,"@naumenkogs \n\nWhen testing this patch I reverted the fix for an historic disk fill bug to see if this mitigation would have been successful.\n\nIn that case an untrusted peer could achieve a disk fill rate of 15 GB/hour without this mitigation, and the expected 1 MB/hour with this mitigation. (The 15 GB/hour was achieved on a really old machine with mechanical disks so YMMV.)\n\nIn other w",https://github.com/bitcoin/bitcoin/pull/19995#issuecomment-697434667,697434667,
practicalswift,2020-09-24 20:44:54,"@laanwj Thanks for the Concept ACK! :)\n\nFeedback addressed.",https://github.com/bitcoin/bitcoin/pull/19995#issuecomment-698579113,698579113,
laanwj,2020-09-30 13:30:13,"```\n$ size -G src/bitcoind*\n      text       data        bss      total filename\n   6454125    1929533      38929    8422587 src/bitcoind\n   6564925    1942029      38929    8545883 src/bitcoind.19995\n```\nFWIW, this results in a 120 kB increase in stripped binary size for `bitcoind` on x86_64. In contrast to what I first thought, this is not because of the `__FILE__`. There's only 12 k",https://github.com/bitcoin/bitcoin/pull/19995#issuecomment-701391760,701391760,
MarcoFalke,2020-10-13 11:48:19,"Conceptually, I am not sure if it is good to fight the symptoms. I'd prefer if unconditional logs were only used for the init/shutdown sequence and local system errors, such as data corruption. Anything else the average user probably doesn't care about, and if they did, they could enable the corresponding debug category and provide enough disk space for the debug log file.",https://github.com/bitcoin/bitcoin/pull/19995#issuecomment-707685569,707685569,
practicalswift,2020-10-13 13:06:47,"@MarcoFalke \n\n> Conceptually, I am not sure if it is good to fight the symptoms.\n\nI fail to see how introducing a mitigation would be to ""fight the symptoms"".\n\nThe reason we use ASLR for example isn't that we've given up on the ambition to write non-vulnerable code :)\n\nThe reason we use mitigations is to make exploitation harder in case we fail to write non-vulnerable free code, an",https://github.com/bitcoin/bitcoin/pull/19995#issuecomment-707725169,707725169,
luke-jr,2020-10-24 17:23:01,Can we get a way to disable this via config file?,https://github.com/bitcoin/bitcoin/pull/19995#issuecomment-716020627,716020627,
practicalswift,2020-12-27 22:18:34,"Could a maintainer mark this PR as ""Up for grabs""? I'm afraid I won't have time to incorporate the suggested changes any time soon.\n\nFWIW I still think this mitigation is very much worth doing: the ""up for grabs"" state is purely due to lack of time on my part.  I'd be glad to review any work being done to reduce the risk of disk fill attacks.\n",https://github.com/bitcoin/bitcoin/pull/19995#issuecomment-751522514,751522514,
fanquake,2021-04-07 06:32:35,Picked up in #21603.,https://github.com/bitcoin/bitcoin/pull/19995#issuecomment-814642455,814642455,
laanwj,2020-09-24 13:47:05,"Oh, sorry, I thought this was a global flag. ",https://github.com/bitcoin/bitcoin/pull/19995#discussion_r494332295,494332295,src/logging.cpp
laanwj,2020-09-24 13:49:55,"We could save quite some memory and avoid having to build a `string` here by indexing with a `(const char*, int)` tuple. `__FUNC__` names end up in the `.text` segment after all so a pointer will do.",https://github.com/bitcoin/bitcoin/pull/19995#discussion_r494335323,494335323,src/logging.h
laanwj,2020-09-24 13:50:54,Maybe `unordered_map`? we have no ordering constraing here.,https://github.com/bitcoin/bitcoin/pull/19995#discussion_r494336067,494336067,src/logging.h
practicalswift,2020-09-24 20:43:30,Fixed!,https://github.com/bitcoin/bitcoin/pull/19995#discussion_r494599117,494599117,src/logging.h
practicalswift,2020-09-24 20:43:45,Fixed!,https://github.com/bitcoin/bitcoin/pull/19995#discussion_r494599233,494599233,src/logging.h
laanwj,2020-09-30 12:53:39,"This name is really awkward. I would prefer a more compact name, but don't really have any good suggestions.",https://github.com/bitcoin/bitcoin/pull/19995#discussion_r497485083,497485083,src/logging.h
practicalswift,2020-09-30 18:18:11,"Heh, I agree :)  Naming is hard! I'm happy to change the name of course.\n\nI expect `LogPrintfWithoutRateLimiting` to be used once: for `UpdateTip` which is the only non-category log message which we ever expect to legitimately log at a rate of >1 MB/hour (or whatever hourly source-location threshold we choose).\n\nOne alternative would be to call `LogPrintf_` directly from `UpdateTip` as it ",https://github.com/bitcoin/bitcoin/pull/19995#discussion_r497710432,497710432,src/logging.h
jnewbery,2020-10-09 10:11:48,"It'd be good to check here whether logging was suppressed for this log, and if so log that logging is restarting for this log (eg. ""Restarting logging from %s ..."")",https://github.com/bitcoin/bitcoin/pull/19995#discussion_r502327758,502327758,src/logging.cpp
jnewbery,2020-10-09 10:14:32,"Consider keeping a tally of how many log messages were dropped, and then logging that number when you restart logging (eg `""Restarting logging from <location>. <number> log messages dropped since <time>""`)",https://github.com/bitcoin/bitcoin/pull/19995#discussion_r502329018,502329018,src/logging.cpp
practicalswift,2020-10-13 13:09:28,That's a good idea. I'll implement!,https://github.com/bitcoin/bitcoin/pull/19995#discussion_r503936154,503936154,src/logging.cpp
practicalswift,2020-10-13 13:09:38,Makes sense. I'll implement.,https://github.com/bitcoin/bitcoin/pull/19995#discussion_r503936262,503936262,src/logging.cpp
