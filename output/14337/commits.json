[
  {
    "sha": "9c4d359f499eaec86f4eab31613990016c8d4b1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzRkMzU5ZjQ5OWVhZWM4NmY0ZWFiMzE2MTM5OTAwMTZjOGQ0YjFi",
    "commit": {
      "author": {
        "name": "lucash-dev",
        "email": "lucash.dev@gmail.com",
        "date": "2018-09-27T02:46:37Z"
      },
      "committer": {
        "name": "lucash-dev",
        "email": "lucash.dev@gmail.com",
        "date": "2018-09-27T04:19:47Z"
      },
      "message": "Created a base interface for both CTransaction and CMutableTransaction.\n\n    Created a base interface for both transaction types, using CRTP for static resolution.",
      "tree": {
        "sha": "4fe10984d3ed77a07314a337b5ea73fde7544645",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4fe10984d3ed77a07314a337b5ea73fde7544645"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c4d359f499eaec86f4eab31613990016c8d4b1b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4d359f499eaec86f4eab31613990016c8d4b1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c4d359f499eaec86f4eab31613990016c8d4b1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4d359f499eaec86f4eab31613990016c8d4b1b/comments",
    "author": {
      "login": "lucash-dev",
      "id": 31627588,
      "node_id": "MDQ6VXNlcjMxNjI3NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/31627588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucash-dev",
      "html_url": "https://github.com/lucash-dev",
      "followers_url": "https://api.github.com/users/lucash-dev/followers",
      "following_url": "https://api.github.com/users/lucash-dev/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucash-dev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucash-dev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucash-dev/subscriptions",
      "organizations_url": "https://api.github.com/users/lucash-dev/orgs",
      "repos_url": "https://api.github.com/users/lucash-dev/repos",
      "events_url": "https://api.github.com/users/lucash-dev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucash-dev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lucash-dev",
      "id": 31627588,
      "node_id": "MDQ6VXNlcjMxNjI3NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/31627588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucash-dev",
      "html_url": "https://github.com/lucash-dev",
      "followers_url": "https://api.github.com/users/lucash-dev/followers",
      "following_url": "https://api.github.com/users/lucash-dev/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucash-dev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucash-dev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucash-dev/subscriptions",
      "organizations_url": "https://api.github.com/users/lucash-dev/orgs",
      "repos_url": "https://api.github.com/users/lucash-dev/repos",
      "events_url": "https://api.github.com/users/lucash-dev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucash-dev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c53e083a49291b611d278a8db24ff235c1202e43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c53e083a49291b611d278a8db24ff235c1202e43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c53e083a49291b611d278a8db24ff235c1202e43"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 75,
      "deletions": 28
    },
    "files": [
      {
        "sha": "1e01e674e836e1c7ba3d5e2eacddd94ff6d3c200",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 75,
        "deletions": 28,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4d359f499eaec86f4eab31613990016c8d4b1b/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4d359f499eaec86f4eab31613990016c8d4b1b/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=9c4d359f499eaec86f4eab31613990016c8d4b1b",
        "patch": "@@ -174,6 +174,72 @@ class CTxOut\n     std::string ToString() const;\n };\n \n+/**\n+ * Base Interface for transaction types both mutable and immutable.\n+ * We use CRTP for static resolution -- no virtual methods.\n+ */\n+template <typename T>\n+class CBaseTransaction\n+{\n+public:\n+\n+    // Accessors for fields.\n+    inline std::vector<CTxIn> GetVin() const\n+    {\n+        return static_cast<const T*>(this)->vin;\n+    }\n+\n+    inline std::vector<CTxOut> GetVout() const\n+    {\n+        return static_cast<const T*>(this)->vout;\n+    }\n+\n+    inline int32_t GetNVersion() const\n+    {\n+        return static_cast<const T*>(this)->nVersion;\n+    }\n+\n+    inline uint32_t GetNLockTime() const\n+    {\n+        return static_cast<const T*>(this)->nLockTime;\n+    }\n+\n+    // Overridable methods.\n+    inline uint256 GetHash() const\n+    {\n+        return static_cast<T*>(this)->GetHash();\n+    }\n+\n+    inline uint256 GetWitnessHash() const\n+    {\n+        return static_cast<T*>(this)->GetWitnessHash();\n+    }\n+\n+    // Delegates to external function template.\n+    template <typename Stream>\n+    inline void Serialize(Stream& s) const\n+    {\n+        SerializeTransaction(*this, s);\n+    }\n+\n+    // Common logic.\n+    bool HasWitness() const\n+    {\n+        for (size_t i = 0; i < GetVin().size(); i++) {\n+            if (!GetVin()[i].scriptWitness.IsNull()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    // Casts down to concrete type for compatibility with code that doesn't use the base class.\n+    inline operator const T&() const\n+    {\n+        return *static_cast<const T*>(this);\n+    }\n+};\n+\n struct CMutableTransaction;\n \n /**\n@@ -229,10 +295,10 @@ inline void UnserializeTransaction(TxType& tx, Stream& s) {\n }\n \n template<typename Stream, typename TxType>\n-inline void SerializeTransaction(const TxType& tx, Stream& s) {\n+inline void SerializeTransaction(const CBaseTransaction<TxType>& tx, Stream& s) {\n     const bool fAllowWitness = !(s.GetVersion() & SERIALIZE_TRANSACTION_NO_WITNESS);\n \n-    s << tx.nVersion;\n+    s << tx.GetNVersion();\n     unsigned char flags = 0;\n     // Consistency check\n     if (fAllowWitness) {\n@@ -247,21 +313,21 @@ inline void SerializeTransaction(const TxType& tx, Stream& s) {\n         s << vinDummy;\n         s << flags;\n     }\n-    s << tx.vin;\n-    s << tx.vout;\n+    s << tx.GetVin();\n+    s << tx.GetVout();\n     if (flags & 1) {\n-        for (size_t i = 0; i < tx.vin.size(); i++) {\n-            s << tx.vin[i].scriptWitness.stack;\n+        for (size_t i = 0; i < tx.GetVin().size(); i++) {\n+            s << tx.GetVin()[i].scriptWitness.stack;\n         }\n     }\n-    s << tx.nLockTime;\n+    s << tx.GetNLockTime();\n }\n \n \n /** The basic transaction that is broadcasted on the network and contained in\n  * blocks.  A transaction can contain multiple inputs and outputs.\n  */\n-class CTransaction\n+class CTransaction : public CBaseTransaction<CTransaction>\n {\n public:\n     // Default transaction version.\n@@ -344,20 +410,10 @@ class CTransaction\n     }\n \n     std::string ToString() const;\n-\n-    bool HasWitness() const\n-    {\n-        for (size_t i = 0; i < vin.size(); i++) {\n-            if (!vin[i].scriptWitness.IsNull()) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n };\n \n /** A mutable version of CTransaction. */\n-struct CMutableTransaction\n+struct CMutableTransaction  : public CBaseTransaction<CMutableTransaction>\n {\n     std::vector<CTxIn> vin;\n     std::vector<CTxOut> vout;\n@@ -388,15 +444,6 @@ struct CMutableTransaction\n      */\n     uint256 GetHash() const;\n \n-    bool HasWitness() const\n-    {\n-        for (size_t i = 0; i < vin.size(); i++) {\n-            if (!vin[i].scriptWitness.IsNull()) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n };\n \n typedef std::shared_ptr<const CTransaction> CTransactionRef;"
      }
    ]
  },
  {
    "sha": "2e1c315acde3ee591139ee1121a3b8c995125259",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTFjMzE1YWNkZTNlZTU5MTEzOWVlMTEyMWEzYjhjOTk1MTI1MjU5",
    "commit": {
      "author": {
        "name": "lucash-dev",
        "email": "lucash.dev@gmail.com",
        "date": "2018-09-27T02:48:03Z"
      },
      "committer": {
        "name": "lucash-dev",
        "email": "lucash.dev@gmail.com",
        "date": "2018-09-27T04:19:47Z"
      },
      "message": "Refactored interpreter.h functions/classes to accept CBaseTransaction.\n\n    A previous refactor allowed functions and classes in this unit to accept both CMutableTransaction and CTransaction, but left the template argument unrestricted.\n    This change makes use of the new CBaseTransaction<T> template class to restrict the use to the classes defined in transaction.h.",
      "tree": {
        "sha": "b304f787c783ddd683fb976de4ad5d3c334e1f1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b304f787c783ddd683fb976de4ad5d3c334e1f1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e1c315acde3ee591139ee1121a3b8c995125259",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e1c315acde3ee591139ee1121a3b8c995125259",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e1c315acde3ee591139ee1121a3b8c995125259",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e1c315acde3ee591139ee1121a3b8c995125259/comments",
    "author": {
      "login": "lucash-dev",
      "id": 31627588,
      "node_id": "MDQ6VXNlcjMxNjI3NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/31627588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucash-dev",
      "html_url": "https://github.com/lucash-dev",
      "followers_url": "https://api.github.com/users/lucash-dev/followers",
      "following_url": "https://api.github.com/users/lucash-dev/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucash-dev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucash-dev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucash-dev/subscriptions",
      "organizations_url": "https://api.github.com/users/lucash-dev/orgs",
      "repos_url": "https://api.github.com/users/lucash-dev/repos",
      "events_url": "https://api.github.com/users/lucash-dev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucash-dev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lucash-dev",
      "id": 31627588,
      "node_id": "MDQ6VXNlcjMxNjI3NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/31627588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucash-dev",
      "html_url": "https://github.com/lucash-dev",
      "followers_url": "https://api.github.com/users/lucash-dev/followers",
      "following_url": "https://api.github.com/users/lucash-dev/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucash-dev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucash-dev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucash-dev/subscriptions",
      "organizations_url": "https://api.github.com/users/lucash-dev/orgs",
      "repos_url": "https://api.github.com/users/lucash-dev/repos",
      "events_url": "https://api.github.com/users/lucash-dev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucash-dev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c4d359f499eaec86f4eab31613990016c8d4b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4d359f499eaec86f4eab31613990016c8d4b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c4d359f499eaec86f4eab31613990016c8d4b1b"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 37,
      "deletions": 37
    },
    "files": [
      {
        "sha": "86c901910290a13f6806768add22f854a630df44",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e1c315acde3ee591139ee1121a3b8c995125259/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e1c315acde3ee591139ee1121a3b8c995125259/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=2e1c315acde3ee591139ee1121a3b8c995125259",
        "patch": "@@ -1093,7 +1093,7 @@ template <class T>\n class CTransactionSignatureSerializer\n {\n private:\n-    const T& txTo;             //!< reference to the spending transaction (the one being serialized)\n+    const CBaseTransaction<T>& txTo;             //!< reference to the spending transaction (the one being serialized)\n     const CScript& scriptCode; //!< output script being consumed\n     const unsigned int nIn;    //!< input index of txTo being signed\n     const bool fAnyoneCanPay;  //!< whether the hashtype has the SIGHASH_ANYONECANPAY flag set\n@@ -1137,7 +1137,7 @@ class CTransactionSignatureSerializer\n         if (fAnyoneCanPay)\n             nInput = nIn;\n         // Serialize the prevout\n-        ::Serialize(s, txTo.vin[nInput].prevout);\n+        ::Serialize(s, txTo.GetVin()[nInput].prevout);\n         // Serialize the script\n         if (nInput != nIn)\n             // Blank out other inputs' signatures\n@@ -1149,7 +1149,7 @@ class CTransactionSignatureSerializer\n             // let the others update at will\n             ::Serialize(s, (int)0);\n         else\n-            ::Serialize(s, txTo.vin[nInput].nSequence);\n+            ::Serialize(s, txTo.GetVin()[nInput].nSequence);\n     }\n \n     /** Serialize an output of txTo */\n@@ -1159,54 +1159,54 @@ class CTransactionSignatureSerializer\n             // Do not lock-in the txout payee at other indices as txin\n             ::Serialize(s, CTxOut());\n         else\n-            ::Serialize(s, txTo.vout[nOutput]);\n+            ::Serialize(s, txTo.GetVout()[nOutput]);\n     }\n \n     /** Serialize txTo */\n     template<typename S>\n     void Serialize(S &s) const {\n         // Serialize nVersion\n-        ::Serialize(s, txTo.nVersion);\n+        ::Serialize(s, txTo.GetNVersion());\n         // Serialize vin\n-        unsigned int nInputs = fAnyoneCanPay ? 1 : txTo.vin.size();\n+        unsigned int nInputs = fAnyoneCanPay ? 1 : txTo.GetVin().size();\n         ::WriteCompactSize(s, nInputs);\n         for (unsigned int nInput = 0; nInput < nInputs; nInput++)\n              SerializeInput(s, nInput);\n         // Serialize vout\n-        unsigned int nOutputs = fHashNone ? 0 : (fHashSingle ? nIn+1 : txTo.vout.size());\n+        unsigned int nOutputs = fHashNone ? 0 : (fHashSingle ? nIn+1 : txTo.GetVout().size());\n         ::WriteCompactSize(s, nOutputs);\n         for (unsigned int nOutput = 0; nOutput < nOutputs; nOutput++)\n              SerializeOutput(s, nOutput);\n         // Serialize nLockTime\n-        ::Serialize(s, txTo.nLockTime);\n+        ::Serialize(s, txTo.GetNLockTime());\n     }\n };\n \n template <class T>\n-uint256 GetPrevoutHash(const T& txTo)\n+uint256 GetPrevoutHash(const CBaseTransaction<T>& txTo)\n {\n     CHashWriter ss(SER_GETHASH, 0);\n-    for (const auto& txin : txTo.vin) {\n+    for (const auto& txin : txTo.GetVin()) {\n         ss << txin.prevout;\n     }\n     return ss.GetHash();\n }\n \n template <class T>\n-uint256 GetSequenceHash(const T& txTo)\n+uint256 GetSequenceHash(const CBaseTransaction<T>& txTo)\n {\n     CHashWriter ss(SER_GETHASH, 0);\n-    for (const auto& txin : txTo.vin) {\n+    for (const auto& txin : txTo.GetVin()) {\n         ss << txin.nSequence;\n     }\n     return ss.GetHash();\n }\n \n template <class T>\n-uint256 GetOutputsHash(const T& txTo)\n+uint256 GetOutputsHash(const CBaseTransaction<T>& txTo)\n {\n     CHashWriter ss(SER_GETHASH, 0);\n-    for (const auto& txout : txTo.vout) {\n+    for (const auto& txout : txTo.GetVout()) {\n         ss << txout;\n     }\n     return ss.GetHash();\n@@ -1215,7 +1215,7 @@ uint256 GetOutputsHash(const T& txTo)\n } // namespace\n \n template <class T>\n-PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n+PrecomputedTransactionData::PrecomputedTransactionData(const CBaseTransaction<T>& txTo)\n {\n     // Cache is calculated only for transactions with witness\n     if (txTo.HasWitness()) {\n@@ -1227,13 +1227,13 @@ PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n }\n \n // explicit instantiation\n-template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n-template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n+template PrecomputedTransactionData::PrecomputedTransactionData(const CBaseTransaction<CTransaction>& txTo);\n+template PrecomputedTransactionData::PrecomputedTransactionData(const CBaseTransaction<CMutableTransaction>& txTo);\n \n template <class T>\n-uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache)\n+uint256 SignatureHash(const CScript& scriptCode, const CBaseTransaction<T>& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache)\n {\n-    assert(nIn < txTo.vin.size());\n+    assert(nIn < txTo.GetVin().size());\n \n     if (sigversion == SigVersion::WITNESS_V0) {\n         uint256 hashPrevouts;\n@@ -1252,29 +1252,29 @@ uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn\n \n         if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {\n             hashOutputs = cacheready ? cache->hashOutputs : GetOutputsHash(txTo);\n-        } else if ((nHashType & 0x1f) == SIGHASH_SINGLE && nIn < txTo.vout.size()) {\n+        } else if ((nHashType & 0x1f) == SIGHASH_SINGLE && nIn < txTo.GetVout().size()) {\n             CHashWriter ss(SER_GETHASH, 0);\n-            ss << txTo.vout[nIn];\n+            ss << txTo.GetVout()[nIn];\n             hashOutputs = ss.GetHash();\n         }\n \n         CHashWriter ss(SER_GETHASH, 0);\n         // Version\n-        ss << txTo.nVersion;\n+        ss << txTo.GetNVersion();\n         // Input prevouts/nSequence (none/all, depending on flags)\n         ss << hashPrevouts;\n         ss << hashSequence;\n         // The input being signed (replacing the scriptSig with scriptCode + amount)\n         // The prevout may already be contained in hashPrevout, and the nSequence\n         // may already be contain in hashSequence.\n-        ss << txTo.vin[nIn].prevout;\n+        ss << txTo.GetVin()[nIn].prevout;\n         ss << scriptCode;\n         ss << amount;\n-        ss << txTo.vin[nIn].nSequence;\n+        ss << txTo.GetVin()[nIn].nSequence;\n         // Outputs (none/one/all, depending on flags)\n         ss << hashOutputs;\n         // Locktime\n-        ss << txTo.nLockTime;\n+        ss << txTo.GetNLockTime();\n         // Sighash type\n         ss << nHashType;\n \n@@ -1285,7 +1285,7 @@ uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn\n \n     // Check for invalid use of SIGHASH_SINGLE\n     if ((nHashType & 0x1f) == SIGHASH_SINGLE) {\n-        if (nIn >= txTo.vout.size()) {\n+        if (nIn >= txTo.GetVout().size()) {\n             //  nOut out of range\n             return one;\n         }\n@@ -1339,14 +1339,14 @@ bool GenericTransactionSignatureChecker<T>::CheckLockTime(const CScriptNum& nLoc\n     // unless the type of nLockTime being tested is the same as\n     // the nLockTime in the transaction.\n     if (!(\n-        (txTo->nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n-        (txTo->nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n+        (txTo->GetNLockTime() <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n+        (txTo->GetNLockTime() >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n     ))\n         return false;\n \n     // Now that we know we're comparing apples-to-apples, the\n     // comparison is a simple numeric one.\n-    if (nLockTime > (int64_t)txTo->nLockTime)\n+    if (nLockTime > (int64_t)txTo->GetNLockTime())\n         return false;\n \n     // Finally the nLockTime feature can be disabled and thus\n@@ -1359,7 +1359,7 @@ bool GenericTransactionSignatureChecker<T>::CheckLockTime(const CScriptNum& nLoc\n     // prevent this condition. Alternatively we could test all\n     // inputs, but testing just this input minimizes the data\n     // required to prove correct CHECKLOCKTIMEVERIFY execution.\n-    if (CTxIn::SEQUENCE_FINAL == txTo->vin[nIn].nSequence)\n+    if (CTxIn::SEQUENCE_FINAL == txTo->GetVin()[nIn].nSequence)\n         return false;\n \n     return true;\n@@ -1370,11 +1370,11 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n {\n     // Relative lock times are supported by comparing the passed\n     // in operand to the sequence number of the input.\n-    const int64_t txToSequence = (int64_t)txTo->vin[nIn].nSequence;\n+    const int64_t txToSequence = (int64_t)txTo->GetVin()[nIn].nSequence;\n \n     // Fail if the transaction's version number is not set high\n     // enough to trigger BIP 68 rules.\n-    if (static_cast<uint32_t>(txTo->nVersion) < 2)\n+    if (static_cast<uint32_t>(txTo->GetNVersion()) < 2)\n         return false;\n \n     // Sequence numbers with their most significant bit set are not"
      },
      {
        "sha": "81922febfad85f7b87b60eb74cd6d18a94179dd6",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e1c315acde3ee591139ee1121a3b8c995125259/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e1c315acde3ee591139ee1121a3b8c995125259/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=2e1c315acde3ee591139ee1121a3b8c995125259",
        "patch": "@@ -125,7 +125,7 @@ struct PrecomputedTransactionData\n     bool ready = false;\n \n     template <class T>\n-    explicit PrecomputedTransactionData(const T& tx);\n+    explicit PrecomputedTransactionData(const CBaseTransaction<T>& tx);\n };\n \n enum class SigVersion\n@@ -139,7 +139,7 @@ static constexpr size_t WITNESS_V0_SCRIPTHASH_SIZE = 32;\n static constexpr size_t WITNESS_V0_KEYHASH_SIZE = 20;\n \n template <class T>\n-uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache = nullptr);\n+uint256 SignatureHash(const CScript& scriptCode, const CBaseTransaction<T>& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache = nullptr);\n \n class BaseSignatureChecker\n {\n@@ -166,7 +166,7 @@ template <class T>\n class GenericTransactionSignatureChecker : public BaseSignatureChecker\n {\n private:\n-    const T* txTo;\n+    const CBaseTransaction<T>* txTo;\n     unsigned int nIn;\n     const CAmount amount;\n     const PrecomputedTransactionData* txdata;\n@@ -175,8 +175,8 @@ class GenericTransactionSignatureChecker : public BaseSignatureChecker\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    GenericTransactionSignatureChecker(const T* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(nullptr) {}\n-    GenericTransactionSignatureChecker(const T* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdataIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(&txdataIn) {}\n+    GenericTransactionSignatureChecker(const CBaseTransaction<T>* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(nullptr) {}\n+    GenericTransactionSignatureChecker(const CBaseTransaction<T>* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdataIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(&txdataIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override;\n     bool CheckLockTime(const CScriptNum& nLockTime) const override;\n     bool CheckSequence(const CScriptNum& nSequence) const override;"
      }
    ]
  }
]