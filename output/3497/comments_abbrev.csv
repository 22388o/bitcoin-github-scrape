laanwj,2014-01-09T08:49:29Z,"@theuni: @wtogami found out the reason why this issue appears now: with 0.8.x we didn't define `_FILE_OFFSET_BITS` on mingw (neither in bitcoin.pro or makefile.mingw)!\n\nThis was introduced with the autotools switch.\n\nSo that leaves another potential solution: skip `_FILE_OFFSET_BITS` for win32. No idea if this has any other consequences, but no one ever noticed the lack of it in 0.8.\n",https://github.com/bitcoin/bitcoin/pull/3497#issuecomment-31912383,31912383,
BitcoinPullTester,2014-01-09T08:49:59Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/5415b1a626f2d83d110aa79fa304b1b3b7e18713 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/3497#issuecomment-31912405,31912405,
theuni,2014-01-09T08:50:05Z,"Let's please slow down a bit..\n1. This doesn't fix the other linked libs. The bug report (from libreoffice, above) even references bdb specifically. This would also affect boost, qt, leveldb, etc.\n2. Ignoring 1., This is a sledgehammer fix for a single edge-case (already obsolete) toolchain.\n3. It's undocumented and non-portable.\n\nThe only reasonable way to address this problem (assuming it n",https://github.com/bitcoin/bitcoin/pull/3497#issuecomment-31912409,31912409,
laanwj,2014-01-09T08:51:00Z,@theuni we didn't define _FILE_OFFSET_BITS=64 with 0.8.x on win32. Maybe we should simply go back to that?\n,https://github.com/bitcoin/bitcoin/pull/3497#issuecomment-31912469,31912469,
theuni,2014-01-09T08:59:41Z,"We don't define it now either. Autoconf defines it as a result of the large-file test, where it determines what preproc defines are necessary. To explicitly turn it off, you can use `./configure --disable-largefile`.\n\nSeeing as tests deem this necessary, as does bdb and the other deps, doing that without examining the consequences would be unwise.\n",https://github.com/bitcoin/bitcoin/pull/3497#issuecomment-31912907,31912907,
laanwj,2014-01-09T09:07:13Z,"I too doubt that it's a real-world issue. As I mentioned in the other issue, with newer wine there are no problems, and @diapolo doesn't seem to suffer from it either (on real windows).\n\nThat's why I closed it in the first place.\n\nWhen we see actual windows users reporting the time problems, at least we know where to look...\n",https://github.com/bitcoin/bitcoin/pull/3497#issuecomment-31913357,31913357,
laanwj,2014-01-09T09:15:58Z,Closing for now.\n,https://github.com/bitcoin/bitcoin/pull/3497#issuecomment-31913918,31913918,
theuni,2014-01-09T09:18:30Z,"Yea, I was probably a bit hasty in calling for the reopen, sorry about that. I just wasn't comfortable leaving it resolved as a ""wine bug"" since the real culprit is our production toolchain.\n\nI'd be ok with closing it and keeping a watchful eye, but I'd rest easier if we added something like (in GetTime()):\n\n```\n#if _WIN32 && mingw_ver = foo\nint64_t bar = time(0)\nassert(bar constraint)\n#en",https://github.com/bitcoin/bitcoin/pull/3497#issuecomment-31914037,31914037,
Diapolo,2014-01-09T09:56:45Z,I also thought about adding some tests for such cases? Couldn't autotools check size of time_t and error out when it doesn't match or sth. like that.\n,https://github.com/bitcoin/bitcoin/pull/3497#issuecomment-31916461,31916461,
laanwj,2014-01-09T09:59:12Z,"@diapolo in principle a time_t of 8 bytes is perfectly okay, it means you don't suffer from the ""year 2038 issue"". It's only a problem if there is a conflict between the header and implementation.\nWe could add a test that checks if the upper four bytes are 0, of course.\nJust remember to remove it before the epoch :)\n",https://github.com/bitcoin/bitcoin/pull/3497#issuecomment-31916597,31916597,
laanwj,2014-01-09T10:38:06Z,See https://github.com/laanwj/bitcoin/commit/eaafa23cbd83b7bda4b28779138c62446bbdea2a\n,https://github.com/bitcoin/bitcoin/pull/3497#issuecomment-31919005,31919005,
laanwj,2014-01-09T16:38:41Z,"Looking at the disassembly of the binary generated by gitian,\n\n```\n0059aa2f <__Z7GetTimev>:\n  59aa2f:       55                      push   %ebp\n  59aa30:       89 e5                   mov    %esp,%ebp\n   ...\n  59aa5a:       e8 81 d3 35 00          call   8f7de0 <_time>\n  59aa5f:       c9                      leave  \n  59aa60:       c3                      ret   \n\n008f7de0 <_time>:\n   8",https://github.com/bitcoin/bitcoin/pull/3497#issuecomment-31950534,31950534,
laanwj,2014-01-09T17:07:07Z,"Wine source for msvcrt.time:\n\nhttps://github.com/mirrors/wine/blob/master/dlls/msvcrt/time.c#L865\n\nOn win32 it returns a 32-bit value, on win64 it returns a 64 bit value.\n\nTo explicitly get a 64 bit value it's possible to use __time64 -- however, this doesn't exist on older versions of msvcrt such as likely that on windows XP.\n",https://github.com/bitcoin/bitcoin/pull/3497#issuecomment-31953861,31953861,
sipa,2014-01-09T17:07:31Z,"How about in GetTime():\n\n```\n#ifdef WIN32\n// Workaround issue where time() sometimes returns only a 32-bit result, even if declared as 64-bit.\nreturn time(NULL) % 0xFFFFFFFF;\n#else\nreturn time(NULL);\n#endif\n```\n",https://github.com/bitcoin/bitcoin/pull/3497#issuecomment-31953902,31953902,
laanwj,2014-01-09T17:11:02Z,"@sipa That would work for this specific instance, but there's no telling if there are other 32/64 time_t conflicts as well. time_t's are part of some structures and passed as arguments. Remember that the original crash in #3494 is in some formatting function.\n\n... and that's even ignoring the other calls to time(), for example in dependency libraries, which may or may not have issues.\n",https://github.com/bitcoin/bitcoin/pull/3497#issuecomment-31954264,31954264,
laanwj,2014-01-09T21:58:10Z,"Ok, new hypothesis: notice how mingw time.h has a few inlined functions that depend on `_USE_32BIT_TIME_T`: https://gist.github.com/laanwj/8342674#file-time-h-L233\n\nWell, I found out that the current gitian win32 disables optimization (CXXFLAGS and LDFLAGS are overridden without specifying optimization flags!): This means that those functions do not get inlined.\n\nAs bitcoin is built statically",https://github.com/bitcoin/bitcoin/pull/3497#issuecomment-31981316,31981316,
laanwj,2014-01-10T07:29:24Z,"Verified: after adding -O2 it works perfectly, both the testcase and bitcoin-qt.exe itself:\n\n```\nRunning 109 test cases...\n\n*** No errors detected\n```\n\nAlso the program is a lot smoother and faster.\n",https://github.com/bitcoin/bitcoin/pull/3497#issuecomment-32008125,32008125,
