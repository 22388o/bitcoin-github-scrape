[
  {
    "sha": "5e0c22135600fe36811da3b78216efc61ba765fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTBjMjIxMzU2MDBmZTM2ODExZGEzYjc4MjE2ZWZjNjFiYTc2NWZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-24T15:29:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-28T13:06:20Z"
      },
      "message": "Make HTTP server shutdown more graceful\n\nShutting down the HTTP server currently breaks off all current requests.\nThis can create a race condition with RPC `stop` command, where the calling\nprocess never receives confirmation.\n\nThis change removes the listening sockets on shutdown so that no new\nrequests can come in, but no longer breaks off requests in progress.\n\nMeant to fix #6717.",
      "tree": {
        "sha": "0d43f766390191a3b3db1ed0bb1a3f85da618a4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d43f766390191a3b3db1ed0bb1a3f85da618a4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e0c22135600fe36811da3b78216efc61ba765fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e0c22135600fe36811da3b78216efc61ba765fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e0c22135600fe36811da3b78216efc61ba765fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e0c22135600fe36811da3b78216efc61ba765fb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad57b310bac44a7e470cf66276421f2bbc61b1f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad57b310bac44a7e470cf66276421f2bbc61b1f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad57b310bac44a7e470cf66276421f2bbc61b1f0"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 23,
      "deletions": 7
    },
    "files": [
      {
        "sha": "e967d3a4a8f50ae2e9fa435271db6bb39763a703",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 6,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e0c22135600fe36811da3b78216efc61ba765fb/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e0c22135600fe36811da3b78216efc61ba765fb/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=5e0c22135600fe36811da3b78216efc61ba765fb",
        "patch": "@@ -155,6 +155,8 @@ static std::vector<CSubNet> rpc_allow_subnets;\n static WorkQueue<HTTPClosure>* workQueue = 0;\n //! Handlers for (sub)paths\n std::vector<HTTPPathHandler> pathHandlers;\n+//! Bound listening sockets\n+std::vector<evhttp_bound_socket *> boundSockets;\n \n /** Check if a network address is allowed to access the HTTP server */\n static bool ClientAllowed(const CNetAddr& netaddr)\n@@ -264,6 +266,13 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n     }\n }\n \n+/** Callback to reject HTTP requests after shutdown. */\n+static void http_reject_request_cb(struct evhttp_request* req, void*)\n+{\n+    LogPrint(\"http\", \"Rejecting request while shutting down\\n\");\n+    evhttp_send_error(req, HTTP_SERVUNAVAIL, NULL);\n+}\n+\n /** Event dispatcher thread */\n static void ThreadHTTP(struct event_base* base, struct evhttp* http)\n {\n@@ -278,7 +287,6 @@ static void ThreadHTTP(struct event_base* base, struct evhttp* http)\n static bool HTTPBindAddresses(struct evhttp* http)\n {\n     int defaultPort = GetArg(\"-rpcport\", BaseParams().RPCPort());\n-    int nBound = 0;\n     std::vector<std::pair<std::string, uint16_t> > endpoints;\n \n     // Determine what addresses to bind to\n@@ -304,13 +312,14 @@ static bool HTTPBindAddresses(struct evhttp* http)\n     // Bind addresses\n     for (std::vector<std::pair<std::string, uint16_t> >::iterator i = endpoints.begin(); i != endpoints.end(); ++i) {\n         LogPrint(\"http\", \"Binding RPC on address %s port %i\\n\", i->first, i->second);\n-        if (evhttp_bind_socket(http, i->first.empty() ? NULL : i->first.c_str(), i->second) == 0) {\n-            nBound += 1;\n+        evhttp_bound_socket *bind_handle = evhttp_bind_socket_with_handle(http, i->first.empty() ? NULL : i->first.c_str(), i->second);\n+        if (bind_handle) {\n+            boundSockets.push_back(bind_handle);\n         } else {\n             LogPrintf(\"Binding RPC on address %s port %i failed.\\n\", i->first, i->second);\n         }\n     }\n-    return nBound > 0;\n+    return !boundSockets.empty();\n }\n \n /** Simple wrapper to set thread name and run work queue */\n@@ -410,8 +419,14 @@ bool StartHTTPServer(boost::thread_group& threadGroup)\n void InterruptHTTPServer()\n {\n     LogPrint(\"http\", \"Interrupting HTTP server\\n\");\n-    if (eventBase)\n-        event_base_loopbreak(eventBase);\n+    if (eventHTTP) {\n+        // Unlisten sockets\n+        BOOST_FOREACH (evhttp_bound_socket *socket, boundSockets) {\n+            evhttp_del_accept_socket(eventHTTP, socket);\n+        }\n+        // Reject requests on current connections\n+        evhttp_set_gencb(eventHTTP, http_reject_request_cb, NULL);\n+    }\n     if (workQueue)\n         workQueue->Interrupt();\n }"
      },
      {
        "sha": "dbee61efc88c98f995fb6b861c6bf5777bdb17d6",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e0c22135600fe36811da3b78216efc61ba765fb/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e0c22135600fe36811da3b78216efc61ba765fb/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=5e0c22135600fe36811da3b78216efc61ba765fb",
        "patch": "@@ -243,7 +243,8 @@ UniValue stop(const UniValue& params, bool fHelp)\n         throw runtime_error(\n             \"stop\\n\"\n             \"\\nStop Bitcoin server.\");\n-    // Shutdown will take long enough that the response should get back\n+    // Event loop will exit after current HTTP requests have been handled, so\n+    // this reply will get back to the client.\n     StartShutdown();\n     return \"Bitcoin server stopping\";\n }"
      }
    ]
  },
  {
    "sha": "de9de2de361ab1355b976f17371d73e36fe3bf56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTlkZTJkZTM2MWFiMTM1NWI5NzZmMTczNzFkNzNlMzZmZTNiZjU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-25T11:49:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-28T13:06:20Z"
      },
      "message": "http: Wait for worker threads to exit\n\nAdd a WaitExit() call to http's WorkQueue to make it delete the work\nqueue only when all worker threads stopped.\n\nThis fixes a problem that was reproducable by pressing Ctrl-C during\nAppInit2:\n```\n/usr/include/boost/thread/pthread/condition_variable_fwd.hpp:81: boost::condition_variable::~condition_variable(): Assertion `!ret' failed.\n/usr/include/boost/thread/pthread/mutex.hpp:108: boost::mutex::~mutex(): Assertion `!posix::pthread_mutex_destroy(&m)' failed.\n```\n\nI was assuming that `threadGroup->join_all();` would always have been\ncalled when entering the Shutdown(). However this is not the case in\nbitcoind's AppInit2-non-zero-exit case \"was left out intentionally\nhere\".",
      "tree": {
        "sha": "d7e9a1c8c8b0cf6ecb5e789d85235e0a1304f161",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7e9a1c8c8b0cf6ecb5e789d85235e0a1304f161"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de9de2de361ab1355b976f17371d73e36fe3bf56",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de9de2de361ab1355b976f17371d73e36fe3bf56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de9de2de361ab1355b976f17371d73e36fe3bf56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de9de2de361ab1355b976f17371d73e36fe3bf56/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e0c22135600fe36811da3b78216efc61ba765fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e0c22135600fe36811da3b78216efc61ba765fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e0c22135600fe36811da3b78216efc61ba765fb"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 37,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9f079aedfebe544f51296abeacce7242174c5c87",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 3,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de9de2de361ab1355b976f17371d73e36fe3bf56/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de9de2de361ab1355b976f17371d73e36fe3bf56/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=de9de2de361ab1355b976f17371d73e36fe3bf56",
        "patch": "@@ -72,13 +72,35 @@ class WorkQueue\n     std::deque<WorkItem*> queue;\n     bool running;\n     size_t maxDepth;\n+    int numThreads;\n+\n+    /** RAII object to keep track of number of running worker threads */\n+    class ThreadCounter\n+    {\n+    public:\n+        WorkQueue &wq;\n+        ThreadCounter(WorkQueue &w): wq(w)\n+        {\n+            boost::lock_guard<boost::mutex> lock(wq.cs);\n+            wq.numThreads += 1;\n+        }\n+        ~ThreadCounter()\n+        {\n+            boost::lock_guard<boost::mutex> lock(wq.cs);\n+            wq.numThreads -= 1;\n+            wq.cond.notify_all();\n+        }\n+    };\n \n public:\n     WorkQueue(size_t maxDepth) : running(true),\n-                                 maxDepth(maxDepth)\n+                                 maxDepth(maxDepth),\n+                                 numThreads(0)\n     {\n     }\n-    /* Precondition: worker threads have all stopped */\n+    /*( Precondition: worker threads have all stopped\n+     * (call WaitExit)\n+     */\n     ~WorkQueue()\n     {\n         while (!queue.empty()) {\n@@ -100,6 +122,7 @@ class WorkQueue\n     /** Thread function */\n     void Run()\n     {\n+        ThreadCounter count(*this);\n         while (running) {\n             WorkItem* i = 0;\n             {\n@@ -122,6 +145,13 @@ class WorkQueue\n         running = false;\n         cond.notify_all();\n     }\n+    /** Wait for worker threads to exit */\n+    void WaitExit()\n+    {\n+        boost::unique_lock<boost::mutex> lock(cs);\n+        while (numThreads > 0)\n+            cond.wait(lock);\n+    }\n \n     /** Return current depth of queue */\n     size_t Depth()\n@@ -434,7 +464,11 @@ void InterruptHTTPServer()\n void StopHTTPServer()\n {\n     LogPrint(\"http\", \"Stopping HTTP server\\n\");\n-    delete workQueue;\n+    if (workQueue) {\n+        LogPrint(\"http\", \"Waiting for HTTP worker threads to exit\\n\");\n+        workQueue->WaitExit();\n+        delete workQueue;\n+    }\n     if (eventHTTP) {\n         evhttp_free(eventHTTP);\n         eventHTTP = 0;"
      }
    ]
  },
  {
    "sha": "ec908d5f7aa9ad7e3487018e06a24cb6449cc58b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzkwOGQ1ZjdhYTlhZDdlMzQ4NzAxOGUwNmEyNGNiNjQ0OWNjNThi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-25T13:35:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-28T13:06:20Z"
      },
      "message": "http: Force-exit event loop after predefined time\n\nThis makes sure that the event loop eventually terminates, even if an\nevent (like an open timeout, or a hanging connection) happens to be\nholding it up.",
      "tree": {
        "sha": "b80a79a74bdd6a0160a2fd76c0bff2d382b85cd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b80a79a74bdd6a0160a2fd76c0bff2d382b85cd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec908d5f7aa9ad7e3487018e06a24cb6449cc58b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec908d5f7aa9ad7e3487018e06a24cb6449cc58b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec908d5f7aa9ad7e3487018e06a24cb6449cc58b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec908d5f7aa9ad7e3487018e06a24cb6449cc58b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de9de2de361ab1355b976f17371d73e36fe3bf56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de9de2de361ab1355b976f17371d73e36fe3bf56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de9de2de361ab1355b976f17371d73e36fe3bf56"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0a7f903e9f7ba999faeadec9185abb546b526ca2",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec908d5f7aa9ad7e3487018e06a24cb6449cc58b/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec908d5f7aa9ad7e3487018e06a24cb6449cc58b/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=ec908d5f7aa9ad7e3487018e06a24cb6449cc58b",
        "patch": "@@ -457,6 +457,13 @@ void InterruptHTTPServer()\n         // Reject requests on current connections\n         evhttp_set_gencb(eventHTTP, http_reject_request_cb, NULL);\n     }\n+    if (eventBase) {\n+        // Force-exit event loop after predefined time\n+        struct timeval tv;\n+        tv.tv_sec = 10;\n+        tv.tv_usec = 0;\n+        event_base_loopexit(eventBase, &tv);\n+    }\n     if (workQueue)\n         workQueue->Interrupt();\n }"
      }
    ]
  }
]