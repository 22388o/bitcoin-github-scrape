[
  {
    "sha": "59a77a6ac5e2ab542464f6eef3d9fcdb94b56371",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWE3N2E2YWM1ZTJhYjU0MjQ2NGY2ZWVmM2Q5ZmNkYjk0YjU2Mzcx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-12-09T14:50:33Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-12-09T14:50:33Z"
      },
      "message": "Make CCoinsViewCache::Cursor() return latest data\n\nChange CCoinsViewCache::Cursor() method to return a cursor yielding the latest\nCCoins entries, instead of just previous entries prior to the last cache flush.\n\nThe CCoinsViewCache::Cursor method is not currently used. This change just\nenables new features that rely on scanning the UXTO set to work correctly (for\nexample https://github.com/bitcoin/bitcoin/pull/9152, which adds a\nsweepprivkeys RPC, and https://github.com/bitcoin/bitcoin/pull/9137, which\nimproves handling of imported keys for nodes with pruning enabled.)",
      "tree": {
        "sha": "b4a4f9fcf894263266d7d95d6aa50348cfeef34e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4a4f9fcf894263266d7d95d6aa50348cfeef34e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59a77a6ac5e2ab542464f6eef3d9fcdb94b56371",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59a77a6ac5e2ab542464f6eef3d9fcdb94b56371",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59a77a6ac5e2ab542464f6eef3d9fcdb94b56371",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59a77a6ac5e2ab542464f6eef3d9fcdb94b56371/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6fd923886a3eee01d9e226544b024940038c5e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6fd923886a3eee01d9e226544b024940038c5e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6fd923886a3eee01d9e226544b024940038c5e4"
      }
    ],
    "stats": {
      "total": 157,
      "additions": 157,
      "deletions": 0
    },
    "files": [
      {
        "sha": "52a7525a1dff33bd156a5e0266a25e3b50da617f",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59a77a6ac5e2ab542464f6eef3d9fcdb94b56371/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59a77a6ac5e2ab542464f6eef3d9fcdb94b56371/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=59a77a6ac5e2ab542464f6eef3d9fcdb94b56371",
        "patch": "@@ -69,6 +69,72 @@ size_t CCoinsViewCache::DynamicMemoryUsage() const {\n     return memusage::DynamicUsage(cacheCoins) + cachedCoinsUsage;\n }\n \n+CCoinsViewCacheCursor::CCoinsViewCacheCursor(const CCoinsViewCache& cache)\n+    : CCoinsViewCursor(cache.GetBestBlock()), cache(cache), base(cache.base->Cursor()),\n+      it(cache.cacheCoins.begin())\n+{\n+    AdvanceToNonPruned();\n+}\n+\n+void CCoinsViewCacheCursor::AdvanceToNonPruned()\n+{\n+    // Skip non-dirty cache entries and dirty but pruned entries.\n+    for (; it != cache.cacheCoins.end(); ++it)\n+        if (it->second.flags & CCoinsCacheEntry::DIRTY && !it->second.coins.IsPruned())\n+            return;\n+\n+    // Skip base entries overridden by dirty cache entries.\n+    uint256 txid;\n+    CCoinsMap::iterator match;\n+    for (; base->Valid(); base->Next())\n+        if (!base->GetKey(txid) ||\n+            (match = cache.cacheCoins.find(txid)) == cache.cacheCoins.end() ||\n+            !(match->second.flags & CCoinsCacheEntry::DIRTY))\n+            return;\n+}\n+\n+bool CCoinsViewCacheCursor::GetKey(uint256& key) const\n+{\n+    if (it != cache.cacheCoins.end()) {\n+        key = it->first;\n+        return true;\n+    }\n+    return base->GetKey(key);\n+}\n+\n+bool CCoinsViewCacheCursor::GetValue(CCoins& coins) const\n+{\n+    if (it != cache.cacheCoins.end()) {\n+        coins = it->second.coins;\n+        return true;\n+    }\n+    return base->GetValue(coins);\n+}\n+\n+unsigned int CCoinsViewCacheCursor::GetValueSize() const\n+{\n+    return it != cache.cacheCoins.end() ? 0 : base->GetValueSize();\n+}\n+\n+bool CCoinsViewCacheCursor::Valid() const\n+{\n+    return it != cache.cacheCoins.end() || base->Valid();\n+}\n+\n+void CCoinsViewCacheCursor::Next()\n+{\n+    if (it != cache.cacheCoins.end())\n+        ++it;\n+    else\n+        base->Next();\n+    AdvanceToNonPruned();\n+}\n+\n+CCoinsViewCursor* CCoinsViewCache::Cursor() const\n+{\n+    return new CCoinsViewCacheCursor(*this);\n+}\n+\n CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n     CCoinsMap::iterator it = cacheCoins.find(txid);\n     if (it != cacheCoins.end())"
      },
      {
        "sha": "8b2fc718b3e1eb1e82d7511c2bcd78aac717b215",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59a77a6ac5e2ab542464f6eef3d9fcdb94b56371/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59a77a6ac5e2ab542464f6eef3d9fcdb94b56371/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=59a77a6ac5e2ab542464f6eef3d9fcdb94b56371",
        "patch": "@@ -390,6 +390,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n     uint256 GetBestBlock() const;\n     void SetBestBlock(const uint256 &hashBlock);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n+    CCoinsViewCursor* Cursor() const override;\n \n     /**\n      * Check if we have the given tx already loaded in this cache.\n@@ -464,6 +465,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n \n     const CTxOut &GetOutputFor(const CTxIn& input) const;\n \n+    friend class CCoinsViewCacheCursor;\n     friend class CCoinsModifier;\n \n private:\n@@ -475,4 +477,30 @@ class CCoinsViewCache : public CCoinsViewBacked\n     CCoinsViewCache(const CCoinsViewCache &);\n };\n \n+/**\n+ * Cursor view of cache. First returns dirty, non-pruned rows in cache, then\n+ * returns rows from the underlying base cursor.\n+ */\n+class CCoinsViewCacheCursor : public CCoinsViewCursor\n+{\n+public:\n+    CCoinsViewCacheCursor(const CCoinsViewCache& cache);\n+    void AdvanceToNonPruned();\n+    bool GetKey(uint256& key) const override;\n+    bool GetValue(CCoins& coins) const override;\n+    unsigned int GetValueSize() const override;\n+    bool Valid() const override;\n+    void Next() override;\n+\n+private:\n+    const CCoinsViewCache& cache;\n+    std::unique_ptr<CCoinsViewCursor> base;\n+\n+    /**\n+     * Current cache entry during the initial scan of the cache, before\n+     * resorting to underlying base cursor.\n+     */\n+    CCoinsMap::iterator it;\n+};\n+\n #endif // BITCOIN_COINS_H"
      },
      {
        "sha": "3bc2f1f561cee3ca116fd891dbf62680a326ade8",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59a77a6ac5e2ab542464f6eef3d9fcdb94b56371/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59a77a6ac5e2ab542464f6eef3d9fcdb94b56371/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=59a77a6ac5e2ab542464f6eef3d9fcdb94b56371",
        "patch": "@@ -63,8 +63,53 @@ class CCoinsViewTest : public CCoinsView\n             hashBestBlock_ = hashBlock;\n         return true;\n     }\n+\n+    CCoinsViewCursor* Cursor() const override;\n+\n+    friend class CCoinsViewTestCursor;\n };\n \n+class CCoinsViewTestCursor : public CCoinsViewCursor\n+{\n+public:\n+    CCoinsViewTestCursor(const CCoinsViewTest& test) : CCoinsViewCursor(test.GetBestBlock()), test(test), it(test.map_.begin()) {}\n+\n+    bool GetKey(uint256& key) const override\n+    {\n+        if (it == test.map_.end())\n+            return false;\n+        key = it->first;\n+        return true;\n+    }\n+\n+    bool GetValue(CCoins& coins) const override\n+    {\n+        if (it == test.map_.end())\n+            return false;\n+        coins = it->second;\n+        return true;\n+    }\n+\n+    unsigned int GetValueSize() const override { return 0; }\n+\n+    bool Valid() const override { return it != test.map_.end(); }\n+\n+    void Next() override\n+    {\n+        if (it != test.map_.end())\n+            ++it;\n+    }\n+\n+private:\n+    const CCoinsViewTest& test;\n+    std::map<uint256, CCoins>::const_iterator it;\n+};\n+\n+CCoinsViewCursor* CCoinsViewTest::Cursor() const\n+{\n+    return new CCoinsViewTestCursor(*this);\n+}\n+\n class CCoinsViewCacheTest : public CCoinsViewCache\n {\n public:\n@@ -149,6 +194,16 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n \n         // Once every 1000 iterations and at the end, verify the full cache.\n         if (insecure_rand() % 1000 == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n+            std::map<uint256, CCoins> cursorResult;\n+            for (std::unique_ptr<CCoinsViewCursor> cursor(stack.back()->Cursor()); cursor->Valid(); cursor->Next()) {\n+                uint256 key;\n+                BOOST_CHECK(cursor->GetKey(key));\n+                CCoins value;\n+                BOOST_CHECK(cursor->GetValue(value));\n+                BOOST_CHECK(cursorResult.emplace(key, value).second);\n+            }\n+\n+            std::map<uint256, CCoins>::iterator cursor = cursorResult.begin();\n             for (std::map<uint256, CCoins>::iterator it = result.begin(); it != result.end(); it++) {\n                 const CCoins* coins = stack.back()->AccessCoins(it->first);\n                 if (coins) {\n@@ -158,7 +213,15 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n                     BOOST_CHECK(it->second.IsPruned());\n                     missed_an_entry = true;\n                 }\n+\n+                if (cursor != cursorResult.end() && cursor->first == it->first) {\n+                  BOOST_CHECK(cursor->second == it->second);\n+                  ++cursor;\n+                } else {\n+                  BOOST_CHECK(it->second.IsPruned());\n+                }\n             }\n+            BOOST_CHECK(cursor == cursorResult.end());\n             BOOST_FOREACH(const CCoinsViewCacheTest *test, stack) {\n                 test->SelfTest();\n             }"
      }
    ]
  },
  {
    "sha": "a63ec0e10325d902b3563078fb969d042830a220",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjNlYzBlMTAzMjVkOTAyYjM1NjMwNzhmYjk2OWQwNDI4MzBhMjIw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-11-11T20:21:13Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-11-11T20:21:13Z"
      },
      "message": "Allow wallet key import RPCs to track TxOut amounts on -prune nodes\n\nAllow importprivkey, importaddress, importpubkey, and importmulti RPCs to be\ncalled with rescan=True option on nodes with pruned blockchains (started with\n-prune option). Instead of returning errors, the RPCs will now look for\ntransactions spending to the key in the UTXO database, and display them in the\nwallet.\n\nBecause the UTXO database doesn't store full transaction information (it\ndiscards TxIns) this change introduces a new \"fIncomplete\" CWalletTx member to\ndistinguish these from normal wallet transactions.\n\nThis change makes the -prune mode usable with wallets that need to import keys\nafter the initial sync.\n\nFixes #8497.",
      "tree": {
        "sha": "c17cb28584ee6b72ad7d2b2bffe28495ab558a14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c17cb28584ee6b72ad7d2b2bffe28495ab558a14"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a63ec0e10325d902b3563078fb969d042830a220",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a63ec0e10325d902b3563078fb969d042830a220",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a63ec0e10325d902b3563078fb969d042830a220",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a63ec0e10325d902b3563078fb969d042830a220/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59a77a6ac5e2ab542464f6eef3d9fcdb94b56371",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59a77a6ac5e2ab542464f6eef3d9fcdb94b56371",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59a77a6ac5e2ab542464f6eef3d9fcdb94b56371"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 77,
      "deletions": 38
    },
    "files": [
      {
        "sha": "3406c7ee9f6784bd7f8a28c5efaf8967c355b31a",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a63ec0e10325d902b3563078fb969d042830a220/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a63ec0e10325d902b3563078fb969d042830a220/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=a63ec0e10325d902b3563078fb969d042830a220",
        "patch": "@@ -14,7 +14,7 @@\n \n Call = enum.Enum(\"Call\", \"single multi\")\n Data = enum.Enum(\"Data\", \"address pub priv\")\n-ImportNode = collections.namedtuple(\"ImportNode\", \"rescan\")\n+ImportNode = collections.namedtuple(\"ImportNode\", \"prune rescan\")\n \n \n def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label, node, rescan):\n@@ -46,10 +46,7 @@ def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label, node,\n IMPORT_RPCS = [functools.partial(call_import_rpc, call, data) for call, data in itertools.product(Call, Data)]\n \n # List of bitcoind nodes that will import keys.\n-IMPORT_NODES = [\n-    ImportNode(rescan=True),\n-    ImportNode(rescan=False),\n-]\n+IMPORT_NODES = [ImportNode(*fields) for fields in itertools.product((True, False), repeat=2)]\n \n \n class ImportRescanTest(BitcoinTestFramework):\n@@ -59,6 +56,10 @@ def __init__(self):\n \n     def setup_network(self):\n         extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n+        for i, import_node in enumerate(IMPORT_NODES, 1):\n+            if import_node.prune:\n+                extra_args[i] += [\"-prune=550\"]\n+\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n@@ -102,8 +103,12 @@ def run_test(self):\n                     assert_equal(txs[0][\"category\"], \"receive\")\n                     assert_equal(txs[0][\"label\"], label)\n                     assert_equal(txs[0][\"txid\"], txid)\n-                    assert_equal(txs[0][\"confirmations\"], 1)\n-                    assert_equal(\"trusted\" not in txs[0], True)\n+                    if import_node.prune:\n+                        assert_equal(txs[0][\"confirmations\"], 0)\n+                        assert_equal(txs[0][\"trusted\"], False)\n+                    else:\n+                        assert_equal(txs[0][\"confirmations\"], 1)\n+                        assert_equal(\"trusted\" not in txs[0], True)\n                     if watchonly:\n                         assert_equal(txs[0][\"involvesWatchonly\"], True)\n                     else:"
      },
      {
        "sha": "e3c4dd5d5a096f2cd39f009fe7e6bcc7289647ec",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a63ec0e10325d902b3563078fb969d042830a220/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a63ec0e10325d902b3563078fb969d042830a220/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a63ec0e10325d902b3563078fb969d042830a220",
        "patch": "@@ -1467,7 +1467,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // ********************************************************* Step 8: load wallet\n #ifdef ENABLE_WALLET\n-    if (!CWallet::InitLoadWallet())\n+    if (!CWallet::InitLoadWallet([]{ return unique_ptr<CCoinsViewCursor>(pcoinsTip->Cursor()); }))\n         return false;\n #else\n     LogPrintf(\"No wallet support compiled in!\\n\");"
      },
      {
        "sha": "6e28ae46c8ab34e19d5c816f01c75fc62f07a1f5",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a63ec0e10325d902b3563078fb969d042830a220/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a63ec0e10325d902b3563078fb969d042830a220/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=a63ec0e10325d902b3563078fb969d042830a220",
        "patch": "@@ -75,6 +75,7 @@ uint256 CTransaction::GetWitnessHash() const\n /* For backward compatibility, the hash is initialized to 0. TODO: remove the need for this default constructor entirely. */\n CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0), hash() {}\n CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), wit(tx.wit), nLockTime(tx.nLockTime), hash(ComputeHash()) {}\n+CTransaction::CTransaction(const CMutableTransaction &tx, const uint256 &hash) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), wit(tx.wit), nLockTime(tx.nLockTime), hash(hash) {}\n CTransaction::CTransaction(CMutableTransaction &&tx) : nVersion(tx.nVersion), vin(std::move(tx.vin)), vout(std::move(tx.vout)), wit(std::move(tx.wit)), nLockTime(tx.nLockTime), hash(ComputeHash()) {}\n \n CAmount CTransaction::GetValueOut() const"
      },
      {
        "sha": "4a5c4e2aa0ab35bbaf27415789dd8fba909b8115",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a63ec0e10325d902b3563078fb969d042830a220/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a63ec0e10325d902b3563078fb969d042830a220/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=a63ec0e10325d902b3563078fb969d042830a220",
        "patch": "@@ -394,6 +394,7 @@ class CTransaction\n \n     /** Convert a CMutableTransaction into a CTransaction. */\n     CTransaction(const CMutableTransaction &tx);\n+    CTransaction(const CMutableTransaction &tx, const uint256 &hash);\n     CTransaction(CMutableTransaction &&tx);\n \n     template <typename Stream>"
      },
      {
        "sha": "f32987c415a42d8180a6c203e157569c2f1805c4",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 24,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a63ec0e10325d902b3563078fb969d042830a220/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a63ec0e10325d902b3563078fb969d042830a220/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a63ec0e10325d902b3563078fb969d042830a220",
        "patch": "@@ -75,6 +75,16 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+static void Rescan()\n+{\n+    if (fPruneMode) {\n+        if (!pwalletMain->ScanForWalletUTXOs())\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"UTXO rescan failed.\");\n+    } else {\n+        pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+    }\n+}\n+\n UniValue importprivkey(const JSONRPCRequest& request)\n {\n     if (!EnsureWalletIsAvailable(request.fHelp))\n@@ -115,9 +125,6 @@ UniValue importprivkey(const JSONRPCRequest& request)\n     if (request.params.size() > 2)\n         fRescan = request.params[2].get_bool();\n \n-    if (fRescan && fPruneMode)\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n-\n     CBitcoinSecret vchSecret;\n     bool fGood = vchSecret.SetString(strSecret);\n \n@@ -145,9 +152,8 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         // whenever a key is imported, we need to scan the whole chain\n         pwalletMain->nTimeFirstKey = 1; // 0 would be considered 'no value'\n \n-        if (fRescan) {\n-            pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n-        }\n+        if (fRescan)\n+            Rescan();\n     }\n \n     return NullUniValue;\n@@ -222,9 +228,6 @@ UniValue importaddress(const JSONRPCRequest& request)\n     if (request.params.size() > 2)\n         fRescan = request.params[2].get_bool();\n \n-    if (fRescan && fPruneMode)\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n-\n     // Whether to import a p2sh version, too\n     bool fP2SH = false;\n     if (request.params.size() > 3)\n@@ -245,10 +248,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n     }\n \n     if (fRescan)\n-    {\n-        pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n-        pwalletMain->ReacceptWalletTransactions();\n-    }\n+        Rescan();\n \n     return NullUniValue;\n }\n@@ -381,9 +381,6 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     if (request.params.size() > 2)\n         fRescan = request.params[2].get_bool();\n \n-    if (fRescan && fPruneMode)\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n-\n     if (!IsHex(request.params[0].get_str()))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n     std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n@@ -397,10 +394,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     ImportScript(GetScriptForRawPubKey(pubKey), strLabel, false);\n \n     if (fRescan)\n-    {\n-        pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n-        pwalletMain->ReacceptWalletTransactions();\n-    }\n+        Rescan();\n \n     return NullUniValue;\n }\n@@ -1051,10 +1045,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     if (fRescan && fRunScan && requests.size() && nLowestTimestamp <= chainActive.Tip()->GetBlockTime()) {\n         CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindLatestBefore(nLowestTimestamp) : chainActive.Genesis();\n \n-        if (pindex) {\n-            pwalletMain->ScanForWalletTransactions(pindex, true);\n-            pwalletMain->ReacceptWalletTransactions();\n-        }\n+        if (pindex)\n+            Rescan();\n     }\n \n     return response;"
      },
      {
        "sha": "8412d5014049d05c9c785a09cfa254e69f936064",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 4,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a63ec0e10325d902b3563078fb969d042830a220/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a63ec0e10325d902b3563078fb969d042830a220/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a63ec0e10325d902b3563078fb969d042830a220",
        "patch": "@@ -971,7 +971,7 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n  * pblock is optional, but should be provided if the transaction is known to be in a block.\n  * If fUpdate is true, existing transactions will be updated.\n  */\n-bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, bool fIncomplete, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)\n {\n     {\n         AssertLockHeld(cs_wallet);\n@@ -994,6 +994,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n             CWalletTx wtx(this, MakeTransactionRef(tx));\n+            wtx.fIncomplete = fIncomplete;\n \n             // Get merkle branch if transaction was found in a block\n             if (posInBlock != -1)\n@@ -1126,7 +1127,7 @@ void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex,\n {\n     LOCK2(cs_main, cs_wallet);\n \n-    if (!AddToWalletIfInvolvingMe(tx, pindex, posInBlock, true))\n+    if (!AddToWalletIfInvolvingMe(tx, false /* fIncomplete */, pindex, posInBlock, true /* fUpdate */))\n         return; // Not one of ours\n \n     // If a transaction changes 'conflicted' state, that changes the balance\n@@ -1492,7 +1493,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n             int posInBlock;\n             for (posInBlock = 0; posInBlock < (int)block.vtx.size(); posInBlock++)\n             {\n-                if (AddToWalletIfInvolvingMe(*block.vtx[posInBlock], pindex, posInBlock, fUpdate))\n+                if (AddToWalletIfInvolvingMe(*block.vtx[posInBlock], false /* fIncomplete */, pindex, posInBlock, fUpdate))\n                     ret++;\n             }\n             pindex = chainActive.Next(pindex);\n@@ -1506,6 +1507,24 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n     return ret;\n }\n \n+bool CWallet::ScanForWalletUTXOs()\n+{\n+    for (auto pcursor = coinsCursor(); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        uint256 hash;\n+        CCoins coins;\n+        if (pcursor->GetKey(hash) && pcursor->GetValue(coins)) {\n+            CMutableTransaction mtx;\n+            mtx.vout = coins.vout;\n+            mtx.nVersion = coins.nVersion;\n+            AddToWalletIfInvolvingMe(CTransaction(mtx, hash), true /* fIncomplete */, nullptr /* pIndex */, -1 /* posInBlock */, false /* fUpdate */);\n+        } else {\n+            return error(\"%s: unable to read value\", __func__);\n+        }\n+    }\n+    return true;\n+}\n+\n void CWallet::ReacceptWalletTransactions()\n {\n     // If transactions aren't being broadcasted, don't let them into local mempool either\n@@ -1533,6 +1552,10 @@ void CWallet::ReacceptWalletTransactions()\n     {\n         CWalletTx& wtx = *(item.second);\n \n+        // Do not send incomplete transactions that can't validate.\n+        if (wtx.fIncomplete)\n+            continue;\n+\n         LOCK(mempool.cs);\n         CValidationState state;\n         wtx.AcceptToMemoryPool(maxTxFee, state);\n@@ -3380,7 +3403,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     return strUsage;\n }\n \n-bool CWallet::InitLoadWallet()\n+bool CWallet::InitLoadWallet(CoinsCursorCallback coinsCursor)\n {\n     if (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n         pwalletMain = NULL;\n@@ -3411,6 +3434,7 @@ bool CWallet::InitLoadWallet()\n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n     CWallet *walletInstance = new CWallet(walletFile);\n+    walletInstance->coinsCursor = std::move(coinsCursor);\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DB_LOAD_OK)\n     {"
      },
      {
        "sha": "3b58b98a77f7b66bedf65fbeb614a18eb645706b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a63ec0e10325d902b3563078fb969d042830a220/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a63ec0e10325d902b3563078fb969d042830a220/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a63ec0e10325d902b3563078fb969d042830a220",
        "patch": "@@ -68,12 +68,15 @@ extern const char * DEFAULT_WALLET_DAT;\n \n class CBlockIndex;\n class CCoinControl;\n+class CCoinsViewCursor;\n class COutput;\n class CReserveKey;\n class CScript;\n class CTxMemPool;\n class CWalletTx;\n \n+typedef std::function<std::unique_ptr<CCoinsViewCursor>()> CoinsCursorCallback;\n+\n /** (client) version numbers for particular wallet features */\n enum WalletFeature\n {\n@@ -257,6 +260,14 @@ class CWalletTx : public CMerkleTx\n     std::string strFromAccount;\n     int64_t nOrderPos; //!< position in ordered transaction list\n \n+    /**\n+     * True if transaction data is incomplete. Incomplete CWalletTxs do not\n+     * include any information about TxIns, and should only be present in\n+     * wallets that have imported external addresses while running in with a\n+     * pruned block chain (-prune argument).\n+     */\n+    bool fIncomplete;\n+\n     // memory only\n     mutable bool fDebitCached;\n     mutable bool fCreditCached;\n@@ -297,6 +308,7 @@ class CWalletTx : public CMerkleTx\n         nTimeSmart = 0;\n         fFromMe = false;\n         strFromAccount.clear();\n+        fIncomplete = false;\n         fDebitCached = false;\n         fCreditCached = false;\n         fImmatureCreditCached = false;\n@@ -595,6 +607,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool fFileBacked;\n \n     std::set<int64_t> setKeyPool;\n+\n+    CoinsCursorCallback coinsCursor;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -756,8 +771,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock);\n-    bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n+    bool AddToWalletIfInvolvingMe(const CTransaction& tx, bool fIncomplete, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n+    bool ScanForWalletUTXOs();\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman);\n     std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman);\n@@ -917,7 +933,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     static std::string GetWalletHelpString(bool showDebug);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static bool InitLoadWallet();\n+    static bool InitLoadWallet(CoinsCursorCallback coinsCursor);\n \n     /**\n      * Wallet post-init setup"
      }
    ]
  }
]