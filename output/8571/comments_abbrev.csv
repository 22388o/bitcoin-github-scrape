sipa,2016-08-24T07:03:09Z,"No, the necessary services are determined before connecting. The code you\nare removing also does not disconnect whenever the services just differ -\nthey must differ in one of the bits set in nServicesExpected.\n\nNODE_NETWORK right now encompasses both the ability to serve historical\nblocks and the ability to relay new blocks. We should never make an\noutbound connection to nodes that do not ha",https://github.com/bitcoin/bitcoin/pull/8571#issuecomment-241975149,241975149,
gmaxwell,2016-08-24T07:21:04Z,"Sipa beat me to it here, I was going to point out the same thing.  (And if you look up conversations about pruning it was quite clear that other nodes wouldn't make connections to those nodes-- just that they'd relay blocks to those they connected out to)\n\nWithout first having a definition of what we're actually connecting to, we'd risk wasting our precious outbound slots on peers that aren't ev",https://github.com/bitcoin/bitcoin/pull/8571#issuecomment-241978480,241978480,
rebroad,2016-08-24T09:58:20Z,"@gmaxwell I see what you are saying, and currently, there don't seem to be a shortage of NODE_NETWORK nodes that are contactable - my node was easily able to connect to 16 of them within only a few minutes of starting, so yes, we don't need to scrape the barrel by connecting to non-NODE_NETWORK nodes yet. Perhaps this discussion is premature - I do foresee a future where we might want to make bett",https://github.com/bitcoin/bitcoin/pull/8571#issuecomment-242013919,242013919,
sipa,2016-08-24T10:09:08Z,"To do so, you'll need a way to advertize on the network that you're a\nvalidating and relaying node that does not serve historical blocks. That\nneeds a protocol change, and discussion on the mailing list.\n",https://github.com/bitcoin/bitcoin/pull/8571#issuecomment-242016306,242016306,
gmaxwell,2016-08-24T20:47:55Z,I was hoping that further experience with pruning would help establish what the relevant service flags were.  I was also hoping that we'd come up with some good schemes for communications bandwidth efficient fractional chain storage.\n,https://github.com/bitcoin/bitcoin/pull/8571#issuecomment-242202994,242202994,
rebroad,2016-08-26T09:14:11Z,@gmaxwell Regarding bandwidth efficient fractional chain storage - can you elaborate on what this is? It's not clear to me from the term itself.\n,https://github.com/bitcoin/bitcoin/pull/8571#issuecomment-242675645,242675645,
sipa,2016-08-26T12:52:17Z,@rebroad See here for example https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008110.html \n,https://github.com/bitcoin/bitcoin/pull/8571#issuecomment-242726958,242726958,
rebroad,2016-08-28T07:51:59Z,"@sipa @gmaxwell Ok, I have changed this pull to address the issues. It is now two commits as I felt this was appropriate given it achieves two things. Firstly, it displays the version message prior to any disconnection logic. Secondly, it disconnects when an outgoing connection discovers irrelevant (rather than unexpected) services, as I believe was the intention, using the nRelevantServices varia",https://github.com/bitcoin/bitcoin/pull/8571#issuecomment-242961602,242961602,
sipa,2016-08-28T08:12:27Z,"NACK. This will prevent segwit nodes from ever connecting to non-segwit nodes, making a petitioning more likely.\n\nnRelevantServices is called that way because they're relevant. It is not called nRequiredServices.\n\nThe reasoning is as follows: when selecting a peer to connect to, we pick based on their assumed services. Then we set the CNode::nServicesExpected based on that knowledge intersecte",https://github.com/bitcoin/bitcoin/pull/8571#issuecomment-242962346,242962346,
rebroad,2016-08-29T06:03:43Z,"ok, it seems I'm perhaps misunderstanding the code as it is. apologies for this... \n",https://github.com/bitcoin/bitcoin/pull/8571#issuecomment-243039010,243039010,
