DrahtBot,2019-09-16 20:10:18,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17129](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17129.html) (tests: Add fuzzing harness for miniscript::",https://github.com/bitcoin/bitcoin/pull/16889#issuecomment-531937959,531937959,
laanwj,2019-09-18 12:53:04,"Concept ACK. These are some useful utilities, I think it's a good idea to collect them into one place.\n\nWould be good to have unit tests for the new functions.",https://github.com/bitcoin/bitcoin/pull/16889#issuecomment-532670296,532670296,
sipa,2019-10-10 01:16:51,"Rebased, will work on adding tests soon.",https://github.com/bitcoin/bitcoin/pull/16889#issuecomment-540279142,540279142,
sipa,2019-10-10 18:24:19,"Rebased, added some tests, and addressed nits.",https://github.com/bitcoin/bitcoin/pull/16889#issuecomment-540711802,540711802,
sipa,2019-10-16 15:59:52,Rebased and addressed comments.,https://github.com/bitcoin/bitcoin/pull/16889#issuecomment-542772492,542772492,
laanwj,2019-10-18 09:09:38,ACK 7d8d3e6a2ad827fa916e3909a18dedb9f7fdce43,https://github.com/bitcoin/bitcoin/pull/16889#issuecomment-543618656,543618656,
MarcoFalke,2019-10-18 13:56:24,"ACK 7d8d3e6a2ad827fa916e3909a18dedb9f7fdce43 (enjoyed reading the tests, but did not compile)\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 7d8d3e6a2ad827fa916e3909a18dedb9f7fdce43 (enjoyed reading the tests, but did not compile)\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGY",https://github.com/bitcoin/bitcoin/pull/16889#issuecomment-543759043,543759043,
martinus,2019-09-16 18:08:14,"In my experience this recursive variadic templates lead to very bad runtime performance. It is probably better to use the trick with `std::initializer_list`, as explained e.g. here: https://www.experts-exchange.com/articles/32502/None-recursive-variadic-templates-with-std-initializer-list.html",https://github.com/bitcoin/bitcoin/pull/16889#discussion_r324812515,324812515,src/util/vector.h
MarcoFalke,2019-09-16 18:23:38,"`keyid` is already of type `PKHash`. I guess you wanted to write\n\n```suggestion\n    CTxDestination p2pkh{keyid};\n```",https://github.com/bitcoin/bitcoin/pull/16889#discussion_r324819214,324819214,src/outputtype.cpp
MarcoFalke,2019-09-16 18:45:53,"Note to myself: https://en.cppreference.com/w/cpp/types/common_type says that the ""types in the parameter pack T shall each be a complete type, [...]. Otherwise, the behavior is undefined"". Though, I get a compilation failure when using incomplete types, which is nicer than undefined behavior.\n\n\n```\n/usr/include/c++/9/bits/stl_vector.h: In instantiation of ‘std::_Vector_base<_Tp, _Alloc>::",https://github.com/bitcoin/bitcoin/pull/16889#discussion_r324828690,324828690,src/util/vector.h
sipa,2019-09-16 19:43:54,"Of course, that's much more idiomatic. Done.",https://github.com/bitcoin/bitcoin/pull/16889#discussion_r324852466,324852466,src/outputtype.cpp
sipa,2019-09-16 19:45:27,"Given that a vector is actually instantiated of the resulting type, I don't think there is much undefined ""compile time"" behavior that can lead to actually compiling code. There is also essentially just one type that vector can be; if it's wrong, the elements won't be able to be added to it.",https://github.com/bitcoin/bitcoin/pull/16889#discussion_r324853068,324853068,src/util/vector.h
sipa,2019-09-16 21:17:41,Thanks for the suggestion. That's a lot cleaner too.,https://github.com/bitcoin/bitcoin/pull/16889#discussion_r324890162,324890162,src/util/vector.h
Empact,2019-09-18 20:14:45,nit: is it worthwhile to move `old_tip` here?,https://github.com/bitcoin/bitcoin/pull/16889#discussion_r325871586,325871586,src/txdb.cpp
Empact,2019-09-18 20:27:02,"nit: mark this `(void)` to solve an unused result warning\n```\nIn file included from txdb.cpp:15:\n./util/vector.h:24:5: warning: expression result unused [-Wunused-value]\n    std::initializer_list<int>{(ret.emplace_back(std::forward<Args>(args)), 0)...};\n    ^                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```\nMaybe also comment with a link as this is pre",https://github.com/bitcoin/bitcoin/pull/16889#discussion_r325876538,325876538,src/util/vector.h
sipa,2019-10-03 15:59:35,"No, it's a uint256, which has no dynamic storage. Moving and copying are identical.",https://github.com/bitcoin/bitcoin/pull/16889#discussion_r331120769,331120769,src/txdb.cpp
sipa,2019-10-10 18:24:06,Done both.,https://github.com/bitcoin/bitcoin/pull/16889#discussion_r333669560,333669560,src/util/vector.h
Empact,2019-10-11 11:58:27,"nit: These comments should not have ‘<‘, which is for in-line docs. http://www.doxygen.nl/manual/docblocks.html#memberdoc",https://github.com/bitcoin/bitcoin/pull/16889#discussion_r333955576,333955576,src/test/util_tests.cpp
sipa,2019-10-15 17:58:05,"Thanks, fixed!",https://github.com/bitcoin/bitcoin/pull/16889#discussion_r335096059,335096059,src/test/util_tests.cpp
