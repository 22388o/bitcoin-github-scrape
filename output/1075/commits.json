[
  {
    "sha": "460c51fdad07c89b64b60d680bad7ba89c9d5ee2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjBjNTFmZGFkMDdjODliNjRiNjBkNjgwYmFkN2JhODljOWQ1ZWUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-04-09T19:07:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-05T08:37:06Z"
      },
      "message": "Add UI RPC console / debug window",
      "tree": {
        "sha": "d260c85b84dbe759ff035acb68cd023bc0c41ff6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d260c85b84dbe759ff035acb68cd023bc0c41ff6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/460c51fdad07c89b64b60d680bad7ba89c9d5ee2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/460c51fdad07c89b64b60d680bad7ba89c9d5ee2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/460c51fdad07c89b64b60d680bad7ba89c9d5ee2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca97bde8ff53f2604d601061af1f0ff6e2a37487",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca97bde8ff53f2604d601061af1f0ff6e2a37487",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca97bde8ff53f2604d601061af1f0ff6e2a37487"
      }
    ],
    "stats": {
      "total": 912,
      "additions": 833,
      "deletions": 79
    },
    "files": [
      {
        "sha": "d4d7af3a8adc1c639b6c49ef1edb31e15e6a92b2",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=460c51fdad07c89b64b60d680bad7ba89c9d5ee2",
        "patch": "@@ -158,7 +158,8 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/qt/notificator.h \\\n     src/qt/qtipcserver.h \\\n     src/allocators.h \\\n-    src/ui_interface.h\n+    src/ui_interface.h \\\n+    src/qt/rpcconsole.h\n \n SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/transactiontablemodel.cpp \\\n@@ -212,7 +213,8 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/askpassphrasedialog.cpp \\\n     src/protocol.cpp \\\n     src/qt/notificator.cpp \\\n-    src/qt/qtipcserver.cpp\n+    src/qt/qtipcserver.cpp \\\n+    src/qt/rpcconsole.cpp\n \n RESOURCES += \\\n     src/qt/bitcoin.qrc\n@@ -226,7 +228,8 @@ FORMS += \\\n     src/qt/forms/transactiondescdialog.ui \\\n     src/qt/forms/overviewpage.ui \\\n     src/qt/forms/sendcoinsentry.ui \\\n-    src/qt/forms/askpassphrasedialog.ui\n+    src/qt/forms/askpassphrasedialog.ui \\\n+    src/qt/forms/rpcconsole.ui\n \n contains(USE_QRCODE, 1) {\n HEADERS += src/qt/qrcodedialog.h"
      },
      {
        "sha": "6f03ee3ab93720b38582368a68c75141ddb55edb",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 88,
        "deletions": 75,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=460c51fdad07c89b64b60d680bad7ba89c9d5ee2",
        "patch": "@@ -2505,34 +2505,11 @@ void ThreadRPCServer2(void* parg)\n             else\n                 throw JSONRPCError(-32600, \"Params must be an array\");\n \n-            // Find method\n-            const CRPCCommand *pcmd = tableRPC[strMethod];\n-            if (!pcmd)\n-                throw JSONRPCError(-32601, \"Method not found\");\n-\n-            // Observe safe mode\n-            string strWarning = GetWarnings(\"rpc\");\n-            if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\") &&\n-                !pcmd->okSafeMode)\n-                throw JSONRPCError(-2, string(\"Safe mode: \") + strWarning);\n-\n-            try\n-            {\n-                // Execute\n-                Value result;\n-                {\n-                    LOCK2(cs_main, pwalletMain->cs_wallet);\n-                    result = pcmd->actor(params, false);\n-                }\n-\n-                // Send reply\n-                string strReply = JSONRPCReply(result, Value::null, id);\n-                stream << HTTPReply(200, strReply) << std::flush;\n-            }\n-            catch (std::exception& e)\n-            {\n-                ErrorReply(stream, JSONRPCError(-1, e.what()), id);\n-            }\n+            Value result = tableRPC.execute(strMethod, params);\n+\n+            // Send reply\n+            string strReply = JSONRPCReply(result, Value::null, id);\n+            stream << HTTPReply(200, strReply) << std::flush;\n         }\n         catch (Object& objError)\n         {\n@@ -2545,7 +2522,34 @@ void ThreadRPCServer2(void* parg)\n     }\n }\n \n+json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_spirit::Array &params) const\n+{\n+    // Find method\n+    const CRPCCommand *pcmd = tableRPC[strMethod];\n+    if (!pcmd)\n+        throw JSONRPCError(-32601, \"Method not found\");\n+\n+    // Observe safe mode\n+    string strWarning = GetWarnings(\"rpc\");\n+    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\") &&\n+        !pcmd->okSafeMode)\n+        throw JSONRPCError(-2, string(\"Safe mode: \") + strWarning);\n \n+    try\n+    {\n+        // Execute\n+        Value result;\n+        {\n+            LOCK2(cs_main, pwalletMain->cs_wallet);\n+            result = pcmd->actor(params, false);\n+        }\n+        return result;\n+    }\n+    catch (std::exception& e)\n+    {\n+        throw JSONRPCError(-1, e.what());\n+    }\n+}\n \n \n Object CallRPC(const string& strMethod, const Array& params)\n@@ -2619,6 +2623,60 @@ void ConvertTo(Value& value)\n     }\n }\n \n+// Convert strings to command-specific RPC representation\n+Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n+{\n+    Array params;\n+    BOOST_FOREACH(const std::string &param, strParams)\n+        params.push_back(param);\n+\n+    int n = params.size();\n+\n+    //\n+    // Special case non-string parameter types\n+    //\n+    if (strMethod == \"setgenerate\"            && n > 0) ConvertTo<bool>(params[0]);\n+    if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"sendtoaddress\"          && n > 1) ConvertTo<double>(params[1]);\n+    if (strMethod == \"settxfee\"               && n > 0) ConvertTo<double>(params[0]);\n+    if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"getreceivedbyaccount\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"listreceivedbyaddress\"  && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"listreceivedbyaddress\"  && n > 1) ConvertTo<bool>(params[1]);\n+    if (strMethod == \"listreceivedbyaccount\"  && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"listreceivedbyaccount\"  && n > 1) ConvertTo<bool>(params[1]);\n+    if (strMethod == \"getbalance\"             && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"getblockhash\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"move\"                   && n > 2) ConvertTo<double>(params[2]);\n+    if (strMethod == \"move\"                   && n > 3) ConvertTo<boost::int64_t>(params[3]);\n+    if (strMethod == \"sendfrom\"               && n > 2) ConvertTo<double>(params[2]);\n+    if (strMethod == \"sendfrom\"               && n > 3) ConvertTo<boost::int64_t>(params[3]);\n+    if (strMethod == \"listtransactions\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"listtransactions\"       && n > 2) ConvertTo<boost::int64_t>(params[2]);\n+    if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"listsinceblock\"         && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"sendmany\"               && n > 1)\n+    {\n+        string s = params[1].get_str();\n+        Value v;\n+        if (!read_string(s, v) || v.type() != obj_type)\n+            throw runtime_error(\"type mismatch\");\n+        params[1] = v.get_obj();\n+    }\n+    if (strMethod == \"sendmany\"                && n > 2) ConvertTo<boost::int64_t>(params[2]);\n+    if (strMethod == \"addmultisigaddress\"      && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"addmultisigaddress\"      && n > 1)\n+    {\n+        string s = params[1].get_str();\n+        Value v;\n+        if (!read_string(s, v) || v.type() != array_type)\n+            throw runtime_error(\"type mismatch \"+s);\n+        params[1] = v.get_array();\n+    }\n+    return params;\n+}\n+\n int CommandLineRPC(int argc, char *argv[])\n {\n     string strPrint;\n@@ -2638,53 +2696,8 @@ int CommandLineRPC(int argc, char *argv[])\n         string strMethod = argv[1];\n \n         // Parameters default to strings\n-        Array params;\n-        for (int i = 2; i < argc; i++)\n-            params.push_back(argv[i]);\n-        int n = params.size();\n-\n-        //\n-        // Special case non-string parameter types\n-        //\n-        if (strMethod == \"setgenerate\"            && n > 0) ConvertTo<bool>(params[0]);\n-        if (strMethod == \"setgenerate\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-        if (strMethod == \"sendtoaddress\"          && n > 1) ConvertTo<double>(params[1]);\n-        if (strMethod == \"settxfee\"               && n > 0) ConvertTo<double>(params[0]);\n-        if (strMethod == \"getreceivedbyaddress\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-        if (strMethod == \"getreceivedbyaccount\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-        if (strMethod == \"listreceivedbyaddress\"  && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-        if (strMethod == \"listreceivedbyaddress\"  && n > 1) ConvertTo<bool>(params[1]);\n-        if (strMethod == \"listreceivedbyaccount\"  && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-        if (strMethod == \"listreceivedbyaccount\"  && n > 1) ConvertTo<bool>(params[1]);\n-        if (strMethod == \"getbalance\"             && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-        if (strMethod == \"getblockhash\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-        if (strMethod == \"move\"                   && n > 2) ConvertTo<double>(params[2]);\n-        if (strMethod == \"move\"                   && n > 3) ConvertTo<boost::int64_t>(params[3]);\n-        if (strMethod == \"sendfrom\"               && n > 2) ConvertTo<double>(params[2]);\n-        if (strMethod == \"sendfrom\"               && n > 3) ConvertTo<boost::int64_t>(params[3]);\n-        if (strMethod == \"listtransactions\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-        if (strMethod == \"listtransactions\"       && n > 2) ConvertTo<boost::int64_t>(params[2]);\n-        if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-        if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-        if (strMethod == \"listsinceblock\"         && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-        if (strMethod == \"sendmany\"               && n > 1)\n-        {\n-            string s = params[1].get_str();\n-            Value v;\n-            if (!read_string(s, v) || v.type() != obj_type)\n-                throw runtime_error(\"type mismatch\");\n-            params[1] = v.get_obj();\n-        }\n-        if (strMethod == \"sendmany\"                && n > 2) ConvertTo<boost::int64_t>(params[2]);\n-        if (strMethod == \"addmultisigaddress\"      && n > 0) ConvertTo<boost::int64_t>(params[0]);\n-        if (strMethod == \"addmultisigaddress\"      && n > 1)\n-        {\n-            string s = params[1].get_str();\n-            Value v;\n-            if (!read_string(s, v) || v.type() != array_type)\n-                throw runtime_error(\"type mismatch \"+s);\n-            params[1] = v.get_array();\n-        }\n+        std::vector<std::string> strParams(&argv[2], &argv[argc]);\n+        Array params = RPCConvertValues(strMethod, strParams);\n \n         // Execute\n         Object reply = CallRPC(strMethod, params);"
      },
      {
        "sha": "dd18a504f37b287d859ef2a6f5c2b6df4ffa2da9",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=460c51fdad07c89b64b60d680bad7ba89c9d5ee2",
        "patch": "@@ -16,6 +16,9 @@\n void ThreadRPCServer(void* parg);\n int CommandLineRPC(int argc, char *argv[]);\n \n+/** Convert parameter values for RPC call from strings to command-specific JSON objects. */\n+json_spirit::Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams);\n+\n typedef json_spirit::Value(*rpcfn_type)(const json_spirit::Array& params, bool fHelp);\n \n class CRPCCommand\n@@ -26,6 +29,9 @@ class CRPCCommand\n     bool okSafeMode;\n };\n \n+/**\n+ * Bitcoin RPC command dispatcher.\n+ */\n class CRPCTable\n {\n private:\n@@ -34,6 +40,15 @@ class CRPCTable\n     CRPCTable();\n     const CRPCCommand* operator[](std::string name) const;\n     std::string help(std::string name) const;\n+\n+    /**\n+     * Execute a method.\n+     * @param method   Method to execute\n+     * @param params   Array of arguments (JSON objects)\n+     * @returns Result of the call.\n+     * @throws an exception (json_spirit::Value) when an error happens.\n+     */\n+    json_spirit::Value execute(const std::string &method, const json_spirit::Array &params) const;\n };\n \n extern const CRPCTable tableRPC;"
      },
      {
        "sha": "007f185d066616c3418ab0b1a615e37ecfadc60d",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=460c51fdad07c89b64b60d680bad7ba89c9d5ee2",
        "patch": "@@ -24,6 +24,7 @@\n #include \"askpassphrasedialog.h\"\n #include \"notificator.h\"\n #include \"guiutil.h\"\n+#include \"rpcconsole.h\"\n \n #ifdef Q_WS_MAC\n #include \"macdockiconhandler.h\"\n@@ -64,7 +65,8 @@ BitcoinGUI::BitcoinGUI(QWidget *parent):\n     changePassphraseAction(0),\n     aboutQtAction(0),\n     trayIcon(0),\n-    notificator(0)\n+    notificator(0),\n+    rpcConsole(0)\n {\n     resize(850, 550);\n     setWindowTitle(tr(\"Bitcoin Wallet\"));\n@@ -158,6 +160,9 @@ BitcoinGUI::BitcoinGUI(QWidget *parent):\n     // Doubleclicking on a transaction on the transaction history page shows details\n     connect(transactionView, SIGNAL(doubleClicked(QModelIndex)), transactionView, SLOT(showDetails()));\n \n+    rpcConsole = new RPCConsole(this);\n+    connect(openRPCConsoleAction, SIGNAL(triggered()), rpcConsole, SLOT(show()));\n+\n     gotoOverviewPage();\n }\n \n@@ -248,6 +253,8 @@ void BitcoinGUI::createActions()\n     backupWalletAction->setToolTip(tr(\"Backup wallet to another location\"));\n     changePassphraseAction = new QAction(QIcon(\":/icons/key\"), tr(\"&Change Passphrase\"), this);\n     changePassphraseAction->setToolTip(tr(\"Change the passphrase used for wallet encryption\"));\n+    openRPCConsoleAction = new QAction(tr(\"&Debug window\"), this);\n+    openRPCConsoleAction->setToolTip(tr(\"Open debugging and diagnostic console\"));\n \n     connect(quitAction, SIGNAL(triggered()), qApp, SLOT(quit()));\n     connect(optionsAction, SIGNAL(triggered()), this, SLOT(optionsClicked()));\n@@ -286,6 +293,8 @@ void BitcoinGUI::createMenuBar()\n     settings->addAction(optionsAction);\n \n     QMenu *help = appMenuBar->addMenu(tr(\"&Help\"));\n+    help->addAction(openRPCConsoleAction);\n+    help->addSeparator();\n     help->addAction(aboutAction);\n     help->addAction(aboutQtAction);\n }\n@@ -338,6 +347,8 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n \n         // Report errors from network/worker thread\n         connect(clientModel, SIGNAL(error(QString,QString, bool)), this, SLOT(error(QString,QString,bool)));\n+\n+        rpcConsole->setClientModel(clientModel);\n     }\n }\n "
      },
      {
        "sha": "eb4f883496aba000c86db89b04fb18781d7ef782",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=460c51fdad07c89b64b60d680bad7ba89c9d5ee2",
        "patch": "@@ -13,6 +13,7 @@ class AddressBookPage;\n class SendCoinsDialog;\n class MessagePage;\n class Notificator;\n+class RPCConsole;\n \n QT_BEGIN_NAMESPACE\n class QLabel;\n@@ -87,10 +88,12 @@ class BitcoinGUI : public QMainWindow\n     QAction *backupWalletAction;\n     QAction *changePassphraseAction;\n     QAction *aboutQtAction;\n+    QAction *openRPCConsoleAction;\n \n     QSystemTrayIcon *trayIcon;\n     Notificator *notificator;\n     TransactionView *transactionView;\n+    RPCConsole *rpcConsole;\n \n     QMovie *syncIconMovie;\n "
      },
      {
        "sha": "d7172fd9cdd9378dee9ff7fc3de5490378a33d93",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=460c51fdad07c89b64b60d680bad7ba89c9d5ee2",
        "patch": "@@ -93,3 +93,8 @@ QString ClientModel::formatBuildDate() const\n {\n     return QString::fromStdString(CLIENT_DATE);\n }\n+\n+QString ClientModel::clientName() const\n+{\n+    return QString::fromStdString(CLIENT_NAME);\n+}"
      },
      {
        "sha": "74e0c0688f43ea87a7443165d7192684bce689e7",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=460c51fdad07c89b64b60d680bad7ba89c9d5ee2",
        "patch": "@@ -38,6 +38,7 @@ class ClientModel : public QObject\n \n     QString formatFullVersion() const;\n     QString formatBuildDate() const;\n+    QString clientName() const;\n \n private:\n     OptionsModel *optionsModel;"
      },
      {
        "sha": "bde607c5279a008b38c54322d28987d7d7bc4ecd",
        "filename": "src/qt/forms/rpcconsole.ui",
        "status": "added",
        "additions": 323,
        "deletions": 0,
        "changes": 323,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/src/qt/forms/rpcconsole.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/src/qt/forms/rpcconsole.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/rpcconsole.ui?ref=460c51fdad07c89b64b60d680bad7ba89c9d5ee2",
        "patch": "@@ -0,0 +1,323 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<ui version=\"4.0\">\n+ <class>RPCConsole</class>\n+ <widget class=\"QDialog\" name=\"RPCConsole\">\n+  <property name=\"geometry\">\n+   <rect>\n+    <x>0</x>\n+    <y>0</y>\n+    <width>706</width>\n+    <height>382</height>\n+   </rect>\n+  </property>\n+  <property name=\"windowTitle\">\n+   <string>Bitcoin debug window</string>\n+  </property>\n+  <layout class=\"QVBoxLayout\" name=\"verticalLayout_2\">\n+   <item>\n+    <widget class=\"QTabWidget\" name=\"tabWidget\">\n+     <property name=\"currentIndex\">\n+      <number>0</number>\n+     </property>\n+     <widget class=\"QWidget\" name=\"tab\">\n+      <attribute name=\"title\">\n+       <string>Information</string>\n+      </attribute>\n+      <layout class=\"QGridLayout\" name=\"gridLayout\" columnstretch=\"0,1\">\n+       <property name=\"horizontalSpacing\">\n+        <number>12</number>\n+       </property>\n+       <item row=\"1\" column=\"0\">\n+        <widget class=\"QLabel\" name=\"label_5\">\n+         <property name=\"text\">\n+          <string>Client name</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"1\" column=\"1\">\n+        <widget class=\"QLabel\" name=\"clientName\">\n+         <property name=\"text\">\n+          <string>N/A</string>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::PlainText</enum>\n+         </property>\n+         <property name=\"textInteractionFlags\">\n+          <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"2\" column=\"0\">\n+        <widget class=\"QLabel\" name=\"label_6\">\n+         <property name=\"text\">\n+          <string>Client version</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"2\" column=\"1\">\n+        <widget class=\"QLabel\" name=\"clientVersion\">\n+         <property name=\"text\">\n+          <string>N/A</string>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::PlainText</enum>\n+         </property>\n+         <property name=\"textInteractionFlags\">\n+          <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"0\" column=\"0\">\n+        <widget class=\"QLabel\" name=\"label_9\">\n+         <property name=\"font\">\n+          <font>\n+           <weight>75</weight>\n+           <bold>true</bold>\n+          </font>\n+         </property>\n+         <property name=\"text\">\n+          <string>Version</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"4\" column=\"0\">\n+        <widget class=\"QLabel\" name=\"label_11\">\n+         <property name=\"font\">\n+          <font>\n+           <weight>75</weight>\n+           <bold>true</bold>\n+          </font>\n+         </property>\n+         <property name=\"text\">\n+          <string>Network</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"5\" column=\"0\">\n+        <widget class=\"QLabel\" name=\"label_7\">\n+         <property name=\"text\">\n+          <string>Number of connections</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"5\" column=\"1\">\n+        <widget class=\"QLabel\" name=\"numberOfConnections\">\n+         <property name=\"text\">\n+          <string>N/A</string>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::PlainText</enum>\n+         </property>\n+         <property name=\"textInteractionFlags\">\n+          <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"6\" column=\"0\">\n+        <widget class=\"QLabel\" name=\"label_8\">\n+         <property name=\"text\">\n+          <string>On testnet</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"6\" column=\"1\">\n+        <widget class=\"QCheckBox\" name=\"isTestNet\">\n+         <property name=\"enabled\">\n+          <bool>false</bool>\n+         </property>\n+         <property name=\"text\">\n+          <string/>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"7\" column=\"0\">\n+        <widget class=\"QLabel\" name=\"label_10\">\n+         <property name=\"font\">\n+          <font>\n+           <weight>75</weight>\n+           <bold>true</bold>\n+          </font>\n+         </property>\n+         <property name=\"text\">\n+          <string>Block chain</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"8\" column=\"0\">\n+        <widget class=\"QLabel\" name=\"label_3\">\n+         <property name=\"text\">\n+          <string>Current number of blocks</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"8\" column=\"1\">\n+        <widget class=\"QLabel\" name=\"numberOfBlocks\">\n+         <property name=\"text\">\n+          <string>N/A</string>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::PlainText</enum>\n+         </property>\n+         <property name=\"textInteractionFlags\">\n+          <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"9\" column=\"0\">\n+        <widget class=\"QLabel\" name=\"label_4\">\n+         <property name=\"text\">\n+          <string>Estimated total blocks</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"9\" column=\"1\">\n+        <widget class=\"QLabel\" name=\"totalBlocks\">\n+         <property name=\"text\">\n+          <string>N/A</string>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::PlainText</enum>\n+         </property>\n+         <property name=\"textInteractionFlags\">\n+          <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"10\" column=\"0\">\n+        <widget class=\"QLabel\" name=\"label_2\">\n+         <property name=\"text\">\n+          <string>Last block time</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"10\" column=\"1\">\n+        <widget class=\"QLabel\" name=\"lastBlockTime\">\n+         <property name=\"text\">\n+          <string>N/A</string>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::PlainText</enum>\n+         </property>\n+         <property name=\"textInteractionFlags\">\n+          <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"11\" column=\"0\">\n+        <spacer name=\"verticalSpacer\">\n+         <property name=\"orientation\">\n+          <enum>Qt::Vertical</enum>\n+         </property>\n+         <property name=\"sizeHint\" stdset=\"0\">\n+          <size>\n+           <width>20</width>\n+           <height>40</height>\n+          </size>\n+         </property>\n+        </spacer>\n+       </item>\n+       <item row=\"3\" column=\"0\">\n+        <widget class=\"QLabel\" name=\"label_12\">\n+         <property name=\"text\">\n+          <string>Build date</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"3\" column=\"1\">\n+        <widget class=\"QLabel\" name=\"buildDate\">\n+         <property name=\"text\">\n+          <string>N/A</string>\n+         </property>\n+        </widget>\n+       </item>\n+      </layout>\n+     </widget>\n+     <widget class=\"QWidget\" name=\"tab_2\">\n+      <attribute name=\"title\">\n+       <string>Console</string>\n+      </attribute>\n+      <layout class=\"QVBoxLayout\" name=\"verticalLayout_3\">\n+       <property name=\"spacing\">\n+        <number>3</number>\n+       </property>\n+       <item>\n+        <widget class=\"QTableWidget\" name=\"messagesWidget\">\n+         <property name=\"minimumSize\">\n+          <size>\n+           <width>0</width>\n+           <height>100</height>\n+          </size>\n+         </property>\n+         <property name=\"tabKeyNavigation\">\n+          <bool>false</bool>\n+         </property>\n+         <property name=\"selectionBehavior\">\n+          <enum>QAbstractItemView::SelectRows</enum>\n+         </property>\n+         <property name=\"columnCount\">\n+          <number>2</number>\n+         </property>\n+         <attribute name=\"horizontalHeaderVisible\">\n+          <bool>false</bool>\n+         </attribute>\n+         <attribute name=\"verticalHeaderVisible\">\n+          <bool>false</bool>\n+         </attribute>\n+         <column/>\n+         <column/>\n+        </widget>\n+       </item>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n+         <property name=\"spacing\">\n+          <number>3</number>\n+         </property>\n+         <item>\n+          <widget class=\"QLabel\" name=\"label\">\n+           <property name=\"text\">\n+            <string>&gt;</string>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLineEdit\" name=\"lineEdit\"/>\n+         </item>\n+         <item>\n+          <widget class=\"QPushButton\" name=\"clearButton\">\n+           <property name=\"maximumSize\">\n+            <size>\n+             <width>24</width>\n+             <height>24</height>\n+            </size>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>Clear console</string>\n+           </property>\n+           <property name=\"text\">\n+            <string/>\n+           </property>\n+           <property name=\"icon\">\n+            <iconset resource=\"../bitcoin.qrc\">\n+             <normaloff>:/icons/remove</normaloff>:/icons/remove</iconset>\n+           </property>\n+           <property name=\"shortcut\">\n+            <string notr=\"true\">Ctrl+L</string>\n+           </property>\n+           <property name=\"autoDefault\">\n+            <bool>false</bool>\n+           </property>\n+          </widget>\n+         </item>\n+        </layout>\n+       </item>\n+      </layout>\n+     </widget>\n+    </widget>\n+   </item>\n+  </layout>\n+ </widget>\n+ <resources>\n+  <include location=\"../bitcoin.qrc\"/>\n+ </resources>\n+ <connections/>\n+</ui>"
      },
      {
        "sha": "d59f5c6a3864f77c61df47b22f59597a5209340e",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "added",
        "additions": 316,
        "deletions": 0,
        "changes": 316,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=460c51fdad07c89b64b60d680bad7ba89c9d5ee2",
        "patch": "@@ -0,0 +1,316 @@\n+#include \"rpcconsole.h\"\n+#include \"ui_rpcconsole.h\"\n+\n+#include \"clientmodel.h\"\n+#include \"bitcoinrpc.h\"\n+#include \"guiutil.h\"\n+\n+#include <QTime>\n+#include <QTimer>\n+#include <QThread>\n+#include <QTextEdit>\n+#include <QKeyEvent>\n+\n+#include <boost/tokenizer.hpp>\n+\n+// TODO: make it possible to filter out categories (esp debug messages when implemented)\n+// TODO: receive errors and debug messages through ClientModel\n+\n+const int CONSOLE_SCROLLBACK = 50;\n+const int CONSOLE_HISTORY = 50;\n+\n+/* Object for executing console RPC commands in a separate thread.\n+*/\n+class RPCExecutor: public QObject\n+{\n+    Q_OBJECT\n+public slots:\n+    void start();\n+    void request(const QString &command);\n+signals:\n+    void reply(int category, const QString &command);\n+};\n+\n+#include \"rpcconsole.moc\"\n+\n+void RPCExecutor::start()\n+{\n+   // Nothing to do\n+}\n+\n+void RPCExecutor::request(const QString &command)\n+{\n+    // Parse shell-like command line into separate arguments\n+    boost::escaped_list_separator<char> els('\\\\',' ','\\\"');\n+    std::string strCommand = command.toStdString();\n+    boost::tokenizer<boost::escaped_list_separator<char> > tok(strCommand, els);\n+\n+    std::string strMethod;\n+    std::vector<std::string> strParams;\n+    int n = 0;\n+    for(boost::tokenizer<boost::escaped_list_separator<char> >::iterator beg=tok.begin(); beg!=tok.end();++beg,++n)\n+    {\n+        if(n == 0) // First parameter is the command\n+            strMethod = *beg;\n+        else\n+            strParams.push_back(*beg);\n+    }\n+\n+    try {\n+        std::string strPrint;\n+        json_spirit::Value result = tableRPC.execute(strMethod, RPCConvertValues(strMethod, strParams));\n+\n+        // Format result reply\n+        if (result.type() == json_spirit::null_type)\n+            strPrint = \"\";\n+        else if (result.type() == json_spirit::str_type)\n+            strPrint = result.get_str();\n+        else\n+            strPrint = write_string(result, true);\n+\n+        emit reply(RPCConsole::CMD_REPLY, QString::fromStdString(strPrint));\n+    }\n+    catch (json_spirit::Object& objError)\n+    {\n+        emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(write_string(json_spirit::Value(objError), false)));\n+    }\n+    catch (std::exception& e)\n+    {\n+        emit reply(RPCConsole::CMD_ERROR, QString(\"Error: \") + QString::fromStdString(e.what()));\n+    }\n+}\n+\n+RPCConsole::RPCConsole(QWidget *parent) :\n+    QDialog(parent),\n+    ui(new Ui::RPCConsole),\n+    firstLayout(true),\n+    historyPtr(0)\n+{\n+    ui->setupUi(this);\n+    ui->messagesWidget->horizontalHeader()->setResizeMode(1, QHeaderView::Stretch);\n+    ui->messagesWidget->setContextMenuPolicy(Qt::ActionsContextMenu);\n+\n+    // Install event filter for up and down arrow\n+    ui->lineEdit->installEventFilter(this);\n+\n+    // Add \"Copy message\" to context menu explicitly\n+    QAction *copyMessageAction = new QAction(tr(\"&Copy\"), this);\n+    copyMessageAction->setShortcut(QKeySequence(Qt::CTRL | Qt::Key_C));\n+    copyMessageAction->setShortcutContext(Qt::WidgetShortcut);\n+    connect(copyMessageAction, SIGNAL(triggered()), this, SLOT(copyMessage()));\n+    ui->messagesWidget->addAction(copyMessageAction);\n+\n+    connect(ui->clearButton, SIGNAL(clicked()), this, SLOT(clear()));\n+\n+    startExecutor();\n+\n+    clear();\n+}\n+\n+RPCConsole::~RPCConsole()\n+{\n+    emit stopExecutor();\n+    delete ui;\n+}\n+\n+bool RPCConsole::event(QEvent *event)\n+{\n+   int returnValue = QWidget::event(event);\n+\n+   if (event->type() == QEvent::LayoutRequest && firstLayout)\n+   {\n+       // Work around QTableWidget issue:\n+       // Call resizeRowsToContents on first Layout request with widget visible,\n+       // to make sure multiline messages that were added before the console was shown\n+       // have the right height.\n+       if(ui->messagesWidget->isVisible())\n+       {\n+           firstLayout = false;\n+           ui->messagesWidget->resizeRowsToContents();\n+       }\n+       return true;\n+   }\n+\n+   return returnValue;\n+}\n+\n+bool RPCConsole::eventFilter(QObject* obj, QEvent *event)\n+{\n+    if(obj == ui->lineEdit)\n+    {\n+        if(event->type() == QEvent::KeyPress)\n+        {\n+            QKeyEvent *key = static_cast<QKeyEvent*>(event);\n+            switch(key->key())\n+            {\n+            case Qt::Key_Up: browseHistory(-1); return true;\n+            case Qt::Key_Down: browseHistory(1); return true;\n+            }\n+        }\n+    }\n+    return QDialog::eventFilter(obj, event);\n+}\n+\n+void RPCConsole::setClientModel(ClientModel *model)\n+{\n+    this->clientModel = model;\n+    if(model)\n+    {\n+        // Subscribe to information, replies, messages, errors\n+        connect(model, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n+        connect(model, SIGNAL(numBlocksChanged(int)), this, SLOT(setNumBlocks(int)));\n+\n+        // Provide initial values\n+        ui->clientVersion->setText(model->formatFullVersion());\n+        ui->clientName->setText(model->clientName());\n+        ui->buildDate->setText(model->formatBuildDate());\n+\n+        setNumConnections(model->getNumConnections());\n+        ui->isTestNet->setChecked(model->isTestNet());\n+\n+        setNumBlocks(model->getNumBlocks());\n+    }\n+}\n+\n+static QColor categoryColor(int category)\n+{\n+    switch(category)\n+    {\n+    case RPCConsole::MC_ERROR:     return QColor(255,0,0); break;\n+    case RPCConsole::MC_DEBUG:     return QColor(192,192,192); break;\n+    case RPCConsole::CMD_REQUEST:  return QColor(128,128,128); break;\n+    case RPCConsole::CMD_REPLY:    return QColor(128,255,128); break;\n+    case RPCConsole::CMD_ERROR:    return QColor(255,128,128); break;\n+    default:           return QColor(0,0,0);\n+    }\n+}\n+\n+void RPCConsole::clear()\n+{\n+    ui->messagesWidget->clear();\n+    ui->messagesWidget->setRowCount(0);\n+    ui->lineEdit->clear();\n+    ui->lineEdit->setFocus();\n+\n+    message(CMD_REPLY, tr(\"Welcome to the bitcoin RPC console.\")+\"\\n\"+\n+                       tr(\"Use up and down arrows to navigate history, and Ctrl-L to clear screen.\")+\"\\n\"+\n+                       tr(\"Type \\\"help\\\" for an overview of available commands.\"));\n+}\n+\n+void RPCConsole::message(int category, const QString &message)\n+{\n+    // Add row to messages widget\n+    int row = ui->messagesWidget->rowCount();\n+    ui->messagesWidget->setRowCount(row+1);\n+\n+    QTime time = QTime::currentTime();\n+    QTableWidgetItem *newTime = new QTableWidgetItem(time.toString());\n+    newTime->setData(Qt::DecorationRole, categoryColor(category));\n+    newTime->setForeground(QColor(128,128,128));\n+    newTime->setFlags(Qt::ItemIsSelectable|Qt::ItemIsEnabled); // make non-editable\n+\n+    int numLines = message.count(\"\\n\") + 1;\n+    // As Qt doesn't like very tall cells (they break scrolling) keep only short messages in\n+    // the cell text, longer messages trigger a display widget with scroll bar\n+    if(numLines < 5)\n+    {\n+        QTableWidgetItem *newItem = new QTableWidgetItem(message);\n+        newItem->setFlags(Qt::ItemIsSelectable|Qt::ItemIsEnabled); // make non-editable\n+        if(category == CMD_ERROR) // Coloring error messages in red\n+            newItem->setForeground(QColor(255,16,16));\n+        ui->messagesWidget->setItem(row, 1, newItem);\n+    } else {\n+        QTextEdit *newWidget = new QTextEdit;\n+        newWidget->setText(message);\n+        newWidget->setMaximumHeight(100);\n+        newWidget->setReadOnly(true);\n+        ui->messagesWidget->setCellWidget(row, 1, newWidget);\n+    }\n+\n+    ui->messagesWidget->setItem(row, 0, newTime);\n+    ui->messagesWidget->resizeRowToContents(row);\n+    // Preserve only limited scrollback buffer\n+    while(ui->messagesWidget->rowCount() > CONSOLE_SCROLLBACK)\n+        ui->messagesWidget->removeRow(0);\n+    // Scroll to bottom after table is updated\n+    QTimer::singleShot(0, ui->messagesWidget, SLOT(scrollToBottom()));\n+}\n+\n+void RPCConsole::setNumConnections(int count)\n+{\n+    ui->numberOfConnections->setText(QString::number(count));\n+}\n+\n+void RPCConsole::setNumBlocks(int count)\n+{\n+    ui->numberOfBlocks->setText(QString::number(count));\n+    if(clientModel)\n+    {\n+        ui->totalBlocks->setText(QString::number(clientModel->getNumBlocksOfPeers()));\n+        ui->lastBlockTime->setText(clientModel->getLastBlockDate().toString());\n+    }\n+}\n+\n+void RPCConsole::on_lineEdit_returnPressed()\n+{\n+    QString cmd = ui->lineEdit->text();\n+    ui->lineEdit->clear();\n+\n+    if(!cmd.isEmpty())\n+    {\n+        message(CMD_REQUEST, cmd);\n+        emit cmdRequest(cmd);\n+        // Truncate history from current position\n+        history.erase(history.begin() + historyPtr, history.end());\n+        // Append command to history\n+        history.append(cmd);\n+        // Enforce maximum history size\n+        while(history.size() > CONSOLE_HISTORY)\n+            history.removeFirst();\n+        // Set pointer to end of history\n+        historyPtr = history.size();\n+    }\n+}\n+\n+void RPCConsole::browseHistory(int offset)\n+{\n+    historyPtr += offset;\n+    if(historyPtr < 0)\n+        historyPtr = 0;\n+    if(historyPtr > history.size())\n+        historyPtr = history.size();\n+    QString cmd;\n+    if(historyPtr < history.size())\n+        cmd = history.at(historyPtr);\n+    ui->lineEdit->setText(cmd);\n+}\n+\n+void RPCConsole::startExecutor()\n+{\n+    QThread* thread = new QThread;\n+    RPCExecutor *executor = new RPCExecutor();\n+    executor->moveToThread(thread);\n+\n+    // Notify executor when thread started (in executor thread)\n+    connect(thread, SIGNAL(started()), executor, SLOT(start()));\n+    // Replies from executor object must go to this object\n+    connect(executor, SIGNAL(reply(int,QString)), this, SLOT(message(int,QString)));\n+    // Requests from this object must go to executor\n+    connect(this, SIGNAL(cmdRequest(QString)), executor, SLOT(request(QString)));\n+    // On stopExecutor signal\n+    // - queue executor for deletion (in execution thread)\n+    // - quit the Qt event loop in the execution thread\n+    connect(this, SIGNAL(stopExecutor()), executor, SLOT(deleteLater()));\n+    connect(this, SIGNAL(stopExecutor()), thread, SLOT(quit()));\n+    // Queue the thread for deletion (in this thread) when it is finished\n+    connect(thread, SIGNAL(finished()), thread, SLOT(deleteLater()));\n+\n+    // Default implementation of QThread::run() simply spins up an event loop in the thread,\n+    // which is what we want.\n+    thread->start();\n+}\n+\n+void RPCConsole::copyMessage()\n+{\n+    GUIUtil::copyEntryData(ui->messagesWidget, 1, Qt::EditRole);\n+}"
      },
      {
        "sha": "a0a73bedd35a2c8be20c56b9533efee0cea51dd6",
        "filename": "src/qt/rpcconsole.h",
        "status": "added",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/460c51fdad07c89b64b60d680bad7ba89c9d5ee2/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=460c51fdad07c89b64b60d680bad7ba89c9d5ee2",
        "patch": "@@ -0,0 +1,64 @@\n+#ifndef RPCCONSOLE_H\n+#define RPCCONSOLE_H\n+\n+#include <QDialog>\n+\n+namespace Ui {\n+    class RPCConsole;\n+}\n+class ClientModel;\n+\n+/** Local bitcoin RPC console. */\n+class RPCConsole: public QDialog\n+{\n+    Q_OBJECT\n+\n+public:\n+    explicit RPCConsole(QWidget *parent = 0);\n+    ~RPCConsole();\n+\n+    void setClientModel(ClientModel *model);\n+\n+    enum MessageClass {\n+        MC_ERROR,\n+        MC_DEBUG,\n+        CMD_REQUEST,\n+        CMD_REPLY,\n+        CMD_ERROR\n+    };\n+\n+protected:\n+    virtual bool event(QEvent *event);\n+    virtual bool eventFilter(QObject* obj, QEvent *event);\n+\n+private slots:\n+    void on_lineEdit_returnPressed();\n+\n+public slots:\n+    void clear();\n+    void message(int category, const QString &message);\n+    /** Set number of connections shown in the UI */\n+    void setNumConnections(int count);\n+    /** Set number of blocks shown in the UI */\n+    void setNumBlocks(int count);\n+    /** Go forward or back in history */\n+    void browseHistory(int offset);\n+    /** Copy currently selected message to clipboard */\n+    void copyMessage();\n+\n+signals:\n+    // For RPC command executor\n+    void stopExecutor();\n+    void cmdRequest(const QString &command);\n+\n+private:\n+    Ui::RPCConsole *ui;\n+    ClientModel *clientModel;\n+    bool firstLayout;\n+    QStringList history;\n+    int historyPtr;\n+\n+    void startExecutor();\n+};\n+\n+#endif // RPCCONSOLE_H"
      }
    ]
  }
]