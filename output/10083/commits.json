[
  {
    "sha": "dd5be2c7b35f0ecd1650a7f8cf08e692f6f41ccb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDViZTJjN2IzNWYwZWNkMTY1MGE3ZjhjZjA4ZTY5MmY2ZjQxY2Ni",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-03-26T05:47:27Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-03-26T05:47:27Z"
      },
      "message": "[QA] Renaming rawTx into rawtx",
      "tree": {
        "sha": "ebb60220995824e1ec6516bd4844a44f8a769c4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ebb60220995824e1ec6516bd4844a44f8a769c4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd5be2c7b35f0ecd1650a7f8cf08e692f6f41ccb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd5be2c7b35f0ecd1650a7f8cf08e692f6f41ccb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd5be2c7b35f0ecd1650a7f8cf08e692f6f41ccb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd5be2c7b35f0ecd1650a7f8cf08e692f6f41ccb/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "111849345bb5140f86b48e730ceab4bff45fa2e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/111849345bb5140f86b48e730ceab4bff45fa2e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/111849345bb5140f86b48e730ceab4bff45fa2e9"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 18,
      "deletions": 18
    },
    "files": [
      {
        "sha": "3bfc05d37b4bc9a7599b086e0b2972ac0386d4a7",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5be2c7b35f0ecd1650a7f8cf08e692f6f41ccb/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5be2c7b35f0ecd1650a7f8cf08e692f6f41ccb/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=dd5be2c7b35f0ecd1650a7f8cf08e692f6f41ccb",
        "patch": "@@ -322,8 +322,8 @@ def run_test(self):\n         #compare fee of a standard pubkeyhash transaction\n         inputs = []\n         outputs = {self.nodes[1].getnewaddress():1.1}\n-        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n+        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[0].fundrawtransaction(rawtx)\n \n         #create same transaction over sendtoaddress\n         txId = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1.1)\n@@ -338,8 +338,8 @@ def run_test(self):\n         #compare fee of a standard pubkeyhash transaction with multiple outputs\n         inputs = []\n         outputs = {self.nodes[1].getnewaddress():1.1,self.nodes[1].getnewaddress():1.2,self.nodes[1].getnewaddress():0.1,self.nodes[1].getnewaddress():1.3,self.nodes[1].getnewaddress():0.2,self.nodes[1].getnewaddress():0.3}\n-        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n+        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[0].fundrawtransaction(rawtx)\n         #create same transaction over sendtoaddress\n         txId = self.nodes[0].sendmany(\"\", outputs)\n         signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n@@ -364,8 +364,8 @@ def run_test(self):\n \n         inputs = []\n         outputs = {mSigObj:1.1}\n-        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n+        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[0].fundrawtransaction(rawtx)\n \n         #create same transaction over sendtoaddress\n         txId = self.nodes[0].sendtoaddress(mSigObj, 1.1)\n@@ -397,8 +397,8 @@ def run_test(self):\n \n         inputs = []\n         outputs = {mSigObj:1.1}\n-        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n+        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[0].fundrawtransaction(rawtx)\n \n         #create same transaction over sendtoaddress\n         txId = self.nodes[0].sendtoaddress(mSigObj, 1.1)\n@@ -432,8 +432,8 @@ def run_test(self):\n         oldBalance = self.nodes[1].getbalance()\n         inputs = []\n         outputs = {self.nodes[1].getnewaddress():1.1}\n-        rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n-        fundedTx = self.nodes[2].fundrawtransaction(rawTx)\n+        rawtx = self.nodes[2].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[2].fundrawtransaction(rawtx)\n \n         signedTx = self.nodes[2].signrawtransaction(fundedTx['hex'])\n         txId = self.nodes[2].sendrawtransaction(signedTx['hex'])\n@@ -469,10 +469,10 @@ def run_test(self):\n         self.nodes[1].getnewaddress()\n         inputs = []\n         outputs = {self.nodes[0].getnewaddress():1.1}\n-        rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         # fund a transaction that requires a new key for the change output\n         # creating the key must be impossible because the wallet is locked\n-        assert_raises_jsonrpc(-4, \"Keypool ran out, please call keypoolrefill first\", self.nodes[1].fundrawtransaction, rawTx)\n+        assert_raises_jsonrpc(-4, \"Keypool ran out, please call keypoolrefill first\", self.nodes[1].fundrawtransaction, rawtx)\n \n         #refill the keypool\n         self.nodes[1].walletpassphrase(\"test\", 100)\n@@ -484,8 +484,8 @@ def run_test(self):\n \n         inputs = []\n         outputs = {self.nodes[0].getnewaddress():1.1}\n-        rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n-        fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n+        rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[1].fundrawtransaction(rawtx)\n \n         #now we need to unlock\n         self.nodes[1].walletpassphrase(\"test\", 600)\n@@ -516,8 +516,8 @@ def run_test(self):\n         #fund a tx with ~20 small inputs\n         inputs = []\n         outputs = {self.nodes[0].getnewaddress():0.15,self.nodes[0].getnewaddress():0.04}\n-        rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n-        fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n+        rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[1].fundrawtransaction(rawtx)\n \n         #create same transaction over sendtoaddress\n         txId = self.nodes[1].sendmany(\"\", outputs)\n@@ -548,8 +548,8 @@ def run_test(self):\n \n         inputs = []\n         outputs = {self.nodes[0].getnewaddress():0.15,self.nodes[0].getnewaddress():0.04}\n-        rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n-        fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n+        rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        fundedTx = self.nodes[1].fundrawtransaction(rawtx)\n         fundedAndSignedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n         txId = self.nodes[1].sendrawtransaction(fundedAndSignedTx['hex'])\n         self.sync_all()"
      }
    ]
  }
]