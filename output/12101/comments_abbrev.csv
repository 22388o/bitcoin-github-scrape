sipa,2018-01-06T10:34:21Z,"I'd feel more comfortable using int64, but add a clamp (if value is over 100 years, set it to 100 years or so).",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-355738288,355738288,
gmaxwell,2018-01-08T10:51:35Z,"> Giving big number does not make sense.\n\nYes it does.  A common and recommended configuration on a system with an online wallet which would otherwise not be encrypted is to encrypt and then manually unlock any time the system is restarted.  If we did not allow a setting which was effectively 'until restart' these systems would simply not use encryption.\n\nThis configuration saved localbitc",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-355934970,355934970,
achow101,2018-01-08T16:10:20Z,I have changed this to clamp at 2^31 seconds so the wallet will lock for up to 2^31 seconds which is approximately 68 years. This number was chosen because the `time_t` type that is used for the timer can be a 32 bit signed integer on some systems so this will avoid sign flipping with such systems.,https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-356011213,356011213,
achow101,2018-01-08T20:00:35Z,I don't know why travis is failing.,https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-356079074,356079074,
bolekC,2018-01-08T21:35:52Z,"Maybe add a limit to ""help"" printout? \n2272:`            ""2. timeout            (numeric, required) The time to keep the decryption key in seconds.\n""`\n",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-356104054,356104054,
bolekC,2018-01-09T21:14:15Z,"It looks like Travis test fails on 32bit architecture. There is something wrong as you get a lot of messages like:\n`JSONRPCException: Error: Please enter the wallet passphrase with walletpassphrase first.`\nI don't know yet why you get it yet.\n\nAlso you can see that in the log printout there is a wrong value:\n`node1 2018-01-08 18:52:07.849526 queue run of timer lockwallet(wallet.dat) in -",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-356415999,356415999,
achow101,2018-01-10T19:21:00Z,"@bolekC Added some info about the limit to the help output.\n\nI think I fixed the travis error. It has to do with the type of the value being shifted. The log output is correct.",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-356708053,356708053,
achow101,2018-01-10T21:24:51Z,I changed the clamp to be at 2^31 - 1 seconds. Hopefully that fixes the travis problem with 32-bit linux.,https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-356741496,356741496,
laanwj,2018-01-11T13:21:56Z,"utACK, agree that clamping is marginally better in this specific case, as there is no standardized way to specify ""forever"" and unlocking for 68 years might was well be forever.",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-356932153,356932153,
bolekC,2018-01-11T22:02:24Z,"Maybe you can add some more observability from C++ code to debug.log \nIt can help to find what is wrong with tests on 32bit.\n\nIt looks like you get similar fault as original one but only on 32 bits now. From the log you can see that actual_time is 0. This is taken from pwallet->nRelockTime. So if it is 0 then the wallet is locked. \n\nI don't see how this can happen. It might be some other",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-357075687,357075687,
achow101,2018-01-11T22:55:48Z,"@bolekC It has nothing to do with the 64 bit integer but rather overflowing on a 32-bit integer. Actually, this could be a problem related to single precision floats. I'm not sure, so I added debugging output so we can see what is wrong on travis.",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-357088689,357088689,
achow101,2018-01-12T01:49:14Z,"This travis error continues to confuse me. It does not appear to be a sign issue in the `timeval` struct, yet the wallet is still locking immediately.",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-357119485,357119485,
achow101,2018-01-12T05:00:59Z,I got fed up with debugging this thing and just lowered the clamp to 2^30 seconds. I believe that should work and ~34 years is still long enough.,https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-357143832,357143832,
MarcoFalke,2018-01-12T16:17:03Z,"Please adjust the OP, since that ends up in the commit body of the merge commit.",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-357282781,357282781,
achow101,2018-01-12T16:38:29Z,@MarcoFalke adjusted,https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-357288738,357288738,
bolekC,2018-01-12T21:09:43Z,"I still think we don't understand the fault's root cause very well. This 32bit failing doesn't give a rest.\nI have tested this functionality on 32bit version (0.15.1 without your fixes). What I have found is:\n\n1. with big timeout (e.g. famous 9223372036854776) bitcoind (sometimes!!!) crashes with\n`libevent: event.c:3117: Assertion tv->tv_usec >= 0 failed in timeout_next`\n- this one shoul",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-357354653,357354653,
achow101,2018-01-12T21:29:53Z,"> I still think we don't understand the fault's root cause very well.\n\nThat's correct. I have no clue why it is failing, although I believe it has to do with floating point numbers. I'm pretty sure the issue has to do with the `timeval` struct, in particular `tv.tv_sec`'s type of `time_t`.\n\n> I suspect QTimer implementation but I have not succeeded to troubleshoot it yet.\n\nWe don't use",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-357359409,357359409,
bolekC,2018-01-12T22:59:00Z,Sure it's `libevent`. I've mixed it up. There must be something wrong somewhere :),https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-357377686,357377686,
laanwj,2018-01-15T08:39:54Z,"> We don't use QTimers. Rather it uses libevent, so the issue lies in their implementation AFAICT.\n\nIn the most common case, yes. IIRC it does use QTimers when -server is false in the GUI: in that case libevent isn't initialized. Multiple timer implementations can be registered through `RPCSetTimerInterface`.\n",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-357615715,357615715,
laanwj,2018-01-16T11:57:46Z,"Not sure why I didn't think of this sooner: but another thing we can do instead of clamping the time when larger than a certain value, is to not use a timer at all in that case - interpret large numbers as 'infinite', unlocking forever (or until manually re-locked). Of course, this needs to be documented.\n\nThis avoids having to cope with timer edge-case behavior entirely.\n",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-357938753,357938753,
MarcoFalke,2018-01-16T16:22:50Z,"Since it seems infeasible to support large timeouts and clamping doesn't work very well on every platform, I'd prefer the approach by @laanwj to unlock and just return and not set any (potentially false) timers",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-358017765,358017765,
ryanofsky,2018-01-16T17:13:06Z,"> clamping doesn't work very well on every platform\n\nWhere are you seeing this? It seems like current implementation should work on every platform. Agree that laanwj's suggestion would make code a little cleaner, but the behavior for all practical purposes would seem identical to what is implemented here.\n\nAlso, regardless of anything, current PR seems like an improvement over status the q",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-358034251,358034251,
MarcoFalke,2018-01-16T17:58:10Z,"> Where are you seeing this?\n\nThe ""magic value"" was determined by ""ok, `std::numeric_limits<int32_t>::max()` doesn't work, so let's go a bit lower and try again"". See\n\n> I got fed up with debugging this thing and just lowered the clamp to 2^30 seconds\n\n> Also, regardless of anything, current PR seems like an improvement over status the quo.\n\nAgree.",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-358049514,358049514,
MarcoFalke,2018-01-16T18:08:53Z,utACK 134cdc7cee3da7c554e40ad947a9cdcbb3069f13,https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-358053102,358053102,
achow101,2018-01-16T18:13:25Z,"> clamping doesn't work very well on every platform\n\nWe would still need some magic value where all of the values less than it are valid timeouts. Using `std::numeric_limits<int32_t>::max()` as the cutoff magic value for an infinite timeout would still be problematic as using certain values less than that would still result in invalid timeouts. Changing it from clamping to ""infinite timeout cu",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-358054644,358054644,
ryanofsky,2018-01-16T18:26:33Z,I think the suggestion is to simply not call RPCRunLater if there is an infinite timeout.,https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-358058562,358058562,
bolekC,2018-01-16T21:06:44Z,"Just to remind that **we don't know the root cause** of this behaviour. Suspected is `libevent` library.\n\nDescribed behaviour is that with big number wallet gets locked immediately so probably timeout is fired right after the command to set timer is given. I have observed also that sometimes this is few seconds delayed if bitcoind is heavily occupied with some tasks. This suggests event handli",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-358105623,358105623,
ajtowns,2018-01-17T10:28:56Z,"`0 <= nSleepTime <= 1,073,741,824` in wallet/rpcwallet.cpp is an int64_t, measured in seconds\n\n`pwallet->nRelockTime = GetTime()+nSleepTime` in wallet/rpcwallet.cpp is an int64_t, so will only overflow when GetTime() returns `2**30*(2**33-1)` which is about 292 million millenia away, and it's only used for printing in any event.\n\n`nSleepTime` gets passed to RPCRunLater which multiplies it ",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-358262507,358262507,
ajtowns,2018-01-17T10:36:37Z,"Okay, retrying with the limit being `2**31-1`, I get a libevent timeout at time `-631,298,485` which then gets handled immediately, causing the wallet to be relocked. I don't know why libevent handles that timeout immediately, but appears happy to leave a timeout corresponding to `-2**32` or just after Y2038 pending indefinitely.",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-358264524,358264524,
laanwj,2018-01-17T11:17:54Z,"> Also, regardless of anything, current PR seems like an improvement over status the quo.\n\nOK, I agree. I was just a bit wary of setting a timer that we assume will never trigger at all, might as well not set it, but indeed this improves on the issue. Can be improved later.\nutACK 134cdc7",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-358274394,358274394,
Sjors,2018-02-22T09:40:19Z,"This change seems to break `wallet_encryption.py` on MacOS, see #12375 by @AkioNak. ",https://github.com/bitcoin/bitcoin/pull/12101#issuecomment-367623015,367623015,
luke-jr,2018-01-06T07:15:22Z,Probably shouldn't set this until *after* the sanity checks...,https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160019745,160019745,src/wallet/rpcwallet.cpp
luke-jr,2018-01-06T07:16:28Z,"Probably should use `int`, not `int32_t` (they're not guaranteed to be the same)",https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160019755,160019755,src/wallet/rpcwallet.cpp
achow101,2018-01-06T07:19:31Z,Done.,https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160019865,160019865,src/wallet/rpcwallet.cpp
achow101,2018-01-06T07:19:37Z,"Oops, fixed.",https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160019887,160019887,src/wallet/rpcwallet.cpp
luke-jr,2018-01-06T07:21:10Z,Still need to check the passphrase etc first... otherwise we've essentially tricked the wallet into lengthening its unlock time.,https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160019905,160019905,src/wallet/rpcwallet.cpp
achow101,2018-01-06T07:23:33Z,"Fixed.\n\n`nRelockTime` isn't actually used for anything except displaying stuff in `getwalletinfo` so this wouldn't actually be a problem.",https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160019931,160019931,src/wallet/rpcwallet.cpp
luke-jr,2018-01-06T07:24:58Z,Do we want to allow zero?,https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160019947,160019947,src/wallet/rpcwallet.cpp
luke-jr,2018-01-06T07:25:17Z,2147483648 is not guaranteed to be out of range.,https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160019951,160019951,test/functional/wallet-encryption.py
luke-jr,2018-01-06T07:26:14Z,"Displaying the wrong time is kind of a problem, although maybe not a security one.",https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160019958,160019958,src/wallet/rpcwallet.cpp
achow101,2018-01-06T07:27:25Z,What would be the point of allowing 0?,https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160019984,160019984,src/wallet/rpcwallet.cpp
luke-jr,2018-01-06T07:28:18Z,Perhaps to just test if the passphrase is correct. (You're *currently* allowing zero here.),https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160019991,160019991,src/wallet/rpcwallet.cpp
achow101,2018-01-06T07:32:05Z,"> (You're currently allowing zero here.)\n\nRight.\n\nIt doesn't matter either way IMO.",https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160020062,160020062,src/wallet/rpcwallet.cpp
achow101,2018-01-06T07:34:54Z,How can you guarantee that a number will be out of range?,https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160020102,160020102,test/functional/wallet-encryption.py
bolekC,2018-01-06T22:55:58Z,"Why don't you add test for 2147483647? It should work correctly for this value but we don't test it today.\nOn the other hand waiting for timeout could be too long :) It should just accept the value.\n  ",https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160036843,160036843,test/functional/wallet-encryption.py
bolekC,2018-01-06T23:01:17Z,"Accepting 2147483647 (years long timeout) does not make too much sense in the time of Meltdown and Spectre vulnerabilities.\nAnyway having timeout on the level of single days can be too long for these type of attacks. ",https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160036933,160036933,src/wallet/rpcwallet.cpp
jimpo,2018-01-10T19:43:52Z,nit: Python allows [chained comparisons](https://docs.python.org/3/reference/expressions.html#comparisons): `expected_time <= actual_time < expected_time + 5`,https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160779697,160779697,test/functional/wallet-encryption.py
achow101,2018-01-10T20:08:37Z,Done,https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160785990,160785990,test/functional/wallet-encryption.py
MarcoFalke,2018-01-10T20:46:06Z,"Might want to use the provided `assert_greater...` helper methods to give a more verbose output in case of failure.\n\nCurrent error shows only:\n\n```\nFile ""/home/travis/build/bitcoin/bitcoin/build/bitcoin-i686-pc-linux-gnu/test/functional/wallet-encryption.py"", line 68, in run_test\n    assert expected_time <= actual_time < expected_time + 5 # 5 second buffer\nAssertionError\n```\n\na",https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160793653,160793653,test/functional/wallet-encryption.py
achow101,2018-01-10T20:57:50Z,Done.,https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160796267,160796267,test/functional/wallet-encryption.py
MarcoFalke,2018-01-10T21:42:28Z,"You could use the named constexpr `std::numeric_limits<int32_t>::max()`.\n\nAlso, how does that take into account your observation that ""the time_t type that is used for the timer can be a 32 bit signed integer on some systems"". (Considering that nSleepTime is multiplied by 1000 somewhere down in the call stack)",https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160806318,160806318,src/wallet/rpcwallet.cpp
achow101,2018-01-10T21:58:43Z,"> You could use the named constexpr `std::numeric_limits<int32_t>::max()`.\n\nI'll try that now.\n\n> Also, how does that take into account your observation that ""the time_t type that is used for the timer can be a 32 bit signed integer on some systems"". (Considering that nSleepTime is multiplied by 1000 somewhere down in the call stack)\n\nIt's multiplied by 1000 and then divided by 1000 be",https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160810186,160810186,src/wallet/rpcwallet.cpp
MarcoFalke,2018-01-10T23:41:47Z,"Ah, ok. But since nSleepTime represents a delta, that is added onto `GetTime()`, capping it at the max of int32_t is not enough?",https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160830277,160830277,src/wallet/rpcwallet.cpp
achow101,2018-01-10T23:54:40Z,The timer itself uses the delta. The only thing that's added is `wallet->nRelockTime` which is only used for display in `getwalletinfo`.,https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160832057,160832057,src/wallet/rpcwallet.cpp
laanwj,2018-01-11T13:22:30Z,The clamping semantics need to be in the documentation.,https://github.com/bitcoin/bitcoin/pull/12101#discussion_r160956012,160956012,src/wallet/rpcwallet.cpp
achow101,2018-01-11T18:06:40Z,Done.,https://github.com/bitcoin/bitcoin/pull/12101#discussion_r161031786,161031786,src/wallet/rpcwallet.cpp
ryanofsky,2018-01-16T15:47:43Z,Could just write 1L instead of casting 1.,https://github.com/bitcoin/bitcoin/pull/12101#discussion_r161797998,161797998,src/wallet/rpcwallet.cpp
achow101,2018-01-16T18:07:45Z,I was having some problems with using 1L on 32 bit systems so explicitly casting it like this seemed to be better.,https://github.com/bitcoin/bitcoin/pull/12101#discussion_r161839813,161839813,src/wallet/rpcwallet.cpp
