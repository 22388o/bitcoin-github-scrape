[
  {
    "sha": "3b14c57fe3fc20ee40439db4484dd3f474b74071",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjE0YzU3ZmUzZmMyMGVlNDA0MzlkYjQ0ODRkZDNmNDc0Yjc0MDcx",
    "commit": {
      "author": {
        "name": "Sishir Giri",
        "email": "sishirg27@gmail.com",
        "date": "2021-01-03T19:47:01Z"
      },
      "committer": {
        "name": "Sishir Giri",
        "email": "sishirg27@gmail.com",
        "date": "2021-05-27T20:28:52Z"
      },
      "message": "test:Miniwallet:added create_and_sign_rawtx option",
      "tree": {
        "sha": "2e9a507b270bd30ea0c8548c5edc028ceb61c154",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e9a507b270bd30ea0c8548c5edc028ceb61c154"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b14c57fe3fc20ee40439db4484dd3f474b74071",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b14c57fe3fc20ee40439db4484dd3f474b74071",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b14c57fe3fc20ee40439db4484dd3f474b74071",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b14c57fe3fc20ee40439db4484dd3f474b74071/comments",
    "author": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e8f3928f1dd4e33a51e5e76b3c254e85097fc90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e8f3928f1dd4e33a51e5e76b3c254e85097fc90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e8f3928f1dd4e33a51e5e76b3c254e85097fc90"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7d3e4eac57765fb38611e5d7ad8a63ce59e0d182",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b14c57fe3fc20ee40439db4484dd3f474b74071/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b14c57fe3fc20ee40439db4484dd3f474b74071/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=3b14c57fe3fc20ee40439db4484dd3f474b74071",
        "patch": "@@ -123,7 +123,7 @@ def get_utxo(self, *, txid='', mark_as_spent=True):\n         else:\n             return self._utxos[index]\n \n-    def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_spend=None):\n+    def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_spend=None, submit_tx=True):\n         \"\"\"Create and send a tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n         tx = self.create_self_transfer(fee_rate=fee_rate, from_node=from_node, utxo_to_spend=utxo_to_spend)\n         self.sendrawtransaction(from_node=from_node, tx_hex=tx['hex'])\n@@ -154,6 +154,7 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n             tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n         tx_hex = tx.serialize().hex()\n \n+        tx_hex = tx.serialize().hex()\n         tx_info = from_node.testmempoolaccept([tx_hex])[0]\n         assert_equal(mempool_valid, tx_info['allowed'])\n         if mempool_valid:"
      }
    ]
  },
  {
    "sha": "9d2b30cc059681e964202294f918af4300c661de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDJiMzBjYzA1OTY4MWU5NjQyMDIyOTRmOTE4YWY0MzAwYzY2MWRl",
    "commit": {
      "author": {
        "name": "Sishir Giri",
        "email": "sishirg27@gmail.com",
        "date": "2021-02-19T15:06:27Z"
      },
      "committer": {
        "name": "Sishir Giri",
        "email": "sishirg27@gmail.com",
        "date": "2021-05-27T20:28:52Z"
      },
      "message": "test:run mempool_limit with wallet disabled",
      "tree": {
        "sha": "bd79b6339b6024e5e60e30dc66121d8eeb7e7ef7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd79b6339b6024e5e60e30dc66121d8eeb7e7ef7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d2b30cc059681e964202294f918af4300c661de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d2b30cc059681e964202294f918af4300c661de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d2b30cc059681e964202294f918af4300c661de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d2b30cc059681e964202294f918af4300c661de/comments",
    "author": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b14c57fe3fc20ee40439db4484dd3f474b74071",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b14c57fe3fc20ee40439db4484dd3f474b74071",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b14c57fe3fc20ee40439db4484dd3f474b74071"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 31,
      "deletions": 35
    },
    "files": [
      {
        "sha": "776f106bd675c30ae19550d4bb7cd4a2cf5cfc75",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 31,
        "deletions": 35,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d2b30cc059681e964202294f918af4300c661de/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d2b30cc059681e964202294f918af4300c661de/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=9d2b30cc059681e964202294f918af4300c661de",
        "patch": "@@ -7,7 +7,9 @@\n from decimal import Decimal\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, gen_return_txouts\n+from test_framework.wallet import MiniWallet\n+from test_framework.messages import CTransaction, FromHex\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -20,55 +22,49 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        mempool_min_fee = node.getmempoolinfo()['mempoolminfee']\n+        base_fee = relayfee*1000\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee, mempool_min_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert_greater_than(len([txid for batch in txids for txid in batch]), len(node.getrawmempool()))\n+        assert txid not in node.getrawmempool() # check txid in the raw mempool\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        assert_raises_rpc_error(-26, \"mempool min fee not met\", miniwallet.send_self_transfer, from_node=node, fee_rate=relayfee)\n+\n+    def create_large_transactions(self, node, txouts, miniwallet, num, fee, mempool_min_fee):\n+        large_txids = []\n+        for j in range(num):\n+            hex = miniwallet.send_self_transfer(from_node=node, fee_rate=fee, submit_tx=False)['hex']\n+            tx = FromHex(CTransaction(), hex)\n+            tx.vout.extend(txouts)\n+            tx_hex = tx.serialize().hex()\n+            txid = node.sendrawtransaction(tx_hex, 0)\n+            large_txids.append(txid)\n+        return large_txids\n \n if __name__ == '__main__':\n     MempoolLimitTest().main()"
      }
    ]
  }
]