[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756346617",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-756346617",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20874",
    "id": 756346617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1NjM0NjYxNw==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-07T19:55:13Z",
    "updated_at": "2021-05-28T07:55:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21178 (test: run mempool_reorg.py even with wallet disabled by DariusParvin)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756346617/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/757083465",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-757083465",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20874",
    "id": 757083465,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1NzA4MzQ2NQ==",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?u=302489a175aae611d43804dff7b4cfced6278320&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-09T02:52:21Z",
    "updated_at": "2021-01-09T02:57:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mjdietzx Thank you very much for the review. I just pushed an update shortening the methods in `miniwallet` class by adding `prepare_tx` and also resolved most of your comments ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/757083465/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/757576998",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-757576998",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20874",
    "id": 757576998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1NzU3Njk5OA==",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?u=302489a175aae611d43804dff7b4cfced6278320&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-11T00:57:07Z",
    "updated_at": "2021-01-11T00:57:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@mjdietzx Thank you very much for the review. Pushed a new update highlighting all the comments and also updated `MiniWallet` by adding  just-create-don't-send method as proposed by @glozow in #20876. Also, I believe the new `create_and_sign_rawtx` method should resolve @nginocchio's issues as proposed in #20808",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/757576998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771118938",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-771118938",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20874",
    "id": 771118938,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTExODkzOA==",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?u=302489a175aae611d43804dff7b4cfced6278320&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-01T19:59:47Z",
    "updated_at": "2021-02-01T19:59:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thank you @glozow @mjdietzx  for the review. Added stronger assertion as suggested :) ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771118938/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/790713787",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-790713787",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20874",
    "id": 790713787,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDcxMzc4Nw==",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?u=302489a175aae611d43804dff7b4cfced6278320&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T15:46:48Z",
    "updated_at": "2021-03-04T15:46:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Concept ACK. I actually think a cleaner approach would be to make `create_lots_of_big_transactions` and the other util.py transaction not need wallet. Could reduce the amount of refactoring needed in each of the functional tests?\r\n\r\n@glozow Thank you very much for the review!\r\nAre you suggesting an alternative way to create_lots_of_big_transactions or just simply getting rid of it?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/790713787/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821574478",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-821574478",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20874",
    "id": 821574478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMTU3NDQ3OA==",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?u=302489a175aae611d43804dff7b4cfced6278320&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-16T21:31:14Z",
    "updated_at": "2021-04-16T21:31:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thank you @DariusParvin  for the review. Added changes as suggested",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821574478/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/852164687",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-852164687",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20874",
    "id": 852164687,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjE2NDY4Nw==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-01T14:19:25Z",
    "updated_at": "2021-06-01T14:19:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n\ud83d\udc19 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/852164687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/883165494",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-883165494",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20874",
    "id": 883165494,
    "node_id": "IC_kwDOABII5840pAk2",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-20T07:32:49Z",
    "updated_at": "2021-07-20T07:32:49Z",
    "author_association": "MEMBER",
    "body": "Are you still working on this?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/883165494/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/883623943",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-883623943",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20874",
    "id": 883623943,
    "node_id": "IC_kwDOABII5840qwgH",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?u=302489a175aae611d43804dff7b4cfced6278320&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-20T19:02:30Z",
    "updated_at": "2021-07-20T19:02:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Are you still working on this?\r\n\r\nNot at the moment, have been busy with work and classes",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/883623943/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554068735",
    "pull_request_review_id": 564423905,
    "id": 554068735,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA2ODczNQ==",
    "diff_hunk": "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)",
    "path": "test/functional/mempool_limit.py",
    "position": 35,
    "original_position": 34,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "joelklabo",
      "id": 264977,
      "node_id": "MDQ6VXNlcjI2NDk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/264977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joelklabo",
      "html_url": "https://github.com/joelklabo",
      "followers_url": "https://api.github.com/users/joelklabo/followers",
      "following_url": "https://api.github.com/users/joelklabo/following{/other_user}",
      "gists_url": "https://api.github.com/users/joelklabo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joelklabo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joelklabo/subscriptions",
      "organizations_url": "https://api.github.com/users/joelklabo/orgs",
      "repos_url": "https://api.github.com/users/joelklabo/repos",
      "events_url": "https://api.github.com/users/joelklabo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joelklabo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Just curious, is there a reason to generate blocks through the MiniWallet and the TestNode separately?",
    "created_at": "2021-01-08T16:55:36Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554068735",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554068735"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554068735"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554068735/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 37,
    "original_line": 37,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554073731",
    "pull_request_review_id": 564429452,
    "id": 554073731,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA3MzczMQ==",
    "diff_hunk": "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)",
    "path": "test/functional/mempool_limit.py",
    "position": 35,
    "original_position": 34,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "We generate blocks in `MiniWallet` so we have utxos to spend (coinbases). It is helpful to generate 100 blocks on the node separately, so all the utxos in MiniWallet are mature.\r\n\r\nIf we just did, miniwallet.generate(191), only 91 of the utxos in mini wallets utxo set will be mature. And it gets tricky because some miniwallet transactions will now fail (And we don't necessarily know which utxo we are gonna get as mini wallet sorts them by size)",
    "created_at": "2021-01-08T17:03:10Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554073731",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554073731"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554073731"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554073731/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 37,
    "original_line": 37,
    "side": "RIGHT",
    "in_reply_to_id": 554068735
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554079938",
    "pull_request_review_id": 564437518,
    "id": 554079938,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA3OTkzOA==",
    "diff_hunk": "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        relayfee = node.getnetworkinfo()['relayfee']",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 49,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Not sure if `relayfee = node.getnetworkinfo()['relayfee']` is needed here anymore. seems like it shouldn't have changed, right?",
    "created_at": "2021-01-08T17:14:44Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554079938",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554079938"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554079938"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554079938/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 40,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554087398",
    "pull_request_review_id": 564437518,
    "id": 554087398,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4NzM5OA==",
    "diff_hunk": "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        relayfee = node.getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in node.getrawmempool()\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')",
    "path": "test/functional/mempool_limit.py",
    "position": 65,
    "original_position": 62,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: might as well fix this type-o `minrelytxfee` => `minrelaytxfee`?",
    "created_at": "2021-01-08T17:28:20Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554087398",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554087398"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554087398"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554087398/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 51,
    "original_line": 51,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554090506",
    "pull_request_review_id": 564437518,
    "id": 554090506,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA5MDUwNg==",
    "diff_hunk": "@@ -77,3 +77,30 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fee'], fee)\n         return {'txid': txid, 'wtxid': tx_info['wtxid'], 'hex': tx_hex}\n+\n+    def send_multi_self_transfer(self, *, fee_rate=Decimal(\"0.03\"), from_node, utxo_to_spend=None, big_txouts=None):\n+        \"\"\"Create multiple tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n+        self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n+        utxo_to_spend = utxo_to_spend or self._utxos.pop() # Pick the largest utxo (if none provided) and hope it covers the fee\n+        send_value = satoshi_round(utxo_to_spend['value'] - fee_rate)\n+        fee = utxo_to_spend['value'] - send_value\n+        assert send_value > 0\n+\n+        tx = CTransaction()\n+        tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']))]\n+        tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_hex = tx.serialize().hex()\n+\n+        if(big_txouts is not None):",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 20,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: need a space between `if` and `(`. I think our linter won't even want the parenthesis (superfluous parenthesis). Really, why not just do: `if big_txouts:` ... `else:`",
    "created_at": "2021-01-08T17:34:17Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554090506",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554090506"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554090506"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554090506/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 96,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554092198",
    "pull_request_review_id": 564437518,
    "id": 554092198,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA5MjE5OA==",
    "diff_hunk": "@@ -77,3 +77,30 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fee'], fee)\n         return {'txid': txid, 'wtxid': tx_info['wtxid'], 'hex': tx_hex}\n+\n+    def send_multi_self_transfer(self, *, fee_rate=Decimal(\"0.03\"), from_node, utxo_to_spend=None, big_txouts=None):\n+        \"\"\"Create multiple tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n+        self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n+        utxo_to_spend = utxo_to_spend or self._utxos.pop() # Pick the largest utxo (if none provided) and hope it covers the fee\n+        send_value = satoshi_round(utxo_to_spend['value'] - fee_rate)\n+        fee = utxo_to_spend['value'] - send_value\n+        assert send_value > 0\n+\n+        tx = CTransaction()\n+        tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']))]\n+        tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_hex = tx.serialize().hex()\n+\n+        if(big_txouts is not None):\n+            for txout in big_txouts:\n+                tx.vout.append(txout)",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 22,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: `tx.vout.extend(big_txouts)` would have the same behavior and get rid of a loop",
    "created_at": "2021-01-08T17:37:37Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554092198",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554092198"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554092198"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554092198/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 97,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 98,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554093130",
    "pull_request_review_id": 564437518,
    "id": 554093130,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA5MzEzMA==",
    "diff_hunk": "@@ -77,3 +77,30 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fee'], fee)\n         return {'txid': txid, 'wtxid': tx_info['wtxid'], 'hex': tx_hex}\n+\n+    def send_multi_self_transfer(self, *, fee_rate=Decimal(\"0.03\"), from_node, utxo_to_spend=None, big_txouts=None):\n+        \"\"\"Create multiple tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n+        self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n+        utxo_to_spend = utxo_to_spend or self._utxos.pop() # Pick the largest utxo (if none provided) and hope it covers the fee\n+        send_value = satoshi_round(utxo_to_spend['value'] - fee_rate)\n+        fee = utxo_to_spend['value'] - send_value\n+        assert send_value > 0\n+\n+        tx = CTransaction()\n+        tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']))]\n+        tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_hex = tx.serialize().hex()\n+\n+        if(big_txouts is not None):\n+            for txout in big_txouts:\n+                tx.vout.append(txout)\n+            tx_hex = tx.serialize().hex()\n+            txid = from_node.sendrawtransaction(tx_hex, 0)\n+        else:\n+            txid = from_node.sendrawtransaction(tx_hex)",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 26,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Do we even want this `else` condition? I would think `big_txouts` should be a required param. Otherwise this branch seems to just duplicate `send_self_transfer`",
    "created_at": "2021-01-08T17:39:28Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554093130",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554093130"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554093130"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554093130/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 102,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554102596",
    "pull_request_review_id": 564437518,
    "id": 554102596,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDEwMjU5Ng==",
    "diff_hunk": "@@ -77,3 +77,30 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fee'], fee)\n         return {'txid': txid, 'wtxid': tx_info['wtxid'], 'hex': tx_hex}\n+\n+    def send_multi_self_transfer(self, *, fee_rate=Decimal(\"0.03\"), from_node, utxo_to_spend=None, big_txouts=None):\n+        \"\"\"Create multiple tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n+        self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n+        utxo_to_spend = utxo_to_spend or self._utxos.pop() # Pick the largest utxo (if none provided) and hope it covers the fee\n+        send_value = satoshi_round(utxo_to_spend['value'] - fee_rate)",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 9,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`fee_rate` seems to be a confusing param name. As this is now just the absolute `fee`, right? ",
    "created_at": "2021-01-08T17:57:42Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554102596",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554102596"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554102596"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554102596/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 85,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554108817",
    "pull_request_review_id": 564437518,
    "id": 554108817,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDEwODgxNw==",
    "diff_hunk": "@@ -77,3 +77,30 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fee'], fee)\n         return {'txid': txid, 'wtxid': tx_info['wtxid'], 'hex': tx_hex}\n+\n+    def send_multi_self_transfer(self, *, fee_rate=Decimal(\"0.03\"), from_node, utxo_to_spend=None, big_txouts=None):",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 5,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm not sure this method name is ideal? I was expecting multiple txns, but I guess this sends one big transaction? I'm not sure `send_big_self_transfer` would be better, but just want to double check on naming here",
    "created_at": "2021-01-08T18:10:28Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554108817",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554108817"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554108817"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554108817/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 81,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554110427",
    "pull_request_review_id": 564437518,
    "id": 554110427,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDExMDQyNw==",
    "diff_hunk": "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        relayfee = node.getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 54,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I know this is existing behavior. But I'ma little confused because `txids` aren't used. Should we be checking these are in the mempool?",
    "created_at": "2021-01-08T18:13:42Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554110427",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554110427"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554110427"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554110427/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 45,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554112536",
    "pull_request_review_id": 564437518,
    "id": 554112536,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDExMjUzNg==",
    "diff_hunk": "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        relayfee = node.getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in node.getrawmempool()\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        insufficient_fee_utxo = miniwallet.get_utxo()",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 77,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is there a need to grab a specific utxo here? I would think you can just let miniwallet pick it, and do:\r\n\r\n`assert_raises_rpc_error(-26, \"mempool min fee not met\", miniwallet.send_self_transfer, from_node=node, fee_rate=relayfee)`",
    "created_at": "2021-01-08T18:17:50Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554112536",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554112536"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554112536"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554112536/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 54,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554115491",
    "pull_request_review_id": 564437518,
    "id": 554115491,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDExNTQ5MQ==",
    "diff_hunk": "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        relayfee = node.getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in node.getrawmempool()\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        insufficient_fee_utxo = miniwallet.get_utxo()",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 77,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think there is some confusing behavior here. bc you generate 91 utxos, then spend 1, spend 3*30, and are now spending again (so this won't spend a Coinbase, rather it'll spend one of our previous transactions).\r\n\r\nAnd bc you explicitly `get_utxo` you are going to get the utxo from last transaction from `create_large_transactions` . Whereas if you let MiniWallet pick, it'd sort the utxo set by value, and you'd probably get the transaction that was evicted from the mempool since it had the lowest fee. idk what would happen in that case, very confusing to me.\r\n\r\nAnyways, maybe you just want to generate 92 utxos at the get-go?",
    "created_at": "2021-01-08T18:23:45Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554115491",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554115491"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554115491"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554115491/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 54,
    "side": "RIGHT",
    "in_reply_to_id": 554112536
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554117463",
    "pull_request_review_id": 564437518,
    "id": 554117463,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDExNzQ2Mw==",
    "diff_hunk": "@@ -77,3 +77,30 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fee'], fee)\n         return {'txid': txid, 'wtxid': tx_info['wtxid'], 'hex': tx_hex}\n+\n+    def send_multi_self_transfer(self, *, fee_rate=Decimal(\"0.03\"), from_node, utxo_to_spend=None, big_txouts=None):\n+        \"\"\"Create multiple tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n+        self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n+        utxo_to_spend = utxo_to_spend or self._utxos.pop() # Pick the largest utxo (if none provided) and hope it covers the fee\n+        send_value = satoshi_round(utxo_to_spend['value'] - fee_rate)\n+        fee = utxo_to_spend['value'] - send_value\n+        assert send_value > 0\n+\n+        tx = CTransaction()\n+        tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']))]\n+        tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_hex = tx.serialize().hex()\n+\n+        if(big_txouts is not None):\n+            for txout in big_txouts:\n+                tx.vout.append(txout)\n+            tx_hex = tx.serialize().hex()\n+            txid = from_node.sendrawtransaction(tx_hex, 0)\n+        else:\n+            txid = from_node.sendrawtransaction(tx_hex)\n+        self._utxos.append({'txid': txid, 'vout': 0, 'value': send_value})\n+        tx_info = from_node.getmempoolentry(txid)\n+        assert_equal(tx_info['fee'], fee)",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 29,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Just want to confirm that we no longer need a `vsize` assertion. I guess we don't know the `vsize` or don't care since we are passing an absolute fee and not calculating the fee based on vsize*fee_rate?",
    "created_at": "2021-01-08T18:27:25Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554117463",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554117463"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554117463"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554117463/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 99,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554276038",
    "pull_request_review_id": 564675030,
    "id": 554276038,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI3NjAzOA==",
    "diff_hunk": "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        relayfee = node.getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 54,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm not very sure about that too. I just followed the existing behavior and kept it there. If it really serves no purpose, i can either get rid of it or add a test case to check those txs in the mempool",
    "created_at": "2021-01-09T02:11:37Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554276038",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554276038"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554276038"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554276038/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 45,
    "side": "RIGHT",
    "in_reply_to_id": 554110427
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554279481",
    "pull_request_review_id": 564677460,
    "id": 554279481,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI3OTQ4MQ==",
    "diff_hunk": "@@ -77,3 +77,30 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fee'], fee)\n         return {'txid': txid, 'wtxid': tx_info['wtxid'], 'hex': tx_hex}\n+\n+    def send_multi_self_transfer(self, *, fee_rate=Decimal(\"0.03\"), from_node, utxo_to_spend=None, big_txouts=None):\n+        \"\"\"Create multiple tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n+        self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n+        utxo_to_spend = utxo_to_spend or self._utxos.pop() # Pick the largest utxo (if none provided) and hope it covers the fee\n+        send_value = satoshi_round(utxo_to_spend['value'] - fee_rate)\n+        fee = utxo_to_spend['value'] - send_value\n+        assert send_value > 0\n+\n+        tx = CTransaction()\n+        tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']))]\n+        tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_hex = tx.serialize().hex()\n+\n+        if(big_txouts is not None):\n+            for txout in big_txouts:\n+                tx.vout.append(txout)\n+            tx_hex = tx.serialize().hex()\n+            txid = from_node.sendrawtransaction(tx_hex, 0)\n+        else:\n+            txid = from_node.sendrawtransaction(tx_hex)\n+        self._utxos.append({'txid': txid, 'vout': 0, 'value': send_value})\n+        tx_info = from_node.getmempoolentry(txid)\n+        assert_equal(tx_info['fee'], fee)",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 29,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes thats what i realized. Also the `vsize` changed (from 96 to 67552) while making big txs  and therefore checking it with a constant value of 96 didn't really make sense. I can however, add an assertion to check big tx `vsize` since they're all the same. Do you recommend? ",
    "created_at": "2021-01-09T02:44:51Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554279481",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554279481"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554279481"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554279481/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 99,
    "side": "RIGHT",
    "in_reply_to_id": 554117463
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554280046",
    "pull_request_review_id": 564677817,
    "id": 554280046,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI4MDA0Ng==",
    "diff_hunk": "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)",
    "path": "test/functional/mempool_limit.py",
    "position": 35,
    "original_position": 34,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@joelklabo I used the previous `miniWallet` tests as reference to generate utxos like the one done here  https://github.com/bitcoin/bitcoin/pull/20688/files  ",
    "created_at": "2021-01-09T02:50:06Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554280046",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554280046"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554280046"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554280046/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 37,
    "original_line": 37,
    "side": "RIGHT",
    "in_reply_to_id": 554068735
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554296055",
    "pull_request_review_id": 564686877,
    "id": 554296055,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI5NjA1NQ==",
    "diff_hunk": "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)",
    "path": "test/functional/mempool_limit.py",
    "position": 35,
    "original_position": 34,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "joelklabo",
      "id": 264977,
      "node_id": "MDQ6VXNlcjI2NDk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/264977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joelklabo",
      "html_url": "https://github.com/joelklabo",
      "followers_url": "https://api.github.com/users/joelklabo/followers",
      "following_url": "https://api.github.com/users/joelklabo/following{/other_user}",
      "gists_url": "https://api.github.com/users/joelklabo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joelklabo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joelklabo/subscriptions",
      "organizations_url": "https://api.github.com/users/joelklabo/orgs",
      "repos_url": "https://api.github.com/users/joelklabo/repos",
      "events_url": "https://api.github.com/users/joelklabo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joelklabo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Great, thanks been confused about that for a bit. I'll check it out!",
    "created_at": "2021-01-09T05:48:28Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554296055",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554296055"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554296055"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554296055/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 37,
    "original_line": 37,
    "side": "RIGHT",
    "in_reply_to_id": 554068735
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554611793",
    "pull_request_review_id": 564893296,
    "id": 554611793,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxMTc5Mw==",
    "diff_hunk": "@@ -20,55 +21,43 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n \n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in node.getrawmempool()\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        assert_raises_rpc_error(-26, \"mempool min fee not met\", miniwallet.send_self_transfer, from_node=node, fee_rate=relayfee)\n+\n+    def create_large_transactions(self, node, txouts, miniwallet, num, fee):\n+        large_txids = []\n+        for _ in range(num):\n+            large_txids.append(miniwallet.send_big_self_transfer(from_node=node, big_txouts=txouts, fee=fee)['txid'])\n+        return large_txids",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 82,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "if you wanted to be \"cool\" you could do:\r\n```python\r\nreturn map(lambda: miniwallet.send_big_self_transfer(from_node=node, big_txouts=txouts, fee=fee)['txid'], range(num))\r\n```",
    "created_at": "2021-01-10T19:29:32Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554611793",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554611793"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554611793"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554611793/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 57,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 67,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554612178",
    "pull_request_review_id": 564893296,
    "id": 554612178,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxMjE3OA==",
    "diff_hunk": "@@ -20,55 +21,43 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n \n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in node.getrawmempool()\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))",
    "path": "test/functional/mempool_limit.py",
    "position": 69,
    "original_position": 65,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "so just for my understanding, I guess `mempoolminfee` increases as the mempool fills up? Would you mind explaining this to me or linking to some info/code so I can learn? thanks",
    "created_at": "2021-01-10T19:33:26Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554612178",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554612178"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554612178"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554612178/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 53,
    "original_line": 53,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554612333",
    "pull_request_review_id": 564893296,
    "id": 554612333,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxMjMzMw==",
    "diff_hunk": "@@ -64,16 +73,28 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n         fee = utxo_to_spend['value'] - send_value\n         assert send_value > 0\n \n-        tx = CTransaction()\n-        tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']))]\n-        tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n-        tx.wit.vtxinwit = [CTxInWitness()]\n-        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx = self.prepare_tx(utxo_to_spend, send_value)\n         tx_hex = tx.serialize().hex()\n-\n         txid = from_node.sendrawtransaction(tx_hex)\n         self._utxos.append({'txid': txid, 'vout': 0, 'value': send_value})\n         tx_info = from_node.getmempoolentry(txid)\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fee'], fee)\n         return {'txid': txid, 'wtxid': tx_info['wtxid'], 'hex': tx_hex}\n+\n+    def send_big_self_transfer(self, *, fee, from_node, utxo_to_spend=None, big_txouts):",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 35,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think `big_txouts` should come before the optional `utxo_to_spend=None` to spend now that it's required, right?",
    "created_at": "2021-01-10T19:35:02Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554612333",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554612333"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554612333"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554612333/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 85,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554613176",
    "pull_request_review_id": 564893296,
    "id": 554613176,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxMzE3Ng==",
    "diff_hunk": "@@ -55,6 +55,15 @@ def get_utxo(self, *, txid=''):\n             index = self._utxos.index(utxo)\n         return self._utxos.pop(index)\n \n+    def prepare_tx(self, utxo_to_spend, send_value):",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 4,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "See this: https://github.com/bitcoin/bitcoin/pull/20808#discussion_r554610229\r\n\r\nBasically I'm wondering if you're going to even need to touch `MiniWallet` in this PR if we can align here. If we extend `MiniWallet` to have an option to \"just-create-don't-send\" then you could\r\n1) create the base tx with `MiniWallet` but don't send\r\n2) add all the `big_txouts` to that `tx`\r\n3) send it yourself, outside of `MiniWallet`\r\n\r\nTo me it seems like that may be the cleanest solution",
    "created_at": "2021-01-10T19:41:50Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554613176",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554613176"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554613176"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554613176/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554613266",
    "pull_request_review_id": 564893296,
    "id": 554613266,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxMzI2Ng==",
    "diff_hunk": "@@ -77,3 +77,30 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fee'], fee)\n         return {'txid': txid, 'wtxid': tx_info['wtxid'], 'hex': tx_hex}\n+\n+    def send_multi_self_transfer(self, *, fee_rate=Decimal(\"0.03\"), from_node, utxo_to_spend=None, big_txouts=None):\n+        \"\"\"Create multiple tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n+        self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n+        utxo_to_spend = utxo_to_spend or self._utxos.pop() # Pick the largest utxo (if none provided) and hope it covers the fee\n+        send_value = satoshi_round(utxo_to_spend['value'] - fee_rate)\n+        fee = utxo_to_spend['value'] - send_value\n+        assert send_value > 0\n+\n+        tx = CTransaction()\n+        tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']))]\n+        tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_hex = tx.serialize().hex()\n+\n+        if(big_txouts is not None):\n+            for txout in big_txouts:\n+                tx.vout.append(txout)\n+            tx_hex = tx.serialize().hex()\n+            txid = from_node.sendrawtransaction(tx_hex, 0)\n+        else:\n+            txid = from_node.sendrawtransaction(tx_hex)\n+        self._utxos.append({'txid': txid, 'vout': 0, 'value': send_value})\n+        tx_info = from_node.getmempoolentry(txid)\n+        assert_equal(tx_info['fee'], fee)",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 29,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm not really sure tbh. But we may be able to get rid of all of this, re one of my other comments in this review",
    "created_at": "2021-01-10T19:42:47Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554613266",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554613266"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554613266"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554613266/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 99,
    "side": "RIGHT",
    "in_reply_to_id": 554117463
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554613440",
    "pull_request_review_id": 564893296,
    "id": 554613440,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxMzQ0MA==",
    "diff_hunk": "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        relayfee = node.getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 54,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "543919b4b19b98867b3eebc33b38c87f4fd164a3",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Since it's not related to this PR I'd leave it. But I think adding an assertion to check all these txs are in the mempool would be good, and at least its a sanity check to make sure everything is as we expect",
    "created_at": "2021-01-10T19:43:49Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554613440",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554613440"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554613440"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554613440/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 45,
    "side": "RIGHT",
    "in_reply_to_id": 554110427
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554637482",
    "pull_request_review_id": 564910980,
    "id": 554637482,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYzNzQ4Mg==",
    "diff_hunk": "@@ -20,55 +21,43 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n \n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in node.getrawmempool()\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))",
    "path": "test/functional/mempool_limit.py",
    "position": 69,
    "original_position": 65,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The `mempoolminfee` is adjusted whenever the mempool reaches `maxmempool` size, and therefore it kicks out all the transaction below that fee, to make space for tx with accepted fees. I can't find a specific method in the codebase as of now but i'll lyk if I find it ",
    "created_at": "2021-01-10T23:10:12Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554637482",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554637482"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554637482"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554637482/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 53,
    "original_line": 53,
    "side": "RIGHT",
    "in_reply_to_id": 554612178
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554637532",
    "pull_request_review_id": 564911033,
    "id": 554637532,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYzNzUzMg==",
    "diff_hunk": "@@ -20,55 +21,43 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n \n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in node.getrawmempool()\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        assert_raises_rpc_error(-26, \"mempool min fee not met\", miniwallet.send_self_transfer, from_node=node, fee_rate=relayfee)\n+\n+    def create_large_transactions(self, node, txouts, miniwallet, num, fee):\n+        large_txids = []\n+        for _ in range(num):\n+            large_txids.append(miniwallet.send_big_self_transfer(from_node=node, big_txouts=txouts, fee=fee)['txid'])\n+        return large_txids",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 82,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "oh ya! I'll try that \ud83d\ude0e",
    "created_at": "2021-01-10T23:10:50Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554637532",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554637532"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554637532"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554637532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 57,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 67,
    "side": "RIGHT",
    "in_reply_to_id": 554611793
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554638069",
    "pull_request_review_id": 564911420,
    "id": 554638069,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYzODA2OQ==",
    "diff_hunk": "@@ -55,6 +55,15 @@ def get_utxo(self, *, txid=''):\n             index = self._utxos.index(utxo)\n         return self._utxos.pop(index)\n \n+    def prepare_tx(self, utxo_to_spend, send_value):",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 4,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "\ud83e\udd14 hmm i'll look into it and try to find a clean solution",
    "created_at": "2021-01-10T23:14:56Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554638069",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554638069"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554638069"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554638069/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT",
    "in_reply_to_id": 554613176
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554642629",
    "pull_request_review_id": 564914842,
    "id": 554642629,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDY0MjYyOQ==",
    "diff_hunk": "@@ -55,6 +55,15 @@ def get_utxo(self, *, txid=''):\n             index = self._utxos.index(utxo)\n         return self._utxos.pop(index)\n \n+    def prepare_tx(self, utxo_to_spend, send_value):",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 4,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If I take this approach the code would be a lot cleaner but i'd have to get rid of some of the assertion checks for the tx because, i dont think i'll have access to variables such as `send_value` or `fee` unless I really dig into the `tx` list: \r\n\r\n<details open>\r\n<summary>This code...</summary>\r\n \r\n  <pre>minwallet._utxos.append({'txid': txid, 'vout': 0, 'value': send_value})  \r\ntx_info = node.getmempoolentry(txid)\r\nassert_equal(tx_info['fee'], fee)\r\nlarge_txids.append({'txid': txid, 'wtxid': tx_info['wtxid'], 'hex': tx_hex})  </pre>\r\n \r\n</details>  \r\n\r\nThe assertions & appends aren't used in the current code. So i'm tempted to not include them in the new code unless they modify `MiniWallet` variable behaviors. ",
    "created_at": "2021-01-10T23:53:20Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554642629",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554642629"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554642629"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554642629/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT",
    "in_reply_to_id": 554613176
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554647971",
    "pull_request_review_id": 564918943,
    "id": 554647971,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDY0Nzk3MQ==",
    "diff_hunk": "@@ -20,55 +21,43 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n \n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in node.getrawmempool()\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))",
    "path": "test/functional/mempool_limit.py",
    "position": 69,
    "original_position": 65,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ah ok interesting, thanks for the explanation",
    "created_at": "2021-01-11T00:36:47Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554647971",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554647971"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554647971"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554647971/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 53,
    "original_line": 53,
    "side": "RIGHT",
    "in_reply_to_id": 554612178
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554648846",
    "pull_request_review_id": 564919647,
    "id": 554648846,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDY0ODg0Ng==",
    "diff_hunk": "@@ -55,6 +55,15 @@ def get_utxo(self, *, txid=''):\n             index = self._utxos.index(utxo)\n         return self._utxos.pop(index)\n \n+    def prepare_tx(self, utxo_to_spend, send_value):",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 4,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think it's normal to do some assertions outside of MiniWallet if you think they're needed. ie we have things in the current miniwallet tests like: `assert_equal(entry_time, node.getmempoolentry(parent_txid)['time'])` after sending a transaction.\r\n\r\nAnyways do what you think is best here. If my proposed solution ends up having problems or doesn't make sense I don't want to mislead you",
    "created_at": "2021-01-11T00:44:09Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554648846",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554648846"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554648846"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554648846/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT",
    "in_reply_to_id": 554613176
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554650544",
    "pull_request_review_id": 564921027,
    "id": 554650544,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDY1MDU0NA==",
    "diff_hunk": "@@ -55,6 +55,15 @@ def get_utxo(self, *, txid=''):\n             index = self._utxos.index(utxo)\n         return self._utxos.pop(index)\n \n+    def prepare_tx(self, utxo_to_spend, send_value):",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 4,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "For sure! pushed a new commit with required changes :) ",
    "created_at": "2021-01-11T00:58:38Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554650544",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554650544"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554650544"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554650544/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT",
    "in_reply_to_id": 554613176
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556008790",
    "pull_request_review_id": 566590616,
    "id": 556008790,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAwODc5MA==",
    "diff_hunk": "@@ -20,55 +21,47 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n \n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in txids # check txid inside the txids list",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 59,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "f5eb2bcca4233f3a444c30daf551e79932eb4171",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I was expecting something more along the lines of:\r\n`assert txid in node.getrawmempool() for txid in txids`\r\n\r\nidk if that actually works, maybe\r\n```assert_equal(len(list(lambda txid: txid in node.getrawmempool(), txids)), len(txids))```",
    "created_at": "2021-01-12T19:08:03Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556008790",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556008790"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556008790"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556008790/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 47,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556011882",
    "pull_request_review_id": 566590616,
    "id": 556011882,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAxMTg4Mg==",
    "diff_hunk": "@@ -20,55 +21,47 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n \n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in txids # check txid inside the txids list\n+        assert txid not in node.getrawmempool() # check txid in the rawmempool\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        assert_raises_rpc_error(-26, \"mempool min fee not met\", miniwallet.send_self_transfer, from_node=node, fee_rate=relayfee)\n+\n+    def create_large_transactions(self, node, txouts, miniwallet, num, fee):\n+        large_txids = []\n+        for _ in range(num):\n+            tx = miniwallet.create_and_sign_rawtx(from_node=node, flat_fee=fee)",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 82,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "f5eb2bcca4233f3a444c30daf551e79932eb4171",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If you pull in this change https://github.com/bitcoin/bitcoin/pull/20808/files#diff-7932a60a9127fd22d10d367526fd7b987f9647ce017595f8b1af5c32d5db0083R58-R59\r\n\r\nI think you could do\r\n```python\r\ntx = miniwallet.create_and_sign_rawtx(from_node=node, fee_rate=fee_rate, submit_tx=False)  # calculate `fee_rate` so it yields the flat fee that you want\r\ntx.vout.extend(txouts)\r\n...\r\n```\r\n",
    "created_at": "2021-01-12T19:13:23Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556011882",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556011882"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556011882"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556011882/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 60,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556045577",
    "pull_request_review_id": 566642005,
    "id": 556045577,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjA0NTU3Nw==",
    "diff_hunk": "@@ -20,55 +21,47 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n \n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in txids # check txid inside the txids list",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 59,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "f5eb2bcca4233f3a444c30daf551e79932eb4171",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm not really sure what this line does. You are asserting that none of the txns have the same txid?",
    "created_at": "2021-01-12T19:57:45Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556045577",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556045577"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556045577"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556045577/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 47,
    "side": "RIGHT",
    "in_reply_to_id": 556008790
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556046096",
    "pull_request_review_id": 566642005,
    "id": 556046096,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjA0NjA5Ng==",
    "diff_hunk": "@@ -20,55 +21,47 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n \n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in txids # check txid inside the txids list\n+        assert txid not in node.getrawmempool() # check txid in the rawmempool",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 60,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "f5eb2bcca4233f3a444c30daf551e79932eb4171",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You can do a stronger assertion\r\n```suggestion\r\n        assert_equal(sorted(txids), sorted(node.getrawmempool()))\r\n```",
    "created_at": "2021-01-12T19:58:44Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556046096",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556046096"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556046096"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556046096/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 48,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556065978",
    "pull_request_review_id": 566642005,
    "id": 556065978,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjA2NTk3OA==",
    "diff_hunk": "@@ -55,6 +55,15 @@ def get_utxo(self, *, txid=''):\n             index = self._utxos.index(utxo)\n         return self._utxos.pop(index)\n \n+    def prepare_tx(self, utxo_to_spend, send_value):",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 4,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "f5eb2bcca4233f3a444c30daf551e79932eb4171",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could we get a more informative function name and/or description? Also I think you should rename to `utxos` and make it a list. \"utxo_to_spend\" is kinda like \"uneaten food to be eaten.\"",
    "created_at": "2021-01-12T20:26:56Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556065978",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556065978"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556065978"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556065978/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556090529",
    "pull_request_review_id": 566695432,
    "id": 556090529,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjA5MDUyOQ==",
    "diff_hunk": "@@ -20,55 +21,47 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n \n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in txids # check txid inside the txids list\n+        assert txid not in node.getrawmempool() # check txid in the rawmempool\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        assert_raises_rpc_error(-26, \"mempool min fee not met\", miniwallet.send_self_transfer, from_node=node, fee_rate=relayfee)\n+\n+    def create_large_transactions(self, node, txouts, miniwallet, num, fee):\n+        large_txids = []\n+        for _ in range(num):\n+            tx = miniwallet.create_and_sign_rawtx(from_node=node, flat_fee=fee)",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 82,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "f5eb2bcca4233f3a444c30daf551e79932eb4171",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I did try that solution but the issue was on `flat_fee` vs calculated fee, and i believe `create_large_tx` uses flat_fee. I didn't wanted to use multiple if/else to make the code look unattractive. I did however find a hack by changing the base fee from `base_fee = relayfee*100` => `base_fee = relayfee*1000` . This didn't change the overall behavior of the test code, but changed the `mempoolminfee` which is pretty expected. \r\n\r\nI'm just wondering if we would need `flat_fee` based `create-dont-send-tx` for future reference? And if we do, would that require a different method?\r\n",
    "created_at": "2021-01-12T20:58:51Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556090529",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556090529"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556090529"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556090529/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 60,
    "side": "RIGHT",
    "in_reply_to_id": 556011882
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556093381",
    "pull_request_review_id": 566699078,
    "id": 556093381,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjA5MzM4MQ==",
    "diff_hunk": "@@ -20,55 +21,47 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n \n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in txids # check txid inside the txids list",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 59,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "f5eb2bcca4233f3a444c30daf551e79932eb4171",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I was just trying to check whether txid is present in the txids list or not. We checked txid's presence in the mempool but txids was just left hanging, so i was just working around an assertion for txids ",
    "created_at": "2021-01-12T21:03:56Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556093381",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556093381"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556093381"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556093381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 47,
    "side": "RIGHT",
    "in_reply_to_id": 556008790
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556099951",
    "pull_request_review_id": 566707403,
    "id": 556099951,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjA5OTk1MQ==",
    "diff_hunk": "@@ -20,55 +21,47 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n \n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in txids # check txid inside the txids list",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 59,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "f5eb2bcca4233f3a444c30daf551e79932eb4171",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Sure, but why do you need to do that?",
    "created_at": "2021-01-12T21:16:15Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556099951",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556099951"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556099951"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556099951/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 47,
    "side": "RIGHT",
    "in_reply_to_id": 556008790
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556106325",
    "pull_request_review_id": 566715173,
    "id": 556106325,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjEwNjMyNQ==",
    "diff_hunk": "@@ -20,55 +21,47 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n \n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in txids # check txid inside the txids list\n+        assert txid not in node.getrawmempool() # check txid in the rawmempool",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 60,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "f5eb2bcca4233f3a444c30daf551e79932eb4171",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I believe there are 90 txs in `txids`,  and 65 in `getrawmempool`. I tested this with the current code because I thought there was some issue with my code, but same result",
    "created_at": "2021-01-12T21:27:38Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556106325",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556106325"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556106325"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556106325/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 48,
    "side": "RIGHT",
    "in_reply_to_id": 556046096
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556107823",
    "pull_request_review_id": 566717043,
    "id": 556107823,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjEwNzgyMw==",
    "diff_hunk": "@@ -55,6 +55,15 @@ def get_utxo(self, *, txid=''):\n             index = self._utxos.index(utxo)\n         return self._utxos.pop(index)\n \n+    def prepare_tx(self, utxo_to_spend, send_value):",
    "path": "test/functional/test_framework/wallet.py",
    "position": null,
    "original_position": 4,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "f5eb2bcca4233f3a444c30daf551e79932eb4171",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "\ud83d\ude05 my bad. Have never too good at naming functions. But will definitely keep in mind",
    "created_at": "2021-01-12T21:30:28Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556107823",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556107823"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556107823"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556107823/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT",
    "in_reply_to_id": 556065978
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556123615",
    "pull_request_review_id": 566736641,
    "id": 556123615,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjEyMzYxNQ==",
    "diff_hunk": "@@ -20,55 +21,47 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n \n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in txids # check txid inside the txids list",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 59,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "f5eb2bcca4233f3a444c30daf551e79932eb4171",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@mjdietzx the assertion didn't work and I believe its because `len(txids)` is 3 with this format `[[*txs*],[*txs*],[*txs*]]` and each of the `*txs*` has 30 transactions. And `node.getrawmempool()` is just a giant list with 65 txs \u2639\ufe0f",
    "created_at": "2021-01-12T22:00:21Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556123615",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556123615"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556123615"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556123615/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 47,
    "side": "RIGHT",
    "in_reply_to_id": 556008790
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576981713",
    "pull_request_review_id": 591431002,
    "id": 576981713,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk4MTcxMw==",
    "diff_hunk": "@@ -20,55 +22,50 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)",
    "path": "test/functional/mempool_limit.py",
    "position": 35,
    "original_position": 35,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "18951db04dc01ce2c331dd4e6d19984b909bf117",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": " Generating blocks takes a few seconds in valgrind, so I am thinking if this test may benefit from using `miniwallet.scan_blocks` (to be introduced in #21200). I haven't looked at the details as why you picked 92 blocks to be mined, but if you can do with just 25 mature coinbases, this could make sense.",
    "created_at": "2021-02-16T16:57:23Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r576981713",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576981713"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r576981713"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576981713/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 37,
    "original_line": 37,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579258951",
    "pull_request_review_id": 594284796,
    "id": 579258951,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTI1ODk1MQ==",
    "diff_hunk": "@@ -20,55 +22,50 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)",
    "path": "test/functional/mempool_limit.py",
    "position": 35,
    "original_position": 35,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "18951db04dc01ce2c331dd4e6d19984b909bf117",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`Miniwallet.scan_blocks` looks amazing! Can't wait to use it. The reason behind 92 is that we are creating 90 transaction as a part of `create_large_transactions` method. Also, the same number is present in the current code, so I just thought about mimicking it. ",
    "created_at": "2021-02-19T15:15:21Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r579258951",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579258951"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r579258951"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579258951/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 37,
    "original_line": 37,
    "side": "RIGHT",
    "in_reply_to_id": 576981713
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598360954",
    "pull_request_review_id": 617080163,
    "id": 598360954,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODM2MDk1NA==",
    "diff_hunk": "@@ -20,55 +22,50 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        mempool_min_fee = node.getmempoolinfo()['mempoolminfee']\n+        base_fee = relayfee*1000\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee, mempool_min_fee)",
    "path": "test/functional/mempool_limit.py",
    "position": 56,
    "original_position": 56,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "a478bf775f9d153aeb20dcf0010a039a1842635b",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What is the purpose of creating these transactions within this loop with the fee increasing each time? It seems unnecessarily complicated but I am probably missing something.",
    "created_at": "2021-03-22T00:04:41Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r598360954",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598360954"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r598360954"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598360954/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 45,
    "original_line": 45,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598370784",
    "pull_request_review_id": 617080163,
    "id": 598370784,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODM3MDc4NA==",
    "diff_hunk": "@@ -20,55 +22,50 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        mempool_min_fee = node.getmempoolinfo()['mempoolminfee']\n+        base_fee = relayfee*1000\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee, mempool_min_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert_equal(len([tx for txid in txids for tx in txid]), len(node.getrawmempool()))\n+        assert txid not in node.getrawmempool() # check txid in the raw mempool\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        assert_raises_rpc_error(-26, \"mempool min fee not met\", miniwallet.send_self_transfer, from_node=node, fee_rate=relayfee)\n+\n+    def create_large_transactions(self, node, txouts, miniwallet, num, fee, mempool_min_fee):\n+        large_txids = []\n+        for j in range(num):\n+            hex = miniwallet.send_self_transfer(from_node=node, fee_rate=fee, submit_tx=False)['hex']\n+            tx = FromHex(CTransaction(), hex)\n+            tx.vout.extend(txouts)\n+            tx_hex = tx.serialize().hex()\n+            txids = node.sendrawtransaction(tx_hex, 0)",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 89,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "a478bf775f9d153aeb20dcf0010a039a1842635b",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: since it's just one txid, perhaps rename `txids` to `txid`?",
    "created_at": "2021-03-22T01:04:48Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r598370784",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598370784"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r598370784"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598370784/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 65,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598380697",
    "pull_request_review_id": 617080163,
    "id": 598380697,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODM4MDY5Nw==",
    "diff_hunk": "@@ -20,55 +22,50 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        mempool_min_fee = node.getmempoolinfo()['mempoolminfee']\n+        base_fee = relayfee*1000\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee, mempool_min_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert_equal(len([tx for txid in txids for tx in txid]), len(node.getrawmempool()))\n+        assert txid not in node.getrawmempool() # check txid in the raw mempool\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        assert_raises_rpc_error(-26, \"mempool min fee not met\", miniwallet.send_self_transfer, from_node=node, fee_rate=relayfee)\n+\n+    def create_large_transactions(self, node, txouts, miniwallet, num, fee, mempool_min_fee):",
    "path": "test/functional/mempool_limit.py",
    "position": 82,
    "original_position": 82,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "a478bf775f9d153aeb20dcf0010a039a1842635b",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm wondering if `send_large_transactions` would be a better name since it is also broadcasting them? It would be more consistent with `send_self_transfer`.",
    "created_at": "2021-03-22T01:52:51Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r598380697",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598380697"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r598380697"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598380697/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 58,
    "original_line": 58,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598382381",
    "pull_request_review_id": 617080163,
    "id": 598382381,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODM4MjM4MQ==",
    "diff_hunk": "@@ -20,55 +22,50 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        mempool_min_fee = node.getmempoolinfo()['mempoolminfee']\n+        base_fee = relayfee*1000\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee, mempool_min_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert_equal(len([tx for txid in txids for tx in txid]), len(node.getrawmempool()))\n+        assert txid not in node.getrawmempool() # check txid in the raw mempool\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        assert_raises_rpc_error(-26, \"mempool min fee not met\", miniwallet.send_self_transfer, from_node=node, fee_rate=relayfee)\n+\n+    def create_large_transactions(self, node, txouts, miniwallet, num, fee, mempool_min_fee):\n+        large_txids = []\n+        for j in range(num):\n+            hex = miniwallet.send_self_transfer(from_node=node, fee_rate=fee, submit_tx=False)['hex']\n+            tx = FromHex(CTransaction(), hex)\n+            tx.vout.extend(txouts)\n+            tx_hex = tx.serialize().hex()\n+            txids = node.sendrawtransaction(tx_hex, 0)\n+            if node.getmempoolinfo()['mempoolminfee'] == mempool_min_fee:",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 90,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "a478bf775f9d153aeb20dcf0010a039a1842635b",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What is the purpose of having this condition in here? As a result, it means that there are transactions which get broadcast and enter the mempool, but are not added to `large_txids`. I'll add a comment to where it's used to suggest what I think would be a better alternative. ",
    "created_at": "2021-03-22T02:00:23Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r598382381",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598382381"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r598382381"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598382381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 66,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598383269",
    "pull_request_review_id": 617080163,
    "id": 598383269,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODM4MzI2OQ==",
    "diff_hunk": "@@ -20,55 +22,50 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        mempool_min_fee = node.getmempoolinfo()['mempoolminfee']\n+        base_fee = relayfee*1000\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee, mempool_min_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert_equal(len([tx for txid in txids for tx in txid]), len(node.getrawmempool()))",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 62,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "a478bf775f9d153aeb20dcf0010a039a1842635b",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Here i'm continuing from the comment below about line 66.\r\nI take it this is to double check that the mempool is full? I think a better way might be to remove the condition you have in `create_large_transactions`, so that you return all the broadcasted txids, and instead over here you use `assert_greater_than`, as in:\r\n\r\n`assert_greater_than(len([tx for txid in txids for tx in txid]), len(node.getrawmempool()))`",
    "created_at": "2021-03-22T02:04:29Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r598383269",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598383269"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r598383269"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598383269/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 48,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598385338",
    "pull_request_review_id": 617080163,
    "id": 598385338,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODM4NTMzOA==",
    "diff_hunk": "@@ -20,55 +22,50 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        mempool_min_fee = node.getmempoolinfo()['mempoolminfee']\n+        base_fee = relayfee*1000\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee, mempool_min_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert_equal(len([tx for txid in txids for tx in txid]), len(node.getrawmempool()))",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 62,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "a478bf775f9d153aeb20dcf0010a039a1842635b",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: it's a bit confusing here since `tx` is actually a txid, and `txid` is another list of txids. I don't think this is much better but maybe `[txid for batch in txids for txid in batch]`?",
    "created_at": "2021-03-22T02:12:59Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r598385338",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598385338"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r598385338"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598385338/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 48,
    "side": "RIGHT",
    "in_reply_to_id": 598383269
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606049114",
    "pull_request_review_id": 626764262,
    "id": 606049114,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjA0OTExNA==",
    "diff_hunk": "@@ -20,55 +22,50 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        mempool_min_fee = node.getmempoolinfo()['mempoolminfee']\n+        base_fee = relayfee*1000\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee, mempool_min_fee)",
    "path": "test/functional/mempool_limit.py",
    "position": 56,
    "original_position": 56,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "a478bf775f9d153aeb20dcf0010a039a1842635b",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is part of the feature as we're flooding mempool with transaction with higher fees in every loop. This is also a part of the current codebase so I'm pretty much mimicking it ",
    "created_at": "2021-04-02T03:05:46Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r606049114",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606049114"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r606049114"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606049114/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 45,
    "original_line": 45,
    "side": "RIGHT",
    "in_reply_to_id": 598360954
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606050387",
    "pull_request_review_id": 626765611,
    "id": 606050387,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjA1MDM4Nw==",
    "diff_hunk": "@@ -20,55 +22,50 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        mempool_min_fee = node.getmempoolinfo()['mempoolminfee']\n+        base_fee = relayfee*1000\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee, mempool_min_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert_equal(len([tx for txid in txids for tx in txid]), len(node.getrawmempool()))\n+        assert txid not in node.getrawmempool() # check txid in the raw mempool\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        assert_raises_rpc_error(-26, \"mempool min fee not met\", miniwallet.send_self_transfer, from_node=node, fee_rate=relayfee)\n+\n+    def create_large_transactions(self, node, txouts, miniwallet, num, fee, mempool_min_fee):",
    "path": "test/functional/mempool_limit.py",
    "position": 82,
    "original_position": 82,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "a478bf775f9d153aeb20dcf0010a039a1842635b",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "hmm just following the naming convention used [here](https://github.com/bitcoin/bitcoin/blob/66daf4cb3b47e8218623936d23ad504fd189e70b/test/functional/test_framework/util.py#L503) as it's just a copy of that code. But happy to change :) ",
    "created_at": "2021-04-02T03:11:49Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r606050387",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606050387"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r606050387"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606050387/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 58,
    "original_line": 58,
    "side": "RIGHT",
    "in_reply_to_id": 598380697
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606051159",
    "pull_request_review_id": 626766333,
    "id": 606051159,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjA1MTE1OQ==",
    "diff_hunk": "@@ -20,55 +22,50 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        mempool_min_fee = node.getmempoolinfo()['mempoolminfee']\n+        base_fee = relayfee*1000\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee, mempool_min_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert_equal(len([tx for txid in txids for tx in txid]), len(node.getrawmempool()))\n+        assert txid not in node.getrawmempool() # check txid in the raw mempool\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        assert_raises_rpc_error(-26, \"mempool min fee not met\", miniwallet.send_self_transfer, from_node=node, fee_rate=relayfee)\n+\n+    def create_large_transactions(self, node, txouts, miniwallet, num, fee, mempool_min_fee):\n+        large_txids = []\n+        for j in range(num):\n+            hex = miniwallet.send_self_transfer(from_node=node, fee_rate=fee, submit_tx=False)['hex']\n+            tx = FromHex(CTransaction(), hex)\n+            tx.vout.extend(txouts)\n+            tx_hex = tx.serialize().hex()\n+            txids = node.sendrawtransaction(tx_hex, 0)\n+            if node.getmempoolinfo()['mempoolminfee'] == mempool_min_fee:",
    "path": "test/functional/mempool_limit.py",
    "position": null,
    "original_position": 90,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "a478bf775f9d153aeb20dcf0010a039a1842635b",
    "user": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "okay! will add a comment but the basic logic is that i'm making sure that the fees have changed and only include those txs whose fees have gone up. This also supports the assert logic at like 48",
    "created_at": "2021-04-02T03:14:48Z",
    "updated_at": "2021-04-16T21:28:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r606051159",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606051159"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r606051159"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606051159/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 66,
    "side": "RIGHT",
    "in_reply_to_id": 598382381
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615558978",
    "pull_request_review_id": 638482006,
    "id": 615558978,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTU1ODk3OA==",
    "diff_hunk": "@@ -20,55 +22,49 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        mempool_min_fee = node.getmempoolinfo()['mempoolminfee']\n+        base_fee = relayfee*1000\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee, mempool_min_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert_greater_than(len([txid for batch in txids for txid in batch]), len(node.getrawmempool()))\n+        assert txid not in node.getrawmempool() # check txid in the raw mempool\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        assert_raises_rpc_error(-26, \"mempool min fee not met\", miniwallet.send_self_transfer, from_node=node, fee_rate=relayfee)\n+\n+    def create_large_transactions(self, node, txouts, miniwallet, num, fee, mempool_min_fee):\n+        large_txids = []\n+        for j in range(num):",
    "path": "test/functional/mempool_limit.py",
    "position": 84,
    "original_position": 84,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "ed1e869e14c0d2d8b8f2f9f82ca8b27be2ffb6b9",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: since `j` is unused, use `_` instead?",
    "created_at": "2021-04-19T05:55:58Z",
    "updated_at": "2021-04-19T05:55:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r615558978",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615558978"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r615558978"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615558978/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 60,
    "original_line": 60,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615560829",
    "pull_request_review_id": 638484300,
    "id": 615560829,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTU2MDgyOQ==",
    "diff_hunk": "@@ -20,55 +22,49 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(92)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        mempool_min_fee = node.getmempoolinfo()['mempoolminfee']\n+        base_fee = relayfee*1000\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee, mempool_min_fee)",
    "path": "test/functional/mempool_limit.py",
    "position": 56,
    "original_position": 56,
    "commit_id": "9d2b30cc059681e964202294f918af4300c661de",
    "original_commit_id": "ed1e869e14c0d2d8b8f2f9f82ca8b27be2ffb6b9",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "here `num` is set to 30 but the test also works with 22 (with only the original tx getting kicked from the mempool). My feeling is that it's more beneficial to have the test run faster than to have some extra leeway with excess txs. \r\n```suggestion\r\n            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 22, (i+1)*base_fee, mempool_min_fee)\r\n```",
    "created_at": "2021-04-19T06:01:05Z",
    "updated_at": "2021-04-19T06:01:27Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r615560829",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615560829"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r615560829"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615560829/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 45,
    "original_line": 45,
    "side": "RIGHT"
  }
]