DrahtBot,2021-01-07 19:55:13,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21178 (test: run mempool_reorg.py even with wallet disabled by DariusParvin)\n\nIf you consider this pull request importa",https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-756346617,756346617,
stackman27,2021-01-09 02:52:21,@mjdietzx Thank you very much for the review. I just pushed an update shortening the methods in `miniwallet` class by adding `prepare_tx` and also resolved most of your comments ,https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-757083465,757083465,
stackman27,2021-01-11 00:57:07,"@mjdietzx Thank you very much for the review. Pushed a new update highlighting all the comments and also updated `MiniWallet` by adding  just-create-don't-send method as proposed by @glozow in #20876. Also, I believe the new `create_and_sign_rawtx` method should resolve @nginocchio's issues as proposed in #20808",https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-757576998,757576998,
stackman27,2021-02-01 19:59:47,Thank you @glozow @mjdietzx  for the review. Added stronger assertion as suggested :) ,https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-771118938,771118938,
stackman27,2021-03-04 15:46:48,"> Concept ACK. I actually think a cleaner approach would be to make `create_lots_of_big_transactions` and the other util.py transaction not need wallet. Could reduce the amount of refactoring needed in each of the functional tests?\n\n@glozow Thank you very much for the review!\nAre you suggesting an alternative way to create_lots_of_big_transactions or just simply getting rid of it?",https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-790713787,790713787,
stackman27,2021-04-16 21:31:14,Thank you @DariusParvin  for the review. Added changes as suggested,https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-821574478,821574478,
DrahtBot,2021-06-01 14:19:25,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-852164687,852164687,
MarcoFalke,2021-07-20 07:32:49,Are you still working on this?,https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-883165494,883165494,
stackman27,2021-07-20 19:02:30,"> Are you still working on this?\n\nNot at the moment, have been busy with work and classes",https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-883623943,883623943,
joelklabo,2021-01-08 16:55:36,"Just curious, is there a reason to generate blocks through the MiniWallet and the TestNode separately?",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554068735,554068735,test/functional/mempool_limit.py
mjdietzx,2021-01-08 17:03:10,"We generate blocks in `MiniWallet` so we have utxos to spend (coinbases). It is helpful to generate 100 blocks on the node separately, so all the utxos in MiniWallet are mature.\n\nIf we just did, miniwallet.generate(191), only 91 of the utxos in mini wallets utxo set will be mature. And it gets tricky because some miniwallet transactions will now fail (And we don't necessarily know which utxo w",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554073731,554073731,test/functional/mempool_limit.py
mjdietzx,2021-01-08 17:14:44,"Not sure if `relayfee = node.getnetworkinfo()['relayfee']` is needed here anymore. seems like it shouldn't have changed, right?",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554079938,554079938,test/functional/mempool_limit.py
mjdietzx,2021-01-08 17:28:20,nit: might as well fix this type-o `minrelytxfee` => `minrelaytxfee`?,https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554087398,554087398,test/functional/mempool_limit.py
mjdietzx,2021-01-08 17:34:17,"nit: need a space between `if` and `(`. I think our linter won't even want the parenthesis (superfluous parenthesis). Really, why not just do: `if big_txouts:` ... `else:`",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554090506,554090506,test/functional/test_framework/wallet.py
mjdietzx,2021-01-08 17:37:37,nit: `tx.vout.extend(big_txouts)` would have the same behavior and get rid of a loop,https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554092198,554092198,test/functional/test_framework/wallet.py
mjdietzx,2021-01-08 17:39:28,Do we even want this `else` condition? I would think `big_txouts` should be a required param. Otherwise this branch seems to just duplicate `send_self_transfer`,https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554093130,554093130,test/functional/test_framework/wallet.py
mjdietzx,2021-01-08 17:57:42,"`fee_rate` seems to be a confusing param name. As this is now just the absolute `fee`, right? ",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554102596,554102596,test/functional/test_framework/wallet.py
mjdietzx,2021-01-08 18:10:28,"I'm not sure this method name is ideal? I was expecting multiple txns, but I guess this sends one big transaction? I'm not sure `send_big_self_transfer` would be better, but just want to double check on naming here",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554108817,554108817,test/functional/test_framework/wallet.py
mjdietzx,2021-01-08 18:13:42,I know this is existing behavior. But I'ma little confused because `txids` aren't used. Should we be checking these are in the mempool?,https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554110427,554110427,test/functional/mempool_limit.py
mjdietzx,2021-01-08 18:17:50,"Is there a need to grab a specific utxo here? I would think you can just let miniwallet pick it, and do:\n\n`assert_raises_rpc_error(-26, ""mempool min fee not met"", miniwallet.send_self_transfer, from_node=node, fee_rate=relayfee)`",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554112536,554112536,test/functional/mempool_limit.py
mjdietzx,2021-01-08 18:23:45,"I think there is some confusing behavior here. bc you generate 91 utxos, then spend 1, spend 3*30, and are now spending again (so this won't spend a Coinbase, rather it'll spend one of our previous transactions).\n\nAnd bc you explicitly `get_utxo` you are going to get the utxo from last transaction from `create_large_transactions` . Whereas if you let MiniWallet pick, it'd sort the utxo set by ",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554115491,554115491,test/functional/mempool_limit.py
mjdietzx,2021-01-08 18:27:25,Just want to confirm that we no longer need a `vsize` assertion. I guess we don't know the `vsize` or don't care since we are passing an absolute fee and not calculating the fee based on vsize*fee_rate?,https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554117463,554117463,test/functional/test_framework/wallet.py
stackman27,2021-01-09 02:11:37,"I'm not very sure about that too. I just followed the existing behavior and kept it there. If it really serves no purpose, i can either get rid of it or add a test case to check those txs in the mempool",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554276038,554276038,test/functional/mempool_limit.py
stackman27,2021-01-09 02:44:51,"Yes thats what i realized. Also the `vsize` changed (from 96 to 67552) while making big txs  and therefore checking it with a constant value of 96 didn't really make sense. I can however, add an assertion to check big tx `vsize` since they're all the same. Do you recommend? ",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554279481,554279481,test/functional/test_framework/wallet.py
stackman27,2021-01-09 02:50:06,@joelklabo I used the previous `miniWallet` tests as reference to generate utxos like the one done here  https://github.com/bitcoin/bitcoin/pull/20688/files  ,https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554280046,554280046,test/functional/mempool_limit.py
joelklabo,2021-01-09 05:48:28,"Great, thanks been confused about that for a bit. I'll check it out!",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554296055,554296055,test/functional/mempool_limit.py
mjdietzx,2021-01-10 19:29:32,"if you wanted to be ""cool"" you could do:\n```python\nreturn map(lambda: miniwallet.send_big_self_transfer(from_node=node, big_txouts=txouts, fee=fee)['txid'], range(num))\n```",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554611793,554611793,test/functional/mempool_limit.py
mjdietzx,2021-01-10 19:33:26,"so just for my understanding, I guess `mempoolminfee` increases as the mempool fills up? Would you mind explaining this to me or linking to some info/code so I can learn? thanks",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554612178,554612178,test/functional/mempool_limit.py
mjdietzx,2021-01-10 19:35:02,"I think `big_txouts` should come before the optional `utxo_to_spend=None` to spend now that it's required, right?",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554612333,554612333,test/functional/test_framework/wallet.py
mjdietzx,2021-01-10 19:41:50,"See this: https://github.com/bitcoin/bitcoin/pull/20808#discussion_r554610229\n\nBasically I'm wondering if you're going to even need to touch `MiniWallet` in this PR if we can align here. If we extend `MiniWallet` to have an option to ""just-create-don't-send"" then you could\n1) create the base tx with `MiniWallet` but don't send\n2) add all the `big_txouts` to that `tx`\n3) send it yourself,",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554613176,554613176,test/functional/test_framework/wallet.py
mjdietzx,2021-01-10 19:42:47,"I'm not really sure tbh. But we may be able to get rid of all of this, re one of my other comments in this review",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554613266,554613266,test/functional/test_framework/wallet.py
mjdietzx,2021-01-10 19:43:49,"Since it's not related to this PR I'd leave it. But I think adding an assertion to check all these txs are in the mempool would be good, and at least its a sanity check to make sure everything is as we expect",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554613440,554613440,test/functional/mempool_limit.py
stackman27,2021-01-10 23:10:12,"The `mempoolminfee` is adjusted whenever the mempool reaches `maxmempool` size, and therefore it kicks out all the transaction below that fee, to make space for tx with accepted fees. I can't find a specific method in the codebase as of now but i'll lyk if I find it ",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554637482,554637482,test/functional/mempool_limit.py
stackman27,2021-01-10 23:10:50,oh ya! I'll try that üòé,https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554637532,554637532,test/functional/mempool_limit.py
stackman27,2021-01-10 23:14:56,ü§î hmm i'll look into it and try to find a clean solution,https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554638069,554638069,test/functional/test_framework/wallet.py
stackman27,2021-01-10 23:53:20,"If I take this approach the code would be a lot cleaner but i'd have to get rid of some of the assertion checks for the tx because, i dont think i'll have access to variables such as `send_value` or `fee` unless I really dig into the `tx` list: \n\n<details open>\n<summary>This code...</summary>\n \n  <pre>minwallet._utxos.append({'txid': txid, 'vout': 0, 'value': send_value})  \ntx_info = n",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554642629,554642629,test/functional/test_framework/wallet.py
mjdietzx,2021-01-11 00:36:47,"ah ok interesting, thanks for the explanation",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554647971,554647971,test/functional/mempool_limit.py
mjdietzx,2021-01-11 00:44:09,"I think it's normal to do some assertions outside of MiniWallet if you think they're needed. ie we have things in the current miniwallet tests like: `assert_equal(entry_time, node.getmempoolentry(parent_txid)['time'])` after sending a transaction.\n\nAnyways do what you think is best here. If my proposed solution ends up having problems or doesn't make sense I don't want to mislead you",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554648846,554648846,test/functional/test_framework/wallet.py
stackman27,2021-01-11 00:58:38,For sure! pushed a new commit with required changes :) ,https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554650544,554650544,test/functional/test_framework/wallet.py
mjdietzx,2021-01-12 19:08:03,"I was expecting something more along the lines of:\n`assert txid in node.getrawmempool() for txid in txids`\n\nidk if that actually works, maybe\n```assert_equal(len(list(lambda txid: txid in node.getrawmempool(), txids)), len(txids))```",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556008790,556008790,test/functional/mempool_limit.py
mjdietzx,2021-01-12 19:13:23,"If you pull in this change https://github.com/bitcoin/bitcoin/pull/20808/files#diff-7932a60a9127fd22d10d367526fd7b987f9647ce017595f8b1af5c32d5db0083R58-R59\n\nI think you could do\n```python\ntx = miniwallet.create_and_sign_rawtx(from_node=node, fee_rate=fee_rate, submit_tx=False)  # calculate `fee_rate` so it yields the flat fee that you want\ntx.vout.extend(txouts)\n...\n```\n",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556011882,556011882,test/functional/mempool_limit.py
glozow,2021-01-12 19:57:45,I'm not really sure what this line does. You are asserting that none of the txns have the same txid?,https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556045577,556045577,test/functional/mempool_limit.py
glozow,2021-01-12 19:58:44,"You can do a stronger assertion\n```suggestion\n        assert_equal(sorted(txids), sorted(node.getrawmempool()))\n```",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556046096,556046096,test/functional/mempool_limit.py
glozow,2021-01-12 20:26:56,"Could we get a more informative function name and/or description? Also I think you should rename to `utxos` and make it a list. ""utxo_to_spend"" is kinda like ""uneaten food to be eaten.""",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556065978,556065978,test/functional/test_framework/wallet.py
stackman27,2021-01-12 20:58:51,"I did try that solution but the issue was on `flat_fee` vs calculated fee, and i believe `create_large_tx` uses flat_fee. I didn't wanted to use multiple if/else to make the code look unattractive. I did however find a hack by changing the base fee from `base_fee = relayfee*100` => `base_fee = relayfee*1000` . This didn't change the overall behavior of the test code, but changed the `mempoolminfee",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556090529,556090529,test/functional/mempool_limit.py
stackman27,2021-01-12 21:03:56,"I was just trying to check whether txid is present in the txids list or not. We checked txid's presence in the mempool but txids was just left hanging, so i was just working around an assertion for txids ",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556093381,556093381,test/functional/mempool_limit.py
glozow,2021-01-12 21:16:15,"Sure, but why do you need to do that?",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556099951,556099951,test/functional/mempool_limit.py
stackman27,2021-01-12 21:27:38,"I believe there are 90 txs in `txids`,  and 65 in `getrawmempool`. I tested this with the current code because I thought there was some issue with my code, but same result",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556106325,556106325,test/functional/mempool_limit.py
stackman27,2021-01-12 21:30:28,üòÖ my bad. Have never too good at naming functions. But will definitely keep in mind,https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556107823,556107823,test/functional/test_framework/wallet.py
stackman27,2021-01-12 22:00:21,"@mjdietzx the assertion didn't work and I believe its because `len(txids)` is 3 with this format `[[*txs*],[*txs*],[*txs*]]` and each of the `*txs*` has 30 transactions. And `node.getrawmempool()` is just a giant list with 65 txs ‚òπÔ∏è",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r556123615,556123615,test/functional/mempool_limit.py
MarcoFalke,2021-02-16 16:57:23," Generating blocks takes a few seconds in valgrind, so I am thinking if this test may benefit from using `miniwallet.scan_blocks` (to be introduced in #21200). I haven't looked at the details as why you picked 92 blocks to be mined, but if you can do with just 25 mature coinbases, this could make sense.",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r576981713,576981713,test/functional/mempool_limit.py
stackman27,2021-02-19 15:15:21,"`Miniwallet.scan_blocks` looks amazing! Can't wait to use it. The reason behind 92 is that we are creating 90 transaction as a part of `create_large_transactions` method. Also, the same number is present in the current code, so I just thought about mimicking it. ",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r579258951,579258951,test/functional/mempool_limit.py
DariusParvin,2021-03-22 00:04:41,What is the purpose of creating these transactions within this loop with the fee increasing each time? It seems unnecessarily complicated but I am probably missing something.,https://github.com/bitcoin/bitcoin/pull/20874#discussion_r598360954,598360954,test/functional/mempool_limit.py
DariusParvin,2021-03-22 01:04:48,"nit: since it's just one txid, perhaps rename `txids` to `txid`?",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r598370784,598370784,test/functional/mempool_limit.py
DariusParvin,2021-03-22 01:52:51,I'm wondering if `send_large_transactions` would be a better name since it is also broadcasting them? It would be more consistent with `send_self_transfer`.,https://github.com/bitcoin/bitcoin/pull/20874#discussion_r598380697,598380697,test/functional/mempool_limit.py
DariusParvin,2021-03-22 02:00:23,"What is the purpose of having this condition in here? As a result, it means that there are transactions which get broadcast and enter the mempool, but are not added to `large_txids`. I'll add a comment to where it's used to suggest what I think would be a better alternative. ",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r598382381,598382381,test/functional/mempool_limit.py
DariusParvin,2021-03-22 02:04:29,"Here i'm continuing from the comment below about line 66.\nI take it this is to double check that the mempool is full? I think a better way might be to remove the condition you have in `create_large_transactions`, so that you return all the broadcasted txids, and instead over here you use `assert_greater_than`, as in:\n\n`assert_greater_than(len([tx for txid in txids for tx in txid]), len(node.",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r598383269,598383269,test/functional/mempool_limit.py
DariusParvin,2021-03-22 02:12:59,"nit: it's a bit confusing here since `tx` is actually a txid, and `txid` is another list of txids. I don't think this is much better but maybe `[txid for batch in txids for txid in batch]`?",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r598385338,598385338,test/functional/mempool_limit.py
stackman27,2021-04-02 03:05:46,This is part of the feature as we're flooding mempool with transaction with higher fees in every loop. This is also a part of the current codebase so I'm pretty much mimicking it ,https://github.com/bitcoin/bitcoin/pull/20874#discussion_r606049114,606049114,test/functional/mempool_limit.py
stackman27,2021-04-02 03:11:49,hmm just following the naming convention used [here](https://github.com/bitcoin/bitcoin/blob/66daf4cb3b47e8218623936d23ad504fd189e70b/test/functional/test_framework/util.py#L503) as it's just a copy of that code. But happy to change :) ,https://github.com/bitcoin/bitcoin/pull/20874#discussion_r606050387,606050387,test/functional/mempool_limit.py
stackman27,2021-04-02 03:14:48,okay! will add a comment but the basic logic is that i'm making sure that the fees have changed and only include those txs whose fees have gone up. This also supports the assert logic at like 48,https://github.com/bitcoin/bitcoin/pull/20874#discussion_r606051159,606051159,test/functional/mempool_limit.py
DariusParvin,2021-04-19 05:55:58,"nit: since `j` is unused, use `_` instead?",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r615558978,615558978,test/functional/mempool_limit.py
DariusParvin,2021-04-19 06:01:05,"here `num` is set to 30 but the test also works with 22 (with only the original tx getting kicked from the mempool). My feeling is that it's more beneficial to have the test run faster than to have some extra leeway with excess txs. \n```suggestion\n            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 22, (i+1)*base_fee, mempool_min_fee)\n```",https://github.com/bitcoin/bitcoin/pull/20874#discussion_r615560829,615560829,test/functional/mempool_limit.py
