[
  {
    "sha": "202d853bbea8ecb2164b9c9dc69e2129b45f05f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDJkODUzYmJlYThlY2IyMTY0YjljOWRjNjllMjEyOWI0NWYwNWY4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-01-07T10:30:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-01-11T09:20:28Z"
      },
      "message": "qt: Move initialization/shutdown to a thread\n\nMove AppInit2 and Shutdown to a thread.\n\nThis allows a more responsive splash screen, prevents 'process does not respond'\nmessages from the window system and will allow for showing a user friendly\nwindow while shutting down.",
      "tree": {
        "sha": "86b48c4d03a96ca3698962ac9baac5c2ab085483",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86b48c4d03a96ca3698962ac9baac5c2ab085483"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/202d853bbea8ecb2164b9c9dc69e2129b45f05f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/202d853bbea8ecb2164b9c9dc69e2129b45f05f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/202d853bbea8ecb2164b9c9dc69e2129b45f05f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/202d853bbea8ecb2164b9c9dc69e2129b45f05f8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a0e2376a14c77585888373099109d51a08bd74f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a0e2376a14c77585888373099109d51a08bd74f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a0e2376a14c77585888373099109d51a08bd74f"
      }
    ],
    "stats": {
      "total": 415,
      "additions": 301,
      "deletions": 114
    },
    "files": [
      {
        "sha": "99fdecb03a60aa53493020b893f8668da07d7cff",
        "filename": "src/qt/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202d853bbea8ecb2164b9c9dc69e2129b45f05f8/src/qt/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202d853bbea8ecb2164b9c9dc69e2129b45f05f8/src/qt/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/Makefile.am?ref=202d853bbea8ecb2164b9c9dc69e2129b45f05f8",
        "patch": "@@ -108,7 +108,7 @@ QT_MOC_CPP = moc_aboutdialog.cpp moc_addressbookpage.cpp \\\n \n BITCOIN_MM = macdockiconhandler.mm macnotificationhandler.mm\n \n-QT_MOC = intro.moc overviewpage.moc rpcconsole.moc\n+QT_MOC = intro.moc overviewpage.moc rpcconsole.moc bitcoin.moc\n \n QT_QRC_CPP = qrc_bitcoin.cpp\n QT_QRC = bitcoin.qrc"
      },
      {
        "sha": "d4a834acb698a8252032b8068642250f77d2ecac",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 298,
        "deletions": 113,
        "changes": 411,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202d853bbea8ecb2164b9c9dc69e2129b45f05f8/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202d853bbea8ecb2164b9c9dc69e2129b45f05f8/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=202d853bbea8ecb2164b9c9dc69e2129b45f05f8",
        "patch": "@@ -30,6 +30,8 @@\n #include <QSettings>\n #include <QTimer>\n #include <QTranslator>\n+#include <QWeakPointer>\n+#include <QThread>\n \n #if defined(QT_STATICPLUGIN)\n #include <QtPlugin>\n@@ -52,18 +54,18 @@ Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin);\n // Declare meta types used for QMetaObject::invokeMethod\n Q_DECLARE_METATYPE(bool*)\n \n-// Need a global reference for the notifications to find the GUI\n-static BitcoinGUI *guiref;\n-static SplashScreen *splashref;\n+// Need a global reference for the notifications to find the GUI and splash screen\n+static QWeakPointer<BitcoinGUI> guiref;\n+static QWeakPointer<SplashScreen> splashref;\n \n static bool ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n {\n-    if(guiref)\n+    if(!guiref.isNull())\n     {\n         bool modal = (style & CClientUIInterface::MODAL);\n         bool ret = false;\n         // In case of modal message, use blocking connection to wait for user to click a button\n-        QMetaObject::invokeMethod(guiref, \"message\",\n+        QMetaObject::invokeMethod(guiref.data(), \"message\",\n                                    modal ? GUIUtil::blockingGUIThreadConnection() : Qt::QueuedConnection,\n                                    Q_ARG(QString, QString::fromStdString(caption)),\n                                    Q_ARG(QString, QString::fromStdString(message)),\n@@ -81,10 +83,13 @@ static bool ThreadSafeMessageBox(const std::string& message, const std::string&\n \n static void InitMessage(const std::string &message)\n {\n-    if(splashref)\n+    if(!splashref.isNull())\n     {\n-        splashref->showMessage(QString::fromStdString(message), Qt::AlignBottom|Qt::AlignHCenter, QColor(55,55,55));\n-        qApp->processEvents();\n+        QMetaObject::invokeMethod(splashref.data(), \"showMessage\",\n+            Qt::QueuedConnection,\n+            Q_ARG(QString, QString::fromStdString(message)),\n+            Q_ARG(int, Qt::AlignBottom|Qt::AlignHCenter),\n+            Q_ARG(QColor, QColor(55,55,55)));\n     }\n     LogPrintf(\"init message: %s\\n\", message.c_str());\n }\n@@ -97,15 +102,6 @@ static std::string Translate(const char* psz)\n     return QCoreApplication::translate(\"bitcoin-core\", psz).toStdString();\n }\n \n-/* Handle runaway exceptions. Shows a message box with the problem and quits the program.\n- */\n-static void handleRunawayException(std::exception *e)\n-{\n-    PrintExceptionContinue(e, \"Runaway exception\");\n-    QMessageBox::critical(0, \"Runaway exception\", BitcoinGUI::tr(\"A fatal error occurred. Bitcoin can no longer continue safely and will quit.\") + QString(\"\\n\\n\") + QString::fromStdString(strMiscWarning));\n-    exit(1);\n-}\n-\n /** Set up translations */\n static void initTranslations(QTranslator &qtTranslatorBase, QTranslator &qtTranslator, QTranslator &translatorBase, QTranslator &translator)\n {\n@@ -162,6 +158,265 @@ void DebugMessageHandler(QtMsgType type, const QMessageLogContext& context, cons\n }\n #endif\n \n+/** Class encapsulating Bitcoin Core startup and shutdown.\n+ * Allows running startup and shutdown in a different thread from the UI thread.\n+ */\n+class BitcoinCore: public QObject\n+{\n+    Q_OBJECT\n+public:\n+    explicit BitcoinCore();\n+\n+public slots:\n+    void initialize();\n+    void shutdown();\n+\n+signals:\n+    void initializeResult(int retval);\n+    void shutdownResult(int retval);\n+    void runawayException(const QString &message);\n+\n+private:\n+    boost::thread_group threadGroup;\n+\n+    /// Pass fatal exception message to UI thread\n+    void handleRunawayException(std::exception *e);\n+};\n+\n+/** Main Bitcoin application object */\n+class BitcoinApplication: public QApplication\n+{\n+    Q_OBJECT\n+public:\n+    explicit BitcoinApplication(int &argc, char **argv);\n+    ~BitcoinApplication();\n+\n+    /// Create payment server\n+    void createPaymentServer();\n+    /// Create options model\n+    void createOptionsModel();\n+    /// Create main window\n+    void createWindow(bool isaTestNet);\n+\n+    /// Request core initialization\n+    void requestInitialize();\n+    /// Request core shutdown\n+    void requestShutdown();\n+\n+    /// Get process return value\n+    int getReturnValue() { return returnValue; }\n+\n+public slots:\n+    void initializeResult(int retval);\n+    void shutdownResult(int retval);\n+    /// Handle runaway exceptions. Shows a message box with the problem and quits the program.\n+    void handleRunawayException(const QString &message);\n+\n+signals:\n+    void requestedInitialize();\n+    void requestedShutdown();\n+    void stopThread();\n+\n+private:\n+    QThread *coreThread;\n+    PaymentServer* paymentServer;\n+    OptionsModel *optionsModel;\n+    ClientModel *clientModel;\n+    BitcoinGUI *window;\n+    WalletModel *walletModel;\n+    int returnValue;\n+\n+    void startThread();\n+};\n+\n+#include \"bitcoin.moc\"\n+\n+BitcoinCore::BitcoinCore():\n+    QObject()\n+{\n+}\n+\n+void BitcoinCore::handleRunawayException(std::exception *e)\n+{\n+    PrintExceptionContinue(e, \"Runaway exception\");\n+    emit runawayException(QString::fromStdString(strMiscWarning));\n+}\n+\n+void BitcoinCore::initialize()\n+{\n+    try\n+    {\n+        LogPrintf(\"Running AppInit2 in thread\\n\");\n+        int rv = AppInit2(threadGroup);\n+        emit initializeResult(rv);\n+    } catch (std::exception& e) {\n+        handleRunawayException(&e);\n+    } catch (...) {\n+        handleRunawayException(NULL);\n+    }\n+}\n+\n+void BitcoinCore::shutdown()\n+{\n+    try\n+    {\n+        LogPrintf(\"Running Shutdown in thread\\n\");\n+        threadGroup.interrupt_all();\n+        threadGroup.join_all();\n+        Shutdown();\n+        LogPrintf(\"Shutdown finished\\n\");\n+        emit shutdownResult(1);\n+    } catch (std::exception& e) {\n+        handleRunawayException(&e);\n+    } catch (...) {\n+        handleRunawayException(NULL);\n+    }\n+}\n+\n+BitcoinApplication::BitcoinApplication(int &argc, char **argv):\n+    QApplication(argc, argv),\n+    coreThread(0),\n+    paymentServer(0),\n+    optionsModel(0),\n+    clientModel(0),\n+    window(0),\n+    walletModel(0),\n+    returnValue(0)\n+{\n+    setQuitOnLastWindowClosed(false);\n+    startThread();\n+}\n+\n+BitcoinApplication::~BitcoinApplication()\n+{\n+    LogPrintf(\"Stopping thread\\n\");\n+    emit stopThread();\n+    coreThread->wait();\n+    LogPrintf(\"Stopped thread\\n\");\n+}\n+\n+void BitcoinApplication::createPaymentServer()\n+{\n+    paymentServer = new PaymentServer(this);\n+}\n+\n+void BitcoinApplication::createOptionsModel()\n+{\n+    optionsModel = new OptionsModel();\n+}\n+\n+void BitcoinApplication::createWindow(bool isaTestNet)\n+{\n+    window = new BitcoinGUI(isaTestNet, 0);\n+    guiref = window;\n+\n+    QTimer* pollShutdownTimer = new QTimer(window);\n+    connect(pollShutdownTimer, SIGNAL(timeout()), window, SLOT(detectShutdown()));\n+    pollShutdownTimer->start(200);\n+}\n+\n+void BitcoinApplication::startThread()\n+{\n+    coreThread = new QThread(this);\n+    BitcoinCore *executor = new BitcoinCore();\n+    executor->moveToThread(coreThread);\n+\n+    /*  communication to and from thread */\n+    connect(executor, SIGNAL(initializeResult(int)), this, SLOT(initializeResult(int)));\n+    connect(executor, SIGNAL(shutdownResult(int)), this, SLOT(shutdownResult(int)));\n+    connect(executor, SIGNAL(runawayException(QString)), this, SLOT(handleRunawayException(QString)));\n+    connect(this, SIGNAL(requestedInitialize()), executor, SLOT(initialize()));\n+    connect(this, SIGNAL(requestedShutdown()), executor, SLOT(shutdown()));\n+    /*  make sure executor object is deleted in its own thread */\n+    connect(this, SIGNAL(stopThread()), executor, SLOT(deleteLater()));\n+    connect(this, SIGNAL(stopThread()), coreThread, SLOT(quit()));\n+\n+    coreThread->start();\n+}\n+\n+void BitcoinApplication::requestInitialize()\n+{\n+    LogPrintf(\"Requesting initialize\\n\");\n+    emit requestedInitialize();\n+}\n+\n+void BitcoinApplication::requestShutdown()\n+{\n+    LogPrintf(\"Requesting shutdown\\n\");\n+    window->hide();\n+    window->setClientModel(0);\n+    window->removeAllWallets();\n+    guiref.clear();\n+    delete walletModel;\n+    emit requestedShutdown();\n+}\n+\n+void BitcoinApplication::initializeResult(int retval)\n+{\n+    LogPrintf(\"Initialization result: %i\\n\", retval);\n+    /// Set exit result: 0 if successful, 1 if failure\n+    returnValue = retval ? 0 : 1;\n+    if(retval)\n+    {\n+        optionsModel->Upgrade(); // Must be done after AppInit2\n+\n+        PaymentServer::LoadRootCAs();\n+        paymentServer->setOptionsModel(optionsModel);\n+\n+        if (!splashref.isNull())\n+            splashref.data()->finish(window);\n+\n+        clientModel = new ClientModel(optionsModel);\n+        window->setClientModel(clientModel);\n+\n+        if(pwalletMain)\n+        {\n+            walletModel = new WalletModel(pwalletMain, optionsModel);\n+\n+            window->addWallet(\"~Default\", walletModel);\n+            window->setCurrentWallet(\"~Default\");\n+\n+            connect(walletModel, SIGNAL(coinsSent(CWallet*,SendCoinsRecipient,QByteArray)),\n+                             paymentServer, SLOT(fetchPaymentACK(CWallet*,const SendCoinsRecipient&,QByteArray)));\n+        }\n+\n+        // If -min option passed, start window minimized.\n+        if(GetBoolArg(\"-min\", false))\n+        {\n+            window->showMinimized();\n+        }\n+        else\n+        {\n+            window->show();\n+        }\n+\n+        // Now that initialization/startup is done, process any command-line\n+        // bitcoin: URIs or payment requests:\n+        connect(paymentServer, SIGNAL(receivedPaymentRequest(SendCoinsRecipient)),\n+                         window, SLOT(handlePaymentRequest(SendCoinsRecipient)));\n+        connect(window, SIGNAL(receivedURI(QString)),\n+                         paymentServer, SLOT(handleURIOrFile(QString)));\n+        connect(paymentServer, SIGNAL(message(QString,QString,unsigned int)),\n+                         window, SLOT(message(QString,QString,unsigned int)));\n+        QTimer::singleShot(100, paymentServer, SLOT(uiReady()));\n+\n+    } else {\n+        quit(); // Exit main loop\n+    }\n+}\n+\n+void BitcoinApplication::shutdownResult(int retval)\n+{\n+    LogPrintf(\"Shutdown result: %i\\n\", retval);\n+    quit(); // Exit main loop after shutdown finished\n+}\n+\n+void BitcoinApplication::handleRunawayException(const QString &message)\n+{\n+    QMessageBox::critical(0, \"Runaway exception\", BitcoinGUI::tr(\"A fatal error occurred. Bitcoin can no longer continue safely and will quit.\") + QString(\"\\n\\n\") + message);\n+    ::exit(1);\n+}\n+\n #ifndef BITCOIN_QT_TEST\n int main(int argc, char *argv[])\n {\n@@ -189,7 +444,7 @@ int main(int argc, char *argv[])\n #endif\n \n     Q_INIT_RESOURCE(bitcoin);\n-    QApplication app(argc, argv);\n+    BitcoinApplication app(argc, argv);\n #if QT_VERSION > 0x050100\n     // Generate high-dpi pixmaps\n     QApplication::setAttribute(Qt::AA_UseHighDpiPixmaps);\n@@ -254,7 +509,7 @@ int main(int argc, char *argv[])\n \n     // Start up the payment server early, too, so impatient users that click on\n     // bitcoin: links repeatedly have their payment requests routed to this process:\n-    PaymentServer* paymentServer = new PaymentServer(&app);\n+    app.createPaymentServer();\n \n     /// 8. Main GUI initialization\n     // Install global event filter that makes sure that long tooltips can be word-wrapped\n@@ -266,24 +521,29 @@ int main(int argc, char *argv[])\n     qInstallMessageHandler(DebugMessageHandler);\n #endif\n     // Load GUI settings from QSettings\n-    OptionsModel optionsModel;\n+    app.createOptionsModel();\n \n     // Subscribe to global signals from core\n     uiInterface.ThreadSafeMessageBox.connect(ThreadSafeMessageBox);\n     uiInterface.InitMessage.connect(InitMessage);\n     uiInterface.Translate.connect(Translate);\n \n-    // Show splash screen if appropriate\n-    SplashScreen splash(QPixmap(), 0, isaTestNet);\n-    if (GetBoolArg(\"-splash\", true) && !GetBoolArg(\"-min\", false))\n+    // Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,\n+    // but before showing splash screen.\n+    if (mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n     {\n-        splash.show();\n-        splash.setAutoFillBackground(true);\n-        splashref = &splash;\n+        GUIUtil::HelpMessageBox help;\n+        help.showOrPrint();\n+        return 1;\n     }\n \n-    app.processEvents();\n-    app.setQuitOnLastWindowClosed(false);\n+    if (GetBoolArg(\"-splash\", true) && !GetBoolArg(\"-min\", false))\n+    {\n+        SplashScreen *splash = new SplashScreen(QPixmap(), 0, isaTestNet);\n+        splash->setAttribute(Qt::WA_DeleteOnClose);\n+        splash->show();\n+        splashref = splash;\n+    }\n \n     try\n     {\n@@ -293,93 +553,18 @@ int main(int argc, char *argv[])\n         if (GUIUtil::GetStartOnSystemStartup())\n             GUIUtil::SetStartOnSystemStartup(true);\n #endif\n-\n-        boost::thread_group threadGroup;\n-\n-        BitcoinGUI window(isaTestNet, 0);\n-        guiref = &window;\n-\n-        QTimer* pollShutdownTimer = new QTimer(guiref);\n-        QObject::connect(pollShutdownTimer, SIGNAL(timeout()), guiref, SLOT(detectShutdown()));\n-        pollShutdownTimer->start(200);\n-\n-        if(AppInit2(threadGroup))\n-        {\n-            {\n-                // Put this in a block, so that the Model objects are cleaned up before\n-                // calling Shutdown().\n-\n-                optionsModel.Upgrade(); // Must be done after AppInit2\n-\n-                PaymentServer::LoadRootCAs();\n-                paymentServer->setOptionsModel(&optionsModel);\n-\n-                if (splashref)\n-                    splash.finish(&window);\n-\n-                ClientModel clientModel(&optionsModel);\n-                window.setClientModel(&clientModel);\n-\n-                WalletModel *walletModel = 0;\n-                if(pwalletMain)\n-                    walletModel = new WalletModel(pwalletMain, &optionsModel);\n-\n-                if(walletModel)\n-                {\n-                    window.addWallet(\"~Default\", walletModel);\n-                    window.setCurrentWallet(\"~Default\");\n-                }\n-\n-                // If -min option passed, start window minimized.\n-                if(GetBoolArg(\"-min\", false))\n-                {\n-                    window.showMinimized();\n-                }\n-                else\n-                {\n-                    window.show();\n-                }\n-\n-                // Now that initialization/startup is done, process any command-line\n-                // bitcoin: URIs or payment requests:\n-                QObject::connect(paymentServer, SIGNAL(receivedPaymentRequest(SendCoinsRecipient)),\n-                                 &window, SLOT(handlePaymentRequest(SendCoinsRecipient)));\n-                QObject::connect(&window, SIGNAL(receivedURI(QString)),\n-                                 paymentServer, SLOT(handleURIOrFile(QString)));\n-                if(walletModel)\n-                {\n-                    QObject::connect(walletModel, SIGNAL(coinsSent(CWallet*,SendCoinsRecipient,QByteArray)),\n-                                     paymentServer, SLOT(fetchPaymentACK(CWallet*,const SendCoinsRecipient&,QByteArray)));\n-                }\n-                QObject::connect(paymentServer, SIGNAL(message(QString,QString,unsigned int)),\n-                                 guiref, SLOT(message(QString,QString,unsigned int)));\n-                QTimer::singleShot(100, paymentServer, SLOT(uiReady()));\n-\n-                app.exec();\n-\n-                window.hide();\n-                window.setClientModel(0);\n-                window.removeAllWallets();\n-                guiref = 0;\n-                delete walletModel;\n-            }\n-            // Shutdown the core and its threads, but don't exit the GUI here\n-            threadGroup.interrupt_all();\n-            threadGroup.join_all();\n-            Shutdown();\n-        }\n-        else\n-        {\n-            threadGroup.interrupt_all();\n-            threadGroup.join_all();\n-            Shutdown();\n-            return 1;\n-        }\n+        app.createWindow(isaTestNet);\n+        app.requestInitialize();\n+        app.exec();\n+        app.requestShutdown();\n+        app.exec();\n     } catch (std::exception& e) {\n-        handleRunawayException(&e);\n+        PrintExceptionContinue(&e, \"Runaway exception\");\n+        app.handleRunawayException(QString::fromStdString(strMiscWarning));\n     } catch (...) {\n-        handleRunawayException(NULL);\n+        PrintExceptionContinue(NULL, \"Runaway exception\");\n+        app.handleRunawayException(QString::fromStdString(strMiscWarning));\n     }\n-    return 0;\n+    return app.getReturnValue();\n }\n #endif // BITCOIN_QT_TEST"
      },
      {
        "sha": "0e998c6d7ef8ad4f5bc551f2523796b904e77cf6",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202d853bbea8ecb2164b9c9dc69e2129b45f05f8/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202d853bbea8ecb2164b9c9dc69e2129b45f05f8/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=202d853bbea8ecb2164b9c9dc69e2129b45f05f8",
        "patch": "@@ -13,6 +13,8 @@\n SplashScreen::SplashScreen(const QPixmap &pixmap, Qt::WindowFlags f, bool isTestNet) :\n     QSplashScreen(pixmap, f)\n {\n+    setAutoFillBackground(true);\n+\n     // set reference point, paddings\n     int paddingRight            = 50;\n     int paddingTop              = 50;"
      }
    ]
  },
  {
    "sha": "55fe4de96056cf7b6bdf708a2912927dc9857207",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWZlNGRlOTYwNTZjZjdiNmJkZjcwOGEyOTEyOTI3ZGM5ODU3MjA3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-01-07T15:04:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-01-11T09:20:28Z"
      },
      "message": "qt: Show window while shutting down\n\nMakes it clear to the user that the application is still wrapping up\nand the computer should not be turned off until it is finished.",
      "tree": {
        "sha": "878570e2c92dd3baf40dfcfc47deccc191fab858",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/878570e2c92dd3baf40dfcfc47deccc191fab858"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55fe4de96056cf7b6bdf708a2912927dc9857207",
      "comment_count": 3,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55fe4de96056cf7b6bdf708a2912927dc9857207",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55fe4de96056cf7b6bdf708a2912927dc9857207",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55fe4de96056cf7b6bdf708a2912927dc9857207/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "202d853bbea8ecb2164b9c9dc69e2129b45f05f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/202d853bbea8ecb2164b9c9dc69e2129b45f05f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/202d853bbea8ecb2164b9c9dc69e2129b45f05f8"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 20,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8bcf187ae786ba3f51381760dd633e52cc23e8d5",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55fe4de96056cf7b6bdf708a2912927dc9857207/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55fe4de96056cf7b6bdf708a2912927dc9857207/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=55fe4de96056cf7b6bdf708a2912927dc9857207",
        "patch": "@@ -32,6 +32,8 @@\n #include <QTranslator>\n #include <QWeakPointer>\n #include <QThread>\n+#include <QVBoxLayout>\n+#include <QLabel>\n \n #if defined(QT_STATICPLUGIN)\n #include <QtPlugin>\n@@ -347,17 +349,34 @@ void BitcoinApplication::requestShutdown()\n     window->setClientModel(0);\n     window->removeAllWallets();\n     guiref.clear();\n+\n     delete walletModel;\n+\n+    // Show a simple window indicating shutdown status\n+    QWidget *shutdownWindow = new QWidget();\n+    QVBoxLayout *layout = new QVBoxLayout();\n+    layout->addWidget(new QLabel(\n+        tr(\"Bitcoin Core is shutting down...\\n\") +\n+        tr(\"Do not shut down the computer until this window disappears.\")));\n+    shutdownWindow->setLayout(layout);\n+\n+    // Center shutdown window at where main window was\n+    const QPoint global = window->mapToGlobal(window->rect().center());\n+    shutdownWindow->move(global.x() - shutdownWindow->width() / 2, global.y() - shutdownWindow->height() / 2);\n+    shutdownWindow->show();\n+\n+    // Request shutdown from core thread\n     emit requestedShutdown();\n }\n \n void BitcoinApplication::initializeResult(int retval)\n {\n     LogPrintf(\"Initialization result: %i\\n\", retval);\n-    /// Set exit result: 0 if successful, 1 if failure\n+    // Set exit result: 0 if successful, 1 if failure\n     returnValue = retval ? 0 : 1;\n     if(retval)\n     {\n+        // Miscellaneous initialization after core is initialized\n         optionsModel->Upgrade(); // Must be done after AppInit2\n \n         PaymentServer::LoadRootCAs();"
      }
    ]
  },
  {
    "sha": "35ecf854c084c248ad640c6af030a9d1ed726c47",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNWVjZjg1NGMwODRjMjQ4YWQ2NDBjNmFmMDMwYTlkMWVkNzI2YzQ3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-01-08T07:59:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-01-11T09:20:28Z"
      },
      "message": "qt: Remove global references in bitcoin.cpp\n\nRemove the need for global references `guiref` and\n`splashref` by making the BitcoinGUI and SplashScreen\nclasses register for the UI interface signals themselves.",
      "tree": {
        "sha": "06dc516ca6c4e60bc841cfe49cfda089ef1fc005",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06dc516ca6c4e60bc841cfe49cfda089ef1fc005"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35ecf854c084c248ad640c6af030a9d1ed726c47",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35ecf854c084c248ad640c6af030a9d1ed726c47",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/35ecf854c084c248ad640c6af030a9d1ed726c47",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35ecf854c084c248ad640c6af030a9d1ed726c47/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55fe4de96056cf7b6bdf708a2912927dc9857207",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55fe4de96056cf7b6bdf708a2912927dc9857207",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55fe4de96056cf7b6bdf708a2912927dc9857207"
      }
    ],
    "stats": {
      "total": 151,
      "additions": 103,
      "deletions": 48
    },
    "files": [
      {
        "sha": "098b17490e3bd9ff51beb9ad3650b347b4232cc4",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 48,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35ecf854c084c248ad640c6af030a9d1ed726c47/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35ecf854c084c248ad640c6af030a9d1ed726c47/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=35ecf854c084c248ad640c6af030a9d1ed726c47",
        "patch": "@@ -30,7 +30,6 @@\n #include <QSettings>\n #include <QTimer>\n #include <QTranslator>\n-#include <QWeakPointer>\n #include <QThread>\n #include <QVBoxLayout>\n #include <QLabel>\n@@ -56,43 +55,8 @@ Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin);\n // Declare meta types used for QMetaObject::invokeMethod\n Q_DECLARE_METATYPE(bool*)\n \n-// Need a global reference for the notifications to find the GUI and splash screen\n-static QWeakPointer<BitcoinGUI> guiref;\n-static QWeakPointer<SplashScreen> splashref;\n-\n-static bool ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n-{\n-    if(!guiref.isNull())\n-    {\n-        bool modal = (style & CClientUIInterface::MODAL);\n-        bool ret = false;\n-        // In case of modal message, use blocking connection to wait for user to click a button\n-        QMetaObject::invokeMethod(guiref.data(), \"message\",\n-                                   modal ? GUIUtil::blockingGUIThreadConnection() : Qt::QueuedConnection,\n-                                   Q_ARG(QString, QString::fromStdString(caption)),\n-                                   Q_ARG(QString, QString::fromStdString(message)),\n-                                   Q_ARG(unsigned int, style),\n-                                   Q_ARG(bool*, &ret));\n-        return ret;\n-    }\n-    else\n-    {\n-        LogPrintf(\"%s: %s\\n\", caption.c_str(), message.c_str());\n-        fprintf(stderr, \"%s: %s\\n\", caption.c_str(), message.c_str());\n-        return false;\n-    }\n-}\n-\n static void InitMessage(const std::string &message)\n {\n-    if(!splashref.isNull())\n-    {\n-        QMetaObject::invokeMethod(splashref.data(), \"showMessage\",\n-            Qt::QueuedConnection,\n-            Q_ARG(QString, QString::fromStdString(message)),\n-            Q_ARG(int, Qt::AlignBottom|Qt::AlignHCenter),\n-            Q_ARG(QColor, QColor(55,55,55)));\n-    }\n     LogPrintf(\"init message: %s\\n\", message.c_str());\n }\n \n@@ -199,6 +163,8 @@ class BitcoinApplication: public QApplication\n     void createOptionsModel();\n     /// Create main window\n     void createWindow(bool isaTestNet);\n+    /// Create splash screen\n+    void createSplashScreen(bool isaTestNet);\n \n     /// Request core initialization\n     void requestInitialize();\n@@ -218,6 +184,7 @@ public slots:\n     void requestedInitialize();\n     void requestedShutdown();\n     void stopThread();\n+    void splashFinished(QWidget *window);\n \n private:\n     QThread *coreThread;\n@@ -295,6 +262,10 @@ BitcoinApplication::~BitcoinApplication()\n     emit stopThread();\n     coreThread->wait();\n     LogPrintf(\"Stopped thread\\n\");\n+\n+    delete window;\n+    delete paymentServer;\n+    delete optionsModel;\n }\n \n void BitcoinApplication::createPaymentServer()\n@@ -310,13 +281,20 @@ void BitcoinApplication::createOptionsModel()\n void BitcoinApplication::createWindow(bool isaTestNet)\n {\n     window = new BitcoinGUI(isaTestNet, 0);\n-    guiref = window;\n \n     QTimer* pollShutdownTimer = new QTimer(window);\n     connect(pollShutdownTimer, SIGNAL(timeout()), window, SLOT(detectShutdown()));\n     pollShutdownTimer->start(200);\n }\n \n+void BitcoinApplication::createSplashScreen(bool isaTestNet)\n+{\n+    SplashScreen *splash = new SplashScreen(QPixmap(), 0, isaTestNet);\n+    splash->setAttribute(Qt::WA_DeleteOnClose);\n+    splash->show();\n+    connect(this, SIGNAL(splashFinished(QWidget*)), splash, SLOT(slotFinish(QWidget*)));\n+}\n+\n void BitcoinApplication::startThread()\n {\n     coreThread = new QThread(this);\n@@ -348,9 +326,11 @@ void BitcoinApplication::requestShutdown()\n     window->hide();\n     window->setClientModel(0);\n     window->removeAllWallets();\n-    guiref.clear();\n \n     delete walletModel;\n+    walletModel = 0;\n+    delete clientModel;\n+    clientModel = 0;\n \n     // Show a simple window indicating shutdown status\n     QWidget *shutdownWindow = new QWidget();\n@@ -382,8 +362,7 @@ void BitcoinApplication::initializeResult(int retval)\n         PaymentServer::LoadRootCAs();\n         paymentServer->setOptionsModel(optionsModel);\n \n-        if (!splashref.isNull())\n-            splashref.data()->finish(window);\n+        emit splashFinished(window);\n \n         clientModel = new ClientModel(optionsModel);\n         window->setClientModel(clientModel);\n@@ -489,6 +468,7 @@ int main(int argc, char *argv[])\n     // Now that QSettings are accessible, initialize translations\n     QTranslator qtTranslatorBase, qtTranslator, translatorBase, translator;\n     initTranslations(qtTranslatorBase, qtTranslator, translatorBase, translator);\n+    uiInterface.Translate.connect(Translate);\n \n     // Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,\n     // but before showing splash screen.\n@@ -543,9 +523,7 @@ int main(int argc, char *argv[])\n     app.createOptionsModel();\n \n     // Subscribe to global signals from core\n-    uiInterface.ThreadSafeMessageBox.connect(ThreadSafeMessageBox);\n     uiInterface.InitMessage.connect(InitMessage);\n-    uiInterface.Translate.connect(Translate);\n \n     // Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,\n     // but before showing splash screen.\n@@ -557,12 +535,7 @@ int main(int argc, char *argv[])\n     }\n \n     if (GetBoolArg(\"-splash\", true) && !GetBoolArg(\"-min\", false))\n-    {\n-        SplashScreen *splash = new SplashScreen(QPixmap(), 0, isaTestNet);\n-        splash->setAttribute(Qt::WA_DeleteOnClose);\n-        splash->show();\n-        splashref = splash;\n-    }\n+        app.createSplashScreen(isaTestNet);\n \n     try\n     {"
      },
      {
        "sha": "f8daa08c4d56e160aae1f798eebc6001dc034949",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35ecf854c084c248ad640c6af030a9d1ed726c47/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35ecf854c084c248ad640c6af030a9d1ed726c47/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=35ecf854c084c248ad640c6af030a9d1ed726c47",
        "patch": "@@ -170,10 +170,16 @@ BitcoinGUI::BitcoinGUI(bool fIsTestnet, QWidget *parent) :\n \n     // Initially wallet actions should be disabled\n     setWalletActionsEnabled(false);\n+\n+    // Subscribe to notifications from core\n+    subscribeToCoreSignals();\n }\n \n BitcoinGUI::~BitcoinGUI()\n {\n+    // Unsubscribe from notifications from core\n+    unsubscribeFromCoreSignals();\n+\n     GUIUtil::saveWindowGeometry(\"nWindow\", this);\n     if(trayIcon) // Hide tray icon, as deleting will let it linger until quit (on Ubuntu)\n         trayIcon->hide();\n@@ -851,3 +857,29 @@ void BitcoinGUI::detectShutdown()\n     if (ShutdownRequested())\n         QMetaObject::invokeMethod(QCoreApplication::instance(), \"quit\", Qt::QueuedConnection);\n }\n+\n+static bool ThreadSafeMessageBox(BitcoinGUI *gui, const std::string& message, const std::string& caption, unsigned int style)\n+{\n+    bool modal = (style & CClientUIInterface::MODAL);\n+    bool ret = false;\n+    // In case of modal message, use blocking connection to wait for user to click a button\n+    QMetaObject::invokeMethod(gui, \"message\",\n+                               modal ? GUIUtil::blockingGUIThreadConnection() : Qt::QueuedConnection,\n+                               Q_ARG(QString, QString::fromStdString(caption)),\n+                               Q_ARG(QString, QString::fromStdString(message)),\n+                               Q_ARG(unsigned int, style),\n+                               Q_ARG(bool*, &ret));\n+    return ret;\n+}\n+\n+void BitcoinGUI::subscribeToCoreSignals()\n+{\n+    // Connect signals to client\n+    uiInterface.ThreadSafeMessageBox.connect(boost::bind(ThreadSafeMessageBox, this, _1, _2, _3));\n+}\n+\n+void BitcoinGUI::unsubscribeFromCoreSignals()\n+{\n+    // Disconnect signals from client\n+    uiInterface.ThreadSafeMessageBox.disconnect(boost::bind(ThreadSafeMessageBox, this, _1, _2, _3));\n+}"
      },
      {
        "sha": "f5d5bb976252f11e6ea0a4dceb4cd0948d8e7acb",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35ecf854c084c248ad640c6af030a9d1ed726c47/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35ecf854c084c248ad640c6af030a9d1ed726c47/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=35ecf854c084c248ad640c6af030a9d1ed726c47",
        "patch": "@@ -111,6 +111,11 @@ class BitcoinGUI : public QMainWindow\n     /** Enable or disable all wallet-related actions */\n     void setWalletActionsEnabled(bool enabled);\n \n+    /** Connect core signals to GUI client */\n+    void subscribeToCoreSignals();\n+    /** Disconnect core signals from GUI client */\n+    void unsubscribeFromCoreSignals();\n+\n signals:\n     /** Signal raised when a URI was entered or dragged to the GUI */\n     void receivedURI(const QString &uri);"
      },
      {
        "sha": "8b16496c188237b3f3e6e835daf3436e1d49281e",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35ecf854c084c248ad640c6af030a9d1ed726c47/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35ecf854c084c248ad640c6af030a9d1ed726c47/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=35ecf854c084c248ad640c6af030a9d1ed726c47",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"clientversion.h\"\n #include \"util.h\"\n+#include \"ui_interface.h\"\n \n #include <QApplication>\n #include <QPainter>\n@@ -85,4 +86,37 @@ SplashScreen::SplashScreen(const QPixmap &pixmap, Qt::WindowFlags f, bool isTest\n     pixPaint.end();\n \n     this->setPixmap(newPixmap);\n+\n+    subscribeToCoreSignals();\n+}\n+\n+SplashScreen::~SplashScreen()\n+{\n+    unsubscribeFromCoreSignals();\n+}\n+\n+void SplashScreen::slotFinish(QWidget *mainWin)\n+{\n+    finish(mainWin);\n+}\n+\n+static void InitMessage(SplashScreen *splash, const std::string &message)\n+{\n+    QMetaObject::invokeMethod(splash, \"showMessage\",\n+        Qt::QueuedConnection,\n+        Q_ARG(QString, QString::fromStdString(message)),\n+        Q_ARG(int, Qt::AlignBottom|Qt::AlignHCenter),\n+        Q_ARG(QColor, QColor(55,55,55)));\n+}\n+\n+void SplashScreen::subscribeToCoreSignals()\n+{\n+    // Connect signals to client\n+    uiInterface.InitMessage.connect(boost::bind(InitMessage, this, _1));\n+}\n+\n+void SplashScreen::unsubscribeFromCoreSignals()\n+{\n+    // Disconnect signals from client\n+    uiInterface.InitMessage.disconnect(boost::bind(InitMessage, this, _1));\n }"
      },
      {
        "sha": "6bc10e60ababaac0a45f55410c0baa8c645bb5f4",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35ecf854c084c248ad640c6af030a9d1ed726c47/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35ecf854c084c248ad640c6af030a9d1ed726c47/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=35ecf854c084c248ad640c6af030a9d1ed726c47",
        "patch": "@@ -15,6 +15,17 @@ class SplashScreen : public QSplashScreen\n \n public:\n     explicit SplashScreen(const QPixmap &pixmap, Qt::WindowFlags f, bool isTestNet);\n+    ~SplashScreen();\n+\n+public slots:\n+    /** Slot to call finish() method as it's not defined as slot */\n+    void slotFinish(QWidget *mainWin);\n+\n+private:\n+    /** Connect core signals to splash screen */\n+    void subscribeToCoreSignals();\n+    /** Disconnect core signals to splash screen */\n+    void unsubscribeFromCoreSignals();\n };\n \n #endif // SPLASHSCREEN_H"
      }
    ]
  },
  {
    "sha": "9a2305a1b3075d110f4127a3d3c38b014237968a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTIzMDVhMWIzMDc1ZDExMGY0MTI3YTNkM2MzOGIwMTQyMzc5Njhh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-01-08T09:45:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-01-11T09:20:28Z"
      },
      "message": "qt: Stop shutdown detection timer during shutdown\n\nStop the shutdown timer from exiting the main loop\nwhen shutdown is already in progress.\n\nFixes seeming hanging window after typing 'stop' in debug console.\n\nAlso hide the debug console during shutdown as it is useless without\na core to connect to.",
      "tree": {
        "sha": "051569c70130b803a6dee6f19b214e2a380cde4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/051569c70130b803a6dee6f19b214e2a380cde4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a2305a1b3075d110f4127a3d3c38b014237968a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a2305a1b3075d110f4127a3d3c38b014237968a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a2305a1b3075d110f4127a3d3c38b014237968a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a2305a1b3075d110f4127a3d3c38b014237968a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35ecf854c084c248ad640c6af030a9d1ed726c47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35ecf854c084c248ad640c6af030a9d1ed726c47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35ecf854c084c248ad640c6af030a9d1ed726c47"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 9,
      "deletions": 2
    },
    "files": [
      {
        "sha": "45551657d79546e89ab3176691800dba97b063af",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a2305a1b3075d110f4127a3d3c38b014237968a/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a2305a1b3075d110f4127a3d3c38b014237968a/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=9a2305a1b3075d110f4127a3d3c38b014237968a",
        "patch": "@@ -193,6 +193,7 @@ public slots:\n     ClientModel *clientModel;\n     BitcoinGUI *window;\n     WalletModel *walletModel;\n+    QTimer *pollShutdownTimer;\n     int returnValue;\n \n     void startThread();\n@@ -250,6 +251,7 @@ BitcoinApplication::BitcoinApplication(int &argc, char **argv):\n     clientModel(0),\n     window(0),\n     walletModel(0),\n+    pollShutdownTimer(0),\n     returnValue(0)\n {\n     setQuitOnLastWindowClosed(false);\n@@ -282,7 +284,7 @@ void BitcoinApplication::createWindow(bool isaTestNet)\n {\n     window = new BitcoinGUI(isaTestNet, 0);\n \n-    QTimer* pollShutdownTimer = new QTimer(window);\n+    pollShutdownTimer = new QTimer(window);\n     connect(pollShutdownTimer, SIGNAL(timeout()), window, SLOT(detectShutdown()));\n     pollShutdownTimer->start(200);\n }\n@@ -326,6 +328,7 @@ void BitcoinApplication::requestShutdown()\n     window->hide();\n     window->setClientModel(0);\n     window->removeAllWallets();\n+    pollShutdownTimer->stop();\n \n     delete walletModel;\n     walletModel = 0;"
      },
      {
        "sha": "ee27fe90a62b288732ef76f5805365377ef532db",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a2305a1b3075d110f4127a3d3c38b014237968a/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a2305a1b3075d110f4127a3d3c38b014237968a/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=9a2305a1b3075d110f4127a3d3c38b014237968a",
        "patch": "@@ -855,7 +855,11 @@ void BitcoinGUI::toggleHidden()\n void BitcoinGUI::detectShutdown()\n {\n     if (ShutdownRequested())\n-        QMetaObject::invokeMethod(QCoreApplication::instance(), \"quit\", Qt::QueuedConnection);\n+    {\n+        if(rpcConsole)\n+            rpcConsole->hide();\n+        qApp->quit();\n+    }\n }\n \n static bool ThreadSafeMessageBox(BitcoinGUI *gui, const std::string& message, const std::string& caption, unsigned int style)"
      }
    ]
  }
]