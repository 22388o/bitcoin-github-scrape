practicalswift,2021-05-20 19:36:41,"Concept ACK\n\nExcellent work! :)",https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-845420275,845420275,
adamjonas,2021-05-20 21:03:37,Concept ACK. Nice work!,https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-845475291,845475291,
jonatack,2021-05-21 09:21:41,Concept ACK. Saw a live demo of this and it seems to be very cool.,https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-845814113,845814113,
0xB10C,2021-05-24 07:13:21,"We'll cover this PR in the PR Review Club this Wednesday (May, 26th).\n\nhttps://bitcoincore.reviews/22006",https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-846820444,846820444,
0xB10C,2021-05-24 14:28:02,I added an example (`log_raw_p2p_msgs.py`) showcasing and documenting some USDT and eBPF limitations. Tracing P2P messages was one of the motivations for USDT in https://github.com/bitcoin/bitcoin/pull/19866 as an potential alternative to https://github.com/bitcoin/bitcoin/pull/19509. Some P2P messages like `tx` and `block` can be larger than the maximum allocation size of 32kb in eBPF. This means,https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-847080691,847080691,
laanwj,2021-05-25 08:26:29,"Impressive work! Thanks for getting back to this.\n\n>  How to use these tracepoints under macOS?\n\nFWIW I think it's ok to keep this out of the scope of this PR. Can extend this later. Let's focus on Linux first.\n\n> Release builds with USDT support?\n\nSame for this. I think it's a no-brainier to have these probes in the release builds eventually, but no need to do so here. Mind that c",https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-847665065,847665065,
jamesob,2021-05-29 03:43:12,Concept ACK - very cool. Will review soon.,https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-850762746,850762746,
0xB10C,2021-06-11 12:50:47,"I'm marking this as ready for review. Added a commit documenting the `systemtap` dependency for USDT and installation instructions for Debian-like and Fedora (however, didn't have a chance to test building and hooking into the tracepoints on these distros yet).\n\nThe macOS CI seems to [complain](https://github.com/bitcoin/bitcoin/pull/22006/checks?check_run_id=2781317934) about the macros in `t",https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-859559004,859559004,
fanquake,2021-06-14 05:50:06,"> The macOS CI seems to complain about the macros in trace.h. Haven't figured out what the issue is here. Would appreciate it if someone running macOS could try and build bitcoind with this patch.\n\nThis should be solved by #22238.",https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-860385374,860385374,
fanquake,2021-06-18 07:18:14,"@0xB10C if you rebase this now, the CI should be fixed.",https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-863817528,863817528,
0xB10C,2021-06-18 08:48:46,@fanquake thank you! rebased.,https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-863873293,863873293,
theStack,2021-06-18 14:22:20,"Concept ACK. Very nice work, looking forward to reviewing and testing this in detail.",https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-864075993,864075993,
jb55,2021-06-24 20:09:15,"Tested ACK 462a980ebc970da1da6f76af6db5d173cd9cf951, amazing work and great docs ",https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-867919370,867919370,
DrahtBot,2021-07-08 07:07:02,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22412 by luke-jr\n\nIf you consider this pull request important, please also help to review the conflicting pull requests",https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-876188382,876188382,
laanwj,2021-07-27 13:18:01,"~~Tested ACK 462a980ebc970da1da6f76af6db5d173cd9cf951~~\nre-ACK 8f37f5c2a562c38c83fc40234ade9c301fc4e685\n\nEdit: FWIW, I needed to `sudo apt install python3-bpfcc` to get the Python samples to work on Ubuntu 20.04.",https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-887504912,887504912,
0xB10C,2021-07-27 15:20:33,"Sorry for invalidating the two ACKs. Addressed https://github.com/bitcoin/bitcoin/pull/22006#discussion_r667095099 and fixed another occurrence of https://github.com/bitcoin/bitcoin/pull/22006#discussion_r646471166 I previously forgot (and rebased on top of latest master).\n\n`git range-diff 462a980eb...8f37f5c2a`",https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-887603580,887603580,
jb55,2021-07-27 15:25:44,"range-diff LGTM!\n\nACK 8f37f5c2a562c38c83fc40234ade9c301fc4e685",https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-887607917,887607917,
adamjonas,2021-05-20 17:34:58,"```suggestion\nShowing recent P2P messages between our node and their node for a selected peer.\n```",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636317357,636317357,contrib/tracing/README.md
jonatack,2021-05-21 09:26:49,"perhaps omit ""their node for """,https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636773835,636773835,contrib/tracing/README.md
jonatack,2021-05-21 09:27:46,s/THEIR NODE/PEER/,https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636774448,636774448,contrib/tracing/README.md
jonatack,2021-05-21 09:29:44,"Wishlist: this for disconnection and eviction events, with the message, connection direction and type, peer id and address, network the peer connected through. ",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636775863,636775863,contrib/tracing/README.md
0xB10C,2021-05-21 09:54:30,"Agree! We discussed something similar in https://github.com/bitcoin/bitcoin/issues/20981#issuecomment-766096054 too. Thanks for the input on the arguments! I'll resolve this in favor of https://github.com/bitcoin/bitcoin/issues/20981#issuecomment-845833323 :)\n\n ",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636791861,636791861,contrib/tracing/README.md
jnewbery,2021-05-21 10:16:38,Do we need to sanitize this? the message types for all outgoing messages are hardcoded in our binary so should all be safe.,https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636805329,636805329,src/net.cpp
0xB10C,2021-05-21 10:32:12,"done, thanks!",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636814198,636814198,contrib/tracing/README.md
0xB10C,2021-05-21 10:32:33,"done both, thanks!",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636814363,636814363,contrib/tracing/README.md
0xB10C,2021-05-22 09:06:06,"```suggestion\n1. The tracing script compiles the eBPF code and loads the eBFP program into a kernel VM\n```",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r637377827,637377827,doc/tracing.md
0xB10C,2021-05-24 09:37:02,"Agree, will remove it from the tracepoint and logging.",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r637818198,637818198,src/net.cpp
jb55,2021-05-25 12:57:46,"although this is convenient, it does use up a valuable argument slot. we could achieve the same thing with a uprobe:\n\n```bpftrace\nuprobe:bitcoind:""CChainState::ConnectBlock(CBlock const&, BlockValidationState&, CBlockIndex*, CCoinsViewCache&, CChainParams const&, bool)"" \n{ \n    @connect_start = nsecs;\n}\n\nusdt:bitcoind:validation:block_connected\n{\n    @t = nsecs - @connect_start",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r638762267,638762267,src/validation.cpp
jb55,2021-05-25 13:14:16,"It's probably fine in this case, but we should avoid passing formatted data to USDTs when we can format it on the bpf side for performance reasons, especially in tight loops. It looks like we're already passing `GetHash().data()`, can we format this on the ebpf side? I remember having trouble doing this in bpftrace, but perhaps that's a temporary issue until bpftrace gets better buffer formatting.",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r638775357,638775357,src/validation.cpp
rajarshimaitra,2021-05-26 06:23:11,nit: `user space` at the end. ,https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639432479,639432479,contrib/tracing/log_raw_p2p_msgs.py
rajarshimaitra,2021-05-26 06:27:31,I think this should be `../../doc/tracing.md`. ,https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639434474,639434474,contrib/tracing/README.md
rajarshimaitra,2021-05-26 07:41:45,"Little confused here, are we returning on `NULL` or `not NULL`? ",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639477281,639477281,contrib/tracing/log_raw_p2p_msgs.py
0xB10C,2021-05-26 11:03:33,"Agree, ideally we'd only pass the `GetHash().data()` as first argument.\n\n>  It looks like we're already passing GetHash().data(), can we format this on the ebpf side? I remember having trouble doing this in bpftrace, but perhaps that's a temporary issue until bpftrace gets better buffer formatting.\n\nRight, the current `%r` printf formatting for buffers in bpftrace isn't suitable for printi",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639620734,639620734,src/validation.cpp
0xB10C,2021-05-26 11:14:41,"I'm not sure if we want to add two tracepoints (one fn start, one fn end) for measuring function timing. This would also require us to pass and handle some kind of identifier for functions running in parallel (not the case for `ConnectBlock`). ",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639627491,639627491,src/validation.cpp
rajarshimaitra,2021-05-26 12:53:31,It seems to me the tplist tool binary name is `tplist-bpfcc`. Thats worked for me and its also mentioned like this in the [bcc doc](https://github.com/iovisor/bcc/blob/master/INSTALL.md#ubuntu---binary),https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639696163,639696163,doc/tracing.md
jnewbery,2021-05-26 14:19:39,"```suggestion\n# Bitcoin P2P messages can be larger than 32kb (e.g tx, block, ...). The eBPF\n```",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639773479,639773479,contrib/tracing/log_raw_p2p_msgs.py
jonatack,2021-05-26 14:40:02,"(there are 3 other s/eBFP/eBPF/ elsewhere in this doc to fix up too)\n\ns/e.g/e.g./",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639793201,639793201,contrib/tracing/log_raw_p2p_msgs.py
rajarshimaitra,2021-05-26 14:40:58,"I am getting the following error here\n\n```\n$ sudo bpftrace ./contrib/tracing/log_p2p_traffic.bt\nterminate called after throwing an instance of 'std::logic_error'\n  what():  basic_string::_M_construct null not valid\nAborted\n```\n\ntrace points seem to be defined. Node is running and talking to peers in `testnet`\n\nNot sure what's throwing this error here. ",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639794118,639794118,contrib/tracing/README.md
rajarshimaitra,2021-05-26 15:56:32,"This is so cool. This is a communication sequence for a Peer asking for BIP157 filters.\n\n![image](https://user-images.githubusercontent.com/36541669/119705791-cf673d00-be76-11eb-9d53-649cae0e4def.png)\n\nIt would be even super awesome if I could also select each message and can get the content. ",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639870062,639870062,contrib/tracing/README.md
Emzy,2021-05-26 16:28:36,"I get the error:\n``` contrib/tracing/connectblock_benchmark.bt:138:3-71: ERROR: print() expects a map to be provided```\nchanging it from ```print``` to ```printf``` fixes it for me.",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639898074,639898074,contrib/tracing/connectblock_benchmark.bt
Emzy,2021-05-26 16:47:28,"The ```curces.A_DIM``` vs ```A_NORMAL``` is not showing up in my terminal.\nI think this looks much better:\n```\ncurses.A_REVERSE if i + scroll == cur_list_pos else curses.A_NORMAL)\n```\n",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639919027,639919027,contrib/tracing/p2p_monitor.py
0xB10C,2021-05-26 16:51:02,Interesting.. Which version of bpftrace do you have installed? (`bpftrace --v`),https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639921642,639921642,contrib/tracing/connectblock_benchmark.bt
Emzy,2021-05-26 16:56:33,bpftrace v0.9.4 from Ubuntu 20.04.2 LTS,https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639925868,639925868,contrib/tracing/connectblock_benchmark.bt
0xB10C,2021-06-07 09:39:42,Seems like histogram support for `print()` was added in a later version of bpftrace (I've been using `v0.11.4`). I've changed it to `printf()` which should work with `v0.9` and `v0.11`. ,https://github.com/bitcoin/bitcoin/pull/22006#discussion_r646429202,646429202,contrib/tracing/connectblock_benchmark.bt
0xB10C,2021-06-07 10:39:56,"Thanks! That comment was incorrect and super confusing. I've changed it to\n\n``` c\n// lookup() does not return a NULL pointer. However, the BPF verifier\n// requires an explicit check that that the `msg` pointer isn't a NULL\n// pointer. See https://github.com/iovisor/bcc/issues/2595\nif (msg == NULL) return 1;\n```\n\nSee also https://github.com/iovisor/bcc/issues/2595\n",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r646471166,646471166,contrib/tracing/log_raw_p2p_msgs.py
0xB10C,2021-06-07 11:01:02,"Hm, I agree that this is the case for Ubuntu. There seem to be naming differences between distros. \n\nI've documented that there might be binary naming differences depending on distro used and added `tplist-bpfcc` as an example for Ubuntu (Ubuntu is the most commonly used Linux distro, but I'm not sure how that relates to Bitcoin Core developers). ",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r646484967,646484967,doc/tracing.md
0xB10C,2021-06-07 11:02:37,"Thanks for reporting, I'll have a look. Whats your bpftrace version (`bpftrace --v`)?",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r646485894,646485894,contrib/tracing/README.md
0xB10C,2021-06-07 11:07:49,"> It would be even super awesome if I could also select each message and can get the content.\n\nI agree, however I like to keep this example slim. The idea is to provide a showcase and a code example for USDT. Advanced USDT scripts can be collected somewhere else.",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r646489040,646489040,contrib/tracing/README.md
theStack,2021-07-09 17:07:07,"Is the error supposed to appear during the `./configure` run? In my case, explicitely passing `--enable-ebpf` didn't throw an error when `systemtap-sdt-dev` was still missing, only `ebpf tracing    = no` was displayed on the summary at the end. Tested on Debian bullseye/sid.",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r667095099,667095099,doc/dependencies.md
laanwj,2021-07-27 13:16:50,"How is this supposed to find the process to attach to? Or would it log metrics for any `bitcoind` instance running on the system? (it seems so!) Unless you specify `-p`, I guess.",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r677439389,677439389,contrib/tracing/README.md
0xB10C,2021-07-27 15:10:45,"The bpftrace scripts include a relative path to the bitcoind binary in `./src/bitcoind` e.g. `usdt:./src/bitcoind:validation:block_connected`. \n\nThis is mentioned on the [examples page](https://github.com/bitcoin/bitcoin/pull/22006/files#diff-a0161c271f6b7bf15c36d70d1c3943b2eb9032e6f9c754c00914103dcf7de29dR33-R36).\n\n",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r677547161,677547161,contrib/tracing/README.md
0xB10C,2021-07-27 15:15:07,Thanks. I've tested this and the docs doesn't seem to be correct. I think assumed this to be the case similar to the `--with-qrencode` behavior in the line above.,https://github.com/bitcoin/bitcoin/pull/22006#discussion_r677551374,677551374,doc/dependencies.md
jb55,2021-07-27 17:01:55,"I think something more general would be `usdt:*bitcoind:net:inbound_message` and then\n\n`bpftrace -p $(pgrep bitcoind) log_p2p_traffic.bt`\n\neg this uprobe:\n\n```\nsudo bpftrace -p $(pgrep bitcoind) -e '\n  uprobe:*bitcoind:""PeerManager::ProcessMessages(CNode*, std::atomic<bool>&)"" { printf(""node %p %d\n"", arg1, *arg2) }\n'\n```\n\nseems to work for me...",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r677638706,677638706,contrib/tracing/README.md
jb55,2021-07-27 17:37:05,"oh hmm I don't think you need `*bitcoind`, this also worked for me?\n\n```\nsudo bpftrace -p $(pgrep bitcoind) -e '\n  uprobe:""PeerManager::ProcessMessages(CNode*, std::atomic<bool>&)"" { printf(""node %p %d\n"", arg1, *arg2) }\n'\n```",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r677663209,677663209,contrib/tracing/README.md
MarcoFalke,2021-07-28 12:10:24,why is this refactor(?) mixed in a non-refactor commit without any explanation?,https://github.com/bitcoin/bitcoin/pull/22006#discussion_r678240396,678240396,src/net.cpp
jnewbery,2021-07-28 12:24:38,See https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636805329,https://github.com/bitcoin/bitcoin/pull/22006#discussion_r678250290,678250290,src/net.cpp
MarcoFalke,2021-07-28 12:29:14,"It would have been good to split the refactor from the feature commit or at least mention it in the commit body. Otherwise reviewing locally is impossible and one needs to rely on GitHub, which showed in the past to be corrupting both code and metadata or be unreachable.",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r678253509,678253509,src/net.cpp
0xB10C,2021-07-28 12:29:42,Didn't consider that this needs a explanation in the commit message.,https://github.com/bitcoin/bitcoin/pull/22006#discussion_r678253784,678253784,src/net.cpp
0xB10C,2021-07-28 12:31:32,"> It would have been good to split the refactor from the feature commit or at least mention it in the commit body. Otherwise reviewing locally is impossible and one needs to rely on GitHub, which showed in the past to be corrupting both code and metadata or be unreachable.\n\nYes, makes sense. ",https://github.com/bitcoin/bitcoin/pull/22006#discussion_r678255217,678255217,src/net.cpp
