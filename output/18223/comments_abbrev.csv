nopara73,2020-02-28 14:40:37,Note this PR and its accompanying issue (https://github.com/bitcoin/bitcoin/issues/18221) conforms to the original BIP157 filter extensibility proposal (https://github.com/bitcoin/bips/blob/master/bip-0157.mediawiki#filter-types) and to the proposal I submitted about filter combinations too: https://github.com/bitcoin/bitcoin/issues/18221,https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-592542243,592542243,
nopara73,2020-02-28 17:40:07,For the record there is a discussion about that probably it should combine both P2WPKH and P2WSH scripts: https://github.com/bitcoin/bitcoin/issues/18222#issuecomment-592631517,https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-592644104,592644104,
Sjors,2020-03-02 08:31:17,You may want to squash all this into 1 commit (perhaps a separate commit to add `OP_RETURN` to the `basic` undo filter).,https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-593281427,593281427,
dangershony,2020-03-02 21:41:32,"Thank you @Sjors for your helpful review, I will squash the commits when there is a general ack.",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-593637564,593637564,
MarcoFalke,2020-03-03 11:25:45,"Tend to NACK. I fail to see a use case for this, and a missing use case does not justify the time spent on code review and the resulting complexity/user confusion and maintenance overhead when this is merged.",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-593903472,593903472,
nopara73,2020-03-03 17:17:36,What do you mean no use case? It's already being used and in production for 1.5 years now.,https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-594065664,594065664,
luke-jr,2020-03-04 15:12:11,"Concept NACK if I understand this correctly.\n\nIf we assume everything will be Segwit eventually, this filter will just become redundant with the basic one?\n\nIf the goal is to reduce the initial download, couldn't the wallet just start with its birthdate block anyway?\n\nPlus, remotely-accessible filters are still a bad idea in the first place, which this seems to presuppose...",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-594588223,594588223,
MarcoFalke,2020-03-04 15:18:47,"> What do you mean no use case? It's already being used and in production for 1.5 years now.\n\nIf there is a use case internal to the Wasabi wallet, that is fine. However, for anyone else (and probably also Wasabi wallet), they are better off using the existing BIP 158 filters.",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-594593320,594593320,
nopara73,2020-03-05 10:06:40,@dangershony Let's discuss alternative solutions. If I wouldn't be so biased I think even I would NACK this with P2P in mind. (Not for RPC only though.),https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-595141379,595141379,
dangershony,2020-03-05 13:34:12,After internal discussions we decided to close this PR (thanks for providing review),https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-595232096,595232096,
MaxHillebrand,2020-03-05 14:20:22,"Thanks for the review everyone!\n\nThough I am sad about the concept NACK. I had high hopes that with customizable block filters served over RPC, we make a great step towards further separating the wallet functionality from Core, making it more compatible with dedicated wallet software. Wasabi is currently segwit v0 only, and it will be segwit v1 taproot only as soon as possible [similar to ligh",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-595253155,595253155,
luke-jr,2020-03-05 14:44:02,"Neutrino is NOT full verification, and people falsely portraying it as such is a huge part of the problem with Neutrino. It is no safer than other SPV protocols, and less efficient.\n\nI don't see why this means Wasabi will forego full validation. That doesn't logically follow at all.\n\n(I suggest we find someplace to continue this topic off this GitHub PR)",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-595264676,595264676,
MaxHillebrand,2020-03-05 14:50:29,"Yes @luke-jr, the current way BIP158 is used in Wasabi relies on the server to build and send valid filters - there is no verification, and it relies on trust in the server. [this is the problem that we intended to solve with this PR]. Wasabi uses block filters solely for the privacy benefits, of having a light wallet without leaking the xpub or address to any third party server.\n\nHowever, we ",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-595268039,595268039,
MarcoFalke,2020-03-05 15:55:24,"> even after segwit activation, basic filters are 4.8 GB; compared to 250MB for segwit v0 filters\n\nSegwit usage is higher than 50% right now, and assuming that most wallets have a rather recent birthday, the difference should be a factor of 2 or so (clearly less than 10). Further, assuming that taproot is activated some day, it will likely show a similar or higher usage pattern. With that in m",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-595303196,595303196,
sipa,2020-03-05 16:08:21,"If it's for local RPC usage, why is a filter needed at all? You can just fetch the block, and check it for matching transactions like a pre-BIP37 wallet would. If that results in any transactions that were missing from the remotely-provided filter, you know the filter is missing things.",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-595309918,595309918,
luke-jr,2020-03-05 16:14:45,"> Yes @luke-jr, the current way BIP158 is used in Wasabi relies on the server to build and send valid filters - there is no verification, and trust in the server. [this is the problem that we intended to solve with this PR].\n\nThis PR cannot solve it.\n\n> Wasabi uses block filters solely for the privacy benefits, of having a light wallet without leaking the xpub or address to any third party",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-595313256,595313256,
nopara73,2020-03-05 16:48:28,"Let me clarify a few things.  \n\nWasabi client uses P2WPKH only filters those are built on and fetched from the Wasabi backend. We want to make Wasabi a hybrid full node, which we've progressed towards gradually, to the point that only the validation function is needed to be implemented. The idea is to serve the exact same filters from the server to the clients, so the client can just verify th",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-595330862,595330862,
luke-jr,2020-03-05 17:06:36,">Like a getblock rpc request where more information on the inputs are added to the tx?\n\nLike #16083 ? (It's already in Knots, so you could even use it immediately!)",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-595339831,595339831,
dangershony,2020-03-05 22:23:55,"@luke-jr that's great, I also noticed you merged the v0 filter commits to Knots, eta when this will go in Knots master?",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-595477562,595477562,
luke-jr,2020-03-05 23:48:12,"Knots doesn't have a master, just releases. Should be in v0.19.1 (but disabled unless specified explicitly via `-blockfilterindex=v0`).",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-595502578,595502578,
Sjors,2020-03-06 10:05:23,"It may be worth studying c-lightning; they scan all blocks for lightning transactions, no filters needed, and in my experience it's fast. You could wrap some of their C code if it looks too magical :-)",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-595695871,595695871,
nopara73,2020-03-06 13:08:12,"> Like #16083 ? (It's already in Knots, so you could even use it immediately!)\n\n![image](https://user-images.githubusercontent.com/9156103/76086184-e55bba00-5fb3-11ea-968f-4c8fad9f1a79.png)\n",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-595759832,595759832,
harding,2020-03-08 18:51:21,"@MaxHillebrand \n\n> Basic filters are unfortunately not feasible for Wasabi [even after segwit activation, basic filters are 4.8 GB; compared to 250MB for segwit v0 filters].\n\nAs @MarcoFalke noted above, this conclusion seems unlikely, so I tested the size of the current ""basic"" filters myself from segwit activation to present and I get a size of 2.6 GB.\n\n    $ for i in `seq 481824 6208",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-596238365,596238365,
dangershony,2020-03-08 21:42:37,"@harding yeah this was incorrect the 4.8GB refers to the entire basic filter data, still core has no way to store locally only basic filters form segwit activation. (also note that 2.6 GB is probably too much if we can avoid it)\n\n> the Wasabi application should be able to use the basic filters produced by Core without any changes to Wasabi's application logic.  \n\nWasabi compresses the scri",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-596256235,596256235,
harding,2020-03-08 22:17:45,"> 2.6 GB is probably too much if we can avoid it\n\n2.6 is roughly 50% the minimum amount of data Bitcoin Core needs to store anyway (chainstate plus minimum prune depth) or the rough equivalent of 10 days worth of blocks and undo data at current utilization levels, so 2.6 GB seems to me to be a pretty small additional requirement on top of using Bitcoin Core in the first place.\n\nAnd, as men",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-596259299,596259299,
dangershony,2020-03-09 11:47:24,"You are right, this filter will sill not be compatible with wasabi (and had we gone down this path would mean we have to support two api endpoints after the upgrade) there are a few narratives in parallel here (fetch filters from local core node, fetch filters from wasabi server, maintain backwards compatibility, least disruption to current wasabi design etc...) this will explain the confusion.\n",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-596479621,596479621,
harding,2020-03-09 16:32:13,"> Each client (not using a local core node) will fetch 2.6GB of data form the server (wasabi stores all filters locally) if we can prevent this its preferable.\n\nYes, this can be prevented, that's what I've been trying to say but I must not be communicating effectively here, so let me start from first principles (my appologies for repeating stuff you probably already know).\n\nThe process of ",https://github.com/bitcoin/bitcoin/pull/18223#issuecomment-596636403,596636403,
molnard,2020-02-28 14:09:53,"```suggestion\n    // Filter 1 is reserved as an option to include all filters.\n```",https://github.com/bitcoin/bitcoin/pull/18223#discussion_r385714744,385714744,src/blockfilter.h
molnard,2020-02-28 14:10:41,"```suggestion\n        // Using the same filter params as basic type.\n```",https://github.com/bitcoin/bitcoin/pull/18223#discussion_r385715107,385715107,src/blockfilter.cpp
Sjors,2020-03-01 15:58:55,`enumeration value 'INVALID' not handled in switch`. I guess in this case `default: assert(false)` would be appropriate?,https://github.com/bitcoin/bitcoin/pull/18223#discussion_r386119285,386119285,src/blockfilter.cpp
Sjors,2020-03-01 16:12:43,"This case is identical to `BlockFilterType::BASIC`, so you can avoid the duplication.",https://github.com/bitcoin/bitcoin/pull/18223#discussion_r386120193,386120193,src/blockfilter.cpp
Sjors,2020-03-01 16:16:26,"Instead of this new function, maybe just add these four lines to `BasicFilterElements` (after the `OP_RETURN` check) and give that two additional arguments `bool only_segwit = true, int witness_version = 0`",https://github.com/bitcoin/bitcoin/pull/18223#discussion_r386120440,386120440,src/blockfilter.cpp
Sjors,2020-03-01 16:23:42,"The `basic` filter undo code doesn't have a check for `OP_RETURN`. @jimpo was that because the difference on undo data is negligible? I suppose that's not the case here though, but then I'd prefer adding OP_RETURN as well for readability.",https://github.com/bitcoin/bitcoin/pull/18223#discussion_r386120920,386120920,src/blockfilter.cpp
dangershony,2020-03-01 23:42:59,"ah good point, will fix.",https://github.com/bitcoin/bitcoin/pull/18223#discussion_r386153251,386153251,src/blockfilter.cpp
dangershony,2020-03-01 23:44:29,"It's handled in the code above so I left it out, but for best practice I agree so I'll add an assert as suggested.",https://github.com/bitcoin/bitcoin/pull/18223#discussion_r386153357,386153357,src/blockfilter.cpp
dangershony,2020-03-01 23:48:57,"Is `opreturn` not already filtered out with the witness check?\nOr you mean to add the `opreturn` check to the blockundo on the code of the `basic` filter type?",https://github.com/bitcoin/bitcoin/pull/18223#discussion_r386153713,386153713,src/blockfilter.cpp
dangershony,2020-03-01 23:53:17,In that case the method name should change to `BuildFilterElements` no?,https://github.com/bitcoin/bitcoin/pull/18223#discussion_r386154075,386154075,src/blockfilter.cpp
Sjors,2020-03-02 08:26:58,If you combine this with the code from the `basic` filter then it's probably more readable to `OP_RETURN` back for that as well (assuming that doesn't break anything). For the `v0` filter it indeed doesn't matter.,https://github.com/bitcoin/bitcoin/pull/18223#discussion_r386249968,386249968,src/blockfilter.cpp
dangershony,2020-03-02 12:11:56,Shall I add the `OP_RETURN ` check also on the spent script then? I agree with you I see no reason why it's omitted.,https://github.com/bitcoin/bitcoin/pull/18223#discussion_r386356988,386356988,src/blockfilter.cpp
dangershony,2020-03-02 12:14:24,Any particular reason why defaulting segwit to true?,https://github.com/bitcoin/bitcoin/pull/18223#discussion_r386357964,386357964,src/blockfilter.cpp
dangershony,2020-03-02 13:30:14,Done,https://github.com/bitcoin/bitcoin/pull/18223#discussion_r386392290,386392290,src/blockfilter.cpp
dangershony,2020-03-02 13:30:20,Done,https://github.com/bitcoin/bitcoin/pull/18223#discussion_r386392348,386392348,src/blockfilter.cpp
Sjors,2020-03-02 13:46:29,"No, it should be `false` I think (basic filter is the default)",https://github.com/bitcoin/bitcoin/pull/18223#discussion_r386400668,386400668,src/blockfilter.cpp
luke-jr,2020-03-04 15:20:07,Is this a bugfix to the existing code? Please PR it separately if so.,https://github.com/bitcoin/bitcoin/pull/18223#discussion_r387735322,387735322,src/blockfilter.cpp
luke-jr,2020-03-04 15:21:53,Please use `case BlockFilterType::INVALID` here so new enum values warn at compile time.,https://github.com/bitcoin/bitcoin/pull/18223#discussion_r387736534,387736534,src/blockfilter.cpp
luke-jr,2020-03-04 15:32:49,"Let's keep the order BASIC,V0 here?",https://github.com/bitcoin/bitcoin/pull/18223#discussion_r387744637,387744637,src/blockfilter.cpp
luke-jr,2020-03-04 19:10:09,"Actually, it's it absolutely impossible to encounter an `OP_RETURN` here? These are spent pubkeys, right? You can't spend an `OP_RETURN`...",https://github.com/bitcoin/bitcoin/pull/18223#discussion_r387874789,387874789,src/blockfilter.cpp
dangershony,2020-03-04 20:38:17,"I agree but this is in response to this comment (for readability)\nhttps://github.com/bitcoin/bitcoin/pull/18223#discussion_r386120920\n\n",https://github.com/bitcoin/bitcoin/pull/18223#discussion_r387920404,387920404,src/blockfilter.cpp
luke-jr,2020-03-04 20:55:34,"I don't think this makes it any more readable...\n\nPrefer a comment simply stating that it is impossible.",https://github.com/bitcoin/bitcoin/pull/18223#discussion_r387928903,387928903,src/blockfilter.cpp
dangershony,2020-03-04 21:10:54,Reverted.,https://github.com/bitcoin/bitcoin/pull/18223#discussion_r387936428,387936428,src/blockfilter.cpp
Sjors,2020-03-06 09:49:28,"Aargh, I totally misread that code :-)",https://github.com/bitcoin/bitcoin/pull/18223#discussion_r388806543,388806543,src/blockfilter.cpp
