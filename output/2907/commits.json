[
  {
    "sha": "84d6d69fc69662b2709fffbeaf3c3b4f53c535b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGQ2ZDY5ZmM2OTY2MmIyNzA5ZmZmYmVhZjNjM2I0ZjUzYzUzNWIx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-08-17T22:58:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-08-17T22:58:04Z"
      },
      "message": "Squashed 'src/leveldb/' changes from ae6c262..a02ddf9\n\na02ddf9 Added GNU/kFreeBSD kernel name (TARGET_OS)\n8487468 CondVar::SignalAll was broken, leading to deadlocks on Windows builds. http://code.google.com/p/leveldb/issues/detail?id=149\nf6d84d1 Allow files to be opened for reading multiple times\ncb8e3f7 Checking whether closing succeeds\nd5317e8 Print actual Win32 error that occurred on file creation failure.\n907f308 Port leveldb to MinGW32\n9def2bf Mingw support for Windows LevelDB port\n0a7b074 Pre-Vista leveldb::port::InitOnce implementation\n31a2b09 Native Windows LevelDB port\n058a035 Remove Snappy support\n5bd76dc Release leveldb 1.12\n7b094f1 Release leveldb 1.11\n28dad91 Release leveldb 1.10\n514c943 Make DB::Open fail if sst files are missing.\nd84c825 Fix corruption bug found and analyzed by dhruba@gmail.com\nea2e919 added utility to dump leveldb files\nREVERT: ae6c262 Merge branch 'leveldb' into ripple-fork\nREVERT: 28fa222 Looks like a bit more delay is needed to smooth the latency.\nREVERT: a18f3e6 Tidy up JobQueue, add ripple_core module\nREVERT: ab82e57 Release leveldb 1.12\nREVERT: 02c6259 Release leveldb 1.11\nREVERT: 5bbb544 Rate limit compactions with a 25ms pause after each complete file.\nREVERT: 8c29c47 LevelDB issue 178 fix: cannot resize a level 0 compaction set\nREVERT: 18b245c Added GNU/kFreeBSD kernel name (TARGET_OS)\nREVERT: 8be9d12 CondVar::SignalAll was broken, leading to deadlocks on Windows builds. http://code.google.com/p/leveldb/issues/detail?id=149\nREVERT: c9fc070 Upgrade LevelDB to 1.10.0, mostly for better write stall logging.\nREVERT: 8215b15 Tweak to variable name to support unity build\nREVERT: aca1ffc Allow files to be opened for reading multiple times\nREVERT: 693a70c Checking whether closing succeeds\nREVERT: 0144d04 Print actual Win32 error that occurred on file creation failure.\nREVERT: 43ed517 Fix corruption bug found and analyzed by dhruba@gmail.com\nREVERT: 413c74c added utility to dump leveldb files\nREVERT: 96eda85 Port leveldb to MinGW32\nREVERT: 0967260 Mingw support for Windows LevelDB port\nREVERT: ee3f9bd Pre-Vista leveldb::port::InitOnce implementation\nREVERT: f5d0a41 Native Windows LevelDB port\nREVERT: 28b35f1 Remove Snappy support\n\ngit-subtree-dir: src/leveldb\ngit-subtree-split: a02ddf9b14d145e88185ee209ab8b01d8826663a",
      "tree": {
        "sha": "dd1437e5bb46fbfe1c2bdf7a5bfbfe608761f67d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd1437e5bb46fbfe1c2bdf7a5bfbfe608761f67d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84d6d69fc69662b2709fffbeaf3c3b4f53c535b1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84d6d69fc69662b2709fffbeaf3c3b4f53c535b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84d6d69fc69662b2709fffbeaf3c3b4f53c535b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84d6d69fc69662b2709fffbeaf3c3b4f53c535b1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "adae78ea9940f4d44382967d1296e7db0b54a4de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adae78ea9940f4d44382967d1296e7db0b54a4de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/adae78ea9940f4d44382967d1296e7db0b54a4de"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 107,
      "deletions": 9
    },
    "files": [
      {
        "sha": "71d87a4eeb60b9599e6a7a23d61a659c7befa553",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84d6d69fc69662b2709fffbeaf3c3b4f53c535b1/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84d6d69fc69662b2709fffbeaf3c3b4f53c535b1/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=84d6d69fc69662b2709fffbeaf3c3b4f53c535b1",
        "patch": "@@ -6,6 +6,7 @@ build_config.mk\n *.so.*\n *_test\n db_bench\n+leveldbutil\n Release\n Debug\n Benchmark"
      },
      {
        "sha": "96af7765be41edc6b8e83c646efcdb3b9c99d025",
        "filename": "Makefile",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84d6d69fc69662b2709fffbeaf3c3b4f53c535b1/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84d6d69fc69662b2709fffbeaf3c3b4f53c535b1/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile?ref=84d6d69fc69662b2709fffbeaf3c3b4f53c535b1",
        "patch": "@@ -12,7 +12,7 @@ OPT ?= -O2 -DNDEBUG       # (A) Production use (optimized mode)\n #-----------------------------------------------\n \n # detect what platform we're building on\n-$(shell CC=$(CC) CXX=$(CXX) TARGET_OS=$(TARGET_OS) \\\n+$(shell CC=\"$(CC)\" CXX=\"$(CXX)\" TARGET_OS=\"$(TARGET_OS)\" \\\n     ./build_detect_platform build_config.mk ./)\n # this file is generated by the previous line to set build flags and sources\n include build_config.mk"
      },
      {
        "sha": "bdfd64172cd1b9ca15dd436d96b9dba8904c281b",
        "filename": "build_detect_platform",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84d6d69fc69662b2709fffbeaf3c3b4f53c535b1/build_detect_platform",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84d6d69fc69662b2709fffbeaf3c3b4f53c535b1/build_detect_platform",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_detect_platform?ref=84d6d69fc69662b2709fffbeaf3c3b4f53c535b1",
        "patch": "@@ -44,6 +44,10 @@ if test -z \"$CXX\"; then\n     CXX=g++\n fi\n \n+if test -z \"$TMPDIR\"; then\n+    TMPDIR=/tmp\n+fi\n+\n # Detect OS\n if test -z \"$TARGET_OS\"; then\n     TARGET_OS=`uname -s`\n@@ -169,8 +173,10 @@ if [ \"$CROSS_COMPILE\" = \"true\" ]; then\n     # Cross-compiling; do not try any compilation tests.\n     true\n else\n+    CXXOUTPUT=\"${TMPDIR}/leveldb_build_detect_platform-cxx.$$\"\n+\n     # If -std=c++0x works, use <cstdatomic>.  Otherwise use port_posix.h.\n-    $CXX $CXXFLAGS -std=c++0x -x c++ - -o /dev/null 2>/dev/null  <<EOF\n+    $CXX $CXXFLAGS -std=c++0x -x c++ - -o $CXXOUTPUT 2>/dev/null  <<EOF\n       #include <cstdatomic>\n       int main() {}\n EOF\n@@ -182,12 +188,14 @@ EOF\n     fi\n \n     # Test whether tcmalloc is available\n-    $CXX $CXXFLAGS -x c++ - -o /dev/null -ltcmalloc 2>/dev/null  <<EOF\n+    $CXX $CXXFLAGS -x c++ - -o $CXXOUTPUT -ltcmalloc 2>/dev/null  <<EOF\n       int main() {}\n EOF\n     if [ \"$?\" = 0 ]; then\n         PLATFORM_LIBS=\"$PLATFORM_LIBS -ltcmalloc\"\n     fi\n+\n+    rm -f $CXXOUTPUT 2>/dev/null\n fi\n \n PLATFORM_CCFLAGS=\"$PLATFORM_CCFLAGS $COMMON_FLAGS\""
      },
      {
        "sha": "395d3172ad3a16b24552057599c776228bf84917",
        "filename": "db/db_impl.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84d6d69fc69662b2709fffbeaf3c3b4f53c535b1/db/db_impl.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84d6d69fc69662b2709fffbeaf3c3b4f53c535b1/db/db_impl.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/db/db_impl.cc?ref=84d6d69fc69662b2709fffbeaf3c3b4f53c535b1",
        "patch": "@@ -322,7 +322,7 @@ Status DBImpl::Recover(VersionEdit* edit) {\n       if (ParseFileName(filenames[i], &number, &type)) {\n         expected.erase(number);\n         if (type == kLogFile && ((number >= min_log) || (number == prev_log)))\n-        logs.push_back(number);\n+          logs.push_back(number);\n       }\n     }\n     if (!expected.empty()) {\n@@ -822,9 +822,6 @@ Status DBImpl::FinishCompactionOutputFile(CompactionState* compact,\n           (unsigned long long) output_number,\n           (unsigned long long) current_entries,\n           (unsigned long long) current_bytes);\n-\n-      // rate-limit compaction file creation with a 100ms pause\n-      env_->SleepForMicroseconds(100000);\n     }\n   }\n   return s;"
      },
      {
        "sha": "1b1cf8bb28da5cf6a117ffdc4cb6527ef1585d6b",
        "filename": "issues/issue178_test.cc",
        "status": "added",
        "additions": 92,
        "deletions": 0,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84d6d69fc69662b2709fffbeaf3c3b4f53c535b1/issues/issue178_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84d6d69fc69662b2709fffbeaf3c3b4f53c535b1/issues/issue178_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/issues/issue178_test.cc?ref=84d6d69fc69662b2709fffbeaf3c3b4f53c535b1",
        "patch": "@@ -0,0 +1,92 @@\n+// Copyright (c) 2013 The LevelDB Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file. See the AUTHORS file for names of contributors.\n+\n+// Test for issue 178: a manual compaction causes deleted data to reappear.\n+#include <iostream>\n+#include <sstream>\n+#include <cstdlib>\n+\n+#include \"leveldb/db.h\"\n+#include \"leveldb/write_batch.h\"\n+#include \"util/testharness.h\"\n+\n+namespace {\n+\n+const int kNumKeys = 1100000;\n+\n+std::string Key1(int i) {\n+  char buf[100];\n+  snprintf(buf, sizeof(buf), \"my_key_%d\", i);\n+  return buf;\n+}\n+\n+std::string Key2(int i) {\n+  return Key1(i) + \"_xxx\";\n+}\n+\n+class Issue178 { };\n+\n+TEST(Issue178, Test) {\n+  // Get rid of any state from an old run.\n+  std::string dbpath = leveldb::test::TmpDir() + \"/leveldb_cbug_test\";\n+  DestroyDB(dbpath, leveldb::Options());\n+\n+  // Open database.  Disable compression since it affects the creation\n+  // of layers and the code below is trying to test against a very\n+  // specific scenario.\n+  leveldb::DB* db;\n+  leveldb::Options db_options;\n+  db_options.create_if_missing = true;\n+  db_options.compression = leveldb::kNoCompression;\n+  ASSERT_OK(leveldb::DB::Open(db_options, dbpath, &db));\n+\n+  // create first key range\n+  leveldb::WriteBatch batch;\n+  for (size_t i = 0; i < kNumKeys; i++) {\n+    batch.Put(Key1(i), \"value for range 1 key\");\n+  }\n+  ASSERT_OK(db->Write(leveldb::WriteOptions(), &batch));\n+\n+  // create second key range\n+  batch.Clear();\n+  for (size_t i = 0; i < kNumKeys; i++) {\n+    batch.Put(Key2(i), \"value for range 2 key\");\n+  }\n+  ASSERT_OK(db->Write(leveldb::WriteOptions(), &batch));\n+\n+  // delete second key range\n+  batch.Clear();\n+  for (size_t i = 0; i < kNumKeys; i++) {\n+    batch.Delete(Key2(i));\n+  }\n+  ASSERT_OK(db->Write(leveldb::WriteOptions(), &batch));\n+\n+  // compact database\n+  std::string start_key = Key1(0);\n+  std::string end_key = Key1(kNumKeys - 1);\n+  leveldb::Slice least(start_key.data(), start_key.size());\n+  leveldb::Slice greatest(end_key.data(), end_key.size());\n+\n+  // commenting out the line below causes the example to work correctly\n+  db->CompactRange(&least, &greatest);\n+\n+  // count the keys\n+  leveldb::Iterator* iter = db->NewIterator(leveldb::ReadOptions());\n+  size_t num_keys = 0;\n+  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {\n+    num_keys++;\n+  }\n+  delete iter;\n+  ASSERT_EQ(kNumKeys, num_keys) << \"Bad number of keys\";\n+\n+  // close database\n+  delete db;\n+  DestroyDB(dbpath, leveldb::Options());\n+}\n+\n+}  // anonymous namespace\n+\n+int main(int argc, char** argv) {\n+  return leveldb::test::RunAllTests();\n+}"
      },
      {
        "sha": "4b7b5724ef3be5f6c7ed9f95dcb47a99f2ee2f9b",
        "filename": "util/comparator.cc",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84d6d69fc69662b2709fffbeaf3c3b4f53c535b1/util/comparator.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84d6d69fc69662b2709fffbeaf3c3b4f53c535b1/util/comparator.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/util/comparator.cc?ref=84d6d69fc69662b2709fffbeaf3c3b4f53c535b1",
        "patch": "@@ -66,15 +66,15 @@ class BytewiseComparatorImpl : public Comparator {\n };\n }  // namespace\n \n-static port::OnceType once_comparator = LEVELDB_ONCE_INIT;\n+static port::OnceType once = LEVELDB_ONCE_INIT;\n static const Comparator* bytewise;\n \n static void InitModule() {\n   bytewise = new BytewiseComparatorImpl;\n }\n \n const Comparator* BytewiseComparator() {\n-  port::InitOnce(&once_comparator, InitModule);\n+  port::InitOnce(&once, InitModule);\n   return bytewise;\n }\n "
      }
    ]
  },
  {
    "sha": "4a9a8f3f48f7820cff2964489f09a34160b1671b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTlhOGYzZjQ4Zjc4MjBjZmYyOTY0NDg5ZjA5YTM0MTYwYjE2NzFi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-08-17T22:58:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-08-17T22:58:04Z"
      },
      "message": "Merge commit '84d6d69fc69662b2709fffbeaf3c3b4f53c535b1'",
      "tree": {
        "sha": "417244fb281fca8d19efcbbae5fa6d371ff89ba4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/417244fb281fca8d19efcbbae5fa6d371ff89ba4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a9a8f3f48f7820cff2964489f09a34160b1671b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a9a8f3f48f7820cff2964489f09a34160b1671b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a9a8f3f48f7820cff2964489f09a34160b1671b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a9a8f3f48f7820cff2964489f09a34160b1671b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "317f57ec87da566ee2ae648853a9105a4136efef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/317f57ec87da566ee2ae648853a9105a4136efef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/317f57ec87da566ee2ae648853a9105a4136efef"
      },
      {
        "sha": "84d6d69fc69662b2709fffbeaf3c3b4f53c535b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84d6d69fc69662b2709fffbeaf3c3b4f53c535b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84d6d69fc69662b2709fffbeaf3c3b4f53c535b1"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 107,
      "deletions": 9
    },
    "files": [
      {
        "sha": "71d87a4eeb60b9599e6a7a23d61a659c7befa553",
        "filename": "src/leveldb/.gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a9a8f3f48f7820cff2964489f09a34160b1671b/src/leveldb/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a9a8f3f48f7820cff2964489f09a34160b1671b/src/leveldb/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/.gitignore?ref=4a9a8f3f48f7820cff2964489f09a34160b1671b",
        "patch": "@@ -6,6 +6,7 @@ build_config.mk\n *.so.*\n *_test\n db_bench\n+leveldbutil\n Release\n Debug\n Benchmark"
      },
      {
        "sha": "96af7765be41edc6b8e83c646efcdb3b9c99d025",
        "filename": "src/leveldb/Makefile",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a9a8f3f48f7820cff2964489f09a34160b1671b/src/leveldb/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a9a8f3f48f7820cff2964489f09a34160b1671b/src/leveldb/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/Makefile?ref=4a9a8f3f48f7820cff2964489f09a34160b1671b",
        "patch": "@@ -12,7 +12,7 @@ OPT ?= -O2 -DNDEBUG       # (A) Production use (optimized mode)\n #-----------------------------------------------\n \n # detect what platform we're building on\n-$(shell CC=$(CC) CXX=$(CXX) TARGET_OS=$(TARGET_OS) \\\n+$(shell CC=\"$(CC)\" CXX=\"$(CXX)\" TARGET_OS=\"$(TARGET_OS)\" \\\n     ./build_detect_platform build_config.mk ./)\n # this file is generated by the previous line to set build flags and sources\n include build_config.mk"
      },
      {
        "sha": "bdfd64172cd1b9ca15dd436d96b9dba8904c281b",
        "filename": "src/leveldb/build_detect_platform",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a9a8f3f48f7820cff2964489f09a34160b1671b/src/leveldb/build_detect_platform",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a9a8f3f48f7820cff2964489f09a34160b1671b/src/leveldb/build_detect_platform",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/build_detect_platform?ref=4a9a8f3f48f7820cff2964489f09a34160b1671b",
        "patch": "@@ -44,6 +44,10 @@ if test -z \"$CXX\"; then\n     CXX=g++\n fi\n \n+if test -z \"$TMPDIR\"; then\n+    TMPDIR=/tmp\n+fi\n+\n # Detect OS\n if test -z \"$TARGET_OS\"; then\n     TARGET_OS=`uname -s`\n@@ -169,8 +173,10 @@ if [ \"$CROSS_COMPILE\" = \"true\" ]; then\n     # Cross-compiling; do not try any compilation tests.\n     true\n else\n+    CXXOUTPUT=\"${TMPDIR}/leveldb_build_detect_platform-cxx.$$\"\n+\n     # If -std=c++0x works, use <cstdatomic>.  Otherwise use port_posix.h.\n-    $CXX $CXXFLAGS -std=c++0x -x c++ - -o /dev/null 2>/dev/null  <<EOF\n+    $CXX $CXXFLAGS -std=c++0x -x c++ - -o $CXXOUTPUT 2>/dev/null  <<EOF\n       #include <cstdatomic>\n       int main() {}\n EOF\n@@ -182,12 +188,14 @@ EOF\n     fi\n \n     # Test whether tcmalloc is available\n-    $CXX $CXXFLAGS -x c++ - -o /dev/null -ltcmalloc 2>/dev/null  <<EOF\n+    $CXX $CXXFLAGS -x c++ - -o $CXXOUTPUT -ltcmalloc 2>/dev/null  <<EOF\n       int main() {}\n EOF\n     if [ \"$?\" = 0 ]; then\n         PLATFORM_LIBS=\"$PLATFORM_LIBS -ltcmalloc\"\n     fi\n+\n+    rm -f $CXXOUTPUT 2>/dev/null\n fi\n \n PLATFORM_CCFLAGS=\"$PLATFORM_CCFLAGS $COMMON_FLAGS\""
      },
      {
        "sha": "395d3172ad3a16b24552057599c776228bf84917",
        "filename": "src/leveldb/db/db_impl.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a9a8f3f48f7820cff2964489f09a34160b1671b/src/leveldb/db/db_impl.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a9a8f3f48f7820cff2964489f09a34160b1671b/src/leveldb/db/db_impl.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/db_impl.cc?ref=4a9a8f3f48f7820cff2964489f09a34160b1671b",
        "patch": "@@ -322,7 +322,7 @@ Status DBImpl::Recover(VersionEdit* edit) {\n       if (ParseFileName(filenames[i], &number, &type)) {\n         expected.erase(number);\n         if (type == kLogFile && ((number >= min_log) || (number == prev_log)))\n-        logs.push_back(number);\n+          logs.push_back(number);\n       }\n     }\n     if (!expected.empty()) {\n@@ -822,9 +822,6 @@ Status DBImpl::FinishCompactionOutputFile(CompactionState* compact,\n           (unsigned long long) output_number,\n           (unsigned long long) current_entries,\n           (unsigned long long) current_bytes);\n-\n-      // rate-limit compaction file creation with a 100ms pause\n-      env_->SleepForMicroseconds(100000);\n     }\n   }\n   return s;"
      },
      {
        "sha": "1b1cf8bb28da5cf6a117ffdc4cb6527ef1585d6b",
        "filename": "src/leveldb/issues/issue178_test.cc",
        "status": "added",
        "additions": 92,
        "deletions": 0,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a9a8f3f48f7820cff2964489f09a34160b1671b/src/leveldb/issues/issue178_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a9a8f3f48f7820cff2964489f09a34160b1671b/src/leveldb/issues/issue178_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/issues/issue178_test.cc?ref=4a9a8f3f48f7820cff2964489f09a34160b1671b",
        "patch": "@@ -0,0 +1,92 @@\n+// Copyright (c) 2013 The LevelDB Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file. See the AUTHORS file for names of contributors.\n+\n+// Test for issue 178: a manual compaction causes deleted data to reappear.\n+#include <iostream>\n+#include <sstream>\n+#include <cstdlib>\n+\n+#include \"leveldb/db.h\"\n+#include \"leveldb/write_batch.h\"\n+#include \"util/testharness.h\"\n+\n+namespace {\n+\n+const int kNumKeys = 1100000;\n+\n+std::string Key1(int i) {\n+  char buf[100];\n+  snprintf(buf, sizeof(buf), \"my_key_%d\", i);\n+  return buf;\n+}\n+\n+std::string Key2(int i) {\n+  return Key1(i) + \"_xxx\";\n+}\n+\n+class Issue178 { };\n+\n+TEST(Issue178, Test) {\n+  // Get rid of any state from an old run.\n+  std::string dbpath = leveldb::test::TmpDir() + \"/leveldb_cbug_test\";\n+  DestroyDB(dbpath, leveldb::Options());\n+\n+  // Open database.  Disable compression since it affects the creation\n+  // of layers and the code below is trying to test against a very\n+  // specific scenario.\n+  leveldb::DB* db;\n+  leveldb::Options db_options;\n+  db_options.create_if_missing = true;\n+  db_options.compression = leveldb::kNoCompression;\n+  ASSERT_OK(leveldb::DB::Open(db_options, dbpath, &db));\n+\n+  // create first key range\n+  leveldb::WriteBatch batch;\n+  for (size_t i = 0; i < kNumKeys; i++) {\n+    batch.Put(Key1(i), \"value for range 1 key\");\n+  }\n+  ASSERT_OK(db->Write(leveldb::WriteOptions(), &batch));\n+\n+  // create second key range\n+  batch.Clear();\n+  for (size_t i = 0; i < kNumKeys; i++) {\n+    batch.Put(Key2(i), \"value for range 2 key\");\n+  }\n+  ASSERT_OK(db->Write(leveldb::WriteOptions(), &batch));\n+\n+  // delete second key range\n+  batch.Clear();\n+  for (size_t i = 0; i < kNumKeys; i++) {\n+    batch.Delete(Key2(i));\n+  }\n+  ASSERT_OK(db->Write(leveldb::WriteOptions(), &batch));\n+\n+  // compact database\n+  std::string start_key = Key1(0);\n+  std::string end_key = Key1(kNumKeys - 1);\n+  leveldb::Slice least(start_key.data(), start_key.size());\n+  leveldb::Slice greatest(end_key.data(), end_key.size());\n+\n+  // commenting out the line below causes the example to work correctly\n+  db->CompactRange(&least, &greatest);\n+\n+  // count the keys\n+  leveldb::Iterator* iter = db->NewIterator(leveldb::ReadOptions());\n+  size_t num_keys = 0;\n+  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {\n+    num_keys++;\n+  }\n+  delete iter;\n+  ASSERT_EQ(kNumKeys, num_keys) << \"Bad number of keys\";\n+\n+  // close database\n+  delete db;\n+  DestroyDB(dbpath, leveldb::Options());\n+}\n+\n+}  // anonymous namespace\n+\n+int main(int argc, char** argv) {\n+  return leveldb::test::RunAllTests();\n+}"
      },
      {
        "sha": "4b7b5724ef3be5f6c7ed9f95dcb47a99f2ee2f9b",
        "filename": "src/leveldb/util/comparator.cc",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a9a8f3f48f7820cff2964489f09a34160b1671b/src/leveldb/util/comparator.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a9a8f3f48f7820cff2964489f09a34160b1671b/src/leveldb/util/comparator.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/comparator.cc?ref=4a9a8f3f48f7820cff2964489f09a34160b1671b",
        "patch": "@@ -66,15 +66,15 @@ class BytewiseComparatorImpl : public Comparator {\n };\n }  // namespace\n \n-static port::OnceType once_comparator = LEVELDB_ONCE_INIT;\n+static port::OnceType once = LEVELDB_ONCE_INIT;\n static const Comparator* bytewise;\n \n static void InitModule() {\n   bytewise = new BytewiseComparatorImpl;\n }\n \n const Comparator* BytewiseComparator() {\n-  port::InitOnce(&once_comparator, InitModule);\n+  port::InitOnce(&once, InitModule);\n   return bytewise;\n }\n "
      }
    ]
  }
]