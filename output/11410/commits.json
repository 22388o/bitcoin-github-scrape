[
  {
    "sha": "65d2c68d4df676acd2085fb17d07baad25cde0df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWQyYzY4ZDRkZjY3NmFjZDIwODVmYjE3ZDA3YmFhZDI1Y2RlMGRm",
    "commit": {
      "author": {
        "name": "Cristian Mircea Messel",
        "email": "mess110@gmail.com",
        "date": "2017-09-27T22:46:28Z"
      },
      "committer": {
        "name": "Cristian Mircea Messel",
        "email": "mess110@gmail.com",
        "date": "2017-10-02T23:12:23Z"
      },
      "message": "[rpc] [tests] mempoolminfee should not drop below minRelayTxFee\n\nThe ::minRelayTxFee is accounted for in CTxMemPool::GetMinFee so the\nvalidation for '66: min relay fee not met' is no longer required.",
      "tree": {
        "sha": "b03f7c9a03b2c50a277059e08637d5172084c181",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b03f7c9a03b2c50a277059e08637d5172084c181"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65d2c68d4df676acd2085fb17d07baad25cde0df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65d2c68d4df676acd2085fb17d07baad25cde0df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65d2c68d4df676acd2085fb17d07baad25cde0df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65d2c68d4df676acd2085fb17d07baad25cde0df/comments",
    "author": {
      "login": "mess110",
      "id": 226170,
      "node_id": "MDQ6VXNlcjIyNjE3MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mess110",
      "html_url": "https://github.com/mess110",
      "followers_url": "https://api.github.com/users/mess110/followers",
      "following_url": "https://api.github.com/users/mess110/following{/other_user}",
      "gists_url": "https://api.github.com/users/mess110/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mess110/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mess110/subscriptions",
      "organizations_url": "https://api.github.com/users/mess110/orgs",
      "repos_url": "https://api.github.com/users/mess110/repos",
      "events_url": "https://api.github.com/users/mess110/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mess110/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mess110",
      "id": 226170,
      "node_id": "MDQ6VXNlcjIyNjE3MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mess110",
      "html_url": "https://github.com/mess110",
      "followers_url": "https://api.github.com/users/mess110/followers",
      "following_url": "https://api.github.com/users/mess110/following{/other_user}",
      "gists_url": "https://api.github.com/users/mess110/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mess110/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mess110/subscriptions",
      "organizations_url": "https://api.github.com/users/mess110/orgs",
      "repos_url": "https://api.github.com/users/mess110/repos",
      "events_url": "https://api.github.com/users/mess110/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mess110/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ddf60db7ad636b6a31b590251c671ded635fa1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ddf60db7ad636b6a31b590251c671ded635fa1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ddf60db7ad636b6a31b590251c671ded635fa1d"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 39,
      "deletions": 40
    },
    "files": [
      {
        "sha": "70e14877807d27709e00ea1b6e720f46dcd79eab",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65d2c68d4df676acd2085fb17d07baad25cde0df/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65d2c68d4df676acd2085fb17d07baad25cde0df/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=65d2c68d4df676acd2085fb17d07baad25cde0df",
        "patch": "@@ -572,11 +572,10 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n \n     SetMockTime(42 + 7*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 1000);\n-    // ... but feerate should never drop below 1000\n \n     SetMockTime(42 + 8*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 0);\n-    // ... unless it has gone all the way to 0 (after getting past 1000/2)\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 1000);\n+    // ... but feerate should never drop below 1000\n \n     SetMockTime(0);\n }"
      },
      {
        "sha": "c5f4d50551df90bf7b9639b328b34f11d3f7ba1a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 18,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65d2c68d4df676acd2085fb17d07baad25cde0df/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65d2c68d4df676acd2085fb17d07baad25cde0df/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=65d2c68d4df676acd2085fb17d07baad25cde0df",
        "patch": "@@ -980,26 +980,25 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n \n CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n     LOCK(cs);\n-    if (!blockSinceLastRollingFeeBump || rollingMinimumFeeRate == 0)\n-        return CFeeRate(llround(rollingMinimumFeeRate));\n-\n-    int64_t time = GetTime();\n-    if (time > lastRollingFeeUpdate + 10) {\n-        double halflife = ROLLING_FEE_HALFLIFE;\n-        if (DynamicMemoryUsage() < sizelimit / 4)\n-            halflife /= 4;\n-        else if (DynamicMemoryUsage() < sizelimit / 2)\n-            halflife /= 2;\n-\n-        rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / halflife);\n-        lastRollingFeeUpdate = time;\n-\n-        if (rollingMinimumFeeRate < (double)incrementalRelayFee.GetFeePerK() / 2) {\n-            rollingMinimumFeeRate = 0;\n-            return CFeeRate(0);\n+    if (blockSinceLastRollingFeeBump && rollingMinimumFeeRate != 0) {\n+        int64_t time = GetTime();\n+        if (time > lastRollingFeeUpdate + 10) {\n+            double halflife = ROLLING_FEE_HALFLIFE;\n+            if (DynamicMemoryUsage() < sizelimit / 4)\n+                halflife /= 4;\n+            else if (DynamicMemoryUsage() < sizelimit / 2)\n+                halflife /= 2;\n+\n+            rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / halflife);\n+            lastRollingFeeUpdate = time;\n+\n+            if (rollingMinimumFeeRate < (double)incrementalRelayFee.GetFeePerK() / 2) {\n+                rollingMinimumFeeRate = 0;\n+            }\n         }\n     }\n-    return std::max(CFeeRate(llround(rollingMinimumFeeRate)), incrementalRelayFee);\n+    CFeeRate tmpMinFee = std::max(CFeeRate(llround(rollingMinimumFeeRate)), incrementalRelayFee);\n+    return std::max(tmpMinFee, ::minRelayTxFee);\n }\n \n void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {"
      },
      {
        "sha": "44c68e697096ae4bf2b8498a1ab61adc1348e3f3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65d2c68d4df676acd2085fb17d07baad25cde0df/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65d2c68d4df676acd2085fb17d07baad25cde0df/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=65d2c68d4df676acd2085fb17d07baad25cde0df",
        "patch": "@@ -619,16 +619,12 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n                 strprintf(\"%d\", nSigOpsCost));\n \n+        // No transactions are allowed below mempool min fee except from disconnected blocks\n         CAmount mempoolRejectFee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n-        if (!bypass_limits && mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n+        if (!bypass_limits && nModifiedFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n         }\n \n-        // No transactions are allowed below minRelayTxFee except from disconnected blocks\n-        if (!bypass_limits && nModifiedFees < ::minRelayTxFee.GetFee(nSize)) {\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"min relay fee not met\");\n-        }\n-\n         if (nAbsurdFee && nFees > nAbsurdFee)\n             return state.Invalid(false,\n                 REJECT_HIGHFEE, \"absurdly-high-fee\","
      },
      {
        "sha": "bb566d0c5d527243a7e21c79f39010d48dc9c856",
        "filename": "src/wallet/fees.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65d2c68d4df676acd2085fb17d07baad25cde0df/src/wallet/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65d2c68d4df676acd2085fb17d07baad25cde0df/src/wallet/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.cpp?ref=65d2c68d4df676acd2085fb17d07baad25cde0df",
        "patch": "@@ -42,7 +42,7 @@ CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, c\n     else { // 2. or 4.\n         // We will use smart fee estimation\n         unsigned int target = coin_control.m_confirm_target ? *coin_control.m_confirm_target : ::nTxConfirmTarget;\n-        // By default estimates are economical iff we are signaling opt-in-RBF\n+        // By default estimates are economical if we are signaling opt-in-RBF\n         bool conservative_estimate = !coin_control.signalRbf;\n         // Allow to override the default fee estimate mode over the CoinControl instance\n         if (coin_control.m_fee_mode == FeeEstimateMode::CONSERVATIVE) conservative_estimate = true;\n@@ -54,21 +54,23 @@ CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, c\n             fee_needed = CWallet::fallbackFee.GetFee(nTxBytes);\n             if (feeCalc) feeCalc->reason = FeeReason::FALLBACK;\n         }\n-        // Obey mempool min fee when using smart fee estimation\n-        CAmount min_mempool_fee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nTxBytes);\n-        if (fee_needed < min_mempool_fee) {\n-            fee_needed = min_mempool_fee;\n-            if (feeCalc) feeCalc->reason = FeeReason::MEMPOOL_MIN;\n-        }\n     }\n \n-    // prevent user from paying a fee below minRelayTxFee or minTxFee\n-    CAmount required_fee = GetRequiredFee(nTxBytes);\n-    if (required_fee > fee_needed) {\n-        fee_needed = required_fee;\n+    // prevent user from paying a fee below minTxFee\n+    CAmount min_tx_fee = CWallet::minTxFee.GetFee(nTxBytes);\n+    if (fee_needed < min_tx_fee) {\n+        fee_needed = min_tx_fee;\n         if (feeCalc) feeCalc->reason = FeeReason::REQUIRED;\n     }\n-    // But always obey the maximum\n+\n+    // Obey mempool min fee\n+    CAmount min_mempool_fee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nTxBytes);\n+    if (fee_needed < min_mempool_fee) {\n+        fee_needed = min_mempool_fee;\n+        if (feeCalc) feeCalc->reason = FeeReason::MEMPOOL_MIN;\n+    }\n+\n+    // And the maximum tx fee\n     if (fee_needed > maxTxFee) {\n         fee_needed = maxTxFee;\n         if (feeCalc) feeCalc->reason = FeeReason::MAXTXFEE;"
      },
      {
        "sha": "4d1cf119c95a737c6da679b6f96be6715f5969f6",
        "filename": "test/functional/prioritise_transaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65d2c68d4df676acd2085fb17d07baad25cde0df/test/functional/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65d2c68d4df676acd2085fb17d07baad25cde0df/test/functional/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/prioritise_transaction.py?ref=65d2c68d4df676acd2085fb17d07baad25cde0df",
        "patch": "@@ -101,7 +101,7 @@ def run_test(self):\n         tx_id = self.nodes[0].decoderawtransaction(tx_hex)[\"txid\"]\n \n         # This will raise an exception due to min relay fee not being met\n-        assert_raises_jsonrpc(-26, \"66: min relay fee not met\", self.nodes[0].sendrawtransaction, tx_hex)\n+        assert_raises_jsonrpc(-26, \"66: mempool min fee not met\", self.nodes[0].sendrawtransaction, tx_hex)\n         assert(tx_id not in self.nodes[0].getrawmempool())\n \n         # This is a less than 1000-byte transaction, so just set the fee"
      },
      {
        "sha": "d5631c14e5bb45478865997404e8e7953a8df23f",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65d2c68d4df676acd2085fb17d07baad25cde0df/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65d2c68d4df676acd2085fb17d07baad25cde0df/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=65d2c68d4df676acd2085fb17d07baad25cde0df",
        "patch": "@@ -33,6 +33,9 @@ def run_test(self):\n         assert_equal(len(self.nodes[1].listunspent()), 0)\n         assert_equal(len(self.nodes[2].listunspent()), 0)\n \n+        self.log.info(\"Check for mempoolminfee in getmempoolinfo\")\n+        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n         self.log.info(\"Mining blocks...\")\n \n         self.nodes[0].generate(1)"
      }
    ]
  }
]