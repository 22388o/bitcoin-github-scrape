[
  {
    "sha": "e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6",
    "node_id": "C_kwDOABII59oAKGU1M2E4NTA1ZGJiNmY5ZGVhYWU4YWM4Mjc5M2E0ZmI3NjBhMWUwYTY",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-08-30T12:33:29Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-11-24T11:44:05Z"
      },
      "message": "net: respect -onlynet= when making outbound connections\n\nDo not make outbound connections to hosts which belong to a network\nwhich is restricted by `-onlynet`.\n\nThis applies to hosts that are automatically chosen to connect to and to\nanchors.\n\nThis does not apply to hosts given to `-connect`, `-addnode`,\n`addnode` RPC, dns seeds, `-seednodes`.\n\nFixes https://github.com/bitcoin/bitcoin/issues/13378\nFixes https://github.com/bitcoin/bitcoin/issues/22647\nSupersedes https://github.com/bitcoin/bitcoin/pull/22651",
      "tree": {
        "sha": "40507a94035ee59351b4a7008616b825a5b32ef6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40507a94035ee59351b4a7008616b825a5b32ef6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGeJYcACgkQVN8G9ktV\ny7/l4yAAqRYGta9RDYTtRWTZxyRk7hB6z7tHUYj6r03+BuFhmLGSGfF4h5EWJYiu\nNUTGOR+qfs6LYCVjYmQa9sc+USUYEc1ftzDFJCMjgitTfCuO1Hwr5gKYL/KHLC88\nJLMDFw/m+Zvjp6xrTuzYv9/hPPJj3h/T07WM3pfpQVe6wpKmrqlb2rj2tUi5i7xg\nkYt+JYbIddqatAKkmDpa5vcN2otSFlnSMZzcFRCWaGp5awFcNhsUc0OyF5ji+QRR\ny0iw0qAz14HjLYq3px1tD+rTw1f/gCG4dWsV5sGwQkcCtt3u1Ai2jsVFeHsjf9gx\nNEE8ykxy9hYYttEcvwho46sl6rPFPTX+pPqhCpD+nrATc7hAHI5QCutRXLHVCEsO\nu7DcpU/a0aACVE01I2rt7R2NjNWjyNa/Tk+awHm7K8/gCkqv33QUOE7Rai1HuTE2\nKnTWz9+Q2YovbqHJCsWOzD4TQVvpQ4G8dDd66874H0kd70/bh597EDLP/pUCA4NP\nVNYyaV45SEXM0VIFRZN7XqSkBmDjiysbSEkRrEVCSrpzDpJgefybAzDQRM/hpLe0\nFlz6xZ8DwXKKUY212mpWYJ4Xa5VMHqkCNrVfmWujvvPgfZSXDBC5ZFFeCMQ7S+BZ\nxXL+0beMTVWr7iFmqbiB5LC48ZxHFqiaGQzMUlkhFJsa325VTByW+DRdL6Egl4L/\nFpsZ35p5GonWPD66jyMchMBBkzq4pMrt+ajYm1IkLaaY1b47k5Dcbnq9GkbLfcoJ\nutz7JpAzPZL5tU30n8NDQ1FUPRmCDvxVc04djh0mG4HQDngFJl/C0z0NuOfmI/n9\n3JonvfY9yJhR89/w9PVOCBN0+1YWXPKb1317OscOFbgeIWkB3hVL4tAgOYlemUan\n/x6gk/cb33bmlqk0i/InQUrxfWwbejOQkgO7yFGRMJ2X8zJsaQhs5qww0S8U08sB\nrX6v2DuI5G9ywktF7PpYN43Iq6p/4WUbMXkavf/R7wMK9rTKyDrzZoQHa1S5vkoP\nFJim7smHD0HGwt3unNbF6YFnmnbAojNG8zkRH7YkKb320fxlog1/u2lAsyi8zmJO\nAxe2syAXik78SJuPvpbt2eiKb5A5lO29vSOL6V3XtCT9e+Z3RfRhROl60aZCmYKv\nWAB+xleaJKAUjgiugZKodZSFYn+hXF6l9r9ZBj6UImBi6NEgnIEJ2HsYpuaarLPf\n8O43PVl4BZAzj8ZsG04cxO036ljyqkzQ3xUlb1MFsWfu0tCopnqmAPdT+VjIzmjG\nbAlSj46dQkptk5SJWelqcYfA4vs9sxH1uAr25DIH5sD2jBEPLqvYOZLlhpwau+Qy\nJC9fHgzcxRtKaU1XFP3fip74LIv8tQ==\n=YqVc\n-----END PGP SIGNATURE-----",
        "payload": "tree 40507a94035ee59351b4a7008616b825a5b32ef6\nparent 9394964f6b9d1cf1220a4eca17ba18dc49ae876d\nauthor Vasil Dimov <vd@FreeBSD.org> 1630326809 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1637754245 +0100\n\nnet: respect -onlynet= when making outbound connections\n\nDo not make outbound connections to hosts which belong to a network\nwhich is restricted by `-onlynet`.\n\nThis applies to hosts that are automatically chosen to connect to and to\nanchors.\n\nThis does not apply to hosts given to `-connect`, `-addnode`,\n`addnode` RPC, dns seeds, `-seednodes`.\n\nFixes https://github.com/bitcoin/bitcoin/issues/13378\nFixes https://github.com/bitcoin/bitcoin/issues/22647\nSupersedes https://github.com/bitcoin/bitcoin/pull/22651\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9394964f6b9d1cf1220a4eca17ba18dc49ae876d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9394964f6b9d1cf1220a4eca17ba18dc49ae876d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9394964f6b9d1cf1220a4eca17ba18dc49ae876d"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 45,
      "deletions": 25
    },
    "files": [
      {
        "sha": "ee650f399986c208e3ee5ad222488237930e26c4",
        "filename": "doc/i2p.md",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6/doc/i2p.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6/doc/i2p.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/i2p.md?ref=e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6",
        "patch": "@@ -67,11 +67,7 @@ logging` for more information.\n \n Make outgoing connections only to I2P addresses. Incoming connections are not\n affected by this option. It can be specified multiple times to allow multiple\n-network types, e.g. onlynet=ipv4, onlynet=ipv6, onlynet=onion, onlynet=i2p.\n-\n-Warning: if you use -onlynet with values other than onion, and the -onion or\n--proxy option is set, then outgoing onion connections will still be made; use\n--noonion or -onion=0 to disable outbound onion connections in this case.\n+network types, e.g. onlynet=onion, onlynet=i2p.\n \n I2P support was added to Bitcoin Core in version 22.0 and there may be fewer I2P\n peers than Tor or IP ones. Therefore, using I2P alone without other networks may"
      },
      {
        "sha": "0095696b83b3ecf9ab86b078d7a8a0a998389514",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6",
        "patch": "@@ -131,6 +131,12 @@ Updated settings\n   E.g. `-maxuploadtarget=500g`. No whitespace, +- or fractions allowed.\n   Default is `M` if no suffix provided. (#23249)\n \n+- If `-proxy=` is given together with `-noonion` then the provided proxy will\n+  not be set as a proxy for reaching the Tor network. So it will not be\n+  possible to open manual connections to the Tor network for example with the\n+  `addnode` RPC. To mimic the old behavior use `-proxy=` together with\n+  `-onlynet=` listing all relevant networks except `onion`. (#22834)\n+\n Tools and Utilities\n -------------------\n "
      },
      {
        "sha": "9b0c40bad5e576f112d64f0e9cc20b8a32e6e59c",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6",
        "patch": "@@ -56,11 +56,7 @@ outgoing connections, but more is possible.\n     -onlynet=onion  Make outgoing connections only to .onion addresses. Incoming\n                     connections are not affected by this option. This option can be\n                     specified multiple times to allow multiple network types, e.g.\n-                    onlynet=ipv4, onlynet=ipv6, onlynet=onion, onlynet=i2p.\n-                    Warning: if you use -onlynet with values other than onion, and\n-                    the -onion or -proxy option is set, then outgoing onion\n-                    connections will still be made; use -noonion or -onion=0 to\n-                    disable outbound onion connections in this case.\n+                    onlynet=onion, onlynet=i2p.\n \n In a typical situation, this suffices to run behind a Tor proxy:\n "
      },
      {
        "sha": "a3e97a98bdd21c9b41bf80e14e78fef7e23c7170",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 13,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6",
        "patch": "@@ -441,7 +441,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor onion services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-i2psam=<ip:port>\", \"I2P SAM proxy to reach I2P peers and accept I2P connections (default: none)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-i2pacceptincoming\", \"If set and -i2psam is also set then incoming I2P connections are accepted via the SAM proxy. If this is not set but -i2psam is set then only outgoing connections will be made to the I2P network. Ignored if -i2psam is not set. Listening for incoming I2P connections is done through the SAM proxy, not by binding to a local address and port (default: 1)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (\" + Join(GetNetworkNames(), \", \") + \"). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks. Warning: if it is used with non-onion networks and the -onion or -proxy option is set, then outbound onion connections will still be made; use -noonion or -onion=0 to disable outbound onion connections in this case.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-onlynet=<net>\", \"Make automatic outgoing connections only through network <net> (\" + Join(GetNetworkNames(), \", \") + \"). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -1315,11 +1315,12 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     // Check for host lookup allowed before parsing any network related parameters\n     fNameLookup = args.GetBoolArg(\"-dns\", DEFAULT_NAME_LOOKUP);\n \n+    proxyType onion_proxy;\n+\n     bool proxyRandomize = args.GetBoolArg(\"-proxyrandomize\", DEFAULT_PROXYRANDOMIZE);\n     // -proxy sets a proxy for all outgoing network traffic\n     // -noproxy (or -proxy=0) as well as the empty string can be used to not set a proxy, this is the default\n     std::string proxyArg = args.GetArg(\"-proxy\", \"\");\n-    SetReachable(NET_ONION, false);\n     if (proxyArg != \"\" && proxyArg != \"0\") {\n         CService proxyAddr;\n         if (!Lookup(proxyArg, proxyAddr, 9050, fNameLookup)) {\n@@ -1332,10 +1333,9 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n         SetProxy(NET_IPV4, addrProxy);\n         SetProxy(NET_IPV6, addrProxy);\n-        SetProxy(NET_ONION, addrProxy);\n         SetProxy(NET_CJDNS, addrProxy);\n         SetNameProxy(addrProxy);\n-        SetReachable(NET_ONION, true); // by default, -proxy sets onion as reachable, unless -noonion later\n+        onion_proxy = addrProxy;\n     }\n \n     // -onion can be used to set only a proxy for .onion, or override normal proxy for .onion addresses\n@@ -1344,18 +1344,26 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     std::string onionArg = args.GetArg(\"-onion\", \"\");\n     if (onionArg != \"\") {\n         if (onionArg == \"0\") { // Handle -noonion/-onion=0\n-            SetReachable(NET_ONION, false);\n+            onion_proxy = proxyType{};\n         } else {\n-            CService onionProxy;\n-            if (!Lookup(onionArg, onionProxy, 9050, fNameLookup)) {\n+            CService addr;\n+            if (!Lookup(onionArg, addr, 9050, fNameLookup) || !addr.IsValid()) {\n                 return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n             }\n-            proxyType addrOnion = proxyType(onionProxy, proxyRandomize);\n-            if (!addrOnion.IsValid())\n-                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n-            SetProxy(NET_ONION, addrOnion);\n-            SetReachable(NET_ONION, true);\n+            onion_proxy = proxyType{addr, proxyRandomize};\n+        }\n+    }\n+\n+    if (onion_proxy.IsValid()) {\n+        SetProxy(NET_ONION, onion_proxy);\n+    } else {\n+        if (args.IsArgSet(\"-onlynet\") && IsReachable(NET_ONION)) {\n+            return InitError(\n+                _(\"Outbound connections restricted to Tor (-onlynet=onion) but the proxy for \"\n+                  \"reaching the Tor network is not provided (no -proxy= and no -onion= given) or \"\n+                  \"it is explicitly forbidden (-onion=0)\"));\n         }\n+        SetReachable(NET_ONION, false);\n     }\n \n     for (const std::string& strAddr : args.GetArgs(\"-externalip\")) {\n@@ -1843,7 +1851,6 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         if (!Lookup(i2psam_arg, addr, 7656, fNameLookup) || !addr.IsValid()) {\n             return InitError(strprintf(_(\"Invalid -i2psam address or hostname: '%s'\"), i2psam_arg));\n         }\n-        SetReachable(NET_I2P, true);\n         SetProxy(NET_I2P, proxyType{addr});\n     } else {\n         SetReachable(NET_I2P, false);"
      },
      {
        "sha": "fdf1957bff7e196276033e4921beb2f29f5eff4c",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6",
        "patch": "@@ -380,7 +380,22 @@ void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply&\n             CService resolved(LookupNumeric(\"127.0.0.1\", 9050));\n             proxyType addrOnion = proxyType(resolved, true);\n             SetProxy(NET_ONION, addrOnion);\n-            SetReachable(NET_ONION, true);\n+\n+            const auto onlynets = gArgs.GetArgs(\"-onlynet\");\n+\n+            const bool onion_allowed_by_onlynet{\n+                !gArgs.IsArgSet(\"-onlynet\") ||\n+                std::any_of(onlynets.begin(), onlynets.end(), [](const auto& n) {\n+                    return ParseNetwork(n) == NET_ONION;\n+                })};\n+\n+            if (onion_allowed_by_onlynet) {\n+                // If NET_ONION is reachable, then the below is a noop.\n+                //\n+                // If NET_ONION is not reachable, then none of -proxy or -onion was given.\n+                // Since we are here, then -torcontrol and -torpassword were given.\n+                SetReachable(NET_ONION, true);\n+            }\n         }\n \n         // Finally - now create the service"
      },
      {
        "sha": "fb0f6d7cb7ba432202dd52120581f0ba14ce2523",
        "filename": "test/functional/feature_proxy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6/test/functional/feature_proxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6/test/functional/feature_proxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_proxy.py?ref=e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6",
        "patch": "@@ -280,7 +280,7 @@ def networks_dict(d):\n             n3 = networks_dict(self.nodes[3].getnetworkinfo())\n             assert_equal(NETWORKS, n3.keys())\n             for net in NETWORKS:\n-                if net == NET_I2P:\n+                if net == NET_I2P or net == NET_ONION:\n                     expected_proxy = ''\n                 else:\n                     expected_proxy = f'[{self.conf3.addr[0]}]:{self.conf3.addr[1]}'"
      }
    ]
  },
  {
    "sha": "0eea83a85ec6b215d44facc2b16ee1b035275a6b",
    "node_id": "C_kwDOABII59oAKDBlZWE4M2E4NWVjNmIyMTVkNDRmYWNjMmIxNmVlMWIwMzUyNzVhNmI",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-11-08T16:34:32Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-11-24T11:44:07Z"
      },
      "message": "scripted-diff: rename `proxyType` to `Proxy`\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/\\<proxyType\\>/Proxy/g' $(git grep -l proxyType)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "e6eecb49bd83112cb2b0147f681f65ba88ea9ea2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6eecb49bd83112cb2b0147f681f65ba88ea9ea2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0eea83a85ec6b215d44facc2b16ee1b035275a6b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGeJYcACgkQVN8G9ktV\ny7+tJx/+PKpLsRvaB7b7ZaAirdxZSECVDJnpg3r9KqHfRRagKVmaXrwb4asZqJzG\n0/NDVoZDeMS8lpjFEDGHngBI2puH9i/Ip3T0LotPNpi21LexgUXrpXKzb/Jnre2w\nHV/FSfhmLHzDRIAfjDOXuwjVg/7uVKX36d5I/D/ofzEtP9Sa1SOA+LwHg/+4Z5Uf\nxdmQ2Ix1/d4yI6BdjGTmyYrV/fmrFw6VhQRyXcUjN7vgt6xAkjXNor2ZkIfrjYS9\nL7yVDB0QjPSAaMGSg/JTnLKcHB7mxZ+GRVwlQdWBppPZO6D205N970T1+mUFGObZ\n45ic3FejD6KiXkEIkgW/neKAhvFwnlHdLXyKacAIsN4uSofVjDTi0tv9UDjph7kn\n1uWluNjUNSHnJp0uQ/JqnkiY3B3yUSvCwpKpGD94M8fcgVd9gZYWg1G/1gjss464\nyjZoRZcSC6ubbyCJwtGhG98PXhCSteaG9qabj9eM5tfeAJYo5VF3vnCAsAekw233\n2DWL8N39dwP9MyDUtCyignH+FbzopgezLGx8gbs6UkYQHCvIhoOXHsXWoQoirwid\nS6to8ES5cCpZNU3zg+znR2ji0QOHRT4LfrSlkeaiUNlXH/z2rttaKSKxeWBctICR\nFd7HdGwPSUCuncVvMozarRcCR42c5CH2I+3VQarKCeUnR8ul3mXClzHx94OwFeLU\nVhmpBiyfwYTJnSRyk7vdDmnuVL8zBTt8PvMdiHa7oWe6Mrg5O0X3ffe62CylJTBN\ntslax4DYm2VpmaZFfabn4vj3M4bit3/kgMITtMgs0YfIYDF7e58KrMYuRZnwjRq8\n1QmwvfUGJc1EGt7e9QWA0OtFXuHeGRPzT5LsNS6T8FUSl+sI0CIvX2Yd7j0gctnF\nWCuBV7wZZexBYIvdrldR0L/tGuKY+nLzR3aeu+LAATTlYSoejvEsliQF8/tzqEpd\nwY+a/sXG2r6wNbIwq0rPpjnwmUvu3/mMIEaOGTwMmjX2rnCvfPl35MfAoKeq4mTq\nBwsR410Ngs5Yy+tEKyOu7wIzP5eO7ZlHunl9fDeNnBaMqK4o8SxfaHIYzbJqLgyJ\nhI/xPUqZXMI7nyY9TjoZ2qq6zkFctmfK9ew8lu7QHqBHfJ8v5vkugAyuB8vwviY0\ns4OaoJ/H9hjHU79kHixrMW246SDuSm9UeUpmWKBp/dR0JYFUMfgQZPML/R2AJZT5\nhGuK5TLtd/nMDfIvz1PKvTtJrgeza8nRh+iWd7/bxPip4Qmb8BsAIQSt3elDMFsg\nkRzhe+ifCHRbNlOYrdxK6Yv0cwl2uRbidMhpMf39PJSZDSukE83NYaf4Sly5j2FA\nYj6yUFR1y2bA66NX78Yyy6rXzzh/kA==\n=tKml\n-----END PGP SIGNATURE-----",
        "payload": "tree e6eecb49bd83112cb2b0147f681f65ba88ea9ea2\nparent e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6\nauthor Vasil Dimov <vd@FreeBSD.org> 1636389272 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1637754247 +0100\n\nscripted-diff: rename `proxyType` to `Proxy`\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/\\<proxyType\\>/Proxy/g' $(git grep -l proxyType)\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eea83a85ec6b215d44facc2b16ee1b035275a6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0eea83a85ec6b215d44facc2b16ee1b035275a6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eea83a85ec6b215d44facc2b16ee1b035275a6b/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e53a8505dbb6f9deaae8ac82793a4fb760a1e0a6"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 30,
      "deletions": 30
    },
    "files": [
      {
        "sha": "656fdcfaea1e97d8e782616ba2c8a8e2e408daf4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0eea83a85ec6b215d44facc2b16ee1b035275a6b",
        "patch": "@@ -1315,7 +1315,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     // Check for host lookup allowed before parsing any network related parameters\n     fNameLookup = args.GetBoolArg(\"-dns\", DEFAULT_NAME_LOOKUP);\n \n-    proxyType onion_proxy;\n+    Proxy onion_proxy;\n \n     bool proxyRandomize = args.GetBoolArg(\"-proxyrandomize\", DEFAULT_PROXYRANDOMIZE);\n     // -proxy sets a proxy for all outgoing network traffic\n@@ -1327,7 +1327,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n             return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\"), proxyArg));\n         }\n \n-        proxyType addrProxy = proxyType(proxyAddr, proxyRandomize);\n+        Proxy addrProxy = Proxy(proxyAddr, proxyRandomize);\n         if (!addrProxy.IsValid())\n             return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\"), proxyArg));\n \n@@ -1344,13 +1344,13 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     std::string onionArg = args.GetArg(\"-onion\", \"\");\n     if (onionArg != \"\") {\n         if (onionArg == \"0\") { // Handle -noonion/-onion=0\n-            onion_proxy = proxyType{};\n+            onion_proxy = Proxy{};\n         } else {\n             CService addr;\n             if (!Lookup(onionArg, addr, 9050, fNameLookup) || !addr.IsValid()) {\n                 return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n             }\n-            onion_proxy = proxyType{addr, proxyRandomize};\n+            onion_proxy = Proxy{addr, proxyRandomize};\n         }\n     }\n \n@@ -1851,7 +1851,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         if (!Lookup(i2psam_arg, addr, 7656, fNameLookup) || !addr.IsValid()) {\n             return InitError(strprintf(_(\"Invalid -i2psam address or hostname: '%s'\"), i2psam_arg));\n         }\n-        SetProxy(NET_I2P, proxyType{addr});\n+        SetProxy(NET_I2P, Proxy{addr});\n     } else {\n         SetReachable(NET_I2P, false);\n     }"
      },
      {
        "sha": "f1205c0c3cfa75fbcfd0adbdc6ad59a187a8d595",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=0eea83a85ec6b215d44facc2b16ee1b035275a6b",
        "patch": "@@ -28,7 +28,7 @@ class CNodeStats;\n class Coin;\n class RPCTimerInterface;\n class UniValue;\n-class proxyType;\n+class Proxy;\n enum class SynchronizationState;\n enum class TransactionError;\n struct CNodeStateStats;\n@@ -97,7 +97,7 @@ class Node\n     virtual void mapPort(bool use_upnp, bool use_natpmp) = 0;\n \n     //! Get proxy.\n-    virtual bool getProxy(Network net, proxyType& proxy_info) = 0;\n+    virtual bool getProxy(Network net, Proxy& proxy_info) = 0;\n \n     //! Get number of connections.\n     virtual size_t getNodeCount(ConnectionDirection flags) = 0;"
      },
      {
        "sha": "483de27eddf072dc6fdec01858c3d9f2c8448e99",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0eea83a85ec6b215d44facc2b16ee1b035275a6b",
        "patch": "@@ -447,7 +447,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     // Connect\n     bool connected = false;\n     std::unique_ptr<Sock> sock;\n-    proxyType proxy;\n+    Proxy proxy;\n     CAddress addr_bind;\n     assert(!addr_bind.IsValid());\n \n@@ -2538,7 +2538,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n         return false;\n     }\n \n-    proxyType i2p_sam;\n+    Proxy i2p_sam;\n     if (GetProxy(NET_I2P, i2p_sam)) {\n         m_i2p_sam_session = std::make_unique<i2p::sam::Session>(gArgs.GetDataDirNet() / \"i2p_private_key\",\n                                                                 i2p_sam.proxy, &interruptNet);"
      },
      {
        "sha": "8375fc08bd7b43364ba73a38747c098aed368c59",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=0eea83a85ec6b215d44facc2b16ee1b035275a6b",
        "patch": "@@ -31,8 +31,8 @@\n \n // Settings\n static Mutex g_proxyinfo_mutex;\n-static proxyType proxyInfo[NET_MAX] GUARDED_BY(g_proxyinfo_mutex);\n-static proxyType nameProxy GUARDED_BY(g_proxyinfo_mutex);\n+static Proxy proxyInfo[NET_MAX] GUARDED_BY(g_proxyinfo_mutex);\n+static Proxy nameProxy GUARDED_BY(g_proxyinfo_mutex);\n int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n bool fNameLookup = DEFAULT_NAME_LOOKUP;\n \n@@ -605,7 +605,7 @@ bool ConnectSocketDirectly(const CService &addrConnect, const Sock& sock, int nT\n     return true;\n }\n \n-bool SetProxy(enum Network net, const proxyType &addrProxy) {\n+bool SetProxy(enum Network net, const Proxy &addrProxy) {\n     assert(net >= 0 && net < NET_MAX);\n     if (!addrProxy.IsValid())\n         return false;\n@@ -614,7 +614,7 @@ bool SetProxy(enum Network net, const proxyType &addrProxy) {\n     return true;\n }\n \n-bool GetProxy(enum Network net, proxyType &proxyInfoOut) {\n+bool GetProxy(enum Network net, Proxy &proxyInfoOut) {\n     assert(net >= 0 && net < NET_MAX);\n     LOCK(g_proxyinfo_mutex);\n     if (!proxyInfo[net].IsValid())\n@@ -623,15 +623,15 @@ bool GetProxy(enum Network net, proxyType &proxyInfoOut) {\n     return true;\n }\n \n-bool SetNameProxy(const proxyType &addrProxy) {\n+bool SetNameProxy(const Proxy &addrProxy) {\n     if (!addrProxy.IsValid())\n         return false;\n     LOCK(g_proxyinfo_mutex);\n     nameProxy = addrProxy;\n     return true;\n }\n \n-bool GetNameProxy(proxyType &nameProxyOut) {\n+bool GetNameProxy(Proxy &nameProxyOut) {\n     LOCK(g_proxyinfo_mutex);\n     if(!nameProxy.IsValid())\n         return false;\n@@ -653,7 +653,7 @@ bool IsProxy(const CNetAddr &addr) {\n     return false;\n }\n \n-bool ConnectThroughProxy(const proxyType& proxy, const std::string& strDest, uint16_t port, const Sock& sock, int nTimeout, bool& outProxyConnectionFailed)\n+bool ConnectThroughProxy(const Proxy& proxy, const std::string& strDest, uint16_t port, const Sock& sock, int nTimeout, bool& outProxyConnectionFailed)\n {\n     // first connect to proxy server\n     if (!ConnectSocketDirectly(proxy.proxy, sock, nTimeout, true)) {"
      },
      {
        "sha": "21a33a7a8a2d1627a46cf9037f20a3e92cdd8ae5",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=0eea83a85ec6b215d44facc2b16ee1b035275a6b",
        "patch": "@@ -45,11 +45,11 @@ static inline bool operator&(ConnectionDirection a, ConnectionDirection b) {\n     return (underlying(a) & underlying(b));\n }\n \n-class proxyType\n+class Proxy\n {\n public:\n-    proxyType(): randomize_credentials(false) {}\n-    explicit proxyType(const CService &_proxy, bool _randomize_credentials=false): proxy(_proxy), randomize_credentials(_randomize_credentials) {}\n+    Proxy(): randomize_credentials(false) {}\n+    explicit Proxy(const CService &_proxy, bool _randomize_credentials=false): proxy(_proxy), randomize_credentials(_randomize_credentials) {}\n \n     bool IsValid() const { return proxy.IsValid(); }\n \n@@ -73,8 +73,8 @@ enum Network ParseNetwork(const std::string& net);\n std::string GetNetworkName(enum Network net);\n /** Return a vector of publicly routable Network names; optionally append NET_UNROUTABLE. */\n std::vector<std::string> GetNetworkNames(bool append_unroutable = false);\n-bool SetProxy(enum Network net, const proxyType &addrProxy);\n-bool GetProxy(enum Network net, proxyType &proxyInfoOut);\n+bool SetProxy(enum Network net, const Proxy &addrProxy);\n+bool GetProxy(enum Network net, Proxy &proxyInfoOut);\n bool IsProxy(const CNetAddr &addr);\n /**\n  * Set the name proxy to use for all connections to nodes specified by a\n@@ -92,9 +92,9 @@ bool IsProxy(const CNetAddr &addr);\n  *       server in common use (most notably Tor) actually implements UDP\n  *       support, and a DNS resolver is beyond the scope of this project.\n  */\n-bool SetNameProxy(const proxyType &addrProxy);\n+bool SetNameProxy(const Proxy &addrProxy);\n bool HaveNameProxy();\n-bool GetNameProxy(proxyType &nameProxyOut);\n+bool GetNameProxy(Proxy &nameProxyOut);\n \n using DNSLookupFn = std::function<std::vector<CNetAddr>(const std::string&, bool)>;\n extern DNSLookupFn g_dns_lookup;\n@@ -218,7 +218,7 @@ bool ConnectSocketDirectly(const CService &addrConnect, const Sock& sock, int nT\n  *\n  * @returns Whether or not the operation succeeded.\n  */\n-bool ConnectThroughProxy(const proxyType& proxy, const std::string& strDest, uint16_t port, const Sock& sock, int nTimeout, bool& outProxyConnectionFailed);\n+bool ConnectThroughProxy(const Proxy& proxy, const std::string& strDest, uint16_t port, const Sock& sock, int nTimeout, bool& outProxyConnectionFailed);\n \n /** Disable or enable blocking-mode for a socket */\n bool SetSocketNonBlocking(const SOCKET& hSocket, bool fNonBlocking);"
      },
      {
        "sha": "76c745f28717dc043d438bbb003b5358af4890c7",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=0eea83a85ec6b215d44facc2b16ee1b035275a6b",
        "patch": "@@ -113,7 +113,7 @@ class NodeImpl : public Node\n     }\n     bool shutdownRequested() override { return ShutdownRequested(); }\n     void mapPort(bool use_upnp, bool use_natpmp) override { StartMapPort(use_upnp, use_natpmp); }\n-    bool getProxy(Network net, proxyType& proxy_info) override { return GetProxy(net, proxy_info); }\n+    bool getProxy(Network net, Proxy& proxy_info) override { return GetProxy(net, proxy_info); }\n     size_t getNodeCount(ConnectionDirection flags) override\n     {\n         return m_context->connman ? m_context->connman->GetNodeCount(flags) : 0;"
      },
      {
        "sha": "002ebd5585712c976b0e8f14aaa1d633fc00529d",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=0eea83a85ec6b215d44facc2b16ee1b035275a6b",
        "patch": "@@ -328,7 +328,7 @@ void ClientModel::unsubscribeFromCoreSignals()\n \n bool ClientModel::getProxyInfo(std::string& ip_port) const\n {\n-    proxyType ipv4, ipv6;\n+    Proxy ipv4, ipv6;\n     if (m_node.getProxy((Network) 1, ipv4) && m_node.getProxy((Network) 2, ipv6)) {\n       ip_port = ipv4.proxy.ToStringIPPort();\n       return true;"
      },
      {
        "sha": "062e76217bea15af132aea1a2f39554f14166928",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=0eea83a85ec6b215d44facc2b16ee1b035275a6b",
        "patch": "@@ -392,7 +392,7 @@ void OptionsDialog::updateProxyValidationState()\n \n void OptionsDialog::updateDefaultProxyNets()\n {\n-    proxyType proxy;\n+    Proxy proxy;\n     std::string strProxy;\n     QString strDefaultProxyGUI;\n \n@@ -422,7 +422,7 @@ QValidator::State ProxyAddressValidator::validate(QString &input, int &pos) cons\n     Q_UNUSED(pos);\n     // Validate the proxy\n     CService serv(LookupNumeric(input.toStdString(), DEFAULT_GUI_PROXY_PORT));\n-    proxyType addrProxy = proxyType(serv, true);\n+    Proxy addrProxy = Proxy(serv, true);\n     if (addrProxy.IsValid())\n         return QValidator::Acceptable;\n "
      },
      {
        "sha": "6e7d9ab0afcc3c4789feef9428e7ad009d45b758",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=0eea83a85ec6b215d44facc2b16ee1b035275a6b",
        "patch": "@@ -567,7 +567,7 @@ static UniValue GetNetworksInfo()\n     for (int n = 0; n < NET_MAX; ++n) {\n         enum Network network = static_cast<enum Network>(n);\n         if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;\n-        proxyType proxy;\n+        Proxy proxy;\n         UniValue obj(UniValue::VOBJ);\n         GetProxy(network, proxy);\n         obj.pushKV(\"name\", GetNetworkName(network));"
      },
      {
        "sha": "38a49b8534df25dcbaea277b1fb3dfaf0f6f96f9",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eea83a85ec6b215d44facc2b16ee1b035275a6b/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=0eea83a85ec6b215d44facc2b16ee1b035275a6b",
        "patch": "@@ -378,7 +378,7 @@ void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply&\n         // if -onion isn't set to something else.\n         if (gArgs.GetArg(\"-onion\", \"\") == \"\") {\n             CService resolved(LookupNumeric(\"127.0.0.1\", 9050));\n-            proxyType addrOnion = proxyType(resolved, true);\n+            Proxy addrOnion = Proxy(resolved, true);\n             SetProxy(NET_ONION, addrOnion);\n \n             const auto onlynets = gArgs.GetArgs(\"-onlynet\");"
      }
    ]
  }
]