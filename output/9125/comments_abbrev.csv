theuni,2016-11-11T02:36:53Z,Concept ACK. _Very_ curious to see some memory usage numbers :)\n,https://github.com/bitcoin/bitcoin/pull/9125#issuecomment-259866415,259866415,
sipa,2016-11-11T07:12:22Z,I created a branch with some follow-up _shared_ptr all the things_ and other optimizations: https://github.com/sipa/bitcoin/commits/sharedblock2\n,https://github.com/bitcoin/bitcoin/pull/9125#issuecomment-259895918,259895918,
gmaxwell,2016-11-14T17:57:19Z,tested ACK.\n,https://github.com/bitcoin/bitcoin/pull/9125#issuecomment-260409978,260409978,
gmaxwell,2016-11-15T07:49:38Z,"FWIW, I attempted to test the performance impact of this but it is a bit difficulty to do a fair comparison. I am reasonably confident that it does not produce a significant slowdown. (logically it should be a speedup, but I don't think my measurements were fair/reliable enough to determine if there was on or not).\n",https://github.com/bitcoin/bitcoin/pull/9125#issuecomment-260570570,260570570,
sdaftuar,2016-11-16T20:01:08Z,"I did a quick performance comparison running on 2 days of historical data, and though I was unable to quantify any meaningful performance difference, I agree that this doesn't appear to cause a significant slowdown.\n",https://github.com/bitcoin/bitcoin/pull/9125#issuecomment-261055148,261055148,
sipa,2016-11-16T20:07:16Z,"Benchmark results (25 reindex-chainstates until last checkpoint, default dbcache, otherwise unloaded 24-core machine, measured by -debug=bench) on both master and #9125+#8580+#8589+a few shared_ptr optimizations I haven't PR'ed yet:\n- Average: master 1490s, shared_ptr 1442s\n\nBest master run:\n\n```\n2016-11-16 12:27:14   - Load block from disk: 1.25ms [273.57s]\n2016-11-16 12:27:14     - Sanity",https://github.com/bitcoin/bitcoin/pull/9125#issuecomment-261056620,261056620,
sipa,2016-11-17T23:09:22Z,@jtimon I believe all of them are used in successor PRs.\n\n@theuni That overload won't work for the arguments that take a\nCTransactionRef.\n,https://github.com/bitcoin/bitcoin/pull/9125#issuecomment-261399275,261399275,
sipa,2016-11-17T23:11:32Z,@jtimon std::move just casts to an T&& argument. It's to indicate that the\ncalled function may destroy the object.\n,https://github.com/bitcoin/bitcoin/pull/9125#issuecomment-261399691,261399691,
jtimon,2016-11-17T23:44:25Z,utACK 9bc6cbc besides some nits by @theuni \n,https://github.com/bitcoin/bitcoin/pull/9125#issuecomment-261405945,261405945,
theuni,2016-11-17T23:52:12Z,@sipa I'm unsure why you'd want to do that? Why wouldn't you just\n\n```\nCTransactionRef a(MakeTransactionRef());\nCTransactionRef b(a);\nCTransactionRef c(std::move(b));\n```\n\n?\n,https://github.com/bitcoin/bitcoin/pull/9125#issuecomment-261407305,261407305,
sipa,2016-11-18T00:03:41Z,"@theuni In #8580 I add a templated constructor to CWalletTx and CMerkleTx that just passes its arguments to MakeTransactionRef, avoiding duplicating various kinds of constructors in both.\n",https://github.com/bitcoin/bitcoin/pull/9125#issuecomment-261409347,261409347,
sipa,2016-11-18T00:52:59Z,"Rebased, and addressed two nits by @theuni:\n- Added the memory usage for the control block of the vtx entries in CBlock.\n- Changed deserialize_t to deserialize_type to avoid colliding with the reserved _t suffix.\n",https://github.com/bitcoin/bitcoin/pull/9125#issuecomment-261417431,261417431,
sipa,2016-11-19T19:24:20Z,"Some more benchmarks (fastest of 28 reindexes each, 300 MB dbcache, reindex chainstate up to block 295000):\n- master: 1462.4s\n- this PR: 1411.2s\n- #8580: 1412.2s\n- #8589: 1417.5s\n- https://github.com/sipa/bitcoin/commits/sharedblock2: 1410.3s\n",https://github.com/bitcoin/bitcoin/pull/9125#issuecomment-261733957,261733957,
sipa,2016-11-20T02:01:27Z,Addressed all of @TheBlueMatt's nits.\n,https://github.com/bitcoin/bitcoin/pull/9125#issuecomment-261753075,261753075,
laanwj,2016-11-21T09:52:05Z,Tested ACK b4e4ba4,https://github.com/bitcoin/bitcoin/pull/9125#issuecomment-261892172,261892172,
theuni,2016-11-17T19:26:46Z,"Nits: _t is reserved by posix, and maybe namespace ""deserialize"" to avoid future shadowing oopses?\n",https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88527182,88527182,src/serialize.h
theuni,2016-11-17T19:31:20Z,Does this need a move assignment operator too? Or is this being removed in a follow-up anyway?\n,https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88528236,88528236,src/primitives/transaction.h
theuni,2016-11-17T20:18:41Z,Need to account for the overhead in the control block?\n,https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88537741,88537741,src/core_memusage.h
theuni,2016-11-17T20:21:13Z,"Future optim (probably done in one of your follow-up branches), this could just return a shared_ptr instead.\n",https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88538183,88538183,src/main.cpp
theuni,2016-11-17T20:34:24Z,"Fixing them one at a time, eh? :)\n",https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88540383,88540383,src/main.cpp
theuni,2016-11-17T20:38:05Z,unrelated nit: using range-for or iterators here would avoid looking up in the vector 3x.\n,https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88541047,88541047,src/main.cpp
theuni,2016-11-17T20:41:47Z,"Nit: This could be combined with the loop above, and &*tx could be cached to avoid duped dereference cost.\n",https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88541658,88541658,src/main.cpp
theuni,2016-11-17T21:03:41Z,nit: could cache the dereferenced tx since it's used a few times\n,https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88545416,88545416,src/txmempool.cpp
theuni,2016-11-17T21:08:43Z,"Heh, https://github.com/bitcoin/bitcoin/pull/8580/commits/9b27eb1db1e4d1433f016dad381b52e8d986b685. Nevermind.\n",https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88546294,88546294,src/main.cpp
sipa,2016-11-17T21:11:57Z,I'm not sure what you are suggesting here.\n,https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88546809,88546809,src/serialize.h
sipa,2016-11-17T21:12:28Z,All assignment operators go away in #8580.\n,https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88546901,88546901,src/primitives/transaction.h
theuni,2016-11-17T22:01:42Z,"``` c++\nnamespace deserialize\n{\n  struct tag {};\n  constexpr tag do;\n}\n```\n\nI suppose it's not worry worrying about though. I can't come up with a case where using a local variable ""deserialize"" could compile in an unintended way.\n",https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88556905,88556905,src/serialize.h
jtimon,2016-11-17T22:55:17Z,"Where is this version used? I see calls that call std::move before calling that maybe should be using this instead?\n\nIn any case, it doesn't feel right to have so many versions of the function somehow. Specially one some with & and others with &&\n",https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88565949,88565949,src/primitives/transaction.h
jtimon,2016-11-17T23:00:29Z,Thanks\n,https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88566807,88566807,src/core_memusage.h
theuni,2016-11-17T23:06:42Z,I believe the overloads could be replaced with:\n\n``` c++\ntemplate <typename T>\nstatic inline CTransactionRef MakeTransactionRef(T&& txIn)\n{\n  return std::make_shared<const CTransaction>(std::forward<T>(txIn));\n}\n```\n,https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88567792,88567792,src/primitives/transaction.h
sipa,2016-11-18T00:33:36Z,"You take one down, pass it around. Infinity cases of nits in the code.\n",https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88578710,88578710,src/main.cpp
sipa,2016-11-18T00:34:56Z,"Not going to touch that now, as I believe #9014 will rewrite this anyway.\n",https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88578876,88578876,src/main.cpp
sipa,2016-11-18T00:35:53Z,"Good point, but let's do that as an independent improvement.\n",https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88578993,88578993,src/main.cpp
sipa,2016-11-18T00:40:23Z,Likewise.\n,https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88579459,88579459,src/txmempool.cpp
sipa,2016-11-18T00:42:11Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88579642,88579642,src/core_memusage.h
sipa,2016-11-18T00:42:25Z,Fixed by using deserialize_type instead of deserialize_t.\n,https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88579656,88579656,src/serialize.h
TheBlueMatt,2016-11-19T23:56:28Z,Nit: bad search/replace here?\n,https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88790537,88790537,src/blockencodings.h
TheBlueMatt,2016-11-20T00:25:50Z,nit: comment out of date\n,https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88790945,88790945,src/serialize.h
TheBlueMatt,2016-11-20T00:38:34Z,Might still be worth replacing the 6 functions with 3 using @theuni's suggestion\n,https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88791112,88791112,src/primitives/transaction.h
sipa,2016-11-20T02:01:06Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88792015,88792015,src/blockencodings.h
sipa,2016-11-20T02:01:11Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/9125#discussion_r88792016,88792016,src/serialize.h
arielgabizon,2018-04-20T10:14:25Z,"Right now there's some code redundancy - the only `deserialize_type` is `deserialize`,\nso it's not really used - like here.\nBut I guess people think there may be more in the future. ",https://github.com/bitcoin/bitcoin/pull/9125#discussion_r183006766,183006766,src/primitives/transaction.h
