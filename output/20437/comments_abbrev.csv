Crypt-iQ,2020-11-26 19:23:05,utACK 892e7ddbd6f85653ee775c34f07b146c6f3b628e,https://github.com/bitcoin/bitcoin/pull/20437#issuecomment-734451151,734451151,
MarcoFalke,2020-11-27 14:03:03,Why pick a time that won't ever be hit in practice? Why pick a time that makes it impossible to go back in time?,https://github.com/bitcoin/bitcoin/pull/20437#issuecomment-734849980,734849980,
practicalswift,2020-11-27 14:25:04,"@MarcoFalke \n\nI choose `SetMockTime(1)` because `SetMockTime(0)` is a no-op, and it seemed to me that `SetMockTime(1)` is commonly use in `src/test/`:\n\n```\n$ git grep SetMockTime ""src/test/"" | sed 's/^.*: *//g' | grep ^SetMockTime | sort | uniq -c | sort -rn\n      5 SetMockTime(0);\n      3 SetMockTime(2);\n      3 SetMockTime(1);\n      1 SetMockTime(nStartTime); // Overrides futur",https://github.com/bitcoin/bitcoin/pull/20437#issuecomment-734859430,734859430,
MarcoFalke,2020-11-28 09:38:18,"`SetMockTime(1)` in existing tests in only used to check the difference between `SetMockTime(2)` and `SetMockTime(1)` is `1`. I don't think one unit test case picking a random number should be a reason for all fuzz tests to pick the same number.\n\nIdeally the fuzz engine picks the number, so that additional coverage can be achieved (if there is any). If there is no additional coverage to be ach",https://github.com/bitcoin/bitcoin/pull/20437#issuecomment-735206881,735206881,
practicalswift,2020-11-30 22:28:32,"@MarcoFalke Oh, I should have clarified that the current patch was written to avoid time-based ""non-determinism"" without invalidating any seed corpora. Hence the constant rather than a fuzzer provided value.\n\nI agree that if we are okay with invalidating seeds then `SetMockTime(ConsumeTime(fuzzed_data_provider));` is obviously the superior choice. (FWIW I'm not opposed to invalidating seeds fo",https://github.com/bitcoin/bitcoin/pull/20437#issuecomment-736094374,736094374,
MarcoFalke,2020-12-01 06:35:23,I don't think we should be using `-mocktime=N` at all. This is just hiding the issue without actually improving anything.,https://github.com/bitcoin/bitcoin/pull/20437#issuecomment-736255899,736255899,
practicalswift,2020-12-01 12:34:01,"@MarcoFalke Now using `SetMockTime(ConsumeTime(fuzzed_data_provider));` and no `-mocktime=N`. Please re-review :)\n\n",https://github.com/bitcoin/bitcoin/pull/20437#issuecomment-736523975,736523975,
DrahtBot,2020-12-04 17:27:58,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20649 (refactor: Remove nMyStartingHeight from CNode/Connman by MarcoFalke)\n* #20228 (addrman: Make addrman a top-level ",https://github.com/bitcoin/bitcoin/pull/20437#issuecomment-738911397,738911397,
practicalswift,2020-12-15 12:58:19,Anything left to do here? :),https://github.com/bitcoin/bitcoin/pull/20437#issuecomment-745271162,745271162,
MarcoFalke,2020-12-15 14:54:29,"review ACK 8c09c0c1d18885ef94f79b3f2d073f43269bc95d\n\nThough, process_message* is still using non-mocked time. Also, is there a way to test? Locally the targets are non-deterministic before and after this change.",https://github.com/bitcoin/bitcoin/pull/20437#issuecomment-745344652,745344652,
practicalswift,2020-12-15 15:55:51,"> Though, process_message* is still using non-mocked time.\n\nThanks for reviewing! :)\n\n`process_message` and `process_messages` are left to fix: simply using mock time is not enough for them due to interaction with `IsInitialBlockDownload()` (see OP description).\n\n> Also, is there a way to test? Locally the targets are non-deterministic before and after this change.\n\nOne way to test",https://github.com/bitcoin/bitcoin/pull/20437#issuecomment-745383974,745383974,
MarcoFalke,2020-12-15 16:11:05,"> One way to test ...\n\nThat is what I did. I was hoping there is better tooling out there to detect non-determinism in fuzz tests. I guess we'll have to roll our own...",https://github.com/bitcoin/bitcoin/pull/20437#issuecomment-745393561,745393561,
MarcoFalke,2020-12-15 16:13:04,"Btw, if you quote ACKs, it will look like you did a review in the merge commit",https://github.com/bitcoin/bitcoin/pull/20437#issuecomment-745394845,745394845,
practicalswift,2020-12-15 16:15:12,"> > One way to test ...\n> \n> That is what I did. I was hoping there is better tooling out there to detect non-determinism in fuzz tests. I guess we'll have to roll our own...\n\nI've thought about modifying [`contrib/devtools/test_deterministic_coverage.sh`](https://github.com/bitcoin/bitcoin/blob/master/contrib/devtools/test_deterministic_coverage.sh) to add support for running the fuzz tes",https://github.com/bitcoin/bitcoin/pull/20437#issuecomment-745396278,745396278,
MarcoFalke,2020-12-01 13:07:05,needs rebase,https://github.com/bitcoin/bitcoin/pull/20437#discussion_r533393047,533393047,src/test/fuzz/util.h
practicalswift,2020-12-01 13:31:53,Rebased! :),https://github.com/bitcoin/bitcoin/pull/20437#discussion_r533408335,533408335,src/test/fuzz/util.h
