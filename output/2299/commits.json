[
  {
    "sha": "8269a0953ee9ccbdc422433fc37184e60f94b178",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjY5YTA5NTNlZTljY2JkYzQyMjQzM2ZjMzcxODRlNjBmOTRiMTc4",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-02-11T23:52:30Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-02-12T20:41:31Z"
      },
      "message": "Reimplement click-to-pay links. Add OSX support.\n\nSwitch to using Qt's QLocalServer/QLocalSocket to handle bitcoin\npayment links (bitcoin:... URIs)\n\nReason for switch: the boost::interprocess mechanism seemed flaky,\nand doesn't mesh as well with \"The Qt Way\"\n\nqtipcserver.cpp/h is replaced by paymentserver.cpp/h\n\nClick-to-pay now also works on OSX, with a custom Info.plist\nthat registers Bitcoin-Qt as a handler for bitcoin: URLs and\nan event listener on the main QApplication that handles\nQFileOpenEvents (Qt translates 'url clicked' AppleEvents into\nQFileOpenEvents automagically).",
      "tree": {
        "sha": "9e5a3c73057afdba5e7351e051072ac2365ca924",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e5a3c73057afdba5e7351e051072ac2365ca924"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8269a0953ee9ccbdc422433fc37184e60f94b178",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8269a0953ee9ccbdc422433fc37184e60f94b178",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8269a0953ee9ccbdc422433fc37184e60f94b178",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8269a0953ee9ccbdc422433fc37184e60f94b178/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f0fa79db290d5139c27409055b2035099afa6fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f0fa79db290d5139c27409055b2035099afa6fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f0fa79db290d5139c27409055b2035099afa6fd"
      }
    ],
    "stats": {
      "total": 476,
      "additions": 272,
      "deletions": 204
    },
    "files": [
      {
        "sha": "89b9f338bc36258e19ac37b70373f29d8141bc20",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8269a0953ee9ccbdc422433fc37184e60f94b178/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8269a0953ee9ccbdc422433fc37184e60f94b178/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=8269a0953ee9ccbdc422433fc37184e60f94b178",
        "patch": "@@ -2,6 +2,7 @@ TEMPLATE = app\n TARGET = bitcoin-qt\n VERSION = 0.8.0\n INCLUDEPATH += src src/json src/qt\n+QT += network\n DEFINES += QT_GUI BOOST_THREAD_USE_LIB BOOST_SPIRIT_THREADSAFE\n CONFIG += no_include_pwd\n CONFIG += thread\n@@ -195,7 +196,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/qt/askpassphrasedialog.h \\\n     src/protocol.h \\\n     src/qt/notificator.h \\\n-    src/qt/qtipcserver.h \\\n+    src/qt/paymentserver.h \\\n     src/allocators.h \\\n     src/ui_interface.h \\\n     src/qt/rpcconsole.h \\\n@@ -264,7 +265,7 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/askpassphrasedialog.cpp \\\n     src/protocol.cpp \\\n     src/qt/notificator.cpp \\\n-    src/qt/qtipcserver.cpp \\\n+    src/qt/paymentserver.cpp \\\n     src/qt/rpcconsole.cpp \\\n     src/noui.cpp \\\n     src/leveldb.cpp \\\n@@ -385,6 +386,7 @@ macx:TARGET = \"Bitcoin-Qt\"\n macx:QMAKE_CFLAGS_THREAD += -pthread\n macx:QMAKE_LFLAGS_THREAD += -pthread\n macx:QMAKE_CXXFLAGS_THREAD += -pthread\n+macx:QMAKE_INFO_PLIST = share/qt/Info.plist\n \n # Set libraries and includes at end, to use platform-defined defaults if not overridden\n INCLUDEPATH += $$BOOST_INCLUDE_PATH $$BDB_INCLUDE_PATH $$OPENSSL_INCLUDE_PATH $$QRENCODE_INCLUDE_PATH"
      },
      {
        "sha": "58b2152e9f4698bbc60486ce977d9ed518a8e427",
        "filename": "share/qt/Info.plist",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8269a0953ee9ccbdc422433fc37184e60f94b178/share/qt/Info.plist",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8269a0953ee9ccbdc422433fc37184e60f94b178/share/qt/Info.plist",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist?ref=8269a0953ee9ccbdc422433fc37184e60f94b178",
        "patch": "@@ -0,0 +1,31 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE plist SYSTEM \"file://localhost/System/Library/DTDs/PropertyList.dtd\">\n+<plist version=\"0.9\">\n+<dict>\n+\t<key>CFBundleIconFile</key>\n+\t<string>bitcoin.icns</string>\n+\t<key>CFBundlePackageType</key>\n+\t<string>APPL</string>\n+\t<key>CFBundleGetInfoString</key>\n+\t<string>Bitcoin-Qt</string>\n+\t<key>CFBundleSignature</key>\n+\t<string>????</string>\n+\t<key>CFBundleExecutable</key>\n+\t<string>Bitcoin-Qt</string>\n+\t<key>CFBundleIdentifier</key>\n+\t<string>org.bitcoinfoundation.Bitcoin-Qt</string>\n+        <key>CFBundleURLTypes</key>\n+        <array>\n+          <dict>\n+            <key>CFBundleTypeRole</key>\n+            <string>Editor</string>\n+            <key>CFBundleURLName</key>\n+            <string>org.bitcoinfoundation.BitcoinPayment</string>\n+            <key>CFBundleURLSchemes</key>\n+            <array>\n+              <string>bitcoin</string>\n+            </array>\n+          </dict>\n+        </array>\n+</dict>\n+</plist>"
      },
      {
        "sha": "1b5ef28ba99ffc55f34660bebb84654fc9e7dfa4",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 21,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8269a0953ee9ccbdc422433fc37184e60f94b178/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8269a0953ee9ccbdc422433fc37184e60f94b178/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=8269a0953ee9ccbdc422433fc37184e60f94b178",
        "patch": "@@ -9,12 +9,13 @@\n #include \"guiconstants.h\"\n #include \"init.h\"\n #include \"ui_interface.h\"\n-#include \"qtipcserver.h\"\n+#include \"paymentserver.h\"\n \n #include <QApplication>\n #include <QMessageBox>\n #include <QTextCodec>\n #include <QLocale>\n+#include <QTimer>\n #include <QTranslator>\n #include <QSplashScreen>\n #include <QLibraryInfo>\n@@ -70,15 +71,6 @@ static bool ThreadSafeAskFee(int64 nFeeRequired)\n     return payFee;\n }\n \n-static void ThreadSafeHandleURI(const std::string& strURI)\n-{\n-    if(!guiref)\n-        return;\n-\n-    QMetaObject::invokeMethod(guiref, \"handleURI\", GUIUtil::blockingGUIThreadConnection(),\n-                               Q_ARG(QString, QString::fromStdString(strURI)));\n-}\n-\n static void InitMessage(const std::string &message)\n {\n     if(splashref)\n@@ -117,21 +109,19 @@ int main(int argc, char *argv[])\n     // Command-line options take precedence:\n     ParseParameters(argc, argv);\n \n-    if(GetBoolArg(\"-testnet\")) // Separate message queue name for testnet\n-        strBitcoinURIQueueName = BITCOINURI_QUEUE_NAME_TESTNET;\n-    else\n-        strBitcoinURIQueueName = BITCOINURI_QUEUE_NAME_MAINNET;\n-\n-    // Do this early as we don't want to bother initializing if we are just calling IPC\n-    ipcScanRelay(argc, argv);\n-\n     // Internal string conversion is all UTF-8\n     QTextCodec::setCodecForTr(QTextCodec::codecForName(\"UTF-8\"));\n     QTextCodec::setCodecForCStrings(QTextCodec::codecForTr());\n \n     Q_INIT_RESOURCE(bitcoin);\n     QApplication app(argc, argv);\n \n+    // Do this early as we don't want to bother initializing if we are just calling IPC\n+    // ... but do it after creating app, so QCoreApplication::arguments is initialized:\n+    if (PaymentServer::ipcSendCommandLine())\n+        exit(0);\n+    PaymentServer* paymentServer = new PaymentServer(&app);\n+\n     // Install global event filter that makes sure that long tooltips can be word-wrapped\n     app.installEventFilter(new GUIUtil::ToolTipToRichTextFilter(TOOLTIP_WRAP_THRESHOLD, &app));\n \n@@ -188,7 +178,6 @@ int main(int argc, char *argv[])\n     // Subscribe to global signals from core\n     uiInterface.ThreadSafeMessageBox.connect(ThreadSafeMessageBox);\n     uiInterface.ThreadSafeAskFee.connect(ThreadSafeAskFee);\n-    uiInterface.ThreadSafeHandleURI.connect(ThreadSafeHandleURI);\n     uiInterface.InitMessage.connect(InitMessage);\n     uiInterface.QueueShutdown.connect(QueueShutdown);\n     uiInterface.Translate.connect(Translate);\n@@ -249,8 +238,10 @@ int main(int argc, char *argv[])\n                     window.show();\n                 }\n \n-                // Place this here as guiref has to be defined if we don't want to lose URIs\n-                ipcInit(argc, argv);\n+                // Now that initialization/startup is done, process any command-line\n+                // bitcoin: URIs\n+                QObject::connect(paymentServer, SIGNAL(receivedURI(QString)), &window, SLOT(handleURI(QString)));\n+                QTimer::singleShot(100, paymentServer, SLOT(uiReady()));\n \n                 app.exec();\n "
      },
      {
        "sha": "05f2ac10e47a60749a56e2c1cc5b7f2ac4bfdd1d",
        "filename": "src/qt/paymentserver.cpp",
        "status": "added",
        "additions": 159,
        "deletions": 0,
        "changes": 159,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8269a0953ee9ccbdc422433fc37184e60f94b178/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8269a0953ee9ccbdc422433fc37184e60f94b178/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=8269a0953ee9ccbdc422433fc37184e60f94b178",
        "patch": "@@ -0,0 +1,159 @@\n+// Copyright (c) 2009-2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"paymentserver.h\"\n+#include \"guiconstants.h\"\n+#include \"ui_interface.h\"\n+#include \"util.h\"\n+\n+#include <QApplication>\n+#include <QByteArray>\n+#include <QCoreApplication>\n+#include <QDataStream>\n+#include <QDebug>\n+#include <QFileOpenEvent>\n+#include <QHash>\n+#include <QLocalServer>\n+#include <QLocalSocket>\n+#include <QStringList>\n+#include <QUrl>\n+\n+using namespace boost;\n+\n+const int BITCOIN_IPC_CONNECT_TIMEOUT = 1000; // milliseconds\n+const QString BITCOIN_IPC_PREFIX(\"bitcoin:\");\n+\n+//\n+// Create a name that is unique for:\n+//  testnet / non-testnet\n+//  data directory\n+//\n+static QString ipcServerName()\n+{\n+    QString name(\"BitcoinQt\");\n+\n+    // Append a simple hash of the datadir\n+    // Note that GetDataDir(true) returns a different path\n+    // for -testnet versus main net\n+    QString ddir(GetDataDir(true).string().c_str());\n+    name.append(QString::number(qHash(ddir)));\n+\n+    return name;\n+}\n+\n+//\n+// This stores payment requests received before\n+// the main GUI window is up and ready to ask the user\n+// to send payment.\n+//\n+static QStringList savedPaymentRequests;\n+\n+//\n+// Sending to the server is done synchronously, at startup.\n+// If the server isn't already running, startup continues,\n+// and the items in savedPaymentRequest will be handled\n+// when uiReady() is called.\n+//\n+bool PaymentServer::ipcSendCommandLine()\n+{\n+    bool fResult = false;\n+\n+    const QStringList& args = QCoreApplication::arguments();\n+    for (int i = 1; i < args.size(); i++)\n+    {\n+        if (!args[i].startsWith(BITCOIN_IPC_PREFIX, Qt::CaseInsensitive))\n+            continue;\n+        savedPaymentRequests.append(args[i]);\n+    }\n+\n+    foreach (const QString& arg, savedPaymentRequests)\n+    {\n+        QLocalSocket* socket = new QLocalSocket();\n+        socket->connectToServer(ipcServerName(), QIODevice::WriteOnly);\n+        if (!socket->waitForConnected(BITCOIN_IPC_CONNECT_TIMEOUT))\n+            return false;\n+\n+        QByteArray block;\n+        QDataStream out(&block, QIODevice::WriteOnly);\n+        out.setVersion(QDataStream::Qt_4_0);\n+        out << arg;\n+        out.device()->seek(0);\n+        socket->write(block);\n+        socket->flush();\n+\n+        socket->waitForBytesWritten(BITCOIN_IPC_CONNECT_TIMEOUT);\n+        socket->disconnectFromServer();\n+        delete socket;\n+        fResult = true;\n+    }\n+    return fResult;\n+}\n+\n+PaymentServer::PaymentServer(QApplication* parent) : QObject(parent), saveURIs(true)\n+{\n+    // Install global event filter to catch QFileOpenEvents on the mac (sent when you click bitcoin: links)\n+    parent->installEventFilter(this);\n+\n+    QString name = ipcServerName();\n+\n+    // Clean up old socket leftover from a crash:\n+    QLocalServer::removeServer(name);\n+\n+    uriServer = new QLocalServer(this);\n+\n+    if (!uriServer->listen(name))\n+        qDebug() << tr(\"Cannot start bitcoin: click-to-pay handler\");\n+    else\n+        connect(uriServer, SIGNAL(newConnection()), this, SLOT(handleURIConnection()));\n+}\n+\n+bool PaymentServer::eventFilter(QObject *object, QEvent *event)\n+{\n+    // clicking on bitcoin: URLs creates FileOpen events on the Mac:\n+    if (event->type() == QEvent::FileOpen)\n+    {\n+        QFileOpenEvent* fileEvent = static_cast<QFileOpenEvent*>(event);\n+        if (!fileEvent->url().isEmpty())\n+        {\n+            if (saveURIs) // Before main window is ready:\n+                savedPaymentRequests.append(fileEvent->url().toString());\n+            else\n+                emit receivedURI(fileEvent->url().toString());\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+void PaymentServer::uiReady()\n+{\n+    saveURIs = false;\n+    foreach (const QString& s, savedPaymentRequests)\n+        emit receivedURI(s);\n+    savedPaymentRequests.clear();\n+}\n+\n+void PaymentServer::handleURIConnection()\n+{\n+    QLocalSocket *clientConnection = uriServer->nextPendingConnection();\n+\n+    while (clientConnection->bytesAvailable() < (int)sizeof(quint32))\n+        clientConnection->waitForReadyRead();\n+\n+    connect(clientConnection, SIGNAL(disconnected()),\n+            clientConnection, SLOT(deleteLater()));\n+\n+    QDataStream in(clientConnection);\n+    in.setVersion(QDataStream::Qt_4_0);\n+    if (clientConnection->bytesAvailable() < (int)sizeof(quint16)) {\n+        return;\n+    }\n+    QString message;\n+    in >> message;\n+\n+    if (saveURIs)\n+        savedPaymentRequests.append(message);\n+    else\n+        emit receivedURI(message);\n+}"
      },
      {
        "sha": "cfc48afb38f8743c0d01cd9928dd04929dff2b26",
        "filename": "src/qt/paymentserver.h",
        "status": "added",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8269a0953ee9ccbdc422433fc37184e60f94b178/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8269a0953ee9ccbdc422433fc37184e60f94b178/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=8269a0953ee9ccbdc422433fc37184e60f94b178",
        "patch": "@@ -0,0 +1,66 @@\n+#ifndef PAYMENTSERVER_H\n+#define PAYMENTSERVER_H\n+\n+//\n+// This class handles payment requests from clicking on\n+// bitcoin: URIs\n+//\n+// This is somewhat tricky, because we have to deal with\n+// the situation where the user clicks on a link during\n+// startup/initialization, when the splash-screen is up\n+// but the main window (and the Send Coins tab) is not.\n+//\n+// So, the strategy is:\n+//\n+// Create the server, and register the event handler,\n+// when the application is created. Save any URIs\n+// received at or during startup in a list.\n+//\n+// When startup is finished and the main window is\n+// show, a signal is sent to slot uiReady(), which\n+// emits a receivedURL() signal for any payment\n+// requests that happened during startup.\n+//\n+// After startup, receivedURL() happens as usual.\n+//\n+// This class has one more feature: a static\n+// method that finds URIs passed in the command line\n+// and, if a server is running in another process,\n+// sends them to the server.\n+//\n+#include <QObject>\n+#include <QString>\n+\n+class QApplication;\n+class QLocalServer;\n+\n+class PaymentServer : public QObject\n+{\n+    Q_OBJECT\n+private:\n+    bool saveURIs;\n+    QLocalServer* uriServer;\n+\n+public:\n+    // Returns true if there were URIs on the command line\n+    // which were successfully sent to an already-running\n+    // process.\n+    static bool ipcSendCommandLine();\n+\n+    PaymentServer(QApplication* parent);\n+\n+    bool eventFilter(QObject *object, QEvent *event);\n+\n+signals:\n+    void receivedURI(QString);\n+\n+public slots:\n+    // Signal this when the main window's UI is ready\n+    // to display payment requests to the user\n+    void uiReady();\n+\n+private slots:\n+    void handleURIConnection();\n+};\n+\n+#endif // PAYMENTSERVER_H"
      },
      {
        "sha": "2777fab852a57a4d12622d4cfd588c46c149779a",
        "filename": "src/qt/qtipcserver.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 165,
        "changes": 165,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f0fa79db290d5139c27409055b2035099afa6fd/src/qt/qtipcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f0fa79db290d5139c27409055b2035099afa6fd/src/qt/qtipcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qtipcserver.cpp?ref=2f0fa79db290d5139c27409055b2035099afa6fd",
        "patch": "@@ -1,165 +0,0 @@\n-// Copyright (c) 2009-2012 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <boost/version.hpp>\n-#if defined(WIN32) && BOOST_VERSION == 104900\n-#define BOOST_INTERPROCESS_HAS_WINDOWS_KERNEL_BOOTTIME\n-#define BOOST_INTERPROCESS_HAS_KERNEL_BOOTTIME\n-#endif\n-\n-#include \"qtipcserver.h\"\n-#include \"guiconstants.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-\n-#include <boost/algorithm/string/predicate.hpp>\n-#include <boost/date_time/posix_time/posix_time.hpp>\n-#include <boost/interprocess/ipc/message_queue.hpp>\n-#include <boost/version.hpp>\n-\n-#if defined(WIN32) && (!defined(BOOST_INTERPROCESS_HAS_WINDOWS_KERNEL_BOOTTIME) || !defined(BOOST_INTERPROCESS_HAS_KERNEL_BOOTTIME) || BOOST_VERSION < 104900)\n-#warning Compiling without BOOST_INTERPROCESS_HAS_WINDOWS_KERNEL_BOOTTIME and BOOST_INTERPROCESS_HAS_KERNEL_BOOTTIME uncommented in boost/interprocess/detail/tmp_dir_helpers.hpp or using a boost version before 1.49 may have unintended results see svn.boost.org/trac/boost/ticket/5392\n-#endif\n-\n-using namespace boost;\n-using namespace boost::interprocess;\n-using namespace boost::posix_time;\n-\n-// holds Bitcoin-Qt message queue name (initialized in bitcoin.cpp)\n-std::string strBitcoinURIQueueName;\n-\n-#if defined MAC_OSX || defined __FreeBSD__\n-// URI handling not implemented on OSX yet\n-\n-void ipcScanRelay(int argc, char *argv[]) { }\n-void ipcInit(int argc, char *argv[]) { }\n-\n-#else\n-\n-static void ipcThread2(void* pArg);\n-\n-static bool ipcScanCmd(int argc, char *argv[], bool fRelay)\n-{\n-    // Check for URI in argv\n-    bool fSent = false;\n-    for (int i = 1; i < argc; i++)\n-    {\n-        if (boost::algorithm::istarts_with(argv[i], \"bitcoin:\"))\n-        {\n-            const char *strURI = argv[i];\n-            try {\n-                boost::interprocess::message_queue mq(boost::interprocess::open_only, strBitcoinURIQueueName.c_str());\n-                if (mq.try_send(strURI, strlen(strURI), 0))\n-                    fSent = true;\n-                else if (fRelay)\n-                    break;\n-            }\n-            catch (boost::interprocess::interprocess_exception &ex) {\n-                // don't log the \"file not found\" exception, because that's normal for\n-                // the first start of the first instance\n-                if (ex.get_error_code() != boost::interprocess::not_found_error || !fRelay)\n-                {\n-                    printf(\"main() - boost interprocess exception #%d: %s\\n\", ex.get_error_code(), ex.what());\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-    return fSent;\n-}\n-\n-void ipcScanRelay(int argc, char *argv[])\n-{\n-    if (ipcScanCmd(argc, argv, true))\n-        exit(0);\n-}\n-\n-static void ipcThread(void* pArg)\n-{\n-    // Make this thread recognisable as the GUI-IPC thread\n-    RenameThread(\"bitcoin-gui-ipc\");\n-\n-    try\n-    {\n-        ipcThread2(pArg);\n-    }\n-    catch (std::exception& e) {\n-        PrintExceptionContinue(&e, \"ipcThread()\");\n-    } catch (...) {\n-        PrintExceptionContinue(NULL, \"ipcThread()\");\n-    }\n-    printf(\"ipcThread exited\\n\");\n-}\n-\n-static void ipcThread2(void* pArg)\n-{\n-    printf(\"ipcThread started\\n\");\n-\n-    message_queue* mq = (message_queue*)pArg;\n-    char buffer[MAX_URI_LENGTH + 1] = \"\";\n-    size_t nSize = 0;\n-    unsigned int nPriority = 0;\n-\n-    loop\n-    {\n-        ptime d = boost::posix_time::microsec_clock::universal_time() + millisec(100);\n-        if (mq->timed_receive(&buffer, sizeof(buffer), nSize, nPriority, d))\n-        {\n-            uiInterface.ThreadSafeHandleURI(std::string(buffer, nSize));\n-            Sleep(1000);\n-        }\n-\n-        if (fShutdown)\n-            break;\n-    }\n-\n-    // Remove message queue\n-    message_queue::remove(strBitcoinURIQueueName.c_str());\n-    // Cleanup allocated memory\n-    delete mq;\n-}\n-\n-void ipcInit(int argc, char *argv[])\n-{\n-    message_queue* mq = NULL;\n-    char buffer[MAX_URI_LENGTH + 1] = \"\";\n-    size_t nSize = 0;\n-    unsigned int nPriority = 0;\n-\n-    try {\n-        mq = new message_queue(open_or_create, strBitcoinURIQueueName.c_str(), 2, MAX_URI_LENGTH);\n-\n-        // Make sure we don't lose any bitcoin: URIs\n-        for (int i = 0; i < 2; i++)\n-        {\n-            ptime d = boost::posix_time::microsec_clock::universal_time() + millisec(1);\n-            if (mq->timed_receive(&buffer, sizeof(buffer), nSize, nPriority, d))\n-            {\n-                uiInterface.ThreadSafeHandleURI(std::string(buffer, nSize));\n-            }\n-            else\n-                break;\n-        }\n-\n-        // Make sure only one bitcoin instance is listening\n-        message_queue::remove(strBitcoinURIQueueName.c_str());\n-        delete mq;\n-\n-        mq = new message_queue(open_or_create, strBitcoinURIQueueName.c_str(), 2, MAX_URI_LENGTH);\n-    }\n-    catch (interprocess_exception &ex) {\n-        printf(\"ipcInit() - boost interprocess exception #%d: %s\\n\", ex.get_error_code(), ex.what());\n-        return;\n-    }\n-\n-    if (!NewThread(ipcThread, mq))\n-    {\n-        delete mq;\n-        return;\n-    }\n-\n-    ipcScanCmd(argc, argv, false);\n-}\n-\n-#endif"
      },
      {
        "sha": "f775f272c27c940e9c10ce8c66fda0d12cbd68b5",
        "filename": "src/qt/qtipcserver.h",
        "status": "removed",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f0fa79db290d5139c27409055b2035099afa6fd/src/qt/qtipcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f0fa79db290d5139c27409055b2035099afa6fd/src/qt/qtipcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qtipcserver.h?ref=2f0fa79db290d5139c27409055b2035099afa6fd",
        "patch": "@@ -1,16 +0,0 @@\n-#ifndef QTIPCSERVER_H\n-#define QTIPCSERVER_H\n-\n-#include <string>\n-\n-// Define Bitcoin-Qt message queue name for mainnet\n-#define BITCOINURI_QUEUE_NAME_MAINNET \"BitcoinURI\"\n-// Define Bitcoin-Qt message queue name for testnet\n-#define BITCOINURI_QUEUE_NAME_TESTNET \"BitcoinURI-testnet\"\n-\n-extern std::string strBitcoinURIQueueName;\n-\n-void ipcScanRelay(int argc, char *argv[]);\n-void ipcInit(int argc, char *argv[]);\n-\n-#endif // QTIPCSERVER_H"
      }
    ]
  }
]