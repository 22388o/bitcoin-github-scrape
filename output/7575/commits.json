[
  {
    "sha": "6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODUxMTA3YjNhNTJlYzg2OWU1ZTNhMmNiNGViMDJkNmM3NDNiOGU1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-02-15T04:13:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-15T15:54:38Z"
      },
      "message": "BIP9 Implementation\n\nInspired by former implementations by Eric Lombrozo and Rusty Russell, and\nbased on code by Jorge Timon.",
      "tree": {
        "sha": "352e161e37993cd6f68c11d25c99606492829130",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/352e161e37993cd6f68c11d25c99606492829130"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6a860796a44a2805a58391a009ba22752f64e32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6a860796a44a2805a58391a009ba22752f64e32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6a860796a44a2805a58391a009ba22752f64e32"
      }
    ],
    "stats": {
      "total": 364,
      "additions": 345,
      "deletions": 19
    },
    "files": [
      {
        "sha": "7765ea43edc1a59b3930d6a4f2a76b74760bdc2f",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5",
        "patch": "@@ -152,6 +152,7 @@ BITCOIN_CORE_H = \\\n   utilmoneystr.h \\\n   utiltime.h \\\n   validationinterface.h \\\n+  versionbits.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n   wallet/rpcwallet.h \\\n@@ -204,6 +205,7 @@ libbitcoin_server_a_SOURCES = \\\n   txdb.cpp \\\n   txmempool.cpp \\\n   validationinterface.cpp \\\n+  versionbits.cpp \\\n   $(BITCOIN_CORE_H)\n \n if ENABLE_ZMQ"
      },
      {
        "sha": "5b9605a80bdb3ab14237731be00e48d1fccd9245",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5",
        "patch": "@@ -14,8 +14,6 @@\n \n #include <vector>\n \n-#include <boost/foreach.hpp>\n-\n struct CDiskBlockPos\n {\n     int nFile;"
      },
      {
        "sha": "6501af78b3ae64d2b2b9cb39ef04333e48f54463",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5",
        "patch": "@@ -81,6 +81,8 @@ class CMainParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;\n+        consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n+        consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         /** \n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -162,6 +164,8 @@ class CTestNetParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = false;\n+        consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n+        consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -225,6 +229,8 @@ class CRegTestParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = true;\n+        consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n+        consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n \n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;"
      },
      {
        "sha": "d5039211a30bed7b9e31e7e097c8c93d0030c051",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5",
        "patch": "@@ -7,8 +7,28 @@\n #define BITCOIN_CONSENSUS_PARAMS_H\n \n #include \"uint256.h\"\n+#include <map>\n+#include <string>\n \n namespace Consensus {\n+\n+enum DeploymentPos\n+{\n+    MAX_VERSION_BITS_DEPLOYMENTS = 0,\n+};\n+\n+/**\n+ * Struct for each individual consensus rule change using BIP9.\n+ */\n+struct BIP9Deployment {\n+    /** Bit position to select the particular bit in nVersion. */\n+    int bit;\n+    /** Start MedianTime for version bits miner confirmation. Can be a date in the past */\n+    int64_t nStartTime;\n+    /** Timeout/expiry MedianTime for the deployment attempt. */\n+    int64_t nTimeout;\n+};\n+\n /**\n  * Parameters that influence chain consensus.\n  */\n@@ -22,6 +42,14 @@ struct Params {\n     /** Block height and hash at which BIP34 becomes active */\n     int BIP34Height;\n     uint256 BIP34Hash;\n+    /**\n+     * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargetting period,\n+     * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments.\n+     * Examples: 1916 for 95%, 1512 for testchains.\n+     */\n+    uint32_t nRuleChangeActivationThreshold;\n+    uint32_t nMinerConfirmationWindow;\n+    BIP9Deployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];\n     /** Proof of work parameters */\n     uint256 powLimit;\n     bool fPowAllowMinDifficultyBlocks;"
      },
      {
        "sha": "a39256c6e3220aeeb2224e827678751364600c5b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5",
        "patch": "@@ -466,7 +466,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n     strUsage += HelpMessageOpt(\"-blockprioritysize=<n>\", strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE));\n     if (showDebug)\n-        strUsage += HelpMessageOpt(\"-blockversion=<n>\", strprintf(\"Override block version to test forking scenarios (default: %d)\", (int)CBlock::CURRENT_VERSION));\n+        strUsage += HelpMessageOpt(\"-blockversion=<n>\", \"Override block version to test forking scenarios\");\n \n     strUsage += HelpMessageGroup(_(\"RPC server options:\"));\n     strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));"
      },
      {
        "sha": "45e58818977d3e9b45652cfad27f454cd892b300",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 74,
        "deletions": 6,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5",
        "patch": "@@ -34,6 +34,7 @@\n #include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n+#include \"versionbits.h\"\n \n #include <sstream>\n \n@@ -2083,6 +2084,51 @@ void PartitionCheck(bool (*initialDownloadCheck)(), CCriticalSection& cs, const\n     }\n }\n \n+// Protected by cs_main\n+static VersionBitsCache versionbitscache;\n+\n+int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    LOCK(cs_main);\n+    int32_t nVersion = VERSIONBITS_TOP_BITS;\n+\n+    for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n+        ThresholdState state = VersionBitsState(pindexPrev, params, (Consensus::DeploymentPos)i, versionbitscache);\n+        if (state == THRESHOLD_LOCKED_IN || state == THRESHOLD_STARTED) {\n+            nVersion |= VersionBitsMask(params, (Consensus::DeploymentPos)i);\n+        }\n+    }\n+\n+    return nVersion;\n+}\n+\n+/**\n+ * Threshold condition checker that triggers when unknown versionbits are seen on the network.\n+ */\n+class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n+{\n+private:\n+    int bit;\n+\n+public:\n+    WarningBitsConditionChecker(int bitIn) : bit(bitIn) {}\n+\n+    int64_t BeginTime(const Consensus::Params& params) const { return 0; }\n+    int64_t EndTime(const Consensus::Params& params) const { return std::numeric_limits<int64_t>::max(); }\n+    int Period(const Consensus::Params& params) const { return params.nMinerConfirmationWindow; }\n+    int Threshold(const Consensus::Params& params) const { return params.nRuleChangeActivationThreshold; }\n+\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const\n+    {\n+        return ((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) &&\n+               ((pindex->nVersion >> bit) & 1) != 0 &&\n+               ((ComputeBlockVersion(pindex->pprev, params) >> bit) & 1) == 0;\n+    }\n+};\n+\n+// Protected by cs_main\n+static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS];\n+\n static int64_t nTimeCheck = 0;\n static int64_t nTimeForks = 0;\n static int64_t nTimeVerify = 0;\n@@ -2452,24 +2498,42 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n \n     // Check the version of the last 100 blocks to see if we need to upgrade:\n     static bool fWarned = false;\n-    if (!IsInitialBlockDownload() && !fWarned)\n+    if (!IsInitialBlockDownload())\n     {\n         int nUpgraded = 0;\n         const CBlockIndex* pindex = chainActive.Tip();\n+        for (int bit = 0; bit < VERSIONBITS_NUM_BITS; bit++) {\n+            WarningBitsConditionChecker checker(bit);\n+            ThresholdState state = checker.GetStateFor(pindex, chainParams.GetConsensus(), warningcache[bit]);\n+            if (state == THRESHOLD_ACTIVE || state == THRESHOLD_LOCKED_IN) {\n+                if (state == THRESHOLD_ACTIVE) {\n+                    strMiscWarning = strprintf(_(\"Warning: unknown new rules activated (versionbit %i)\"), bit);\n+                    if (!fWarned) {\n+                        CAlert::Notify(strMiscWarning, true);\n+                        fWarned = true;\n+                    }\n+                } else {\n+                    LogPrintf(\"%s: unknown new rules are about to activate (versionbit %i)\\n\", __func__, bit);\n+                }\n+            }\n+        }\n         for (int i = 0; i < 100 && pindex != NULL; i++)\n         {\n-            if (pindex->nVersion > CBlock::CURRENT_VERSION)\n+            int32_t nExpectedVersion = ComputeBlockVersion(pindex->pprev, chainParams.GetConsensus());\n+            if (pindex->nVersion > VERSIONBITS_LAST_OLD_BLOCK_VERSION && (pindex->nVersion & ~nExpectedVersion) != 0)\n                 ++nUpgraded;\n             pindex = pindex->pprev;\n         }\n         if (nUpgraded > 0)\n-            LogPrintf(\"%s: %d of last 100 blocks above version %d\\n\", __func__, nUpgraded, (int)CBlock::CURRENT_VERSION);\n+            LogPrintf(\"%s: %d of last 100 blocks have unexpected version\\n\", __func__, nUpgraded);\n         if (nUpgraded > 100/2)\n         {\n             // strMiscWarning is read by GetWarnings(), called by Qt and the JSON-RPC code to warn the user:\n-            strMiscWarning = _(\"Warning: This version is obsolete; upgrade required!\");\n-            CAlert::Notify(strMiscWarning, true);\n-            fWarned = true;\n+            strMiscWarning = _(\"Warning: Unknown block versions being mined! It's possible unknown rules are in effect\");\n+            if (!fWarned) {\n+                CAlert::Notify(strMiscWarning, true);\n+                fWarned = true;\n+            }\n         }\n     }\n }\n@@ -3763,6 +3827,10 @@ void UnloadBlockIndex()\n     setDirtyFileInfo.clear();\n     mapNodeState.clear();\n     recentRejects.reset(NULL);\n+    versionbitscache.Clear();\n+    for (int b = 0; b < VERSIONBITS_NUM_BITS; b++) {\n+        warningcache[b].clear();\n+    }\n \n     BOOST_FOREACH(BlockMap::value_type& entry, mapBlockIndex) {\n         delete entry.second;"
      },
      {
        "sha": "7670bb74d357c8be81f1831c513f75ded159a251",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5",
        "patch": "@@ -537,6 +537,11 @@ extern CBlockTreeDB *pblocktree;\n  */\n int GetSpendHeight(const CCoinsViewCache& inputs);\n \n+/**\n+ * Determine what nVersion a new block should use.\n+ */\n+int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n+\n /** Reject codes greater or equal to this can be returned by AcceptToMemPool\n  * for transactions, to signal internal conditions. They cannot and should not\n  * be sent over the P2P network."
      },
      {
        "sha": "ef8fd4db43d0ed84e7b4183d9f3d64d5fc510c63",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5",
        "patch": "@@ -79,11 +79,6 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         return NULL;\n     CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n \n-    // -regtest only: allow overriding block.nVersion with\n-    // -blockversion=N to test forking scenarios\n-    if (chainparams.MineBlocksOnDemand())\n-        pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n-\n     // Create coinbase tx\n     CMutableTransaction txNew;\n     txNew.vin.resize(1);\n@@ -137,6 +132,12 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         pblock->nTime = GetAdjustedTime();\n         const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n \n+        pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());\n+        // -regtest only: allow overriding block.nVersion with\n+        // -blockversion=N to test forking scenarios\n+        if (chainparams.MineBlocksOnDemand())\n+            pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n+\n         int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n                                 ? nMedianTimePast\n                                 : pblock->GetBlockTime();"
      },
      {
        "sha": "42276b2bc26bcbdb046a0d760a51c2afff2553bf",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5",
        "patch": "@@ -21,7 +21,6 @@ class CBlockHeader\n {\n public:\n     // header\n-    static const int32_t CURRENT_VERSION=4;\n     int32_t nVersion;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;\n@@ -49,7 +48,7 @@ class CBlockHeader\n \n     void SetNull()\n     {\n-        nVersion = CBlockHeader::CURRENT_VERSION;\n+        nVersion = 0;\n         hashPrevBlock.SetNull();\n         hashMerkleRoot.SetNull();\n         nTime = 0;"
      },
      {
        "sha": "ab6485081ceed885a2909e3889fe90dba11a5c3d",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 3,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5",
        "patch": "@@ -247,13 +247,40 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // subsidy changing\n     int nHeight = chainActive.Height();\n-    chainActive.Tip()->nHeight = 209999;\n+    // Create an actual 209999-long block chain (without valid blocks).\n+    while (chainActive.Tip()->nHeight < 209999) {\n+        CBlockIndex* prev = chainActive.Tip();\n+        CBlockIndex* next = new CBlockIndex();\n+        next->phashBlock = new uint256(GetRandHash());\n+        pcoinsTip->SetBestBlock(next->GetBlockHash());\n+        next->pprev = prev;\n+        next->nHeight = prev->nHeight + 1;\n+        next->BuildSkip();\n+        chainActive.SetTip(next);\n+    }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n-    chainActive.Tip()->nHeight = 210000;\n+    // Extend to a 210000-long block chain.\n+    while (chainActive.Tip()->nHeight < 210000) {\n+        CBlockIndex* prev = chainActive.Tip();\n+        CBlockIndex* next = new CBlockIndex();\n+        next->phashBlock = new uint256(GetRandHash());\n+        pcoinsTip->SetBestBlock(next->GetBlockHash());\n+        next->pprev = prev;\n+        next->nHeight = prev->nHeight + 1;\n+        next->BuildSkip();\n+        chainActive.SetTip(next);\n+    }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n-    chainActive.Tip()->nHeight = nHeight;\n+    // Delete the dummy blocks again.\n+    while (chainActive.Tip()->nHeight > nHeight) {\n+        CBlockIndex* del = chainActive.Tip();\n+        chainActive.SetTip(del->pprev);\n+        pcoinsTip->SetBestBlock(del->pprev->GetBlockHash());\n+        delete del->phashBlock;\n+        delete del;\n+    }\n \n     // non-final txs in mempool\n     SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);"
      },
      {
        "sha": "fbb60c0fc598eca274bed0f386f157bfacdc238e",
        "filename": "src/versionbits.cpp",
        "status": "added",
        "additions": 133,
        "deletions": 0,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5",
        "patch": "@@ -0,0 +1,133 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"versionbits.h\"\n+\n+ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const\n+{\n+    int nPeriod = Period(params);\n+    int nThreshold = Threshold(params);\n+    int64_t nTimeStart = BeginTime(params);\n+    int64_t nTimeTimeout = EndTime(params);\n+\n+    // A block's state is always the same as that of the first of its period, so it is computed based on a pindexPrev whose height equals a multiple of nPeriod - 1.\n+    if (pindexPrev != NULL) {\n+        pindexPrev = pindexPrev->GetAncestor(pindexPrev->nHeight - ((pindexPrev->nHeight + 1) % nPeriod));\n+    }\n+\n+    // Walk backwards in steps of nPeriod to find a pindexPrev whose information is known\n+    std::vector<const CBlockIndex*> vToCompute;\n+    while (cache.count(pindexPrev) == 0) {\n+        if (pindexPrev == NULL) {\n+            // The genesis block is by definition defined.\n+            cache[pindexPrev] = THRESHOLD_DEFINED;\n+            break;\n+        }\n+        if (pindexPrev->GetMedianTimePast() < nTimeStart) {\n+            // Optimizaton: don't recompute down further, as we know every earlier block will be before the start time\n+            cache[pindexPrev] = THRESHOLD_DEFINED;\n+            break;\n+        }\n+        vToCompute.push_back(pindexPrev);\n+        pindexPrev = pindexPrev->GetAncestor(pindexPrev->nHeight - nPeriod);\n+    }\n+\n+    // At this point, cache[pindexPrev] is known\n+    assert(cache.count(pindexPrev));\n+    ThresholdState state = cache[pindexPrev];\n+\n+    // Now walk forward and compute the state of descendants of pindexPrev\n+    while (!vToCompute.empty()) {\n+        ThresholdState stateNext = state;\n+        pindexPrev = vToCompute.back();\n+        vToCompute.pop_back();\n+\n+        switch (state) {\n+            case THRESHOLD_DEFINED: {\n+                if (pindexPrev->GetMedianTimePast() >= nTimeTimeout) {\n+                    stateNext = THRESHOLD_FAILED;\n+                } else if (pindexPrev->GetMedianTimePast() >= nTimeStart) {\n+                    stateNext = THRESHOLD_STARTED;\n+                }\n+                break;\n+            }\n+            case THRESHOLD_STARTED: {\n+                if (pindexPrev->GetMedianTimePast() >= nTimeTimeout) {\n+                    stateNext = THRESHOLD_FAILED;\n+                    break;\n+                }\n+                // We need to count\n+                const CBlockIndex* pindexCount = pindexPrev;\n+                int count = 0;\n+                for (int i = 0; i < nPeriod; i++) {\n+                    if (Condition(pindexCount, params)) {\n+                        count++;\n+                    }\n+                    pindexCount = pindexCount->pprev;\n+                }\n+                if (count >= nThreshold) {\n+                    stateNext = THRESHOLD_LOCKED_IN;\n+                }\n+                break;\n+            }\n+            case THRESHOLD_LOCKED_IN: {\n+                // Always progresses into ACTIVE.\n+                stateNext = THRESHOLD_ACTIVE;\n+                break;\n+            }\n+            case THRESHOLD_FAILED:\n+            case THRESHOLD_ACTIVE: {\n+                // Nothing happens, these are terminal states.\n+                break;\n+            }\n+        }\n+        cache[pindexPrev] = state = stateNext;\n+    }\n+\n+    return state;\n+}\n+\n+namespace\n+{\n+/**\n+ * Class to implement versionbits logic.\n+ */\n+class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n+private:\n+    const Consensus::DeploymentPos id;\n+\n+protected:\n+    int64_t BeginTime(const Consensus::Params& params) const { return params.vDeployments[id].nStartTime; }\n+    int64_t EndTime(const Consensus::Params& params) const { return params.vDeployments[id].nTimeout; }\n+    int Period(const Consensus::Params& params) const { return params.nMinerConfirmationWindow; }\n+    int Threshold(const Consensus::Params& params) const { return params.nRuleChangeActivationThreshold; }\n+\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const\n+    {\n+        return (((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) && (pindex->nVersion & Mask(params)) != 0);\n+    }\n+\n+public:\n+    VersionBitsConditionChecker(Consensus::DeploymentPos id_) : id(id_) {}\n+    uint32_t Mask(const Consensus::Params& params) const { return ((uint32_t)1) << params.vDeployments[id].bit; }\n+};\n+\n+}\n+\n+ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n+{\n+    return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, cache.caches[pos]);\n+}\n+\n+uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos)\n+{\n+    return VersionBitsConditionChecker(pos).Mask(params);\n+}\n+\n+void VersionBitsCache::Clear()\n+{\n+    for (unsigned int d = 0; d < Consensus::MAX_VERSION_BITS_DEPLOYMENTS; d++) {\n+        caches[d].clear();\n+    }\n+}"
      },
      {
        "sha": "04f47382727968b0014164b91f0930d4013bd7b3",
        "filename": "src/versionbits.h",
        "status": "added",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5",
        "patch": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_VERSIONBITS\n+#define BITCOIN_CONSENSUS_VERSIONBITS\n+\n+#include \"chain.h\"\n+#include <map>\n+\n+/** What block version to use for new blocks (pre versionbits) */\n+static const int32_t VERSIONBITS_LAST_OLD_BLOCK_VERSION = 4;\n+/** What bits to set in version for versionbits blocks */\n+static const int32_t VERSIONBITS_TOP_BITS = 0x20000000UL;\n+/** What bitmask determines whether versionbits is in use */\n+static const int32_t VERSIONBITS_TOP_MASK = 0xE0000000UL;\n+/** Total bits available for versionbits */\n+static const int32_t VERSIONBITS_NUM_BITS = 29;\n+\n+enum ThresholdState {\n+    THRESHOLD_DEFINED,\n+    THRESHOLD_STARTED,\n+    THRESHOLD_LOCKED_IN,\n+    THRESHOLD_ACTIVE,\n+    THRESHOLD_FAILED,\n+};\n+\n+// A map that gives the state for blocks whose height is a multiple of Period().\n+// The map is indexed by the block's parent, however, so all keys in the map\n+// will either be NULL or a block with (height + 1) % Period() == 0.\n+typedef std::map<const CBlockIndex*, ThresholdState> ThresholdConditionCache;\n+\n+/**\n+ * Abstract class that implements BIP9-style threshold logic, and caches results.\n+ */\n+class AbstractThresholdConditionChecker {\n+protected:\n+    virtual bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const =0;\n+    virtual int64_t BeginTime(const Consensus::Params& params) const =0;\n+    virtual int64_t EndTime(const Consensus::Params& params) const =0;\n+    virtual int Period(const Consensus::Params& params) const =0;\n+    virtual int Threshold(const Consensus::Params& params) const =0;\n+\n+public:\n+    // Note that the function below takes a pindexPrev as input: they compute information for block B based on its parent.\n+    ThresholdState GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n+};\n+\n+struct VersionBitsCache\n+{\n+    ThresholdConditionCache caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS];\n+\n+    void Clear();\n+};\n+\n+ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n+uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "732e774c0655a3a6bcb3f2f02c88b37ea1bd3e68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzJlNzc0YzA2NTVhM2E2YmNiM2YyZjAyYzg4YjM3ZWExYmQzZTY4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-02-20T01:57:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-15T15:54:38Z"
      },
      "message": "Versionbits tests",
      "tree": {
        "sha": "6c3038bd93a9d7c492dea08e83c8baab86f4788a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c3038bd93a9d7c492dea08e83c8baab86f4788a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/732e774c0655a3a6bcb3f2f02c88b37ea1bd3e68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/732e774c0655a3a6bcb3f2f02c88b37ea1bd3e68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/732e774c0655a3a6bcb3f2f02c88b37ea1bd3e68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/732e774c0655a3a6bcb3f2f02c88b37ea1bd3e68/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6851107b3a52ec869e5e3a2cb4eb02d6c743b8e5"
      }
    ],
    "stats": {
      "total": 186,
      "additions": 186,
      "deletions": 0
    },
    "files": [
      {
        "sha": "57f9ac50e0a01cdda8e4e07dbb52577793717607",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/732e774c0655a3a6bcb3f2f02c88b37ea1bd3e68/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/732e774c0655a3a6bcb3f2f02c88b37ea1bd3e68/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=732e774c0655a3a6bcb3f2f02c88b37ea1bd3e68",
        "patch": "@@ -83,6 +83,7 @@ BITCOIN_TESTS =\\\n   test/timedata_tests.cpp \\\n   test/transaction_tests.cpp \\\n   test/txvalidationcache_tests.cpp \\\n+  test/versionbits_tests.cpp \\\n   test/uint256_tests.cpp \\\n   test/univalue_tests.cpp \\\n   test/util_tests.cpp"
      },
      {
        "sha": "9de8461d847be4fb1c089089bb246c115c0b1a76",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "added",
        "additions": 185,
        "deletions": 0,
        "changes": 185,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/732e774c0655a3a6bcb3f2f02c88b37ea1bd3e68/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/732e774c0655a3a6bcb3f2f02c88b37ea1bd3e68/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=732e774c0655a3a6bcb3f2f02c88b37ea1bd3e68",
        "patch": "@@ -0,0 +1,185 @@\n+// Copyright (c) 2014-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"chain.h\"\n+#include \"random.h\"\n+#include \"versionbits.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+/* Define a virtual block time, one block per 10 minutes after Nov 14 2014, 0:55:36am */\n+int32_t TestTime(int nHeight) { return 1415926536 + 600 * nHeight; }\n+\n+static const Consensus::Params paramsDummy = Consensus::Params();\n+\n+class TestConditionChecker : public AbstractThresholdConditionChecker\n+{\n+private:\n+    mutable ThresholdConditionCache cache;\n+\n+public:\n+    int64_t BeginTime(const Consensus::Params& params) const { return TestTime(10000); }\n+    int64_t EndTime(const Consensus::Params& params) const { return TestTime(20000); }\n+    int Period(const Consensus::Params& params) const { return 1000; }\n+    int Threshold(const Consensus::Params& params) const { return 900; }\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const { return (pindex->nVersion & 0x100); }\n+\n+    ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, paramsDummy, cache); }\n+};\n+\n+#define CHECKERS 6\n+\n+class VersionBitsTester\n+{\n+    // A fake blockchain\n+    std::vector<CBlockIndex*> vpblock;\n+\n+    // 6 independent checkers for the same bit.\n+    // The first one performs all checks, the second only 50%, the third only 25%, etc...\n+    // This is to test whether lack of cached information leads to the same results.\n+    TestConditionChecker checker[CHECKERS];\n+\n+    // Test counter (to identify failures)\n+    int num;\n+\n+public:\n+    VersionBitsTester() : num(0) {}\n+\n+    VersionBitsTester& Reset() {\n+        for (unsigned int i = 0; i < vpblock.size(); i++) {\n+            delete vpblock[i];\n+        }\n+        for (unsigned int  i = 0; i < CHECKERS; i++) {\n+            checker[i] = TestConditionChecker();\n+        }\n+        vpblock.clear();\n+        return *this;\n+    }\n+\n+    ~VersionBitsTester() {\n+         Reset();\n+    }\n+\n+    VersionBitsTester& Mine(unsigned int height, int32_t nTime, int32_t nVersion) {\n+        while (vpblock.size() < height) {\n+            CBlockIndex* pindex = new CBlockIndex();\n+            pindex->nHeight = vpblock.size();\n+            pindex->pprev = vpblock.size() > 0 ? vpblock.back() : NULL;\n+            pindex->nTime = nTime;\n+            pindex->nVersion = nVersion;\n+            pindex->BuildSkip();\n+            vpblock.push_back(pindex);\n+        }\n+        return *this;\n+    }\n+\n+    VersionBitsTester& TestDefined() {\n+        for (int i = 0; i < CHECKERS; i++) {\n+            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_DEFINED, strprintf(\"Test %i for DEFINED\", num));\n+            }\n+        }\n+        num++;\n+        return *this;\n+    }\n+\n+    VersionBitsTester& TestStarted() {\n+        for (int i = 0; i < CHECKERS; i++) {\n+            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_STARTED, strprintf(\"Test %i for STARTED\", num));\n+            }\n+        }\n+        num++;\n+        return *this;\n+    }\n+\n+    VersionBitsTester& TestLockedIn() {\n+        for (int i = 0; i < CHECKERS; i++) {\n+            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_LOCKED_IN, strprintf(\"Test %i for LOCKED_IN\", num));\n+            }\n+        }\n+        num++;\n+        return *this;\n+    }\n+\n+    VersionBitsTester& TestActive() {\n+        for (int i = 0; i < CHECKERS; i++) {\n+            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_ACTIVE, strprintf(\"Test %i for ACTIVE\", num));\n+            }\n+        }\n+        num++;\n+        return *this;\n+    }\n+\n+    VersionBitsTester& TestFailed() {\n+        for (int i = 0; i < CHECKERS; i++) {\n+            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_FAILED, strprintf(\"Test %i for FAILED\", num));\n+            }\n+        }\n+        num++;\n+        return *this;\n+    }\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(versionbits_tests, TestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(versionbits_test)\n+{\n+    for (int i = 0; i < 64; i++) {\n+        // DEFINED -> FAILED\n+        VersionBitsTester().TestDefined()\n+                           .Mine(1, TestTime(1), 0x100).TestDefined()\n+                           .Mine(11, TestTime(11), 0x100).TestDefined()\n+                           .Mine(989, TestTime(989), 0x100).TestDefined()\n+                           .Mine(999, TestTime(20000), 0x100).TestDefined()\n+                           .Mine(1000, TestTime(20000), 0x100).TestFailed()\n+                           .Mine(1999, TestTime(30001), 0x100).TestFailed()\n+                           .Mine(2000, TestTime(30002), 0x100).TestFailed()\n+                           .Mine(2001, TestTime(30003), 0x100).TestFailed()\n+                           .Mine(2999, TestTime(30004), 0x100).TestFailed()\n+                           .Mine(3000, TestTime(30005), 0x100).TestFailed()\n+\n+        // DEFINED -> STARTED -> FAILED\n+                           .Reset().TestDefined()\n+                           .Mine(1, TestTime(1), 0).TestDefined()\n+                           .Mine(1000, TestTime(10000) - 1, 0x100).TestDefined() // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x100).TestStarted() // So that's what happens the next period\n+                           .Mine(2051, TestTime(10010), 0).TestStarted() // 51 old blocks\n+                           .Mine(2950, TestTime(10020), 0x100).TestStarted() // 899 new blocks\n+                           .Mine(3000, TestTime(20000), 0).TestFailed() // 50 old blocks (so 899 out of the past 1000)\n+                           .Mine(4000, TestTime(20010), 0x100).TestFailed()\n+\n+        // DEFINED -> STARTED -> FAILED while threshold reached\n+                           .Reset().TestDefined()\n+                           .Mine(1, TestTime(1), 0).TestDefined()\n+                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined() // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x101).TestStarted() // So that's what happens the next period\n+                           .Mine(2999, TestTime(30000), 0x100).TestStarted() // 999 new blocks\n+                           .Mine(3000, TestTime(30000), 0x100).TestFailed() // 1 new block (so 1000 out of the past 1000 are new)\n+                           .Mine(3999, TestTime(30001), 0).TestFailed()\n+                           .Mine(4000, TestTime(30002), 0).TestFailed()\n+                           .Mine(14333, TestTime(30003), 0).TestFailed()\n+                           .Mine(24000, TestTime(40000), 0).TestFailed()\n+\n+        // DEFINED -> STARTED -> LOCKEDIN at the last minute -> ACTIVE\n+                           .Reset().TestDefined()\n+                           .Mine(1, TestTime(1), 0).TestDefined()\n+                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined() // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x101).TestStarted() // So that's what happens the next period\n+                           .Mine(2050, TestTime(10010), 0x200).TestStarted() // 50 old blocks\n+                           .Mine(2950, TestTime(10020), 0x100).TestStarted() // 900 new blocks\n+                           .Mine(2999, TestTime(19999), 0x200).TestStarted() // 49 old blocks\n+                           .Mine(3000, TestTime(29999), 0x200).TestLockedIn() // 1 old block (so 900 out of the past 1000)\n+                           .Mine(3999, TestTime(30001), 0).TestLockedIn()\n+                           .Mine(4000, TestTime(30002), 0).TestActive()\n+                           .Mine(14333, TestTime(30003), 0).TestActive()\n+                           .Mine(24000, TestTime(40000), 0).TestActive();\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "d23f6c6a0d2dc8a3f5f159faf7a40157259a8f8f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjNmNmM2YTBkMmRjOGEzZjVmMTU5ZmFmN2E0MDE1NzI1OWE4Zjhm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-03T20:00:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-15T15:54:38Z"
      },
      "message": "Softfork status report in RPC",
      "tree": {
        "sha": "54baf5b4265ddf8c98dad695660069d9210c0009",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54baf5b4265ddf8c98dad695660069d9210c0009"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d23f6c6a0d2dc8a3f5f159faf7a40157259a8f8f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d23f6c6a0d2dc8a3f5f159faf7a40157259a8f8f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d23f6c6a0d2dc8a3f5f159faf7a40157259a8f8f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d23f6c6a0d2dc8a3f5f159faf7a40157259a8f8f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "732e774c0655a3a6bcb3f2f02c88b37ea1bd3e68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/732e774c0655a3a6bcb3f2f02c88b37ea1bd3e68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/732e774c0655a3a6bcb3f2f02c88b37ea1bd3e68"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 31,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e4567a8974c8402e5b27aea25d21ea88bcaf08b9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d23f6c6a0d2dc8a3f5f159faf7a40157259a8f8f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d23f6c6a0d2dc8a3f5f159faf7a40157259a8f8f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d23f6c6a0d2dc8a3f5f159faf7a40157259a8f8f",
        "patch": "@@ -5859,7 +5859,11 @@ bool SendMessages(CNode* pto)\n      return strprintf(\"CBlockFileInfo(blocks=%u, size=%u, heights=%u...%u, time=%s...%s)\", nBlocks, nSize, nHeightFirst, nHeightLast, DateTimeStrFormat(\"%Y-%m-%d\", nTimeFirst), DateTimeStrFormat(\"%Y-%m-%d\", nTimeLast));\n  }\n \n-\n+ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos)\n+{\n+    LOCK(cs_main);\n+    return VersionBitsState(chainActive.Tip(), params, pos, versionbitscache);\n+}\n \n class CMainCleanup\n {"
      },
      {
        "sha": "b66ad53c8a7a107d405b2e0c3af94ef785b87f42",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d23f6c6a0d2dc8a3f5f159faf7a40157259a8f8f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d23f6c6a0d2dc8a3f5f159faf7a40157259a8f8f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d23f6c6a0d2dc8a3f5f159faf7a40157259a8f8f",
        "patch": "@@ -16,6 +16,7 @@\n #include \"net.h\"\n #include \"script/script_error.h\"\n #include \"sync.h\"\n+#include \"versionbits.h\"\n \n #include <algorithm>\n #include <exception>\n@@ -289,6 +290,9 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);\n \n+/** Get the BIP9 state for a given deployment at the current tip. */\n+ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n struct CNodeStateStats {\n     int nMisbehavior;\n     int nSyncHeight;"
      },
      {
        "sha": "a110dff0d1d4aed43ac129fcca7b7f4d82ecd2e8",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d23f6c6a0d2dc8a3f5f159faf7a40157259a8f8f/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d23f6c6a0d2dc8a3f5f159faf7a40157259a8f8f/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=d23f6c6a0d2dc8a3f5f159faf7a40157259a8f8f",
        "patch": "@@ -604,6 +604,20 @@ static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex*\n     return rv;\n }\n \n+static UniValue BIP9SoftForkDesc(const std::string& name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n+{\n+    UniValue rv(UniValue::VOBJ);\n+    rv.push_back(Pair(\"id\", name));\n+    switch (VersionBitsTipState(consensusParams, id)) {\n+    case THRESHOLD_DEFINED: rv.push_back(Pair(\"status\", \"defined\")); break;\n+    case THRESHOLD_STARTED: rv.push_back(Pair(\"status\", \"started\")); break;\n+    case THRESHOLD_LOCKED_IN: rv.push_back(Pair(\"status\", \"locked_in\")); break;\n+    case THRESHOLD_ACTIVE: rv.push_back(Pair(\"status\", \"active\")); break;\n+    case THRESHOLD_FAILED: rv.push_back(Pair(\"status\", \"failed\")); break;\n+    }\n+    return rv;\n+}\n+\n UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -634,6 +648,12 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n             \"        },\\n\"\n             \"        \\\"reject\\\": { ... }      (object) progress toward rejecting pre-softfork blocks (same fields as \\\"enforce\\\")\\n\"\n             \"     }, ...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"bip9_softforks\\\": [       (array) status of BIP9 softforks in progress\\n\"\n+            \"     {\\n\"\n+            \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of the softfork\\n\"\n+            \"        \\\"status\\\": \\\"xxxx\\\",    (string) one of \\\"defined\\\", \\\"started\\\", \\\"lockedin\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n+            \"     }\\n\"\n             \"  ]\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n@@ -657,10 +677,12 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     CBlockIndex* tip = chainActive.Tip();\n     UniValue softforks(UniValue::VARR);\n+    UniValue bip9_softforks(UniValue::VARR);\n     softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n     obj.push_back(Pair(\"softforks\",             softforks));\n+    obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n \n     if (fPruneMode)\n     {"
      }
    ]
  },
  {
    "sha": "532cbb22b57f25c89df30588185b0db659871c86",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzJjYmIyMmI1N2YyNWM4OWRmMzA1ODgxODViMGRiNjU5ODcxYzg2",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-03-09T21:00:53Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-15T15:54:39Z"
      },
      "message": "Add testing of ComputeBlockVersion",
      "tree": {
        "sha": "003e038885544875343f1e1fc6ee3366765399ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/003e038885544875343f1e1fc6ee3366765399ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/532cbb22b57f25c89df30588185b0db659871c86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/532cbb22b57f25c89df30588185b0db659871c86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/532cbb22b57f25c89df30588185b0db659871c86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/532cbb22b57f25c89df30588185b0db659871c86/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d23f6c6a0d2dc8a3f5f159faf7a40157259a8f8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d23f6c6a0d2dc8a3f5f159faf7a40157259a8f8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d23f6c6a0d2dc8a3f5f159faf7a40157259a8f8f"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 120,
      "deletions": 1
    },
    "files": [
      {
        "sha": "35e090a0b3b3ef6e34996fed4fff43101e49292d",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/532cbb22b57f25c89df30588185b0db659871c86/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/532cbb22b57f25c89df30588185b0db659871c86/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=532cbb22b57f25c89df30588185b0db659871c86",
        "patch": "@@ -83,6 +83,9 @@ class CMainParams : public CChainParams {\n         consensus.fPowNoRetargeting = false;\n         consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n         /** \n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -166,6 +169,9 @@ class CTestNetParams : public CChainParams {\n         consensus.fPowNoRetargeting = false;\n         consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -231,6 +237,9 @@ class CRegTestParams : public CChainParams {\n         consensus.fPowNoRetargeting = true;\n         consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 999999999999ULL;\n \n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;"
      },
      {
        "sha": "7c3a8e84c3d3537dd161b79db5c7be6d60a729a5",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/532cbb22b57f25c89df30588185b0db659871c86/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/532cbb22b57f25c89df30588185b0db659871c86/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=532cbb22b57f25c89df30588185b0db659871c86",
        "patch": "@@ -14,7 +14,8 @@ namespace Consensus {\n \n enum DeploymentPos\n {\n-    MAX_VERSION_BITS_DEPLOYMENTS = 0,\n+    DEPLOYMENT_TESTDUMMY,\n+    MAX_VERSION_BITS_DEPLOYMENTS\n };\n \n /**"
      },
      {
        "sha": "63dc4726bc8ea00d580943daabe1564771987295",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 109,
        "deletions": 0,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/532cbb22b57f25c89df30588185b0db659871c86/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/532cbb22b57f25c89df30588185b0db659871c86/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=532cbb22b57f25c89df30588185b0db659871c86",
        "patch": "@@ -6,6 +6,9 @@\n #include \"random.h\"\n #include \"versionbits.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+#include \"consensus/params.h\"\n \n #include <boost/test/unit_test.hpp>\n \n@@ -124,6 +127,8 @@ class VersionBitsTester\n         num++;\n         return *this;\n     }\n+\n+    CBlockIndex * Tip() { return vpblock.size() ? vpblock.back() : NULL; }\n };\n \n BOOST_FIXTURE_TEST_SUITE(versionbits_tests, TestingSetup)\n@@ -182,4 +187,108 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n+{\n+    // Check that ComputeBlockVersion will set the appropriate bit correctly\n+    // on mainnet.\n+    const Consensus::Params &mainnetParams = Params(CBaseChainParams::MAIN).GetConsensus();\n+\n+    // Use the TESTDUMMY deployment for testing purposes.\n+    int64_t bit = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit;\n+    int64_t nStartTime = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime;\n+    int64_t nTimeout = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout;\n+\n+    assert(nStartTime < nTimeout);\n+\n+    // In the first chain, test that the bit is set by CBV until it has failed.\n+    // In the second chain, test the bit is set by CBV while STARTED and\n+    // LOCKED-IN, and then no longer set while ACTIVE.\n+    VersionBitsTester firstChain, secondChain;\n+\n+    // Start generating blocks before nStartTime\n+    int64_t nTime = nStartTime - 1;\n+\n+    // Before MedianTimePast of the chain has crossed nStartTime, the bit\n+    // should not be set.\n+    CBlockIndex *lastBlock = NULL;\n+    lastBlock = firstChain.Mine(2016, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+\n+    // Mine 2011 more blocks at the old time, and check that CBV isn't setting the bit yet.\n+    for (int i=1; i<2012; i++) {\n+        lastBlock = firstChain.Mine(2016+i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+        // This works because VERSIONBITS_LAST_OLD_BLOCK_VERSION happens\n+        // to be 4, and the bit we're testing happens to be bit 28.\n+        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+    }\n+    // Now mine 5 more blocks at the start time -- MTP should not have passed yet, so\n+    // CBV should still not yet set the bit.\n+    nTime = nStartTime;\n+    for (int i=2012; i<=2016; i++) {\n+        lastBlock = firstChain.Mine(2016+i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+    }\n+\n+    // Advance to the next period and transition to STARTED,\n+    lastBlock = firstChain.Mine(6048, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    // so ComputeBlockVersion should now set the bit,\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+    // and should also be using the VERSIONBITS_TOP_BITS.\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+\n+    // Check that ComputeBlockVersion will set the bit until nTimeout\n+    nTime += 600;\n+    int blocksToMine = 4032; // test blocks for up to 2 time periods\n+    int nHeight = 6048;\n+    // These blocks are all before nTimeout is reached.\n+    while (nTime < nTimeout && blocksToMine > 0) {\n+        lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+        BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+        blocksToMine--;\n+        nTime += 600;\n+        nHeight += 1;\n+    };\n+\n+    nTime = nTimeout;\n+    // FAILED is only triggered at the end of a period, so CBV should be setting\n+    // the bit until the period transition.\n+    for (int i=0; i<2015; i++) {\n+        lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+        BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+        nHeight += 1;\n+    }\n+    // The next block should trigger no longer setting the bit.\n+    lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+\n+    // On a new chain:\n+    // verify that the bit will be set after lock-in, and then stop being set\n+    // after activation.\n+    nTime = nStartTime;\n+\n+    // Mine one period worth of blocks, and check that the bit will be on for the\n+    // next period.\n+    lastBlock = secondChain.Mine(2016, nStartTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+\n+    // Mine another period worth of blocks, signaling the new bit.\n+    lastBlock = secondChain.Mine(4032, nStartTime, VERSIONBITS_TOP_BITS | (1<<bit)).Tip();\n+    // After one period of setting the bit on each block, it should have locked in.\n+    // We keep setting the bit for one more period though, until activation.\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+\n+    // Now check that we keep mining the block until the end of this period, and\n+    // then stop at the beginning of the next period.\n+    lastBlock = secondChain.Mine(6047, nStartTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+    lastBlock = secondChain.Mine(6048, nStartTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+\n+    // Finally, verify that after a soft fork has activated, CBV no longer uses\n+    // VERSIONBITS_LAST_OLD_BLOCK_VERSION.\n+    //BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+}\n+\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "7870debceba98f9b092586ab4f0c96a9b5d458fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODcwZGViY2ViYTk4ZjliMDkyNTg2YWI0ZjBjOTZhOWI1ZDQ1OGZk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-03-09T14:48:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-15T15:54:39Z"
      },
      "message": "Test versionbits deployments",
      "tree": {
        "sha": "b7f781b1ecc6ac617a299246a2fc92527aace153",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7f781b1ecc6ac617a299246a2fc92527aace153"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7870debceba98f9b092586ab4f0c96a9b5d458fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7870debceba98f9b092586ab4f0c96a9b5d458fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7870debceba98f9b092586ab4f0c96a9b5d458fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7870debceba98f9b092586ab4f0c96a9b5d458fd/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "532cbb22b57f25c89df30588185b0db659871c86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/532cbb22b57f25c89df30588185b0db659871c86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/532cbb22b57f25c89df30588185b0db659871c86"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1f86a06a3f7f70f0b12f0236f36635fe3d3556fb",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7870debceba98f9b092586ab4f0c96a9b5d458fd/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7870debceba98f9b092586ab4f0c96a9b5d458fd/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=7870debceba98f9b092586ab4f0c96a9b5d458fd",
        "patch": "@@ -185,6 +185,28 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n                            .Mine(14333, TestTime(30003), 0).TestActive()\n                            .Mine(24000, TestTime(40000), 0).TestActive();\n     }\n+\n+    // Sanity checks of version bit deployments\n+    const Consensus::Params &mainnetParams = Params(CBaseChainParams::MAIN).GetConsensus();\n+    for (int i=0; i<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n+        uint32_t bitmask = VersionBitsMask(mainnetParams, (Consensus::DeploymentPos)i);\n+        // Make sure that no deployment tries to set an invalid bit.\n+        BOOST_CHECK_EQUAL(bitmask & ~(uint32_t)VERSIONBITS_TOP_MASK, bitmask);\n+\n+        // Verify that the deployment windows of different deployment using the\n+        // same bit are disjoint.\n+        // This test may need modification at such time as a new deployment\n+        // is proposed that reuses the bit of an activated soft fork, before the\n+        // end time of that soft fork.  (Alternatively, the end time of that\n+        // activated soft fork could be later changed to be earlier to avoid\n+        // overlap.)\n+        for (int j=i+1; j<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; j++) {\n+            if (VersionBitsMask(mainnetParams, (Consensus::DeploymentPos)j) == bitmask) {\n+                BOOST_CHECK(mainnetParams.vDeployments[j].nStartTime > mainnetParams.vDeployments[i].nTimeout ||\n+                        mainnetParams.vDeployments[i].nStartTime > mainnetParams.vDeployments[j].nTimeout);\n+            }\n+        }\n+    }\n }\n \n BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)"
      }
    ]
  },
  {
    "sha": "8c74cedef53ab791ed333f25794f8b9d2e9f51aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Yzc0Y2VkZWY1M2FiNzkxZWQzMzNmMjU3OTRmOGI5ZDJlOWY1MWFh",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-03-15T16:09:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-16T14:09:39Z"
      },
      "message": "RPC test for BIP9 warning logic",
      "tree": {
        "sha": "2996f55ba21a2e2d640842b0adfa6ad1f4af29f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2996f55ba21a2e2d640842b0adfa6ad1f4af29f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c74cedef53ab791ed333f25794f8b9d2e9f51aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c74cedef53ab791ed333f25794f8b9d2e9f51aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c74cedef53ab791ed333f25794f8b9d2e9f51aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c74cedef53ab791ed333f25794f8b9d2e9f51aa/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7870debceba98f9b092586ab4f0c96a9b5d458fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7870debceba98f9b092586ab4f0c96a9b5d458fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7870debceba98f9b092586ab4f0c96a9b5d458fd"
      }
    ],
    "stats": {
      "total": 161,
      "additions": 161,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f15eaacbdaed8af40de3fe3476ff1526fb88dbf5",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c74cedef53ab791ed333f25794f8b9d2e9f51aa/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c74cedef53ab791ed333f25794f8b9d2e9f51aa/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=8c74cedef53ab791ed333f25794f8b9d2e9f51aa",
        "patch": "@@ -115,6 +115,7 @@\n     'invalidblockrequest.py',\n     'invalidtxrequest.py',\n     'abandonconflict.py',\n+    'p2p-versionbits-warning.py',\n ]\n testScriptsExt = [\n     'bip65-cltv.py',"
      },
      {
        "sha": "061dcbf0e1e87e915512832cf075806970e5fc76",
        "filename": "qa/rpc-tests/p2p-versionbits-warning.py",
        "status": "added",
        "additions": 160,
        "deletions": 0,
        "changes": 160,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c74cedef53ab791ed333f25794f8b9d2e9f51aa/qa/rpc-tests/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c74cedef53ab791ed333f25794f8b9d2e9f51aa/qa/rpc-tests/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-versionbits-warning.py?ref=8c74cedef53ab791ed333f25794f8b9d2e9f51aa",
        "patch": "@@ -0,0 +1,160 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n+from test_framework.blocktools import create_block, create_coinbase\n+\n+'''\n+Test version bits' warning system.\n+\n+Generate chains with block versions that appear to be signalling unknown\n+soft-forks, and test that warning alerts are generated.\n+'''\n+\n+VB_PERIOD = 144 # versionbits period length for regtest\n+VB_THRESHOLD = 108 # versionbits activation threshold for regtest\n+VB_TOP_BITS = 0x20000000\n+VB_UNKNOWN_BIT = 27 # Choose a bit unassigned to any deployment\n+\n+# TestNode: bare-bones \"peer\".  Used mostly as a conduit for a test to sending\n+# p2p messages to a node, generating the messages in the main testing logic.\n+class TestNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong()\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def on_inv(self, conn, message):\n+        pass\n+\n+    # Wrapper for the NodeConn's send_message function\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    # Sync up with the node after delivery of a block\n+    def sync_with_ping(self, timeout=30):\n+        self.connection.send_message(msg_ping(nonce=self.ping_counter))\n+        received_pong = False\n+        sleep_time = 0.05\n+        while not received_pong and timeout > 0:\n+            time.sleep(sleep_time)\n+            timeout -= sleep_time\n+            with mininode_lock:\n+                if self.last_pong.nonce == self.ping_counter:\n+                    received_pong = True\n+        self.ping_counter += 1\n+        return received_pong\n+\n+\n+class VersionBitsWarningTest(BitcoinTestFramework):\n+    def setup_chain(self):\n+        initialize_chain_clean(self.options.tmpdir, 1)\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n+        # Open and close to create zero-length file\n+        with open(self.alert_filename, 'w') as f:\n+            pass\n+        self.node_options = [\"-debug\", \"-logtimemicros=1\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]\n+        self.nodes.append(start_node(0, self.options.tmpdir, self.node_options))\n+\n+        import re\n+        self.vb_pattern = re.compile(\"^Warning.*versionbit\")\n+\n+    # Send numblocks blocks via peer with nVersionToUse set.\n+    def send_blocks_with_version(self, peer, numblocks, nVersionToUse):\n+        tip = self.nodes[0].getbestblockhash()\n+        height = self.nodes[0].getblockcount()\n+        block_time = self.nodes[0].getblockheader(tip)[\"time\"]+1\n+        tip = int(tip, 16)\n+\n+        for i in xrange(numblocks):\n+            block = create_block(tip, create_coinbase(height+1), block_time)\n+            block.nVersion = nVersionToUse\n+            block.solve()\n+            peer.send_message(msg_block(block))\n+            block_time += 1\n+            height += 1\n+            tip = block.sha256\n+        peer.sync_with_ping()\n+\n+    def test_versionbits_in_alert_file(self):\n+        with open(self.alert_filename, 'r') as f:\n+            alert_text = f.read()\n+        assert(self.vb_pattern.match(alert_text))\n+\n+    def run_test(self):\n+        # Setup the p2p connection and start up the network thread.\n+        test_node = TestNode()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node))\n+        test_node.add_connection(connections[0])\n+\n+        NetworkThread().start() # Start up network handling in another thread\n+\n+        # Test logic begins here\n+        test_node.wait_for_verack()\n+\n+        # 1. Have the node mine one period worth of blocks\n+        self.nodes[0].generate(VB_PERIOD)\n+\n+        # 2. Now build one period of blocks on the tip, with < VB_THRESHOLD\n+        # blocks signaling some unknown bit.\n+        nVersion = VB_TOP_BITS | (1<<VB_UNKNOWN_BIT)\n+        self.send_blocks_with_version(test_node, VB_THRESHOLD-1, nVersion)\n+\n+        # Fill rest of period with regular version blocks\n+        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n+        # Check that we're not getting any versionbit-related errors in\n+        # getinfo()\n+        assert(not self.vb_pattern.match(self.nodes[0].getinfo()[\"errors\"]))\n+\n+        # 3. Now build one period of blocks with >= VB_THRESHOLD blocks signaling\n+        # some unknown bit\n+        self.send_blocks_with_version(test_node, VB_THRESHOLD, nVersion)\n+        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n+        # Might not get a versionbits-related alert yet, as we should\n+        # have gotten a different alert due to more than 51/100 blocks\n+        # being of unexpected version.\n+        # Check that getinfo() shows some kind of error.\n+        assert(len(self.nodes[0].getinfo()[\"errors\"]) != 0)\n+\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared, and restart the node. This should move the versionbit state\n+        # to ACTIVE.\n+        self.nodes[0].generate(VB_PERIOD)\n+        stop_node(self.nodes[0], 0)\n+        wait_bitcoinds()\n+        # Empty out the alert file\n+        with open(self.alert_filename, 'w') as f:\n+            pass\n+        self.nodes[0] = start_node(0, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"])\n+\n+        # Connecting one block should be enough to generate an error.\n+        self.nodes[0].generate(1)\n+        assert(len(self.nodes[0].getinfo()[\"errors\"]) != 0)\n+        stop_node(self.nodes[0], 0)\n+        wait_bitcoinds()\n+        self.test_versionbits_in_alert_file()\n+\n+        # Test framework expects the node to still be running...\n+        self.nodes[0] = start_node(0, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"])\n+\n+\n+if __name__ == '__main__':\n+    VersionBitsWarningTest().main()"
      }
    ]
  }
]