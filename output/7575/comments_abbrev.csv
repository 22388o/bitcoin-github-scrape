btcdrak,2016-02-22T02:30:42Z,Could you add deployment status to the `getblockchaininfo` RPC?\n,https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-186973441,186973441,
dcousens,2016-02-22T03:51:30Z,"@sipa any reason not to just extend #7566?\n\nonce-over utACK 50278bb,  concept ACK\n",https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-186993497,186993497,
btcdrak,2016-02-22T04:13:30Z,"Concept ACK, I prefer this BIP9 implementation.\n",https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-186995999,186995999,
sipa,2016-02-22T04:19:06Z,"@dcousens I wrote most of this before I saw #7566, which would need some\nrefactoring anyway to support the warning logic. I did use the params\nstructure from there.\n",https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-186998247,186998247,
jonasschnelli,2016-02-22T16:18:21Z,There are some `versionbits_test.cpp` formatting/syntax issues (https://travis-ci.org/bitcoin/bitcoin/jobs/110833452#L1736) \n,https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-187250275,187250275,
sipa,2016-02-24T21:43:29Z,Fixed tests.\n,https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-188464813,188464813,
sipa,2016-03-03T04:51:03Z,"Updated to correspond to latest BIP9 (see https://github.com/bitcoin/bips/pull/344, https://github.com/bitcoin/bips/pull/345, https://github.com/bitcoin/bips/pull/346), and fixed the tests.\n\nI also have an alternate version that factors out the cache, see https://github.com/sipa/bitcoin/commit/218d2fdcbfb207ed75f4f5a6fc7a1b5de6d791b8).\n",https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-191581820,191581820,
sipa,2016-03-03T23:49:12Z,"1) Moved the versionbits logic out of consensus, and make it not depend on it is\n2) Added (very basic) reporting of BIP9 deployment status through RPC\n3) Switched the window size from 2016 to 144 for regtest\n4) Factored the cache out of the versionbits logic classes\n\nShould be ready for review.\n",https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-192024746,192024746,
jtimon,2016-03-04T00:50:26Z,"utACK 7662816\nEDIT: To be clear, I didn't meant to rename consensus/versionbits.o to versionbits.o, I was just talking about the ""consensus package"" in the makefile (because otherwise the whole package would depend on chain.o and its dependencies). I'm sorry for the misunderstanding and I understand if you don't want to change it back again. \n",https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-192039041,192039041,
sipa,2016-03-04T20:10:06Z,Fixed a few bugs:\n- typo in the warning logic which made it trigger all the time\n- newline at the end of unknown softfork warning log message\n- bip9_softforks was not being added to the getblockchaininfo output\n,https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-192445502,192445502,
btcdrak,2016-03-04T22:19:47Z,Would it be possible to emit debug logs for the softfork state changes?\n,https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-192496392,192496392,
sipa,2016-03-05T00:12:07Z,"@btcdrak That would require breaking some layering, as the consensus logic never sees the transitions, and the threshold logic is used for both consensus and warnings.\n",https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-192532465,192532465,
btcdrak,2016-03-05T00:13:57Z,"@sipa no problem, I drop the idea.\n",https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-192532742,192532742,
btcdrak,2016-03-05T00:24:39Z,Tested ACK a7f15a6\n\nPart of my tests involved porting the softforks activation from #7561 and converting the RPC tests to check both enforcement and RPC bip9 status. Work done in https://github.com/bitcoin/bitcoin/compare/master...btcdrak:vb_68_112_113_1\n,https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-192534616,192534616,
morcos,2016-03-08T22:07:09Z,@sipa see https://github.com/sipa/bitcoin/pull/58 for suggestions on how to rework the warning logic.\nIt separates it into two different things.  \n- Something similar to the old warnings which just runs in the steady state and lets you know when blocks are happening that aren't what you expect and triggers an alert if this is over 50%.  This could apply to unknown BIP 9 softforks or any other ch,https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-193987892,193987892,
gmaxwell,2016-03-08T22:21:49Z,"I think we want tracking during IBD for another reason: I think we'll want to disable mining (return error on GBT) after an unknown BIP9 fork locks in unless explicitly overridden (ignorebip9fork=height:bit in config); otherwise there is a rule-reversion-risk, where long after a fork locks some non-trivial portion of hashpower happens to downgrade to older code that doesn't support the existing lo",https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-193995624,193995624,
sipa,2016-03-15T03:42:47Z,"@gmaxwell The code now will only do checks after IBD, but it will detect unknown softforks that activated in the past.\n",https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-196640225,196640225,
btcdrak,2016-03-15T08:55:30Z,"@sipa Now that there is a ""TESTDUMMY"" softfork, can I suggest removing `Add CHECKSEQUENCEVERIFY softfork through BIP9` sipa@2b4bb57 and we add it through #7648 separately (which has been rebase to this branch now).\n",https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-196727306,196727306,
sipa,2016-03-15T15:55:56Z,"All comments addressed, I think.\n",https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-196893712,196893712,
btcdrak,2016-03-15T18:05:07Z,Tested ACK 532cbb2\n,https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-196952235,196952235,
sdaftuar,2016-03-15T20:10:43Z,ACK\n\nIf anyone is interested I also tested the warning logic with an RPC test (https://github.com/sdaftuar/bitcoin/commit/4c2e8ba2282e0948aa8680ab5e8283e5f8ef12f5)\n,https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-197001189,197001189,
sipa,2016-03-16T14:10:29Z,Included @sdaftuar's warning logic RPC test.\n,https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-197348857,197348857,
jtimon,2016-03-16T15:26:15Z,re-utACK 8c74cedef53ab791ed333f25794f8b9d2e9f51aa ~~modulo last nit~~.\n,https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-197381968,197381968,
morcos,2016-03-16T19:06:56Z,Code review ACK\n,https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-197494142,197494142,
btcdrak,2016-03-16T20:18:11Z,Tested ACK 8c74ced\n,https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-197528184,197528184,
morcos,2016-03-16T21:14:26Z,"@sipa I realize you might still be changing this, but in the event that you're not, I backported it to 0.11 along with the soft fork for BIP 68,112,113 here: \nhttps://github.com/bitcoin/bitcoin/compare/0.11...morcos:backportBIP9SoftFork?expand=1\n\nThe RPC tests are annoying to backport, so I left 2 of them out, but tested using the recent RPC test bip68-112-113.py against the 0.11 binary.\n",https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-197551895,197551895,
sipa,2016-03-16T23:35:01Z,@morcos I'm fine with the current state.\n,https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-197605532,197605532,
jonasschnelli,2016-03-17T19:07:48Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/7575#issuecomment-198037159,198037159,
jtimon,2016-02-25T19:53:39Z,Why not simply start using the versionbit prefix without voting for any concrete bit instead?\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54153581,54153581,src/main.cpp
jtimon,2016-02-25T19:55:34Z,"""Unrelated"" question: I know this is not changed in this PR, but why don't we want these warnings on initial block download?\nWould it be a problem to make these checks in ConnectBlock() rather than UpdateTip() ?\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54153961,54153961,src/main.cpp
jtimon,2016-02-25T19:56:37Z,Minor nit: Is it really worth it to notify this twice (once when is locked in and 2016 blocks later when it's activated)?\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54154107,54154107,src/main.cpp
sipa,2016-02-25T20:00:34Z,"Well, one is before you're forked off and the other is after. The warning\ntexts here could certainly be more descriptive.\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54154753,54154753,src/main.cpp
sipa,2016-02-25T20:02:59Z,"> Why not simply start using the versionbit prefix without voting for any\n> concrete bit instead?\n\nThat would mean that versionbits on itself is a change, and lack of\nadoption of versionbits by miners would then cause the warning logic to\ntrigger on new nodes.\n\nUsing this logc here, versionbits gets rolled out simultaneously with the\nfirst fork that uses it.\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54155143,54155143,src/main.cpp
jtimon,2016-02-25T20:31:37Z,"This is the main difference between your implementation and mine. You have a separate Cache for each deployment while I have a single cache with containing the states of all the deployments. While mine should be more efficient (at least storage-wise), your code is more reusable (as shown in the way you implement the warnings checks).\nAnother goal for caching the states together is to simplify thi",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54159317,54159317,src/consensus/versionbits.h
jtimon,2016-02-25T20:33:29Z,"Bike-shedding: I'm doing s/UNDEFINED/DEFINED s/DEFINED/STARTED isntead, which I think it's more clear:\nIf it's in the chainparams is defined, it just hasn't started yet. Undefined/unkown deployments are those which you don't have in your chainparams.\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54159556,54159556,src/consensus/versionbits.h
sipa,2016-02-25T20:36:17Z,Makes sense.\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54159960,54159960,src/consensus/versionbits.h
jtimon,2016-02-25T21:16:47Z,"But unless there's a reorg, nothing is going to stop the locked in deployment from being activated.\nI guess more messages don't hurt, even if we need to repeat the check (states are cached anyway).\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54165956,54165956,src/main.cpp
jtimon,2016-02-25T21:23:59Z,"I mean, if we are going to wait to deploy the first SF to merge it, I think it makes even more sense that we never return Consensus::VERSIONBITS_LAST_OLD_BLOCK_VERSION here.\n\n> That would mean that versionbits on itself is a change, and lack of\n> adoption of versionbits by miners would then cause the warning logic to\n> trigger on new nodes.\n\nJust like changing the version to 8 without doing ",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54167000,54167000,src/main.cpp
sipa,2016-02-25T21:42:14Z,"Assume the start date for the first bip9 softfork is april 1st, but we\nrelease code with bip9 and that softfork on march 1st.\n\nThat means that it's likely that during march no new-style nVersion will be\nmined. That also means that anyone who does run upgraded code will get\nwarnings, because the nVersion they expect (0x20000000) differs from the\none they see (4).\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54169609,54169609,src/main.cpp
jtimon,2016-02-25T22:04:04Z,"Ok, I get it, it's the old nodes seeing the ""empty versionbits"" version which would get (unnecessarily?) be told to upgrade and it doesn't matter whether we introduce a SF with BIP9 or not because the start date will be after the miners start using the new code to produce their new versions.\n\nBut I think I still disagree, though.\nIf in march 15th 95% of the miners are ready to deploy a softfork",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54172894,54172894,src/main.cpp
jtimon,2016-02-25T22:52:14Z,Important concern: Shouldn't this check that the same bit is not currently being used by other deployment defined in chainparams for the same bit (and already started or locked in) before advancing to the next state?\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54179238,54179238,src/consensus/versionbits.cpp
jtimon,2016-02-25T22:58:16Z,"This check is redundant with the similar one in the DEFINED state (assuming the check is done before counting upgrade confirmations). You could also remove the break, so that a deployment changing from UNDEFINED to DEFINED has the chance of moving to FAILED or LOCKED_IN in the same round.\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54180005,54180005,src/consensus/versionbits.cpp
jtimon,2016-02-25T23:34:50Z,"These variables could be both static and be in consensus/versionbits.cpp instead of main.cpp by moving ComputeBlockVersion() to versionbits as well (of course, without cs_main).\n\nWarningBitsConditionChecker could be encapsulated behind a function there too. In a very far future in which Bitcoin Core only uses libconsensus through its C API, that `GetVersionBitsWarnings(const CBlockIndex* pindexP",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54183870,54183870,src/main.cpp
sipa,2016-02-26T00:20:32Z,"The reason I didn't put them in versionbits is exactly because the lock is\nin main. Post c++11 we can move locks to libconsensus, and the versionbits\ncache can have its own lock.\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54187861,54187861,src/main.cpp
sipa,2016-02-26T00:22:17Z,I think the semantics are simpler without the possibility of going from\nundefined to lockedin in one transition.\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54188013,54188013,src/consensus/versionbits.cpp
jtimon,2016-02-26T00:23:34Z,"please, please, please libconsensus refactor nit:\n\nCould you replace these lines with\n\n```\nflags |= Consensus::GetFlags(pindex, chainparams.GetConsensus());\n```\n\n?\n(is it `pindex->pprev` or just `pindex` here?)\n\nThen the function defined in consensus/versionbits.cpp can be extended for new deployments while avoiding new consensus code in main.\n\nThat implies, again, that checkCSV (and ",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54188119,54188119,src/main.cpp
jtimon,2016-02-26T16:12:10Z,"fair enough, we're talking about saving 3-4 lines to libconsensus or leave them as self-documentation. If I forget to copy you on this, please, remind me.\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54263123,54263123,src/consensus/versionbits.cpp
jtimon,2016-02-26T16:25:04Z,"I don't think we want locks in libconsensus, not even post c++11. This reminds me of a previous conversation we had about concurrency and the cache. It seems a renounced to supporting concurrent calls without locks in libconsensus for the wrong reason. When you previously said "" no need to have locks in the internal cache, the caller can get cs_main"", it seems you meant something different than wh",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54264966,54264966,src/main.cpp
sipa,2016-03-01T03:26:11Z,See https://github.com/bitcoin/bips/pull/344.\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54518445,54518445,src/consensus/versionbits.h
sipa,2016-03-01T03:34:09Z,I'll try another implementation that does that. Separating the cache and the logic probably makes sense.\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54518873,54518873,src/main.cpp
sdaftuar,2016-03-03T18:03:36Z,"I don't have a strong opinion here, but I don't know that it really makes sense to call a generic `GetFlags()` function, as I believe we will need to have a separate one of those to deploy BIP68 (which doesn't use a script flags variable, but uses a locktimeflags variable instead)\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54920354,54920354,src/main.cpp
jtimon,2016-03-04T00:32:36Z,"I meant by unifying the consensus flags (currently only script and nSequence_and_nLockTime), see https://github.com/jtimon/bitcoin/commit/b77f1f21eda2329d99d7f2c3242be228db58b131 .\nEDIT: Anyway, if the last commit is an example that will be merged indepdently, this doesn't apply here.\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54973162,54973162,src/main.cpp
btcdrak,2016-03-04T06:19:11Z,missing a trailing `\n`\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r54994056,54994056,src/main.cpp
paveljanik,2016-03-04T20:17:46Z,wich -> which\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r55083166,55083166,src/consensus/params.h
sdaftuar,2016-03-04T21:01:10Z,"should be `strprintf(""Test %i for STARTED"", num)`\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r55088117,55088117,src/test/versionbits_tests.cpp
sdaftuar,2016-03-04T21:10:11Z,Perhaps this comment and the ones below should be updated?  UNDEFINED is not a state.\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r55089062,55089062,src/test/versionbits_tests.cpp
sipa,2016-03-04T22:19:41Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r55097541,55097541,src/test/versionbits_tests.cpp
sipa,2016-03-04T22:19:47Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r55097549,55097549,src/test/versionbits_tests.cpp
sipa,2016-03-04T22:19:54Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r55097560,55097560,src/consensus/params.h
sdaftuar,2016-03-05T18:00:51Z,"Won't this have potential false alerts, if let's say half the blocks in a period are signaling some unknown bit i, while the other half are signaling some other unknown bit j?\n\nAnyway it occurred to me that it might be nice to record which bits are being set that are unknown and write that to the debug log when we warn an unknown softfork is about to activate (as a useful debugging/investigation",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r55125020,55125020,src/main.cpp
sipa,2016-03-05T18:03:41Z,That's quite doable actually: have a 'warning' tracker per bit.\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r55125095,55125095,src/main.cpp
sdaftuar,2016-03-05T18:16:11Z,"I think it'd be nice if we had test coverage for this function.  I believe that as it stands, if this code were busted, then I'm not sure any tests would necessarily fail?\n\nSo far the best idea I have is that when we deploy a new soft fork, we write a unit test that exercises this function and verifies the right bit will be set at the right time (using a fake mainnet chain like the one you built",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r55125326,55125326,src/main.cpp
sipa,2016-03-05T18:23:09Z,"Perhaps it would be useful to have a 'test' softfork that is disabled (end\ntime before genesis, for example) everywhere but regtest, and enables some\nvery easy to test condition (e.g. coinbase must have exactly one output)?\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r55125466,55125466,src/main.cpp
jtimon,2016-03-06T14:44:31Z,A testing deployment sounds like a good idea.\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r55140546,55140546,src/main.cpp
sdaftuar,2016-03-07T14:04:07Z,"Oh it also occurs to me that we probably shouldn't count a block towards the warning unless its top bits match the `001` versionbits prefix?  Otherwise we could see warnings if we deploy versionbits+some soft fork, but miners are slow to pick it up and continue using old version numbers.\n\nAnyway I like the idea of a warning tracker per bit...\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r55206640,55206640,src/main.cpp
morcos,2016-03-08T15:11:04Z,I'm not really sure the intention here.  This will also happen after version bits is rolled out but between any active soft fork deployments.  Is there a reason not to just always `| VERSIONBITS_TOP_BITS` and forget about version 4 blocks.\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r55371649,55371649,src/main.cpp
sdaftuar,2016-03-10T14:49:26Z,"I wrote up a couple additional tests to try sanity checking the mainnet deployments:\n\n```\ndiff --git a/src/test/versionbits_tests.cpp b/src/test/versionbits_tests.cpp\nindex 9de8461..c384f92 100644\n--- a/src/test/versionbits_tests.cpp\n+++ b/src/test/versionbits_tests.cpp\n@@ -6,6 +6,7 @@\n #include ""random.h""\n #include ""versionbits.h""\n #include ""test/test_bitcoin.h""\n+#include ""chainparams.",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r55689289,55689289,src/test/versionbits_tests.cpp
sdaftuar,2016-03-10T14:52:41Z,"I think we should probably clear out these caches in `UnloadBlockIndex()`.  In particular, I think that if we don't, then the miner_tests will pollute the versionbitscache with cached information that might be invalid in later tests (because the CBlockIndex pointers could be reused, potentially resulting in incorrect state calculations).\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r55689787,55689787,src/main.cpp
sdaftuar,2016-03-11T15:54:02Z,"@sipa I tried implementing a unit test for `ComputeBlockVersion()` using a dummy deployment; not sure adding a dummy softfork for testing is something we want to do, but if you're interested the code for that is here:\n\nhttps://github.com/sdaftuar/bitcoin/commit/b8ec634651fbc5a41afc47a768de4357983d3b4f\n\nIf you think this is worth including in some form, feel free to grab it, or I am happy to se",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r55847298,55847298,src/main.cpp
sipa,2016-03-15T03:38:19Z,Done.\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r56111612,56111612,src/main.cpp
sipa,2016-03-15T03:42:00Z,Sure! Make a commit somewhere?\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r56111799,56111799,src/test/versionbits_tests.cpp
sipa,2016-03-15T03:51:43Z,Cherry-picked.\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r56112245,56112245,src/main.cpp
morcos,2016-03-15T12:56:04Z,"I'd prefer if this warning was a little bit stronger.  Perhaps you could change it to:\n`""Warning: Unknown block versions being mined! It's possible unknown rules are in effect""`  or something to that effect?\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r56157297,56157297,src/main.cpp
sdaftuar,2016-03-15T13:05:53Z,"~~https://github.com/sdaftuar/bitcoin/commit/471d10583b197556ff7d9ae4c30a258a8f3061ff~~\n\n~~Actually, I rebased this, with a minor change to use VERSIONBITS_TOP_MASK rather than VERSIONBITS_TOP_BITS when checking the bitmask:\nhttps://github.com/sdaftuar/bitcoin/commit/6b7ec42549d75292719ca7f77a087c4f471de92f~~\n\nEdit: Ok I think this is what I intend: https://github.com/sdaftuar/bitcoin/commit/",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r56158323,56158323,src/test/versionbits_tests.cpp
sdaftuar,2016-03-15T13:32:18Z,Is this missing a `__func__`?\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r56162024,56162024,src/main.cpp
sdaftuar,2016-03-15T13:42:42Z,"(Sorry if this is a repost, I think github ate my first attempt to comment)\n\nI think we should move this line into the for loop below; otherwise we'd generate a warning after a known soft-fork activates.\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r56164182,56164182,src/main.cpp
jtimon,2016-03-16T15:20:04Z,Shouldn't this loop throught all the deployments defined in Consensus::Params and be called from somewhere?\nStyle: why is not indented?\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r56352954,56352954,src/rpc/blockchain.cpp
sipa,2016-03-16T15:24:30Z,"It's called once for every deployment below, similar to how SoftForkMajorityDesc is. There just are no deployments just yet.\n\nMaking this function iterate through all deployments would require putting knowledge of the names of all deployments in the consensus params, and would make it inevitable that the test deployment is listed.\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r56353791,56353791,src/rpc/blockchain.cpp
sipa,2016-03-16T15:28:13Z,Style: what do you mean by not indented?\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r56354506,56354506,src/rpc/blockchain.cpp
jtimon,2016-03-16T15:29:10Z,"Mhmm, I can only find one instance of the string ""BIP9SoftForkDesc"" in the changes.\n\nre itarate with knowledge of the names, what's wrong with \n\n```\nfor (int i = 0; i < MAX_VERSION_BITS_DEPLOYMENTS; ++i)\n```\n\n?\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r56354686,56354686,src/rpc/blockchain.cpp
sipa,2016-03-16T15:36:22Z,"You don't know what string name to give to the Object entry inside ""bip9_softforks"".\n\nYes you can't find any calls to it yet, because there are no BIP9 softforks defined. Future deployments using BIP9 are supposed to be added below, just like ISM softforks were supposed to be added below to ""softforks"".\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r56356070,56356070,src/rpc/blockchain.cpp
jtimon,2016-03-16T15:39:03Z,"Style, oh, never mind: https://github.com/bitcoin/bitcoin/blob/master/src/.clang-format#L27\n\nI see, I didn't thought about the name.\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r56356629,56356629,src/rpc/blockchain.cpp
petertodd,2016-03-24T14:41:34Z,"Why is this called ""DeploymentPos""? It's not a bit position; the actual bit positions have another layer of indirection in the BIP9Deployment structure: https://github.com/sipa/bitcoin/blob/8c74cedef53ab791ed333f25794f8b9d2e9f51aa/src/consensus/params.h#L26\n\nWe should change this to DeploymentId\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r57326422,57326422,src/consensus/params.h
laanwj,2016-03-24T16:02:29Z,"'position' is a very ambigious, yes. It's almost never a good choice.\nMade a similar comment here on another pull: https://github.com/bitcoin/bitcoin/pull/7541#discussion_r53135937\nAgree 'Id' seems be a better fit here.\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r57340389,57340389,src/consensus/params.h
petertodd,2016-03-24T20:04:23Z,"Alright, I'll do a pull-req to fix that - but next week after the long weekend!\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r57379140,57379140,src/consensus/params.h
jtimon,2016-03-26T08:20:19Z,"It is the position in Consensus::Params::vDeployments. Id could have been another option, but O disagree there's anything to fix here. Seems too late for bike-shedding this.\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r57511004,57511004,src/consensus/params.h
MarcoFalke,2016-03-26T11:41:22Z,Adding a comment for doxygen would also help if the purpose is not immediately clear from the code alone.\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r57512624,57512624,src/consensus/params.h
laanwj,2016-03-26T13:03:10Z,"I had the same confusion as @petertodd when initially reading the code, so for new developers it must be worse. I do think at least a comment should be added.\n",https://github.com/bitcoin/bitcoin/pull/7575#discussion_r57513329,57513329,src/consensus/params.h
jtimon,2016-03-26T13:20:42Z,ACK on adding documentation.\n,https://github.com/bitcoin/bitcoin/pull/7575#discussion_r57513490,57513490,src/consensus/params.h
