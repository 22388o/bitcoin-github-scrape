[
  {
    "sha": "7070fcc08cdd459480a066b1edb181757b1371b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDcwZmNjMDhjZGQ0NTk0ODBhMDY2YjFlZGIxODE3NTdiMTM3MWIy",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-08-10T07:59:30Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-24T04:53:54Z"
      },
      "message": "[wallet] Add option to get(unconfirmed)balance to include currently unspendable UTXOs.\n\nIn some cases, a transaction will fail to go into the mempool, e.g. if it is in a too-long chain of transactions. getbalance will ignore the change UTXOs for these, giving you the impression that you have less balance than you actually do.\n\nThis commit adds a flag include_unavailable to get(unconfirmed)balance, which, if enabled, will also account for transactions NOT in the mempool but in your wallet.",
      "tree": {
        "sha": "8e70ab07e0998cd73a1684c1cc94370080b06f3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e70ab07e0998cd73a1684c1cc94370080b06f3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7070fcc08cdd459480a066b1edb181757b1371b2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlsGRWIACgkQV692LbM1\nMyJ1jQ//aiUPbxaoK31+tdeiiW2ZMODe3iBYsMJNhM3y13nxCGXig7wMwHL41ES0\nHolPixMdTC8uHgKwWtGsaTbMR264uzi/T56h+ijkEc84W7LWiNNX4ByJ++Evz/2u\nrKV/MaNkllp/DwC0e3wbbWl3NxnVvgW9MMCrn/31ivABf2cM3c5cBK1h5dDXz6eB\n/pyaXRATPVD5Oa66NxiyHWzEAkaIJsiYhYXq1e8Fi5Z8m9cPZuKRKXZbliQ/vSfk\nvnYGWDqNO19mTtaj+c3SQH5cwVt/BWsZIqiTLgq9woU5AVqB1+fEVkRHTHABRBjk\nUaDi1eDZgSrGll3fUUjKfIUCZ1cjwQxF1pN8TR5IuuzW2IHqinzXFockekayPtMA\nTehJIu9lJDQjftikrUSRCuoLAPf6uu8PfhiY3UOMQMyDqJDEhl6dyQesnfh73Qui\nO9g4WScWV7Vjql9UToItRk7K9HdpX/GIfqYgE/Czl6GzL1Aoxzl19g0blzvD95ve\nJuCGgxGhyzreB42Cdc2qpYQSxqpj+6LYZKItJsdEVN5XN5VixB3gdlH1e53JyUAS\nRhObwSmp7kXIu5W7xQmEwbPjTFavfluYoJzJdxaFTvEfbGaCC0M8TZCZvdzyao9f\new53DXWZvOuuK9REPP+qSA2D80d99dMBWWKu13emdUfAPgUpDfI=\n=82T4\n-----END PGP SIGNATURE-----",
        "payload": "tree 8e70ab07e0998cd73a1684c1cc94370080b06f3c\nparent d82c5d15c504f8c5eaa1fb890fe7f5dfe750946f\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1502351970 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1527137634 +0900\n\n[wallet] Add option to get(unconfirmed)balance to include currently unspendable UTXOs.\n\nIn some cases, a transaction will fail to go into the mempool, e.g. if it is in a too-long chain of transactions. getbalance will ignore the change UTXOs for these, giving you the impression that you have less balance than you actually do.\n\nThis commit adds a flag include_unavailable to get(unconfirmed)balance, which, if enabled, will also account for transactions NOT in the mempool but in your wallet.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7070fcc08cdd459480a066b1edb181757b1371b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7070fcc08cdd459480a066b1edb181757b1371b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7070fcc08cdd459480a066b1edb181757b1371b2/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d82c5d15c504f8c5eaa1fb890fe7f5dfe750946f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d82c5d15c504f8c5eaa1fb890fe7f5dfe750946f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d82c5d15c504f8c5eaa1fb890fe7f5dfe750946f"
      }
    ],
    "stats": {
      "total": 146,
      "additions": 93,
      "deletions": 53
    },
    "files": [
      {
        "sha": "f320152e00822d765c15f6f5a5450a9514cdfea5",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7070fcc08cdd459480a066b1edb181757b1371b2/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7070fcc08cdd459480a066b1edb181757b1371b2/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=7070fcc08cdd459480a066b1edb181757b1371b2",
        "patch": "@@ -56,6 +56,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getbalance\", 1, \"minconf\" },\n     { \"getbalance\", 2, \"include_watchonly\" },\n     { \"getblockhash\", 0, \"height\" },\n+    { \"getunconfirmedbalance\", 0, \"include_unavailable\" },\n     { \"waitforblockheight\", 0, \"height\" },\n     { \"waitforblockheight\", 1, \"timeout\" },\n     { \"waitforblock\", 1, \"timeout\" },"
      },
      {
        "sha": "44f05e1a33a53f72dbf3ee9ae3f6070ffdad6b45",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 81,
        "deletions": 43,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7070fcc08cdd459480a066b1edb181757b1371b2/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7070fcc08cdd459480a066b1edb181757b1371b2/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7070fcc08cdd459480a066b1edb181757b1371b2",
        "patch": "@@ -832,41 +832,63 @@ static UniValue getbalance(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || (request.params.size() > 3 && IsDeprecatedRPCEnabled(\"accounts\")) || (request.params.size() != 0 && !IsDeprecatedRPCEnabled(\"accounts\")))\n-        throw std::runtime_error(\n-            \"getbalance ( \\\"account\\\" minconf include_watchonly )\\n\"\n-            \"\\nIf account is not specified, returns the server's total available balance.\\n\"\n-            \"The available balance is what the wallet considers currently spendable, and is\\n\"\n-            \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\"\n-            \"If account is specified (DEPRECATED), returns the balance in the account.\\n\"\n-            \"Note that the account \\\"\\\" is not the same as leaving the parameter out.\\n\"\n-            \"The server total may be different to the balance in the default \\\"\\\" account.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"         (string, optional) DEPRECATED. This argument will be removed in V0.18. \\n\"\n-            \"                     To use this deprecated argument, start bitcoind with -deprecatedrpc=accounts. The account string may be given as a\\n\"\n-            \"                     specific account name to find the balance associated with wallet keys in\\n\"\n-            \"                     a named account, or as the empty string (\\\"\\\") to find the balance\\n\"\n-            \"                     associated with wallet keys not in any named account, or as \\\"*\\\" to find\\n\"\n-            \"                     the balance associated with all wallet keys regardless of account.\\n\"\n-            \"                     When this option is specified, it calculates the balance in a different\\n\"\n-            \"                     way than when it is not specified, and which can count spends twice when\\n\"\n-            \"                     there are conflicting pending transactions (such as those created by\\n\"\n-            \"                     the bumpfee command), temporarily resulting in low or even negative\\n\"\n-            \"                     balances. In general, account balance calculation is not considered\\n\"\n-            \"                     reliable and has resulted in confusing outcomes, so it is recommended to\\n\"\n-            \"                     avoid passing this argument.\\n\"\n-            \"2. minconf           (numeric, optional, default=1) DEPRECATED. Only valid when an account is specified. This argument will be removed in V0.18. To use this deprecated argument, start bitcoind with -deprecatedrpc=accounts. Only include transactions confirmed at least this many times.\\n\"\n-            \"3. include_watchonly (bool, optional, default=false) DEPRECATED. Only valid when an account is specified. This argument will be removed in V0.18. To use this deprecated argument, start bitcoind with -deprecatedrpc=accounts. Also include balance in watch-only addresses (see 'importaddress')\\n\"\n-            \"\\nResult:\\n\"\n-            \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nThe total amount in the wallet with 1 or more confirmations\\n\"\n-            + HelpExampleCli(\"getbalance\", \"\") +\n-            \"\\nThe total amount in the wallet at least 6 blocks confirmed\\n\"\n-            + HelpExampleCli(\"getbalance\", \"\\\"*\\\" 6\") +\n-            \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")\n-        );\n+    if (request.fHelp || (request.params.size() > 3 && IsDeprecatedRPCEnabled(\"accounts\")) || (request.params.size() > 1 && !IsDeprecatedRPCEnabled(\"accounts\"))) {\n+        if (IsDeprecatedRPCEnabled(\"accounts\")) {\n+            throw std::runtime_error(\n+                \"getbalance ( \\\"account\\\" minconf include_watchonly )\\n\"\n+                \"\\nIf account is not specified, returns the server's total available balance.\\n\"\n+                \"The available balance is what the wallet considers currently spendable, and is\\n\"\n+                \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\"\n+                \"If account is specified (DEPRECATED), returns the balance in the account.\\n\"\n+                \"Note that the account \\\"\\\" is not the same as leaving the parameter out.\\n\"\n+                \"The server total may be different to the balance in the default \\\"\\\" account.\\n\"\n+                \"\\nArguments:\\n\"\n+                \"1. \\\"account\\\"         (string, optional) DEPRECATED. This argument will be removed in V0.18. \\n\"\n+                \"                     To use this deprecated argument, start bitcoind with -deprecatedrpc=accounts. The account string may be given as a\\n\"\n+                \"                     specific account name to find the balance associated with wallet keys in\\n\"\n+                \"                     a named account, or as the empty string (\\\"\\\") to find the balance\\n\"\n+                \"                     associated with wallet keys not in any named account, or as \\\"*\\\" to find\\n\"\n+                \"                     the balance associated with all wallet keys regardless of account.\\n\"\n+                \"                     When this option is specified, it calculates the balance in a different\\n\"\n+                \"                     way than when it is not specified, and which can count spends twice when\\n\"\n+                \"                     there are conflicting pending transactions (such as those created by\\n\"\n+                \"                     the bumpfee command), temporarily resulting in low or even negative\\n\"\n+                \"                     balances. In general, account balance calculation is not considered\\n\"\n+                \"                     reliable and has resulted in confusing outcomes, so it is recommended to\\n\"\n+                \"                     avoid passing this argument.\\n\"\n+                \"2. minconf           (numeric, optional, default=1) DEPRECATED. Only valid when an account is specified. This argument will be removed in V0.18. To use this deprecated argument, start bitcoind with -deprecatedrpc=accounts. Only include transactions confirmed at least this many times.\\n\"\n+                \"3. include_watchonly (bool, optional, default=false) DEPRECATED. Only valid when an account is specified. This argument will be removed in V0.18. To use this deprecated argument, start bitcoind with -deprecatedrpc=accounts. Also include balance in watch-only addresses (see 'importaddress')\\n\"\n+                \"\\nResult:\\n\"\n+                \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n+                \"\\nExamples:\\n\"\n+                \"\\nThe total amount in the wallet with 1 or more confirmations\\n\"\n+                + HelpExampleCli(\"getbalance\", \"\") +\n+                \"\\nThe total amount in the wallet at least 6 blocks confirmed\\n\"\n+                + HelpExampleCli(\"getbalance\", \"\\\"*\\\" 6\") +\n+                \"\\nAs a json rpc call\\n\"\n+                + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")\n+            );\n+        } else {\n+            throw std::runtime_error(\n+                \"getbalance ( include_unavailable )\\n\"\n+                \"\\nReturns the wallet's total available balance.\\n\"\n+                \"The available balance is what the wallet considers currently spendable, and is\\n\"\n+                \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\"\n+                \"\\nArguments:\\n\"\n+                \"1. include_unavailable (bool, optional, default=false) Also include balance for UTXOs which are currently not (but possibly in the future)\\n\"\n+                \"                                                       spendable.\\n\"\n+                \"\\nResult:\\n\"\n+                \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received.\\n\"\n+                \"\\nExamples:\\n\"\n+                \"\\nThe total amount in the wallet\\n\"\n+                + HelpExampleCli(\"getbalance\", \"\") +\n+                \"\\nThe total amount in the wallet, including currently unspendable UTXO:s\\n\"\n+                + HelpExampleCli(\"getbalance\", \"true\") +\n+                \"\\nAs a json rpc call\\n\"\n+                + HelpExampleRpc(\"getbalance\", \"true\")\n+            );\n+        }\n+    }\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -905,7 +927,16 @@ static UniValue getbalance(const JSONRPCRequest& request)\n         return ValueFromAmount(pwallet->GetLegacyBalance(filter, nMinDepth, account));\n     }\n \n-    return ValueFromAmount(pwallet->GetBalance());\n+    // params[0] is not converted from JSON until account stuff is removed, so we need to manually convert it here\n+    // TODO: add param[0] to clients.cpp for getbalance and switch to get_bool() here, once account stuff is removed\n+    if (!request.params[0].isNull() && request.params[0].get_str() != \"true\" && request.params[0].get_str() != \"false\") {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER,\n+            \"include_unavailable may only be true or false\");\n+    }\n+\n+    const bool include_unavailable = !request.params[0].isNull() && request.params[0].get_str() == \"true\";\n+\n+    return ValueFromAmount(pwallet->GetBalance(include_unavailable));\n }\n \n static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n@@ -915,18 +946,25 @@ static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 0)\n+    if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-                \"getunconfirmedbalance\\n\"\n-                \"Returns the server's total unconfirmed balance\\n\");\n+                \"getunconfirmedbalance ( include_unavailable )\\n\"\n+                \"\\nReturns the server's total unconfirmed balance.\\n\"\n+                \"\\nArguments:\\n\"\n+                \"1. include_unavailable (bool, optional, default=false) Also include balance for UTXOs which are\\n\"\n+                \"                                                       currently not (but possibly in the future)\\n\"\n+                \"                                                       spendable.\"\n+                \"\\nResult:\\n\"\n+                \"amount                 (numeric)                       The total balance in \" + CURRENCY_UNIT + \".\\n\");\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    return ValueFromAmount(pwallet->GetUnconfirmedBalance());\n+    bool include_unavailable = !request.params[0].isNull() && request.params[0].get_bool();\n+    return ValueFromAmount(pwallet->GetUnconfirmedBalance(include_unavailable));\n }\n \n \n@@ -4215,7 +4253,7 @@ extern UniValue rescanblockchain(const JSONRPCRequest& request);\n \n static const CRPCCommand commands[] =\n { //  category              name                                actor (function)                argNames\n-    //  --------------------- ------------------------          -----------------------         ----------\n+  //  --------------------- ------------------------            -----------------------         ----------\n     { \"rawtransactions\",    \"fundrawtransaction\",               &fundrawtransaction,            {\"hexstring\",\"options\",\"iswitness\"} },\n     { \"hidden\",             \"resendwallettransactions\",         &resendwallettransactions,      {} },\n     { \"wallet\",             \"abandontransaction\",               &abandontransaction,            {\"txid\"} },\n@@ -4228,12 +4266,12 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },\n     { \"wallet\",             \"getaddressinfo\",                   &getaddressinfo,                {\"address\"} },\n-    { \"wallet\",             \"getbalance\",                       &getbalance,                    {\"account\",\"minconf\",\"include_watchonly\"} },\n+    { \"wallet\",             \"getbalance\",                       &getbalance,                    {\"account|include_unavailable\",\"minconf\",\"include_watchonly\"} },\n     { \"wallet\",             \"getnewaddress\",                    &getnewaddress,                 {\"label|account\",\"address_type\"} },\n     { \"wallet\",             \"getrawchangeaddress\",              &getrawchangeaddress,           {\"address_type\"} },\n     { \"wallet\",             \"getreceivedbyaddress\",             &getreceivedbyaddress,          {\"address\",\"minconf\"} },\n     { \"wallet\",             \"gettransaction\",                   &gettransaction,                {\"txid\",\"include_watchonly\"} },\n-    { \"wallet\",             \"getunconfirmedbalance\",            &getunconfirmedbalance,         {} },\n+    { \"wallet\",             \"getunconfirmedbalance\",            &getunconfirmedbalance,         {\"include_unavailable\"} },\n     { \"wallet\",             \"getwalletinfo\",                    &getwalletinfo,                 {} },\n     { \"wallet\",             \"importmulti\",                      &importmulti,                   {\"requests\",\"options\"} },\n     { \"wallet\",             \"importprivkey\",                    &importprivkey,                 {\"privkey\",\"label\",\"rescan\"} },"
      },
      {
        "sha": "ce6fe52670e634916260d540dfa06d52381b2473",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7070fcc08cdd459480a066b1edb181757b1371b2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7070fcc08cdd459480a066b1edb181757b1371b2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7070fcc08cdd459480a066b1edb181757b1371b2",
        "patch": "@@ -2042,7 +2042,7 @@ bool CWalletTx::InMempool() const\n     return fInMempool;\n }\n \n-bool CWalletTx::IsTrusted() const\n+bool CWalletTx::IsTrusted(bool trust_unavailable) const\n {\n     // Quick answer in most cases\n     if (!CheckFinalTx(*tx))\n@@ -2055,8 +2055,9 @@ bool CWalletTx::IsTrusted() const\n     if (!pwallet->m_spend_zero_conf_change || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit\n         return false;\n \n-    // Don't trust unconfirmed transactions from us unless they are in the mempool.\n-    if (!InMempool())\n+    // Don't consider unconfirmed transactions from us as trusted unless we want to\n+    // trust unavailable UTXOs, or they are in the mempool\n+    if (!trust_unavailable && !InMempool())\n         return false;\n \n     // Trusted if all inputs are from us and are in the mempool:\n@@ -2141,31 +2142,31 @@ void CWallet::ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman\n  */\n \n \n-CAmount CWallet::GetBalance() const\n+CAmount CWallet::GetBalance(bool include_unavailable) const\n {\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (const auto& entry : mapWallet)\n         {\n             const CWalletTx* pcoin = &entry.second;\n-            if (pcoin->IsTrusted())\n+            if (pcoin->IsTrusted(include_unavailable))\n                 nTotal += pcoin->GetAvailableCredit();\n         }\n     }\n \n     return nTotal;\n }\n \n-CAmount CWallet::GetUnconfirmedBalance() const\n+CAmount CWallet::GetUnconfirmedBalance(bool include_unavailable) const\n {\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (const auto& entry : mapWallet)\n         {\n             const CWalletTx* pcoin = &entry.second;\n-            if (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0 && pcoin->InMempool())\n+            if (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0 && (include_unavailable || pcoin->InMempool()))\n                 nTotal += pcoin->GetAvailableCredit();\n         }\n     }"
      },
      {
        "sha": "4ca0f65bf53c13d7a78ada10f98f5f4c4039a08c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7070fcc08cdd459480a066b1edb181757b1371b2/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7070fcc08cdd459480a066b1edb181757b1371b2/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7070fcc08cdd459480a066b1edb181757b1371b2",
        "patch": "@@ -482,7 +482,7 @@ class CWalletTx : public CMerkleTx\n     bool IsEquivalentTo(const CWalletTx& tx) const;\n \n     bool InMempool() const;\n-    bool IsTrusted() const;\n+    bool IsTrusted(bool trust_unavailable = false) const;\n \n     int64_t GetTxTime() const;\n     int GetRequestCount() const;\n@@ -941,8 +941,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n     // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!\n     std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman);\n-    CAmount GetBalance() const;\n-    CAmount GetUnconfirmedBalance() const;\n+    CAmount GetBalance(bool include_unavailable = false) const;\n+    CAmount GetUnconfirmedBalance(bool include_unavailable = false) const;\n     CAmount GetImmatureBalance() const;\n     CAmount GetWatchOnlyBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;"
      }
    ]
  },
  {
    "sha": "a73ecd6ca6597f1c2612588e17c49b89007a9ef7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzNlY2Q2Y2E2NTk3ZjFjMjYxMjU4OGUxN2M0OWI4OTAwN2E5ZWY3",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-08-10T07:59:51Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-24T04:53:54Z"
      },
      "message": "[test] Test for get(unconfirmed)balance include_unavailable in wallet.py test.",
      "tree": {
        "sha": "f1bdc70f1571a4ac48be27c95b1fbba07dea995b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1bdc70f1571a4ac48be27c95b1fbba07dea995b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a73ecd6ca6597f1c2612588e17c49b89007a9ef7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlsGRWIACgkQV692LbM1\nMyJcNg/+K0NV2qnqAOJ0pDssl36LspeQKmKWvINzXm14FEYSbImRnIskEOCSX6o0\n/pl3kqWa9SwIas14WmcRry7cgF86HtXCJ8p6bJgIPteFzZ/bfAA0MHpwXi9RIAxz\nH79UnKYXVApgGZS+ZYuu+WXwVcYo/gIjADx+VczCgSg8TbE3XfmWsFHZ/2R7Kk1U\nCcAyHRlS2NuDs6SG/xcUGDpiO8CoIiU+5vGn7LEqsYCImgZNNcHTLSQ7W4C67BZR\net1QtP2h227OvHG+XrsiZKwcNmPaHmV08muB4yojmKzSXJXI3woe4heuQFx/2T6D\njf/4oe/g0oi/j9a40CQ2jIEchJiAfwJ74dABlaVqvATeRYvQtiNcHLk/O/I6sn30\nrZtG0wr4gS5Hb57PpZMM5BpNamcWXNmNfCVbBmn+nPCIvpaiTQYsAJIC5D0sOiNC\n4Fvt6pyLCB6208Z+UFd3/0Lb5T9LRO51F0jXkPqaOLJI78uBu+2tbez6JcpivJLZ\naRD5dHqP/IX60qhKUyflfp7mitGsD9q3HhdKxa95701opGBjybVUANKC2XTj3lma\nFq8riUPoLRrSqppUSXWd1pnaTqwHnLnGSKN+Gu2kOmVhMc6yDV6py6zp9+ZlFOS0\n37Xa1PiIdx0LXrmTrfI8Pmd3vc0BO+OKkyNpg8H20uOcs7h/fFI=\n=w1W5\n-----END PGP SIGNATURE-----",
        "payload": "tree f1bdc70f1571a4ac48be27c95b1fbba07dea995b\nparent 7070fcc08cdd459480a066b1edb181757b1371b2\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1502351991 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1527137634 +0900\n\n[test] Test for get(unconfirmed)balance include_unavailable in wallet.py test.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a73ecd6ca6597f1c2612588e17c49b89007a9ef7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a73ecd6ca6597f1c2612588e17c49b89007a9ef7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a73ecd6ca6597f1c2612588e17c49b89007a9ef7/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7070fcc08cdd459480a066b1edb181757b1371b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7070fcc08cdd459480a066b1edb181757b1371b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7070fcc08cdd459480a066b1edb181757b1371b2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6279fdb28a1a4499a01a2f05f24efd70b9316cfe",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a73ecd6ca6597f1c2612588e17c49b89007a9ef7/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a73ecd6ca6597f1c2612588e17c49b89007a9ef7/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=a73ecd6ca6597f1c2612588e17c49b89007a9ef7",
        "patch": "@@ -430,6 +430,10 @@ def run_test(self):\n         extra_txid = self.nodes[0].sendtoaddress(sending_addr, Decimal('0.0001'))\n         assert(extra_txid not in self.nodes[0].getrawmempool())\n         assert(extra_txid in [tx[\"txid\"] for tx in self.nodes[0].listtransactions()])\n+        # The change output for extra_txid should be in the balance if we include unspendable\n+        assert(self.nodes[0].getbalance() < self.nodes[0].getbalance(include_unavailable=\"true\"))\n+        # This should be reflected in getunconfirmedbalance as well\n+        assert(self.nodes[0].getunconfirmedbalance() < self.nodes[0].getunconfirmedbalance(include_unavailable=True))\n         self.nodes[0].abandontransaction(extra_txid)\n         total_txs = len(self.nodes[0].listtransactions(\"*\", 99999))\n "
      }
    ]
  }
]