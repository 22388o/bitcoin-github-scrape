kallewoof,2017-08-10T09:06:56Z,Not sure why `zapwallettxes.py` is failing. It's not touching anything I changed (and the test passes on my fork's travis & when running the test locally / via `make check` ...). @jnewbery thoughts?,https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-321495466,321495466,
MarcoFalke,2017-08-10T09:36:28Z,The zapwallettxes' failure is intermittent. Respinned travis.,https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-321502374,321502374,
jnewbery,2017-08-10T15:39:34Z,"I'd hoped that #10330 had fixed the zapwallettxes intermittency. @MarcoFalke do you have an example of it failing (the failure on this PR is no longer available since the task was restarted in Travis).\n\n(apologies for being off-topic)",https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-321589503,321589503,
MarcoFalke,2017-08-10T20:03:57Z,"@jnewbery Sorry I didn't keep track of the exact failure this time, I assume it was one of the known issues that popped up recently.",https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-321658473,321658473,
kallewoof,2017-08-15T02:27:15Z,"@promag @jnewbery Thanks for the review!\n\n* https://github.com/bitcoin/bitcoin/pull/11020/commits/28e8271424b8642e825889bfaa8e51ae6a2a60dd fixes comment\n* https://github.com/bitcoin/bitcoin/pull/11020/commits/df7228d5dec184c92f7190265afb2c380da0a9ae fixes the inconsistency in variable names, but currently retains the `include_unspendable` name. I'm not sure I agree with the longer version @j",https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-322360378,322360378,
kallewoof,2017-08-16T05:21:07Z,"zapwallettxes.py again, @jnewbery: https://pastebin.com/70bQ7CLq",https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-322669077,322669077,
promag,2017-08-16T14:18:43Z,"IMO from the wallet point of view those UTXO should always be part of the balance, and in that case this should be a bug fix and not require more options. WDYT?\n\nEdit: unless `getbalance` defaults to available balance. If that's the case the option can be `include_unavailable` (default false) or `only_available` (default true).",https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-322786328,322786328,
kallewoof,2017-08-17T05:12:06Z,"Yes `getbalance` is available balance, I think, so I don't think it should default to including these. Of course, there is the option of making the coin select include these coins even though they're not in the mempool, in which case `getbalance` could include them, but that's for another time (and PR).\n\nHm, `include_unavailable` seems like a better name for it than `include_unspendable`.",https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-322970593,322970593,
kallewoof,2018-05-22T02:52:41Z,"Rebased this, but now it is not available unless the user enables deprecated account. I could\n\n1. Add a new ""index 0"" parameter to the non-deprecated variant, replacing `""account""`, and allowing up to 1 argument for the new style. This obviously could be potentially confusing.\n2. Keep the index and allow up to 4 indices in new style, but require that items at index 0..2 are all null. Fine fo",https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-390846515,390846515,
jnewbery,2018-05-22T15:10:59Z,"I think I prefer option (1). Overloading parameters can be confusing, but I think it's better in this case because:\n\n- the meaning of argument 0 is not ambiguous - it's fixed by setting the `deprecaterrpc` argument.\n- `include_unavailable` is a bool and `account` is a string\n- the `account`, `minconf` and `include_watchonly` parameters will be removed in the next release.\n- going with op",https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-391027560,391027560,
kallewoof,2018-05-22T23:23:56Z,@jnewbery I definitely *prefer* option 1 but I wasn't sure it would be disruptive. Will switch.,https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-391172101,391172101,
kallewoof,2018-05-22T23:33:08Z,"@jnewbery See 0c28d8f -- I split up the descriptions based on deprecation, and fixed several text issues (e.g. RPC examples using the deprecated stuff). I think this change alone is worth a PR, to be honest.\n\nFWIW I also removed `include_unavailable` from the deprecated variant since we're removing it anyway.\n\nSince ""accounts"" is not JSON-parsed and ""include_unavailable"" wants to be, I am ",https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-391173654,391173654,
kallewoof,2018-05-24T04:57:21Z,"@jnewbery \n> Should this call IsTrusted() with includeUnavailable? If not, coins that are in the mempool could show up in both the balance and the unconfirmed balance.\n\nLooking at the tests (it was a while since I wrote this), I think the idea was that it should be counted in both (see wallet_basic.py changes). Is this problematic?",https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-391588259,391588259,
DrahtBot,2018-07-14T11:23:31Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-405016849,405016849,
jnewbery,2018-07-16T02:42:53Z,"Needs rebase.\n\n@kallewoof - how urgently do you want this? If it can wait until after v0.17, then it'll probably be easier and a smaller diff once the accounts API code has been removed. I intend to do that as soon as 0.17 is branched.",https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-405138485,405138485,
kallewoof,2018-07-17T10:45:00Z,@jnewbery Not urgent. I will wait until 0.17 branches off.,https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-405540126,405540126,
kallewoof,2018-08-10T03:16:02Z,Happy birthday. Closing due to lack of interest.,https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-411963227,411963227,
jnewbery,2018-08-10T18:30:53Z,I commit to reviewing this after it's rebased on #13825,https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-412167957,412167957,
kallewoof,2018-08-11T05:02:29Z,@jnewbery OK!,https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-412251185,412251185,
kallewoof,2018-09-10T01:54:00Z,"@jnewbery I began to rebase this, but self-reflectively decided this is a bit too invasive for the improvement it provides. I think it's a bit weird that 'getbalance' will suddenly drop significantly just because you ran out of chain length, but I'm no longer confident this is the right approach. Sorry for wasting your time!",https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-419765290,419765290,
jnewbery,2018-09-10T02:26:33Z,"> Sorry for wasting your time!\n\nNot wasted. No need to apologise!",https://github.com/bitcoin/bitcoin/pull/11020#issuecomment-419769453,419769453,
promag,2017-08-12T00:37:55Z,"Nit, snake case.",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r132804998,132804998,src/wallet/wallet.h
promag,2017-08-12T00:38:00Z,"Nit, snake case.",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r132805003,132805003,src/wallet/wallet.h
promag,2017-08-12T00:42:55Z,Assert exact value?,https://github.com/bitcoin/bitcoin/pull/11020#discussion_r132805193,132805193,test/functional/wallet.py
promag,2017-08-12T00:44:34Z,"Nit, snake case.",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r132805271,132805271,src/wallet/wallet.cpp
promag,2017-08-12T00:59:24Z,Update comment.,https://github.com/bitcoin/bitcoin/pull/11020#discussion_r132805796,132805796,src/wallet/wallet.cpp
jnewbery,2017-08-14T15:11:54Z,"I think this argument name is a bit confusing. Perhaps `include_not_yet_spendable`. It's a bit of a mouthful, but 'unspendable' sounds too permanent to me.",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r132976907,132976907,src/wallet/rpcwallet.cpp
jnewbery,2017-08-14T15:17:22Z,"This is confusing for me. `include_unspendable` only has effect if:\n\n- `account` is not specified; and\n- `minconf` is not specified; and\n- `include_watchonly` is not specified\n\nAdditionally, if `account` is specified as `""""` (ie balance not associated with any account), the returned balance will use `GetBalance()` if `include_unspendable` is not set, but `GetLegacyBalance()` if it is s",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r132978397,132978397,src/wallet/rpcwallet.cpp
jnewbery,2017-08-14T15:18:13Z,"I find it confusing that the API uses `include_unspendable`, but internally you use `ignoreUnspendable` which is the inverse. Any reason not to be consistent?",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r132978623,132978623,src/wallet/rpcwallet.cpp
jnewbery,2017-08-14T15:20:48Z,Asserting on exact values can make the test more brittle. I think it's fine to test strict lesser than here.,https://github.com/bitcoin/bitcoin/pull/11020#discussion_r132979387,132979387,test/functional/wallet.py
jnewbery,2017-08-14T15:21:54Z,"Again, I think the name `ignoreUnspendable` could be made clearer.",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r132979704,132979704,src/wallet/wallet.cpp
kallewoof,2017-08-15T01:37:10Z,"Not sure what you mean -- most other argument names are written in this style, e.g. redeemScript, mapKeyBirth, etc.",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r133101706,133101706,src/wallet/wallet.h
kallewoof,2017-08-15T01:40:28Z,"I was hoping the description of the argument would alleviate that, but you may be right.",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r133102025,133102025,src/wallet/rpcwallet.cpp
kallewoof,2017-08-15T01:41:05Z,"It ended up that way. You're right, will fix.",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r133102078,133102078,src/wallet/rpcwallet.cpp
kallewoof,2017-08-15T01:43:40Z,"The argument is the last in the list, and there's no way to give a default value for `account` because it's not being JSON parsed (you can't pass ""null"" as it would become the string ""null""). Using named arguments, you can do this, but otherwise I have to make the ""special case"" of you passing defaults in.\n\nThe legacy balance seems to not be very used and possibly even about to be deprecated, ",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r133102309,133102309,src/wallet/rpcwallet.cpp
promag,2017-08-15T01:53:11Z,"> Asserting on exact values can make the test more brittle.\n\nIs that a bad thing?",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r133103187,133103187,test/functional/wallet.py
kallewoof,2017-08-15T03:38:32Z,"It's bad if the test will intermittently fail for unrelated reasons (rounding errors, for example).",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r133111389,133111389,test/functional/wallet.py
jnewbery,2017-08-15T14:02:31Z,"I find it surprising that `minconf` and `watchonly` only have effect if account is specified, and now `include_unspendable` only has effect if account is not specified. There doesn't appear to be any user documentation explaining that.\n\nI'm afraid I don't know the history or motivation for that. @ryanofsky made changes in this area recently. Perhaps he can shed light on this.",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r133196962,133196962,src/wallet/rpcwallet.cpp
promag,2017-08-16T14:01:30Z,That should not happen. There are lots of exact asserts through out this file.,https://github.com/bitcoin/bitcoin/pull/11020#discussion_r133457898,133457898,test/functional/wallet.py
promag,2017-08-16T14:03:03Z,"Also, please align other arguments as this is currently the longest.",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r133458346,133458346,src/wallet/rpcwallet.cpp
kallewoof,2017-08-17T05:16:02Z,"Actually, `include_watchonly` is slightly longer, but I think realigning is a good idea yeah.",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r133624848,133624848,src/wallet/rpcwallet.cpp
jnewbery,2018-05-23T15:32:46Z,nit: variables and arguments should be in snake_case (same for all args below),https://github.com/bitcoin/bitcoin/pull/11020#discussion_r190295026,190295026,src/wallet/wallet.cpp
jnewbery,2018-05-23T15:33:38Z,"Should this call `IsTrusted()` with `includeUnavailable`? If not, coins that are in the mempool could show up in both the balance and the unconfirmed balance.",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r190295383,190295383,src/wallet/wallet.cpp
jnewbery,2018-05-23T15:37:08Z,"nit: can be moved below the `if (IsDeprecatedRPCEnabled(""accounts"")) {` block and the `!IsDeprecatedRPCEnabled(""accounts"")` condition removed (since the code below the `if (IsDeprecatedRPCEnabled(""accounts"")) {` block is effectively the else branch.",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r190296922,190296922,src/wallet/rpcwallet.cpp
jnewbery,2018-05-23T16:29:54Z,"nit: since you're changing the help text for this and `getunconfirmedbalance`, perhaps correct it to say ""the *wallet's* ..."" instead of ""the *server's* ...""",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r190316137,190316137,src/wallet/rpcwallet.cpp
jnewbery,2018-05-23T16:45:55Z,"It's a bit ugly to replicate the univalue parsing here, but I think it's ok since it's only going to be in here for one release.\n\nI think you should remove the `request.params[0].get_str() == ""1""` (1 isn't interpreted as true in univalue). You may also throw an error if `request.params[0].get_str()` is not `false` or `true` (so passing `True` for example doesn't silently fail and leave `includ",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r190321122,190321122,src/wallet/rpcwallet.cpp
kallewoof,2018-05-24T04:47:47Z,I'm not sure. I'll add tests to check that this is not the case.,https://github.com/bitcoin/bitcoin/pull/11020#discussion_r190464972,190464972,src/wallet/wallet.cpp
kallewoof,2018-05-24T04:48:53Z,Good point!,https://github.com/bitcoin/bitcoin/pull/11020#discussion_r190465078,190465078,src/wallet/rpcwallet.cpp
kallewoof,2018-05-24T04:51:49Z,"I thought `1` was true. E.g. `getrawtransaction <id> 1`. But that seems to be a special case for `getrawtransaction`, actually. Changing as you suggest.",https://github.com/bitcoin/bitcoin/pull/11020#discussion_r190465419,190465419,src/wallet/rpcwallet.cpp
