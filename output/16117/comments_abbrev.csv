MarcoFalke,2019-05-29 13:08:03,Removed unused configure checks,https://github.com/bitcoin/bitcoin/pull/16117#issuecomment-496928841,496928841,
sipa,2019-05-29 16:14:28,"Are the std:: versions compatible with our use of boost threadgroup interrupts?\n\nEDIT: ping @theuni",https://github.com/bitcoin/bitcoin/pull/16117#issuecomment-497005317,497005317,
DrahtBot,2019-05-29 17:13:28,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18264 ([WIP] build: Remove Boost Chrono by fanquake)\n* #18234 (refactor: Replace boost::mutex,condition_var,chrono with ",https://github.com/bitcoin/bitcoin/pull/16117#issuecomment-497027698,497027698,
laanwj,2019-05-30 07:27:59,"> Are the std:: versions compatible with our use of boost threadgroup interrupts?\n\nOh crap I knew there was a reason we hadn't got rid of the boost::sleep madness yet :cry: \n\nI don't think the `std::` sleep allows any way to interrupt it, at all?\n\nI think the non-boost approach would be to have them timed-wait on a condition variable.\n",https://github.com/bitcoin/bitcoin/pull/16117#issuecomment-497234237,497234237,
practicalswift,2019-05-30 13:29:16,"> Hopefully that has no observable effects other than improved code clarity, faster compilation and faster run time.\n\nThere is a very observable effect of this PR on 32-bit systems:\n\nPrior to this PR `bitcoind` would shut down with an assertion failure when the 32-bit `time_t` overflow occurs.\n\nAfter this PR `bitcoind` will keep running but with negative time returned from these functi",https://github.com/bitcoin/bitcoin/pull/16117#issuecomment-497329377,497329377,
practicalswift,2019-05-30 13:41:47,"Perhaps we should add a test making sure `bitcoind` on 32-bit systems behave the way we want it to -- which I assume is immediate shutdown? -- at time of the 32-bit `time_t` overflow event.\n\nRelated: [RFC: Improving testing under the remaining supported 32 bit platforms](16096) ",https://github.com/bitcoin/bitcoin/pull/16117#issuecomment-497333247,497333247,
laanwj,2019-05-30 15:18:44,"How do other programs handle this? I though Linux switched to 64 bit timer values on 32-bit systems internally a while ago (and Linux is the only 32 bit platform supported), but I see on ARM `time_t` is still 32 bit.\n\nI mean it must be possible to handle time correctly on 32-bit systems post-2038â€”right?\n\nEdit: no, apparently this is not possible?!? Threads from 2015 made my hopeful: https:",https://github.com/bitcoin/bitcoin/pull/16117#issuecomment-497367867,497367867,
MarcoFalke,2019-05-30 23:15:49,"> After this PR bitcoind will keep running but with negative time returned from these functions :-)\n\nCan you please explain a bit more why this happens. Be reminded that the predefined `std::chrono::duration`s use an underlying integer type that is large enough (for year 2038 to be of no problem).",https://github.com/bitcoin/bitcoin/pull/16117#issuecomment-497518716,497518716,
practicalswift,2019-06-06 07:23:35,"> > After this PR bitcoind will keep running but with negative time returned from these functions :-)\n> \n> Can you please explain a bit more why this happens. Be reminded that the predefined `std::chrono::duration`s use an underlying integer type that is large enough (for year 2038 to be of no problem).\n\nAs long as the syscall used returns 32-bit time (since epoch) on 32-bit systems this c",https://github.com/bitcoin/bitcoin/pull/16117#issuecomment-499380260,499380260,
MarcoFalke,2019-06-10 07:19:34,"Yeah, and the you can't run the underlying system anyway. There is no need to try to figure out how to make Bitcoin Core work on a broken system.",https://github.com/bitcoin/bitcoin/pull/16117#issuecomment-500317864,500317864,
practicalswift,2019-06-10 12:10:55,@MarcoFalke Perhaps we should start thinking about a deprecation plan for 32-bit systems (see #16096)? Even if this is 19 years away software tends to live longer than originally anticipated :-),https://github.com/bitcoin/bitcoin/pull/16117#issuecomment-500394010,500394010,
MarcoFalke,2020-02-21 18:42:46,"I've removed the changes on the time getters, so that this doesn't drift off into a discussion about the y2038 problem",https://github.com/bitcoin/bitcoin/pull/16117#issuecomment-589782024,589782024,
practicalswift,2020-02-23 09:01:33,ACK fae86c38bca5c960462e53975314a0749db5d17d -- patch looks correct,https://github.com/bitcoin/bitcoin/pull/16117#issuecomment-590047199,590047199,
sipa,2020-03-04 06:12:07,Concept and code review ACK fae86c38bca5c960462e53975314a0749db5d17d,https://github.com/bitcoin/bitcoin/pull/16117#issuecomment-594345995,594345995,
ajtowns,2020-03-06 07:15:31,ACK fae86c38bca5c960462e53975314a0749db5d17d quick code review,https://github.com/bitcoin/bitcoin/pull/16117#issuecomment-595633802,595633802,
laanwj,2020-03-06 18:50:45,Postmortem ACK.,https://github.com/bitcoin/bitcoin/pull/16117#issuecomment-595908179,595908179,
laanwj,2019-05-29 12:40:11,"oh wow, can we finally get rid of this abomination?\nfeel free to delete the detection of this as well from the build system!",https://github.com/bitcoin/bitcoin/pull/16117#discussion_r288543208,288543208,src/util/time.cpp
MarcoFalke,2019-05-29 13:07:05,Good idea! Done.,https://github.com/bitcoin/bitcoin/pull/16117#discussion_r288555259,288555259,src/util/time.cpp
