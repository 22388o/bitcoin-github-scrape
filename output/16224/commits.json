[
  {
    "sha": "23b9fa2e5ec0425980301d2eebad81e660a5ea39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2I5ZmEyZTVlYzA0MjU5ODAzMDFkMmVlYmFkODFlNjYwYTVlYTM5",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-04-11T15:46:47Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-05T01:40:56Z"
      },
      "message": "gui: Add detailed text to BitcoinGUI::message",
      "tree": {
        "sha": "94e969b48694af67705fcf992b5e77c75dbdedcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94e969b48694af67705fcf992b5e77c75dbdedcb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23b9fa2e5ec0425980301d2eebad81e660a5ea39",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl6wxDMACgkQQQEIES5+\nqB8bKBAAtGVw08HOgT92rt9ke9mkIf7SnyCTZoYr7o9jgMagqH7MC1qiZElIPEuD\n0OuLaIVNYmwnvLi7kh1DUOrATb5nZWWfJ3mI3w89Ew1PFRZJbhIf12C1wisu2/p7\ntXi8trMTwirJ0OQgVKJc5cUDUs7Okwa5vDk3dDG3wMndaOHjpsBEB1TpdD7kuCa/\n0879QZXvm8zfJLpZLYyM49ZjoMbdZD7/emgGPnS5mspG+KPxwMMf8gqyZg56n03u\nzz2bwsjjXuCAO2d2bqS5zoChjUz1ekv51isV1Gbx/rMHGh0ZJxaLeVpaU1niHEKM\nHaMDkLcKlxpF8QbH/5jK4AtO+InoywXOy1XwIVnNrIUDwlTzwnAHuAVV39NJlwRq\nchTcvzgyCm8dDP7EAD6gCfa51UEcYM+vtfGkGsrxHUZOPiUaH7T+89jojysUlf76\nzppXMQQj2Ufs8w1rSzr1x01w1clFdDcOmhp7onw4D77RxJRU/XfDLOVZKtXL2rVI\nddoRpBsqysFwqnI1GcnOa891gyeecPqCVyvrUknzVEleH0MDVP2g50auTB1JkQd2\noV646Mfg3x5vD+zy+ceMIZTBqZyRXVtmw7/84jH2siWyuTtdMjK3LBMGatE+wWLh\nhVeJsTCToGXSo2Qz+0b4UrH1Jh4hW3sa/UCjBfoP6wCQFaIgM0A=\n=Oto8\n-----END PGP SIGNATURE-----",
        "payload": "tree 94e969b48694af67705fcf992b5e77c75dbdedcb\nparent b549cb1bd2cc4c6d7daeccdd06915bec590e90ca\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1586620007 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1588642856 +0300\n\ngui: Add detailed text to BitcoinGUI::message\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23b9fa2e5ec0425980301d2eebad81e660a5ea39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23b9fa2e5ec0425980301d2eebad81e660a5ea39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23b9fa2e5ec0425980301d2eebad81e660a5ea39/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b549cb1bd2cc4c6d7daeccdd06915bec590e90ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b549cb1bd2cc4c6d7daeccdd06915bec590e90ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b549cb1bd2cc4c6d7daeccdd06915bec590e90ca"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 9,
      "deletions": 7
    },
    "files": [
      {
        "sha": "c9248fde286a1faf0a148f2c8d273690b3d0fc1f",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23b9fa2e5ec0425980301d2eebad81e660a5ea39/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23b9fa2e5ec0425980301d2eebad81e660a5ea39/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=23b9fa2e5ec0425980301d2eebad81e660a5ea39",
        "patch": "@@ -1039,7 +1039,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n     progressBar->setToolTip(tooltip);\n }\n \n-void BitcoinGUI::message(const QString& title, QString message, unsigned int style, bool* ret)\n+void BitcoinGUI::message(const QString& title, QString message, unsigned int style, bool* ret, const QString& detailed_message)\n {\n     // Default title. On macOS, the window title is ignored (as required by the macOS Guidelines).\n     QString strTitle{PACKAGE_NAME};\n@@ -1093,6 +1093,7 @@ void BitcoinGUI::message(const QString& title, QString message, unsigned int sty\n         showNormalIfMinimized();\n         QMessageBox mBox(static_cast<QMessageBox::Icon>(nMBoxIcon), strTitle, message, buttons, this);\n         mBox.setTextFormat(Qt::PlainText);\n+        mBox.setDetailedText(detailed_message);\n         int r = mBox.exec();\n         if (ret != nullptr)\n             *ret = r == QMessageBox::Ok;"
      },
      {
        "sha": "dda88930dbfee7bee8fe4d59f0cca177b9d23fc1",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23b9fa2e5ec0425980301d2eebad81e660a5ea39/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23b9fa2e5ec0425980301d2eebad81e660a5ea39/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=23b9fa2e5ec0425980301d2eebad81e660a5ea39",
        "patch": "@@ -216,13 +216,14 @@ public Q_SLOTS:\n     void setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool headers);\n \n     /** Notify the user of an event from the core network or transaction handling code.\n-       @param[in] title     the message box / notification title\n-       @param[in] message   the displayed text\n-       @param[in] style     modality and style definitions (icon and used buttons - buttons only for message boxes)\n-                            @see CClientUIInterface::MessageBoxFlags\n-       @param[in] ret       pointer to a bool that will be modified to whether Ok was clicked (modal only)\n+       @param[in] title             the message box / notification title\n+       @param[in] message           the displayed text\n+       @param[in] style             modality and style definitions (icon and used buttons - buttons only for message boxes)\n+                                    @see CClientUIInterface::MessageBoxFlags\n+       @param[in] ret               pointer to a bool that will be modified to whether Ok was clicked (modal only)\n+       @param[in] detailed_message  the text to be displayed in the details area\n     */\n-    void message(const QString& title, QString message, unsigned int style, bool* ret = nullptr);\n+    void message(const QString& title, QString message, unsigned int style, bool* ret = nullptr, const QString& detailed_message = QString());\n \n #ifdef ENABLE_WALLET\n     void setCurrentWallet(WalletModel* wallet_model);"
      }
    ]
  },
  {
    "sha": "917ca93553917251e0fd59717a347c63cdfd8a14",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTdjYTkzNTUzOTE3MjUxZTBmZDU5NzE3YTM0N2M2M2NkZmQ4YTE0",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-04-11T15:47:17Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-05T01:45:59Z"
      },
      "message": "Make ThreadSafe{MessageBox|Question} bilingual",
      "tree": {
        "sha": "6dd3c84f09109c1da19d1a23e798a32efdafa9a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6dd3c84f09109c1da19d1a23e798a32efdafa9a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/917ca93553917251e0fd59717a347c63cdfd8a14",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl6wxVsACgkQQQEIES5+\nqB8VFxAAg/p6IzEVBGbTg1E2ns4C9XB26SN80awQulOAOOz3hdflb26BHYivL7HJ\nxgYdGbZnMK/uKgMP2GbmfhMV7HI6ANxMzQala7RMS5GbTY6E2lqyrJ3ZltJrp+uV\nya77cm4PnLwC4gzyt0DTRBp3MqRQQqDedwyxLp0z+TgoHBdZQ4ltmtvH2d7NGK0v\nRkeVAR4zoB7+J9JI9STJzEp1FPSLh/oy3aZERTgKJxzxqxz3n6mQZggCSoC+YQbO\n9BfVZNeWoVYNLv5J8s/WuZoXTp6VwT4Yj245XuqfpVMMRFFGy7SbRXGfeUBMsL+L\nLUDEkN2BgrqTz8hZpAP6d2IWFubHH+HwGlUETiMgCzm6CMpU/d5R2nNxjgCJZWKw\nSVBhfzk1C5J/MlufTcqOL4UHEEa7/fMa/rVGjh3tgFUTwRKxWWp1jv0tK2cnnBUO\nJcv+ZV6nQzMAJoBV3HoLRJ8MXr4W/inKGpp5rZ1U2sAURTugFeeS17m2O2Afi92F\n9pJiqy+t5cgQZ8jAmk+1u7voizTukIwlNQyU3F5Fs5gOeY7tZOgIi0TCNEiBMYDR\ndVrxDqKMvCY2gZgXynym7dptRaAF0X93fHERAZO3y39TkHMQdoYeiRr5clJ1sc84\nYeERwUXZgBt2qU73eE89RrILMqtte8FXWRDvZLiGWqBt7/Y/F4g=\n=5MXM\n-----END PGP SIGNATURE-----",
        "payload": "tree 6dd3c84f09109c1da19d1a23e798a32efdafa9a9\nparent 23b9fa2e5ec0425980301d2eebad81e660a5ea39\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1586620037 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1588643159 +0300\n\nMake ThreadSafe{MessageBox|Question} bilingual\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/917ca93553917251e0fd59717a347c63cdfd8a14",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/917ca93553917251e0fd59717a347c63cdfd8a14",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/917ca93553917251e0fd59717a347c63cdfd8a14/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23b9fa2e5ec0425980301d2eebad81e660a5ea39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23b9fa2e5ec0425980301d2eebad81e660a5ea39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23b9fa2e5ec0425980301d2eebad81e660a5ea39"
      }
    ],
    "stats": {
      "total": 146,
      "additions": 82,
      "deletions": 64
    },
    "files": [
      {
        "sha": "3c3e6e5bbac4ddd5dd8e1e24d752b9aab4fa671e",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/917ca93553917251e0fd59717a347c63cdfd8a14/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/917ca93553917251e0fd59717a347c63cdfd8a14/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=917ca93553917251e0fd59717a347c63cdfd8a14",
        "patch": "@@ -252,7 +252,7 @@ static bool InitRPCAuthentication()\n         LogPrintf(\"No rpcpassword set - using random cookie authentication.\\n\");\n         if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n             uiInterface.ThreadSafeMessageBox(\n-                _(\"Error: A fatal internal error occurred, see debug.log for details\").translated, // Same message as AbortNode\n+                _(\"Error: A fatal internal error occurred, see debug.log for details\"), // Same message as AbortNode\n                 \"\", CClientUIInterface::MSG_ERROR);\n             return false;\n         }"
      },
      {
        "sha": "ffe246b241b927dae017ec26e13489749584f11d",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/917ca93553917251e0fd59717a347c63cdfd8a14/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/917ca93553917251e0fd59717a347c63cdfd8a14/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=917ca93553917251e0fd59717a347c63cdfd8a14",
        "patch": "@@ -6,14 +6,15 @@\n \n #include <chainparamsbase.h>\n #include <compat.h>\n-#include <util/threadnames.h>\n-#include <util/system.h>\n-#include <util/strencodings.h>\n #include <netbase.h>\n #include <rpc/protocol.h> // For HTTP status codes\n #include <shutdown.h>\n #include <sync.h>\n #include <ui_interface.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/threadnames.h>\n+#include <util/translation.h>\n \n #include <deque>\n #include <memory>\n@@ -175,7 +176,7 @@ static bool InitHTTPAllowList()\n         LookupSubNet(strAllow, subnet);\n         if (!subnet.IsValid()) {\n             uiInterface.ThreadSafeMessageBox(\n-                strprintf(\"Invalid -rpcallowip subnet specification: %s. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\", strAllow),\n+                strprintf(Untranslated(\"Invalid -rpcallowip subnet specification: %s. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\"), strAllow),\n                 \"\", CClientUIInterface::MSG_ERROR);\n             return false;\n         }"
      },
      {
        "sha": "74ea421e139e6ee0aac42ce0b9a6d3a86a76e9e9",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/917ca93553917251e0fd59717a347c63cdfd8a14/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/917ca93553917251e0fd59717a347c63cdfd8a14/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=917ca93553917251e0fd59717a347c63cdfd8a14",
        "patch": "@@ -8,6 +8,7 @@\n #include <tinyformat.h>\n #include <ui_interface.h>\n #include <util/system.h>\n+#include <util/translation.h>\n #include <validation.h>\n #include <warnings.h>\n \n@@ -23,7 +24,7 @@ static void FatalError(const char* fmt, const Args&... args)\n     SetMiscWarning(strMessage);\n     LogPrintf(\"*** %s\\n\", strMessage);\n     uiInterface.ThreadSafeMessageBox(\n-        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        Untranslated(\"Error: A fatal internal error occurred, see debug.log for details\"),\n         \"\", CClientUIInterface::MSG_ERROR);\n     StartShutdown();\n }"
      },
      {
        "sha": "51c80d1e2ca92bc4d20f849bd7cdcbf228552267",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/917ca93553917251e0fd59717a347c63cdfd8a14/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/917ca93553917251e0fd59717a347c63cdfd8a14/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=917ca93553917251e0fd59717a347c63cdfd8a14",
        "patch": "@@ -1542,7 +1542,7 @@ bool AppInitMain(NodeContext& node)\n         auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n             return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n         };\n-        std::string strLoadError;\n+        bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index...\").translated);\n \n@@ -1573,7 +1573,7 @@ bool AppInitMain(NodeContext& node)\n                 // From here on out fReindex and fReset mean something different!\n                 if (!LoadBlockIndex(chainparams)) {\n                     if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\").translated;\n+                    strLoadError = _(\"Error loading block database\");\n                     break;\n                 }\n \n@@ -1587,7 +1587,7 @@ bool AppInitMain(NodeContext& node)\n                 // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n                 // in the past, but is now trying to run unpruned.\n                 if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\").translated;\n+                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n                     break;\n                 }\n \n@@ -1596,7 +1596,7 @@ bool AppInitMain(NodeContext& node)\n                 // (otherwise we use the one already on disk).\n                 // This is called again in ThreadImport after the reindex completes.\n                 if (!fReindex && !LoadGenesisBlock(chainparams)) {\n-                    strLoadError = _(\"Error initializing block database\").translated;\n+                    strLoadError = _(\"Error initializing block database\");\n                     break;\n                 }\n \n@@ -1614,21 +1614,21 @@ bool AppInitMain(NodeContext& node)\n \n                     chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n                         uiInterface.ThreadSafeMessageBox(\n-                            _(\"Error reading from database, shutting down.\").translated,\n+                            _(\"Error reading from database, shutting down.\"),\n                             \"\", CClientUIInterface::MSG_ERROR);\n                     });\n \n                     // If necessary, upgrade from older database format.\n                     // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n                     if (!chainstate->CoinsDB().Upgrade()) {\n-                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        strLoadError = _(\"Error upgrading chainstate database\");\n                         failed_chainstate_init = true;\n                         break;\n                     }\n \n                     // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n                     if (!chainstate->ReplayBlocks(chainparams)) {\n-                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n                         failed_chainstate_init = true;\n                         break;\n                     }\n@@ -1640,7 +1640,7 @@ bool AppInitMain(NodeContext& node)\n                     if (!is_coinsview_empty(chainstate)) {\n                         // LoadChainTip initializes the chain based on CoinsTip()'s best block\n                         if (!chainstate->LoadChainTip(chainparams)) {\n-                            strLoadError = _(\"Error initializing block database\").translated;\n+                            strLoadError = _(\"Error initializing block database\");\n                             failed_chainstate_init = true;\n                             break; // out of the per-chainstate loop\n                         }\n@@ -1653,7 +1653,7 @@ bool AppInitMain(NodeContext& node)\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\").translated;\n+                strLoadError = _(\"Error opening block database\");\n                 break;\n             }\n \n@@ -1669,7 +1669,7 @@ bool AppInitMain(NodeContext& node)\n                     if (!chainstate->RewindBlockIndex(chainparams)) {\n                         strLoadError = _(\n                             \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\").translated;\n+                            \"You will need to redownload the blockchain\");\n                         failed_rewind = true;\n                         break; // out of the per-chainstate loop\n                     }\n@@ -1698,7 +1698,7 @@ bool AppInitMain(NodeContext& node)\n                         if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n                             strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n                                     \"This may be due to your computer's date and time being set incorrectly. \"\n-                                    \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n+                                    \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n                             failed_verification = true;\n                             break;\n                         }\n@@ -1710,15 +1710,15 @@ bool AppInitMain(NodeContext& node)\n                                 chainparams, &chainstate->CoinsDB(),\n                                 gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n                                 gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                            strLoadError = _(\"Corrupted block database detected\").translated;\n+                            strLoadError = _(\"Corrupted block database detected\");\n                             failed_verification = true;\n                             break;\n                         }\n                     }\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\").translated;\n+                strLoadError = _(\"Error opening block database\");\n                 failed_verification = true;\n                 break;\n             }\n@@ -1733,8 +1733,8 @@ bool AppInitMain(NodeContext& node)\n             // first suggest a reindex\n             if (!fReset) {\n                 bool fRet = uiInterface.ThreadSafeQuestion(\n-                    strLoadError + \".\\n\\n\" + _(\"Do you want to rebuild the block database now?\").translated,\n-                    strLoadError + \".\\nPlease restart with -reindex or -reindex-chainstate to recover.\",\n+                    strLoadError + Untranslated(\".\\n\\n\") + _(\"Do you want to rebuild the block database now?\"),\n+                    strLoadError.original + \".\\nPlease restart with -reindex or -reindex-chainstate to recover.\",\n                     \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::BTN_ABORT);\n                 if (fRet) {\n                     fReindex = true;\n@@ -1744,7 +1744,7 @@ bool AppInitMain(NodeContext& node)\n                     return false;\n                 }\n             } else {\n-                return InitError(strLoadError);\n+                return InitError(strLoadError.translated);\n             }\n         }\n     }"
      },
      {
        "sha": "aef6b19458b2381cd2e7199b0a22a359833231c1",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/917ca93553917251e0fd59717a347c63cdfd8a14/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/917ca93553917251e0fd59717a347c63cdfd8a14/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=917ca93553917251e0fd59717a347c63cdfd8a14",
        "patch": "@@ -213,11 +213,11 @@ class Node\n \n     //! Register handler for message box messages.\n     using MessageBoxFn =\n-        std::function<bool(const std::string& message, const std::string& caption, unsigned int style)>;\n+        std::function<bool(const bilingual_str& message, const std::string& caption, unsigned int style)>;\n     virtual std::unique_ptr<Handler> handleMessageBox(MessageBoxFn fn) = 0;\n \n     //! Register handler for question messages.\n-    using QuestionFn = std::function<bool(const std::string& message,\n+    using QuestionFn = std::function<bool(const bilingual_str& message,\n         const std::string& non_interactive_message,\n         const std::string& caption,\n         unsigned int style)>;"
      },
      {
        "sha": "97b80b50e2a604d5967445f36088ec827c3f2575",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 14,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/917ca93553917251e0fd59717a347c63cdfd8a14/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/917ca93553917251e0fd59717a347c63cdfd8a14/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=917ca93553917251e0fd59717a347c63cdfd8a14",
        "patch": "@@ -2068,26 +2068,25 @@ void CConnman::ThreadMessageHandler()\n \n \n \n-bool CConnman::BindListenPort(const CService& addrBind, std::string& strError, NetPermissionFlags permissions)\n+bool CConnman::BindListenPort(const CService& addrBind, bilingual_str& strError, NetPermissionFlags permissions)\n {\n-    strError = \"\";\n     int nOne = 1;\n \n     // Create socket for listening for incoming connections\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n     if (!addrBind.GetSockAddr((struct sockaddr*)&sockaddr, &len))\n     {\n-        strError = strprintf(\"Error: Bind address family for %s not supported\", addrBind.ToString());\n-        LogPrintf(\"%s\\n\", strError);\n+        strError = strprintf(Untranslated(\"Error: Bind address family for %s not supported\"), addrBind.ToString());\n+        LogPrintf(\"%s\\n\", strError.original);\n         return false;\n     }\n \n     SOCKET hListenSocket = CreateSocket(addrBind);\n     if (hListenSocket == INVALID_SOCKET)\n     {\n-        strError = strprintf(\"Error: Couldn't open socket for incoming connections (socket returned error %s)\", NetworkErrorString(WSAGetLastError()));\n-        LogPrintf(\"%s\\n\", strError);\n+        strError = strprintf(Untranslated(\"Error: Couldn't open socket for incoming connections (socket returned error %s)\"), NetworkErrorString(WSAGetLastError()));\n+        LogPrintf(\"%s\\n\", strError.original);\n         return false;\n     }\n \n@@ -2111,10 +2110,10 @@ bool CConnman::BindListenPort(const CService& addrBind, std::string& strError, N\n     {\n         int nErr = WSAGetLastError();\n         if (nErr == WSAEADDRINUSE)\n-            strError = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\").translated, addrBind.ToString(), PACKAGE_NAME);\n+            strError = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\"), addrBind.ToString(), PACKAGE_NAME);\n         else\n-            strError = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\").translated, addrBind.ToString(), NetworkErrorString(nErr));\n-        LogPrintf(\"%s\\n\", strError);\n+            strError = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\"), addrBind.ToString(), NetworkErrorString(nErr));\n+        LogPrintf(\"%s\\n\", strError.original);\n         CloseSocket(hListenSocket);\n         return false;\n     }\n@@ -2123,8 +2122,8 @@ bool CConnman::BindListenPort(const CService& addrBind, std::string& strError, N\n     // Listen for incoming connections\n     if (listen(hListenSocket, SOMAXCONN) == SOCKET_ERROR)\n     {\n-        strError = strprintf(_(\"Error: Listening for incoming connections failed (listen returned error %s)\").translated, NetworkErrorString(WSAGetLastError()));\n-        LogPrintf(\"%s\\n\", strError);\n+        strError = strprintf(_(\"Error: Listening for incoming connections failed (listen returned error %s)\"), NetworkErrorString(WSAGetLastError()));\n+        LogPrintf(\"%s\\n\", strError.original);\n         CloseSocket(hListenSocket);\n         return false;\n     }\n@@ -2218,7 +2217,7 @@ NodeId CConnman::GetNewNodeId()\n bool CConnman::Bind(const CService &addr, unsigned int flags, NetPermissionFlags permissions) {\n     if (!(flags & BF_EXPLICIT) && !IsReachable(addr))\n         return false;\n-    std::string strError;\n+    bilingual_str strError;\n     if (!BindListenPort(addr, strError, permissions)) {\n         if ((flags & BF_REPORT_ERROR) && clientInterface) {\n             clientInterface->ThreadSafeMessageBox(strError, \"\", CClientUIInterface::MSG_ERROR);\n@@ -2265,7 +2264,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     if (fListen && !InitBinds(connOptions.vBinds, connOptions.vWhiteBinds)) {\n         if (clientInterface) {\n             clientInterface->ThreadSafeMessageBox(\n-                _(\"Failed to listen on any port. Use -listen=0 if you want this.\").translated,\n+                _(\"Failed to listen on any port. Use -listen=0 if you want this.\"),\n                 \"\", CClientUIInterface::MSG_ERROR);\n         }\n         return false;\n@@ -2331,7 +2330,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     if (connOptions.m_use_addrman_outgoing && !connOptions.m_specified_outgoing.empty()) {\n         if (clientInterface) {\n             clientInterface->ThreadSafeMessageBox(\n-                _(\"Cannot provide specific connections and have addrman find outgoing connections at the same.\").translated,\n+                _(\"Cannot provide specific connections and have addrman find outgoing connections at the same.\"),\n                 \"\", CClientUIInterface::MSG_ERROR);\n         }\n         return false;"
      },
      {
        "sha": "35d442e61ff237acac4f24229467d03a6e4c0cb2",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/917ca93553917251e0fd59717a347c63cdfd8a14/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/917ca93553917251e0fd59717a347c63cdfd8a14/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=917ca93553917251e0fd59717a347c63cdfd8a14",
        "patch": "@@ -21,8 +21,8 @@\n #include <random.h>\n #include <streams.h>\n #include <sync.h>\n-#include <uint256.h>\n #include <threadinterrupt.h>\n+#include <uint256.h>\n \n #include <atomic>\n #include <deque>\n@@ -39,6 +39,7 @@\n class CScheduler;\n class CNode;\n class BanMan;\n+struct bilingual_str;\n \n /** Default for -whitelistrelay. */\n static const bool DEFAULT_WHITELISTRELAY = true;\n@@ -334,7 +335,7 @@ class CConnman\n         NetPermissionFlags m_permissions;\n     };\n \n-    bool BindListenPort(const CService& bindAddr, std::string& strError, NetPermissionFlags permissions);\n+    bool BindListenPort(const CService& bindAddr, bilingual_str& strError, NetPermissionFlags permissions);\n     bool Bind(const CService& addr, unsigned int flags, NetPermissionFlags permissions);\n     bool InitBinds(const std::vector<CService>& binds, const std::vector<NetWhitebindPermissions>& whiteBinds);\n     void ThreadOpenAddedConnections();"
      },
      {
        "sha": "ddb3a50ff70eada48f548a16c4c4314bd803231d",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/917ca93553917251e0fd59717a347c63cdfd8a14/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/917ca93553917251e0fd59717a347c63cdfd8a14/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=917ca93553917251e0fd59717a347c63cdfd8a14",
        "patch": "@@ -5,8 +5,9 @@\n \n #include <noui.h>\n \n+#include <logging.h>\n #include <ui_interface.h>\n-#include <util/system.h>\n+#include <util/translation.h>\n \n #include <string>\n \n@@ -18,7 +19,7 @@ boost::signals2::connection noui_ThreadSafeMessageBoxConn;\n boost::signals2::connection noui_ThreadSafeQuestionConn;\n boost::signals2::connection noui_InitMessageConn;\n \n-bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n+bool noui_ThreadSafeMessageBox(const bilingual_str& message, const std::string& caption, unsigned int style)\n {\n     bool fSecure = style & CClientUIInterface::SECURE;\n     style &= ~CClientUIInterface::SECURE;\n@@ -43,15 +44,15 @@ bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& ca\n     }\n \n     if (!fSecure) {\n-        LogPrintf(\"%s%s\\n\", strCaption, message);\n+        LogPrintf(\"%s%s\\n\", strCaption, message.original);\n     }\n-    tfm::format(std::cerr, \"%s%s\\n\", strCaption, message);\n+    tfm::format(std::cerr, \"%s%s\\n\", strCaption, message.original);\n     return false;\n }\n \n-bool noui_ThreadSafeQuestion(const std::string& /* ignored interactive message */, const std::string& message, const std::string& caption, unsigned int style)\n+bool noui_ThreadSafeQuestion(const bilingual_str& /* ignored interactive message */, const std::string& message, const std::string& caption, unsigned int style)\n {\n-    return noui_ThreadSafeMessageBox(message, caption, style);\n+    return noui_ThreadSafeMessageBox(Untranslated(message), caption, style);\n }\n \n void noui_InitMessage(const std::string& message)\n@@ -66,13 +67,13 @@ void noui_connect()\n     noui_InitMessageConn = uiInterface.InitMessage_connect(noui_InitMessage);\n }\n \n-bool noui_ThreadSafeMessageBoxRedirect(const std::string& message, const std::string& caption, unsigned int style)\n+bool noui_ThreadSafeMessageBoxRedirect(const bilingual_str& message, const std::string& caption, unsigned int style)\n {\n-    LogPrintf(\"%s: %s\\n\", caption, message);\n+    LogPrintf(\"%s: %s\\n\", caption, message.original);\n     return false;\n }\n \n-bool noui_ThreadSafeQuestionRedirect(const std::string& /* ignored interactive message */, const std::string& message, const std::string& caption, unsigned int style)\n+bool noui_ThreadSafeQuestionRedirect(const bilingual_str& /* ignored interactive message */, const std::string& message, const std::string& caption, unsigned int style)\n {\n     LogPrintf(\"%s: %s\\n\", caption, message);\n     return false;"
      },
      {
        "sha": "8ec5708328bf8e669e91427f6dc2ad728da081fa",
        "filename": "src/noui.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/917ca93553917251e0fd59717a347c63cdfd8a14/src/noui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/917ca93553917251e0fd59717a347c63cdfd8a14/src/noui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.h?ref=917ca93553917251e0fd59717a347c63cdfd8a14",
        "patch": "@@ -7,10 +7,12 @@\n \n #include <string>\n \n+struct bilingual_str;\n+\n /** Non-GUI handler, which logs and prints messages. */\n-bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style);\n+bool noui_ThreadSafeMessageBox(const bilingual_str& message, const std::string& caption, unsigned int style);\n /** Non-GUI handler, which logs and prints questions. */\n-bool noui_ThreadSafeQuestion(const std::string& /* ignored interactive message */, const std::string& message, const std::string& caption, unsigned int style);\n+bool noui_ThreadSafeQuestion(const bilingual_str& /* ignored interactive message */, const std::string& message, const std::string& caption, unsigned int style);\n /** Non-GUI handler, which only logs a message. */\n void noui_InitMessage(const std::string& message);\n "
      },
      {
        "sha": "3a1fdc22a621dd0651f5c2aedc24f7290f61d949",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/917ca93553917251e0fd59717a347c63cdfd8a14/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/917ca93553917251e0fd59717a347c63cdfd8a14/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=917ca93553917251e0fd59717a347c63cdfd8a14",
        "patch": "@@ -36,6 +36,7 @@\n #include <interfaces/node.h>\n #include <ui_interface.h>\n #include <util/system.h>\n+#include <util/translation.h>\n \n #include <QAction>\n #include <QApplication>\n@@ -1369,20 +1370,27 @@ void BitcoinGUI::showModalOverlay()\n         modalOverlay->toggleVisibility();\n }\n \n-static bool ThreadSafeMessageBox(BitcoinGUI* gui, const std::string& message, const std::string& caption, unsigned int style)\n+static bool ThreadSafeMessageBox(BitcoinGUI* gui, const bilingual_str& message, const std::string& caption, unsigned int style)\n {\n     bool modal = (style & CClientUIInterface::MODAL);\n     // The SECURE flag has no effect in the Qt GUI.\n     // bool secure = (style & CClientUIInterface::SECURE);\n     style &= ~CClientUIInterface::SECURE;\n     bool ret = false;\n+\n+    QString detailed_message; // This is original message, in English, for googling and referencing.\n+    if (message.original != message.translated) {\n+        detailed_message = BitcoinGUI::tr(\"Original message:\") + \"\\n\" + QString::fromStdString(message.original);\n+    }\n+\n     // In case of modal message, use blocking connection to wait for user to click a button\n     bool invoked = QMetaObject::invokeMethod(gui, \"message\",\n                                modal ? GUIUtil::blockingGUIThreadConnection() : Qt::QueuedConnection,\n                                Q_ARG(QString, QString::fromStdString(caption)),\n-                               Q_ARG(QString, QString::fromStdString(message)),\n+                               Q_ARG(QString, QString::fromStdString(message.translated)),\n                                Q_ARG(unsigned int, style),\n-                               Q_ARG(bool*, &ret));\n+                               Q_ARG(bool*, &ret),\n+                               Q_ARG(QString, detailed_message));\n     assert(invoked);\n     return ret;\n }"
      },
      {
        "sha": "dd56acf44fff428552df7bf53f3ae3aebc2589c5",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/917ca93553917251e0fd59717a347c63cdfd8a14/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/917ca93553917251e0fd59717a347c63cdfd8a14/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=917ca93553917251e0fd59717a347c63cdfd8a14",
        "patch": "@@ -101,8 +101,8 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n                 if (!fMatch)\n                 {\n                     fDone = true;\n-                    std::string strMessage = strprintf(_(\"Please check that your computer's date and time are correct! If your clock is wrong, %s will not work properly.\").translated, PACKAGE_NAME);\n-                    SetMiscWarning(strMessage);\n+                    bilingual_str strMessage = strprintf(_(\"Please check that your computer's date and time are correct! If your clock is wrong, %s will not work properly.\"), PACKAGE_NAME);\n+                    SetMiscWarning(strMessage.translated);\n                     uiInterface.ThreadSafeMessageBox(strMessage, \"\", CClientUIInterface::MSG_WARNING);\n                 }\n             }"
      },
      {
        "sha": "ec8c969fc5dc9f72224abeaf857da76ce0cd1f3c",
        "filename": "src/ui_interface.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/917ca93553917251e0fd59717a347c63cdfd8a14/src/ui_interface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/917ca93553917251e0fd59717a347c63cdfd8a14/src/ui_interface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.cpp?ref=917ca93553917251e0fd59717a347c63cdfd8a14",
        "patch": "@@ -4,6 +4,8 @@\n \n #include <ui_interface.h>\n \n+#include <util/translation.h>\n+\n #include <boost/signals2/last_value.hpp>\n #include <boost/signals2/signal.hpp>\n \n@@ -40,8 +42,8 @@ ADD_SIGNALS_IMPL_WRAPPER(NotifyBlockTip);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyHeaderTip);\n ADD_SIGNALS_IMPL_WRAPPER(BannedListChanged);\n \n-bool CClientUIInterface::ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeMessageBox(message, caption, style); }\n-bool CClientUIInterface::ThreadSafeQuestion(const std::string& message, const std::string& non_interactive_message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeQuestion(message, non_interactive_message, caption, style); }\n+bool CClientUIInterface::ThreadSafeMessageBox(const bilingual_str& message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeMessageBox(message, caption, style); }\n+bool CClientUIInterface::ThreadSafeQuestion(const bilingual_str& message, const std::string& non_interactive_message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeQuestion(message, non_interactive_message, caption, style); }\n void CClientUIInterface::InitMessage(const std::string& message) { return g_ui_signals.InitMessage(message); }\n void CClientUIInterface::NotifyNumConnectionsChanged(int newNumConnections) { return g_ui_signals.NotifyNumConnectionsChanged(newNumConnections); }\n void CClientUIInterface::NotifyNetworkActiveChanged(bool networkActive) { return g_ui_signals.NotifyNetworkActiveChanged(networkActive); }\n@@ -54,11 +56,11 @@ void CClientUIInterface::BannedListChanged() { return g_ui_signals.BannedListCha\n \n bool InitError(const std::string& str)\n {\n-    uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_ERROR);\n+    uiInterface.ThreadSafeMessageBox(Untranslated(str), \"\", CClientUIInterface::MSG_ERROR);\n     return false;\n }\n \n void InitWarning(const std::string& str)\n {\n-    uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_WARNING);\n+    uiInterface.ThreadSafeMessageBox(Untranslated(str), \"\", CClientUIInterface::MSG_WARNING);\n }"
      },
      {
        "sha": "9e4290ae95f664fde6f76f375bfa2ef9b3de8a8d",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/917ca93553917251e0fd59717a347c63cdfd8a14/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/917ca93553917251e0fd59717a347c63cdfd8a14/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=917ca93553917251e0fd59717a347c63cdfd8a14",
        "patch": "@@ -11,6 +11,8 @@\n #include <string>\n \n class CBlockIndex;\n+struct bilingual_str;\n+\n namespace boost {\n namespace signals2 {\n class connection;\n@@ -82,10 +84,10 @@ class CClientUIInterface\n     boost::signals2::connection signal_name##_connect(std::function<signal_name##Sig> fn);\n \n     /** Show message box. */\n-    ADD_SIGNALS_DECL_WRAPPER(ThreadSafeMessageBox, bool, const std::string& message, const std::string& caption, unsigned int style);\n+    ADD_SIGNALS_DECL_WRAPPER(ThreadSafeMessageBox, bool, const bilingual_str& message, const std::string& caption, unsigned int style);\n \n     /** If possible, ask the user a question. If not, falls back to ThreadSafeMessageBox(noninteractive_message, caption, style) and returns false. */\n-    ADD_SIGNALS_DECL_WRAPPER(ThreadSafeQuestion, bool, const std::string& message, const std::string& noninteractive_message, const std::string& caption, unsigned int style);\n+    ADD_SIGNALS_DECL_WRAPPER(ThreadSafeQuestion, bool, const bilingual_str& message, const std::string& noninteractive_message, const std::string& caption, unsigned int style);\n \n     /** Progress message during initialization. */\n     ADD_SIGNALS_DECL_WRAPPER(InitMessage, void, const std::string& message);"
      },
      {
        "sha": "a099e297720968ba52021ea3005e47d68463cc9e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/917ca93553917251e0fd59717a347c63cdfd8a14/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/917ca93553917251e0fd59717a347c63cdfd8a14/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=917ca93553917251e0fd59717a347c63cdfd8a14",
        "patch": "@@ -1651,14 +1651,15 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex* pindex)\n }\n \n /** Abort with a message */\n+// TODO: AbortNode() should take bilingual_str userMessage parameter.\n static bool AbortNode(const std::string& strMessage, const std::string& userMessage = \"\", unsigned int prefix = 0)\n {\n     SetMiscWarning(strMessage);\n     LogPrintf(\"*** %s\\n\", strMessage);\n     if (!userMessage.empty()) {\n-        uiInterface.ThreadSafeMessageBox(userMessage, \"\", CClientUIInterface::MSG_ERROR | prefix);\n+        uiInterface.ThreadSafeMessageBox(Untranslated(userMessage), \"\", CClientUIInterface::MSG_ERROR | prefix);\n     } else {\n-        uiInterface.ThreadSafeMessageBox(_(\"Error: A fatal internal error occurred, see debug.log for details\").translated, \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::MSG_NOPREFIX);\n+        uiInterface.ThreadSafeMessageBox(_(\"Error: A fatal internal error occurred, see debug.log for details\"), \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::MSG_NOPREFIX);\n     }\n     StartShutdown();\n     return false;"
      }
    ]
  },
  {
    "sha": "7e923d47ba9891856b86bc9f718cf2f1f773bdf6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTkyM2Q0N2JhOTg5MTg1NmI4NmJjOWY3MThjZjJmMWY3NzNiZGY2",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-04-11T15:48:04Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-05T01:46:04Z"
      },
      "message": "Make InitError bilingual",
      "tree": {
        "sha": "e4636c6b5209ed93b240dc1c23c58745f33fd1e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4636c6b5209ed93b240dc1c23c58745f33fd1e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e923d47ba9891856b86bc9f718cf2f1f773bdf6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl6wxWAACgkQQQEIES5+\nqB//8A//WK1p9gidD6PrbBg0GFoSXamXZL2SoUdUYzzSy6cmRYvOVIiWul4LqORy\n+WNCiD8EQdZYxEat61/dNbf2+R+z1Eg59EU6a3dK+WVTctr7qRIZ4A/ja5qgkLye\nHAZ+zhiqmoqlUlsvvUYy9rYBmYKmTwkAoXqiB3NPcKkXS/PWcvMRL4Emuxnkat5T\nWp2AQy7tTm/SqOc+BhUnaah16yopRYc8IHrciZVyIRKV1Vi0R0snYHKrxZR+MUfj\nS9RfqWhKcf5ygCO4ieWrg5rU9hrWg3sObwK33Fga+cQRffdohQKY4oLuf2aJ0zN4\naL7Wjamh25uIRmww5OJhwWYl7RFKc7c00KJndb0PJcFzbnN/eTZeAfxdptPI6iwT\n2oWgW7RNgOMdchVaPhNiSbI2B3Bnfm0ZSko5PiHuUzTxR9aTASI1IHvu/QRE9MVt\npdBtGzdQyMcdcbbxv6bTZdxRJgp8nHlW/TCMngCmaICmYNsgR29b+UyRBEEAuGXA\nMN92AP0FPgVzZ5V9Z8+eLrHMpmPbZnCwpFZwTzhot4UdaxXVbVGxQQLrqtYP7rBM\nqmb596FQ6ORvcqLEyNroapDRD03cW/e39nyuigbXetVbwZB7I71Pygbky5h83xRI\nXZlSdB837VFUBZe2XI8Uu9qERA91dmfscGJe+3oGDKJDu43/TBg=\n=udzh\n-----END PGP SIGNATURE-----",
        "payload": "tree e4636c6b5209ed93b240dc1c23c58745f33fd1e8\nparent 917ca93553917251e0fd59717a347c63cdfd8a14\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1586620084 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1588643164 +0300\n\nMake InitError bilingual\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e923d47ba9891856b86bc9f718cf2f1f773bdf6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e923d47ba9891856b86bc9f718cf2f1f773bdf6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "917ca93553917251e0fd59717a347c63cdfd8a14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/917ca93553917251e0fd59717a347c63cdfd8a14",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/917ca93553917251e0fd59717a347c63cdfd8a14"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 74,
      "deletions": 73
    },
    "files": [
      {
        "sha": "43d3f3c5ac594c323cc080f98368e3b73bd2f2bb",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=7e923d47ba9891856b86bc9f718cf2f1f773bdf6",
        "patch": "@@ -56,7 +56,7 @@ static bool AppInit(int argc, char* argv[])\n     SetupServerArgs(node);\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n-        return InitError(strprintf(\"Error parsing command line arguments: %s\\n\", error));\n+        return InitError(Untranslated(strprintf(\"Error parsing command line arguments: %s\\n\", error)));\n     }\n \n     // Process help and version before taking care about datadir\n@@ -80,22 +80,22 @@ static bool AppInit(int argc, char* argv[])\n     try\n     {\n         if (!CheckDataDirOption()) {\n-            return InitError(strprintf(\"Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\")));\n+            return InitError(Untranslated(strprintf(\"Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\"))));\n         }\n         if (!gArgs.ReadConfigFiles(error, true)) {\n-            return InitError(strprintf(\"Error reading configuration file: %s\\n\", error));\n+            return InitError(Untranslated(strprintf(\"Error reading configuration file: %s\\n\", error)));\n         }\n         // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n         try {\n             SelectParams(gArgs.GetChainName());\n         } catch (const std::exception& e) {\n-            return InitError(strprintf(\"%s\\n\", e.what()));\n+            return InitError(Untranslated(strprintf(\"%s\\n\", e.what())));\n         }\n \n         // Error out when loose non-argument tokens are encountered on command line\n         for (int i = 1; i < argc; i++) {\n             if (!IsSwitchChar(argv[i][0])) {\n-                return InitError(strprintf(\"Command line contains unexpected token '%s', see bitcoind -h for a list of options.\\n\", argv[i]));\n+                return InitError(Untranslated(strprintf(\"Command line contains unexpected token '%s', see bitcoind -h for a list of options.\\n\", argv[i])));\n             }\n         }\n \n@@ -130,13 +130,13 @@ static bool AppInit(int argc, char* argv[])\n \n             // Daemonize\n             if (daemon(1, 0)) { // don't chdir (1), do close FDs (0)\n-                return InitError(strprintf(\"daemon() failed: %s\\n\", strerror(errno)));\n+                return InitError(Untranslated(strprintf(\"daemon() failed: %s\\n\", strerror(errno))));\n             }\n #if defined(MAC_OSX)\n #pragma GCC diagnostic pop\n #endif\n #else\n-            return InitError(\"-daemon is not supported on this operating system\\n\");\n+            return InitError(Untranslated(\"-daemon is not supported on this operating system\\n\"));\n #endif // HAVE_DECL_DAEMON\n         }\n         // Lock data directory after daemonization"
      },
      {
        "sha": "221cab15f8553e7132845d1572084b0763d39c37",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 49,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7e923d47ba9891856b86bc9f718cf2f1f773bdf6",
        "patch": "@@ -121,7 +121,7 @@ NODISCARD static bool CreatePidFile()\n #endif\n         return true;\n     } else {\n-        return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\").translated, GetPidFile().string(), std::strerror(errno)));\n+        return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\"), GetPidFile().string(), std::strerror(errno)));\n     }\n }\n \n@@ -768,17 +768,15 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n  */\n static bool InitSanityCheck()\n {\n-    if(!ECC_InitSanityCheck()) {\n-        InitError(\"Elliptic curve cryptography sanity check failure. Aborting.\");\n-        return false;\n+    if (!ECC_InitSanityCheck()) {\n+        return InitError(Untranslated(\"Elliptic curve cryptography sanity check failure. Aborting.\"));\n     }\n \n     if (!glibc_sanity_test() || !glibcxx_sanity_test())\n         return false;\n \n     if (!Random_SanityCheck()) {\n-        InitError(\"OS cryptographic RNG sanity check failure. Aborting.\");\n-        return false;\n+        return InitError(Untranslated(\"OS cryptographic RNG sanity check failure. Aborting.\"));\n     }\n \n     return true;\n@@ -929,8 +927,9 @@ bool AppInitBasicSetup()\n     HeapSetInformation(nullptr, HeapEnableTerminationOnCorruption, nullptr, 0);\n #endif\n \n-    if (!SetupNetworking())\n-        return InitError(\"Initializing networking failed\");\n+    if (!SetupNetworking()) {\n+        return InitError(Untranslated(\"Initializing networking failed.\"));\n+    }\n \n #ifndef WIN32\n     if (!gArgs.GetBoolArg(\"-sysperms\", false)) {\n@@ -967,7 +966,7 @@ bool AppInitParameterInteraction()\n     // on the command line or in this network's section of the config file.\n     std::string network = gArgs.GetChainName();\n     for (const auto& arg : gArgs.GetUnsuitableSectionOnlyArgs()) {\n-        return InitError(strprintf(_(\"Config setting for %s only applied on %s network when in [%s] section.\").translated, arg, network, network));\n+        return InitError(strprintf(_(\"Config setting for %s only applied on %s network when in [%s] section.\"), arg, network, network));\n     }\n \n     // Warn if unrecognized section name are present in the config file.\n@@ -976,7 +975,7 @@ bool AppInitParameterInteraction()\n     }\n \n     if (!fs::is_directory(GetBlocksDir())) {\n-        return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\").translated, gArgs.GetArg(\"-blocksdir\", \"\")));\n+        return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\"), gArgs.GetArg(\"-blocksdir\", \"\")));\n     }\n \n     // parse and validate enabled filter types\n@@ -988,7 +987,7 @@ bool AppInitParameterInteraction()\n         for (const auto& name : names) {\n             BlockFilterType filter_type;\n             if (!BlockFilterTypeByName(name, filter_type)) {\n-                return InitError(strprintf(_(\"Unknown -blockfilterindex value %s.\").translated, name));\n+                return InitError(strprintf(_(\"Unknown -blockfilterindex value %s.\"), name));\n             }\n             g_enabled_filter_types.insert(filter_type);\n         }\n@@ -997,16 +996,16 @@ bool AppInitParameterInteraction()\n     // if using block pruning, then disallow txindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n-            return InitError(_(\"Prune mode is incompatible with -txindex.\").translated);\n+            return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n         if (!g_enabled_filter_types.empty()) {\n-            return InitError(_(\"Prune mode is incompatible with -blockfilterindex.\").translated);\n+            return InitError(_(\"Prune mode is incompatible with -blockfilterindex.\"));\n         }\n     }\n \n     // -bind and -whitebind can't be set when not listening\n     size_t nUserBind = gArgs.GetArgs(\"-bind\").size() + gArgs.GetArgs(\"-whitebind\").size();\n     if (nUserBind != 0 && !gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n-        return InitError(\"Cannot set -bind or -whitebind together with -listen=0\");\n+        return InitError(Untranslated(\"Cannot set -bind or -whitebind together with -listen=0\"));\n     }\n \n     // Make sure enough file descriptors are available\n@@ -1024,7 +1023,7 @@ bool AppInitParameterInteraction()\n #endif\n     nMaxConnections = std::max(std::min<int>(nMaxConnections, fd_max - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS), 0);\n     if (nFD < MIN_CORE_FILEDESCRIPTORS)\n-        return InitError(_(\"Not enough file descriptors available.\").translated);\n+        return InitError(_(\"Not enough file descriptors available.\"));\n     nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS, nMaxConnections);\n \n     if (nMaxConnections < nUserMaxConnections)\n@@ -1069,7 +1068,7 @@ bool AppInitParameterInteraction()\n     if (gArgs.IsArgSet(\"-minimumchainwork\")) {\n         const std::string minChainWorkStr = gArgs.GetArg(\"-minimumchainwork\", \"\");\n         if (!IsHexNumber(minChainWorkStr)) {\n-            return InitError(strprintf(\"Invalid non-hex (%s) minimum chain work value specified\", minChainWorkStr));\n+            return InitError(strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), minChainWorkStr));\n         }\n         nMinimumChainWork = UintToArith256(uint256S(minChainWorkStr));\n     } else {\n@@ -1084,21 +1083,21 @@ bool AppInitParameterInteraction()\n     int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     int64_t nMempoolSizeMin = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n-        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\").translated, std::ceil(nMempoolSizeMin / 1000000.0)));\n+        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n     // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n     // and the amount the mempool min fee increases above the feerate of txs evicted due to mempool limiting.\n     if (gArgs.IsArgSet(\"-incrementalrelayfee\"))\n     {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-incrementalrelayfee\", \"\"), n))\n-            return InitError(AmountErrMsg(\"incrementalrelayfee\", gArgs.GetArg(\"-incrementalrelayfee\", \"\")).translated);\n+            return InitError(AmountErrMsg(\"incrementalrelayfee\", gArgs.GetArg(\"-incrementalrelayfee\", \"\")));\n         incrementalRelayFee = CFeeRate(n);\n     }\n \n     // block pruning; get the amount of disk space (in MiB) to allot for block & undo files\n     int64_t nPruneArg = gArgs.GetArg(\"-prune\", 0);\n     if (nPruneArg < 0) {\n-        return InitError(_(\"Prune cannot be configured with a negative value.\").translated);\n+        return InitError(_(\"Prune cannot be configured with a negative value.\"));\n     }\n     nPruneTarget = (uint64_t) nPruneArg * 1024 * 1024;\n     if (nPruneArg == 1) {  // manual pruning: -prune=1\n@@ -1107,7 +1106,7 @@ bool AppInitParameterInteraction()\n         fPruneMode = true;\n     } else if (nPruneTarget) {\n         if (nPruneTarget < MIN_DISK_SPACE_FOR_BLOCK_FILES) {\n-            return InitError(strprintf(_(\"Prune configured below the minimum of %d MiB.  Please use a higher number.\").translated, MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n+            return InitError(strprintf(_(\"Prune configured below the minimum of %d MiB.  Please use a higher number.\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n         }\n         LogPrintf(\"Prune configured to target %u MiB on disk for block and undo files.\\n\", nPruneTarget / 1024 / 1024);\n         fPruneMode = true;\n@@ -1120,13 +1119,13 @@ bool AppInitParameterInteraction()\n \n     peer_connect_timeout = gArgs.GetArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n     if (peer_connect_timeout <= 0) {\n-        return InitError(\"peertimeout cannot be configured with a negative value.\");\n+        return InitError(Untranslated(\"peertimeout cannot be configured with a negative value.\"));\n     }\n \n     if (gArgs.IsArgSet(\"-minrelaytxfee\")) {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-minrelaytxfee\", \"\"), n)) {\n-            return InitError(AmountErrMsg(\"minrelaytxfee\", gArgs.GetArg(\"-minrelaytxfee\", \"\")).translated);\n+            return InitError(AmountErrMsg(\"minrelaytxfee\", gArgs.GetArg(\"-minrelaytxfee\", \"\")));\n         }\n         // High fee check is done afterward in CWallet::CreateWalletFromFile()\n         ::minRelayTxFee = CFeeRate(n);\n@@ -1142,7 +1141,7 @@ bool AppInitParameterInteraction()\n     {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"), n))\n-            return InitError(AmountErrMsg(\"blockmintxfee\", gArgs.GetArg(\"-blockmintxfee\", \"\")).translated);\n+            return InitError(AmountErrMsg(\"blockmintxfee\", gArgs.GetArg(\"-blockmintxfee\", \"\")));\n     }\n \n     // Feerate used to define dust.  Shouldn't be changed lightly as old\n@@ -1151,13 +1150,13 @@ bool AppInitParameterInteraction()\n     {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-dustrelayfee\", \"\"), n))\n-            return InitError(AmountErrMsg(\"dustrelayfee\", gArgs.GetArg(\"-dustrelayfee\", \"\")).translated);\n+            return InitError(AmountErrMsg(\"dustrelayfee\", gArgs.GetArg(\"-dustrelayfee\", \"\")));\n         dustRelayFee = CFeeRate(n);\n     }\n \n     fRequireStandard = !gArgs.GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n     if (!chainparams.IsTestChain() && !fRequireStandard) {\n-        return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));\n+        return InitError(strprintf(Untranslated(\"acceptnonstdtxn is not currently supported for %s chain\"), chainparams.NetworkIDString()));\n     }\n     nBytesPerSigOp = gArgs.GetArg(\"-bytespersigop\", nBytesPerSigOp);\n \n@@ -1174,10 +1173,10 @@ bool AppInitParameterInteraction()\n         nLocalServices = ServiceFlags(nLocalServices | NODE_BLOOM);\n \n     if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n-        return InitError(\"rpcserialversion must be non-negative.\");\n+        return InitError(Untranslated(\"rpcserialversion must be non-negative.\"));\n \n     if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n-        return InitError(\"unknown rpcserialversion requested.\");\n+        return InitError(Untranslated(\"Unknown rpcserialversion requested.\"));\n \n     nMaxTipAge = gArgs.GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n \n@@ -1189,10 +1188,10 @@ static bool LockDataDirectory(bool probeOnly)\n     // Make sure only a single Bitcoin process is using the data directory.\n     fs::path datadir = GetDataDir();\n     if (!DirIsWritable(datadir)) {\n-        return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\").translated, datadir.string()));\n+        return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\"), datadir.string()));\n     }\n     if (!LockDirectory(datadir, \".lock\", probeOnly)) {\n-        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\").translated, datadir.string(), PACKAGE_NAME));\n+        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\"), datadir.string(), PACKAGE_NAME));\n     }\n     return true;\n }\n@@ -1210,7 +1209,7 @@ bool AppInitSanityChecks()\n \n     // Sanity check\n     if (!InitSanityCheck())\n-        return InitError(strprintf(_(\"Initialization sanity check failed. %s is shutting down.\").translated, PACKAGE_NAME));\n+        return InitError(strprintf(_(\"Initialization sanity check failed. %s is shutting down.\"), PACKAGE_NAME));\n \n     // Probe the data directory lock to give an early error message, if possible\n     // We cannot hold the data directory lock here, as the forking for daemon() hasn't yet happened,\n@@ -1246,7 +1245,7 @@ bool AppInitMain(NodeContext& node)\n         }\n     }\n     if (!LogInstance().StartLogging()) {\n-            return InitError(strprintf(\"Could not open debug log file %s\",\n+            return InitError(strprintf(Untranslated(\"Could not open debug log file %s\"),\n                 LogInstance().m_file_path.string()));\n     }\n \n@@ -1346,7 +1345,7 @@ bool AppInitMain(NodeContext& node)\n     {\n         uiInterface.InitMessage_connect(SetRPCWarmupStatus);\n         if (!AppInitServers())\n-            return InitError(_(\"Unable to start HTTP server. See debug log for details.\").translated);\n+            return InitError(_(\"Unable to start HTTP server. See debug log for details.\"));\n     }\n \n     // ********************************************************* Step 5: verify wallet database integrity\n@@ -1378,12 +1377,12 @@ bool AppInitMain(NodeContext& node)\n     std::vector<std::string> uacomments;\n     for (const std::string& cmt : gArgs.GetArgs(\"-uacomment\")) {\n         if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n-            return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\").translated, cmt));\n+            return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n         uacomments.push_back(cmt);\n     }\n     strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, uacomments);\n     if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n-        return InitError(strprintf(_(\"Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.\").translated,\n+        return InitError(strprintf(_(\"Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.\"),\n             strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n     }\n \n@@ -1392,7 +1391,7 @@ bool AppInitMain(NodeContext& node)\n         for (const std::string& snet : gArgs.GetArgs(\"-onlynet\")) {\n             enum Network net = ParseNetwork(snet);\n             if (net == NET_UNROUTABLE)\n-                return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\").translated, snet));\n+                return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n             nets.insert(net);\n         }\n         for (int n = 0; n < NET_MAX; n++) {\n@@ -1413,12 +1412,12 @@ bool AppInitMain(NodeContext& node)\n     if (proxyArg != \"\" && proxyArg != \"0\") {\n         CService proxyAddr;\n         if (!Lookup(proxyArg, proxyAddr, 9050, fNameLookup)) {\n-            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\").translated, proxyArg));\n+            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\"), proxyArg));\n         }\n \n         proxyType addrProxy = proxyType(proxyAddr, proxyRandomize);\n         if (!addrProxy.IsValid())\n-            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\").translated, proxyArg));\n+            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\"), proxyArg));\n \n         SetProxy(NET_IPV4, addrProxy);\n         SetProxy(NET_IPV6, addrProxy);\n@@ -1437,11 +1436,11 @@ bool AppInitMain(NodeContext& node)\n         } else {\n             CService onionProxy;\n             if (!Lookup(onionArg, onionProxy, 9050, fNameLookup)) {\n-                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\").translated, onionArg));\n+                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n             }\n             proxyType addrOnion = proxyType(onionProxy, proxyRandomize);\n             if (!addrOnion.IsValid())\n-                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\").translated, onionArg));\n+                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n             SetProxy(NET_ONION, addrOnion);\n             SetReachable(NET_ONION, true);\n         }\n@@ -1457,7 +1456,7 @@ bool AppInitMain(NodeContext& node)\n         if (Lookup(strAddr, addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n             AddLocal(addrLocal, LOCAL_MANUAL);\n         else\n-            return InitError(ResolveErrMsg(\"externalip\", strAddr));\n+            return InitError(Untranslated(ResolveErrMsg(\"externalip\", strAddr)));\n     }\n \n     // Read asmap file if configured\n@@ -1470,12 +1469,12 @@ bool AppInitMain(NodeContext& node)\n             asmap_path = GetDataDir() / asmap_path;\n         }\n         if (!fs::exists(asmap_path)) {\n-            InitError(strprintf(_(\"Could not find asmap file %s\").translated, asmap_path));\n+            InitError(strprintf(_(\"Could not find asmap file %s\"), asmap_path));\n             return false;\n         }\n         std::vector<bool> asmap = CAddrMan::DecodeAsmap(asmap_path);\n         if (asmap.size() == 0) {\n-            InitError(strprintf(_(\"Could not parse asmap file %s\").translated, asmap_path));\n+            InitError(strprintf(_(\"Could not parse asmap file %s\"), asmap_path));\n             return false;\n         }\n         const uint256 asmap_version = SerializeHash(asmap);\n@@ -1581,7 +1580,7 @@ bool AppInitMain(NodeContext& node)\n                 // (we're likely using a testnet datadir, or the other way around).\n                 if (!::BlockIndex().empty() &&\n                         !LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\").translated);\n+                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n                 }\n \n                 // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n@@ -1744,7 +1743,7 @@ bool AppInitMain(NodeContext& node)\n                     return false;\n                 }\n             } else {\n-                return InitError(strLoadError.translated);\n+                return InitError(strLoadError);\n             }\n         }\n     }\n@@ -1807,11 +1806,11 @@ bool AppInitMain(NodeContext& node)\n     // ********************************************************* Step 11: import blocks\n \n     if (!CheckDiskSpace(GetDataDir())) {\n-        InitError(strprintf(_(\"Error: Disk space is low for %s\").translated, GetDataDir()));\n+        InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetDataDir()));\n         return false;\n     }\n     if (!CheckDiskSpace(GetBlocksDir())) {\n-        InitError(strprintf(_(\"Error: Disk space is low for %s\").translated, GetBlocksDir()));\n+        InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetBlocksDir()));\n         return false;\n     }\n \n@@ -1896,21 +1895,21 @@ bool AppInitMain(NodeContext& node)\n     for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n         CService addrBind;\n         if (!Lookup(strBind, addrBind, GetListenPort(), false)) {\n-            return InitError(ResolveErrMsg(\"bind\", strBind));\n+            return InitError(Untranslated(ResolveErrMsg(\"bind\", strBind)));\n         }\n         connOptions.vBinds.push_back(addrBind);\n     }\n     for (const std::string& strBind : gArgs.GetArgs(\"-whitebind\")) {\n         NetWhitebindPermissions whitebind;\n         std::string error;\n-        if (!NetWhitebindPermissions::TryParse(strBind, whitebind, error)) return InitError(error);\n+        if (!NetWhitebindPermissions::TryParse(strBind, whitebind, error)) return InitError(Untranslated(error));\n         connOptions.vWhiteBinds.push_back(whitebind);\n     }\n \n     for (const auto& net : gArgs.GetArgs(\"-whitelist\")) {\n         NetWhitelistPermissions subnet;\n         std::string error;\n-        if (!NetWhitelistPermissions::TryParse(net, subnet, error)) return InitError(error);\n+        if (!NetWhitelistPermissions::TryParse(net, subnet, error)) return InitError(Untranslated(error));\n         connOptions.vWhitelistedRange.push_back(subnet);\n     }\n "
      },
      {
        "sha": "515a2ba1b9ac17a277b3e91f3c575dbdaefccb0a",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=7e923d47ba9891856b86bc9f718cf2f1f773bdf6",
        "patch": "@@ -345,7 +345,7 @@ class ChainImpl : public Chain\n     int64_t getAdjustedTime() override { return GetAdjustedTime(); }\n     void initMessage(const std::string& message) override { ::uiInterface.InitMessage(message); }\n     void initWarning(const std::string& message) override { InitWarning(message); }\n-    void initError(const std::string& message) override { InitError(message); }\n+    void initError(const bilingual_str& message) override { InitError(message); }\n     void showProgress(const std::string& title, int progress, bool resume_possible) override\n     {\n         ::uiInterface.ShowProgress(title, progress, resume_possible);"
      },
      {
        "sha": "77b315b19565aeba50c647410b073939c0c77d35",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=7e923d47ba9891856b86bc9f718cf2f1f773bdf6",
        "patch": "@@ -21,6 +21,7 @@ class CScheduler;\n class Coin;\n class uint256;\n enum class RBFTransactionState;\n+struct bilingual_str;\n struct CBlockLocator;\n struct FeeCalculation;\n struct NodeContext;\n@@ -227,7 +228,7 @@ class Chain\n     virtual void initWarning(const std::string& message) = 0;\n \n     //! Send init error.\n-    virtual void initError(const std::string& message) = 0;\n+    virtual void initError(const bilingual_str& message) = 0;\n \n     //! Send progress indicator.\n     virtual void showProgress(const std::string& title, int progress, bool resume_possible) = 0;"
      },
      {
        "sha": "9e603a12cd3e712f328ca6384cc7cc503bd50de0",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=7e923d47ba9891856b86bc9f718cf2f1f773bdf6",
        "patch": "@@ -28,6 +28,7 @@\n #include <txmempool.h>\n #include <ui_interface.h>\n #include <util/system.h>\n+#include <util/translation.h>\n #include <validation.h>\n #include <warnings.h>\n \n@@ -54,7 +55,7 @@ namespace {\n class NodeImpl : public Node\n {\n public:\n-    void initError(const std::string& message) override { InitError(message); }\n+    void initError(const std::string& message) override { InitError(Untranslated(message)); }\n     bool parseParameters(int argc, const char* const argv[], std::string& error) override\n     {\n         return gArgs.ParseParameters(argc, argv, error);"
      },
      {
        "sha": "9cfde9502d46cd57dbb24ed34ecc13c3d1a8af81",
        "filename": "src/ui_interface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/src/ui_interface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/src/ui_interface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.cpp?ref=7e923d47ba9891856b86bc9f718cf2f1f773bdf6",
        "patch": "@@ -53,10 +53,9 @@ void CClientUIInterface::NotifyBlockTip(bool b, const CBlockIndex* i) { return g\n void CClientUIInterface::NotifyHeaderTip(bool b, const CBlockIndex* i) { return g_ui_signals.NotifyHeaderTip(b, i); }\n void CClientUIInterface::BannedListChanged() { return g_ui_signals.BannedListChanged(); }\n \n-\n-bool InitError(const std::string& str)\n+bool InitError(const bilingual_str& str)\n {\n-    uiInterface.ThreadSafeMessageBox(Untranslated(str), \"\", CClientUIInterface::MSG_ERROR);\n+    uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_ERROR);\n     return false;\n }\n "
      },
      {
        "sha": "132866cc5ac2cece11388827fdf36b9edd223454",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=7e923d47ba9891856b86bc9f718cf2f1f773bdf6",
        "patch": "@@ -120,10 +120,11 @@ class CClientUIInterface\n };\n \n /** Show warning message **/\n+// TODO: InitWarning() should take a bilingual_str parameter.\n void InitWarning(const std::string& str);\n \n /** Show error message **/\n-bool InitError(const std::string& str);\n+bool InitError(const bilingual_str& str);\n \n extern CClientUIInterface uiInterface;\n "
      },
      {
        "sha": "6f973aab1ccacd939a6092628e9dc3fe1bdb6d69",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=7e923d47ba9891856b86bc9f718cf2f1f773bdf6",
        "patch": "@@ -91,7 +91,7 @@ bool WalletInit::ParameterInteraction() const\n \n     if (gArgs.GetBoolArg(\"-salvagewallet\", false)) {\n         if (is_multiwallet) {\n-            return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-salvagewallet\"));\n+            return InitError(strprintf(Untranslated(\"%s is only allowed with a single wallet file\"), \"-salvagewallet\"));\n         }\n         // Rewrite just private keys: rescan to find transactions\n         if (gArgs.SoftSetBoolArg(\"-rescan\", true)) {\n@@ -108,15 +108,15 @@ bool WalletInit::ParameterInteraction() const\n     // -zapwallettxes implies a rescan\n     if (zapwallettxes) {\n         if (is_multiwallet) {\n-            return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-zapwallettxes\"));\n+            return InitError(strprintf(Untranslated(\"%s is only allowed with a single wallet file\"), \"-zapwallettxes\"));\n         }\n         if (gArgs.SoftSetBoolArg(\"-rescan\", true)) {\n             LogPrintf(\"%s: parameter interaction: -zapwallettxes enabled -> setting -rescan=1\\n\", __func__);\n         }\n     }\n \n     if (gArgs.GetBoolArg(\"-sysperms\", false))\n-        return InitError(\"-sysperms is not allowed in combination with enabled wallet functionality\");\n+        return InitError(Untranslated(\"-sysperms is not allowed in combination with enabled wallet functionality\"));\n \n     return true;\n }"
      },
      {
        "sha": "45841b2ae1a505e1c3acad3386c281ddd7024ec5",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e923d47ba9891856b86bc9f718cf2f1f773bdf6/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=7e923d47ba9891856b86bc9f718cf2f1f773bdf6",
        "patch": "@@ -20,14 +20,14 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n         // The canonical path cleans the path, preventing >1 Berkeley environment instances for the same directory\n         fs::path canonical_wallet_dir = fs::canonical(wallet_dir, error);\n         if (error || !fs::exists(wallet_dir)) {\n-            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\").translated, wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.string()));\n             return false;\n         } else if (!fs::is_directory(wallet_dir)) {\n-            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\").translated, wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), wallet_dir.string()));\n             return false;\n         // The canonical path transforms relative paths into absolute ones, so we check the non-canonical version\n         } else if (!wallet_dir.is_absolute()) {\n-            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\").translated, wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), wallet_dir.string()));\n             return false;\n         }\n         gArgs.ForceSetArg(\"-walletdir\", canonical_wallet_dir.string());\n@@ -49,7 +49,7 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n         WalletLocation location(wallet_file);\n \n         if (!wallet_paths.insert(location.GetPath()).second) {\n-            chain.initError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\").translated, wallet_file));\n+            chain.initError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), wallet_file));\n             return false;\n         }\n \n@@ -58,7 +58,7 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n         bool verify_success = CWallet::Verify(chain, location, salvage_wallet, error_string, warnings);\n         if (!warnings.empty()) chain.initWarning(Join(warnings, \"\\n\", OpTranslated));\n         if (!verify_success) {\n-            chain.initError(error_string.translated);\n+            chain.initError(error_string);\n             return false;\n         }\n     }\n@@ -75,14 +75,14 @@ bool LoadWallets(interfaces::Chain& chain, const std::vector<std::string>& walle\n             std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(chain, WalletLocation(walletFile), error, warnings);\n             if (!warnings.empty()) chain.initWarning(Join(warnings, \"\\n\", OpTranslated));\n             if (!pwallet) {\n-                chain.initError(error.translated);\n+                chain.initError(error);\n                 return false;\n             }\n             AddWallet(pwallet);\n         }\n         return true;\n     } catch (const std::runtime_error& e) {\n-        chain.initError(e.what());\n+        chain.initError(Untranslated(e.what()));\n         return false;\n     }\n }"
      }
    ]
  },
  {
    "sha": "e95e658b8ec6e02229691a1941d688e96d4df6af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTVlNjU4YjhlYzZlMDIyMjk2OTFhMTk0MWQ2ODhlOTZkNGRmNmFm",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-04-11T15:49:19Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-05T01:46:08Z"
      },
      "message": "doc: Do not translate technical or extremely rare errors",
      "tree": {
        "sha": "92e8e710fafccfd270e7dd654503e4aba3500414",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92e8e710fafccfd270e7dd654503e4aba3500414"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e95e658b8ec6e02229691a1941d688e96d4df6af",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl6wxWAACgkQQQEIES5+\nqB/hSg/4t3iPZ+hGjZBNNjGUO8XlZEdRp1g3lMX8Rvm7eJRHTCR/j/9Za7F4NPwA\nXpgOL5uQ/a/idhwy1aUhYFk5nP3jYyVpXNWVMSPAMT7C6RZQDvKbF0Q4zuvOO2gk\nRI16Tep7H/OwDtY82+FY3ZK5rLHxlz1k1K2qB6WUbbLbr/ba1vRCvZuErnWz1keQ\nXuPGKNYq3Q9NkMilFrgGH2maNe/3nWGFmGLSC6Nw9Sfu0QOajwrJgjfymg/d766Y\neveW6nSHzG7c8p8BG+lY3fGrfCExSPPwn1kvqkoDgvVQUYWiRMubHQNVjyWG9dHH\nKhWDGhycFdu5GiiCYmA4krLSkQnr9hLCBbPm2OmSihDsqXc0I1fXKj1C04XWeT4s\nXU5P1cfjHIfeHpMWMxZHX5mEzfCeDLI82igJHy+LpAXoDMnMjxPrDHwp5PApn2ou\n11BGcWcSsxcwHrAcWUrAyPxlT5kaLh9Vg1TKGor51A5v/deriBqa7MkK9V9uDJDN\nApHB1zKfAz+tMwfEEEcMld8KeIUxUETCQTjtLfeLf4dLQL19MtbkCHLSYFoYUHkw\nByI620+JtwfkkS9/RA18PecVFDEaLQrHahVQQwTitnI/DP1Wg6NuEnl+sqeh8qpP\nKBKCPPIgwhbszGL07jbknVn4oGiWNZSaYn4GPc0hK5aIdyMUmg==\n=Qdmy\n-----END PGP SIGNATURE-----",
        "payload": "tree 92e8e710fafccfd270e7dd654503e4aba3500414\nparent 7e923d47ba9891856b86bc9f718cf2f1f773bdf6\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1586620159 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1588643168 +0300\n\ndoc: Do not translate technical or extremely rare errors\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e95e658b8ec6e02229691a1941d688e96d4df6af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e95e658b8ec6e02229691a1941d688e96d4df6af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e95e658b8ec6e02229691a1941d688e96d4df6af/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e923d47ba9891856b86bc9f718cf2f1f773bdf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e923d47ba9891856b86bc9f718cf2f1f773bdf6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e923d47ba9891856b86bc9f718cf2f1f773bdf6"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1931302ddafdb745e72f3aeecf3674aa271cbcbe",
        "filename": "doc/translation_strings_policy.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e95e658b8ec6e02229691a1941d688e96d4df6af/doc/translation_strings_policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e95e658b8ec6e02229691a1941d688e96d4df6af/doc/translation_strings_policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_strings_policy.md?ref=e95e658b8ec6e02229691a1941d688e96d4df6af",
        "patch": "@@ -23,7 +23,8 @@ On a high level, these strings are to be translated:\n \n ### GUI strings\n \n-Anything that appears to the user in the GUI is to be translated. This includes labels, menu items, button texts, tooltips and window titles.\n+Do not translate technical or extremely rare errors.\n+Anything else that appears to the user in the GUI is to be translated. This includes labels, menu items, button texts, tooltips and window titles.\n This includes messages passed to the GUI through the UI interface through `InitMessage`, `ThreadSafeMessageBox` or `ShowProgress`.\n \n General recommendations"
      }
    ]
  },
  {
    "sha": "18bd83b1fee2eb47ed4ad05c91f2d6cc311fc9ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOGJkODNiMWZlZTJlYjQ3ZWQ0YWQwNWM5MWYyZDZjYzMxMWZjOWFk",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-05T01:51:29Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-05T01:51:29Z"
      },
      "message": "util: Cleanup translation.h",
      "tree": {
        "sha": "6947e32ccbff617841b46b43be382d7f089e1816",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6947e32ccbff617841b46b43be382d7f089e1816"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18bd83b1fee2eb47ed4ad05c91f2d6cc311fc9ad",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl6wxqEACgkQQQEIES5+\nqB823xAAjOS+c/hgbDwojHCZwFv1t9//ojjp9pXx7xaJb5/3HAoFKFdI0XCCRMLf\nDp7N1LJO9FcNMa6zlATLBpd5GIS/nbZCNWwQkOpqE06r0Aob1MgDWih82YHF1tg/\nHcSlSPEmAFZ0RSu7fHWzd5XbI9Nc6ofKCaU84QhXAfPLWPEqUXA8Rp4tpMJ9ZRtg\nHkGWaZfWE+KvUyFadTvnxsXyjfQQpBVmydhRbapxZCHRlyKHquEAEE7cNxJXl2qo\nmVpUY99wRs3339WNRfUOkkoYm4NP7noU8BKmkF31C2lkfOhZ+ZxwgBaVCNTTgDm+\nHersh2jezktS+GjmaJTczhyoryZWN6tgtG4oDwscNWOVaJvtJ7WGWzVLwJ/zfAIU\nm1tOcdlidUtrxrbiZ3sLSmrqM9bOL1qhHcBlPzcQwEgmdvYDnH4WyV6Rzka0c+JQ\nH532W/6yayLVcrKRRSoLBuJ3BtuVAyNKQ4WAEjG9jB7NxH4BTihu8uElXfqciWck\nNQxkqJ7ylmA+pj9mFHOtMEQWjU3hnOUPb2k7iyUYrFXQ/kv7PCHWiinQ3C2HE03r\nv/3AaNEy4UU2gCDLUz2SKgvBj3Ol+Dirv3tfO7ZlDDtduQkqVwEjDaC/BxS3kutJ\nUpo8maT9nhLiKebLaW3k1uVWE82v8ssqJJ6pmlselC7Ng0X0rEc=\n=vApf\n-----END PGP SIGNATURE-----",
        "payload": "tree 6947e32ccbff617841b46b43be382d7f089e1816\nparent e95e658b8ec6e02229691a1941d688e96d4df6af\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1588643489 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1588643489 +0300\n\nutil: Cleanup translation.h\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18bd83b1fee2eb47ed4ad05c91f2d6cc311fc9ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18bd83b1fee2eb47ed4ad05c91f2d6cc311fc9ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18bd83b1fee2eb47ed4ad05c91f2d6cc311fc9ad/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e95e658b8ec6e02229691a1941d688e96d4df6af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e95e658b8ec6e02229691a1941d688e96d4df6af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e95e658b8ec6e02229691a1941d688e96d4df6af"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "45595405e727b5a184aee74453fe27460c249226",
        "filename": "src/util/translation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18bd83b1fee2eb47ed4ad05c91f2d6cc311fc9ad/src/util/translation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18bd83b1fee2eb47ed4ad05c91f2d6cc311fc9ad/src/util/translation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/translation.h?ref=18bd83b1fee2eb47ed4ad05c91f2d6cc311fc9ad",
        "patch": "@@ -26,11 +26,11 @@ inline bilingual_str operator+(const bilingual_str& lhs, const bilingual_str& rh\n }\n \n /** Mark a bilingual_str as untranslated */\n-inline static bilingual_str Untranslated(std::string original) { return {original, original}; }\n+inline bilingual_str Untranslated(std::string original) { return {original, original}; }\n /** Unary operator to return the original */\n-inline static std::string OpOriginal(const bilingual_str& b) { return b.original; }\n+inline std::string OpOriginal(const bilingual_str& b) { return b.original; }\n /** Unary operator to return the translation */\n-inline static std::string OpTranslated(const bilingual_str& b) { return b.translated; }\n+inline std::string OpTranslated(const bilingual_str& b) { return b.translated; }\n \n namespace tinyformat {\n template <typename... Args>"
      }
    ]
  }
]