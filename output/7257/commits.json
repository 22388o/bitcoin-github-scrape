[
  {
    "sha": "5e109225aede0333a9c58915d8a92ea98a00c45b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTEwOTIyNWFlZGUwMzMzYTljNTg5MTVkOGE5MmVhOThhMDBjNDVi",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-26T08:01:55Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-12-26T08:04:03Z"
      },
      "message": "Combine common error strings for different options so translations can be shared and reused",
      "tree": {
        "sha": "31b9de52bb01f32bb0e3b131cd02fa3aba20e24e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31b9de52bb01f32bb0e3b131cd02fa3aba20e24e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e109225aede0333a9c58915d8a92ea98a00c45b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e109225aede0333a9c58915d8a92ea98a00c45b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e109225aede0333a9c58915d8a92ea98a00c45b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e109225aede0333a9c58915d8a92ea98a00c45b/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a46f87f0c17323d8853d95f8ea99f8fb0f3bda1a"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 17,
      "deletions": 7
    },
    "files": [
      {
        "sha": "0e4cae88608ac1d782272e5bd6df8af3435f094f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 7,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e109225aede0333a9c58915d8a92ea98a00c45b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e109225aede0333a9c58915d8a92ea98a00c45b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5e109225aede0333a9c58915d8a92ea98a00c45b",
        "patch": "@@ -755,6 +755,16 @@ void InitParameterInteraction()\n     }\n }\n \n+static std::string ResolveErrMsg(const char * const optname, const std::string& strBind)\n+{\n+    return strprintf(_(\"Cannot resolve -%s address: '%s'\"), optname, strBind);\n+}\n+\n+static std::string AmountErrMsg(const char * const optname, const std::string& strValue)\n+{\n+    return strprintf(_(\"Invalid amount for -%s=<amount>: '%s'\"), optname, strValue);\n+}\n+\n void InitLogging()\n {\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n@@ -948,7 +958,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         if (ParseMoney(mapArgs[\"-minrelaytxfee\"], n) && n > 0)\n             ::minRelayTxFee = CFeeRate(n);\n         else\n-            return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"]));\n+            return InitError(AmountErrMsg(\"minrelaytxfee\", mapArgs[\"-minrelaytxfee\"]));\n     }\n \n     fRequireStandard = !GetBoolArg(\"-acceptnonstdtxn\", !Params().RequireStandard());\n@@ -962,13 +972,13 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         if (ParseMoney(mapArgs[\"-mintxfee\"], n) && n > 0)\n             CWallet::minTxFee = CFeeRate(n);\n         else\n-            return InitError(strprintf(_(\"Invalid amount for -mintxfee=<amount>: '%s'\"), mapArgs[\"-mintxfee\"]));\n+            return InitError(AmountErrMsg(\"mintxfee\", mapArgs[\"-mintxfee\"]));\n     }\n     if (mapArgs.count(\"-paytxfee\"))\n     {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(mapArgs[\"-paytxfee\"], nFeePerK))\n-            return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s'\"), mapArgs[\"-paytxfee\"]));\n+            return InitError(AmountErrMsg(\"paytxfee\", mapArgs[\"-paytxfee\"]));\n         if (nFeePerK > nHighTransactionFeeWarning)\n             InitWarning(_(\"-paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n         payTxFee = CFeeRate(nFeePerK, 1000);\n@@ -982,7 +992,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     {\n         CAmount nMaxFee = 0;\n         if (!ParseMoney(mapArgs[\"-maxtxfee\"], nMaxFee))\n-            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s'\"), mapArgs[\"-maptxfee\"]));\n+            return InitError(AmountErrMsg(\"maxtxfee\", mapArgs[\"-maptxfee\"]));\n         if (nMaxFee > nHighTransactionMaxFeeWarning)\n             InitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n         maxTxFee = nMaxFee;\n@@ -1188,13 +1198,13 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             BOOST_FOREACH(const std::string& strBind, mapMultiArgs[\"-bind\"]) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n-                    return InitError(strprintf(_(\"Cannot resolve -bind address: '%s'\"), strBind));\n+                    return InitError(ResolveErrMsg(\"bind\", strBind));\n                 fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n             }\n             BOOST_FOREACH(const std::string& strBind, mapMultiArgs[\"-whitebind\"]) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, 0, false))\n-                    return InitError(strprintf(_(\"Cannot resolve -whitebind address: '%s'\"), strBind));\n+                    return InitError(ResolveErrMsg(\"whitebind\", strBind));\n                 if (addrBind.GetPort() == 0)\n                     return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n                 fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR | BF_WHITELIST));\n@@ -1214,7 +1224,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         BOOST_FOREACH(const std::string& strAddr, mapMultiArgs[\"-externalip\"]) {\n             CService addrLocal(strAddr, GetListenPort(), fNameLookup);\n             if (!addrLocal.IsValid())\n-                return InitError(strprintf(_(\"Cannot resolve -externalip address: '%s'\"), strAddr));\n+                return InitError(ResolveErrMsg(\"externalip\", strAddr));\n             AddLocal(CService(strAddr, GetListenPort(), fNameLookup), LOCAL_MANUAL);\n         }\n     }"
      }
    ]
  }
]