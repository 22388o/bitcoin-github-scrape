laanwj,2020-06-09 14:08:48,Code review ACK 4c4df6bf61104a4946479fccc7885dc0fe05dbd8,https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-641322171,641322171,
sipa,2020-06-09 14:52:58,"@luke-jr I don't think that's necessary. They (by default) have a 24 hour limit only, and during that time, they will just be treated as a real ban instead of a discouragement.",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-641349507,641349507,
jnewbery,2020-06-10 00:08:18,"This seems like an improvement, but it leaves the `BanMan` with a slightly odd and inconsistent interface:\n\n- `Ban()` has an enum as its second parameter, but that parameter is only ever set to `BanReasonManuallyAdded`\n- If `IsBanned()` is called with an address, it returns whether an address is discouraged or banned. If it's called with a subnet, it returns if it's banned, but not discourag",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-641643725,641643725,
sipa,2020-06-10 00:12:53,"@jnewbery Most of those things are no longer true, apart from the BanReason being superfluous now (there is a separate IsBannedOrDiscouraged). I think a follow-up can remove BanReason altogether, but I think it's preferable to not have a SetBanLevel - discouragement and banning are very different concepts (and it wouldn't be unreasonable to move discouragement elsewhere entirely).",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-641644913,641644913,
DrahtBot,2020-06-10 01:24:53,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19316 ([net] Cleanup logic around connection types by amitiuttarwar)\n* #19315 ([tests] Allow outbound & block-relay-only",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-641664852,641664852,
naumenkogs,2020-06-10 13:13:47,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-641999691,641999691,
pstratem,2020-06-10 18:12:09,@jnewbery agreed that the interface is a little odd now but think that should be dealt with in a separate pr,https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-642175291,642175291,
cculianu,2020-06-10 18:56:47,You really should add a benchmark for this..,https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-642196131,642196131,
cculianu,2020-06-10 19:20:37,What happens if someone floods the filter with a big block of 1 million IPv6 addresses? ,https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-642207388,642207388,
sipa,2020-06-10 19:33:10,"Rolling Bloom filters only keep the last N elements added; 50000 in this case. Their performance is not affected by how many elements are kept.\n\nSo worst case, being flooded with IPs would reduce the effectiveness of the filter in keeping broken peers out.",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-642213438,642213438,
cculianu,2020-06-10 19:43:00,"Right, so you can flood the filter with even something like 150k inserts, saturate it to always return false positive, and then all peers are ""equally discouraged"" (meaning you have no ban policy anymore)....\n",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-642218185,642218185,
sipa,2020-06-10 19:45:35,"No, the false positive rate never goes above the specified one (0.000001 in this case). The rolling aspect discards old entries.",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-642219432,642219432,
jnewbery,2020-06-10 19:47:04,"@cculianu - I suggest you take a look at the `CRollingBloomFilter` implementation. The rolling bloom filter is actually multiple generations of bloom filters, so you can't saturate it by adding many entries. It'll just discard the oldest generation when it reaches (max entries * 3/2).",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-642220132,642220132,
cculianu,2020-06-10 20:20:04,"Indeed, thanks for the explanation.",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-642235845,642235845,
cculianu,2020-06-10 20:39:16,"Ok, so basically:\n\n- this is as if you had a typical hash table implementation clamped to 75k most recent entries\n- but it has no ability to unban\n- it only eats about 67k memory\n- small tiny chance of false positives.\n- slightly slower insertions and lookups than a hash table, but not monstrously so.\n\nGot it.  Thanks.\n",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-642245289,642245289,
sipa,2020-06-10 20:44:09,"@cculianu Indeed. Your numbers are a bit off: it only guarantees 50000 entries (it keeps up to 75000, but the last 25000 are removed whenever that number is exceeded). It also uses around 528 KiB (at an fprate of 1/1000000).",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-642247743,642247743,
cculianu,2020-06-10 20:49:37,"Oh right.. it's 67k uint64's -> 528KiB.  My bad.\n\nHmm.  For ~800KiB you could have just implemented a regular hash table (std::unordered_map, etc) or a std::unordered_set, clamped it to 50k items, and then had the ability to query it, iterate over it, show it in the UI, and/or remove individual items.\n",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-642250414,642250414,
sipa,2020-06-10 20:53:48,"@cculianu Yeah, we do have a limitedmap data structure that implements effectively that. Its memory usage is significantly worse though (because every entry in the map needs several pointers, plus dynamic allocation overhead). If I recall the number correctly it would be 4 MiB at least for 50000 entries.",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-642252444,642252444,
cculianu,2020-06-10 21:33:43,"I'm aware of that data structure but it's not a hash table, it's a red-black tree based map, which also stores a reverse-map as well.  It's not very efficient for this situation...\n\nYou can probably get away with just a straight hash table (unordered_map) with some wrapper that periodically sweeps it to clamp it to some max size -- probably just remove the oldest entries by creation time.  Whi",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-642279750,642279750,
sipa,2020-06-10 21:38:15,"Hash table or red-black tree doesn't matter much. It's (table size + 2 pointers + alloc overhead per entry) or (3 pointers + 1 int + alloc overhead per entry), and in both cases you need a way to iterate efficiently in order of insertion (either through a separate map like limitedmap does, or by doubly-linking the elements together like is supported by boost::multi_index). Even if you don't do tha",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-642281599,642281599,
pstratem,2020-06-10 23:51:14,ACK 4131caf2431054adf9ad6641386dfbe922af0dc5,https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-642324926,642324926,
sipa,2020-06-11 00:52:47,"I've made a few changes suggested by @jnewbery. The PR is now split into two commits:\n* The first is a minimal change that implements the new behavior (smaller than the previous PR), plus release notes and RPC documentation changes.\n* The seconds makes the distinction between discouraging and banning much cleaner in the interface, removing BanReason altogether.\n\nI'm happy to split off the ",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-642341655,642341655,
pstratem,2020-06-11 06:00:53,ACK 0778faa584871010c82db84c9d54d1353a91a37c,https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-642427063,642427063,
jnewbery,2020-06-11 21:26:22,There are quite a few places where comments/names/logs are now out of date. Commit here: https://github.com/jnewbery/bitcoin/tree/pr19219.2 gets most of them I think.,https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-642935950,642935950,
sipa,2020-06-18 05:28:10,"@jnewbery I've incorporated most of the changes from your branch (split out over both commits).\n\nI dropped the PF_NOBAN -> PF_NODISCOURAGE change, because that capability also protects against bans.",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-645782691,645782691,
jnewbery,2020-06-18 20:00:03,utACK 250e8acc7df63430f73099549d18d707844c08a8,https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-646276515,646276515,
jnewbery,2020-06-18 20:46:08,utACK 0ba85217caa333021cf04eb5cff9770f3152c287,https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-646296724,646296724,
jnewbery,2020-06-20 01:54:42,utACK 2605bdd220b118fe3cac6a9cebb673cf651e273c,https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-646919685,646919685,
jonatack,2020-06-20 07:10:45,"Code review re-ACK 2605bdd per git diff `0ba8521 2605bdd` changes since last review are documentation and help improvements and a code change to clarify that only discouragement affects the `bool CNode::m_prefer_eviction` value for peers, as we don't accept connections from banned peers.",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-646955760,646955760,
sipa,2020-07-01 22:53:02,"@amitiuttarwar Thanks for the review. I've addresses all of your comments, I think. As for your overall suggestion around ""discouraging"" as a term, do you mean that primarily in RPC/log interface, or in code symbol names/comments? If there are small changes you see that can improve the interface it may be worth including them here, as they may become harder to change later.\n\nI don't feel like ",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-652684340,652684340,
sipa,2020-07-01 22:57:59,"Oh, vaguely related: @gmaxwell and I working on designing/implementing a rolling cuckoo filter (see [this paper](https://www.cs.cmu.edu/~dga/papers/cuckoo-conext2014.pdf)), which would be a drop-in replacement for the rolling bloom filters we have, but around 3x smaller. However, they also support deletion, which may be useful if we'd ever want a set of RPCs to actually manage discouragement (sepa",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-652685715,652685715,
jnewbery,2020-07-01 23:48:49,"> I don't feel like touching the banscore option and RPC field, as I think they should go away...\n\nTotally agree on these. It seems to me that historically there are two reasons that configuration options get added:\n\n1. Different users require different functionality from the system, and the configuration controls those different functionalities.\n2. All (or _virtually all_) users require",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-652699592,652699592,
amitiuttarwar,2020-07-02 02:08:15,"> As for your overall suggestion around ""discouraging"" as a term, do you mean that primarily in RPC/log interface, or in code symbol names/comments? If there are small changes you see that can improve the interface it may be worth including them here, as they may become harder to change later.\n\nWas referring to code internals too, so symbols/comments. I proposed my identified small changes to ",https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-652737093,652737093,
naumenkogs,2020-07-07 11:26:14,utACK 2ad58381fffb33d611abf900b73d9e6b5a4e35f8,https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-654788810,654788810,
amitiuttarwar,2020-07-07 17:44:40,code review ACK 2ad58381ff,https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-655020777,655020777,
fanquake,2020-07-08 01:47:34,I've added this for backport in #19224.,https://github.com/bitcoin/bitcoin/pull/19219#issuecomment-655231321,655231321,
jonatack,2020-06-09 09:23:00,A comment on the choice of nElements and nFPRate may be good here. These are the same as for `filterInventoryKnown`.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r437267147,437267147,src/banman.h
pstratem,2020-06-09 18:55:10,"it feels a bit odd to treat what is essentially an enum (0/1/2) as an int like this, suggest replacing with a conditional returning 1/0 explicitly",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r437648963,437648963,src/banman.cpp
jasonbcox,2020-06-09 21:25:12,Looks like `ClearBanned()` should call `m_discouraged.reset()` otherwise the `clearbanned` RPC no longer does what users expect.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r437731526,437731526,src/banman.h
sipa,2020-06-09 21:31:11,"I considered that, but I think it would be counterintuitive. Discouragement isn't exposed as bans (it's not visible or accessible in RPCs or UI) as it's a completely automatic process, so I think that exposing a way to clear it would violate that abstraction.",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r437734287,437734287,src/banman.h
jasonbcox,2020-06-09 21:37:10,"I see. The current implementation may introduce subtle bugs then, especially considering that `IsBanned()` is now unintuitively named. `setban ""someIP"" ""add""` may return `Error: IP/Subnet already banned` for instance.",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r437736947,437736947,src/banman.h
jnewbery,2020-06-09 21:55:44,Should this have a `GUARDED_BY(m_cs_banned)` lock annotation?,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r437744807,437744807,src/banman.h
sipa,2020-06-09 23:13:12,"Ok, added an explicit `? 1 : 0`.",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r437772412,437772412,src/banman.cpp
sipa,2020-06-09 23:13:40,Nice catch. I've addressed it by adding a separate `IsBannedOrDiscouraged` that's distinct from `IsBanned`.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r437772571,437772571,src/banman.h
sipa,2020-06-09 23:13:49,Done.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r437772648,437772648,src/banman.h
luke-jr,2020-06-11 04:35:31,"Since they're not really bans, let's not call them bans in docs?",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r438537628,438537628,doc/release-notes-19219.md
pstratem,2020-06-11 05:45:13,maybe this should me two checks so the log can indicate ban/discouraged,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r438554928,438554928,src/net.cpp
jonatack,2020-06-11 11:13:57,"b6a34484 nit: omit ""that""",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r438711333,438711333,src/banman.h
jonatack,2020-06-11 11:14:58,"b6a34484 For my understanding, ""rumour"" == gossip?",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r438711751,438711751,src/banman.h
jonatack,2020-06-11 11:26:21,"b6a34484 Should also remove `ban_reason` from the help at line 650, I believe, and update the release notes that this has been removed from `listbanned`.",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r438717008,438717008,src/rpc/net.cpp
jonatack,2020-06-11 12:20:17,"0778faa perhaps update the code doc\n```diff\n-    // Don't accept connections from banned peers, but if our inbound slots aren't almost full, accept\n-    // if the only banning reason was an automatic misbehavior ban.\n+    // Don't accept connections from banned peers, nor from discouraged peers if\n+    // our inbound slots are almost full.\n```",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r438741761,438741761,src/net.cpp
jonatack,2020-06-11 12:41:37,"0778faa5\nFor determining if the inbounds are nearly full, should the comparison operator be reversed?\n```diff\n- (banned || (discouraged && nInbound + 1 < nMaxInbound)))\n+ (banned || (nInbound + 1 >= nMaxInbound && discouraged)))\n```",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r438752687,438752687,src/net.cpp
luke-jr,2020-06-11 20:27:00,"I think it would be useful to have a way to clear only the misbehaving filter, but perhaps that is best left for a followup PR.",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r439052719,439052719,doc/release-notes-19219.md
sipa,2020-06-18 05:24:01,I think this is improved now with @jnewbery's changes.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r441975010,441975010,doc/release-notes-19219.md
sipa,2020-06-18 05:24:47,This has been rewritten following a suggestion by @pstratem below.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r441975184,441975184,src/net.cpp
sipa,2020-06-18 05:25:25,This is gone.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r441975459,441975459,src/banman.h
sipa,2020-06-18 05:25:35,This is gone.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r441975507,441975507,src/banman.h
sipa,2020-06-18 05:25:44,Done.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r441975555,441975555,src/rpc/net.cpp
sipa,2020-06-18 05:26:11,"This has been split up, so I don't think this applies anymore.",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r441975668,441975668,src/net.cpp
sipa,2020-06-18 05:26:22,Agree.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r441975725,441975725,doc/release-notes-19219.md
jnewbery,2020-06-18 18:02:21,"Note for reviewers: this means that if any peers are discouraged at the time that the node was last shut down pre-upgrade, they'll be loaded as banned post-upgrade. They'll clear automatically after 24 hours, so I think this is ok.",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442407361,442407361,src/addrdb.h
jnewbery,2020-06-18 18:07:35,"It should be very straightforward to unify the `Ban()` public functions and `IsBanned()` public functions so that the caller always passes in a (possibly /32) subnet. That would actually make the calling code in `setban` simpler.\n\nThis is out of scope for this PR, but could be done in a follow-up.",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442410269,442410269,src/banman.h
jnewbery,2020-06-18 18:10:28,"or'ing with `banned` is confusing here. After this PR, banning and discouraging are totally separated concepts, but this code signals that discouraging is a superset of banning.",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442411846,442411846,src/net.cpp
jnewbery,2020-06-18 18:16:52,"This would be easier to read if `(m_banman .... )` conditional was on its own line, so it's easier to see that the `||` within that conditional is not at the top level.",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442415282,442415282,src/net.cpp
jnewbery,2020-06-18 18:20:03,"You added logging here in the first commit and then (accidentally, I think) removed it in the second.",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442417041,442417041,src/net_processing.cpp
jnewbery,2020-06-18 18:31:55,"nit: the parens are in the wrong place - this should say ""(see Misbehaving() in net_processing.cpp)\n\nSorry, this is my fault!",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442423477,442423477,src/banman.h
jnewbery,2020-06-18 18:32:56,This line should be removed (sorry - this was from my branch when I was referring to automatic banning),https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442424037,442424037,src/rpc/net.cpp
sipa,2020-06-18 19:17:17,I was trying to avoid a call to IsDiscouraged if the peer is already banned. I moved it to accomplish something similar. I think it's clearer now.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442447314,442447314,src/net.cpp
sipa,2020-06-18 19:17:36,Done.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442447464,442447464,src/net.cpp
sipa,2020-06-18 19:17:44,Fixed.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442447535,442447535,src/banman.h
sipa,2020-06-18 19:18:04,Fixed.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442447693,442447693,src/net_processing.cpp
sipa,2020-06-18 19:18:16,Done.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442447784,442447784,src/rpc/net.cpp
MarcoFalke,2020-06-18 20:46:16,Have the release notes been updated with this breaking RPC change?,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442492761,442492761,src/rpc/net.cpp
jonatack,2020-06-19 15:30:08,"36db81e Thoughts:\n\n`-bantime` help would now print\n```\n-bantime=<n>\n       Default bantime for manually configured bans (default: 86400)\n```\n\n- ""Default"": only the case if this config arg is not passed\n- It would be helpful to continue providing the units (seconds)\n\nPerhaps `""Bantime in seconds for manually configured bans (default: %u)""`",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442906534,442906534,src/init.cpp
jonatack,2020-06-19 15:33:29,36db81e nit: `s/subets/subnets/`,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442908348,442908348,src/banman.h
jonatack,2020-06-19 15:43:44,"perhaps: ""after 24 hours or a user's `-bantime` setting.""",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442913589,442913589,doc/release-notes-19219.md
jonatack,2020-06-19 15:45:31,"36db81e The release note looks great.\n\nOne thought: we're talking about discouraging misbehavior rather than banning. I wonder if a more accurate title is possible here, e.g. ""Changes regarding misbehaving peers"" or ""Discouraging misbehaving peers.""",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442914450,442914450,doc/release-notes-19219.md
jonatack,2020-06-19 15:48:26,"36db81e if this change is long-lasting, the `-banscore` config arg and getpeerinfo field name may need to be gradually renamed to avoid confusion with banning and `-bantime` (the log output is already being changed in this commit from ""BAN"" to ""DISCOURAGE"")",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442915997,442915997,src/init.cpp
jonatack,2020-06-19 18:07:27,"The conditional for determining if the inbounds are nearly full, per previous review https://github.com/bitcoin/bitcoin/pull/19219#discussion_r438752687, now seems correct.",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r442979680,442979680,src/net.cpp
cculianu,2020-06-19 22:52:43,What if they are `PF_NOBAN` yet these flags happen to be set.. in that case `m_prefer_evict` will be set... even though they are `PF_NOBAN`.. is that acceptable and/or intentional?,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r443070746,443070746,src/net.cpp
sipa,2020-06-19 23:11:49,Fixed.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r443074215,443074215,src/rpc/net.cpp
sipa,2020-06-19 23:12:50,"I don't understand what your comment on the use of ""default"" is about. It can be overridden by providing an RPC argument.\n\nI've added seconds back.",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r443074356,443074356,src/init.cpp
sipa,2020-06-19 23:12:57,Fixed.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r443074380,443074380,src/banman.h
sipa,2020-06-19 23:13:04,Done.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r443074413,443074413,doc/release-notes-19219.md
sipa,2020-06-19 23:13:11,Done.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r443074436,443074436,doc/release-notes-19219.md
sipa,2020-06-19 23:13:34,I think `banscore` should die a swift death (but not in this PR).,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r443074487,443074487,src/init.cpp
sipa,2020-06-19 23:13:49,Ok.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r443074517,443074517,src/net.cpp
sipa,2020-06-19 23:14:58,"PF_NOBAN peers are already except from eviction entirely, so the value of the `m_prefer_evict` field has no meaning for them.\n\nThe code here is just maintaining the existing semantics (current master also sets `m_prefer_evict` for (auto)banned peers with PF_NOBAN).",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r443074710,443074710,src/net.cpp
jonatack,2020-06-20 06:51:15,"Thanks. The two uses of ""default"" with different meanings in the same sentence (default for manual bans and default for this setting, e.g. the default for the default) seemed confusing to me. That said, reading it with ""(in seconds)"" now separating the two seems better.",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r443107637,443107637,src/init.cpp
narula,2020-06-22 22:53:42,"nit: I think this change makes more sense in the previous commit, since that's where you added the assert.",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r443868261,443868261,src/banman.cpp
amitiuttarwar,2020-06-25 21:40:11,nit: I'd prefer if this was moved up in the file so the two `IsBanned` functions could be next to each other ,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r445854050,445854050,src/banman.cpp
amitiuttarwar,2020-06-26 13:23:13,"I find this name misleading since this function doesn't just check, it takes the critical actions (initiating add to discourage filter, peer disconnect). I don't have any suggestions I love, but some ideas are `ConsiderDiscourageAndDisconnect` or `MaybeDiscourageAndDisconnect`, in line with naming conventions from other net processing functions ",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r446180687,446180687,src/net_processing.cpp
sipa,2020-06-26 20:06:47,"Agreed. Will fix if there are more changes requested, but I don't think this is worth breaking ACKs for.",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r446386146,446386146,src/banman.cpp
amitiuttarwar,2020-06-26 23:17:24,"hm, I find the previous description of ""bantime"" (time to disallow reconnect) more helpful than repeating the word\n\nconsider: `Default time (in seconds) to disallow manually configured bans from reconnecting`",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r446448578,446448578,src/init.cpp
amitiuttarwar,2020-06-27 00:51:10,"nice release notes. I have a suggestion for a small change that would help with logical clarity.  \n\nwhen I initially read these release notes, I didn't understand if the discouraged address behaviors were (A) now different than banned, but functionally the same as before or (B) changes in functionality. After reading the code I understand that the first part is the same (logic for managing con",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r446463595,446463595,doc/release-notes-19219.md
amitiuttarwar,2020-06-27 01:05:04,thanks for this awesome overview! ,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r446465208,446465208,src/banman.h
amitiuttarwar,2020-06-27 01:43:56,"whats the process for changing config args? do we go through a deprecation cycle? (and is this documented anywhere? I couldn't find it)\n\n@sipa when you say _die a swift death_ do you mean more than rename? ",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r446469138,446469138,src/init.cpp
amitiuttarwar,2020-06-27 01:49:03,"```suggestion\nIncrement peer's misbehavior score. If the new value surpasses banscore (specified on startup or by default), mark node to be discouraged, meaning the peer might be disconnected & added to the discouragement filter.\n```",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r446469629,446469629,src/net_processing.cpp
sipa,2020-07-01 22:48:09,Done.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r448654791,448654791,src/banman.cpp
sipa,2020-07-01 22:48:18,Done.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r448654847,448654847,src/banman.cpp
sipa,2020-07-01 22:48:33,Changed to `MaybeDiscourageAndDisconnect`.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r448654929,448654929,src/net_processing.cpp
sipa,2020-07-01 22:48:42,Done.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r448654957,448654957,src/init.cpp
sipa,2020-07-01 22:49:53,"Agree, the text didn't make that clear. I've changed it to ""Furthermore, a few additional changes to how discouraged addressed are treated are introduced:"". LMK what you think.",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r448655327,448655327,doc/release-notes-19219.md
sipa,2020-07-01 22:50:07,Thank @jnewbery!,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r448655397,448655397,src/banman.h
sipa,2020-07-01 22:50:19,Done.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r448655482,448655482,src/net_processing.cpp
amitiuttarwar,2020-07-01 23:39:19,looks good ,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r448670158,448670158,doc/release-notes-19219.md
jnewbery,2020-07-03 01:11:11,why change this to %lu? `DEFAULT_MISBEHAVING_BANTIME` isn't a long,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r449330025,449330025,src/init.cpp
jonatack,2020-07-03 03:47:19,"s/addressed/addresses/\n\nSuggestion:\n\n""Furthermore, a few additional changes are introduced to how discouraged addresses are treated:""",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r449361672,449361672,doc/release-notes-19219.md
jonatack,2020-07-03 04:27:14,"True, though the printed value is unchanged.\n\nProposed simplification if you retouch:\n\ncurrent\n```\n       Default time (in seconds) to disallow manually configured bans from\n       reconnecting (default: 86400)\n```\nproposed\n```\n       Default duration (in seconds) of manually configured bans (default: 86400)\n```",https://github.com/bitcoin/bitcoin/pull/19219#discussion_r449369309,449369309,src/init.cpp
sipa,2020-07-04 03:12:07,Fixed. I suspect the %lu was just muscle memory...,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r449733245,449733245,src/init.cpp
sipa,2020-07-04 03:12:14,Done.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r449733248,449733248,doc/release-notes-19219.md
jnewbery,2020-07-06 20:32:54,This appears to be slightly less defensive since it's not checking that `m_banman` has been assigned before dereferencing it. It's fine because `m_banman` is always set in `CConnman::Init()` from the value in `connOptions.m_banman` (which is itself always set in `AppInitMain()`.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r450464303,450464303,src/net.cpp
sipa,2020-07-07 00:59:07,Let's fix that later.,https://github.com/bitcoin/bitcoin/pull/19219#discussion_r450554242,450554242,src/net.cpp
