[
  {
    "sha": "b691f2df5f7d443c0c9ee056ab94aa0fc19566d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjkxZjJkZjVmN2Q0NDNjMGM5ZWUwNTZhYjk0YWEwZmMxOTU2NmQ1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-06-09T01:46:53Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-04T03:43:55Z"
      },
      "message": "Replace automatic bans with discouragement filter\n\nThis patch improves performance and resource usage around IP\naddresses that are banned for misbehavior. They're already not\nactually banned, as connections from them are still allowed,\nbut they are preferred for eviction if the inbound connection\nslots are full.\n\nStop treating these like manually banned IP ranges, and instead\njust keep them in a rolling Bloom filter of misbehaving nodes,\nwhich isn't persisted to disk or exposed through the ban\nframework. The effect remains the same: preferred for eviction,\navoided for outgoing connections, and not relayed to other peers.\n\nAlso change the name of this mechanism to better reflect reality;\nthey're not banned, just discouraged.\n\nContains release notes and several interface improvements by\nJohn Newbery.",
      "tree": {
        "sha": "00f4cdae9cd0ea068634de9d910229123e7e7847",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00f4cdae9cd0ea068634de9d910229123e7e7847"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3276c148c4cac7b7c9adbaab5997b26488612085",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3276c148c4cac7b7c9adbaab5997b26488612085",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3276c148c4cac7b7c9adbaab5997b26488612085"
      }
    ],
    "stats": {
      "total": 135,
      "additions": 91,
      "deletions": 44
    },
    "files": [
      {
        "sha": "b5ee885ddc3a69ddc30aa321010f33e228aa326d",
        "filename": "doc/release-notes-19219.md",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/doc/release-notes-19219.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/doc/release-notes-19219.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-19219.md?ref=b691f2df5f7d443c0c9ee056ab94aa0fc19566d5",
        "patch": "@@ -0,0 +1,23 @@\n+#### Changes regarding misbehaving peers\n+\n+Peers that misbehave (e.g. send us invalid blocks) are now referred to as\n+discouraged nodes in log output, as they're not (and weren't) strictly banned:\n+incoming connections are still allowed from them, but they're preferred for\n+eviction.\n+\n+Furthermore, a few additional changes are introduced to how discouraged\n+addresses are treated:\n+\n+- Discouraging an address does not time out automatically after 24 hours\n+  (or the `-bantime` setting). Depending on traffic from other peers,\n+  discouragement may time out at an indeterminate time.\n+\n+- Discouragement is not persisted over restarts.\n+\n+- There is no method to list discouraged addresses. They are not returned by\n+  the `listbanned` RPC. That RPC also no longer reports the `ban_reason`\n+  field, as `\"manually added\"` is the only remaining option.\n+\n+- Discouragement cannot be removed with the `setban remove` RPC command.\n+  If you need to remove a discouragement, you can remove all discouragements by\n+  stop-starting your node."
      },
      {
        "sha": "2d14433f68058a73a577773eb43bc17186a156a8",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=b691f2df5f7d443c0c9ee056ab94aa0fc19566d5",
        "patch": "@@ -74,25 +74,24 @@ int BanMan::IsBannedLevel(CNetAddr net_addr)\n     // 0 - Not banned\n     // 1 - Automatic misbehavior ban\n     // 2 - Any other ban\n-    int level = 0;\n     auto current_time = GetTime();\n     LOCK(m_cs_banned);\n     for (const auto& it : m_banned) {\n         CSubNet sub_net = it.first;\n         CBanEntry ban_entry = it.second;\n \n         if (current_time < ban_entry.nBanUntil && sub_net.Match(net_addr)) {\n-            if (ban_entry.banReason != BanReasonNodeMisbehaving) return 2;\n-            level = 1;\n+            return 2;\n         }\n     }\n-    return level;\n+    return m_discouraged.contains(net_addr.GetAddrBytes()) ? 1 : 0;\n }\n \n bool BanMan::IsBanned(CNetAddr net_addr)\n {\n     auto current_time = GetTime();\n     LOCK(m_cs_banned);\n+    if (m_discouraged.contains(net_addr.GetAddrBytes())) return true;\n     for (const auto& it : m_banned) {\n         CSubNet sub_net = it.first;\n         CBanEntry ban_entry = it.second;\n@@ -120,12 +119,18 @@ bool BanMan::IsBanned(CSubNet sub_net)\n \n void BanMan::Ban(const CNetAddr& net_addr, const BanReason& ban_reason, int64_t ban_time_offset, bool since_unix_epoch)\n {\n+    if (ban_reason == BanReasonNodeMisbehaving) {\n+        LOCK(m_cs_banned);\n+        m_discouraged.insert(net_addr.GetAddrBytes());\n+        return;\n+    }\n     CSubNet sub_net(net_addr);\n     Ban(sub_net, ban_reason, ban_time_offset, since_unix_epoch);\n }\n \n void BanMan::Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ban_time_offset, bool since_unix_epoch)\n {\n+    assert(ban_reason == BanReasonManuallyAdded);\n     CBanEntry ban_entry(GetTime(), ban_reason);\n \n     int64_t normalized_ban_time_offset = ban_time_offset;"
      },
      {
        "sha": "aad73c514f0552a4619b4cbfcdd3ed330c891dbc",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 31,
        "deletions": 14,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=b691f2df5f7d443c0c9ee056ab94aa0fc19566d5",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_BANMAN_H\n \n #include <addrdb.h>\n+#include <bloom.h>\n #include <fs.h>\n #include <net_types.h> // For banmap_t\n #include <sync.h>\n@@ -23,20 +24,35 @@ class CClientUIInterface;\n class CNetAddr;\n class CSubNet;\n \n-// Denial-of-service detection/prevention\n-// The idea is to detect peers that are behaving\n-// badly and disconnect/ban them, but do it in a\n-// one-coding-mistake-won't-shatter-the-entire-network\n-// way.\n-// IMPORTANT:  There should be nothing I can give a\n-// node that it will forward on that will make that\n-// node's peers drop it. If there is, an attacker\n-// can isolate a node and/or try to split the network.\n-// Dropping a node for sending stuff that is invalid\n-// now but might be valid in a later version is also\n-// dangerous, because it can cause a network split\n-// between nodes running old code and nodes running\n-// new code.\n+// Banman manages two related but distinct concepts:\n+//\n+// 1. Banning. This is configured manually by the user, through the setban RPC.\n+// If an address or subnet is banned, we never accept incoming connections from\n+// it and never create outgoing connections to it. We won't gossip its address\n+// to other peers in addr messages. Banned addresses and subnets are stored to\n+// banlist.dat on shutdown and reloaded on startup. Banning can be used to\n+// prevent connections with spy nodes or other griefers.\n+//\n+// 2. Discouragement. If a peer misbehaves enough (see Misbehaving() in\n+// net_processing.cpp), we'll mark that address as discouraged. We still allow\n+// incoming connections from them, but they're preferred for eviction when\n+// we receive new incoming connections. We never make outgoing connections to\n+// them, and do not gossip their address to other peers. This is implemented as\n+// a bloom filter. We can (probabilistically) test for membership, but can't\n+// list all discouraged addresses or unmark them as discouraged. Discouragement\n+// can prevent our limited connection slots being used up by incompatible\n+// or broken peers.\n+//\n+// Neither banning nor discouragement are protections against denial-of-service\n+// attacks, since if an attacker has a way to waste our resources and we\n+// disconnect from them and ban that address, it's trivial for them to\n+// reconnect from another IP address.\n+//\n+// Attempting to automatically disconnect or ban any class of peer carries the\n+// risk of splitting the network. For example, if we banned/disconnected for a\n+// transaction that fails a policy check and a future version changes the\n+// policy check so the transaction is accepted, then that transaction could\n+// cause the network to split between old nodes and new nodes.\n \n class BanMan\n {\n@@ -68,6 +84,7 @@ class BanMan\n     CClientUIInterface* m_client_interface = nullptr;\n     CBanDB m_ban_db;\n     const int64_t m_default_ban_time;\n+    CRollingBloomFilter m_discouraged GUARDED_BY(m_cs_banned) {50000, 0.000001};\n };\n \n #endif"
      },
      {
        "sha": "37e4c1e77cb5e63b585b75a10771beb754fcd779",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b691f2df5f7d443c0c9ee056ab94aa0fc19566d5",
        "patch": "@@ -430,8 +430,8 @@ void SetupServerArgs(NodeContext& node)\n \n     gArgs.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-asmap=<file>\", strprintf(\"Specify asn mapping used for bucketing of the peers (default: %s). Relative paths will be prefixed by the net-specific datadir location.\", DEFAULT_ASMAP_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-bantime=<n>\", strprintf(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting and discouraging misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bantime=<n>\", strprintf(\"Default duration (in seconds) of manually configured bans (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-bind=<addr>\", \"Bind to given address and always listen on it. Use [host]:port notation for IPv6\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);"
      },
      {
        "sha": "760335e5e50a0787eb14706b441f0555453dcb41",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b691f2df5f7d443c0c9ee056ab94aa0fc19566d5",
        "patch": "@@ -1012,15 +1012,22 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n \n     int bannedlevel = m_banman ? m_banman->IsBannedLevel(addr) : 0;\n \n-    // Don't accept connections from banned peers, but if our inbound slots aren't almost full, accept\n-    // if the only banning reason was an automatic misbehavior ban.\n-    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && bannedlevel > ((nInbound + 1 < nMaxInbound) ? 1 : 0))\n+    // Don't accept connections from banned peers.\n+    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && bannedlevel == 2)\n     {\n         LogPrint(BCLog::NET, \"connection from %s dropped (banned)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n         return;\n     }\n \n+    // Only accept connections from discouraged peers if our inbound slots aren't (almost) full.\n+    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && nInbound + 1 >= nMaxInbound && bannedlevel >= 1)\n+    {\n+        LogPrint(BCLog::NET, \"connection from %s dropped (discouraged)\\n\", addr.ToString());\n+        CloseSocket(hSocket);\n+        return;\n+    }\n+\n     if (nInbound >= nMaxInbound)\n     {\n         if (!AttemptToEvictConnection()) {"
      },
      {
        "sha": "eae3e9a2f39b6fc230e34a59216d61e597c8d0cb",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b691f2df5f7d443c0c9ee056ab94aa0fc19566d5",
        "patch": "@@ -1019,7 +1019,7 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n }\n \n /**\n- * Mark a misbehaving peer to be banned depending upon the value of `-banscore`.\n+ * Increment peer's misbehavior score. If the new value surpasses banscore (specified on startup or by default), mark node to be discouraged, meaning the peer might be disconnected & added to the discouragement filter.\n  */\n void Misbehaving(NodeId pnode, int howmuch, const std::string& message) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n@@ -1035,14 +1035,14 @@ void Misbehaving(NodeId pnode, int howmuch, const std::string& message) EXCLUSIV\n     std::string message_prefixed = message.empty() ? \"\" : (\": \" + message);\n     if (state->nMisbehavior >= banscore && state->nMisbehavior - howmuch < banscore)\n     {\n-        LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d) BAN THRESHOLD EXCEEDED%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n+        LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d) DISCOURAGE THRESHOLD EXCEEDED%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n         state->fShouldBan = true;\n     } else\n         LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d)%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n }\n \n /**\n- * Potentially ban a node based on the contents of a BlockValidationState object\n+ * Potentially mark a node discouraged based on the contents of a BlockValidationState object\n  *\n  * @param[in] via_compact_block this bool is passed in because net_processing should\n  * punish peers differently depending on whether the data was provided in a compact\n@@ -1072,7 +1072,7 @@ static bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& s\n                 break;\n             }\n \n-            // Ban outbound (but not inbound) peers if on an invalid chain.\n+            // Discourage outbound (but not inbound) peers if on an invalid chain.\n             // Exempt HB compact block peers and manual connections.\n             if (!via_compact_block && !node_state->m_is_inbound && !node_state->m_is_manual_connection) {\n                 Misbehaving(nodeid, 100, message);\n@@ -1107,7 +1107,7 @@ static bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& s\n }\n \n /**\n- * Potentially ban a node based on the contents of a TxValidationState object\n+ * Potentially disconnect and discourage a node based on the contents of a TxValidationState object\n  *\n  * @return Returns true if the peer was punished (probably disconnected)\n  */\n@@ -1339,7 +1339,7 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n }\n \n /**\n- * Handle invalid block rejection and consequent peer banning, maintain which\n+ * Handle invalid block rejection and consequent peer discouragement, maintain which\n  * peers announce compact blocks.\n  */\n void PeerLogicValidation::BlockChecked(const CBlock& block, const BlockValidationState& state) {\n@@ -3118,7 +3118,7 @@ void ProcessMessage(\n             // relayed before full validation (see BIP 152), so we don't want to disconnect\n             // the peer if the header turns out to be for an invalid block.\n             // Note that if a peer tries to build on an invalid chain, that\n-            // will be detected and the peer will be banned.\n+            // will be detected and the peer will be disconnected/discouraged.\n             return ProcessHeadersMessage(pfrom, connman, chainman, mempool, {cmpctblock.header}, chainparams, /*via_compact_block=*/true);\n         }\n \n@@ -3204,7 +3204,7 @@ void ProcessMessage(\n                 // 3. the block is otherwise invalid (eg invalid coinbase,\n                 //    block is too big, too many legacy sigops, etc).\n                 // So if CheckBlock failed, #3 is the only possibility.\n-                // Under BIP 152, we don't DoS-ban unless proof of work is\n+                // Under BIP 152, we don't discourage the peer unless proof of work is\n                 // invalid (we don't require all the stateless checks to have\n                 // been run).  This is handled below, so just treat this as\n                 // though the block was successfully read, and rely on the\n@@ -3576,11 +3576,12 @@ bool PeerLogicValidation::CheckIfBanned(CNode& pnode)\n         else if (pnode.m_manual_connection)\n             LogPrintf(\"Warning: not punishing manually-connected peer %s!\\n\", pnode.addr.ToString());\n         else if (pnode.addr.IsLocal()) {\n-            // Disconnect but don't ban _this_ local node\n-            LogPrintf(\"Warning: disconnecting but not banning local peer %s!\\n\", pnode.addr.ToString());\n+            // Disconnect but don't discourage this local node\n+            LogPrintf(\"Warning: disconnecting but not discouraging local peer %s!\\n\", pnode.addr.ToString());\n             pnode.fDisconnect = true;\n         } else {\n             // Disconnect and ban all nodes sharing the address\n+            LogPrintf(\"Disconnecting and discouraging peer %s!\\n\", pnode.addr.ToString());\n             if (m_banman) {\n                 m_banman->Ban(pnode.addr, BanReasonNodeMisbehaving);\n             }"
      },
      {
        "sha": "552abc4119ebafbadec481d5e6dfe598aa9f111d",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=b691f2df5f7d443c0c9ee056ab94aa0fc19566d5",
        "patch": "@@ -90,6 +90,7 @@ class CNetAddr\n         uint32_t GetMappedAS(const std::vector<bool> &asmap) const;\n \n         std::vector<unsigned char> GetGroup(const std::vector<bool> &asmap) const;\n+        std::vector<unsigned char> GetAddrBytes() const { return {std::begin(ip), std::end(ip)}; }\n         int GetReachabilityFrom(const CNetAddr *paddrPartner = nullptr) const;\n \n         explicit CNetAddr(const struct in6_addr& pipv6Addr, const uint32_t scope = 0);"
      },
      {
        "sha": "c0738152d6c5e8eb18f65df8e58edc42953b9d1c",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=b691f2df5f7d443c0c9ee056ab94aa0fc19566d5",
        "patch": "@@ -601,7 +601,8 @@ static UniValue setban(const JSONRPCRequest& request)\n \n     if (strCommand == \"add\")\n     {\n-        if (isSubnet ? node.banman->IsBanned(subNet) : node.banman->IsBanned(netAddr)) {\n+        if ((isSubnet && node.banman->IsBanned(subNet)) ||\n+            (!isSubnet && node.banman->IsBannedLevel(netAddr) == BanReasonManuallyAdded)) {\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP/Subnet already banned\");\n         }\n \n@@ -628,7 +629,7 @@ static UniValue setban(const JSONRPCRequest& request)\n     else if(strCommand == \"remove\")\n     {\n         if (!( isSubnet ? node.banman->Unban(subNet) : node.banman->Unban(netAddr) )) {\n-            throw JSONRPCError(RPC_CLIENT_INVALID_IP_OR_SUBNET, \"Error: Unban failed. Requested address/subnet was not previously banned.\");\n+            throw JSONRPCError(RPC_CLIENT_INVALID_IP_OR_SUBNET, \"Error: Unban failed. Requested address/subnet was not previously manually banned.\");\n         }\n     }\n     return NullUniValue;\n@@ -637,7 +638,7 @@ static UniValue setban(const JSONRPCRequest& request)\n static UniValue listbanned(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"listbanned\",\n-                \"\\nList all banned IPs/Subnets.\\n\",\n+                \"\\nList all manually banned IPs/Subnets.\\n\",\n                 {},\n         RPCResult{RPCResult::Type::ARR, \"\", \"\",\n             {\n@@ -646,7 +647,6 @@ static UniValue listbanned(const JSONRPCRequest& request)\n                         {RPCResult::Type::STR, \"address\", \"\"},\n                         {RPCResult::Type::NUM_TIME, \"banned_until\", \"\"},\n                         {RPCResult::Type::NUM_TIME, \"ban_created\", \"\"},\n-                        {RPCResult::Type::STR, \"ban_reason\", \"\"},\n                     }},\n             }},\n                 RPCExamples{\n@@ -671,7 +671,6 @@ static UniValue listbanned(const JSONRPCRequest& request)\n         rec.pushKV(\"address\", entry.first.ToString());\n         rec.pushKV(\"banned_until\", banEntry.nBanUntil);\n         rec.pushKV(\"ban_created\", banEntry.nCreateTime);\n-        rec.pushKV(\"ban_reason\", banEntry.banReasonToString());\n \n         bannedAddresses.push_back(rec);\n     }"
      },
      {
        "sha": "0c2744df765cad3b1864665032a2d7cc652d4de9",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=b691f2df5f7d443c0c9ee056ab94aa0fc19566d5",
        "patch": "@@ -346,12 +346,6 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     }\n     BOOST_CHECK(banman->IsBanned(addr));\n \n-    SetMockTime(nStartTime+60*60);\n-    BOOST_CHECK(banman->IsBanned(addr));\n-\n-    SetMockTime(nStartTime+60*60*24+1);\n-    BOOST_CHECK(!banman->IsBanned(addr));\n-\n     bool dummy;\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }"
      }
    ]
  },
  {
    "sha": "2ad58381fffb33d611abf900b73d9e6b5a4e35f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWQ1ODM4MWZmZmIzM2Q2MTFhYmY5MDBiNzNkOWU2YjVhNGUzNWY4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-06-11T00:11:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-04T03:43:55Z"
      },
      "message": "Clean up separated ban/discourage interface",
      "tree": {
        "sha": "8794dd741e4616bcf129da6e274a822a9952e53b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8794dd741e4616bcf129da6e274a822a9952e53b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ad58381fffb33d611abf900b73d9e6b5a4e35f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ad58381fffb33d611abf900b73d9e6b5a4e35f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ad58381fffb33d611abf900b73d9e6b5a4e35f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b691f2df5f7d443c0c9ee056ab94aa0fc19566d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b691f2df5f7d443c0c9ee056ab94aa0fc19566d5"
      }
    ],
    "stats": {
      "total": 190,
      "additions": 77,
      "deletions": 113
    },
    "files": [
      {
        "sha": "8410c3776c4856b3f593fe3c1c2ce17dced83315",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 25,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=2ad58381fffb33d611abf900b73d9e6b5a4e35f8",
        "patch": "@@ -17,21 +17,13 @@ class CSubNet;\n class CAddrMan;\n class CDataStream;\n \n-typedef enum BanReason\n-{\n-    BanReasonUnknown          = 0,\n-    BanReasonNodeMisbehaving  = 1,\n-    BanReasonManuallyAdded    = 2\n-} BanReason;\n-\n class CBanEntry\n {\n public:\n     static const int CURRENT_VERSION=1;\n     int nVersion;\n     int64_t nCreateTime;\n     int64_t nBanUntil;\n-    uint8_t banReason;\n \n     CBanEntry()\n     {\n@@ -44,31 +36,17 @@ class CBanEntry\n         nCreateTime = nCreateTimeIn;\n     }\n \n-    explicit CBanEntry(int64_t n_create_time_in, BanReason ban_reason_in) : CBanEntry(n_create_time_in)\n+    SERIALIZE_METHODS(CBanEntry, obj)\n     {\n-        banReason = ban_reason_in;\n+        uint8_t ban_reason = 2; //! For backward compatibility\n+        READWRITE(obj.nVersion, obj.nCreateTime, obj.nBanUntil, ban_reason);\n     }\n \n-    SERIALIZE_METHODS(CBanEntry, obj) { READWRITE(obj.nVersion, obj.nCreateTime, obj.nBanUntil, obj.banReason); }\n-\n     void SetNull()\n     {\n         nVersion = CBanEntry::CURRENT_VERSION;\n         nCreateTime = 0;\n         nBanUntil = 0;\n-        banReason = BanReasonUnknown;\n-    }\n-\n-    std::string banReasonToString() const\n-    {\n-        switch (banReason) {\n-        case BanReasonNodeMisbehaving:\n-            return \"node misbehaving\";\n-        case BanReasonManuallyAdded:\n-            return \"manually added\";\n-        default:\n-            return \"unknown\";\n-        }\n     }\n };\n "
      },
      {
        "sha": "2fabacda0efce35b7f70e248d656950cb011a2bb",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 30,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=2ad58381fffb33d611abf900b73d9e6b5a4e35f8",
        "patch": "@@ -68,30 +68,16 @@ void BanMan::ClearBanned()\n     if (m_client_interface) m_client_interface->BannedListChanged();\n }\n \n-int BanMan::IsBannedLevel(CNetAddr net_addr)\n+bool BanMan::IsDiscouraged(const CNetAddr& net_addr)\n {\n-    // Returns the most severe level of banning that applies to this address.\n-    // 0 - Not banned\n-    // 1 - Automatic misbehavior ban\n-    // 2 - Any other ban\n-    auto current_time = GetTime();\n     LOCK(m_cs_banned);\n-    for (const auto& it : m_banned) {\n-        CSubNet sub_net = it.first;\n-        CBanEntry ban_entry = it.second;\n-\n-        if (current_time < ban_entry.nBanUntil && sub_net.Match(net_addr)) {\n-            return 2;\n-        }\n-    }\n-    return m_discouraged.contains(net_addr.GetAddrBytes()) ? 1 : 0;\n+    return m_discouraged.contains(net_addr.GetAddrBytes());\n }\n \n-bool BanMan::IsBanned(CNetAddr net_addr)\n+bool BanMan::IsBanned(const CNetAddr& net_addr)\n {\n     auto current_time = GetTime();\n     LOCK(m_cs_banned);\n-    if (m_discouraged.contains(net_addr.GetAddrBytes())) return true;\n     for (const auto& it : m_banned) {\n         CSubNet sub_net = it.first;\n         CBanEntry ban_entry = it.second;\n@@ -103,7 +89,7 @@ bool BanMan::IsBanned(CNetAddr net_addr)\n     return false;\n }\n \n-bool BanMan::IsBanned(CSubNet sub_net)\n+bool BanMan::IsBanned(const CSubNet& sub_net)\n {\n     auto current_time = GetTime();\n     LOCK(m_cs_banned);\n@@ -117,21 +103,21 @@ bool BanMan::IsBanned(CSubNet sub_net)\n     return false;\n }\n \n-void BanMan::Ban(const CNetAddr& net_addr, const BanReason& ban_reason, int64_t ban_time_offset, bool since_unix_epoch)\n+void BanMan::Ban(const CNetAddr& net_addr, int64_t ban_time_offset, bool since_unix_epoch)\n {\n-    if (ban_reason == BanReasonNodeMisbehaving) {\n-        LOCK(m_cs_banned);\n-        m_discouraged.insert(net_addr.GetAddrBytes());\n-        return;\n-    }\n     CSubNet sub_net(net_addr);\n-    Ban(sub_net, ban_reason, ban_time_offset, since_unix_epoch);\n+    Ban(sub_net, ban_time_offset, since_unix_epoch);\n }\n \n-void BanMan::Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ban_time_offset, bool since_unix_epoch)\n+void BanMan::Discourage(const CNetAddr& net_addr)\n {\n-    assert(ban_reason == BanReasonManuallyAdded);\n-    CBanEntry ban_entry(GetTime(), ban_reason);\n+    LOCK(m_cs_banned);\n+    m_discouraged.insert(net_addr.GetAddrBytes());\n+}\n+\n+void BanMan::Ban(const CSubNet& sub_net, int64_t ban_time_offset, bool since_unix_epoch)\n+{\n+    CBanEntry ban_entry(GetTime());\n \n     int64_t normalized_ban_time_offset = ban_time_offset;\n     bool normalized_since_unix_epoch = since_unix_epoch;\n@@ -151,8 +137,8 @@ void BanMan::Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ba\n     }\n     if (m_client_interface) m_client_interface->BannedListChanged();\n \n-    //store banlist to disk immediately if user requested ban\n-    if (ban_reason == BanReasonManuallyAdded) DumpBanlist();\n+    //store banlist to disk immediately\n+    DumpBanlist();\n }\n \n bool BanMan::Unban(const CNetAddr& net_addr)"
      },
      {
        "sha": "f6bfbd1e493cc5d182db6f4ff7c71ff59f2527c8",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=2ad58381fffb33d611abf900b73d9e6b5a4e35f8",
        "patch": "@@ -59,12 +59,20 @@ class BanMan\n public:\n     ~BanMan();\n     BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time);\n-    void Ban(const CNetAddr& net_addr, const BanReason& ban_reason, int64_t ban_time_offset = 0, bool since_unix_epoch = false);\n-    void Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ban_time_offset = 0, bool since_unix_epoch = false);\n+    void Ban(const CNetAddr& net_addr, int64_t ban_time_offset = 0, bool since_unix_epoch = false);\n+    void Ban(const CSubNet& sub_net, int64_t ban_time_offset = 0, bool since_unix_epoch = false);\n+    void Discourage(const CNetAddr& net_addr);\n     void ClearBanned();\n-    int IsBannedLevel(CNetAddr net_addr);\n-    bool IsBanned(CNetAddr net_addr);\n-    bool IsBanned(CSubNet sub_net);\n+\n+    //! Return whether net_addr is banned\n+    bool IsBanned(const CNetAddr& net_addr);\n+\n+    //! Return whether sub_net is exactly banned\n+    bool IsBanned(const CSubNet& sub_net);\n+\n+    //! Return whether net_addr is discouraged.\n+    bool IsDiscouraged(const CNetAddr& net_addr);\n+\n     bool Unban(const CNetAddr& net_addr);\n     bool Unban(const CSubNet& sub_net);\n     void GetBanned(banmap_t& banmap);"
      },
      {
        "sha": "834a16ecf526c2cc1bc3d23bf10664e97aa24ff0",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=2ad58381fffb33d611abf900b73d9e6b5a4e35f8",
        "patch": "@@ -146,10 +146,10 @@ class NodeImpl : public Node\n         }\n         return false;\n     }\n-    bool ban(const CNetAddr& net_addr, BanReason reason, int64_t ban_time_offset) override\n+    bool ban(const CNetAddr& net_addr, int64_t ban_time_offset) override\n     {\n         if (m_context.banman) {\n-            m_context.banman->Ban(net_addr, reason, ban_time_offset);\n+            m_context.banman->Ban(net_addr, ban_time_offset);\n             return true;\n         }\n         return false;"
      },
      {
        "sha": "b88b5bc14e776658862ac3b28bb3fb3104892b63",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=2ad58381fffb33d611abf900b73d9e6b5a4e35f8",
        "patch": "@@ -122,7 +122,7 @@ class Node\n     virtual bool getBanned(banmap_t& banmap) = 0;\n \n     //! Ban node.\n-    virtual bool ban(const CNetAddr& net_addr, BanReason reason, int64_t ban_time_offset) = 0;\n+    virtual bool ban(const CNetAddr& net_addr, int64_t ban_time_offset) = 0;\n \n     //! Unban node.\n     virtual bool unban(const CSubNet& ip) = 0;"
      },
      {
        "sha": "0233b0fc2fa74a2e468becb93eddef69f66132ac",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2ad58381fffb33d611abf900b73d9e6b5a4e35f8",
        "patch": "@@ -1010,18 +1010,18 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     // on all platforms.  Set it again here just to be sure.\n     SetSocketNoDelay(hSocket);\n \n-    int bannedlevel = m_banman ? m_banman->IsBannedLevel(addr) : 0;\n-\n     // Don't accept connections from banned peers.\n-    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && bannedlevel == 2)\n+    bool banned = m_banman->IsBanned(addr);\n+    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && banned)\n     {\n         LogPrint(BCLog::NET, \"connection from %s dropped (banned)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n         return;\n     }\n \n     // Only accept connections from discouraged peers if our inbound slots aren't (almost) full.\n-    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && nInbound + 1 >= nMaxInbound && bannedlevel >= 1)\n+    bool discouraged = m_banman->IsDiscouraged(addr);\n+    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && nInbound + 1 >= nMaxInbound && discouraged)\n     {\n         LogPrint(BCLog::NET, \"connection from %s dropped (discouraged)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n@@ -1051,7 +1051,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     pnode->m_permissionFlags = permissionFlags;\n     // If this flag is present, the user probably expect that RPC and QT report it as whitelisted (backward compatibility)\n     pnode->m_legacyWhitelisted = legacyWhitelisted;\n-    pnode->m_prefer_evict = bannedlevel > 0;\n+    pnode->m_prefer_evict = discouraged;\n     m_msgproc->InitializeNode(pnode);\n \n     LogPrint(BCLog::NET, \"connection from %s accepted\\n\", addr.ToString());\n@@ -2052,10 +2052,10 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         return;\n     }\n     if (!pszDest) {\n-        if (IsLocal(addrConnect) ||\n-            FindNode(static_cast<CNetAddr>(addrConnect)) || (m_banman && m_banman->IsBanned(addrConnect)) ||\n-            FindNode(addrConnect.ToStringIPPort()))\n+        bool banned_or_discouraged = m_banman && (m_banman->IsDiscouraged(addrConnect) || m_banman->IsBanned(addrConnect));\n+        if (IsLocal(addrConnect) || FindNode(static_cast<CNetAddr>(addrConnect)) || banned_or_discouraged || FindNode(addrConnect.ToStringIPPort())) {\n             return;\n+        }\n     } else if (FindNode(std::string(pszDest)))\n         return;\n "
      },
      {
        "sha": "2cf85120fe01e5c12aca564dffb5c7db2accd0e7",
        "filename": "src/net_permissions.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/net_permissions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/net_permissions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.h?ref=2ad58381fffb33d611abf900b73d9e6b5a4e35f8",
        "patch": "@@ -24,7 +24,7 @@ enum NetPermissionFlags\n     // Always relay transactions from this peer, even if already in mempool\n     // Keep parameter interaction: forcerelay implies relay\n     PF_FORCERELAY = (1U << 2) | PF_RELAY,\n-    // Can't be banned for misbehavior\n+    // Can't be banned/disconnected/discouraged for misbehavior\n     PF_NOBAN = (1U << 4),\n     // Can query the mempool\n     PF_MEMPOOL = (1U << 5),"
      },
      {
        "sha": "717d1453ac05632c838ec43d8e2f6ba79c0bbb50",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 16,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2ad58381fffb33d611abf900b73d9e6b5a4e35f8",
        "patch": "@@ -252,8 +252,8 @@ struct CNodeState {\n     bool fCurrentlyConnected;\n     //! Accumulated misbehaviour score for this peer.\n     int nMisbehavior;\n-    //! Whether this peer should be disconnected and banned (unless whitelisted).\n-    bool fShouldBan;\n+    //! Whether this peer should be disconnected and marked as discouraged (unless whitelisted with noban).\n+    bool m_should_discourage;\n     //! String name of this peer (debugging/logging purposes).\n     const std::string name;\n     //! The best known block we know this peer has announced.\n@@ -404,7 +404,7 @@ struct CNodeState {\n     {\n         fCurrentlyConnected = false;\n         nMisbehavior = 0;\n-        fShouldBan = false;\n+        m_should_discourage = false;\n         pindexBestKnownBlock = nullptr;\n         hashLastUnknownBlock.SetNull();\n         pindexLastCommonBlock = nullptr;\n@@ -1036,7 +1036,7 @@ void Misbehaving(NodeId pnode, int howmuch, const std::string& message) EXCLUSIV\n     if (state->nMisbehavior >= banscore && state->nMisbehavior - howmuch < banscore)\n     {\n         LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d) DISCOURAGE THRESHOLD EXCEEDED%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n-        state->fShouldBan = true;\n+        state->m_should_discourage = true;\n     } else\n         LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d)%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n }\n@@ -2476,7 +2476,8 @@ void ProcessMessage(\n             if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)\n                 addr.nTime = nNow - 5 * 24 * 60 * 60;\n             pfrom.AddAddressKnown(addr);\n-            if (banman->IsBanned(addr)) continue; // Do not process banned addresses beyond remembering we received them\n+            if (banman->IsDiscouraged(addr)) continue; // Do not process banned/discouraged addresses beyond remembering we received them\n+            if (banman->IsBanned(addr)) continue;\n             bool fReachable = IsReachable(addr);\n             if (addr.nTime > nSince && !pfrom.fGetAddr && vAddr.size() <= 10 && addr.IsRoutable())\n             {\n@@ -3329,7 +3330,7 @@ void ProcessMessage(\n         std::vector<CAddress> vAddr = connman->GetAddresses();\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr) {\n-            if (!banman->IsBanned(addr)) {\n+            if (!banman->IsDiscouraged(addr) && !banman->IsBanned(addr)) {\n                 pfrom.PushAddress(addr, insecure_rand);\n             }\n         }\n@@ -3564,26 +3565,26 @@ void ProcessMessage(\n     return;\n }\n \n-bool PeerLogicValidation::CheckIfBanned(CNode& pnode)\n+bool PeerLogicValidation::MaybeDiscourageAndDisconnect(CNode& pnode)\n {\n     AssertLockHeld(cs_main);\n     CNodeState &state = *State(pnode.GetId());\n \n-    if (state.fShouldBan) {\n-        state.fShouldBan = false;\n-        if (pnode.HasPermission(PF_NOBAN))\n+    if (state.m_should_discourage) {\n+        state.m_should_discourage = false;\n+        if (pnode.HasPermission(PF_NOBAN)) {\n             LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pnode.addr.ToString());\n-        else if (pnode.m_manual_connection)\n+        } else if (pnode.m_manual_connection) {\n             LogPrintf(\"Warning: not punishing manually-connected peer %s!\\n\", pnode.addr.ToString());\n-        else if (pnode.addr.IsLocal()) {\n+        } else if (pnode.addr.IsLocal()) {\n             // Disconnect but don't discourage this local node\n             LogPrintf(\"Warning: disconnecting but not discouraging local peer %s!\\n\", pnode.addr.ToString());\n             pnode.fDisconnect = true;\n         } else {\n-            // Disconnect and ban all nodes sharing the address\n+            // Disconnect and discourage all nodes sharing the address\n             LogPrintf(\"Disconnecting and discouraging peer %s!\\n\", pnode.addr.ToString());\n             if (m_banman) {\n-                m_banman->Ban(pnode.addr, BanReasonNodeMisbehaving);\n+                m_banman->Discourage(pnode.addr);\n             }\n             connman->DisconnectNode(pnode.addr);\n         }\n@@ -3683,7 +3684,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n \n     LOCK(cs_main);\n-    CheckIfBanned(*pfrom);\n+    MaybeDiscourageAndDisconnect(*pfrom);\n \n     return fMoreWork;\n }\n@@ -3886,7 +3887,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         if (!lockMain)\n             return true;\n \n-        if (CheckIfBanned(*pto)) return true;\n+        if (MaybeDiscourageAndDisconnect(*pto)) return true;\n \n         CNodeState &state = *State(pto->GetId());\n "
      },
      {
        "sha": "eadf29e59fcbf8016fa378ef15453984572f764f",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=2ad58381fffb33d611abf900b73d9e6b5a4e35f8",
        "patch": "@@ -31,7 +31,7 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     ChainstateManager& m_chainman;\n     CTxMemPool& m_mempool;\n \n-    bool CheckIfBanned(CNode& pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool MaybeDiscourageAndDisconnect(CNode& pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n public:\n     PeerLogicValidation(CConnman* connman, BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool);"
      },
      {
        "sha": "ab2c37e6f8c69b8fa14af9c6c8b3f358d7498faf",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=2ad58381fffb33d611abf900b73d9e6b5a4e35f8",
        "patch": "@@ -1218,7 +1218,7 @@ void RPCConsole::banSelectedNode(int bantime)\n         // Find possible nodes, ban it and clear the selected node\n         const CNodeCombinedStats *stats = clientModel->getPeerTableModel()->getNodeStats(detailNodeRow);\n         if (stats) {\n-            m_node.ban(stats->nodeStats.addr, BanReasonManuallyAdded, bantime);\n+            m_node.ban(stats->nodeStats.addr, bantime);\n             m_node.disconnectByAddress(stats->nodeStats.addr);\n         }\n     }"
      },
      {
        "sha": "393442e946c7416b0d4c4331873ab884b4cb3476",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=2ad58381fffb33d611abf900b73d9e6b5a4e35f8",
        "patch": "@@ -601,8 +601,7 @@ static UniValue setban(const JSONRPCRequest& request)\n \n     if (strCommand == \"add\")\n     {\n-        if ((isSubnet && node.banman->IsBanned(subNet)) ||\n-            (!isSubnet && node.banman->IsBannedLevel(netAddr) == BanReasonManuallyAdded)) {\n+        if (isSubnet ? node.banman->IsBanned(subNet) : node.banman->IsBanned(netAddr)) {\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP/Subnet already banned\");\n         }\n \n@@ -615,12 +614,12 @@ static UniValue setban(const JSONRPCRequest& request)\n             absolute = true;\n \n         if (isSubnet) {\n-            node.banman->Ban(subNet, BanReasonManuallyAdded, banTime, absolute);\n+            node.banman->Ban(subNet, banTime, absolute);\n             if (node.connman) {\n                 node.connman->DisconnectNode(subNet);\n             }\n         } else {\n-            node.banman->Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n+            node.banman->Ban(netAddr, banTime, absolute);\n             if (node.connman) {\n                 node.connman->DisconnectNode(netAddr);\n             }"
      },
      {
        "sha": "1fe01fae04fca83988debd49e4a4bd11950881ec",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=2ad58381fffb33d611abf900b73d9e6b5a4e35f8",
        "patch": "@@ -238,8 +238,8 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n         LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n-    BOOST_CHECK(banman->IsBanned(addr1));\n-    BOOST_CHECK(!banman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n+    BOOST_CHECK(banman->IsDiscouraged(addr1));\n+    BOOST_CHECK(!banman->IsDiscouraged(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n     CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, 1, CAddress(), \"\", true);\n@@ -255,8 +255,8 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n         LOCK2(cs_main, dummyNode2.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n     }\n-    BOOST_CHECK(!banman->IsBanned(addr2)); // 2 not banned yet...\n-    BOOST_CHECK(banman->IsBanned(addr1));  // ... but 1 still should be\n+    BOOST_CHECK(!banman->IsDiscouraged(addr2)); // 2 not banned yet...\n+    BOOST_CHECK(banman->IsDiscouraged(addr1));  // ... but 1 still should be\n     {\n         LOCK(cs_main);\n         Misbehaving(dummyNode2.GetId(), 50);\n@@ -265,7 +265,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n         LOCK2(cs_main, dummyNode2.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n     }\n-    BOOST_CHECK(banman->IsBanned(addr2));\n+    BOOST_CHECK(banman->IsDiscouraged(addr2));\n \n     bool dummy;\n     peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n@@ -294,7 +294,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n         LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n-    BOOST_CHECK(!banman->IsBanned(addr1));\n+    BOOST_CHECK(!banman->IsDiscouraged(addr1));\n     {\n         LOCK(cs_main);\n         Misbehaving(dummyNode1.GetId(), 10);\n@@ -303,7 +303,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n         LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n-    BOOST_CHECK(!banman->IsBanned(addr1));\n+    BOOST_CHECK(!banman->IsDiscouraged(addr1));\n     {\n         LOCK(cs_main);\n         Misbehaving(dummyNode1.GetId(), 1);\n@@ -312,7 +312,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n         LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n-    BOOST_CHECK(banman->IsBanned(addr1));\n+    BOOST_CHECK(banman->IsDiscouraged(addr1));\n     gArgs.ForceSetArg(\"-banscore\", ToString(DEFAULT_BANSCORE_THRESHOLD));\n \n     bool dummy;\n@@ -344,7 +344,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n         LOCK2(cs_main, dummyNode.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode));\n     }\n-    BOOST_CHECK(banman->IsBanned(addr));\n+    BOOST_CHECK(banman->IsDiscouraged(addr));\n \n     bool dummy;\n     peerLogic->FinalizeNode(dummyNode.GetId(), dummy);"
      },
      {
        "sha": "ad6461650fdc1fb7974fa0df633865ff118a7175",
        "filename": "src/test/fuzz/addrdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/test/fuzz/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad58381fffb33d611abf900b73d9e6b5a4e35f8/src/test/fuzz/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrdb.cpp?ref=2ad58381fffb33d611abf900b73d9e6b5a4e35f8",
        "patch": "@@ -18,18 +18,11 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n \n     const CBanEntry ban_entry = [&] {\n-        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 3)) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 2)) {\n         case 0:\n             return CBanEntry{fuzzed_data_provider.ConsumeIntegral<int64_t>()};\n             break;\n-        case 1:\n-            return CBanEntry{fuzzed_data_provider.ConsumeIntegral<int64_t>(), fuzzed_data_provider.PickValueInArray<BanReason>({\n-                                                                                  BanReason::BanReasonUnknown,\n-                                                                                  BanReason::BanReasonNodeMisbehaving,\n-                                                                                  BanReason::BanReasonManuallyAdded,\n-                                                                              })};\n-            break;\n-        case 2: {\n+        case 1: {\n             const std::optional<CBanEntry> ban_entry = ConsumeDeserializable<CBanEntry>(fuzzed_data_provider);\n             if (ban_entry) {\n                 return *ban_entry;\n@@ -39,5 +32,4 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         }\n         return CBanEntry{};\n     }();\n-    assert(!ban_entry.banReasonToString().empty());\n }"
      }
    ]
  }
]