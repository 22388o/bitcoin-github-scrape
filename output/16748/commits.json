[
  {
    "sha": "fcc2a07f501b06ba669dca751bbfcb3917959582",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmY2MyYTA3ZjUwMWIwNmJhNjY5ZGNhNzUxYmJmY2IzOTE3OTU5NTgy",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-08-28T16:34:55Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-08-28T16:58:27Z"
      },
      "message": "refactor: Tidy up CNetAddr construction",
      "tree": {
        "sha": "1c7c82684bec26be1d6681a3d7c8f154948b59bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c7c82684bec26be1d6681a3d7c8f154948b59bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcc2a07f501b06ba669dca751bbfcb3917959582",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl1msrMACgkQDMUhUxl5\nkaUeRQ//W22yk7SOuf8VNZ2MVFTXTxLy7RupVBR5Yz+qaQERv1WZyK6DwFnNjNwC\ndfH1SKz+/DzncVxxIkfq/87hDX08cRQveJ8A7UF1Wst0FksPEW23HmkB879lu9XH\n6I476gG9H5/s6FeE5V6tAMimT6pXMPJxxCNvo+Dn87nVJgbZKa1wktWHuPsdLh0u\nyw7xV+vn2IowshK+9lBbT+nvjM83j/xl5ivTqM3vc5pYjcCeX+HgTgRPhQSG/SUv\np+aWfWdkaDauxPehKW8TYmx/2NOJ/putP9EBaG1xcgRD90/Nr+98Rpmyh1PzkE7K\nafYrEj9KilneGX7uKrPmju0aPJHMn8/854JLOP6R+wWOZa+CnFIBENKbpgOAFDFx\nQ5VwC3hF0qaUrZ3JjaNf2594lkTc5f5PqCvjCz6GfrXAJ1LtGRXAqcKvDmquj0NL\nuPvvnXF9IZbR4CvJY76MUjfPgrOqOBN1dvp0O8jtCOwz7WjewZHceD0pMMOouEgO\nXCPA5HkGWmSUtfbBTPiCeeMHIAIVg8RNLI81zwyi0Zo2LGCd2dyWEd11LyycIS0O\nrZ3jvtdy0caZft5/tB2qbvyvxJeopBexgmYnXQbMd9ZruMw5sQ9W8/S+yiW48HmU\n89zByIPU0BiY09+X4V+6YJbm9roqCRDe8TXar3OkSNlYDNEOkFQ=\n=f9Zk\n-----END PGP SIGNATURE-----",
        "payload": "tree 1c7c82684bec26be1d6681a3d7c8f154948b59bb\nparent e5abb59a9a66723dd1d9a01f65e467636eb24f2d\nauthor Carl Dong <contact@carldong.me> 1567010095 -0400\ncommitter Carl Dong <contact@carldong.me> 1567011507 -0400\n\nrefactor: Tidy up CNetAddr construction\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcc2a07f501b06ba669dca751bbfcb3917959582",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fcc2a07f501b06ba669dca751bbfcb3917959582",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcc2a07f501b06ba669dca751bbfcb3917959582/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5abb59a9a66723dd1d9a01f65e467636eb24f2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5abb59a9a66723dd1d9a01f65e467636eb24f2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5abb59a9a66723dd1d9a01f65e467636eb24f2d"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 8,
      "deletions": 14
    },
    "files": [
      {
        "sha": "a81c9ec76c54d7c81b3155d249d6b9ba77a85b5c",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcc2a07f501b06ba669dca751bbfcb3917959582/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcc2a07f501b06ba669dca751bbfcb3917959582/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=fcc2a07f501b06ba669dca751bbfcb3917959582",
        "patch": "@@ -14,16 +14,6 @@ static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};\n // 0xFD + sha256(\"bitcoin\")[0:5]\n static const unsigned char g_internal_prefix[] = { 0xFD, 0x6B, 0x88, 0xC0, 0x87, 0x24 };\n \n-/**\n- * Construct an unspecified IPv6 network address (::/128).\n- *\n- * @note This address is considered invalid by CNetAddr::IsValid()\n- */\n-CNetAddr::CNetAddr()\n-{\n-    memset(ip, 0, sizeof(ip));\n-}\n-\n void CNetAddr::SetIP(const CNetAddr& ipIn)\n {\n     memcpy(ip, ipIn.ip, sizeof(ip));\n@@ -100,10 +90,9 @@ CNetAddr::CNetAddr(const struct in_addr& ipv4Addr)\n     SetRaw(NET_IPV4, (const uint8_t*)&ipv4Addr);\n }\n \n-CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr, const uint32_t scope)\n+CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr, const uint32_t scope) : scopeId(scope)\n {\n     SetRaw(NET_IPV6, (const uint8_t*)&ipv6Addr);\n-    scopeId = scope;\n }\n \n unsigned int CNetAddr::GetByte(int n) const"
      },
      {
        "sha": "3e1b52d0a5d34dfcb901cb8fe82038a86a85298f",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcc2a07f501b06ba669dca751bbfcb3917959582/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcc2a07f501b06ba669dca751bbfcb3917959582/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=fcc2a07f501b06ba669dca751bbfcb3917959582",
        "patch": "@@ -32,11 +32,16 @@ enum Network\n class CNetAddr\n {\n     protected:\n-        unsigned char ip[16]; // in network byte order\n+        unsigned char ip[16]{}; // in network byte order\n         uint32_t scopeId{0}; // for scoped/link-local ipv6 addresses\n \n     public:\n-        CNetAddr();\n+        /**\n+         * Construct an unspecified IPv6 network address (::/128).\n+         *\n+         * @note This address is considered invalid by CNetAddr::IsValid()\n+         */\n+        CNetAddr() = default;\n         explicit CNetAddr(const struct in_addr& ipv4Addr);\n         void SetIP(const CNetAddr& ip);\n "
      }
    ]
  },
  {
    "sha": "0bbe885f6cb76ac394fdf3cc2a56dcac0d67bdf0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmJlODg1ZjZjYjc2YWMzOTRmZGYzY2MyYTU2ZGNhYzBkNjdiZGYw",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-08-28T16:34:14Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-08-28T21:15:01Z"
      },
      "message": "refactor: Serialize CService as CNetAddr",
      "tree": {
        "sha": "562016ea3043d770c75f0d48027f11d42076cb97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/562016ea3043d770c75f0d48027f11d42076cb97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bbe885f6cb76ac394fdf3cc2a56dcac0d67bdf0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl1m7tUACgkQDMUhUxl5\nkaWBmw/+Jn7pRnKO8H2upSK773nLvvyc6Jjr4n8tWo2LYaTU4FfE4IR+VC9h/4+1\n0ME2zAW/zsFPsIWhVTlFQuzt7qgsxbC+e22u0OzIHtTnRfCHkUf54Gw1+w5bWlW0\nyCSU5wmoBLMbGb0Px/v6W1bRWkEywFzvkRR+nkUrGpp6IQTav2mBjDT+lsJqrAJu\n5epxEShr0BYwPlgXoYLHiX5YbM3wguCVaNEet01RlZfKdhdkHKLtiMJLkZlaKltE\n5dzdvU/Jph1flT/hCklgHHgv6j7rOopUEAx2gGx2nXTb7qh8qdNtnYNzyhyTVoxN\njy/B/EhhDkbkFAd8eIzk6DxnIBE6nwYPVnr95SPE5T8B3yc9XxKnMQ0TBSoOqUjF\nVJLNTsVU2+TKeeDu8e1yjWd65nPsULaZ9fFbrDGjvAHiSMMLeym0bAuIB7at7bBh\nEAKHop2TIoIdgGdwqHFsrYWK/fBxM5GvVq+a0SIWrVrMUMMSNy9Z3VM8rOmb0OTa\n0rA+w6va4akgF5EkvFtThhws4JvohBJlj/c83gGGyN4nicGLW8AXNCgFANdOXVzR\n1vP6b3cbpDTXh6CbkMbOQDSuuHUF7gKUjVgqJ5TjfTw9XW+2l5wojxOOykooRAN8\n7nfbBq4kM8N075LRPE1Us4P/oZd9NgUedWfzgefQZQLbz+BwYGI=\n=qImW\n-----END PGP SIGNATURE-----",
        "payload": "tree 562016ea3043d770c75f0d48027f11d42076cb97\nparent fcc2a07f501b06ba669dca751bbfcb3917959582\nauthor Carl Dong <contact@carldong.me> 1567010054 -0400\ncommitter Carl Dong <contact@carldong.me> 1567026901 -0400\n\nrefactor: Serialize CService as CNetAddr\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bbe885f6cb76ac394fdf3cc2a56dcac0d67bdf0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bbe885f6cb76ac394fdf3cc2a56dcac0d67bdf0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bbe885f6cb76ac394fdf3cc2a56dcac0d67bdf0/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fcc2a07f501b06ba669dca751bbfcb3917959582",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcc2a07f501b06ba669dca751bbfcb3917959582",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcc2a07f501b06ba669dca751bbfcb3917959582"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7b2d1695a60cae59abadd6491dafe79729034bd0",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bbe885f6cb76ac394fdf3cc2a56dcac0d67bdf0/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bbe885f6cb76ac394fdf3cc2a56dcac0d67bdf0/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=0bbe885f6cb76ac394fdf3cc2a56dcac0d67bdf0",
        "patch": "@@ -170,7 +170,7 @@ class CService : public CNetAddr\n \n         template <typename Stream, typename Operation>\n         inline void SerializationOp(Stream& s, Operation ser_action) {\n-            READWRITE(ip);\n+            READWRITEAS(CNetAddr, *this);\n             READWRITE(WrapBigEndian(port));\n         }\n };"
      }
    ]
  },
  {
    "sha": "e6009922077ce330bc76b82b9c3aa1e813e40356",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjAwOTkyMjA3N2NlMzMwYmM3NmI4MmI5YzNhYTFlODEzZTQwMzU2",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-08-28T19:30:20Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-08-28T21:15:02Z"
      },
      "message": "Refactor NetAddr in an API compatible way in preparation for addrv2",
      "tree": {
        "sha": "1299f68d4a4abf9a668e9632328ddc05672d68cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1299f68d4a4abf9a668e9632328ddc05672d68cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6009922077ce330bc76b82b9c3aa1e813e40356",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl1m7tYACgkQDMUhUxl5\nkaXWyBAAsp4SZvsz6Lcu86k4BJierChTojyk/VxwVzxbCY426L23CpXOvBRYhepN\nwh2cR3BAHgnDluTeygHpMPBGjl7FSu+HeEAofQzdyDB+NP1+Hd6RMvsMwvPpu9dv\na5CRI2aJh7FZkFLnmSBXVWbisc/R2dNyJeTFSvEWty6DUAOzV55tiSYZyi51QQRI\nfExayxCxp0xrsVYhx8INw4CDfqAWb9fIcUDxG6EhC/vhOoTPeNbxnrUo3XIx+A7m\ne2GXU2iEvHcDv223c4epBwNB6hURy7nHk2mmHGlXirX1QyG02QKmyWGyjbjWmHvW\nefL5JsJXFiO9s/Gqf2SB9bK8bvbNXmJ3btQ2rJFo3pD9s5WgVD0XUwFxL6iKG6WV\nY+qtTfCQ8uxKAsM116bHH+vZlYzvzqq16Gwegl4ncyFdSjqmvOedYvRninhkFGIM\n9u195+oEybUT+dKPrkA6hbn4Mm140gWZTqvuPYoJJ2sU0/ccQpxaeS689Cg+5472\n2EdUcjfiiMb6ORKPH3akfny3go8l6rX94ezM3k4R4m9xQwlQ5+iYMk5bTzqsQOXQ\nsjzIRqHDHgBa0EEfgdtcnte2UKz4EuwNPSSHEIs53t6ncgm0bSrEGXSscwdkKBf9\nfYckqEkMzVz9qUhV+NeixRfU1tYiOnExNUo5vo6zIn1Yma9x+Ck=\n=lsiE\n-----END PGP SIGNATURE-----",
        "payload": "tree 1299f68d4a4abf9a668e9632328ddc05672d68cf\nparent 0bbe885f6cb76ac394fdf3cc2a56dcac0d67bdf0\nauthor Carl Dong <contact@carldong.me> 1567020620 -0400\ncommitter Carl Dong <contact@carldong.me> 1567026902 -0400\n\nRefactor NetAddr in an API compatible way in preparation for addrv2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6009922077ce330bc76b82b9c3aa1e813e40356",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6009922077ce330bc76b82b9c3aa1e813e40356",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6009922077ce330bc76b82b9c3aa1e813e40356/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0bbe885f6cb76ac394fdf3cc2a56dcac0d67bdf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bbe885f6cb76ac394fdf3cc2a56dcac0d67bdf0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0bbe885f6cb76ac394fdf3cc2a56dcac0d67bdf0"
      }
    ],
    "stats": {
      "total": 237,
      "additions": 163,
      "deletions": 74
    },
    "files": [
      {
        "sha": "1faab7387b1a7bb5baa70f846d52d1e430de0644",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 138,
        "deletions": 68,
        "changes": 206,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6009922077ce330bc76b82b9c3aa1e813e40356/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6009922077ce330bc76b82b9c3aa1e813e40356/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=e6009922077ce330bc76b82b9c3aa1e813e40356",
        "patch": "@@ -16,19 +16,21 @@ static const unsigned char g_internal_prefix[] = { 0xFD, 0x6B, 0x88, 0xC0, 0x87,\n \n void CNetAddr::SetIP(const CNetAddr& ipIn)\n {\n-    memcpy(ip, ipIn.ip, sizeof(ip));\n+    m_network_id = ipIn.m_network_id;\n+    ip = ipIn.ip;\n }\n \n void CNetAddr::SetRaw(Network network, const uint8_t *ip_in)\n {\n     switch(network)\n     {\n         case NET_IPV4:\n-            memcpy(ip, pchIPv4, 12);\n-            memcpy(ip+12, ip_in, 4);\n+            ip.assign(ip_in, ip_in+4);\n+            m_network_id = NetworkID::IPV4;\n             break;\n         case NET_IPV6:\n-            memcpy(ip, ip_in, 16);\n+            ip.assign(ip_in, ip_in+16);\n+            m_network_id = NetworkID::IPV6;\n             break;\n         default:\n             assert(!\"invalid network\");\n@@ -56,8 +58,8 @@ bool CNetAddr::SetInternal(const std::string &name)\n     }\n     unsigned char hash[32] = {};\n     CSHA256().Write((const unsigned char*)name.data(), name.size()).Finalize(hash);\n-    memcpy(ip, g_internal_prefix, sizeof(g_internal_prefix));\n-    memcpy(ip + sizeof(g_internal_prefix), hash, sizeof(ip) - sizeof(g_internal_prefix));\n+    ip.assign(hash, hash+16-sizeof(g_internal_prefix));\n+    m_network_id = NetworkID::NAME;\n     return true;\n }\n \n@@ -75,12 +77,11 @@ bool CNetAddr::SetSpecial(const std::string &strName)\n {\n     if (strName.size()>6 && strName.substr(strName.size() - 6, 6) == \".onion\") {\n         std::vector<unsigned char> vchAddr = DecodeBase32(strName.substr(0, strName.size() - 6).c_str());\n-        if (vchAddr.size() != 16-sizeof(pchOnionCat))\n-            return false;\n-        memcpy(ip, pchOnionCat, sizeof(pchOnionCat));\n-        for (unsigned int i=0; i<16-sizeof(pchOnionCat); i++)\n-            ip[i + sizeof(pchOnionCat)] = vchAddr[i];\n-        return true;\n+        if (vchAddr.size() == 10) {\n+            m_network_id = NetworkID::TORV2;\n+            ip.assign(vchAddr.begin(), vchAddr.end());\n+            return true;\n+        }\n     }\n     return false;\n }\n@@ -92,12 +93,12 @@ CNetAddr::CNetAddr(const struct in_addr& ipv4Addr)\n \n CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr, const uint32_t scope) : scopeId(scope)\n {\n-    SetRaw(NET_IPV6, (const uint8_t*)&ipv6Addr);\n+    FromV1Serialization((unsigned char *)&ipv6Addr);\n }\n \n unsigned int CNetAddr::GetByte(int n) const\n {\n-    return ip[15-n];\n+    return ip.at(ip.size()-1-n);\n }\n \n bool CNetAddr::IsBindAny() const\n@@ -112,12 +113,12 @@ bool CNetAddr::IsBindAny() const\n \n bool CNetAddr::IsIPv4() const\n {\n-    return (memcmp(ip, pchIPv4, sizeof(pchIPv4)) == 0);\n+    return m_network_id == NetworkID::IPV4;\n }\n \n bool CNetAddr::IsIPv6() const\n {\n-    return (!IsIPv4() && !IsTor() && !IsInternal());\n+    return m_network_id == NetworkID::IPV6;\n }\n \n bool CNetAddr::IsRFC1918() const\n@@ -152,50 +153,50 @@ bool CNetAddr::IsRFC5737() const\n \n bool CNetAddr::IsRFC3849() const\n {\n-    return GetByte(15) == 0x20 && GetByte(14) == 0x01 && GetByte(13) == 0x0D && GetByte(12) == 0xB8;\n+    return IsIPv6() && (GetByte(15) == 0x20 && GetByte(14) == 0x01 && GetByte(13) == 0x0D && GetByte(12) == 0xB8);\n }\n \n bool CNetAddr::IsRFC3964() const\n {\n-    return (GetByte(15) == 0x20 && GetByte(14) == 0x02);\n+    return IsIPv6() && (GetByte(15) == 0x20 && GetByte(14) == 0x02);\n }\n \n bool CNetAddr::IsRFC6052() const\n {\n     static const unsigned char pchRFC6052[] = {0,0x64,0xFF,0x9B,0,0,0,0,0,0,0,0};\n-    return (memcmp(ip, pchRFC6052, sizeof(pchRFC6052)) == 0);\n+    return IsIPv6() && (memcmp(ip.data(), pchRFC6052, sizeof(pchRFC6052)) == 0);\n }\n \n bool CNetAddr::IsRFC4380() const\n {\n-    return (GetByte(15) == 0x20 && GetByte(14) == 0x01 && GetByte(13) == 0 && GetByte(12) == 0);\n+    return IsIPv6() && (GetByte(15) == 0x20 && GetByte(14) == 0x01 && GetByte(13) == 0 && GetByte(12) == 0);\n }\n \n bool CNetAddr::IsRFC4862() const\n {\n     static const unsigned char pchRFC4862[] = {0xFE,0x80,0,0,0,0,0,0};\n-    return (memcmp(ip, pchRFC4862, sizeof(pchRFC4862)) == 0);\n+    return IsIPv6() && (memcmp(ip.data(), pchRFC4862, sizeof(pchRFC4862)) == 0);\n }\n \n bool CNetAddr::IsRFC4193() const\n {\n-    return ((GetByte(15) & 0xFE) == 0xFC);\n+    return (IsIPv6() && ((GetByte(15) & 0xFE) == 0xFC));\n }\n \n bool CNetAddr::IsRFC6145() const\n {\n     static const unsigned char pchRFC6145[] = {0,0,0,0,0,0,0,0,0xFF,0xFF,0,0};\n-    return (memcmp(ip, pchRFC6145, sizeof(pchRFC6145)) == 0);\n+    return IsIPv6() && (memcmp(ip.data(), pchRFC6145, sizeof(pchRFC6145)) == 0);\n }\n \n bool CNetAddr::IsRFC4843() const\n {\n-    return (GetByte(15) == 0x20 && GetByte(14) == 0x01 && GetByte(13) == 0x00 && (GetByte(12) & 0xF0) == 0x10);\n+    return IsIPv6() && (GetByte(15) == 0x20 && GetByte(14) == 0x01 && GetByte(13) == 0x00 && (GetByte(12) & 0xF0) == 0x10);\n }\n \n bool CNetAddr::IsRFC7343() const\n {\n-    return (GetByte(15) == 0x20 && GetByte(14) == 0x01 && GetByte(13) == 0x00 && (GetByte(12) & 0xF0) == 0x20);\n+    return IsIPv6() && (GetByte(15) == 0x20 && GetByte(14) == 0x01 && GetByte(13) == 0x00 && (GetByte(12) & 0xF0) == 0x20);\n }\n \n /**\n@@ -206,7 +207,7 @@ bool CNetAddr::IsRFC7343() const\n  */\n bool CNetAddr::IsTor() const\n {\n-    return (memcmp(ip, pchOnionCat, sizeof(pchOnionCat)) == 0);\n+    return m_network_id == NetworkID::TORV2;\n }\n \n bool CNetAddr::IsLocal() const\n@@ -217,7 +218,7 @@ bool CNetAddr::IsLocal() const\n \n     // IPv6 loopback (::1/128)\n     static const unsigned char pchLocal[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};\n-    if (memcmp(ip, pchLocal, 16) == 0)\n+    if (IsIPv6() && memcmp(ip.data(), pchLocal, 16) == 0)\n         return true;\n \n     return false;\n@@ -241,13 +242,15 @@ bool CNetAddr::IsValid() const\n     // header20 vectorlen3 addr26 addr26 addr26 header20 vectorlen3 addr26 addr26 addr26...\n     // so if the first length field is garbled, it reads the second batch\n     // of addr misaligned by 3 bytes.\n-    if (memcmp(ip, pchIPv4+3, sizeof(pchIPv4)-3) == 0)\n+    if (IsIPv6() && memcmp(ip.data(), pchIPv4+3, sizeof(pchIPv4)-3) == 0) {\n         return false;\n+    }\n \n     // unspecified IPv6 address (::/128)\n     unsigned char ipNone6[16] = {};\n-    if (memcmp(ip, ipNone6, 16) == 0)\n+    if (IsIPv6() && memcmp(ip.data(), ipNone6, 16) == 0) {\n         return false;\n+    }\n \n     // documentation IPv6 address\n     if (IsRFC3849())\n@@ -260,13 +263,15 @@ bool CNetAddr::IsValid() const\n     {\n         // INADDR_NONE\n         uint32_t ipNone = INADDR_NONE;\n-        if (memcmp(ip+12, &ipNone, 4) == 0)\n+        if (memcmp(ip.data(), &ipNone, 4) == 0) {\n             return false;\n+        }\n \n         // 0\n         ipNone = 0;\n-        if (memcmp(ip+12, &ipNone, 4) == 0)\n+        if (memcmp(ip.data(), &ipNone, 4) == 0) {\n             return false;\n+        }\n     }\n \n     return true;\n@@ -293,7 +298,7 @@ bool CNetAddr::IsRoutable() const\n  */\n bool CNetAddr::IsInternal() const\n {\n-   return memcmp(ip, g_internal_prefix, sizeof(g_internal_prefix)) == 0;\n+    return m_network_id == NetworkID::NAME;\n }\n \n enum Network CNetAddr::GetNetwork() const\n@@ -316,9 +321,9 @@ enum Network CNetAddr::GetNetwork() const\n std::string CNetAddr::ToStringIP() const\n {\n     if (IsTor())\n-        return EncodeBase32(&ip[6], 10) + \".onion\";\n+        return EncodeBase32(ip.data(), 10) + \".onion\";\n     if (IsInternal())\n-        return EncodeBase32(ip + sizeof(g_internal_prefix), sizeof(ip) - sizeof(g_internal_prefix)) + \".internal\";\n+        return EncodeBase32(ip.data(), 16 - sizeof(g_internal_prefix)) + \".internal\";\n     CService serv(*this, 0);\n     struct sockaddr_storage sockaddr;\n     socklen_t socklen = sizeof(sockaddr);\n@@ -344,12 +349,16 @@ std::string CNetAddr::ToString() const\n \n bool operator==(const CNetAddr& a, const CNetAddr& b)\n {\n-    return (memcmp(a.ip, b.ip, 16) == 0);\n+    return a.m_network_id == b.m_network_id && a.ip == b.ip;\n }\n \n bool operator<(const CNetAddr& a, const CNetAddr& b)\n {\n-    return (memcmp(a.ip, b.ip, 16) < 0);\n+    if (a.m_network_id == b.m_network_id) {\n+        return a.ip < b.ip;\n+    } else {\n+        return a.m_network_id < b.m_network_id;\n+    }\n }\n \n /**\n@@ -366,7 +375,7 @@ bool CNetAddr::GetInAddr(struct in_addr* pipv4Addr) const\n {\n     if (!IsIPv4())\n         return false;\n-    memcpy(pipv4Addr, ip+12, 4);\n+    memcpy(pipv4Addr, ip.data(), 4);\n     return true;\n }\n \n@@ -385,10 +394,50 @@ bool CNetAddr::GetIn6Addr(struct in6_addr* pipv6Addr) const\n     if (!IsIPv6()) {\n         return false;\n     }\n-    memcpy(pipv6Addr, ip, 16);\n+    memcpy(pipv6Addr, ip.data(), 16);\n     return true;\n }\n \n+void CNetAddr::FromV1Serialization(unsigned char *buff) {\n+    if (memcmp(buff, pchIPv4, sizeof(pchIPv4)) == 0) {\n+        // IPv4-in-IPv6\n+        SetRaw(NET_IPV4, (const uint8_t *)buff+sizeof(pchIPv4));\n+    } else if (memcmp(buff, pchOnionCat, sizeof(pchOnionCat)) == 0) {\n+        // OnionCat\n+        ip.assign(buff+sizeof(pchOnionCat), buff+16);\n+        m_network_id = NetworkID::TORV2;\n+    } else if (memcmp(buff, g_internal_prefix, sizeof(g_internal_prefix)) == 0) {\n+        // Custom Internal\n+        ip.assign(buff+sizeof(g_internal_prefix), buff+16);\n+        m_network_id = NetworkID::NAME;\n+    } else { // Actually IPv6\n+        SetRaw(NET_IPV6, (const uint8_t*)buff);\n+    }\n+}\n+\n+bool CNetAddr::GetV1Serialization(unsigned char *buff) const {\n+    switch (m_network_id) {\n+    case NetworkID::IPV4:\n+        memcpy(buff, pchIPv4, sizeof(pchIPv4));\n+        memcpy(buff+sizeof(pchIPv4), ip.data(), 16-sizeof(pchIPv4));\n+        return true;\n+    case NetworkID::TORV2:\n+        memcpy(buff, pchOnionCat, sizeof(pchOnionCat));\n+        memcpy(buff+sizeof(pchOnionCat), ip.data(), 16-sizeof(pchOnionCat));\n+        return true;\n+    case NetworkID::NAME:\n+        memcpy(buff, g_internal_prefix, sizeof(g_internal_prefix));\n+        memcpy(buff+sizeof(g_internal_prefix), ip.data(), 16-sizeof(g_internal_prefix));\n+        return true;\n+    case NetworkID::IPV6:\n+        memcpy(buff, ip.data(), 16);\n+        return true;\n+    default:\n+        return false;\n+    }\n+}\n+\n+\n /**\n  * Get the canonical identifier of our network group\n  *\n@@ -416,8 +465,7 @@ std::vector<unsigned char> CNetAddr::GetGroup() const\n     if (IsInternal())\n     {\n         nClass = NET_INTERNAL;\n-        nStartByte = sizeof(g_internal_prefix);\n-        nBits = (sizeof(ip) - sizeof(g_internal_prefix)) * 8;\n+        nBits = (16 - sizeof(g_internal_prefix)) * 8;\n     }\n     // all other unroutable addresses belong to the same group\n     else if (!IsRoutable())\n@@ -427,7 +475,11 @@ std::vector<unsigned char> CNetAddr::GetGroup() const\n     }\n     // for IPv4 addresses, '1' + the 16 higher-order bits of the IP\n     // includes mapped IPv4, SIIT translated IPv4, and the well-known prefix\n-    else if (IsIPv4() || IsRFC6145() || IsRFC6052())\n+    else if (IsIPv4())\n+    {\n+        nClass = NET_IPV4;\n+    }\n+    else if (IsRFC6145() || IsRFC6052())\n     {\n         nClass = NET_IPV4;\n         nStartByte = 12;\n@@ -449,7 +501,6 @@ std::vector<unsigned char> CNetAddr::GetGroup() const\n     else if (IsTor())\n     {\n         nClass = NET_ONION;\n-        nStartByte = 6;\n         nBits = 4;\n     }\n     // for he.net, use /36 groups\n@@ -464,20 +515,20 @@ std::vector<unsigned char> CNetAddr::GetGroup() const\n     // push our ip onto vchRet byte by byte...\n     while (nBits >= 8)\n     {\n-        vchRet.push_back(GetByte(15 - nStartByte));\n+        vchRet.push_back(ip.at(nStartByte));\n         nStartByte++;\n         nBits -= 8;\n     }\n     // ...for the last byte, push nBits and for the rest of the byte push 1's\n     if (nBits > 0)\n-        vchRet.push_back(GetByte(15 - nStartByte) | ((1 << (8 - nBits)) - 1));\n+        vchRet.push_back(ip.at(nStartByte) | ((1 << (8 - nBits)) - 1));\n \n     return vchRet;\n }\n \n uint64_t CNetAddr::GetHash() const\n {\n-    uint256 hash = Hash(&ip[0], &ip[16]);\n+    uint256 hash = Hash(ip.begin(), ip.end());\n     uint64_t nRet;\n     memcpy(&nRet, &hash, sizeof(nRet));\n     return nRet;\n@@ -658,10 +709,12 @@ bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const\n std::vector<unsigned char> CService::GetKey() const\n {\n      std::vector<unsigned char> vKey;\n-     vKey.resize(18);\n-     memcpy(vKey.data(), ip, 16);\n-     vKey[16] = port / 0x100; // most significant byte of our port\n-     vKey[17] = port & 0x0FF; // least significant byte of our port\n+     vKey.resize(16);\n+     if (!GetV1Serialization(vKey.data())) {\n+         vKey.assign(ip.begin(), ip.end());\n+     }\n+     vKey.push_back(port / 0x100);\n+     vKey.push_back(port & 0x0FF);\n      return vKey;\n }\n \n@@ -692,51 +745,57 @@ CSubNet::CSubNet():\n \n CSubNet::CSubNet(const CNetAddr &addr, int32_t mask)\n {\n-    valid = true;\n+    valid = (addr.m_network_id == NetworkID::IPV4 || addr.m_network_id == NetworkID::IPV6);\n     network = addr;\n     // Default to /32 (IPv4) or /128 (IPv6), i.e. match single address\n     memset(netmask, 255, sizeof(netmask));\n \n     // IPv4 addresses start at offset 12, and first 12 bytes must match, so just offset n\n-    const int astartofs = network.IsIPv4() ? 12 : 0;\n+    const int alens = network.ip.size();\n \n     int32_t n = mask;\n-    if(n >= 0 && n <= (128 - astartofs*8)) // Only valid if in range of bits of address\n+    if(n >= 0 && n <= (alens*8)) // Only valid if in range of bits of address\n     {\n-        n += astartofs*8;\n         // Clear bits [n..127]\n         for (; n < 128; ++n)\n             netmask[n>>3] &= ~(1<<(7-(n&7)));\n-    } else\n+    } else {\n         valid = false;\n+    }\n \n     // Normalize network according to netmask\n-    for(int x=0; x<16; ++x)\n-        network.ip[x] &= netmask[x];\n+    for(size_t x=0; x<alens; ++x)\n+        network.ip.at(x) &= netmask[x];\n }\n \n CSubNet::CSubNet(const CNetAddr &addr, const CNetAddr &mask)\n {\n-    valid = true;\n+    valid = (addr.m_network_id == NetworkID::IPV4 || addr.m_network_id == NetworkID::IPV6);\n     network = addr;\n     // Default to /32 (IPv4) or /128 (IPv6), i.e. match single address\n     memset(netmask, 255, sizeof(netmask));\n \n     // IPv4 addresses start at offset 12, and first 12 bytes must match, so just offset n\n-    const int astartofs = network.IsIPv4() ? 12 : 0;\n+    const int alens = network.ip.size();\n \n-    for(int x=astartofs; x<16; ++x)\n-        netmask[x] = mask.ip[x];\n+    for(int x=0; x<alens; ++x)\n+        netmask[x] = mask.ip.at(x);\n+    for(int x=alens; x<16; ++x)\n+        netmask[x] = 0;\n \n     // Normalize network according to netmask\n-    for(int x=0; x<16; ++x)\n-        network.ip[x] &= netmask[x];\n+    for(size_t x=0; x<network.ip.size(); ++x)\n+        network.ip.at(x) &= netmask[x];\n }\n \n CSubNet::CSubNet(const CNetAddr &addr):\n     valid(addr.IsValid())\n {\n-    memset(netmask, 255, sizeof(netmask));\n+    valid &= (addr.m_network_id == NetworkID::IPV4 || addr.m_network_id == NetworkID::IPV6);\n+\n+    memset(netmask, 0, sizeof(netmask));\n+    memset(netmask, 255, addr.ip.size());\n+\n     network = addr;\n }\n \n@@ -746,10 +805,21 @@ CSubNet::CSubNet(const CNetAddr &addr):\n  */\n bool CSubNet::Match(const CNetAddr &addr) const\n {\n-    if (!valid || !addr.IsValid())\n+    // Construct a ::FFFF:0:0 with NetworkID::IPV6 as m_network_id\n+    std::vector<unsigned char> blank_ipv4_mapped(std::begin(pchIPv4), std::end(pchIPv4));\n+    blank_ipv4_mapped.resize(16, 0);\n+    CNetAddr blank_ipv4_mapped_address;\n+    blank_ipv4_mapped_address.SetRaw(NET_IPV6, blank_ipv4_mapped.data());\n+\n+    // We consider IPv4 as a subnet of IPv6. Therefore, any IPv6 subnet that\n+    // contains ::FFFF:0:0 also contains all of IPv4.\n+    if (network.IsIPv6() && addr.IsIPv4() && Match(blank_ipv4_mapped_address)) {\n+        return true;\n+    }\n+    if (!valid || !addr.IsValid() || addr.m_network_id != network.m_network_id)\n         return false;\n-    for(int x=0; x<16; ++x)\n-        if ((addr.ip[x] & netmask[x]) != network.ip[x])\n+    for(size_t x=0; x<addr.ip.size(); ++x)\n+        if ((addr.ip.at(x) & netmask[x]) != network.ip.at(x))\n             return false;\n     return true;\n }\n@@ -779,7 +849,7 @@ std::string CSubNet::ToString() const\n     /* Parse binary 1{n}0{N-n} to see if mask can be represented as /n */\n     int cidr = 0;\n     bool valid_cidr = true;\n-    int n = network.IsIPv4() ? 12 : 0;\n+    int n = 0;\n     for (; n < 16 && netmask[n] == 0xff; ++n)\n         cidr += 8;\n     if (n < 16) {\n@@ -800,7 +870,7 @@ std::string CSubNet::ToString() const\n         strNetmask = strprintf(\"%u\", cidr);\n     } else {\n         if (network.IsIPv4())\n-            strNetmask = strprintf(\"%u.%u.%u.%u\", netmask[12], netmask[13], netmask[14], netmask[15]);\n+            strNetmask = strprintf(\"%u.%u.%u.%u\", netmask[0], netmask[1], netmask[2], netmask[3]);\n         else\n             strNetmask = strprintf(\"%x:%x:%x:%x:%x:%x:%x:%x\",\n                              netmask[0] << 8 | netmask[1], netmask[2] << 8 | netmask[3],"
      },
      {
        "sha": "8fb6dd2c5a62b517d59506d943c565f4bfc9ad1e",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 25,
        "deletions": 6,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6009922077ce330bc76b82b9c3aa1e813e40356/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6009922077ce330bc76b82b9c3aa1e813e40356/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=e6009922077ce330bc76b82b9c3aa1e813e40356",
        "patch": "@@ -28,11 +28,20 @@ enum Network\n     NET_MAX,\n };\n \n+enum class NetworkID : uint8_t\n+{\n+    NAME = 0,\n+    IPV4 = 1,\n+    IPV6,\n+    TORV2,\n+};\n+\n /** IP address (IPv6, or IPv4 using mapped IPv6 range (::FFFF:0:0/96)) */\n class CNetAddr\n {\n     protected:\n-        unsigned char ip[16]{}; // in network byte order\n+        NetworkID m_network_id{NetworkID::IPV6};\n+        std::vector<unsigned char> ip = std::vector<unsigned char>(16,0); // in network byte order\n         uint32_t scopeId{0}; // for scoped/link-local ipv6 addresses\n \n     public:\n@@ -86,19 +95,29 @@ class CNetAddr\n         bool GetInAddr(struct in_addr* pipv4Addr) const;\n         std::vector<unsigned char> GetGroup() const;\n         int GetReachabilityFrom(const CNetAddr *paddrPartner = nullptr) const;\n-\n+        bool GetV1Serialization(unsigned char *buff) const;\n+        void FromV1Serialization(unsigned char *buff);\n         explicit CNetAddr(const struct in6_addr& pipv6Addr, const uint32_t scope = 0);\n         bool GetIn6Addr(struct in6_addr* pipv6Addr) const;\n \n         friend bool operator==(const CNetAddr& a, const CNetAddr& b);\n         friend bool operator!=(const CNetAddr& a, const CNetAddr& b) { return !(a == b); }\n         friend bool operator<(const CNetAddr& a, const CNetAddr& b);\n \n-        ADD_SERIALIZE_METHODS;\n+        template<typename Stream>\n+        void Serialize(Stream &s) const\n+        {\n+            unsigned char ip_temp[16];\n+            GetV1Serialization(ip_temp);\n+            s << ip_temp;\n+        }\n \n-        template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action) {\n-            READWRITE(ip);\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            unsigned char ip_temp[16];\n+            s >> ip_temp;\n+            FromV1Serialization(ip_temp);\n         }\n \n         friend class CSubNet;"
      }
    ]
  },
  {
    "sha": "fb78590939ff2d8c008cfd68f2f7df816389ac01",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjc4NTkwOTM5ZmYyZDhjMDA4Y2ZkNjhmMmY3ZGY4MTYzODlhYzAx",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-08-28T15:08:54Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-08-28T21:15:03Z"
      },
      "message": "Add support for v2-only Networks",
      "tree": {
        "sha": "cdf5feb4b3135fd0d85294ff21ef2cda960ebc4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdf5feb4b3135fd0d85294ff21ef2cda960ebc4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb78590939ff2d8c008cfd68f2f7df816389ac01",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl1m7tcACgkQDMUhUxl5\nkaVORg/6AmQFxAx9++cIkzHr7tNq/zXEIrC2so+lPlN6lys6lkVluWkxOslVDqXj\nGjtqD0s4hGe1qTSum7g+KzKgEcPH6zGq2qHwpdfZNIlbtqNPa4i6N/BYMSBwkLXJ\n/WNFtB7jEUHr2ySlGEn4cALp+E/Z/g1ZktO3yYMfWu/RMrjsi6iR2wHeu8FQC6t7\nb9vZ4em/OL5vvFTXN4MFBDg15MyMOVXOJDDPpkks3uJ7A+SFoLnz4B7K0aNct3Po\n2kxF5T5wuTMEFeulmgAsdCNXTzqw6a9UMwcaX6tv1hLH8wThVZEEi2JfusXeZq6s\nOICC4M0sTVD0D1aUKeHpG7zrsBkp3gD3ULpNUTomhGDEqipgf/hfw+Km3dgZjGf6\ntBGoYskj1zEVlwOEaf5omP5ZngF1vNRl8de9D6WogGtximJMdJEnX7rzEISGCg8t\n0D8o+89yMShcCRQCi0Eop+Kla8pFCb9sxQc4Ymy5CHdE79YXw3yF/4LSkW7mhHb9\nZKVWp5r6Aa3EyPIkuROdkMZWe/K0LcbF8MdU3cr0UePmHvOw7yevBQk27yeCLBvE\nslXUYOOY4IybTDTncuv2b795dO9MzHI+eYPWrjdCkLfxF/zY4pE6PMfEtij/QP/Y\nae8AAC5F3FbAAWPfdXkp526/na5S0rT/wlgSbTpSErKEnS8+p7Y=\n=0x18\n-----END PGP SIGNATURE-----",
        "payload": "tree cdf5feb4b3135fd0d85294ff21ef2cda960ebc4d\nparent e6009922077ce330bc76b82b9c3aa1e813e40356\nauthor Carl Dong <contact@carldong.me> 1567004934 -0400\ncommitter Carl Dong <contact@carldong.me> 1567026903 -0400\n\nAdd support for v2-only Networks\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb78590939ff2d8c008cfd68f2f7df816389ac01",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb78590939ff2d8c008cfd68f2f7df816389ac01",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb78590939ff2d8c008cfd68f2f7df816389ac01/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6009922077ce330bc76b82b9c3aa1e813e40356",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6009922077ce330bc76b82b9c3aa1e813e40356",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6009922077ce330bc76b82b9c3aa1e813e40356"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 22,
      "deletions": 2
    },
    "files": [
      {
        "sha": "72601badc1711613184f9432e5310ad265b0e67c",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78590939ff2d8c008cfd68f2f7df816389ac01/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78590939ff2d8c008cfd68f2f7df816389ac01/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=fb78590939ff2d8c008cfd68f2f7df816389ac01",
        "patch": "@@ -81,6 +81,17 @@ bool CNetAddr::SetSpecial(const std::string &strName)\n             m_network_id = NetworkID::TORV2;\n             ip.assign(vchAddr.begin(), vchAddr.end());\n             return true;\n+        } else if (vchAddr.size() == 35) {\n+            m_network_id = NetworkID::TORV3;\n+            ip.assign(vchAddr.begin(), vchAddr.begin()+32);\n+            return true;\n+        }\n+    } else if (strName.size()>8 && strName.substr(strName.size() - 8, 8) == \".b32.i2p\") {\n+        std::vector<unsigned char> vchAddr = DecodeBase32(strName.substr(0, strName.size() - 8).c_str());\n+        if (vchAddr.size() == 32) {\n+            m_network_id = NetworkID::I2P;\n+            ip.assign(vchAddr.begin(), vchAddr.end());\n+            return true;\n         }\n     }\n     return false;\n@@ -93,7 +104,13 @@ CNetAddr::CNetAddr(const struct in_addr& ipv4Addr)\n \n CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr, const uint32_t scope) : scopeId(scope)\n {\n-    FromV1Serialization((unsigned char *)&ipv6Addr);\n+    unsigned char *address = (unsigned char *)&ipv6Addr;\n+    if (*address == 0xfc) {\n+        m_network_id = NetworkID::CJDNS;\n+        ip.assign(address, address+16);\n+    } else {\n+        FromV1Serialization(address);\n+    }\n }\n \n unsigned int CNetAddr::GetByte(int n) const\n@@ -180,7 +197,7 @@ bool CNetAddr::IsRFC4862() const\n \n bool CNetAddr::IsRFC4193() const\n {\n-    return (IsIPv6() && ((GetByte(15) & 0xFE) == 0xFC));\n+    return m_network_id == NetworkID::CJDNS || (IsIPv6() && ((GetByte(15) & 0xFE) == 0xFC));\n }\n \n bool CNetAddr::IsRFC6145() const"
      },
      {
        "sha": "94fc460e9058d73ff9c72ffe8c6f030a5f5ad45f",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb78590939ff2d8c008cfd68f2f7df816389ac01/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb78590939ff2d8c008cfd68f2f7df816389ac01/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=fb78590939ff2d8c008cfd68f2f7df816389ac01",
        "patch": "@@ -34,6 +34,9 @@ enum class NetworkID : uint8_t\n     IPV4 = 1,\n     IPV6,\n     TORV2,\n+    TORV3,\n+    I2P,\n+    CJDNS,\n };\n \n /** IP address (IPv6, or IPv4 using mapped IPv6 range (::FFFF:0:0/96)) */"
      }
    ]
  },
  {
    "sha": "e10f8bfcaec44cf1e7b73c390225b80644e8367f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTBmOGJmY2FlYzQ0Y2YxZTdiNzNjMzkwMjI1YjgwNjQ0ZTgzNjdm",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-08-28T15:15:09Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-08-28T21:15:04Z"
      },
      "message": "Introduce addrv2 serialization",
      "tree": {
        "sha": "c118abb0f8370d8603789ef535159ab1aa70b1fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c118abb0f8370d8603789ef535159ab1aa70b1fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e10f8bfcaec44cf1e7b73c390225b80644e8367f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl1m7tgACgkQDMUhUxl5\nkaURExAAudpxxZ45pwW8ylfyX36FZbYDWlckH7y05pUJe56A9ZcoTZLB7cWyqrsx\nCdrxkwz7RhSEfzhDsVO5suSf/zSTQERYsD8aVi671uuaDgUcAhBBY/XXe9E+9POB\ngfzilqAOn4WazdEv535e0qpu/9nNokwSbGgUfhKxmdqIgkOpqn6N1VpknNMiVlOq\nc1J1bxsPERBKJAmSUlJqUHRkq7Rx7bOSiyY0IlXJe9BL+wcutfSpaxps7ifNETH6\nDwcI4Zmtpe7AEZOEforn55eykb6E2QomsKEPxEOjE1nPMuOmC8bScbA/7Ike5+jS\nG+y5zYexIc6DQ5kV8qmIRYuC6ETbnaCQDrtKd6pBhvrR4F8lvWxR3rf2l3XTM6cc\nF93h84ESUxx/j0cageSsEs4tHaETs/cyVmvtAsbKc4vyoSHN2Unry9YPtaMraYJu\n1nlyfIxVWfnbVm7TFHhycTi0vd/wUyjhOCHBBx21PTqsC2vVDMn+9lH/VGXXplWi\n0/lNWZivZPC8ulaZWMpMUAWAIxXQvSm2EYLZgtEoHfsclLwVJCrYDxxoIwhGOWGF\nb4aH+T/y2Pab9j0RfiFJ+xMF3vWNG84HNldS2HMALuIv0rUirn5gDwniIEYTaV3Y\nPXsEBXSaGH8jAEJhxeki8tul3W2syp8i7tGqNvSzWX8XoEWg2MM=\n=L1N9\n-----END PGP SIGNATURE-----",
        "payload": "tree c118abb0f8370d8603789ef535159ab1aa70b1fe\nparent fb78590939ff2d8c008cfd68f2f7df816389ac01\nauthor Carl Dong <contact@carldong.me> 1567005309 -0400\ncommitter Carl Dong <contact@carldong.me> 1567026904 -0400\n\nIntroduce addrv2 serialization\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e10f8bfcaec44cf1e7b73c390225b80644e8367f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e10f8bfcaec44cf1e7b73c390225b80644e8367f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e10f8bfcaec44cf1e7b73c390225b80644e8367f/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb78590939ff2d8c008cfd68f2f7df816389ac01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb78590939ff2d8c008cfd68f2f7df816389ac01",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb78590939ff2d8c008cfd68f2f7df816389ac01"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 71,
      "deletions": 6
    },
    "files": [
      {
        "sha": "aee9436c3006d4737746b5e4b074598ba5482ced",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10f8bfcaec44cf1e7b73c390225b80644e8367f/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10f8bfcaec44cf1e7b73c390225b80644e8367f/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=e10f8bfcaec44cf1e7b73c390225b80644e8367f",
        "patch": "@@ -113,6 +113,17 @@ CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr, const uint32_t scope) : scop\n     }\n }\n \n+bool CNetAddr::IsStandardV2Deserialization() const\n+{\n+    if (IsIPv6()) {\n+        return (memcmp(ip.data(), pchOnionCat, sizeof(pchOnionCat)) != 0) &&\n+            (memcmp(ip.data(), pchIPv4, sizeof(pchIPv4)) != 0) &&\n+            ip.at(0) != 0xfc;\n+    } else {\n+        return true;\n+    }\n+}\n+\n unsigned int CNetAddr::GetByte(int n) const\n {\n     return ip.at(ip.size()-1-n);\n@@ -253,6 +264,10 @@ bool CNetAddr::IsLocal() const\n  */\n bool CNetAddr::IsValid() const\n {\n+    if (m_network_id == NetworkID::INVALID) {\n+        return false;\n+    }\n+\n     // Cleanup 3-byte shifted addresses caused by garbage in size field\n     // of addr messages from versions before 0.2.9 checksum.\n     // Two consecutive addr messages look like this:"
      },
      {
        "sha": "8ad6e5bd52020d364dc27a83243a0336579e3939",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 56,
        "deletions": 6,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10f8bfcaec44cf1e7b73c390225b80644e8367f/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10f8bfcaec44cf1e7b73c390225b80644e8367f/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=e10f8bfcaec44cf1e7b73c390225b80644e8367f",
        "patch": "@@ -17,6 +17,8 @@\n #include <string>\n #include <vector>\n \n+static const int SERIALIZE_ADDR_AS_V2 = 0x40000000;\n+\n enum Network\n {\n     NET_UNROUTABLE = 0,\n@@ -37,8 +39,23 @@ enum class NetworkID : uint8_t\n     TORV3,\n     I2P,\n     CJDNS,\n+    INVALID = 255,\n };\n \n+constexpr size_t NetworkIDByteLength(NetworkID id) {\n+    return id == NetworkID::IPV4 ? 4 :\n+        id == NetworkID::IPV6 ? 16 :\n+        id == NetworkID::TORV2 ? 10 :\n+        id == NetworkID::TORV3 ? 32 :\n+        id == NetworkID::I2P ? 32 :\n+        id == NetworkID::CJDNS ? 16 :\n+        id == NetworkID::NAME ? 10 : 0;\n+}\n+\n+constexpr bool IsKnownNetworkID(uint8_t id) {\n+    return static_cast<uint8_t>(NetworkID::NAME) <= id && id <= static_cast<uint8_t>(NetworkID::CJDNS);\n+}\n+\n /** IP address (IPv6, or IPv4 using mapped IPv6 range (::FFFF:0:0/96)) */\n class CNetAddr\n {\n@@ -90,6 +107,7 @@ class CNetAddr\n         bool IsRoutable() const;\n         bool IsInternal() const;\n         bool IsValid() const;\n+        bool IsStandardV2Deserialization() const;\n         enum Network GetNetwork() const;\n         std::string ToString() const;\n         std::string ToStringIP() const;\n@@ -110,17 +128,49 @@ class CNetAddr\n         template<typename Stream>\n         void Serialize(Stream &s) const\n         {\n-            unsigned char ip_temp[16];\n-            GetV1Serialization(ip_temp);\n-            s << ip_temp;\n+            if (s.GetVersion() & SERIALIZE_ADDR_AS_V2) {\n+                s << static_cast<uint8_t>(m_network_id);\n+                s << ip;\n+            } else {\n+                unsigned char ip_temp[16];\n+                GetV1Serialization(ip_temp);\n+                s << ip_temp;\n+            }\n         }\n \n         template<typename Stream>\n         void Unserialize(Stream& s)\n         {\n-            unsigned char ip_temp[16];\n-            s >> ip_temp;\n-            FromV1Serialization(ip_temp);\n+            if (s.GetVersion() & SERIALIZE_ADDR_AS_V2) {\n+                uint8_t network_id_temp;\n+                s >> network_id_temp;\n+                unsigned int addr_size;\n+                s >> VARINT(addr_size);\n+\n+                if (addr_size <= 512) {\n+                    if (IsKnownNetworkID(network_id_temp)) {\n+                        m_network_id = static_cast<NetworkID>(network_id_temp);\n+                        if (addr_size == NetworkIDByteLength(m_network_id)) {\n+                            // sanity checks out (happy path)\n+                            ip.resize(addr_size);\n+                            s >> MakeSpan(ip);\n+                            return;\n+                        }\n+                    }\n+                } else {\n+                    // Ignore this and all addresses that came in this batch\n+                    // (e.g. entire addrv2 message) (ragequit path)\n+                    throw std::runtime_error(\"Absurdly large address.\\n\");\n+                }\n+\n+                // Ignore this single entry (unhappy path)\n+                m_network_id = NetworkID::INVALID;\n+                ip.clear();\n+            } else {\n+                unsigned char ip_temp[16];\n+                s >> ip_temp;\n+                FromV1Serialization(ip_temp);\n+            }\n         }\n \n         friend class CSubNet;"
      }
    ]
  },
  {
    "sha": "02dfac7799dc3a1febfe6d009debf28d59c64465",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmRmYWM3Nzk5ZGMzYTFmZWJmZTZkMDA5ZGViZjI4ZDU5YzY0NDY1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-08-01T20:28:00Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-08-28T21:15:05Z"
      },
      "message": "feat: Adapt addrman to addrv2, write tests",
      "tree": {
        "sha": "d7bcbe4dfbd0233757d3e357fdf2ee29df1219fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7bcbe4dfbd0233757d3e357fdf2ee29df1219fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02dfac7799dc3a1febfe6d009debf28d59c64465",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl1m7tkACgkQDMUhUxl5\nkaWonxAAzpMnVeMZ1rRE1KvbP8NMW6XmR9rtvc0zI1yUU210tQIZ0ciexgCysH6I\nsgpgiDWyrJW3WaW53AiDo4pJV3YdE6cLQsG86iokRARctJY29wyHoZltey3zPLie\nXBCkR2AsrJv0UFeXGCpEEIZrbVEWgAe+KZTSiC6XXFwpb7dxc1KBChqTZEHBrSRv\nJ8u0O1avINBtZTQAuu4Vr8DmIT+pgPmeQalkh+tgLbTYTzGBjM5PI7Bd1wAzdsZ6\n1g53/7251TwdnfgLz+ONpRrA2XMqfUp/51sspZGK46OP1cgtQI3GcftiKqeBpWVi\n4KRZ+fm+bhrTpcXwmrYjlgSbaCOyHMpRsWIy1E9hx/J6FTXwiBao8ueo9jQqKug9\nDkyetlJDwpqAtkgj/OTjl8jO25MCtKMV8qHA1/HMMkd1/9BzyXH2DwCMRjLs/ROU\nsiWlHVZeDlNGKDobSOewZFnYSmcg+053N3NqMwXNKFZJiGcmQwHHycCQUuSa8PiT\nPebEBDfAo+UBEb+6JfTo25fyX8YEf4hrhaDZFGF5j9hzQvGa9hi3u0TTsvc6DSI/\n/Q45l4rx5cF4OsPyp71HbrJfalW7lQOarVDZAqNEGA73cZbeh0r8ufSoLQaFMdnD\nNbFc5Jk8NlI8EAjawt8qaeejuNWgUv+zjJUc9bKmDS2pBClMgZE=\n=ilDO\n-----END PGP SIGNATURE-----",
        "payload": "tree d7bcbe4dfbd0233757d3e357fdf2ee29df1219fa\nparent e10f8bfcaec44cf1e7b73c390225b80644e8367f\nauthor Carl Dong <contact@carldong.me> 1564691280 -0400\ncommitter Carl Dong <contact@carldong.me> 1567026905 -0400\n\nfeat: Adapt addrman to addrv2, write tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02dfac7799dc3a1febfe6d009debf28d59c64465",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02dfac7799dc3a1febfe6d009debf28d59c64465",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02dfac7799dc3a1febfe6d009debf28d59c64465/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e10f8bfcaec44cf1e7b73c390225b80644e8367f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e10f8bfcaec44cf1e7b73c390225b80644e8367f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e10f8bfcaec44cf1e7b73c390225b80644e8367f"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 69,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1e5f05839c98843269f42d48c43fd10d9f245c95",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02dfac7799dc3a1febfe6d009debf28d59c64465/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02dfac7799dc3a1febfe6d009debf28d59c64465/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=02dfac7799dc3a1febfe6d009debf28d59c64465",
        "patch": "@@ -169,6 +169,8 @@ class CAddrInfo : public CAddress\n //! the maximum time we'll spend trying to resolve a tried table collision, in seconds\n static const int64_t ADDRMAN_TEST_WINDOW = 40*60; // 40 minutes\n \n+#define ADDRMAN_HIGHEST_KNOWN_SERIALIZATION_VERSION 2\n+\n /**\n  * Stochastical (IP) address manager\n  */\n@@ -209,6 +211,7 @@ class CAddrMan\n     //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n     std::set<int> m_tried_collisions;\n \n+    unsigned char m_serialization_version;\n protected:\n     //! secret key to randomize bucket select with\n     uint256 nKey;\n@@ -302,7 +305,10 @@ class CAddrMan\n     {\n         LOCK(cs);\n \n-        unsigned char nVersion = 1;\n+        unsigned char nVersion = ADDRMAN_HIGHEST_KNOWN_SERIALIZATION_VERSION;\n+        if (nVersion == 2) {\n+            s.SetVersion(s.GetVersion() | SERIALIZE_ADDR_AS_V2);\n+        }\n         s << nVersion;\n         s << ((unsigned char)32);\n         s << nKey;\n@@ -356,6 +362,9 @@ class CAddrMan\n \n         unsigned char nVersion;\n         s >> nVersion;\n+        if (nVersion == 2) {\n+            s.SetVersion(s.GetVersion() | SERIALIZE_ADDR_AS_V2);\n+        }\n         unsigned char nKeySize;\n         s >> nKeySize;\n         if (nKeySize != 32) throw std::ios_base::failure(\"Incorrect keysize in addrman deserialization\");\n@@ -383,7 +392,7 @@ class CAddrMan\n             mapAddr[info] = n;\n             info.nRandomPos = vRandom.size();\n             vRandom.push_back(n);\n-            if (nVersion != 1 || nUBuckets != ADDRMAN_NEW_BUCKET_COUNT) {\n+            if (nVersion == 0 || ADDRMAN_HIGHEST_KNOWN_SERIALIZATION_VERSION < nVersion || nUBuckets != ADDRMAN_NEW_BUCKET_COUNT) {\n                 // In case the new table data cannot be used (nVersion unknown, or bucket count wrong),\n                 // immediately try to give them a reference based on their primary source address.\n                 int nUBucket = info.GetNewBucket(nKey);\n@@ -427,7 +436,7 @@ class CAddrMan\n                 if (nIndex >= 0 && nIndex < nNew) {\n                     CAddrInfo &info = mapInfo[nIndex];\n                     int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n-                    if (nVersion == 1 && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 && info.nRefCount < ADDRMAN_NEW_BUCKETS_PER_ADDRESS) {\n+                    if ((0 < nVersion && nVersion <= ADDRMAN_HIGHEST_KNOWN_SERIALIZATION_VERSION) && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 && info.nRefCount < ADDRMAN_NEW_BUCKETS_PER_ADDRESS) {\n                         info.nRefCount++;\n                         vvNew[bucket][nUBucketPos] = nIndex;\n                     }\n@@ -477,7 +486,8 @@ class CAddrMan\n         mapAddr.clear();\n     }\n \n-    CAddrMan()\n+    CAddrMan(unsigned char serialization_version = ADDRMAN_HIGHEST_KNOWN_SERIALIZATION_VERSION)\n+        : m_serialization_version(serialization_version)\n     {\n         Clear();\n     }"
      },
      {
        "sha": "5637f9b7507b431f68300ca54479fb632462f329",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02dfac7799dc3a1febfe6d009debf28d59c64465/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02dfac7799dc3a1febfe6d009debf28d59c64465/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=02dfac7799dc3a1febfe6d009debf28d59c64465",
        "patch": "@@ -120,13 +120,14 @@ class CHashWriter\n     CHash256 ctx;\n \n     const int nType;\n-    const int nVersion;\n+    int nVersion;\n public:\n \n     CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {}\n \n     int GetType() const { return nType; }\n     int GetVersion() const { return nVersion; }\n+    void SetVersion(int n)       { nVersion = n; }\n \n     void write(const char *pch, size_t size) {\n         ctx.Write((const unsigned char*)pch, size);"
      },
      {
        "sha": "ddaf3b30016436df29545b853e9684ada2f4a2be",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02dfac7799dc3a1febfe6d009debf28d59c64465/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02dfac7799dc3a1febfe6d009debf28d59c64465/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=02dfac7799dc3a1febfe6d009debf28d59c64465",
        "patch": "@@ -341,10 +341,19 @@ class CAddress : public CService\n         if (s.GetType() & SER_DISK)\n             READWRITE(nVersion);\n         if ((s.GetType() & SER_DISK) ||\n-            (nVersion >= CADDR_TIME_VERSION && !(s.GetType() & SER_GETHASH)))\n-            READWRITE(nTime);\n+            (nVersion >= CADDR_TIME_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            if (s.GetVersion() & SERIALIZE_ADDR_AS_V2) {\n+                READWRITE(VARINT(nTime));\n+            } else {\n+                READWRITE(nTime);\n+            }\n+        }\n         uint64_t nServicesInt = nServices;\n-        READWRITE(nServicesInt);\n+        if (s.GetVersion() & SERIALIZE_ADDR_AS_V2) {\n+            READWRITE(VARINT(nServicesInt));\n+        } else {\n+            READWRITE(nServicesInt);\n+        }\n         nServices = static_cast<ServiceFlags>(nServicesInt);\n         READWRITEAS(CService, *this);\n     }"
      },
      {
        "sha": "a0e3d193d3124366ab8637f27e7a512b73aeca9a",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02dfac7799dc3a1febfe6d009debf28d59c64465/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02dfac7799dc3a1febfe6d009debf28d59c64465/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=02dfac7799dc3a1febfe6d009debf28d59c64465",
        "patch": "@@ -604,7 +604,7 @@ class CAutoFile\n {\n private:\n     const int nType;\n-    const int nVersion;\n+    int nVersion;\n \n     FILE* file;\n \n@@ -652,6 +652,7 @@ class CAutoFile\n     //\n     int GetType() const          { return nType; }\n     int GetVersion() const       { return nVersion; }\n+    void SetVersion(int n)       { nVersion = n; }\n \n     void read(char* pch, size_t nSize)\n     {"
      },
      {
        "sha": "718203fbcb5c767706766ab56b21ad2c5c5e605f",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 1,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02dfac7799dc3a1febfe6d009debf28d59c64465/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02dfac7799dc3a1febfe6d009debf28d59c64465/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=02dfac7799dc3a1febfe6d009debf28d59c64465",
        "patch": "@@ -20,6 +20,7 @@\n \n class CAddrManSerializationMock : public CAddrMan\n {\n+    using CAddrMan::CAddrMan;\n public:\n     virtual void Serialize(CDataStream& s) const = 0;\n \n@@ -33,6 +34,7 @@ class CAddrManSerializationMock : public CAddrMan\n \n class CAddrManUncorrupted : public CAddrManSerializationMock\n {\n+    using CAddrManSerializationMock::CAddrManSerializationMock;\n public:\n     void Serialize(CDataStream& s) const override\n     {\n@@ -73,7 +75,7 @@ static CDataStream AddrmanToStream(CAddrManSerializationMock& _addrman)\n     ssPeersIn << _addrman;\n     std::string str = ssPeersIn.str();\n     std::vector<unsigned char> vchData(str.begin(), str.end());\n-    return CDataStream(vchData, SER_DISK, CLIENT_VERSION);\n+    return CDataStream(vchData, ssPeersIn.GetType(), ssPeersIn.GetVersion());\n }\n \n BOOST_FIXTURE_TEST_SUITE(net_tests, BasicTestingSetup)\n@@ -134,6 +136,42 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     BOOST_CHECK(addrman2.size() == 3);\n }\n \n+BOOST_AUTO_TEST_CASE(caddrdb_read_v1_ser)\n+{\n+    // Construct an AddrMan that serializes in v1 format\n+    CAddrManUncorrupted addrmanUncorrupted(1);\n+    addrmanUncorrupted.MakeDeterministic();\n+\n+    CService addr1, addr2, addr3;\n+    BOOST_CHECK(Lookup(\"250.7.1.1\", addr1, 8333, false));\n+    BOOST_CHECK(Lookup(\"250.7.2.2\", addr2, 9999, false));\n+    BOOST_CHECK(Lookup(\"250.7.3.3\", addr3, 9999, false));\n+\n+    // Add three addresses to new table.\n+    CService source;\n+    BOOST_CHECK(Lookup(\"252.5.1.1\", source, 8333, false));\n+    BOOST_CHECK(addrmanUncorrupted.Add(CAddress(addr1, NODE_NONE), source));\n+    BOOST_CHECK(addrmanUncorrupted.Add(CAddress(addr2, NODE_NONE), source));\n+    BOOST_CHECK(addrmanUncorrupted.Add(CAddress(addr3, NODE_NONE), source));\n+\n+    // Test that the de-serialization does not throw an exception.\n+    CDataStream ssPeers1 = AddrmanToStream(addrmanUncorrupted);\n+    bool exceptionThrown = false;\n+    CAddrMan addrman1;\n+\n+    BOOST_CHECK(addrman1.size() == 0);\n+    try {\n+        unsigned char pchMsgTmp[4];\n+        ssPeers1 >> pchMsgTmp;\n+        ssPeers1 >> addrman1;\n+    } catch (const std::exception&) {\n+        exceptionThrown = true;\n+    }\n+\n+    BOOST_CHECK(addrman1.size() == 3);\n+    BOOST_CHECK(exceptionThrown == false);\n+}\n+\n \n BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n {"
      }
    ]
  },
  {
    "sha": "c0414a6a17ea2cf5812b45dbddf318059cde0b7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDQxNGE2YTE3ZWEyY2Y1ODEyYjQ1ZGJkZGYzMTgwNTljZGUwYjdl",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-08-20T18:04:40Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-08-28T21:15:06Z"
      },
      "message": "feat: net_processing code for addrv2",
      "tree": {
        "sha": "e053ef492e72aa2b7d90a346bf2fb0c2901971d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e053ef492e72aa2b7d90a346bf2fb0c2901971d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0414a6a17ea2cf5812b45dbddf318059cde0b7e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl1m7toACgkQDMUhUxl5\nkaXrhw/+JjhiCT9IuEnIyLbBCQcptc40ez+b8QGcQEgsYrgVP3buV2Y+DdPrmfBj\nOQ7VwanCu8LoTUn58+hBc7hwoC6PRFbMcmraar+O78vVGVAOcrQgd6uCzbFQD8ef\nt87HI2F2ZDlf5JAJ57eO3nXVO8bOK8V4H/MpH7aslitYIV+dKJmGkm8z9ZQRD/ZR\nPbfH/a6+VY29mvRgHq3vl7sAiH9HTMBLFuTGRjfMDEowvJ8wCMmSW1TxgDNq+WPh\nNYKPdzqg59OctvuaTS2VMGO16oOCaLV60sVjg6hMyukqldNTZ2yWnFYmsGPQ/XU0\n+AIQWRM/21+pTiyIeNXtrep/EeBbJawJYwucw85CxRH26YMcG6XGgsoIK+Cm/otS\nHrKodIrrFlJc5ywba6OHpFUkpOILkFSkULLeakwNMHgPtKbJwn2xMT2k9Yvn2CC4\nJtGfETGIDZM/76jlca2uuWznB2fUqqPoqR6jbHVz30lZkriCSSFLbSQd8o3VgvWZ\nVeELxqMV9UGt9OQVkNd5uqMnp0R4JjzRiIY9eC1ZCwHR8uVQf4CEoSI60yQSqhCw\nP3N6+YQ66KCmifuxwCuJ2vgblS+WcVqtwMUESCH8M/zV7IE596T032zkrRJZ0aPi\nPTi/Ed14IgqU59QY1yy2m3wqk8ZLa4MKVYuKkx0M8PK8p5ETmew=\n=8H0H\n-----END PGP SIGNATURE-----",
        "payload": "tree e053ef492e72aa2b7d90a346bf2fb0c2901971d7\nparent 02dfac7799dc3a1febfe6d009debf28d59c64465\nauthor Carl Dong <contact@carldong.me> 1566324280 -0400\ncommitter Carl Dong <contact@carldong.me> 1567026906 -0400\n\nfeat: net_processing code for addrv2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0414a6a17ea2cf5812b45dbddf318059cde0b7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0414a6a17ea2cf5812b45dbddf318059cde0b7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0414a6a17ea2cf5812b45dbddf318059cde0b7e/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02dfac7799dc3a1febfe6d009debf28d59c64465",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02dfac7799dc3a1febfe6d009debf28d59c64465",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02dfac7799dc3a1febfe6d009debf28d59c64465"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 52,
      "deletions": 5
    },
    "files": [
      {
        "sha": "72fa2370ec9858804d7ab900c25f823b73e35343",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 5,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0414a6a17ea2cf5812b45dbddf318059cde0b7e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0414a6a17ea2cf5812b45dbddf318059cde0b7e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c0414a6a17ea2cf5812b45dbddf318059cde0b7e",
        "patch": "@@ -360,6 +360,9 @@ struct CNodeState {\n     //! Whether this peer is a manual connection\n     bool m_is_manual_connection;\n \n+    //! Whether this peer accepts addrv2 messages\n+    bool m_accepts_addrv2{false};\n+\n     CNodeState(CAddress addrIn, std::string addrNameIn, bool is_inbound, bool is_manual) :\n         address(addrIn), name(std::move(addrNameIn)), m_is_inbound(is_inbound),\n         m_is_manual_connection (is_manual)\n@@ -2093,6 +2096,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                       (fLogIPs ? strprintf(\", peeraddr=%s\", pfrom->addr.ToString()) : \"\"));\n         }\n \n+        // Signal support for receiving addrv2 as soon as we're considered\n+        // connected\n+        connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDADDRv2));\n+\n         if (pfrom->nVersion >= SENDHEADERS_VERSION) {\n             // Tell our peer we prefer to receive headers rather than inv's\n             // We send this to non-NODE NETWORK peers as well, because even\n@@ -2124,9 +2131,18 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         return false;\n     }\n \n-    if (strCommand == NetMsgType::ADDR) {\n+    if (strCommand == NetMsgType::ADDR || strCommand == NetMsgType::ADDRv2) {\n+        if (strCommand == NetMsgType::ADDRv2) {\n+            vRecv.SetVersion(vRecv.GetVersion() | SERIALIZE_ADDR_AS_V2);\n+        }\n         std::vector<CAddress> vAddr;\n-        vRecv >> vAddr;\n+        try {\n+            vRecv >> vAddr;\n+        } catch (...) {\n+            LOCK(cs_main);\n+            Misbehaving(pfrom->GetId(), 20, \"absurdly large addrv2 entry\");\n+            return false;\n+        }\n \n         // Don't want addr from older versions unless seeding\n         if (pfrom->nVersion < CADDR_TIME_VERSION && connman->GetAddressCount() > 1000)\n@@ -2181,6 +2197,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         return true;\n     }\n \n+    if (strCommand == NetMsgType::SENDADDRv2) {\n+        LOCK(cs_main);\n+        State(pfrom->GetId())->m_accepts_addrv2 = true;\n+        return true;\n+    }\n+\n     if (strCommand == NetMsgType::SENDCMPCT) {\n         bool fAnnounceUsingCMPCTBLOCK = false;\n         uint64_t nCMPCTBLOCKVersion = 0;\n@@ -3590,14 +3612,24 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     // receiver rejects addr messages larger than 1000\n                     if (vAddr.size() >= 1000)\n                     {\n-                        connman->PushMessage(pto, msgMaker.Make(NetMsgType::ADDR, vAddr));\n+                        if (state.m_accepts_addrv2) {\n+                            connman->PushMessage(pto, msgMaker.Make(SERIALIZE_ADDR_AS_V2, NetMsgType::ADDRv2, vAddr));\n+                        } else {\n+                            connman->PushMessage(pto, msgMaker.Make(NetMsgType::ADDR, vAddr));\n+                        }\n+\n                         vAddr.clear();\n                     }\n                 }\n             }\n             pto->vAddrToSend.clear();\n-            if (!vAddr.empty())\n-                connman->PushMessage(pto, msgMaker.Make(NetMsgType::ADDR, vAddr));\n+            if (!vAddr.empty()) {\n+                if (state.m_accepts_addrv2) {\n+                    connman->PushMessage(pto, msgMaker.Make(SERIALIZE_ADDR_AS_V2, NetMsgType::ADDRv2, vAddr));\n+                } else {\n+                    connman->PushMessage(pto, msgMaker.Make(NetMsgType::ADDR, vAddr));\n+                }\n+            }\n             // we only send the big addr message once\n             if (pto->vAddrToSend.capacity() > 40)\n                 pto->vAddrToSend.shrink_to_fit();"
      },
      {
        "sha": "72bb8f984464971cd7774cc1ddcb04f6aee7ee13",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0414a6a17ea2cf5812b45dbddf318059cde0b7e/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0414a6a17ea2cf5812b45dbddf318059cde0b7e/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=c0414a6a17ea2cf5812b45dbddf318059cde0b7e",
        "patch": "@@ -18,6 +18,8 @@ namespace NetMsgType {\n const char *VERSION=\"version\";\n const char *VERACK=\"verack\";\n const char *ADDR=\"addr\";\n+const char *ADDRv2=\"addrv2\";\n+const char *SENDADDRv2=\"sendaddrv2\";\n const char *INV=\"inv\";\n const char *GETDATA=\"getdata\";\n const char *MERKLEBLOCK=\"merkleblock\";\n@@ -50,6 +52,8 @@ const static std::string allNetMessageTypes[] = {\n     NetMsgType::VERSION,\n     NetMsgType::VERACK,\n     NetMsgType::ADDR,\n+    NetMsgType::ADDRv2,\n+    NetMsgType::SENDADDRv2,\n     NetMsgType::INV,\n     NetMsgType::GETDATA,\n     NetMsgType::MERKLEBLOCK,"
      },
      {
        "sha": "cde57f6b5bc46944e3555f89d7328d2935e3f8ec",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0414a6a17ea2cf5812b45dbddf318059cde0b7e/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0414a6a17ea2cf5812b45dbddf318059cde0b7e/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=c0414a6a17ea2cf5812b45dbddf318059cde0b7e",
        "patch": "@@ -84,6 +84,17 @@ extern const char *VERACK;\n  * @see https://bitcoin.org/en/developer-reference#addr\n  */\n extern const char *ADDR;\n+/**\n+ * The addrv2 (IP address) message relays connection information for peers on\n+ * the network just like the addr message, but is extended to allow gossipping\n+ * of longer node addresses.\n+ */\n+extern const char *ADDRv2;\n+/**\n+ * Indicates that a node prefers to receive connection information for peers via\n+ * an \"addrv2\" message rather than an \"addr\" message.\n+ */\n+extern const char *SENDADDRv2;\n /**\n  * The inv message (inventory message) transmits one or more inventories of\n  * objects known to the transmitting peer."
      }
    ]
  },
  {
    "sha": "e54fb70b3dfeed37b0955c5814507f7c59c615d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTRmYjcwYjNkZmVlZDM3YjA5NTVjNTgxNDUwN2Y3YzU5YzYxNWQy",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-08-21T14:57:10Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-08-28T21:15:06Z"
      },
      "message": "feat: Make functional tests not freak out on sendaddrv2",
      "tree": {
        "sha": "a78016741d586b3fb83cc47fc19cef3415d4244e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a78016741d586b3fb83cc47fc19cef3415d4244e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e54fb70b3dfeed37b0955c5814507f7c59c615d2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl1m7toACgkQDMUhUxl5\nkaW2mQ//TkU6k2eXMX/SSlp+J06r9DR7x+I/EBp/m/KhY9txKn+dA8yC18dBhCEf\nkNE8gZH9e/auHlGI9wfvzF3Gvab30hRpMsXVnTkE4gh+8ztoeTjSgL/Dh3Qv9FKH\nk7CbcaDOwmU5CLF6bmyR2Z5nL3wkjEWcKHZ4/30b8APspMrw60gcbapKgguVp+Xy\nIe01ydeXZ/E6pIbaqB94y2qEUxAEqwROK+jwyZs4/2wFs4E2WW0opKVT6f6kJYXI\nPYM7NyLd1RZWtdYN4f+ymOgpJipUmM7ThpRJHPBriUqEXRI/BQP72Kj0pvNxy8cq\ns/CBo/OR7cE1ukAdjBw92qaa1aGXOoD5VvpJ/brtCB9z1EfrrDLQfM0cPXiRWS+c\nMD22Y34ysH+ioKsah5Xu722/y3m4sbSx3AEgfjZuRXDrXdZA9anJxaqXlG1gWgHv\nqupLE9zLV5drVnAYCPNwC93GJJKmxFzH/gXNE9xjhCc0g+hamvtmie6S9jhlodUl\nrAQrJnCMBI/5E9KWox+YwSFK1NbEwGiYlyObq/PtxZG9YSQuHbjNSLzpa8dPgs2z\nlKIzQ01/ruNOYPqz7rqCdvaeyXULEi49ZJTP75bbYy41Ho6epL0eQ4pnhkoe2VlY\nZ1EntW+qrBpfTnT1645AmIHTWHX0DXFEW6p9QUSORInbvTTEUsc=\n=5eF3\n-----END PGP SIGNATURE-----",
        "payload": "tree a78016741d586b3fb83cc47fc19cef3415d4244e\nparent c0414a6a17ea2cf5812b45dbddf318059cde0b7e\nauthor Carl Dong <contact@carldong.me> 1566399430 -0400\ncommitter Carl Dong <contact@carldong.me> 1567026906 -0400\n\nfeat: Make functional tests not freak out on sendaddrv2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54fb70b3dfeed37b0955c5814507f7c59c615d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e54fb70b3dfeed37b0955c5814507f7c59c615d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54fb70b3dfeed37b0955c5814507f7c59c615d2/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0414a6a17ea2cf5812b45dbddf318059cde0b7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0414a6a17ea2cf5812b45dbddf318059cde0b7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0414a6a17ea2cf5812b45dbddf318059cde0b7e"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ad091c27b5bd55db8a1b4cfee2aa39b2cfb9f8ed",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54fb70b3dfeed37b0955c5814507f7c59c615d2/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54fb70b3dfeed37b0955c5814507f7c59c615d2/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=e54fb70b3dfeed37b0955c5814507f7c59c615d2",
        "patch": "@@ -49,6 +49,7 @@ def on_mempool(self, message): self.bad_message(message)\n     def on_pong(self, message): self.bad_message(message)\n     def on_feefilter(self, message): self.bad_message(message)\n     def on_sendheaders(self, message): self.bad_message(message)\n+    def on_sendaddrv2(self, message): self.bad_message(message)\n     def on_sendcmpct(self, message): self.bad_message(message)\n     def on_cmpctblock(self, message): self.bad_message(message)\n     def on_getblocktxn(self, message): self.bad_message(message)"
      },
      {
        "sha": "4e1de52b269280d92d615c4a9b49aaa799f905eb",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54fb70b3dfeed37b0955c5814507f7c59c615d2/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54fb70b3dfeed37b0955c5814507f7c59c615d2/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=e54fb70b3dfeed37b0955c5814507f7c59c615d2",
        "patch": "@@ -1264,6 +1264,22 @@ def __repr__(self):\n         return \"msg_sendheaders()\"\n \n \n+class msg_sendaddrv2:\n+    __slots__ = ()\n+    command = b\"sendaddrv2\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return b\"\"\n+\n+    def __repr__(self):\n+        return \"msg_sendaddrv2()\"\n+\n # getheaders message has\n # number of entries\n # vector of hashes"
      },
      {
        "sha": "d927d1187bf0b96a4eee4b9edd62728f900a1e3c",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54fb70b3dfeed37b0955c5814507f7c59c615d2/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54fb70b3dfeed37b0955c5814507f7c59c615d2/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=e54fb70b3dfeed37b0955c5814507f7c59c615d2",
        "patch": "@@ -44,6 +44,7 @@\n     msg_reject,\n     msg_sendcmpct,\n     msg_sendheaders,\n+    msg_sendaddrv2,\n     msg_tx,\n     MSG_TX,\n     MSG_TYPE_MASK,\n@@ -77,6 +78,7 @@\n     b\"reject\": msg_reject,\n     b\"sendcmpct\": msg_sendcmpct,\n     b\"sendheaders\": msg_sendheaders,\n+    b\"sendaddrv2\": msg_sendaddrv2,\n     b\"tx\": msg_tx,\n     b\"verack\": msg_verack,\n     b\"version\": msg_version,\n@@ -332,6 +334,7 @@ def on_pong(self, message): pass\n     def on_reject(self, message): pass\n     def on_sendcmpct(self, message): pass\n     def on_sendheaders(self, message): pass\n+    def on_sendaddrv2(self, message): pass\n     def on_tx(self, message): pass\n \n     def on_inv(self, message):"
      }
    ]
  }
]