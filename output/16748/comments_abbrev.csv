DrahtBot,2019-08-28 22:30:28,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17812](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17812.html) (config, test: asmap functional tests and fe",https://github.com/bitcoin/bitcoin/pull/16748#issuecomment-525947108,525947108,
laanwj,2019-08-29 09:31:59,"Concept ACK, thanks for working on this",https://github.com/bitcoin/bitcoin/pull/16748#issuecomment-526106195,526106195,
naumenkogs,2019-09-03 16:39:17,"Concept ACK\n\nI reviewed ```std::vector<unsigned char> CNetAddr::GetGroup() const``` part and it seems correct to me, although not sure mixing GetByte() and direct reading from the ip array is a good idea.",https://github.com/bitcoin/bitcoin/pull/16748#issuecomment-527539510,527539510,
practicalswift,2019-09-29 15:13:39,"Concept ACK\n\nRegarding the tests: could add a test for `IsStandardV2Deserialization` which seems both unused and untested currently? :)",https://github.com/bitcoin/bitcoin/pull/16748#issuecomment-536311628,536311628,
vasild,2020-04-22 08:27:25,"> What would be the best way to split up [e600992](https://github.com/bitcoin/bitcoin/commit/e6009922077ce330bc76b82b9c3aa1e813e40356)? I've tried to split it up in multiple ways but every time I attempt to do it, it just increases the total diff.\n\nIt looks ok to me, no screaming need to split it.\n\n> In [e10f8bf](https://github.com/bitcoin/bitcoin/commit/e10f8bfcaec44cf1e7b73c390225b80644e",https://github.com/bitcoin/bitcoin/pull/16748#issuecomment-617631642,617631642,
vasild,2020-05-01 09:05:27,"I rebased this and fixed some unit tests and a compilation warning at:\nhttps://github.com/vasild/bitcoin/tree/2019-07-addrv2v4\nNext I will address the above suggestions.",https://github.com/bitcoin/bitcoin/pull/16748#issuecomment-622310812,622310812,
dongcarl,2020-05-01 16:19:50,@vasild Great! I'll close this one as soon as you open your PR :-),https://github.com/bitcoin/bitcoin/pull/16748#issuecomment-622455096,622455096,
vasild,2020-05-06 19:36:30,"Just to note - I am addressing the above suggestions and will then open a PR, which I deem would be ready for wider review.",https://github.com/bitcoin/bitcoin/pull/16748#issuecomment-624847869,624847869,
vasild,2020-05-20 16:24:33,"> Just to note - I am addressing the above suggestions and will then open a PR, which I deem would be ready for wider review.\n\nDone: https://github.com/bitcoin/bitcoin/pull/19031",https://github.com/bitcoin/bitcoin/pull/16748#issuecomment-631581865,631581865,
dongcarl,2020-05-20 16:49:54,"Closing in favor of #19031, will review there.",https://github.com/bitcoin/bitcoin/pull/16748#issuecomment-631596050,631596050,
jonatack,2020-09-14 18:49:19,"Big, big, big kudos for your work on this @dongcarl.",https://github.com/bitcoin/bitcoin/pull/16748#issuecomment-692244028,692244028,
vasild,2020-04-17 17:23:02,"nit: this comment is outdated now, needs to be adjusted (or deleted).",https://github.com/bitcoin/bitcoin/pull/16748#discussion_r410364056,410364056,src/netaddress.cpp
vasild,2020-04-17 17:25:45,"nit: this comment is outdated now, needs to be adjusted (or deleted).",https://github.com/bitcoin/bitcoin/pull/16748#discussion_r410365541,410365541,src/netaddress.cpp
vasild,2020-04-17 19:20:33,nit: this function's comment is now outdated,https://github.com/bitcoin/bitcoin/pull/16748#discussion_r410423357,410423357,src/netaddress.cpp
vasild,2020-04-17 19:58:16,nit: deserves `explicit`,https://github.com/bitcoin/bitcoin/pull/16748#discussion_r410440592,410440592,src/addrman.h
vasild,2020-04-17 20:09:33,"nit: if we just let the exception uncaught, this will suffice to fail the test?",https://github.com/bitcoin/bitcoin/pull/16748#discussion_r410445532,410445532,src/test/net_tests.cpp
vasild,2020-04-21 14:30:01,"This message implies that the only reason `vRecv >> vAddr` could throw is a too large addrv2 entry. While this is the case with the current code, it is better to avoid such an assumption to make it less fragile wrt future changes (where we start throwing for more reasons).\n\nWould it be possible to catch the exception object and print something like `""can't parse address message: %s"", e.what()`",https://github.com/bitcoin/bitcoin/pull/16748#discussion_r412236060,412236060,src/net_processing.cpp
vasild,2020-04-21 14:54:57,"This would accept the `SENDADDRv2` message at any time during the connection lifetime. @laanwj [commented](https://github.com/bitcoin/bips/pull/766#issuecomment-517003833):\n\n> I think for simplicy of implementation we'd want to mandate that this should be sent _after_ `version` but _before_ any other (non-BIP-signalling) messages, so a connection won't switch to v2 suddenly halfway other thing",https://github.com/bitcoin/bitcoin/pull/16748#discussion_r412257785,412257785,src/net_processing.cpp
vasild,2020-04-21 15:22:33,"The arguments seem redundant: `NetMsgType::ADDRv2` already implies v2, so `SERIALIZE_ADDR_AS_V2` shouldn't be necessary?\n\nThis also opens up the possibility for an unintentional misuses like `Make(SERIALIZE_ADDR_AS_V2, NetMsgType::ADDR, vAddr)` or `Make(NetMsgType::ADDRv2, vAddr)`. Would it be more appropriate to have something like the following inside `CNetMsgMaker::Make()`?\n\n```cpp\nif",https://github.com/bitcoin/bitcoin/pull/16748#discussion_r412281609,412281609,src/net_processing.cpp
vasild,2020-04-21 16:32:03,"Here `SERIALIZE_ADDR_AS_V2` is being used as a **de**serialize instruction (""deserialize this addr message which is in v2 format"") which may be confusing. What about using a separate constant like `DESERIALIZE_ADDR_FROM_V2`, or just one constant but with a generic name like `ADDR_V2_FORMAT`?",https://github.com/bitcoin/bitcoin/pull/16748#discussion_r412308897,412308897,src/net_processing.cpp
vasild,2020-04-22 12:24:31,This member variable is unused.,https://github.com/bitcoin/bitcoin/pull/16748#discussion_r412934714,412934714,src/addrman.h
vasild,2020-04-24 15:26:13,"`netmask` is still [defined](https://github.com/bitcoin/bitcoin/pull/16748/files#diff-76d15e11a95be7a4aee1eb89de6098caR185) as `uint8_t netmask[16];` and if this is one of the new addresses that has `addr.ip.size()` equal to 32, then this `memset()` will overflow the buffer. Yes, `valid` will be false due to the above `valid &= ...`, but the overflow would still happen.",https://github.com/bitcoin/bitcoin/pull/16748#discussion_r414663229,414663229,src/netaddress.cpp
vasild,2020-05-06 14:49:06,"No, it does not because the argument is `unsigned char`.",https://github.com/bitcoin/bitcoin/pull/16748#discussion_r420852452,420852452,src/addrman.h
vasild,2020-05-06 19:15:18,"We must make sure that we never end up here with `this` being one of the new address types, e.g. Tor v3. If that happens `GetV1Serialization()` will return `false` (which is currently ignored).\n\nWe should not attempt to send e.g. Tor v3 address to a peer that did not signal ADDRv2 support. Maybe `CNode::PushAddress()` is a good place to plant a check for that and skip adding new type addresses",https://github.com/bitcoin/bitcoin/pull/16748#discussion_r421031112,421031112,src/netaddress.h
vasild,2020-05-06 19:18:47,"This will flip `vRecv` to always deserialize addr messages as addrv2. If we subsequently receive addr(v1) then it will fail to parse it as addrv2. It would be unusual for a peer to send addrv2 followed by addrv1, but still that's not forbidden and we should handle it.",https://github.com/bitcoin/bitcoin/pull/16748#discussion_r421033048,421033048,src/net_processing.cpp
