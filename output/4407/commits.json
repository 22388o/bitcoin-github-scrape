[
  {
    "sha": "aa815647005bc8467f467c35a9e617794446cd64",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTgxNTY0NzAwNWJjODQ2N2Y0NjdjMzVhOWU2MTc3OTQ0NDZjZDY0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-22T22:00:26Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-29T19:50:55Z"
      },
      "message": "Track peers' available blocks",
      "tree": {
        "sha": "9b97cad3ab2f673aadda08802d7aa74edc483552",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b97cad3ab2f673aadda08802d7aa74edc483552"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa815647005bc8467f467c35a9e617794446cd64",
      "comment_count": 5,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa815647005bc8467f467c35a9e617794446cd64",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa815647005bc8467f467c35a9e617794446cd64",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa815647005bc8467f467c35a9e617794446cd64/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a11f648585ce29ae0be1a572ccbd7611f3dd2b1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a11f648585ce29ae0be1a572ccbd7611f3dd2b1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a11f648585ce29ae0be1a572ccbd7611f3dd2b1d"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 48,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dc6843128238e594b6f55a8b6a863a6dc41890db",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa815647005bc8467f467c35a9e617794446cd64/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa815647005bc8467f467c35a9e617794446cd64/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=aa815647005bc8467f467c35a9e617794446cd64",
        "patch": "@@ -207,6 +207,10 @@ struct CNodeState {\n     std::string name;\n     // List of asynchronously-determined block rejections to notify this peer about.\n     std::vector<CBlockReject> rejects;\n+    // The best known block we know this peer has announced.\n+    CBlockIndex *pindexBestKnownBlock;\n+    // The hash of the last unknown block this peer has announced.\n+    uint256 hashLastUnknownBlock;\n     list<QueuedBlock> vBlocksInFlight;\n     int nBlocksInFlight;\n     list<uint256> vBlocksToDownload;\n@@ -217,6 +221,8 @@ struct CNodeState {\n     CNodeState() {\n         nMisbehavior = 0;\n         fShouldBan = false;\n+        pindexBestKnownBlock = NULL;\n+        hashLastUnknownBlock = uint256(0);\n         nBlocksToDownload = 0;\n         nBlocksInFlight = 0;\n         nLastBlockReceive = 0;\n@@ -313,6 +319,39 @@ void MarkBlockAsInFlight(NodeId nodeid, const uint256 &hash) {\n     mapBlocksInFlight[hash] = std::make_pair(nodeid, it);\n }\n \n+/** Check whether the last unknown block a peer advertized is not yet known. */\n+void ProcessBlockAvailability(NodeId nodeid) {\n+    CNodeState *state = State(nodeid);\n+    assert(state != NULL);\n+\n+    if (state->hashLastUnknownBlock != 0) {\n+        map<uint256, CBlockIndex*>::iterator itOld = mapBlockIndex.find(state->hashLastUnknownBlock);\n+        if (itOld != mapBlockIndex.end() && itOld->second->nChainWork > 0) {\n+            if (state->pindexBestKnownBlock == NULL || itOld->second->nChainWork >= state->pindexBestKnownBlock->nChainWork)\n+                state->pindexBestKnownBlock = itOld->second;\n+            state->hashLastUnknownBlock = uint256(0);\n+        }\n+    }\n+}\n+\n+/** Update tracking information about which blocks a peer is assumed to have. */\n+void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n+    CNodeState *state = State(nodeid);\n+    assert(state != NULL);\n+\n+    ProcessBlockAvailability(nodeid);\n+\n+    map<uint256, CBlockIndex*>::iterator it = mapBlockIndex.find(hash);\n+    if (it != mapBlockIndex.end() && it->second->nChainWork > 0) {\n+        // An actually better block was announced.\n+        if (state->pindexBestKnownBlock == NULL || it->second->nChainWork >= state->pindexBestKnownBlock->nChainWork)\n+            state->pindexBestKnownBlock = it->second;\n+    } else {\n+        // An unknown block was announced; just assume that the latest one is the best one.\n+        state->hashLastUnknownBlock = hash;\n+    }\n+}\n+\n } // anon namespace\n \n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n@@ -321,6 +360,7 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     if (state == NULL)\n         return false;\n     stats.nMisbehavior = state->nMisbehavior;\n+    stats.nSyncHeight = state->pindexBestKnownBlock ? state->pindexBestKnownBlock->nHeight : -1;\n     return true;\n }\n \n@@ -3613,6 +3653,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                 PushGetBlocks(pfrom, chainActive.Tip(), GetOrphanRoot(inv.hash));\n             }\n \n+            if (inv.type == MSG_BLOCK)\n+                UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n+\n             // Track requests for our stuff\n             g_signals.Inventory(inv.hash);\n         }\n@@ -4359,6 +4402,9 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             pto->fDisconnect = true;\n         }\n \n+        // Update knowledge of peer's block availability.\n+        ProcessBlockAvailability(pto->GetId());\n+\n         //\n         // Message: getdata (blocks)\n         //"
      },
      {
        "sha": "9487078b749158a1daeb7a4a9ad3d3170a14f0b2",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa815647005bc8467f467c35a9e617794446cd64/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa815647005bc8467f467c35a9e617794446cd64/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=aa815647005bc8467f467c35a9e617794446cd64",
        "patch": "@@ -185,6 +185,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n struct CNodeStateStats {\n     int nMisbehavior;\n+    int nSyncHeight;\n };\n \n struct CDiskBlockPos"
      },
      {
        "sha": "2d7abb2d5872c4c5051791a9443215c21dbcc5ae",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa815647005bc8467f467c35a9e617794446cd64/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa815647005bc8467f467c35a9e617794446cd64/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=aa815647005bc8467f467c35a9e617794446cd64",
        "patch": "@@ -134,6 +134,7 @@ Value getpeerinfo(const Array& params, bool fHelp)\n         obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n         if (fStateStats) {\n             obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n+            obj.push_back(Pair(\"syncheight\", statestats.nSyncHeight));\n         }\n         obj.push_back(Pair(\"syncnode\", stats.fSyncNode));\n "
      }
    ]
  }
]