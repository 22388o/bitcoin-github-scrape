[
  {
    "sha": "69e077471434b4eb34ec4574c47f83956c51fa63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWUwNzc0NzE0MzRiNGViMzRlYzQ1NzRjNDdmODM5NTZjNTFmYTYz",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-01-18T14:07:05Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-02-20T07:46:38Z"
      },
      "message": "small changes in init, main, checkpoints.h and bitcoin-qt.pro\n\n- remove an unneeded MODAL flag, as MSG_ERROR sets MODAL\n- re-order an if-clause in main to have bool checks before a function call\n- fix some log messages that used wrong function names\n- make a log message use a correct ellipsis\n- remove some unneded spaces, brackets and line-breaks\n- fix style for adding files in the Qt project",
      "tree": {
        "sha": "83df1009cd502dbae2161a71c2575749ef183938",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83df1009cd502dbae2161a71c2575749ef183938"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69e077471434b4eb34ec4574c47f83956c51fa63",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69e077471434b4eb34ec4574c47f83956c51fa63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69e077471434b4eb34ec4574c47f83956c51fa63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69e077471434b4eb34ec4574c47f83956c51fa63/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "44d7f4cbebd446f8f4a48ff9048d4549c0e2448a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44d7f4cbebd446f8f4a48ff9048d4549c0e2448a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44d7f4cbebd446f8f4a48ff9048d4549c0e2448a"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 19,
      "deletions": 23
    },
    "files": [
      {
        "sha": "c527b76dad54d5dfc9b9f4196a6cb81ebd726f3e",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69e077471434b4eb34ec4574c47f83956c51fa63/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69e077471434b4eb34ec4574c47f83956c51fa63/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=69e077471434b4eb34ec4574c47f83956c51fa63",
        "patch": "@@ -206,7 +206,8 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/leveldb.h \\\n     src/threadsafety.h\n \n-SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n+SOURCES += src/qt/bitcoin.cpp \\\n+    src/qt/bitcoingui.cpp \\\n     src/qt/transactiontablemodel.cpp \\\n     src/qt/addresstablemodel.cpp \\\n     src/qt/optionsdialog.cpp \\\n@@ -270,11 +271,9 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/leveldb.cpp \\\n     src/txdb.cpp\n \n-RESOURCES += \\\n-    src/qt/bitcoin.qrc\n+RESOURCES += src/qt/bitcoin.qrc\n \n-FORMS += \\\n-    src/qt/forms/sendcoinsdialog.ui \\\n+FORMS += src/qt/forms/sendcoinsdialog.ui \\\n     src/qt/forms/addressbookpage.ui \\\n     src/qt/forms/signverifymessagedialog.ui \\\n     src/qt/forms/aboutdialog.ui \\"
      },
      {
        "sha": "240bd12fdebb7e12d58c00affc39d19673e2270d",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69e077471434b4eb34ec4574c47f83956c51fa63/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69e077471434b4eb34ec4574c47f83956c51fa63/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=69e077471434b4eb34ec4574c47f83956c51fa63",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #ifndef BITCOIN_CHECKPOINT_H\n-#define  BITCOIN_CHECKPOINT_H\n+#define BITCOIN_CHECKPOINT_H\n \n #include <map>\n "
      },
      {
        "sha": "cf49831b6b87bb782ed52c233ec618234d2af4eb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69e077471434b4eb34ec4574c47f83956c51fa63/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69e077471434b4eb34ec4574c47f83956c51fa63/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=69e077471434b4eb34ec4574c47f83956c51fa63",
        "patch": "@@ -497,7 +497,7 @@ bool AppInit2()\n     nScriptCheckThreads = GetArg(\"-par\", 0);\n     if (nScriptCheckThreads == 0)\n         nScriptCheckThreads = boost::thread::hardware_concurrency();\n-    if (nScriptCheckThreads <= 1) \n+    if (nScriptCheckThreads <= 1)\n         nScriptCheckThreads = 0;\n     else if (nScriptCheckThreads > MAX_SCRIPTCHECK_THREADS)\n         nScriptCheckThreads = MAX_SCRIPTCHECK_THREADS;"
      },
      {
        "sha": "9fde08b2c8d85fda90bac6341371cdd6db8781fa",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 13,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69e077471434b4eb34ec4574c47f83956c51fa63/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69e077471434b4eb34ec4574c47f83956c51fa63/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=69e077471434b4eb34ec4574c47f83956c51fa63",
        "patch": "@@ -454,8 +454,7 @@ bool CTransaction::AreInputsStandard(CCoinsViewCache& mapInputs) const\n     return true;\n }\n \n-unsigned int\n-CTransaction::GetLegacySigOpCount() const\n+unsigned int CTransaction::GetLegacySigOpCount() const\n {\n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTxIn& txin, vin)\n@@ -1176,7 +1175,7 @@ int GetNumBlocksOfPeers()\n \n bool IsInitialBlockDownload()\n {\n-    if (pindexBest == NULL || nBestHeight < Checkpoints::GetTotalBlocksEstimate() || fReindex || fImporting)\n+    if (pindexBest == NULL || fImporting || fReindex || nBestHeight < Checkpoints::GetTotalBlocksEstimate())\n         return true;\n     static int64 nLastUpdate;\n     static CBlockIndex* pindexLastBest;\n@@ -1629,7 +1628,6 @@ bool CBlock::ConnectBlock(CValidationState &state, CBlockIndex* pindex, CCoinsVi\n     vPos.reserve(vtx.size());\n     for (unsigned int i=0; i<vtx.size(); i++)\n     {\n-\n         const CTransaction &tx = vtx[i];\n \n         nInputs += tx.vin.size();\n@@ -1793,7 +1791,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n             return error(\"SetBestBlock() : ConnectBlock %s failed\", BlockHashStr(pindex->GetBlockHash()).c_str());\n         }\n         if (fBenchmark)\n-            printf(\"- Connect: %.2fms\\n\", (GetTimeMicros() - nStart) * 0.001); \n+            printf(\"- Connect: %.2fms\\n\", (GetTimeMicros() - nStart) * 0.001);\n \n         // Queue memory transactions to delete\n         BOOST_FOREACH(const CTransaction& tx, block.vtx)\n@@ -2444,7 +2442,7 @@ bool AbortNode(const std::string &strMessage) {\n     fRequestShutdown = true;\n     strMiscWarning = strMessage;\n     printf(\"*** %s\\n\", strMessage.c_str());\n-    uiInterface.ThreadSafeMessageBox(strMessage, \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::MODAL);\n+    uiInterface.ThreadSafeMessageBox(strMessage, \"\", CClientUIInterface::MSG_ERROR);\n     StartShutdown();\n     return false;\n }\n@@ -2491,7 +2489,7 @@ FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly) {\n     return OpenDiskFile(pos, \"blk\", fReadOnly);\n }\n \n-FILE *OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {\n+FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {\n     return OpenDiskFile(pos, \"rev\", fReadOnly);\n }\n \n@@ -2543,9 +2541,9 @@ bool static LoadBlockIndexDB()\n \n     // Load block file info\n     pblocktree->ReadLastBlockFile(nLastBlockFile);\n-    printf(\"LoadBlockIndex(): last block file = %i\\n\", nLastBlockFile);\n+    printf(\"LoadBlockIndexDB(): last block file = %i\\n\", nLastBlockFile);\n     if (pblocktree->ReadBlockFileInfo(nLastBlockFile, infoLastBlockFile))\n-        printf(\"LoadBlockIndex(): last block file: %s\\n\", infoLastBlockFile.ToString().c_str());\n+        printf(\"LoadBlockIndexDB(): last block file info: %s\\n\", infoLastBlockFile.ToString().c_str());\n \n     // Load bnBestInvalidWork, OK if it doesn't exist\n     pblocktree->ReadBestInvalidWork(bnBestInvalidWork);\n@@ -2557,7 +2555,7 @@ bool static LoadBlockIndexDB()\n \n     // Check whether we have a transaction index\n     pblocktree->ReadFlag(\"txindex\", fTxIndex);\n-    printf(\"LoadBlockIndex(): transaction index %s\\n\", fTxIndex ? \"enabled\" : \"disabled\");\n+    printf(\"LoadBlockIndexDB(): transaction index %s\\n\", fTxIndex ? \"enabled\" : \"disabled\");\n \n     // Load hashBestChain pointer to end of best chain\n     pindexBest = pcoinsTip->GetBestBlock();\n@@ -2574,7 +2572,7 @@ bool static LoadBlockIndexDB()\n          pindexPrev->pnext = pindex;\n          pindex = pindexPrev;\n     }\n-    printf(\"LoadBlockIndex(): hashBestChain=%s  height=%d date=%s\\n\",\n+    printf(\"LoadBlockIndexDB(): hashBestChain=%s  height=%d date=%s\\n\",\n         BlockHashStr(hashBestChain).c_str(), nBestHeight,\n         DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n \n@@ -2743,7 +2741,7 @@ bool InitBlockIndex() {\n             CDiskBlockPos blockPos;\n             CValidationState state;\n             if (!FindBlockPos(state, blockPos, nBlockSize+8, 0, block.nTime))\n-                return error(\"AcceptBlock() : FindBlockPos failed\");\n+                return error(\"LoadBlockIndex() : FindBlockPos failed\");\n             if (!block.WriteToDisk(blockPos))\n                 return error(\"LoadBlockIndex() : writing genesis block to disk failed\");\n             if (!block.AddToBlockIndex(state, blockPos))\n@@ -3305,7 +3303,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                         {\n                             CMerkleBlock merkleBlock(block, *pfrom->pfilter);\n                             pfrom->PushMessage(\"merkleblock\", merkleBlock);\n-                            // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see \n+                            // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n                             // This avoids hurting performance by pointlessly requiring a round-trip\n                             // Note that there is currently no way for a node to request any single transactions we didnt send here -\n                             // they must either disconnect and retry or request the full block."
      },
      {
        "sha": "e9601c3a4411c9c9d69c9d3774d1cd7f2a9835a5",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69e077471434b4eb34ec4574c47f83956c51fa63/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69e077471434b4eb34ec4574c47f83956c51fa63/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=69e077471434b4eb34ec4574c47f83956c51fa63",
        "patch": "@@ -28,7 +28,7 @@ struct CBlockIndexWorkComparator;\n static const unsigned int MAX_BLOCK_SIZE = 1000000;\n /** The maximum size for mined blocks */\n static const unsigned int MAX_BLOCK_SIZE_GEN = MAX_BLOCK_SIZE/2;\n-/** The maximum size for transactions we're willing to relay/mine **/\n+/** The maximum size for transactions we're willing to relay/mine */\n static const unsigned int MAX_STANDARD_TX_SIZE = MAX_BLOCK_SIZE_GEN/5;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n@@ -118,7 +118,6 @@ class CValidationState;\n \n struct CBlockTemplate;\n \n-\n /** Register a wallet to receive updates from core */\n void RegisterWallet(CWallet* pwalletIn);\n /** Unregister a wallet from core */\n@@ -1549,7 +1548,7 @@ class CBlockFileInfo\n      }\n \n      std::string ToString() const {\n-         return strprintf(\"CBlockFileInfo(blocks=%u, size=%u, heights=%u..%u, time=%s..%s)\", nBlocks, nSize, nHeightFirst, nHeightLast, DateTimeStrFormat(\"%Y-%m-%d\", nTimeFirst).c_str(), DateTimeStrFormat(\"%Y-%m-%d\", nTimeLast).c_str());\n+         return strprintf(\"CBlockFileInfo(blocks=%u, size=%u, heights=%u...%u, time=%s...%s)\", nBlocks, nSize, nHeightFirst, nHeightLast, DateTimeStrFormat(\"%Y-%m-%d\", nTimeFirst).c_str(), DateTimeStrFormat(\"%Y-%m-%d\", nTimeLast).c_str());\n      }\n \n      // update statistics (does not update nSize)"
      }
    ]
  }
]