sipa,2014-10-06T00:15:02Z,"Would it not be possible to keep this information outside of (every) CCoinsView? We only care about it for the tip, and not for intermediate caches that are created during validation (i.e., just update it after a block is validated).\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-57957753,57957753,
cozz,2014-10-06T16:47:42Z,"I can probably move the updates from (Dis)ConnectBlock to (Dis)ConnectTip, and make them with pcoinsTip, if this is what you mean?\n\nI would have to move the CBlockUndo declaration too, if thats ok, because I need that information.\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-58047870,58047870,
sipa,2014-10-08T22:04:14Z,"I actually meant keeping this out of coins.{h,cpp} entirely. We don't need every (partial copy) of a cache everywhere during validation of blocks and transactions to track modification of this index. Just updating a single independent index (in main, perhaps with an implementation in an independent file) after validation has succeeded should be sufficient.\n\nThe reason I ask this is because CCoin",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-58435406,58435406,
cozz,2014-10-09T17:01:22Z,"So where exactly should we update the index, (Dis)ConnectTip?\nI think the address index needs to be written to disk in the same leveldb-batch with the utxo, dont you?\n(Because you are talking about an independent index)\nOtherwise, I dont think we can ensure a consistent address index, if we write async from the utxo to disk. Thats the reason for putting this in coins.{h,cpp}, as the connect/dis",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-58541772,58541772,
sipa,2014-10-09T19:11:23Z,"Right, it's easier if the write is atomic (otherwise you'll need to have a separate catch up function to rebuild the index if it's out of date with the chainstate, and as it's always going to be updated in lockstep with the chainstate on disk, better make it part of it).\n\nOne way would be to have CCoinsViewDB take a reference/pointer to a map with extra index entries to write, and have BatchWrit",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-58561684,58561684,
cozz,2014-10-11T03:59:23Z,"Update:\nMoved the code from coins.{h,cpp} to new files coinsbyaddress.{h,cpp},\nwhile the address index is still written to disk together with the utxo.\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-58737205,58737205,
cozz,2014-10-16T17:04:36Z,Update: fixed a minor shutdown segfault in InitError case\n,https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-59395335,59395335,
theuni,2014-10-16T19:02:41Z,"There are lots of objects passed by ref that should be const ref it seems, and several new member functions that aren't marked as const. Beyond the usual const rabbit-hole, it makes this substantially harder to review (for me, anyway). Could you please fix those up?\n\nI made a few changes here as an example, please have a look: https://github.com/theuni/bitcoin/commit/d6c94fa726f19d722af718ca3b6b",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-59412689,59412689,
luke-jr,2014-10-16T20:00:09Z,How do I lookup a txout by some non-address-represented script?\n,https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-59420885,59420885,
sipa,2014-10-16T20:19:28Z,"I would suggest storing scriptPubKeys by their hash160 or hash256, rather than storing them in full in the map (requiring an extra heap allocation + 24 bytes of overhead for each). That's also more compact on disk than using the CScriptCompressor.\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-59423703,59423703,
sipa,2014-10-16T20:30:12Z,Calling the datastructure ByScript is probably more correct than ByAddress.\n,https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-59425284,59425284,
sipa,2014-10-16T20:30:41Z,You can make gettxoutsbyaddress (or equivalent) also take a hex-encoding script for arbitrary script lookups.\n,https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-59425366,59425366,
cozz,2014-10-18T04:10:33Z,"Updated as requested.\n\nIf someone had this compiled before, you need to delete the index with -txoutsbyaddressindex=0 and then rebuild again with -txoutsbyaddressindex for incompatibility reasons. (database key is now hash of script)\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-59598377,59598377,
btcdrak,2014-10-26T20:53:53Z,Does this include or intersect/depend on #3652  ?\n,https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-60531836,60531836,
cozz,2014-10-27T18:12:12Z,"@btcdrak no, they are two independent indexes. This one is more lightweight, but not as powerful.\nWith this index you can only query the unspent outputs for an address. With the other index you can query all transactions involving the address. \n\nOf course with getrawtransaction you can also query the transaction which created the unspent output, but you can not query the transaction history for",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-60641285,60641285,
btcdrak,2014-10-27T19:59:41Z,"@cozz I've been using the addrindex patch, it's extremely powerful. If we're merging this PR I really think we should also have the other also (with is optional by config).\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-60659104,60659104,
laanwj,2014-10-27T20:16:16Z,"The advantage of this one to the address index is that it doesn't interfere with pruning. It doesn't require the whole block chain, and is a much smaller index to boot.\n\nI do agree with @sipa that this really doesn't belong in the core consensus code. We're trying to reduce that code to the absolute essentials (also because it will end up in a consensus library at some point), so we should not e",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-60661491,60661491,
btcdrak,2014-10-27T20:20:49Z,"@laanwj You could say the same thing about `txindex` but these are **optional**. Even if these end up being split out eventually as the wallet code is for example, there is a real need and real world usecases for these indexes.\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-60662177,60662177,
laanwj,2014-10-27T20:27:02Z,"One of the goals of moving the consensus and utxo code to a library, is that it will be possible to build additional tools and indexes without having to include everything and the kitchen sink into this project. Indexers can just use our code instead of the other way around.\n\nNote that I don't doubt for a moment that there are real use-cases. But the goal of Bitcoin Core is to provide the core i",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-60663199,60663199,
sipa,2014-11-04T14:07:33Z,"Thanks for changing the approach, and apologies for the slow response - it again needs rebase now.\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-61643673,61643673,
cozz,2014-11-04T20:15:26Z,"Rebased and removed the changes in leveldbwrapper, they were not necessary.\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-61706511,61706511,
btcdrak,2014-11-04T21:31:09Z,:+1: \n,https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-61718147,61718147,
gwillen,2015-01-07T03:18:24Z,"In #bitcoin, the user proserpine- reported the following segfault while running this pullreq:\n\nhttp://pastebin.com/raw.php?i=D8EUbu4W\n\nHe says it happens once every few weeks. I've been looking at it and chatting with @gmaxwell about it, and it seems like it might be related to using 'tx' in CTxMemPool::remove after it's been invalidated.\n\nIn particular, it looks to me like tx is always a re",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-68973763,68973763,
gwillen,2015-01-07T03:24:26Z,"Hmm, I take back part of that -- it looks like references into a map _other than_ the one being removed are not invalidated by a removal. So it's no longer totally clear to me that tx is being invalidated and then used. But it still seems like a conceivable explanation for the crash. I am going to keep looking.\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-68974111,68974111,
gwillen,2015-01-07T03:29:34Z,"Ok, I think I understand now -- I was mistaken about the transaction being in mapNextTx, which only stores pointers to transactions in mapTx. And we're erasing the transaction from mapTx, and then later accessing it. So the new code just needs to be moved above the place where we remove the transaction from mapTx thus invalidating our reference to it.\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-68974411,68974411,
gwillen,2015-01-07T03:39:17Z,"Oops, that paste expired, here's a better one: \n\nhttp://pastebin.com/raw.php?i=s0uqLhtZ\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-68974959,68974959,
paveljanik,2015-01-07T06:49:45Z,Can you please rebase this?\n,https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-68985338,68985338,
cozz,2015-01-09T16:00:53Z,"Rebased and moved the code in CTxMemPool::remove(..), which probably fixes the segfault. \nthanks @gwillen\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-69354023,69354023,
paveljanik,2015-01-21T21:18:53Z,"Works ok here, no crashes. Progress is displayed correctly when building the index etc.\n\nWhat I consider strange is `=0` semantic to remove the index.\nI'd go with `-txoutsbyaddressindex` to enable working with the index and if it is not found, build it.\nAnd `-deletetxoutsbyaddressindex`. Quite long, but better IMO. Or maybe this one should be the RPC command, not command line argument. What do",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-70923700,70923700,
Diapolo,2015-01-22T07:25:03Z,"We have the same behaviour for `-txindex`. If the flag is present it's enabled and if it's just removed or set to `-txindex=0`, the index is also removed. IMHO this is expected behaviour.\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-70981165,70981165,
paveljanik,2015-01-23T07:40:25Z,"@Diapolo Yes, but how GUI users do use this? Via RPC they could.\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-71157748,71157748,
paveljanik,2015-02-02T12:15:50Z,This need rebase now.\n,https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-72448164,72448164,
cozz,2015-02-02T16:19:30Z,"Rebased, removed /X11.\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-72485242,72485242,
paveljanik,2015-02-03T17:42:28Z,What will happen when the initial building of index is running (takes a lot of time here...) and the user pressed Ctrl+C to interrupt? The shutdown window is shown and the user has to wait anyway? This has to be changed IMO...\n,https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-72697453,72697453,
paveljanik,2015-02-03T17:44:17Z,Travis build failure on OS X can be ignored...\n,https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-72697791,72697791,
paveljanik,2015-02-03T17:48:38Z,"Hmm, wanted to try it, but this again needs rebase.\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-72698617,72698617,
paveljanik,2015-02-04T17:31:57Z,rpcserver.cpp needs rebase - very simple one.\n,https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-72899353,72899353,
cozz,2015-02-04T18:32:32Z,"ok, rebased once again.\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-72910723,72910723,
paveljanik,2015-02-05T14:03:25Z,"tested ACK\nMore ideas: RPC call `getaddresseswithtxouts`; be able to stop the index creation in the middle.\nBut anyway, thanks for nice work.\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-73050290,73050290,
paveljanik,2015-03-03T14:30:54Z,This needs more review... And github says that even a rebase is needed again.\n,https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-76955211,76955211,
ecdsa,2015-04-28T10:55:33Z,it needs to be rebased again...\n,https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-97015309,97015309,
cozz,2015-05-01T12:12:22Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-98120674,98120674,
ecdsa,2015-05-17T11:32:20Z,hi can you rebase this again? thanks\n,https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-102786183,102786183,
cozz,2015-05-18T12:45:19Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-103048380,103048380,
jgarzik,2015-07-23T18:20:45Z,"Leaning towards closing this PR.  This garnered some interest, but no ACKs after a long time.  It is not fair to ask @cozz to continually rebase if it's not going in, in the short/medium term.\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-124194201,124194201,
cozz,2015-07-27T00:43:55Z,"Yes, a decision for 0.12 would be good. Otherwise spending more time on this, just feels like a waste to me.\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-125052966,125052966,
btcdrak,2015-07-27T07:24:53Z,I have this PR on my list to test this week.\n,https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-125109706,125109706,
btcdrak,2015-08-05T09:58:12Z,"Sorry for the delay, I finally tested it yesterday and today on a random sample set of 0 confirms and old txs.\n\nTested ACK\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-127942380,127942380,
dcousens,2015-08-08T08:16:30Z,"@btcdrak,  I haven't tested this yet,  but fundamentally what makes this so much larger than [your patch](https://github.com/btcdrak/bitcoin/commit/d48d9c0e9b0cbbca196957d4fa1c5da56431e51e)?\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-128930940,128930940,
sipa,2015-08-08T15:07:02Z,"Agree with @jgarzik, it's not fair to keep this lingering for too long.\n\nI like the use case it solves, but I still dislike the degree to which it's entangled with the CCoinsView. I think this feature should be something that is independent, rather than complicating the code necessary for its core function.\n\nWould it be reasonable to implement it as a separate database file, and have it functi",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-128988799,128988799,
cozz,2015-08-08T20:14:50Z,"Well, I am sorry, I am closing this now. As you may have noticed, I am not contributing to this project anymore, because I disagree with basically anything here and I am doing something else now.  If anybody wants to pick this up, feel free to just copy and paste from my code.\n\nOff-topic:\nI disagree with most code changes you guys are making. For example main.cpp was much more readable in 0.8 t",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-129042246,129042246,
sipa,2015-08-08T20:59:01Z,"I'm sorry you feel that way, and I understand the sentiment also partially.\n\nI agree moving code to another file is not proper encapsulation, but some\nof the time, moving is a first step, and an easily reviewable one.\nEspecially the separation of consensus code is not something we want to do\nwithout very high assurances behaviour does not change. I think we are\nmaking progress, but it is adm",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-129044027,129044027,
cozz,2015-08-08T22:02:43Z,"I didnt expect such an honest response, thanks, that gives you a lot of respect.\nIt doesnt make me change my mind about this project though.\n",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-129056356,129056356,
ghost,2017-07-26T02:01:32Z,"how quick does this returns data ? \nhas anybody tried it ? \nThanks.",https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-317924956,317924956,
shamoons,2018-05-05T01:38:19Z,Still open?,https://github.com/bitcoin/bitcoin/pull/5048#issuecomment-386770325,386770325,
sipa,2014-10-16T19:55:03Z,CCoinsViewDB shouldn't assume there is just one pcoinsByAddress global; can you pass it in in the constructor at least?\n,https://github.com/bitcoin/bitcoin/pull/5048#discussion_r18981766,18981766,src/txdb.cpp
luke-jr,2014-10-18T04:19:38Z,Might be better to use Hash160(first-push-in-script-data)\n,https://github.com/bitcoin/bitcoin/pull/5048#discussion_r19051795,19051795,src/coinsbyscript.cpp
cozz,2014-10-18T04:38:15Z,I dont understand.\nIs there anything wrong with hashing the complete script? \nWe dont want 2 different scripts to result in the same hash.\n,https://github.com/bitcoin/bitcoin/pull/5048#discussion_r19051849,19051849,src/coinsbyscript.cpp
luke-jr,2014-10-18T05:37:54Z,"Using a hash of the first push allows one to search by the hash of the first push, even without knowing the full script. This is useful for anyone wanting to find transactions to old pay-to-pubkey scripts.\n\nI sure hope you're not assuming there will never be collisions?\n",https://github.com/bitcoin/bitcoin/pull/5048#discussion_r19052013,19052013,src/coinsbyscript.cpp
cozz,2014-10-18T15:03:06Z,"Sure I assume that, why would there be collisions?\nWhy cant you just hash the full old pay-to-pubkey script, is there any unknown data in those scripts?\n\nI am no bitcoin script expert, but I think it is safer to hash from the first to the last bit, otherwise there is always room for an obvious attack, where I send coins to a script I can spend, but the hash is the same of a script you can spend",https://github.com/bitcoin/bitcoin/pull/5048#discussion_r19054096,19054096,src/coinsbyscript.cpp
cozz,2014-10-18T17:16:10Z,"After thinking, I guess what you are suggesting is possible, but then we would need to have 2 rpc-functions:\n- gettxoutsbyaddress, which is just a wrapper around an internal searchCoinsByFirstPush(..)\n  and loops through all search results to ensure the script is actually OP_DUP OP_HASH etc.\n- searchtxoutsbyscriptsfirstpush, which just returns the search results\n\nNot sure, if this is worth th",https://github.com/bitcoin/bitcoin/pull/5048#discussion_r19054891,19054891,src/coinsbyscript.cpp
luke-jr,2014-10-18T17:28:34Z,"Old pay-to-pubkey scripts (<pubKey> OP_CHECKSIG) were often referred to by a version 0 address with the pubkey hash. If one is searching for those, they likely only have the hash of the pubkey, not the pubkey itself.\n",https://github.com/bitcoin/bitcoin/pull/5048#discussion_r19054944,19054944,src/coinsbyscript.cpp
cozz,2014-10-18T18:05:46Z,"Ok I see. But I am unsure about redesigning and introducing a second rpc-call, just to support some old scripts nobody is creating anymore nowadays.\nTo me this feature is not important, but we can hear some more opinions here. If more people would like to see this implemented, I may consider looking into it.\n",https://github.com/bitcoin/bitcoin/pull/5048#discussion_r19055213,19055213,src/coinsbyscript.cpp
luke-jr,2014-10-18T18:08:49Z,"I agree this feature is not important, but it would be nice to have the index compatible in case anyone ever wanted it.\n",https://github.com/bitcoin/bitcoin/pull/5048#discussion_r19055227,19055227,src/coinsbyscript.cpp
sipa,2014-10-18T18:39:45Z,With a hash(fullscript) index you can still easily search for pay-to-pubkey outputs - but you do need to know the full pubkey. I think that's perfectly acceptable.\n,https://github.com/bitcoin/bitcoin/pull/5048#discussion_r19055457,19055457,src/coinsbyscript.cpp
sipa,2014-11-04T14:04:18Z,"Why is this necessary? I'd prefer to not expose the underlying LevelDB-specific datatypes, so the database layer can be swapped out.\n",https://github.com/bitcoin/bitcoin/pull/5048#discussion_r19803594,19803594,src/leveldbwrapper.h
fanquake,2015-02-02T13:01:19Z,Can you drop the /X11 mentions from this pull before rebasing\n,https://github.com/bitcoin/bitcoin/pull/5048#discussion_r23922722,23922722,qa/rpc-tests/txoutsbyaddress.sh
sipa,2015-08-08T14:48:23Z,Can you name this function differently? I found it confusing to see it being used by the by-script logic.\n,https://github.com/bitcoin/bitcoin/pull/5048#discussion_r36578911,36578911,src/txdb.cpp
sipa,2015-08-08T14:48:59Z,Can you introduce a DB_COINS_BYSCRIPT constant above instead of 'd'?\n,https://github.com/bitcoin/bitcoin/pull/5048#discussion_r36578914,36578914,src/txdb.cpp
