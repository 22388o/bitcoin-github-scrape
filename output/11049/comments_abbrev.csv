promag,2017-08-14T23:37:43Z,Drop `Desired` from enum?,https://github.com/bitcoin/bitcoin/pull/11049#issuecomment-322338592,322338592,
sipa,2017-08-14T23:44:32Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11049#issuecomment-322339540,322339540,
instagibbs,2017-08-15T15:40:25Z,"@promag I see negative value to the user to have them iterate what type of segwit inputs they'd like, especially as that list grows. What the user will typically care about is whether or not the resulting transaction can be malleated.\n\nI also think ""LEGACY"" is the best possibly name I've heard, since ""NONSEGWIT"" is kind of a mouthful. Ideas welcome.",https://github.com/bitcoin/bitcoin/pull/11049#issuecomment-322504613,322504613,
instagibbs,2017-08-15T18:07:23Z,"travis failure seems unrelated, `p2p-leaktest.py`",https://github.com/bitcoin/bitcoin/pull/11049#issuecomment-322543522,322543522,
jonasschnelli,2017-08-15T18:37:11Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11049#issuecomment-322551481,322551481,
Leviathn,2017-08-17T04:18:25Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11049#issuecomment-322964762,322964762,
NicolasDorier,2017-08-17T04:39:24Z,"Concept NACK.\n\n```\nor in the case where you want to explicitly make a non-malleable transaction.\n```\nIt is untrue.\n\nWhat you are interested is not SEGWIT output, what you are interested is third party `malleabilitySafe` utxos.\nAll segwit utxo are not malleabilitySafe. A segwit utxo is malleability safe in one of the following conditions:\n\n1. The utxo is SEGWIT and confirmed\n",https://github.com/bitcoin/bitcoin/pull/11049#issuecomment-322966977,322966977,
instagibbs,2017-08-17T16:29:17Z,"@NicolasDorier I can remove that reasoning from the PR description, but the first use-case would exist even with a more ""complete"" anti-malleability setting.\n\nAn additional future option could also be added to get only confirmed outputs, which would suffice for the first anti-malleability case.",https://github.com/bitcoin/bitcoin/pull/11049#issuecomment-323125133,323125133,
instagibbs,2017-08-17T23:27:51Z,fixed up @jonasschnelli 's concerns,https://github.com/bitcoin/bitcoin/pull/11049#issuecomment-323220727,323220727,
instagibbs,2017-08-18T17:36:34Z,"@promag I'd really rather not have regex-y inputs presented to users unless there's a compelling use-case. Open to suggestions of course, I likely missed some.\n\nFixed comments.",https://github.com/bitcoin/bitcoin/pull/11049#issuecomment-323415472,323415472,
NicolasDorier,2017-08-19T00:44:00Z,"@instagibbs I don't see why someone would want to filter by type on fundraw?\n\nIs it so that the ultimate signer don't have to know how to use legacy signing? But all HW does right now.",https://github.com/bitcoin/bitcoin/pull/11049#issuecomment-323488805,323488805,
instagibbs,2017-08-22T22:31:51Z,"Closing for now, as for my use-case it's actually not needed: At least for Ledger  one can sign by simply ""signing twice"", segwit inputs then non-segwit inputs. No need to special case coin selection. h/t @greenaddress \n",https://github.com/bitcoin/bitcoin/pull/11049#issuecomment-324170102,324170102,
promag,2017-08-14T23:54:56Z,`const std::string& string`.,https://github.com/bitcoin/bitcoin/pull/11049#discussion_r133090607,133090607,src/wallet/wallet.h
promag,2017-08-14T23:55:17Z,`auto it = `.,https://github.com/bitcoin/bitcoin/pull/11049#discussion_r133090643,133090643,src/wallet/wallet.cpp
promag,2017-08-14T23:55:31Z,`input_types`.,https://github.com/bitcoin/bitcoin/pull/11049#discussion_r133090667,133090667,src/wallet/wallet.cpp
promag,2017-08-15T00:07:22Z,`//! Use all input types`,https://github.com/bitcoin/bitcoin/pull/11049#discussion_r133092171,133092171,src/wallet/wallet.h
jonasschnelli,2017-08-15T18:29:01Z,Maybe re-use the comments from https://github.com/bitcoin/bitcoin/pull/11049/files#diff-12635a58447c65585f51d32b7e04075bR1227 here?,https://github.com/bitcoin/bitcoin/pull/11049#discussion_r133266110,133266110,src/wallet/rpcwallet.cpp
jonasschnelli,2017-08-15T18:30:53Z,I think that enum class belong to `coincontrol.h`,https://github.com/bitcoin/bitcoin/pull/11049#discussion_r133266630,133266630,src/wallet/wallet.h
jonasschnelli,2017-08-15T18:31:26Z,Same here: could be defined and implemented in `coincontrol.h/cpp`,https://github.com/bitcoin/bitcoin/pull/11049#discussion_r133266783,133266783,src/wallet/wallet.h
jonasschnelli,2017-08-15T18:36:55Z,Maybe it would be saner to set a default value in case `Solver()` returns false and hasn't set `whichType`?,https://github.com/bitcoin/bitcoin/pull/11049#discussion_r133268274,133268274,src/wallet/wallet.cpp
promag,2017-08-18T00:05:46Z,"Correct me if I'm wrong but this block will incur in a substantial performance penalty? What about:\n```cpp\nif (coinControl && coinControler->m_input_type != InputType::ALL) {\n```",https://github.com/bitcoin/bitcoin/pull/11049#discussion_r133857114,133857114,src/wallet/wallet.cpp
promag,2017-08-18T00:05:56Z,Indent.,https://github.com/bitcoin/bitcoin/pull/11049#discussion_r133857129,133857129,src/wallet/coincontrol.cpp
promag,2017-08-18T23:59:42Z,Missing test for this error.,https://github.com/bitcoin/bitcoin/pull/11049#discussion_r134075219,134075219,src/wallet/rpcwallet.cpp
