[
  {
    "sha": "2cca90c9c67ec66bd39814ca9cffe06d3232d9a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2NhOTBjOWM2N2VjNjZiZDM5ODE0Y2E5Y2ZmZTA2ZDMyMzJkOWEz",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-08-14T19:14:38Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-08-19T01:02:07Z"
      },
      "message": "coincontrol can filter for segwit inputs, expose fundraw option",
      "tree": {
        "sha": "914c8ecfa5fd4d47fb6e3178a5018650e114721d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/914c8ecfa5fd4d47fb6e3178a5018650e114721d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2cca90c9c67ec66bd39814ca9cffe06d3232d9a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cca90c9c67ec66bd39814ca9cffe06d3232d9a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2cca90c9c67ec66bd39814ca9cffe06d3232d9a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cca90c9c67ec66bd39814ca9cffe06d3232d9a3/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce74799a3c21355b35fed923106d13a0f8133721",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce74799a3c21355b35fed923106d13a0f8133721",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce74799a3c21355b35fed923106d13a0f8133721"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 97,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b5416de25db2c34c59ca8f27ed68483464b5301a",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cca90c9c67ec66bd39814ca9cffe06d3232d9a3/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cca90c9c67ec66bd39814ca9cffe06d3232d9a3/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=2cca90c9c67ec66bd39814ca9cffe06d3232d9a3",
        "patch": "@@ -236,6 +236,7 @@ endif\n libbitcoin_wallet_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_wallet_a_SOURCES = \\\n+  wallet/coincontrol.cpp \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n   wallet/feebumper.cpp \\"
      },
      {
        "sha": "1c3af80504151bd08dbbd02a994859a622c77e95",
        "filename": "src/wallet/coincontrol.cpp",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cca90c9c67ec66bd39814ca9cffe06d3232d9a3/src/wallet/coincontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cca90c9c67ec66bd39814ca9cffe06d3232d9a3/src/wallet/coincontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.cpp?ref=2cca90c9c67ec66bd39814ca9cffe06d3232d9a3",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2011-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coincontrol.h\"\n+\n+bool InputTypeFromString(const std::string& input_string, InputType& input_type) {\n+    static const std::map<std::string, InputType> input_types = {\n+        {\"LEGACY\", InputType::LEGACY},\n+        {\"SEGWIT\", InputType::SEGWIT},\n+        {\"ALL\", InputType::ALL},\n+    };\n+    auto it = input_types.find(input_string);\n+    if (it == input_types.end()) return false;\n+    input_type = it->second;\n+    return true;\n+}"
      },
      {
        "sha": "1ed236921e2765fa0c3bb9ad9314d0d516d5a2ff",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cca90c9c67ec66bd39814ca9cffe06d3232d9a3/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cca90c9c67ec66bd39814ca9cffe06d3232d9a3/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=2cca90c9c67ec66bd39814ca9cffe06d3232d9a3",
        "patch": "@@ -12,6 +12,14 @@\n \n #include <boost/optional.hpp>\n \n+enum class InputType {\n+    LEGACY, //! Only use non-segwit inputs\n+    SEGWIT, //! Only use segwit inputs\n+    ALL,    //! Use all input types\n+};\n+\n+bool InputTypeFromString(const std::string& input_string, InputType& input_type);\n+\n /** Coin Control Features. */\n class CCoinControl\n {\n@@ -31,6 +39,7 @@ class CCoinControl\n     bool signalRbf;\n     //! Fee estimation mode to control arguments to estimateSmartFee\n     FeeEstimateMode m_fee_mode;\n+    InputType m_input_type;\n \n     CCoinControl()\n     {\n@@ -48,6 +57,7 @@ class CCoinControl\n         m_confirm_target.reset();\n         signalRbf = fWalletRbf;\n         m_fee_mode = FeeEstimateMode::UNSET;\n+        m_input_type = InputType::ALL;\n     }\n \n     bool HasSelected() const"
      },
      {
        "sha": "3e9fea67443e42c771661188691c86aa4fc8459e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cca90c9c67ec66bd39814ca9cffe06d3232d9a3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cca90c9c67ec66bd39814ca9cffe06d3232d9a3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2cca90c9c67ec66bd39814ca9cffe06d3232d9a3",
        "patch": "@@ -6,6 +6,7 @@\n #include \"amount.h\"\n #include \"base58.h\"\n #include \"chain.h\"\n+#include \"coincontrol.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n@@ -2811,6 +2812,10 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"         \\\"UNSET\\\"\\n\"\n                             \"         \\\"ECONOMICAL\\\"\\n\"\n                             \"         \\\"CONSERVATIVE\\\"\\n\"\n+                            \"     \\\"input_type\\\"             (string, optional, default=ALL) The type of inputs used to fund the transaction, must be one of:\\n\"\n+                            \"         \\\"ALL\\\"                Only use non-segwit inputs\\n\"\n+                            \"         \\\"LEGACY\\\"             Only use segwit inputs\\n\"\n+                            \"         \\\"SEGWIT\\\"             Use all input types\\n\"\n                             \"   }\\n\"\n                             \"                         for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\\n\"\n                             \"\\nResult:\\n\"\n@@ -2860,6 +2865,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n                 {\"conf_target\", UniValueType(UniValue::VNUM)},\n                 {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n+                {\"input_type\", UniValueType(UniValue::VSTR)},\n             },\n             true, true);\n \n@@ -2907,6 +2913,11 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n             }\n         }\n+        if (options.exists(\"input_type\")) {\n+            if (!InputTypeFromString(options[\"input_type\"].get_str(), coinControl.m_input_type)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid input_type parameter\");\n+            }\n+        }\n       }\n     }\n "
      },
      {
        "sha": "ff4bdeb5959f13299196663c03fe9caabb793e9b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cca90c9c67ec66bd39814ca9cffe06d3232d9a3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cca90c9c67ec66bd39814ca9cffe06d3232d9a3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2cca90c9c67ec66bd39814ca9cffe06d3232d9a3",
        "patch": "@@ -2215,6 +2215,25 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n                     continue;\n                 }\n \n+\n+                if (coinControl && coinControl->m_input_type != InputType::ALL) {\n+                    std::vector<std::vector<unsigned char> > vSolutions;\n+                    txnouttype whichType = TX_NONSTANDARD;\n+                    if (Solver(pcoin->tx->vout[i].scriptPubKey, whichType, vSolutions) && whichType == TX_SCRIPTHASH) {\n+                        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+                        CScript subscript;\n+                        if (!GetCScript(scriptID, subscript) || !Solver(subscript, whichType, vSolutions)) {\n+                            continue;\n+                        }\n+                    }\n+                    if (coinControl->m_input_type == InputType::LEGACY && (whichType == TX_WITNESS_V0_SCRIPTHASH || whichType == TX_WITNESS_V0_KEYHASH)) {\n+                        continue;\n+                    }\n+                    if (coinControl->m_input_type == InputType::SEGWIT && (whichType != TX_WITNESS_V0_SCRIPTHASH && whichType != TX_WITNESS_V0_KEYHASH)) {\n+                        continue;\n+                    }\n+                }\n+\n                 bool fSpendableIn = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO);\n                 bool fSolvableIn = (mine & (ISMINE_SPENDABLE | ISMINE_WATCH_SOLVABLE)) != ISMINE_NO;\n \n@@ -4337,3 +4356,4 @@ bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState&\n {\n     return ::AcceptToMemoryPool(mempool, state, tx, true, nullptr, nullptr, false, nAbsurdFee);\n }\n+"
      },
      {
        "sha": "3f849a75a0eb356c6e267a6109fafaee6b6b316a",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 38,
        "deletions": 1,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cca90c9c67ec66bd39814ca9cffe06d3232d9a3/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cca90c9c67ec66bd39814ca9cffe06d3232d9a3/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=2cca90c9c67ec66bd39814ca9cffe06d3232d9a3",
        "patch": "@@ -7,7 +7,6 @@\n from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n from test_framework.util import *\n \n-\n def get_unspent(listunspent, amount):\n     for utx in listunspent:\n         if utx['amount'] == amount:\n@@ -720,5 +719,43 @@ def run_test(self):\n         # the total subtracted from the outputs is equal to the fee\n         assert_equal(share[0] + share[2] + share[3], result[0]['fee'])\n \n+        ##########################\n+        # Test input_type option #\n+        ##########################\n+\n+        # Activate segwit\n+        self.nodes[0].generate(300)\n+\n+        # Get a segwit address to fund later\n+        addr = self.nodes[0].getnewaddress()\n+        witaddr = self.nodes[0].addwitnessaddress(addr)\n+        rawtx = self.nodes[0].createrawtransaction([], {witaddr:1})\n+\n+        # Test fund attempts with no segwit funds\n+        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[0].fundrawtransaction, rawtx, {\"input_type\":\"SEGWIT\"})\n+\n+        # Fund the witness address using ALL and LEGACY\n+        funded = self.nodes[0].fundrawtransaction(rawtx, {\"input_type\":\"LEGACY\"})\n+        signed = self.nodes[0].signrawtransaction(funded[\"hex\"])\n+        self.nodes[0].sendrawtransaction(signed[\"hex\"])\n+\n+        funded = self.nodes[0].fundrawtransaction(rawtx, {\"input_type\":\"ALL\"})\n+        signed = self.nodes[0].signrawtransaction(funded[\"hex\"])\n+        self.nodes[0].sendrawtransaction(signed[\"hex\"])\n+\n+        # Now fund using segwit funds only, sending to legacy address\n+        rawtx = self.nodes[0].createrawtransaction([], {addr:2})\n+        funded = self.nodes[0].fundrawtransaction(rawtx, {\"input_type\":\"SEGWIT\", \"subtractFeeFromOutputs\":[0]})\n+        signed = self.nodes[0].signrawtransaction(funded[\"hex\"])\n+        self.nodes[0].sendrawtransaction(signed[\"hex\"])\n+\n+        # No more segwit funds available again\n+        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[0].fundrawtransaction, rawtx, {\"input_type\":\"SEGWIT\"})\n+\n+        # Invalid funding type\n+        assert_raises_jsonrpc(-8, \"Invalid input_type parameter\", self.nodes[0].fundrawtransaction, rawtx, {\"input_type\":\"NONE\"})\n+\n+\n+\n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      }
    ]
  }
]