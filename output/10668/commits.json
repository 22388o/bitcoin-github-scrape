[
  {
    "sha": "822144975dd11b7a304af5e6f323ff9e2cebfd79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjIxNDQ5NzVkZDExYjdhMzA0YWY1ZTZmMzIzZmY5ZTJjZWJmZDc5",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2016-11-07T19:03:42Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T01:06:29Z"
      },
      "message": "9102: Really don't validate genesis block",
      "tree": {
        "sha": "d3cb085ece0f7971c1b39134e8364ab04814cdaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3cb085ece0f7971c1b39134e8364ab04814cdaf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/822144975dd11b7a304af5e6f323ff9e2cebfd79",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZTwyXAAoJEKT10UHAGgOHPxYP/0D0XYWbR3efCx2eyAEA0/Hg\nQ8Mn3KDhNc/XmTbq6lH6IaKLsXaPLUY1DvkSDMU2hgL89iVcSNcWG7EhADV3YtEy\nnIaTrOm1bp6n5Lc4jChAXKXfejVSuQYnSBzpMuGWXrgbBoG6zE2L7ln5bXbW3fWM\nJIExnVL4VbB7WLwWzrfVnZ1J3qVVR/OEjfsHCQPhk12tcHl1ge1W2Ax5b4Xf7zGV\nu+A218GTOWqqxJ5enTPaG5AViYS9B1Gug7UtU0GBlJHgf0YOyJLtRUQrDTkgU+v7\ntiOiiQbPJ5XabYlvc+yY6zbEAI6DYmYf5Y3UQAkmZNiqN9/ed0D2DTJvWjn77Vli\nrXUzsSW1W7l3CMVRfqgDcmQIbmRug4l4B2Jg6umjCIaMe4LVKTmFuIksXOKVH336\n7ookNxAslq6MDkb/HGhOFok8CQw2s/e1YwWGoTdvJjg2T7ztLE7w0kT2uGiEHbrY\nlQCb1QXiLwdUsE2WXeH4ArvWWUIYUupsRy56c79rbJDR4osZKpejpb/dz8bjLoXF\nxlhX5W/56O8qH2rQgmugDgfJZnhIXM+Lkwrq6kCRs3niaS39DpsorXbboLCiGpSN\n6PYh1viST99UB4lBMvFg457zVLDyYWXE+BzxpB+qsSxU1/WyIYM5s+85j9WCNNcD\nXCQmMti0hLBFQiBzHTSp\n=125p\n-----END PGP SIGNATURE-----",
        "payload": "tree d3cb085ece0f7971c1b39134e8364ab04814cdaf\nparent bef02fb6ac9f57fdb490f6a5725cde6bde0da124\nauthor Gregory Sanders <gsanders87@gmail.com> 1478545422 -0500\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498352789 +0200\n\n9102: Really don't validate genesis block\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/822144975dd11b7a304af5e6f323ff9e2cebfd79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/822144975dd11b7a304af5e6f323ff9e2cebfd79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/822144975dd11b7a304af5e6f323ff9e2cebfd79/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bef02fb6ac9f57fdb490f6a5725cde6bde0da124",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bef02fb6ac9f57fdb490f6a5725cde6bde0da124",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bef02fb6ac9f57fdb490f6a5725cde6bde0da124"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 16,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1595e9d23296c778f34d326d79a3e7ba40bf30b2",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/822144975dd11b7a304af5e6f323ff9e2cebfd79/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/822144975dd11b7a304af5e6f323ff9e2cebfd79/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=822144975dd11b7a304af5e6f323ff9e2cebfd79",
        "patch": "@@ -212,6 +212,7 @@ bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n \n bool CBlockTreeDB::LoadBlockIndexGuts(std::function<CBlockIndex*(const uint256&)> insertBlockIndex)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     std::unique_ptr<CDBIterator> pcursor(NewIterator());\n \n     pcursor->Seek(std::make_pair(DB_BLOCK_INDEX, uint256()));\n@@ -238,9 +239,11 @@ bool CBlockTreeDB::LoadBlockIndexGuts(std::function<CBlockIndex*(const uint256&)\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n \n-                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, Params().GetConsensus()))\n-                    return error(\"LoadBlockIndex(): CheckProofOfWork failed: %s\", pindexNew->ToString());\n-\n+                const uint256 block_hash = pindexNew->GetBlockHash();\n+                if (!CheckProofOfWork(block_hash, pindexNew->nBits, consensusParams) &&\n+                    block_hash != consensusParams.hashGenesisBlock) {\n+                    return error(\"%s: CheckProofOfWork: %s, %s\", __func__, block_hash.ToString(), pindexNew->ToString());\n+                }\n                 pcursor->Next();\n             } else {\n                 return error(\"LoadBlockIndex() : failed to read value\");"
      },
      {
        "sha": "c95adbb1f376db086353f22978f75b81b8397f8a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/822144975dd11b7a304af5e6f323ff9e2cebfd79/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/822144975dd11b7a304af5e6f323ff9e2cebfd79/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=822144975dd11b7a304af5e6f323ff9e2cebfd79",
        "patch": "@@ -944,7 +944,9 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus:\n     }\n \n     // Check the header\n-    if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n+    const uint256 block_hash = block.GetHash();\n+    if (!CheckProofOfWork(block_hash, block.nBits, consensusParams) &&\n+        block_hash != consensusParams.hashGenesisBlock)\n         return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n \n     return true;\n@@ -1499,10 +1501,6 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n            (*pindex->phashBlock == block.GetHash()));\n     int64_t nTimeStart = GetTimeMicros();\n \n-    // Check it again in case a previous version let a bad block in\n-    if (!CheckBlock(block, state, chainparams.GetConsensus(), !fJustCheck, !fJustCheck))\n-        return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n-\n     // verify that the view's current state corresponds to the previous block\n     uint256 hashPrevBlock = pindex->pprev == NULL ? uint256() : pindex->pprev->GetBlockHash();\n     assert(hashPrevBlock == view.GetBestBlock());\n@@ -1515,6 +1513,10 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n         return true;\n     }\n \n+    // Check it again in case a previous version let a bad block in\n+    if (!CheckBlock(block, state, chainparams.GetConsensus(), !fJustCheck, !fJustCheck))\n+        return error(\"%s: CheckBlock: %s\", __func__, FormatStateMessage(state));\n+\n     bool fScriptChecks = true;\n     if (!hashAssumeValid.IsNull()) {\n         // We've been configured with the hash of a block which has been externally verified to have a valid history.\n@@ -3009,8 +3011,9 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     }\n     if (fNewBlock) *fNewBlock = true;\n \n-    if (!CheckBlock(block, state, chainparams.GetConsensus()) ||\n-        !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n+    if (chainparams.GetConsensus().hashGenesisBlock != block.GetHash() &&\n+        (!CheckBlock(block, state, chainparams.GetConsensus()) ||\n+         !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev))) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);"
      }
    ]
  },
  {
    "sha": "523ce607f30a9c2423603c202e9870021bac9aeb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjNjZTYwN2YzMGE5YzI0MjM2MDNjMjAyZTk4NzAwMjFiYWM5YWVi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-10-13T20:38:10Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T01:06:32Z"
      },
      "message": "Testchains: Generic selection with -chain=<str> in addition of -testnet and -regtest",
      "tree": {
        "sha": "460d717e522d511e3d9be432716f6d91a0ebd3b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/460d717e522d511e3d9be432716f6d91a0ebd3b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/523ce607f30a9c2423603c202e9870021bac9aeb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZTwyYAAoJEKT10UHAGgOHWD4QAIA1AS/lmtoFukgMHMPppALx\nUNWeBXkTZvHat/RvJX+IadAKSzYdMzGgTb/WKVBchs1qQFcNzpudCUWGlxBug3Rk\ni5aWtQ8pL5JMeIg0MGikfdTS7hyHtsPuS+mkt0Jnyrd08nyRoHVt3W1gzbAfEfxQ\nstS3fLdEgJfeoW2C7HikWCZw0jt7ZhM6GbdrB6ZbHHwUI3N6+lwyHBg3r/bvMuWE\nV7aQ5xE9oPm47NQBRnZkv0YNMgl4VuCuup5X81jhiE0qxPGw9/ttLcruc6toPdP+\n/eGZxQSTV8IgScdeUHnlBnm9bgVq8KGTf/6NoCqqDzj0D929YuO/A7Xt7HkRVBKE\nWITxZ1umawvlM6efKh+5f7J0+a8Exmrs1l8Fl21i4EzdomTSDLYYwxrjgPo/lz9T\nbN+CB9ubgVz67xxM94bYErNnZEaRk9rb2X4vwiKTlb8pdX05vv4OHcgIrpKGK/k1\n8zqzQSLlkByQRATm8AfOacLi09Dmxu+3jVC7o/1FRTjeEC5QxBzoCtR5dWn95bX2\nYslrJh6jhu2LD5O3CZ4Xm1RpIBiQ/8dvn75kcLctsUAyMVa1gI/HNtLg7/mxI1Xq\n4R7/pH/UWilwHP7bZ8kbzTf2hplEhmU4qgWf+iIpXypJ4elqrJfAiWMLM1BY513N\n5GLwXS8bO7UQ8B7p2ZqA\n=hIjT\n-----END PGP SIGNATURE-----",
        "payload": "tree 460d717e522d511e3d9be432716f6d91a0ebd3b2\nparent 822144975dd11b7a304af5e6f323ff9e2cebfd79\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1476391090 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498352792 +0200\n\nTestchains: Generic selection with -chain=<str> in addition of -testnet and -regtest\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/523ce607f30a9c2423603c202e9870021bac9aeb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/523ce607f30a9c2423603c202e9870021bac9aeb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/523ce607f30a9c2423603c202e9870021bac9aeb/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "822144975dd11b7a304af5e6f323ff9e2cebfd79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/822144975dd11b7a304af5e6f323ff9e2cebfd79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/822144975dd11b7a304af5e6f323ff9e2cebfd79"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 13,
      "deletions": 11
    },
    "files": [
      {
        "sha": "6f8eacd3e62a8a5cc27f6239ff8ecae849fc52f4",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/523ce607f30a9c2423603c202e9870021bac9aeb/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/523ce607f30a9c2423603c202e9870021bac9aeb/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=523ce607f30a9c2423603c202e9870021bac9aeb",
        "patch": "@@ -108,7 +108,7 @@ static int AppInitRPC(int argc, char* argv[])\n         fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n         return EXIT_FAILURE;\n     }\n-    // Check for -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n+    // Check for -chain, -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n     try {\n         SelectBaseParams(ChainNameFromCommandLine());\n     } catch (const std::exception& e) {"
      },
      {
        "sha": "4ace026b9d918077e40deb9ad458f4bff6cc6079",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/523ce607f30a9c2423603c202e9870021bac9aeb/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/523ce607f30a9c2423603c202e9870021bac9aeb/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=523ce607f30a9c2423603c202e9870021bac9aeb",
        "patch": "@@ -41,7 +41,7 @@ static int AppInitRawTx(int argc, char* argv[])\n     //\n     ParseParameters(argc, argv);\n \n-    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n     try {\n         SelectParams(ChainNameFromCommandLine());\n     } catch (const std::exception& e) {"
      },
      {
        "sha": "37ecff613472627557419e756e6729abf4f23df3",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/523ce607f30a9c2423603c202e9870021bac9aeb/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/523ce607f30a9c2423603c202e9870021bac9aeb/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=523ce607f30a9c2423603c202e9870021bac9aeb",
        "patch": "@@ -108,7 +108,7 @@ bool AppInit(int argc, char* argv[])\n             fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n             return false;\n         }\n-        // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+        // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n         try {\n             SelectParams(ChainNameFromCommandLine());\n         } catch (const std::exception& e) {"
      },
      {
        "sha": "9b190f98f2a789a89650f70608f7bd1f67ffca27",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/523ce607f30a9c2423603c202e9870021bac9aeb/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/523ce607f30a9c2423603c202e9870021bac9aeb/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=523ce607f30a9c2423603c202e9870021bac9aeb",
        "patch": "@@ -17,6 +17,7 @@ const std::string CBaseChainParams::REGTEST = \"regtest\";\n void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n {\n     strUsage += HelpMessageGroup(_(\"Chain selection options:\"));\n+    strUsage += HelpMessageOpt(\"-chain=<chain>\", _(\"Use the chain <chain> (default: main). Allowed values: main, testnet, regtest\"));\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n     if (debugHelp) {\n         strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n@@ -89,14 +90,15 @@ void SelectBaseParams(const std::string& chain)\n \n std::string ChainNameFromCommandLine()\n {\n-    bool fRegTest = GetBoolArg(\"-regtest\", false);\n-    bool fTestNet = GetBoolArg(\"-testnet\", false);\n+    bool fRegTest = gArgs.GetBoolArg(\"-regtest\", false);\n+    bool fTestNet = gArgs.GetBoolArg(\"-testnet\", false);\n+    bool fChainArgSet = gArgs.IsArgSet(\"-chain\");\n \n-    if (fTestNet && fRegTest)\n-        throw std::runtime_error(\"Invalid combination of -regtest and -testnet.\");\n+    if (fChainArgSet ? (fTestNet || fRegTest) : (fTestNet && fRegTest))\n+        throw std::runtime_error(\"Invalid combination of -regtest, -testnet and -chain. Only one can be used.\");\n     if (fRegTest)\n         return CBaseChainParams::REGTEST;\n     if (fTestNet)\n         return CBaseChainParams::TESTNET;\n-    return CBaseChainParams::MAIN;\n+    return gArgs.GetArg(\"-chain\", CBaseChainParams::MAIN);\n }"
      },
      {
        "sha": "69cabad479fc09265023c6968359651572d9460a",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/523ce607f30a9c2423603c202e9870021bac9aeb/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/523ce607f30a9c2423603c202e9870021bac9aeb/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=523ce607f30a9c2423603c202e9870021bac9aeb",
        "patch": "@@ -629,7 +629,7 @@ int main(int argc, char *argv[])\n     // - QSettings() will use the new application name after this, resulting in network-specific settings\n     // - Needs to be done before createOptionsModel\n \n-    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n     try {\n         SelectParams(ChainNameFromCommandLine());\n     } catch(std::exception &e) {"
      },
      {
        "sha": "e0c1ebc56ba502c722828098ce00a5384fbb4e7b",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/523ce607f30a9c2423603c202e9870021bac9aeb/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/523ce607f30a9c2423603c202e9870021bac9aeb/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=523ce607f30a9c2423603c202e9870021bac9aeb",
        "patch": "@@ -651,7 +651,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n             // Start client minimized\n             QString strArgs = \"-min\";\n             // Set -testnet /-regtest options\n-            strArgs += QString::fromStdString(strprintf(\" -testnet=%d -regtest=%d\", GetBoolArg(\"-testnet\", false), GetBoolArg(\"-regtest\", false)));\n+            strArgs += QString::fromStdString(strprintf(\" -chain=%s\", ChainNameFromCommandLine()));\n \n #ifdef UNICODE\n             boost::scoped_array<TCHAR> args(new TCHAR[strArgs.length() + 1]);\n@@ -760,7 +760,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n             optionFile << \"Name=Bitcoin\\n\";\n         else\n             optionFile << strprintf(\"Name=Bitcoin (%s)\\n\", chain);\n-        optionFile << \"Exec=\" << pszExePath << strprintf(\" -min -testnet=%d -regtest=%d\\n\", GetBoolArg(\"-testnet\", false), GetBoolArg(\"-regtest\", false));\n+        optionFile << \"Exec=\" << pszExePath << strprintf(\" -min -chain=%s\\n\", chain);\n         optionFile << \"Terminal=false\\n\";\n         optionFile << \"Hidden=false\\n\";\n         optionFile.close();"
      }
    ]
  },
  {
    "sha": "9fd45b42dfce608642ba0cd24f85a3f5271b4503",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmQ0NWI0MmRmY2U2MDg2NDJiYTBjZDI0Zjg1YTNmNTI3MWI0NTAz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-10-21T17:15:26Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T05:37:30Z"
      },
      "message": "Testchains: Introduce custom chain whose constructor...\n\n...reads params from regular arguments or the general conf file\n\nAlso expose CreateChainParams(const std::string&, ArgsManager&) for tests",
      "tree": {
        "sha": "ed62ffd43d26d6d3c4f77feb1d98f1812752348f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed62ffd43d26d6d3c4f77feb1d98f1812752348f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fd45b42dfce608642ba0cd24f85a3f5271b4503",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT0weAAoJEKT10UHAGgOHvBcP/2kOuRGJca7UqJ1wSqMP3qjl\nlmD7Wyd0MMd6NtzQJdeKx1PNVNrMGOcKTjkqggILf9Yj5PzP/PfbShvThp3zLkwp\ndsJrY6IxIRuMkzaySmo08DPRfflYuCMOiqdj333XH/yIvfOB2D9alUgYAM59IrJh\ns2xKWoyleEXAjV0iHEh89qYTJJdg6ncAb1Voix2Xlj/nnGQ/4475i222PIdMVcHQ\nn9oWSJPj8o63eFyaLiWx2dJa5sUYn1CFnNdlx7++ib6GrVeCWDha0MPiIPMfNKeo\nuAm1EOo6i1xN31vE9YuVV0ZGvrvgUJGtsusnICrSVB1ulX59Ikcnn6Fz/j2IUh8L\nvlJibshUape9B5SbB/idNSUIKNQxfZSZLxuB0YXQdppsTN15mGY9E6V1JlUQldrs\nGaf6Xj9D4I9bhjARV1HOzsOWj9Cg//k6poGshXZedGKeq/FYoUuqG2CLPJcH7ElH\n8E/qnTfrTNheXEAn2js8xCHnQhPCcGub3lNDXJmWrSqVoyA8XQ7odwsSWmlaAKCS\nJIyOPAOgM+BaGLZESDk+HCUqazAe8pGJI+q/pw/KuVRX17tWknBPDHOsN1vx/9mo\nQP8UfsZEhY384+rlMK9cShACjYqvbz9uZKT4FOZ4rKuBCswA5RmTzs+bL8oQberF\n/Pz4F2oZ3iS+dpnWQ/jP\n=7e/R\n-----END PGP SIGNATURE-----",
        "payload": "tree ed62ffd43d26d6d3c4f77feb1d98f1812752348f\nparent 523ce607f30a9c2423603c202e9870021bac9aeb\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1477070126 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498369050 +0200\n\nTestchains: Introduce custom chain whose constructor...\n\n...reads params from regular arguments or the general conf file\n\nAlso expose CreateChainParams(const std::string&, ArgsManager&) for tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fd45b42dfce608642ba0cd24f85a3f5271b4503",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fd45b42dfce608642ba0cd24f85a3f5271b4503",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fd45b42dfce608642ba0cd24f85a3f5271b4503/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "523ce607f30a9c2423603c202e9870021bac9aeb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/523ce607f30a9c2423603c202e9870021bac9aeb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/523ce607f30a9c2423603c202e9870021bac9aeb"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 107,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b3624d26e002dd3574ed7bf48b447775af09c5a6",
        "filename": "contrib/devtools/check-doc.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fd45b42dfce608642ba0cd24f85a3f5271b4503/contrib/devtools/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fd45b42dfce608642ba0cd24f85a3f5271b4503/contrib/devtools/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/check-doc.py?ref=9fd45b42dfce608642ba0cd24f85a3f5271b4503",
        "patch": "@@ -21,7 +21,8 @@\n REGEX_ARG = re.compile(r'(?:map(?:Multi)?Args(?:\\.count\\(|\\[)|Get(?:Bool)?Arg\\()\\\"(\\-[^\\\"]+?)\\\"')\n REGEX_DOC = re.compile(r'HelpMessageOpt\\(\\\"(\\-[^\\\"=]+?)(?:=|\\\")')\n # list unsupported, deprecated and duplicate args as they need no documentation\n-SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-walletprematurewitness', '-promiscuousmempoolflags', '-blockminsize'])\n+SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-walletprematurewitness', '-promiscuousmempoolflags', '-blockminsize',\n+                      '-con_fpowallowmindifficultyblocks', '-con_fpownoretargeting', '-con_nsubsidyhalvinginterval', '-con_bip34height', '-con_bip65height', '-con_bip66height', '-con_npowtargettimespan', '-con_npowtargetspacing', '-con_nrulechangeactivationthreshold', '-con_nminerconfirmationwindow', '-con_powlimit', '-con_bip34hash', '-con_nminimumchainwork', '-con_defaultassumevalid', '-ndefaultport', '-npruneafterheight', '-fdefaultconsistencychecks', '-frequirestandard', '-fmineblocksondemand'])\n \n def main():\n   used = check_output(CMD_GREP_ARGS, shell=True)"
      },
      {
        "sha": "fc7ca6b5aee1f41673a1fd58f3838b3e680d9d43",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 2,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fd45b42dfce608642ba0cd24f85a3f5271b4503/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fd45b42dfce608642ba0cd24f85a3f5271b4503/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=9fd45b42dfce608642ba0cd24f85a3f5271b4503",
        "patch": "@@ -333,28 +333,109 @@ class CRegTestParams : public CChainParams {\n     }\n };\n \n+/**\n+ * Custom params for testing.\n+ */\n+class CCustomParams : public CChainParams {\n+\n+    void UpdateFromArgs(ArgsManager& args)\n+    {\n+        strNetworkID = args.GetArg(\"-chainpetname\", \"custom\");\n+\n+        consensus.fPowAllowMinDifficultyBlocks = args.GetBoolArg(\"-con_fpowallowmindifficultyblocks\", true);\n+        consensus.fPowNoRetargeting = args.GetBoolArg(\"-con_fpownoretargeting\", true);\n+        consensus.nSubsidyHalvingInterval = args.GetArg(\"-con_nsubsidyhalvinginterval\", 150);\n+        consensus.BIP34Height = args.GetArg(\"-con_bip34height\", 100000000);\n+        consensus.BIP65Height = args.GetArg(\"-con_bip65height\", 1351);\n+        consensus.BIP66Height = args.GetArg(\"-con_bip66height\", 1251);\n+        consensus.nPowTargetTimespan = args.GetArg(\"-con_npowtargettimespan\", 14 * 24 * 60 * 60); // two weeks\n+        consensus.nPowTargetSpacing = args.GetArg(\"-con_npowtargetspacing\", 10 * 60);\n+        consensus.nRuleChangeActivationThreshold = args.GetArg(\"-con_nrulechangeactivationthreshold\", 108); // 75% for testchains\n+        consensus.nMinerConfirmationWindow = args.GetArg(\"-con_nminerconfirmationwindow\", 144); // Faster than normal for custom (144 instead of 2016)\n+        consensus.powLimit = uint256S(args.GetArg(\"-con_powlimit\", \"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));\n+        consensus.BIP34Hash = uint256S(args.GetArg(\"-con_bip34hash\", \"0x0\"));\n+        consensus.nMinimumChainWork = uint256S(args.GetArg(\"-con_nminimumchainwork\", \"0x0\"));\n+        // By default assume that the signatures in ancestors of this block are valid.\n+        consensus.defaultAssumeValid = uint256S(args.GetArg(\"-con_defaultassumevalid\", \"0x00\"));\n+\n+        nDefaultPort = args.GetArg(\"-ndefaultport\", 18444);\n+        nPruneAfterHeight = args.GetArg(\"-npruneafterheight\", 1000);\n+        fDefaultConsistencyChecks = args.GetBoolArg(\"-fdefaultconsistencychecks\", true);\n+        fRequireStandard = args.GetBoolArg(\"-frequirestandard\", false);\n+        fMineBlocksOnDemand = args.GetBoolArg(\"-fmineblocksondemand\", true);\n+    }\n+\n+public:\n+    CCustomParams(ArgsManager& args)\n+    {\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 999999999999ULL;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 999999999999ULL;\n+\n+        pchMessageStart[0] = 0xfa;\n+        pchMessageStart[1] = 0xbf;\n+        pchMessageStart[2] = 0xb5;\n+        pchMessageStart[3] = 0xda;\n+\n+        vFixedSeeds.clear(); //!< Custom mode doesn't have any fixed seeds.\n+        vSeeds.clear();      //!< Custom mode doesn't have any DNS seeds.\n+\n+        chainTxData = ChainTxData{\n+            0,\n+            0,\n+            0\n+        };\n+\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n+        base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};\n+        base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n+\n+        UpdateFromArgs(args);\n+\n+        genesis = CreateGenesisBlock(strNetworkID.c_str(), CScript(OP_TRUE), 1296688602, 2, 0x207fffff, 1, 50 * COIN);\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+    }\n+};\n+\n static std::unique_ptr<CChainParams> globalChainParams;\n \n const CChainParams &Params() {\n     assert(globalChainParams);\n     return *globalChainParams;\n }\n \n-std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain)\n+std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain, ArgsManager& args)\n {\n     if (chain == CBaseChainParams::MAIN)\n         return std::unique_ptr<CChainParams>(new CMainParams());\n     else if (chain == CBaseChainParams::TESTNET)\n         return std::unique_ptr<CChainParams>(new CTestNetParams());\n     else if (chain == CBaseChainParams::REGTEST)\n         return std::unique_ptr<CChainParams>(new CRegTestParams());\n+    else if (chain == CBaseChainParams::CUSTOM) {\n+        return std::unique_ptr<CChainParams>(new CCustomParams(args));\n+    }\n     throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n+std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain)\n+{\n+    ArgsManager args;\n+    return CreateChainParams(chain, args);\n+}\n+\n void SelectParams(const std::string& network)\n {\n     SelectBaseParams(network);\n-    globalChainParams = CreateChainParams(network);\n+    globalChainParams = CreateChainParams(network, gArgs);\n }\n \n void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)"
      },
      {
        "sha": "6384198266412ce919ee15951ce3c5599531ea7d",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fd45b42dfce608642ba0cd24f85a3f5271b4503/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fd45b42dfce608642ba0cd24f85a3f5271b4503/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=9fd45b42dfce608642ba0cd24f85a3f5271b4503",
        "patch": "@@ -14,6 +14,8 @@\n #include <memory>\n #include <vector>\n \n+class ArgsManager;\n+\n struct CDNSSeedData {\n     std::string host;\n     bool supportsServiceBitsFiltering;\n@@ -102,6 +104,8 @@ class CChainParams\n  * @throws a std::runtime_error if the chain is not supported.\n  */\n std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain);\n+/** Extended version for unittests with custom chainparams */\n+std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain, ArgsManager& args);\n \n /**\n  * Return the currently selected parameters. This won't change after app"
      },
      {
        "sha": "ed487ae3c509cf7261704a9d5d556a63e2d5e103",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fd45b42dfce608642ba0cd24f85a3f5271b4503/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fd45b42dfce608642ba0cd24f85a3f5271b4503/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=9fd45b42dfce608642ba0cd24f85a3f5271b4503",
        "patch": "@@ -13,15 +13,18 @@\n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n+const std::string CBaseChainParams::CUSTOM = \"custom\";\n \n void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n {\n     strUsage += HelpMessageGroup(_(\"Chain selection options:\"));\n-    strUsage += HelpMessageOpt(\"-chain=<chain>\", _(\"Use the chain <chain> (default: main). Allowed values: main, testnet, regtest\"));\n+    strUsage += HelpMessageOpt(\"-chain=<chain>\", _(\"Use the chain <chain> (default: main). Allowed values: main, testnet, regtest, custom\"));\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n     if (debugHelp) {\n         strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                                    \"This is intended for regression testing tools and app development.\");\n+        strUsage += HelpMessageGroup(_(\"Custom chain selection options (only for -chain=custom):\"));\n+        strUsage += HelpMessageOpt(\"-chainpetname=<name>\", _(\"Alternative name for custom chain (default: custom). This changes the genesis block.\"));\n     }\n }\n \n@@ -63,6 +66,17 @@ class CBaseRegTestParams : public CBaseChainParams\n     }\n };\n \n+/** Custom tests */\n+class CBaseCustomParams : public CBaseChainParams\n+{\n+public:\n+    CBaseCustomParams()\n+    {\n+        nRPCPort = 18332;\n+        strDataDir = \"custom\";\n+    }\n+};\n+\n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;\n \n const CBaseChainParams& BaseParams()\n@@ -79,6 +93,8 @@ std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain\n         return std::unique_ptr<CBaseChainParams>(new CBaseTestNetParams());\n     else if (chain == CBaseChainParams::REGTEST)\n         return std::unique_ptr<CBaseChainParams>(new CBaseRegTestParams());\n+    else if (chain == CBaseChainParams::CUSTOM)\n+        return std::unique_ptr<CBaseChainParams>(new CBaseCustomParams());\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }"
      },
      {
        "sha": "332e58fc8c83cff026cd399c1af3836c3f1dc12a",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fd45b42dfce608642ba0cd24f85a3f5271b4503/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fd45b42dfce608642ba0cd24f85a3f5271b4503/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=9fd45b42dfce608642ba0cd24f85a3f5271b4503",
        "patch": "@@ -20,6 +20,7 @@ class CBaseChainParams\n     static const std::string MAIN;\n     static const std::string TESTNET;\n     static const std::string REGTEST;\n+    static const std::string CUSTOM;\n \n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }"
      }
    ]
  },
  {
    "sha": "4e38b0daa43caa8a7cb4f7b6065a95959c38934a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTM4YjBkYWE0M2NhYThhN2NiNGY3YjYwNjVhOTU5NTljMzg5MzRh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-10-13T21:24:21Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T05:37:42Z"
      },
      "message": "Testchains: Qt: Simplify network/chain styles and add a default purple\n\n...for unkown chains",
      "tree": {
        "sha": "edad982f53abeec14e0219fbaa56725492973240",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edad982f53abeec14e0219fbaa56725492973240"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e38b0daa43caa8a7cb4f7b6065a95959c38934a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT0wmAAoJEKT10UHAGgOHGGYP/jrPnfBaBIjq/Qr9xYVuYQjH\nbvuHxNM4kfTM+dUqIisI1/NeKsu8x1JvyvWpC29BtD/tTGxrSyCxwTlIxE9y/cxP\naGBkl59EBcm9o1EknxtnmZja3LKt/V3Ncxp5pri4hp4iuv9JXWjd5h6LfK04e9Gq\nsmHMniXSUdaNNH8CLBait4xyZIInhAkrCfa7UkFochDfqCwdQ6mxUDy2GrtpsWlK\nkzoLpGIu7K8A7fz0PEib1QVHRfollicuX27GS9/KJwj6nsP9zc9bANQR0gtReHN8\n37hwdWudaRha6NxrNFHqaj6GrtzZ1hOUyJBHcuVL4O8sIJREjo25RcLu/ITKypnh\nyyWGRHzuUAuTHSyBB0z9oyJILV19a/WUqFrBIBUW3JHzjyBAM1NxM0jlyLI3Gngf\nhdmNQ0dzh7/2oA0JNeiVU1W4+A6SBE0YA1Z13x1TZAOlUUud7/1bucHyLuJfaOQG\nx3pD4R6Hoiy0FqjP91BvVRKf/AVEqY//ClqPqRp/NCde3B37gBA2L385ZMKqJDbD\naYAZ9RJJsqJ6O+Y+4A7LgRyGfaxSTOFqcXI85oROqL0PzsZhhWhTzZjv/DaoGFE4\njno88/xN5ANtmcxJH998afz3TY9ue7wcaDemNBWrJrG4Kyu2fj+RY9+HRYXewX4S\nR37m0IhjNitnbIcTOpKv\n=Z/dr\n-----END PGP SIGNATURE-----",
        "payload": "tree edad982f53abeec14e0219fbaa56725492973240\nparent 9fd45b42dfce608642ba0cd24f85a3f5271b4503\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1476393861 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498369062 +0200\n\nTestchains: Qt: Simplify network/chain styles and add a default purple\n\n...for unkown chains\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e38b0daa43caa8a7cb4f7b6065a95959c38934a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e38b0daa43caa8a7cb4f7b6065a95959c38934a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e38b0daa43caa8a7cb4f7b6065a95959c38934a/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fd45b42dfce608642ba0cd24f85a3f5271b4503",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fd45b42dfce608642ba0cd24f85a3f5271b4503",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fd45b42dfce608642ba0cd24f85a3f5271b4503"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 12,
      "deletions": 8
    },
    "files": [
      {
        "sha": "90be689085e85457465f8ac462828deafd8d8191",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e38b0daa43caa8a7cb4f7b6065a95959c38934a/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e38b0daa43caa8a7cb4f7b6065a95959c38934a/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=4e38b0daa43caa8a7cb4f7b6065a95959c38934a",
        "patch": "@@ -641,7 +641,7 @@ int main(int argc, char *argv[])\n     PaymentServer::ipcParseCommandLine(argc, argv);\n #endif\n \n-    QScopedPointer<const NetworkStyle> networkStyle(NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));\n+    QScopedPointer<const NetworkStyle> networkStyle(NetworkStyle::instantiate(Params().NetworkIDString()));\n     assert(!networkStyle.isNull());\n     // Allow for separate UI settings for testnets\n     QApplication::setApplicationName(networkStyle->getAppName());"
      },
      {
        "sha": "26caa4049c93568f0505b530b0e103dcb5d5a790",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e38b0daa43caa8a7cb4f7b6065a95959c38934a/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e38b0daa43caa8a7cb4f7b6065a95959c38934a/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=4e38b0daa43caa8a7cb4f7b6065a95959c38934a",
        "patch": "@@ -6,6 +6,9 @@\n \n #include \"guiconstants.h\"\n \n+#include \"chainparamsbase.h\"\n+#include \"tinyformat.h\"\n+\n #include <QApplication>\n \n static const struct {\n@@ -15,9 +18,9 @@ static const struct {\n     const int iconColorSaturationReduction;\n     const char *titleAddText;\n } network_styles[] = {\n-    {\"main\", QAPP_APP_NAME_DEFAULT, 0, 0, \"\"},\n-    {\"test\", QAPP_APP_NAME_TESTNET, 70, 30, QT_TRANSLATE_NOOP(\"SplashScreen\", \"[testnet]\")},\n-    {\"regtest\", QAPP_APP_NAME_TESTNET, 160, 30, \"[regtest]\"}\n+    {\"main\", QAPP_APP_NAME_DEFAULT, 0, 0},\n+    {\"test\", QAPP_APP_NAME_TESTNET, 70, 30},\n+    {\"regtest\", QAPP_APP_NAME_TESTNET, 160, 30}\n };\n static const unsigned network_styles_count = sizeof(network_styles)/sizeof(*network_styles);\n \n@@ -79,8 +82,9 @@ NetworkStyle::NetworkStyle(const QString &_appName, const int iconColorHueShift,\n     trayAndWindowIcon   = QIcon(pixmap.scaled(QSize(256,256)));\n }\n \n-const NetworkStyle *NetworkStyle::instantiate(const QString &networkId)\n+const NetworkStyle *NetworkStyle::instantiate(const std::string &networkId)\n {\n+    std::string titleAddText = networkId == CBaseChainParams::MAIN ? \"\" : strprintf(\"[%s]\", networkId);\n     for (unsigned x=0; x<network_styles_count; ++x)\n     {\n         if (networkId == network_styles[x].networkId)\n@@ -89,8 +93,8 @@ const NetworkStyle *NetworkStyle::instantiate(const QString &networkId)\n                     network_styles[x].appName,\n                     network_styles[x].iconColorHueShift,\n                     network_styles[x].iconColorSaturationReduction,\n-                    network_styles[x].titleAddText);\n+                    titleAddText.c_str());\n         }\n     }\n-    return 0;\n+    return new NetworkStyle(strprintf(\"%s-%s\", QAPP_APP_NAME_DEFAULT, networkId).c_str(), 250, 30, titleAddText.c_str());\n }"
      },
      {
        "sha": "03dcf94d9b0f37be9cb1587b592089dc8e7c8bae",
        "filename": "src/qt/networkstyle.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e38b0daa43caa8a7cb4f7b6065a95959c38934a/src/qt/networkstyle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e38b0daa43caa8a7cb4f7b6065a95959c38934a/src/qt/networkstyle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.h?ref=4e38b0daa43caa8a7cb4f7b6065a95959c38934a",
        "patch": "@@ -14,7 +14,7 @@ class NetworkStyle\n {\n public:\n     /** Get style associated with provided BIP70 network id, or 0 if not known */\n-    static const NetworkStyle *instantiate(const QString &networkId);\n+    static const NetworkStyle *instantiate(const std::string &networkId);\n \n     const QString &getAppName() const { return appName; }\n     const QIcon &getAppIcon() const { return appIcon; }"
      }
    ]
  },
  {
    "sha": "9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTQ5NTNlMDliMmFiNjZkNjFkYzcxNmViZDhlYWNjMDlhMmM5YjE3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-11-10T23:06:44Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T05:37:43Z"
      },
      "message": "QA: Adapt BitcoinTestFramework for chains other than \"regtest\"",
      "tree": {
        "sha": "c62520699027102290433b0e0b9c92faf38b03d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c62520699027102290433b0e0b9c92faf38b03d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT0wnAAoJEKT10UHAGgOHnjQP/0CNWqSbDDEEdgWm6dSL0DJU\niwLZvxI85+1u+RzTdop9KttOluxxxz0LrVehZky9siunqrrQy/Tljm0ljbEaLhWS\nOeuaz5p9+ZZDOSpZAWgZ4sycsF+6IyxpxoVysVSHLlafgMyxE3Jc/ZmRnN73dsMN\n77vqFEWNfmZ0TE85LOAmQop/0yXhyT0yOqB8Uf7uY72bTuRldzYUNsYrk9Gkk+O6\ntuqlbodegWC/Wjfsj7F1e50RdXjvaddG067vtHnqh4JkVtXw+wIs7cprGF4Ii99t\ngPcf2J446l5vJorBu+2c9NxlCSLxxWeilEyIa7uVuiIOzufpahSK9yW4CLIcqgx6\n2HpRHkHTU7UCsV1f3szgjHi/o1zY0s0QbCF6kZE9b/dm45dvogeA4dQHUMQSPAvl\nR2UXALxO3A3+8LN3fmnjHli9KQ6CtpeLOtP/RwHLRm137ZAk33F/r/a6yuGCCtLW\n2WrB0qJ/gysBuJh/5lR6mMpFWPFbN1RhujYCos1w0o+C0wN+srjE2iSllrmBsUB1\ng1XdqLiy4j7k5SJRG6RT/66euntiwrDRxVdP+InHOyqIS7wiCaGWnTDmkr0jJMZm\nHGbNfH8LyVLXwm4oqjNid1981WyyF+XavkEFwgM0g6JRkDMYmShQWKGOxyqc6aYL\npMtAbiUBcgEoTbbH78P8\n=xIg4\n-----END PGP SIGNATURE-----",
        "payload": "tree c62520699027102290433b0e0b9c92faf38b03d1\nparent 4e38b0daa43caa8a7cb4f7b6065a95959c38934a\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1478819204 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498369063 +0200\n\nQA: Adapt BitcoinTestFramework for chains other than \"regtest\"\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e38b0daa43caa8a7cb4f7b6065a95959c38934a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e38b0daa43caa8a7cb4f7b6065a95959c38934a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e38b0daa43caa8a7cb4f7b6065a95959c38934a"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 31,
      "deletions": 29
    },
    "files": [
      {
        "sha": "0977dc3b03658ece9a47942bca80099bfffe9b86",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17",
        "patch": "@@ -23,6 +23,7 @@ def main():\n     parser = argparse.ArgumentParser(usage='%(prog)s [options] <test temporary directory>', description=__doc__)\n     parser.add_argument('-c', '--color', dest='color', action='store_true', help='outputs the combined log with events colored by source (requires posix terminal colors. Use less -r for viewing)')\n     parser.add_argument('--html', dest='html', action='store_true', help='outputs the combined log as html. Requires jinja2. pip install jinja2')\n+    parser.add_argument('--chain', dest='chain', action='store_true', help='selected chain in the tests (default: regtest)', const='regtest')\n     args, unknown_args = parser.parse_known_args()\n \n     if args.color and os.name != 'posix':\n@@ -38,19 +39,19 @@ def main():\n         print(\"Unexpected arguments\" + str(unknown_args))\n         sys.exit(1)\n \n-    log_events = read_logs(unknown_args[0])\n+    log_events = read_logs(unknown_args[0], args.chain)\n \n     print_logs(log_events, color=args.color, html=args.html)\n \n-def read_logs(tmp_dir):\n+def read_logs(tmp_dir, chain):\n     \"\"\"Reads log files.\n \n     Delegates to generator function get_log_events() to provide individual log events\n     for each of the input log files.\"\"\"\n \n     files = [(\"test\", \"%s/test_framework.log\" % tmp_dir)]\n     for i in itertools.count():\n-        logfile = \"{}/node{}/regtest/debug.log\".format(tmp_dir, i)\n+        logfile = \"{}/node{}/{}/debug.log\".format(tmp_dir, i, chain)\n         if not os.path.isfile(logfile):\n             break\n         files.append((\"node%d\" % i, logfile))"
      },
      {
        "sha": "8d5b661a0f0c5923e5c071f81b11e1a7b1930db0",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17",
        "patch": "@@ -47,7 +47,7 @@ def __init__(self):\n     def setup_network(self):\n         self.setup_nodes()\n \n-        self.prunedir = self.options.tmpdir + \"/node2/regtest/blocks/\"\n+        self.prunedir = self.options.tmpdir + \"/node2/\" + self.chain + \"/blocks/\"\n \n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[1], 2)\n@@ -258,7 +258,7 @@ def prune(index, expected_ret=None):\n                 assert_equal(ret, expected_ret)\n \n         def has_block(index):\n-            return os.path.isfile(self.options.tmpdir + \"/node{}/regtest/blocks/blk{:05}.dat\".format(node_number, index))\n+            return os.path.isfile(self.options.tmpdir + \"/node{}/{}/blocks/blk{:05}.dat\".format(node_number, self.chain, index))\n \n         # should not prune because chain tip of node 3 (995) < PruneAfterHeight (1000)\n         assert_raises_jsonrpc(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))"
      },
      {
        "sha": "43f630a77f60257a496583d8d50b297c2848969e",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17",
        "patch": "@@ -69,6 +69,7 @@ class BitcoinTestFramework(object):\n \n     # Methods to override in subclass test scripts.\n     def __init__(self):\n+        self.chain = \"regtest\"\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n         self.nodes = None\n@@ -183,7 +184,7 @@ def main(self):\n                 # travis failures.\n                 import glob\n                 filenames = [self.options.tmpdir + \"/test_framework.log\"]\n-                filenames += glob.glob(self.options.tmpdir + \"/node*/regtest/debug.log\")\n+                filenames += glob.glob(self.options.tmpdir + \"/node*/\" + self.chain + \"/debug.log\")\n                 MAX_LINES_TO_PRINT = 1000\n                 for fn in filenames:\n                     try:\n@@ -295,7 +296,7 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n \n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n-                datadir = initialize_datadir(cachedir, i)\n+                datadir = initialize_datadir(cachedir, i, self.chain)\n                 args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n@@ -335,24 +336,24 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n             self.nodes = []\n             disable_mocktime()\n             for i in range(MAX_NODES):\n-                os.remove(log_filename(cachedir, i, \"debug.log\"))\n-                os.remove(log_filename(cachedir, i, \"db.log\"))\n-                os.remove(log_filename(cachedir, i, \"peers.dat\"))\n-                os.remove(log_filename(cachedir, i, \"fee_estimates.dat\"))\n+                os.remove(log_filename(cachedir, i, self.chain, \"debug.log\"))\n+                os.remove(log_filename(cachedir, i, self.chain, \"db.log\"))\n+                os.remove(log_filename(cachedir, i, self.chain, \"peers.dat\"))\n+                os.remove(log_filename(cachedir, i, self.chain, \"fee_estimates.dat\"))\n \n         for i in range(num_nodes):\n             from_dir = os.path.join(cachedir, \"node\" + str(i))\n             to_dir = os.path.join(test_dir, \"node\" + str(i))\n             shutil.copytree(from_dir, to_dir)\n-            initialize_datadir(test_dir, i)  # Overwrite port/rpcport in bitcoin.conf\n+            initialize_datadir(test_dir, i, self.chain)  # Overwrite port/rpcport in bitcoin.conf\n \n     def _initialize_chain_clean(self, test_dir, num_nodes):\n         \"\"\"Initialize empty blockchain for use by the test.\n \n         Create an empty blockchain and num_nodes wallets.\n         Useful if a test case wants complete control over initialization.\"\"\"\n         for i in range(num_nodes):\n-            initialize_datadir(test_dir, i)\n+            initialize_datadir(test_dir, i, self.chain)\n \n # Test framework for doing p2p comparison testing, which sets up some bitcoind\n # binaries:"
      },
      {
        "sha": "114d7ab8774199cfab7481e6d194d6aaf41bbaec",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17",
        "patch": "@@ -177,12 +177,12 @@ def sync_mempools(rpc_connections, *, wait=1, timeout=60):\n \n bitcoind_processes = {}\n \n-def initialize_datadir(dirname, n):\n+def initialize_datadir(dirname, n, chain):\n     datadir = os.path.join(dirname, \"node\"+str(n))\n     if not os.path.isdir(datadir):\n         os.makedirs(datadir)\n     with open(os.path.join(datadir, \"bitcoin.conf\"), 'w', encoding='utf8') as f:\n-        f.write(\"regtest=1\\n\")\n+        f.write(\"chain=%s\\n\" % chain)\n         f.write(\"port=\"+str(p2p_port(n))+\"\\n\")\n         f.write(\"rpcport=\"+str(rpc_port(n))+\"\\n\")\n         f.write(\"listenonion=0\\n\")\n@@ -308,8 +308,8 @@ def _start_nodes(num_nodes, dirname, extra_args=None, rpchost=None, timewait=Non\n         raise\n     return rpcs\n \n-def log_filename(dirname, n_node, logname):\n-    return os.path.join(dirname, \"node\"+str(n_node), \"regtest\", logname)\n+def log_filename(dirname, n_node, chain, logname):\n+    return os.path.join(dirname, \"node\"+str(n_node), chain, logname)\n \n def _stop_node(node, i):\n     \"\"\"Stop a bitcoind test node"
      },
      {
        "sha": "180eb181b7050c24a90c834bd028e45adb607766",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17",
        "patch": "@@ -73,8 +73,8 @@ def run_test (self):\n \n         self.log.info(\"Restore backup ...\")\n         self.stop_node(1)\n-        os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n-        shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node1/\" + self.chain + \"/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/\" + self.chain + \"/wallet.dat\")\n         self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n         #connect_nodes_bi(self.nodes, 0, 1)\n "
      },
      {
        "sha": "50e5d21dcf7526220178ca718e2052184ce66cd0",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17",
        "patch": "@@ -91,9 +91,9 @@ def stop_three(self):\n         self.stop_node(2)\n \n     def erase_three(self):\n-        os.remove(self.options.tmpdir + \"/node0/regtest/wallet.dat\")\n-        os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n-        os.remove(self.options.tmpdir + \"/node2/regtest/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node0/\" + self.chain + \"/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node1/\" + self.chain + \"/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node2/\" + self.chain + \"/wallet.dat\")\n \n     def run_test(self):\n         self.log.info(\"Generating initial blockchain\")\n@@ -151,13 +151,13 @@ def run_test(self):\n         self.erase_three()\n \n         # Start node2 with no chain\n-        shutil.rmtree(self.options.tmpdir + \"/node2/regtest/blocks\")\n-        shutil.rmtree(self.options.tmpdir + \"/node2/regtest/chainstate\")\n+        shutil.rmtree(self.options.tmpdir + \"/node2/\" + self.chain + \"/blocks\")\n+        shutil.rmtree(self.options.tmpdir + \"/node2/\" + self.chain + \"/chainstate\")\n \n         # Restore wallets from backup\n-        shutil.copyfile(tmpdir + \"/node0/wallet.bak\", tmpdir + \"/node0/regtest/wallet.dat\")\n-        shutil.copyfile(tmpdir + \"/node1/wallet.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n-        shutil.copyfile(tmpdir + \"/node2/wallet.bak\", tmpdir + \"/node2/regtest/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/node0/wallet.bak\", tmpdir + \"/node0/\" + self.chain + \"/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/node1/wallet.bak\", tmpdir + \"/node1/\" + self.chain + \"/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/node2/wallet.bak\", tmpdir + \"/node2/\" + self.chain + \"/wallet.dat\")\n \n         self.log.info(\"Re-starting nodes\")\n         self.start_three()\n@@ -172,8 +172,8 @@ def run_test(self):\n         self.erase_three()\n \n         #start node2 with no chain\n-        shutil.rmtree(self.options.tmpdir + \"/node2/regtest/blocks\")\n-        shutil.rmtree(self.options.tmpdir + \"/node2/regtest/chainstate\")\n+        shutil.rmtree(self.options.tmpdir + \"/node2/\" + self.chain + \"/blocks\")\n+        shutil.rmtree(self.options.tmpdir + \"/node2/\" + self.chain + \"/chainstate\")\n \n         self.start_three()\n "
      }
    ]
  },
  {
    "sha": "be4d0a6705eae1e7ec4d1a4fa9e62062f72a44c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTRkMGE2NzA1ZWFlMWU3ZWM0ZDFhNGZhOWU2MjA2MmY3MmE0NGM2",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-11-10T18:51:54Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T05:37:44Z"
      },
      "message": "QA: Use custom chain instead of regtest for rpc tests (except segwit)",
      "tree": {
        "sha": "40b700a96ba0a8cde5b1aace9d256eb2504529df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40b700a96ba0a8cde5b1aace9d256eb2504529df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be4d0a6705eae1e7ec4d1a4fa9e62062f72a44c6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT0woAAoJEKT10UHAGgOH+DEP/RTkk5lyMSfZD6A8lDtdpAZ7\n4MhA1pQALpl0v73l6IZ2y/8QQ3iawkI+4eXNtot9KRvcXITc74PTXnS2BYRwYMA0\ns7prui8rShzcPpJjiGZjTnp2jxWpxB67wG+30ubzTRSvxk6Wiv0xeYSnMJNn+vn0\n9Yg17X2uDB1/rqkmw8kIYk2ohA2l/pOQpvAjGbg6vwpbv0Zk3Bhglq+WcYKNZfAt\n34zJcmhal2PtoTRjZJ9bN8LWziykKTchsVmRWhE4vWtZfwOisZt1PRjgYLYXNWOW\na6CICb5vbAclbX4WNqD7lvn00Y/vasPOF/yFEX9euq4CtsnvvYm3j35Opv6kjbMl\n9u3qChtIwUzC0QyHTXFFR3vUZEhTXurx8isVtS+/EpQagJeeSnHE3/Kft/dX4f2W\nkBvsJgtgMK5c/n3O84G7XokR7Ir4epW5kYnxf+aO0MlCGvVvD4Y36kaAArgG7vLL\nu5OtDTgly9VPTCToRpMcK2XXOnHQl90ZrJKNb0r7jE60XJU15haW7qR7xkISF3++\ncz/q9tHqDkW0G1CDdivxwkJByBD90sHhwy1o+dlwbuEc+DPzs3dIgheEOwtvH90q\n/TxZvt7Q4uCNiVtGleeoTBEOFG9z7CmD4mHGWjYK+DS92tWNh7qP64gBbE+0fty4\n507ZjDOqPfrdlmZZi0pi\n=DrJI\n-----END PGP SIGNATURE-----",
        "payload": "tree 40b700a96ba0a8cde5b1aace9d256eb2504529df\nparent 9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1478803914 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498369064 +0200\n\nQA: Use custom chain instead of regtest for rpc tests (except segwit)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be4d0a6705eae1e7ec4d1a4fa9e62062f72a44c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be4d0a6705eae1e7ec4d1a4fa9e62062f72a44c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be4d0a6705eae1e7ec4d1a4fa9e62062f72a44c6/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e4953e09b2ab66d61dc716ebd8eacc09a2c9b17"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "669378e733e0fe0e346cdb2f792b749d822afe8c",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be4d0a6705eae1e7ec4d1a4fa9e62062f72a44c6/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be4d0a6705eae1e7ec4d1a4fa9e62062f72a44c6/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=be4d0a6705eae1e7ec4d1a4fa9e62062f72a44c6",
        "patch": "@@ -23,7 +23,7 @@ def main():\n     parser = argparse.ArgumentParser(usage='%(prog)s [options] <test temporary directory>', description=__doc__)\n     parser.add_argument('-c', '--color', dest='color', action='store_true', help='outputs the combined log with events colored by source (requires posix terminal colors. Use less -r for viewing)')\n     parser.add_argument('--html', dest='html', action='store_true', help='outputs the combined log as html. Requires jinja2. pip install jinja2')\n-    parser.add_argument('--chain', dest='chain', action='store_true', help='selected chain in the tests (default: regtest)', const='regtest')\n+    parser.add_argument('--chain', dest='chain', action='store_true', help='selected chain in the tests (default: custom)', const='custom')\n     args, unknown_args = parser.parse_known_args()\n \n     if args.color and os.name != 'posix':"
      },
      {
        "sha": "e6c30150567c4d4a082580747abed015e4551723",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be4d0a6705eae1e7ec4d1a4fa9e62062f72a44c6/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be4d0a6705eae1e7ec4d1a4fa9e62062f72a44c6/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=be4d0a6705eae1e7ec4d1a4fa9e62062f72a44c6",
        "patch": "@@ -78,6 +78,7 @@ class SegWitTest(BitcoinTestFramework):\n \n     def __init__(self):\n         super().__init__()\n+        self.chain = \"regtest\"\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         self.extra_args = [[\"-walletprematurewitness\", \"-rpcserialversion=0\"],"
      },
      {
        "sha": "cb7d61964a73ef7e113b374afb00a7c26871859b",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be4d0a6705eae1e7ec4d1a4fa9e62062f72a44c6/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be4d0a6705eae1e7ec4d1a4fa9e62062f72a44c6/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=be4d0a6705eae1e7ec4d1a4fa9e62062f72a44c6",
        "patch": "@@ -69,7 +69,7 @@ class BitcoinTestFramework(object):\n \n     # Methods to override in subclass test scripts.\n     def __init__(self):\n-        self.chain = \"regtest\"\n+        self.chain = \"custom\"\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n         self.nodes = None"
      }
    ]
  },
  {
    "sha": "4998d06078f1432920d92c586871ebac45ba95ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTk4ZDA2MDc4ZjE0MzI5MjBkOTJjNTg2ODcxZWJhYzQ1YmE5NWVk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-30T19:43:19Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T05:37:45Z"
      },
      "message": "Testchains: Only load custom chainparams config from a separated file",
      "tree": {
        "sha": "06c0e4b65d948074a2665313d2e500080a4c157c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06c0e4b65d948074a2665313d2e500080a4c157c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4998d06078f1432920d92c586871ebac45ba95ed",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT0wpAAoJEKT10UHAGgOHIxIQAJVzj78czP8nQzHK3PE6S8rr\nVZPJGgmokYLBzsEwyxwN+l2FZpP9UxKhWVGMSBkwv22wAXFD475Kcns0x8UvaGiK\n1/IuvgOWOcHCQRhd5auwsK1Egb3+GllNIfsEP05teRx8BFl2N7VwuTigpRzE4alQ\n508VHY4LLH8pgwJ40fRk0O0cATFLwOUREoLHS414xPN3VvJa1EKrJKm7z21Q3N0I\nZteEIQHikND1Q6Rjx5mGQZC34ATHjwkpGwIDaYmGCOYZsO77Uy0s+akzW4E4zMM5\nBNtS5dwC/JuteY1TvSI70i9y3RMEIO5wantsueptBFPVC7mSbyOYBTfL2id+tEyP\n/hSysnp4TYHHtu4p3ewQBkcfAJYqP5v8ACgiAF9Qp3ASDgouQwG2CrTreULpAq4y\nKiqA3TfnIo+09HxQzHLXevakivslEE1My9kVIQbJO6b3P947imv8d7Y6kZHb3nfv\nMKlTU65TVNWmAo+waZvPVwoaOGpw7I5s3+qK/K/THnXSyA/Uv1Jd3qjUV7i/vqhw\nQY6glihsUNJR99uwtqwcJ24OxSjShjEmMzDHJNtfNb3M0Sa9+7Wl/QbtgaEc1IGg\nSCrxgCXVJotTtz/f3C3iMfAht1VGrYl7VWAWKxcCW509wEA+pm8GccdSYVfCjVAq\nGTTwV9cDjPdg2HDgd+Eu\n=KQU8\n-----END PGP SIGNATURE-----",
        "payload": "tree 06c0e4b65d948074a2665313d2e500080a4c157c\nparent be4d0a6705eae1e7ec4d1a4fa9e62062f72a44c6\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1496173399 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498369065 +0200\n\nTestchains: Only load custom chainparams config from a separated file\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4998d06078f1432920d92c586871ebac45ba95ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4998d06078f1432920d92c586871ebac45ba95ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4998d06078f1432920d92c586871ebac45ba95ed/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be4d0a6705eae1e7ec4d1a4fa9e62062f72a44c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be4d0a6705eae1e7ec4d1a4fa9e62062f72a44c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be4d0a6705eae1e7ec4d1a4fa9e62062f72a44c6"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d69a84053407c607d1b42a9eb75cf762f7851f15",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4998d06078f1432920d92c586871ebac45ba95ed/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4998d06078f1432920d92c586871ebac45ba95ed/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=4998d06078f1432920d92c586871ebac45ba95ed",
        "patch": "@@ -435,7 +435,9 @@ std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain)\n void SelectParams(const std::string& network)\n {\n     SelectBaseParams(network);\n-    globalChainParams = CreateChainParams(network, gArgs);\n+    ArgsManager args;\n+    args.ReadConfigFile(gArgs.GetArg(\"-chainconf\", CHAINPARAMS_DEFAULT_CONF_FILE));\n+    globalChainParams = CreateChainParams(network, args);\n }\n \n void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)"
      },
      {
        "sha": "e6c3062247621963df1a31f790ea00a7956a2ada",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4998d06078f1432920d92c586871ebac45ba95ed/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4998d06078f1432920d92c586871ebac45ba95ed/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=4998d06078f1432920d92c586871ebac45ba95ed",
        "patch": "@@ -24,6 +24,7 @@ void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n         strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                                    \"This is intended for regression testing tools and app development.\");\n         strUsage += HelpMessageGroup(_(\"Custom chain selection options (only for -chain=custom):\"));\n+        strUsage += HelpMessageOpt(\"-chainconf=<file>\", strprintf(_(\"Specify configuration file for chain parameters (default: %s). All custom chain arguments except this one must be configured using this file.\"), CHAINPARAMS_DEFAULT_CONF_FILE));\n         strUsage += HelpMessageOpt(\"-chainpetname=<name>\", _(\"Alternative name for custom chain (default: custom). This changes the genesis block.\"));\n     }\n }"
      },
      {
        "sha": "2f48a3da051961b4e6f66b00e80e5674c236ffd3",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4998d06078f1432920d92c586871ebac45ba95ed/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4998d06078f1432920d92c586871ebac45ba95ed/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=4998d06078f1432920d92c586871ebac45ba95ed",
        "patch": "@@ -9,6 +9,8 @@\n #include <string>\n #include <vector>\n \n+#define CHAINPARAMS_DEFAULT_CONF_FILE \"chainparams.conf\"\n+\n /**\n  * CBaseChainParams defines the base parameters (shared between bitcoin-cli and bitcoind)\n  * of a given instance of the Bitcoin system."
      }
    ]
  },
  {
    "sha": "c10529481c74b809926510ebd49378bad40f1d64",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTA1Mjk0ODFjNzRiODA5OTI2NTEwZWJkNDkzNzhiYWQ0MGYxZDY0",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-03T09:22:24Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T08:29:40Z"
      },
      "message": "Pow: Introduce MaybeGenerateProof",
      "tree": {
        "sha": "9374a854ecb5c997baa5c3085b4bb636b09d0b8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9374a854ecb5c997baa5c3085b4bb636b09d0b8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c10529481c74b809926510ebd49378bad40f1d64",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT3R0AAoJEKT10UHAGgOHKEgP/iTjdzOr5GUIGt4B3CCf22pH\npdxVPYKpEohbIqlsj4wKR/bpmQLf63h3LMy7ACIeA3LhHi4AVn1Wpd0Gurr8am/y\n/8C4jZht/v9eu8PS9JSjB2IKUduZS6LzKvj6abBjkKAubTdvHG/c0bTA+J49HrGq\nysBjSziXAtpDWl6O/eiEHnAmt8W9yZln+7UmEPWs9ZeLlFevAzTsXwn2IOsMIxw+\nQGTrEEmJa7mYB9OI8w5eWHeNrZSUT4SzHqNYqfzhC/eKToAhEQ9J/h1Ee/V4PJM6\nvX8xwWZOQ8ZakF5N7dOI48/HD0awX8rRMZNmprs/tRq8NOY8pAJHb0RANqjwYx+3\nBWfcE58deI7d+qD9BKY2sVmtxnWJMPLblWzb60t2qVUbhKjpHUbNJH8EYVDsXMpC\nOt6hFc23vDVwnCtyNL/3e80TJAZv8PGqYIlkZevr70L3H+SgAzsbj7uySon2jT00\n2ba2US8Ga9X8csrWthnFRvRGLDg7LmNOPYmZ2uN9uS6ZUCGK9zSsMu1bkS27l76Q\n2bbWa2Yr0sM/EEl7dhwJTTPgjACZQN8xy0Jx0GE1XIeskWDDahxZ21rQtSuLTHIO\nPFj1QebgBOS0koOkcqwzfijOEA/+WTGZ43c2px7tbXDOb5OdtgQbG7I5eIh5+ZI4\nP6keAO3ptYikjsg6dR+c\n=25wX\n-----END PGP SIGNATURE-----",
        "payload": "tree 9374a854ecb5c997baa5c3085b4bb636b09d0b8a\nparent 4998d06078f1432920d92c586871ebac45ba95ed\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1486113744 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498379380 +0200\n\nPow: Introduce MaybeGenerateProof\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c10529481c74b809926510ebd49378bad40f1d64",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c10529481c74b809926510ebd49378bad40f1d64",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c10529481c74b809926510ebd49378bad40f1d64/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4998d06078f1432920d92c586871ebac45ba95ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4998d06078f1432920d92c586871ebac45ba95ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4998d06078f1432920d92c586871ebac45ba95ed"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 19,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1c3f7efb5010abdb0e2111abb7abadfc7b249255",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c10529481c74b809926510ebd49378bad40f1d64/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c10529481c74b809926510ebd49378bad40f1d64/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=c10529481c74b809926510ebd49378bad40f1d64",
        "patch": "@@ -89,3 +89,15 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n \n     return true;\n }\n+\n+bool MaybeGenerateProof(const Consensus::Params& params, CBlockHeader* pblock, uint64_t& nTries)\n+{\n+    static const int nInnerLoopCount = 0x10000;\n+    uint256 blockHash = pblock->GetHash();\n+    while (nTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(blockHash, pblock->nBits, params)) {\n+        ++pblock->nNonce;\n+        blockHash = pblock->GetHash();\n+        --nTries;\n+    }\n+    return CheckProofOfWork(blockHash, pblock->nBits, params);\n+}"
      },
      {
        "sha": "f9ec1f4e41a32d98db7d4d73d92b27f8bf3515a5",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c10529481c74b809926510ebd49378bad40f1d64/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c10529481c74b809926510ebd49378bad40f1d64/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=c10529481c74b809926510ebd49378bad40f1d64",
        "patch": "@@ -19,5 +19,6 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n+bool MaybeGenerateProof(const Consensus::Params& params, CBlockHeader* pblock, uint64_t& nTries);\n \n #endif // BITCOIN_POW_H"
      },
      {
        "sha": "5e54143090a5be42c5a959111cad3549f12ad267",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c10529481c74b809926510ebd49378bad40f1d64/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c10529481c74b809926510ebd49378bad40f1d64/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=c10529481c74b809926510ebd49378bad40f1d64",
        "patch": "@@ -95,7 +95,6 @@ UniValue getnetworkhashps(const JSONRPCRequest& request)\n \n UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)\n {\n-    static const int nInnerLoopCount = 0x10000;\n     int nHeightEnd = 0;\n     int nHeight = 0;\n \n@@ -116,15 +115,12 @@ UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGen\n             LOCK(cs_main);\n             IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);\n         }\n-        while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n-            ++pblock->nNonce;\n-            --nMaxTries;\n-        }\n-        if (nMaxTries == 0) {\n-            break;\n-        }\n-        if (pblock->nNonce == nInnerLoopCount) {\n-            continue;\n+        if (!MaybeGenerateProof(Params().GetConsensus(), pblock, nMaxTries)) {\n+            if (nMaxTries == 0) {\n+                break;\n+            } else {\n+                continue;\n+            }\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n         if (!ProcessNewBlock(Params(), shared_pblock, true, NULL))"
      }
    ]
  },
  {
    "sha": "ef436d2bd755480d684da31f0b209167c5c5927a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjQzNmQyYmQ3NTU0ODBkNjg0ZGEzMWYwYjIwOTE2N2M1YzU5Mjdh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-03T21:37:18Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T08:29:45Z"
      },
      "message": "Optimization: Pass pre-calculated const uint256& block_hash through more functions\n\n- Pow: Pass const uint256& block_hash to s/CheckBlockHeader/CheckProofOfWork/\n  Optimization because AcceptBlockHeader had the hash calculated already\n- Pass const uint256& block_hash to CheckBlock\n  Optimization because now ConnectBlock calls CBlock::GetHash() less times\n- Pass const uint256& block_hash to ConnectBlock\n  Optimization because TestBlockValidity had calculated block_hash already\n- Pass const uint256& block_hash to AcceptBlock\n  Optimization because now AcceptBlock reuses CBlock::GetHash() calculation from ProcessNewBlock\n- Pass const uint256& block_hash to ProcessNewBlock\n- Call CBlock::GetHash() less in net_processing::ProcessMessage()\n- Pass const uint256& block_hash to TestBlockValidity\n  Optimization because getblocktemplate had the hash calculated already",
      "tree": {
        "sha": "ae7e2d8fa428933eddd9762496a2e8f31bc38fb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae7e2d8fa428933eddd9762496a2e8f31bc38fb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef436d2bd755480d684da31f0b209167c5c5927a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT3R5AAoJEKT10UHAGgOHPAkP/jOk6jHluQtQEGfn5y7e4S6g\n7/6+DM68oNFzRZOtvVmLHnZ3A35IWu2wO8evgAQT6LNsGk1yp2AG+Ix1oTUSpoOp\nTvNoApiqER1wh6uUoIe+pF3SpWhqCyG7PPR7nKA65y8lU4CE8rQDUluvTohG309q\nEAR6f4oeNGp3EAcPLZro/W3KSnbkSe1379bwsoFwqWKe0moLXf99KONMe38Dn2wS\nU1fY8jP0tWw8RSpHR1k1q6d1nYZ3VHsjPfDdBPHztwQKamAJJov98A2Mgn1HEgSV\nr+O2f4QqlT1LYyurGhk2gXU1b0m+vIj74ZNBOsLv5VZmex9PRz1vHcHhW2+AQVpo\nxwxWT5PlvO7R3qcwjp9wqyAd9qF8VUaSY/7O66JmMXtLstqSPbZ9k500KPyKdZgI\nm3B4wn89X0+DrsHGEPwTd9W6xGvEmLfpDro93Js8fwqwUFU3UnDJH2zAxSdgg3U5\nl2GW/5RXtu2oJIX0jfp92jRcbhD0lfJApu3JaoXiZX8EHsFVSWM0P8XAMwwz4pWG\n37ng5rcTJJYvIfjgo2omiGgRCBiV2AqLd+yIp07/odS9LwlkRFhgL/cxrXRsQUlX\nGkz384h0LUfWmfuHW45FQPDyEmJQlhgKnFkrYHjAAA4ttJ3RyzQHgOZFXmrnkPFr\nIlolxhF2D2Q9qm5jONUo\n=5Coj\n-----END PGP SIGNATURE-----",
        "payload": "tree ae7e2d8fa428933eddd9762496a2e8f31bc38fb2\nparent c10529481c74b809926510ebd49378bad40f1d64\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1493847438 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498379385 +0200\n\nOptimization: Pass pre-calculated const uint256& block_hash through more functions\n\n- Pow: Pass const uint256& block_hash to s/CheckBlockHeader/CheckProofOfWork/\n  Optimization because AcceptBlockHeader had the hash calculated already\n- Pass const uint256& block_hash to CheckBlock\n  Optimization because now ConnectBlock calls CBlock::GetHash() less times\n- Pass const uint256& block_hash to ConnectBlock\n  Optimization because TestBlockValidity had calculated block_hash already\n- Pass const uint256& block_hash to AcceptBlock\n  Optimization because now AcceptBlock reuses CBlock::GetHash() calculation from ProcessNewBlock\n- Pass const uint256& block_hash to ProcessNewBlock\n- Call CBlock::GetHash() less in net_processing::ProcessMessage()\n- Pass const uint256& block_hash to TestBlockValidity\n  Optimization because getblocktemplate had the hash calculated already\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef436d2bd755480d684da31f0b209167c5c5927a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef436d2bd755480d684da31f0b209167c5c5927a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef436d2bd755480d684da31f0b209167c5c5927a/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c10529481c74b809926510ebd49378bad40f1d64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c10529481c74b809926510ebd49378bad40f1d64",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c10529481c74b809926510ebd49378bad40f1d64"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 47,
      "deletions": 46
    },
    "files": [
      {
        "sha": "679e3c13ed97fa53e1ca30089888007d0986fdab",
        "filename": "src/bench/checkblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef436d2bd755480d684da31f0b209167c5c5927a/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef436d2bd755480d684da31f0b209167c5c5927a/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=ef436d2bd755480d684da31f0b209167c5c5927a",
        "patch": "@@ -48,7 +48,7 @@ static void DeserializeAndCheckBlockTest(benchmark::State& state)\n         assert(stream.Rewind(sizeof(block_bench::block413567)));\n \n         CValidationState validationState;\n-        assert(CheckBlock(block, validationState, chainParams->GetConsensus()));\n+        assert(CheckBlock(block, block.GetHash(), validationState, chainParams->GetConsensus()));\n     }\n }\n "
      },
      {
        "sha": "80b9edd572c4edbd510e7675f80546927898bc09",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef436d2bd755480d684da31f0b209167c5c5927a/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef436d2bd755480d684da31f0b209167c5c5927a/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=ef436d2bd755480d684da31f0b209167c5c5927a",
        "patch": "@@ -199,7 +199,7 @@ ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<\n         return READ_STATUS_INVALID;\n \n     CValidationState state;\n-    if (!CheckBlock(block, state, Params().GetConsensus())) {\n+    if (!CheckBlock(block, block.GetHash(), state, Params().GetConsensus())) {\n         // TODO: We really want to just check merkle tree manually here,\n         // but that is expensive, and CheckBlock caches a block's\n         // \"checked-status\" (in the CBlock?). CBlock should be able to"
      },
      {
        "sha": "57a9728a975cd66a9e9f1294791d877e8154b36d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef436d2bd755480d684da31f0b209167c5c5927a/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef436d2bd755480d684da31f0b209167c5c5927a/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ef436d2bd755480d684da31f0b209167c5c5927a",
        "patch": "@@ -201,7 +201,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n \n     CValidationState state;\n-    if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {\n+    if (!TestBlockValidity(state, chainparams, *pblock, pblock->GetHash(), pindexPrev, false, false)) {\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n     }\n     int64_t nTime2 = GetTimeMicros();"
      },
      {
        "sha": "5062db083551b68605479758e0b9244719e7fdd7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef436d2bd755480d684da31f0b209167c5c5927a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef436d2bd755480d684da31f0b209167c5c5927a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ef436d2bd755480d684da31f0b209167c5c5927a",
        "patch": "@@ -2144,14 +2144,15 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             return ProcessMessage(pfrom, NetMsgType::HEADERS, vHeadersMsg, nTimeReceived, chainparams, connman, interruptMsgProc);\n \n         if (fBlockReconstructed) {\n+            const uint256& block_hash = pblock->GetHash();\n             // If we got here, we were able to optimistically reconstruct a\n             // block that is in flight from some other peer.\n             {\n                 LOCK(cs_main);\n-                mapBlockSource.emplace(pblock->GetHash(), std::make_pair(pfrom->GetId(), false));\n+                mapBlockSource.emplace(block_hash, std::make_pair(pfrom->GetId(), false));\n             }\n             bool fNewBlock = false;\n-            ProcessNewBlock(chainparams, pblock, true, &fNewBlock);\n+            ProcessNewBlock(chainparams, pblock, block_hash, true, &fNewBlock);\n             if (fNewBlock)\n                 pfrom->nLastBlockTime = GetTime();\n \n@@ -2161,7 +2162,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 // process from some other peer.  We do this after calling\n                 // ProcessNewBlock so that a malleated cmpctblock announcement\n                 // can't be used to interfere with block relay.\n-                MarkBlockAsReceived(pblock->GetHash());\n+                MarkBlockAsReceived(block_hash);\n             }\n         }\n \n@@ -2228,7 +2229,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             bool fNewBlock = false;\n             // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n             // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n-            ProcessNewBlock(chainparams, pblock, true, &fNewBlock);\n+            ProcessNewBlock(chainparams, pblock, pblock->GetHash(), true, &fNewBlock);\n             if (fNewBlock)\n                 pfrom->nLastBlockTime = GetTime();\n         }\n@@ -2388,26 +2389,26 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     {\n         std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n         vRecv >> *pblock;\n+        const uint256& block_hash = pblock->GetHash();\n \n-        LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom->GetId());\n+        LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", block_hash.ToString(), pfrom->GetId());\n \n         // Process all blocks from whitelisted peers, even if not requested,\n         // unless we're still syncing with the network.\n         // Such an unrequested block may still be processed, subject to the\n         // conditions in AcceptBlock().\n         bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n-        const uint256 hash(pblock->GetHash());\n         {\n             LOCK(cs_main);\n             // Also always process if we requested the block explicitly, as we may\n             // need it even though it is not a candidate for a new best tip.\n-            forceProcessing |= MarkBlockAsReceived(hash);\n+            forceProcessing |= MarkBlockAsReceived(block_hash);\n             // mapBlockSource is only used for sending reject messages and DoS scores,\n             // so the race between here and cs_main in ProcessNewBlock is fine.\n-            mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n+            mapBlockSource.emplace(block_hash, std::make_pair(pfrom->GetId(), true));\n         }\n         bool fNewBlock = false;\n-        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n+        ProcessNewBlock(chainparams, pblock, block_hash, forceProcessing, &fNewBlock);\n         if (fNewBlock)\n             pfrom->nLastBlockTime = GetTime();\n     }"
      },
      {
        "sha": "aa461f2adfddf994e98efdd05649aeeabd45b9e7",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef436d2bd755480d684da31f0b209167c5c5927a/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef436d2bd755480d684da31f0b209167c5c5927a/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ef436d2bd755480d684da31f0b209167c5c5927a",
        "patch": "@@ -104,7 +104,7 @@ UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGen\n         nHeightEnd = nHeight+nGenerate;\n     }\n     unsigned int nExtraNonce = 0;\n-    UniValue blockHashes(UniValue::VARR);\n+    UniValue block_hashes(UniValue::VARR);\n     while (nHeight < nHeightEnd)\n     {\n         std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(Params()).CreateNewBlock(coinbaseScript->reserveScript));\n@@ -123,18 +123,18 @@ UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGen\n             }\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        if (!ProcessNewBlock(Params(), shared_pblock, true, NULL))\n+        if (!ProcessNewBlock(Params(), shared_pblock, shared_pblock->GetHash(), true, NULL))\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n-        blockHashes.push_back(pblock->GetHash().GetHex());\n+        block_hashes.push_back(pblock->GetHash().GetHex());\n \n         //mark script as important because it was used at least for one coinbase output if the script came from the wallet\n         if (keepScript)\n         {\n             coinbaseScript->KeepScript();\n         }\n     }\n-    return blockHashes;\n+    return block_hashes;\n }\n \n UniValue generate(const JSONRPCRequest& request)\n@@ -434,7 +434,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             if (block.hashPrevBlock != pindexPrev->GetBlockHash())\n                 return \"inconclusive-not-best-prevblk\";\n             CValidationState state;\n-            TestBlockValidity(state, Params(), block, pindexPrev, false, true);\n+            TestBlockValidity(state, Params(), block, hash, pindexPrev, false, true);\n             return BIP22ValidationResult(state);\n         }\n \n@@ -773,7 +773,7 @@ UniValue submitblock(const JSONRPCRequest& request)\n \n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool fAccepted = ProcessNewBlock(Params(), blockptr, true, NULL);\n+    bool fAccepted = ProcessNewBlock(Params(), blockptr, blockptr->GetHash(), true, NULL);\n     UnregisterValidationInterface(&sc);\n     if (fBlockPresent) {\n         if (fAccepted && !sc.found) {"
      },
      {
        "sha": "6d0bb11e7dc4e8528f45746fddaadc9136b55f0f",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef436d2bd755480d684da31f0b209167c5c5927a/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef436d2bd755480d684da31f0b209167c5c5927a/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=ef436d2bd755480d684da31f0b209167c5c5927a",
        "patch": "@@ -236,7 +236,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n         pblock->nNonce = blockinfo[i].nonce;\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, true, NULL));\n+        BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, shared_pblock->GetHash(), true, NULL));\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n "
      },
      {
        "sha": "4c13d4ea8af04e3b1fd2842037446c1e5cf485d8",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef436d2bd755480d684da31f0b209167c5c5927a/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef436d2bd755480d684da31f0b209167c5c5927a/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=ef436d2bd755480d684da31f0b209167c5c5927a",
        "patch": "@@ -129,7 +129,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n-    ProcessNewBlock(chainparams, shared_pblock, true, NULL);\n+    ProcessNewBlock(chainparams, shared_pblock, shared_pblock->GetHash(), true, NULL);\n \n     CBlock result = block;\n     return result;"
      },
      {
        "sha": "4b3960b7d903a071b6dab252dbd8310e7ec4f274",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef436d2bd755480d684da31f0b209167c5c5927a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef436d2bd755480d684da31f0b209167c5c5927a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ef436d2bd755480d684da31f0b209167c5c5927a",
        "patch": "@@ -1491,14 +1491,14 @@ static int64_t nTimeTotal = 0;\n /** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n  *  can fail if those validity checks fail (among other reasons). */\n-static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n+static bool ConnectBlock(const CBlock& block, const uint256& block_hash, CValidationState& state, CBlockIndex* pindex,\n                   CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false)\n {\n     AssertLockHeld(cs_main);\n     assert(pindex);\n     // pindex->phashBlock can be null if called by CreateNewBlock/TestBlockValidity\n     assert((pindex->phashBlock == NULL) ||\n-           (*pindex->phashBlock == block.GetHash()));\n+           (*pindex->phashBlock == block_hash));\n     int64_t nTimeStart = GetTimeMicros();\n \n     // verify that the view's current state corresponds to the previous block\n@@ -1507,14 +1507,14 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n \n     // Special case for the genesis block, skipping connection of its transactions\n     // (its coinbase is unspendable)\n-    if (block.GetHash() == chainparams.GetConsensus().hashGenesisBlock) {\n+    if (block_hash == chainparams.GetConsensus().hashGenesisBlock) {\n         if (!fJustCheck)\n             view.SetBestBlock(pindex->GetBlockHash());\n         return true;\n     }\n \n     // Check it again in case a previous version let a bad block in\n-    if (!CheckBlock(block, state, chainparams.GetConsensus(), !fJustCheck, !fJustCheck))\n+    if (!CheckBlock(block, block_hash, state, chainparams.GetConsensus(), !fJustCheck, !fJustCheck))\n         return error(\"%s: CheckBlock: %s\", __func__, FormatStateMessage(state));\n \n     bool fScriptChecks = true;\n@@ -2077,7 +2077,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     LogPrint(BCLog::BENCH, \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * 0.001, nTimeReadFromDisk * 0.000001);\n     {\n         CCoinsViewCache view(pcoinsTip);\n-        bool rv = ConnectBlock(blockConnecting, state, pindexNew, view, chainparams);\n+        bool rv = ConnectBlock(blockConnecting, blockConnecting.GetHash(), state, pindexNew, view, chainparams);\n         GetMainSignals().BlockChecked(blockConnecting, state);\n         if (!rv) {\n             if (state.IsInvalid())\n@@ -2641,16 +2641,16 @@ static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos,\n     return true;\n }\n \n-static bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true)\n+static bool CheckBlockHeader(const CBlockHeader& block, const uint256& block_hash, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true)\n {\n     // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n+    if (fCheckPOW && !CheckProofOfWork(block_hash, block.nBits, consensusParams))\n         return state.DoS(50, false, REJECT_INVALID, \"high-hash\", false, \"proof of work failed\");\n \n     return true;\n }\n \n-bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool CheckBlock(const CBlock& block, const uint256& block_hash, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     // These are checks that are independent of context.\n \n@@ -2659,7 +2659,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n     // Check that the header is valid (particularly PoW).  This is mostly\n     // redundant with the call in AcceptBlockHeader.\n-    if (!CheckBlockHeader(block, state, consensusParams, fCheckPOW))\n+    if (!CheckBlockHeader(block, block_hash, state, consensusParams, fCheckPOW))\n         return false;\n \n     // Check the merkle root.\n@@ -2921,7 +2921,7 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return true;\n         }\n \n-        if (!CheckBlockHeader(block, state, chainparams.GetConsensus()))\n+        if (!CheckBlockHeader(block, hash, state, chainparams.GetConsensus()))\n             return error(\"%s: Consensus::CheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n \n         // Get prev block index\n@@ -2971,7 +2971,7 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n }\n \n /** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n-static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, const uint256& block_hash, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n {\n     const CBlock& block = *pblock;\n \n@@ -3011,8 +3011,8 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     }\n     if (fNewBlock) *fNewBlock = true;\n \n-    if (chainparams.GetConsensus().hashGenesisBlock != block.GetHash() &&\n-        (!CheckBlock(block, state, chainparams.GetConsensus()) ||\n+    if (chainparams.GetConsensus().hashGenesisBlock != block_hash &&\n+        (!CheckBlock(block, block_hash, state, chainparams.GetConsensus()) ||\n          !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev))) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n@@ -3051,21 +3051,21 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, const uint256& block_hash, bool fForceProcessing, bool *fNewBlock)\n {\n     {\n         CBlockIndex *pindex = NULL;\n         if (fNewBlock) *fNewBlock = false;\n         CValidationState state;\n         // Ensure that CheckBlock() passes before calling AcceptBlock, as\n         // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+        bool ret = CheckBlock(*pblock, block_hash, state, chainparams.GetConsensus());\n \n         LOCK(cs_main);\n \n         if (ret) {\n             // Store to disk\n-            ret = AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock);\n+            ret = AcceptBlock(pblock, block_hash, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock);\n         }\n         CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret) {\n@@ -3083,7 +3083,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n     return true;\n }\n \n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, const uint256& block_hash, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     AssertLockHeld(cs_main);\n     assert(pindexPrev && pindexPrev == chainActive.Tip());\n@@ -3098,11 +3098,11 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n     // NOTE: CheckBlockHeader is called by CheckBlock\n     if (!ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev, GetAdjustedTime()))\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, FormatStateMessage(state));\n-    if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n+    if (!CheckBlock(block, block_hash, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n     if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n         return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, FormatStateMessage(state));\n-    if (!ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n+    if (!ConnectBlock(block, block_hash, state, &indexDummy, viewNew, chainparams, true))\n         return false;\n     assert(state.IsValid());\n \n@@ -3488,7 +3488,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n             return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n-        if (nCheckLevel >= 1 && !CheckBlock(block, state, chainparams.GetConsensus()))\n+        if (nCheckLevel >= 1 && !CheckBlock(block, block.GetHash(), state, chainparams.GetConsensus()))\n             return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__,\n                          pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n         // check level 2: verify undo validity\n@@ -3530,7 +3530,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n                 return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-            if (!ConnectBlock(block, state, pindex, coins, chainparams))\n+            if (!ConnectBlock(block, block.GetHash(), state, pindex, coins, chainparams))\n                 return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         }\n     }\n@@ -3760,7 +3760,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                 if (mapBlockIndex.count(hash) == 0 || (mapBlockIndex[hash]->nStatus & BLOCK_HAVE_DATA) == 0) {\n                     LOCK(cs_main);\n                     CValidationState state;\n-                    if (AcceptBlock(pblock, state, chainparams, NULL, true, dbp, NULL))\n+                    if (AcceptBlock(pblock, pblock->GetHash(), state, chainparams, NULL, true, dbp, NULL))\n                         nLoaded++;\n                     if (state.IsError())\n                         break;\n@@ -3794,7 +3794,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                                     head.ToString());\n                             LOCK(cs_main);\n                             CValidationState dummy;\n-                            if (AcceptBlock(pblockrecursive, dummy, chainparams, NULL, true, &it->second, NULL))\n+                            if (AcceptBlock(pblockrecursive, pblockrecursive->GetHash(), dummy, chainparams, NULL, true, &it->second, NULL))\n                             {\n                                 nLoaded++;\n                                 queue.push_back(pblockrecursive->GetHash());"
      },
      {
        "sha": "b413d5234e2d9068d514d854017a26fcacf0131b",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef436d2bd755480d684da31f0b209167c5c5927a/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef436d2bd755480d684da31f0b209167c5c5927a/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=ef436d2bd755480d684da31f0b209167c5c5927a",
        "patch": "@@ -234,7 +234,7 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock);\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, const uint256& block_hash, bool fForceProcessing, bool* fNewBlock);\n \n /**\n  * Process incoming block headers.\n@@ -399,10 +399,10 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n /** Functions for validating blocks and updating the block tree */\n \n /** Context-independent validity checks */\n-bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool CheckBlock(const CBlock& block, const uint256& block_hash, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, const uint256& block_hash, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Check whether witness commitments are required for block. */\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);"
      }
    ]
  },
  {
    "sha": "990716f1fd77809ee0f7f1cfadaa2d38e643a07f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTA3MTZmMWZkNzc4MDllZTBmN2YxY2ZhZGFhMmQzOGU2NDNhMDdm",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-05T06:55:03Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T08:29:48Z"
      },
      "message": "Pow: Remove fCheckPOW from CheckBlockHeader",
      "tree": {
        "sha": "165cdc170f7d4c836212adbc28ca4bb493e00b61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/165cdc170f7d4c836212adbc28ca4bb493e00b61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/990716f1fd77809ee0f7f1cfadaa2d38e643a07f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT3R8AAoJEKT10UHAGgOHlN0QAKPhOPAv+htNbUjvdzayjHfx\nzFJvleyhKx3WoIrG/MhLSZDPXLY+ihYYVUt1Yzspx568fevmwHPMF5a6XZe7h70D\n9KoQhPKAEueoeD2MU/DQ7yblp5sZyh+CARrgXSUH99DOZP1y4XQPaAON+FGvX3pj\n/rdE2uRFLIE1E25qdiEHXw+Px750cMOfaTGpCaJbfKoV68TnEKyi+mZTy8WAD60/\nvY+D3GmF8Nj9bpWIgLpXv/U3t4rYFqvXA6K+Q7vkXGpWu6mPB0oT/+6epT46Jp65\nUVS1vz8d5aXEEpnMQNYFQUfa6lszNiHcm/GtQ3RhxKgzeqCnTqZ2PYvHxffkn4UJ\nUFB3bk8kfPUF68GmtGkDP8BpRu0pvgfkQ4L020O82/Au2BkeEx6ECpQ1RNL8pDoM\nXNGIaHXYDmRkrcCt/bNa1piXXZXyGZh4To1fgfkgwuIibpizrp7+99tTcQQ9AvBn\n+We69zVbhCfK6ZIehIWYgpYcRWN0c/kMoqBGmYxBOmOBlSMJxZVzxP1gC1cD7ARX\nAoA+z0S0D8YDug/bnvukUVg5VHkAhsDhXG/Aw0ev4E+6RDttG6nBRQT6jo9cM3FP\n+dVbk4+grzHSX7e8krcLSbmzMFsZqUjEpou+1SfFx0ghweZ4JrybK4FTQm9W637t\nzDbJQzyu/RUYrSlFQtY6\n=2gHK\n-----END PGP SIGNATURE-----",
        "payload": "tree 165cdc170f7d4c836212adbc28ca4bb493e00b61\nparent ef436d2bd755480d684da31f0b209167c5c5927a\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1486277703 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498379388 +0200\n\nPow: Remove fCheckPOW from CheckBlockHeader\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/990716f1fd77809ee0f7f1cfadaa2d38e643a07f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/990716f1fd77809ee0f7f1cfadaa2d38e643a07f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/990716f1fd77809ee0f7f1cfadaa2d38e643a07f/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef436d2bd755480d684da31f0b209167c5c5927a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef436d2bd755480d684da31f0b209167c5c5927a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef436d2bd755480d684da31f0b209167c5c5927a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "55e8d842ad845df66a60a77692b9e920b6318e00",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/990716f1fd77809ee0f7f1cfadaa2d38e643a07f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/990716f1fd77809ee0f7f1cfadaa2d38e643a07f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=990716f1fd77809ee0f7f1cfadaa2d38e643a07f",
        "patch": "@@ -2641,10 +2641,10 @@ static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos,\n     return true;\n }\n \n-static bool CheckBlockHeader(const CBlockHeader& block, const uint256& block_hash, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true)\n+static bool CheckBlockHeader(const CBlockHeader& block, const uint256& block_hash, CValidationState& state, const Consensus::Params& consensusParams)\n {\n     // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block_hash, block.nBits, consensusParams))\n+    if (!CheckProofOfWork(block_hash, block.nBits, consensusParams))\n         return state.DoS(50, false, REJECT_INVALID, \"high-hash\", false, \"proof of work failed\");\n \n     return true;\n@@ -2659,7 +2659,7 @@ bool CheckBlock(const CBlock& block, const uint256& block_hash, CValidationState\n \n     // Check that the header is valid (particularly PoW).  This is mostly\n     // redundant with the call in AcceptBlockHeader.\n-    if (!CheckBlockHeader(block, block_hash, state, consensusParams, fCheckPOW))\n+    if (fCheckPOW && !CheckBlockHeader(block, block_hash, state, consensusParams))\n         return false;\n \n     // Check the merkle root."
      }
    ]
  },
  {
    "sha": "c52b065c8a6148dcae35d69506fa1d98e0c37747",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTJiMDY1YzhhNjE0OGRjYWUzNWQ2OTUwNmZhMWQ5OGUwYzM3NzQ3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-03T09:44:23Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T08:29:49Z"
      },
      "message": "Pow: Introduce GenerateProof: Encapsulate nNonce in tests with GenerateProof",
      "tree": {
        "sha": "2ec784e9192ebda2322131b85bcc24f8ae946e69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ec784e9192ebda2322131b85bcc24f8ae946e69"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c52b065c8a6148dcae35d69506fa1d98e0c37747",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT3R9AAoJEKT10UHAGgOHoYAQAKEq9LJtruYuRjmwfj/c5rIX\n0m3tC0xcm8wPOAcLObVZddCaOCjQOVO7SSP36mCDDjnvSVn88QkH/Kbd+RtC81wc\nlcPnIJx2H8ozg+NoCZtbLwlI3fxgACD3whtJwIE/CGbpMfW05SF8fRFGvwhVfzNh\n4qf5Jacr5yeeQJYe2pjb7MIob07dxsOmdmZ/DkfQ5XtYd6qzjz84YByTTWEN32/9\n7BY7ocBg28og/FeFRZ4K6utfTCA531THRkEEm4Q8UPOQQwHZb3XDhJitYM1Uw/gy\nYOQ+rVajXZknD1UZPL7bTXJ7vhv17vRH+ZJYKOuSZxykkOtjFOi7FguCvXl/qU3H\nL1UTGJpFGxfbF5Py5AKpc1I6MCrWT8RohJbA66Sy4iBVexRwdJqCy46qgTm8jipc\ny09qLSE9unlx0t8K8ZESEK9PzQdYNcnpFUpmYHgpYLGdNidv3/xDVozZSCnVP8dE\nDw+ZX7C+qjOBfmUlbWDIDDLqcGUX75e3iarWRYyboYNNFRGGiiTZEXkD0sNCGB4Q\n/7Vn9nDhQk8cd6l8PtMvz1akbfdvH1LiQuYBQtfcuXOT1229M2UZVm42AR4hvH5Z\nr9Ceq91DBmMmKpOKUw17gXsW4F0CmjrHAftaNEH+gETOwWAiHPaG599a9oUu+9Xc\nnHFaSiqhF17Ez457UvnW\n=EA0G\n-----END PGP SIGNATURE-----",
        "payload": "tree 2ec784e9192ebda2322131b85bcc24f8ae946e69\nparent 990716f1fd77809ee0f7f1cfadaa2d38e643a07f\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1486115063 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498379389 +0200\n\nPow: Introduce GenerateProof: Encapsulate nNonce in tests with GenerateProof\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c52b065c8a6148dcae35d69506fa1d98e0c37747",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c52b065c8a6148dcae35d69506fa1d98e0c37747",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c52b065c8a6148dcae35d69506fa1d98e0c37747/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "990716f1fd77809ee0f7f1cfadaa2d38e643a07f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/990716f1fd77809ee0f7f1cfadaa2d38e643a07f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/990716f1fd77809ee0f7f1cfadaa2d38e643a07f"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "1ade219298ffcfcff88c4f27f7b28c52f39cd00d",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c52b065c8a6148dcae35d69506fa1d98e0c37747/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c52b065c8a6148dcae35d69506fa1d98e0c37747/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=c52b065c8a6148dcae35d69506fa1d98e0c37747",
        "patch": "@@ -101,3 +101,9 @@ bool MaybeGenerateProof(const Consensus::Params& params, CBlockHeader* pblock, u\n     }\n     return CheckProofOfWork(blockHash, pblock->nBits, params);\n }\n+\n+bool GenerateProof(const Consensus::Params& params, CBlockHeader* pblock)\n+{\n+    uint64_t nTries = 10000;\n+    return MaybeGenerateProof(params, pblock, nTries);\n+}"
      },
      {
        "sha": "b3bbcb00e1b383d48ef027e159bfe6ad967acdf7",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c52b065c8a6148dcae35d69506fa1d98e0c37747/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c52b065c8a6148dcae35d69506fa1d98e0c37747/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=c52b065c8a6148dcae35d69506fa1d98e0c37747",
        "patch": "@@ -20,5 +20,6 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n bool MaybeGenerateProof(const Consensus::Params& params, CBlockHeader* pblock, uint64_t& nTries);\n+bool GenerateProof(const Consensus::Params& params, CBlockHeader* pblock);\n \n #endif // BITCOIN_POW_H"
      },
      {
        "sha": "aaab9bfc50c2b0a5b7242a617642fd829d3aa2f7",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c52b065c8a6148dcae35d69506fa1d98e0c37747/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c52b065c8a6148dcae35d69506fa1d98e0c37747/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=c52b065c8a6148dcae35d69506fa1d98e0c37747",
        "patch": "@@ -47,7 +47,7 @@ static CBlock BuildBlockTestCase() {\n     bool mutated;\n     block.hashMerkleRoot = BlockMerkleRoot(block, &mutated);\n     assert(!mutated);\n-    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) ++block.nNonce;\n+    while (!GenerateProof(Params().GetConsensus(), &block));\n     return block;\n }\n \n@@ -289,7 +289,7 @@ BOOST_AUTO_TEST_CASE(EmptyBlockRoundTripTest)\n     bool mutated;\n     block.hashMerkleRoot = BlockMerkleRoot(block, &mutated);\n     assert(!mutated);\n-    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) ++block.nNonce;\n+    while (!GenerateProof(Params().GetConsensus(), &block));\n \n     // Test simple header round-trip with only coinbase\n     {"
      },
      {
        "sha": "277177428559b59b0bfcbce8cdf098671701a61a",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c52b065c8a6148dcae35d69506fa1d98e0c37747/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c52b065c8a6148dcae35d69506fa1d98e0c37747/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=c52b065c8a6148dcae35d69506fa1d98e0c37747",
        "patch": "@@ -126,7 +126,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     unsigned int extraNonce = 0;\n     IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n \n-    while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n+    while (!GenerateProof(chainparams.GetConsensus(), &block));\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n     ProcessNewBlock(chainparams, shared_pblock, shared_pblock->GetHash(), true, NULL);"
      }
    ]
  },
  {
    "sha": "da1ce302fcac7d8419a7164809e5669a3d28d73b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTFjZTMwMmZjYWM3ZDg0MTlhNzE2NDgwOWU1NjY5YTNkMjhkNzNi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-03-28T01:18:27Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T08:29:50Z"
      },
      "message": "SB: Introduce s/CheckBlockHeader/CheckProof/\n\nIntroduce rename CheckBlockHeader to CheckProof, move it to pow and\nwrap uses of CheckProofOfWork around it",
      "tree": {
        "sha": "b673832f73de75e1a85fb1de3cda574094fbd4bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b673832f73de75e1a85fb1de3cda574094fbd4bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da1ce302fcac7d8419a7164809e5669a3d28d73b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT3R+AAoJEKT10UHAGgOHFqsQAI42XO3ucZG3ytHWpXqjjaZU\ng61eJkxaDtZxu4U5gSu3sSXQoeUUcrZ26tZPLkFlNOitXGVrBUnDTz9vrZk5mm43\n3qq57Am7ZNbRZIEitU4d4EUS0x9fO3HjmVSFZQ88NvbwaudkM00uUll9C5xukGjp\najh8t62BwtEjlEFGfH94ou453o1QiKLZDIVIbHGPnYWdygLu2MFispHr2a3b9TjQ\nK/zjwi6m7byZmmX4Y14wZen+VMh1p6qN1rg557okt1J1FdOu+7tm/NfUp+y3tuDP\nThM5cp+g31fp9cde0RlWoRhu8xJDsJ6txQa6xonw6i1FI9/KP4DOtu+ioJinICG8\nD9LuyAmf16254hdyx3JLLUsanEA8S6i60CaGD4NxMrtnxw3ihri57GMI/nijdlHk\nw3IkaNwoA++18fvYdD4ShJCgsf45J8Pe8M5IbCn5R70bPdQWOJwgBXCv5qXg/wxL\nVEtONCJW4zcGp+HjM37GoTJCGSZiWLNfDp+VcxkR3L7b4UtpMS7y5K+DQ4KNROeS\nna7dkSbG+1CcTrDg236pnmLMY2M4A2xlDFbSeCN7CUONEMpLWtAqLXCeQpNK3RHk\nARP5vHHoV/3ZIt12dXNEiQzNa3vpL67EXACans16nfvNrPkLgjE92B4+ypajVisI\nx5cijICyaD15z4rz2Mrr\n=wDio\n-----END PGP SIGNATURE-----",
        "payload": "tree b673832f73de75e1a85fb1de3cda574094fbd4bd\nparent c52b065c8a6148dcae35d69506fa1d98e0c37747\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1490663907 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498379390 +0200\n\nSB: Introduce s/CheckBlockHeader/CheckProof/\n\nIntroduce rename CheckBlockHeader to CheckProof, move it to pow and\nwrap uses of CheckProofOfWork around it\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da1ce302fcac7d8419a7164809e5669a3d28d73b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da1ce302fcac7d8419a7164809e5669a3d28d73b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da1ce302fcac7d8419a7164809e5669a3d28d73b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c52b065c8a6148dcae35d69506fa1d98e0c37747",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c52b065c8a6148dcae35d69506fa1d98e0c37747",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c52b065c8a6148dcae35d69506fa1d98e0c37747"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 25,
      "deletions": 18
    },
    "files": [
      {
        "sha": "b58129a6ec26d008030270bb7d650f832ea31501",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da1ce302fcac7d8419a7164809e5669a3d28d73b/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da1ce302fcac7d8419a7164809e5669a3d28d73b/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=da1ce302fcac7d8419a7164809e5669a3d28d73b",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"arith_uint256.h\"\n #include \"chain.h\"\n+#include \"consensus/validation.h\"\n #include \"primitives/block.h\"\n #include \"uint256.h\"\n \n@@ -90,6 +91,15 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n     return true;\n }\n \n+bool CheckProof(const CBlockHeader& block, const uint256& block_hash, CValidationState& state, const Consensus::Params& consensusParams)\n+{\n+    // Check proof of work matches claimed amount\n+    if (!CheckProofOfWork(block_hash, block.nBits, consensusParams))\n+        return state.DoS(50, false, REJECT_INVALID, \"high-hash\", false, \"proof of work failed\");\n+\n+    return true;\n+}\n+\n bool MaybeGenerateProof(const Consensus::Params& params, CBlockHeader* pblock, uint64_t& nTries)\n {\n     static const int nInnerLoopCount = 0x10000;"
      },
      {
        "sha": "3ae12c08b8a953c5f23f2b3d8382e62a7434fed4",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da1ce302fcac7d8419a7164809e5669a3d28d73b/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da1ce302fcac7d8419a7164809e5669a3d28d73b/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=da1ce302fcac7d8419a7164809e5669a3d28d73b",
        "patch": "@@ -12,11 +12,13 @@\n \n class CBlockHeader;\n class CBlockIndex;\n+class CValidationState;\n class uint256;\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n \n+bool CheckProof(const CBlockHeader& block, const uint256& block_hash, CValidationState& state, const Consensus::Params& consensusParams);\n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n bool MaybeGenerateProof(const Consensus::Params& params, CBlockHeader* pblock, uint64_t& nTries);"
      },
      {
        "sha": "77aa52ccf19f95e4f5e2af423ba78f124a4f629c",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da1ce302fcac7d8419a7164809e5669a3d28d73b/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da1ce302fcac7d8419a7164809e5669a3d28d73b/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=da1ce302fcac7d8419a7164809e5669a3d28d73b",
        "patch": "@@ -6,6 +6,7 @@\n #include \"txdb.h\"\n \n #include \"chainparams.h\"\n+#include \"consensus/validation.h\"\n #include \"hash.h\"\n #include \"pow.h\"\n #include \"uint256.h\"\n@@ -239,10 +240,12 @@ bool CBlockTreeDB::LoadBlockIndexGuts(std::function<CBlockIndex*(const uint256&)\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n \n+                CValidationState state; // TODO use FormatStateMessage from here\n+                CBlockHeader block = pindexNew->GetBlockHeader(); // FIX inefficient\n                 const uint256 block_hash = pindexNew->GetBlockHash();\n-                if (!CheckProofOfWork(block_hash, pindexNew->nBits, consensusParams) &&\n+                if (!CheckProof(block, block_hash, state, consensusParams) &&\n                     block_hash != consensusParams.hashGenesisBlock) {\n-                    return error(\"%s: CheckProofOfWork: %s, %s\", __func__, block_hash.ToString(), pindexNew->ToString());\n+                    return error(\"%s: CheckProofOfWork: %s, %s:\", __func__, block_hash.ToString(), pindexNew->ToString());\n                 }\n                 pcursor->Next();\n             } else {"
      },
      {
        "sha": "b91065e6391f27c01b89d3d52922d0e652e8c685",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 16,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da1ce302fcac7d8419a7164809e5669a3d28d73b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da1ce302fcac7d8419a7164809e5669a3d28d73b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=da1ce302fcac7d8419a7164809e5669a3d28d73b",
        "patch": "@@ -944,11 +944,12 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus:\n     }\n \n     // Check the header\n+    CValidationState state;\n     const uint256 block_hash = block.GetHash();\n-    if (!CheckProofOfWork(block_hash, block.nBits, consensusParams) &&\n-        block_hash != consensusParams.hashGenesisBlock)\n-        return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n-\n+    if (!CheckProof(block, block_hash, state, consensusParams) &&\n+        block_hash != consensusParams.hashGenesisBlock) {\n+        return error(\"%s: Errors in block header at %s: \", __func__, pos.ToString(), FormatStateMessage(state));\n+    }\n     return true;\n }\n \n@@ -2641,15 +2642,6 @@ static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos,\n     return true;\n }\n \n-static bool CheckBlockHeader(const CBlockHeader& block, const uint256& block_hash, CValidationState& state, const Consensus::Params& consensusParams)\n-{\n-    // Check proof of work matches claimed amount\n-    if (!CheckProofOfWork(block_hash, block.nBits, consensusParams))\n-        return state.DoS(50, false, REJECT_INVALID, \"high-hash\", false, \"proof of work failed\");\n-\n-    return true;\n-}\n-\n bool CheckBlock(const CBlock& block, const uint256& block_hash, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     // These are checks that are independent of context.\n@@ -2659,7 +2651,7 @@ bool CheckBlock(const CBlock& block, const uint256& block_hash, CValidationState\n \n     // Check that the header is valid (particularly PoW).  This is mostly\n     // redundant with the call in AcceptBlockHeader.\n-    if (fCheckPOW && !CheckBlockHeader(block, block_hash, state, consensusParams))\n+    if (fCheckPOW && !CheckProof(block, block_hash, state, consensusParams))\n         return false;\n \n     // Check the merkle root.\n@@ -2921,8 +2913,8 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return true;\n         }\n \n-        if (!CheckBlockHeader(block, hash, state, chainparams.GetConsensus()))\n-            return error(\"%s: Consensus::CheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n+        if (!CheckProof(block, hash, state, chainparams.GetConsensus()))\n+            return error(\"%s: CheckProof: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n \n         // Get prev block index\n         CBlockIndex* pindexPrev = NULL;"
      }
    ]
  },
  {
    "sha": "dd23d4ecc60d8e90ec18b4ba7293d311e29a4a7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDIzZDRlY2M2MGQ4ZTkwZWMxOGI0YmE3MjkzZDMxMWUyOWE0YTdk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-03-28T03:05:53Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T08:29:51Z"
      },
      "message": "TODO: Doc: Pow: Performance hit",
      "tree": {
        "sha": "d840109ecaf2f18306e853403acb2ce1924d6a18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d840109ecaf2f18306e853403acb2ce1924d6a18"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd23d4ecc60d8e90ec18b4ba7293d311e29a4a7d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT3R/AAoJEKT10UHAGgOHkRgP/1RSSwODjzD9ym8S3guXqa8b\nu1J3uu5zxfLiq65Yfhb0EZCY1tPltCyoRrOczq9f2VFJKOqEQFJQSJjsLZVI9xti\nXL74++7o+AbCAobhMC1dtgCgr3jueci8ZAqMreuesvowSUKbajzUF7Uv9A8+lDVH\nXs6lcGGiVA9alF8kVvpcBTs480crNJXaHm6Ce6g9PAgO2+nXLTNdv2TgzqrUOC+i\n+aR2CWrdlcGEYOI8bPFgdbocXkEYX5rpaM8/Co+4Y9cyhP3Fm/NUalHEXzTGAMIR\npGyvmKgCFHQIfJyrIpe3B2nTUXkM6SN3sdKlLig7C+QumXVLSjAOPqn/6s8PpIij\nE9FKeMgl8HUJlT7EX9bJQeGi48GkFOpapk1ISL8wuIW/SdAQiAi+kBZxt6ybTppa\nvDfbFX+2bDorL2ELKljVhthAaD8J93z3e0+97ZZewcekb/8TPCRFioJXJ4Kd9Q3v\nZcCmPu2wu/dy0IuI/zyh318eBOxMAecWQWuitpl+NjOVUoyawtUULjejW/hCFy5Q\nli6KVqhXOHLrh6yORtf5VA8c81hVozvaUPzij7uXV+2WtXbdgU8S+SRlOr818BIU\nQb8Kt84RkUWzsZFOo7D8L3pB98gUUTkGtAdxOazjCwisyWZ0WncKJ+eHE0y3IT4o\n2C8XWUQnNEoOpw5RBhXH\n=EIEw\n-----END PGP SIGNATURE-----",
        "payload": "tree d840109ecaf2f18306e853403acb2ce1924d6a18\nparent da1ce302fcac7d8419a7164809e5669a3d28d73b\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1490670353 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498379391 +0200\n\nTODO: Doc: Pow: Performance hit\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd23d4ecc60d8e90ec18b4ba7293d311e29a4a7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd23d4ecc60d8e90ec18b4ba7293d311e29a4a7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd23d4ecc60d8e90ec18b4ba7293d311e29a4a7d/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da1ce302fcac7d8419a7164809e5669a3d28d73b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da1ce302fcac7d8419a7164809e5669a3d28d73b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da1ce302fcac7d8419a7164809e5669a3d28d73b"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4f7c3537b8054609728c98f8b9f3f877bdc23f84",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd23d4ecc60d8e90ec18b4ba7293d311e29a4a7d/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd23d4ecc60d8e90ec18b4ba7293d311e29a4a7d/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=dd23d4ecc60d8e90ec18b4ba7293d311e29a4a7d",
        "patch": "@@ -219,6 +219,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts(std::function<CBlockIndex*(const uint256&)\n     pcursor->Seek(std::make_pair(DB_BLOCK_INDEX, uint256()));\n \n     // Load mapBlockIndex\n+    CValidationState state; // Pow: Performance hit: pre-static-CheckProofOfWork...\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n         std::pair<char, uint256> key;"
      }
    ]
  },
  {
    "sha": "606676948637e27476b62d8daf7198a16d8b45c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDY2NzY5NDg2MzdlMjc0NzZiNjJkOGRhZjcxOThhMTZkOGI0NWM3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-03-28T01:38:26Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T08:29:53Z"
      },
      "message": "Make CheckProofOfWork static",
      "tree": {
        "sha": "f39b448a4f19bd3609f28dc26f902883e79d3e8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f39b448a4f19bd3609f28dc26f902883e79d3e8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/606676948637e27476b62d8daf7198a16d8b45c7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT3SBAAoJEKT10UHAGgOHrI4P/j1LvMnzYpuvqaQVniG+FtvA\ntk6f5/Az04wFXquEReH3Xh+degPxfH1y7/Bu/EGYJFGk84yAZKj3J6ADJAWBBXZf\nGtvoSQ4dwYy9onNa5VO2yrDn9oG29ZpHzSj5rjit8TixAriIy91UXJL/2N2Mj6xK\n0//PzrlM2jotoTjyjDnfGT/4fvk6G8Xrgtax5XKUuvwDxvGP3UcvWjfTfUC0qrhc\nqfaocjaH3iMMz4VK/42Q2Zzy5jETtltlpqBGymW8gG6KAGQJYU7Lt+bZXpzLWG/g\nu4C7uIsmh7kGzohN27/Dv1A9xacdu3xkiXPP4eoZTGs3pkxJ2MzzDNHcxBVugjv8\nvpmfidnwRrN+HDky3hX37QDGNZQVK+p3K65EZYIzSjjlns8YPcGk4H9EJq3sPRqN\nuAHb7d+GRBdCOcA0bDWHBxfI0tYrzvW7IJupDVcBNymtodhAd71RpcOYrPoqVgOL\nl9cMdCpGxUDowJnLp+Rm6VSJFvODLXgnrv9qu14kETxBdfIyw87jUQzX/iSa598r\npypnjnFP5yR/IDwOtobVJ0HAajsYe93VJWeI4NzBKOkfuYFTihkOyqU71AhvGaUB\nfRty61Jn1VbaF8E4VHCutUTv04n/BMZ7+OrBqGN4EGqrm4sy+FrN3NAkkIyzaf8B\nbhkRmc+zFJrZ9k7leQC6\n=0/Ld\n-----END PGP SIGNATURE-----",
        "payload": "tree f39b448a4f19bd3609f28dc26f902883e79d3e8b\nparent dd23d4ecc60d8e90ec18b4ba7293d311e29a4a7d\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1490665106 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498379393 +0200\n\nMake CheckProofOfWork static\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/606676948637e27476b62d8daf7198a16d8b45c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/606676948637e27476b62d8daf7198a16d8b45c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/606676948637e27476b62d8daf7198a16d8b45c7/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd23d4ecc60d8e90ec18b4ba7293d311e29a4a7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd23d4ecc60d8e90ec18b4ba7293d311e29a4a7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd23d4ecc60d8e90ec18b4ba7293d311e29a4a7d"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b64f15367517143a9d952895b93a64adf0ac3828",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/606676948637e27476b62d8daf7198a16d8b45c7/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/606676948637e27476b62d8daf7198a16d8b45c7/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=606676948637e27476b62d8daf7198a16d8b45c7",
        "patch": "@@ -72,7 +72,8 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n     return bnNew.GetCompact();\n }\n \n-bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n+/** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n+static bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n {\n     bool fNegative;\n     bool fOverflow;"
      },
      {
        "sha": "e7fa97c23c164fc54ee56502a0f23ec45e2ca9d5",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/606676948637e27476b62d8daf7198a16d8b45c7/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/606676948637e27476b62d8daf7198a16d8b45c7/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=606676948637e27476b62d8daf7198a16d8b45c7",
        "patch": "@@ -19,8 +19,6 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n \n bool CheckProof(const CBlockHeader& block, const uint256& block_hash, CValidationState& state, const Consensus::Params& consensusParams);\n-/** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n-bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n bool MaybeGenerateProof(const Consensus::Params& params, CBlockHeader* pblock, uint64_t& nTries);\n bool GenerateProof(const Consensus::Params& params, CBlockHeader* pblock);\n "
      }
    ]
  },
  {
    "sha": "b2daa68806f612f7829d58a2171af6c7a6a25989",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMmRhYTY4ODA2ZjYxMmY3ODI5ZDU4YTIxNzFhZjZjN2E2YTI1OTg5",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-15T03:59:49Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T08:29:54Z"
      },
      "message": "UnitTest: Script: Templated tests for generic signing",
      "tree": {
        "sha": "4f237816f6e149a15817f647333b5c463ec3da11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f237816f6e149a15817f647333b5c463ec3da11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2daa68806f612f7829d58a2171af6c7a6a25989",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT3SCAAoJEKT10UHAGgOH68kP/j1SgBgbvlm12Etl+2+n+Ql6\n4pHeX4TY9QhYQWkIwynynr0QkmoZiVxwp7N9zrbL8HYoTahKBYFgntzcFeHwciFh\npdDNvte3h+vqO1TD+dZ/pRfDDVP0LNm1xoy7ccJFBniAylsf2icnAze0VlBVlCbV\nA8Hhs+QN0bRiddo4MyObbWPQlT8WH1rG3jRz0Sv0cmBUAEIy/fiWnhbXJj+2+1Xr\nrWNHoU8aBCNVGcP9TDbE6ZHKymgBQ/OV2UiNaBEZ4ixMIvKNPRZ0RTNNZxE4eOjt\nH1Fc+tihgbrPXCcAC35ik9bPh6O9QVkdzddTp5/9RQiq8HTyDVnJdco2StCNjAol\nB69NR3WZ5OJiPsJqDuwiL+yuw+qPGwDJJEFeCuS/P20eG1wMHREVzT41XjcX4uy/\nveBAUwvVxr943etAv5U6iJCoHZN5AqHCEX9IUi+DiFD4hud6ieRgnPL9bOlFirh2\nJFL5PTUzc3CC93nZA+8aM6MOZs5fqerssHPvUgvSf+hsca21yvmtc+10tCbo7iYe\n1ElBgCOjSdZANPIrUP7vhdpGsP5ZtGPcPFRI8xtM08LVDzMd9+Jcrsv6cb5AD61m\nQcel1wNvsh9/qtjR+NRJ2ZTHGX+m8Ao9eDP1X4YjNB4LwXLld++R1X8T8flzE02P\nzW8hOgKCht/0vNBtRYbd\n=BWm+\n-----END PGP SIGNATURE-----",
        "payload": "tree 4f237816f6e149a15817f647333b5c463ec3da11\nparent 606676948637e27476b62d8daf7198a16d8b45c7\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1487131189 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498379394 +0200\n\nUnitTest: Script: Templated tests for generic signing\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2daa68806f612f7829d58a2171af6c7a6a25989",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2daa68806f612f7829d58a2171af6c7a6a25989",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2daa68806f612f7829d58a2171af6c7a6a25989/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "606676948637e27476b62d8daf7198a16d8b45c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/606676948637e27476b62d8daf7198a16d8b45c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/606676948637e27476b62d8daf7198a16d8b45c7"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 105,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6eca1df9fae7d6a6fe7aecf66cc6191e5c015dc3",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2daa68806f612f7829d58a2171af6c7a6a25989/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2daa68806f612f7829d58a2171af6c7a6a25989/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b2daa68806f612f7829d58a2171af6c7a6a25989",
        "patch": "@@ -131,6 +131,7 @@ BITCOIN_CORE_H = \\\n   rpc/server.h \\\n   rpc/register.h \\\n   scheduler.h \\\n+  script/generic.hpp \\\n   script/sigcache.h \\\n   script/sign.h \\\n   script/standard.h \\"
      },
      {
        "sha": "678cf275b117a47a2e29c965e5cd6e450d2a6a2b",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2daa68806f612f7829d58a2171af6c7a6a25989/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2daa68806f612f7829d58a2171af6c7a6a25989/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=b2daa68806f612f7829d58a2171af6c7a6a25989",
        "patch": "@@ -55,6 +55,7 @@ BITCOIN_TESTS =\\\n   test/netbase_tests.cpp \\\n   test/pmt_tests.cpp \\\n   test/policyestimator_tests.cpp \\\n+  test/generic_sign_tests.cpp \\\n   test/pow_tests.cpp \\\n   test/prevector_tests.cpp \\\n   test/raii_event_tests.cpp \\"
      },
      {
        "sha": "0c42d45d9d16409baacb9f9cdf9e06e8ebe273bc",
        "filename": "src/script/generic.hpp",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2daa68806f612f7829d58a2171af6c7a6a25989/src/script/generic.hpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2daa68806f612f7829d58a2171af6c7a6a25989/src/script/generic.hpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/generic.hpp?ref=b2daa68806f612f7829d58a2171af6c7a6a25989",
        "patch": "@@ -0,0 +1,48 @@\n+// Copyright (c) 2017-2017 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef H_BITCOIN_SCRIPT_GENERIC\n+#define H_BITCOIN_SCRIPT_GENERIC\n+\n+#include \"hash.h\"\n+#include \"interpreter.h\"\n+#include \"keystore.h\"\n+#include \"pubkey.h\"\n+#include \"sign.h\"\n+\n+class SimpleSignatureChecker : public BaseSignatureChecker\n+{\n+public:\n+    uint256 hash;\n+\n+    SimpleSignatureChecker(const uint256& hashIn) : hash(hashIn) {};\n+    bool CheckSig(const std::vector<unsigned char>& vchSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n+    {\n+        CPubKey pubkey(vchPubKey);\n+        if (!pubkey.IsValid())\n+            return false;\n+        if (vchSig.empty())\n+            return false;\n+        return pubkey.Verify(hash, vchSig);\n+    }\n+};\n+\n+class SimpleSignatureCreator : public BaseSignatureCreator\n+{\n+    SimpleSignatureChecker checker;\n+\n+public:\n+    SimpleSignatureCreator(const CKeyStore* keystoreIn, const uint256& hashIn) : BaseSignatureCreator(keystoreIn), checker(hashIn) {};\n+    virtual ~SimpleSignatureCreator() {};\n+    virtual const BaseSignatureChecker& Checker() const { return checker; }\n+    virtual bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const\n+    {\n+        CKey key;\n+        if (!keystore->GetKey(keyid, key))\n+            return false;\n+        return key.Sign(checker.hash, vchSig);\n+    }\n+};\n+\n+#endif // H_BITCOIN_SCRIPT_GENERIC"
      },
      {
        "sha": "3e9c5e97bdc5a9c91442a1cfeb23e21c523bb945",
        "filename": "src/test/generic_sign_tests.cpp",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2daa68806f612f7829d58a2171af6c7a6a25989/src/test/generic_sign_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2daa68806f612f7829d58a2171af6c7a6a25989/src/test/generic_sign_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/generic_sign_tests.cpp?ref=b2daa68806f612f7829d58a2171af6c7a6a25989",
        "patch": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2017-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"keystore.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"script/generic.hpp\"\n+#include \"script/sign.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// Make sure the templates compile and run by at least running a templated test\n+template<typename T>\n+void SingleSignerTemplateTest(unsigned int flags, const T& data)\n+{\n+    CBasicKeyStore keystore;\n+    SimpleSignatureCreator simpleSignatureCreator(&keystore, SerializeHash(data));\n+    std::vector<unsigned char> vchScriptSig;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey pubkey = key.GetPubKey();\n+    keystore.AddKeyPubKey(key, pubkey);\n+    const CScript scriptCode;\n+    SigVersion sigversion = SIGVERSION_WITNESS_V0;\n+    const std::vector<unsigned char> vchPubKey = ToByteVector(pubkey);   \n+\n+    BOOST_CHECK(simpleSignatureCreator.CreateSig(vchScriptSig, pubkey.GetID(), scriptCode, sigversion));\n+    BOOST_CHECK(simpleSignatureCreator.Checker().CheckSig(vchScriptSig, vchPubKey, scriptCode, sigversion));\n+}\n+\n+BOOST_AUTO_TEST_CASE(GenericSignTests)\n+{\n+    ECC_Start();\n+\n+    unsigned int flags = SCRIPT_VERIFY_NONE;\n+\n+    uint256 hash;\n+    COutPoint outPoint;\n+    CTxIn txIn;\n+    CTxOut txOut;\n+    CTransaction transaction;\n+    CBlockHeader header;\n+    CBlock block;\n+\n+    SingleSignerTemplateTest(flags, hash);\n+    SingleSignerTemplateTest(flags, outPoint);\n+    SingleSignerTemplateTest(flags, txIn);\n+    SingleSignerTemplateTest(flags, txOut);\n+    SingleSignerTemplateTest(flags, transaction);\n+    SingleSignerTemplateTest(flags, header);\n+    SingleSignerTemplateTest(flags, block);\n+\n+    ECC_Stop();\n+}"
      }
    ]
  },
  {
    "sha": "7cf562e2282ade164f8548f25f1050e666d49128",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2Y1NjJlMjI4MmFkZTE2NGY4NTQ4ZjI1ZjEwNTBlNjY2ZDQ5MTI4",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-16T17:22:41Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T08:29:55Z"
      },
      "message": "TODO: Testchains: Extend generic.hpp and test/generic_sign_tests.cpp",
      "tree": {
        "sha": "13afdfecc3eedfd0f0a270c9b8d1da0516974d27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13afdfecc3eedfd0f0a270c9b8d1da0516974d27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cf562e2282ade164f8548f25f1050e666d49128",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT3SDAAoJEKT10UHAGgOH8jcP/RhRD1MSI9n6nyPSOk4Wqi4E\nlLTaICC92iBmoCvWKyFUufNVy0zlNUFLP68k6Ue0Sq7mmTpyGRPga0bIO8/iIr5W\nNxhgxqToT6iIpWzXNC43YvUDRQopHI9/ri80J/iqT0UXPyFVLCdwozg7bBmWO65x\nQ/A4Bqgd75qtK7IEFE/X+I+NrFEiaUuJWDZruzRzjbrldafgVsOBRuR/EyUHlx+c\nK1av9ZXWwvDSwJ1Su6CKFnSEiuHieiifbBjnv/zCqJ2nDswk9uRjlKCLOCgGNBLj\nlqMG3jiZW0rvX6exfOCi0b2bbrCGBeBLKG/NJr6gjrdYRkkGfVVEmBKBG5yvs1eR\nqAdoagYty4GGo5nURuvYfhTrbc555W3gRVug4u46+fR5XmeepUYPl3wNENto6a1D\nKUWFVjse5gnlPoz+wgwekzq6KUlHxuw6A710M9jRcZT2nLIocDJX2Lv3nb5txjdB\n0/6SJh0Qapq45gNZvLKZFvsctqE0vUEXDAnXHc/XBQgm5RVrhuhMLsy6UAF4oLtq\nMfUEiX/2yGKqeAgqcF2LbJX7nW3LDoWfYfZvSuPDFVY4zka+hIUA5Aaq6O0l4gUC\nRC719bHzwVZRnL7kS55WpfaKflFNJX8/bPQ6nfkYUKaMPVtF4/O50jN0AUPbycx6\ng9hmvrwN+2VCxLw5vUqe\n=a1nL\n-----END PGP SIGNATURE-----",
        "payload": "tree 13afdfecc3eedfd0f0a270c9b8d1da0516974d27\nparent b2daa68806f612f7829d58a2171af6c7a6a25989\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1487265761 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498379395 +0200\n\nTODO: Testchains: Extend generic.hpp and test/generic_sign_tests.cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cf562e2282ade164f8548f25f1050e666d49128",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cf562e2282ade164f8548f25f1050e666d49128",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cf562e2282ade164f8548f25f1050e666d49128/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2daa68806f612f7829d58a2171af6c7a6a25989",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2daa68806f612f7829d58a2171af6c7a6a25989",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2daa68806f612f7829d58a2171af6c7a6a25989"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 31,
      "deletions": 0
    },
    "files": [
      {
        "sha": "56ca110b9b833464cd9712111b1daf50e19d07a3",
        "filename": "src/script/generic.hpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cf562e2282ade164f8548f25f1050e666d49128/src/script/generic.hpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cf562e2282ade164f8548f25f1050e666d49128/src/script/generic.hpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/generic.hpp?ref=7cf562e2282ade164f8548f25f1050e666d49128",
        "patch": "@@ -45,4 +45,22 @@ class SimpleSignatureCreator : public BaseSignatureCreator\n     }\n };\n \n+template<typename T>\n+bool GenericVerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const T& data)\n+{\n+    return VerifyScript(scriptSig, scriptPubKey, NULL, flags, SimpleSignatureChecker(SerializeHash(data)));\n+}\n+\n+template<typename T>\n+bool GenericSignScript(const CKeyStore& keystore, const T& data, const CScript& scriptPubKey, SignatureData& scriptSig)\n+{\n+    return ProduceSignature(SimpleSignatureCreator(&keystore, SerializeHash(data)), scriptPubKey, scriptSig);\n+}\n+\n+template<typename T>\n+SignatureData GenericCombineSignatures(const CScript& scriptPubKey, const T& data, const SignatureData& scriptSig1, const SignatureData& scriptSig2)\n+{\n+    return CombineSignatures(scriptPubKey, SimpleSignatureChecker(SerializeHash(data)), scriptSig1, scriptSig2);\n+}\n+\n #endif // H_BITCOIN_SCRIPT_GENERIC"
      },
      {
        "sha": "aaa077cbb4b87ed24e1276f317286c1d0831add4",
        "filename": "src/test/generic_sign_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cf562e2282ade164f8548f25f1050e666d49128/src/test/generic_sign_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cf562e2282ade164f8548f25f1050e666d49128/src/test/generic_sign_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/generic_sign_tests.cpp?ref=7cf562e2282ade164f8548f25f1050e666d49128",
        "patch": "@@ -14,7 +14,17 @@\n template<typename T>\n void SingleSignerTemplateTest(unsigned int flags, const T& data)\n {\n+    CScript scriptSig;\n+    CScript scriptPubKey;\n     CBasicKeyStore keystore;\n+    SignatureData scriptSigData;\n+    SignatureData scriptSig1;\n+    SignatureData scriptSig2;\n+\n+    SignatureData scriptExpected = GenericCombineSignatures(scriptPubKey, data, scriptSig1, scriptSig2);\n+    BOOST_CHECK(!GenericSignScript(keystore, data, scriptPubKey, scriptSigData));\n+    BOOST_CHECK(!GenericVerifyScript(scriptSig, scriptPubKey, flags, data));  \n+\n     SimpleSignatureCreator simpleSignatureCreator(&keystore, SerializeHash(data));\n     std::vector<unsigned char> vchScriptSig;\n     CKey key;\n@@ -27,6 +37,9 @@ void SingleSignerTemplateTest(unsigned int flags, const T& data)\n \n     BOOST_CHECK(simpleSignatureCreator.CreateSig(vchScriptSig, pubkey.GetID(), scriptCode, sigversion));\n     BOOST_CHECK(simpleSignatureCreator.Checker().CheckSig(vchScriptSig, vchPubKey, scriptCode, sigversion));\n+\n+    // TODO BOOST_CHECK(GenericSignScript(keystore, data, scriptPubKey, scriptSigData));\n+    // TODO BOOST_CHECK(GenericVerifyScript(scriptSigData.scriptSig, scriptPubKey, flags, data));\n }\n \n BOOST_AUTO_TEST_CASE(GenericSignTests)"
      }
    ]
  },
  {
    "sha": "874f3e144bcebd974bd9a636bc4a0ea1f506b07c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzRmM2UxNDRiY2ViZDk3NGJkOWE2MzZiYzRhMGVhMWY1MDZiMDdj",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-15T00:43:28Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T08:29:56Z"
      },
      "message": "Testchains: Introduce ResetProof(CBlockHeader*)",
      "tree": {
        "sha": "9dfa7ba2289de059229e2eebec3699b1cb13c3a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9dfa7ba2289de059229e2eebec3699b1cb13c3a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/874f3e144bcebd974bd9a636bc4a0ea1f506b07c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT3SEAAoJEKT10UHAGgOHDlAP/jSGJoLON/NEP//BYX8YcXNc\nUz3r9JIHSX3XuydAotRW7X7T1BHf9sIoSDZQebyWYI8i4CLrQgUfOvmCnyrfhnu9\ntM6B0iVxrUbdSMRnp3wP1Mnw5pnMEyP01OG1Wpx2S9Kj5VYo79JwNs6nnIVDRR5M\nMlc7ygJKPCbcpz1n82C/92wf/JNtVdErDBN+USHn6PzkKSyIH4iPTU38njS0G5Oo\nKuNHRJVOA50I8/uHROCY5m0WPsIynFJFf3HiieZpvElpKojHqPb/lc/aKQ374d13\nyKXuomqwYh4d8oi/rtq4dLs/Rin48VUPZA/Nkg0trBlhDh1kd8SnewYL6+HsTmoB\nkpQfnDN64lc/2g3x7nx4bbeeicVBAk1eSCQ4blGXpYOjpwjPc3rOi8RhaDhM+CPY\nPZ7DMBn1BskZNakcTCw8ct/F7NOm67SjaJWehHr/hef49YK51szXLbVqxbT/erI3\nxCBm/gO3wtznDHMJ6G0aj7qnb4hAz/LABOD5rOsYKxhydH78VSIB2P0YVa0A2KTt\n/18FaBERo/hOOEAG7cvkAoEjpBwcJihPetPPY7Std51FoszdryTKqweJAWzjkpHJ\nXdmRc04SwXGWcvgNZWoCdzyv+4NPWpSG8y0wOshUGMKOmR38KYKE3GfrVA4Ug2XT\nBn6zM195Fpbn2Jp80VWB\n=7g5U\n-----END PGP SIGNATURE-----",
        "payload": "tree 9dfa7ba2289de059229e2eebec3699b1cb13c3a6\nparent 7cf562e2282ade164f8548f25f1050e666d49128\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1487119408 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498379396 +0200\n\nTestchains: Introduce ResetProof(CBlockHeader*)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/874f3e144bcebd974bd9a636bc4a0ea1f506b07c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/874f3e144bcebd974bd9a636bc4a0ea1f506b07c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/874f3e144bcebd974bd9a636bc4a0ea1f506b07c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cf562e2282ade164f8548f25f1050e666d49128",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cf562e2282ade164f8548f25f1050e666d49128",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cf562e2282ade164f8548f25f1050e666d49128"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cef80751accc34a0163911c4fcd34b05e2c7ce2c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/874f3e144bcebd974bd9a636bc4a0ea1f506b07c/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/874f3e144bcebd974bd9a636bc4a0ea1f506b07c/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=874f3e144bcebd974bd9a636bc4a0ea1f506b07c",
        "patch": "@@ -197,7 +197,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n     UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n     pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());\n-    pblock->nNonce         = 0;\n+    ResetProof(pblock);\n     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n \n     CValidationState state;"
      },
      {
        "sha": "6779c5fb5d6ba9762223570c173a3a00e9137477",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/874f3e144bcebd974bd9a636bc4a0ea1f506b07c/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/874f3e144bcebd974bd9a636bc4a0ea1f506b07c/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=874f3e144bcebd974bd9a636bc4a0ea1f506b07c",
        "patch": "@@ -118,3 +118,8 @@ bool GenerateProof(const Consensus::Params& params, CBlockHeader* pblock)\n     uint64_t nTries = 10000;\n     return MaybeGenerateProof(params, pblock, nTries);\n }\n+\n+void ResetProof(CBlockHeader* pblock)\n+{\n+    pblock->nNonce = 0;\n+}"
      },
      {
        "sha": "361c43d88b5c18067eb1c030a33a5b4baaaabe02",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/874f3e144bcebd974bd9a636bc4a0ea1f506b07c/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/874f3e144bcebd974bd9a636bc4a0ea1f506b07c/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=874f3e144bcebd974bd9a636bc4a0ea1f506b07c",
        "patch": "@@ -21,5 +21,6 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n bool CheckProof(const CBlockHeader& block, const uint256& block_hash, CValidationState& state, const Consensus::Params& consensusParams);\n bool MaybeGenerateProof(const Consensus::Params& params, CBlockHeader* pblock, uint64_t& nTries);\n bool GenerateProof(const Consensus::Params& params, CBlockHeader* pblock);\n+void ResetProof(CBlockHeader* pblock);\n \n #endif // BITCOIN_POW_H"
      },
      {
        "sha": "6763e4e1e2d7e6b9e3e61741d94c8363f56714e4",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/874f3e144bcebd974bd9a636bc4a0ea1f506b07c/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/874f3e144bcebd974bd9a636bc4a0ea1f506b07c/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=874f3e144bcebd974bd9a636bc4a0ea1f506b07c",
        "patch": "@@ -553,7 +553,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n \n     // Update nTime\n     UpdateTime(pblock, consensusParams, pindexPrev);\n-    pblock->nNonce = 0;\n+    ResetProof(pblock);\n \n     // NOTE: If at some point we support pre-segwit miners post-segwit-activation, this needs to take segwit support into consideration\n     const bool fPreSegWit = (THRESHOLD_ACTIVE != VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache));"
      }
    ]
  },
  {
    "sha": "ad95b8babe741a7cb6f03eed8bea49ac8b9b3181",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDk1YjhiYWJlNzQxYTdjYjZmMDNlZWQ4YmVhNDlhYzhiOWIzMTgx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-03T06:21:03Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T08:29:57Z"
      },
      "message": "Testchains: Introduce blocksignScript chainparam",
      "tree": {
        "sha": "5a223291fef9b517ece6eb43e3974ff857ed314f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a223291fef9b517ece6eb43e3974ff857ed314f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad95b8babe741a7cb6f03eed8bea49ac8b9b3181",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT3SFAAoJEKT10UHAGgOHZOoQAISUMCJZyDkIoi+Crmf2tilF\nWExkhVONyCXZY+pfhdtxS0Vd4xnFi9cUpjkYPD3yGHtk6BzHUXTFBFPyCDHtFctR\np1yZ52h/NL0ouqUlwTCJ4HpvnEA+2zuXjwoRbQ5DYZQi5oV96poylQHP/wPZHbMC\nd91iaXLLcBqWGr+wjaYokXtPbMPHLq57/nNvqb5xHT41NZLzta5yLlnDXxQ9bWEH\ny01nU0Adtf79dNb+AOpNjVEPXTdGHdy9do/89dsJWBACHQOofHMcCgc2XJda/bnx\n/777JqXN0af9wtxKFwPUOFQeKggf6Mk3Tsdy2iiWeNvOIjvcsfDd62amakN7JxDf\npU/9rYBdqNRRLSsZ2PHTzO5ARysqswBj//VqLsZGdk5db0g3jlE02gdbYYqsp+Up\nyr1WxEYe4cZvxzYfvoWuvFtVNY9Kpn4YqN0ic0HjAb1xfEDH9yuiUryWDW8264Y9\nh8l350DMSXH+FfSd6ufFe22GFVO5zCEfN2S8aHLCDpt0tHjp7WZiJrr1Dbt5vKFf\n3CiJaoXcRQ5FGNa1rOnuW3VZLE4hykWtnWMUHNF653vNO6ev+3w1IH0q3Yykdfd6\nu0kLK/5hKOJw6UnN5iV9NZQaxk55Qve45caMqT6E6lkJx69w+C6/0nh3+qKgP72A\nVXNAmZhVoLQ55sTcrdR2\n=TqWy\n-----END PGP SIGNATURE-----",
        "payload": "tree 5a223291fef9b517ece6eb43e3974ff857ed314f\nparent 874f3e144bcebd974bd9a636bc4a0ea1f506b07c\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1486102863 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498379397 +0200\n\nTestchains: Introduce blocksignScript chainparam\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad95b8babe741a7cb6f03eed8bea49ac8b9b3181",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad95b8babe741a7cb6f03eed8bea49ac8b9b3181",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad95b8babe741a7cb6f03eed8bea49ac8b9b3181/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "874f3e144bcebd974bd9a636bc4a0ea1f506b07c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/874f3e144bcebd974bd9a636bc4a0ea1f506b07c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/874f3e144bcebd974bd9a636bc4a0ea1f506b07c"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5dc81cc364f00a5e6ecbedaf9fd0bb1e35b5cdeb",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad95b8babe741a7cb6f03eed8bea49ac8b9b3181/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad95b8babe741a7cb6f03eed8bea49ac8b9b3181/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=ad95b8babe741a7cb6f03eed8bea49ac8b9b3181",
        "patch": "@@ -84,6 +84,8 @@ class CMainParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;\n+        // Anything but an empty script means replacing pow with block signing\n+        consensus.blocksignScript = CScript();\n         consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n@@ -188,6 +190,7 @@ class CTestNetParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = false;\n+        consensus.blocksignScript = CScript();\n         consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n@@ -276,6 +279,7 @@ class CRegTestParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = true;\n+        consensus.blocksignScript = CScript();\n         consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n@@ -333,6 +337,15 @@ class CRegTestParams : public CChainParams {\n     }\n };\n \n+static CScript StrHexToScript(std::string strScript)\n+{\n+    if (!strScript.empty()) {\n+        const std::vector<unsigned char> scriptData = ParseHex(strScript);\n+        return CScript(scriptData.begin(), scriptData.end());\n+    }\n+    return CScript(OP_TRUE);\n+}\n+\n /**\n  * Custom params for testing.\n  */\n@@ -358,6 +371,12 @@ class CCustomParams : public CChainParams {\n         // By default assume that the signatures in ancestors of this block are valid.\n         consensus.defaultAssumeValid = uint256S(args.GetArg(\"-con_defaultassumevalid\", \"0x00\"));\n \n+        const std::string blocksignscriptStr = args.GetArg(\"-con_blocksignscript\", \"\");\n+        if (blocksignscriptStr == \"\")\n+            consensus.blocksignScript = CScript();\n+        else\n+            consensus.blocksignScript = StrHexToScript(blocksignscriptStr);\n+\n         nDefaultPort = args.GetArg(\"-ndefaultport\", 18444);\n         nPruneAfterHeight = args.GetArg(\"-npruneafterheight\", 1000);\n         fDefaultConsistencyChecks = args.GetBoolArg(\"-fdefaultconsistencychecks\", true);"
      },
      {
        "sha": "a241f016ffa4ec2dc32abc29c633f323fdd31420",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad95b8babe741a7cb6f03eed8bea49ac8b9b3181/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad95b8babe741a7cb6f03eed8bea49ac8b9b3181/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=ad95b8babe741a7cb6f03eed8bea49ac8b9b3181",
        "patch": "@@ -26,6 +26,7 @@ void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n         strUsage += HelpMessageGroup(_(\"Custom chain selection options (only for -chain=custom):\"));\n         strUsage += HelpMessageOpt(\"-chainconf=<file>\", strprintf(_(\"Specify configuration file for chain parameters (default: %s). All custom chain arguments except this one must be configured using this file.\"), CHAINPARAMS_DEFAULT_CONF_FILE));\n         strUsage += HelpMessageOpt(\"-chainpetname=<name>\", _(\"Alternative name for custom chain (default: custom). This changes the genesis block.\"));\n+        strUsage += HelpMessageOpt(\"-con_signblockscript=<hexScript>\", _(\"Specify the scriptPubKey for block signing: (default: OP_TRUE))\"));\n     }\n }\n "
      },
      {
        "sha": "a6c56c1351de9d38ec6c9d70e34253aaac8c301d",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad95b8babe741a7cb6f03eed8bea49ac8b9b3181/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad95b8babe741a7cb6f03eed8bea49ac8b9b3181/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=ad95b8babe741a7cb6f03eed8bea49ac8b9b3181",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_CONSENSUS_PARAMS_H\n #define BITCOIN_CONSENSUS_PARAMS_H\n \n+#include \"script/script.h\"\n #include \"uint256.h\"\n #include <map>\n #include <string>\n@@ -63,6 +64,7 @@ struct Params {\n     int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan / nPowTargetSpacing; }\n     uint256 nMinimumChainWork;\n     uint256 defaultAssumeValid;\n+    CScript blocksignScript;\n };\n } // namespace Consensus\n "
      }
    ]
  },
  {
    "sha": "3d75c282c1f4cd5cfdd838e4d9da4dc382e1a8d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDc1YzI4MmMxZjRjZDVjZmRkODM4ZTRkOWRhNGRjMzgyZTFhOGQx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-03T06:59:37Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T08:29:58Z"
      },
      "message": "Testchains: Introduce attribute blockScript in CBlockHeader and CBlockIndex",
      "tree": {
        "sha": "5ccdc1bd70998e6a86fcfc96562f1aff443f33d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ccdc1bd70998e6a86fcfc96562f1aff443f33d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d75c282c1f4cd5cfdd838e4d9da4dc382e1a8d1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT3SGAAoJEKT10UHAGgOHN+8P/0kXPIsfYD6Cksr5Fdn6PBRX\nwMk1P+euVdtOSMCEo/0/nwHy1Yex5Qi00zfcVoFB1EKp3R5+AdjptURByVh0PNjk\nIGu/P5Tzk+DayIKnBQX3WjzOLNGTzaCNnvCuL49VC/+Y3XksonAXlNsEmDJU4rwj\nrU7KV9VqYMVJRL9I1Vzz7wif70jnBbfc+FnX7pnigG4huDZM7xHz1T1EMjuxpBeB\ne0pdzv0CIZj6npQvF7bB480j4P6dFb+Nutg1uBwjuX2a9KwBO79owkabuiKiH0bo\niI2tCKrKdmB5MYtcFNryD8IkQMf/w097VsMb8XSLj867fINY1obgskHf0py9ETgv\nyz+pgviogSst24HGrjyKPWgKGP9vN6GRNMsuJkz0529h9sAsRd8pcDsQ5iuBNggO\nMk3T40q0WNewYSl7WB06LpVTFZHpgWodkH14d2GCqyqRBEjlwTxT5xJGSWVMGUZj\nXjOH8LV6sbs500/Sptep0A3lG7qWgxl40NKz5hk3U7LKVCqgY9TllK0bp+/0eDPS\njVpTCqj/I6x+UBaUcUpZCW7qjWdjvvSBQNQa43AbgN2QKrBrKP4IzmqZ5kTsJdu6\nhbrbsfPxEsdPLnAkzq2Fpboo5H8R0ln3v6l7SlNawkWabp441IuEVC1YjEzIhSL6\nLa+YcW0oB1q4kfaglNq1\n=nQad\n-----END PGP SIGNATURE-----",
        "payload": "tree 5ccdc1bd70998e6a86fcfc96562f1aff443f33d7\nparent ad95b8babe741a7cb6f03eed8bea49ac8b9b3181\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1486105177 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498379398 +0200\n\nTestchains: Introduce attribute blockScript in CBlockHeader and CBlockIndex\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d75c282c1f4cd5cfdd838e4d9da4dc382e1a8d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d75c282c1f4cd5cfdd838e4d9da4dc382e1a8d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d75c282c1f4cd5cfdd838e4d9da4dc382e1a8d1/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad95b8babe741a7cb6f03eed8bea49ac8b9b3181",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad95b8babe741a7cb6f03eed8bea49ac8b9b3181",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad95b8babe741a7cb6f03eed8bea49ac8b9b3181"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4ba0e44e3f914ed2466a1d7326f50df4ef9dbfd7",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d75c282c1f4cd5cfdd838e4d9da4dc382e1a8d1/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d75c282c1f4cd5cfdd838e4d9da4dc382e1a8d1/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=3d75c282c1f4cd5cfdd838e4d9da4dc382e1a8d1",
        "patch": "@@ -212,6 +212,7 @@ class CBlockIndex\n     unsigned int nTime;\n     unsigned int nBits;\n     unsigned int nNonce;\n+    CScript blockScript;\n \n     //! (memory only) Sequential id assigned to distinguish order in which blocks are received.\n     int32_t nSequenceId;\n@@ -240,6 +241,7 @@ class CBlockIndex\n         nTime          = 0;\n         nBits          = 0;\n         nNonce         = 0;\n+        blockScript = CScript();\n     }\n \n     CBlockIndex()\n@@ -256,6 +258,7 @@ class CBlockIndex\n         nTime          = block.nTime;\n         nBits          = block.nBits;\n         nNonce         = block.nNonce;\n+        blockScript    = block.blockScript;\n     }\n \n     CDiskBlockPos GetBlockPos() const {"
      },
      {
        "sha": "8cff641ac6c9d789209d109cf575927ea0e46331",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d75c282c1f4cd5cfdd838e4d9da4dc382e1a8d1/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d75c282c1f4cd5cfdd838e4d9da4dc382e1a8d1/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=3d75c282c1f4cd5cfdd838e4d9da4dc382e1a8d1",
        "patch": "@@ -27,6 +27,7 @@ class CBlockHeader\n     uint32_t nTime;\n     uint32_t nBits;\n     uint32_t nNonce;\n+    CScript blockScript;\n \n     CBlockHeader()\n     {\n@@ -53,6 +54,7 @@ class CBlockHeader\n         nTime = 0;\n         nBits = 0;\n         nNonce = 0;\n+        blockScript = CScript();\n     }\n \n     bool IsNull() const\n@@ -113,6 +115,7 @@ class CBlock : public CBlockHeader\n         block.nTime          = nTime;\n         block.nBits          = nBits;\n         block.nNonce         = nNonce;\n+        block.blockScript    = blockScript;\n         return block;\n     }\n "
      },
      {
        "sha": "d7e37cab0b98ceac666ce4204913cbb0ea64b62a",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d75c282c1f4cd5cfdd838e4d9da4dc382e1a8d1/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d75c282c1f4cd5cfdd838e4d9da4dc382e1a8d1/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=3d75c282c1f4cd5cfdd838e4d9da4dc382e1a8d1",
        "patch": "@@ -238,6 +238,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts(std::function<CBlockIndex*(const uint256&)\n                 pindexNew->nTime          = diskindex.nTime;\n                 pindexNew->nBits          = diskindex.nBits;\n                 pindexNew->nNonce         = diskindex.nNonce;\n+                pindexNew->blockScript    = diskindex.blockScript;\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n "
      }
    ]
  },
  {
    "sha": "e03a41a0c44bc1d89c729110ae517c27ce314fd0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDNhNDFhMGM0NGJjMWQ4OWM3MjkxMTBhZTUxN2MyN2NlMzE0ZmQw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-14T22:22:02Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T08:29:59Z"
      },
      "message": "ERROR: SB: Testchains: Pass const CKeyStore* to MaybeGenerateProof",
      "tree": {
        "sha": "a461f4241ad781a6272fbf196ea393b8c9174b81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a461f4241ad781a6272fbf196ea393b8c9174b81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e03a41a0c44bc1d89c729110ae517c27ce314fd0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT3SHAAoJEKT10UHAGgOH0fcP/RBAHps2K72wrKNVqRLjbBEe\nLyEQkOZFIEUGCI3CL1xHeH4V/JZQ9FQAZxrOt37qinoBJC+d19uZIeJh3fSun8e3\n7quzYuauE2gv1BQHWTrAMasjfPlyde4g8Htrn26gRw2MJCj/ZQ7qIlFiMBKVg5qP\nFEq1VO1YoOB2l9JPfA7ucYgnwSw68jFYKblTTEHVfmj43r6HQ3AvIi/s/RGKnw4N\n700fBAS6H/u/l8y3UDrBW9ywWTBpNZO0Oa5pxAM3++UzGyucxi22fmmfSGY4ELwf\nu8TArxLy3ID9TvGLjgST3a7YaKT4nG8NLz7zfgse6DmEJiGrHmM5itNADuXfkRne\nChEFAS/ae50QIQwbJOvBIGvtZOesgHHHXFuk3qwNJYB7RhfYA9FMcsnV7biXA/Au\nmLTnxAYtvKA7rLP8H42Rx5Ioyl1TfmPkNseLGSIznllB1mQgwN+PeoV9muXFKmXS\nFPK8e5lYq7ca8b4Q+Q2jnBqvRPhYgIYcBjIEJ2BALLz5TAhqC7d6f+FXIyBQXUAl\nNFVHfFSSmfg1rptCO0hiGtsjsV0S3aZRIqyVvy2GHrLXXDsOHwZ3TFo1VvRUvFVq\nkyqnBvJ0U2SP2CrzX09WEEdZRHAqmms9ygxAprXP8coppqPUmAnJ4Wcvb80oUYUR\n0WlMx9Sjr7++i9KQ8WUl\n=+Sp3\n-----END PGP SIGNATURE-----",
        "payload": "tree a461f4241ad781a6272fbf196ea393b8c9174b81\nparent 3d75c282c1f4cd5cfdd838e4d9da4dc382e1a8d1\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1487110922 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498379399 +0200\n\nERROR: SB: Testchains: Pass const CKeyStore* to MaybeGenerateProof\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e03a41a0c44bc1d89c729110ae517c27ce314fd0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e03a41a0c44bc1d89c729110ae517c27ce314fd0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e03a41a0c44bc1d89c729110ae517c27ce314fd0/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d75c282c1f4cd5cfdd838e4d9da4dc382e1a8d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d75c282c1f4cd5cfdd838e4d9da4dc382e1a8d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d75c282c1f4cd5cfdd838e4d9da4dc382e1a8d1"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 17,
      "deletions": 4
    },
    "files": [
      {
        "sha": "326fd9c1f1cc51184f47247addee3709a45bc89c",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e03a41a0c44bc1d89c729110ae517c27ce314fd0/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e03a41a0c44bc1d89c729110ae517c27ce314fd0/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=e03a41a0c44bc1d89c729110ae517c27ce314fd0",
        "patch": "@@ -8,6 +8,7 @@\n #include \"arith_uint256.h\"\n #include \"chain.h\"\n #include \"consensus/validation.h\"\n+#include \"keystore.h\"\n #include \"primitives/block.h\"\n #include \"uint256.h\"\n \n@@ -101,7 +102,7 @@ bool CheckProof(const CBlockHeader& block, const uint256& block_hash, CValidatio\n     return true;\n }\n \n-bool MaybeGenerateProof(const Consensus::Params& params, CBlockHeader* pblock, uint64_t& nTries)\n+bool MaybeGenerateProof(const Consensus::Params& params, CBlockHeader* pblock, const CKeyStore* pkeystore, uint64_t& nTries)\n {\n     static const int nInnerLoopCount = 0x10000;\n     uint256 blockHash = pblock->GetHash();\n@@ -116,7 +117,8 @@ bool MaybeGenerateProof(const Consensus::Params& params, CBlockHeader* pblock, u\n bool GenerateProof(const Consensus::Params& params, CBlockHeader* pblock)\n {\n     uint64_t nTries = 10000;\n-    return MaybeGenerateProof(params, pblock, nTries);\n+    CBasicKeyStore dummyKeystore;\n+    return MaybeGenerateProof(params, pblock, &dummyKeystore, nTries);\n }\n \n void ResetProof(CBlockHeader* pblock)"
      },
      {
        "sha": "353f778913c90819f12929555096cdc84a50438d",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e03a41a0c44bc1d89c729110ae517c27ce314fd0/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e03a41a0c44bc1d89c729110ae517c27ce314fd0/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=e03a41a0c44bc1d89c729110ae517c27ce314fd0",
        "patch": "@@ -12,14 +12,15 @@\n \n class CBlockHeader;\n class CBlockIndex;\n+class CKeyStore;\n class CValidationState;\n class uint256;\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n \n bool CheckProof(const CBlockHeader& block, const uint256& block_hash, CValidationState& state, const Consensus::Params& consensusParams);\n-bool MaybeGenerateProof(const Consensus::Params& params, CBlockHeader* pblock, uint64_t& nTries);\n+bool MaybeGenerateProof(const Consensus::Params& params, CBlockHeader* pblock, const CKeyStore* pkeystore, uint64_t& nTries);\n bool GenerateProof(const Consensus::Params& params, CBlockHeader* pblock);\n void ResetProof(CBlockHeader* pblock);\n "
      },
      {
        "sha": "44a2591384a8fb52fe968d032d0130a8ebb9b5d4",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e03a41a0c44bc1d89c729110ae517c27ce314fd0/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e03a41a0c44bc1d89c729110ae517c27ce314fd0/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=e03a41a0c44bc1d89c729110ae517c27ce314fd0",
        "patch": "@@ -23,6 +23,9 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n+#ifdef ENABLE_WALLET\n+#include \"wallet/wallet.h\"\n+#endif\n \n #include <memory>\n #include <stdint.h>\n@@ -95,6 +98,13 @@ UniValue getnetworkhashps(const JSONRPCRequest& request)\n \n UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)\n {\n+    // FIX TODO fix error, pwalletMain doesn't exist anymore\n+    // std::vector<CWalletRef> vpwallets\n+    CKeyStore* blocksign_keystore = nullptr;\n+#ifdef ENABLE_WALLET\n+    blocksign_keystore = pwalletMain;\n+#endif\n+\n     int nHeightEnd = 0;\n     int nHeight = 0;\n \n@@ -115,7 +125,7 @@ UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGen\n             LOCK(cs_main);\n             IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);\n         }\n-        if (!MaybeGenerateProof(Params().GetConsensus(), pblock, nMaxTries)) {\n+        if (!MaybeGenerateProof(Params().GetConsensus(), pblock, blocksign_keystore, nMaxTries)) {\n             if (nMaxTries == 0) {\n                 break;\n             } else {"
      }
    ]
  },
  {
    "sha": "e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDRlOGExNDczYjRjZmM5Y2NmOGQyNjhmMzQzYjNjOGU3ODNkM2Vh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-05T04:33:27Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T08:30:00Z"
      },
      "message": "SB: Feature: Testchains: Support block signed custom testchains",
      "tree": {
        "sha": "3cf06ae6d30c8e8891d7cbb0df436f96da4cb245",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cf06ae6d30c8e8891d7cbb0df436f96da4cb245"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT3SIAAoJEKT10UHAGgOHBwUP/0MpuawROGvHsQufKiJZGJ2w\nG528bIP6uVXolTL4eVBQ0AvFMYKneQjVq77q2GkgMyx8ZuKa9ZZIt4Wnwf9IKyfH\nTrKTN/a7VGCYhoUSNZVRqzc5CUSQ6Qy+Q9cpm/Iepz6S5bf1pDpNtCAe80gckCAK\nkIOjny6yLmaINE7qvrhfdklwuJ0xUB3mqUiIGKDo1kMiXYh3C9IiAvrsEKSBjvtV\n2YVIwPL4qco78FgVowe2o3W+ZBtTcJ3LYS+upFV8WGZlfTekhdpx1TUpWz0rgjaQ\nz9RNE8RTGCY/45tv8LAbD3XJH/2tphB2I7drtAU1paAOPEiNO+EixYRkuoR+exnt\nBhUHB+Tta5UNNCqLlyTcWlRfdtpewLWNVDuI3ZlO5oGUxjdOPMB3ARQRx4vZyqE3\nDfO312/kW5GTP8HKjoz90GCSKe01c7rQ11Loxe2WgwORmbZt5dW9eLDMGoKVeo/w\nVeAAeEy6dl4vnq1zTJS/DAPYR8NDAyAo0es5LEcn82drJA6HmsAKZOyftUIdrHNt\nJ/OkEiaoeojN8aLDsxAwX0ddU5kZiv4hObaxS129gIoMDoiViD55voawNmm4wc94\noSLqOCYBotYeyAGJxHZ1KwXztIK1IMFknVoC7DPpySQwBYGqX6RnLZEXATCK2W+e\niq70ooMN1BVhyaYYPdbC\n=dCcQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 3cf06ae6d30c8e8891d7cbb0df436f96da4cb245\nparent e03a41a0c44bc1d89c729110ae517c27ce314fd0\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1486269207 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498379400 +0200\n\nSB: Feature: Testchains: Support block signed custom testchains\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e03a41a0c44bc1d89c729110ae517c27ce314fd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e03a41a0c44bc1d89c729110ae517c27ce314fd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e03a41a0c44bc1d89c729110ae517c27ce314fd0"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 40,
      "deletions": 16
    },
    "files": [
      {
        "sha": "41f0a4052920b62b58e4463f4d68f19afc1caac3",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea",
        "patch": "@@ -197,7 +197,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n     UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n     pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());\n-    ResetProof(pblock);\n+    ResetProof(chainparams.GetConsensus(), pblock);\n     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n \n     CValidationState state;"
      },
      {
        "sha": "843d421e0cc7f44d37bae5880033bbd272388e80",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 13,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea",
        "patch": "@@ -10,8 +10,11 @@\n #include \"consensus/validation.h\"\n #include \"keystore.h\"\n #include \"primitives/block.h\"\n+#include \"script/generic.hpp\"\n #include \"uint256.h\"\n \n+#define BLOCK_SIGN_SCRIPT_FLAGS (SCRIPT_VERIFY_NONE) // TODO signblocks: complete\n+\n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {\n     assert(pindexLast != NULL);\n@@ -95,23 +98,40 @@ static bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::\n \n bool CheckProof(const CBlockHeader& block, const uint256& block_hash, CValidationState& state, const Consensus::Params& consensusParams)\n {\n-    // Check proof of work matches claimed amount\n-    if (!CheckProofOfWork(block_hash, block.nBits, consensusParams))\n-        return state.DoS(50, false, REJECT_INVALID, \"high-hash\", false, \"proof of work failed\");\n-\n+    if (consensusParams.blocksignScript != CScript()) {\n+        if (!GenericVerifyScript(block.blockScript, consensusParams.blocksignScript, BLOCK_SIGN_SCRIPT_FLAGS, block)) {\n+            return state.DoS(50, false, REJECT_INVALID, \"invalid-block-script\", false, \"proof of script failed\");\n+        }\n+    } else {\n+        // Check proof of work matches claimed amount\n+        if (!CheckProofOfWork(block_hash, block.nBits, consensusParams)) {\n+            return state.DoS(50, false, REJECT_INVALID, \"high-hash\", false, \"proof of work failed\");\n+        }\n+    }\n     return true;\n }\n \n bool MaybeGenerateProof(const Consensus::Params& params, CBlockHeader* pblock, const CKeyStore* pkeystore, uint64_t& nTries)\n {\n-    static const int nInnerLoopCount = 0x10000;\n-    uint256 blockHash = pblock->GetHash();\n-    while (nTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(blockHash, pblock->nBits, params)) {\n-        ++pblock->nNonce;\n-        blockHash = pblock->GetHash();\n-        --nTries;\n+    CValidationState state;\n+    uint256 block_hash = pblock->GetHash();\n+    if (params.blocksignScript == CScript()) {\n+        static const int nInnerLoopCount = 0x10000;\n+        while (nTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(block_hash, pblock->nBits, params)) {\n+            ++pblock->nNonce;\n+            --nTries;\n+            block_hash = pblock->GetHash();\n+        }\n+    } else {\n+        nTries = 0; // Only one try for blocksigning\n+        if (pkeystore) { // Don't do anything if there's no keystore\n+            SignatureData solution(pblock->blockScript);\n+            if (GenericSignScript(*pkeystore, *pblock, params.blocksignScript, solution)) {\n+                pblock->blockScript = solution.scriptSig;\n+            }\n+        }\n     }\n-    return CheckProofOfWork(blockHash, pblock->nBits, params);\n+    return CheckProof(*pblock, block_hash, state, params);\n }\n \n bool GenerateProof(const Consensus::Params& params, CBlockHeader* pblock)\n@@ -121,7 +141,11 @@ bool GenerateProof(const Consensus::Params& params, CBlockHeader* pblock)\n     return MaybeGenerateProof(params, pblock, &dummyKeystore, nTries);\n }\n \n-void ResetProof(CBlockHeader* pblock)\n+void ResetProof(const Consensus::Params& params, CBlockHeader* pblock)\n {\n-    pblock->nNonce = 0;\n+    if (params.blocksignScript == CScript()) {\n+        pblock->nNonce = 0;\n+    } else {\n+        pblock->blockScript = CScript();\n+    }\n }"
      },
      {
        "sha": "d9109e258a0e740ef072255ff494a7080bb46da9",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea",
        "patch": "@@ -22,6 +22,6 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n bool CheckProof(const CBlockHeader& block, const uint256& block_hash, CValidationState& state, const Consensus::Params& consensusParams);\n bool MaybeGenerateProof(const Consensus::Params& params, CBlockHeader* pblock, const CKeyStore* pkeystore, uint64_t& nTries);\n bool GenerateProof(const Consensus::Params& params, CBlockHeader* pblock);\n-void ResetProof(CBlockHeader* pblock);\n+void ResetProof(const Consensus::Params& params, CBlockHeader* pblock);\n \n #endif // BITCOIN_POW_H"
      },
      {
        "sha": "0dd556569279110e9cbe6fb1c8a3973a867f95d0",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea",
        "patch": "@@ -563,7 +563,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n \n     // Update nTime\n     UpdateTime(pblock, consensusParams, pindexPrev);\n-    ResetProof(pblock);\n+    ResetProof(consensusParams, pblock);\n \n     // NOTE: If at some point we support pre-segwit miners post-segwit-activation, this needs to take segwit support into consideration\n     const bool fPreSegWit = (THRESHOLD_ACTIVE != VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache));"
      }
    ]
  },
  {
    "sha": "1de5d81b6d01275d6b40d99ac59dad0b83578616",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZGU1ZDgxYjZkMDEyNzVkNmI0MGQ5OWFjNTlkYWQwYjgzNTc4NjE2",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-15T03:51:09Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T08:30:01Z"
      },
      "message": "TODO: pytest: A python test that fails for custom con_blocksignscript",
      "tree": {
        "sha": "f4a641f244cabb97b3de968a82e33cf8e4a38167",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4a641f244cabb97b3de968a82e33cf8e4a38167"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1de5d81b6d01275d6b40d99ac59dad0b83578616",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT3SJAAoJEKT10UHAGgOHeMAP/1dT6HujP6r+rY1U6fjjnBUW\ncOcU0R2fsCEkrxM7l/rqXQ+iboFl9UkujuiJfFO6Vu82xR9N1qox344QbnS9j4iy\nRm4L6/UAGfS6940kO7Us0e0ApyblYxAZJB5GuMtGNm0/LJB0/K+OVLnI301qPazJ\n+Cpcigm5FEXWeYAmk+/W3vPyqKpFhy+HUy9lM5D9jZOK3+VEKKb2odGW33cBIRDc\n9nizUV/r9VQabTxWXee717MtTh4Bq9Xpwxp6+YHFpgr8qxbxUHjOMOhb+mm/6fhy\nixy4igk2tBo7/8B/Hc3F9aESbTmUDfagMW5kK88++jjnYyFVV3SKWIU55hxBb2Bz\n0A5AfYZnSDB4W7iZAeH67yq13Ni+UkHjFawnnz8vmYGizXBCsvlEhOMbTToYnWQe\nX6joumxH6MIJQyv2cp7YyA3xLMhik/OY4rrdkV6zpgxENnrFlDArIiQwp0lkQFTX\nfBUOREOOGm2G0mQz8wG+2kXQr5rJu4u7Xyrw8IhTHVPg0lPuL7xuMzqAUMHAFuUw\nY8zMIZzALwYNv5rpoHfb6sxqHZ5pNKI+4KtM6FHb9WLfXeDFw7ulEbm8ZCotix1o\ni7Z4CQZ0OFQ7RLCDYAc/59Ra++h5vFtjdxkbD9jio5qmS0muP/6qcKOd0KFU4ojf\n6ORQlCjRMbPHmqH+dxo1\n=A42c\n-----END PGP SIGNATURE-----",
        "payload": "tree f4a641f244cabb97b3de968a82e33cf8e4a38167\nparent e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1487130669 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498379401 +0200\n\nTODO: pytest: A python test that fails for custom con_blocksignscript\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1de5d81b6d01275d6b40d99ac59dad0b83578616",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1de5d81b6d01275d6b40d99ac59dad0b83578616",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1de5d81b6d01275d6b40d99ac59dad0b83578616/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e04e8a1473b4cfc9ccf8d268f343b3c8e783d3ea"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 46,
      "deletions": 0
    },
    "files": [
      {
        "sha": "84c315d60cc3b4956823c2a13b100ecd90a85c93",
        "filename": "qa/rpc-tests/reindex-blocksign.py",
        "status": "added",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1de5d81b6d01275d6b40d99ac59dad0b83578616/qa/rpc-tests/reindex-blocksign.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1de5d81b6d01275d6b40d99ac59dad0b83578616/qa/rpc-tests/reindex-blocksign.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/reindex-blocksign.py?ref=1de5d81b6d01275d6b40d99ac59dad0b83578616",
        "patch": "@@ -0,0 +1,46 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test -reindex and -reindex-chainstate with CheckBlockIndex\n+#\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    start_nodes,\n+    stop_nodes,\n+    assert_equal,\n+)\n+import time\n+\n+class ReindexTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+\n+    def reindex(self, justchainstate=False):\n+        self.nodes[0].generate(3)\n+        blockcount = self.nodes[0].getblockcount()\n+        stop_nodes(self.nodes)\n+        extra_args = [[\"-debug\", \"-reindex-chainstate\" if justchainstate else \"-reindex\", \"-checkblockindex=1\"]]\n+        extra_args[0].append(\"-con_blocksignscript=51\")\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        while self.nodes[0].getblockcount() < blockcount:\n+            time.sleep(0.1)\n+        assert_equal(self.nodes[0].getblockcount(), blockcount)\n+        print(\"Success\")\n+\n+    def run_test(self):\n+        self.reindex(False)\n+        self.reindex(True)\n+        self.reindex(False)\n+        self.reindex(True)\n+\n+if __name__ == '__main__':\n+    ReindexTest().main()"
      }
    ]
  },
  {
    "sha": "86a614ecf89bb343acc73200529bd009edf72305",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmE2MTRlY2Y4OWJiMzQzYWNjNzMyMDA1MjliZDAwOWVkZjcyMzA1",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-15T04:41:38Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T08:30:03Z"
      },
      "message": "TODO: UnitTest: BlockSign: Test signed blocks functionality",
      "tree": {
        "sha": "aa4448f8cc44f60e447ed9c656b4660738a95259",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa4448f8cc44f60e447ed9c656b4660738a95259"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86a614ecf89bb343acc73200529bd009edf72305",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT3SLAAoJEKT10UHAGgOHjKMQAIhafFc1G1yD9NclT/rGkiIv\nL+vUQU9amnZW6yMAZ2iNBCatrCCZUdQWgzYjEj2TLK2Eeh/MA1Mol9tbnG2aEQtz\nTKLi+IFrggO7zM8T08Y7CHtK2Kr+/ACL5LkNI0QUZSw/1wLRTxs8gEgwtqUJabPV\nQBrNtm6tJAw41d9dkuOq5tw4dQvwCfxkAUdvq8U4s0f3SlHsiu87rIdkOHOUFwCW\n3cqsvIiaChJLZ59dBdBRAxV5yJcZ6NqduLgw4edQ/ec3xorLVtIbYiztAmymfIcq\nI4c5Xgj/laJEnD0lQPRmBaKS16JitfiCWfoUoamMwJVueYxsz71mK76lZeyjMwru\nMQdJaRGK7QQXeS8e+fR6eZoSQ2XCVU9YMc4Q6kR9xXwY+4hwMuwSotO9iw7TR7oD\nA2RxWGrE884j+tieUOGtMGb3hC94C6SJWZRq+AW8iqOjONeQk5p8TuEduoGEVy1Y\n9TePLfUbYHtEJp15XN5Yf5LRazYoZpRGX3eTD5fw1Ol0YnO/9eg//W1HbY7PFQNR\nTDo6eWgZykyiNfhmOTsmlz4cwsH9w3ikLPHI/hJjS7/YR+9UGOUzHrTVkKmud9kF\n83WVW460jgukVHQvxgqFIBe5ZbbgE+zOCONkWstkqSzIAPuAd2CTJzwFqf9DIAIT\n4vBkQVSD+bTcf5N+DBon\n=nFdE\n-----END PGP SIGNATURE-----",
        "payload": "tree aa4448f8cc44f60e447ed9c656b4660738a95259\nparent 1de5d81b6d01275d6b40d99ac59dad0b83578616\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1487133698 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498379403 +0200\n\nTODO: UnitTest: BlockSign: Test signed blocks functionality\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86a614ecf89bb343acc73200529bd009edf72305",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86a614ecf89bb343acc73200529bd009edf72305",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86a614ecf89bb343acc73200529bd009edf72305/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1de5d81b6d01275d6b40d99ac59dad0b83578616",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1de5d81b6d01275d6b40d99ac59dad0b83578616",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1de5d81b6d01275d6b40d99ac59dad0b83578616"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 32,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a58b240f8177672443d8ac0fd388c3299d828993",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86a614ecf89bb343acc73200529bd009edf72305/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86a614ecf89bb343acc73200529bd009edf72305/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=86a614ecf89bb343acc73200529bd009edf72305",
        "patch": "@@ -32,6 +32,7 @@ BITCOIN_TESTS =\\\n   test/base58_tests.cpp \\\n   test/base64_tests.cpp \\\n   test/bip32_tests.cpp \\\n+  test/block_sign_tests.cpp \\\n   test/blockencodings_tests.cpp \\\n   test/bloom_tests.cpp \\\n   test/bswap_tests.cpp \\"
      },
      {
        "sha": "d2d5b0a5713daf4d6b683c709dd416bd4f4d3402",
        "filename": "src/test/block_sign_tests.cpp",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86a614ecf89bb343acc73200529bd009edf72305/src/test/block_sign_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86a614ecf89bb343acc73200529bd009edf72305/src/test/block_sign_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/block_sign_tests.cpp?ref=86a614ecf89bb343acc73200529bd009edf72305",
        "patch": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2017-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"chainparams.h\"\n+#include \"keystore.h\"\n+#include \"pow.h\"\n+#include \"primitives/block.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+void SingleBlockSignerTest(const Consensus::Params& params, unsigned int flags, CBlockHeader& block)\n+{\n+    ResetProof(params, &block);\n+}\n+\n+BOOST_AUTO_TEST_CASE(BlockSignBasicTests)\n+{\n+    ECC_Start();\n+\n+    const std::unique_ptr<CChainParams> testParams = CreateChainParams(CBaseChainParams::CUSTOM);\n+    const Consensus::Params& conParams = testParams->GetConsensus();\n+    unsigned int flags = SCRIPT_VERIFY_NONE;\n+    CBlockHeader header;\n+    CBlock block;\n+\n+    SingleBlockSignerTest(conParams, flags, header);\n+    SingleBlockSignerTest(conParams, flags, block);\n+\n+    ECC_Stop();\n+}"
      }
    ]
  },
  {
    "sha": "61eebe2baefac4efeac964293e8aa119abe0eb4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWVlYmUyYmFlZmFjNGVmZWFjOTY0MjkzZThhYTExOWFiZTBlYjRj",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-03T01:49:32Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T08:30:04Z"
      },
      "message": "More untittests but mostly commented",
      "tree": {
        "sha": "db9025d1d944ef781108cf0d933461249efb13d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db9025d1d944ef781108cf0d933461249efb13d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61eebe2baefac4efeac964293e8aa119abe0eb4c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT3SMAAoJEKT10UHAGgOH4iAP/2qlx3y/SFYxnBANSHV6OEzi\nzRRGxSNWLOCwALAEFa8kG0PstTYRjCxvZD4nW9DPlvGhVfanFIxcEr4dvV4ZUjTy\n311QpkubiVBVQMDtx5gezcYc0QQB2pqsYqktYfdrAaC2Az7OYMZaXEoxhAUDiMhV\nvSN8WLq5zO/zyxzBBB17wmEtVNijnnPq2KpnaDKSO/SZxni8sdIcHjhDKRUtyIl3\ngUfqSXrTrB7+nSfEosCkWZ0Z0lFkNzOC8iNvglRUvo0TeWsGMuZ8X/tNQQbCs25L\nsgqcXSYBHd11w84/Fpw+7tPacBpPs2RCShHGV5LxR8KOt1UhXHjvFbQc+/8zDgJ/\nM8F5SngmS7IE6wAahBo6gpM/Cnp+HLw+q1nGt7uN0UJUFasP/1dbvJgMMMSaiVLM\nWRhKQkr93Nu712IUVKOGH9n+IfVuLD6XikUl1yHyYhObvNCbHCPkXqOgmm1g+WE9\nc1RzgGwW2ERGjaFpHagyztHmwdAto41JDfBPUfPC+uNfXDcoGGqkUoLffOfDeQqV\noRKlrCfMuhk5h/U1Rc/NRgUi/v38o9KmSvh9R3barkvMqlJq77UJ3u0h+/dl46ks\n24DEjyR9tFvS3HaQ4LOI0iRN2uJ6JamVCROYM+HdbXBGwopvwaCHN1jCdlzILuRV\noOnAc2X5UReNAAQV0Pp8\n=xYrX\n-----END PGP SIGNATURE-----",
        "payload": "tree db9025d1d944ef781108cf0d933461249efb13d9\nparent 86a614ecf89bb343acc73200529bd009edf72305\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1496454572 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498379404 +0200\n\nMore untittests but mostly commented\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61eebe2baefac4efeac964293e8aa119abe0eb4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61eebe2baefac4efeac964293e8aa119abe0eb4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61eebe2baefac4efeac964293e8aa119abe0eb4c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86a614ecf89bb343acc73200529bd009edf72305",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86a614ecf89bb343acc73200529bd009edf72305",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86a614ecf89bb343acc73200529bd009edf72305"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 87,
      "deletions": 6
    },
    "files": [
      {
        "sha": "afa0baca4e3d4b5146a098c8504fa45dc9441c0c",
        "filename": "src/test/block_sign_tests.cpp",
        "status": "modified",
        "additions": 87,
        "deletions": 6,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61eebe2baefac4efeac964293e8aa119abe0eb4c/src/test/block_sign_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61eebe2baefac4efeac964293e8aa119abe0eb4c/src/test/block_sign_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/block_sign_tests.cpp?ref=61eebe2baefac4efeac964293e8aa119abe0eb4c",
        "patch": "@@ -3,29 +3,110 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chainparams.h\"\n+#include \"consensus/validation.h\"\n+#include \"keystore.h\"\n #include \"keystore.h\"\n #include \"pow.h\"\n #include \"primitives/block.h\"\n+#include \"script/generic.hpp\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <boost/test/unit_test.hpp>\n \n+static bool SignMaybeGenerateProof(const Consensus::Params& params, CBlockHeader& block, const CKeyStore& keystore)\n+{\n+    uint64_t nTries = 1;\n+    return MaybeGenerateProof(params, &block, &keystore, nTries);\n+}\n+\n+static std::string SingleSignerScriptStrFromKey(const CKey& key)\n+{\n+    std::string strPubkey = HexStr(key.GetPubKey());\n+    CScript scriptPubKey = CScript() << ParseHex(strPubkey) << OP_CHECKSIG;\n+    std::string strScript = HexStr(scriptPubKey);\n+    // TOOLING: Uncomment to create params for a private chain with a single signer\n+    // BOOST_CHECK_EQUAL(\"-con_signblockscript\", strScript);\n+    // std::unique_ptr<CChainParams> chainparams = CChainParams::Factory(CBaseChainParams::CUSTOM);\n+    // BOOST_CHECK_EQUAL(\"importprivkey\", CBitcoinSecret(key, *chainparams).ToString());\n+    // BOOST_CHECK_EQUAL(\"pubkey_for_multisig\", strPubkey);\n+\n+    return strScript;\n+}\n+\n void SingleBlockSignerTest(const Consensus::Params& params, unsigned int flags, CBlockHeader& block)\n {\n     ResetProof(params, &block);\n+    // BOOST_CHECK(GenerateProof(params, &block));\n+    CValidationState state;\n+    // const uint256 block_hash = block.GetHash();\n+    // BOOST_CHECK(CheckProof(params, block, block_hash, state));\n }\n \n BOOST_AUTO_TEST_CASE(BlockSignBasicTests)\n {\n     ECC_Start();\n \n-    const std::unique_ptr<CChainParams> testParams = CreateChainParams(CBaseChainParams::CUSTOM);\n-    const Consensus::Params& conParams = testParams->GetConsensus();\n-    unsigned int flags = SCRIPT_VERIFY_NONE;\n     CBlockHeader header;\n-    CBlock block;\n+    CBlockHeader block;\n+    uint256 block_hash;\n+    CScript scriptSig;\n+    CScript scriptPubKey;\n+    unsigned int flags = SCRIPT_VERIFY_NONE;\n+    CBasicKeyStore keystore;\n+    SignatureData scriptSigData;\n+    SignatureData scriptSig1;\n+    SignatureData scriptSig2;\n+\n+    // Make sure that the generic templates compile for CBlockHeader\n+    SignatureData scriptExpected = GenericCombineSignatures(scriptPubKey, block, scriptSig1, scriptSig2);\n+    BOOST_CHECK(!GenericSignScript(keystore, block, scriptPubKey, scriptSigData));\n+    BOOST_CHECK(!GenericVerifyScript(scriptSig, scriptPubKey, flags, block));\n+\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_CHECK(key.IsCompressed());\n+    CPubKey pubkey = key.GetPubKey();\n+    keystore.AddKeyPubKey(key, pubkey);\n+    SigVersion sigversion = SIGVERSION_WITNESS_V0;\n+    const std::vector<unsigned char> vchPubKey = ToByteVector(pubkey);\n+    std::vector<unsigned char> vchScriptSig;\n+    SimpleSignatureCreator simpleSignatureCreator(&keystore, SerializeHash(block));\n+\n+    CScript scriptCode;\n+    BOOST_CHECK(simpleSignatureCreator.CreateSig(vchScriptSig, pubkey.GetID(), scriptCode, sigversion));\n+    BOOST_CHECK(simpleSignatureCreator.Checker().CheckSig(vchScriptSig, vchPubKey, scriptCode, sigversion));\n+\n+    scriptPubKey = CScript() << ToByteVector(key.GetPubKey()) << OP_CHECKSIG;\n+    // BOOST_CHECK(ProduceSignature(simpleSignatureCreator, scriptPubKey, scriptSigData));\n+    // BOOST_CHECK(VerifyScript(scriptSigData.scriptSig, scriptPubKey, NULL, flags, simpleSignatureCreator.Checker()));\n+\n+    // BOOST_CHECK(GenericSignScript(keystore, block, scriptPubKey, scriptSigData));\n+    // BOOST_CHECK(GenericVerifyScript(scriptSigData.scriptSig, scriptPubKey, flags, block));\n+\n+    // --------------\n+\n+    ArgsManager test_args;\n+    CValidationState state;\n+    std::unique_ptr<CChainParams> test_params;\n+\n+    // Create a key to sign\n+    key.MakeNewKey(true);\n+\n+    test_args.ForceSetArg(\"-con_blocksignscript\", SingleSignerScriptStrFromKey(key));\n+    test_params = CreateChainParams(CBaseChainParams::CUSTOM, test_args);\n+\n+    ResetProof(test_params->GetConsensus(), &block);\n+    // Things should fail with an empty unsigned block\n+    block_hash = block.GetHash();\n+    BOOST_CHECK(!CheckProof(block, block_hash, state, test_params->GetConsensus()));\n+    BOOST_CHECK(!SignMaybeGenerateProof(test_params->GetConsensus(), block, keystore));\n+\n+    keystore.AddKey(key);\n+    // BOOST_CHECK(SignMaybeGenerateProof(test_params->GetConsensus(), block, keystore));\n \n-    SingleBlockSignerTest(conParams, flags, header);\n-    SingleBlockSignerTest(conParams, flags, block);\n+    SingleBlockSignerTest(test_params->GetConsensus(), flags, header);\n+    SingleBlockSignerTest(test_params->GetConsensus(), flags, block);\n \n     ECC_Stop();\n }"
      }
    ]
  },
  {
    "sha": "2633f50f98a33c3c8e1b1da8fbe12c1d8b5d18a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjMzZjUwZjk4YTMzYzNjOGUxYjFkYThmYmUxMmMxZDhiNWQxOGE3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-05T06:35:39Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-25T08:30:05Z"
      },
      "message": "extra: Pow: Logs: Use CValidationState inside CheckProofOfWork",
      "tree": {
        "sha": "e3e8bbce24dfa2ca58f27554c4392be3272f7f31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3e8bbce24dfa2ca58f27554c4392be3272f7f31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2633f50f98a33c3c8e1b1da8fbe12c1d8b5d18a7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZT3SNAAoJEKT10UHAGgOHmQ8QAI+KbW1ILzfqEQLwNDETtYac\nuKEb0l3W8cuAvgEY3gDAycI3V0NxKzdOUbgN8lblrT7aEat3vHa0rsxfz766wvkA\ncfGVTAbFdJ30tp5Rp84Ot6R7tif2eh1fuuNJ6ED1xEtRbtecLC7Prkq2revPBBLj\nETM6PHtOjdW7uhp9nmYPoPrBIJX4TaY2A2R08a/FPgSbIz2FH6XMVt/HNAUF7865\nazV2qWia0r4fXrPDRcAvNCZbRTEeIXsgC+4JkX5fYhyAtqHwIGXzeRt7yE11DHsN\nTzYjhlnzFFI/SSNPd1tstsPL0lM1FDaFlhDD/OChaT99QIcRD+lwJR2zfEX/2qKN\nVHlgzKOv46prSZ/cGb7UN+WKozVWtd3hcgajxUD+HC/2DSpbTZDRpYQx577ot0tT\n5+3SZjVSZOZtxEu7m6bH7ri2qnxAz107UKkjhUbFqvfZcQrbTU/erKi+OHN1Bsqm\nhetw8W6bFFY0+fJIPxDtsQPFUzI1GmUeJLXmvveUaK9PlRTDIlw+12GuBTwTwMhN\np3U9cB1DCEEYEulF8XfGNLAbeaBH3mkx9N3lkEc3a9JQRvCfXHg7R+941AjDtAIU\n9twwXUlwV8Xrx9697yomgeDLwIsZQ3498IxOh6fghS/Wzbnh4EqrvnHrZOp3dqLg\nnoyMcgFH6otobdQD32Ux\n=m53x\n-----END PGP SIGNATURE-----",
        "payload": "tree e3e8bbce24dfa2ca58f27554c4392be3272f7f31\nparent 61eebe2baefac4efeac964293e8aa119abe0eb4c\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1486276539 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1498379405 +0200\n\nextra: Pow: Logs: Use CValidationState inside CheckProofOfWork\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2633f50f98a33c3c8e1b1da8fbe12c1d8b5d18a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2633f50f98a33c3c8e1b1da8fbe12c1d8b5d18a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2633f50f98a33c3c8e1b1da8fbe12c1d8b5d18a7/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61eebe2baefac4efeac964293e8aa119abe0eb4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61eebe2baefac4efeac964293e8aa119abe0eb4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61eebe2baefac4efeac964293e8aa119abe0eb4c"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "e2add2dcafd902db88d574a87c7f6ee5eb59a519",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2633f50f98a33c3c8e1b1da8fbe12c1d8b5d18a7/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2633f50f98a33c3c8e1b1da8fbe12c1d8b5d18a7/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=2633f50f98a33c3c8e1b1da8fbe12c1d8b5d18a7",
        "patch": "@@ -77,7 +77,7 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n }\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n-static bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n+static bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params, CValidationState& state)\n {\n     bool fNegative;\n     bool fOverflow;\n@@ -87,11 +87,11 @@ static bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::\n \n     // Check range\n     if (fNegative || bnTarget == 0 || fOverflow || bnTarget > UintToArith256(params.powLimit))\n-        return false;\n+        return state.DoS(50, false, REJECT_INVALID, \"high-hash-range\", false, \"proof of work failed\");\n \n     // Check proof of work matches claimed amount\n     if (UintToArith256(hash) > bnTarget)\n-        return false;\n+        return state.DoS(50, false, REJECT_INVALID, \"high-hash-target\", false, \"proof of work failed\");\n \n     return true;\n }\n@@ -104,8 +104,8 @@ bool CheckProof(const CBlockHeader& block, const uint256& block_hash, CValidatio\n         }\n     } else {\n         // Check proof of work matches claimed amount\n-        if (!CheckProofOfWork(block_hash, block.nBits, consensusParams)) {\n-            return state.DoS(50, false, REJECT_INVALID, \"high-hash\", false, \"proof of work failed\");\n+        if (!CheckProofOfWork(block_hash, block.nBits, consensusParams, state)) {\n+            return false;\n         }\n     }\n     return true;\n@@ -117,7 +117,7 @@ bool MaybeGenerateProof(const Consensus::Params& params, CBlockHeader* pblock, c\n     uint256 block_hash = pblock->GetHash();\n     if (params.blocksignScript == CScript()) {\n         static const int nInnerLoopCount = 0x10000;\n-        while (nTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(block_hash, pblock->nBits, params)) {\n+        while (nTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(block_hash, pblock->nBits, params, state)) {\n             ++pblock->nNonce;\n             --nTries;\n             block_hash = pblock->GetHash();"
      }
    ]
  }
]