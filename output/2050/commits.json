[
  {
    "sha": "6583dfa1870d95418955e34d07c5e1191f4ca252",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTgzZGZhMTg3MGQ5NTQxODk1NWUzNGQwN2M1ZTExOTFmNGNhMjUy",
    "commit": {
      "author": {
        "name": "Robin Owens",
        "email": "robin.owens@rowit.co.uk",
        "date": "2012-11-23T22:53:50Z"
      },
      "committer": {
        "name": "Robin Owens",
        "email": "robin.owens@rowit.co.uk",
        "date": "2012-11-23T22:53:50Z"
      },
      "message": "Added menu and dialog for entering private key\nneed to remove tick in menu and add space for comment with address\nalso need to link up with actual command so it does something!",
      "tree": {
        "sha": "bc522f7d9593b002f0d3e6d52bfdbb522e2c8826",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc522f7d9593b002f0d3e6d52bfdbb522e2c8826"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6583dfa1870d95418955e34d07c5e1191f4ca252",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6583dfa1870d95418955e34d07c5e1191f4ca252",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6583dfa1870d95418955e34d07c5e1191f4ca252",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6583dfa1870d95418955e34d07c5e1191f4ca252/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "edf6ba2690417ec77960796e6237f1a50fa30ae5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edf6ba2690417ec77960796e6237f1a50fa30ae5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/edf6ba2690417ec77960796e6237f1a50fa30ae5"
      }
    ],
    "stats": {
      "total": 198,
      "additions": 195,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5390c411df17a8389bd50d6768997a7add5c3ccc",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6583dfa1870d95418955e34d07c5e1191f4ca252/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6583dfa1870d95418955e34d07c5e1191f4ca252/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=6583dfa1870d95418955e34d07c5e1191f4ca252",
        "patch": "@@ -195,7 +195,8 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/netbase.h \\\n     src/clientversion.h \\\n     src/txdb.h \\\n-    src/leveldb.h\n+    src/leveldb.h \\\n+    src/qt/importprivatekeydialog.h\n \n SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/transactiontablemodel.cpp \\\n@@ -257,7 +258,8 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/rpcconsole.cpp \\\n     src/noui.cpp \\\n     src/leveldb.cpp \\\n-    src/txdb.cpp\n+    src/txdb.cpp \\\n+    src/qt/importprivatekeydialog.cpp\n \n RESOURCES += \\\n     src/qt/bitcoin.qrc\n@@ -273,7 +275,8 @@ FORMS += \\\n     src/qt/forms/sendcoinsentry.ui \\\n     src/qt/forms/askpassphrasedialog.ui \\\n     src/qt/forms/rpcconsole.ui \\\n-    src/qt/forms/optionsdialog.ui\n+    src/qt/forms/optionsdialog.ui \\\n+    src/qt/forms/importprivatekeydialog.ui\n \n contains(USE_QRCODE, 1) {\n HEADERS += src/qt/qrcodedialog.h"
      },
      {
        "sha": "d97a313b29f89420d807e78e7d90e0bdd01cdbc3",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6583dfa1870d95418955e34d07c5e1191f4ca252/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6583dfa1870d95418955e34d07c5e1191f4ca252/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=6583dfa1870d95418955e34d07c5e1191f4ca252",
        "patch": "@@ -25,6 +25,7 @@\n #include \"notificator.h\"\n #include \"guiutil.h\"\n #include \"rpcconsole.h\"\n+#include \"importprivatekeydialog.h\"\n \n #ifdef Q_OS_MAC\n #include \"macdockiconhandler.h\"\n@@ -62,6 +63,7 @@ BitcoinGUI::BitcoinGUI(QWidget *parent):\n     clientModel(0),\n     walletModel(0),\n     encryptWalletAction(0),\n+    importPrivateKeyAction(0),\n     changePassphraseAction(0),\n     aboutQtAction(0),\n     trayIcon(0),\n@@ -259,6 +261,9 @@ void BitcoinGUI::createActions()\n     encryptWalletAction = new QAction(QIcon(\":/icons/lock_closed\"), tr(\"&Encrypt Wallet...\"), this);\n     encryptWalletAction->setStatusTip(tr(\"Encrypt the private keys that belong to your wallet\"));\n     encryptWalletAction->setCheckable(true);\n+    importPrivateKeyAction = new QAction(QIcon(\":/icons/lock_closed\"), tr(\"&Import Private Key...\"), this);\n+    importPrivateKeyAction->setStatusTip(tr(\"Import Private Key into your wallet\"));\n+    importPrivateKeyAction->setCheckable(true);\n     backupWalletAction = new QAction(QIcon(\":/icons/filesave\"), tr(\"&Backup Wallet...\"), this);\n     backupWalletAction->setStatusTip(tr(\"Backup wallet to another location\"));\n     changePassphraseAction = new QAction(QIcon(\":/icons/key\"), tr(\"&Change Passphrase...\"), this);\n@@ -280,6 +285,7 @@ void BitcoinGUI::createActions()\n     connect(optionsAction, SIGNAL(triggered()), this, SLOT(optionsClicked()));\n     connect(toggleHideAction, SIGNAL(triggered()), this, SLOT(toggleHidden()));\n     connect(encryptWalletAction, SIGNAL(triggered(bool)), this, SLOT(encryptWallet(bool)));\n+    connect(importPrivateKeyAction, SIGNAL(triggered(bool)), this, SLOT(importPrivateKey()));\n     connect(backupWalletAction, SIGNAL(triggered()), this, SLOT(backupWallet()));\n     connect(changePassphraseAction, SIGNAL(triggered()), this, SLOT(changePassphrase()));\n     connect(signMessageAction, SIGNAL(triggered()), this, SLOT(gotoSignMessageTab()));\n@@ -309,6 +315,7 @@ void BitcoinGUI::createMenuBar()\n     settings->addAction(encryptWalletAction);\n     settings->addAction(changePassphraseAction);\n     settings->addSeparator();\n+    settings->addAction(importPrivateKeyAction);\n     settings->addAction(optionsAction);\n \n     QMenu *help = appMenuBar->addMenu(tr(\"&Help\"));\n@@ -811,6 +818,8 @@ void BitcoinGUI::setEncryptionStatus(int status)\n         encryptWalletAction->setChecked(false);\n         changePassphraseAction->setEnabled(false);\n         encryptWalletAction->setEnabled(true);\n+\n+        importPrivateKeyAction->setEnabled(true);\n         break;\n     case WalletModel::Unlocked:\n         labelEncryptionIcon->show();\n@@ -819,6 +828,7 @@ void BitcoinGUI::setEncryptionStatus(int status)\n         encryptWalletAction->setChecked(true);\n         changePassphraseAction->setEnabled(true);\n         encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported\n+        importPrivateKeyAction->setEnabled(true);\n         break;\n     case WalletModel::Locked:\n         labelEncryptionIcon->show();\n@@ -827,6 +837,8 @@ void BitcoinGUI::setEncryptionStatus(int status)\n         encryptWalletAction->setChecked(true);\n         changePassphraseAction->setEnabled(true);\n         encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported\n+\n+        importPrivateKeyAction->setEnabled(false);\n         break;\n     }\n }\n@@ -843,6 +855,14 @@ void BitcoinGUI::encryptWallet(bool status)\n     setEncryptionStatus(walletModel->getEncryptionStatus());\n }\n \n+void BitcoinGUI::importPrivateKey()\n+{\n+    //todo!\n+    ImportPrivateKeyDialog dlg(this);\n+    dlg.setModel(walletModel);\n+    dlg.exec();\n+}\n+\n void BitcoinGUI::backupWallet()\n {\n     QString saveDir = QDesktopServices::storageLocation(QDesktopServices::DocumentsLocation);"
      },
      {
        "sha": "93a8e78e5e723308870f8c19266bb3691b9851e9",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6583dfa1870d95418955e34d07c5e1191f4ca252/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6583dfa1870d95418955e34d07c5e1191f4ca252/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=6583dfa1870d95418955e34d07c5e1191f4ca252",
        "patch": "@@ -87,6 +87,7 @@ class BitcoinGUI : public QMainWindow\n     QAction *toggleHideAction;\n     QAction *exportAction;\n     QAction *encryptWalletAction;\n+    QAction *importPrivateKeyAction;\n     QAction *backupWalletAction;\n     QAction *changePassphraseAction;\n     QAction *aboutQtAction;\n@@ -164,6 +165,8 @@ private slots:\n     void incomingTransaction(const QModelIndex & parent, int start, int end);\n     /** Encrypt the wallet */\n     void encryptWallet(bool status);\n+    /** Encrypt the wallet */\n+    void importPrivateKey();\n     /** Backup the wallet */\n     void backupWallet();\n     /** Change encrypted wallet passphrase */"
      },
      {
        "sha": "8400973241c315aaa6809be8e357f7139872b566",
        "filename": "src/qt/forms/importprivatekeydialog.ui",
        "status": "added",
        "additions": 107,
        "deletions": 0,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6583dfa1870d95418955e34d07c5e1191f4ca252/src/qt/forms/importprivatekeydialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6583dfa1870d95418955e34d07c5e1191f4ca252/src/qt/forms/importprivatekeydialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/importprivatekeydialog.ui?ref=6583dfa1870d95418955e34d07c5e1191f4ca252",
        "patch": "@@ -0,0 +1,107 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<ui version=\"4.0\">\n+ <class>ImportPrivateKeyDialog</class>\n+ <widget class=\"QDialog\" name=\"ImportPrivateKeyDialog\">\n+  <property name=\"geometry\">\n+   <rect>\n+    <x>0</x>\n+    <y>0</y>\n+    <width>598</width>\n+    <height>103</height>\n+   </rect>\n+  </property>\n+  <property name=\"sizePolicy\">\n+   <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Minimum\">\n+    <horstretch>0</horstretch>\n+    <verstretch>0</verstretch>\n+   </sizepolicy>\n+  </property>\n+  <property name=\"minimumSize\">\n+   <size>\n+    <width>550</width>\n+    <height>0</height>\n+   </size>\n+  </property>\n+  <property name=\"windowTitle\">\n+   <string>Import Private Key Dialog</string>\n+  </property>\n+  <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n+   <item>\n+    <widget class=\"QLabel\" name=\"warningLabel\">\n+     <property name=\"textFormat\">\n+      <enum>Qt::RichText</enum>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <layout class=\"QFormLayout\" name=\"formLayout\">\n+     <property name=\"fieldGrowthPolicy\">\n+      <enum>QFormLayout::AllNonFixedFieldsGrow</enum>\n+     </property>\n+     <item row=\"0\" column=\"0\">\n+      <widget class=\"QLabel\" name=\"passLabel1\">\n+       <property name=\"text\">\n+        <string>Enter Private Key</string>\n+       </property>\n+      </widget>\n+     </item>\n+     <item row=\"0\" column=\"1\">\n+      <widget class=\"QLineEdit\" name=\"privateKeyEdit1\">\n+       <property name=\"echoMode\">\n+        <enum>QLineEdit::Password</enum>\n+       </property>\n+      </widget>\n+     </item>\n+    </layout>\n+   </item>\n+   <item>\n+    <widget class=\"QDialogButtonBox\" name=\"buttonBox\">\n+     <property name=\"orientation\">\n+      <enum>Qt::Horizontal</enum>\n+     </property>\n+     <property name=\"standardButtons\">\n+      <set>QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>\n+     </property>\n+    </widget>\n+   </item>\n+  </layout>\n+ </widget>\n+ <resources/>\n+ <connections>\n+  <connection>\n+   <sender>buttonBox</sender>\n+   <signal>accepted()</signal>\n+   <receiver>ImportPrivateKeyDialog</receiver>\n+   <slot>accept()</slot>\n+   <hints>\n+    <hint type=\"sourcelabel\">\n+     <x>248</x>\n+     <y>254</y>\n+    </hint>\n+    <hint type=\"destinationlabel\">\n+     <x>157</x>\n+     <y>274</y>\n+    </hint>\n+   </hints>\n+  </connection>\n+  <connection>\n+   <sender>buttonBox</sender>\n+   <signal>rejected()</signal>\n+   <receiver>ImportPrivateKeyDialog</receiver>\n+   <slot>reject()</slot>\n+   <hints>\n+    <hint type=\"sourcelabel\">\n+     <x>316</x>\n+     <y>260</y>\n+    </hint>\n+    <hint type=\"destinationlabel\">\n+     <x>286</x>\n+     <y>274</y>\n+    </hint>\n+   </hints>\n+  </connection>\n+ </connections>\n+</ui>"
      },
      {
        "sha": "c52c6f23352e31431c41167754599f76db5045da",
        "filename": "src/qt/importprivatekeydialog.cpp",
        "status": "added",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6583dfa1870d95418955e34d07c5e1191f4ca252/src/qt/importprivatekeydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6583dfa1870d95418955e34d07c5e1191f4ca252/src/qt/importprivatekeydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/importprivatekeydialog.cpp?ref=6583dfa1870d95418955e34d07c5e1191f4ca252",
        "patch": "@@ -0,0 +1,30 @@\n+#include \"importprivatekeydialog.h\"\n+#include \"ui_importprivatekeydialog.h\"\n+#include \"walletmodel.h\"\n+\n+#include \"version.h\"\n+\n+ImportPrivateKeyDialog::ImportPrivateKeyDialog(QWidget *parent) :\n+    QDialog(parent),\n+    ui(new Ui::ImportPrivateKeyDialog)\n+{\n+    ui->setupUi(this);\n+}\n+\n+void ImportPrivateKeyDialog::setModel(WalletModel *model)\n+{\n+    if(model)\n+    {\n+        //ui->versionLabel->setText(model->formatFullVersion());\n+    }\n+}\n+\n+ImportPrivateKeyDialog::~ImportPrivateKeyDialog()\n+{\n+    delete ui;\n+}\n+\n+void ImportPrivateKeyDialog::on_buttonBox_accepted()\n+{\n+    close();\n+}"
      },
      {
        "sha": "5d18f172a5af27113d3a86f40a8d168b3260d978",
        "filename": "src/qt/importprivatekeydialog.h",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6583dfa1870d95418955e34d07c5e1191f4ca252/src/qt/importprivatekeydialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6583dfa1870d95418955e34d07c5e1191f4ca252/src/qt/importprivatekeydialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/importprivatekeydialog.h?ref=6583dfa1870d95418955e34d07c5e1191f4ca252",
        "patch": "@@ -0,0 +1,29 @@\n+#ifndef IMPORTPRIVATEKEYDIALOG_H\n+#define IMPORTPRIVATEKEYDIALOG_H\n+\n+#include <QDialog>\n+\n+namespace Ui {\n+    class ImportPrivateKeyDialog;\n+}\n+class WalletModel;\n+\n+/** \"Import Private Key\" dialog box */\n+class ImportPrivateKeyDialog : public QDialog\n+{\n+    Q_OBJECT\n+\n+public:\n+    explicit ImportPrivateKeyDialog(QWidget *parent = 0);\n+    ~ImportPrivateKeyDialog();\n+\n+    void setModel(WalletModel *model);\n+private:\n+    Ui::ImportPrivateKeyDialog *ui;\n+\n+private slots:\n+    void on_buttonBox_accepted();\n+};\n+\n+#endif // IMPORTPRIVATEKEYDIALOG_H\n+"
      }
    ]
  },
  {
    "sha": "7126850ae06c21d5629d4a1435d92c9fcae94970",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTI2ODUwYWUwNmMyMWQ1NjI5ZDRhMTQzNWQ5MmM5ZmNhZTk0OTcw",
    "commit": {
      "author": {
        "name": "Robin Owens",
        "email": "robin.owens@rowit.co.uk",
        "date": "2012-11-24T18:16:42Z"
      },
      "committer": {
        "name": "Robin Owens",
        "email": "robin.owens@rowit.co.uk",
        "date": "2012-11-24T18:16:42Z"
      },
      "message": "first version with import working.\nNeed more error checking and inform user of issues.",
      "tree": {
        "sha": "dbd7d2ed7322c9c855e04fff293a68dba03656e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbd7d2ed7322c9c855e04fff293a68dba03656e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7126850ae06c21d5629d4a1435d92c9fcae94970",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7126850ae06c21d5629d4a1435d92c9fcae94970",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7126850ae06c21d5629d4a1435d92c9fcae94970",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7126850ae06c21d5629d4a1435d92c9fcae94970/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "6583dfa1870d95418955e34d07c5e1191f4ca252",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6583dfa1870d95418955e34d07c5e1191f4ca252",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6583dfa1870d95418955e34d07c5e1191f4ca252"
      }
    ],
    "stats": {
      "total": 259,
      "additions": 232,
      "deletions": 27
    },
    "files": [
      {
        "sha": "7a115804c6c7bb3bddb0fc337e660cdba871f8d8",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7126850ae06c21d5629d4a1435d92c9fcae94970/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7126850ae06c21d5629d4a1435d92c9fcae94970/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=7126850ae06c21d5629d4a1435d92c9fcae94970",
        "patch": "@@ -261,9 +261,8 @@ void BitcoinGUI::createActions()\n     encryptWalletAction = new QAction(QIcon(\":/icons/lock_closed\"), tr(\"&Encrypt Wallet...\"), this);\n     encryptWalletAction->setStatusTip(tr(\"Encrypt the private keys that belong to your wallet\"));\n     encryptWalletAction->setCheckable(true);\n-    importPrivateKeyAction = new QAction(QIcon(\":/icons/lock_closed\"), tr(\"&Import Private Key...\"), this);\n+    importPrivateKeyAction = new QAction(QIcon(\":/icons/key\"), tr(\"&Import Private Key...\"), this);\n     importPrivateKeyAction->setStatusTip(tr(\"Import Private Key into your wallet\"));\n-    importPrivateKeyAction->setCheckable(true);\n     backupWalletAction = new QAction(QIcon(\":/icons/filesave\"), tr(\"&Backup Wallet...\"), this);\n     backupWalletAction->setStatusTip(tr(\"Backup wallet to another location\"));\n     changePassphraseAction = new QAction(QIcon(\":/icons/key\"), tr(\"&Change Passphrase...\"), this);"
      },
      {
        "sha": "003904da28609ba8837e9d190b894ff080eef54d",
        "filename": "src/qt/forms/importprivatekeydialog.ui",
        "status": "modified",
        "additions": 120,
        "deletions": 18,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7126850ae06c21d5629d4a1435d92c9fcae94970/src/qt/forms/importprivatekeydialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7126850ae06c21d5629d4a1435d92c9fcae94970/src/qt/forms/importprivatekeydialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/importprivatekeydialog.ui?ref=7126850ae06c21d5629d4a1435d92c9fcae94970",
        "patch": "@@ -6,8 +6,8 @@\n    <rect>\n     <x>0</x>\n     <y>0</y>\n-    <width>598</width>\n-    <height>103</height>\n+    <width>602</width>\n+    <height>203</height>\n    </rect>\n   </property>\n   <property name=\"sizePolicy\">\n@@ -26,16 +26,6 @@\n    <string>Import Private Key Dialog</string>\n   </property>\n   <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n-   <item>\n-    <widget class=\"QLabel\" name=\"warningLabel\">\n-     <property name=\"textFormat\">\n-      <enum>Qt::RichText</enum>\n-     </property>\n-     <property name=\"wordWrap\">\n-      <bool>true</bool>\n-     </property>\n-    </widget>\n-   </item>\n    <item>\n     <layout class=\"QFormLayout\" name=\"formLayout\">\n      <property name=\"fieldGrowthPolicy\">\n@@ -50,23 +40,135 @@\n      </item>\n      <item row=\"0\" column=\"1\">\n       <widget class=\"QLineEdit\" name=\"privateKeyEdit1\">\n+       <property name=\"maxLength\">\n+        <number>64</number>\n+       </property>\n        <property name=\"echoMode\">\n-        <enum>QLineEdit::Password</enum>\n+        <enum>QLineEdit::Normal</enum>\n+       </property>\n+      </widget>\n+     </item>\n+     <item row=\"1\" column=\"0\">\n+      <widget class=\"QLabel\" name=\"label\">\n+       <property name=\"text\">\n+        <string>Address Label</string>\n+       </property>\n+      </widget>\n+     </item>\n+     <item row=\"1\" column=\"1\">\n+      <widget class=\"QLineEdit\" name=\"addressLabelEdit\">\n+       <property name=\"text\">\n+        <string>Imported Private Key </string>\n+       </property>\n+       <property name=\"maxLength\">\n+        <number>64</number>\n        </property>\n       </widget>\n      </item>\n     </layout>\n    </item>\n    <item>\n-    <widget class=\"QDialogButtonBox\" name=\"buttonBox\">\n-     <property name=\"orientation\">\n-      <enum>Qt::Horizontal</enum>\n+    <widget class=\"QLabel\" name=\"warningLabel\">\n+     <property name=\"text\">\n+      <string>Enter the private key and a label to import key into wallet. This process can take a minute or 2 to complete.</string>\n      </property>\n-     <property name=\"standardButtons\">\n-      <set>QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>\n+     <property name=\"textFormat\">\n+      <enum>Qt::RichText</enum>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n      </property>\n     </widget>\n    </item>\n+   <item>\n+    <layout class=\"QGridLayout\" name=\"gridLayout\">\n+     <item row=\"0\" column=\"0\">\n+      <spacer name=\"horizontalSpacer_4\">\n+       <property name=\"orientation\">\n+        <enum>Qt::Horizontal</enum>\n+       </property>\n+       <property name=\"sizeHint\" stdset=\"0\">\n+        <size>\n+         <width>40</width>\n+         <height>20</height>\n+        </size>\n+       </property>\n+      </spacer>\n+     </item>\n+     <item row=\"0\" column=\"3\">\n+      <spacer name=\"horizontalSpacer_3\">\n+       <property name=\"orientation\">\n+        <enum>Qt::Horizontal</enum>\n+       </property>\n+       <property name=\"sizeHint\" stdset=\"0\">\n+        <size>\n+         <width>40</width>\n+         <height>20</height>\n+        </size>\n+       </property>\n+      </spacer>\n+     </item>\n+     <item row=\"0\" column=\"2\">\n+      <spacer name=\"horizontalSpacer\">\n+       <property name=\"orientation\">\n+        <enum>Qt::Horizontal</enum>\n+       </property>\n+       <property name=\"sizeHint\" stdset=\"0\">\n+        <size>\n+         <width>40</width>\n+         <height>20</height>\n+        </size>\n+       </property>\n+      </spacer>\n+     </item>\n+     <item row=\"0\" column=\"4\">\n+      <spacer name=\"horizontalSpacer_2\">\n+       <property name=\"orientation\">\n+        <enum>Qt::Horizontal</enum>\n+       </property>\n+       <property name=\"sizeHint\" stdset=\"0\">\n+        <size>\n+         <width>40</width>\n+         <height>20</height>\n+        </size>\n+       </property>\n+      </spacer>\n+     </item>\n+     <item row=\"0\" column=\"6\">\n+      <widget class=\"QDialogButtonBox\" name=\"buttonBox\">\n+       <property name=\"enabled\">\n+        <bool>false</bool>\n+       </property>\n+       <property name=\"orientation\">\n+        <enum>Qt::Horizontal</enum>\n+       </property>\n+       <property name=\"standardButtons\">\n+        <set>QDialogButtonBox::Ok</set>\n+       </property>\n+      </widget>\n+     </item>\n+     <item row=\"0\" column=\"5\">\n+      <widget class=\"QDialogButtonBox\" name=\"buttonBox_2\">\n+       <property name=\"standardButtons\">\n+        <set>QDialogButtonBox::Cancel</set>\n+       </property>\n+      </widget>\n+     </item>\n+     <item row=\"0\" column=\"1\">\n+      <spacer name=\"horizontalSpacer_5\">\n+       <property name=\"orientation\">\n+        <enum>Qt::Horizontal</enum>\n+       </property>\n+       <property name=\"sizeHint\" stdset=\"0\">\n+        <size>\n+         <width>40</width>\n+         <height>20</height>\n+        </size>\n+       </property>\n+      </spacer>\n+     </item>\n+    </layout>\n+   </item>\n   </layout>\n  </widget>\n  <resources/>"
      },
      {
        "sha": "cd92f1c325f63c61984ea452dec9e831cb5458a1",
        "filename": "src/qt/importprivatekeydialog.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 6,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7126850ae06c21d5629d4a1435d92c9fcae94970/src/qt/importprivatekeydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7126850ae06c21d5629d4a1435d92c9fcae94970/src/qt/importprivatekeydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/importprivatekeydialog.cpp?ref=7126850ae06c21d5629d4a1435d92c9fcae94970",
        "patch": "@@ -1,22 +1,54 @@\n #include \"importprivatekeydialog.h\"\n #include \"ui_importprivatekeydialog.h\"\n #include \"walletmodel.h\"\n-\n+#include \"base58.h\"\n+ #include <QValidator>\n #include \"version.h\"\n+using namespace std;\n+\n+\n+PrivateKeyValidator::PrivateKeyValidator(QObject *parent) : QValidator(parent){\n+    sBase58= string(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\n+    parentObject=parent;\n+};\n+\n+QValidator::State PrivateKeyValidator::validate (QString & input, int & pos ) const\n+{\n+    if (input.isEmpty()) {\n+        return Intermediate;\n+    }\n+\n+    for ( int i = 0 ; i < input.length(); i++)\n+    {\n+       if (sBase58.find(input[i].toAscii())==string::npos)\n+           return Invalid;\n+    }\n+\n+    CBitcoinSecret vchSecret;\n+    bool fGood = vchSecret.SetString(input.toStdString());\n+\n+    if (fGood) {\n+        return Acceptable;\n+    }\n+\n+    return Intermediate;\n+\n+}\n \n ImportPrivateKeyDialog::ImportPrivateKeyDialog(QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::ImportPrivateKeyDialog)\n {\n     ui->setupUi(this);\n+    QValidator *validator = new PrivateKeyValidator(this);\n+    ui->privateKeyEdit1->setValidator(validator);\n+    //QObject::connect(validator, SIGNAL(keyValidityChanged(bool)),\n+    //                 this, SLOT(setOKEnabled(bool)));\n }\n \n-void ImportPrivateKeyDialog::setModel(WalletModel *model)\n+void ImportPrivateKeyDialog::setModel(WalletModel *walletmodel)\n {\n-    if(model)\n-    {\n-        //ui->versionLabel->setText(model->formatFullVersion());\n-    }\n+    model=walletmodel;\n }\n \n ImportPrivateKeyDialog::~ImportPrivateKeyDialog()\n@@ -26,5 +58,19 @@ ImportPrivateKeyDialog::~ImportPrivateKeyDialog()\n \n void ImportPrivateKeyDialog::on_buttonBox_accepted()\n {\n+    //Import the key...\n+    string strSecret = ui->privateKeyEdit1->text().toStdString();\n+    string strLabel = ui->addressLabelEdit->text().toStdString();\n+\n+    //TODO handle errors returned.\n+    model->ImportPrivateKey(strSecret,strLabel);\n+\n     close();\n }\n+\n+void ImportPrivateKeyDialog::on_privateKeyEdit1_textChanged(const QString &arg1)\n+{\n+    //TODO - check if wallet encrypted and locked\n+    ui->buttonBox->setEnabled(\n+        ui->privateKeyEdit1->hasAcceptableInput ());\n+}"
      },
      {
        "sha": "1bf26e1c898edf80efd2dcf8f6c01d4e27e8c2b6",
        "filename": "src/qt/importprivatekeydialog.h",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7126850ae06c21d5629d4a1435d92c9fcae94970/src/qt/importprivatekeydialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7126850ae06c21d5629d4a1435d92c9fcae94970/src/qt/importprivatekeydialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/importprivatekeydialog.h?ref=7126850ae06c21d5629d4a1435d92c9fcae94970",
        "patch": "@@ -2,12 +2,26 @@\n #define IMPORTPRIVATEKEYDIALOG_H\n \n #include <QDialog>\n+#include <QValidator>\n+\n+#include \"bitcoinrpc.h\"\n \n namespace Ui {\n     class ImportPrivateKeyDialog;\n }\n class WalletModel;\n \n+class PrivateKeyValidator : public QValidator\n+{\n+    Q_OBJECT\n+    public:\n+        PrivateKeyValidator(QObject * parent);\n+        QValidator::State validate(QString &valueToValidate, int &pos) const;\n+    private:\n+        std::string sBase58;\n+        QObject *parentObject;\n+};\n+\n /** \"Import Private Key\" dialog box */\n class ImportPrivateKeyDialog : public QDialog\n {\n@@ -17,12 +31,16 @@ class ImportPrivateKeyDialog : public QDialog\n     explicit ImportPrivateKeyDialog(QWidget *parent = 0);\n     ~ImportPrivateKeyDialog();\n \n-    void setModel(WalletModel *model);\n+    void setModel(WalletModel *walletmodel);\n private:\n     Ui::ImportPrivateKeyDialog *ui;\n+    WalletModel *model;\n \n private slots:\n     void on_buttonBox_accepted();\n+\n+\n+    void on_privateKeyEdit1_textChanged(const QString &arg1);\n };\n \n #endif // IMPORTPRIVATEKEYDIALOG_H"
      },
      {
        "sha": "b8fa3c12e8bf68f9ab0200e2683722e08cb472c4",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7126850ae06c21d5629d4a1435d92c9fcae94970/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7126850ae06c21d5629d4a1435d92c9fcae94970/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=7126850ae06c21d5629d4a1435d92c9fcae94970",
        "patch": "@@ -374,3 +374,39 @@ void WalletModel::UnlockContext::CopyFrom(const UnlockContext& rhs)\n     *this = rhs;\n     rhs.relock = false;\n }\n+\n+\n+bool WalletModel::ImportPrivateKey(string keyString, string label)\n+{\n+    CBitcoinSecret vchSecret;\n+    bool fGood = vchSecret.SetString(keyString);\n+\n+    if (!fGood) {\n+        //TODO\n+        //this should never happen as is prevalidated!\n+        // Just need to log error\n+        return false;\n+    }\n+\n+    CKey key;\n+    bool fCompressed;\n+    CSecret secret = vchSecret.GetSecret(fCompressed);\n+    key.SetSecret(secret, fCompressed);\n+    CKeyID vchAddress = key.GetPubKey().GetID();\n+    {\n+        LOCK2(cs_main, wallet->cs_wallet);\n+\n+        wallet->MarkDirty();\n+        wallet->SetAddressBookName(vchAddress, label);\n+\n+        if (!wallet->AddKey(key)){\n+            //TODO\n+            //Handle error.\n+            return false;\n+        }\n+        //update GUI with progress?\n+        wallet->ScanForWalletTransactions(pindexGenesisBlock, true);\n+        wallet->ReacceptWalletTransactions();\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "a3e9f04c08e35170397f7de42a0917332f999594",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7126850ae06c21d5629d4a1435d92c9fcae94970/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7126850ae06c21d5629d4a1435d92c9fcae94970/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=7126850ae06c21d5629d4a1435d92c9fcae94970",
        "patch": "@@ -5,6 +5,8 @@\n \n #include \"allocators.h\" /* for SecureString */\n \n+using namespace std;\n+\n class OptionsModel;\n class AddressTableModel;\n class TransactionTableModel;\n@@ -108,6 +110,8 @@ class WalletModel : public QObject\n \n     UnlockContext requestUnlock();\n \n+    bool ImportPrivateKey(string keyString, string label);\n+\n private:\n     CWallet *wallet;\n "
      }
    ]
  },
  {
    "sha": "1b75f64dbf0037befb8b2f1e8604d99637e4ef72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjc1ZjY0ZGJmMDAzN2JlZmI4YjJmMWU4NjA0ZDk5NjM3ZTRlZjcy",
    "commit": {
      "author": {
        "name": "Robin Owens",
        "email": "robin.owens@rowit.co.uk",
        "date": "2012-11-27T00:02:50Z"
      },
      "committer": {
        "name": "Robin Owens",
        "email": "robin.owens@rowit.co.uk",
        "date": "2012-11-27T00:02:50Z"
      },
      "message": "added progress dialog for import of private key\nlinked scanwalletfortransactions back to progess box",
      "tree": {
        "sha": "6ae1fafafd066851bef815597c3483338ccc01d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ae1fafafd066851bef815597c3483338ccc01d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b75f64dbf0037befb8b2f1e8604d99637e4ef72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b75f64dbf0037befb8b2f1e8604d99637e4ef72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b75f64dbf0037befb8b2f1e8604d99637e4ef72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7126850ae06c21d5629d4a1435d92c9fcae94970",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7126850ae06c21d5629d4a1435d92c9fcae94970",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7126850ae06c21d5629d4a1435d92c9fcae94970"
      }
    ],
    "stats": {
      "total": 153,
      "additions": 143,
      "deletions": 10
    },
    "files": [
      {
        "sha": "a73dad3ce90e3af20600446c68dfe05cc4d09e9c",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=1b75f64dbf0037befb8b2f1e8604d99637e4ef72",
        "patch": "@@ -196,7 +196,8 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/clientversion.h \\\n     src/txdb.h \\\n     src/leveldb.h \\\n-    src/qt/importprivatekeydialog.h\n+    src/qt/importprivatekeydialog.h \\\n+    src/qt/progressdialog.h\n \n SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/transactiontablemodel.cpp \\\n@@ -259,7 +260,8 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/noui.cpp \\\n     src/leveldb.cpp \\\n     src/txdb.cpp \\\n-    src/qt/importprivatekeydialog.cpp\n+    src/qt/importprivatekeydialog.cpp \\\n+    src/qt/progressdialog.cpp\n \n RESOURCES += \\\n     src/qt/bitcoin.qrc\n@@ -276,7 +278,8 @@ FORMS += \\\n     src/qt/forms/askpassphrasedialog.ui \\\n     src/qt/forms/rpcconsole.ui \\\n     src/qt/forms/optionsdialog.ui \\\n-    src/qt/forms/importprivatekeydialog.ui\n+    src/qt/forms/importprivatekeydialog.ui \\\n+    src/qt/forms/progressdialog.ui\n \n contains(USE_QRCODE, 1) {\n HEADERS += src/qt/qrcodedialog.h"
      },
      {
        "sha": "bafaa903fa53af99091c1f9e05fe94fef0d78cc9",
        "filename": "src/qt/forms/progressdialog.ui",
        "status": "added",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/src/qt/forms/progressdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/src/qt/forms/progressdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/progressdialog.ui?ref=1b75f64dbf0037befb8b2f1e8604d99637e4ef72",
        "patch": "@@ -0,0 +1,45 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<ui version=\"4.0\">\n+ <class>ProgressDialog</class>\n+ <widget class=\"QDialog\" name=\"ProgressDialog\">\n+  <property name=\"geometry\">\n+   <rect>\n+    <x>0</x>\n+    <y>0</y>\n+    <width>400</width>\n+    <height>102</height>\n+   </rect>\n+  </property>\n+  <property name=\"windowTitle\">\n+   <string>Dialog</string>\n+  </property>\n+  <widget class=\"QProgressBar\" name=\"progressBar\">\n+   <property name=\"geometry\">\n+    <rect>\n+     <x>30</x>\n+     <y>60</y>\n+     <width>341</width>\n+     <height>23</height>\n+    </rect>\n+   </property>\n+   <property name=\"value\">\n+    <number>0</number>\n+   </property>\n+  </widget>\n+  <widget class=\"QLabel\" name=\"label\">\n+   <property name=\"geometry\">\n+    <rect>\n+     <x>60</x>\n+     <y>20</y>\n+     <width>281</width>\n+     <height>17</height>\n+    </rect>\n+   </property>\n+   <property name=\"text\">\n+    <string>Scanning blocks for new transactions...</string>\n+   </property>\n+  </widget>\n+ </widget>\n+ <resources/>\n+ <connections/>\n+</ui>"
      },
      {
        "sha": "4050cc2be6ddc078dbdd70c5aafb2139461dfd38",
        "filename": "src/qt/importprivatekeydialog.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/src/qt/importprivatekeydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/src/qt/importprivatekeydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/importprivatekeydialog.cpp?ref=1b75f64dbf0037befb8b2f1e8604d99637e4ef72",
        "patch": "@@ -1,6 +1,7 @@\n #include \"importprivatekeydialog.h\"\n #include \"ui_importprivatekeydialog.h\"\n #include \"walletmodel.h\"\n+#include \"progressdialog.h\"\n #include \"base58.h\"\n  #include <QValidator>\n #include \"version.h\"\n@@ -63,8 +64,15 @@ void ImportPrivateKeyDialog::on_buttonBox_accepted()\n     string strLabel = ui->addressLabelEdit->text().toStdString();\n \n     //TODO handle errors returned.\n+    ProgressDialog prgdlg(this);\n+    prgdlg.setModal (true );\n+    prgdlg.show();\n+    prgdlg.raise();\n+    prgdlg.activateWindow();\n+    connect(model, SIGNAL(ScanWalletTransactionsProgress(int)), &prgdlg, SLOT(UpdateProgress(int)));\n     model->ImportPrivateKey(strSecret,strLabel);\n-\n+    disconnect(model, SIGNAL(ScanWalletTransactionsProgress(int)), &prgdlg, SLOT(UpdateProgress(int)));\n+    prgdlg.hide();\n     close();\n }\n "
      },
      {
        "sha": "485998baad7cef9574671d562b1b8f485b50f119",
        "filename": "src/qt/progressdialog.cpp",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/src/qt/progressdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/src/qt/progressdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/progressdialog.cpp?ref=1b75f64dbf0037befb8b2f1e8604d99637e4ef72",
        "patch": "@@ -0,0 +1,19 @@\n+#include \"progressdialog.h\"\n+#include \"ui_progressdialog.h\"\n+\n+ProgressDialog::ProgressDialog(QWidget *parent) :\n+    QDialog(parent),\n+    ui(new Ui::ProgressDialog)\n+{\n+    ui->setupUi(this);\n+}\n+\n+ProgressDialog::~ProgressDialog()\n+{\n+    delete ui;\n+}\n+\n+void ProgressDialog::UpdateProgress(int percent)\n+{\n+    ui->progressBar->setValue(percent);\n+}"
      },
      {
        "sha": "134210ee01f131c75872b69fd20f2468c6ec0d7a",
        "filename": "src/qt/progressdialog.h",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/src/qt/progressdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/src/qt/progressdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/progressdialog.h?ref=1b75f64dbf0037befb8b2f1e8604d99637e4ef72",
        "patch": "@@ -0,0 +1,26 @@\n+#ifndef PROGRESSDIALOG_H\n+#define PROGRESSDIALOG_H\n+\n+#include <QDialog>\n+\n+namespace Ui {\n+class ProgressDialog;\n+}\n+\n+class ProgressDialog : public QDialog\n+{\n+    Q_OBJECT\n+    \n+public:\n+    explicit ProgressDialog(QWidget *parent = 0);\n+    ~ProgressDialog();\n+    \n+private:\n+    Ui::ProgressDialog *ui;\n+\n+public slots:\n+    void UpdateProgress(int percent);\n+\n+};\n+\n+#endif // PROGRESSDIALOG_H"
      },
      {
        "sha": "db6e32c5991babc674088da6c584a7ec2c64afe7",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 5,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=1b75f64dbf0037befb8b2f1e8604d99637e4ef72",
        "patch": "@@ -375,16 +375,33 @@ void WalletModel::UnlockContext::CopyFrom(const UnlockContext& rhs)\n     rhs.relock = false;\n }\n \n+static void NotifyChainBlocksScanned(WalletModel *walletmodel, CWallet *wallet, const int blockNumber)\n+{\n+    OutputDebugStringF(\"NotifyChainBlocksScanned %i\\n\", blockNumber);\n+    //callback progress dialog to update!\n+    walletmodel->EmitBlocksScanned(blockNumber);\n+}\n+\n+\n+void WalletModel::EmitBlocksScanned(int blockNumber)\n+{\n+    if (blockNumber==0)\n+        blockNumber=1;\n+\n+    int percent=blockNumber*100/nBestHeight;\n+    emit ScanWalletTransactionsProgress(percent);\n+}\n \n bool WalletModel::ImportPrivateKey(string keyString, string label)\n {\n+    OutputDebugStringF(\"Private Key Importing\\n\");\n+    wallet->NotifyChainBlocksScanned.connect(boost::bind(&NotifyChainBlocksScanned, this, _1, _2));\n     CBitcoinSecret vchSecret;\n     bool fGood = vchSecret.SetString(keyString);\n \n     if (!fGood) {\n-        //TODO\n-        //this should never happen as is prevalidated!\n-        // Just need to log error\n+        OutputDebugStringF(\"Invalid key passed to ImportPrivateKey\\n\");\n+        wallet->NotifyChainBlocksScanned.disconnect(boost::bind(&NotifyChainBlocksScanned, this, _1, _2));\n         return false;\n     }\n \n@@ -393,20 +410,23 @@ bool WalletModel::ImportPrivateKey(string keyString, string label)\n     CSecret secret = vchSecret.GetSecret(fCompressed);\n     key.SetSecret(secret, fCompressed);\n     CKeyID vchAddress = key.GetPubKey().GetID();\n+\n+\n     {\n         LOCK2(cs_main, wallet->cs_wallet);\n \n         wallet->MarkDirty();\n         wallet->SetAddressBookName(vchAddress, label);\n \n         if (!wallet->AddKey(key)){\n-            //TODO\n-            //Handle error.\n+            OutputDebugStringF(\"Error whilst ImportPrivateKey\\n\");\n+            wallet->NotifyChainBlocksScanned.disconnect(boost::bind(&NotifyChainBlocksScanned, this, _1, _2));\n             return false;\n         }\n         //update GUI with progress?\n         wallet->ScanForWalletTransactions(pindexGenesisBlock, true);\n         wallet->ReacceptWalletTransactions();\n     }\n+    wallet->NotifyChainBlocksScanned.disconnect(boost::bind(&NotifyChainBlocksScanned, this, _1, _2));\n     return true;\n }"
      },
      {
        "sha": "3c7fbe935ccea18819fb3442448aa0e49dab08c6",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=1b75f64dbf0037befb8b2f1e8604d99637e4ef72",
        "patch": "@@ -111,6 +111,7 @@ class WalletModel : public QObject\n     UnlockContext requestUnlock();\n \n     bool ImportPrivateKey(string keyString, string label);\n+    void EmitBlocksScanned(const int blockNumber);\n \n private:\n     CWallet *wallet;\n@@ -136,6 +137,7 @@ class WalletModel : public QObject\n     void unsubscribeFromCoreSignals();\n     void checkBalanceChanged();\n \n+\n signals:\n     // Signal that balance in wallet changed\n     void balanceChanged(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance);\n@@ -154,6 +156,8 @@ class WalletModel : public QObject\n     // Asynchronous error notification\n     void error(const QString &title, const QString &message, bool modal);\n \n+    void ScanWalletTransactionsProgress(int blockcount);\n+\n public slots:\n     /* Wallet status might have changed */\n     void updateStatus();"
      },
      {
        "sha": "12ad77f688992947a13284f9191c17c7e9888745",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=1b75f64dbf0037befb8b2f1e8604d99637e4ef72",
        "patch": "@@ -749,7 +749,7 @@ bool CWalletTx::WriteToDisk()\n int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n {\n     int ret = 0;\n-\n+    int blockNumber=0;\n     CBlockIndex* pindex = pindexStart;\n     {\n         LOCK(cs_wallet);\n@@ -763,6 +763,9 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n                     ret++;\n             }\n             pindex = pindex->pnext;\n+            if(blockNumber%1000==0)\n+                NotifyChainBlocksScanned(this, blockNumber);\n+            blockNumber++;\n         }\n     }\n     return ret;"
      },
      {
        "sha": "a159074a8fb28eef8c8914991852dd35ef3adf6d",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b75f64dbf0037befb8b2f1e8604d99637e4ef72/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=1b75f64dbf0037befb8b2f1e8604d99637e4ef72",
        "patch": "@@ -302,6 +302,11 @@ class CWallet : public CCryptoKeyStore\n      * @note called with lock cs_wallet held.\n      */\n     boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx, ChangeType status)> NotifyTransactionChanged;\n+\n+    /** 1 sec has passed during scanning for scanforwallettransactions.\n+     * @note called with lock cs_wallet held.\n+     */\n+    boost::signals2::signal<void (CWallet *wallet, const int blockNumber)> NotifyChainBlocksScanned;\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "7854a045d85aed28a1d5413055b2e3bf9820815b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODU0YTA0NWQ4NWFlZDI4YTFkNTQxMzA1NWIyZTNiZjk4MjA4MTVi",
    "commit": {
      "author": {
        "name": "Robin Owens",
        "email": "robin.owens@rowit.co.uk",
        "date": "2012-11-28T19:46:14Z"
      },
      "committer": {
        "name": "Robin Owens",
        "email": "robin.owens@rowit.co.uk",
        "date": "2012-11-28T19:46:14Z"
      },
      "message": "changing progress to display number of blocks\nadding in code to unlock wallet if required",
      "tree": {
        "sha": "207b41996dd363fb6fb094ce5fe363189d7b1c2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/207b41996dd363fb6fb094ce5fe363189d7b1c2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7854a045d85aed28a1d5413055b2e3bf9820815b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7854a045d85aed28a1d5413055b2e3bf9820815b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7854a045d85aed28a1d5413055b2e3bf9820815b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7854a045d85aed28a1d5413055b2e3bf9820815b/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "1b75f64dbf0037befb8b2f1e8604d99637e4ef72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b75f64dbf0037befb8b2f1e8604d99637e4ef72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b75f64dbf0037befb8b2f1e8604d99637e4ef72"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 54,
      "deletions": 17
    },
    "files": [
      {
        "sha": "833ea9e6742506dc9bae8b6348659e841aa368ca",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7854a045d85aed28a1d5413055b2e3bf9820815b/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7854a045d85aed28a1d5413055b2e3bf9820815b/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=7854a045d85aed28a1d5413055b2e3bf9820815b",
        "patch": "@@ -262,7 +262,8 @@ void BitcoinGUI::createActions()\n     encryptWalletAction->setStatusTip(tr(\"Encrypt the private keys that belong to your wallet\"));\n     encryptWalletAction->setCheckable(true);\n     importPrivateKeyAction = new QAction(QIcon(\":/icons/key\"), tr(\"&Import Private Key...\"), this);\n-    importPrivateKeyAction->setStatusTip(tr(\"Import Private Key into your wallet\"));\n+    importPrivateKeyAction->setStatusTip(tr(\"Import private key into wallet.\"));\n+    importPrivateKeyAction->setEnabled(true);\n     backupWalletAction = new QAction(QIcon(\":/icons/filesave\"), tr(\"&Backup Wallet...\"), this);\n     backupWalletAction->setStatusTip(tr(\"Backup wallet to another location\"));\n     changePassphraseAction = new QAction(QIcon(\":/icons/key\"), tr(\"&Change Passphrase...\"), this);\n@@ -818,7 +819,7 @@ void BitcoinGUI::setEncryptionStatus(int status)\n         changePassphraseAction->setEnabled(false);\n         encryptWalletAction->setEnabled(true);\n \n-        importPrivateKeyAction->setEnabled(true);\n+\n         break;\n     case WalletModel::Unlocked:\n         labelEncryptionIcon->show();\n@@ -827,7 +828,6 @@ void BitcoinGUI::setEncryptionStatus(int status)\n         encryptWalletAction->setChecked(true);\n         changePassphraseAction->setEnabled(true);\n         encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported\n-        importPrivateKeyAction->setEnabled(true);\n         break;\n     case WalletModel::Locked:\n         labelEncryptionIcon->show();\n@@ -837,7 +837,7 @@ void BitcoinGUI::setEncryptionStatus(int status)\n         changePassphraseAction->setEnabled(true);\n         encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported\n \n-        importPrivateKeyAction->setEnabled(false);\n+\n         break;\n     }\n }"
      },
      {
        "sha": "3fda1252a134bcc5ec645539e1c59bb54a53f89c",
        "filename": "src/qt/forms/importprivatekeydialog.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7854a045d85aed28a1d5413055b2e3bf9820815b/src/qt/forms/importprivatekeydialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7854a045d85aed28a1d5413055b2e3bf9820815b/src/qt/forms/importprivatekeydialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/importprivatekeydialog.ui?ref=7854a045d85aed28a1d5413055b2e3bf9820815b",
        "patch": "@@ -70,7 +70,7 @@\n    <item>\n     <widget class=\"QLabel\" name=\"warningLabel\">\n      <property name=\"text\">\n-      <string>Enter the private key and a label to import key into wallet. This process can take a minute or 2 to complete.</string>\n+      <string>Enter the private key and a label to import key into wallet. This process can take a few minutes to complete.</string>\n      </property>\n      <property name=\"textFormat\">\n       <enum>Qt::RichText</enum>\n@@ -148,7 +148,7 @@\n       </widget>\n      </item>\n      <item row=\"0\" column=\"5\">\n-      <widget class=\"QDialogButtonBox\" name=\"buttonBox_2\">\n+      <widget class=\"QDialogButtonBox\" name=\"cancelButton\">\n        <property name=\"standardButtons\">\n         <set>QDialogButtonBox::Cancel</set>\n        </property>"
      },
      {
        "sha": "cea008faa80593837acfd392e12590b167e84dcc",
        "filename": "src/qt/forms/progressdialog.ui",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7854a045d85aed28a1d5413055b2e3bf9820815b/src/qt/forms/progressdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7854a045d85aed28a1d5413055b2e3bf9820815b/src/qt/forms/progressdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/progressdialog.ui?ref=7854a045d85aed28a1d5413055b2e3bf9820815b",
        "patch": "@@ -2,6 +2,9 @@\n <ui version=\"4.0\">\n  <class>ProgressDialog</class>\n  <widget class=\"QDialog\" name=\"ProgressDialog\">\n+  <property name=\"windowModality\">\n+   <enum>Qt::WindowModal</enum>\n+  </property>\n   <property name=\"geometry\">\n    <rect>\n     <x>0</x>\n@@ -11,7 +14,7 @@\n    </rect>\n   </property>\n   <property name=\"windowTitle\">\n-   <string>Dialog</string>\n+   <string>Block Scan Progress</string>\n   </property>\n   <widget class=\"QProgressBar\" name=\"progressBar\">\n    <property name=\"geometry\">\n@@ -25,6 +28,9 @@\n    <property name=\"value\">\n     <number>0</number>\n    </property>\n+   <property name=\"format\">\n+    <string>%v out of %m</string>\n+   </property>\n   </widget>\n   <widget class=\"QLabel\" name=\"label\">\n    <property name=\"geometry\">"
      },
      {
        "sha": "ae8ea757cec1e0d7212d95a34771c72ed3661fba",
        "filename": "src/qt/importprivatekeydialog.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7854a045d85aed28a1d5413055b2e3bf9820815b/src/qt/importprivatekeydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7854a045d85aed28a1d5413055b2e3bf9820815b/src/qt/importprivatekeydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/importprivatekeydialog.cpp?ref=7854a045d85aed28a1d5413055b2e3bf9820815b",
        "patch": "@@ -3,7 +3,8 @@\n #include \"walletmodel.h\"\n #include \"progressdialog.h\"\n #include \"base58.h\"\n- #include <QValidator>\n+#include <QValidator>\n+#include <QMessageBox>\n #include \"version.h\"\n using namespace std;\n \n@@ -59,12 +60,22 @@ ImportPrivateKeyDialog::~ImportPrivateKeyDialog()\n \n void ImportPrivateKeyDialog::on_buttonBox_accepted()\n {\n+    WalletModel::UnlockContext ctx(model->requestUnlock());\n+    if(!ctx.isValid())\n+    {\n+        QMessageBox::critical(this, windowTitle(),\n+            tr(\"Could not unlock wallet. Key not imported.\"),\n+            QMessageBox::Ok, QMessageBox::Ok);\n+        return;\n+    }\n+\n     //Import the key...\n     string strSecret = ui->privateKeyEdit1->text().toStdString();\n     string strLabel = ui->addressLabelEdit->text().toStdString();\n \n     //TODO handle errors returned.\n     ProgressDialog prgdlg(this);\n+    prgdlg.setMax(model->getNumBlocks());\n     prgdlg.setModal (true );\n     prgdlg.show();\n     prgdlg.raise();\n@@ -82,3 +93,8 @@ void ImportPrivateKeyDialog::on_privateKeyEdit1_textChanged(const QString &arg1)\n     ui->buttonBox->setEnabled(\n         ui->privateKeyEdit1->hasAcceptableInput ());\n }\n+\n+void ImportPrivateKeyDialog::on_cancelButton_accepted()\n+{\n+    close();\n+}"
      },
      {
        "sha": "12207c0d464c2aa997d6e93a986a9c7b53e27063",
        "filename": "src/qt/importprivatekeydialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7854a045d85aed28a1d5413055b2e3bf9820815b/src/qt/importprivatekeydialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7854a045d85aed28a1d5413055b2e3bf9820815b/src/qt/importprivatekeydialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/importprivatekeydialog.h?ref=7854a045d85aed28a1d5413055b2e3bf9820815b",
        "patch": "@@ -41,6 +41,8 @@ private slots:\n \n \n     void on_privateKeyEdit1_textChanged(const QString &arg1);\n+\n+    void on_cancelButton_accepted();\n };\n \n #endif // IMPORTPRIVATEKEYDIALOG_H"
      },
      {
        "sha": "a8b503352a3f5a7258fa4643fd832d0551c6f363",
        "filename": "src/qt/progressdialog.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7854a045d85aed28a1d5413055b2e3bf9820815b/src/qt/progressdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7854a045d85aed28a1d5413055b2e3bf9820815b/src/qt/progressdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/progressdialog.cpp?ref=7854a045d85aed28a1d5413055b2e3bf9820815b",
        "patch": "@@ -13,7 +13,13 @@ ProgressDialog::~ProgressDialog()\n     delete ui;\n }\n \n-void ProgressDialog::UpdateProgress(int percent)\n+void ProgressDialog::UpdateProgress(int v)\n {\n-    ui->progressBar->setValue(percent);\n+    ui->progressBar->setValue(v);\n }\n+\n+void ProgressDialog::setMax(int m)\n+{\n+    ui->progressBar->setMaximum(m);\n+}\n+"
      },
      {
        "sha": "34bece2beacb19e99cecdb88bc95c05935ffbbde",
        "filename": "src/qt/progressdialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7854a045d85aed28a1d5413055b2e3bf9820815b/src/qt/progressdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7854a045d85aed28a1d5413055b2e3bf9820815b/src/qt/progressdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/progressdialog.h?ref=7854a045d85aed28a1d5413055b2e3bf9820815b",
        "patch": "@@ -10,16 +10,18 @@ class ProgressDialog;\n class ProgressDialog : public QDialog\n {\n     Q_OBJECT\n+\n     \n public:\n     explicit ProgressDialog(QWidget *parent = 0);\n     ~ProgressDialog();\n+    void setMax(int m);\n     \n private:\n     Ui::ProgressDialog *ui;\n \n public slots:\n-    void UpdateProgress(int percent);\n+    void UpdateProgress(int v);\n \n };\n "
      },
      {
        "sha": "4ad797950793581b1c0fcec98e8dca58f45c1d12",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7854a045d85aed28a1d5413055b2e3bf9820815b/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7854a045d85aed28a1d5413055b2e3bf9820815b/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=7854a045d85aed28a1d5413055b2e3bf9820815b",
        "patch": "@@ -385,11 +385,14 @@ static void NotifyChainBlocksScanned(WalletModel *walletmodel, CWallet *wallet,\n \n void WalletModel::EmitBlocksScanned(int blockNumber)\n {\n-    if (blockNumber==0)\n-        blockNumber=1;\n+//    if (blockNumber==0)\n+//      blockNumber=1;\n+    emit ScanWalletTransactionsProgress(blockNumber);\n+}\n \n-    int percent=blockNumber*100/nBestHeight;\n-    emit ScanWalletTransactionsProgress(percent);\n+int WalletModel::getNumBlocks()\n+{\n+    return nBestHeight;\n }\n \n bool WalletModel::ImportPrivateKey(string keyString, string label)"
      },
      {
        "sha": "c0fd0268800bb372a57e41526abcb1271fd3487e",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7854a045d85aed28a1d5413055b2e3bf9820815b/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7854a045d85aed28a1d5413055b2e3bf9820815b/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=7854a045d85aed28a1d5413055b2e3bf9820815b",
        "patch": "@@ -112,6 +112,7 @@ class WalletModel : public QObject\n \n     bool ImportPrivateKey(string keyString, string label);\n     void EmitBlocksScanned(const int blockNumber);\n+    int getNumBlocks();\n \n private:\n     CWallet *wallet;"
      },
      {
        "sha": "ac1393ff95243850e950a34f5a2c7f318c38c892",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7854a045d85aed28a1d5413055b2e3bf9820815b/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7854a045d85aed28a1d5413055b2e3bf9820815b/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=7854a045d85aed28a1d5413055b2e3bf9820815b",
        "patch": "@@ -763,7 +763,8 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n                     ret++;\n             }\n             pindex = pindex->pnext;\n-            if(blockNumber%1000==0)\n+            if(blockNumber%100==0 ||\n+               (blockNumber%10==0 && blockNumber>150000))\n                 NotifyChainBlocksScanned(this, blockNumber);\n             blockNumber++;\n         }"
      },
      {
        "sha": "e0e46a7678f60837bb5e1c9dd815b6f313b16079",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7854a045d85aed28a1d5413055b2e3bf9820815b/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7854a045d85aed28a1d5413055b2e3bf9820815b/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=7854a045d85aed28a1d5413055b2e3bf9820815b",
        "patch": "@@ -303,7 +303,7 @@ class CWallet : public CCryptoKeyStore\n      */\n     boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx, ChangeType status)> NotifyTransactionChanged;\n \n-    /** 1 sec has passed during scanning for scanforwallettransactions.\n+    /** 100 blocks scanned during scanforwallettransactions.\n      * @note called with lock cs_wallet held.\n      */\n     boost::signals2::signal<void (CWallet *wallet, const int blockNumber)> NotifyChainBlocksScanned;"
      }
    ]
  },
  {
    "sha": "1e84f9794d07e234344c71b177906b0b2dac543b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTg0Zjk3OTRkMDdlMjM0MzQ0YzcxYjE3NzkwNmIwYjJkYWM1NDNi",
    "commit": {
      "author": {
        "name": "Robin Owens",
        "email": "robin.owens@rowit.co.uk",
        "date": "2012-11-28T21:05:19Z"
      },
      "committer": {
        "name": "Robin Owens",
        "email": "robin.owens@rowit.co.uk",
        "date": "2012-11-28T21:05:19Z"
      },
      "message": "Merge remote-tracking branch 'origin/master' into importprivatekey\n\nConflicts:\n\tsrc/qt/bitcoingui.cpp",
      "tree": {
        "sha": "0010703aa2c73d7e7e1714c228c05960ac0ed38c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0010703aa2c73d7e7e1714c228c05960ac0ed38c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e84f9794d07e234344c71b177906b0b2dac543b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e84f9794d07e234344c71b177906b0b2dac543b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e84f9794d07e234344c71b177906b0b2dac543b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e84f9794d07e234344c71b177906b0b2dac543b/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7854a045d85aed28a1d5413055b2e3bf9820815b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7854a045d85aed28a1d5413055b2e3bf9820815b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7854a045d85aed28a1d5413055b2e3bf9820815b"
      },
      {
        "sha": "5c37be2db6177b8e6a4990b2efddcbac46b14a3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c37be2db6177b8e6a4990b2efddcbac46b14a3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c37be2db6177b8e6a4990b2efddcbac46b14a3f"
      }
    ],
    "stats": {
      "total": 361,
      "additions": 211,
      "deletions": 150
    },
    "files": [
      {
        "sha": "481ceb9f40e73584de73a9de99cd62832f7e767a",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -769,7 +769,7 @@ void ThreadRPCServer2(void* parg)\n                 strWhatAmI.c_str(),\n                 GetConfigFile().string().c_str(),\n                 EncodeBase58(&rand_pwd[0],&rand_pwd[0]+32).c_str()),\n-            _(\"Error\"), CClientUIInterface::OK | CClientUIInterface::MODAL);\n+                \"\", CClientUIInterface::MSG_ERROR);\n         StartShutdown();\n         return;\n     }\n@@ -860,7 +860,7 @@ void ThreadRPCServer2(void* parg)\n     }\n \n     if (!fListening) {\n-        uiInterface.ThreadSafeMessageBox(strerr, _(\"Error\"), CClientUIInterface::OK | CClientUIInterface::MODAL);\n+        uiInterface.ThreadSafeMessageBox(strerr, \"\", CClientUIInterface::MSG_ERROR);\n         StartShutdown();\n         return;\n     }"
      },
      {
        "sha": "94629f3cadbccc55e586d68917534059794ab2a0",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -38,11 +38,13 @@ void CDBEnv::EnvShutdown()\n     if (ret != 0)\n         printf(\"EnvShutdown exception: %s (%d)\\n\", DbEnv::strerror(ret), ret);\n     if (!fMockDb)\n-        DbEnv(0).remove(GetDataDir().string().c_str(), 0);\n+        DbEnv(0).remove(strPath.c_str(), 0);\n }\n \n CDBEnv::CDBEnv() : dbenv(DB_CXX_NO_EXCEPTIONS)\n {\n+    fDbEnvInit = false;\n+    fMockDb = false;\n }\n \n CDBEnv::~CDBEnv()\n@@ -63,6 +65,7 @@ bool CDBEnv::Open(const boost::filesystem::path& path)\n     if (fShutdown)\n         return false;\n \n+    strPath = path.string();\n     filesystem::path pathLogDir = path / \"database\";\n     filesystem::create_directory(pathLogDir);\n     filesystem::path pathErrorFile = path / \"db.log\";\n@@ -83,7 +86,7 @@ bool CDBEnv::Open(const boost::filesystem::path& path)\n     dbenv.set_flags(DB_AUTO_COMMIT, 1);\n     dbenv.set_flags(DB_TXN_WRITE_NOSYNC, 1);\n     dbenv.log_set_config(DB_LOG_AUTO_REMOVE, 1);\n-    int ret = dbenv.open(path.string().c_str(),\n+    int ret = dbenv.open(strPath.c_str(),\n                      DB_CREATE     |\n                      DB_INIT_LOCK  |\n                      DB_INIT_LOG   |"
      },
      {
        "sha": "9c01060a1c9f4f2a920f30690ead0544dadba8a9",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -33,6 +33,7 @@ class CDBEnv\n private:\n     bool fDbEnvInit;\n     bool fMockDb;\n+    std::string strPath;\n \n     void EnvShutdown();\n "
      },
      {
        "sha": "e0fbb3133858e3b2ec47fa9663467586c25f5517",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -2,13 +2,15 @@\n // Copyright (c) 2009-2012 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #include \"txdb.h\"\n #include \"walletdb.h\"\n #include \"bitcoinrpc.h\"\n #include \"net.h\"\n #include \"init.h\"\n #include \"util.h\"\n #include \"ui_interface.h\"\n+\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n #include <boost/filesystem/convenience.hpp>\n@@ -209,17 +211,16 @@ int main(int argc, char* argv[])\n \n bool static InitError(const std::string &str)\n {\n-    uiInterface.ThreadSafeMessageBox(str, _(\"Bitcoin\"), CClientUIInterface::OK | CClientUIInterface::MODAL);\n+    uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_ERROR);\n     return false;\n }\n \n bool static InitWarning(const std::string &str)\n {\n-    uiInterface.ThreadSafeMessageBox(str, _(\"Bitcoin\"), CClientUIInterface::OK | CClientUIInterface::ICON_EXCLAMATION | CClientUIInterface::MODAL);\n+    uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_WARNING);\n     return true;\n }\n \n-\n bool static Bind(const CService &addr, unsigned int flags) {\n     if (!(flags & BF_EXPLICIT) && IsLimited(addr))\n         return false;\n@@ -608,7 +609,7 @@ bool AppInit2()\n                                      \" Original wallet.dat saved as wallet.{timestamp}.bak in %s; if\"\n                                      \" your balance or transactions are incorrect you should\"\n                                      \" restore from a backup.\"), strDataDir.c_str());\n-            uiInterface.ThreadSafeMessageBox(msg, _(\"Bitcoin\"), CClientUIInterface::OK | CClientUIInterface::ICON_EXCLAMATION | CClientUIInterface::MODAL);\n+            InitWarning(msg);\n         }\n         if (r == CDBEnv::RECOVER_FAIL)\n             return InitError(_(\"wallet.dat corrupt, salvage failed\"));\n@@ -808,7 +809,7 @@ bool AppInit2()\n         {\n             string msg(_(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"\n                          \" or address book entries might be missing or incorrect.\"));\n-            uiInterface.ThreadSafeMessageBox(msg, _(\"Bitcoin\"), CClientUIInterface::OK | CClientUIInterface::ICON_EXCLAMATION | CClientUIInterface::MODAL);\n+            InitWarning(msg);\n         }\n         else if (nLoadWalletRet == DB_TOO_NEW)\n             strErrors << _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin\") << \"\\n\";\n@@ -914,7 +915,7 @@ bool AppInit2()\n \n     //// debug print\n     printf(\"mapBlockIndex.size() = %\"PRIszu\"\\n\",   mapBlockIndex.size());\n-    printf(\"nBestHeight = %d\\n\",            nBestHeight);\n+    printf(\"nBestHeight = %d\\n\",                   nBestHeight);\n     printf(\"setKeyPool.size() = %\"PRIszu\"\\n\",      pwalletMain->setKeyPool.size());\n     printf(\"mapWallet.size() = %\"PRIszu\"\\n\",       pwalletMain->mapWallet.size());\n     printf(\"mapAddressBook.size() = %\"PRIszu\"\\n\",  pwalletMain->mapAddressBook.size());"
      },
      {
        "sha": "8279924a3c5d49732a5fae56639d957c34e6e372",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -998,21 +998,16 @@ CBlockIndex* FindBlockByHeight(int nHeight)\n     return pblockindex;\n }\n \n-bool CBlock::ReadFromDisk(const CBlockIndex* pindex, bool fReadTransactions)\n+bool CBlock::ReadFromDisk(const CBlockIndex* pindex)\n {\n-    if (!fReadTransactions)\n-    {\n-        *this = pindex->GetBlockHeader();\n-        return true;\n-    }\n-    if (!ReadFromDisk(pindex->GetBlockPos(), fReadTransactions))\n+    if (!ReadFromDisk(pindex->GetBlockPos()))\n         return false;\n     if (GetHash() != pindex->GetBlockHash())\n         return error(\"CBlock::ReadFromDisk() : GetHash() doesn't match index\");\n     return true;\n }\n \n-uint256 static GetOrphanRoot(const CBlock* pblock)\n+uint256 static GetOrphanRoot(const CBlockHeader* pblock)\n {\n     // Work back to the first block in the orphan chain\n     while (mapOrphanBlocks.count(pblock->hashPrevBlock))\n@@ -1059,7 +1054,7 @@ unsigned int ComputeMinWork(unsigned int nBase, int64 nTime)\n     return bnResult.GetCompact();\n }\n \n-unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlock *pblock)\n+unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock)\n {\n     unsigned int nProofOfWorkLimit = bnProofOfWorkLimit.GetCompact();\n \n@@ -1198,7 +1193,7 @@ bool ConnectBestBlock() {\n             pindexNewBest = *it;\n         }\n \n-        if (pindexNewBest == pindexBest)\n+        if (pindexNewBest == pindexBest || (pindexBest && pindexNewBest->bnChainWork == pindexBest->bnChainWork))\n             return true; // nothing to do\n \n         // check ancestry\n@@ -1233,7 +1228,7 @@ bool ConnectBestBlock() {\n     } while(true);\n }\n \n-void CBlock::UpdateTime(const CBlockIndex* pindexPrev)\n+void CBlockHeader::UpdateTime(const CBlockIndex* pindexPrev)\n {\n     nTime = max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n \n@@ -2202,10 +2197,10 @@ bool CheckDiskSpace(uint64 nAdditionalBytes)\n     if (nFreeBytesAvailable < nMinDiskSpace + nAdditionalBytes)\n     {\n         fShutdown = true;\n-        string strMessage = _(\"Warning: Disk space is low!\");\n+        string strMessage = _(\"Error: Disk space is low!\");\n         strMiscWarning = strMessage;\n         printf(\"*** %s\\n\", strMessage.c_str());\n-        uiInterface.ThreadSafeMessageBox(strMessage, \"Bitcoin\", CClientUIInterface::OK | CClientUIInterface::ICON_EXCLAMATION | CClientUIInterface::MODAL);\n+        uiInterface.ThreadSafeMessageBox(strMessage, \"\", CClientUIInterface::MSG_ERROR);\n         StartShutdown();\n         return false;\n     }\n@@ -3072,6 +3067,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                 pindex = pindex->pnext;\n         }\n \n+        // we must use CBlocks, as CBlockHeaders won't include the 0x00 nTx count at the end\n         vector<CBlock> vHeaders;\n         int nLimit = 2000;\n         printf(\"getheaders %d to %s\\n\", (pindex ? pindex->nHeight : -1), BlockHashStr(hashStop).c_str());\n@@ -3685,7 +3681,6 @@ class TxPriorityCompare\n \n CBlock* CreateNewBlock(CReserveKey& reservekey)\n {\n-\n     // Create new block\n     auto_ptr<CBlock> pblock(new CBlock());\n     if (!pblock.get())"
      },
      {
        "sha": "a5f60fe9453e80e5ebf02c9a99322b493179e7cc",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 47,
        "deletions": 30,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -1071,7 +1071,7 @@ class CMerkleTx : public CTransaction\n  * in the block is a special one that creates a new coin owned by the creator\n  * of the block.\n  */\n-class CBlock\n+class CBlockHeader\n {\n public:\n     // header\n@@ -1083,17 +1083,7 @@ class CBlock\n     unsigned int nBits;\n     unsigned int nNonce;\n \n-    // network and disk\n-    std::vector<CTransaction> vtx;\n-\n-    // memory only\n-    mutable std::vector<uint256> vMerkleTree;\n-\n-    // Denial-of-service detection:\n-    mutable int nDoS;\n-    bool DoS(int nDoSIn, bool fIn) const { nDoS += nDoSIn; return fIn; }\n-\n-    CBlock()\n+    CBlockHeader()\n     {\n         SetNull();\n     }\n@@ -1107,25 +1097,16 @@ class CBlock\n         READWRITE(nTime);\n         READWRITE(nBits);\n         READWRITE(nNonce);\n-\n-        // ConnectBlock depends on vtx being last so it can calculate offset\n-        if (!(nType & (SER_GETHASH|SER_BLOCKHEADERONLY)))\n-            READWRITE(vtx);\n-        else if (fRead)\n-            const_cast<CBlock*>(this)->vtx.clear();\n     )\n \n     void SetNull()\n     {\n-        nVersion = CBlock::CURRENT_VERSION;\n+        nVersion = CBlockHeader::CURRENT_VERSION;\n         hashPrevBlock = 0;\n         hashMerkleRoot = 0;\n         nTime = 0;\n         nBits = 0;\n         nNonce = 0;\n-        vtx.clear();\n-        vMerkleTree.clear();\n-        nDoS = 0;\n     }\n \n     bool IsNull() const\n@@ -1144,7 +1125,45 @@ class CBlock\n     }\n \n     void UpdateTime(const CBlockIndex* pindexPrev);\n+};\n+\n+class CBlock : public CBlockHeader\n+{\n+public:\n+    // network and disk\n+    std::vector<CTransaction> vtx;\n+\n+    // memory only\n+    mutable std::vector<uint256> vMerkleTree;\n \n+    // Denial-of-service detection:\n+    mutable int nDoS;\n+    bool DoS(int nDoSIn, bool fIn) const { nDoS += nDoSIn; return fIn; }\n+\n+    CBlock()\n+    {\n+        SetNull();\n+    }\n+\n+    CBlock(const CBlockHeader &header)\n+    {\n+        SetNull();\n+        *((CBlockHeader*)this) = header;\n+    }\n+\n+    IMPLEMENT_SERIALIZE\n+    (\n+        READWRITE(*(CBlockHeader*)this);\n+        READWRITE(vtx);\n+    )\n+\n+    void SetNull()\n+    {\n+        CBlockHeader::SetNull();\n+        vtx.clear();\n+        vMerkleTree.clear();\n+        nDoS = 0;\n+    }\n \n     uint256 BuildMerkleTree() const\n     {\n@@ -1229,16 +1248,14 @@ class CBlock\n         return true;\n     }\n \n-    bool ReadFromDisk(const CDiskBlockPos &pos, bool fReadTransactions = true)\n+    bool ReadFromDisk(const CDiskBlockPos &pos)\n     {\n         SetNull();\n \n         // Open history file to read\n         CAutoFile filein = CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n         if (!filein)\n             return error(\"CBlock::ReadFromDisk() : OpenBlockFile failed\");\n-        if (!fReadTransactions)\n-            filein.nType |= SER_BLOCKHEADERONLY;\n \n         // Read block\n         try {\n@@ -1285,7 +1302,7 @@ class CBlock\n     bool ConnectBlock(CBlockIndex *pindex, CCoinsViewCache &coins, bool fJustCheck=false);\n \n     // Read a block from disk\n-    bool ReadFromDisk(const CBlockIndex* pindex, bool fReadTransactions=true);\n+    bool ReadFromDisk(const CBlockIndex* pindex);\n \n     // Add this block to the block index, and if necessary, switch the active block chain to this\n     bool AddToBlockIndex(const CDiskBlockPos &pos);\n@@ -1450,7 +1467,7 @@ class CBlockIndex\n         nNonce         = 0;\n     }\n \n-    CBlockIndex(CBlock& block)\n+    CBlockIndex(CBlockHeader& block)\n     {\n         phashBlock = NULL;\n         pprev = NULL;\n@@ -1491,9 +1508,9 @@ class CBlockIndex\n         return ret;\n     }\n \n-    CBlock GetBlockHeader() const\n+    CBlockHeader GetBlockHeader() const\n     {\n-        CBlock block;\n+        CBlockHeader block;\n         block.nVersion       = nVersion;\n         if (pprev)\n             block.hashPrevBlock = pprev->GetBlockHash();\n@@ -1637,7 +1654,7 @@ class CDiskBlockIndex : public CBlockIndex\n \n     uint256 GetBlockHash() const\n     {\n-        CBlock block;\n+        CBlockHeader block;\n         block.nVersion        = nVersion;\n         block.hashPrevBlock   = hashPrev;\n         block.hashMerkleRoot  = hashMerkleRoot;"
      },
      {
        "sha": "47dc7c5c40130cc5041a57acd3c83edc0b637348",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -92,7 +92,7 @@ LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a\n DEFS += -I\"$(CURDIR)/leveldb/include\"\n DEFS += -I\"$(CURDIR)/leveldb/helpers\"\n leveldb/libleveldb.a:\n-\t@echo \"Building LevelDB ...\" && cd leveldb && CC=i586-mingw32msvc-gcc CXX=i586-mingw32msvc-g++ TARGET_OS=OS_WINDOWS_CROSSCOMPILE CXXFLAGS=\"-I$(INCLUDEPATHS)\" LDFLAGS=\"-L$(LIBPATHS)\" make libleveldb.a libmemenv.a && i586-mingw32msvc-ranlib libleveldb.a && i586-mingw32msvc-ranlib libmemenv.a && cd ..\n+\t@echo \"Building LevelDB ...\" && cd leveldb && CC=i586-mingw32msvc-gcc CXX=i586-mingw32msvc-g++ TARGET_OS=OS_WINDOWS_CROSSCOMPILE CXXFLAGS=\"-I$(INCLUDEPATHS)\" LDFLAGS=\"-L$(LIBPATHS)\" $(MAKE) libleveldb.a libmemenv.a && i586-mingw32msvc-ranlib libleveldb.a && i586-mingw32msvc-ranlib libmemenv.a && cd ..\n obj/leveldb.o: leveldb/libleveldb.a\n \n obj/build.h: FORCE"
      },
      {
        "sha": "fd61d4470933da67525288ee8f61a80729c35b04",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -96,7 +96,7 @@ DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)\n DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)\n # TODO: If this fails, try adding a ranlib libleveldb.a && ranlib libmemenv.a\n leveldb/libleveldb.a:\n-\tcd leveldb && make libleveldb.a libmemenv.a && cd ..\n+\tcd leveldb && $(MAKE) libleveldb.a libmemenv.a && cd ..\n obj/leveldb.o: leveldb/libleveldb.lib\n \n obj/%.o: %.cpp $(HEADERS)"
      },
      {
        "sha": "25164c867934f9172d9bf7b59e539b3d1611eb44",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -128,7 +128,7 @@ LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a\n DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)\n DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)\n leveldb/libleveldb.a:\n-\t@echo \"Building LevelDB ...\" && cd leveldb && make libleveldb.a libmemenv.a && cd ..\n+\t@echo \"Building LevelDB ...\" && cd leveldb && $(MAKE) libleveldb.a libmemenv.a && cd ..\n obj/leveldb.o: leveldb/libleveldb.a\n \n # auto-generated dependencies:"
      },
      {
        "sha": "9e17e8ace228f7080cbf49ae363335b7476bdb58",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -144,7 +144,7 @@ LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a\n DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)\n DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)\n leveldb/libleveldb.a:\n-\t@echo \"Building LevelDB ...\" && cd leveldb && make libleveldb.a libmemenv.a && cd ..\n+\t@echo \"Building LevelDB ...\" && cd leveldb && $(MAKE) libleveldb.a libmemenv.a && cd ..\n obj/leveldb.o: leveldb/libleveldb.a\n \n # auto-generated dependencies:"
      },
      {
        "sha": "ba2b1aab4df4c66b305c227594f0316e5ea4a011",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -2,16 +2,33 @@\n // Copyright (c) 2009-2012 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #include \"ui_interface.h\"\n #include \"init.h\"\n #include \"bitcoinrpc.h\"\n \n #include <string>\n \n-static int noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style)\n+static int noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n {\n+    std::string strCaption;\n+    // Check for usage of predefined caption\n+    switch (style) {\n+    case CClientUIInterface::MSG_ERROR:\n+        strCaption += _(\"Error\");\n+        break;\n+    case CClientUIInterface::MSG_WARNING:\n+        strCaption += _(\"Warning\");\n+        break;\n+    case CClientUIInterface::MSG_INFORMATION:\n+        strCaption += _(\"Information\");\n+        break;\n+    default:\n+        strCaption += caption; // Use supplied caption\n+    }\n+\n     printf(\"%s: %s\\n\", caption.c_str(), message.c_str());\n-    fprintf(stderr, \"%s: %s\\n\", caption.c_str(), message.c_str());\n+    fprintf(stderr, \"%s: %s\\n\", strCaption.c_str(), message.c_str());\n     return 4;\n }\n "
      },
      {
        "sha": "d64114e1315507750aa1084d57fddb71f72a42f2",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -7,7 +7,6 @@\n #include \"optionsmodel.h\"\n #include \"guiutil.h\"\n #include \"guiconstants.h\"\n-\n #include \"init.h\"\n #include \"ui_interface.h\"\n #include \"qtipcserver.h\"\n@@ -35,18 +34,19 @@ Q_IMPORT_PLUGIN(qtaccessiblewidgets)\n static BitcoinGUI *guiref;\n static QSplashScreen *splashref;\n \n-static void ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style)\n+static void ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n {\n     // Message from network thread\n     if(guiref)\n     {\n         bool modal = (style & CClientUIInterface::MODAL);\n-        // in case of modal message, use blocking connection to wait for user to click OK\n-        QMetaObject::invokeMethod(guiref, \"error\",\n+        // In case of modal message, use blocking connection to wait for user to click a button\n+        QMetaObject::invokeMethod(guiref, \"message\",\n                                    modal ? GUIUtil::blockingGUIThreadConnection() : Qt::QueuedConnection,\n                                    Q_ARG(QString, QString::fromStdString(caption)),\n                                    Q_ARG(QString, QString::fromStdString(message)),\n-                                   Q_ARG(bool, modal));\n+                                   Q_ARG(bool, modal),\n+                                   Q_ARG(unsigned int, style));\n     }\n     else\n     {"
      },
      {
        "sha": "53a764463b43286b2dac4e243a3f2ac1b89ece5a",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 11,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -26,6 +26,7 @@\n #include \"guiutil.h\"\n #include \"rpcconsole.h\"\n #include \"importprivatekeydialog.h\"\n+#include \"ui_interface.h\"\n \n #ifdef Q_OS_MAC\n #include \"macdockiconhandler.h\"\n@@ -373,8 +374,8 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n         setNumBlocks(clientModel->getNumBlocks(), clientModel->getNumBlocksOfPeers());\n         connect(clientModel, SIGNAL(numBlocksChanged(int,int)), this, SLOT(setNumBlocks(int,int)));\n \n-        // Report errors from network/worker thread\n-        connect(clientModel, SIGNAL(error(QString,QString,bool)), this, SLOT(error(QString,QString,bool)));\n+        // Receive and report messages from network/worker thread\n+        connect(clientModel, SIGNAL(message(QString,QString,bool,unsigned int)), this, SLOT(message(QString,QString,bool,unsigned int)));\n \n         overviewPage->setClientModel(clientModel);\n         rpcConsole->setClientModel(clientModel);\n@@ -388,8 +389,8 @@ void BitcoinGUI::setWalletModel(WalletModel *walletModel)\n     this->walletModel = walletModel;\n     if(walletModel)\n     {\n-        // Report errors from wallet thread\n-        connect(walletModel, SIGNAL(error(QString,QString,bool)), this, SLOT(error(QString,QString,bool)));\n+        // Receive and report messages from wallet thread\n+        connect(walletModel, SIGNAL(message(QString,QString,bool,unsigned int)), this, SLOT(message(QString,QString,bool,unsigned int)));\n \n         // Put transaction list in tabs\n         transactionView->setModel(walletModel);\n@@ -599,15 +600,50 @@ void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n     progressBar->setToolTip(tooltip);\n }\n \n-void BitcoinGUI::error(const QString &title, const QString &message, bool modal)\n+void BitcoinGUI::message(const QString &title, const QString &message, bool modal, unsigned int style)\n {\n-    // Report errors from network/worker thread\n-    if(modal)\n-    {\n-        QMessageBox::critical(this, title, message, QMessageBox::Ok, QMessageBox::Ok);\n-    } else {\n-        notificator->notify(Notificator::Critical, title, message);\n+    QString strTitle = tr(\"Bitcoin\") + \" - \";\n+    // Default to information icon\n+    int nMBoxIcon = QMessageBox::Information;\n+    int nNotifyIcon = Notificator::Information;\n+\n+    // Check for usage of predefined title\n+    switch (style) {\n+    case CClientUIInterface::MSG_ERROR:\n+        strTitle += tr(\"Error\");\n+        break;\n+    case CClientUIInterface::MSG_WARNING:\n+        strTitle += tr(\"Warning\");\n+        break;\n+    case CClientUIInterface::MSG_INFORMATION:\n+        strTitle += tr(\"Information\");\n+        break;\n+    default:\n+        strTitle += title; // Use supplied title\n+    }\n+\n+    // Check for error/warning icon\n+    if (style & CClientUIInterface::ICON_ERROR) {\n+        nMBoxIcon = QMessageBox::Critical;\n+        nNotifyIcon = Notificator::Critical;\n+    }\n+    else if (style & CClientUIInterface::ICON_WARNING) {\n+        nMBoxIcon = QMessageBox::Warning;\n+        nNotifyIcon = Notificator::Warning;\n+    }\n+\n+    // Display message\n+    if (modal) {\n+        // Check for buttons, use OK as default, if none was supplied\n+        QMessageBox::StandardButton buttons;\n+        if (!(buttons = (QMessageBox::StandardButton)(style & CClientUIInterface::BTN_MASK)))\n+            buttons = QMessageBox::Ok;\n+\n+        QMessageBox mBox((QMessageBox::Icon)nMBoxIcon, strTitle, message, buttons);\n+        mBox.exec();\n     }\n+    else\n+        notificator->notify((Notificator::Class)nNotifyIcon, strTitle, message);\n }\n \n void BitcoinGUI::changeEvent(QEvent *e)"
      },
      {
        "sha": "611572c33c079045499aeeee62a5009e3366acad",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -120,8 +120,14 @@ public slots:\n     */\n     void setEncryptionStatus(int status);\n \n-    /** Notify the user of an error in the network or transaction handling code. */\n-    void error(const QString &title, const QString &message, bool modal);\n+    /** Notify the user of an event from the core network or transaction handling code.\n+       @param[in] title     the message box / notification title\n+       @param[in] message   the displayed text\n+       @param[in] modal     true to use a message box, false to use a notification\n+       @param[in] style     style definitions (icon and used buttons - buttons only for message boxes)\n+                            @see CClientUIInterface::MessageBoxFlags\n+    */\n+    void message(const QString &title, const QString &message, bool modal, unsigned int style);\n     /** Asks the user whether to pay the transaction fee or to cancel the transaction.\n        It is currently not possible to pass a return value to another thread through\n        BlockingQueuedConnection, so an indirected pointer is used."
      },
      {
        "sha": "f8fa4120199ffd75b5af44efb9d1140a3f6f600c",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -84,7 +84,7 @@ void ClientModel::updateAlert(const QString &hash, int status)\n         CAlert alert = CAlert::getAlertByHash(hash_256);\n         if(!alert.IsNull())\n         {\n-            emit error(tr(\"Network Alert\"), QString::fromStdString(alert.strStatusBar), false);\n+            emit message(tr(\"Network Alert\"), QString::fromStdString(alert.strStatusBar), false, CClientUIInterface::ICON_ERROR);\n         }\n     }\n "
      },
      {
        "sha": "b16b2d50041e9d4f23c6c1b7c8381eb4f65341e3",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -70,8 +70,8 @@ class ClientModel : public QObject\n     void numBlocksChanged(int count, int countOfPeers);\n     void alertsChanged(const QString &warnings);\n \n-    //! Asynchronous error notification\n-    void error(const QString &title, const QString &message, bool modal);\n+    //! Asynchronous message notification\n+    void message(const QString &title, const QString &message, bool modal, unsigned int style);\n \n public slots:\n     void updateTimer();"
      },
      {
        "sha": "7d66b6142bc46ea63b91827fe4584162500c957a",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -154,8 +154,8 @@ class WalletModel : public QObject\n     // this means that the unlocking failed or was cancelled.\n     void requireUnlock();\n \n-    // Asynchronous error notification\n-    void error(const QString &title, const QString &message, bool modal);\n+    // Asynchronous message notification\n+    void message(const QString &title, const QString &message, bool modal, unsigned int style);\n \n     void ScanWalletTransactionsProgress(int blockcount);\n "
      },
      {
        "sha": "5554f039a76e719668bb7d63323c58ddaaf1d4fc",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -154,7 +154,7 @@ Value getblock(const Array& params, bool fHelp)\n \n     CBlock block;\n     CBlockIndex* pblockindex = mapBlockIndex[hash];\n-    block.ReadFromDisk(pblockindex, true);\n+    block.ReadFromDisk(pblockindex);\n \n     return blockToJSON(block, pblockindex);\n }"
      },
      {
        "sha": "d597e5e3f71d16a54348cf60d21d4d8b16080396",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -1228,7 +1228,8 @@ Value backupwallet(const Array& params, bool fHelp)\n             \"Safely copies wallet.dat to destination, which can be a directory or a path with filename.\");\n \n     string strDest = params[0].get_str();\n-    BackupWallet(*pwalletMain, strDest);\n+    if (!BackupWallet(*pwalletMain, strDest))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet backup failed!\");\n \n     return Value::null;\n }"
      },
      {
        "sha": "f2626281c185886da90e3f57ef9e5b4d840a515a",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -50,10 +50,6 @@ enum\n     SER_NETWORK         = (1 << 0),\n     SER_DISK            = (1 << 1),\n     SER_GETHASH         = (1 << 2),\n-\n-    // modifiers\n-    SER_SKIPSIG         = (1 << 16),\n-    SER_BLOCKHEADERONLY = (1 << 17),\n };\n \n #define IMPLEMENT_SERIALIZE(statements)    \\"
      },
      {
        "sha": "9dfc6697c6b5771c58dae086c53660df4ea878af",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 10,
        "deletions": 30,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -37,46 +37,31 @@ class CMutexLock\n {\n private:\n     boost::unique_lock<Mutex> lock;\n-public:\n \n     void Enter(const char* pszName, const char* pszFile, int nLine)\n     {\n-        if (!lock.owns_lock())\n-        {\n-            EnterCritical(pszName, pszFile, nLine, (void*)(lock.mutex()));\n+        EnterCritical(pszName, pszFile, nLine, (void*)(lock.mutex()));\n #ifdef DEBUG_LOCKCONTENTION\n-            if (!lock.try_lock())\n-            {\n-                PrintLockContention(pszName, pszFile, nLine);\n+        if (!lock.try_lock())\n+        {\n+            PrintLockContention(pszName, pszFile, nLine);\n #endif\n-            lock.lock();\n+        lock.lock();\n #ifdef DEBUG_LOCKCONTENTION\n-            }\n-#endif\n-        }\n-    }\n-\n-    void Leave()\n-    {\n-        if (lock.owns_lock())\n-        {\n-            lock.unlock();\n-            LeaveCritical();\n         }\n+#endif\n     }\n \n     bool TryEnter(const char* pszName, const char* pszFile, int nLine)\n     {\n+        EnterCritical(pszName, pszFile, nLine, (void*)(lock.mutex()), true);\n+        lock.try_lock();\n         if (!lock.owns_lock())\n-        {\n-            EnterCritical(pszName, pszFile, nLine, (void*)(lock.mutex()), true);\n-            lock.try_lock();\n-            if (!lock.owns_lock())\n-                LeaveCritical();\n-        }\n+            LeaveCritical();\n         return lock.owns_lock();\n     }\n \n+public:\n     CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) : lock(mutexIn, boost::defer_lock)\n     {\n         if (fTry)\n@@ -95,11 +80,6 @@ class CMutexLock\n     {\n         return lock.owns_lock();\n     }\n-\n-    boost::unique_lock<Mutex> &GetLock()\n-    {\n-        return lock;\n-    }\n };\n \n typedef CMutexLock<CCriticalSection> CCriticalBlock;"
      },
      {
        "sha": "693411aa6dc95c3b29ee1bdef9a15f83ae94ee24",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 37,
        "deletions": 29,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -29,38 +29,46 @@ class CClientUIInterface\n     /** Flags for CClientUIInterface::ThreadSafeMessageBox */\n     enum MessageBoxFlags\n     {\n-        YES                   = 0x00000002,\n-        OK                    = 0x00000004,\n-        NO                    = 0x00000008,\n-        YES_NO                = (YES|NO),\n-        CANCEL                = 0x00000010,\n-        APPLY                 = 0x00000020,\n-        CLOSE                 = 0x00000040,\n-        OK_DEFAULT            = 0x00000000,\n-        YES_DEFAULT           = 0x00000000,\n-        NO_DEFAULT            = 0x00000080,\n-        CANCEL_DEFAULT        = 0x80000000,\n-        ICON_EXCLAMATION      = 0x00000100,\n-        ICON_HAND             = 0x00000200,\n-        ICON_WARNING          = ICON_EXCLAMATION,\n-        ICON_ERROR            = ICON_HAND,\n-        ICON_QUESTION         = 0x00000400,\n-        ICON_INFORMATION      = 0x00000800,\n-        ICON_STOP             = ICON_HAND,\n-        ICON_ASTERISK         = ICON_INFORMATION,\n-        ICON_MASK             = (0x00000100|0x00000200|0x00000400|0x00000800),\n-        FORWARD               = 0x00001000,\n-        BACKWARD              = 0x00002000,\n-        RESET                 = 0x00004000,\n-        HELP                  = 0x00008000,\n-        MORE                  = 0x00010000,\n-        SETUP                 = 0x00020000,\n-        // Force blocking, modal message box dialog (not just OS notification)\n-        MODAL                 = 0x00040000\n+        ICON_INFORMATION    = 0,\n+        ICON_WARNING        = (1U << 0),\n+        ICON_ERROR          = (1U << 1),\n+        /**\n+         * Mask of all available icons in CClientUIInterface::MessageBoxFlags\n+         * This needs to be updated, when icons are changed there!\n+         */\n+        ICON_MASK = (ICON_INFORMATION | ICON_WARNING | ICON_ERROR),\n+\n+        /** These values are taken from qmessagebox.h \"enum StandardButton\" to be directly usable */\n+        BTN_OK      = 0x00000400U, // QMessageBox::Ok\n+        BTN_YES     = 0x00004000U, // QMessageBox::Yes\n+        BTN_NO      = 0x00010000U, // QMessageBox::No\n+        BTN_ABORT   = 0x00040000U, // QMessageBox::Abort\n+        BTN_RETRY   = 0x00080000U, // QMessageBox::Retry\n+        BTN_IGNORE  = 0x00100000U, // QMessageBox::Ignore\n+        BTN_CLOSE   = 0x00200000U, // QMessageBox::Close\n+        BTN_CANCEL  = 0x00400000U, // QMessageBox::Cancel\n+        BTN_DISCARD = 0x00800000U, // QMessageBox::Discard\n+        BTN_HELP    = 0x01000000U, // QMessageBox::Help\n+        BTN_APPLY   = 0x02000000U, // QMessageBox::Apply\n+        BTN_RESET   = 0x04000000U, // QMessageBox::Reset\n+        /**\n+         * Mask of all available buttons in CClientUIInterface::MessageBoxFlags\n+         * This needs to be updated, when buttons are changed there!\n+         */\n+        BTN_MASK = (BTN_OK | BTN_YES | BTN_NO | BTN_ABORT | BTN_RETRY | BTN_IGNORE |\n+                    BTN_CLOSE | BTN_CANCEL | BTN_DISCARD | BTN_HELP | BTN_APPLY | BTN_RESET),\n+\n+        /** Force blocking, modal message box dialog (not just OS notification) */\n+        MODAL               = 0x10000000U,\n+\n+        /** Predefined combinations for certain default usage cases */\n+        MSG_INFORMATION = (ICON_INFORMATION | BTN_OK),\n+        MSG_WARNING = (ICON_WARNING | BTN_OK | MODAL),\n+        MSG_ERROR = (ICON_ERROR | BTN_OK | MODAL)\n     };\n \n     /** Show message box. */\n-    boost::signals2::signal<void (const std::string& message, const std::string& caption, int style)> ThreadSafeMessageBox;\n+    boost::signals2::signal<void (const std::string& message, const std::string& caption, unsigned int style)> ThreadSafeMessageBox;\n \n     /** Ask the user whether they want to pay a fee or not. */\n     boost::signals2::signal<bool (int64 nFeeRequired, const std::string& strCaption), boost::signals2::last_value<bool> > ThreadSafeAskFee;"
      },
      {
        "sha": "2f36c66067c540905306f613c71aa2f26d83e29c",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -1248,7 +1248,7 @@ void AddTimeData(const CNetAddr& ip, int64 nTime)\n                     string strMessage = _(\"Warning: Please check that your computer's date and time are correct! If your clock is wrong Bitcoin will not work properly.\");\n                     strMiscWarning = strMessage;\n                     printf(\"*** %s\\n\", strMessage.c_str());\n-                    uiInterface.ThreadSafeMessageBox(strMessage+\" \", string(\"Bitcoin\"), CClientUIInterface::OK | CClientUIInterface::ICON_EXCLAMATION);\n+                    uiInterface.ThreadSafeMessageBox(strMessage, \"\", CClientUIInterface::MSG_WARNING);\n                 }\n             }\n         }"
      },
      {
        "sha": "fed592421aea68c54f1e0d99790ceac38eb38e23",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e84f9794d07e234344c71b177906b0b2dac543b/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e84f9794d07e234344c71b177906b0b2dac543b/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=1e84f9794d07e234344c71b177906b0b2dac543b",
        "patch": "@@ -756,7 +756,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n         while (pindex)\n         {\n             CBlock block;\n-            block.ReadFromDisk(pindex, true);\n+            block.ReadFromDisk(pindex);\n             BOOST_FOREACH(CTransaction& tx, block.vtx)\n             {\n                 if (AddToWalletIfInvolvingMe(tx.GetHash(), tx, &block, fUpdate))"
      }
    ]
  }
]