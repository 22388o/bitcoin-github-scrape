mjdietzx,2020-10-31 17:36:46,"@MarcoFalke not to beat this to death, but I added another test case in https://github.com/bitcoin/bitcoin/pull/20276/commits/71081df19a816b5c243a6bcccab9fb11888732fa. While convincing myself that I was using `miniWallet` properly, and not getting lucky with any passing tests, I wrote this and figured it was useful enough to include in the PR",https://github.com/bitcoin/bitcoin/pull/20276#issuecomment-719964483,719964483,
mjdietzx,2020-11-28 16:17:12,Rebased and should be ready to merge,https://github.com/bitcoin/bitcoin/pull/20276#issuecomment-735251035,735251035,
0xB10C,2020-11-28 22:10:33,"re-ACK ec66561d87881f54d64c8d633e267efe1b18b4ad\n\nOnly changes are:\n- https://github.com/bitcoin/bitcoin/pull/20276#discussion_r532085685 addressed\n- formatting of long lines changed: removed line breaks (multiple lines -> one line)",https://github.com/bitcoin/bitcoin/pull/20276#issuecomment-735296850,735296850,
mjdietzx,2020-12-01 20:46:25,"So since we don't use the wallet in mempool_expiry.py after this PR, does this close https://github.com/bitcoin/bitcoin/issues/19448? Also, since https://github.com/bitcoin/bitcoin/pull/19450 is described as a temp workaround would we revert it after this is merged? cc @hebasto \n\nCan someone explain why (only?) this test is triggering a data race though? Everything seems pretty simple so I'm c",https://github.com/bitcoin/bitcoin/pull/20276#issuecomment-736809643,736809643,
hebasto,2020-12-01 21:16:18,"> So since we don't use the wallet in mempool_expiry.py after this PR, does this close #19448? Also, since #19450 is described as a temp workaround would we revert it after this is merged? cc @hebasto\n\nAs noted in #19448 OP other similar issues are reported: #19211 and #19417. I think we could just wait until Berkley DB will [no longer used](https://github.com/bitcoin/bitcoin/issues/20160) in ",https://github.com/bitcoin/bitcoin/pull/20276#issuecomment-736825467,736825467,
mjdietzx,2020-12-08 19:59:59,"Alright, I cleaned this up and got rid of all the fluff that wasn't related to the core of this PR. Should be ready to go now, will make sure I keep PRs focused in the future",https://github.com/bitcoin/bitcoin/pull/20276#issuecomment-740942858,740942858,
MarcoFalke,2020-12-10 08:02:27,Please squash your commits according to https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits,https://github.com/bitcoin/bitcoin/pull/20276#issuecomment-742345843,742345843,
mjdietzx,2020-12-15 17:39:30,This has been squashed/rebased and is ready to go,https://github.com/bitcoin/bitcoin/pull/20276#issuecomment-745450465,745450465,
MarcoFalke,2020-12-16 13:51:08,ACK 3b064fcb9dd3df6c438a440f0fea86e9cf7b5f57,https://github.com/bitcoin/bitcoin/pull/20276#issuecomment-746315220,746315220,
MarcoFalke,2020-10-31 08:21:41,"Pretty sure this is not the parent change. miniwallet should have two outputs at this point. One leftover coinbase and one change. Coin selection favors the largest output, so the coinbase one.\n\nI might be wrong, but I think it could make sense to check that the child tx really has parent_txid as ancestor via the mempool rpc",https://github.com/bitcoin/bitcoin/pull/20276#discussion_r515471968,515471968,test/functional/mempool_expiry.py
mjdietzx,2020-10-31 10:39:51,"I added an assertion verifying this to make it clear https://github.com/bitcoin/bitcoin/pull/20276/commits/de4173bacd3a2ce6294515072cb725d5c1074cd8.\n\nOriginally I had:\n```python\nparent_utxo = next(filter(lambda utxo: utxo['txid'] == parent_txid, wallet._utxos))\n```\n\nbut then I realized `get_utxo()` would do this for me: ```""""""Return the last utxo. Can be used to get the change output",https://github.com/bitcoin/bitcoin/pull/20276#discussion_r515483272,515483272,test/functional/mempool_expiry.py
MarcoFalke,2020-10-31 15:22:47,"Oh, sorry my bad in that case. Though, the mempool check would still make sense.",https://github.com/bitcoin/bitcoin/pull/20276#discussion_r515507542,515507542,test/functional/mempool_expiry.py
0xB10C,2020-11-28 17:35:11,"nit: I found this function name and doc string not to be super clear. `sync_mempool()` could be confused with something like `self.sync_all()`. If you happen to re-touch this then maybe something along the lines of the suggestion below would make it clearer.\n\n```suggestion\n    def trigger_mempool_expiry(self):\n        """"""Broadcasts an unrelated transaction as the expiry of the transactions",https://github.com/bitcoin/bitcoin/pull/20276#discussion_r532085685,532085685,test/functional/mempool_expiry.py
mjdietzx,2020-11-28 18:21:49,"Thanks for the suggestion, I made this change and squashed it into the commit",https://github.com/bitcoin/bitcoin/pull/20276#discussion_r532090976,532090976,test/functional/mempool_expiry.py
MarcoFalke,2020-12-02 09:43:00,can you explain why this is needed? I'd prefer not to call the method when it won't do anything anyway,https://github.com/bitcoin/bitcoin/pull/20276#discussion_r534026969,534026969,test/functional/mempool_expiry.py
MarcoFalke,2020-12-02 09:45:43,"it looks like you are fixing up style in the same commit as refactors, cleanups and miniwallet changes\n\nIt would be easier to follow if the formatting changes, the `trigger_mempool_expiry`, and the miniwallet changes were all in separate commits, where each passed on its own and can be reviewed on its own",https://github.com/bitcoin/bitcoin/pull/20276#discussion_r534028904,534028904,test/functional/mempool_expiry.py
MarcoFalke,2020-12-02 09:46:45,"not sure about mixing all the formatting changes in with the other changes. In either case if you want to change this, you can use f-strings",https://github.com/bitcoin/bitcoin/pull/20276#discussion_r534029583,534029583,test/functional/mempool_expiry.py
0xB10C,2020-12-02 10:25:25,[`CTxMemPool::Expire(..)`](https://github.com/bitcoin/bitcoin/blob/cd720337fe9c27422fe8d507726ca8c79f52b4ba/src/txmempool.cpp#L945) is only called in [ `LimitMempoolSize(..)`](https://github.com/bitcoin/bitcoin/blob/f17e8ba3a17b6516a1b1fb7f45d506a339e99f90/src/validation.cpp#L331) which is only called in [`UpdateMempoolForReorg(..)`](https://github.com/bitcoin/bitcoin/blob/f17e8ba3a17b6516a1b1fb7f,https://github.com/bitcoin/bitcoin/pull/20276#discussion_r534056506,534056506,test/functional/mempool_expiry.py
MarcoFalke,2020-12-02 10:58:10,"I meant the `except: pass` part, sorry for being unclear :sweat_smile: ",https://github.com/bitcoin/bitcoin/pull/20276#discussion_r534077473,534077473,test/functional/mempool_expiry.py
mjdietzx,2020-12-02 18:32:27,"There's a minor problem here, re the **unrelated transaction** part of @0xB10C's explanation. With `MiniWallet` if we don't do any extra bookkeeping in this test, and just do `self.wallet.send_self_transfer(from_node=node)` to trigger the mempool update, the (now expired) utxo will be spent. So this `send_self_transfer` will throw `test_framework.authproxy.JSONRPCException: mempool full (-26)`\n",https://github.com/bitcoin/bitcoin/pull/20276#discussion_r534391823,534391823,test/functional/mempool_expiry.py
mjdietzx,2020-12-02 18:37:46,"Ah yeah, I did too much extra stuff in this PR. I'm gonna undo all this unrelated style/refactor stuff. Will undo the string formatting changes as well",https://github.com/bitcoin/bitcoin/pull/20276#discussion_r534395089,534395089,test/functional/mempool_expiry.py
MarcoFalke,2020-12-03 07:54:52,"I don't understand why spending an non-existent coin will throw 'mempool full' (not missing-inputs) and how that is going to trigger mempool expiry of other txs.\n\nAnyway, I guess the options are:\n\n* Add a comment\n* Remember the previous utxo (not expired) and use that\n* Drop utxos that are about to expire from the wallet (might require fresh coins later on in the script)\n* Something ",https://github.com/bitcoin/bitcoin/pull/20276#discussion_r534850841,534850841,test/functional/mempool_expiry.py
mjdietzx,2020-12-08 20:01:29,"So I figured out why there were some weird errors that didn't make sense as you point out. After the first subtest some UTXOs were hanging around in the mempool, that ended up being used in the second subtest because MiniWallet sorts for the largest UTXOs. That's why I ensure the mempool is clear at the beginning of each subtest run now.",https://github.com/bitcoin/bitcoin/pull/20276#discussion_r538766997,538766997,test/functional/mempool_expiry.py
MarcoFalke,2020-12-09 09:19:05,"Why is this needed? You are generating a block in the next line, which cleares the mempool",https://github.com/bitcoin/bitcoin/pull/20276#discussion_r539138125,539138125,test/functional/mempool_expiry.py
MarcoFalke,2020-12-09 09:20:44,"this comment is not true. The ""trigger"" txs are chained txs. More inputs are needed.",https://github.com/bitcoin/bitcoin/pull/20276#discussion_r539139300,539139300,test/functional/mempool_expiry.py
mjdietzx,2020-12-09 21:12:23,"TLDR; I made everything explicit in this commit https://github.com/bitcoin/bitcoin/pull/20276/commits/4b99dc5ef62fe1d1a6e23d71f55570dc14aac9fa because I realized this is all confusing. Thanks for pointing this out. \n\nIt was because fees from the transactions in the first test run (that are still in the mempool) `self.test_transaction_expiry(DEFAULT_MEMPOOL_EXPIRY)` get included in `MiniWallet`",https://github.com/bitcoin/bitcoin/pull/20276#discussion_r539651046,539651046,test/functional/mempool_expiry.py
mjdietzx,2020-12-09 21:13:28,"That's a good point, addressed in most recent commit",https://github.com/bitcoin/bitcoin/pull/20276#discussion_r539651684,539651684,test/functional/mempool_expiry.py
