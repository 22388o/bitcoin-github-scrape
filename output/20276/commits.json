[
  {
    "sha": "3b064fcb9dd3df6c438a440f0fea86e9cf7b5f57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjA2NGZjYjlkZDNkZjZjNDM4YTQ0MGYwZmVhODZlOWNmN2I1ZjU3",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2020-12-08T19:55:12Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2020-12-10T16:14:35Z"
      },
      "message": "test: run mempool_expiry.py even with wallet disabled\n\nTest coverage is also extended in this commit to:\nEnsure that another transaction in the mempool is not evicted\nwhen other transactions expire. Note: this other transaction does\nnot have any ancestors in the mempool that expired. Otherwise it\nwould be evicted from the mempool, and we already test this case.",
      "tree": {
        "sha": "397fa6c5836f5a41c494cf76908f994a28392114",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/397fa6c5836f5a41c494cf76908f994a28392114"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b064fcb9dd3df6c438a440f0fea86e9cf7b5f57",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAl/SSXAACgkQc3/VzfHR\nRrlqPA/+J2+cL9++/hKmFNL36Z4cfXt008lBr7dx3VEzDeBdRVEa0KxAQiVWN4b8\n+HwpQXw6nWKwixleM+STOUQ31b2FZfPJfhR5r53gaqRofKFNLnW27ZOME1shUaC0\nD1IGfGq8h9OYK9X3ospjxHjhwOgb+Xj0UhQCWekoKDDxo4FpX8XdL33tTUhArGu6\n/15d6blai9FeFra8iKsU4lgtXVxYBqr4PLkd/gDzbn1M7NHMQxExOESSvoRARYnj\nUXU7vY5nTUv73MSjKNE3BublW5t99um9zYg15hh6UqdH0Qk4I+seO7tArC86+3aF\n1FI4jfNcO5xYlBO4C5ktbM+eSUKITxf6DvwNjqA0TOY8CaK5BD1SMv+Vua0vmnb+\n13OT9nFhU6fEyIeXAszNDkCJpLS2c0V4Io1cjZZ4c9nzIB70Rm1dHB59a1UaROsV\nALMKs3+nt6NEI/PEndCSX8ERYHziFfSSWBVabuZkgZM3jDhwsz8dXocPaIBJ2dBS\npdZ1KhYeVxwcI/izSY6Z4Umon4yvvA/OnS9AWr5/mX88b76LPH32ho4pWSNsQI2d\nxiJCkAdX7qlXAMctLtEAT1WbYaNfPdBWFewhGL23Iz5SqICJBwrfZpI1b0pqKgI2\nQBJC8BoLfUccEquHnssnC8NA02C5wDoQOiX0vOJIWVV3okg8W/0=\n=yi+v\n-----END PGP SIGNATURE-----",
        "payload": "tree 397fa6c5836f5a41c494cf76908f994a28392114\nparent 854b36cfa2ef017567dcf1e7d0304107a8700f2b\nauthor Michael Dietz <michael.dietz@waya.ai> 1607457312 -0600\ncommitter Michael Dietz <michael.dietz@waya.ai> 1607616875 -0600\n\ntest: run mempool_expiry.py even with wallet disabled\n\nTest coverage is also extended in this commit to:\nEnsure that another transaction in the mempool is not evicted\nwhen other transactions expire. Note: this other transaction does\nnot have any ancestors in the mempool that expired. Otherwise it\nwould be evicted from the mempool, and we already test this case.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b064fcb9dd3df6c438a440f0fea86e9cf7b5f57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b064fcb9dd3df6c438a440f0fea86e9cf7b5f57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b064fcb9dd3df6c438a440f0fea86e9cf7b5f57/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "854b36cfa2ef017567dcf1e7d0304107a8700f2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/854b36cfa2ef017567dcf1e7d0304107a8700f2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/854b36cfa2ef017567dcf1e7d0304107a8700f2b"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 31,
      "deletions": 21
    },
    "files": [
      {
        "sha": "4c46075ae936c61b87b27a64c28a9284c2882399",
        "filename": "test/functional/mempool_expiry.py",
        "status": "modified",
        "additions": 31,
        "deletions": 21,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b064fcb9dd3df6c438a440f0fea86e9cf7b5f57/test/functional/mempool_expiry.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b064fcb9dd3df6c438a440f0fea86e9cf7b5f57/test/functional/mempool_expiry.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_expiry.py?ref=3b064fcb9dd3df6c438a440f0fea86e9cf7b5f57",
        "patch": "@@ -16,8 +16,8 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    find_vout_for_address,\n )\n+from test_framework.wallet import MiniWallet\n \n DEFAULT_MEMPOOL_EXPIRY = 336  # hours\n CUSTOM_MEMPOOL_EXPIRY = 10  # hours\n@@ -26,44 +26,50 @@\n class MempoolExpiryTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-\n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n+        self.setup_clean_chain = True\n \n     def test_transaction_expiry(self, timeout):\n         \"\"\"Tests that a transaction expires after the expiry timeout and its\n         children are removed as well.\"\"\"\n         node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+\n+        # Add enough mature utxos to the wallet so that all txs spend confirmed coins.\n+        self.wallet.generate(4)\n+        node.generate(100)\n \n         # Send a parent transaction that will expire.\n-        parent_address = node.getnewaddress()\n-        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+        parent_txid = self.wallet.send_self_transfer(from_node=node)['txid']\n+        parent_utxo = self.wallet.get_utxo(txid=parent_txid)\n+        independent_utxo = self.wallet.get_utxo()\n+\n+        # Ensure the transactions we send to trigger the mempool check spend utxos that are independent of\n+        # the transactions being tested for expiration.\n+        trigger_utxo1 = self.wallet.get_utxo()\n+        trigger_utxo2 = self.wallet.get_utxo()\n \n         # Set the mocktime to the arrival time of the parent transaction.\n         entry_time = node.getmempoolentry(parent_txid)['time']\n         node.setmocktime(entry_time)\n \n-        # Create child transaction spending the parent transaction\n-        vout = find_vout_for_address(node, parent_txid, parent_address)\n-        inputs = [{'txid': parent_txid, 'vout': vout}]\n-        outputs = {node.getnewaddress(): 0.99}\n-        child_raw = node.createrawtransaction(inputs, outputs)\n-        child_signed = node.signrawtransactionwithwallet(child_raw)['hex']\n-\n-        # Let half of the timeout elapse and broadcast the child transaction.\n+        # Let half of the timeout elapse and broadcast the child transaction spending the parent transaction.\n         half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n         node.setmocktime(half_expiry_time)\n-        child_txid = node.sendrawtransaction(child_signed)\n+        child_txid = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=parent_utxo)['txid']\n+        assert_equal(parent_txid, node.getmempoolentry(child_txid)['depends'][0])\n         self.log.info('Broadcast child transaction after {} hours.'.format(\n             timedelta(seconds=(half_expiry_time-entry_time))))\n \n+        # Broadcast another (independent) transaction.\n+        independent_txid = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=independent_utxo)['txid']\n+\n         # Let most of the timeout elapse and check that the parent tx is still\n         # in the mempool.\n         nearly_expiry_time = entry_time + 60 * 60 * timeout - 5\n         node.setmocktime(nearly_expiry_time)\n-        # Expiry of mempool transactions is only checked when a new transaction\n-        # is added to the to the mempool.\n-        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        # Broadcast a transaction as the expiry of transactions in the mempool is only checked\n+        # when a new transaction is added to the mempool.\n+        self.wallet.send_self_transfer(from_node=node, utxo_to_spend=trigger_utxo1)\n         self.log.info('Test parent tx not expired after {} hours.'.format(\n             timedelta(seconds=(nearly_expiry_time-entry_time))))\n         assert_equal(entry_time, node.getmempoolentry(parent_txid)['time'])\n@@ -72,9 +78,8 @@ def test_transaction_expiry(self, timeout):\n         # has passed.\n         expiry_time = entry_time + 60 * 60 * timeout + 5\n         node.setmocktime(expiry_time)\n-        # Expiry of mempool transactions is only checked when a new transaction\n-        # is added to the to the mempool.\n-        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        # Again, broadcast a transaction so the expiry of transactions in the mempool is checked.\n+        self.wallet.send_self_transfer(from_node=node, utxo_to_spend=trigger_utxo2)\n         self.log.info('Test parent tx expiry after {} hours.'.format(\n             timedelta(seconds=(expiry_time-entry_time))))\n         assert_raises_rpc_error(-5, 'Transaction not in mempool',\n@@ -85,6 +90,11 @@ def test_transaction_expiry(self, timeout):\n         assert_raises_rpc_error(-5, 'Transaction not in mempool',\n                                 node.getmempoolentry, child_txid)\n \n+        # Check that the independent tx is still in the mempool.\n+        self.log.info('Test the independent tx not expired after {} hours.'.format(\n+            timedelta(seconds=(expiry_time-half_expiry_time))))\n+        assert_equal(half_expiry_time, node.getmempoolentry(independent_txid)['time'])\n+\n     def run_test(self):\n         self.log.info('Test default mempool expiry timeout of %d hours.' %\n                       DEFAULT_MEMPOOL_EXPIRY)"
      }
    ]
  }
]