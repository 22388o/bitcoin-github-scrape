[
  {
    "sha": "06fa85cd50b718fecd69f0481740d2b8714a1397",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNmZhODVjZDUwYjcxOGZlY2Q2OWYwNDgxNzQwZDJiODcxNGExMzk3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-01-06T11:07:01Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-01-13T16:18:12Z"
      },
      "message": "[net] InactivityCheck() takes a CNode reference",
      "tree": {
        "sha": "6c751032e8d77d1abce9f170b330cb9a00548f11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c751032e8d77d1abce9f170b330cb9a00548f11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06fa85cd50b718fecd69f0481740d2b8714a1397",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06fa85cd50b718fecd69f0481740d2b8714a1397",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06fa85cd50b718fecd69f0481740d2b8714a1397",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06fa85cd50b718fecd69f0481740d2b8714a1397/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7eb37128c3155f074af5f38974934ce6941b0fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7eb37128c3155f074af5f38974934ce6941b0fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7eb37128c3155f074af5f38974934ce6941b0fb"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "2e52afa1cc75f4409ba0e6e514279cba6f07c7ed",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06fa85cd50b718fecd69f0481740d2b8714a1397/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06fa85cd50b718fecd69f0481740d2b8714a1397/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=06fa85cd50b718fecd69f0481740d2b8714a1397",
        "patch": "@@ -1216,35 +1216,35 @@ void CConnman::NotifyNumConnectionsChanged()\n     }\n }\n \n-void CConnman::InactivityCheck(CNode *pnode) const\n+void CConnman::InactivityCheck(CNode& node) const\n {\n     int64_t nTime = GetSystemTimeInSeconds();\n-    if (nTime - pnode->nTimeConnected > m_peer_connect_timeout)\n+    if (nTime - node.nTimeConnected > m_peer_connect_timeout)\n     {\n-        if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n+        if (node.nLastRecv == 0 || node.nLastSend == 0)\n         {\n-            LogPrint(BCLog::NET, \"socket no message in first %i seconds, %d %d from %d\\n\", m_peer_connect_timeout, pnode->nLastRecv != 0, pnode->nLastSend != 0, pnode->GetId());\n-            pnode->fDisconnect = true;\n+            LogPrint(BCLog::NET, \"socket no message in first %i seconds, %d %d from %d\\n\", m_peer_connect_timeout, node.nLastRecv != 0, node.nLastSend != 0, node.GetId());\n+            node.fDisconnect = true;\n         }\n-        else if (nTime - pnode->nLastSend > TIMEOUT_INTERVAL)\n+        else if (nTime - node.nLastSend > TIMEOUT_INTERVAL)\n         {\n-            LogPrintf(\"socket sending timeout: %is\\n\", nTime - pnode->nLastSend);\n-            pnode->fDisconnect = true;\n+            LogPrintf(\"socket sending timeout: %is\\n\", nTime - node.nLastSend);\n+            node.fDisconnect = true;\n         }\n-        else if (nTime - pnode->nLastRecv > TIMEOUT_INTERVAL)\n+        else if (nTime - node.nLastRecv > TIMEOUT_INTERVAL)\n         {\n-            LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n-            pnode->fDisconnect = true;\n+            LogPrintf(\"socket receive timeout: %is\\n\", nTime - node.nLastRecv);\n+            node.fDisconnect = true;\n         }\n-        else if (pnode->nPingNonceSent && pnode->m_ping_start.load() + std::chrono::seconds{TIMEOUT_INTERVAL} < GetTime<std::chrono::microseconds>())\n+        else if (node.nPingNonceSent && node.m_ping_start.load() + std::chrono::seconds{TIMEOUT_INTERVAL} < GetTime<std::chrono::microseconds>())\n         {\n-            LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * count_microseconds(GetTime<std::chrono::microseconds>() - pnode->m_ping_start.load()));\n-            pnode->fDisconnect = true;\n+            LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * count_microseconds(GetTime<std::chrono::microseconds>() - node.m_ping_start.load()));\n+            node.fDisconnect = true;\n         }\n-        else if (!pnode->fSuccessfullyConnected)\n+        else if (!node.fSuccessfullyConnected)\n         {\n-            LogPrint(BCLog::NET, \"version handshake timeout from %d\\n\", pnode->GetId());\n-            pnode->fDisconnect = true;\n+            LogPrint(BCLog::NET, \"version handshake timeout from %d\\n\", node.GetId());\n+            node.fDisconnect = true;\n         }\n     }\n }\n@@ -1522,7 +1522,7 @@ void CConnman::SocketHandler()\n             if (bytes_sent) RecordBytesSent(bytes_sent);\n         }\n \n-        InactivityCheck(pnode);\n+        InactivityCheck(*pnode);\n     }\n     {\n         LOCK(cs_vNodes);"
      },
      {
        "sha": "6bc19f7148796c9cf9594d8a4b3fde758f96e075",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06fa85cd50b718fecd69f0481740d2b8714a1397/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06fa85cd50b718fecd69f0481740d2b8714a1397/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=06fa85cd50b718fecd69f0481740d2b8714a1397",
        "patch": "@@ -1044,7 +1044,7 @@ class CConnman\n     void AcceptConnection(const ListenSocket& hListenSocket);\n     void DisconnectNodes();\n     void NotifyNumConnectionsChanged();\n-    void InactivityCheck(CNode *pnode) const;\n+    void InactivityCheck(CNode& node) const;\n     bool GenerateSelectSet(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set);\n     void SocketEvents(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set);\n     void SocketHandler();"
      }
    ]
  },
  {
    "sha": "bf100f8170770544fb39ae6802175c564cde532f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjEwMGY4MTcwNzcwNTQ0ZmIzOWFlNjgwMjE3NWM1NjRjZGU1MzJm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-01-06T11:12:51Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-01-19T10:50:36Z"
      },
      "message": "[net] Cleanup InactivityChecks() and add commenting about time\n\nAlso clean up and better comment the function. InactivityChecks() uses a\nmixture of (non-mockable) system time and mockable time. Make sure\nthat's well documented.\n\nDespite being marked as const in CConnman before this commit, the\nfunction did mutate the state of the passed in CNode, which is contained\nin vNodes, which is a member of CConnman. To make the function truly\nconst in CConnman and all its data, instead make InactivityChecks() a\npure function, return whether the peer should be disconnected, and let\nthe calling function (SocketHandler()) update the CNode object. Also\nmake the CNode& argument const.",
      "tree": {
        "sha": "2c006ffa5597e9ddeffcd5ca8667a4458b2407ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c006ffa5597e9ddeffcd5ca8667a4458b2407ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf100f8170770544fb39ae6802175c564cde532f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf100f8170770544fb39ae6802175c564cde532f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf100f8170770544fb39ae6802175c564cde532f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf100f8170770544fb39ae6802175c564cde532f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06fa85cd50b718fecd69f0481740d2b8714a1397",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06fa85cd50b718fecd69f0481740d2b8714a1397",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06fa85cd50b718fecd69f0481740d2b8714a1397"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 42,
      "deletions": 31
    },
    "files": [
      {
        "sha": "bd837eaa1a14f72280870b5398061a836c7b352d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 30,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf100f8170770544fb39ae6802175c564cde532f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf100f8170770544fb39ae6802175c564cde532f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=bf100f8170770544fb39ae6802175c564cde532f",
        "patch": "@@ -1216,37 +1216,47 @@ void CConnman::NotifyNumConnectionsChanged()\n     }\n }\n \n-void CConnman::InactivityCheck(CNode& node) const\n+bool CConnman::InactivityCheck(const CNode& node) const\n {\n-    int64_t nTime = GetSystemTimeInSeconds();\n-    if (nTime - node.nTimeConnected > m_peer_connect_timeout)\n-    {\n-        if (node.nLastRecv == 0 || node.nLastSend == 0)\n-        {\n-            LogPrint(BCLog::NET, \"socket no message in first %i seconds, %d %d from %d\\n\", m_peer_connect_timeout, node.nLastRecv != 0, node.nLastSend != 0, node.GetId());\n-            node.fDisconnect = true;\n-        }\n-        else if (nTime - node.nLastSend > TIMEOUT_INTERVAL)\n-        {\n-            LogPrintf(\"socket sending timeout: %is\\n\", nTime - node.nLastSend);\n-            node.fDisconnect = true;\n-        }\n-        else if (nTime - node.nLastRecv > TIMEOUT_INTERVAL)\n-        {\n-            LogPrintf(\"socket receive timeout: %is\\n\", nTime - node.nLastRecv);\n-            node.fDisconnect = true;\n-        }\n-        else if (node.nPingNonceSent && node.m_ping_start.load() + std::chrono::seconds{TIMEOUT_INTERVAL} < GetTime<std::chrono::microseconds>())\n-        {\n-            LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * count_microseconds(GetTime<std::chrono::microseconds>() - node.m_ping_start.load()));\n-            node.fDisconnect = true;\n-        }\n-        else if (!node.fSuccessfullyConnected)\n-        {\n-            LogPrint(BCLog::NET, \"version handshake timeout from %d\\n\", node.GetId());\n-            node.fDisconnect = true;\n-        }\n+    // Use non-mockable system time (otherwise these timers will pop when we\n+    // use setmocktime in the tests).\n+    int64_t now = GetSystemTimeInSeconds();\n+\n+    if (now <= node.nTimeConnected + m_peer_connect_timeout) {\n+        // Only run inactivity checks if the peer has been connected longer\n+        // than m_peer_connect_timeout.\n+        return false;\n+    }\n+\n+    if (node.nLastRecv == 0 || node.nLastSend == 0) {\n+        LogPrint(BCLog::NET, \"socket no message in first %i seconds, %d %d from %d\\n\", m_peer_connect_timeout, node.nLastRecv != 0, node.nLastSend != 0, node.GetId());\n+        return true;\n+    }\n+\n+    if (now > node.nLastSend + TIMEOUT_INTERVAL) {\n+        LogPrintf(\"socket sending timeout: %is\\n\", now - node.nLastSend);\n+        return true;\n     }\n+\n+    if (now > node.nLastRecv + TIMEOUT_INTERVAL) {\n+        LogPrintf(\"socket receive timeout: %is\\n\", now - node.nLastRecv);\n+        return true;\n+    }\n+\n+    if (node.nPingNonceSent && node.m_ping_start.load() + std::chrono::seconds{TIMEOUT_INTERVAL} < GetTime<std::chrono::microseconds>()) {\n+        // We use mockable time for ping timeouts. This means that setmocktime\n+        // may cause pings to time out for peers that have been connected for\n+        // longer than m_peer_connect_timeout.\n+        LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * count_microseconds(GetTime<std::chrono::microseconds>() - node.m_ping_start.load()));\n+        return true;\n+    }\n+\n+    if (!node.fSuccessfullyConnected) {\n+        LogPrint(BCLog::NET, \"version handshake timeout from %d\\n\", node.GetId());\n+        return true;\n+    }\n+\n+    return false;\n }\n \n bool CConnman::GenerateSelectSet(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set)\n@@ -1522,7 +1532,7 @@ void CConnman::SocketHandler()\n             if (bytes_sent) RecordBytesSent(bytes_sent);\n         }\n \n-        InactivityCheck(*pnode);\n+        if (InactivityCheck(*pnode)) pnode->fDisconnect = true;\n     }\n     {\n         LOCK(cs_vNodes);"
      },
      {
        "sha": "3a1b55d054db591fa92f4ab40d65b4b023349860",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf100f8170770544fb39ae6802175c564cde532f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf100f8170770544fb39ae6802175c564cde532f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=bf100f8170770544fb39ae6802175c564cde532f",
        "patch": "@@ -1044,7 +1044,8 @@ class CConnman\n     void AcceptConnection(const ListenSocket& hListenSocket);\n     void DisconnectNodes();\n     void NotifyNumConnectionsChanged();\n-    void InactivityCheck(CNode& node) const;\n+    /** Return true if the peer is inactive and should be disconnected. */\n+    bool InactivityCheck(const CNode& node) const;\n     bool GenerateSelectSet(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set);\n     void SocketEvents(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set);\n     void SocketHandler();"
      }
    ]
  }
]