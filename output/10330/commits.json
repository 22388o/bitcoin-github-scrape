[
  {
    "sha": "ff7365e780624a1ef66c12a6d7b61448a3f9294c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjczNjVlNzgwNjI0YTFlZjY2YzEyYTZkN2I2MTQ0OGEzZjkyOTRj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-03T15:49:58Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-15T19:15:25Z"
      },
      "message": "[tests] fix flake8 warnings in zapwallettxes.py",
      "tree": {
        "sha": "8910b6b467f9f887b1ae7da077e8010d56d50346",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8910b6b467f9f887b1ae7da077e8010d56d50346"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff7365e780624a1ef66c12a6d7b61448a3f9294c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff7365e780624a1ef66c12a6d7b61448a3f9294c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff7365e780624a1ef66c12a6d7b61448a3f9294c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff7365e780624a1ef66c12a6d7b61448a3f9294c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afd2fca911c4a5e3a4d1f0993a226d40f250aff4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd2fca911c4a5e3a4d1f0993a226d40f250aff4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afd2fca911c4a5e3a4d1f0993a226d40f250aff4"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 26,
      "deletions": 22
    },
    "files": [
      {
        "sha": "afe944132b407ef1d2b8f4723f0100837f40a47f",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 26,
        "deletions": 22,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff7365e780624a1ef66c12a6d7b61448a3f9294c/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff7365e780624a1ef66c12a6d7b61448a3f9294c/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=ff7365e780624a1ef66c12a6d7b61448a3f9294c",
        "patch": "@@ -13,8 +13,12 @@\n   available, but that the unconfirmed transaction has been zapped.\n \"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-\n+from test_framework.util import (assert_equal,\n+                                 assert_raises,\n+                                 bitcoind_processes,\n+                                 connect_nodes_bi,\n+                                 JSONRPCException,\n+                                 )\n \n class ZapWalletTXesTest (BitcoinTestFramework):\n \n@@ -25,56 +29,56 @@ def __init__(self):\n \n     def setup_network(self):\n         super().setup_network()\n-        connect_nodes_bi(self.nodes,0,2)\n+        connect_nodes_bi(self.nodes, 0, 2)\n \n-    def run_test (self):\n+    def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(1)\n         self.sync_all()\n         self.nodes[1].generate(101)\n         self.sync_all()\n-        \n+\n         assert_equal(self.nodes[0].getbalance(), 50)\n-        \n+\n         txid0 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n         txid1 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n         self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n-        \n+\n         txid2 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n         txid3 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n-        \n+\n         tx0 = self.nodes[0].gettransaction(txid0)\n-        assert_equal(tx0['txid'], txid0) #tx0 must be available (confirmed)\n-        \n+        assert_equal(tx0['txid'], txid0)  # tx0 must be available (confirmed)\n+\n         tx1 = self.nodes[0].gettransaction(txid1)\n-        assert_equal(tx1['txid'], txid1) #tx1 must be available (confirmed)\n-        \n+        assert_equal(tx1['txid'], txid1)  # tx1 must be available (confirmed)\n+\n         tx2 = self.nodes[0].gettransaction(txid2)\n-        assert_equal(tx2['txid'], txid2) #tx2 must be available (unconfirmed)\n-        \n+        assert_equal(tx2['txid'], txid2)  # tx2 must be available (unconfirmed)\n+\n         tx3 = self.nodes[0].gettransaction(txid3)\n-        assert_equal(tx3['txid'], txid3) #tx3 must be available (unconfirmed)\n-        \n+        assert_equal(tx3['txid'], txid3)  # tx3 must be available (unconfirmed)\n+\n         #restart bitcoind\n         self.stop_node(0)\n         self.nodes[0] = self.start_node(0,self.options.tmpdir)\n         \n         tx3 = self.nodes[0].gettransaction(txid3)\n-        assert_equal(tx3['txid'], txid3) #tx must be available (unconfirmed)\n-        \n+        assert_equal(tx3['txid'], txid3)  # tx must be available (unconfirmed)\n+\n         self.stop_node(0)\n         \n         #restart bitcoind with zapwallettxes\n         self.nodes[0] = self.start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])\n-        \n+\n         assert_raises(JSONRPCException, self.nodes[0].gettransaction, [txid3])\n-        #there must be an exception because the unconfirmed wallettx0 must be gone by now\n+        # there must be an exception because the unconfirmed wallettx0 must be gone by now\n \n         tx0 = self.nodes[0].gettransaction(txid0)\n-        assert_equal(tx0['txid'], txid0) #tx0 (confirmed) must still be available because it was confirmed\n+        assert_equal(tx0['txid'], txid0)  # tx0 (confirmed) must still be available because it was confirmed\n \n \n if __name__ == '__main__':\n-    ZapWalletTXesTest ().main ()\n+    ZapWalletTXesTest().main()"
      }
    ]
  },
  {
    "sha": "e7a2181b49774f2cc29839ebbdc206bcdb715a7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2EyMTgxYjQ5Nzc0ZjJjYzI5ODM5ZWJiZGMyMDZiY2RiNzE1YTdm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-03T17:36:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-15T19:15:25Z"
      },
      "message": "[wallet] fix zapwallettxes interaction with persistent mempool\n\nzapwallettxes previously did not interact well with persistent mempool.\nzapwallettxes would cause wallet transactions to be zapped, but they\nwould then be reloaded from the mempool on startup. This commit softsets\npersistmempool to false if zapwallettxes is enabled so transactions are\nactually zapped.",
      "tree": {
        "sha": "08933e8a3d37a1f35ee45ccc8313540aa8d16c0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08933e8a3d37a1f35ee45ccc8313540aa8d16c0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7a2181b49774f2cc29839ebbdc206bcdb715a7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7a2181b49774f2cc29839ebbdc206bcdb715a7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7a2181b49774f2cc29839ebbdc206bcdb715a7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7a2181b49774f2cc29839ebbdc206bcdb715a7f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff7365e780624a1ef66c12a6d7b61448a3f9294c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff7365e780624a1ef66c12a6d7b61448a3f9294c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff7365e780624a1ef66c12a6d7b61448a3f9294c"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 41,
      "deletions": 44
    },
    "files": [
      {
        "sha": "4366428f5c706681a1a6d25a8da5e655c7df166b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7a2181b49774f2cc29839ebbdc206bcdb715a7f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7a2181b49774f2cc29839ebbdc206bcdb715a7f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e7a2181b49774f2cc29839ebbdc206bcdb715a7f",
        "patch": "@@ -4043,6 +4043,11 @@ bool CWallet::ParameterInteraction()\n         }\n     }\n \n+    // -zapwallettx implies dropping the mempool on startup\n+    if (GetBoolArg(\"-zapwallettxes\", false) && SoftSetBoolArg(\"-persistmempool\", false)) {\n+        LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -persistmempool=0\\n\", __func__);\n+    }\n+\n     // -zapwallettx implies a rescan\n     if (GetBoolArg(\"-zapwallettxes\", false)) {\n         if (is_multiwallet) {"
      },
      {
        "sha": "af867d7a52c772e50917b7cc63faa1a57ad32be8",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 36,
        "deletions": 44,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7a2181b49774f2cc29839ebbdc206bcdb715a7f/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7a2181b49774f2cc29839ebbdc206bcdb715a7f/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=e7a2181b49774f2cc29839ebbdc206bcdb715a7f",
        "patch": "@@ -4,81 +4,73 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the zapwallettxes functionality.\n \n-- start three bitcoind nodes\n-- create four transactions on node 0 - two are confirmed and two are\n-  unconfirmed.\n-- restart node 1 and verify that both the confirmed and the unconfirmed\n+- start two bitcoind nodes\n+- create two transactions on node 0 - one is confirmed and one is unconfirmed.\n+- restart node 0 and verify that both the confirmed and the unconfirmed\n   transactions are still available.\n-- restart node 0 and verify that the confirmed transactions are still\n-  available, but that the unconfirmed transaction has been zapped.\n+- restart node 0 with zapwallettxes and persistmempool, and verify that both\n+  the confirmed and the unconfirmed transactions are still available.\n+- restart node 0 with just zapwallettxed and verify that the confirmed\n+  transactions are still available, but that the unconfirmed transaction has\n+  been zapped.\n \"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (assert_equal,\n-                                 assert_raises,\n-                                 bitcoind_processes,\n-                                 connect_nodes_bi,\n-                                 JSONRPCException,\n+                                 assert_raises_jsonrpc,\n                                  )\n \n class ZapWalletTXesTest (BitcoinTestFramework):\n \n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n-        self.num_nodes = 3\n-\n-    def setup_network(self):\n-        super().setup_network()\n-        connect_nodes_bi(self.nodes, 0, 2)\n+        self.num_nodes = 2\n \n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(1)\n         self.sync_all()\n-        self.nodes[1].generate(101)\n+        self.nodes[1].generate(100)\n         self.sync_all()\n \n-        assert_equal(self.nodes[0].getbalance(), 50)\n+        # This transaction will be confirmed\n+        txid1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 10)\n \n-        txid0 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n-        txid1 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n-        self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n-        txid2 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n-        txid3 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n-\n-        tx0 = self.nodes[0].gettransaction(txid0)\n-        assert_equal(tx0['txid'], txid0)  # tx0 must be available (confirmed)\n+        # This transaction will not be confirmed\n+        txid2 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 20)\n \n-        tx1 = self.nodes[0].gettransaction(txid1)\n-        assert_equal(tx1['txid'], txid1)  # tx1 must be available (confirmed)\n+        # Confirmed and unconfirmed transactions are now in the wallet.\n+        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n+        assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n \n-        tx2 = self.nodes[0].gettransaction(txid2)\n-        assert_equal(tx2['txid'], txid2)  # tx2 must be available (unconfirmed)\n+        # Stop-start node0. Both confirmed and unconfirmed transactions remain in the wallet.\n+        self.stop_node(0)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n \n-        tx3 = self.nodes[0].gettransaction(txid3)\n-        assert_equal(tx3['txid'], txid3)  # tx3 must be available (unconfirmed)\n+        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n+        assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n \n-        #restart bitcoind\n+        # Stop node0 and restart with zapwallettxes and persistmempool. The unconfirmed\n+        # transaction is zapped from the wallet, but is re-added when the mempool is reloaded.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0,self.options.tmpdir)\n-        \n-        tx3 = self.nodes[0].gettransaction(txid3)\n-        assert_equal(tx3['txid'], txid3)  # tx must be available (unconfirmed)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-persistmempool=1\", \"-zapwallettxes=2\"])\n \n-        self.stop_node(0)\n-        \n-        #restart bitcoind with zapwallettxes\n-        self.nodes[0] = self.start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])\n+        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n+        assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n \n-        assert_raises(JSONRPCException, self.nodes[0].gettransaction, [txid3])\n-        # there must be an exception because the unconfirmed wallettx0 must be gone by now\n+        # Stop node0 and restart with zapwallettxes, but not persistmempool.\n+        # The unconfirmed transaction is zapped and is no longer in the wallet.\n+        self.stop_node(0)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-zapwallettxes=2\"])\n \n-        tx0 = self.nodes[0].gettransaction(txid0)\n-        assert_equal(tx0['txid'], txid0)  # tx0 (confirmed) must still be available because it was confirmed\n+        # tx1 is still be available because it was confirmed\n+        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n \n+        # This will raise an exception because the unconfirmed transaction has been zapped\n+        assert_raises_jsonrpc(-5, 'Invalid or non-wallet transaction id', self.nodes[0].gettransaction, txid2)\n \n if __name__ == '__main__':\n     ZapWalletTXesTest().main()"
      }
    ]
  },
  {
    "sha": "4c3b538c61532dc68d79bbe34729759a13b73f0c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzNiNTM4YzYxNTMyZGM2OGQ3OWJiZTM0NzI5NzU5YTEzYjczZjBj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-14T22:17:27Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-15T19:31:26Z"
      },
      "message": "[logs] fix zapwallettxes startup logs",
      "tree": {
        "sha": "ca9d0e5be4244f6df3da3146613219fa23d0b795",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca9d0e5be4244f6df3da3146613219fa23d0b795"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c3b538c61532dc68d79bbe34729759a13b73f0c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c3b538c61532dc68d79bbe34729759a13b73f0c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c3b538c61532dc68d79bbe34729759a13b73f0c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c3b538c61532dc68d79bbe34729759a13b73f0c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7a2181b49774f2cc29839ebbdc206bcdb715a7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7a2181b49774f2cc29839ebbdc206bcdb715a7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7a2181b49774f2cc29839ebbdc206bcdb715a7f"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "7aa2e31743dff7d4c905f58515d3c884a62a14f1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3b538c61532dc68d79bbe34729759a13b73f0c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3b538c61532dc68d79bbe34729759a13b73f0c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4c3b538c61532dc68d79bbe34729759a13b73f0c",
        "patch": "@@ -4043,18 +4043,19 @@ bool CWallet::ParameterInteraction()\n         }\n     }\n \n-    // -zapwallettx implies dropping the mempool on startup\n-    if (GetBoolArg(\"-zapwallettxes\", false) && SoftSetBoolArg(\"-persistmempool\", false)) {\n-        LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -persistmempool=0\\n\", __func__);\n+    int zapwallettxes = GetArg(\"-zapwallettxes\", 0);\n+    // -zapwallettxes implies dropping the mempool on startup\n+    if (zapwallettxes != 0 && SoftSetBoolArg(\"-persistmempool\", false)) {\n+        LogPrintf(\"%s: parameter interaction: -zapwallettxes=%s -> setting -persistmempool=0\\n\", __func__, zapwallettxes);\n     }\n \n-    // -zapwallettx implies a rescan\n-    if (GetBoolArg(\"-zapwallettxes\", false)) {\n+    // -zapwallettxes implies a rescan\n+    if (zapwallettxes != 0) {\n         if (is_multiwallet) {\n             return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-zapwallettxes\"));\n         }\n         if (SoftSetBoolArg(\"-rescan\", true)) {\n-            LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n+            LogPrintf(\"%s: parameter interaction: -zapwallettxes=%s -> setting -rescan=1\\n\", __func__, zapwallettxes);\n         }\n     }\n "
      }
    ]
  }
]