[
  {
    "sha": "814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTRlZmQ2ZjFmYzgzYWZiOWVkNGJiM2MwODA4ZWUzYmFiMTFkMTBk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-07-26T00:48:39Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-01T17:49:51Z"
      },
      "message": "Bugfix: Fix a variety of misspellings",
      "tree": {
        "sha": "782fac39da35e54bce2a9108cdca82f21b489405",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/782fac39da35e54bce2a9108cdca82f21b489405"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a823faecf1463d0ce09b1c6690d69c624cc62874",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a823faecf1463d0ce09b1c6690d69c624cc62874",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a823faecf1463d0ce09b1c6690d69c624cc62874"
      }
    ],
    "stats": {
      "total": 152,
      "additions": 76,
      "deletions": 76
    },
    "files": [
      {
        "sha": "30b8ef1a30b3ecec41f150c62f6f627c13352f21",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -117,7 +117,7 @@ class CAddrInfo : public CAddress\n //    * Bucket selection is based on cryptographic hashing, using a randomly-generated 256-bit key, which should not\n //      be observable by adversaries.\n //    * Several indexes are kept for high performance. Defining DEBUG_ADDRMAN will introduce frequent (and expensive)\n-//      consistency checks for the entire datastructure.\n+//      consistency checks for the entire data structure.\n \n // total number of buckets for tried addresses\n #define ADDRMAN_TRIED_BUCKET_COUNT 64"
      },
      {
        "sha": "fc8c8aa5de27b8a57bbe68480cecd6f6159315bb",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -10,7 +10,7 @@\n //      could be used to create visually identical looking account numbers.\n // - A string with non-alphanumeric characters is not as easily accepted as an account number.\n // - E-mail usually won't line-break if there's no punctuation to break at.\n-// - Doubleclicking selects the whole number as one word if it's all alphanumeric.\n+// - Double-clicking selects the whole number as one word if it's all alphanumeric.\n //\n #ifndef BITCOIN_BASE58_H\n #define BITCOIN_BASE58_H"
      },
      {
        "sha": "675c8462eab896f7aa89a62a69512162088d468b",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -1881,7 +1881,7 @@ Value getwork(const Array& params, bool fHelp)\n         // Save\n         mapNewBlock[pblock->hashMerkleRoot] = make_pair(pblock, pblock->vtx[0].vin[0].scriptSig);\n \n-        // Prebuild hash buffers\n+        // Pre-build hash buffers\n         char pmidstate[32];\n         char pdata[128];\n         char phash1[64];\n@@ -2194,7 +2194,7 @@ string rfc1123Time()\n     time(&now);\n     struct tm* now_gmt = gmtime(&now);\n     string locale(setlocale(LC_TIME, NULL));\n-    setlocale(LC_TIME, \"C\"); // we want posix (aka \"C\") weekday/month strings\n+    setlocale(LC_TIME, \"C\"); // we want POSIX (aka \"C\") weekday/month strings\n     strftime(buffer, sizeof(buffer), \"%a, %d %b %Y %H:%M:%S +0000\", now_gmt);\n     setlocale(LC_TIME, locale.c_str());\n     return string(buffer);\n@@ -2388,7 +2388,7 @@ bool ClientAllowed(const boost::asio::ip::address& address)\n     if (address == asio::ip::address_v4::loopback()\n      || address == asio::ip::address_v6::loopback()\n      || (address.is_v4()\n-         // Chech whether IPv4 addresses match 127.0.0.0/8 (loopback subnet)\n+         // Check whether IPv4 addresses match 127.0.0.0/8 (loopback subnet)\n       && (address.to_v4().to_ulong() & 0xff000000) == 0x7f000000))\n         return true;\n \n@@ -2565,7 +2565,7 @@ static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol,\n {\n     vnThreadsRunning[THREAD_RPCLISTENER]++;\n \n-    // Immediately start accepting new connections, except when we're canceled or our socket is closed.\n+    // Immediately start accepting new connections, except when we're cancelled or our socket is closed.\n     if (error != asio::error::operation_aborted\n      && acceptor->is_open())\n         RPCListen(acceptor, context, fUseSSL);\n@@ -2698,7 +2698,7 @@ void ThreadRPCServer2(void* parg)\n     }\n     catch(boost::system::system_error &e)\n     {\n-        uiInterface.ThreadSafeMessageBox(strprintf(_(\"An error occured while setting up the RPC port %i for listening: %s\"), endpoint.port(), e.what()),\n+        uiInterface.ThreadSafeMessageBox(strprintf(_(\"An error occurred while setting up the RPC port %i for listening: %s\"), endpoint.port(), e.what()),\n                              _(\"Error\"), CClientUIInterface::OK | CClientUIInterface::MODAL);\n         StartShutdown();\n         return;\n@@ -3105,7 +3105,7 @@ int CommandLineRPC(int argc, char *argv[])\n int main(int argc, char *argv[])\n {\n #ifdef _MSC_VER\n-    // Turn off microsoft heap dump noise\n+    // Turn off Microsoft heap dump noise\n     _CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE);\n     _CrtSetReportFile(_CRT_WARN, CreateFile(\"NUL\", GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, 0));\n #endif"
      },
      {
        "sha": "411a1ee4c1301335f029e231b04a26ccda052ff0",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -17,7 +17,7 @@ bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::v\n     if (nRounds < 1 || chSalt.size() != WALLET_CRYPTO_SALT_SIZE)\n         return false;\n \n-    // Try to keep the keydata out of swap (and be a bit over-careful to keep the IV that we don't even use out of swap)\n+    // Try to keep the key data out of swap (and be a bit over-careful to keep the IV that we don't even use out of swap)\n     // Note that this does nothing about suspend-to-disk (which will put all our key data on disk)\n     // Note as well that at no point in this program is any attempt made to prevent stealing of keys by reading the memory of the running process.  \n     mlock(&chKey[0], sizeof chKey);\n@@ -44,7 +44,7 @@ bool CCrypter::SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigne\n     if (chNewKey.size() != WALLET_CRYPTO_KEY_SIZE || chNewIV.size() != WALLET_CRYPTO_KEY_SIZE)\n         return false;\n \n-    // Try to keep the keydata out of swap\n+    // Try to keep the key data out of swap\n     // Note that this does nothing about suspend-to-disk (which will put all our key data on disk)\n     // Note as well that at no point in this program is any attempt made to prevent stealing of keys by reading the memory of the running process.  \n     mlock(&chKey[0], sizeof chKey);"
      },
      {
        "sha": "1599efa0f02d8f6d95fa7b9d8c59d559faa260b8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -82,7 +82,7 @@ void Shutdown(void* parg)\n         printf(\"Bitcoin exited\\n\\n\");\n         fExit = true;\n #ifndef QT_GUI\n-        // ensure non UI client get's exited here, but let Bitcoin-Qt reach return 0; in bitcoin.cpp\n+        // ensure non-UI client get's exited here, but let Bitcoin-Qt reach return 0; in bitcoin.cpp\n         exit(0);\n #endif\n     }\n@@ -302,12 +302,12 @@ bool AppInit2()\n {\n     // ********************************************************* Step 1: setup\n #ifdef _MSC_VER\n-    // Turn off microsoft heap dump noise\n+    // Turn off Microsoft heap dump noise\n     _CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE);\n     _CrtSetReportFile(_CRT_WARN, CreateFileA(\"NUL\", GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, 0));\n #endif\n #if _MSC_VER >= 1400\n-    // Disable confusing \"helpful\" text message on abort, ctrl-c\n+    // Disable confusing \"helpful\" text message on abort, Ctrl-C\n     _set_abort_behavior(0, _WRITE_ABORT_MSG | _CALL_REPORTFAULT);\n #endif\n #ifndef WIN32"
      },
      {
        "sha": "50c6a5b4dbbe4e5f32ad69ad55ce22ad069e19ba",
        "filename": "src/irc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/irc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/irc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -207,7 +207,7 @@ void ThreadIRCSeed(void* parg)\n \n void ThreadIRCSeed2(void* parg)\n {\n-    /* Dont advertise on IRC if we don't allow incoming connections */\n+    /* Don't advertise on IRC if we don't allow incoming connections */\n     if (mapArgs.count(\"-connect\") || fNoListen)\n         return;\n "
      },
      {
        "sha": "76c45d0635b5ec04c385e7570ee6c63f3b88f1da",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -48,7 +48,7 @@ int EC_KEY_regenerate_key(EC_KEY *eckey, BIGNUM *priv_key)\n \n // Perform ECDSA key recovery (see SEC1 4.1.6) for curves over (mod p)-fields\n // recid selects which key is recovered\n-// if check is nonzero, additional checks are performed\n+// if check is non-zero, additional checks are performed\n int ECDSA_SIG_recover_key_GFp(EC_KEY *eckey, ECDSA_SIG *ecsig, const unsigned char *msg, int msglen, int recid, int check)\n {\n     if (!eckey) return 0;"
      },
      {
        "sha": "9e61a04701fb67dd099ea8bc8bc798bcf681ca47",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -1039,7 +1039,7 @@ bool CTransaction::DisconnectInputs(CTxDB& txdb)\n     // Remove transaction from index\n     // This can fail if a duplicate of this transaction was in a chain that got\n     // reorganized away. This is only possible if this transaction was completely\n-    // spent, so erasing it would be a no-op anway.\n+    // spent, so erasing it would be a no-op anyway.\n     txdb.EraseTxIndex(*this);\n \n     return true;\n@@ -1604,7 +1604,7 @@ bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)\n             return error(\"SetBestChain() : Reorganize failed\");\n         }\n \n-        // Connect futher blocks\n+        // Connect further blocks\n         BOOST_REVERSE_FOREACH(CBlockIndex *pindex, vpindexSecondary)\n         {\n             CBlock block;\n@@ -1769,7 +1769,7 @@ bool CBlock::CheckBlock(bool fCheckPOW, bool fCheckMerkleRoot) const\n     if (nSigOps > MAX_BLOCK_SIGOPS)\n         return DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"));\n \n-    // Check merkleroot\n+    // Check merkle root\n     if (fCheckMerkleRoot && hashMerkleRoot != BuildMerkleTree())\n         return DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"));\n \n@@ -1805,7 +1805,7 @@ bool CBlock::AcceptBlock()\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n+        return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lock-in at %d\", nHeight));\n \n     // Write block to history file\n     if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n@@ -1963,7 +1963,7 @@ FILE* AppendBlockFile(unsigned int& nFileRet)\n             return NULL;\n         if (fseek(file, 0, SEEK_END) != 0)\n             return NULL;\n-        // FAT32 filesize max 4GB, fseek and ftell max 2GB, so we must stay under 2GB\n+        // FAT32 file size max 4GB, fseek and ftell max 2GB, so we must stay under 2GB\n         if (ftell(file) < 0x7F000000 - MAX_SIZE)\n         {\n             nFileRet = nCurrentBlockFile;\n@@ -2055,7 +2055,7 @@ bool LoadBlockIndex(bool fAllowNew)\n \n void PrintBlockTree()\n {\n-    // precompute tree structure\n+    // pre-compute tree structure\n     map<CBlockIndex*, vector<CBlockIndex*> > mapNext;\n     for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)\n     {\n@@ -2108,7 +2108,7 @@ void PrintBlockTree()\n \n         PrintWallets(block);\n \n-        // put the main timechain first\n+        // put the main time-chain first\n         vector<CBlockIndex*>& vNext = mapNext[pindex];\n         for (unsigned int i = 0; i < vNext.size(); i++)\n         {\n@@ -2347,7 +2347,7 @@ bool static AlreadyHave(CTxDB& txdb, const CInv& inv)\n \n \n // The message start string is designed to be unlikely to occur in normal data.\n-// The characters are rarely used upper ascii, not valid as UTF-8, and produce\n+// The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n // a large 4-byte int at any alignment.\n unsigned char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };\n \n@@ -3030,12 +3030,12 @@ bool ProcessMessages(CNode* pfrom)\n         {\n             if (strstr(e.what(), \"end of data\"))\n             {\n-                // Allow exceptions from underlength message on vRecv\n+                // Allow exceptions from under-length message on vRecv\n                 printf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", strCommand.c_str(), nMessageSize, e.what());\n             }\n             else if (strstr(e.what(), \"size too large\"))\n             {\n-                // Allow exceptions from overlong size\n+                // Allow exceptions from over-long size\n                 printf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught\\n\", strCommand.c_str(), nMessageSize, e.what());\n             }\n             else\n@@ -3284,9 +3284,9 @@ unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1\n     unsigned int& nNonce = *(unsigned int*)(pdata + 12);\n     for (;;)\n     {\n-        // Crypto++ SHA-256\n+        // Crypto++ SHA256\n         // Hash pdata using pmidstate as the starting state into\n-        // preformatted buffer phash1, then hash phash1 into phash\n+        // pre-formatted buffer phash1, then hash phash1 into phash\n         nNonce++;\n         SHA256Transform(phash1, pdata, pmidstate);\n         SHA256Transform(phash, phash1, pSHA256InitState);\n@@ -3623,7 +3623,7 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1)\n {\n     //\n-    // Prebuild hash buffers\n+    // Pre-build hash buffers\n     //\n     struct\n     {\n@@ -3751,7 +3751,7 @@ void static BitcoinMiner(CWallet *pwallet)\n \n \n         //\n-        // Prebuild hash buffers\n+        // Pre-build hash buffers\n         //\n         char pmidstatebuf[32+16]; char* pmidstate = alignup<16>(pmidstatebuf);\n         char pdatabuf[128+16];    char* pdata     = alignup<16>(pdatabuf);\n@@ -3776,7 +3776,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             unsigned int nHashesDone = 0;\n             unsigned int nNonceFound;\n \n-            // Crypto++ SHA-256\n+            // Crypto++ SHA256\n             nNonceFound = ScanHash_CryptoPP(pmidstate, pdata + 64, phash1,\n                                             (char*)&hash, nHashesDone);\n "
      },
      {
        "sha": "b3474e7276d8d68660349743a372147eb640b045",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -357,7 +357,7 @@ bool GetMyExternalIP(CNetAddr& ipRet)\n     {\n         // We should be phasing out our use of sites like these.  If we need\n         // replacements, we should ask for volunteers to put this simple\n-        // php file on their webserver that prints the client IP:\n+        // php file on their web server that prints the client IP:\n         //  <?php echo $_SERVER[\"REMOTE_ADDR\"]; ?>\n         if (nHost == 1)\n         {\n@@ -497,14 +497,14 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest, int64 nTimeout)\n         /// debug print\n         printf(\"connected %s\\n\", pszDest ? pszDest : addrConnect.ToString().c_str());\n \n-        // Set to nonblocking\n+        // Set to non-blocking\n #ifdef WIN32\n         u_long nOne = 1;\n         if (ioctlsocket(hSocket, FIONBIO, &nOne) == SOCKET_ERROR)\n-            printf(\"ConnectSocket() : ioctlsocket nonblocking setting failed, error %d\\n\", WSAGetLastError());\n+            printf(\"ConnectSocket() : ioctlsocket non-blocking setting failed, error %d\\n\", WSAGetLastError());\n #else\n         if (fcntl(hSocket, F_SETFL, O_NONBLOCK) == SOCKET_ERROR)\n-            printf(\"ConnectSocket() : fcntl nonblocking setting failed, error %d\\n\", errno);\n+            printf(\"ConnectSocket() : fcntl non-blocking setting failed, error %d\\n\", errno);\n #endif\n \n         // Add node\n@@ -1596,7 +1596,7 @@ void ThreadOpenAddedConnections2(void* parg)\n     }\n }\n \n-// if succesful, this moves the passed grant to the constructed node\n+// if successful, this moves the passed grant to the constructed node\n bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOutbound, const char *strDest, bool fOneShot)\n {\n     //\n@@ -1773,7 +1773,7 @@ bool BindListenPort(const CService &addrBind, string& strError)\n \n \n #ifdef WIN32\n-    // Set to nonblocking, incoming connections will also inherit this\n+    // Set to non-blocking, incoming connections will also inherit this\n     if (ioctlsocket(hListenSocket, FIONBIO, (u_long*)&nOne) == SOCKET_ERROR)\n #else\n     if (fcntl(hListenSocket, F_SETFL, O_NONBLOCK) == SOCKET_ERROR)\n@@ -1834,7 +1834,7 @@ void static Discover()\n         return;\n \n #ifdef WIN32\n-    // Get local host ip\n+    // Get local host IP\n     char pszHostName[1000] = \"\";\n     if (gethostname(pszHostName, sizeof(pszHostName)) != SOCKET_ERROR)\n     {"
      },
      {
        "sha": "3717c4e634924f1c002e39826544ba7a8a9176a7",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -49,7 +49,7 @@ enum\n     LOCAL_BIND,   // address explicit bound to\n     LOCAL_UPNP,   // address reported by UPnP\n     LOCAL_IRC,    // address reported by IRC (deprecated)\n-    LOCAL_HTTP,   // address reported by whatismyip.com and similars\n+    LOCAL_HTTP,   // address reported by whatismyip.com and similar\n     LOCAL_MANUAL, // address explicitly specified (-externalip=)\n \n     LOCAL_MAX\n@@ -181,7 +181,7 @@ class CNode\n     int nRefCount;\n \n     // Denial-of-service detection/prevention\n-    // Key is ip address, value is banned-until-time\n+    // Key is IP address, value is banned-until-time\n     static std::map<CNetAddr, int64> setBanned;\n     static CCriticalSection cs_setBanned;\n     int nMisbehavior;"
      },
      {
        "sha": "b66c3666415b0c523193e1868826a328959f6228",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -702,7 +702,7 @@ bool CNetAddr::IsMulticast() const\n \n bool CNetAddr::IsValid() const\n {\n-    // Clean up 3-byte shifted addresses caused by garbage in size field\n+    // Cleanup 3-byte shifted addresses caused by garbage in size field\n     // of addr messages from versions before 0.2.9 checksum.\n     // Two consecutive addr messages look like this:\n     // header20 vectorlen3 addr26 addr26 addr26 header20 vectorlen3 addr26 addr26 addr26...\n@@ -851,13 +851,13 @@ std::vector<unsigned char> CNetAddr::GetGroup() const\n         nClass = NET_IPV4;\n         nStartByte = 12;\n     }\n-    // for 6to4 tunneled addresses, use the encapsulated IPv4 address\n+    // for 6to4 tunnelled addresses, use the encapsulated IPv4 address\n     else if (IsRFC3964())\n     {\n         nClass = NET_IPV4;\n         nStartByte = 2;\n     }\n-    // for Teredo-tunneled IPv6 addresses, use the encapsulated IPv4 address\n+    // for Teredo-tunnelled IPv6 addresses, use the encapsulated IPv4 address\n     else if (IsRFC4380())\n     {\n         vchRet.push_back(NET_IPV4);\n@@ -954,7 +954,7 @@ int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const\n         default:         return REACH_DEFAULT;\n         case NET_TEREDO: return REACH_TEREDO;\n         case NET_IPV4:   return REACH_IPV4;\n-        case NET_IPV6:   return fTunnel ? REACH_IPV6_WEAK : REACH_IPV6_STRONG; // only prefer giving our IPv6 address if it's not tunneled\n+        case NET_IPV6:   return fTunnel ? REACH_IPV6_WEAK : REACH_IPV6_STRONG; // only prefer giving our IPv6 address if it's not tunnelled\n         }\n     case NET_TOR:\n         switch(ourNet) {"
      },
      {
        "sha": "07ca12cb96b264db5831e4ee28799c378f63cff4",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -50,9 +50,9 @@ class CNetAddr\n         bool IsRFC1918() const; // IPv4 private networks (10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12)\n         bool IsRFC3849() const; // IPv6 documentation address (2001:0DB8::/32)\n         bool IsRFC3927() const; // IPv4 autoconfig (169.254.0.0/16)\n-        bool IsRFC3964() const; // IPv6 6to4 tunneling (2002::/16)\n+        bool IsRFC3964() const; // IPv6 6to4 tunnelling (2002::/16)\n         bool IsRFC4193() const; // IPv6 unique local (FC00::/15)\n-        bool IsRFC4380() const; // IPv6 Teredo tunneling (2001::/32)\n+        bool IsRFC4380() const; // IPv6 Teredo tunnelling (2001::/32)\n         bool IsRFC4843() const; // IPv6 ORCHID (2001:10::/28)\n         bool IsRFC4862() const; // IPv6 autoconfig (FE80::/64)\n         bool IsRFC6052() const; // IPv6 well-known prefix (64:FF9B::/96)"
      },
      {
        "sha": "6b88a2f0c3de75dfc1187ea7041447656449220c",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -177,7 +177,7 @@ void AskPassphraseDialog::accept()\n \n void AskPassphraseDialog::textChanged()\n {\n-    // Validate input, set Ok button to enabled when accepable\n+    // Validate input, set Ok button to enabled when acceptable\n     bool acceptable = false;\n     switch(mode)\n     {"
      },
      {
        "sha": "7fcfd0dec7224e989e91557d86f86c6ddf0fe86a",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -272,7 +272,7 @@ int main(int argc, char *argv[])\n // TODO: implement URI support on the Mac.\n #if !defined(MAC_OSX)\n \n-                // Place this here as guiref has to be defined if we dont want to lose URIs\n+                // Place this here as guiref has to be defined if we don't want to lose URIs\n                 ipcInit();\n \n                 // Check for URI in argv"
      },
      {
        "sha": "5136ea0c4010aa73e50faff413ad5d17855fe50f",
        "filename": "src/qt/bitcoinaddressvalidator.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/bitcoinaddressvalidator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/bitcoinaddressvalidator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinaddressvalidator.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -5,8 +5,8 @@\n \n   This is:\n   - All numbers except for '0'\n-  - All uppercase letters except for 'I' and 'O'\n-  - All lowercase letters except for 'l'\n+  - All upper-case letters except for 'I' and 'O'\n+  - All lower-case letters except for 'l'\n \n   User friendly Base58 input can map\n   - 'l' and 'I' to '1'"
      },
      {
        "sha": "ca4a888e4ec7afc22ce6516bb3d3213dd7cddfed",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -40,7 +40,7 @@ class BitcoinAmountField: public QWidget\n     void textChanged();\n \n protected:\n-    /** Intercept focus-in event and ',' keypresses */\n+    /** Intercept focus-in event and ',' key presses */\n     bool eventFilter(QObject *object, QEvent *event);\n \n private:"
      },
      {
        "sha": "b1a0d978c351af3d551d8bce6e3f39121b8f6cf1",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -158,7 +158,7 @@ BitcoinGUI::BitcoinGUI(QWidget *parent):\n     connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), this, SLOT(gotoHistoryPage()));\n     connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), transactionView, SLOT(focusTransaction(QModelIndex)));\n \n-    // Doubleclicking on a transaction on the transaction history page shows details\n+    // Double-clicking on a transaction on the transaction history page shows details\n     connect(transactionView, SIGNAL(doubleClicked(QModelIndex)), transactionView, SLOT(showDetails()));\n \n     rpcConsole = new RPCConsole(this);\n@@ -400,7 +400,7 @@ void BitcoinGUI::setWalletModel(WalletModel *walletModel)\n         setEncryptionStatus(walletModel->getEncryptionStatus());\n         connect(walletModel, SIGNAL(encryptionStatusChanged(int)), this, SLOT(setEncryptionStatus(int)));\n \n-        // Balloon popup for new transaction\n+        // Balloon pop-up for new transaction\n         connect(walletModel->getTransactionTableModel(), SIGNAL(rowsInserted(QModelIndex,int,int)),\n                 this, SLOT(incomingTransaction(QModelIndex,int,int)));\n "
      },
      {
        "sha": "acf84eb94196823c14d294a8e6f0ae1907cc29d1",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -101,7 +101,7 @@ class BitcoinGUI : public QMainWindow\n \n     /** Create the main UI actions. */\n     void createActions();\n-    /** Create the menu bar and submenus. */\n+    /** Create the menu bar and sub-menus. */\n     void createMenuBar();\n     /** Create the toolbars */\n     void createToolBars();\n@@ -168,7 +168,7 @@ private slots:\n     void backupWallet();\n     /** Change encrypted wallet passphrase */\n     void changePassphrase();\n-    /** Ask for pass phrase to unlock wallet temporarily */\n+    /** Ask for passphrase to unlock wallet temporarily */\n     void unlockWallet();\n \n     /** Show window if hidden, unminimize when minimized, rise when obscured or show if hidden and fToggleHidden is true */"
      },
      {
        "sha": "9b7c9e160e9195e17f14b991a8a94ff913964f02",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -5,7 +5,7 @@\n #include <QAbstractListModel>\n \n /** Bitcoin unit definitions. Encapsulates parsing and formatting\n-   and serves as list model for dropdown selection boxes.\n+   and serves as list model for drop-down selection boxes.\n */\n class BitcoinUnits: public QAbstractListModel\n {\n@@ -26,7 +26,7 @@ class BitcoinUnits: public QAbstractListModel\n     //! Unit conversion and formatting\n     ///@{\n \n-    //! Get list of units, for dropdown box\n+    //! Get list of units, for drop-down box\n     static QList<Unit> availableUnits();\n     //! Is unit ID valid?\n     static bool valid(int unit);\n@@ -49,7 +49,7 @@ class BitcoinUnits: public QAbstractListModel\n     ///@}\n \n     //! @name AbstractListModel implementation\n-    //! List model for unit dropdown selection box.\n+    //! List model for unit drop-down selection box.\n     ///@{\n     enum RoleIndex {\n         /** Unit identifier */"
      },
      {
        "sha": "d3afc0a565d3034560a35bde6014a8f6f84ad29c",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -131,7 +131,7 @@ bool parseBitcoinURI(QString uri, SendCoinsRecipient *out)\n     // Convert bitcoin:// to bitcoin:\n     //\n     //    Cannot handle this later, because bitcoin:// will cause Qt to see the part after // as host,\n-    //    which will lowercase it (and thus invalidate the address).\n+    //    which will lower-case it (and thus invalidate the address).\n     if(uri.startsWith(\"bitcoin://\"))\n     {\n         uri.replace(0, 10, \"bitcoin:\");\n@@ -436,7 +436,7 @@ HelpMessageBox::HelpMessageBox(QWidget *parent) :\n \n     setWindowTitle(tr(\"Bitcoin-Qt\"));\n     setTextFormat(Qt::PlainText);\n-    // setMinimumWidth is ignored for QMessageBox so put in nonbreaking spaces to make it wider.\n+    // setMinimumWidth is ignored for QMessageBox so put in non-breaking spaces to make it wider.\n     setText(header + QString(QChar(0x2003)).repeated(50));\n     setDetailedText(coreOptions + \"\\n\" + uiOptions);\n }"
      },
      {
        "sha": "db100bdb73c279fbada8d51aaa84fc6ef44ea243",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -47,7 +47,7 @@ namespace GUIUtil\n      */\n     void copyEntryData(QAbstractItemView *view, int column, int role=Qt::EditRole);\n \n-    /** Get save file name, mimics QFileDialog::getSaveFileName, except that it appends a default suffix\n+    /** Get save filename, mimics QFileDialog::getSaveFileName, except that it appends a default suffix\n         when no suffix is provided by the user.\n \n       @param[in] parent  Parent window (or 0)"
      },
      {
        "sha": "c1c177dbfed4e98b54f7d9788bf2ecc3e501e9df",
        "filename": "src/qt/notificator.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/notificator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/notificator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -82,7 +82,7 @@ class FreedesktopImage\n \n     static int metaType();\n \n-    // Image to variant that can be marshaled over DBus\n+    // Image to variant that can be marshalled over DBus\n     static QVariant toVariant(const QImage &img);\n \n private:\n@@ -294,7 +294,7 @@ void Notificator::notify(Class cls, const QString &title, const QString &text, c\n     default:\n         if(cls == Critical)\n         {\n-            // Fall back to old fashioned popup dialog if critical and no other notification available\n+            // Fall back to old fashioned pop-up dialog if critical and no other notification available\n             QMessageBox::critical(parent, title, text, QMessageBox::Ok, QMessageBox::Ok);\n         }\n         break;"
      },
      {
        "sha": "8abc0b2ec28e7e4bf0e0bff3409cdb40b97a1f74",
        "filename": "src/qt/notificator.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/notificator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/notificator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.h?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -27,7 +27,7 @@ class Notificator: public QObject\n     {\n         Information,         /**< Informational message */\n         Warning,             /**< Notify user of potential problem */\n-        Critical             /**< An error occured */\n+        Critical             /**< An error occurred */\n     };\n \n public slots:"
      },
      {
        "sha": "b3fc69ef0f9650787b9e00c39a01839b7b7b355e",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -126,7 +126,7 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n     if (!ctx.isValid())\n     {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_SM->setText(tr(\"Wallet unlock was canceled.\"));\n+        ui->statusLabel_SM->setText(tr(\"Wallet unlock was cancelled.\"));\n         return;\n     }\n "
      },
      {
        "sha": "30b98588f026013ef28b886f4a76750e1d5b9dcc",
        "filename": "src/qt/transactionfilterproxy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/transactionfilterproxy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/transactionfilterproxy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.h?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -23,7 +23,7 @@ class TransactionFilterProxy : public QSortFilterProxyModel\n     void setDateRange(const QDateTime &from, const QDateTime &to);\n     void setAddressPrefix(const QString &addrPrefix);\n     /**\n-      @note Type filter takes a bitfield created with TYPE() or ALL_TYPES\n+      @note Type filter takes a bit field created with TYPE() or ALL_TYPES\n      */\n     void setTypeFilter(quint32 modes);\n     void setMinAmount(qint64 minimum);"
      },
      {
        "sha": "ed2a70a350bbef11c59661b8403faf1b13abddad",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -205,7 +205,7 @@ void TransactionView::chooseDate(int idx)\n                 TransactionFilterProxy::MAX_DATE);\n         break;\n     case ThisWeek: {\n-        // Find last monday\n+        // Find last Monday\n         QDate startOfWeek = current.addDays(-(current.dayOfWeek()-1));\n         transactionProxyModel->setDateRange(\n                 QDateTime(startOfWeek),"
      },
      {
        "sha": "4b073bf941de8e426a4d62101b8522e83f8a6f4e",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -1070,7 +1070,7 @@ uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int\n     }\n     else if ((nHashType & 0x1f) == SIGHASH_SINGLE)\n     {\n-        // Only lockin the txout payee at same index as txin\n+        // Only lock-in the txout payee at same index as txin\n         unsigned int nOut = nIn;\n         if (nOut >= txTmp.vout.size())\n         {\n@@ -1272,7 +1272,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n                 if (!script2.GetOp(pc2, opcode2, vch2))\n                     break;\n                 // Normal situation is to fall through\n-                // to other if/else statments\n+                // to other if/else statements\n             }\n \n             if (opcode2 == OP_PUBKEY)\n@@ -1345,7 +1345,7 @@ bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint2\n // Sign scriptPubKey with private keys stored in keystore, given transaction hash and hash type.\n // Signatures are returned in scriptSigRet (or returns false if scriptPubKey can't be signed),\n // unless whichTypeRet is TX_SCRIPTHASH, in which case scriptSigRet is the redemption script.\n-// Returns false if scriptPubKey could not be completely satisified.\n+// Returns false if scriptPubKey could not be completely satisfied.\n //\n bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash, int nHashType,\n                   CScript& scriptSigRet, txnouttype& whichTypeRet)\n@@ -1733,7 +1733,7 @@ static CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo,\n             return PushAll(sigs1);\n         else\n         {\n-            // Recurse to combine:\n+            // Recur to combine:\n             valtype spk = sigs1.back();\n             CScript pubKey2(spk.begin(), spk.end());\n "
      },
      {
        "sha": "7f08dd554337e1b65846cb645b50102da1f6ec6c",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -37,7 +37,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n     dummyNode1.Misbehaving(100); // Should get banned\n     BOOST_CHECK(CNode::IsBanned(addr1));\n-    BOOST_CHECK(!CNode::IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different ip, not banned\n+    BOOST_CHECK(!CNode::IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002));\n     CNode dummyNode2(INVALID_SOCKET, addr2, \"\", true);"
      },
      {
        "sha": "eabfcd030475154d29071260ddb513ec9478c3c3",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -130,7 +130,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n     // Should not verify, because it will try to execute OP_INVALIDOPCODE\n     BOOST_CHECK(!Verify(scriptSig, p2sh, true));\n \n-    // Try to recurse, and verification should succeed because\n+    // Try to recur, and verification should succeed because\n     // the inner HASH160 <> EQUAL should only check the hash:\n     CScript p2sh2;\n     p2sh2.SetDestination(p2sh.GetID());\n@@ -225,7 +225,7 @@ BOOST_AUTO_TEST_CASE(is)\n \n BOOST_AUTO_TEST_CASE(switchover)\n {\n-    // Test switchover code\n+    // Test switch over code\n     CScript notValid;\n     notValid << OP_11 << OP_12 << OP_EQUALVERIFY;\n     CScript scriptSig;"
      },
      {
        "sha": "8244dcbaf1b663f4aa9a9bad882bdd505f12c4db",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -12,7 +12,7 @@\n #include <sys/time.h>\n #include <sys/resource.h>\n #else\n-typedef int pid_t; /* define for windows compatiblity */\n+typedef int pid_t; /* define for windows compatibility */\n #endif\n #include <map>\n #include <vector>"
      },
      {
        "sha": "dcc170a360fdead8141c92cacb76090f0a8be380",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "patch": "@@ -758,7 +758,7 @@ void CWallet::ReacceptWalletTransactions()\n             }\n             else\n             {\n-                // Reaccept any txes of ours that aren't already in a block\n+                // Re-accept any txes of ours that aren't already in a block\n                 if (!wtx.IsCoinBase())\n                     wtx.AcceptWalletTransaction(txdb, false);\n             }\n@@ -767,7 +767,7 @@ void CWallet::ReacceptWalletTransactions()\n         {\n             // TODO: optimize this to scan just part of the block chain?\n             if (ScanForWalletTransactions(pindexGenesisBlock))\n-                fRepeat = true;  // Found missing transactions: re-do Reaccept.\n+                fRepeat = true;  // Found missing transactions: re-do re-accept.\n         }\n     }\n }"
      }
    ]
  },
  {
    "sha": "3c726dd3c07acdda465522f027ba115b4185afaf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzcyNmRkM2MwN2FjZGRhNDY1NTIyZjAyN2JhMTE1YjQxODVhZmFm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-07-26T03:12:12Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-01T17:49:57Z"
      },
      "message": "Bugfix: Use standard BTC unit in comments",
      "tree": {
        "sha": "c530730f0d9c9b06c3aae20c84e11f88cbfbdb6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c530730f0d9c9b06c3aae20c84e11f88cbfbdb6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c726dd3c07acdda465522f027ba115b4185afaf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c726dd3c07acdda465522f027ba115b4185afaf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c726dd3c07acdda465522f027ba115b4185afaf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c726dd3c07acdda465522f027ba115b4185afaf/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/814efd6f1fc83afb9ed4bb3c0808ee3bab11d10d"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9b58b713d03817df0d174a69359b2438d6a64ada",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c726dd3c07acdda465522f027ba115b4185afaf/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c726dd3c07acdda465522f027ba115b4185afaf/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3c726dd3c07acdda465522f027ba115b4185afaf",
        "patch": "@@ -552,7 +552,7 @@ class CTransaction\n             if (nBlockSize == 1)\n             {\n                 // Transactions under 10K are free\n-                // (about 4500bc if made of 50bc inputs)\n+                // (about 4500 BTC if made of 50 BTC inputs)\n                 if (nBytes < 10000)\n                     nMinFee = 0;\n             }"
      },
      {
        "sha": "b0b3c47967f658e1d0046539589eeee92547d0b1",
        "filename": "src/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c726dd3c07acdda465522f027ba115b4185afaf/src/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c726dd3c07acdda465522f027ba115b4185afaf/src/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/wallet_tests.cpp?ref=3c726dd3c07acdda465522f027ba115b4185afaf",
        "patch": "@@ -164,11 +164,11 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         add_coin( 3*COIN);\n         add_coin( 4*COIN); // now we have 5+6+7+8+18+20+30+100+200+300+400 = 1094 cents\n         BOOST_CHECK( wallet.SelectCoinsMinConf(95 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * COIN);  // we should get 1 bitcoin in 1 coin\n+        BOOST_CHECK_EQUAL(nValueRet, 1 * COIN);  // we should get 1 BTC in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1);\n \n         BOOST_CHECK( wallet.SelectCoinsMinConf(195 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 2 * COIN);  // we should get 2 bitcoins in 1 coin\n+        BOOST_CHECK_EQUAL(nValueRet, 2 * COIN);  // we should get 2 BTC in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1);\n \n         // empty the wallet and start again, now with fractions of a cent, to test sub-cent change avoidance"
      }
    ]
  },
  {
    "sha": "b49f1398a1a02eab06def81a9d25b972c81b8fe1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDlmMTM5OGExYTAyZWFiMDZkZWY4MWE5ZDI1Yjk3MmM4MWI4ZmUx",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-07-26T03:25:26Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-01T17:50:00Z"
      },
      "message": "Bugfix: Correct English grammar regarding \"'s\"",
      "tree": {
        "sha": "c6f51d9b5cbf00b334c5311391c55d828fa29753",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6f51d9b5cbf00b334c5311391c55d828fa29753"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b49f1398a1a02eab06def81a9d25b972c81b8fe1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b49f1398a1a02eab06def81a9d25b972c81b8fe1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b49f1398a1a02eab06def81a9d25b972c81b8fe1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b49f1398a1a02eab06def81a9d25b972c81b8fe1/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c726dd3c07acdda465522f027ba115b4185afaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c726dd3c07acdda465522f027ba115b4185afaf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c726dd3c07acdda465522f027ba115b4185afaf"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "c32d0f8959a50f85e380abea8b6c6b7a9a51a73e",
        "filename": "doc/Doxyfile",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49f1398a1a02eab06def81a9d25b972c81b8fe1/doc/Doxyfile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49f1398a1a02eab06def81a9d25b972c81b8fe1/doc/Doxyfile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile?ref=b49f1398a1a02eab06def81a9d25b972c81b8fe1",
        "patch": "@@ -203,7 +203,7 @@ TAB_SIZE               = 8\n # For example adding \"sideeffect=\\par Side Effects:\\n\" will allow you to \n # put the command \\sideeffect (or @sideeffect) in the documentation, which \n # will result in a user-defined paragraph with heading \"Side Effects:\". \n-# You can put \\n's in the value part of an alias to insert newlines.\n+# You can put \\n in the value part of an alias to insert newlines.\n \n ALIASES                = \n "
      },
      {
        "sha": "e088d8710594ac3c17823dc09f52c4e98f12dba6",
        "filename": "doc/Tor.txt",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49f1398a1a02eab06def81a9d25b972c81b8fe1/doc/Tor.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49f1398a1a02eab06def81a9d25b972c81b8fe1/doc/Tor.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Tor.txt?ref=b49f1398a1a02eab06def81a9d25b972c81b8fe1",
        "patch": "@@ -56,8 +56,8 @@ config file):\n   HiddenServiceDir /var/lib/tor/bitcoin-service/\n   HiddenServicePort 8333 127.0.0.1:8333\n \n-The directory can be different of course, but (both) 8333's should be equal to your\n-bitcoind's P2P listen port (8333 by default).\n+The directory can be different of course, but (both) port numbers should be equal to\n+your bitcoind's P2P listen port (8333 by default).\n \n -externalip=X   You can tell bitcoin about its publicly reachable address using\n                 this option, and this can be a .onion address. Given the above"
      },
      {
        "sha": "a12786512d53b05580adec1fbe512df5b5a68db9",
        "filename": "doc/unit-tests.txt",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49f1398a1a02eab06def81a9d25b972c81b8fe1/doc/unit-tests.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49f1398a1a02eab06def81a9d25b972c81b8fe1/doc/unit-tests.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/unit-tests.txt?ref=b49f1398a1a02eab06def81a9d25b972c81b8fe1",
        "patch": "@@ -12,9 +12,9 @@ make -f makefile.unix test_bitcoin  # Replace makefile.unix if you're not on uni\n If all tests succeed the last line of output will be:\n *** No errors detected\n \n-To add more tests, add BOOST_AUTO_TEST_CASE's to the existing\n+To add more tests, add BOOST_AUTO_TEST_CASE functions to the existing\n .cpp files in the test/ directory or add new .cpp files that\n-implement new BOOST_AUTO_TEST_SUITE's (the makefiles are\n+implement new BOOST_AUTO_TEST_SUITE sections (the makefiles are\n set up to add test/*.cpp to test_bitcoin automatically).\n \n "
      },
      {
        "sha": "7c141c427b1b02cd103336128fd9509aca1beb75",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49f1398a1a02eab06def81a9d25b972c81b8fe1/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49f1398a1a02eab06def81a9d25b972c81b8fe1/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=b49f1398a1a02eab06def81a9d25b972c81b8fe1",
        "patch": "@@ -174,13 +174,13 @@ class CAddrMan\n     // last used nId\n     int nIdCount;\n \n-    // table with information about all nId's\n+    // table with information about all nIds\n     std::map<int, CAddrInfo> mapInfo;\n \n     // find an nId based on its network address\n     std::map<CNetAddr, int> mapAddr;\n \n-    // randomly-ordered vector of all nId's\n+    // randomly-ordered vector of all nIds\n     std::vector<int> vRandom;\n \n     // number of \"tried\" entries\n@@ -253,8 +253,8 @@ class CAddrMan\n         // * nNew\n         // * nTried\n         // * number of \"new\" buckets\n-        // * all nNew addrinfo's in vvNew\n-        // * all nTried addrinfo's in vvTried\n+        // * all nNew addrinfos in vvNew\n+        // * all nTried addrinfos in vvTried\n         // * for each bucket:\n         //   * number of elements\n         //   * for each element: index"
      },
      {
        "sha": "1ccb31e57d86b309a49892a49b94edb9dcbd82e8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49f1398a1a02eab06def81a9d25b972c81b8fe1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49f1398a1a02eab06def81a9d25b972c81b8fe1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b49f1398a1a02eab06def81a9d25b972c81b8fe1",
        "patch": "@@ -82,7 +82,7 @@ void Shutdown(void* parg)\n         printf(\"Bitcoin exited\\n\\n\");\n         fExit = true;\n #ifndef QT_GUI\n-        // ensure non-UI client get's exited here, but let Bitcoin-Qt reach return 0; in bitcoin.cpp\n+        // ensure non-UI client gets exited here, but let Bitcoin-Qt reach 'return 0;' in bitcoin.cpp\n         exit(0);\n #endif\n     }"
      },
      {
        "sha": "54cd2d9983c79274eaebf2932a0aded56ea5edbe",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49f1398a1a02eab06def81a9d25b972c81b8fe1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49f1398a1a02eab06def81a9d25b972c81b8fe1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b49f1398a1a02eab06def81a9d25b972c81b8fe1",
        "patch": "@@ -564,7 +564,7 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n \n         // Continuously rate-limit free transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n-        // be annoying or make other's transactions take longer to confirm.\n+        // be annoying or make others' transactions take longer to confirm.\n         if (nFees < MIN_RELAY_TX_FEE)\n         {\n             static CCriticalSection cs;\n@@ -1102,7 +1102,7 @@ bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTes\n         }\n     }\n \n-    // Make sure all prevout.n's are valid:\n+    // Make sure all prevout.n indexes are valid:\n     for (unsigned int i = 0; i < vin.size(); i++)\n     {\n         const COutPoint prevout = vin[i].prevout;\n@@ -1338,7 +1338,7 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex, bool fJustCheck)\n     // being sent to another address.\n     // See BIP30 and http://r6.ca/blog/20120206T005236Z.html for more information.\n     // This logic is not necessary for memory pool transactions, as AcceptToMemoryPool\n-    // already refuses previously-known transaction id's entirely.\n+    // already refuses previously-known transaction ids entirely.\n     // This rule applies to all blocks whose timestamp is after March 15, 2012, 0:00 UTC.\n     int64 nBIP30SwitchTime = 1331769600;\n     bool fEnforceBIP30 = (pindex->nTime > nBIP30SwitchTime);"
      },
      {
        "sha": "42bfcfd0b2910583f5000216aaa35ecd19bbb8d2",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49f1398a1a02eab06def81a9d25b972c81b8fe1/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49f1398a1a02eab06def81a9d25b972c81b8fe1/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=b49f1398a1a02eab06def81a9d25b972c81b8fe1",
        "patch": "@@ -299,7 +299,7 @@ int main(int argc, char *argv[])\n                 window.setWalletModel(0);\n                 guiref = 0;\n             }\n-            // Shutdown the core and it's threads, but don't exit Bitcoin-Qt here\n+            // Shutdown the core and its threads, but don't exit Bitcoin-Qt here\n             Shutdown(NULL);\n         }\n         else"
      },
      {
        "sha": "7e6ad15d6a69007f437795df6f92d65f59fb43f9",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49f1398a1a02eab06def81a9d25b972c81b8fe1/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49f1398a1a02eab06def81a9d25b972c81b8fe1/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=b49f1398a1a02eab06def81a9d25b972c81b8fe1",
        "patch": "@@ -492,7 +492,7 @@ void BitcoinGUI::setNumConnections(int count)\n \n void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n {\n-    // don't show / hide progressBar and it's label if we have no connection(s) to the network\n+    // don't show / hide progressBar and its label if we have no connection(s) to the network\n     if (!clientModel || clientModel->getNumConnections() == 0)\n     {\n         progressBarLabel->setVisible(false);"
      },
      {
        "sha": "d4715abaecd9446d58cccf4455a17718728492ba",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49f1398a1a02eab06def81a9d25b972c81b8fe1/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49f1398a1a02eab06def81a9d25b972c81b8fe1/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=b49f1398a1a02eab06def81a9d25b972c81b8fe1",
        "patch": "@@ -99,7 +99,7 @@ QString BitcoinUnits::format(int unit, qint64 n, bool fPlus)\n     QString quotient_str = QString::number(quotient);\n     QString remainder_str = QString::number(remainder).rightJustified(num_decimals, '0');\n \n-    // Right-trim excess 0's after the decimal point\n+    // Right-trim excess zeros after the decimal point\n     int nTrim = 0;\n     for (int i = remainder_str.size()-1; i>=2 && (remainder_str.at(i) == '0'); --i)\n         ++nTrim;"
      },
      {
        "sha": "8c35f0eed5b18495e16732dcfd5f01c12d718350",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49f1398a1a02eab06def81a9d25b972c81b8fe1/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49f1398a1a02eab06def81a9d25b972c81b8fe1/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=b49f1398a1a02eab06def81a9d25b972c81b8fe1",
        "patch": "@@ -1811,7 +1811,7 @@ unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\n             return 0;\n     }\n \n-    /// ... and return it's opcount:\n+    /// ... and return its opcount:\n     CScript subscript(data.begin(), data.end());\n     return subscript.GetSigOpCount(true);\n }"
      },
      {
        "sha": "0334bf577e9531940a85e0e433fc4822105cf68f",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49f1398a1a02eab06def81a9d25b972c81b8fe1/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49f1398a1a02eab06def81a9d25b972c81b8fe1/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=b49f1398a1a02eab06def81a9d25b972c81b8fe1",
        "patch": "@@ -348,7 +348,7 @@ string FormatMoney(int64 n, bool fPlus)\n     int64 remainder = n_abs%COIN;\n     string str = strprintf(\"%\"PRI64d\".%08\"PRI64d, quotient, remainder);\n \n-    // Right-trim excess 0's before the decimal point:\n+    // Right-trim excess zeros before the decimal point:\n     int nTrim = 0;\n     for (int i = str.size()-1; (str[i] == '0' && isdigit(str[i-2])); --i)\n         ++nTrim;"
      },
      {
        "sha": "ca60e02bd0d9f258ddb9fcb710a4c0b535564098",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49f1398a1a02eab06def81a9d25b972c81b8fe1/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49f1398a1a02eab06def81a9d25b972c81b8fe1/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=b49f1398a1a02eab06def81a9d25b972c81b8fe1",
        "patch": "@@ -10,7 +10,7 @@\n // client versioning\n //\n \n-// These need to be macro's, as version.cpp's voodoo requires it\n+// These need to be macros, as version.cpp's voodoo requires it\n #define CLIENT_VERSION_MAJOR       0\n #define CLIENT_VERSION_MINOR       6\n #define CLIENT_VERSION_REVISION   99"
      }
    ]
  }
]