[
  {
    "sha": "5d08c9c579ba8cc7b684105c6a08263992b08d52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDA4YzljNTc5YmE4Y2M3YjY4NDEwNWM2YTA4MjYzOTkyYjA4ZDUy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-31T18:18:15Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-31T18:22:25Z"
      },
      "message": "Send the correct error code in reject messages",
      "tree": {
        "sha": "96962d7d1ea9464c59ee23838a468f268ecda43c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96962d7d1ea9464c59ee23838a468f268ecda43c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d08c9c579ba8cc7b684105c6a08263992b08d52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d08c9c579ba8cc7b684105c6a08263992b08d52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d08c9c579ba8cc7b684105c6a08263992b08d52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d08c9c579ba8cc7b684105c6a08263992b08d52/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "edc62c959ab3ed7019b514107a4ab3865fc12c2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edc62c959ab3ed7019b514107a4ab3865fc12c2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/edc62c959ab3ed7019b514107a4ab3865fc12c2e"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 11,
      "deletions": 9
    },
    "files": [
      {
        "sha": "abf9797af39d44ede75e66a78ddd63283be07ab9",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d08c9c579ba8cc7b684105c6a08263992b08d52/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d08c9c579ba8cc7b684105c6a08263992b08d52/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5d08c9c579ba8cc7b684105c6a08263992b08d52",
        "patch": "@@ -855,8 +855,8 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationSta\n \n     int nDoS = 0;\n     if (state.IsInvalid(nDoS)) {\n-        if (it != mapBlockSource.end() && State(it->second.first)) {\n-            assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n+        // Don't send reject message with code 0 or an internal reject code.\n+        if (it != mapBlockSource.end() && State(it->second.first) && state.GetRejectCode() > 0 && state.GetRejectCode() < REJECT_INTERNAL) {\n             CBlockReject reject = {(unsigned char)state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), hash};\n             State(it->second.first)->rejects.push_back(reject);\n             if (nDoS > 0 && it->second.second)\n@@ -1942,7 +1942,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             LogPrint(\"mempoolrej\", \"%s from peer=%d was not accepted: %s\\n\", tx.GetHash().ToString(),\n                 pfrom->id,\n                 FormatStateMessage(state));\n-            if (state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P\n+            if (state.GetRejectCode() > 0 && state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P\n                 connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::REJECT, strCommand, (unsigned char)state.GetRejectCode(),\n                                    state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash));\n             if (nDoS > 0) {"
      },
      {
        "sha": "4df7d3b351ff30af18d061fc5ac33a973577e089",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d08c9c579ba8cc7b684105c6a08263992b08d52/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d08c9c579ba8cc7b684105c6a08263992b08d52/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5d08c9c579ba8cc7b684105c6a08263992b08d52",
        "patch": "@@ -1914,7 +1914,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                                REJECT_INVALID, \"bad-cb-amount\");\n \n     if (!control.Wait())\n-        return state.DoS(100, false);\n+        return state.DoS(100, error(\"%s: CheckQueue failed\", __func__), REJECT_INVALID, \"block-validation-failed\");\n     int64_t nTime4 = GetTimeMicros(); nTimeVerify += nTime4 - nTime2;\n     LogPrint(\"bench\", \"    - Verify %u txins: %.2fms (%.3fms/txin) [%.2fs]\\n\", nInputs - 1, 0.001 * (nTime4 - nTime2), nInputs <= 1 ? 0 : 0.001 * (nTime4 - nTime2) / (nInputs-1), nTimeVerify * 0.000001);\n \n@@ -2881,10 +2881,12 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n         return true;\n \n     int nHeight = pindexPrev->nHeight+1;\n-    // Don't accept any forks from the main chain prior to last checkpoint\n+    // Don't accept any forks from the main chain prior to last checkpoint.\n+    // GetLastCheckpoint finds the last checkpoint in MapCheckpoints that's in our\n+    // MapBlockIndex.\n     CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(chainparams.Checkpoints());\n     if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n-        return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n+        return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight), REJECT_CHECKPOINT, \"bad-fork-prior-to-checkpoint\");\n \n     return true;\n }\n@@ -3083,7 +3085,7 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n         CBlockIndex* pindexPrev = NULL;\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n-            return state.DoS(10, error(\"%s: prev block not found\", __func__), 0, \"bad-prevblk\");\n+            return state.DoS(10, error(\"%s: prev block not found\", __func__), 0, \"prev-blk-not-found\");\n         pindexPrev = (*mi).second;\n         if (pindexPrev->nStatus & BLOCK_FAILED_MASK)\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");"
      },
      {
        "sha": "e7fe7372c80648a5aa99735c154b40b6f35f54b7",
        "filename": "test/functional/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d08c9c579ba8cc7b684105c6a08263992b08d52/test/functional/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d08c9c579ba8cc7b684105c6a08263992b08d52/test/functional/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fullblocktest.py?ref=5d08c9c579ba8cc7b684105c6a08263992b08d52",
        "patch": "@@ -398,7 +398,7 @@ def update_block(block_number, new_transactions):\n \n         # Extend the b26 chain to make sure bitcoind isn't accepting b26\n         b27 = block(27, spend=out[7])\n-        yield rejected(RejectResult(0, b'bad-prevblk'))\n+        yield rejected(False)\n \n         # Now try a too-large-coinbase script\n         tip(15)\n@@ -410,7 +410,7 @@ def update_block(block_number, new_transactions):\n \n         # Extend the b28 chain to make sure bitcoind isn't accepting b28\n         b29 = block(29, spend=out[7])\n-        yield rejected(RejectResult(0, b'bad-prevblk'))\n+        yield rejected(False)\n \n         # b30 has a max-sized coinbase scriptSig.\n         tip(23)"
      }
    ]
  }
]