jnewbery,2017-03-31T18:26:24Z,Extended test run succeeds for me locally.,https://github.com/bitcoin/bitcoin/pull/10135#issuecomment-290791057,290791057,
gmaxwell,2017-04-01T19:36:31Z,"I don't really have any objection to making the behavior more correct, but I would rather more or less stop sending reject messages.\n\nThere is only one or two places where I'm aware of _any_ implementation doing anything remotely useful with them (some bitcoinj users use transaction rejection to figure out that their txn hasn't relayed at all, which isn't reliable but is arguably better than n",https://github.com/bitcoin/bitcoin/pull/10135#issuecomment-290942254,290942254,
jnewbery,2017-04-01T23:59:15Z,"@gmaxwell - I've heard that argument from several people, and I'm mostly on board with it. Thanks for documenting it here.\n\nreject messages are somewhat useful in black box testing. We can send in invalid messages and assert that bitcoin rejected them _for the right reason_. The old style 'comparison' test cases use this a lot. That's not a justification for spending a heap of time on improvin",https://github.com/bitcoin/bitcoin/pull/10135#issuecomment-290955257,290955257,
gmaxwell,2017-04-02T01:07:53Z,"> For my own education, do you have references to the serious bugs that reject messages have caused?\n\nPR #4903  was mostly what I was thinking of there, also the original implementation of reject messages themselves printed unsanitized bytes to the logs and IIRC also didn't limit the size of strings, though I believe both of these were fixed before merge.  We have also had many PRs for where w",https://github.com/bitcoin/bitcoin/pull/10135#issuecomment-290957663,290957663,
laanwj,2017-04-02T12:23:46Z,"utACK https://github.com/bitcoin/bitcoin/pull/10135/commits/5d08c9c579ba8cc7b684105c6a08263992b08d52\n\n> reject messages are somewhat useful in black box testing. We can send in invalid messages and assert that bitcoin rejected them for the right reason.\n\nAlso for things that do custom transaction broadcasting (for example [bitcoin-submittx](https://github.com/laanwj/bitcoin-submittx) ) it'",https://github.com/bitcoin/bitcoin/pull/10135#issuecomment-290983044,290983044,
sdaftuar,2017-03-31T18:28:05Z,"nit: I don't feel strongly but we could leave this assert in, no?",https://github.com/bitcoin/bitcoin/pull/10135#discussion_r109222774,109222774,src/net_processing.cpp
sdaftuar,2017-03-31T18:37:55Z,"Sorry I didn't think of this before, but perhaps we were sending a reject message here specifically because we're assigning DoS points.  Suppressing the reject message will just cause the peer to have less information about why they're being disconnected.\n\nI'm not sure I think BIP 61 is a great idea (in particular, the lack of versioning makes things difficult) but the motivation of it was in ",https://github.com/bitcoin/bitcoin/pull/10135#discussion_r109224935,109224935,src/validation.cpp
jnewbery,2017-03-31T19:46:03Z,The if statement has been modified to check that `state.GetRejectCode() < REJECT_INTERNAL` (so this assert can now never fail),https://github.com/bitcoin/bitcoin/pull/10135#discussion_r109236605,109236605,src/net_processing.cpp
jnewbery,2017-03-31T19:52:08Z,"I'd rather extend BIP61 than deliberately send a reject message that's incorrect (the block here isn't INVALID, it just doesn't connect with our chain).\n\nIf you prefer that we send a reject message, I think we should at least change the error code to a 0x4* value and change the message to 'prev-blk-not-found'.",https://github.com/bitcoin/bitcoin/pull/10135#discussion_r109237648,109237648,src/validation.cpp
