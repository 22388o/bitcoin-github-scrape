[
  {
    "sha": "1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWFjZmMyZGE1MjFhOGUwZDcxOGU5YWM1NjFkOWIyZDc5MTZlYjBi",
    "commit": {
      "author": {
        "name": "leijurv",
        "email": "leijurv@gmail.com",
        "date": "2016-08-13T17:21:13Z"
      },
      "committer": {
        "name": "leijurv",
        "email": "leijurv@gmail.com",
        "date": "2016-08-14T13:57:11Z"
      },
      "message": "various typos",
      "tree": {
        "sha": "36df60d617ba18670531ac3055ea24a4ca13753c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36df60d617ba18670531ac3055ea24a4ca13753c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQIcBAABCgAGBQJXsHi3AAoJEAk2ICQwrhh8fdkP+wcKGyl96ncnP5QdOJjW7iJe\nUZCssGaSgtaL7MxL5whzFFgd5lj1hb/R2UbkHGLbZEAXrdv31E3NHm3PhqrpqQtK\n4nrgvw3GKGKmJipG/sDo+Hh3aOtC/p10ys3pPzWdgbfjX3noV4d4k7DCrsW3+GkV\n+BcLBmoTcbKt3vxX4hEP+ZLd7XZv0oS1x+3cHBCg25tWZE53mXRlBth370XNUcWU\nvfhpCg4L3NSopShrhj2bUlsD+BQU59a11++PC35GjFoy5D0y0jvv17rUtZgGbbhj\nmnfThLkeLExfm/VPckvBiCXlZUkf6ZRscS90IheXZW8ZCu4RJF2x+D6DF2k8GyVK\n6qG9vt7HCRzilfuXh4r40sdKW/8HbpqdBkcmMXcICoSrpop94gS0s7BLP4raT38u\n3ieQISXA+UE/HZ9afcbkW6qi6+iBD79RQruxx6loAfbaraTeWFX0mP9ElE704EgF\n06eGFq09u9yrrqX7boI9VjwnvUhAsRWjFETZsjcDCpUOxZVZ1QLjalY0tWgR4EcX\n9txtPkuadxXmM6RWl/AQU3shwBs3H/b4uEGGLFXhNyE4BOSYavXGae90HijAYFCe\npgCldj+2adZqZTDHO26l34ABHf+YhtGKS3d3RTjhBn85XW/lDplgtRA10mLgCafC\n+aD8ThKhBtcQ4UyeUA8e\n=nCQf\n-----END PGP SIGNATURE-----",
        "payload": "tree 36df60d617ba18670531ac3055ea24a4ca13753c\nparent 38590729631c0984abf5c1bb26a0f2d21ccd4916\nauthor leijurv <leijurv@gmail.com> 1471108873 -0600\ncommitter leijurv <leijurv@gmail.com> 1471183031 -0600\n\nvarious typos\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b/comments",
    "author": {
      "login": "leijurv",
      "id": 3837873,
      "node_id": "MDQ6VXNlcjM4Mzc4NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3837873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leijurv",
      "html_url": "https://github.com/leijurv",
      "followers_url": "https://api.github.com/users/leijurv/followers",
      "following_url": "https://api.github.com/users/leijurv/following{/other_user}",
      "gists_url": "https://api.github.com/users/leijurv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leijurv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leijurv/subscriptions",
      "organizations_url": "https://api.github.com/users/leijurv/orgs",
      "repos_url": "https://api.github.com/users/leijurv/repos",
      "events_url": "https://api.github.com/users/leijurv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leijurv/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "leijurv",
      "id": 3837873,
      "node_id": "MDQ6VXNlcjM4Mzc4NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3837873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leijurv",
      "html_url": "https://github.com/leijurv",
      "followers_url": "https://api.github.com/users/leijurv/followers",
      "following_url": "https://api.github.com/users/leijurv/following{/other_user}",
      "gists_url": "https://api.github.com/users/leijurv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leijurv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leijurv/subscriptions",
      "organizations_url": "https://api.github.com/users/leijurv/orgs",
      "repos_url": "https://api.github.com/users/leijurv/repos",
      "events_url": "https://api.github.com/users/leijurv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leijurv/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38590729631c0984abf5c1bb26a0f2d21ccd4916",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38590729631c0984abf5c1bb26a0f2d21ccd4916",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38590729631c0984abf5c1bb26a0f2d21ccd4916"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "df237f8f26f5876f04c00c7f94653cf0a7234e67",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b",
        "patch": "@@ -75,7 +75,7 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n     }\n     prefilled_count = cmpctblock.prefilledtxn.size();\n \n-    // Calculate map of txids -> positions and check mempool to see what we have (or dont)\n+    // Calculate map of txids -> positions and check mempool to see what we have (or don't)\n     // Because well-formed cmpctblock messages will have a (relatively) uniform distribution\n     // of short IDs, any highly-uneven distribution of elements can be safely treated as a\n     // READ_STATUS_FAILED."
      },
      {
        "sha": "6af9d30cdfc40d04a9db8fc6bffe2cc2efa70c93",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b",
        "patch": "@@ -1267,7 +1267,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // cache size calculations\n     int64_t nTotalCache = (GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n     nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n-    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greated than nMaxDbcache\n+    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n     int64_t nBlockTreeDBCache = nTotalCache / 8;\n     nBlockTreeDBCache = std::min(nBlockTreeDBCache, (GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxBlockDBAndTxIndexCache : nMaxBlockDBCache) << 20);\n     nTotalCache -= nBlockTreeDBCache;"
      },
      {
        "sha": "64c67ff0f601a04854c92fce59a0159a4bb92115",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b",
        "patch": "@@ -1174,7 +1174,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n                 // nSequence >= maxint-1 on all inputs.\n                 //\n                 // maxint-1 is picked to still allow use of nLockTime by\n-                // non-replacable transactions. All inputs rather than just one\n+                // non-replaceable transactions. All inputs rather than just one\n                 // is for the sake of multi-party protocols, where we don't\n                 // want a single party to be able to disable replacement.\n                 //\n@@ -1988,7 +1988,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // is safe because block merkle hashes are still computed and checked,\n         // and any change will be caught at the next checkpoint. Of course, if\n         // the checkpoint is for a chain that's invalid due to false scriptSigs\n-        // this optimisation would allow an invalid chain to be accepted.\n+        // this optimization would allow an invalid chain to be accepted.\n         if (fScriptChecks) {\n             for (unsigned int i = 0; i < tx.vin.size(); i++) {\n                 const COutPoint &prevout = tx.vin[i].prevout;\n@@ -4795,7 +4795,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     {\n                         // If a peer is asking for old blocks, we're almost guaranteed\n                         // they wont have a useful mempool to match against a compact block,\n-                        // and we dont feel like constructing the object for them, so\n+                        // and we don't feel like constructing the object for them, so\n                         // instead we respond with the full, non-compact block.\n                         if (mi->second->nHeight >= chainActive.Height() - 10) {\n                             CBlockHeaderAndShortTxIDs cmpctblock(block);"
      },
      {
        "sha": "e9106fccf79272815778e04e65548a828b695eb8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b",
        "patch": "@@ -214,7 +214,7 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  * \n- * @param[out]  state   This may be set to an Error state if any error occurred processing it, including during validation/connection/etc of otherwise unrelated blocks during reorganisation; or it may be set to an Invalid state if pblock is itself invalid (but this is not guaranteed even when the block is checked). If you want to *possibly* get feedback on whether pblock is valid, you must also install a CValidationInterface (see validationinterface.h) - this will have its BlockChecked method called whenever *any* block completes validation.\n+ * @param[out]  state   This may be set to an Error state if any error occurred processing it, including during validation/connection/etc of otherwise unrelated blocks during reorganization; or it may be set to an Invalid state if pblock is itself invalid (but this is not guaranteed even when the block is checked). If you want to *possibly* get feedback on whether pblock is valid, you must also install a CValidationInterface (see validationinterface.h) - this will have its BlockChecked method called whenever *any* block completes validation.\n  * @param[in]   pfrom   The node which we are receiving the block from; it is added to mapBlockSource and may be penalised if the block is invalid.\n  * @param[in]   pblock  The block we want to process.\n  * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers."
      },
      {
        "sha": "4f669f3382641027f177a9a4040194bc0d1b1256",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b",
        "patch": "@@ -1676,7 +1676,7 @@ void ThreadOpenConnections()\n             if (nANow - addr.nLastTry < 600 && nTries < 30)\n                 continue;\n \n-            // only consider nodes missing relevant services after 40 failed attemps\n+            // only consider nodes missing relevant services after 40 failed attempts\n             if ((addr.nServices & nRelevantServices) != nRelevantServices && nTries < 40)\n                 continue;\n "
      },
      {
        "sha": "6d88d4bec8147cb1d3f994a18f1512c20d26355c",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b",
        "patch": "@@ -650,7 +650,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n \n     if (nMaxVersionPreVB >= 2) {\n         // If VB is supported by the client, nMaxVersionPreVB is -1, so we won't get here\n-        // Because BIP 34 changed how the generation transaction is serialised, we can only use version/force back to v2 blocks\n+        // Because BIP 34 changed how the generation transaction is serialized, we can only use version/force back to v2 blocks\n         // This is safe to do [otherwise-]unconditionally only because we are throwing an exception above if a non-force deployment gets activated\n         // Note that this can probably also be removed entirely after the first BIP9 non-force deployment (ie, probably segwit) gets activated\n         aMutable.push_back(\"version/force\");"
      },
      {
        "sha": "8a3bebcc6701bacc2d149a316637a15f33dd15bc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1aacfc2da521a8e0d718e9ac561d9b2d7916eb0b",
        "patch": "@@ -3132,7 +3132,7 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n             mapKeyBirth[it->first] = it->second.nCreateTime;\n \n     // map in which we'll infer heights of other keys\n-    CBlockIndex *pindexMax = chainActive[std::max(0, chainActive.Height() - 144)]; // the tip can be reorganised; use a 144-block safety margin\n+    CBlockIndex *pindexMax = chainActive[std::max(0, chainActive.Height() - 144)]; // the tip can be reorganized; use a 144-block safety margin\n     std::map<CKeyID, CBlockIndex*> mapKeyFirstBlock;\n     std::set<CKeyID> setKeys;\n     GetKeys(setKeys);"
      }
    ]
  }
]