[
  {
    "sha": "467fe5779ca85bd8d58fde65948ffc8c35078e60",
    "node_id": "C_kwDOABII59oAKDQ2N2ZlNTc3OWNhODViZDhkNThmZGU2NTk0OGZmYzhjMzUwNzhlNjA",
    "commit": {
      "author": {
        "name": "Pavel Safronov",
        "email": "pv.safronov@gmail.com",
        "date": "2021-11-03T01:00:42Z"
      },
      "committer": {
        "name": "Pavel Safronov",
        "email": "pv.safronov@gmail.com",
        "date": "2021-11-11T08:06:38Z"
      },
      "message": "test: Correct MyPy typing for subtest decorator",
      "tree": {
        "sha": "b45a65bbd8eeda686840233eb53d58dd9cff38f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b45a65bbd8eeda686840233eb53d58dd9cff38f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/467fe5779ca85bd8d58fde65948ffc8c35078e60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/467fe5779ca85bd8d58fde65948ffc8c35078e60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/467fe5779ca85bd8d58fde65948ffc8c35078e60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/467fe5779ca85bd8d58fde65948ffc8c35078e60/comments",
    "author": {
      "login": "prius",
      "id": 1616237,
      "node_id": "MDQ6VXNlcjE2MTYyMzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1616237?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prius",
      "html_url": "https://github.com/prius",
      "followers_url": "https://api.github.com/users/prius/followers",
      "following_url": "https://api.github.com/users/prius/following{/other_user}",
      "gists_url": "https://api.github.com/users/prius/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prius/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prius/subscriptions",
      "organizations_url": "https://api.github.com/users/prius/orgs",
      "repos_url": "https://api.github.com/users/prius/repos",
      "events_url": "https://api.github.com/users/prius/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prius/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "prius",
      "id": 1616237,
      "node_id": "MDQ6VXNlcjE2MTYyMzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1616237?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prius",
      "html_url": "https://github.com/prius",
      "followers_url": "https://api.github.com/users/prius/followers",
      "following_url": "https://api.github.com/users/prius/following{/other_user}",
      "gists_url": "https://api.github.com/users/prius/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prius/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prius/subscriptions",
      "organizations_url": "https://api.github.com/users/prius/orgs",
      "repos_url": "https://api.github.com/users/prius/repos",
      "events_url": "https://api.github.com/users/prius/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prius/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f63bf05e73ea96e5c2c72cc455d05ad382883c27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f63bf05e73ea96e5c2c72cc455d05ad382883c27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f63bf05e73ea96e5c2c72cc455d05ad382883c27"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 43,
      "deletions": 41
    },
    "files": [
      {
        "sha": "968fd6fe986a69dd47beb77e6f28a2c5ba7836bf",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 43,
        "deletions": 41,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/467fe5779ca85bd8d58fde65948ffc8c35078e60/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/467fe5779ca85bd8d58fde65948ffc8c35078e60/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=467fe5779ca85bd8d58fde65948ffc8c35078e60",
        "patch": "@@ -101,6 +101,23 @@ def __init__(self, sha256, n, value):\n         self.n = n\n         self.nValue = value\n \n+\n+def subtest(func):\n+    \"\"\"Wraps the subtests for logging and state assertions.\"\"\"\n+    def func_wrapper(self, *args, **kwargs):\n+        self.log.info(\"Subtest: {} (Segwit active = {})\".format(func.__name__, self.segwit_active))\n+        # Assert segwit status is as expected\n+        assert_equal(softfork_active(self.nodes[0], 'segwit'), self.segwit_active)\n+        func(self, *args, **kwargs)\n+        # Each subtest should leave some utxos for the next subtest\n+        assert self.utxo\n+        self.sync_blocks()\n+        # Assert segwit status is as expected at end of subtest\n+        assert_equal(softfork_active(self.nodes[0], 'segwit'), self.segwit_active)\n+\n+    return func_wrapper\n+\n+\n def sign_p2pk_witness_input(script, tx_to, in_idx, hashtype, value, key):\n     \"\"\"Add signature for a P2PK witness script.\"\"\"\n     tx_hash = SegwitV0SignatureHash(script, tx_to, in_idx, hashtype, value)\n@@ -280,22 +297,7 @@ def run_test(self):\n \n     # Individual tests\n \n-    def subtest(func):  # noqa: N805\n-        \"\"\"Wraps the subtests for logging and state assertions.\"\"\"\n-        def func_wrapper(self, *args, **kwargs):\n-            self.log.info(\"Subtest: {} (Segwit active = {})\".format(func.__name__, self.segwit_active))\n-            # Assert segwit status is as expected\n-            assert_equal(softfork_active(self.nodes[0], 'segwit'), self.segwit_active)\n-            func(self, *args, **kwargs)\n-            # Each subtest should leave some utxos for the next subtest\n-            assert self.utxo\n-            self.sync_blocks()\n-            # Assert segwit status is as expected at end of subtest\n-            assert_equal(softfork_active(self.nodes[0], 'segwit'), self.segwit_active)\n-\n-        return func_wrapper\n-\n-    @subtest  # type: ignore\n+    @subtest\n     def test_non_witness_transaction(self):\n         \"\"\"See if sending a regular transaction works, and create a utxo to use in later tests.\"\"\"\n         # Mine a block with an anyone-can-spend coinbase,\n@@ -324,7 +326,7 @@ def test_non_witness_transaction(self):\n         self.utxo.append(UTXO(tx.sha256, 0, 49 * 100000000))\n         self.generate(self.nodes[0], 1)\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_unnecessary_witness_before_segwit_activation(self):\n         \"\"\"Verify that blocks with witnesses are rejected before activation.\"\"\"\n \n@@ -355,7 +357,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_block_relay(self):\n         \"\"\"Test that block requests to NODE_WITNESS peer are with MSG_WITNESS_FLAG.\n \n@@ -444,7 +446,7 @@ def test_block_relay(self):\n             self.old_node.announce_tx_and_wait_for_getdata(block4.vtx[0])\n             assert block4.sha256 not in self.old_node.getdataset\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_v0_outputs_arent_spendable(self):\n         \"\"\"Test that v0 outputs aren't spendable before segwit activation.\n \n@@ -516,7 +518,7 @@ def test_v0_outputs_arent_spendable(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(txid, 2, value))\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_witness_tx_relay_before_segwit_activation(self):\n \n         # Generate a transaction that doesn't require a witness, but send it\n@@ -558,7 +560,7 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx_hash, 0, tx_value))\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_standardness_v0(self):\n         \"\"\"Test V0 txout standardness.\n \n@@ -656,7 +658,7 @@ def test_standardness_v0(self):\n         self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n \n-    @subtest  # type: ignore\n+    @subtest\n     def advance_to_segwit_active(self):\n         \"\"\"Mine enough blocks to activate segwit.\"\"\"\n         assert not softfork_active(self.nodes[0], 'segwit')\n@@ -667,7 +669,7 @@ def advance_to_segwit_active(self):\n         assert softfork_active(self.nodes[0], 'segwit')\n         self.segwit_active = True\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_p2sh_witness(self):\n         \"\"\"Test P2SH wrapped witness programs.\"\"\"\n \n@@ -734,7 +736,7 @@ def test_p2sh_witness(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(spend_tx.sha256, 0, spend_tx.vout[0].nValue))\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_witness_commitments(self):\n         \"\"\"Test witness commitments.\n \n@@ -823,7 +825,7 @@ def test_witness_commitments(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_block_malleability(self):\n \n         # Make sure that a block that has too big a virtual size\n@@ -863,7 +865,7 @@ def test_block_malleability(self):\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(0)]\n         test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_witness_block_size(self):\n         # TODO: Test that non-witness carrying blocks can't exceed 1MB\n         # Skipping this test for now; this is covered in feature_block.py\n@@ -938,7 +940,7 @@ def test_witness_block_size(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue))\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_submit_block(self):\n         \"\"\"Test that submitblock adds the nonce automatically when possible.\"\"\"\n         block = self.build_next_block()\n@@ -974,7 +976,7 @@ def test_submit_block(self):\n         # Tip should not advance!\n         assert self.nodes[0].getbestblockhash() != block_2.hash\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_extra_witness_data(self):\n         \"\"\"Test extra witness data in a transaction.\"\"\"\n \n@@ -1049,7 +1051,7 @@ def test_extra_witness_data(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_max_witness_push_length(self):\n         \"\"\"Test that witness stack can only allow up to 520 byte pushes.\"\"\"\n \n@@ -1086,7 +1088,7 @@ def test_max_witness_push_length(self):\n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_max_witness_script_length(self):\n         \"\"\"Test that witness outputs greater than 10kB can't be spent.\"\"\"\n \n@@ -1133,7 +1135,7 @@ def test_max_witness_script_length(self):\n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_witness_input_length(self):\n         \"\"\"Test that vin length must match vtxinwit length.\"\"\"\n \n@@ -1217,7 +1219,7 @@ def serialize_with_witness(self):\n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_tx_relay_after_segwit_activation(self):\n         \"\"\"Test transaction relay after segwit activation.\n \n@@ -1309,7 +1311,7 @@ def test_tx_relay_after_segwit_activation(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_segwit_versions(self):\n         \"\"\"Test validity of future segwit version transactions.\n \n@@ -1403,7 +1405,7 @@ def test_segwit_versions(self):\n         # Add utxo to our list\n         self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_premature_coinbase_witness_spend(self):\n \n         block = self.build_next_block()\n@@ -1437,7 +1439,7 @@ def test_premature_coinbase_witness_spend(self):\n         test_witness_block(self.nodes[0], self.test_node, block2, accepted=True)\n         self.sync_blocks()\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_uncompressed_pubkey(self):\n         \"\"\"Test uncompressed pubkey validity in segwit transactions.\n \n@@ -1540,7 +1542,7 @@ def test_uncompressed_pubkey(self):\n         test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n         self.utxo.append(UTXO(tx5.sha256, 0, tx5.vout[0].nValue))\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_signature_version_1(self):\n \n         key = ECKey()\n@@ -1726,7 +1728,7 @@ def test_signature_version_1(self):\n         for i in range(len(tx.vout)):\n             self.utxo.append(UTXO(tx.sha256, i, tx.vout[i].nValue))\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_non_standard_witness_blinding(self):\n         \"\"\"Test behavior of unnecessary witnesses in transactions does not blind the node for the transaction\"\"\"\n \n@@ -1779,7 +1781,7 @@ def test_non_standard_witness_blinding(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_non_standard_witness(self):\n         \"\"\"Test detection of non-standard P2WSH witness\"\"\"\n         pad = chr(1).encode('latin-1')\n@@ -1878,7 +1880,7 @@ def test_non_standard_witness(self):\n \n         self.utxo.pop(0)\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_witness_sigops(self):\n         \"\"\"Test sigop counting is correct inside witnesses.\"\"\"\n \n@@ -1980,7 +1982,7 @@ def test_witness_sigops(self):\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_superfluous_witness(self):\n         # Serialization of tx that puts witness flag to 3 always\n         def serialize_with_bogus_witness(tx):\n@@ -2024,7 +2026,7 @@ def serialize(self):\n         with self.nodes[0].assert_debug_log(['Unknown transaction optional data']):\n             self.test_node.send_and_ping(msg_bogus_tx(tx))\n \n-    @subtest  # type: ignore\n+    @subtest\n     def test_wtxid_relay(self):\n         # Use brand new nodes to avoid contamination from earlier tests\n         self.wtx_node = self.nodes[0].add_p2p_connection(TestP2PConn(wtxidrelay=True), services=P2P_SERVICES)"
      }
    ]
  }
]