[
  {
    "sha": "306f71b4eb4a0fd8e64f47dc008bc235b80b13d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDZmNzFiNGViNGEwZmQ4ZTY0ZjQ3ZGMwMDhiYzIzNWI4MGIxM2Q5",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-02-28T02:02:10Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-03-06T13:13:31Z"
      },
      "message": "scheduler: don't rely on boost interrupt on shutdown\n\nCalling interrupt_all() will immediately stop the scheduler, so it's\nsafe to invoke stop() beforehand, and this removes the reliance on boost\nto interrupt serviceQueue().",
      "tree": {
        "sha": "da839e0cea4ea52524ca04e0c0c9cc71b5add687",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da839e0cea4ea52524ca04e0c0c9cc71b5add687"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/306f71b4eb4a0fd8e64f47dc008bc235b80b13d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/306f71b4eb4a0fd8e64f47dc008bc235b80b13d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/306f71b4eb4a0fd8e64f47dc008bc235b80b13d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/306f71b4eb4a0fd8e64f47dc008bc235b80b13d9/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97aadf98d0b890e09eff45535fa13a663f27334d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97aadf98d0b890e09eff45535fa13a663f27334d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97aadf98d0b890e09eff45535fa13a663f27334d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a637aac4d20799acf5f25ff7702d8a46b14cbb32",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/306f71b4eb4a0fd8e64f47dc008bc235b80b13d9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/306f71b4eb4a0fd8e64f47dc008bc235b80b13d9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=306f71b4eb4a0fd8e64f47dc008bc235b80b13d9",
        "patch": "@@ -206,6 +206,7 @@ void Shutdown(NodeContext& node)\n \n     // After everything has been shut down, but before things get flushed, stop the\n     // CScheduler/checkqueue threadGroup\n+    if (node.scheduler) node.scheduler->stop();\n     threadGroup.interrupt_all();\n     threadGroup.join_all();\n "
      },
      {
        "sha": "3550a02316a1a81c5f234cad2cd214f377453810",
        "filename": "src/test/txindex_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/306f71b4eb4a0fd8e64f47dc008bc235b80b13d9/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/306f71b4eb4a0fd8e64f47dc008bc235b80b13d9/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=306f71b4eb4a0fd8e64f47dc008bc235b80b13d9",
        "patch": "@@ -70,6 +70,8 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n     // shutdown sequence (c.f. Shutdown() in init.cpp)\n     txindex.Stop();\n \n+    // txindex job may be scheduled, so stop scheduler before destructing\n+    m_node.scheduler->stop();\n     threadGroup.interrupt_all();\n     threadGroup.join_all();\n "
      },
      {
        "sha": "53eb9ff43b11ba4e72340bf53c865092b8af3bec",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/306f71b4eb4a0fd8e64f47dc008bc235b80b13d9/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/306f71b4eb4a0fd8e64f47dc008bc235b80b13d9/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=306f71b4eb4a0fd8e64f47dc008bc235b80b13d9",
        "patch": "@@ -140,6 +140,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n \n TestingSetup::~TestingSetup()\n {\n+    if (m_node.scheduler) m_node.scheduler->stop();\n     threadGroup.interrupt_all();\n     threadGroup.join_all();\n     GetMainSignals().FlushBackgroundCallbacks();"
      }
    ]
  },
  {
    "sha": "b9c426012770d166e6ebfab27689be44e6e89aa5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWM0MjYwMTI3NzBkMTY2ZTZlYmZhYjI3Njg5YmU0NGU2ZTg5YWE1",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-03-01T04:22:37Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-03-06T13:13:31Z"
      },
      "message": "sync.h: add REVERSE_LOCK",
      "tree": {
        "sha": "b3a975c6133c21bdce11ff66ac8fc915c7bc6f81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3a975c6133c21bdce11ff66ac8fc915c7bc6f81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9c426012770d166e6ebfab27689be44e6e89aa5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9c426012770d166e6ebfab27689be44e6e89aa5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9c426012770d166e6ebfab27689be44e6e89aa5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9c426012770d166e6ebfab27689be44e6e89aa5/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "306f71b4eb4a0fd8e64f47dc008bc235b80b13d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/306f71b4eb4a0fd8e64f47dc008bc235b80b13d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/306f71b4eb4a0fd8e64f47dc008bc235b80b13d9"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 94,
      "deletions": 9
    },
    "files": [
      {
        "sha": "71657a74399aa8d1e53776a8daf8c91ec6aa6997",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9c426012770d166e6ebfab27689be44e6e89aa5/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9c426012770d166e6ebfab27689be44e6e89aa5/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=b9c426012770d166e6ebfab27689be44e6e89aa5",
        "patch": "@@ -13,7 +13,7 @@\n #include <util/strencodings.h>\n #include <util/threadnames.h>\n \n-\n+#include <system_error>\n #include <map>\n #include <set>\n \n@@ -60,6 +60,11 @@ struct CLockLocation {\n             mutexName, sourceFile, itostr(sourceLine), (fTry ? \" (TRY)\" : \"\"), m_thread_name);\n     }\n \n+    std::string Name() const\n+    {\n+        return mutexName;\n+    }\n+\n private:\n     bool fTry;\n     std::string mutexName;\n@@ -155,6 +160,18 @@ void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs\n     push_lock(cs, CLockLocation(pszName, pszFile, nLine, fTry, util::ThreadGetInternalName()));\n }\n \n+void CheckLastCritical(void* cs, std::string& lockname, const char* guardname, const char* file, int line)\n+{\n+    if (!g_lockstack.empty()) {\n+        const auto& lastlock = g_lockstack.back();\n+        if (lastlock.first == cs) {\n+            lockname = lastlock.second.Name();\n+            return;\n+        }\n+    }\n+    throw std::system_error(EPERM, std::generic_category(), strprintf(\"%s:%s %s was not most recent critical section locked\", file, line, guardname));\n+}\n+\n void LeaveCritical()\n {\n     pop_lock();"
      },
      {
        "sha": "204734c27314c66ff4574f14403bb5862798c274",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9c426012770d166e6ebfab27689be44e6e89aa5/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9c426012770d166e6ebfab27689be44e6e89aa5/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=b9c426012770d166e6ebfab27689be44e6e89aa5",
        "patch": "@@ -50,6 +50,7 @@ LEAVE_CRITICAL_SECTION(mutex); // no RAII\n #ifdef DEBUG_LOCKORDER\n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false);\n void LeaveCritical();\n+void CheckLastCritical(void* cs, std::string& lockname, const char* guardname, const char* file, int line);\n std::string LocksHeld();\n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) ASSERT_EXCLUSIVE_LOCK(cs);\n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs);\n@@ -64,6 +65,7 @@ extern bool g_debug_lockorder_abort;\n #else\n void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}\n void static inline LeaveCritical() {}\n+void static inline CheckLastCritical(void* cs, std::string& lockname, const char* guardname, const char* file, int line) {}\n void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) ASSERT_EXCLUSIVE_LOCK(cs) {}\n void static inline AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}\n void static inline DeleteLock(void* cs) {}\n@@ -171,8 +173,45 @@ class SCOPED_LOCKABLE UniqueLock : public Base\n     {\n         return Base::owns_lock();\n     }\n+\n+protected:\n+    // needed for reverse_lock\n+    UniqueLock() { }\n+\n+public:\n+    /**\n+     * An RAII-style reverse lock. Unlocks on construction and locks on destruction.\n+     */\n+    class reverse_lock {\n+    public:\n+        explicit reverse_lock(UniqueLock& _lock, const char* _guardname, const char* _file, int _line) : lock(_lock), file(_file), line(_line) {\n+            CheckLastCritical((void*)lock.mutex(), lockname, _guardname, _file, _line);\n+            lock.unlock();\n+            LeaveCritical();\n+            lock.swap(templock);\n+        }\n+\n+        ~reverse_lock() {\n+            templock.swap(lock);\n+            EnterCritical(lockname.c_str(), file.c_str(), line, (void*)lock.mutex());\n+            lock.lock();\n+        }\n+\n+     private:\n+        reverse_lock(reverse_lock const&);\n+        reverse_lock& operator=(reverse_lock const&);\n+\n+        UniqueLock& lock;\n+        UniqueLock templock;\n+        std::string lockname;\n+        const std::string file;\n+        const int line;\n+     };\n+     friend class reverse_lock;\n };\n \n+#define REVERSE_LOCK(g) decltype(g)::reverse_lock PASTE2(revlock, __COUNTER__)(g, #g, __FILE__, __LINE__)\n+\n template<typename MutexArg>\n using DebugLock = UniqueLock<typename std::remove_reference<typename std::remove_pointer<MutexArg>::type>::type>;\n "
      },
      {
        "sha": "4e51b8c02a518a44545c612c66ffd96d98a45cd3",
        "filename": "src/test/reverselock_tests.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 8,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9c426012770d166e6ebfab27689be44e6e89aa5/src/test/reverselock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9c426012770d166e6ebfab27689be44e6e89aa5/src/test/reverselock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/reverselock_tests.cpp?ref=b9c426012770d166e6ebfab27689be44e6e89aa5",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <reverselock.h>\n+#include <sync.h>\n #include <test/util/setup_common.h>\n \n #include <boost/test/unit_test.hpp>\n@@ -11,21 +11,50 @@ BOOST_FIXTURE_TEST_SUITE(reverselock_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(reverselock_basics)\n {\n-    boost::mutex mutex;\n-    boost::unique_lock<boost::mutex> lock(mutex);\n+    Mutex mutex;\n+    WAIT_LOCK(mutex, lock);\n \n     BOOST_CHECK(lock.owns_lock());\n     {\n-        reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+        REVERSE_LOCK(lock);\n         BOOST_CHECK(!lock.owns_lock());\n     }\n     BOOST_CHECK(lock.owns_lock());\n }\n \n+BOOST_AUTO_TEST_CASE(reverselock_multiple)\n+{\n+    Mutex mutex2;\n+    Mutex mutex;\n+    WAIT_LOCK(mutex2, lock2);\n+    WAIT_LOCK(mutex, lock);\n+\n+    // Make sure undoing two locks succeeds\n+    {\n+        REVERSE_LOCK(lock);\n+        BOOST_CHECK(!lock.owns_lock());\n+        REVERSE_LOCK(lock2);\n+        BOOST_CHECK(!lock2.owns_lock());\n+    }\n+    BOOST_CHECK(lock.owns_lock());\n+    BOOST_CHECK(lock2.owns_lock());\n+}\n+\n BOOST_AUTO_TEST_CASE(reverselock_errors)\n {\n-    boost::mutex mutex;\n-    boost::unique_lock<boost::mutex> lock(mutex);\n+    Mutex mutex2;\n+    Mutex mutex;\n+    WAIT_LOCK(mutex2, lock2);\n+    WAIT_LOCK(mutex, lock);\n+\n+#ifdef DEBUG_LOCKORDER\n+    // Make sure trying to reverse lock a previous lock fails\n+    try {\n+        REVERSE_LOCK(lock2);\n+        BOOST_CHECK(false); // REVERSE_LOCK(lock2) succeeded\n+    } catch(...) { }\n+    BOOST_CHECK(lock2.owns_lock());\n+#endif\n \n     // Make sure trying to reverse lock an unlocked lock fails\n     lock.unlock();\n@@ -34,7 +63,7 @@ BOOST_AUTO_TEST_CASE(reverselock_errors)\n \n     bool failed = false;\n     try {\n-        reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+        REVERSE_LOCK(lock);\n     } catch(...) {\n         failed = true;\n     }\n@@ -49,7 +78,7 @@ BOOST_AUTO_TEST_CASE(reverselock_errors)\n     lock.lock();\n     BOOST_CHECK(lock.owns_lock());\n     {\n-        reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+        REVERSE_LOCK(lock);\n         BOOST_CHECK(!lock.owns_lock());\n     }\n "
      }
    ]
  },
  {
    "sha": "d0ebd93270758ea97ea956b8821e17a2d001ea94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGViZDkzMjcwNzU4ZWE5N2VhOTU2Yjg4MjFlMTdhMmQwMDFlYTk0",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-02-28T02:04:04Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-03-06T13:14:08Z"
      },
      "message": "scheduler: switch from boost to std\n\nChanges from boost::chrono to std::chrono, boost::condition_var to\nstd::condition_var, boost::mutex to sync.h Mutex, and reverselock.h to\nsync.h REVERSE_LOCK. Also adds threadsafety annotations to CScheduler\nmembers.",
      "tree": {
        "sha": "c0d6a34f31e052a061580bcef319cfc5197b3ca7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0d6a34f31e052a061580bcef319cfc5197b3ca7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0ebd93270758ea97ea956b8821e17a2d001ea94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0ebd93270758ea97ea956b8821e17a2d001ea94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0ebd93270758ea97ea956b8821e17a2d001ea94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0ebd93270758ea97ea956b8821e17a2d001ea94/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9c426012770d166e6ebfab27689be44e6e89aa5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9c426012770d166e6ebfab27689be44e6e89aa5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9c426012770d166e6ebfab27689be44e6e89aa5"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 52,
      "deletions": 70
    },
    "files": [
      {
        "sha": "8357183934387ecf24231fbbbc87b26a7e908f55",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0ebd93270758ea97ea956b8821e17a2d001ea94/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0ebd93270758ea97ea956b8821e17a2d001ea94/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=d0ebd93270758ea97ea956b8821e17a2d001ea94",
        "patch": "@@ -393,7 +393,7 @@ static UniValue mockscheduler(const JSONRPCRequest& request)\n     // protect against null pointer dereference\n     CHECK_NONFATAL(g_rpc_node);\n     CHECK_NONFATAL(g_rpc_node->scheduler);\n-    g_rpc_node->scheduler->MockForward(boost::chrono::seconds(delta_seconds));\n+    g_rpc_node->scheduler->MockForward(std::chrono::seconds(delta_seconds));\n \n     return NullUniValue;\n }"
      },
      {
        "sha": "7cb7754fdec82d651761b4cffeb60233f5805bba",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 38,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0ebd93270758ea97ea956b8821e17a2d001ea94/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0ebd93270758ea97ea956b8821e17a2d001ea94/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=d0ebd93270758ea97ea956b8821e17a2d001ea94",
        "patch": "@@ -5,7 +5,6 @@\n #include <scheduler.h>\n \n #include <random.h>\n-#include <reverselock.h>\n \n #include <assert.h>\n #include <utility>\n@@ -20,18 +19,9 @@ CScheduler::~CScheduler()\n }\n \n \n-#if BOOST_VERSION < 105000\n-static boost::system_time toPosixTime(const boost::chrono::system_clock::time_point& t)\n-{\n-    // Creating the posix_time using from_time_t loses sub-second precision. So rather than exporting the time_point to time_t,\n-    // start with a posix_time at the epoch (0) and add the milliseconds that have passed since then.\n-    return boost::posix_time::from_time_t(0) + boost::posix_time::milliseconds(boost::chrono::duration_cast<boost::chrono::milliseconds>(t.time_since_epoch()).count());\n-}\n-#endif\n-\n void CScheduler::serviceQueue()\n {\n-    boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+    WAIT_LOCK(newTaskMutex, lock);\n     ++nThreadsServicingQueue;\n \n     // newTaskMutex is locked throughout this loop EXCEPT\n@@ -40,7 +30,7 @@ void CScheduler::serviceQueue()\n     while (!shouldStop()) {\n         try {\n             if (!shouldStop() && taskQueue.empty()) {\n-                reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+                REVERSE_LOCK(lock);\n             }\n             while (!shouldStop() && taskQueue.empty()) {\n                 // Wait until there is something to do.\n@@ -50,21 +40,13 @@ void CScheduler::serviceQueue()\n             // Wait until either there is a new task, or until\n             // the time of the first item on the queue:\n \n-// wait_until needs boost 1.50 or later; older versions have timed_wait:\n-#if BOOST_VERSION < 105000\n-            while (!shouldStop() && !taskQueue.empty() &&\n-                   newTaskScheduled.timed_wait(lock, toPosixTime(taskQueue.begin()->first))) {\n-                // Keep waiting until timeout\n-            }\n-#else\n-            // Some boost versions have a conflicting overload of wait_until that returns void.\n-            // Explicitly use a template here to avoid hitting that overload.\n             while (!shouldStop() && !taskQueue.empty()) {\n-                boost::chrono::system_clock::time_point timeToWaitFor = taskQueue.begin()->first;\n-                if (newTaskScheduled.wait_until<>(lock, timeToWaitFor) == boost::cv_status::timeout)\n+                std::chrono::system_clock::time_point timeToWaitFor = taskQueue.begin()->first;\n+                if (newTaskScheduled.wait_until(lock, timeToWaitFor) == std::cv_status::timeout) {\n                     break; // Exit loop after timeout, it means we reached the time of the event\n+                }\n             }\n-#endif\n+\n             // If there are multiple threads, the queue can empty while we're waiting (another\n             // thread may service the task we were waiting on).\n             if (shouldStop() || taskQueue.empty())\n@@ -76,7 +58,7 @@ void CScheduler::serviceQueue()\n             {\n                 // Unlock before calling f, so it can reschedule itself or another task\n                 // without deadlocking:\n-                reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+                REVERSE_LOCK(lock);\n                 f();\n             }\n         } catch (...) {\n@@ -91,7 +73,7 @@ void CScheduler::serviceQueue()\n void CScheduler::stop(bool drain)\n {\n     {\n-        boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+        LOCK(newTaskMutex);\n         if (drain)\n             stopWhenEmpty = true;\n         else\n@@ -100,29 +82,29 @@ void CScheduler::stop(bool drain)\n     newTaskScheduled.notify_all();\n }\n \n-void CScheduler::schedule(CScheduler::Function f, boost::chrono::system_clock::time_point t)\n+void CScheduler::schedule(CScheduler::Function f, std::chrono::system_clock::time_point t)\n {\n     {\n-        boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+        LOCK(newTaskMutex);\n         taskQueue.insert(std::make_pair(t, f));\n     }\n     newTaskScheduled.notify_one();\n }\n \n void CScheduler::scheduleFromNow(CScheduler::Function f, int64_t deltaMilliSeconds)\n {\n-    schedule(f, boost::chrono::system_clock::now() + boost::chrono::milliseconds(deltaMilliSeconds));\n+    schedule(f, std::chrono::system_clock::now() + std::chrono::milliseconds(deltaMilliSeconds));\n }\n \n-void CScheduler::MockForward(boost::chrono::seconds delta_seconds)\n+void CScheduler::MockForward(std::chrono::seconds delta_seconds)\n {\n-    assert(delta_seconds.count() > 0 && delta_seconds < boost::chrono::hours{1});\n+    assert(delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1});\n \n     {\n-        boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+        LOCK(newTaskMutex);\n \n         // use temp_queue to maintain updated schedule\n-        std::multimap<boost::chrono::system_clock::time_point, Function> temp_queue;\n+        std::multimap<std::chrono::system_clock::time_point, Function> temp_queue;\n \n         for (const auto& element : taskQueue) {\n             temp_queue.emplace_hint(temp_queue.cend(), element.first - delta_seconds, element.second);\n@@ -147,10 +129,10 @@ void CScheduler::scheduleEvery(CScheduler::Function f, int64_t deltaMilliSeconds\n     scheduleFromNow(std::bind(&Repeat, this, f, deltaMilliSeconds), deltaMilliSeconds);\n }\n \n-size_t CScheduler::getQueueInfo(boost::chrono::system_clock::time_point &first,\n-                             boost::chrono::system_clock::time_point &last) const\n+size_t CScheduler::getQueueInfo(std::chrono::system_clock::time_point &first,\n+                             std::chrono::system_clock::time_point &last) const\n {\n-    boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+    LOCK(newTaskMutex);\n     size_t result = taskQueue.size();\n     if (!taskQueue.empty()) {\n         first = taskQueue.begin()->first;\n@@ -160,7 +142,7 @@ size_t CScheduler::getQueueInfo(boost::chrono::system_clock::time_point &first,\n }\n \n bool CScheduler::AreThreadsServicingQueue() const {\n-    boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+    LOCK(newTaskMutex);\n     return nThreadsServicingQueue;\n }\n \n@@ -174,7 +156,7 @@ void SingleThreadedSchedulerClient::MaybeScheduleProcessQueue() {\n         if (m_are_callbacks_running) return;\n         if (m_callbacks_pending.empty()) return;\n     }\n-    m_pscheduler->schedule(std::bind(&SingleThreadedSchedulerClient::ProcessQueue, this));\n+    m_pscheduler->schedule(std::bind(&SingleThreadedSchedulerClient::ProcessQueue, this), std::chrono::system_clock::now());\n }\n \n void SingleThreadedSchedulerClient::ProcessQueue() {"
      },
      {
        "sha": "4d5aa3068e6cc123f71d9fe2c3969046bfe729e1",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 17,
        "deletions": 16,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0ebd93270758ea97ea956b8821e17a2d001ea94/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0ebd93270758ea97ea956b8821e17a2d001ea94/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=d0ebd93270758ea97ea956b8821e17a2d001ea94",
        "patch": "@@ -7,11 +7,12 @@\n \n //\n // NOTE:\n-// boost::thread / boost::chrono should be ported to std::thread / std::chrono\n+// boost::thread should be ported to std::thread\n // when we support C++11.\n //\n-#include <boost/chrono/chrono.hpp>\n-#include <boost/thread.hpp>\n+#include <condition_variable>\n+#include <functional>\n+#include <list>\n #include <map>\n \n #include <sync.h>\n@@ -27,8 +28,8 @@\n // s->scheduleFromNow(std::bind(Class::func, this, argument), 3);\n // boost::thread* t = new boost::thread(std::bind(CScheduler::serviceQueue, s));\n //\n-// ... then at program shutdown, clean up the thread running serviceQueue:\n-// t->interrupt();\n+// ... then at program shutdown, make sure to call stop() to clean up the thread(s) running serviceQueue:\n+// s->stop();\n // t->join();\n // delete t;\n // delete s; // Must be done after thread is interrupted/joined.\n@@ -43,7 +44,7 @@ class CScheduler\n     typedef std::function<void()> Function;\n \n     // Call func at/after time t\n-    void schedule(Function f, boost::chrono::system_clock::time_point t=boost::chrono::system_clock::now());\n+    void schedule(Function f, std::chrono::system_clock::time_point t);\n \n     // Convenience method: call f once deltaMilliSeconds from now\n     void scheduleFromNow(Function f, int64_t deltaMilliSeconds);\n@@ -60,7 +61,7 @@ class CScheduler\n      * Iterates through items on taskQueue and reschedules them\n      * to be delta_seconds sooner.\n      */\n-    void MockForward(boost::chrono::seconds delta_seconds);\n+    void MockForward(std::chrono::seconds delta_seconds);\n \n     // To keep things as simple as possible, there is no unschedule.\n \n@@ -75,20 +76,20 @@ class CScheduler\n \n     // Returns number of tasks waiting to be serviced,\n     // and first and last task times\n-    size_t getQueueInfo(boost::chrono::system_clock::time_point &first,\n-                        boost::chrono::system_clock::time_point &last) const;\n+    size_t getQueueInfo(std::chrono::system_clock::time_point &first,\n+                        std::chrono::system_clock::time_point &last) const;\n \n     // Returns true if there are threads actively running in serviceQueue()\n     bool AreThreadsServicingQueue() const;\n \n private:\n-    std::multimap<boost::chrono::system_clock::time_point, Function> taskQueue;\n-    boost::condition_variable newTaskScheduled;\n-    mutable boost::mutex newTaskMutex;\n-    int nThreadsServicingQueue;\n-    bool stopRequested;\n-    bool stopWhenEmpty;\n-    bool shouldStop() const { return stopRequested || (stopWhenEmpty && taskQueue.empty()); }\n+    mutable Mutex newTaskMutex;\n+    std::condition_variable newTaskScheduled;\n+    std::multimap<std::chrono::system_clock::time_point, Function> taskQueue GUARDED_BY(newTaskMutex);\n+    int nThreadsServicingQueue GUARDED_BY(newTaskMutex);\n+    bool stopRequested GUARDED_BY(newTaskMutex);\n+    bool stopWhenEmpty GUARDED_BY(newTaskMutex);\n+    bool shouldStop() const EXCLUSIVE_LOCKS_REQUIRED(newTaskMutex) { return stopRequested || (stopWhenEmpty && taskQueue.empty()); }\n };\n \n /**"
      },
      {
        "sha": "90810595b2d0b756e36dd2e86358829226a5d1a5",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0ebd93270758ea97ea956b8821e17a2d001ea94/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0ebd93270758ea97ea956b8821e17a2d001ea94/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=d0ebd93270758ea97ea956b8821e17a2d001ea94",
        "patch": "@@ -11,13 +11,13 @@\n \n BOOST_AUTO_TEST_SUITE(scheduler_tests)\n \n-static void microTask(CScheduler& s, boost::mutex& mutex, int& counter, int delta, boost::chrono::system_clock::time_point rescheduleTime)\n+static void microTask(CScheduler& s, boost::mutex& mutex, int& counter, int delta, std::chrono::system_clock::time_point rescheduleTime)\n {\n     {\n         boost::unique_lock<boost::mutex> lock(mutex);\n         counter += delta;\n     }\n-    boost::chrono::system_clock::time_point noTime = boost::chrono::system_clock::time_point::min();\n+    std::chrono::system_clock::time_point noTime = std::chrono::system_clock::time_point::min();\n     if (rescheduleTime != noTime) {\n         CScheduler::Function f = std::bind(&microTask, std::ref(s), std::ref(mutex), std::ref(counter), -delta + 1, noTime);\n         s.schedule(f, rescheduleTime);\n@@ -45,15 +45,15 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     auto randomMsec = [](FastRandomContext& rc) -> int { return -11 + (int)rc.randrange(1012); }; // [-11, 1000]\n     auto randomDelta = [](FastRandomContext& rc) -> int { return -1000 + (int)rc.randrange(2001); }; // [-1000, 1000]\n \n-    boost::chrono::system_clock::time_point start = boost::chrono::system_clock::now();\n-    boost::chrono::system_clock::time_point now = start;\n-    boost::chrono::system_clock::time_point first, last;\n+    std::chrono::system_clock::time_point start = std::chrono::system_clock::now();\n+    std::chrono::system_clock::time_point now = start;\n+    std::chrono::system_clock::time_point first, last;\n     size_t nTasks = microTasks.getQueueInfo(first, last);\n     BOOST_CHECK(nTasks == 0);\n \n     for (int i = 0; i < 100; ++i) {\n-        boost::chrono::system_clock::time_point t = now + boost::chrono::microseconds(randomMsec(rng));\n-        boost::chrono::system_clock::time_point tReschedule = now + boost::chrono::microseconds(500 + randomMsec(rng));\n+        std::chrono::system_clock::time_point t = now + std::chrono::microseconds(randomMsec(rng));\n+        std::chrono::system_clock::time_point tReschedule = now + std::chrono::microseconds(500 + randomMsec(rng));\n         int whichCounter = zeroToNine(rng);\n         CScheduler::Function f = std::bind(&microTask, std::ref(microTasks),\n                                              std::ref(counterMutex[whichCounter]), std::ref(counter[whichCounter]),\n@@ -71,14 +71,14 @@ BOOST_AUTO_TEST_CASE(manythreads)\n         microThreads.create_thread(std::bind(&CScheduler::serviceQueue, &microTasks));\n \n     UninterruptibleSleep(std::chrono::microseconds{600});\n-    now = boost::chrono::system_clock::now();\n+    now = std::chrono::system_clock::now();\n \n     // More threads and more tasks:\n     for (int i = 0; i < 5; i++)\n         microThreads.create_thread(std::bind(&CScheduler::serviceQueue, &microTasks));\n     for (int i = 0; i < 100; i++) {\n-        boost::chrono::system_clock::time_point t = now + boost::chrono::microseconds(randomMsec(rng));\n-        boost::chrono::system_clock::time_point tReschedule = now + boost::chrono::microseconds(500 + randomMsec(rng));\n+        std::chrono::system_clock::time_point t = now + std::chrono::microseconds(randomMsec(rng));\n+        std::chrono::system_clock::time_point tReschedule = now + std::chrono::microseconds(500 + randomMsec(rng));\n         int whichCounter = zeroToNine(rng);\n         CScheduler::Function f = std::bind(&microTask, std::ref(microTasks),\n                                              std::ref(counterMutex[whichCounter]), std::ref(counter[whichCounter]),\n@@ -157,14 +157,14 @@ BOOST_AUTO_TEST_CASE(mockforward)\n     scheduler.scheduleFromNow(dummy, 8*min_in_milli);\n \n     // check taskQueue\n-    boost::chrono::system_clock::time_point first, last;\n+    std::chrono::system_clock::time_point first, last;\n     size_t num_tasks = scheduler.getQueueInfo(first, last);\n     BOOST_CHECK_EQUAL(num_tasks, 3ul);\n \n     std::thread scheduler_thread([&]() { scheduler.serviceQueue(); });\n \n     // bump the scheduler forward 5 minutes\n-    scheduler.MockForward(boost::chrono::seconds(5*60));\n+    scheduler.MockForward(std::chrono::seconds(5*60));\n \n     // ensure scheduler has chance to process all tasks queued for before 1 ms from now.\n     scheduler.scheduleFromNow([&scheduler]{ scheduler.stop(false); }, 1);\n@@ -178,8 +178,8 @@ BOOST_AUTO_TEST_CASE(mockforward)\n     BOOST_CHECK_EQUAL(counter, 2);\n \n     // check that the time of the remaining job has been updated\n-    boost::chrono::system_clock::time_point now = boost::chrono::system_clock::now();\n-    int delta = boost::chrono::duration_cast<boost::chrono::seconds>(first - now).count();\n+    std::chrono::system_clock::time_point now = std::chrono::system_clock::now();\n+    int delta = std::chrono::duration_cast<std::chrono::seconds>(first - now).count();\n     // should be between 2 & 3 minutes from now\n     BOOST_CHECK(delta > 2*60 && delta < 3*60);\n }"
      },
      {
        "sha": "1cece6a52526325f5464c44a87569ab61dd61d8a",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0ebd93270758ea97ea956b8821e17a2d001ea94/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0ebd93270758ea97ea956b8821e17a2d001ea94/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=d0ebd93270758ea97ea956b8821e17a2d001ea94",
        "patch": "@@ -53,7 +53,6 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/algorithm/string/classification.hpp\n     boost/algorithm/string/replace.hpp\n     boost/algorithm/string/split.hpp\n-    boost/chrono/chrono.hpp\n     boost/date_time/posix_time/posix_time.hpp\n     boost/filesystem.hpp\n     boost/filesystem/fstream.hpp"
      }
    ]
  },
  {
    "sha": "cea19f685915be8affb2203184a549576194413f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWExOWY2ODU5MTViZThhZmZiMjIwMzE4NGE1NDk1NzYxOTQ0MTNm",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-03-01T04:21:28Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-03-06T13:14:10Z"
      },
      "message": "Drop unused reverselock.h",
      "tree": {
        "sha": "e2167bdc2664f56539df3756621539b84d9cf64c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2167bdc2664f56539df3756621539b84d9cf64c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cea19f685915be8affb2203184a549576194413f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cea19f685915be8affb2203184a549576194413f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cea19f685915be8affb2203184a549576194413f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cea19f685915be8affb2203184a549576194413f/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0ebd93270758ea97ea956b8821e17a2d001ea94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0ebd93270758ea97ea956b8821e17a2d001ea94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0ebd93270758ea97ea956b8821e17a2d001ea94"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 0,
      "deletions": 35
    },
    "files": [
      {
        "sha": "abd3bb881a93cea06ff3a88b99a0d5fda01424d8",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cea19f685915be8affb2203184a549576194413f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cea19f685915be8affb2203184a549576194413f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=cea19f685915be8affb2203184a549576194413f",
        "patch": "@@ -178,7 +178,6 @@ BITCOIN_CORE_H = \\\n   random.h \\\n   randomenv.h \\\n   reverse_iterator.h \\\n-  reverselock.h \\\n   rpc/blockchain.h \\\n   rpc/client.h \\\n   rpc/protocol.h \\"
      },
      {
        "sha": "9d9cc9fd77c8f183f694cc20f40cb48dbd1e46ea",
        "filename": "src/reverselock.h",
        "status": "removed",
        "additions": 0,
        "deletions": 34,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0ebd93270758ea97ea956b8821e17a2d001ea94/src/reverselock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0ebd93270758ea97ea956b8821e17a2d001ea94/src/reverselock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/reverselock.h?ref=d0ebd93270758ea97ea956b8821e17a2d001ea94",
        "patch": "@@ -1,34 +0,0 @@\n-// Copyright (c) 2015-2016 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_REVERSELOCK_H\n-#define BITCOIN_REVERSELOCK_H\n-\n-/**\n- * An RAII-style reverse lock. Unlocks on construction and locks on destruction.\n- */\n-template<typename Lock>\n-class reverse_lock\n-{\n-public:\n-\n-    explicit reverse_lock(Lock& _lock) : lock(_lock) {\n-        _lock.unlock();\n-        _lock.swap(templock);\n-    }\n-\n-    ~reverse_lock() {\n-        templock.lock();\n-        templock.swap(lock);\n-    }\n-\n-private:\n-    reverse_lock(reverse_lock const&);\n-    reverse_lock& operator=(reverse_lock const&);\n-\n-    Lock& lock;\n-    Lock templock;\n-};\n-\n-#endif // BITCOIN_REVERSELOCK_H"
      }
    ]
  },
  {
    "sha": "294937b39de5924e772f8ed90d35c53290c8acab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTQ5MzdiMzlkZTU5MjRlNzcyZjhlZDkwZDM1YzUzMjkwYzhhY2Fi",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-03-01T05:00:28Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-03-06T13:14:10Z"
      },
      "message": "scheduler_tests: re-enable mockforward test",
      "tree": {
        "sha": "fc32b931c5ca713d8e3abd68812c5f96454c0c74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc32b931c5ca713d8e3abd68812c5f96454c0c74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/294937b39de5924e772f8ed90d35c53290c8acab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/294937b39de5924e772f8ed90d35c53290c8acab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/294937b39de5924e772f8ed90d35c53290c8acab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/294937b39de5924e772f8ed90d35c53290c8acab/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cea19f685915be8affb2203184a549576194413f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cea19f685915be8affb2203184a549576194413f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cea19f685915be8affb2203184a549576194413f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7d26840b73d3b681a406fc145b028a48acb85cd1",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/294937b39de5924e772f8ed90d35c53290c8acab/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/294937b39de5924e772f8ed90d35c53290c8acab/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=294937b39de5924e772f8ed90d35c53290c8acab",
        "patch": "@@ -142,7 +142,6 @@ BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n     BOOST_CHECK_EQUAL(counter2, 100);\n }\n \n-/* disabled for now. See discussion in https://github.com/bitcoin/bitcoin/pull/18174\n BOOST_AUTO_TEST_CASE(mockforward)\n {\n     CScheduler scheduler;\n@@ -183,6 +182,5 @@ BOOST_AUTO_TEST_CASE(mockforward)\n     // should be between 2 & 3 minutes from now\n     BOOST_CHECK(delta > 2*60 && delta < 3*60);\n }\n-*/\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "70a6b529f306ff72ea1badf25e970a92b2b17ab3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGE2YjUyOWYzMDZmZjcyZWExYmFkZjI1ZTk3MGE5MmIyYjE3YWIz",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-03-06T18:20:41Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-03-06T18:20:41Z"
      },
      "message": "lint-cppcheck: Remove -DHAVE_WORKING_BOOST_SLEEP_FOR",
      "tree": {
        "sha": "951cab80614fa120f72375dec478eedaa8e166d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/951cab80614fa120f72375dec478eedaa8e166d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70a6b529f306ff72ea1badf25e970a92b2b17ab3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70a6b529f306ff72ea1badf25e970a92b2b17ab3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70a6b529f306ff72ea1badf25e970a92b2b17ab3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70a6b529f306ff72ea1badf25e970a92b2b17ab3/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "294937b39de5924e772f8ed90d35c53290c8acab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/294937b39de5924e772f8ed90d35c53290c8acab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/294937b39de5924e772f8ed90d35c53290c8acab"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ae18d74ebfd95a5b69d8b0018094d7324423ae11",
        "filename": "test/lint/extended-lint-cppcheck.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a6b529f306ff72ea1badf25e970a92b2b17ab3/test/lint/extended-lint-cppcheck.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a6b529f306ff72ea1badf25e970a92b2b17ab3/test/lint/extended-lint-cppcheck.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/extended-lint-cppcheck.sh?ref=70a6b529f306ff72ea1badf25e970a92b2b17ab3",
        "patch": "@@ -66,7 +66,7 @@ function join_array {\n ENABLED_CHECKS_REGEXP=$(join_array \"|\" \"${ENABLED_CHECKS[@]}\")\n IGNORED_WARNINGS_REGEXP=$(join_array \"|\" \"${IGNORED_WARNINGS[@]}\")\n WARNINGS=$(git ls-files -- \"*.cpp\" \"*.h\" \":(exclude)src/leveldb/\" \":(exclude)src/crc32c/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" | \\\n-    xargs cppcheck --enable=all -j \"$(getconf _NPROCESSORS_ONLN)\" --language=c++ --std=c++11 --template=gcc -D__cplusplus -DCLIENT_VERSION_BUILD -DCLIENT_VERSION_IS_RELEASE -DCLIENT_VERSION_MAJOR -DCLIENT_VERSION_MINOR -DCLIENT_VERSION_REVISION -DCOPYRIGHT_YEAR -DDEBUG -DHAVE_WORKING_BOOST_SLEEP_FOR -I src/ -q 2>&1 | sort -u | \\\n+    xargs cppcheck --enable=all -j \"$(getconf _NPROCESSORS_ONLN)\" --language=c++ --std=c++11 --template=gcc -D__cplusplus -DCLIENT_VERSION_BUILD -DCLIENT_VERSION_IS_RELEASE -DCLIENT_VERSION_MAJOR -DCLIENT_VERSION_MINOR -DCLIENT_VERSION_REVISION -DCOPYRIGHT_YEAR -DDEBUG -I src/ -q 2>&1 | sort -u | \\\n     grep -E \"${ENABLED_CHECKS_REGEXP}\" | \\\n     grep -vE \"${IGNORED_WARNINGS_REGEXP}\")\n if [[ ${WARNINGS} != \"\" ]]; then"
      }
    ]
  }
]