fanquake,2020-03-01 05:14:31,cc @theuni. I know you have been working on similar refactors recently.,https://github.com/bitcoin/bitcoin/pull/18234#issuecomment-593055686,593055686,
DrahtBot,2020-03-01 10:03:49,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18271 (scheduler: Workaround negative nsecs bug in boost's wait_until by luke-jr)\n* #18264 ([WIP] build: Remove Boost Ch",https://github.com/bitcoin/bitcoin/pull/18234#issuecomment-593078265,593078265,
practicalswift,2020-03-01 20:14:09,"Concept ACK\n\nThanks for working on de-boosting! :)",https://github.com/bitcoin/bitcoin/pull/18234#issuecomment-593139756,593139756,
theuni,2020-03-02 16:30:46,"~~This doesn't seem to take into account that boost::condition_variable is interruptible, and can't simply be swapped out. Have I missed some prior work that makes this ok?~~\n\nOk, I see that in the description. Re-reviewing.",https://github.com/bitcoin/bitcoin/pull/18234#issuecomment-593490928,593490928,
theuni,2020-03-02 17:03:39,"I would've expected this to require more work, but it looks like the scheduler was already surprisingly interruptible. Concept ACK.\n\n@TheBlueMatt might be aware of more scheduling minefields.",https://github.com/bitcoin/bitcoin/pull/18234#issuecomment-593507302,593507302,
MarcoFalke,2020-03-05 21:03:26,"Should add\n\n```\nFixes #16027, Fixes #14200, Fixes #18227\n```\n \nto OP?",https://github.com/bitcoin/bitcoin/pull/18234#issuecomment-595445678,595445678,
fanquake,2020-03-06 07:42:48,"@ajtowns Can you rebase on master now that #16117 is merged. Also, feel free to include a commit here to kill the last [`DHAVE_WORKING_BOOST_SLEEP_FOR`](https://github.com/bitcoin/bitcoin/pull/16117#pullrequestreview-370113240).",https://github.com/bitcoin/bitcoin/pull/18234#issuecomment-595643393,595643393,
laanwj,2020-03-06 19:08:06,"Great work! I'm really glad this is happening, thanks for working on this.\nACK 70a6b529f306ff72ea1badf25e970a92b2b17ab3",https://github.com/bitcoin/bitcoin/pull/18234#issuecomment-595915462,595915462,
elichai,2020-03-01 13:29:17,"Pending comments on my post here: https://github.com/bitcoin/bitcoin/pull/18088#issuecomment-593096666\nMaybe replace it with `PASTE2(revlock,PASTE2(__FILE__,__LINE__))`",https://github.com/bitcoin/bitcoin/pull/18234#discussion_r386108349,386108349,src/sync.h
elichai,2020-03-01 14:24:57,Maybe change to `const std::string& Name()` so that it will only copy/allocate it if needed?,https://github.com/bitcoin/bitcoin/pull/18234#discussion_r386112325,386112325,src/sync.cpp
MarcoFalke,2020-03-01 15:04:01,#17198 ,https://github.com/bitcoin/bitcoin/pull/18234#discussion_r386115181,386115181,src/sync.cpp
elichai,2020-03-01 15:10:34,"oh god. thanks. (for some reason I thought/hoped C++ helps you making sure you're not violating the lifetime when using references)\nI think I should stop using Rust lol",https://github.com/bitcoin/bitcoin/pull/18234#discussion_r386115616,386115616,src/sync.cpp
ajtowns,2020-03-02 01:40:47,"We already use `__COUNTER__` for `LOCK()` in sync.h, so reusing it here seems fine. Using `__FILE__` seems unlikely to generate a usable symbol name too :)",https://github.com/bitcoin/bitcoin/pull/18234#discussion_r386166034,386166034,src/sync.h
jonatack,2020-03-02 14:22:43,"In 69460c9 could these be also removed in `src/test/transaction_tests.cpp` L::457-458 if they are handled with `TestingSetup::~TestingSetup()`; the test compiles and runs without them.\n```diff\n--- a/src/test/transaction_tests.cpp\n+++ b/src/test/transaction_tests.cpp\n@@ -453,9 +453,6 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction)\n\n     bool controlCheck = control.Wait();\n     a",https://github.com/bitcoin/bitcoin/pull/18234#discussion_r386420553,386420553,src/test/txindex_tests.cpp
MarcoFalke,2020-03-02 17:08:08,"Not sure why this should be safe to remove. The scheduler needs to be stopped *before* this test ends, so the `interrupt_all` should be replaced by a `scheduler.stop()`. I think that otherwise you reintroduce bug #15410",https://github.com/bitcoin/bitcoin/pull/18234#discussion_r386526706,386526706,src/test/txindex_tests.cpp
jonatack,2020-03-02 17:19:31,"Thanks. I was just now looking at src/test/checkqueue_tests.cpp which has similar code.\n",https://github.com/bitcoin/bitcoin/pull/18234#discussion_r386532756,386532756,src/test/txindex_tests.cpp
theuni,2020-03-02 17:50:13,Adding a lock in a destructor just for an assertion is a shame. Maybe this should be behind a debug guard?,https://github.com/bitcoin/bitcoin/pull/18234#discussion_r386549140,386549140,src/scheduler.cpp
theuni,2020-03-02 18:52:02,Are these guaranteed to fully execute in-order? Can an interruption-point hit while the scheduler is still tearing down?,https://github.com/bitcoin/bitcoin/pull/18234#discussion_r386581975,386581975,src/init.cpp
ajtowns,2020-03-03 05:27:46,"It's probably not useful in the first place, the lock's about to be destroyed, so if anyone else even has a reference to it there's a bug, and threadsafety annotations don't apply to constructors and destructors for the same reason.",https://github.com/bitcoin/bitcoin/pull/18234#discussion_r386805975,386805975,src/scheduler.cpp
ajtowns,2020-03-04 03:36:48,"@jonatack In transaction_tests, that's a locally declared `threadGroup`, and it's a `BasicTestingSetup` too, so the `TestingSetup` destructor wouldn't execute, and even if it did, wouldn't clean up that `threadGroup`.\n\n@MarcoFalke Ah, you're quite right. Have undeleted the code and added a comment.",https://github.com/bitcoin/bitcoin/pull/18234#discussion_r387432947,387432947,src/test/txindex_tests.cpp
ajtowns,2020-03-04 04:02:08,"Not sure what you're asking; `node.scheduler->stop()` just sets a  boolean to say ""exit the loop"" and notifies everything waiting on the condition var to prevent it staying asleep, all the tear down happens in the thread. The interruption could certainly happen while it's tearing down, `stop(); interrupt_all()` happen in one thread, and only afterwards does the other thread even wake up. I don't t",https://github.com/bitcoin/bitcoin/pull/18234#discussion_r387438155,387438155,src/init.cpp
jonatack,2020-03-05 14:57:47,"@ajtowns right, makes sense. Thanks for the explanation.",https://github.com/bitcoin/bitcoin/pull/18234#discussion_r388346798,388346798,src/test/txindex_tests.cpp
MarcoFalke,2020-03-17 15:00:30,"in commit 306f71b4eb4a0fd8e64f47dc008bc235b80b13d9:\n\nAfter adding the scheduler.stop(), they are again redundant and confusing. I'd suggest to remove the `threadGroup` calls",https://github.com/bitcoin/bitcoin/pull/18234#discussion_r393743898,393743898,src/test/txindex_tests.cpp
MarcoFalke,2020-03-17 15:05:00,"in commit b9c426012770d166e6ebfab27689be44e6e89aa5:\n\nWhy is this not called `GetLastLockName`, which better describes what this function does, imo.",https://github.com/bitcoin/bitcoin/pull/18234#discussion_r393747188,393747188,src/sync.cpp
MarcoFalke,2020-03-17 15:09:42,"in commit b9c426012770d166e6ebfab27689be44e6e89aa5:\n\nShould be `m_lockname`. Also for other members?",https://github.com/bitcoin/bitcoin/pull/18234#discussion_r393750468,393750468,src/sync.h
MarcoFalke,2020-03-17 16:40:04,"in commit b9c426012770d166e6ebfab27689be44e6e89aa5:\n\nI think it would help readers of the code to briefly explain why this is needed. Also, `m_templock`? ;)",https://github.com/bitcoin/bitcoin/pull/18234#discussion_r393816704,393816704,src/sync.h
MarcoFalke,2020-03-17 16:45:23,"in commit d0ebd93270758ea97ea956b8821e17a2d001ea94:\n\nActually `boost::thread` is no longer needed an can be replaced with `std::thread` in this file and the scheduler tests. I know that the thread group is still boost, but the scheduler doesn't care about that.",https://github.com/bitcoin/bitcoin/pull/18234#discussion_r393820472,393820472,src/scheduler.h
ajtowns,2020-03-17 18:32:06,"Calling `stop()` doesn't actually cause the thread to stop, you need to wait for it to complete. Could do that by looping and waiting for `AreThreadsServicingQueue()` to be false, but that still leaves the possibility you continue on and destruct the object in between `--nThreadsServicingQueue;` and `newTaskScheduled.notify_one();` at the end of `serviceQueue`. Could drop the `interrupt_all` but i",https://github.com/bitcoin/bitcoin/pull/18234#discussion_r393888207,393888207,src/test/txindex_tests.cpp
MarcoFalke,2020-03-17 18:34:15,"Ups, correct.",https://github.com/bitcoin/bitcoin/pull/18234#discussion_r393889503,393889503,src/test/txindex_tests.cpp
