[
  {
    "sha": "1c05f6d44987cebd6cd68af000a039f5ca872a8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzA1ZjZkNDQ5ODdjZWJkNmNkNjhhZjAwMGEwMzlmNWNhODcyYThi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-15T09:24:21Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-15T09:25:54Z"
      },
      "message": "rpc: Add missing lock in getblocktemplate(...)\n\nReading the variable `chainActive` requires holding the mutex `cs_main`.\n\nPrior to this commit the `cs_main` mutex was not held when accessing\n`chainActive` in:\n\n```\nwhile (chainActive.Tip()->GetBlockHash() == hashWatchedChain && IsRPCRunning())\n```",
      "tree": {
        "sha": "4afa09f0b5b6ed57d65be588b25091938692da2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4afa09f0b5b6ed57d65be588b25091938692da2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c05f6d44987cebd6cd68af000a039f5ca872a8b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c05f6d44987cebd6cd68af000a039f5ca872a8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c05f6d44987cebd6cd68af000a039f5ca872a8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c05f6d44987cebd6cd68af000a039f5ca872a8b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4db82b7aab4ad64717f742a7318e3dc6811b41be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4db82b7aab4ad64717f742a7318e3dc6811b41be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4db82b7aab4ad64717f742a7318e3dc6811b41be"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 11,
      "deletions": 5
    },
    "files": [
      {
        "sha": "28a51ef7ae3d5b6aa455be6e1d5b1fd5b1512178",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c05f6d44987cebd6cd68af000a039f5ca872a8b/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c05f6d44987cebd6cd68af000a039f5ca872a8b/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=1c05f6d44987cebd6cd68af000a039f5ca872a8b",
        "patch": "@@ -372,8 +372,6 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getblocktemplate\", \"\")\n          );\n \n-    LOCK(cs_main);\n-\n     std::string strMode = \"template\";\n     UniValue lpval = NullUniValue;\n     std::set<std::string> setClientRules;\n@@ -403,6 +401,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n \n             uint256 hash = block.GetHash();\n+            LOCK(cs_main);\n             BlockMap::iterator mi = mapBlockIndex.find(hash);\n             if (mi != mapBlockIndex.end()) {\n                 CBlockIndex *pindex = mi->second;\n@@ -468,18 +467,23 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         }\n         else\n         {\n+            LOCK(cs_main);\n             // NOTE: Spec does not specify behaviour for non-string longpollid, but this makes testing easier\n             hashWatchedChain = chainActive.Tip()->GetBlockHash();\n             nTransactionsUpdatedLastLP = nTransactionsUpdatedLast;\n         }\n \n         // Release the wallet and main lock while waiting\n-        LEAVE_CRITICAL_SECTION(cs_main);\n         {\n             checktxtime = std::chrono::steady_clock::now() + std::chrono::minutes(1);\n \n             WaitableLock lock(csBestBlock);\n-            while (chainActive.Tip()->GetBlockHash() == hashWatchedChain && IsRPCRunning())\n+            bool keepRunning;\n+            {\n+                LOCK(cs_main);\n+                keepRunning = chainActive.Tip()->GetBlockHash() == hashWatchedChain && IsRPCRunning();\n+            }\n+            while (keepRunning)\n             {\n                 if (cvBlockChange.wait_until(lock, checktxtime) == std::cv_status::timeout)\n                 {\n@@ -488,9 +492,10 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n                         break;\n                     checktxtime += std::chrono::seconds(10);\n                 }\n+                LOCK(cs_main);\n+                keepRunning = chainActive.Tip()->GetBlockHash() == hashWatchedChain && IsRPCRunning();\n             }\n         }\n-        ENTER_CRITICAL_SECTION(cs_main);\n \n         if (!IsRPCRunning())\n             throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");\n@@ -504,6 +509,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     bool fSupportsSegwit = setClientRules.find(segwit_info.name) != setClientRules.end();\n \n     // Update block\n+    LOCK(cs_main);\n     static CBlockIndex* pindexPrev;\n     static int64_t nStart;\n     static std::unique_ptr<CBlockTemplate> pblocktemplate;"
      }
    ]
  },
  {
    "sha": "44bc37c5cf58ce280fb06f3797551434ae0c0a60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NGJjMzdjNWNmNThjZTI4MGZiMDZmMzc5NzU1MTQzNGFlMGMwYTYw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-15T09:22:17Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-15T09:25:54Z"
      },
      "message": "rpc: Work around Clang thread safety analysis quirks\n\nThe conditional lock ...\n\n```\nLOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr)\n```\n\n... confuses Clang's thread safety analysis (it complains\nabout not holding the mutex pwallet->cs_wallet even in the\ncase when pwallet is non-NULL).\n\nSo does the access to `pwallet->mapKeyMetadata` via `meta`\n(it complains about not holding the mutex `cs_wallet`\ndespite `pwallet->cs_wallet` being locked).\n\nThis commit introduces locking that Clang's thread safety\nanalysis is able to understand correctly.",
      "tree": {
        "sha": "ad27e5cb66010606689542daac6221c7118e947c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad27e5cb66010606689542daac6221c7118e947c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44bc37c5cf58ce280fb06f3797551434ae0c0a60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44bc37c5cf58ce280fb06f3797551434ae0c0a60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44bc37c5cf58ce280fb06f3797551434ae0c0a60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44bc37c5cf58ce280fb06f3797551434ae0c0a60/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c05f6d44987cebd6cd68af000a039f5ca872a8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c05f6d44987cebd6cd68af000a039f5ca872a8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c05f6d44987cebd6cd68af000a039f5ca872a8b"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 9,
      "deletions": 12
    },
    "files": [
      {
        "sha": "cc39b227069bd2cf6727bee32f7dae305101da22",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44bc37c5cf58ce280fb06f3797551434ae0c0a60/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44bc37c5cf58ce280fb06f3797551434ae0c0a60/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=44bc37c5cf58ce280fb06f3797551434ae0c0a60",
        "patch": "@@ -158,11 +158,8 @@ UniValue validateaddress(const JSONRPCRequest& request)\n \n #ifdef ENABLE_WALLET\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n #endif\n+    LOCK(cs_main);\n \n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n     bool isValid = IsValidDestination(dest);\n@@ -183,17 +180,17 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         ret.push_back(Pair(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY)));\n         UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n         ret.pushKVs(detail);\n-        if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n-        }\n         if (pwallet) {\n-            const auto& meta = pwallet->mapKeyMetadata;\n+            LOCK(pwallet->cs_wallet);\n+            if (pwallet->mapAddressBook.count(dest)) {\n+                ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n+            }\n             const CKeyID *keyID = boost::get<CKeyID>(&dest);\n-            auto it = keyID ? meta.find(*keyID) : meta.end();\n-            if (it == meta.end()) {\n-                it = meta.find(CScriptID(scriptPubKey));\n+            auto it = keyID ? pwallet->mapKeyMetadata.find(*keyID) : pwallet->mapKeyMetadata.end();\n+            if (it == pwallet->mapKeyMetadata.end()) {\n+                it = pwallet->mapKeyMetadata.find(CScriptID(scriptPubKey));\n             }\n-            if (it != meta.end()) {\n+            if (it != pwallet->mapKeyMetadata.end()) {\n                 ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n                 if (!it->second.hdKeypath.empty()) {\n                     ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));"
      }
    ]
  }
]