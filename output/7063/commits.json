[
  {
    "sha": "826079ef34906539010abe63537e7ceafedbff01",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjYwNzllZjM0OTA2NTM5MDEwYWJlNjM1MzdlN2NlYWZlZGJmZjAx",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-11-18T23:35:07Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T21:56:39Z"
      },
      "message": "Add rounding helper function to util.py",
      "tree": {
        "sha": "19f032f28b3eabf7b88808ac95cd9f1e22a5ccc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19f032f28b3eabf7b88808ac95cd9f1e22a5ccc6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/826079ef34906539010abe63537e7ceafedbff01",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/826079ef34906539010abe63537e7ceafedbff01",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/826079ef34906539010abe63537e7ceafedbff01",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/826079ef34906539010abe63537e7ceafedbff01/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34e02e0147188a7e364489db23128a05505e7a4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e02e0147188a7e364489db23128a05505e7a4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34e02e0147188a7e364489db23128a05505e7a4c"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 3,
      "deletions": 6
    },
    "files": [
      {
        "sha": "34b316a6a32e90bbc85b91fdb1ea7961128b29c5",
        "filename": "qa/rpc-tests/mempool_packages.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/826079ef34906539010abe63537e7ceafedbff01/qa/rpc-tests/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/826079ef34906539010abe63537e7ceafedbff01/qa/rpc-tests/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_packages.py?ref=826079ef34906539010abe63537e7ceafedbff01",
        "patch": "@@ -8,9 +8,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-def satoshi_round(amount):\n-    return  Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n-\n MAX_ANCESTORS = 25\n MAX_DESCENDANTS = 25\n "
      },
      {
        "sha": "b209ae0c163385f660bc550ee25beb65fc8a1364",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/826079ef34906539010abe63537e7ceafedbff01/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/826079ef34906539010abe63537e7ceafedbff01/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=826079ef34906539010abe63537e7ceafedbff01",
        "patch": "@@ -19,9 +19,6 @@\n # 4 bytes of OP_TRUE and push 2-byte redeem script of \"OP_1 OP_DROP\" or \"OP_2 OP_DROP\"\n SCRIPT_SIG = [\"0451025175\", \"0451025275\"]\n \n-def satoshi_round(amount):\n-    return  Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n-\n def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee_increment):\n     '''\n     Create and send a transaction with a random fee."
      },
      {
        "sha": "1a526ae06eabf342cef163ef5cf8e6e18e70f620",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/826079ef34906539010abe63537e7ceafedbff01/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/826079ef34906539010abe63537e7ceafedbff01/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=826079ef34906539010abe63537e7ceafedbff01",
        "patch": "@@ -404,3 +404,6 @@ def assert_raises(exc, fun, *args, **kwds):\n         raise AssertionError(\"Unexpected exception raised: \"+type(e).__name__)\n     else:\n         raise AssertionError(\"No exception raised\")\n+\n+def satoshi_round(amount):\n+    return  Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)"
      }
    ]
  },
  {
    "sha": "596e8399d48c483b402760e014870fb818d2e3c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTZlODM5OWQ0OGM0ODNiNDAyNzYwZTAxNDg3MGZiODE4ZDJlM2M0",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-11-19T01:55:52Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T22:01:15Z"
      },
      "message": "Add rpc test for prioritisetransaction",
      "tree": {
        "sha": "4927484a1db55f4ad265b9d9675c3fbd59d74889",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4927484a1db55f4ad265b9d9675c3fbd59d74889"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/596e8399d48c483b402760e014870fb818d2e3c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/596e8399d48c483b402760e014870fb818d2e3c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/596e8399d48c483b402760e014870fb818d2e3c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/596e8399d48c483b402760e014870fb818d2e3c4/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "826079ef34906539010abe63537e7ceafedbff01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/826079ef34906539010abe63537e7ceafedbff01",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/826079ef34906539010abe63537e7ceafedbff01"
      }
    ],
    "stats": {
      "total": 148,
      "additions": 148,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e65da81572b747bf09f62d2134bed17a9517f219",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/596e8399d48c483b402760e014870fb818d2e3c4/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/596e8399d48c483b402760e014870fb818d2e3c4/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=596e8399d48c483b402760e014870fb818d2e3c4",
        "patch": "@@ -92,6 +92,7 @@\n     'blockchain.py',\n     'disablewallet.py',\n     'sendheaders.py',\n+    'prioritise_transaction.py',\n ]\n testScriptsExt = [\n     'bip65-cltv.py',"
      },
      {
        "sha": "f376ceee5ecb637ccaf91f489b69160bfc1461ba",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "added",
        "additions": 147,
        "deletions": 0,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/596e8399d48c483b402760e014870fb818d2e3c4/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/596e8399d48c483b402760e014870fb818d2e3c4/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=596e8399d48c483b402760e014870fb818d2e3c4",
        "patch": "@@ -0,0 +1,147 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test PrioritiseTransaction code\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+COIN = 100000000\n+\n+class PrioritiseTransactionTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        # Some pre-processing to create a bunch of OP_RETURN txouts to insert into transactions we create\n+        # So we have big transactions (and therefore can't fit very many into each block)\n+        # create one script_pubkey\n+        script_pubkey = \"6a4d0200\" #OP_RETURN OP_PUSH2 512 bytes\n+        for i in xrange (512):\n+            script_pubkey = script_pubkey + \"01\"\n+        # concatenate 128 txouts of above script_pubkey which we'll insert before the txout for change\n+        self.txouts = \"81\"\n+        for k in xrange(128):\n+            # add txout value\n+            self.txouts = self.txouts + \"0000000000000000\"\n+            # add length of script_pubkey\n+            self.txouts = self.txouts + \"fd0402\"\n+            # add script_pubkey\n+            self.txouts = self.txouts + script_pubkey\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 1)\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.is_network_split = False\n+\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-printpriority=1\"]))\n+        self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+\n+    def create_confirmed_utxos(self, count):\n+        self.nodes[0].generate(int(0.5*count)+101)\n+        utxos = self.nodes[0].listunspent()\n+        iterations = count - len(utxos)\n+        addr1 = self.nodes[0].getnewaddress()\n+        addr2 = self.nodes[0].getnewaddress()\n+        if iterations <= 0:\n+            return utxos\n+        for i in xrange(iterations):\n+            t = utxos.pop()\n+            fee = self.relayfee\n+            inputs = []\n+            inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n+            outputs = {}\n+            send_value = t['amount'] - fee\n+            outputs[addr1] = satoshi_round(send_value/2)\n+            outputs[addr2] = satoshi_round(send_value/2)\n+            raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+            signed_tx = self.nodes[0].signrawtransaction(raw_tx)[\"hex\"]\n+            txid = self.nodes[0].sendrawtransaction(signed_tx)\n+\n+        while (self.nodes[0].getmempoolinfo()['size'] > 0):\n+            self.nodes[0].generate(1)\n+\n+        utxos = self.nodes[0].listunspent()\n+        assert(len(utxos) >= count)\n+        return utxos\n+\n+    def create_lots_of_big_transactions(self, utxos, fee):\n+        addr = self.nodes[0].getnewaddress()\n+        txids = []\n+        for i in xrange(len(utxos)):\n+            t = utxos.pop()\n+            inputs = []\n+            inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n+            outputs = {}\n+            send_value = t['amount'] - fee\n+            outputs[addr] = satoshi_round(send_value)\n+            rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+            newtx = rawtx[0:92]\n+            newtx = newtx + self.txouts\n+            newtx = newtx + rawtx[94:]\n+            signresult = self.nodes[0].signrawtransaction(newtx, None, None, \"NONE\")\n+            txid = self.nodes[0].sendrawtransaction(signresult[\"hex\"], True)\n+            txids.append(txid)\n+        return txids\n+\n+    def run_test(self):\n+        utxos = self.create_confirmed_utxos(90)\n+        base_fee = self.relayfee*100 # our transactions are smaller than 100kb\n+        txids = []\n+\n+        # Create 3 batches of transactions at 3 different fee rate levels\n+        for i in xrange(3):\n+            txids.append([])\n+            txids[i] = self.create_lots_of_big_transactions(utxos[30*i:30*i+30], (i+1)*base_fee)\n+\n+        # add a fee delta to something in the cheapest bucket and make sure it gets mined\n+        # also check that a different entry in the cheapest bucket is NOT mined (lower\n+        # the priority to ensure its not mined due to priority)\n+        self.nodes[0].prioritisetransaction(txids[0][0], 0, int(3*base_fee*COIN))\n+        self.nodes[0].prioritisetransaction(txids[0][1], -1e15, 0)\n+\n+        self.nodes[0].generate(1)\n+\n+        mempool = self.nodes[0].getrawmempool()\n+        print \"Assert that prioritised transasction was mined\"\n+        assert(txids[0][0] not in mempool)\n+        assert(txids[0][1] in mempool)\n+\n+        high_fee_tx = None\n+        for x in txids[2]:\n+            if x not in mempool:\n+                high_fee_tx = x\n+\n+        # Something high-fee should have been mined!\n+        assert(high_fee_tx != None)\n+\n+        # Add a prioritisation before a tx is in the mempool (de-prioritising a\n+        # high-fee transaction).\n+        self.nodes[0].prioritisetransaction(high_fee_tx, -1e15, -int(2*base_fee*COIN))\n+\n+        # Add everything back to mempool\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # Check to make sure our high fee rate tx is back in the mempool\n+        mempool = self.nodes[0].getrawmempool()\n+        assert(high_fee_tx in mempool)\n+\n+        # Now verify the high feerate transaction isn't mined.\n+        self.nodes[0].generate(5)\n+\n+        # High fee transaction should not have been mined, but other high fee rate\n+        # transactions should have been.\n+        mempool = self.nodes[0].getrawmempool()\n+        print \"Assert that de-prioritised transaction is still in mempool\"\n+        assert(high_fee_tx in mempool)\n+        for x in txids[2]:\n+            if (x != high_fee_tx):\n+                assert(x not in mempool)\n+\n+if __name__ == '__main__':\n+    PrioritiseTransactionTest().main()"
      }
    ]
  }
]