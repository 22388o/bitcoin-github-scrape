[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633647172",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-633647172",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19067",
    "id": 633647172,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMzY0NzE3Mg==",
    "user": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?u=2ba2cccaa0fd357b363507ce5694ce3cf5e56220&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-25T16:40:11Z",
    "updated_at": "2020-05-25T16:40:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633647172/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650809891",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-650809891",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19067",
    "id": 650809891,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MDgwOTg5MQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-28T19:21:15Z",
    "updated_at": "2020-06-28T19:21:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Anything left to do here? :)  The changes are limited to `src/test/fuzz/` and should hopefully be trivial to review.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650809891/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657924864",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-657924864",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19067",
    "id": 657924864,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzkyNDg2NA==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-14T02:13:46Z",
    "updated_at": "2020-07-14T02:13:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Fails to build with the same error as #19065 , rebasing it onto master reveals that `PushBlockHash` & `PushInventory` no longer exist since 344e831de54f7b864f03a90f6cb19692eafcd463.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657924864/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658032591",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-658032591",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19067",
    "id": 658032591,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODAzMjU5MQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-14T07:58:52Z",
    "updated_at": "2020-07-14T07:58:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Crypt-iQ Thanks for reporting. Should be fixed now. Would you mind retrying? :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658032591/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/660363101",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-660363101",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19067",
    "id": 660363101,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDM2MzEwMQ==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-17T22:26:30Z",
    "updated_at": "2020-07-17T22:26:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@practicalswift Fuzzing with clang-10 libfuzzer. afl-gcc/g++ can also build on a22b42e.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/660363101/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674562510",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-674562510",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19067",
    "id": 674562510,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDU2MjUxMA==",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?u=a19ad52f8c597f3518a89a52014fabefda644078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-16T18:45:40Z",
    "updated_at": "2020-08-16T18:45:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tested ACK a22b42e",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674562510/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/681082086",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-681082086",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19067",
    "id": 681082086,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTA4MjA4Ng==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-26T19:35:32Z",
    "updated_at": "2020-08-26T19:35:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ready for merge?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/681082086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/681989205",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-681989205",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19067",
    "id": 681989205,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTk4OTIwNQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-27T14:35:47Z",
    "updated_at": "2020-08-27T14:35:47Z",
    "author_association": "MEMBER",
    "body": "needs rebase",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/681989205/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682099709",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-682099709",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19067",
    "id": 682099709,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjA5OTcwOQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-27T17:52:37Z",
    "updated_at": "2020-08-27T17:52:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jb55 @Crypt-iQ @MarcoFalke Thanks a lot for reviewing. Now rebased. Please re-review :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682099709/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429986672",
    "pull_request_review_id": 417774102,
    "id": 429986672,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk4NjY3Mg==",
    "diff_hunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static TestingSetup no_log_regtest_setup{CBaseChainParams::REGTEST, {\"-nodebuglogfile\"}};",
    "path": "src/test/fuzz/net.cpp",
    "position": null,
    "original_position": 24,
    "commit_id": "cc26fab48d76a813d798657b18ae1af08a301150",
    "original_commit_id": "7960082e506feb6ccaf5d0a8a0b61d471da64481",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Note to self: `TestingSetup` introduces non-determinism and is way too heavy to use just to disable logging. Consider switching to something more lightweight which does exactly what we want and nothing more :)",
    "created_at": "2020-05-25T15:18:43Z",
    "updated_at": "2020-08-27T17:51:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r429986672",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429986672"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r429986672"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429986672/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 24,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430361390",
    "pull_request_review_id": 418230755,
    "id": 430361390,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2MTM5MA==",
    "diff_hunk": "@@ -0,0 +1,164 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+    StartMutedLogging();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 13)) {\n+        case 0: {\n+            node.CloseSocketDisconnect();\n+            break;\n+        }\n+        case 1: {\n+            node.MaybeSetAddrName(fuzzed_data_provider.ConsumeRandomLengthString(32));\n+            break;\n+        }\n+        case 2: {\n+            node.SetSendVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        }\n+        case 3: {\n+            const std::vector<bool> asmap = ConsumeRandomLengthIntegralVector<bool>(fuzzed_data_provider, 128);\n+            if (!SanityCheckASMap(asmap)) {\n+                break;\n+            }\n+            CNodeStats stats;\n+            node.copyStats(stats, asmap);\n+            break;\n+        }\n+        case 4: {\n+            node.SetRecvVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        }\n+        case 5: {\n+            const CNode* add_ref_node = node.AddRef();\n+            assert(add_ref_node == &node);\n+            break;\n+        }\n+        case 6: {\n+            if (node.GetRefCount() > 0) {\n+                node.Release();\n+            }\n+            break;\n+        }\n+        case 7: {\n+            if (node.m_addr_known == nullptr) {\n+                break;\n+            }\n+            const std::optional<CAddress> addr_opt = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            if (!addr_opt) {\n+                break;\n+            }\n+            node.AddAddressKnown(*addr_opt);\n+            break;\n+        }\n+        case 8: {\n+            if (node.m_addr_known == nullptr) {\n+                break;\n+            }\n+            const std::optional<CAddress> addr_opt = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            if (!addr_opt) {\n+                break;\n+            }\n+            FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+            node.PushAddress(*addr_opt, fast_random_context);\n+            break;\n+        }\n+        case 9: {\n+            const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+            if (!inv_opt) {\n+                break;\n+            }\n+            node.AddInventoryKnown(*inv_opt);\n+            break;\n+        }\n+        case 10: {\n+            const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+            if (!inv_opt) {\n+                break;\n+            }\n+            node.PushInventory(*inv_opt);\n+            break;\n+        }\n+        case 11: {\n+            node.PushBlockHash(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 12: {\n+            const std::optional<CService> service_opt = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (!service_opt) {\n+                break;\n+            }\n+            node.SetAddrLocal(*service_opt);\n+            break;\n+        }\n+        case 13: {\n+            const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            bool complete;\n+            node.ReceiveMsgBytes((const char*)b.data(), b.size(), complete);\n+            break;\n+        }\n+        }\n+    }\n+\n+    (void)node.GetAddrLocal();\n+    (void)node.GetAddrName();\n+    (void)node.GetId();\n+    (void)node.GetLocalNonce();\n+    (void)node.GetLocalServices();\n+    (void)node.GetMyStartingHeight();\n+    (void)node.GetRecvVersion();\n+    const int ref_count = node.GetRefCount();\n+    assert(ref_count >= 0);\n+    (void)node.GetSendVersion();\n+    (void)node.IsAddrRelayPeer();\n+\n+    const NetPermissionFlags net_permission_flags = fuzzed_data_provider.ConsumeBool() ? fuzzed_data_provider.PickValueInArray<NetPermissionFlags>({",
    "path": "src/test/fuzz/net.cpp",
    "position": null,
    "original_position": 152,
    "commit_id": "cc26fab48d76a813d798657b18ae1af08a301150",
    "original_commit_id": "086991817e25df9d42e249751342cf5b137e348e",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n    const NetPermissionFlags net_permission_flags = fuzzed_data_provider.ConsumeBool() ?\r\n    fuzzed_data_provider.PickValueInArray<NetPermissionFlags>({\r\n```\r\n\r\nCouldn't this start a new line after the `?` Seems overly wasteful to fill the screen with 8 * 90 pure whitespace",
    "created_at": "2020-05-26T12:05:32Z",
    "updated_at": "2020-08-27T17:51:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r430361390",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430361390"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r430361390"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430361390/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 152,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430391233",
    "pull_request_review_id": 418269729,
    "id": 430391233,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5MTIzMw==",
    "diff_hunk": "@@ -0,0 +1,164 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+    StartMutedLogging();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 13)) {\n+        case 0: {\n+            node.CloseSocketDisconnect();\n+            break;\n+        }\n+        case 1: {\n+            node.MaybeSetAddrName(fuzzed_data_provider.ConsumeRandomLengthString(32));\n+            break;\n+        }\n+        case 2: {\n+            node.SetSendVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        }\n+        case 3: {\n+            const std::vector<bool> asmap = ConsumeRandomLengthIntegralVector<bool>(fuzzed_data_provider, 128);\n+            if (!SanityCheckASMap(asmap)) {\n+                break;\n+            }\n+            CNodeStats stats;\n+            node.copyStats(stats, asmap);\n+            break;\n+        }\n+        case 4: {\n+            node.SetRecvVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        }\n+        case 5: {\n+            const CNode* add_ref_node = node.AddRef();\n+            assert(add_ref_node == &node);\n+            break;\n+        }\n+        case 6: {\n+            if (node.GetRefCount() > 0) {\n+                node.Release();\n+            }\n+            break;\n+        }\n+        case 7: {\n+            if (node.m_addr_known == nullptr) {\n+                break;\n+            }\n+            const std::optional<CAddress> addr_opt = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            if (!addr_opt) {\n+                break;\n+            }\n+            node.AddAddressKnown(*addr_opt);\n+            break;\n+        }\n+        case 8: {\n+            if (node.m_addr_known == nullptr) {\n+                break;\n+            }\n+            const std::optional<CAddress> addr_opt = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            if (!addr_opt) {\n+                break;\n+            }\n+            FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+            node.PushAddress(*addr_opt, fast_random_context);\n+            break;\n+        }\n+        case 9: {\n+            const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+            if (!inv_opt) {\n+                break;\n+            }\n+            node.AddInventoryKnown(*inv_opt);\n+            break;\n+        }\n+        case 10: {\n+            const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+            if (!inv_opt) {\n+                break;\n+            }\n+            node.PushInventory(*inv_opt);\n+            break;\n+        }\n+        case 11: {\n+            node.PushBlockHash(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 12: {\n+            const std::optional<CService> service_opt = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (!service_opt) {\n+                break;\n+            }\n+            node.SetAddrLocal(*service_opt);\n+            break;\n+        }\n+        case 13: {\n+            const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            bool complete;\n+            node.ReceiveMsgBytes((const char*)b.data(), b.size(), complete);\n+            break;\n+        }\n+        }\n+    }\n+\n+    (void)node.GetAddrLocal();\n+    (void)node.GetAddrName();\n+    (void)node.GetId();\n+    (void)node.GetLocalNonce();\n+    (void)node.GetLocalServices();\n+    (void)node.GetMyStartingHeight();\n+    (void)node.GetRecvVersion();\n+    const int ref_count = node.GetRefCount();\n+    assert(ref_count >= 0);\n+    (void)node.GetSendVersion();\n+    (void)node.IsAddrRelayPeer();\n+\n+    const NetPermissionFlags net_permission_flags = fuzzed_data_provider.ConsumeBool() ? fuzzed_data_provider.PickValueInArray<NetPermissionFlags>({",
    "path": "src/test/fuzz/net.cpp",
    "position": null,
    "original_position": 152,
    "commit_id": "cc26fab48d76a813d798657b18ae1af08a301150",
    "original_commit_id": "086991817e25df9d42e249751342cf5b137e348e",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Sure! Now fixed: `clang-format`:ed version replaced with another `clang-format`:ed version after manual re-arrangement.\r\n\r\nWhen it comes to formatting I really don't have any personal preferences: I'm happy as long as `clang-format` is happy :)",
    "created_at": "2020-05-26T12:57:35Z",
    "updated_at": "2020-08-27T17:51:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r430391233",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430391233"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r430391233"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430391233/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 152,
    "side": "RIGHT",
    "in_reply_to_id": 430361390
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454158682",
    "pull_request_review_id": 447855968,
    "id": 454158682,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1ODY4Mg==",
    "diff_hunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 13)) {\n+        case 0: {\n+            node.CloseSocketDisconnect();\n+            break;\n+        }\n+        case 1: {\n+            node.MaybeSetAddrName(fuzzed_data_provider.ConsumeRandomLengthString(32));\n+            break;\n+        }\n+        case 2: {\n+            node.SetSendVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        }\n+        case 3: {\n+            const std::vector<bool> asmap = ConsumeRandomLengthIntegralVector<bool>(fuzzed_data_provider, 128);\n+            if (!SanityCheckASMap(asmap)) {\n+                break;\n+            }\n+            CNodeStats stats;\n+            node.copyStats(stats, asmap);\n+            break;\n+        }\n+        case 4: {\n+            node.SetRecvVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        }\n+        case 5: {\n+            const CNode* add_ref_node = node.AddRef();\n+            assert(add_ref_node == &node);\n+            break;\n+        }\n+        case 6: {\n+            if (node.GetRefCount() > 0) {\n+                node.Release();\n+            }\n+            break;\n+        }\n+        case 7: {\n+            if (node.m_addr_known == nullptr) {\n+                break;\n+            }\n+            const std::optional<CAddress> addr_opt = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            if (!addr_opt) {\n+                break;\n+            }\n+            node.AddAddressKnown(*addr_opt);\n+            break;\n+        }\n+        case 8: {\n+            if (node.m_addr_known == nullptr) {\n+                break;\n+            }\n+            const std::optional<CAddress> addr_opt = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            if (!addr_opt) {\n+                break;\n+            }\n+            FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+            node.PushAddress(*addr_opt, fast_random_context);\n+            break;\n+        }\n+        case 9: {\n+            const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+            if (!inv_opt) {\n+                break;\n+            }\n+            node.AddInventoryKnown(*inv_opt);\n+            break;\n+        }\n+        case 10: {\n+            const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+            if (!inv_opt) {\n+                break;\n+            }\n+            node.PushInventory(*inv_opt);",
    "path": "src/test/fuzz/net.cpp",
    "position": null,
    "original_position": 115,
    "commit_id": "cc26fab48d76a813d798657b18ae1af08a301150",
    "original_commit_id": "2206f168f6ea4e93eeedc7ee2a3eea1e3df9ac27",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\ntest/fuzz/net.cpp:115:18: error: no member named 'PushInventory' in 'CNode'\r\n\r\n            node.PushInventory(*inv_opt);\r\n\r\n            ~~~~ ^\r\n\r\ntest/fuzz/net.cpp:119:18: error: no member named 'PushBlockHash' in 'CNode'\r\n\r\n            node.PushBlockHash(ConsumeUInt256(fuzzed_data_provider));\r\n\r\n            ~~~~ ^\r\n\r\n2 errors generated.",
    "created_at": "2020-07-14T07:29:00Z",
    "updated_at": "2020-08-27T17:51:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r454158682",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454158682"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r454158682"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454158682/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 115,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454174673",
    "pull_request_review_id": 447875859,
    "id": 454174673,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3NDY3Mw==",
    "diff_hunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 13)) {\n+        case 0: {\n+            node.CloseSocketDisconnect();\n+            break;\n+        }\n+        case 1: {\n+            node.MaybeSetAddrName(fuzzed_data_provider.ConsumeRandomLengthString(32));\n+            break;\n+        }\n+        case 2: {\n+            node.SetSendVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        }\n+        case 3: {\n+            const std::vector<bool> asmap = ConsumeRandomLengthIntegralVector<bool>(fuzzed_data_provider, 128);\n+            if (!SanityCheckASMap(asmap)) {\n+                break;\n+            }\n+            CNodeStats stats;\n+            node.copyStats(stats, asmap);\n+            break;\n+        }\n+        case 4: {\n+            node.SetRecvVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        }\n+        case 5: {\n+            const CNode* add_ref_node = node.AddRef();\n+            assert(add_ref_node == &node);\n+            break;\n+        }\n+        case 6: {\n+            if (node.GetRefCount() > 0) {\n+                node.Release();\n+            }\n+            break;\n+        }\n+        case 7: {\n+            if (node.m_addr_known == nullptr) {\n+                break;\n+            }\n+            const std::optional<CAddress> addr_opt = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            if (!addr_opt) {\n+                break;\n+            }\n+            node.AddAddressKnown(*addr_opt);\n+            break;\n+        }\n+        case 8: {\n+            if (node.m_addr_known == nullptr) {\n+                break;\n+            }\n+            const std::optional<CAddress> addr_opt = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            if (!addr_opt) {\n+                break;\n+            }\n+            FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+            node.PushAddress(*addr_opt, fast_random_context);\n+            break;\n+        }\n+        case 9: {\n+            const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+            if (!inv_opt) {\n+                break;\n+            }\n+            node.AddInventoryKnown(*inv_opt);\n+            break;\n+        }\n+        case 10: {\n+            const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+            if (!inv_opt) {\n+                break;\n+            }\n+            node.PushInventory(*inv_opt);",
    "path": "src/test/fuzz/net.cpp",
    "position": null,
    "original_position": 115,
    "commit_id": "cc26fab48d76a813d798657b18ae1af08a301150",
    "original_commit_id": "2206f168f6ea4e93eeedc7ee2a3eea1e3df9ac27",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh, thanks for letting me know! Now fixed!",
    "created_at": "2020-07-14T07:58:30Z",
    "updated_at": "2020-08-27T17:51:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r454174673",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454174673"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r454174673"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454174673/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 115,
    "side": "RIGHT",
    "in_reply_to_id": 454158682
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456905063",
    "pull_request_review_id": 451128926,
    "id": 456905063,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkwNTA2Mw==",
    "diff_hunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};",
    "path": "src/test/fuzz/net.cpp",
    "position": null,
    "original_position": 40,
    "commit_id": "cc26fab48d76a813d798657b18ae1af08a301150",
    "original_commit_id": "a22b42e44148d64807e9fb8e452c284789100cf1",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If the fuzzer didn't always pass in `INVALID_SOCKET`, every line would be covered by the fuzzer in `CNode::CloseSocketDisconnect()`.\r\n\r\nMaybe instead of doing this `CNode node {...}`, you could make a function `ConsumeCNode` that can also be used in the `process_message.cpp` & `process_messages.cpp` fuzzing harnesses. I think this would improve coverage of those fuzzing harnesses too :).",
    "created_at": "2020-07-19T12:50:09Z",
    "updated_at": "2020-08-27T17:51:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r456905063",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456905063"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r456905063"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456905063/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 40,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456905125",
    "pull_request_review_id": 451128926,
    "id": 456905125,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkwNTEyNQ==",
    "diff_hunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 12)) {\n+        case 0: {\n+            node.CloseSocketDisconnect();\n+            break;\n+        }\n+        case 1: {\n+            node.MaybeSetAddrName(fuzzed_data_provider.ConsumeRandomLengthString(32));",
    "path": "src/test/fuzz/net.cpp",
    "position": 57,
    "original_position": 48,
    "commit_id": "cc26fab48d76a813d798657b18ae1af08a301150",
    "original_commit_id": "a22b42e44148d64807e9fb8e452c284789100cf1",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Since this always has length of 32, not every line is covered by the fuzzer in `MaybeSetAddrName`.",
    "created_at": "2020-07-19T12:50:41Z",
    "updated_at": "2020-08-27T17:51:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r456905125",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456905125"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r456905125"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456905125/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470768940",
    "pull_request_review_id": 467761189,
    "id": 470768940,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2ODk0MA==",
    "diff_hunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};",
    "path": "src/test/fuzz/net.cpp",
    "position": null,
    "original_position": 40,
    "commit_id": "cc26fab48d76a813d798657b18ae1af08a301150",
    "original_commit_id": "a22b42e44148d64807e9fb8e452c284789100cf1",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think that lack of coverage in `CNode::CloseSocketDisconnect` is okay: `INVALID_SOCKET` basically guarantees that all `CNode` operations are safe (that's how it is done in the unit tests). We can look at expanding the coverage safely in a future PR :)",
    "created_at": "2020-08-14T17:50:26Z",
    "updated_at": "2020-08-27T17:51:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r470768940",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470768940"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r470768940"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470768940/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 40,
    "side": "RIGHT",
    "in_reply_to_id": 456905063
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470769673",
    "pull_request_review_id": 467762091,
    "id": 470769673,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2OTY3Mw==",
    "diff_hunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 12)) {\n+        case 0: {\n+            node.CloseSocketDisconnect();\n+            break;\n+        }\n+        case 1: {\n+            node.MaybeSetAddrName(fuzzed_data_provider.ConsumeRandomLengthString(32));",
    "path": "src/test/fuzz/net.cpp",
    "position": 57,
    "original_position": 48,
    "commit_id": "cc26fab48d76a813d798657b18ae1af08a301150",
    "original_commit_id": "a22b42e44148d64807e9fb8e452c284789100cf1",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`ConsumeRandomLengthString(32)` will return a string _up to_ 32 characters long :)",
    "created_at": "2020-08-14T17:51:51Z",
    "updated_at": "2020-08-27T17:51:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r470769673",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470769673"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r470769673"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470769673/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "RIGHT",
    "in_reply_to_id": 456905125
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471024908",
    "pull_request_review_id": 468012321,
    "id": 471024908,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyNDkwOA==",
    "diff_hunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};",
    "path": "src/test/fuzz/net.cpp",
    "position": null,
    "original_position": 40,
    "commit_id": "cc26fab48d76a813d798657b18ae1af08a301150",
    "original_commit_id": "a22b42e44148d64807e9fb8e452c284789100cf1",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ok that makes sense to me about `INVALID_SOCKET`. What about `void AdvertiseLocal(CNode *pnode)`?",
    "created_at": "2020-08-15T19:10:06Z",
    "updated_at": "2020-08-27T17:51:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471024908",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471024908"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471024908"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471024908/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 40,
    "side": "RIGHT",
    "in_reply_to_id": 456905063
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471025336",
    "pull_request_review_id": 468012600,
    "id": 471025336,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyNTMzNg==",
    "diff_hunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 12)) {\n+        case 0: {\n+            node.CloseSocketDisconnect();\n+            break;\n+        }\n+        case 1: {\n+            node.MaybeSetAddrName(fuzzed_data_provider.ConsumeRandomLengthString(32));",
    "path": "src/test/fuzz/net.cpp",
    "position": 57,
    "original_position": 48,
    "commit_id": "cc26fab48d76a813d798657b18ae1af08a301150",
    "original_commit_id": "a22b42e44148d64807e9fb8e452c284789100cf1",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nvm. \ud83d\udc4d ",
    "created_at": "2020-08-15T19:14:55Z",
    "updated_at": "2020-08-27T17:51:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471025336",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471025336"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471025336"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471025336/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "RIGHT",
    "in_reply_to_id": 456905125
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471129211",
    "pull_request_review_id": 468075553,
    "id": 471129211,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEyOTIxMQ==",
    "diff_hunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};",
    "path": "src/test/fuzz/net.cpp",
    "position": null,
    "original_position": 40,
    "commit_id": "cc26fab48d76a813d798657b18ae1af08a301150",
    "original_commit_id": "a22b42e44148d64807e9fb8e452c284789100cf1",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@Crypt-iQ Both `IsPeerAddrLocalGood` and `AdvertiseLocal` depend on global state (`fDiscover` and `fListen`), and in the case of `AdvertiseLocal` a `FastRandomContext` is deciding which execution path to take. I think they're sufficiently different to do them in another PR taking those things into account to achieve maximum possible determinism. Makes sense? :)",
    "created_at": "2020-08-16T16:01:15Z",
    "updated_at": "2020-08-27T17:51:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471129211",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471129211"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471129211"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471129211/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 40,
    "side": "RIGHT",
    "in_reply_to_id": 456905063
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471145115",
    "pull_request_review_id": 468085902,
    "id": 471145115,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0NTExNQ==",
    "diff_hunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};",
    "path": "src/test/fuzz/net.cpp",
    "position": null,
    "original_position": 40,
    "commit_id": "cc26fab48d76a813d798657b18ae1af08a301150",
    "original_commit_id": "a22b42e44148d64807e9fb8e452c284789100cf1",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes that makes sense \ud83d\udc4d ",
    "created_at": "2020-08-16T18:45:05Z",
    "updated_at": "2020-08-27T17:51:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471145115",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471145115"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471145115"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471145115/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 40,
    "side": "RIGHT",
    "in_reply_to_id": 456905063
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478468696",
    "pull_request_review_id": 476786446,
    "id": 478468696,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ2ODY5Ng==",
    "diff_hunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};",
    "path": "src/test/fuzz/net.cpp",
    "position": null,
    "original_position": 40,
    "commit_id": "cc26fab48d76a813d798657b18ae1af08a301150",
    "original_commit_id": "a22b42e44148d64807e9fb8e452c284789100cf1",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool(),};\r\n```\r\n\r\nCould add a trailing comma and then clang format to avoid an excessively long line?",
    "created_at": "2020-08-27T14:37:20Z",
    "updated_at": "2020-08-27T17:51:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r478468696",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478468696"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r478468696"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478468696/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 40,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478594562",
    "pull_request_review_id": 476952066,
    "id": 478594562,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5NDU2Mg==",
    "diff_hunk": "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};",
    "path": "src/test/fuzz/net.cpp",
    "position": null,
    "original_position": 40,
    "commit_id": "cc26fab48d76a813d798657b18ae1af08a301150",
    "original_commit_id": "a22b42e44148d64807e9fb8e452c284789100cf1",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point. Fixed!",
    "created_at": "2020-08-27T17:51:52Z",
    "updated_at": "2020-08-27T17:51:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r478594562",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478594562"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r478594562"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478594562/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 40,
    "side": "RIGHT",
    "in_reply_to_id": 478468696
  }
]