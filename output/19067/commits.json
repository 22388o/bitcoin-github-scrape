[
  {
    "sha": "cc26fab48d76a813d798657b18ae1af08a301150",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzI2ZmFiNDhkNzZhODEzZDc5ODY1N2IxOGFlMWFmMDhhMzAxMTUw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-25T12:40:36Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-08-27T17:50:39Z"
      },
      "message": "tests: Add fuzzing harness for CNode",
      "tree": {
        "sha": "c9b790df726b7566f73b6fb515cd77db3d3e329a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9b790df726b7566f73b6fb515cd77db3d3e329a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc26fab48d76a813d798657b18ae1af08a301150",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc26fab48d76a813d798657b18ae1af08a301150",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc26fab48d76a813d798657b18ae1af08a301150",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc26fab48d76a813d798657b18ae1af08a301150/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91af7ef831d32a9db7719c64442a7d76cef5a931",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91af7ef831d32a9db7719c64442a7d76cef5a931",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91af7ef831d32a9db7719c64442a7d76cef5a931"
      }
    ],
    "stats": {
      "total": 163,
      "additions": 163,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a0c9c30f364cfe1a258fa2181f310f17536d1d88",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc26fab48d76a813d798657b18ae1af08a301150/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc26fab48d76a813d798657b18ae1af08a301150/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=cc26fab48d76a813d798657b18ae1af08a301150",
        "patch": "@@ -70,6 +70,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/message \\\n   test/fuzz/messageheader_deserialize \\\n   test/fuzz/multiplication_overflow \\\n+  test/fuzz/net \\\n   test/fuzz/net_permissions \\\n   test/fuzz/netaddr_deserialize \\\n   test/fuzz/netaddress \\\n@@ -722,6 +723,12 @@ test_fuzz_multiplication_overflow_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_multiplication_overflow_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_multiplication_overflow_SOURCES = test/fuzz/multiplication_overflow.cpp\n \n+test_fuzz_net_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_net_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_net_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_net_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_net_SOURCES = test/fuzz/net.cpp\n+\n test_fuzz_net_permissions_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_net_permissions_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_net_permissions_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "1ff9d6b286b53e197613916f9c025c85d0c114ef",
        "filename": "src/test/fuzz/net.cpp",
        "status": "added",
        "additions": 156,
        "deletions": 0,
        "changes": 156,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc26fab48d76a813d798657b18ae1af08a301150/src/test/fuzz/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc26fab48d76a813d798657b18ae1af08a301150/src/test/fuzz/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net.cpp?ref=cc26fab48d76a813d798657b18ae1af08a301150",
        "patch": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(),\n+               static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()),\n+               fuzzed_data_provider.ConsumeIntegral<int>(),\n+               INVALID_SOCKET,\n+               *address,\n+               fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n+               fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n+               *address_bind,\n+               fuzzed_data_provider.ConsumeRandomLengthString(32),\n+               fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND, ConnectionType::MANUAL, ConnectionType::FEELER, ConnectionType::BLOCK_RELAY, ConnectionType::ADDR_FETCH})};\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 12)) {\n+        case 0: {\n+            node.CloseSocketDisconnect();\n+            break;\n+        }\n+        case 1: {\n+            node.MaybeSetAddrName(fuzzed_data_provider.ConsumeRandomLengthString(32));\n+            break;\n+        }\n+        case 2: {\n+            node.SetSendVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        }\n+        case 3: {\n+            const std::vector<bool> asmap = ConsumeRandomLengthIntegralVector<bool>(fuzzed_data_provider, 128);\n+            if (!SanityCheckASMap(asmap)) {\n+                break;\n+            }\n+            CNodeStats stats;\n+            node.copyStats(stats, asmap);\n+            break;\n+        }\n+        case 4: {\n+            node.SetRecvVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        }\n+        case 5: {\n+            const CNode* add_ref_node = node.AddRef();\n+            assert(add_ref_node == &node);\n+            break;\n+        }\n+        case 6: {\n+            if (node.GetRefCount() > 0) {\n+                node.Release();\n+            }\n+            break;\n+        }\n+        case 7: {\n+            if (node.m_addr_known == nullptr) {\n+                break;\n+            }\n+            const std::optional<CAddress> addr_opt = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            if (!addr_opt) {\n+                break;\n+            }\n+            node.AddAddressKnown(*addr_opt);\n+            break;\n+        }\n+        case 8: {\n+            if (node.m_addr_known == nullptr) {\n+                break;\n+            }\n+            const std::optional<CAddress> addr_opt = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            if (!addr_opt) {\n+                break;\n+            }\n+            FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+            node.PushAddress(*addr_opt, fast_random_context);\n+            break;\n+        }\n+        case 9: {\n+            const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+            if (!inv_opt) {\n+                break;\n+            }\n+            node.AddKnownTx(inv_opt->hash);\n+            break;\n+        }\n+        case 10: {\n+            node.PushTxInventory(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 11: {\n+            const std::optional<CService> service_opt = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (!service_opt) {\n+                break;\n+            }\n+            node.SetAddrLocal(*service_opt);\n+            break;\n+        }\n+        case 12: {\n+            const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            bool complete;\n+            node.ReceiveMsgBytes((const char*)b.data(), b.size(), complete);\n+            break;\n+        }\n+        }\n+    }\n+\n+    (void)node.GetAddrLocal();\n+    (void)node.GetAddrName();\n+    (void)node.GetId();\n+    (void)node.GetLocalNonce();\n+    (void)node.GetLocalServices();\n+    (void)node.GetMyStartingHeight();\n+    (void)node.GetRecvVersion();\n+    const int ref_count = node.GetRefCount();\n+    assert(ref_count >= 0);\n+    (void)node.GetSendVersion();\n+    (void)node.IsAddrRelayPeer();\n+\n+    const NetPermissionFlags net_permission_flags = fuzzed_data_provider.ConsumeBool() ?\n+                                                        fuzzed_data_provider.PickValueInArray<NetPermissionFlags>({NetPermissionFlags::PF_NONE, NetPermissionFlags::PF_BLOOMFILTER, NetPermissionFlags::PF_RELAY, NetPermissionFlags::PF_FORCERELAY, NetPermissionFlags::PF_NOBAN, NetPermissionFlags::PF_MEMPOOL, NetPermissionFlags::PF_ISIMPLICIT, NetPermissionFlags::PF_ALL}) :\n+                                                        static_cast<NetPermissionFlags>(fuzzed_data_provider.ConsumeIntegral<uint32_t>());\n+    (void)node.HasPermission(net_permission_flags);\n+}"
      }
    ]
  }
]