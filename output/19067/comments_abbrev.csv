jb55,2020-05-25 16:40:11,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-633647172,633647172,
practicalswift,2020-06-28 19:21:15,Anything left to do here? :)  The changes are limited to `src/test/fuzz/` and should hopefully be trivial to review.,https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-650809891,650809891,
Crypt-iQ,2020-07-14 02:13:46,"Fails to build with the same error as #19065 , rebasing it onto master reveals that `PushBlockHash` & `PushInventory` no longer exist since 344e831de54f7b864f03a90f6cb19692eafcd463.",https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-657924864,657924864,
practicalswift,2020-07-14 07:58:52,@Crypt-iQ Thanks for reporting. Should be fixed now. Would you mind retrying? :),https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-658032591,658032591,
Crypt-iQ,2020-07-17 22:26:30,@practicalswift Fuzzing with clang-10 libfuzzer. afl-gcc/g++ can also build on a22b42e.,https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-660363101,660363101,
Crypt-iQ,2020-08-16 18:45:40,Tested ACK a22b42e,https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-674562510,674562510,
practicalswift,2020-08-26 19:35:32,Ready for merge?,https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-681082086,681082086,
MarcoFalke,2020-08-27 14:35:47,needs rebase,https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-681989205,681989205,
practicalswift,2020-08-27 17:52:37,@jb55 @Crypt-iQ @MarcoFalke Thanks a lot for reviewing. Now rebased. Please re-review :),https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-682099709,682099709,
practicalswift,2020-05-25 15:18:43,Note to self: `TestingSetup` introduces non-determinism and is way too heavy to use just to disable logging. Consider switching to something more lightweight which does exactly what we want and nothing more :),https://github.com/bitcoin/bitcoin/pull/19067#discussion_r429986672,429986672,src/test/fuzz/net.cpp
MarcoFalke,2020-05-26 12:05:32,"```suggestion\n    const NetPermissionFlags net_permission_flags = fuzzed_data_provider.ConsumeBool() ?\n    fuzzed_data_provider.PickValueInArray<NetPermissionFlags>({\n```\n\nCouldn't this start a new line after the `?` Seems overly wasteful to fill the screen with 8 * 90 pure whitespace",https://github.com/bitcoin/bitcoin/pull/19067#discussion_r430361390,430361390,src/test/fuzz/net.cpp
practicalswift,2020-05-26 12:57:35,"Sure! Now fixed: `clang-format`:ed version replaced with another `clang-format`:ed version after manual re-arrangement.\n\nWhen it comes to formatting I really don't have any personal preferences: I'm happy as long as `clang-format` is happy :)",https://github.com/bitcoin/bitcoin/pull/19067#discussion_r430391233,430391233,src/test/fuzz/net.cpp
MarcoFalke,2020-07-14 07:29:00,"```\ntest/fuzz/net.cpp:115:18: error: no member named 'PushInventory' in 'CNode'\n\n            node.PushInventory(*inv_opt);\n\n            ~~~~ ^\n\ntest/fuzz/net.cpp:119:18: error: no member named 'PushBlockHash' in 'CNode'\n\n            node.PushBlockHash(ConsumeUInt256(fuzzed_data_provider));\n\n            ~~~~ ^\n\n2 errors generated.",https://github.com/bitcoin/bitcoin/pull/19067#discussion_r454158682,454158682,src/test/fuzz/net.cpp
practicalswift,2020-07-14 07:58:30,"Oh, thanks for letting me know! Now fixed!",https://github.com/bitcoin/bitcoin/pull/19067#discussion_r454174673,454174673,src/test/fuzz/net.cpp
Crypt-iQ,2020-07-19 12:50:09,"If the fuzzer didn't always pass in `INVALID_SOCKET`, every line would be covered by the fuzzer in `CNode::CloseSocketDisconnect()`.\n\nMaybe instead of doing this `CNode node {...}`, you could make a function `ConsumeCNode` that can also be used in the `process_message.cpp` & `process_messages.cpp` fuzzing harnesses. I think this would improve coverage of those fuzzing harnesses too :).",https://github.com/bitcoin/bitcoin/pull/19067#discussion_r456905063,456905063,src/test/fuzz/net.cpp
Crypt-iQ,2020-07-19 12:50:41,"Since this always has length of 32, not every line is covered by the fuzzer in `MaybeSetAddrName`.",https://github.com/bitcoin/bitcoin/pull/19067#discussion_r456905125,456905125,src/test/fuzz/net.cpp
practicalswift,2020-08-14 17:50:26,I think that lack of coverage in `CNode::CloseSocketDisconnect` is okay: `INVALID_SOCKET` basically guarantees that all `CNode` operations are safe (that's how it is done in the unit tests). We can look at expanding the coverage safely in a future PR :),https://github.com/bitcoin/bitcoin/pull/19067#discussion_r470768940,470768940,src/test/fuzz/net.cpp
practicalswift,2020-08-14 17:51:51,`ConsumeRandomLengthString(32)` will return a string _up to_ 32 characters long :),https://github.com/bitcoin/bitcoin/pull/19067#discussion_r470769673,470769673,src/test/fuzz/net.cpp
Crypt-iQ,2020-08-15 19:10:06,Ok that makes sense to me about `INVALID_SOCKET`. What about `void AdvertiseLocal(CNode *pnode)`?,https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471024908,471024908,src/test/fuzz/net.cpp
Crypt-iQ,2020-08-15 19:14:55,Nvm. üëç ,https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471025336,471025336,src/test/fuzz/net.cpp
practicalswift,2020-08-16 16:01:15,"@Crypt-iQ Both `IsPeerAddrLocalGood` and `AdvertiseLocal` depend on global state (`fDiscover` and `fListen`), and in the case of `AdvertiseLocal` a `FastRandomContext` is deciding which execution path to take. I think they're sufficiently different to do them in another PR taking those things into account to achieve maximum possible determinism. Makes sense? :)",https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471129211,471129211,src/test/fuzz/net.cpp
Crypt-iQ,2020-08-16 18:45:05,Yes that makes sense üëç ,https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471145115,471145115,src/test/fuzz/net.cpp
MarcoFalke,2020-08-27 14:37:20,"```suggestion\n    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed",https://github.com/bitcoin/bitcoin/pull/19067#discussion_r478468696,478468696,src/test/fuzz/net.cpp
practicalswift,2020-08-27 17:51:52,Good point. Fixed!,https://github.com/bitcoin/bitcoin/pull/19067#discussion_r478594562,478594562,src/test/fuzz/net.cpp
