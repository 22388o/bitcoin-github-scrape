[
  {
    "sha": "f642fd9dd6924472aba42ca324be9515690c59ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjQyZmQ5ZGQ2OTI0NDcyYWJhNDJjYTMyNGJlOTUxNTY5MGM1OWFk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-02-20T13:09:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-02-28T12:04:50Z"
      },
      "message": "qt: Modernize 'confirmed' terminology in shown tx status\n\nThese days we regard transactions with one confirmation to be\n'Confirmed'.\nWaiting for 6 confirmations is a recommendation but should not\nkeep the transaction shown as unconfirmed.\n\nMisc code sanity:\n\n- Merge maturity/status enums, they had become completely disjunct\n- 'confirmed' flag is now called 'countsForBalance' for clarity",
      "tree": {
        "sha": "2529ee64b7fda16f18aadfb00ce844a26346b4b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2529ee64b7fda16f18aadfb00ce844a26346b4b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f642fd9dd6924472aba42ca324be9515690c59ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f642fd9dd6924472aba42ca324be9515690c59ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f642fd9dd6924472aba42ca324be9515690c59ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f642fd9dd6924472aba42ca324be9515690c59ad/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ac375d1c20fd319feb13f0735169e2f47d4454f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ac375d1c20fd319feb13f0735169e2f47d4454f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ac375d1c20fd319feb13f0735169e2f47d4454f"
      }
    ],
    "stats": {
      "total": 239,
      "additions": 111,
      "deletions": 128
    },
    "files": [
      {
        "sha": "703a2b4e79542d0a0f8c44519e02d251b62bc1ba",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 28,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f642fd9dd6924472aba42ca324be9515690c59ad/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f642fd9dd6924472aba42ca324be9515690c59ad/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=f642fd9dd6924472aba42ca324be9515690c59ad",
        "patch": "@@ -164,7 +164,7 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n         (wtx.IsCoinBase() ? 1 : 0),\n         wtx.nTimeReceived,\n         idx);\n-    status.confirmed = wtx.IsTrusted();\n+    status.countsForBalance = wtx.IsTrusted() && !(wtx.GetBlocksToMaturity() > 0);\n     status.depth = wtx.GetDepthInMainChain();\n     status.cur_num_blocks = chainActive.Height();\n \n@@ -181,52 +181,55 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n             status.open_for = wtx.nLockTime;\n         }\n     }\n-    else\n-    {\n-        if (status.depth < 0)\n-        {\n-            status.status = TransactionStatus::Conflicted;\n-        }\n-        else if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n-        {\n-            status.status = TransactionStatus::Offline;\n-        }\n-        else if (status.depth < NumConfirmations)\n-        {\n-            status.status = TransactionStatus::Unconfirmed;\n-        }\n-        else\n-        {\n-            status.status = TransactionStatus::HaveConfirmations;\n-        }\n-    }\n-\n     // For generated transactions, determine maturity\n-    if(type == TransactionRecord::Generated)\n+    else if(type == TransactionRecord::Generated)\n     {\n-        int64_t nCredit = wtx.GetCredit(true);\n-        if (nCredit == 0)\n+        if (wtx.GetBlocksToMaturity() > 0)\n         {\n-            status.maturity = TransactionStatus::Immature;\n+            status.status = TransactionStatus::Immature;\n \n             if (wtx.IsInMainChain())\n             {\n                 status.matures_in = wtx.GetBlocksToMaturity();\n \n                 // Check if the block was requested by anyone\n                 if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n-                    status.maturity = TransactionStatus::MaturesWarning;\n+                    status.status = TransactionStatus::MaturesWarning;\n             }\n             else\n             {\n-                status.maturity = TransactionStatus::NotAccepted;\n+                status.status = TransactionStatus::NotAccepted;\n             }\n         }\n         else\n         {\n-            status.maturity = TransactionStatus::Mature;\n+            status.status = TransactionStatus::Confirmed;\n+        }\n+    }\n+    else\n+    {\n+        if (status.depth < 0)\n+        {\n+            status.status = TransactionStatus::Conflicted;\n+        }\n+        else if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n+        {\n+            status.status = TransactionStatus::Offline;\n+        }\n+        else if (status.depth == 0)\n+        {\n+            status.status = TransactionStatus::Unconfirmed;\n+        }\n+        else if (status.depth < RecommendedNumConfirmations)\n+        {\n+            status.status = TransactionStatus::Confirming;\n+        }\n+        else\n+        {\n+            status.status = TransactionStatus::Confirmed;\n         }\n     }\n+\n }\n \n bool TransactionRecord::statusUpdateNeeded()"
      },
      {
        "sha": "af6fd403b3f59943a57e19935edef3a62d9bf944",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 18,
        "deletions": 19,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f642fd9dd6924472aba42ca324be9515690c59ad/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f642fd9dd6924472aba42ca324be9515690c59ad/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=f642fd9dd6924472aba42ca324be9515690c59ad",
        "patch": "@@ -19,33 +19,32 @@ class TransactionStatus\n {\n public:\n     TransactionStatus():\n-        confirmed(false), sortKey(\"\"), maturity(Mature),\n+        countsForBalance(false), sortKey(\"\"),\n         matures_in(0), status(Offline), depth(0), open_for(0), cur_num_blocks(-1)\n     { }\n \n-    enum Maturity\n-    {\n-        Immature,\n-        Mature,\n-        MaturesWarning, /**< Transaction will likely not mature because no nodes have confirmed */\n-        NotAccepted\n-    };\n-\n     enum Status {\n-        OpenUntilDate,\n-        OpenUntilBlock,\n-        Offline,\n-        Unconfirmed,\n-        HaveConfirmations,\n-        Conflicted\n+        Confirmed,          /**< Have 6 or more confirmations (normal tx) or fully mature (mined tx) **/\n+        /// Normal (sent/received) transactions\n+        OpenUntilDate,      /**< Transaction not yet final, waiting for date */\n+        OpenUntilBlock,     /**< Transaction not yet final, waiting for block */\n+        Offline,            /**< Not sent to any other nodes **/\n+        Unconfirmed,        /**< Not yet mined into a block **/\n+        Confirming,         /**< Confirmed, but waiting for the recommended number of confirmations **/\n+        Conflicted,         /**< Conflicts with other transaction or mempool **/\n+        /// Generated (mined) transactions\n+        Immature,           /**< Mined but waiting for maturity */\n+        MaturesWarning,     /**< Transaction will likely not mature because no nodes have confirmed */\n+        NotAccepted         /**< Mined but not accepted */\n     };\n \n-    bool confirmed;\n+    /// Transaction counts towards available balance\n+    bool countsForBalance;\n+    /// Sorting key based on status\n     std::string sortKey;\n \n     /** @name Generated (mined) transactions\n        @{*/\n-    Maturity maturity;\n     int matures_in;\n     /**@}*/\n \n@@ -79,8 +78,8 @@ class TransactionRecord\n         SendToSelf\n     };\n \n-    /** Number of confirmation needed for transaction */\n-    static const int NumConfirmations = 6;\n+    /** Number of confirmation recommended for accepting a transaction */\n+    static const int RecommendedNumConfirmations = 6;\n \n     TransactionRecord():\n             hash(), time(0), type(Other), address(\"\"), debit(0), credit(0), idx(0)"
      },
      {
        "sha": "959987461f9bccfbc8bd6cc41b71f3b3055d28ee",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 81,
        "changes": 143,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f642fd9dd6924472aba42ca324be9515690c59ad/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f642fd9dd6924472aba42ca324be9515690c59ad/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=f642fd9dd6924472aba42ca324be9515690c59ad",
        "patch": "@@ -285,45 +285,38 @@ QString TransactionTableModel::formatTxStatus(const TransactionRecord *wtx) cons\n {\n     QString status;\n \n-    if(wtx->type == TransactionRecord::Generated)\n+    switch(wtx->status.status)\n     {\n-        switch(wtx->status.maturity)\n-        {\n-        case TransactionStatus::Immature:\n-            status = tr(\"Immature (%1 confirmations, will be available after %2)\").arg(wtx->status.depth).arg(wtx->status.depth + wtx->status.matures_in);\n-            break;\n-        case TransactionStatus::Mature:\n-            status = tr(\"Confirmed (%1 confirmations)\").arg(wtx->status.depth);\n-            break;\n-        case TransactionStatus::MaturesWarning:\n-            status = tr(\"This block was not received by any other nodes and will probably not be accepted!\");\n-            break;\n-        case TransactionStatus::NotAccepted:\n-            status = tr(\"Generated but not accepted\");\n-            break;\n-        }\n-    } else {\n-        switch(wtx->status.status)\n-        {\n-        case TransactionStatus::OpenUntilBlock:\n-            status = tr(\"Open for %n more block(s)\",\"\",wtx->status.open_for);\n-            break;\n-        case TransactionStatus::OpenUntilDate:\n-            status = tr(\"Open until %1\").arg(GUIUtil::dateTimeStr(wtx->status.open_for));\n-            break;\n-        case TransactionStatus::Offline:\n-            status = tr(\"Offline\");\n-            break;\n-        case TransactionStatus::Unconfirmed:\n-            status = tr(\"Unconfirmed (%1 of %2 confirmations)\").arg(wtx->status.depth).arg(TransactionRecord::NumConfirmations);\n-            break;\n-        case TransactionStatus::HaveConfirmations:\n-            status = tr(\"Confirmed (%1 confirmations)\").arg(wtx->status.depth);\n-            break;\n-        case TransactionStatus::Conflicted:\n-            status = tr(\"Conflicted\");\n-            break;\n-        }\n+    case TransactionStatus::OpenUntilBlock:\n+        status = tr(\"Open for %n more block(s)\",\"\",wtx->status.open_for);\n+        break;\n+    case TransactionStatus::OpenUntilDate:\n+        status = tr(\"Open until %1\").arg(GUIUtil::dateTimeStr(wtx->status.open_for));\n+        break;\n+    case TransactionStatus::Offline:\n+        status = tr(\"Offline\");\n+        break;\n+    case TransactionStatus::Unconfirmed:\n+        status = tr(\"Unconfirmed\");\n+        break;\n+    case TransactionStatus::Confirming:\n+        status = tr(\"Confirming (%1 of %2 recommended confirmations)\").arg(wtx->status.depth).arg(TransactionRecord::RecommendedNumConfirmations);\n+        break;\n+    case TransactionStatus::Confirmed:\n+        status = tr(\"Confirmed (%1 confirmations)\").arg(wtx->status.depth);\n+        break;\n+    case TransactionStatus::Conflicted:\n+        status = tr(\"Conflicted\");\n+        break;\n+    case TransactionStatus::Immature:\n+        status = tr(\"Immature (%1 confirmations, will be available after %2)\").arg(wtx->status.depth).arg(wtx->status.depth + wtx->status.matures_in);\n+        break;\n+    case TransactionStatus::MaturesWarning:\n+        status = tr(\"This block was not received by any other nodes and will probably not be accepted!\");\n+        break;\n+    case TransactionStatus::NotAccepted:\n+        status = tr(\"Generated but not accepted\");\n+        break;\n     }\n \n     return status;\n@@ -441,7 +434,7 @@ QString TransactionTableModel::formatTxAmount(const TransactionRecord *wtx, bool\n     QString str = BitcoinUnits::format(walletModel->getOptionsModel()->getDisplayUnit(), wtx->credit + wtx->debit);\n     if(showUnconfirmed)\n     {\n-        if(!wtx->status.confirmed || wtx->status.maturity != TransactionStatus::Mature)\n+        if(!wtx->status.countsForBalance)\n         {\n             str = QString(\"[\") + str + QString(\"]\");\n         }\n@@ -451,46 +444,36 @@ QString TransactionTableModel::formatTxAmount(const TransactionRecord *wtx, bool\n \n QVariant TransactionTableModel::txStatusDecoration(const TransactionRecord *wtx) const\n {\n-    if(wtx->type == TransactionRecord::Generated)\n-    {\n-        switch(wtx->status.maturity)\n-        {\n-        case TransactionStatus::Immature: {\n-            int total = wtx->status.depth + wtx->status.matures_in;\n-            int part = (wtx->status.depth * 4 / total) + 1;\n-            return QIcon(QString(\":/icons/transaction_%1\").arg(part));\n-            }\n-        case TransactionStatus::Mature:\n-            return QIcon(\":/icons/transaction_confirmed\");\n-        case TransactionStatus::MaturesWarning:\n-        case TransactionStatus::NotAccepted:\n-            return QIcon(\":/icons/transaction_0\");\n-        }\n-    }\n-    else\n+    switch(wtx->status.status)\n     {\n-        switch(wtx->status.status)\n+    case TransactionStatus::OpenUntilBlock:\n+    case TransactionStatus::OpenUntilDate:\n+        return QColor(64,64,255);\n+    case TransactionStatus::Offline:\n+        return QColor(192,192,192);\n+    case TransactionStatus::Unconfirmed:\n+        return QIcon(\":/icons/transaction_0\");\n+    case TransactionStatus::Confirming:\n+        switch(wtx->status.depth)\n         {\n-        case TransactionStatus::OpenUntilBlock:\n-        case TransactionStatus::OpenUntilDate:\n-            return QColor(64,64,255);\n-        case TransactionStatus::Offline:\n-            return QColor(192,192,192);\n-        case TransactionStatus::Unconfirmed:\n-            switch(wtx->status.depth)\n-            {\n-            case 0: return QIcon(\":/icons/transaction_0\");\n-            case 1: return QIcon(\":/icons/transaction_1\");\n-            case 2: return QIcon(\":/icons/transaction_2\");\n-            case 3: return QIcon(\":/icons/transaction_3\");\n-            case 4: return QIcon(\":/icons/transaction_4\");\n-            default: return QIcon(\":/icons/transaction_5\");\n-            };\n-        case TransactionStatus::HaveConfirmations:\n-            return QIcon(\":/icons/transaction_confirmed\");\n-        case TransactionStatus::Conflicted:\n-            return QIcon(\":/icons/transaction_conflicted\");\n+        case 1: return QIcon(\":/icons/transaction_1\");\n+        case 2: return QIcon(\":/icons/transaction_2\");\n+        case 3: return QIcon(\":/icons/transaction_3\");\n+        case 4: return QIcon(\":/icons/transaction_4\");\n+        default: return QIcon(\":/icons/transaction_5\");\n+        };\n+    case TransactionStatus::Confirmed:\n+        return QIcon(\":/icons/transaction_confirmed\");\n+    case TransactionStatus::Conflicted:\n+        return QIcon(\":/icons/transaction_conflicted\");\n+    case TransactionStatus::Immature: {\n+        int total = wtx->status.depth + wtx->status.matures_in;\n+        int part = (wtx->status.depth * 4 / total) + 1;\n+        return QIcon(QString(\":/icons/transaction_%1\").arg(part));\n         }\n+    case TransactionStatus::MaturesWarning:\n+    case TransactionStatus::NotAccepted:\n+        return QIcon(\":/icons/transaction_0\");\n     }\n     return QColor(0,0,0);\n }\n@@ -557,8 +540,8 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n     case Qt::TextAlignmentRole:\n         return column_alignments[index.column()];\n     case Qt::ForegroundRole:\n-        // Non-confirmed transactions are grey\n-        if(!rec->status.confirmed)\n+        // Non-confirmed (but not immature) as transactions are grey\n+        if(!rec->status.countsForBalance && rec->status.status != TransactionStatus::Immature)\n         {\n             return COLOR_UNCONFIRMED;\n         }\n@@ -586,9 +569,7 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n     case TxIDRole:\n         return rec->getTxID();\n     case ConfirmedRole:\n-        // Return True if transaction counts for balance\n-        return rec->status.confirmed && !(rec->type == TransactionRecord::Generated &&\n-                                          rec->status.maturity != TransactionStatus::Mature);\n+        return rec->status.countsForBalance;\n     case FormattedAmountRole:\n         return formatTxAmount(rec, false);\n     case StatusRole:"
      }
    ]
  }
]