[
  {
    "sha": "246b4966c15eaa218ffc0f4c9428ba54a892bf29",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDZiNDk2NmMxNWVhYTIxOGZmYzBmNGM5NDI4YmE1NGE4OTJiZjI5",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-06-30T19:39:49Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-01T11:09:39Z"
      },
      "message": "Chainparams: Replace CBaseChainParams::Network enum with string constants (suggested by Wladimir)",
      "tree": {
        "sha": "33264b3bd4542e546f6a98380bd57980279ef616",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33264b3bd4542e546f6a98380bd57980279ef616"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/246b4966c15eaa218ffc0f4c9428ba54a892bf29",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/246b4966c15eaa218ffc0f4c9428ba54a892bf29",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/246b4966c15eaa218ffc0f4c9428ba54a892bf29",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/246b4966c15eaa218ffc0f4c9428ba54a892bf29/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24f24896d602bef3323c5ff66bbccc92448e89d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24f24896d602bef3323c5ff66bbccc92448e89d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24f24896d602bef3323c5ff66bbccc92448e89d5"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 42,
      "deletions": 40
    },
    "files": [
      {
        "sha": "2f7591b4934c22c81755e06cfbce91f25505feb9",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/246b4966c15eaa218ffc0f4c9428ba54a892bf29/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/246b4966c15eaa218ffc0f4c9428ba54a892bf29/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=246b4966c15eaa218ffc0f4c9428ba54a892bf29",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"chainparams.h\"\n \n+#include \"tinyformat.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -243,28 +244,26 @@ const CChainParams &Params() {\n     return *pCurrentParams;\n }\n \n-CChainParams &Params(CBaseChainParams::Network network) {\n-    switch (network) {\n-        case CBaseChainParams::MAIN:\n+CChainParams& Params(const std::string& chain)\n+{\n+    if (chain == CBaseChainParams::MAIN)\n             return mainParams;\n-        case CBaseChainParams::TESTNET:\n+    else if (chain == CBaseChainParams::TESTNET)\n             return testNetParams;\n-        case CBaseChainParams::REGTEST:\n+    else if (chain == CBaseChainParams::REGTEST)\n             return regTestParams;\n-        default:\n-            assert(false && \"Unimplemented network\");\n-            return mainParams;\n-    }\n+    throw std::runtime_error(strprintf(_(\"%s: Unknown chain %s.\"), __func__, chain));\n }\n \n-void SelectParams(CBaseChainParams::Network network) {\n+void SelectParams(const std::string& network)\n+{\n     SelectBaseParams(network);\n     pCurrentParams = &Params(network);\n }\n \n bool SelectParamsFromCommandLine()\n {\n-    CBaseChainParams::Network network = NetworkIdFromCommandLine();\n+    std::string network = ChainNameFromCommandLine();\n     if (network == CBaseChainParams::MAX_NETWORK_TYPES)\n         return false;\n "
      },
      {
        "sha": "e8ce9e21132add3bb748589a20a4ae9646b300a8",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/246b4966c15eaa218ffc0f4c9428ba54a892bf29/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/246b4966c15eaa218ffc0f4c9428ba54a892bf29/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=246b4966c15eaa218ffc0f4c9428ba54a892bf29",
        "patch": "@@ -101,11 +101,16 @@ class CChainParams\n  */\n const CChainParams &Params();\n \n-/** Return parameters for the given network. */\n-CChainParams &Params(CBaseChainParams::Network network);\n+/**\n+ * @returns CChainParams for the given BIP70 chain name.\n+ */\n+CChainParams& Params(const std::string& chain);\n \n-/** Sets the params returned by Params() to those for the given network. */\n-void SelectParams(CBaseChainParams::Network network);\n+/**\n+ * Sets the params returned by Params() to those for the given BIP70 chain name.\n+ * @throws std::runtime_error when the chain is not supported.\n+ */\n+void SelectParams(const std::string& chain);\n \n /**\n  * Looks for -regtest or -testnet and then calls SelectParams as appropriate."
      },
      {
        "sha": "241754f23c3af97985ad34a6ef67ec81d155ce5b",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/246b4966c15eaa218ffc0f4c9428ba54a892bf29/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/246b4966c15eaa218ffc0f4c9428ba54a892bf29/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=246b4966c15eaa218ffc0f4c9428ba54a892bf29",
        "patch": "@@ -5,10 +5,16 @@\n \n #include \"chainparamsbase.h\"\n \n+#include \"tinyformat.h\"\n #include \"util.h\"\n \n #include <assert.h>\n \n+const std::string CBaseChainParams::MAIN = \"main\";\n+const std::string CBaseChainParams::TESTNET = \"test\";\n+const std::string CBaseChainParams::REGTEST = \"regtest\";\n+const std::string CBaseChainParams::MAX_NETWORK_TYPES = \"unknown_chain\";\n+\n /**\n  * Main network\n  */\n@@ -70,25 +76,19 @@ const CBaseChainParams& BaseParams()\n     return *pCurrentBaseParams;\n }\n \n-void SelectBaseParams(CBaseChainParams::Network network)\n+void SelectBaseParams(const std::string& chain)\n {\n-    switch (network) {\n-    case CBaseChainParams::MAIN:\n+    if (chain == CBaseChainParams::MAIN)\n         pCurrentBaseParams = &mainParams;\n-        break;\n-    case CBaseChainParams::TESTNET:\n+    else if (chain == CBaseChainParams::TESTNET)\n         pCurrentBaseParams = &testNetParams;\n-        break;\n-    case CBaseChainParams::REGTEST:\n+    else if (chain == CBaseChainParams::REGTEST)\n         pCurrentBaseParams = &regTestParams;\n-        break;\n-    default:\n-        assert(false && \"Unimplemented network\");\n-        return;\n-    }\n+    else\n+        throw std::runtime_error(strprintf(_(\"%s: Unknown chain %s.\"), __func__, chain));\n }\n \n-CBaseChainParams::Network NetworkIdFromCommandLine()\n+std::string ChainNameFromCommandLine()\n {\n     bool fRegTest = GetBoolArg(\"-regtest\", false);\n     bool fTestNet = GetBoolArg(\"-testnet\", false);\n@@ -104,7 +104,7 @@ CBaseChainParams::Network NetworkIdFromCommandLine()\n \n bool SelectBaseParamsFromCommandLine()\n {\n-    CBaseChainParams::Network network = NetworkIdFromCommandLine();\n+    std::string network = ChainNameFromCommandLine();\n     if (network == CBaseChainParams::MAX_NETWORK_TYPES)\n         return false;\n "
      },
      {
        "sha": "25a5b3450bdc83a6054bc96b869c1859b3bf2059",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/246b4966c15eaa218ffc0f4c9428ba54a892bf29/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/246b4966c15eaa218ffc0f4c9428ba54a892bf29/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=246b4966c15eaa218ffc0f4c9428ba54a892bf29",
        "patch": "@@ -15,13 +15,11 @@\n class CBaseChainParams\n {\n public:\n-    enum Network {\n-        MAIN,\n-        TESTNET,\n-        REGTEST,\n-\n-        MAX_NETWORK_TYPES\n-    };\n+    /** BIP70 chain name strings (main, test or regtest) */\n+    static const std::string MAIN;\n+    static const std::string TESTNET;\n+    static const std::string REGTEST;\n+    static const std::string MAX_NETWORK_TYPES;\n \n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }\n@@ -40,13 +38,13 @@ class CBaseChainParams\n const CBaseChainParams& BaseParams();\n \n /** Sets the params returned by Params() to those for the given network. */\n-void SelectBaseParams(CBaseChainParams::Network network);\n+void SelectBaseParams(const std::string& chain);\n \n /**\n- * Looks for -regtest or -testnet and returns the appropriate Network ID.\n- * Returns MAX_NETWORK_TYPES if an invalid combination is given.\n+ * Looks for -regtest, -testnet and returns the appropriate BIP70 chain name.\n+ * @return CBaseChainParams::MAX_NETWORK_TYPES if an invalid combination is given. CBaseChainParams::MAIN by default.\n  */\n-CBaseChainParams::Network NetworkIdFromCommandLine();\n+std::string ChainNameFromCommandLine();\n \n /**\n  * Calls NetworkIdFromCommandLine() and then calls SelectParams as appropriate."
      }
    ]
  },
  {
    "sha": "a74eb425d278e246dbfb508f60b06d4934fdce20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzRlYjQyNWQyNzhlMjQ2ZGJmYjUwOGY2MGIwNmQ0OTM0ZmRjZTIw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-06-22T16:49:36Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-01T11:45:38Z"
      },
      "message": "Introduce Container template",
      "tree": {
        "sha": "d056a2eaf6cd755081cecea1d1062d280197e60f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d056a2eaf6cd755081cecea1d1062d280197e60f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a74eb425d278e246dbfb508f60b06d4934fdce20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a74eb425d278e246dbfb508f60b06d4934fdce20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a74eb425d278e246dbfb508f60b06d4934fdce20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a74eb425d278e246dbfb508f60b06d4934fdce20/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "246b4966c15eaa218ffc0f4c9428ba54a892bf29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/246b4966c15eaa218ffc0f4c9428ba54a892bf29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/246b4966c15eaa218ffc0f4c9428ba54a892bf29"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3551179c351cb01370b9a8948197b49727042fb9",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a74eb425d278e246dbfb508f60b06d4934fdce20/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a74eb425d278e246dbfb508f60b06d4934fdce20/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a74eb425d278e246dbfb508f60b06d4934fdce20",
        "patch": "@@ -135,6 +135,7 @@ BITCOIN_CORE_H = \\\n   support/pagelocker.h \\\n   sync.h \\\n   threadsafety.h \\\n+  templates.hpp \\\n   timedata.h \\\n   tinyformat.h \\\n   txdb.h \\"
      },
      {
        "sha": "97b97b688c0a86006ef99e4441e2b2c544b3a70c",
        "filename": "src/templates.hpp",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a74eb425d278e246dbfb508f60b06d4934fdce20/src/templates.hpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a74eb425d278e246dbfb508f60b06d4934fdce20/src/templates.hpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/templates.hpp?ref=a74eb425d278e246dbfb508f60b06d4934fdce20",
        "patch": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEMPLATES_H\n+#define BITCOIN_TEMPLATES_H\n+\n+#include <assert.h>\n+#include <cstddef>\n+\n+template<typename T>\n+class Container\n+{\n+    T* pObj;\n+public:\n+    Container() : pObj(NULL) {}\n+    Container(T* pObjIn) : pObj(pObjIn) {}\n+    ~Container()\n+    {\n+        if (!IsNull())\n+            delete(pObj);\n+    }\n+\n+    bool IsNull() const\n+    {\n+        return pObj == NULL;\n+    }\n+    const T& Get() const\n+    {\n+        assert(!IsNull());\n+        return *pObj;\n+    }\n+    void Set(T* pObjIn)\n+    {\n+        if (!IsNull())\n+            delete(pObj);\n+        pObj = pObjIn;\n+    }\n+};\n+\n+#endif // BITCOIN_TEMPLATES_H"
      }
    ]
  },
  {
    "sha": "d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWIwMmM1MmUyYjk5YmQyZDY0ZDkyNTY2ZTlhNmJiNWU3YTkwMDU5",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-05-22T01:50:01Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-01T11:45:38Z"
      },
      "message": "Chainparams: Use a regular factory for creating chainparams",
      "tree": {
        "sha": "9eb8dac6277108c75235f94486bd1a4f1d2aad32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9eb8dac6277108c75235f94486bd1a4f1d2aad32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a74eb425d278e246dbfb508f60b06d4934fdce20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a74eb425d278e246dbfb508f60b06d4934fdce20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a74eb425d278e246dbfb508f60b06d4934fdce20"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 50,
      "deletions": 30
    },
    "files": [
      {
        "sha": "51b776730bb56e8da456a097f0ba45a5cf663cb2",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 11,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059",
        "patch": "@@ -129,7 +129,6 @@ class CMainParams : public CChainParams {\n         };\n     }\n };\n-static CMainParams mainParams;\n \n /**\n  * Testnet (v3)\n@@ -189,7 +188,6 @@ class CTestNetParams : public CMainParams {\n \n     }\n };\n-static CTestNetParams testNetParams;\n \n /**\n  * Regression test\n@@ -235,30 +233,35 @@ class CRegTestParams : public CTestNetParams {\n         };\n     }\n };\n-static CRegTestParams regTestParams;\n \n-static CChainParams *pCurrentParams = 0;\n+Container<CChainParams> cGlobalChainParams;\n+static Container<CChainParams> cGlobalSwitchingChainParams;\n \n const CChainParams &Params() {\n-    assert(pCurrentParams);\n-    return *pCurrentParams;\n+    return cGlobalChainParams.Get();\n }\n \n-CChainParams& Params(const std::string& chain)\n+CChainParams* CChainParams::Factory(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n-            return mainParams;\n+        return new CMainParams();\n     else if (chain == CBaseChainParams::TESTNET)\n-            return testNetParams;\n+        return new CTestNetParams();\n     else if (chain == CBaseChainParams::REGTEST)\n-            return regTestParams;\n+        return new CRegTestParams();\n     throw std::runtime_error(strprintf(_(\"%s: Unknown chain %s.\"), __func__, chain));\n }\n \n+const CChainParams& Params(const std::string& chain)\n+{\n+    cGlobalSwitchingChainParams.Set(CChainParams::Factory(chain));\n+    return cGlobalSwitchingChainParams.Get();\n+}\n+\n void SelectParams(const std::string& network)\n {\n     SelectBaseParams(network);\n-    pCurrentParams = &Params(network);\n+    cGlobalChainParams.Set(CChainParams::Factory(network));\n }\n \n bool SelectParamsFromCommandLine()"
      },
      {
        "sha": "d4fc06074529e635be2f6c96cbea6a71d55a7913",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059",
        "patch": "@@ -11,6 +11,7 @@\n #include \"consensus/params.h\"\n #include \"primitives/block.h\"\n #include \"protocol.h\"\n+#include \"templates.hpp\"\n \n #include <vector>\n \n@@ -71,6 +72,12 @@ class CChainParams\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n     const Checkpoints::CCheckpointData& Checkpoints() const { return checkpointData; }\n+    /**\n+     * Creates and returns a CChainParams* of the chosen chain. The caller has to delete the object.\n+     * @returns a CChainParams* of the chosen chain.\n+     * @throws a std::runtime_error if the chain is not supported.\n+     */\n+    static CChainParams* Factory(const std::string& chain);\n protected:\n     CChainParams() {}\n \n@@ -104,7 +111,7 @@ const CChainParams &Params();\n /**\n  * @returns CChainParams for the given BIP70 chain name.\n  */\n-CChainParams& Params(const std::string& chain);\n+const CChainParams& Params(const std::string& chain);\n \n /**\n  * Sets the params returned by Params() to those for the given BIP70 chain name.\n@@ -118,4 +125,6 @@ void SelectParams(const std::string& chain);\n  */\n bool SelectParamsFromCommandLine();\n \n+extern Container<CChainParams> cGlobalChainParams;\n+\n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "1c6b781b9b5e38478a4c001b3b72aa821d3de77a",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 15,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059",
        "patch": "@@ -8,8 +8,6 @@\n #include \"tinyformat.h\"\n #include \"util.h\"\n \n-#include <assert.h>\n-\n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n@@ -26,7 +24,6 @@ class CBaseMainParams : public CBaseChainParams\n         nRPCPort = 8332;\n     }\n };\n-static CBaseMainParams mainParams;\n \n /**\n  * Testnet (v3)\n@@ -40,7 +37,6 @@ class CBaseTestNetParams : public CBaseMainParams\n         strDataDir = \"testnet3\";\n     }\n };\n-static CBaseTestNetParams testNetParams;\n \n /*\n  * Regression test\n@@ -53,7 +49,6 @@ class CBaseRegTestParams : public CBaseTestNetParams\n         strDataDir = \"regtest\";\n     }\n };\n-static CBaseRegTestParams regTestParams;\n \n /*\n  * Unit test\n@@ -68,24 +63,27 @@ class CBaseUnitTestParams : public CBaseMainParams\n };\n static CBaseUnitTestParams unitTestParams;\n \n-static CBaseChainParams* pCurrentBaseParams = 0;\n+Container<CBaseChainParams> cGlobalChainBaseParams;\n \n const CBaseChainParams& BaseParams()\n {\n-    assert(pCurrentBaseParams);\n-    return *pCurrentBaseParams;\n+    return cGlobalChainBaseParams.Get();\n }\n \n-void SelectBaseParams(const std::string& chain)\n+CBaseChainParams* CBaseChainParams::Factory(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n-        pCurrentBaseParams = &mainParams;\n+        return new CBaseMainParams();\n     else if (chain == CBaseChainParams::TESTNET)\n-        pCurrentBaseParams = &testNetParams;\n+        return new CBaseTestNetParams();\n     else if (chain == CBaseChainParams::REGTEST)\n-        pCurrentBaseParams = &regTestParams;\n-    else\n-        throw std::runtime_error(strprintf(_(\"%s: Unknown chain %s.\"), __func__, chain));\n+        return new CBaseRegTestParams();\n+    throw std::runtime_error(strprintf(_(\"%s: Unknown chain %s.\"), __func__, chain));\n+}\n+\n+void SelectBaseParams(const std::string& chain)\n+{\n+    cGlobalChainBaseParams.Set(CBaseChainParams::Factory(chain));\n }\n \n std::string ChainNameFromCommandLine()\n@@ -114,5 +112,5 @@ bool SelectBaseParamsFromCommandLine()\n \n bool AreBaseParamsConfigured()\n {\n-    return pCurrentBaseParams != NULL;\n+    return !cGlobalChainBaseParams.IsNull();\n }"
      },
      {
        "sha": "5c93bca2af31a40bc304990995eb9150db82b615",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_CHAINPARAMSBASE_H\n #define BITCOIN_CHAINPARAMSBASE_H\n \n+#include \"templates.hpp\"\n+\n #include <string>\n #include <vector>\n \n@@ -23,7 +25,12 @@ class CBaseChainParams\n \n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }\n-\n+    /**\n+     * Creates and returns a CBaseChainParams* of the chosen chain. The caller has to delete the object.\n+     * @returns A CBaseChainParams* of the chosen chain.\n+     * @throws a std::runtime_error if the chain is not supported.\n+     */\n+    static CBaseChainParams* Factory(const std::string& chain);\n protected:\n     CBaseChainParams() {}\n \n@@ -58,4 +65,6 @@ bool SelectBaseParamsFromCommandLine();\n  */\n bool AreBaseParamsConfigured();\n \n+extern Container<CBaseChainParams> cGlobalChainBaseParams;\n+\n #endif // BITCOIN_CHAINPARAMSBASE_H"
      },
      {
        "sha": "648608f94bfa7e8dfdb4a2727b9e266c065e2c5c",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059",
        "patch": "@@ -15,6 +15,7 @@\n #include \"main.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n+#include \"templates.hpp\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -202,8 +203,8 @@ BOOST_AUTO_TEST_CASE(PartitionAlert)\n     // Test PartitionCheck\n     CCriticalSection csDummy;\n     CBlockIndex indexDummy[100];\n-    CChainParams& params = Params(CBaseChainParams::MAIN);\n-    int64_t nPowTargetSpacing = params.GetConsensus().nPowTargetSpacing;\n+    const Container<CChainParams> cTestChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n+    int64_t nPowTargetSpacing = cTestChainParams.Get().GetConsensus().nPowTargetSpacing;\n \n     // Generate fake blockchain timestamps relative to\n     // an arbitrary time:"
      }
    ]
  },
  {
    "sha": "19c364577813fcabffde7c38717d9f0820850a4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOWMzNjQ1Nzc4MTNmY2FiZmZkZTdjMzg3MTdkOWYwODIwODUwYTRk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-05-25T07:00:17Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-02T11:36:22Z"
      },
      "message": "Chainparams: Translations: DRY: options and error strings\n\nAlso remove SelectBaseParamsFromCommandLine and SelectParamsFromCommandLine",
      "tree": {
        "sha": "6006adb1751b23c994195624433e2d3d1b6bb6e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6006adb1751b23c994195624433e2d3d1b6bb6e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19c364577813fcabffde7c38717d9f0820850a4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19c364577813fcabffde7c38717d9f0820850a4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19c364577813fcabffde7c38717d9f0820850a4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19c364577813fcabffde7c38717d9f0820850a4d/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1b02c52e2b99bd2d64d92566e9a6bb5e7a90059"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 38,
      "deletions": 50
    },
    "files": [
      {
        "sha": "3a8a283d3229c266f758d24f1db008ef8a9da27a",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19c364577813fcabffde7c38717d9f0820850a4d/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19c364577813fcabffde7c38717d9f0820850a4d/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=19c364577813fcabffde7c38717d9f0820850a4d",
        "patch": "@@ -23,9 +23,7 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n-    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n-    strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n-                                             \"solved instantly. This is intended for regression testing tools and app development.\"));\n+    AppendParamsHelpMessages(strUsage);\n     strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), \"127.0.0.1\"));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n     strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n@@ -88,8 +86,10 @@ static bool AppInitRPC(int argc, char* argv[])\n         return false;\n     }\n     // Check for -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n-    if (!SelectBaseParamsFromCommandLine()) {\n-        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+    try {\n+        SelectBaseParams(ChainNameFromCommandLine());\n+    } catch(std::exception &e) {\n+        fprintf(stderr, \"Error: %s\\n\", e.what());\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "ac6e4814991efb869a09a7b7aa0d701b6fc954de",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19c364577813fcabffde7c38717d9f0820850a4d/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19c364577813fcabffde7c38717d9f0820850a4d/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=19c364577813fcabffde7c38717d9f0820850a4d",
        "patch": "@@ -34,8 +34,10 @@ static bool AppInitRawTx(int argc, char* argv[])\n     ParseParameters(argc, argv);\n \n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n-    if (!SelectParamsFromCommandLine()) {\n-        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+    try {\n+        SelectParams(ChainNameFromCommandLine());\n+    } catch(std::exception &e) {\n+        fprintf(stderr, \"Error: %s\\n\", e.what());\n         return false;\n     }\n \n@@ -57,8 +59,7 @@ static bool AppInitRawTx(int argc, char* argv[])\n         strUsage += HelpMessageOpt(\"-create\", _(\"Create new, empty TX.\"));\n         strUsage += HelpMessageOpt(\"-json\", _(\"Select JSON output\"));\n         strUsage += HelpMessageOpt(\"-txid\", _(\"Output only the hex-encoded transaction id of the resultant transaction.\"));\n-        strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\"));\n-        strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n+        AppendParamsHelpMessages(strUsage);\n \n         fprintf(stdout, \"%s\", strUsage.c_str());\n "
      },
      {
        "sha": "2c4916dfc7c38b9933fe795c326c8d456cb7172d",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19c364577813fcabffde7c38717d9f0820850a4d/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19c364577813fcabffde7c38717d9f0820850a4d/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=19c364577813fcabffde7c38717d9f0820850a4d",
        "patch": "@@ -102,8 +102,10 @@ bool AppInit(int argc, char* argv[])\n             return false;\n         }\n         // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n-        if (!SelectParamsFromCommandLine()) {\n-            fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        try {\n+            SelectParams(ChainNameFromCommandLine());\n+        } catch(std::exception &e) {\n+            fprintf(stderr, \"Error: %s\\n\", e.what());\n             return false;\n         }\n "
      },
      {
        "sha": "19263196fea74e0d7bcb7d66251bc4732969ae58",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19c364577813fcabffde7c38717d9f0820850a4d/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19c364577813fcabffde7c38717d9f0820850a4d/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=19c364577813fcabffde7c38717d9f0820850a4d",
        "patch": "@@ -263,13 +263,3 @@ void SelectParams(const std::string& network)\n     SelectBaseParams(network);\n     cGlobalChainParams.Set(CChainParams::Factory(network));\n }\n-\n-bool SelectParamsFromCommandLine()\n-{\n-    std::string network = ChainNameFromCommandLine();\n-    if (network == CBaseChainParams::MAX_NETWORK_TYPES)\n-        return false;\n-\n-    SelectParams(network);\n-    return true;\n-}"
      },
      {
        "sha": "8a3b65468eb9536e3e6ee0247c1a07054781fe04",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19c364577813fcabffde7c38717d9f0820850a4d/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19c364577813fcabffde7c38717d9f0820850a4d/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=19c364577813fcabffde7c38717d9f0820850a4d",
        "patch": "@@ -119,12 +119,6 @@ const CChainParams& Params(const std::string& chain);\n  */\n void SelectParams(const std::string& chain);\n \n-/**\n- * Looks for -regtest or -testnet and then calls SelectParams as appropriate.\n- * Returns false if an invalid combination is given.\n- */\n-bool SelectParamsFromCommandLine();\n-\n extern Container<CChainParams> cGlobalChainParams;\n \n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "3033aa5969015b8c36c73b9bc0aa422b1815a28e",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19c364577813fcabffde7c38717d9f0820850a4d/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19c364577813fcabffde7c38717d9f0820850a4d/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=19c364577813fcabffde7c38717d9f0820850a4d",
        "patch": "@@ -11,7 +11,17 @@\n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n-const std::string CBaseChainParams::MAX_NETWORK_TYPES = \"unknown_chain\";\n+\n+void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n+{\n+    strUsage += HelpMessageGroup(_(\"Chain selection options:\"));\n+    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n+    if (debugHelp) {\n+        strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \" \" +\n+                                   _(\"This is intended for regression testing tools and app development.\") + \" \" +\n+                                   _(\"In this mode -genproclimit controls how many blocks are generated immediately.\"));\n+    }\n+}\n \n /**\n  * Main network\n@@ -92,24 +102,14 @@ std::string ChainNameFromCommandLine()\n     bool fTestNet = GetBoolArg(\"-testnet\", false);\n \n     if (fTestNet && fRegTest)\n-        return CBaseChainParams::MAX_NETWORK_TYPES;\n+        throw std::runtime_error(_(\"Invalid combination of -regtest and -testnet.\"));\n     if (fRegTest)\n         return CBaseChainParams::REGTEST;\n     if (fTestNet)\n         return CBaseChainParams::TESTNET;\n     return CBaseChainParams::MAIN;\n }\n \n-bool SelectBaseParamsFromCommandLine()\n-{\n-    std::string network = ChainNameFromCommandLine();\n-    if (network == CBaseChainParams::MAX_NETWORK_TYPES)\n-        return false;\n-\n-    SelectBaseParams(network);\n-    return true;\n-}\n-\n bool AreBaseParamsConfigured()\n {\n     return !cGlobalChainBaseParams.IsNull();"
      },
      {
        "sha": "e3030c471fd4b494c1b12f5f8fbd683bf23eaf8d",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19c364577813fcabffde7c38717d9f0820850a4d/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19c364577813fcabffde7c38717d9f0820850a4d/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=19c364577813fcabffde7c38717d9f0820850a4d",
        "patch": "@@ -38,6 +38,12 @@ class CBaseChainParams\n     std::string strDataDir;\n };\n \n+/**\n+ * Append the help messages for the chainparams options to the\n+ * parameter string.\n+ */\n+void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp=true);\n+\n /**\n  * Return the currently selected parameters. This won't change after app\n  * startup, except for unit tests.\n@@ -53,12 +59,6 @@ void SelectBaseParams(const std::string& chain);\n  */\n std::string ChainNameFromCommandLine();\n \n-/**\n- * Calls NetworkIdFromCommandLine() and then calls SelectParams as appropriate.\n- * Returns false if an invalid combination is given.\n- */\n-bool SelectBaseParamsFromCommandLine();\n-\n /**\n  * Return true if SelectBaseParamsFromCommandLine() has been called to select\n  * a network."
      },
      {
        "sha": "f7cb38f548d2a234807b292386ad13cec780ffc2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19c364577813fcabffde7c38717d9f0820850a4d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19c364577813fcabffde7c38717d9f0820850a4d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=19c364577813fcabffde7c38717d9f0820850a4d",
        "patch": "@@ -389,11 +389,10 @@ std::string HelpMessage(HelpMessageMode mode)\n     {\n         strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction priority and fee per kB when mining blocks (default: %u)\", 0));\n         strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", 1));\n-        strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n-            \"This is intended for regression testing tools and app development.\");\n     }\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n-    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n+\n+    AppendParamsHelpMessages(strUsage, showDebug);\n \n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1));"
      },
      {
        "sha": "a715383dc432e875c77e0c8a12a431191eb21075",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19c364577813fcabffde7c38717d9f0820850a4d/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19c364577813fcabffde7c38717d9f0820850a4d/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=19c364577813fcabffde7c38717d9f0820850a4d",
        "patch": "@@ -572,8 +572,10 @@ int main(int argc, char *argv[])\n     // - Needs to be done before createOptionsModel\n \n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n-    if (!SelectParamsFromCommandLine()) {\n-        QMessageBox::critical(0, QObject::tr(\"Bitcoin Core\"), QObject::tr(\"Error: Invalid combination of -regtest and -testnet.\"));\n+    try {\n+        SelectParams(ChainNameFromCommandLine());\n+    } catch(std::exception &e) {\n+        QMessageBox::critical(0, QObject::tr(\"Bitcoin Core\"), QObject::tr(\"Error: %1.\").arg(e.what()));\n         return 1;\n     }\n #ifdef ENABLE_WALLET"
      }
    ]
  },
  {
    "sha": "7fb9f6ad7bad4b64df0fdb36e5230becd2290864",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmI5ZjZhZDdiYWQ0YjY0ZGYwZmRiMzZlNTIzMGJlY2QyMjkwODY0",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-06-30T20:44:58Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-02T11:36:22Z"
      },
      "message": "remove SelectBaseParams(), BaseParams() and AreBaseParamsConfigured()",
      "tree": {
        "sha": "ce39cc6aa4eecda32045febdcc7d8b40e618387c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce39cc6aa4eecda32045febdcc7d8b40e618387c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7fb9f6ad7bad4b64df0fdb36e5230becd2290864",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fb9f6ad7bad4b64df0fdb36e5230becd2290864",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7fb9f6ad7bad4b64df0fdb36e5230becd2290864",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fb9f6ad7bad4b64df0fdb36e5230becd2290864/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19c364577813fcabffde7c38717d9f0820850a4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19c364577813fcabffde7c38717d9f0820850a4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19c364577813fcabffde7c38717d9f0820850a4d"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 7,
      "deletions": 37
    },
    "files": [
      {
        "sha": "4a2a054fff9ec076c80c5a4f359f5b22281c4015",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fb9f6ad7bad4b64df0fdb36e5230becd2290864/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fb9f6ad7bad4b64df0fdb36e5230becd2290864/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=7fb9f6ad7bad4b64df0fdb36e5230becd2290864",
        "patch": "@@ -85,9 +85,9 @@ static bool AppInitRPC(int argc, char* argv[])\n         fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n         return false;\n     }\n-    // Check for -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n+    // Check for -testnet or -regtest parameter (cGlobalChainBaseParams.Get() calls are only valid after this clause)\n     try {\n-        SelectBaseParams(ChainNameFromCommandLine());\n+        cGlobalChainBaseParams.Set(CBaseChainParams::Factory(ChainNameFromCommandLine()));\n     } catch(std::exception &e) {\n         fprintf(stderr, \"Error: %s\\n\", e.what());\n         return false;\n@@ -112,7 +112,7 @@ UniValue CallRPC(const string& strMethod, const UniValue& params)\n     SSLIOStreamDevice<boost::asio::ip::tcp> d(sslStream, fUseSSL);\n     boost::iostreams::stream< SSLIOStreamDevice<boost::asio::ip::tcp> > stream(d);\n \n-    const bool fConnected = d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", itostr(BaseParams().RPCPort())));\n+    const bool fConnected = d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", itostr(cGlobalChainBaseParams.Get().RPCPort())));\n     if (!fConnected)\n         throw CConnectionFailed(\"couldn't connect to server\");\n "
      },
      {
        "sha": "b1b40c3893db9a08a085da4769ac3e22b143d9bf",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fb9f6ad7bad4b64df0fdb36e5230becd2290864/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fb9f6ad7bad4b64df0fdb36e5230becd2290864/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=7fb9f6ad7bad4b64df0fdb36e5230becd2290864",
        "patch": "@@ -260,6 +260,6 @@ const CChainParams& Params(const std::string& chain)\n \n void SelectParams(const std::string& network)\n {\n-    SelectBaseParams(network);\n+    cGlobalChainBaseParams.Set(CBaseChainParams::Factory(network));\n     cGlobalChainParams.Set(CChainParams::Factory(network));\n }"
      },
      {
        "sha": "a07d84a95ede6c5fbe55f74e7dead4a20fcadbe3",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fb9f6ad7bad4b64df0fdb36e5230becd2290864/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fb9f6ad7bad4b64df0fdb36e5230becd2290864/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=7fb9f6ad7bad4b64df0fdb36e5230becd2290864",
        "patch": "@@ -75,11 +75,6 @@ static CBaseUnitTestParams unitTestParams;\n \n Container<CBaseChainParams> cGlobalChainBaseParams;\n \n-const CBaseChainParams& BaseParams()\n-{\n-    return cGlobalChainBaseParams.Get();\n-}\n-\n CBaseChainParams* CBaseChainParams::Factory(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n@@ -91,11 +86,6 @@ CBaseChainParams* CBaseChainParams::Factory(const std::string& chain)\n     throw std::runtime_error(strprintf(_(\"%s: Unknown chain %s.\"), __func__, chain));\n }\n \n-void SelectBaseParams(const std::string& chain)\n-{\n-    cGlobalChainBaseParams.Set(CBaseChainParams::Factory(chain));\n-}\n-\n std::string ChainNameFromCommandLine()\n {\n     bool fRegTest = GetBoolArg(\"-regtest\", false);\n@@ -109,8 +99,3 @@ std::string ChainNameFromCommandLine()\n         return CBaseChainParams::TESTNET;\n     return CBaseChainParams::MAIN;\n }\n-\n-bool AreBaseParamsConfigured()\n-{\n-    return !cGlobalChainBaseParams.IsNull();\n-}"
      },
      {
        "sha": "c2c4fd1f3af0e66298513d229b967d6e061075d1",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fb9f6ad7bad4b64df0fdb36e5230becd2290864/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fb9f6ad7bad4b64df0fdb36e5230becd2290864/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=7fb9f6ad7bad4b64df0fdb36e5230becd2290864",
        "patch": "@@ -44,27 +44,12 @@ class CBaseChainParams\n  */\n void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp=true);\n \n-/**\n- * Return the currently selected parameters. This won't change after app\n- * startup, except for unit tests.\n- */\n-const CBaseChainParams& BaseParams();\n-\n-/** Sets the params returned by Params() to those for the given network. */\n-void SelectBaseParams(const std::string& chain);\n-\n /**\n  * Looks for -regtest, -testnet and returns the appropriate BIP70 chain name.\n  * @return CBaseChainParams::MAX_NETWORK_TYPES if an invalid combination is given. CBaseChainParams::MAIN by default.\n  */\n std::string ChainNameFromCommandLine();\n \n-/**\n- * Return true if SelectBaseParamsFromCommandLine() has been called to select\n- * a network.\n- */\n-bool AreBaseParamsConfigured();\n-\n extern Container<CBaseChainParams> cGlobalChainBaseParams;\n \n #endif // BITCOIN_CHAINPARAMSBASE_H"
      },
      {
        "sha": "4cbad9795b68e6d1953df42460096aade0efb918",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fb9f6ad7bad4b64df0fdb36e5230becd2290864/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fb9f6ad7bad4b64df0fdb36e5230becd2290864/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=7fb9f6ad7bad4b64df0fdb36e5230becd2290864",
        "patch": "@@ -648,7 +648,7 @@ void StartRPCThreads()\n \n     std::vector<ip::tcp::endpoint> vEndpoints;\n     bool bBindAny = false;\n-    int defaultPort = GetArg(\"-rpcport\", BaseParams().RPCPort());\n+    int defaultPort = GetArg(\"-rpcport\", cGlobalChainBaseParams.Get().RPCPort());\n     if (!mapArgs.count(\"-rpcallowip\")) // Default to loopback if not allowing external IPs\n     {\n         vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v6::loopback(), defaultPort));"
      },
      {
        "sha": "db8bb02578f6482036f0ce7478a10c549c31dfaa",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fb9f6ad7bad4b64df0fdb36e5230becd2290864/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fb9f6ad7bad4b64df0fdb36e5230becd2290864/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=7fb9f6ad7bad4b64df0fdb36e5230becd2290864",
        "patch": "@@ -224,7 +224,7 @@ int LogPrintStr(const std::string &str)\n         ret = fwrite(str.data(), 1, str.size(), stdout);\n         fflush(stdout);\n     }\n-    else if (fPrintToDebugLog && AreBaseParamsConfigured())\n+    else if (fPrintToDebugLog && !cGlobalChainBaseParams.IsNull())\n     {\n         static bool fStartedNewLine = true;\n         boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n@@ -448,7 +448,7 @@ const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n         path = GetDefaultDataDir();\n     }\n     if (fNetSpecific)\n-        path /= BaseParams().DataDir();\n+        path /= cGlobalChainBaseParams.Get().DataDir();\n \n     fs::create_directories(path);\n "
      }
    ]
  },
  {
    "sha": "db85b3d747ec44cb5a53aed07ee5c607b52797ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjg1YjNkNzQ3ZWM0NGNiNWE1M2FlZDA3ZWU1YzYwN2I1Mjc5N2Nh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-25T19:34:22Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-02T11:36:22Z"
      },
      "message": "MOVEONLY: Chainparams: Separate globals and functions depending on them",
      "tree": {
        "sha": "24d69688a66136f0ec55d69a87a7c78bc30e09a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24d69688a66136f0ec55d69a87a7c78bc30e09a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db85b3d747ec44cb5a53aed07ee5c607b52797ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db85b3d747ec44cb5a53aed07ee5c607b52797ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db85b3d747ec44cb5a53aed07ee5c607b52797ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db85b3d747ec44cb5a53aed07ee5c607b52797ca/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7fb9f6ad7bad4b64df0fdb36e5230becd2290864",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fb9f6ad7bad4b64df0fdb36e5230becd2290864",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fb9f6ad7bad4b64df0fdb36e5230becd2290864"
      }
    ],
    "stats": {
      "total": 140,
      "additions": 98,
      "deletions": 42
    },
    "files": [
      {
        "sha": "632068682d629bdfafb1ea02c5a3db8915b015b1",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=db85b3d747ec44cb5a53aed07ee5c607b52797ca",
        "patch": "@@ -96,6 +96,8 @@ BITCOIN_CORE_H = \\\n   core_io.h \\\n   eccryptoverify.h \\\n   ecwrapper.h \\\n+  globals/chainparamsbaseglobals.h \\\n+  globals/chainparamsglobals.h \\\n   hash.h \\\n   init.h \\\n   key.h \\\n@@ -243,6 +245,7 @@ libbitcoin_common_a_SOURCES = \\\n   core_write.cpp \\\n   eccryptoverify.cpp \\\n   ecwrapper.cpp \\\n+  globals/chainparamsglobals.cpp \\\n   hash.cpp \\\n   key.cpp \\\n   keystore.cpp \\\n@@ -270,6 +273,7 @@ libbitcoin_util_a_SOURCES = \\\n   compat/glibc_sanity.cpp \\\n   compat/glibcxx_sanity.cpp \\\n   compat/strnlen.cpp \\\n+  globals/chainparamsbaseglobals.cpp \\\n   random.cpp \\\n   rpcprotocol.cpp \\\n   support/cleanse.cpp \\"
      },
      {
        "sha": "7a5923ba09ed6dc20d7a220172c329d5e93de81b",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=db85b3d747ec44cb5a53aed07ee5c607b52797ca",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"chainparamsbase.h\"\n #include \"clientversion.h\"\n+#include \"globals/chainparamsbaseglobals.h\"\n #include \"rpcclient.h\"\n #include \"rpcprotocol.h\"\n #include \"util.h\""
      },
      {
        "sha": "4ba8678afb94fe60232516c55ecb817c69151d55",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=db85b3d747ec44cb5a53aed07ee5c607b52797ca",
        "patch": "@@ -234,13 +234,6 @@ class CRegTestParams : public CTestNetParams {\n     }\n };\n \n-Container<CChainParams> cGlobalChainParams;\n-static Container<CChainParams> cGlobalSwitchingChainParams;\n-\n-const CChainParams &Params() {\n-    return cGlobalChainParams.Get();\n-}\n-\n CChainParams* CChainParams::Factory(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n@@ -251,15 +244,3 @@ CChainParams* CChainParams::Factory(const std::string& chain)\n         return new CRegTestParams();\n     throw std::runtime_error(strprintf(_(\"%s: Unknown chain %s.\"), __func__, chain));\n }\n-\n-const CChainParams& Params(const std::string& chain)\n-{\n-    cGlobalSwitchingChainParams.Set(CChainParams::Factory(chain));\n-    return cGlobalSwitchingChainParams.Get();\n-}\n-\n-void SelectParams(const std::string& network)\n-{\n-    cGlobalChainBaseParams.Set(CBaseChainParams::Factory(network));\n-    cGlobalChainParams.Set(CChainParams::Factory(network));\n-}"
      },
      {
        "sha": "fdf5cdf3177838d3cec7b3b5551e5a47e1d403c7",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 19,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=db85b3d747ec44cb5a53aed07ee5c607b52797ca",
        "patch": "@@ -9,6 +9,7 @@\n #include \"chainparamsbase.h\"\n #include \"checkpoints.h\"\n #include \"consensus/params.h\"\n+#include \"globals/chainparamsglobals.h\" // TODO remove from here, blame @jtimon, not @theuni\n #include \"primitives/block.h\"\n #include \"protocol.h\"\n #include \"templates.hpp\"\n@@ -102,23 +103,4 @@ class CChainParams\n     Checkpoints::CCheckpointData checkpointData;\n };\n \n-/**\n- * Return the currently selected parameters. This won't change after app\n- * startup, except for unit tests.\n- */\n-const CChainParams &Params();\n-\n-/**\n- * @returns CChainParams for the given BIP70 chain name.\n- */\n-const CChainParams& Params(const std::string& chain);\n-\n-/**\n- * Sets the params returned by Params() to those for the given BIP70 chain name.\n- * @throws std::runtime_error when the chain is not supported.\n- */\n-void SelectParams(const std::string& chain);\n-\n-extern Container<CChainParams> cGlobalChainParams;\n-\n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "09d1bab6d32da4ac4f3619b9a38010d60edb6aa5",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=db85b3d747ec44cb5a53aed07ee5c607b52797ca",
        "patch": "@@ -73,8 +73,6 @@ class CBaseUnitTestParams : public CBaseMainParams\n };\n static CBaseUnitTestParams unitTestParams;\n \n-Container<CBaseChainParams> cGlobalChainBaseParams;\n-\n CBaseChainParams* CBaseChainParams::Factory(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)"
      },
      {
        "sha": "6b72c718d4aedb92aa961d35474ef2b756ba7d1e",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=db85b3d747ec44cb5a53aed07ee5c607b52797ca",
        "patch": "@@ -50,6 +50,4 @@ void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp=true);\n  */\n std::string ChainNameFromCommandLine();\n \n-extern Container<CBaseChainParams> cGlobalChainBaseParams;\n-\n #endif // BITCOIN_CHAINPARAMSBASE_H"
      },
      {
        "sha": "4c50f74480893372c1b169273bb202cdb6864d58",
        "filename": "src/globals/chainparamsbaseglobals.cpp",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/globals/chainparamsbaseglobals.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/globals/chainparamsbaseglobals.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/globals/chainparamsbaseglobals.cpp?ref=db85b3d747ec44cb5a53aed07ee5c607b52797ca",
        "patch": "@@ -0,0 +1,10 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"globals/chainparamsbaseglobals.h\"\n+\n+#include \"chainparamsbase.h\"\n+\n+Container<CBaseChainParams> cGlobalChainBaseParams;"
      },
      {
        "sha": "ffc1d75191109bcab69368b796256b83e62f134d",
        "filename": "src/globals/chainparamsbaseglobals.h",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/globals/chainparamsbaseglobals.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/globals/chainparamsbaseglobals.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/globals/chainparamsbaseglobals.h?ref=db85b3d747ec44cb5a53aed07ee5c607b52797ca",
        "patch": "@@ -0,0 +1,16 @@\n+// Copyright (c) 2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_GLOBALS_CHAINPARAMSBASE_H\n+#define BITCOIN_GLOBALS_CHAINPARAMSBASE_H\n+\n+#include \"templates.hpp\"\n+\n+#include <string>\n+\n+class CBaseChainParams;\n+\n+extern Container<CBaseChainParams> cGlobalChainBaseParams;\n+\n+#endif // BITCOIN_GLOBALS_CHAINPARAMSBASE_H"
      },
      {
        "sha": "835d10f740997608b02c201716e9a023931354e5",
        "filename": "src/globals/chainparamsglobals.cpp",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/globals/chainparamsglobals.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/globals/chainparamsglobals.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/globals/chainparamsglobals.cpp?ref=db85b3d747ec44cb5a53aed07ee5c607b52797ca",
        "patch": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"globals/chainparamsglobals.h\"\n+\n+#include \"chainparams.h\"\n+#include \"globals/chainparamsbaseglobals.h\"\n+\n+Container<CChainParams> cGlobalChainParams;\n+static Container<CChainParams> cGlobalSwitchingChainParams;\n+\n+const CChainParams& Params()\n+{\n+    return cGlobalChainParams.Get();\n+}\n+\n+const CChainParams& Params(const std::string& chain)\n+{\n+    cGlobalSwitchingChainParams.Set(CChainParams::Factory(chain));\n+    return cGlobalSwitchingChainParams.Get();\n+}\n+\n+void SelectParams(const std::string& network)\n+{\n+    cGlobalChainBaseParams.Set(CBaseChainParams::Factory(network));\n+    cGlobalChainParams.Set(CChainParams::Factory(network));\n+}"
      },
      {
        "sha": "533082d4bcf7f84489c37b2af7fdca26189edd38",
        "filename": "src/globals/chainparamsglobals.h",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/globals/chainparamsglobals.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/globals/chainparamsglobals.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/globals/chainparamsglobals.h?ref=db85b3d747ec44cb5a53aed07ee5c607b52797ca",
        "patch": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_GLOBALS_CHAINPARAMS_H\n+#define BITCOIN_GLOBALS_CHAINPARAMS_H\n+\n+#include \"templates.hpp\"\n+\n+#include <string>\n+\n+class CChainParams;\n+\n+extern Container<CChainParams> cGlobalChainParams;\n+\n+/**\n+ * Return the currently selected parameters. This won't change after app\n+ * startup, except for unit tests.\n+ */\n+const CChainParams& Params();\n+\n+/**\n+ * @returns CChainParams for the given BIP70 chain name.\n+ */\n+const CChainParams& Params(const std::string& chain);\n+\n+/**\n+ * Sets the params returned by Params() to those for the given BIP70 chain name.\n+ * @throws std::runtime_error when the chain is not supported.\n+ */\n+void SelectParams(const std::string& chain);\n+\n+#endif // BITCOIN_GLOBALS_CHAINPARAMS_H"
      },
      {
        "sha": "80cbf70ee3a8451a19424471309b323cef2ac214",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=db85b3d747ec44cb5a53aed07ee5c607b52797ca",
        "patch": "@@ -6,6 +6,8 @@\n #include \"rpcserver.h\"\n \n #include \"base58.h\"\n+#include \"chainparamsbase.h\"\n+#include \"globals/chainparamsbaseglobals.h\"\n #include \"init.h\"\n #include \"random.h\"\n #include \"sync.h\""
      },
      {
        "sha": "621aaaf158c2dcc100c44df272a6963f3dd6922d",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db85b3d747ec44cb5a53aed07ee5c607b52797ca/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=db85b3d747ec44cb5a53aed07ee5c607b52797ca",
        "patch": "@@ -10,6 +10,7 @@\n #include \"util.h\"\n \n #include \"chainparamsbase.h\"\n+#include \"globals/chainparamsbaseglobals.h\"\n #include \"random.h\"\n #include \"serialize.h\"\n #include \"sync.h\""
      }
    ]
  }
]