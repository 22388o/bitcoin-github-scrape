[
  {
    "sha": "f6ee177f7d8d4a8220e6ba4f0d5f68830fe1c817",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmVlMTc3ZjdkOGQ0YTgyMjBlNmJhNGYwZDVmNjg4MzBmZTFjODE3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-03-25T13:46:30Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-03-25T13:46:30Z"
      },
      "message": "Remove unused AES-128 code",
      "tree": {
        "sha": "51fa2dd0c9a4e26d9c9affb89671967f881aa459",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51fa2dd0c9a4e26d9c9affb89671967f881aa459"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6ee177f7d8d4a8220e6ba4f0d5f68830fe1c817",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6ee177f7d8d4a8220e6ba4f0d5f68830fe1c817",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6ee177f7d8d4a8220e6ba4f0d5f68830fe1c817",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6ee177f7d8d4a8220e6ba4f0d5f68830fe1c817/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b13c646457980f44599412f243694fa682a1abf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b13c646457980f44599412f243694fa682a1abf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b13c646457980f44599412f243694fa682a1abf"
      }
    ],
    "stats": {
      "total": 200,
      "additions": 0,
      "deletions": 200
    },
    "files": [
      {
        "sha": "2dc2133434841af95d5c8bd630baed5008c2889b",
        "filename": "src/crypto/aes.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 62,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6ee177f7d8d4a8220e6ba4f0d5f68830fe1c817/src/crypto/aes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6ee177f7d8d4a8220e6ba4f0d5f68830fe1c817/src/crypto/aes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/aes.cpp?ref=f6ee177f7d8d4a8220e6ba4f0d5f68830fe1c817",
        "patch": "@@ -12,36 +12,6 @@ extern \"C\" {\n #include <crypto/ctaes/ctaes.c>\n }\n \n-AES128Encrypt::AES128Encrypt(const unsigned char key[16])\n-{\n-    AES128_init(&ctx, key);\n-}\n-\n-AES128Encrypt::~AES128Encrypt()\n-{\n-    memset(&ctx, 0, sizeof(ctx));\n-}\n-\n-void AES128Encrypt::Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const\n-{\n-    AES128_encrypt(&ctx, 1, ciphertext, plaintext);\n-}\n-\n-AES128Decrypt::AES128Decrypt(const unsigned char key[16])\n-{\n-    AES128_init(&ctx, key);\n-}\n-\n-AES128Decrypt::~AES128Decrypt()\n-{\n-    memset(&ctx, 0, sizeof(ctx));\n-}\n-\n-void AES128Decrypt::Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const\n-{\n-    AES128_decrypt(&ctx, 1, plaintext, ciphertext);\n-}\n-\n AES256Encrypt::AES256Encrypt(const unsigned char key[32])\n {\n     AES256_init(&ctx, key);\n@@ -182,35 +152,3 @@ AES256CBCDecrypt::~AES256CBCDecrypt()\n {\n     memset(iv, 0, sizeof(iv));\n }\n-\n-AES128CBCEncrypt::AES128CBCEncrypt(const unsigned char key[AES128_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)\n-    : enc(key), pad(padIn)\n-{\n-    memcpy(iv, ivIn, AES_BLOCKSIZE);\n-}\n-\n-AES128CBCEncrypt::~AES128CBCEncrypt()\n-{\n-    memset(iv, 0, AES_BLOCKSIZE);\n-}\n-\n-int AES128CBCEncrypt::Encrypt(const unsigned char* data, int size, unsigned char* out) const\n-{\n-    return CBCEncrypt(enc, iv, data, size, pad, out);\n-}\n-\n-AES128CBCDecrypt::AES128CBCDecrypt(const unsigned char key[AES128_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)\n-    : dec(key), pad(padIn)\n-{\n-    memcpy(iv, ivIn, AES_BLOCKSIZE);\n-}\n-\n-AES128CBCDecrypt::~AES128CBCDecrypt()\n-{\n-    memset(iv, 0, AES_BLOCKSIZE);\n-}\n-\n-int AES128CBCDecrypt::Decrypt(const unsigned char* data, int size, unsigned char* out) const\n-{\n-    return CBCDecrypt(dec, iv, data, size, pad, out);\n-}"
      },
      {
        "sha": "e06c8de272ea53d8c54234d016d2e0cb078de742",
        "filename": "src/crypto/aes.h",
        "status": "modified",
        "additions": 0,
        "deletions": 51,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6ee177f7d8d4a8220e6ba4f0d5f68830fe1c817/src/crypto/aes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6ee177f7d8d4a8220e6ba4f0d5f68830fe1c817/src/crypto/aes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/aes.h?ref=f6ee177f7d8d4a8220e6ba4f0d5f68830fe1c817",
        "patch": "@@ -12,33 +12,8 @@ extern \"C\" {\n }\n \n static const int AES_BLOCKSIZE = 16;\n-static const int AES128_KEYSIZE = 16;\n static const int AES256_KEYSIZE = 32;\n \n-/** An encryption class for AES-128. */\n-class AES128Encrypt\n-{\n-private:\n-    AES128_ctx ctx;\n-\n-public:\n-    explicit AES128Encrypt(const unsigned char key[16]);\n-    ~AES128Encrypt();\n-    void Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const;\n-};\n-\n-/** A decryption class for AES-128. */\n-class AES128Decrypt\n-{\n-private:\n-    AES128_ctx ctx;\n-\n-public:\n-    explicit AES128Decrypt(const unsigned char key[16]);\n-    ~AES128Decrypt();\n-    void Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const;\n-};\n-\n /** An encryption class for AES-256. */\n class AES256Encrypt\n {\n@@ -89,30 +64,4 @@ class AES256CBCDecrypt\n     unsigned char iv[AES_BLOCKSIZE];\n };\n \n-class AES128CBCEncrypt\n-{\n-public:\n-    AES128CBCEncrypt(const unsigned char key[AES128_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn);\n-    ~AES128CBCEncrypt();\n-    int Encrypt(const unsigned char* data, int size, unsigned char* out) const;\n-\n-private:\n-    const AES128Encrypt enc;\n-    const bool pad;\n-    unsigned char iv[AES_BLOCKSIZE];\n-};\n-\n-class AES128CBCDecrypt\n-{\n-public:\n-    AES128CBCDecrypt(const unsigned char key[AES128_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn);\n-    ~AES128CBCDecrypt();\n-    int Decrypt(const unsigned char* data, int size, unsigned char* out) const;\n-\n-private:\n-    const AES128Decrypt dec;\n-    const bool pad;\n-    unsigned char iv[AES_BLOCKSIZE];\n-};\n-\n #endif // BITCOIN_CRYPTO_AES_H"
      },
      {
        "sha": "2b803cdb1cfbc27e38bc8974ca74fba3a807db76",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 87,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6ee177f7d8d4a8220e6ba4f0d5f68830fe1c817/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6ee177f7d8d4a8220e6ba4f0d5f68830fe1c817/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=f6ee177f7d8d4a8220e6ba4f0d5f68830fe1c817",
        "patch": "@@ -66,26 +66,6 @@ static void TestHMACSHA512(const std::string &hexkey, const std::string &hexin,\n     TestVector(CHMAC_SHA512(key.data(), key.size()), ParseHex(hexin), ParseHex(hexout));\n }\n \n-static void TestAES128(const std::string &hexkey, const std::string &hexin, const std::string &hexout)\n-{\n-    std::vector<unsigned char> key = ParseHex(hexkey);\n-    std::vector<unsigned char> in = ParseHex(hexin);\n-    std::vector<unsigned char> correctout = ParseHex(hexout);\n-    std::vector<unsigned char> buf, buf2;\n-\n-    assert(key.size() == 16);\n-    assert(in.size() == 16);\n-    assert(correctout.size() == 16);\n-    AES128Encrypt enc(key.data());\n-    buf.resize(correctout.size());\n-    buf2.resize(correctout.size());\n-    enc.Encrypt(buf.data(), in.data());\n-    BOOST_CHECK_EQUAL(HexStr(buf), HexStr(correctout));\n-    AES128Decrypt dec(key.data());\n-    dec.Decrypt(buf2.data(), buf.data());\n-    BOOST_CHECK_EQUAL(HexStr(buf2), HexStr(in));\n-}\n-\n static void TestAES256(const std::string &hexkey, const std::string &hexin, const std::string &hexout)\n {\n     std::vector<unsigned char> key = ParseHex(hexkey);\n@@ -105,47 +85,6 @@ static void TestAES256(const std::string &hexkey, const std::string &hexin, cons\n     BOOST_CHECK(buf == in);\n }\n \n-static void TestAES128CBC(const std::string &hexkey, const std::string &hexiv, bool pad, const std::string &hexin, const std::string &hexout)\n-{\n-    std::vector<unsigned char> key = ParseHex(hexkey);\n-    std::vector<unsigned char> iv = ParseHex(hexiv);\n-    std::vector<unsigned char> in = ParseHex(hexin);\n-    std::vector<unsigned char> correctout = ParseHex(hexout);\n-    std::vector<unsigned char> realout(in.size() + AES_BLOCKSIZE);\n-\n-    // Encrypt the plaintext and verify that it equals the cipher\n-    AES128CBCEncrypt enc(key.data(), iv.data(), pad);\n-    int size = enc.Encrypt(in.data(), in.size(), realout.data());\n-    realout.resize(size);\n-    BOOST_CHECK(realout.size() == correctout.size());\n-    BOOST_CHECK_MESSAGE(realout == correctout, HexStr(realout) + std::string(\" != \") + hexout);\n-\n-    // Decrypt the cipher and verify that it equals the plaintext\n-    std::vector<unsigned char> decrypted(correctout.size());\n-    AES128CBCDecrypt dec(key.data(), iv.data(), pad);\n-    size = dec.Decrypt(correctout.data(), correctout.size(), decrypted.data());\n-    decrypted.resize(size);\n-    BOOST_CHECK(decrypted.size() == in.size());\n-    BOOST_CHECK_MESSAGE(decrypted == in, HexStr(decrypted) + std::string(\" != \") + hexin);\n-\n-    // Encrypt and re-decrypt substrings of the plaintext and verify that they equal each-other\n-    for(std::vector<unsigned char>::iterator i(in.begin()); i != in.end(); ++i)\n-    {\n-        std::vector<unsigned char> sub(i, in.end());\n-        std::vector<unsigned char> subout(sub.size() + AES_BLOCKSIZE);\n-        int _size = enc.Encrypt(sub.data(), sub.size(), subout.data());\n-        if (_size != 0)\n-        {\n-            subout.resize(_size);\n-            std::vector<unsigned char> subdecrypted(subout.size());\n-            _size = dec.Decrypt(subout.data(), subout.size(), subdecrypted.data());\n-            subdecrypted.resize(_size);\n-            BOOST_CHECK(decrypted.size() == in.size());\n-            BOOST_CHECK_MESSAGE(subdecrypted == sub, HexStr(subdecrypted) + std::string(\" != \") + HexStr(sub));\n-        }\n-    }\n-}\n-\n static void TestAES256CBC(const std::string &hexkey, const std::string &hexiv, bool pad, const std::string &hexin, const std::string &hexout)\n {\n     std::vector<unsigned char> key = ParseHex(hexkey);\n@@ -428,42 +367,16 @@ BOOST_AUTO_TEST_CASE(hmac_sha512_testvectors) {\n \n BOOST_AUTO_TEST_CASE(aes_testvectors) {\n     // AES test vectors from FIPS 197.\n-    TestAES128(\"000102030405060708090a0b0c0d0e0f\", \"00112233445566778899aabbccddeeff\", \"69c4e0d86a7b0430d8cdb78070b4c55a\");\n     TestAES256(\"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\", \"00112233445566778899aabbccddeeff\", \"8ea2b7ca516745bfeafc49904b496089\");\n \n     // AES-ECB test vectors from NIST sp800-38a.\n-    TestAES128(\"2b7e151628aed2a6abf7158809cf4f3c\", \"6bc1bee22e409f96e93d7e117393172a\", \"3ad77bb40d7a3660a89ecaf32466ef97\");\n-    TestAES128(\"2b7e151628aed2a6abf7158809cf4f3c\", \"ae2d8a571e03ac9c9eb76fac45af8e51\", \"f5d3d58503b9699de785895a96fdbaaf\");\n-    TestAES128(\"2b7e151628aed2a6abf7158809cf4f3c\", \"30c81c46a35ce411e5fbc1191a0a52ef\", \"43b1cd7f598ece23881b00e3ed030688\");\n-    TestAES128(\"2b7e151628aed2a6abf7158809cf4f3c\", \"f69f2445df4f9b17ad2b417be66c3710\", \"7b0c785e27e8ad3f8223207104725dd4\");\n     TestAES256(\"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4\", \"6bc1bee22e409f96e93d7e117393172a\", \"f3eed1bdb5d2a03c064b5a7e3db181f8\");\n     TestAES256(\"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4\", \"ae2d8a571e03ac9c9eb76fac45af8e51\", \"591ccb10d410ed26dc5ba74a31362870\");\n     TestAES256(\"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4\", \"30c81c46a35ce411e5fbc1191a0a52ef\", \"b6ed21b99ca6f4f9f153e7b1beafed1d\");\n     TestAES256(\"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4\", \"f69f2445df4f9b17ad2b417be66c3710\", \"23304b7a39f9f3ff067d8d8f9e24ecc7\");\n }\n \n BOOST_AUTO_TEST_CASE(aes_cbc_testvectors) {\n-\n-    // NIST AES CBC 128-bit encryption test-vectors\n-    TestAES128CBC(\"2b7e151628aed2a6abf7158809cf4f3c\", \"000102030405060708090A0B0C0D0E0F\", false, \\\n-                  \"6bc1bee22e409f96e93d7e117393172a\", \"7649abac8119b246cee98e9b12e9197d\");\n-    TestAES128CBC(\"2b7e151628aed2a6abf7158809cf4f3c\", \"7649ABAC8119B246CEE98E9B12E9197D\", false, \\\n-                  \"ae2d8a571e03ac9c9eb76fac45af8e51\", \"5086cb9b507219ee95db113a917678b2\");\n-    TestAES128CBC(\"2b7e151628aed2a6abf7158809cf4f3c\", \"5086cb9b507219ee95db113a917678b2\", false, \\\n-                  \"30c81c46a35ce411e5fbc1191a0a52ef\", \"73bed6b8e3c1743b7116e69e22229516\");\n-    TestAES128CBC(\"2b7e151628aed2a6abf7158809cf4f3c\", \"73bed6b8e3c1743b7116e69e22229516\", false, \\\n-                  \"f69f2445df4f9b17ad2b417be66c3710\", \"3ff1caa1681fac09120eca307586e1a7\");\n-\n-    // The same vectors with padding enabled\n-    TestAES128CBC(\"2b7e151628aed2a6abf7158809cf4f3c\", \"000102030405060708090A0B0C0D0E0F\", true, \\\n-                  \"6bc1bee22e409f96e93d7e117393172a\", \"7649abac8119b246cee98e9b12e9197d8964e0b149c10b7b682e6e39aaeb731c\");\n-    TestAES128CBC(\"2b7e151628aed2a6abf7158809cf4f3c\", \"7649ABAC8119B246CEE98E9B12E9197D\", true, \\\n-                  \"ae2d8a571e03ac9c9eb76fac45af8e51\", \"5086cb9b507219ee95db113a917678b255e21d7100b988ffec32feeafaf23538\");\n-    TestAES128CBC(\"2b7e151628aed2a6abf7158809cf4f3c\", \"5086cb9b507219ee95db113a917678b2\", true, \\\n-                  \"30c81c46a35ce411e5fbc1191a0a52ef\", \"73bed6b8e3c1743b7116e69e22229516f6eccda327bf8e5ec43718b0039adceb\");\n-    TestAES128CBC(\"2b7e151628aed2a6abf7158809cf4f3c\", \"73bed6b8e3c1743b7116e69e22229516\", true, \\\n-                  \"f69f2445df4f9b17ad2b417be66c3710\", \"3ff1caa1681fac09120eca307586e1a78cb82807230e1321d3fae00d18cc2012\");\n-\n     // NIST AES CBC 256-bit encryption test-vectors\n     TestAES256CBC(\"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4\", \\\n                   \"000102030405060708090A0B0C0D0E0F\", false, \"6bc1bee22e409f96e93d7e117393172a\", \\"
      }
    ]
  }
]