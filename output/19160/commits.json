[
  {
    "sha": "5d62d7f6cd48bbc4e9f37ecc369f38d5e1e0036c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDYyZDdmNmNkNDhiYmM0ZTlmMzdlY2MzNjlmMzhkNWUxZTAwMzZj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-12-08T18:37:41Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-04-23T08:02:50Z"
      },
      "message": "Update libmultiprocess library\n\nFix \"Disable GCC suggest-override warnings for proxy clients\" https://github.com/chaincodelabs/libmultiprocess/pull/40 is needed to prevent cirrus GCC failure https://cirrus-ci.com/task/6000489311502336?command=ci#L4294\n\nThis also includes other recent changes\n\nhttps://github.com/chaincodelabs/libmultiprocess/pull/35 Fix README.md markdown\nhttps://github.com/chaincodelabs/libmultiprocess/pull/37 Add \"make check\" target to build and run tests\nhttps://github.com/chaincodelabs/libmultiprocess/pull/38 Add \"extends\" inherited method support\nhttps://github.com/chaincodelabs/libmultiprocess/pull/41 Avoid depending on argument default constructors\nhttps://github.com/chaincodelabs/libmultiprocess/pull/42 Support attaching custom cleanup functions to proxy client and server classes\nhttps://github.com/chaincodelabs/libmultiprocess/pull/43 Drop hardcoded #include lines in generated files",
      "tree": {
        "sha": "17e5c8875c0259265408edb729484056041f00c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17e5c8875c0259265408edb729484056041f00c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d62d7f6cd48bbc4e9f37ecc369f38d5e1e0036c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d62d7f6cd48bbc4e9f37ecc369f38d5e1e0036c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d62d7f6cd48bbc4e9f37ecc369f38d5e1e0036c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d62d7f6cd48bbc4e9f37ecc369f38d5e1e0036c/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66fd3b28e85c167f3955b5603496daf8d91abcad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66fd3b28e85c167f3955b5603496daf8d91abcad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66fd3b28e85c167f3955b5603496daf8d91abcad"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "14653ce9fb0b70a110ee8d80c743a6833f60c21b",
        "filename": "depends/packages/native_libmultiprocess.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d62d7f6cd48bbc4e9f37ecc369f38d5e1e0036c/depends/packages/native_libmultiprocess.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d62d7f6cd48bbc4e9f37ecc369f38d5e1e0036c/depends/packages/native_libmultiprocess.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_libmultiprocess.mk?ref=5d62d7f6cd48bbc4e9f37ecc369f38d5e1e0036c",
        "patch": "@@ -1,8 +1,8 @@\n package=native_libmultiprocess\n-$(package)_version=5741d750a04e644a03336090d8979c6d033e32c0\n+$(package)_version=d576d975debdc9090bd2582f83f49c76c0061698\n $(package)_download_path=https://github.com/chaincodelabs/libmultiprocess/archive\n $(package)_file_name=$($(package)_version).tar.gz\n-$(package)_sha256_hash=ac848db49a6ed53e423c62d54bd87f1f08cbb0326254a8667e10bbfe5bf032a4\n+$(package)_sha256_hash=9f8b055c8bba755dc32fe799b67c20b91e7b13e67cadafbc54c0f1def057a370\n $(package)_dependencies=native_capnp\n \n define $(package)_config_cmds"
      }
    ]
  },
  {
    "sha": "745c9cebd50fea1664efef571dc1ee1bddc96102",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDVjOWNlYmQ1MGZlYTE2NjRlZmVmNTcxZGMxZWUxYmRkYzk2MTAy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-04-23T08:02:50Z"
      },
      "message": "multiprocess: Add Ipc and Init interface definitions",
      "tree": {
        "sha": "ba0df6ca2e6080b542e941703cf801a51e29394e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba0df6ca2e6080b542e941703cf801a51e29394e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/745c9cebd50fea1664efef571dc1ee1bddc96102",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/745c9cebd50fea1664efef571dc1ee1bddc96102",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/745c9cebd50fea1664efef571dc1ee1bddc96102",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/745c9cebd50fea1664efef571dc1ee1bddc96102/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d62d7f6cd48bbc4e9f37ecc369f38d5e1e0036c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d62d7f6cd48bbc4e9f37ecc369f38d5e1e0036c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d62d7f6cd48bbc4e9f37ecc369f38d5e1e0036c"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 102,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8f971efa096f20638df12c6033650065645f90d4",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/745c9cebd50fea1664efef571dc1ee1bddc96102/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/745c9cebd50fea1664efef571dc1ee1bddc96102/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=745c9cebd50fea1664efef571dc1ee1bddc96102",
        "patch": "@@ -159,6 +159,8 @@ BITCOIN_CORE_H = \\\n   init/common.h \\\n   interfaces/chain.h \\\n   interfaces/handler.h \\\n+  interfaces/init.h \\\n+  interfaces/ipc.h \\\n   interfaces/node.h \\\n   interfaces/wallet.h \\\n   key.h \\\n@@ -559,6 +561,7 @@ libbitcoin_util_a_SOURCES = \\\n   compat/strnlen.cpp \\\n   fs.cpp \\\n   interfaces/handler.cpp \\\n+  interfaces/init.cpp \\\n   logging.cpp \\\n   random.cpp \\\n   randomenv.cpp \\"
      },
      {
        "sha": "1eeea9b5cb448a99ef1aeb118d7711cbf857aeb9",
        "filename": "src/interfaces/init.cpp",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/745c9cebd50fea1664efef571dc1ee1bddc96102/src/interfaces/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/745c9cebd50fea1664efef571dc1ee1bddc96102/src/interfaces/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/init.cpp?ref=745c9cebd50fea1664efef571dc1ee1bddc96102",
        "patch": "@@ -0,0 +1,15 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <interfaces/chain.h>\n+#include <interfaces/init.h>\n+#include <interfaces/node.h>\n+#include <interfaces/wallet.h>\n+\n+namespace interfaces {\n+std::unique_ptr<Node> Init::makeNode() { return {}; }\n+std::unique_ptr<Chain> Init::makeChain() { return {}; }\n+std::unique_ptr<WalletClient> Init::makeWalletClient(Chain& chain) { return {}; }\n+Ipc* Init::ipc() { return nullptr; }\n+} // namespace interfaces"
      },
      {
        "sha": "8ffd01765695aed14c9794209b19ff8956eb4184",
        "filename": "src/interfaces/init.h",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/745c9cebd50fea1664efef571dc1ee1bddc96102/src/interfaces/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/745c9cebd50fea1664efef571dc1ee1bddc96102/src/interfaces/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/init.h?ref=745c9cebd50fea1664efef571dc1ee1bddc96102",
        "patch": "@@ -0,0 +1,36 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACES_INIT_H\n+#define BITCOIN_INTERFACES_INIT_H\n+\n+#include <memory>\n+\n+struct NodeContext;\n+\n+namespace interfaces {\n+class Chain;\n+class Ipc;\n+class Node;\n+class WalletClient;\n+\n+//! Initial interface created when a process is first started, and used to give\n+//! and get access to other interfaces (Node, Chain, Wallet, etc).\n+//!\n+//! There is a different Init interface implementation for each process\n+//! (bitcoin-gui, bitcoin-node, bitcoin-wallet, bitcoind, bitcoin-qt) and each\n+//! implementation can implement the make methods for interfaces it supports.\n+//! The default make methods all return null.\n+class Init\n+{\n+public:\n+    virtual ~Init() = default;\n+    virtual std::unique_ptr<Node> makeNode();\n+    virtual std::unique_ptr<Chain> makeChain();\n+    virtual std::unique_ptr<WalletClient> makeWalletClient(Chain& chain);\n+    virtual Ipc* ipc();\n+};\n+} // namespace interfaces\n+\n+#endif // BITCOIN_INTERFACES_INIT_H"
      },
      {
        "sha": "65df575da89e89350f801a7f3c56cb9817f955d3",
        "filename": "src/interfaces/ipc.h",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/745c9cebd50fea1664efef571dc1ee1bddc96102/src/interfaces/ipc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/745c9cebd50fea1664efef571dc1ee1bddc96102/src/interfaces/ipc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/ipc.h?ref=745c9cebd50fea1664efef571dc1ee1bddc96102",
        "patch": "@@ -0,0 +1,48 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACES_IPC_H\n+#define BITCOIN_INTERFACES_IPC_H\n+\n+#include <functional>\n+#include <memory>\n+#include <typeindex>\n+\n+namespace interfaces {\n+class Init;\n+\n+//! Interface providing access to interprocess-communication (IPC)\n+//! functionality.\n+class Ipc\n+{\n+public:\n+    virtual ~Ipc() = default;\n+\n+    //! Spawn a child process returning pointer to its Init interface.\n+    virtual std::unique_ptr<Init> spawnProcess(const char* exe_name) = 0;\n+\n+    //! If this is a spawned process, block and handle requests from the parent\n+    //! process by forwarding them to this process's Init interface, then return\n+    //! true. If this is not a spawned child process, return false.\n+    virtual bool startSpawnedProcess(int argc, char* argv[], int& exit_status) = 0;\n+\n+    //! Add cleanup callback to remote interface that will run when the\n+    //! interface is deleted.\n+    template<typename Interface>\n+    void addCleanup(Interface& iface, std::function<void()> cleanup)\n+    {\n+        addCleanup(typeid(Interface), &iface, std::move(cleanup));\n+    }\n+\n+protected:\n+    //! Internal implementation of public addCleanup method (above) as a\n+    //! type-erased virtual function, since template functions can't be virtual.\n+    virtual void addCleanup(std::type_index type, void* iface, std::function<void()> cleanup) = 0;\n+};\n+\n+//! Return implementation of Ipc interface.\n+std::unique_ptr<Ipc> MakeIpc(const char* exe_name, const char* process_argv0, Init& init);\n+} // namespace interfaces\n+\n+#endif // BITCOIN_INTERFACES_IPC_H"
      }
    ]
  },
  {
    "sha": "10afdf0280fa93bfffb0a7665c60dc155cd84514",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGFmZGYwMjgwZmE5M2JmZmZiMGE3NjY1YzYwZGMxNTVjZDg0NTE0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-04-23T08:02:50Z"
      },
      "message": "multiprocess: Add Ipc interface implementation",
      "tree": {
        "sha": "52512c1d233e30778833b525944ee1935514dc44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52512c1d233e30778833b525944ee1935514dc44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10afdf0280fa93bfffb0a7665c60dc155cd84514",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10afdf0280fa93bfffb0a7665c60dc155cd84514",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10afdf0280fa93bfffb0a7665c60dc155cd84514",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10afdf0280fa93bfffb0a7665c60dc155cd84514/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "745c9cebd50fea1664efef571dc1ee1bddc96102",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/745c9cebd50fea1664efef571dc1ee1bddc96102",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/745c9cebd50fea1664efef571dc1ee1bddc96102"
      }
    ],
    "stats": {
      "total": 412,
      "additions": 410,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8d173389387cb7058c93e6b89658b02fd89d09df",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 36,
        "deletions": 1,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=10afdf0280fa93bfffb0a7665c60dc155cd84514",
        "patch": "@@ -74,6 +74,7 @@ EXTRA_LIBRARIES += \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_CLI) \\\n+  $(LIBBITCOIN_IPC) \\\n   $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_WALLET_TOOL) \\\n   $(LIBBITCOIN_ZMQ)\n@@ -301,6 +302,8 @@ obj/build.h: FORCE\n \t  \"$(abs_top_srcdir)\"\n libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h\n \n+ipc/capnp/libbitcoin_ipc_a-ipc.$(OBJEXT): $(libbitcoin_ipc_mpgen_input:=.h)\n+\n # server: shared between bitcoind and bitcoin-qt\n # Contains code accessing mempool and chain state that is meant to be separated\n # from wallet and gui code (see node/README.md). Shared code should go in\n@@ -647,7 +650,7 @@ bitcoin_node_SOURCES = $(bitcoin_daemon_sources)\n bitcoin_node_CPPFLAGS = $(bitcoin_bin_cppflags)\n bitcoin_node_CXXFLAGS = $(bitcoin_bin_cxxflags)\n bitcoin_node_LDFLAGS = $(bitcoin_bin_ldflags)\n-bitcoin_node_LDADD = $(LIBBITCOIN_SERVER) $(bitcoin_bin_ldadd)\n+bitcoin_node_LDADD = $(LIBBITCOIN_SERVER) $(bitcoin_bin_ldadd) $(LIBBITCOIN_IPC) $(LIBMULTIPROCESS_LIBS)\n \n # bitcoin-cli binary #\n bitcoin_cli_SOURCES = bitcoin-cli.cpp\n@@ -811,6 +814,38 @@ if HARDEN\n \t$(AM_V_at) OBJDUMP=$(OBJDUMP) OTOOL=$(OTOOL) $(PYTHON) $(top_srcdir)/contrib/devtools/security-check.py $(bin_PROGRAMS)\n endif\n \n+libbitcoin_ipc_mpgen_input = \\\n+  ipc/capnp/init.capnp\n+EXTRA_DIST += $(libbitcoin_ipc_mpgen_input)\n+%.capnp:\n+\n+if BUILD_MULTIPROCESS\n+LIBBITCOIN_IPC=libbitcoin_ipc.a\n+libbitcoin_ipc_a_SOURCES = \\\n+  ipc/capnp/init-types.h \\\n+  ipc/capnp/protocol.cpp \\\n+  ipc/capnp/protocol.h \\\n+  ipc/exception.h \\\n+  ipc/interfaces.cpp \\\n+  ipc/process.cpp \\\n+  ipc/process.h \\\n+  ipc/protocol.h\n+libbitcoin_ipc_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+libbitcoin_ipc_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS) $(LIBMULTIPROCESS_CFLAGS)\n+\n+include $(MPGEN_PREFIX)/include/mpgen.mk\n+libbitcoin_ipc_mpgen_output = \\\n+  $(libbitcoin_ipc_mpgen_input:=.c++) \\\n+  $(libbitcoin_ipc_mpgen_input:=.h) \\\n+  $(libbitcoin_ipc_mpgen_input:=.proxy-client.c++) \\\n+  $(libbitcoin_ipc_mpgen_input:=.proxy-server.c++) \\\n+  $(libbitcoin_ipc_mpgen_input:=.proxy-types.c++) \\\n+  $(libbitcoin_ipc_mpgen_input:=.proxy-types.h) \\\n+  $(libbitcoin_ipc_mpgen_input:=.proxy.h)\n+nodist_libbitcoin_ipc_a_SOURCES = $(libbitcoin_ipc_mpgen_output)\n+CLEANFILES += $(libbitcoin_ipc_mpgen_output)\n+endif\n+\n if EMBEDDED_LEVELDB\n include Makefile.crc32c.include\n include Makefile.leveldb.include"
      },
      {
        "sha": "036df1430c5610b5286a9f675c7a5906f95b647f",
        "filename": "src/ipc/capnp/.gitignore",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/capnp/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/capnp/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/.gitignore?ref=10afdf0280fa93bfffb0a7665c60dc155cd84514",
        "patch": "@@ -0,0 +1,2 @@\n+# capnp generated files\n+*.capnp.*"
      },
      {
        "sha": "c84b94802ac9d249edb10744d6ba7eaa11ffcdff",
        "filename": "src/ipc/capnp/init-types.h",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/capnp/init-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/capnp/init-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init-types.h?ref=10afdf0280fa93bfffb0a7665c60dc155cd84514",
        "patch": "@@ -0,0 +1,7 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_INIT_TYPES_H\n+#define BITCOIN_IPC_CAPNP_INIT_TYPES_H\n+#endif // BITCOIN_IPC_CAPNP_INIT_TYPES_H"
      },
      {
        "sha": "be6eecb4b9a06c8c597cd4361ce8b0eb890b6ff5",
        "filename": "src/ipc/capnp/init.capnp",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/capnp/init.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/capnp/init.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init.capnp?ref=10afdf0280fa93bfffb0a7665c60dc155cd84514",
        "patch": "@@ -0,0 +1,16 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0xf2c5cfa319406aa6;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"interfaces/init.h\");\n+$Proxy.includeTypes(\"ipc/capnp/init-types.h\");\n+\n+interface Init $Proxy.wrap(\"interfaces::Init\") {\n+    construct @0 (threadMap: Proxy.ThreadMap) -> (threadMap :Proxy.ThreadMap);\n+}"
      },
      {
        "sha": "74c66c899acf488a7e35334a2a052545ac287da0",
        "filename": "src/ipc/capnp/protocol.cpp",
        "status": "added",
        "additions": 90,
        "deletions": 0,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/capnp/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/capnp/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/protocol.cpp?ref=10afdf0280fa93bfffb0a7665c60dc155cd84514",
        "patch": "@@ -0,0 +1,90 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <interfaces/init.h>\n+#include <ipc/capnp/init.capnp.h>\n+#include <ipc/capnp/init.capnp.proxy.h>\n+#include <ipc/capnp/protocol.h>\n+#include <ipc/exception.h>\n+#include <ipc/protocol.h>\n+#include <kj/async.h>\n+#include <logging.h>\n+#include <mp/proxy-io.h>\n+#include <mp/proxy-types.h>\n+#include <mp/util.h>\n+#include <util/threadnames.h>\n+\n+#include <assert.h>\n+#include <errno.h>\n+#include <future>\n+#include <memory>\n+#include <mutex>\n+#include <optional>\n+#include <string>\n+#include <thread>\n+\n+namespace ipc {\n+namespace capnp {\n+namespace {\n+void IpcLogFn(bool raise, std::string message)\n+{\n+    LogPrint(BCLog::IPC, \"%s\\n\", message);\n+    if (raise) throw Exception(message);\n+}\n+\n+class CapnpProtocol : public Protocol\n+{\n+public:\n+    ~CapnpProtocol() noexcept(true)\n+    {\n+        if (m_loop) {\n+            std::unique_lock<std::mutex> lock(m_loop->m_mutex);\n+            m_loop->removeClient(lock);\n+        }\n+        if (m_loop_thread.joinable()) m_loop_thread.join();\n+        assert(!m_loop);\n+    };\n+    std::unique_ptr<interfaces::Init> connect(int fd, const char* exe_name) override\n+    {\n+        startLoop(exe_name);\n+        return mp::ConnectStream<messages::Init>(*m_loop, fd);\n+    }\n+    void serve(int fd, const char* exe_name, interfaces::Init& init) override\n+    {\n+        assert(!m_loop);\n+        mp::g_thread_context.thread_name = mp::ThreadName(exe_name);\n+        m_loop.emplace(exe_name, &IpcLogFn, nullptr);\n+        mp::ServeStream<messages::Init>(*m_loop, fd, init);\n+        m_loop->loop();\n+        m_loop.reset();\n+    }\n+    void addCleanup(std::type_index type, void* iface, std::function<void()> cleanup) override\n+    {\n+        mp::ProxyTypeRegister::types().at(type)(iface).cleanup.emplace_back(std::move(cleanup));\n+    }\n+    void startLoop(const char* exe_name)\n+    {\n+        if (m_loop) return;\n+        std::promise<void> promise;\n+        m_loop_thread = std::thread([&] {\n+            util::ThreadRename(\"capnp-loop\");\n+            m_loop.emplace(exe_name, &IpcLogFn, nullptr);\n+            {\n+                std::unique_lock<std::mutex> lock(m_loop->m_mutex);\n+                m_loop->addClient(lock);\n+            }\n+            promise.set_value();\n+            m_loop->loop();\n+            m_loop.reset();\n+        });\n+        promise.get_future().wait();\n+    }\n+    std::thread m_loop_thread;\n+    std::optional<mp::EventLoop> m_loop;\n+};\n+} // namespace\n+\n+std::unique_ptr<Protocol> MakeCapnpProtocol() { return std::make_unique<CapnpProtocol>(); }\n+} // namespace capnp\n+} // namespace ipc"
      },
      {
        "sha": "eb057949d28f61f1d14311e412f0b694f6bcca19",
        "filename": "src/ipc/capnp/protocol.h",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/capnp/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/capnp/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/protocol.h?ref=10afdf0280fa93bfffb0a7665c60dc155cd84514",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_PROTOCOL_H\n+#define BITCOIN_IPC_CAPNP_PROTOCOL_H\n+\n+#include <memory>\n+\n+namespace ipc {\n+class Protocol;\n+namespace capnp {\n+std::unique_ptr<Protocol> MakeCapnpProtocol();\n+} // namespace capnp\n+} // namespace ipc\n+\n+#endif // BITCOIN_IPC_CAPNP_PROTOCOL_H"
      },
      {
        "sha": "53dee8124ae374407673c4497cb7209e3040915d",
        "filename": "src/ipc/exception.h",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/exception.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/exception.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/exception.h?ref=10afdf0280fa93bfffb0a7665c60dc155cd84514",
        "patch": "@@ -0,0 +1,20 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_EXCEPTION_H\n+#define BITCOIN_IPC_EXCEPTION_H\n+\n+#include <stdexcept>\n+\n+namespace ipc {\n+//! Exception class thrown when a call to remote method fails due to an IPC\n+//! error, like a socket getting disconnected.\n+class Exception : public std::runtime_error\n+{\n+public:\n+    using std::runtime_error::runtime_error;\n+};\n+} // namespace ipc\n+\n+#endif // BITCOIN_IPC_EXCEPTION_H"
      },
      {
        "sha": "ad4b78ed8126259fcb07cebfeda475060b1c41d4",
        "filename": "src/ipc/interfaces.cpp",
        "status": "added",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/interfaces.cpp?ref=10afdf0280fa93bfffb0a7665c60dc155cd84514",
        "patch": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <fs.h>\n+#include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n+#include <ipc/capnp/protocol.h>\n+#include <ipc/process.h>\n+#include <ipc/protocol.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/system.h>\n+\n+#include <functional>\n+#include <memory>\n+#include <stdexcept>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <string>\n+#include <unistd.h>\n+#include <utility>\n+#include <vector>\n+\n+namespace ipc {\n+namespace {\n+class IpcImpl : public interfaces::Ipc\n+{\n+public:\n+    IpcImpl(const char* exe_name, const char* process_argv0, interfaces::Init& init)\n+        : m_exe_name(exe_name), m_process_argv0(process_argv0), m_init(init),\n+          m_protocol(ipc::capnp::MakeCapnpProtocol()), m_process(ipc::MakeProcess())\n+    {\n+    }\n+    std::unique_ptr<interfaces::Init> spawnProcess(const char* new_exe_name) override\n+    {\n+        int pid;\n+        int fd = m_process->spawn(new_exe_name, m_process_argv0, pid);\n+        LogPrint(::BCLog::IPC, \"Process %s pid %i launched\\n\", new_exe_name, pid);\n+        auto init = m_protocol->connect(fd, m_exe_name);\n+        Ipc::addCleanup(*init, [this, new_exe_name, pid] {\n+            int status = m_process->waitSpawned(pid);\n+            LogPrint(::BCLog::IPC, \"Process %s pid %i exited with status %i\\n\", new_exe_name, pid, status);\n+        });\n+        return init;\n+    }\n+    bool startSpawnedProcess(int argc, char* argv[], int& exit_status) override\n+    {\n+        exit_status = EXIT_FAILURE;\n+        int32_t fd = -1;\n+        if (!m_process->checkSpawned(argc, argv, fd)) {\n+            return false;\n+        }\n+        m_protocol->serve(fd, m_exe_name, m_init);\n+        exit_status = EXIT_SUCCESS;\n+        return true;\n+    }\n+    void addCleanup(std::type_index type, void* iface, std::function<void()> cleanup) override\n+    {\n+        m_protocol->addCleanup(type, iface, std::move(cleanup));\n+    }\n+    const char* m_exe_name;\n+    const char* m_process_argv0;\n+    interfaces::Init& m_init;\n+    std::unique_ptr<Protocol> m_protocol;\n+    std::unique_ptr<Process> m_process;\n+};\n+} // namespace\n+} // namespace ipc\n+\n+namespace interfaces {\n+std::unique_ptr<Ipc> MakeIpc(const char* exe_name, const char* process_argv0, Init& init)\n+{\n+    return std::make_unique<ipc::IpcImpl>(exe_name, process_argv0, init);\n+}\n+} // namespace interfaces"
      },
      {
        "sha": "43ed1f1baeb0205a10dfc901b04e18dc90f7114e",
        "filename": "src/ipc/process.cpp",
        "status": "added",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/process.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/process.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/process.cpp?ref=10afdf0280fa93bfffb0a7665c60dc155cd84514",
        "patch": "@@ -0,0 +1,61 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <fs.h>\n+#include <ipc/process.h>\n+#include <ipc/protocol.h>\n+#include <mp/util.h>\n+#include <tinyformat.h>\n+#include <util/strencodings.h>\n+\n+#include <cstdint>\n+#include <exception>\n+#include <iostream>\n+#include <stdexcept>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <system_error>\n+#include <unistd.h>\n+#include <utility>\n+#include <vector>\n+\n+namespace ipc {\n+namespace {\n+class ProcessImpl : public Process\n+{\n+public:\n+    int spawn(const std::string& new_exe_name, const fs::path& argv0_path, int& pid) override\n+    {\n+        return mp::SpawnProcess(pid, [&](int fd) {\n+            fs::path path = argv0_path;\n+            path.remove_filename();\n+            path.append(new_exe_name);\n+            return std::vector<std::string>{path.string(), \"-ipcfd\", strprintf(\"%i\", fd)};\n+        });\n+    }\n+    int waitSpawned(int pid) override { return mp::WaitProcess(pid); }\n+    bool checkSpawned(int argc, char* argv[], int& fd) override\n+    {\n+        // If this process was not started with a single -ipcfd argument, it is\n+        // not a process spawned by the spawn() call above, so return false and\n+        // do not try to serve requests.\n+        if (argc != 3 || strcmp(argv[1], \"-ipcfd\") != 0) {\n+            return false;\n+        }\n+        // If a single -ipcfd argument was provided, return true and get the\n+        // file descriptor so Protocol::serve() can be called to handle\n+        // requests from the parent process. The -ipcfd argument is not valid\n+        // in combination with other arguments because the parent process\n+        // should be able to control the child process through the IPC protocol\n+        // without passing information out of band.\n+        if (!ParseInt32(argv[2], &fd)) {\n+            throw std::runtime_error(strprintf(\"Invalid -ipcfd number '%s'\", argv[2]));\n+        }\n+        return true;\n+    }\n+};\n+} // namespace\n+\n+std::unique_ptr<Process> MakeProcess() { return std::make_unique<ProcessImpl>(); }\n+} // namespace ipc"
      },
      {
        "sha": "4bb2930d9c3d00428ec3cd1639f67312a8149699",
        "filename": "src/ipc/process.h",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/process.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/process.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/process.h?ref=10afdf0280fa93bfffb0a7665c60dc155cd84514",
        "patch": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_PROCESS_H\n+#define BITCOIN_IPC_PROCESS_H\n+\n+#include <memory>\n+#include <string>\n+\n+namespace ipc {\n+class Protocol;\n+\n+//! IPC process interface for spawning bitcoin processes and serving requests\n+//! in processes that have been spawned.\n+//!\n+//! There will be different implementations of this interface depending on the\n+//! platform (e.g. unix, windows).\n+class Process\n+{\n+public:\n+    virtual ~Process() = default;\n+\n+    //! Spawn process and return socket file descriptor for communicating with\n+    //! it.\n+    virtual int spawn(const std::string& new_exe_name, const fs::path& argv0_path, int& pid) = 0;\n+\n+    //! Wait for spawned process to exit and return its exit code.\n+    virtual int waitSpawned(int pid) = 0;\n+\n+    //! Parse command line and determine if current process is a spawned child\n+    //! process. If so, return true and a file descriptor for communicating\n+    //! with the parent process.\n+    virtual bool checkSpawned(int argc, char* argv[], int& fd) = 0;\n+};\n+\n+//! Constructor for Process interface. Implementation will vary depending on\n+//! the platform (unix or windows).\n+std::unique_ptr<Process> MakeProcess();\n+} // namespace ipc\n+\n+#endif // BITCOIN_IPC_PROCESS_H"
      },
      {
        "sha": "af955b000786e55df99f039c5557bdbe048962f2",
        "filename": "src/ipc/protocol.h",
        "status": "added",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/ipc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/protocol.h?ref=10afdf0280fa93bfffb0a7665c60dc155cd84514",
        "patch": "@@ -0,0 +1,39 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_PROTOCOL_H\n+#define BITCOIN_IPC_PROTOCOL_H\n+\n+#include <interfaces/init.h>\n+\n+#include <functional>\n+#include <memory>\n+#include <typeindex>\n+\n+namespace ipc {\n+//! IPC protocol interface for calling IPC methods over sockets.\n+//!\n+//! There may be different implementations of this interface for different IPC\n+//! protocols (e.g. Cap'n Proto, gRPC, JSON-RPC, or custom protocols).\n+class Protocol\n+{\n+public:\n+    virtual ~Protocol() = default;\n+\n+    //! Return Init interface that forwards requests over given socket descriptor.\n+    //! Socket communication is handled on a background thread.\n+    virtual std::unique_ptr<interfaces::Init> connect(int fd, const char* exe_name) = 0;\n+\n+    //! Handle requests on provided socket descriptor, forwarding them to the\n+    //! provided Init interface. Socket communication is handled on the\n+    //! current thread, and this call blocks until the socket is closed.\n+    virtual void serve(int fd, const char* exe_name, interfaces::Init& init) = 0;\n+\n+    //! Add cleanup callback to interface that will run when the interface is\n+    //! deleted.\n+    virtual void addCleanup(std::type_index type, void* iface, std::function<void()> cleanup) = 0;\n+};\n+} // namespace ipc\n+\n+#endif // BITCOIN_IPC_PROTOCOL_H"
      },
      {
        "sha": "e5187fd5962da8dff2b610950fbd8ae1128d3843",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=10afdf0280fa93bfffb0a7665c60dc155cd84514",
        "patch": "@@ -157,6 +157,7 @@ const CLogCategoryDesc LogCategories[] =\n     {BCLog::LEVELDB, \"leveldb\"},\n     {BCLog::VALIDATION, \"validation\"},\n     {BCLog::I2P, \"i2p\"},\n+    {BCLog::IPC, \"ipc\"},\n     {BCLog::ALL, \"1\"},\n     {BCLog::ALL, \"all\"},\n };"
      },
      {
        "sha": "d04bc992680d6d8f8e67af6354c3202eeb44b01a",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10afdf0280fa93bfffb0a7665c60dc155cd84514/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=10afdf0280fa93bfffb0a7665c60dc155cd84514",
        "patch": "@@ -58,6 +58,7 @@ namespace BCLog {\n         LEVELDB     = (1 << 20),\n         VALIDATION  = (1 << 21),\n         I2P         = (1 << 22),\n+        IPC         = (1 << 23),\n         ALL         = ~(uint32_t)0,\n     };\n "
      },
      {
        "sha": "c23b903bce1ded63ba82d0a8e6f673bd7aad4647",
        "filename": "test/lint/lint-include-guards.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10afdf0280fa93bfffb0a7665c60dc155cd84514/test/lint/lint-include-guards.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10afdf0280fa93bfffb0a7665c60dc155cd84514/test/lint/lint-include-guards.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-include-guards.sh?ref=10afdf0280fa93bfffb0a7665c60dc155cd84514",
        "patch": "@@ -15,7 +15,7 @@ REGEXP_EXCLUDE_FILES_WITH_PREFIX=\"src/(crypto/ctaes/|leveldb/|crc32c/|secp256k1/\n EXIT_CODE=0\n for HEADER_FILE in $(git ls-files -- \"*.h\" | grep -vE \"^${REGEXP_EXCLUDE_FILES_WITH_PREFIX}\")\n do\n-    HEADER_ID_BASE=$(cut -f2- -d/ <<< \"${HEADER_FILE}\" | sed \"s/\\.h$//g\" | tr / _ | tr \"[:lower:]\" \"[:upper:]\")\n+    HEADER_ID_BASE=$(cut -f2- -d/ <<< \"${HEADER_FILE}\" | sed \"s/\\.h$//g\" | tr / _ | tr - _ | tr \"[:lower:]\" \"[:upper:]\")\n     HEADER_ID=\"${HEADER_ID_PREFIX}${HEADER_ID_BASE}${HEADER_ID_SUFFIX}\"\n     if [[ $(grep -cE \"^#(ifndef|define) ${HEADER_ID}\" \"${HEADER_FILE}\") != 2 ]]; then\n         echo \"${HEADER_FILE} seems to be missing the expected include guard:\""
      }
    ]
  },
  {
    "sha": "ddf7ecc8dfc64cf121099fb047e1ac871de94f4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGY3ZWNjOGRmYzY0Y2YxMjEwOTlmYjA0N2UxYWM4NzFkZTk0ZjRj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-04-23T08:02:50Z"
      },
      "message": "multiprocess: Add bitcoin-node process spawning support\n\nAdd bitcoin-node startup code to let it spawn and be spawned by other\nprocesses",
      "tree": {
        "sha": "a0f922fe9b8ffc608a549e5693f1285c9c90c82d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0f922fe9b8ffc608a549e5693f1285c9c90c82d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10afdf0280fa93bfffb0a7665c60dc155cd84514",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10afdf0280fa93bfffb0a7665c60dc155cd84514",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10afdf0280fa93bfffb0a7665c60dc155cd84514"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 105,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c2c32af8380801513340bc9b154ad9e4862cb4f1",
        "filename": "build_msvc/bitcoind/bitcoind.vcxproj",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c/build_msvc/bitcoind/bitcoind.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c/build_msvc/bitcoind/bitcoind.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoind/bitcoind.vcxproj?ref=ddf7ecc8dfc64cf121099fb047e1ac871de94f4c",
        "patch": "@@ -10,6 +10,9 @@\n   </PropertyGroup>\n   <ItemGroup>\n     <ClCompile Include=\"..\\..\\src\\bitcoind.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\init\\bitcoind.cpp\">\n+      <ObjectFileName>$(IntDir)init_bitcoind.obj</ObjectFileName>\n+    </ClCompile>\n   </ItemGroup>\n   <ItemGroup>\n     <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">"
      },
      {
        "sha": "71dd7b65a0844abbfb8793d00ef05f49b975c81e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ddf7ecc8dfc64cf121099fb047e1ac871de94f4c",
        "patch": "@@ -640,13 +640,13 @@ bitcoin_bin_ldadd = \\\n \n bitcoin_bin_ldadd += $(BOOST_LIBS) $(BDB_LIBS) $(MINIUPNPC_LIBS) $(NATPMP_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(ZMQ_LIBS) $(SQLITE_LIBS)\n \n-bitcoind_SOURCES = $(bitcoin_daemon_sources)\n+bitcoind_SOURCES = $(bitcoin_daemon_sources) init/bitcoind.cpp\n bitcoind_CPPFLAGS = $(bitcoin_bin_cppflags)\n bitcoind_CXXFLAGS = $(bitcoin_bin_cxxflags)\n bitcoind_LDFLAGS = $(bitcoin_bin_ldflags)\n bitcoind_LDADD = $(LIBBITCOIN_SERVER) $(bitcoin_bin_ldadd)\n \n-bitcoin_node_SOURCES = $(bitcoin_daemon_sources)\n+bitcoin_node_SOURCES = $(bitcoin_daemon_sources) init/bitcoin-node.cpp\n bitcoin_node_CPPFLAGS = $(bitcoin_bin_cppflags)\n bitcoin_node_CXXFLAGS = $(bitcoin_bin_cxxflags)\n bitcoin_node_LDFLAGS = $(bitcoin_bin_ldflags)"
      },
      {
        "sha": "cf9e4fad44d9c17c862c802ade9d0326a1263910",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=ddf7ecc8dfc64cf121099fb047e1ac871de94f4c",
        "patch": "@@ -12,6 +12,7 @@\n #include <compat.h>\n #include <init.h>\n #include <interfaces/chain.h>\n+#include <interfaces/init.h>\n #include <node/context.h>\n #include <node/ui_interface.h>\n #include <noui.h>\n@@ -104,10 +105,8 @@ int fork_daemon(bool nochdir, bool noclose, TokenPipeEnd& endpoint)\n \n #endif\n \n-static bool AppInit(int argc, char* argv[])\n+static bool AppInit(NodeContext& node, int argc, char* argv[])\n {\n-    NodeContext node;\n-\n     bool fRet = false;\n \n     util::ThreadSetInternalName(\"init\");\n@@ -254,10 +253,18 @@ int main(int argc, char* argv[])\n     util::WinCmdLineArgs winArgs;\n     std::tie(argc, argv) = winArgs.get();\n #endif\n+\n+    NodeContext node;\n+    int exit_status;\n+    std::unique_ptr<interfaces::Init> init = interfaces::MakeNodeInit(node, argc, argv, exit_status);\n+    if (!init) {\n+        return exit_status;\n+    }\n+\n     SetupEnvironment();\n \n     // Connect bitcoind signal handlers\n     noui_connect();\n \n-    return (AppInit(argc, argv) ? EXIT_SUCCESS : EXIT_FAILURE);\n+    return (AppInit(node, argc, argv) ? EXIT_SUCCESS : EXIT_FAILURE);\n }"
      },
      {
        "sha": "b1c8a5b561b2bfb032bc646fe3300503dfaefe2c",
        "filename": "src/init/bitcoin-node.cpp",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c/src/init/bitcoin-node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c/src/init/bitcoin-node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-node.cpp?ref=ddf7ecc8dfc64cf121099fb047e1ac871de94f4c",
        "patch": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n+#include <node/context.h>\n+\n+#include <memory>\n+\n+namespace init {\n+namespace {\n+const char* EXE_NAME = \"bitcoin-node\";\n+\n+class BitcoinNodeInit : public interfaces::Init\n+{\n+public:\n+    BitcoinNodeInit(NodeContext& node, const char* arg0)\n+        : m_node(node),\n+          m_ipc(interfaces::MakeIpc(EXE_NAME, arg0, *this))\n+    {\n+        m_node.init = this;\n+    }\n+    interfaces::Ipc* ipc() override { return m_ipc.get(); }\n+    NodeContext& m_node;\n+    std::unique_ptr<interfaces::Ipc> m_ipc;\n+};\n+} // namespace\n+} // namespace init\n+\n+namespace interfaces {\n+std::unique_ptr<Init> MakeNodeInit(NodeContext& node, int argc, char* argv[], int& exit_status)\n+{\n+    auto init = std::make_unique<init::BitcoinNodeInit>(node, argc > 0 ? argv[0] : \"\");\n+    // Check if bitcoin-node is being invoked as an IPC server. If so, then\n+    // bypass normal execution and just respond to requests over the IPC\n+    // channel and return null.\n+    if (init->m_ipc->startSpawnedProcess(argc, argv, exit_status)) {\n+        return nullptr;\n+    }\n+    return init;\n+}\n+} // namespace interfaces"
      },
      {
        "sha": "1e17ce4d3ca1d2b884f29c6c45fbc94597d54d88",
        "filename": "src/init/bitcoind.cpp",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c/src/init/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c/src/init/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoind.cpp?ref=ddf7ecc8dfc64cf121099fb047e1ac871de94f4c",
        "patch": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <interfaces/init.h>\n+#include <node/context.h>\n+\n+#include <memory>\n+\n+namespace init {\n+namespace {\n+class BitcoindInit : public interfaces::Init\n+{\n+public:\n+    BitcoindInit(NodeContext& node) : m_node(node)\n+    {\n+        m_node.init = this;\n+    }\n+    NodeContext& m_node;\n+};\n+} // namespace\n+} // namespace init\n+\n+namespace interfaces {\n+std::unique_ptr<Init> MakeNodeInit(NodeContext& node, int argc, char* argv[], int& exit_status)\n+{\n+    return std::make_unique<init::BitcoindInit>(node);\n+}\n+} // namespace interfaces"
      },
      {
        "sha": "8aea027f011e6a8dd2c4495e3802ed7180565ea1",
        "filename": "src/interfaces/init.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c/src/interfaces/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c/src/interfaces/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/init.h?ref=ddf7ecc8dfc64cf121099fb047e1ac871de94f4c",
        "patch": "@@ -31,6 +31,20 @@ class Init\n     virtual std::unique_ptr<WalletClient> makeWalletClient(Chain& chain);\n     virtual Ipc* ipc();\n };\n+\n+//! Return implementation of Init interface for the node process. If the argv\n+//! indicates that this is a child process spawned to handle requests from a\n+//! parent process, this blocks and handles requests, then returns null and a\n+//! status code to exit with. If this returns non-null, the caller can start up\n+//! normally and use the Init object to spawn and connect to other processes\n+//! while it is running.\n+std::unique_ptr<Init> MakeNodeInit(NodeContext& node, int argc, char* argv[], int& exit_status);\n+\n+//! Return implementation of Init interface for the wallet process.\n+std::unique_ptr<Init> MakeWalletInit(int argc, char* argv[], int& exit_status);\n+\n+//! Return implementation of Init interface for the gui process.\n+std::unique_ptr<Init> MakeGuiInit(int argc, char* argv[]);\n } // namespace interfaces\n \n #endif // BITCOIN_INTERFACES_INIT_H"
      },
      {
        "sha": "06adb33a80e9ac6f98c641d9287d39c7597e45fc",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=ddf7ecc8dfc64cf121099fb047e1ac871de94f4c",
        "patch": "@@ -22,6 +22,7 @@ class PeerManager;\n namespace interfaces {\n class Chain;\n class ChainClient;\n+class Init;\n class WalletClient;\n } // namespace interfaces\n \n@@ -36,6 +37,8 @@ class WalletClient;\n //! any member functions. It should just be a collection of references that can\n //! be used without pulling in unwanted dependencies or functionality.\n struct NodeContext {\n+    //! Init interface for initializing current process and connecting to other processes.\n+    interfaces::Init* init{nullptr};\n     std::unique_ptr<CAddrMan> addrman;\n     std::unique_ptr<CConnman> connman;\n     std::unique_ptr<CTxMemPool> mempool;"
      }
    ]
  },
  {
    "sha": "7d76cf667eff512043a28d4407cc89f58796c42b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDc2Y2Y2NjdlZmY1MTIwNDNhMjhkNDQwN2NjODlmNTg3OTZjNDJi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-04-23T08:02:50Z"
      },
      "message": "multiprocess: Add comments and documentation",
      "tree": {
        "sha": "184c1ac31cbe53a239090dcd4598077a7394e02f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/184c1ac31cbe53a239090dcd4598077a7394e02f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d76cf667eff512043a28d4407cc89f58796c42b",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d76cf667eff512043a28d4407cc89f58796c42b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d76cf667eff512043a28d4407cc89f58796c42b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d76cf667eff512043a28d4407cc89f58796c42b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddf7ecc8dfc64cf121099fb047e1ac871de94f4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddf7ecc8dfc64cf121099fb047e1ac871de94f4c"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 66,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e3f389a6d3f89481b33e0dd9f1f398f699f96339",
        "filename": "doc/multiprocess.md",
        "status": "modified",
        "additions": 38,
        "deletions": 1,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d76cf667eff512043a28d4407cc89f58796c42b/doc/multiprocess.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d76cf667eff512043a28d4407cc89f58796c42b/doc/multiprocess.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/multiprocess.md?ref=7d76cf667eff512043a28d4407cc89f58796c42b",
        "patch": "@@ -15,7 +15,7 @@ Specific next steps after [#10102](https://github.com/bitcoin/bitcoin/pull/10102\n \n ## Debugging\n \n-After [#10102](https://github.com/bitcoin/bitcoin/pull/10102), the `-debug=ipc` command line option can be used to see requests and responses between processes.\n+The `-debug=ipc` command line option can be used to see requests and responses between processes.\n \n ## Installation\n \n@@ -33,3 +33,40 @@ BITCOIND=bitcoin-node test/functional/test_runner.py\n The configure script will pick up settings and library locations from the depends directory, so there is no need to pass `--enable-multiprocess` as a separate flag when using the depends system (it's controlled by the `MULTIPROCESS=1` option).\n \n Alternately, you can install [Cap'n Proto](https://capnproto.org/) and [libmultiprocess](https://github.com/chaincodelabs/libmultiprocess) packages on your system, and just run `./configure --enable-multiprocess` without using the depends system. The configure script will be able to locate the installed packages via [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/). See [Installation](https://github.com/chaincodelabs/libmultiprocess#installation) section of the libmultiprocess readme for install steps. See [build-unix.md](build-unix.md) and [build-osx.md](build-osx.md) for information about installing dependencies in general.\n+\n+## IPC implementation details\n+\n+Cross process Node, Wallet, and Chain interfaces are defined in\n+[`src/interfaces/`](../src/interfaces/). These are C++ classes which follow\n+[conventions](developer-notes.md#internal-interface-guidelines), like passing\n+serializable arguments so they can be called from different processes, and\n+making methods pure virtual so they can have proxy implementations that forward\n+calls between processes.\n+\n+When Wallet, Node, and Chain code is running in the same process, calling any\n+interface method invokes the implementation directly. When code is running in\n+different processes, calling an interface method invokes a proxy interface\n+implementation that communicates with a remote process and invokes the real\n+implementation in the remote process. The\n+[libmultiprocess](https://github.com/chaincodelabs/libmultiprocess) code\n+generation tool internally generates proxy client classes and proxy server\n+classes for this purpose that are thin wrappers around Cap'n Proto\n+[client](https://capnproto.org/cxxrpc.html#clients) and\n+[server](https://capnproto.org/cxxrpc.html#servers) classes, which handle the\n+actual serialization and socket communication.\n+\n+As much as possible, calls between processes are meant to work the same as\n+calls within a single process without adding limitations or requiring extra\n+implementation effort. Processes communicate with each other by calling regular\n+[C++ interface methods](../src/interfaces/README.md). Method arguments and\n+return values are automatically serialized and sent between processes. Object\n+references and `std::function` arguments are automatically tracked and mapped\n+to allow invoked code to call back into invoking code at any time, and there is\n+a 1:1 threading model where any thread invoking a method in another process has\n+a corresponding thread in the invoked process responsible for executing all\n+method calls from the source thread, without blocking I/O or holding up another\n+call, and using the same thread local variables, locks, and callbacks between\n+calls. The forwarding, tracking, and threading is implemented inside the\n+[libmultiprocess](https://github.com/chaincodelabs/libmultiprocess) library\n+which has the design goal of making calls between processes look like calls in\n+the same process to the extent possible."
      },
      {
        "sha": "97167d5298f0f042efea8295abd5545547dae72c",
        "filename": "src/interfaces/README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d76cf667eff512043a28d4407cc89f58796c42b/src/interfaces/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d76cf667eff512043a28d4407cc89f58796c42b/src/interfaces/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/README.md?ref=7d76cf667eff512043a28d4407cc89f58796c42b",
        "patch": "@@ -12,6 +12,8 @@ The following interfaces are defined here:\n \n * [`Handler`](handler.h) \u2014 returned by `handleEvent` methods on interfaces above and used to manage lifetimes of event handlers.\n \n-* [`Init`](init.h) \u2014 used by multiprocess code to access interfaces above on startup. Added in [#10102](https://github.com/bitcoin/bitcoin/pull/10102).\n+* [`Init`](init.h) \u2014 used by multiprocess code to access interfaces above on startup. Added in [#19160](https://github.com/bitcoin/bitcoin/pull/19160).\n \n-The interfaces above define boundaries between major components of bitcoin code (node, wallet, and gui), making it possible for them to run in different processes, and be tested, developed, and understood independently. These interfaces are not currently designed to be stable or to be used externally.\n+* [`Ipc`](ipc.h) \u2014 used by multiprocess code to access `Init` interface across processes. Added in [#19160](https://github.com/bitcoin/bitcoin/pull/19160).\n+\n+The interfaces above define boundaries between major components of bitcoin code (node, wallet, and gui), making it possible for them to run in [different processes](../../doc/multiprocess.md), and be tested, developed, and understood independently. These interfaces are not currently designed to be stable or to be used externally."
      },
      {
        "sha": "e9e6c78053d3e3a0ea411c28ba47c84c657cd992",
        "filename": "src/interfaces/ipc.h",
        "status": "modified",
        "additions": 24,
        "deletions": 1,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d76cf667eff512043a28d4407cc89f58796c42b/src/interfaces/ipc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d76cf667eff512043a28d4407cc89f58796c42b/src/interfaces/ipc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/ipc.h?ref=7d76cf667eff512043a28d4407cc89f58796c42b",
        "patch": "@@ -13,7 +13,30 @@ namespace interfaces {\n class Init;\n \n //! Interface providing access to interprocess-communication (IPC)\n-//! functionality.\n+//! functionality. The IPC implementation is responsible for establishing\n+//! connections between a controlling process and a process being controlled.\n+//! When a connection is established, the process being controlled returns an\n+//! interfaces::Init pointer to the controlling process, which the controlling\n+//! process can use to get access to other interfaces and functionality.\n+//!\n+//! When spawning a new process, the steps are:\n+//!\n+//! 1. The controlling process calls interfaces::Ipc::spawnProcess(), which\n+//!    calls ipc::Process::spawn(), which spawns a new process and returns a\n+//!    socketpair file descriptor for communicating with it.\n+//!    interfaces::Ipc::spawnProcess() then calls ipc::Protocol::connect()\n+//!    passing the socketpair descriptor, which returns a local proxy\n+//!    interfaces::Init implementation calling remote interfaces::Init methods.\n+//! 2. The spawned process calls interfaces::Ipc::startSpawnProcess(), which\n+//!    calls ipc::Process::checkSpawned() to read command line arguments and\n+//!    determine whether it is a spawned process and what socketpair file\n+//!    descriptor it should use. It then calls ipc::Protocol::serve() to handle\n+//!    incoming requests from the socketpair and invoke interfaces::Init\n+//!    interface methods, and exit when the socket is closed.\n+//! 3. The controlling process calls local proxy interfaces::Init object methods\n+//!    to make other proxy objects calling other remote interfaces. It can also\n+//!    destroy the initial interfaces::Init object to close the connection and\n+//!    shut down the spawned process.\n class Ipc\n {\n public:"
      }
    ]
  },
  {
    "sha": "84934bf70e11fe4cda1cfda60113a54895d4fdd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDkzNGJmNzBlMTFmZTRjZGExY2ZkYTYwMTEzYTU0ODk1ZDRmZGQ1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-11-24T18:59:33Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-04-23T08:02:50Z"
      },
      "message": "multiprocess: Add echoipc RPC method and test\n\nAdd simple interfaces::Echo IPC interface with one method that just takes and\nreturns a string, to test multiprocess framework and provide an example of how\nit can be used to spawn and call between processes.",
      "tree": {
        "sha": "a76e8bd27d3e32a9f433d6f24857d6b96e499efc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a76e8bd27d3e32a9f433d6f24857d6b96e499efc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84934bf70e11fe4cda1cfda60113a54895d4fdd5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84934bf70e11fe4cda1cfda60113a54895d4fdd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84934bf70e11fe4cda1cfda60113a54895d4fdd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84934bf70e11fe4cda1cfda60113a54895d4fdd5/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d76cf667eff512043a28d4407cc89f58796c42b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d76cf667eff512043a28d4407cc89f58796c42b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d76cf667eff512043a28d4407cc89f58796c42b"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 121,
      "deletions": 0
    },
    "files": [
      {
        "sha": "447015fc6694be8d461080606bc2ed90529ef8b2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=84934bf70e11fe4cda1cfda60113a54895d4fdd5",
        "patch": "@@ -159,6 +159,7 @@ BITCOIN_CORE_H = \\\n   init.h \\\n   init/common.h \\\n   interfaces/chain.h \\\n+  interfaces/echo.h \\\n   interfaces/handler.h \\\n   interfaces/init.h \\\n   interfaces/ipc.h \\\n@@ -563,6 +564,7 @@ libbitcoin_util_a_SOURCES = \\\n   compat/glibcxx_sanity.cpp \\\n   compat/strnlen.cpp \\\n   fs.cpp \\\n+  interfaces/echo.cpp \\\n   interfaces/handler.cpp \\\n   interfaces/init.cpp \\\n   logging.cpp \\\n@@ -815,6 +817,7 @@ if HARDEN\n endif\n \n libbitcoin_ipc_mpgen_input = \\\n+  ipc/capnp/echo.capnp \\\n   ipc/capnp/init.capnp\n EXTRA_DIST += $(libbitcoin_ipc_mpgen_input)\n %.capnp:"
      },
      {
        "sha": "49684ede83eabf8870f788491d8ec24857a4d888",
        "filename": "src/init/bitcoin-node.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/init/bitcoin-node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/init/bitcoin-node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-node.cpp?ref=84934bf70e11fe4cda1cfda60113a54895d4fdd5",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <interfaces/echo.h>\n #include <interfaces/init.h>\n #include <interfaces/ipc.h>\n #include <node/context.h>\n@@ -21,6 +22,7 @@ class BitcoinNodeInit : public interfaces::Init\n     {\n         m_node.init = this;\n     }\n+    std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }\n     interfaces::Ipc* ipc() override { return m_ipc.get(); }\n     NodeContext& m_node;\n     std::unique_ptr<interfaces::Ipc> m_ipc;"
      },
      {
        "sha": "9bbb42217b02687a219367a1fe9e9a8694b64212",
        "filename": "src/interfaces/echo.cpp",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/interfaces/echo.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/interfaces/echo.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/echo.cpp?ref=84934bf70e11fe4cda1cfda60113a54895d4fdd5",
        "patch": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <interfaces/echo.h>\n+\n+#include <memory>\n+\n+namespace interfaces {\n+namespace {\n+class EchoImpl : public Echo\n+{\n+public:\n+    std::string echo(const std::string& echo) override { return echo; }\n+};\n+} // namespace\n+std::unique_ptr<Echo> MakeEcho() { return std::make_unique<EchoImpl>(); }\n+} // namespace interfaces"
      },
      {
        "sha": "5578d9d9e62395805cb819508704906f3b4e2d5f",
        "filename": "src/interfaces/echo.h",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/interfaces/echo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/interfaces/echo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/echo.h?ref=84934bf70e11fe4cda1cfda60113a54895d4fdd5",
        "patch": "@@ -0,0 +1,26 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACES_ECHO_H\n+#define BITCOIN_INTERFACES_ECHO_H\n+\n+#include <memory>\n+#include <string>\n+\n+namespace interfaces {\n+//! Simple string echoing interface for testing.\n+class Echo\n+{\n+public:\n+    virtual ~Echo() {}\n+\n+    //! Echo provided string.\n+    virtual std::string echo(const std::string& echo) = 0;\n+};\n+\n+//! Return implementation of Echo interface.\n+std::unique_ptr<Echo> MakeEcho();\n+} // namespace interfaces\n+\n+#endif // BITCOIN_INTERFACES_ECHO_H"
      },
      {
        "sha": "a3c949e6169d1d230a15d725eeb191410eb6c5df",
        "filename": "src/interfaces/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/interfaces/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/interfaces/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/init.cpp?ref=84934bf70e11fe4cda1cfda60113a54895d4fdd5",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <interfaces/chain.h>\n+#include <interfaces/echo.h>\n #include <interfaces/init.h>\n #include <interfaces/node.h>\n #include <interfaces/wallet.h>\n@@ -11,5 +12,6 @@ namespace interfaces {\n std::unique_ptr<Node> Init::makeNode() { return {}; }\n std::unique_ptr<Chain> Init::makeChain() { return {}; }\n std::unique_ptr<WalletClient> Init::makeWalletClient(Chain& chain) { return {}; }\n+std::unique_ptr<Echo> Init::makeEcho() { return {}; }\n Ipc* Init::ipc() { return nullptr; }\n } // namespace interfaces"
      },
      {
        "sha": "2a38054a172fb285c5522b50b2d689103ede01ae",
        "filename": "src/interfaces/init.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/interfaces/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/interfaces/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/init.h?ref=84934bf70e11fe4cda1cfda60113a54895d4fdd5",
        "patch": "@@ -11,6 +11,7 @@ struct NodeContext;\n \n namespace interfaces {\n class Chain;\n+class Echo;\n class Ipc;\n class Node;\n class WalletClient;\n@@ -29,6 +30,7 @@ class Init\n     virtual std::unique_ptr<Node> makeNode();\n     virtual std::unique_ptr<Chain> makeChain();\n     virtual std::unique_ptr<WalletClient> makeWalletClient(Chain& chain);\n+    virtual std::unique_ptr<Echo> makeEcho();\n     virtual Ipc* ipc();\n };\n "
      },
      {
        "sha": "df36ee0de376c2e7aab19dd80ae4b33e1d53d373",
        "filename": "src/ipc/capnp/echo.capnp",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/ipc/capnp/echo.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/ipc/capnp/echo.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/echo.capnp?ref=84934bf70e11fe4cda1cfda60113a54895d4fdd5",
        "patch": "@@ -0,0 +1,17 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0x888b4f7f51e691f7;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"interfaces/echo.h\");\n+$Proxy.include(\"ipc/capnp/echo.capnp.h\");\n+\n+interface Echo $Proxy.wrap(\"interfaces::Echo\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    echo @1 (context :Proxy.Context, echo: Text) -> (result :Text);\n+}"
      },
      {
        "sha": "42031441b597c5795ed96ce1d513938d19e2e1e1",
        "filename": "src/ipc/capnp/init-types.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/ipc/capnp/init-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/ipc/capnp/init-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init-types.h?ref=84934bf70e11fe4cda1cfda60113a54895d4fdd5",
        "patch": "@@ -4,4 +4,7 @@\n \n #ifndef BITCOIN_IPC_CAPNP_INIT_TYPES_H\n #define BITCOIN_IPC_CAPNP_INIT_TYPES_H\n+\n+#include <ipc/capnp/echo.capnp.proxy-types.h>\n+\n #endif // BITCOIN_IPC_CAPNP_INIT_TYPES_H"
      },
      {
        "sha": "e6d358c66556e4f5f0914b58ba3716dd7b140d7c",
        "filename": "src/ipc/capnp/init.capnp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/ipc/capnp/init.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/ipc/capnp/init.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init.capnp?ref=84934bf70e11fe4cda1cfda60113a54895d4fdd5",
        "patch": "@@ -8,9 +8,13 @@ using Cxx = import \"/capnp/c++.capnp\";\n $Cxx.namespace(\"ipc::capnp::messages\");\n \n using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"interfaces/echo.h\");\n $Proxy.include(\"interfaces/init.h\");\n $Proxy.includeTypes(\"ipc/capnp/init-types.h\");\n \n+using Echo = import \"echo.capnp\";\n+\n interface Init $Proxy.wrap(\"interfaces::Init\") {\n     construct @0 (threadMap: Proxy.ThreadMap) -> (threadMap :Proxy.ThreadMap);\n+    makeEcho @1 (context :Proxy.Context) -> (result :Echo.Echo);\n }"
      },
      {
        "sha": "09b32345a28abb69232b422ec378075f7e6fc200",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84934bf70e11fe4cda1cfda60113a54895d4fdd5/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=84934bf70e11fe4cda1cfda60113a54895d4fdd5",
        "patch": "@@ -7,6 +7,9 @@\n #include <index/blockfilterindex.h>\n #include <index/txindex.h>\n #include <interfaces/chain.h>\n+#include <interfaces/echo.h>\n+#include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <key_io.h>\n #include <node/context.h>\n #include <outputtype.h>\n@@ -644,6 +647,43 @@ static RPCHelpMan echo(const std::string& name)\n static RPCHelpMan echo() { return echo(\"echo\"); }\n static RPCHelpMan echojson() { return echo(\"echojson\"); }\n \n+static RPCHelpMan echoipc()\n+{\n+    return RPCHelpMan{\n+        \"echoipc\",\n+        \"\\nEcho back the input argument, passing it through a spawned process in a multiprocess build.\\n\"\n+        \"This command is for testing.\\n\",\n+        {{\"arg\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The string to echo\",}},\n+        RPCResult{RPCResult::Type::STR, \"echo\", \"The echoed string.\"},\n+        RPCExamples{HelpExampleCli(\"echo\", \"\\\"Hello world\\\"\") +\n+                    HelpExampleRpc(\"echo\", \"\\\"Hello world\\\"\")},\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n+            std::unique_ptr<interfaces::Echo> echo;\n+            if (interfaces::Ipc* ipc = Assert(EnsureAnyNodeContext(request.context).init)->ipc()) {\n+                // Spawn a new bitcoin-node process and call makeEcho to get a\n+                // client pointer to a interfaces::Echo instance running in\n+                // that process. This is just for testing. A slightly more\n+                // realistic test spawning a different executable instead of\n+                // the same executable would add a new bitcoin-echo executable,\n+                // and spawn bitcoin-echo below instead of bitcoin-node. But\n+                // using bitcoin-node avoids the need to build and install a\n+                // new executable just for this one test.\n+                auto init = ipc->spawnProcess(\"bitcoin-node\");\n+                echo = init->makeEcho();\n+                ipc->addCleanup(*echo, [init = init.release()] { delete init; });\n+            } else {\n+                // IPC support is not available because this is a bitcoind\n+                // process not a bitcoind-node process, so just create a local\n+                // interfaces::Echo object and return it so the `echoipc` RPC\n+                // method will work, and the python test calling `echoipc`\n+                // can expect the same result.\n+                echo = interfaces::MakeEcho();\n+            }\n+            return echo->echo(request.params[0].get_str());\n+        },\n+    };\n+}\n+\n static UniValue SummaryToJSON(const IndexSummary&& summary, std::string index_name)\n {\n     UniValue ret_summary(UniValue::VOBJ);\n@@ -719,6 +759,7 @@ static const CRPCCommand commands[] =\n     { \"hidden\",             &mockscheduler,           },\n     { \"hidden\",             &echo,                    },\n     { \"hidden\",             &echojson,                },\n+    { \"hidden\",             &echoipc,                 },\n };\n // clang-format on\n     for (const auto& c : commands) {"
      },
      {
        "sha": "a80fa596cd9eead0a2b7297895953502ea8e00a5",
        "filename": "test/functional/rpc_misc.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84934bf70e11fe4cda1cfda60113a54895d4fdd5/test/functional/rpc_misc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84934bf70e11fe4cda1cfda60113a54895d4fdd5/test/functional/rpc_misc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_misc.py?ref=84934bf70e11fe4cda1cfda60113a54895d4fdd5",
        "patch": "@@ -61,6 +61,9 @@ def run_test(self):\n         node.logging(include=['qt'])\n         assert_equal(node.logging()['qt'], True)\n \n+        self.log.info(\"test echoipc (testing spawned process in multiprocess build)\")\n+        assert_equal(node.echoipc(\"hello\"), \"hello\")\n+\n         self.log.info(\"test getindexinfo\")\n         # Without any indices running the RPC returns an empty object\n         assert_equal(node.getindexinfo(), {})"
      }
    ]
  }
]