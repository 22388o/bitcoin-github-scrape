DrahtBot,2020-06-04 00:27:49,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20487 (Add syscall sandboxing using seccomp-bpf (Linux secure computing mode) by practicalswift)\n* #19461 (multiprocess:",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-638529365,638529365,
ryanofsky,2020-06-05 13:41:03,"Updated d38f790138089b2956207b5e98b74e1e0e116c5c -> 99562989e749e002c07d3cda1f95a5781160b187 ([`pr/ipc-echo.1`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-echo.1) -> [`pr/ipc-echo.2`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-echo.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipc-echo.1..pr/ipc-echo.2)) fixing missing include causing build failures https://travis",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-639486920,639486920,
hebasto,2020-06-11 09:41:27,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-642536017,642536017,
jonatack,2020-09-26 19:58:56,"Concept ACK, deserves review.",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-699541179,699541179,
meshcollider,2020-09-29 12:50:20,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-700680735,700680735,
ariard,2020-10-28 17:49:34,"@ryanofsky See my graphical representation proposal here : https://github.com/ariard/bitcoin/tree/ipc-echo-review/src/interfaces..\n\nJoint with a walk-through for both the interfaces initialization and a message round-trip. ",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-718103715,718103715,
ryanofsky,2020-12-08 21:36:44,"Rebased a3d7a9864b16432b567a1c31613e5e5fe9eb1231 -> 5951eea6753433c20d690fb0d4716dd3eeff4ab4 ([`pr/ipc-echo.19`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-echo.19) -> [`pr/ipc-echo.20`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-echo.20), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipc-echo.19-rebase..pr/ipc-echo.20)) after base PR #20494 merge with include fixes t",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-741072350,741072350,
jamesob,2021-01-14 03:22:14,Concept ACK. Will start review tomorrow evening.,https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-759899920,759899920,
ryanofsky,2021-01-16 18:03:11,"Took a fresh look at this (thanks for prompting, James!) and had some ideas for making this easier to review:\n\n- I think I can entirely drop ""multiprocess: Add interfaces base class with addCloseHook method"" commit 543070ea18a501cd2bb895bc3ec062ffc473891b\n- I can drop the little stub files in the ""multiprocess: Add echoipc RPC method and test"" commit e9f438870169e04edda15badf8c4d0f174e32970.",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-761607197,761607197,
jonatack,2021-01-16 18:09:28,"Yes, been meaning to get to this for a while and will do so ASAP.",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-761608547,761608547,
dongcarl,2021-01-22 21:46:04,"Light Code-Review ACK e9f438870169e04edda15badf8c4d0f174e32970\n\nNit: I'm not 100% sure how to approach this, but perhaps there's a more ergonomic way to get the final interface out from `spawnProcess` than doing ""out-param-through-lamdba-capturing""?\n\n-----\n\nThanks to ryanofsky's offline help, I wrote down some notes on how this all works, hope it helps other reviewers (please also let ",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-765702817,765702817,
ryanofsky,2021-01-28 21:19:00,"Rebased due to conflict, also made all the cleanups suggested https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-761607197 and was able to get rid of confusing lambda @dongcarl pointed out https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-765702817\n\n---\n\nRebased e9f438870169e04edda15badf8c4d0f174e32970 -> f08e238945342151d39e18d577cd6a94603e4397 ([`pr/ipc-echo.23`](https:/",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-769403702,769403702,
jonatack,2021-02-02 17:06:24,"Seeing the following issue when attempting to build f08e238945342151d39e18d577cd6a94603e4397 with gcc 10 and `--enable-multiprocess`:\n```\n  GEN      ipc/capnp/echo.capnp.c++\nipc/capnp/echo.capnp:11:8-15: error: 'Proxy' has no member named 'include'\nipc/capnp/echo.capnp:12:8-15: error: 'Proxy' has no member named 'include'\nterminate called after throwing an instance of 'std::runtime_error",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-771795995,771795995,
jonatack,2021-02-02 17:16:30,"Ah, reinstalled manually per the instructions in https://github.com/chaincodelabs/libmultiprocess/blob/master/README.md and now this pull builds with `--enable-multiprocess`. I had already installed in September 2020 but it appears I needed to do it again.",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-771806914,771806914,
ryanofsky,2021-02-02 17:49:57,Thanks for testing the manual install! Note it's also possible to test this with depends using the commands from [`doc/multiprocess.md#installation`](https://github.com/ryanofsky/bitcoin/blob/pr/ipc-echo/doc/multiprocess.md#installation),https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-771836711,771836711,
dongcarl,2021-02-05 22:09:41,"Reviewed the diff https://github.com/ryanofsky/bitcoin/compare/pr/ipc-echo.23-rebase..pr/ipc-echo.24\n- Base interface removed\n- Added methods to make Node, Chain, WalletClient interfaces\n- Changed call semantic of Ipc::spawnProcess to return the Init interface\n- Added Ipc::addCleanup to attach cleanup function to interface\n\nryanofsky: Wondering what [`pr/ipc-echo.23-rebase..pr/ipc-echo",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-774315229,774315229,
ryanofsky,2021-02-05 22:29:26,"> ryanofsky: Wondering what [`pr/ipc-echo.23-rebase..pr/ipc-echo.24`#diff-a1848eb83b](https://github.com/ryanofsky/bitcoin/compare/pr/ipc-echo.23-rebase..pr/ipc-echo.24#diff-a1848eb83bcd5e96fc038aad14776327b6d339dcc9d684a8771eb82b7f58ba1eR11-R12) is for?\n\nThe new annotations add `#include` statements to generated files. The annotations are defined at https://github.com/ryanofsky/libmultiproces",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-774322865,774322865,
dongcarl,2021-02-16 20:30:26,"A few more notes from reviewing the code today:\n\n- Trivial implementations found in `src/interfaces/init.cpp` for `interfaces::Init` methods are required so that classes which inherit from `interfaces::Init` wonâ€™t be considered abstract classes and can be allocated and returned in `interfaces::MakeNodeInit`.\n- Polymorphism for `interfaces::MakeNodeInit` (e.g. whether the one in `src/init/bit",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-780099295,780099295,
ryanofsky,2021-02-19 18:13:33,"Updated 5e55c5a29633c19df2008653bf9285b338ff1088 -> b2abe3f062c69663ae97bed239aa0a118e6a081c ([`pr/ipc-echo.25`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-echo.25) -> [`pr/ipc-echo.26`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-echo.26), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipc-echo.25..pr/ipc-echo.26)) with a few more tweaks, mostly comment changes.",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-782247544,782247544,
dongcarl,2021-03-05 23:19:09,"Code Review ACK e1d4b13d4ecb2755ed2bc33e1ed0ce6df393b90d\n\nRead through all the commits and played around with changing the code to convince myself this was correct.\n\nOne thing that I noticed through reviewing and re-reviewing is that it seems the abstractions are deliberately designed in a way such that if we really wanted to, we can switch between different transports and even completely ",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-791784095,791784095,
ariard,2021-03-11 15:24:17,"Code Review ACK 36f1fbf, thanks for taking the suggestions.\n\nNeeds rebase.",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-796816352,796816352,
dongcarl,2021-03-12 19:32:47,"re-ACK 36f1fbf50a0f2c96dfd1f7fe84d407f39a1906bd\n\n-----\n\nNoticed changes (no apparent behavioural changes):\n- Documentation updates\n- Renamed `arg0` parameter to `process_arg0`\n",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-797706893,797706893,
jamesob,2021-03-16 15:30:45,"I've spent the last day or so reading through libmultiprocess (evidenced by [a few breadcrumbs](https://github.com/chaincodelabs/libmultiprocess/pull/45)) and while I feel I have lexically parsed the contents of that repo and have found nothing obviously wrong or malicious, I certainly wouldn't be able to recreate the work there and can't attest to its correctness. The contents of, say, [the type ",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-800365092,800365092,
ryanofsky,2021-03-17 20:00:42,"re: https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-800365092\n\nThanks for reviewing this and also taking the time to go through the guts of (it seems like the entire?) [libmultiprocess](https://github.com/chaincodelabs/libmultiprocess) library. I know it needs to be documented better, and I'm working on this. I started adding a standalone example program https://github.com/chaincode",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-801387417,801387417,
jamesob,2021-03-22 15:14:36,"ACK https://github.com/bitcoin/bitcoin/pull/19160/commits/6a2951a7c7690e4f974fb938e1434ca836762207\n\nVerified that rebase consists of `MakeUnique` -> `std::make_unique`, removal of an unnecessary `util/memory.h` import. Built locally and did the `echoipc` test on a different machine than last ACK.\n\n---\n\nThanks for the detailed response, @ryanofsky. I guess this is sort of tantamount to ",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-804141757,804141757,
ryanofsky,2021-03-22 16:38:49,"re: https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-804141757\n\n> I guess this is sort of tantamount to the familiar issue of using an object-relational mapper vs. writing raw SQL. \n\nI never thought of it, but this seems like a perfect analogy.\n\nThe difference between using capnp with libmultiprocess and capnp without libmultiprocess is like the difference between using an OR",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-804215334,804215334,
ariard,2021-03-26 16:07:23,"ACK 6a2951a, notable code change switch to `std::make_unique`\n\nI built locally the multiple processes and tried few echo string through the debug `echoipc`. Works as expected with ipc messages debug displayed through `--debug=ipc`",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-808336739,808336739,
dongcarl,2021-03-26 20:05:11,"ACK 6a2951a, switched to `std::make_unique`\n\nIs there anything remaining here that's needed before it's ready for merge?",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-808480092,808480092,
ryanofsky,2021-03-26 20:24:31,"> Is there anything remaining here that's needed before it's ready for merge?\n\nJust in case this question is for me, I don't think any issues are outstanding, and whether this is ready for merge is just a question of whether it needs more review. I can't say if it does, but I appreciate all the review it's had so far, and thanks for keeping up with this!",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-808489155,808489155,
ariard,2021-03-29 14:03:01,"@fjahr @hebasto @Sjors @jonatack You previously had a look on this PR. If you have still keen interest in this work, I would say it's pretty mature for review :)",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-809402677,809402677,
achow101,2021-03-29 20:06:39,"light ACK 6a2951a7c7690e4f974fb938e1434ca836762207\n\nReviewed and tested the changes here, but did not look at libmultiprocess or the `.capnp.` files. I did check that `echoipc` for `bitcoin-node` spawned another `bitcoin-node` process and did not for `bitcoind`.",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-809676073,809676073,
fjahr,2021-03-30 20:09:41,"re-ACK 1290ccf8c70f5f11148683c3f69044fac9956e05\n\nOnly changes since last review were rebasing, explicit memory include in `interfaces/echo.cpp` and small doc improvements.",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-810544849,810544849,
jamesob,2021-03-31 19:31:37,"ACK 1290ccf8c70f5f11148683c3f69044fac9956e05 ([`jamesob/ackr/19160.3.ryanofsky.multiprocess_add_basic_s`](https://github.com/jamesob/bitcoin/tree/ackr/19160.3.ryanofsky.multiprocess_add_basic_s))\n\nExamined range-diff to ensure changes since last ACK only reflect rebase.\n\nDidn't complete rebuild due to clang thread-safety-analysis failures (on master?).\n\n```\nnet_processing.cpp:1260:17",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-811379143,811379143,
ryanofsky,2021-03-31 19:38:35,"> Didn't complete rebuild due to clang thread-safety-analysis failures (on master?).\n> \n> ```\n> net_processing.cpp:1260:17: error: calling function 'EraseForBlock' requires negative capability '!g_cs_orphans' [-Werror,-Wthread-safety-analysis]\n>     m_orphanage.EraseForBlock(*pblock);\n> ```\n\nThanks for rechecking. I'd be surprised if these errors weren't happening on master since thi",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-811386301,811386301,
ariard,2021-04-01 19:57:40,"ACK 1290ccf\n\nBuilt well and able to test `echoipc` on my side ?",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-812137474,812137474,
promag,2021-04-05 21:33:28,"Tested ACK 1290ccf8c70f5f11148683c3f69044fac9956e05 on bionic and macOS. ~~I'm having issues building on macOS but probably something is bad on my system, I'll check later.~~\n\nI wonder if is it possible to debug on the spawned processes so that `b echoipc` would work?",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-813663708,813663708,
ryanofsky,2021-04-05 22:27:22,"Thanks for reviewing!\n\n> Tested ACK [1290ccf](https://github.com/bitcoin/bitcoin/commit/1290ccf8c70f5f11148683c3f69044fac9956e05) on bionic. I'm having issues building on macOS but probably something is bad on my system, I'll check later.\n\nI'd definitely encourage you to post an issue with any details to https://github.com/chaincodelabs/libmultiprocess/issues/new. Even if the issue isn't s",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-813686077,813686077,
promag,2021-04-06 09:20:46,"> Thanks for reviewing!\n> \n> > Tested ACK [1290ccf](https://github.com/bitcoin/bitcoin/commit/1290ccf8c70f5f11148683c3f69044fac9956e05) on bionic. I'm having issues building on macOS but probably something is bad on my system, I'll check later.\n> \n> I'd definitely encourage you to post an issue with any details to https://github.com/chaincodelabs/libmultiprocess/issues/new. Even if the iss",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-813969407,813969407,
dongcarl,2021-04-16 19:32:46,"re-ACK 1290ccf8c70f5f11148683c3f69044fac9956e05\n\nReviewed `git range-diff origin/master 6a2951a7c7690e4f974fb938e1434ca836762207 1290ccf8c70f5f11148683c3f69044fac9956e05` and it was mostly comment changes.\n\nQuestion that has no bearing on merge-ability: why was `#include <memory>` added to `src/interfaces/echo.cpp` when it is already included in `src/interfaces/echo.h`? ",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-821517122,821517122,
ryanofsky,2021-04-16 20:56:16,"Thanks for rechecking!\n\n> Question that has no bearing on merge-ability: why was `#include <memory>` added to `src/interfaces/echo.cpp` when it is already included in `src/interfaces/echo.h`?\n\nJust preference, I guess. If you want to read a treatise on includes see https://github.com/include-what-you-use/include-what-you-use/blob/master/docs/WhyIWYU.md. But I think if you use something in ",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-821560189,821560189,
laanwj,2021-04-22 20:35:44,"Looks like there has been a silent merge conflict, unfortunately, while building locally i get the following error:\n```\nâ€¦/bitcoin/src/rpc/misc.cpp:662:47: error: use of undeclared identifier 'EnsureNodeContext'; did you mean 'EnsureAnyNodeContext'?\n            if (interfaces::Ipc* ipc = Assert(EnsureNodeContext(request.context).init)->ipc()) {\n                                              ",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-825167141,825167141,
ryanofsky,2021-04-23 18:13:28,"https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-825167141\n\n> Looks like there has been a silent merge conflict\n\nThanks! Rebased and updated the call site.\n\n---\n\nRebased 1290ccf8c70f5f11148683c3f69044fac9956e05 -> 84934bf70e11fe4cda1cfda60113a54895d4fdd5 ([`pr/ipc-echo.30`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-echo.30) -> [`pr/ipc-echo.31`](https://github.c",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-825833591,825833591,
fjahr,2021-04-24 19:45:50,"re-ACK 84934bf70e11fe4cda1cfda60113a54895d4fdd5\n\nChecked range-diff that only changes since last review were rebasing and fixing the silent merge conflict. Also built and ran tests locally and tested `echo` RPC manually.",https://github.com/bitcoin/bitcoin/pull/19160#issuecomment-826144060,826144060,
ariard,2020-06-15 22:50:15,"b12041f\n\nAFAICT, `addCloseHook` stacks new hook as prefix to previous added one, thus call order is reverse than registering order ?",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440489253,440489253,src/interfaces/base.h
ariard,2020-06-15 22:54:58,"643d602\n\n`LocalInit` isn't really meaningful as a name IMO, if understands well it must implemented both by parent and child processes, but methods called will diverge ? `IPCWrapper` , `IPCSupervisor`, `IPCAccess`, ... ?",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440490694,440490694,src/interfaces/init.h
ariard,2020-06-15 22:57:00,"643d602\n\nDocument `-ipcfd` usage ?",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440491394,440491394,src/interfaces/ipc.cpp
ariard,2020-06-15 23:03:09,"643d602\n\nMaybe the connection flow between parent and child process could be documented, what should be the order between parent serve, parent connect, child serve, child connect ? in `echoipc` demonstration, I don't see `serve` being called and thus that's a bit confusing with regards to documentation.",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440493321,440493321,src/interfaces/ipc.h
ryanofsky,2020-06-15 23:45:35,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440493321\n\n> [643d602](https://github.com/bitcoin/bitcoin/commit/643d602b3fcb3eac22a2962cff1a0b7019bfebb0)\n> \n> Maybe the connection flow between parent and child process could be documented, what should be the order between parent serve, parent connect, child serve, child connect ? in `echoipc` demonstration, I don't see `serve",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440506337,440506337,src/interfaces/ipc.h
ryanofsky,2020-06-29 17:29:38,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440489253\n\n> [b12041f](https://github.com/bitcoin/bitcoin/commit/b12041f74de234ad45083be8f86ae714dd5bdfae)\n> \n> AFAICT, `addCloseHook` stacks new hook as prefix to previous added one, thus call order is reverse than registering order ?\n\nAdded comment, this is analogous to how when multiple variables are declared in a scope, ",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r447135719,447135719,src/interfaces/base.h
ryanofsky,2020-06-29 17:30:19,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440490694\n\n> [643d602](https://github.com/bitcoin/bitcoin/commit/643d602b3fcb3eac22a2962cff1a0b7019bfebb0)\n> \n> `LocalInit` isn't really meaningful as a name IMO, if understands well it must implemented both by parent and child processes, but methods called will diverge ? `IPCWrapper` , `IPCSupervisor`, `IPCAccess`, ... ?\n\nI",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r447136167,447136167,src/interfaces/init.h
ryanofsky,2020-06-29 17:30:29,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440491394\n\n> [643d602](https://github.com/bitcoin/bitcoin/commit/643d602b3fcb3eac22a2962cff1a0b7019bfebb0)\n> \n> Document `-ipcfd` usage ?\n\nAdded comment here. It might be good to add to `-help` output too, but I can't easily use ArgsManager::AddArg without losing ""Invalid parameter -ipcfd"" checking, and I don't think there a",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r447136270,447136270,src/interfaces/ipc.cpp
ryanofsky,2020-06-29 17:31:16,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r440493321\n\n> [643d602](https://github.com/bitcoin/bitcoin/commit/643d602b3fcb3eac22a2962cff1a0b7019bfebb0)\n> \n> Maybe the connection flow between parent and child process could be documented, what should be the order between parent serve, parent connect, child serve, child connect ? in `echoipc` demonstration, I don't see `serve",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r447136782,447136782,src/interfaces/ipc.h
ariard,2020-08-04 20:59:33,"FYI, the logs I get, are they the ones you expect ?\n\n```\n2020-08-04T20:58:04Z {bitcoin-node-12666/b-httpworker.0-12684} IPC client first request from current thread, constructing waiter                                                                                  \n2020-08-04T20:58:04Z {bitcoin-node-12666/b-httpworker.0-12684} IPC client send Init.construct$Params (threadMap = <external ",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465326990,465326990,doc/multiprocess.md
ariard,2020-08-04 21:09:03,"Shoud the threading model part of the documentation ? AFAICT I can tell you're doing mention to background/foreground threads around `IpcProtocol` documentation. Isn't this dependent of `IpcProtocolImpl` internals ? AFAII, e.g, the client process is going to call interfaces (like `Chain::getHeight`) with overriden virtual methods sending calls to remote server process ? On the client-side, is flow",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465331663,465331663,doc/multiprocess.md
ariard,2020-08-04 21:21:47,Why does `LocalInit` take a `node()` method ? How is it used ? A `bitcoin-wallet` will never have such context ?,https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465337715,465337715,src/interfaces/init.h
ariard,2020-08-04 21:23:10,"The documentation you wrote down in review club notes (""The Init interface is similar to other cross-process C++ interfaces like interfaces::Node, interfaces::Wallet, interfaces::Chain and interfaces::ChainClient, providing virtual methods that can be called from other processes...."") is describing well design goal of `Init` IMO. Maybe just pick it up ?",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465338335,465338335,src/interfaces/init.h
ariard,2020-08-04 21:24:59,"IIRC a socketpair has a default and only-one domain (AF_UNIX), you mean a new connection is free to pick up its domain as there is no the default parent-child socketpair ready to use ?",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465339166,465339166,src/interfaces/init.h
ariard,2020-08-04 21:29:56,"It's unclear who is the ""it"" here calling Init interface methods, still the spawned subprocess ? Or do you mean the spawned subprocess has the option to shutdown itself ?",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465341411,465341411,src/interfaces/init.h
ariard,2020-08-04 21:32:00,I think `init.h` is actually introduced in next commit. Also document `echo.h` if it's a long-standing debug interface ?,https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465342296,465342296,src/interfaces/README.md
fjahr,2020-08-05 12:59:17,"```suggestion\n#include <interfaces/base.h>\n```",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465707859,465707859,src/interfaces/chain.h
fjahr,2020-08-05 13:00:58,"And also `base.h` is added here, so update commit number on it as well?",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465708950,465708950,src/interfaces/README.md
fjahr,2020-08-05 13:58:36,"This one could be a little more explicit I think?\n\n```suggestion\n//! Close hook that encapsulate a function to be called on close.\n```",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465746629,465746629,src/interfaces/init.cpp
jnewbery,2020-08-05 14:17:29,Added in 19160?,https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465760342,465760342,src/interfaces/README.md
fjahr,2020-08-05 14:31:45,"```suggestion\n\n        self.log.info(""test echoipc (testing spawned process in multiprocess built)"")\n```",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465770957,465770957,test/functional/rpc_misc.py
ryanofsky,2020-08-10 18:58:15,"https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465342296\n\n> I think `init.h` is actually introduced in next commit. Also document `echo.h` if it's a long-standing debug interface ?\n\n> And also `base.h` is added here, so update commit number on it as well?\n\nThanks, changed",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r468112768,468112768,src/interfaces/README.md
ryanofsky,2020-08-10 18:58:49,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465707859\n\n> #include <interfaces/base.h>\n\nThanks, switched",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r468113037,468113037,src/interfaces/chain.h
ryanofsky,2020-08-10 18:59:18,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465326990\n\n> FYI, the logs I get, are they the ones you expect ?\n\nYes, those show the requests being sent, received, and responded to.\n",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r468113333,468113333,doc/multiprocess.md
ryanofsky,2020-08-10 18:59:26,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465331663\n\n> Shoud the threading model part of the documentation ?\n\nSure, I added a mention of the 1:1 threading model here, linking to the libmultiprocess library.\n\n> AFAICT I can tell you're doing mention to background/foreground threads around `IpcProtocol` documentation. Isn't this dependent of `IpcProtocolImpl` internal",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r468113393,468113393,doc/multiprocess.md
ryanofsky,2020-08-10 18:59:34,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465746629\n\n> This one could be a little more explicit I think?\n\nThanks, updated",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r468113445,468113445,src/interfaces/init.cpp
ryanofsky,2020-08-10 18:59:41,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465338335\n\n> The documentation you wrote down in review club notes (""The Init interface is similar to other cross-process C++ interfaces like interfaces::Node, interfaces::Wallet, interfaces::Chain and interfaces::ChainClient, providing virtual methods that can be called from other processes...."") is describing well design goal of `",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r468113523,468113523,src/interfaces/init.h
ryanofsky,2020-08-10 18:59:48,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465341411\n\n> It's unclear who is the ""it"" here calling Init interface methods, still the spawned subprocess ? Or do you mean the spawned subprocess has the option to shutdown itself ?\n\nThanks, replaced ""it"" with ""spawned process"" and clarified it shuts down when then connection is closed.",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r468113577,468113577,src/interfaces/init.h
ryanofsky,2020-08-10 19:00:00,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465337715\n\n> Why does `LocalInit` take a `node()` method ? How is it used ? A `bitcoin-wallet` will never have such context ?\n\nAdded comment. This is called one place in [`AppInit()`](https://github.com/ryanofsky/bitcoin/blob/0602f87a085c733f1da38b3b82210c81ef018fd5/src/bitcoind.cpp#L48) in bitcoind, bitcoin-qt, and bitcoin-node",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r468113710,468113710,src/interfaces/init.h
ryanofsky,2020-08-10 19:00:27,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465770957\n\n> self.log.info(""test echoipc (testing spawned process in multiprocess built)"")\n\nThanks, added",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r468113946,468113946,test/functional/rpc_misc.py
ryanofsky,2020-08-11 00:23:56,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465339166\n\n> IIRC a socketpair has a default and only-one domain (AF_UNIX), you mean a new connection is free to pick up its domain as there is no the default parent-child socketpair ready to use ?\n\nThanks, replaced domain socket with just socket. I didn't realize socketpairsÂ could have domains.\n",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r468256850,468256850,src/interfaces/init.h
ryanofsky,2020-08-11 00:25:35,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r465760342\n\n> Added in 19160?\n\nThanks, there were some earlier comments about this too. Switched",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r468257307,468257307,src/interfaces/README.md
ariard,2020-10-15 18:03:05,"I think this comment can be improved: \n\n* ""Init interface providing access to other interfaces"", this should underscores access is provided across process boundaries\n* ""providing virtual methods that can be called from other processes"", AFAIU, this is confusing as interfaces::Init provides both process control method (e.g `makeEchoIpc()`, in the future `makeWallet`) and an interface `IpcProt",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r505737310,505737310,src/interfaces/init.h
ariard,2020-10-15 18:25:35,"I think an in-depth walk-through needs to be documented somewhere for actual and future reviewers.\n\nAn example would be :\n1. Bitcoin GUI process is started, in `src/qt/bitcoin.cpp`, it initializes its own interface `LocalInit` from `src/interfaces/init_bitcoin-gui.cpp`\n2. From this `LocalInit` interface, it calls `makeNode()`, which trigger a child `bitcoin-node` spawning through `IpcProce",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r505753193,505753193,src/interfaces/init.h
ariard,2020-10-15 18:28:23,"I think you could add a temporary comment hinting this interface as the future location of `makeNode`, `makeWalletClient`, etc, it's more helpful for reviewers to understand what it would look like after #10102.",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r505754792,505754792,src/interfaces/init.h
ariard,2020-10-15 18:33:05,"It would be great to extend the README with a new section explaining how someone would add a new `IpcProtocol` implementation. As of right now `src/interfaces/capnp/init.capnp` is pretty empty which makes it hard to understand for reviewers without looking first on #10102 branch.\n\nPurely reading libmultiprocess README, I didn't grasp at first than one `IpcProtocol` must define a `ProxyClient`/",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r505757544,505757544,src/interfaces/README.md
Sjors,2020-10-15 18:59:13,Might be worth logging the `pid` on launch as well.,https://github.com/bitcoin/bitcoin/pull/19160#discussion_r505772152,505772152,src/interfaces/init.cpp
ryanofsky,2020-10-20 18:36:24,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r505757544\n\n> It would be great to extend the README with a new section explaining how someone would add a new `IpcProtocol` implementation. As of right now `src/interfaces/capnp/init.capnp` is pretty empty which makes it hard to understand for reviewers without looking first on #10102 branch.\n\nI added an overview of the IPC impl",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r508752557,508752557,src/interfaces/README.md
ryanofsky,2020-10-21 14:50:12,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r505772152\n\n> Might be worth logging the `pid` on launch as well.\n\nGood idea, added log",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r509355045,509355045,src/interfaces/init.cpp
ryanofsky,2020-10-21 14:50:21,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r505737310\n\n> I think this comment can be improved:\n> \n> * ""Init interface providing access to other interfaces"", this should underscores access is provided across process boundaries.\n\nCould you be specific about the change you would suggest here? The next sentence after the quote in your comment says how the interface is use",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r509355219,509355219,src/interfaces/init.h
ryanofsky,2020-10-21 14:50:30,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r505753193\n\n> I think an in-depth walk-through needs to be documented somewhere for actual and future reviewers.\n\nI added some more information about what happens when IPC methods are called in https://github.com/ryanofsky/bitcoin/blob/pr/ipc-echo/doc/multiprocess.md#ipc-implementation-details. Maybe we can add walkthrough you po",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r509355364,509355364,src/interfaces/init.h
ryanofsky,2020-10-21 14:50:50,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r505754792\n\n> I think you could add a temporary comment hinting this interface as the future location of `makeNode`, `makeWalletClient`, etc, it's more helpful for reviewers to understand what it would look like after #10102.\n\nGood idea, added this.",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r509355611,509355611,src/interfaces/init.h
ariard,2020-10-27 17:41:12,"Thanks for the new documentation in `multiprocess.md`.\n\nFor the text representation I was thinking a simple ASCII art underlying relations between interfaces, implementations, process and threads. Akin to RL's [ARCH.md](https://github.com/rust-bitcoin/rust-lightning/blob/main/ARCH.md), which is hopefully straightforward and doesn't rely on a third-party tool.\n\nI'm working on a proposal, if",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r512897580,512897580,src/interfaces/init.h
ariard,2020-10-27 18:08:59,"> I'm not sure what change is suggested by the observation about init.capnp. I hope it's clear that things in the src/interfaces/capnp/ directory are specific to the capnp protocol.\n\nI think it's clearer for me now about the distinction between abstract interfaces and their implementations. IMO, three further improvements to make it better:\n* rename `IpcProtocolImpl` to `CapnpProtocol`, the ",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r512919431,512919431,src/interfaces/README.md
ryanofsky,2020-10-27 18:38:31,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r512897580\n\n> I'm working on a proposal, if it will be easier to give your opinion.\n\nDescription at https://github.com/rust-bitcoin/rust-lightning/blob/main/ARCH.md seems good, but I don't get the diagram. It seems kind of like a word cloud or mind map useful for memorization more than a picture which explains something. I tend t",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r512938792,512938792,src/interfaces/init.h
ryanofsky,2020-10-27 18:42:39,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r512919431\n\n> IMO, three further improvements to make it better:\n> \n> * rename `IpcProtocolImpl` to `CapnpProtocol`, the constructor is already called `MakeCapnpProtocol` and `IpcProcessImpl` to `LibmpProcess`. Or any more accurate names hinting the _specific_ implementation\n\nRenamed `CapnpProtocol`, but kept `ProcessImpl` be",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r512941358,512941358,src/interfaces/README.md
ariard,2020-10-28 17:59:04,"I think my main concern is about lighting the interfaces _hierarchy_, where they're produced, and when they're consumed. See my graphical representation proposal as a way to improve it.\n\n> Other reasonable names for interfaces::Init might be interfaces::Initial or interfaces::Factory or interfaces::Process or interfaces::Global.\n\n+1 for `interfaces::Factory`.\n\n> Maybe it could be calle",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r513652807,513652807,src/interfaces/init.h
ryanofsky,2020-11-13 00:26:50,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r513652807\n\n> I think my main concern is about lighting the interfaces _hierarchy_, where they're produced, and when they're consumed. See my graphical representation proposal as a way to improve it.\n\n`LocalInit` class is gone, so the hierarchy is flat now. `Init` class is now just used for initialization, and is exposed over IPC",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r522525784,522525784,src/interfaces/init.h
ariard,2021-02-12 15:21:40,"Starting at ""As much as possible..."", I think you can move the remainder at the beginning of the README or its in own ""Design"" section.",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r575300240,575300240,doc/multiprocess.md
ariard,2021-02-12 16:16:13,"Reading this comment and the call chain `IpcImpl::serveProcess` -> `ProcessImpl::serve`, I don't grasp what's the expected behavior.\n\nAFAIU `bitcoin-node`, it should only be called with `ipcfd=$FD`, spawned by the parent process. Any other case should be a hint of an error in `bitcoin-node usage ? \n\nIf `bitcoin-node` behavior is only regular when it's called with `ipcfd`, why this comment ",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r575337525,575337525,src/interfaces/init.h
ariard,2021-02-12 17:01:59,"I think you can drop `arg` and `argv` parameters, they're already passed in constructors, and those ones should make authority if they differ ?",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r575368309,575368309,src/ipc/interfaces.cpp
ariard,2021-02-12 17:14:02,"Can we rename this method differently from `Process:serve`, even if currently the `Process` one is calling the `Protocol` one that's a bit confusing.  Like `handle_request` ?",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r575375855,575375855,src/ipc/protocol.h
ariard,2021-02-12 17:21:35,"For each method of this interface it might be good to prefix them by which side of the process relationship it's expected to be used, `parent_spawn`, `parent_wait`, `spawn_serve`.\n\nBut I don't think it makes sense to split it further because we might have in the future set of process with grandchild relationship `bitcoin-gui` -> `bitcoin-wallet` -> `bitcoin-keyholder` ?",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r575380571,575380571,src/ipc/process.h
ryanofsky,2021-02-18 14:35:54,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r575368309\n\n> I think you can drop `arg` and `argv` parameters, they're already passed in constructors, and those ones should make authority if they differ ?\n\nThanks! Dropped the constructor arguments and removed more stored state from these classes.\n",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r578467403,578467403,src/ipc/interfaces.cpp
ryanofsky,2021-02-18 14:36:39,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r575380571\n\n> For each method of this interface it might be good to prefix them by which side of the process relationship it's expected to be used, `parent_spawn`, `parent_wait`, `spawn_serve`.\n\nI don't think I understand the reason for this suggestion. Maybe there is something misleading about the word spawn? The naming here com",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r578468036,578468036,src/ipc/process.h
ryanofsky,2021-02-18 14:51:10,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r575375855\n\n> Can we rename this method differently from `Process:serve`, even if currently the `Process` one is calling the `Protocol` one that's a bit confusing. Like `handle_request` ?\n\nI renamed the other method if that helps. I don't like using the name ""handle"" here because ""handleXYZ"" methods are used in other interfaces t",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r578480284,578480284,src/ipc/protocol.h
ryanofsky,2021-02-18 14:52:18,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r575300240\n\n> Starting at ""As much as possible..."", I think you can move the remainder at the beginning of the README or its in own ""Design"" section.\n\nThanks! Moved to new section.",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r578481277,578481277,doc/multiprocess.md
ryanofsky,2021-02-18 14:54:34,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r575337525\n\n> Reading this comment and the call chain `IpcImpl::serveProcess` -> `ProcessImpl::serve`, I don't grasp what's the expected behavior.\n> \n> AFAIU `bitcoin-node`, it should only be called with `ipcfd=$FD`, spawned by the parent process. Any other case should be a hint of an error in `bitcoin-node usage ?\n\nI think a",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r578483235,578483235,src/interfaces/init.h
ariard,2021-02-26 15:07:11,"From a UX standpoint, what do you think about the following order of sections : Design - IPC implementation - Installation - Debugging - Next steps. I would say before to be interested in upcoming next steps a reader might be willingly to grash what multiprocess is about.",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r583704171,583704171,doc/multiprocess.md
ariard,2021-02-26 15:27:02,"AFAICT, this is used to indicate parent process path to `mp::SpawnProcess` and spawns the new child under the same one. What about calling this variable `m_process_path` or `m_path`, more meaningful than `m_arg0` ?",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r583718720,583718720,src/ipc/interfaces.cpp
ariard,2021-02-26 15:35:11,Should the new `src/interfaces/ipc.h` be mentioned ?,https://github.com/bitcoin/bitcoin/pull/19160#discussion_r583724307,583724307,src/interfaces/README.md
ariard,2021-02-26 16:47:05,"New documentation is better, reading them I grasped those methods usage at first read!",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r583773750,583773750,src/ipc/process.h
jamesob,2021-02-28 22:16:34,"b2abe3f062c69663ae97bed239aa0a118e6a081c\n\nApologies for the remedial question, but this code *isn't* autogenerated, right?",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r584369949,584369949,src/ipc/capnp/echo.capnp
ryanofsky,2021-03-04 12:53:07,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r584369949\n\n> this code _isn't_ autogenerated, right?\n\nRight, [`echo.capnp`](https://github.com/ryanofsky/bitcoin/blob/ipc-export/src/ipc/capnp/echo.capnp) isn't a generated file, it's the source of generated files: echo.capnp.h, echo.capnp.cpp, [and so on](https://github.com/ryanofsky/bitcoin/blob/b2abe3f062c69663ae97bed239aa0a1",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r587445671,587445671,src/ipc/capnp/echo.capnp
ariard,2021-03-09 14:18:31,In fact those make methods could only be implemented on the subclasses. E.g `makeEcho` only on `BitcoinNodeInit` or `makeNode` only on `BitcoinGuiInit` ? What purpose does it serve to have default methods ?,https://github.com/bitcoin/bitcoin/pull/19160#discussion_r590408045,590408045,src/interfaces/init.h
ariard,2021-03-09 14:21:57,`interfaces::Ipc::spawnProcess()` ?,https://github.com/bitcoin/bitcoin/pull/19160#discussion_r590411040,590411040,src/interfaces/ipc.h
ariard,2021-03-09 14:41:47,Those values are identifiers for Cap'n Proto right ? Curious on how do you select them ?,https://github.com/bitcoin/bitcoin/pull/19160#discussion_r590428830,590428830,src/ipc/capnp/init.capnp
ryanofsky,2021-03-09 16:51:56,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r583704171\n\n> From a UX standpoint, what do you think about the following order of sections : Design - IPC implementation - Installation - Debugging - Next steps. I would say before to be interested in upcoming next steps a reader might be willingly to grash what multiprocess is about.\n\nCombined implementation details and design ",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r590544008,590544008,doc/multiprocess.md
ryanofsky,2021-03-09 16:52:09,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r583724307\n\n> Should the new `src/interfaces/ipc.h` be mentioned ?\n\nThanks, added to list",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r590544207,590544207,src/interfaces/README.md
ryanofsky,2021-03-09 16:52:17,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r590408045\n\n> In fact those make methods could only be implemented on the subclasses. E.g `makeEcho` only on `BitcoinNodeInit` or `makeNode` only on `BitcoinGuiInit` ? What purpose does it serve to have default methods ?\n\nThis is mainly for #10102. Having default methods avoids the need to implement 20 make overrides in #10102 th",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r590544335,590544335,src/interfaces/init.h
ryanofsky,2021-03-09 16:52:45,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r590411040\n\n> `interfaces::Ipc::spawnProcess()` ?\n\nThanks, that's more consistent. Made a similar tweak below too.",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r590544689,590544689,src/interfaces/ipc.h
ryanofsky,2021-03-09 16:53:00,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r590428830\n\n> Those values are identifiers for Cap'n Proto right ? Curious on how do you select them ?\n\nYou need to run the `capnp id` command line tool to generate an id, see https://capnproto.org/capnp-tool.html, https://capnproto.org/language.html. IIRC, the ids have some checking so you do need the tool and can't pick a compl",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r590544882,590544882,src/ipc/capnp/init.capnp
ryanofsky,2021-03-09 16:53:08,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r583718720\n\n> AFAICT, this is used to indicate parent process path to `mp::SpawnProcess` and spawns the new child under the same one. What about calling this variable `m_process_path` or `m_path`, more meaningful than `m_arg0` ?\n\nThanks, renamed to `m_process_argv0`. This code is really just trying to pass `argv[0]` along without",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r590544967,590544967,src/ipc/interfaces.cpp
fanquake,2021-03-12 00:44:19,Please [use `std::make_unique` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/util/memory.h#L13).,https://github.com/bitcoin/bitcoin/pull/19160#discussion_r592831723,592831723,src/init/bitcoin-node.cpp
fjahr,2021-03-22 22:09:11,nit: ...will *be* different...,https://github.com/bitcoin/bitcoin/pull/19160#discussion_r599108166,599108166,src/ipc/process.h
fjahr,2021-03-28 15:20:53,"nit: ...holding up another *call*, ...",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r602892199,602892199,doc/multiprocess.md
fjahr,2021-03-28 17:39:39,"This string is repeated in `rpc/misc.cpp` in the echo RPC. I guess these exe names should be global constants or organized in some other way in the future. But that can be kept for a follow-up (and probably already is included in one, I just haven't checked).",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r602908024,602908024,src/init/bitcoin-node.cpp
fjahr,2021-03-29 19:05:58,"> For an interface to be shared across processses, it needs two definitions:\n> \n> * An **API definition** declaring how the interface is called. Examples: [node.h](https://github.com/ryanofsky/bitcoin/blob/ipc-export/src/interfaces/node.h), [wallet.h](https://github.com/ryanofsky/bitcoin/blob/ipc-export/src/interfaces/wallet.h), [echo.h](https://github.com/ryanofsky/bitcoin/blob/ipc-export/src",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r603542568,603542568,src/ipc/capnp/echo.capnp
ryanofsky,2021-03-30 12:50:15,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r602892199\n\n> nit: ...holding up another _call_, ...\n\nThanks, fixed!",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r604065901,604065901,doc/multiprocess.md
ryanofsky,2021-03-30 12:50:34,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r602908024\n\n> This string is repeated in `rpc/misc.cpp` in the echo RPC. I guess these exe names should be global constants or organized in some other way in the future. But that can be kept for a follow-up (and probably already is included in one, I just haven't checked).\n\nThat's a good idea. Init exe names and [`spawnProcess` e",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r604066107,604066107,src/init/bitcoin-node.cpp
ryanofsky,2021-03-30 12:51:16,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r603542568\n\n> \n> This was helpful to me, a version of this info could go into `doc/multiprocess.md` IMO.\n\nThat's good to know. I'll link to the PR when it's posted, but I'm working on libmultiprocess documentation and adding a version of this information there.\n\nEDIT: Added this documentation in https://github.com/bitcoin/b",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r604066654,604066654,src/ipc/capnp/echo.capnp
ryanofsky,2021-03-30 12:51:25,"re: https://github.com/bitcoin/bitcoin/pull/19160#discussion_r599108166\n\n> nit: ...will _be_ different...\n\nThanks, fixed!",https://github.com/bitcoin/bitcoin/pull/19160#discussion_r604066756,604066756,src/ipc/process.h
