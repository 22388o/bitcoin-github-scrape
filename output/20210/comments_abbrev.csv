practicalswift,2020-10-21 12:51:23,"Concept ACK\n\nThanks for improving testing!",https://github.com/bitcoin/bitcoin/pull/20210#issuecomment-713546089,713546089,
DrahtBot,2020-11-12 01:20:26,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20789 (fuzz: Rework strong and weak net enum fuzzing by MarcoFalke)\n* #20786 (net: [refactor] Prefer integral types in C",https://github.com/bitcoin/bitcoin/pull/20210#issuecomment-725766118,725766118,
jonatack,2020-11-13 17:27:11,Rebased.,https://github.com/bitcoin/bitcoin/pull/20210#issuecomment-726895538,726895538,
jonatack,2020-12-17 19:00:44,Rebased/simplified after merge of #20686.,https://github.com/bitcoin/bitcoin/pull/20210#issuecomment-747635132,747635132,
sipa,2020-12-27 05:06:04,utACK 86c495223f048e5ca2cf0d8730af7db3b76f7aba,https://github.com/bitcoin/bitcoin/pull/20210#issuecomment-751426870,751426870,
jnewbery,2021-01-23 15:11:34,Is there any benefit to adding getter boilerplate code to the header class instead of just making this const member public?,https://github.com/bitcoin/bitcoin/pull/20210#issuecomment-766093925,766093925,
jonatack,2021-01-26 18:25:23,"@jnewbery Unless additional semantics will be needed for future changes or refactoring, [no](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#c131-avoid-trivial-getters-and-setters), probably not. I was being prudent.",https://github.com/bitcoin/bitcoin/pull/20210#issuecomment-767737495,767737495,
jnewbery,2021-01-26 18:40:55,oooh thanks for referencing the cpp core guidelines! I'd say that any getter of a const value is trivial :),https://github.com/bitcoin/bitcoin/pull/20210#issuecomment-767746871,767746871,
jonatack,2021-02-12 22:41:27,"> oooh thanks for referencing the cpp core guidelines! I'd say that any getter of a const value is trivial :)\n\n@jnewbery thanks! done in #21167",https://github.com/bitcoin/bitcoin/pull/20210#issuecomment-778495299,778495299,
theStack,2020-11-22 18:17:26,"yocto-nit (not directly related to this PR though, feel free to ignore): not sure if we have any guidelines (or dominant opinions) on this subject, but isn't it overkill to have two initializations for a class member: once via in-class initialization and once via initializer list in the ctor? (And yes, I'm aware that initializer lists have higher priority in C++). As reader of the class interface ",https://github.com/bitcoin/bitcoin/pull/20210#discussion_r528384064,528384064,src/net.h
jonatack,2020-11-23 16:28:58,"Hm, good eye.\n\n-> In this case, ISTM we could remove the default `false` argument in the constructor declaration\n\n-> As to your last point, it suggests the default member `m_inbound_onion` initializer not set a value, since we are doing it dynamically in the ctor. It's true that I see a build error in this case, but not without the change in `net.h:1099`\n```diff\n/src/net.cpp\n-    nMy",https://github.com/bitcoin/bitcoin/pull/20210#discussion_r528835313,528835313,src/net.h
laanwj,2020-12-03 14:15:13,"I might be misunderstanding but in what case would the caller pass `inbound_onion` parameter as true but lie about this, as it is an outbound connection? Is this a code bug?\nWouldn't this be better as an assertion?",https://github.com/bitcoin/bitcoin/pull/20210#discussion_r535260745,535260745,src/net.cpp
MarcoFalke,2020-12-15 16:57:23,"Or an `Assume`, if `Assert` is too strong and risky",https://github.com/bitcoin/bitcoin/pull/20210#discussion_r543518017,543518017,src/net.cpp
jonatack,2020-12-17 11:44:54,"Good idea, `inbound_onion` should only be true when a new CNode is instantiated from `CConnman::AcceptConnection()`, so this should only fail if a bug is added. Made it an assert.\n",https://github.com/bitcoin/bitcoin/pull/20210#discussion_r545027066,545027066,src/net.cpp
jonatack,2020-12-17 12:45:08,"> in what case would the caller pass `inbound_onion` parameter as true but lie about this\n\nSo, adding the assertion found one! Our net_tests had a case that lied; updating it.\n",https://github.com/bitcoin/bitcoin/pull/20210#discussion_r545062206,545062206,src/net.cpp
jonatack,2020-12-17 15:22:03,"Hm, a couple of fuzzers need to be updated, too. Edit: done",https://github.com/bitcoin/bitcoin/pull/20210#discussion_r545173276,545173276,src/net.cpp
vasild,2020-12-30 13:05:34,nit: same as `ConnectionType::INBOUND && fuzzed_data_provider.ConsumeBool()`,https://github.com/bitcoin/bitcoin/pull/20210#discussion_r550188458,550188458,src/test/fuzz/util.h
vasild,2020-12-30 13:26:05,"Given that this method is added only to be used in tests, could the tests use\n`pnode->IsInboundConn() && pnode->ConnectedThroughNetwork() == NET_ONION` which is equivalent to the newly added `pnode->IsInboundOnion()`?",https://github.com/bitcoin/bitcoin/pull/20210#discussion_r550194337,550194337,src/net.h
jonatack,2020-12-30 13:48:31,The goal is to test `m_inbound_onion` to be able to depend on it in #20197.,https://github.com/bitcoin/bitcoin/pull/20210#discussion_r550200877,550200877,src/net.h
jonatack,2020-12-30 14:01:36,"indeed, will update if need to retouch or rebase",https://github.com/bitcoin/bitcoin/pull/20210#discussion_r550204796,550204796,src/test/fuzz/util.h
jonatack,2020-12-30 14:23:23,"(the unit tests already assert on `IsInboundConn()`, so this would shift the coverage from `m_inbound_onion` directly, to indirectly via `ConnectedThroughNetwork() == NET_ONION`, which would avoid the getter but seems less robust? In AttemptToEvictConnection, outbound peers return early, so technically we could use the latter...but I like it less.)",https://github.com/bitcoin/bitcoin/pull/20210#discussion_r550211245,550211245,src/net.h
vasild,2020-12-30 14:56:03,"Yeah, it will test it indirectly, less robust. Feel free to ditch this conversation :)",https://github.com/bitcoin/bitcoin/pull/20210#discussion_r550222143,550222143,src/net.h
MarcoFalke,2021-01-02 08:52:48,"nit question: should this say ""i.e.""? I mean are there any other ways to establish an inbound onion other than via the tor onion service?",https://github.com/bitcoin/bitcoin/pull/20210#discussion_r550860416,550860416,src/net.h
jonatack,2021-01-02 08:58:44,I don't mind updating this and taking @vasild's suggestion at the same time.,https://github.com/bitcoin/bitcoin/pull/20210#discussion_r550860882,550860882,src/net.h
MarcoFalke,2021-01-02 09:00:14,Can do as a follow-up. The merge script is already running and this should land in master in the next couple of minutes.,https://github.com/bitcoin/bitcoin/pull/20210#discussion_r550860998,550860998,src/net.h
jonatack,2021-01-02 09:01:01,"Oh ok, will do in #20197.",https://github.com/bitcoin/bitcoin/pull/20210#discussion_r550861037,550861037,src/net.h
MarcoFalke,2021-01-02 09:02:29,"difference is that it needs to store one additional redundant byte for every non-inbound fuzz input file, so I think this can be kept as is",https://github.com/bitcoin/bitcoin/pull/20210#discussion_r550861123,550861123,src/test/fuzz/util.h
jonatack,2021-02-12 22:40:17,"> not sure if we have any guidelines (or dominant opinions) on this subject, but isn't it overkill to have two initializations for a class member: once via in-class initialization and once via initializer list in the ctor? (And yes, I'm aware that initializer lists have higher priority in C++). As reader of the class interface I'd not assume an in-class initialization is overruled in the ctor. Als",https://github.com/bitcoin/bitcoin/pull/20210#discussion_r575558542,575558542,src/net.h
jonatack,2021-02-12 22:40:48,"> nit question: should this say ""i.e.""? I mean are there any other ways to establish an inbound onion other than via the tor onion service?\n\nDone in #21167",https://github.com/bitcoin/bitcoin/pull/20210#discussion_r575558723,575558723,src/net.h
