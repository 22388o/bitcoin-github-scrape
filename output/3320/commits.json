[
  {
    "sha": "0b47fe6bdc14e942bc886a08a55cc183c6820636",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjQ3ZmU2YmRjMTRlOTQyYmM4ODZhMDhhNTVjYzE4M2M2ODIwNjM2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-11-27T14:41:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-03T08:07:13Z"
      },
      "message": "bitcoin-cli: remove unneeded dependencies (only code movement)\n\nRemove unnecessary dependencies for bitcoin-cli\n(leveldb, berkelydb, wallet, RPC server)\n\nBuild system changes:\n- split libbitcoin.a into libbitcoin_common.a, libbitcoin_server.a and\n  libbitcoin_cli.a\n\nCode changes (movement only):\n- split up HelpMessage into HelpMessage in init.cpp and HelpMessageCli\n  in rpcclient.cpp\n- move uiInterface from init.cpp to util.cpp",
      "tree": {
        "sha": "36e789aef8cf8df1d15752a207bfd2461a2232bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36e789aef8cf8df1d15752a207bfd2461a2232bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b47fe6bdc14e942bc886a08a55cc183c6820636",
      "comment_count": 2,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b47fe6bdc14e942bc886a08a55cc183c6820636",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b47fe6bdc14e942bc886a08a55cc183c6820636",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b47fe6bdc14e942bc886a08a55cc183c6820636/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7e8a7537a8106bace2886fd7e6480f561986998",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7e8a7537a8106bace2886fd7e6480f561986998",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7e8a7537a8106bace2886fd7e6480f561986998"
      }
    ],
    "stats": {
      "total": 251,
      "additions": 144,
      "deletions": 107
    },
    "files": [
      {
        "sha": "9d3365fd60308dfb17c7e8e5a1a0406e7f7ea084",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 30,
        "deletions": 15,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=0b47fe6bdc14e942bc886a08a55cc183c6820636",
        "patch": "@@ -3,7 +3,7 @@ include Makefile.include\n AM_CPPFLAGS += -I$(top_srcdir)/src/leveldb/helpers/memenv \\\n   -I$(builddir)\n \n-noinst_LIBRARIES = libbitcoin.a\n+noinst_LIBRARIES = libbitcoin_server.a libbitcoin_common.a libbitcoin_cli.a\n \n bin_PROGRAMS = bitcoind bitcoin-cli\n \n@@ -33,23 +33,40 @@ obj/build.h: FORCE\n \t  $(abs_top_srcdir)\n version.o: obj/build.h\n \n-libbitcoin_a_SOURCES = addrman.cpp alert.cpp allocators.cpp \\\n-  rpcclient.cpp \\\n-  rpcprotocol.cpp \\\n+libbitcoin_server_a_SOURCES = addrman.cpp alert.cpp \\\n   rpcserver.cpp \\\n   bloom.cpp \\\n-  chainparams.cpp checkpoints.cpp core.cpp coins.cpp crypter.cpp db.cpp hash.cpp \\\n-  init.cpp key.cpp keystore.cpp leveldbwrapper.cpp main.cpp miner.cpp \\\n-  netbase.cpp net.cpp noui.cpp protocol.cpp rpcblockchain.cpp rpcdump.cpp \\\n-  rpcmining.cpp rpcnet.cpp rpcrawtransaction.cpp rpcwallet.cpp script.cpp \\\n-  sync.cpp txdb.cpp txmempool.cpp util.cpp version.cpp wallet.cpp walletdb.cpp $(JSON_H) \\\n+  chainparams.cpp checkpoints.cpp coins.cpp crypter.cpp db.cpp \\\n+  init.cpp keystore.cpp leveldbwrapper.cpp main.cpp miner.cpp \\\n+  net.cpp noui.cpp rpcblockchain.cpp rpcdump.cpp \\\n+  rpcmining.cpp rpcnet.cpp rpcrawtransaction.cpp rpcwallet.cpp \\\n+  txdb.cpp txmempool.cpp wallet.cpp walletdb.cpp $(JSON_H) \\\n+  $(BITCOIN_CORE_H)\n+\n+libbitcoin_common_a_SOURCES = \\\n+  allocators.cpp \\\n+  chainparams.cpp \\\n+  core.cpp \\\n+  hash.cpp \\\n+  key.cpp \\\n+  netbase.cpp \\\n+  protocol.cpp \\\n+  rpcprotocol.cpp \\\n+  script.cpp \\\n+  sync.cpp \\\n+  util.cpp \\\n+  version.cpp \\\n   $(BITCOIN_CORE_H)\n \n-nodist_libbitcoin_a_SOURCES = $(top_srcdir)/src/obj/build.h\n+libbitcoin_cli_a_SOURCES = \\\n+  rpcclient.cpp \\\n+  $(BITCOIN_CORE_H)\n+\n+nodist_libbitcoin_common_a_SOURCES = $(top_srcdir)/src/obj/build.h\n #\n \n # bitcoind binary #\n-bitcoind_LDADD = libbitcoin.a leveldb/libleveldb.a leveldb/libmemenv.a \\\n+bitcoind_LDADD = libbitcoin_server.a libbitcoin_cli.a libbitcoin_common.a leveldb/libleveldb.a leveldb/libmemenv.a \\\n   $(BOOST_LIBS)\n bitcoind_SOURCES = bitcoind.cpp\n #\n@@ -62,15 +79,13 @@ AM_CPPFLAGS += $(BDB_CPPFLAGS)\n bitcoind_LDADD += $(BDB_LIBS)\n \n # bitcoin-cli binary #\n-bitcoin_cli_LDADD = libbitcoin.a leveldb/libleveldb.a leveldb/libmemenv.a \\\n-  $(BOOST_LIBS)\n+bitcoin_cli_LDADD = libbitcoin_cli.a libbitcoin_common.a $(BOOST_LIBS)\n bitcoin_cli_SOURCES = bitcoin-cli.cpp\n #\n \n if TARGET_WINDOWS\n bitcoin_cli_SOURCES += bitcoin-cli-res.rc\n endif\n-bitcoin_cli_LDADD += $(BDB_LIBS)\n \n leveldb/libleveldb.a: leveldb/libmemenv.a\n \n@@ -79,7 +94,7 @@ leveldb/%.a:\n \t  CC=\"$(CC)\" PLATFORM=$(TARGET_OS) AR=\"$(AR)\" $(LEVELDB_TARGET_FLAGS) \\\n \t  OPT=\"$(CXXFLAGS) $(CPPFLAGS)\"\n \n-qt/bitcoinstrings.cpp: $(libbitcoin_a_SOURCES)\n+qt/bitcoinstrings.cpp: $(libbitcoin_server_a_SOURCES) $(libbitcoin_common_a_SOURCES) $(libbitcoin_cli_a_SOURCES)\n \t@test -n $(XGETTEXT) || echo \"xgettext is required for updating translations\"\n \t@cd $(top_srcdir); XGETTEXT=$(XGETTEXT) share/qt/extract_strings_qt.py\n "
      },
      {
        "sha": "2e96a6b7dccfc70f0421acae046997168070845b",
        "filename": "src/Makefile.include",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/Makefile.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/Makefile.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.include?ref=0b47fe6bdc14e942bc886a08a55cc183c6820636",
        "patch": "@@ -5,7 +5,9 @@ AM_CPPFLAGS =  $(INCLUDES) \\\n   $(BOOST_INCLUDES)\n AM_LDFLAGS = $(PTHREAD_CFLAGS)\n \n-LIBBITCOIN=$(top_builddir)/src/libbitcoin.a\n+LIBBITCOIN_SERVER=$(top_builddir)/src/libbitcoin_server.a\n+LIBBITCOIN_COMMON=$(top_builddir)/src/libbitcoin_common.a\n+LIBBITCOIN_CLI=$(top_builddir)/src/libbitcoin_cli.a\n LIBLEVELDB=$(top_builddir)/src/leveldb/libleveldb.a\n LIBMEMENV=$(top_builddir)/src/leveldb/libmemenv.a\n LIBBITCOINQT=$(top_builddir)/src/qt/libbitcoinqt.a"
      },
      {
        "sha": "04b75e7f1cdaedca6b7732fea58c8905a1963d4d",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=0b47fe6bdc14e942bc886a08a55cc183c6820636",
        "patch": "@@ -42,7 +42,7 @@ static bool AppInitRPC(int argc, char* argv[])\n               \"  bitcoin-cli [options] help                \" + _(\"List commands\") + \"\\n\" +\n               \"  bitcoin-cli [options] help <command>      \" + _(\"Get help for a command\") + \"\\n\";\n \n-        strUsage += \"\\n\" + HelpMessage(HMM_BITCOIN_CLI);\n+        strUsage += \"\\n\" + HelpMessageCli(true);\n \n         fprintf(stdout, \"%s\", strUsage.c_str());\n         return false;"
      },
      {
        "sha": "e13d688158ad63d65a0ba54775ed2514313221bb",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=0b47fe6bdc14e942bc886a08a55cc183c6820636",
        "patch": "@@ -87,6 +87,7 @@ bool AppInit(int argc, char* argv[])\n                   \"  bitcoind [options] help <command>      \" + _(\"Get help for a command\") + \"\\n\";\n \n             strUsage += \"\\n\" + HelpMessage(HMM_BITCOIND);\n+            strUsage += \"\\n\" + HelpMessageCli(false);\n \n             fprintf(stdout, \"%s\", strUsage.c_str());\n             return false;"
      },
      {
        "sha": "54722743e60bdfb37b43a9519aa1985477a554fc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 84,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0b47fe6bdc14e942bc886a08a55cc183c6820636",
        "patch": "@@ -37,7 +37,6 @@ using namespace boost;\n \n std::string strWalletFile;\n CWallet* pwalletMain;\n-CClientUIInterface uiInterface;\n \n #ifdef WIN32\n // Win32 LevelDB doesn't use filedescriptors, and the ones used for\n@@ -181,45 +180,43 @@ std::string HelpMessage(HelpMessageMode hmm)\n     strUsage += \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\";\n     strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n \n-    if(hmm == HMM_BITCOIND || hmm == HMM_BITCOIN_QT)\n-    {\n-        strUsage += \"  -pid=<file>            \" + _(\"Specify pid file (default: bitcoind.pid)\") + \"\\n\";\n-        strUsage += \"  -gen                   \" + _(\"Generate coins (default: 0)\") + \"\\n\";\n-        strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \"\\n\";\n-        strUsage += \"  -dbcache=<n>           \" + _(\"Set database cache size in megabytes (default: 25)\") + \"\\n\";\n-        strUsage += \"  -timeout=<n>           \" + _(\"Specify connection timeout in milliseconds (default: 5000)\") + \"\\n\";\n-        strUsage += \"  -proxy=<ip:port>       \" + _(\"Connect through socks proxy\") + \"\\n\";\n-        strUsage += \"  -socks=<n>             \" + _(\"Select the version of socks proxy to use (4-5, default: 5)\") + \"\\n\";\n-        strUsage += \"  -onion=<ip:port>         \" + _(\"Use proxy to reach tor hidden services (default: same as -proxy)\") + \"\\n\";\n-        strUsage += \"  -dns                   \" + _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \"\\n\";\n-        strUsage += \"  -port=<port>           \" + _(\"Listen for connections on <port> (default: 8333 or testnet: 18333)\") + \"\\n\";\n-        strUsage += \"  -maxconnections=<n>    \" + _(\"Maintain at most <n> connections to peers (default: 125)\") + \"\\n\";\n-        strUsage += \"  -addnode=<ip>          \" + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\";\n-        strUsage += \"  -connect=<ip>          \" + _(\"Connect only to the specified node(s)\") + \"\\n\";\n-        strUsage += \"  -seednode=<ip>         \" + _(\"Connect to a node to retrieve peer addresses, and disconnect\") + \"\\n\";\n-        strUsage += \"  -externalip=<ip>       \" + _(\"Specify your own public address\") + \"\\n\";\n-        strUsage += \"  -onlynet=<net>         \" + _(\"Only connect to nodes in network <net> (IPv4, IPv6 or Tor)\") + \"\\n\";\n-        strUsage += \"  -discover              \" + _(\"Discover own IP address (default: 1 when listening and no -externalip)\") + \"\\n\";\n-        strUsage += \"  -checkpoints           \" + _(\"Only accept block chain matching built-in checkpoints (default: 1)\") + \"\\n\";\n-        strUsage += \"  -listen                \" + _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\") + \"\\n\";\n-        strUsage += \"  -bind=<addr>           \" + _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\") + \"\\n\";\n-        strUsage += \"  -dnsseed               \" + _(\"Find peers using DNS lookup (default: 1 unless -connect)\") + \"\\n\";\n-        strUsage += \"  -banscore=<n>          \" + _(\"Threshold for disconnecting misbehaving peers (default: 100)\") + \"\\n\";\n-        strUsage += \"  -bantime=<n>           \" + _(\"Number of seconds to keep misbehaving peers from reconnecting (default: 86400)\") + \"\\n\";\n-        strUsage += \"  -maxreceivebuffer=<n>  \" + _(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: 5000)\") + \"\\n\";\n-        strUsage += \"  -maxsendbuffer=<n>     \" + _(\"Maximum per-connection send buffer, <n>*1000 bytes (default: 1000)\") + \"\\n\";\n+    strUsage += \"  -pid=<file>            \" + _(\"Specify pid file (default: bitcoind.pid)\") + \"\\n\";\n+    strUsage += \"  -gen                   \" + _(\"Generate coins (default: 0)\") + \"\\n\";\n+    strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \"\\n\";\n+    strUsage += \"  -dbcache=<n>           \" + _(\"Set database cache size in megabytes (default: 25)\") + \"\\n\";\n+    strUsage += \"  -timeout=<n>           \" + _(\"Specify connection timeout in milliseconds (default: 5000)\") + \"\\n\";\n+    strUsage += \"  -proxy=<ip:port>       \" + _(\"Connect through socks proxy\") + \"\\n\";\n+    strUsage += \"  -socks=<n>             \" + _(\"Select the version of socks proxy to use (4-5, default: 5)\") + \"\\n\";\n+    strUsage += \"  -onion=<ip:port>         \" + _(\"Use proxy to reach tor hidden services (default: same as -proxy)\") + \"\\n\";\n+    strUsage += \"  -dns                   \" + _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \"\\n\";\n+    strUsage += \"  -port=<port>           \" + _(\"Listen for connections on <port> (default: 8333 or testnet: 18333)\") + \"\\n\";\n+    strUsage += \"  -maxconnections=<n>    \" + _(\"Maintain at most <n> connections to peers (default: 125)\") + \"\\n\";\n+    strUsage += \"  -addnode=<ip>          \" + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\";\n+    strUsage += \"  -connect=<ip>          \" + _(\"Connect only to the specified node(s)\") + \"\\n\";\n+    strUsage += \"  -seednode=<ip>         \" + _(\"Connect to a node to retrieve peer addresses, and disconnect\") + \"\\n\";\n+    strUsage += \"  -externalip=<ip>       \" + _(\"Specify your own public address\") + \"\\n\";\n+    strUsage += \"  -onlynet=<net>         \" + _(\"Only connect to nodes in network <net> (IPv4, IPv6 or Tor)\") + \"\\n\";\n+    strUsage += \"  -discover              \" + _(\"Discover own IP address (default: 1 when listening and no -externalip)\") + \"\\n\";\n+    strUsage += \"  -checkpoints           \" + _(\"Only accept block chain matching built-in checkpoints (default: 1)\") + \"\\n\";\n+    strUsage += \"  -listen                \" + _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\") + \"\\n\";\n+    strUsage += \"  -bind=<addr>           \" + _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\") + \"\\n\";\n+    strUsage += \"  -dnsseed               \" + _(\"Find peers using DNS lookup (default: 1 unless -connect)\") + \"\\n\";\n+    strUsage += \"  -banscore=<n>          \" + _(\"Threshold for disconnecting misbehaving peers (default: 100)\") + \"\\n\";\n+    strUsage += \"  -bantime=<n>           \" + _(\"Number of seconds to keep misbehaving peers from reconnecting (default: 86400)\") + \"\\n\";\n+    strUsage += \"  -maxreceivebuffer=<n>  \" + _(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: 5000)\") + \"\\n\";\n+    strUsage += \"  -maxsendbuffer=<n>     \" + _(\"Maximum per-connection send buffer, <n>*1000 bytes (default: 1000)\") + \"\\n\";\n #ifdef USE_UPNP\n #if USE_UPNP\n-        strUsage += \"  -upnp                  \" + _(\"Use UPnP to map the listening port (default: 1 when listening)\") + \"\\n\";\n+    strUsage += \"  -upnp                  \" + _(\"Use UPnP to map the listening port (default: 1 when listening)\") + \"\\n\";\n #else\n-        strUsage += \"  -upnp                  \" + _(\"Use UPnP to map the listening port (default: 0)\") + \"\\n\";\n+    strUsage += \"  -upnp                  \" + _(\"Use UPnP to map the listening port (default: 0)\") + \"\\n\";\n #endif\n #endif\n-        strUsage += \"  -paytxfee=<amt>        \" + _(\"Fee per KB to add to transactions you send\") + \"\\n\";\n-        strUsage += \"  -debug=<category>      \" + _(\"Output debugging information (default: 0, supplying <category> is optional)\") + \"\\n\";\n-        strUsage +=                               _(\"If <category> is not supplied, output all debugging information.\") + \"\\n\";\n-        strUsage +=                               _(\"<category> can be:\");\n-        strUsage +=                                 \" addrman, alert, coindb, db, lock, rand, rpc, selectcoins, mempool, net\"; // Don't translate these and qt below\n+    strUsage += \"  -paytxfee=<amt>        \" + _(\"Fee per KB to add to transactions you send\") + \"\\n\";\n+    strUsage += \"  -debug=<category>      \" + _(\"Output debugging information (default: 0, supplying <category> is optional)\") + \"\\n\";\n+    strUsage +=                               _(\"If <category> is not supplied, output all debugging information.\") + \"\\n\";\n+    strUsage +=                               _(\"<category> can be:\");\n+    strUsage +=                                 \" addrman, alert, coindb, db, lock, rand, rpc, selectcoins, mempool, net\"; // Don't translate these and qt below\n     if (hmm == HMM_BITCOIN_QT)\n     {\n         strUsage += \", qt.\\n\";\n@@ -228,15 +225,14 @@ std::string HelpMessage(HelpMessageMode hmm)\n     {\n         strUsage += \".\\n\";\n     }\n-        strUsage += \"  -logtimestamps         \" + _(\"Prepend debug output with timestamp (default: 1)\") + \"\\n\";\n-        strUsage += \"  -shrinkdebugfile       \" + _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\") + \"\\n\";\n-        strUsage += \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\";\n-        strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n-                                                \"solved instantly. This is intended for regression testing tools and app development.\") + \"\\n\";\n+    strUsage += \"  -logtimestamps         \" + _(\"Prepend debug output with timestamp (default: 1)\") + \"\\n\";\n+    strUsage += \"  -shrinkdebugfile       \" + _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\") + \"\\n\";\n+    strUsage += \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\";\n+    strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n+                                            \"solved instantly. This is intended for regression testing tools and app development.\") + \"\\n\";\n #ifdef WIN32\n-        strUsage += \"  -printtodebugger       \" + _(\"Send trace/debug info to debugger\") + \"\\n\";\n+    strUsage += \"  -printtodebugger       \" + _(\"Send trace/debug info to debugger\") + \"\\n\";\n #endif\n-    }\n \n     if (hmm == HMM_BITCOIN_QT)\n     {\n@@ -250,53 +246,36 @@ std::string HelpMessage(HelpMessageMode hmm)\n #endif\n     }\n \n-    if (hmm == HMM_BITCOIND || hmm == HMM_BITCOIN_CLI)\n-    {\n-        strUsage += \"  -rpcconnect=<ip>       \" + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\";\n-        strUsage += \"  -rpcwait               \" + _(\"Wait for RPC server to start\") + \"\\n\";\n-    }\n-\n     strUsage += \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\";\n     strUsage += \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\";\n-    if (hmm == HMM_BITCOIND || hmm == HMM_BITCOIN_QT)\n-    {\n-        strUsage += \"  -rpcport=<port>        \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332 or testnet: 18332)\") + \"\\n\";\n-    } else {\n-        strUsage += \"  -rpcport=<port>        \" + _(\"Connect to JSON-RPC on <port> (default: 8332 or testnet: 18332)\") + \"\\n\";\n-    }\n-\n-    if(hmm == HMM_BITCOIND || hmm == HMM_BITCOIN_QT)\n-    {\n-        strUsage += \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified IP address\") + \"\\n\";\n-        strUsage += \"  -rpcthreads=<n>        \" + _(\"Set the number of threads to service RPC calls (default: 4)\") + \"\\n\";\n-        strUsage += \"  -blocknotify=<cmd>     \" + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\";\n-        strUsage += \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\";\n-        strUsage += \"  -alertnotify=<cmd>     \" + _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\") + \"\\n\";\n-        strUsage += \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \"\\n\";\n-        strUsage += \"  -keypool=<n>           \" + _(\"Set key pool size to <n> (default: 100)\") + \"\\n\";\n-        strUsage += \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \"\\n\";\n-        strUsage += \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \"\\n\";\n-        strUsage += \"  -checkblocks=<n>       \" + _(\"How many blocks to check at startup (default: 288, 0 = all)\") + \"\\n\";\n-        strUsage += \"  -checklevel=<n>        \" + _(\"How thorough the block verification is (0-4, default: 3)\") + \"\\n\";\n-        strUsage += \"  -txindex               \" + _(\"Maintain a full transaction index (default: 0)\") + \"\\n\";\n-        strUsage += \"  -loadblock=<file>      \" + _(\"Imports blocks from external blk000??.dat file\") + \"\\n\";\n-        strUsage += \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \"\\n\";\n-        strUsage += \"  -par=<n>               \" + _(\"Set the number of script verification threads (up to 16, 0 = auto, <0 = leave that many cores free, default: 0)\") + \"\\n\";\n-\n-        strUsage += \"\\n\" + _(\"Block creation options:\") + \"\\n\";\n-        strUsage += \"  -blockminsize=<n>      \"   + _(\"Set minimum block size in bytes (default: 0)\") + \"\\n\";\n-        strUsage += \"  -blockmaxsize=<n>      \"   + _(\"Set maximum block size in bytes (default: 250000)\") + \"\\n\";\n-        strUsage += \"  -blockprioritysize=<n> \"   + _(\"Set maximum size of high-priority/low-fee transactions in bytes (default: 27000)\") + \"\\n\";\n-    }\n+    strUsage += \"  -rpcport=<port>        \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332 or testnet: 18332)\") + \"\\n\";\n+\n+    strUsage += \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified IP address\") + \"\\n\";\n+    strUsage += \"  -rpcthreads=<n>        \" + _(\"Set the number of threads to service RPC calls (default: 4)\") + \"\\n\";\n+    strUsage += \"  -blocknotify=<cmd>     \" + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\";\n+    strUsage += \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\";\n+    strUsage += \"  -alertnotify=<cmd>     \" + _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\") + \"\\n\";\n+    strUsage += \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \"\\n\";\n+    strUsage += \"  -keypool=<n>           \" + _(\"Set key pool size to <n> (default: 100)\") + \"\\n\";\n+    strUsage += \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \"\\n\";\n+    strUsage += \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \"\\n\";\n+    strUsage += \"  -checkblocks=<n>       \" + _(\"How many blocks to check at startup (default: 288, 0 = all)\") + \"\\n\";\n+    strUsage += \"  -checklevel=<n>        \" + _(\"How thorough the block verification is (0-4, default: 3)\") + \"\\n\";\n+    strUsage += \"  -txindex               \" + _(\"Maintain a full transaction index (default: 0)\") + \"\\n\";\n+    strUsage += \"  -loadblock=<file>      \" + _(\"Imports blocks from external blk000??.dat file\") + \"\\n\";\n+    strUsage += \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \"\\n\";\n+    strUsage += \"  -par=<n>               \" + _(\"Set the number of script verification threads (up to 16, 0 = auto, <0 = leave that many cores free, default: 0)\") + \"\\n\";\n+\n+    strUsage += \"\\n\" + _(\"Block creation options:\") + \"\\n\";\n+    strUsage += \"  -blockminsize=<n>      \"   + _(\"Set minimum block size in bytes (default: 0)\") + \"\\n\";\n+    strUsage += \"  -blockmaxsize=<n>      \"   + _(\"Set maximum block size in bytes (default: 250000)\") + \"\\n\";\n+    strUsage += \"  -blockprioritysize=<n> \"   + _(\"Set maximum size of high-priority/low-fee transactions in bytes (default: 27000)\") + \"\\n\";\n \n     strUsage += \"\\n\" + _(\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n     strUsage += \"  -rpcssl                                  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";\n-    if (hmm == HMM_BITCOIND || hmm == HMM_BITCOIN_QT)\n-    {\n-        strUsage += \"  -rpcsslcertificatechainfile=<file.cert>  \" + _(\"Server certificate file (default: server.cert)\") + \"\\n\";\n-        strUsage += \"  -rpcsslprivatekeyfile=<file.pem>         \" + _(\"Server private key (default: server.pem)\") + \"\\n\";\n-        strUsage += \"  -rpcsslciphers=<ciphers>                 \" + _(\"Acceptable ciphers (default: TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH)\") + \"\\n\";\n-    }\n+    strUsage += \"  -rpcsslcertificatechainfile=<file.cert>  \" + _(\"Server certificate file (default: server.cert)\") + \"\\n\";\n+    strUsage += \"  -rpcsslprivatekeyfile=<file.pem>         \" + _(\"Server private key (default: server.pem)\") + \"\\n\";\n+    strUsage += \"  -rpcsslciphers=<ciphers>                 \" + _(\"Acceptable ciphers (default: TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH)\") + \"\\n\";\n \n     return strUsage;\n }"
      },
      {
        "sha": "018d2d5ea313d85d138d38ead4b07d81cc9824cf",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=0b47fe6bdc14e942bc886a08a55cc183c6820636",
        "patch": "@@ -26,8 +26,7 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer);\n enum HelpMessageMode\n {\n     HMM_BITCOIND,\n-    HMM_BITCOIN_QT,\n-    HMM_BITCOIN_CLI\n+    HMM_BITCOIN_QT\n };\n \n std::string HelpMessage(HelpMessageMode mode);"
      },
      {
        "sha": "e302adc89f8eb845306df2ca095279d8bc5babd2",
        "filename": "src/qt/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/qt/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/qt/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/Makefile.am?ref=0b47fe6bdc14e942bc886a08a55cc183c6820636",
        "patch": "@@ -197,7 +197,7 @@ endif\n bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(QT_INCLUDES) \\\n   -I$(top_srcdir)/src/qt/forms\n bitcoin_qt_SOURCES = bitcoin.cpp\n-bitcoin_qt_LDADD = libbitcoinqt.a $(LIBBITCOIN) $(LIBLEVELDB) $(LIBMEMENV) \\\n+bitcoin_qt_LDADD = libbitcoinqt.a $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS)\n \n # forms/foo.h -> forms/ui_foo.h"
      },
      {
        "sha": "29247a79a10b36845a8b4c8e1e3867d697e90b07",
        "filename": "src/qt/test/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/qt/test/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/qt/test/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/Makefile.am?ref=0b47fe6bdc14e942bc886a08a55cc183c6820636",
        "patch": "@@ -17,7 +17,7 @@ BUILT_SOURCES = $(TEST_QT_MOC_CPP)\n test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(QT_INCLUDES) $(QT_TEST_INCLUDES)\n test_bitcoin_qt_SOURCES = test_main.cpp uritests.cpp paymentservertests.cpp $(TEST_QT_H)\n nodist_test_bitcoin_qt_SOURCES = $(TEST_QT_MOC_CPP)\n-test_bitcoin_qt_LDADD = $(LIBBITCOINQT) $(LIBBITCOIN) $(LIBLEVELDB) \\\n+test_bitcoin_qt_LDADD = $(LIBBITCOINQT) $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBLEVELDB) \\\n   $(LIBMEMENV) $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS)\n "
      },
      {
        "sha": "1957cfa432b66677da960fd156d723550ea5e017",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=0b47fe6bdc14e942bc886a08a55cc183c6820636",
        "patch": "@@ -244,3 +244,35 @@ int CommandLineRPC(int argc, char *argv[])\n     }\n     return nRet;\n }\n+\n+std::string HelpMessageCli(bool mainProgram)\n+{\n+    string strUsage;\n+    if(mainProgram)\n+    {\n+        strUsage += _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                     \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -conf=<file>           \" + _(\"Specify configuration file (default: bitcoin.conf)\") + \"\\n\";\n+        strUsage += \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\";\n+        strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n+                                            \"solved instantly. This is intended for regression testing tools and app development.\") + \"\\n\";\n+    } else {\n+        strUsage += _(\"RPC client options:\") + \"\\n\";\n+    }\n+\n+    strUsage += \"  -rpcconnect=<ip>       \" + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\";\n+    strUsage += \"  -rpcport=<port>        \" + _(\"Connect to JSON-RPC on <port> (default: 8332 or testnet: 18332)\") + \"\\n\";\n+    strUsage += \"  -rpcwait               \" + _(\"Wait for RPC server to start\") + \"\\n\";\n+    strUsage += \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\";\n+    strUsage += \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\";\n+\n+    if(mainProgram)\n+    {\n+        strUsage += \"\\n\" + _(\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n+        strUsage += \"  -rpcssl                \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";\n+    }\n+\n+    return strUsage;\n+}\n+"
      },
      {
        "sha": "e101d22ec56912a2cca5b83e56bf060c28926899",
        "filename": "src/rpcclient.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/rpcclient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/rpcclient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.h?ref=0b47fe6bdc14e942bc886a08a55cc183c6820636",
        "patch": "@@ -14,4 +14,12 @@ int CommandLineRPC(int argc, char *argv[]);\n \n json_spirit::Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams);\n \n+/** Show help message for bitcoin-cli.\n+ * The mainProgram argument is used to determine whether to show this message as main program\n+ * (and include some common options) or as sub-header of another help message.\n+ *\n+ * @note the argument can be removed once bitcoin-cli functionality is removed from bitcoind\n+ */\n+std::string HelpMessageCli(bool mainProgram);\n+\n #endif"
      },
      {
        "sha": "39f2c6a385329ce3a4afd15dbcfc8400212f0449",
        "filename": "src/test/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/test/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/test/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Makefile.am?ref=0b47fe6bdc14e942bc886a08a55cc183c6820636",
        "patch": "@@ -20,7 +20,7 @@ BUILT_SOURCES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)\n \n # test_bitcoin binary #\n test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(TESTDEFS)\n-test_bitcoin_LDADD = $(LIBBITCOIN) $(LIBLEVELDB) $(LIBMEMENV) \\\n+test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(BDB_LIBS)\n test_bitcoin_SOURCES = accounting_tests.cpp alert_tests.cpp \\\n   allocator_tests.cpp base32_tests.cpp base58_tests.cpp base64_tests.cpp \\"
      },
      {
        "sha": "443e7735d71731887eb8ce6c77397858965c7a5e",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=0b47fe6bdc14e942bc886a08a55cc183c6820636",
        "patch": "@@ -14,7 +14,6 @@\n \n \n CWallet* pwalletMain;\n-CClientUIInterface uiInterface;\n \n extern bool fPrintToConsole;\n extern void noui_connect();"
      },
      {
        "sha": "a8c591cc7a39d2d17b54ebb029967f7e8ed20326",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b47fe6bdc14e942bc886a08a55cc183c6820636/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=0b47fe6bdc14e942bc886a08a55cc183c6820636",
        "patch": "@@ -95,6 +95,7 @@ string strMiscWarning;\n bool fNoListen = false;\n bool fLogTimestamps = false;\n volatile bool fReopenDebugLog = false;\n+CClientUIInterface uiInterface;\n \n // Init OpenSSL library multithreading support\n static CCriticalSection** ppmutexOpenSSL;\n@@ -1511,3 +1512,4 @@ void RenameThread(const char* name)\n     (void)name;\n #endif\n }\n+"
      }
    ]
  }
]