[
  {
    "sha": "a32bc305470ff6f48f016761e79bc222dc5cc192",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzJiYzMwNTQ3MGZmNmY0OGYwMTY3NjFlNzliYzIyMmRjNWNjMTky",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-30T09:08:54Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-03-11T21:58:46Z"
      },
      "message": "net: Avoid locking cs_vNodes twice when calling FindNode(...). Add NodeExists(...).\n\nPrior to this commit callers of `FindNode(...)` were required to\nbe holding `cs_vNodes` only in the cases where they used the\nreturned `CNode*` for anything aside from existence-checking\n(see #9626).\n\nThis resulted in locking `cs_vNodes` twice since `FindNode(...)`\nhad a `LOCK(cs_vNodes);`.\n\nTo solve this and to make the locking requirements more explicit this\ncommit does the following:\n* Add explicit locking requirements for `FindNode(...)`\n  using `EXCLUSIVE_LOCKS_REQUIRED(cs_vNodes)`.\n* Remove the now redundant `LOCK(cs_vNodes)` in `FindNode(...)`.\n* Add a method `CConnman::NodeExists(...)` for existence-checking.\n  Calling this method does not require holding `cs_vNodes`.",
      "tree": {
        "sha": "d751a1e95e762bb9142c59994d736c5a79618733",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d751a1e95e762bb9142c59994d736c5a79618733"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a32bc305470ff6f48f016761e79bc222dc5cc192",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a32bc305470ff6f48f016761e79bc222dc5cc192",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a32bc305470ff6f48f016761e79bc222dc5cc192",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a32bc305470ff6f48f016761e79bc222dc5cc192/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8d9162f5bad39b2720dd2b2da237c6159e4755f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8d9162f5bad39b2720dd2b2da237c6159e4755f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8d9162f5bad39b2720dd2b2da237c6159e4755f"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 45,
      "deletions": 13
    },
    "files": [
      {
        "sha": "b73fbb4480ac23a0f289b3cd46136f4e2f90c709",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 9,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a32bc305470ff6f48f016761e79bc222dc5cc192/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a32bc305470ff6f48f016761e79bc222dc5cc192/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a32bc305470ff6f48f016761e79bc222dc5cc192",
        "patch": "@@ -299,7 +299,7 @@ bool IsReachable(const CNetAddr& addr)\n \n CNode* CConnman::FindNode(const CNetAddr& ip)\n {\n-    LOCK(cs_vNodes);\n+    AssertLockHeld(cs_vNodes);\n     for (CNode* pnode : vNodes) {\n       if (static_cast<CNetAddr>(pnode->addr) == ip) {\n             return pnode;\n@@ -310,7 +310,7 @@ CNode* CConnman::FindNode(const CNetAddr& ip)\n \n CNode* CConnman::FindNode(const CSubNet& subNet)\n {\n-    LOCK(cs_vNodes);\n+    AssertLockHeld(cs_vNodes);\n     for (CNode* pnode : vNodes) {\n         if (subNet.Match(static_cast<CNetAddr>(pnode->addr))) {\n             return pnode;\n@@ -321,7 +321,7 @@ CNode* CConnman::FindNode(const CSubNet& subNet)\n \n CNode* CConnman::FindNode(const std::string& addrName)\n {\n-    LOCK(cs_vNodes);\n+    AssertLockHeld(cs_vNodes);\n     for (CNode* pnode : vNodes) {\n         if (pnode->GetAddrName() == addrName) {\n             return pnode;\n@@ -332,7 +332,7 @@ CNode* CConnman::FindNode(const std::string& addrName)\n \n CNode* CConnman::FindNode(const CService& addr)\n {\n-    LOCK(cs_vNodes);\n+    AssertLockHeld(cs_vNodes);\n     for (CNode* pnode : vNodes) {\n         if (static_cast<CService>(pnode->addr) == addr) {\n             return pnode;\n@@ -341,6 +341,34 @@ CNode* CConnman::FindNode(const CService& addr)\n     return nullptr;\n }\n \n+bool CConnman::NodeExists(const CNetAddr& ip)\n+{\n+    AssertLockNotHeld(cs_vNodes);\n+    LOCK(cs_vNodes);\n+    return FindNode(ip) != nullptr;\n+}\n+\n+bool CConnman::NodeExists(const CSubNet& subNet)\n+{\n+    AssertLockNotHeld(cs_vNodes);\n+    LOCK(cs_vNodes);\n+    return FindNode(subNet) != nullptr;\n+}\n+\n+bool CConnman::NodeExists(const std::string& addrName)\n+{\n+    AssertLockNotHeld(cs_vNodes);\n+    LOCK(cs_vNodes);\n+    return FindNode(addrName) != nullptr;\n+}\n+\n+bool CConnman::NodeExists(const CService& addr)\n+{\n+    AssertLockNotHeld(cs_vNodes);\n+    LOCK(cs_vNodes);\n+    return FindNode(addr) != nullptr;\n+}\n+\n bool CConnman::CheckIncomingNonce(uint64_t nonce)\n {\n     LOCK(cs_vNodes);\n@@ -374,8 +402,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             return nullptr;\n \n         // Look for an existing connection\n-        CNode* pnode = FindNode(static_cast<CService>(addrConnect));\n-        if (pnode)\n+        if (NodeExists(static_cast<CService>(addrConnect)))\n         {\n             LogPrintf(\"Failed to open new connection, already connected\\n\");\n             return nullptr;\n@@ -1985,10 +2012,10 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     }\n     if (!pszDest) {\n         if (IsLocal(addrConnect) ||\n-            FindNode(static_cast<CNetAddr>(addrConnect)) || IsBanned(addrConnect) ||\n-            FindNode(addrConnect.ToStringIPPort()))\n+            NodeExists(static_cast<CNetAddr>(addrConnect)) || IsBanned(addrConnect) ||\n+            NodeExists(addrConnect.ToStringIPPort()))\n             return;\n-    } else if (FindNode(std::string(pszDest)))\n+    } else if (NodeExists(std::string(pszDest)))\n         return;\n \n     CNode* pnode = ConnectNode(addrConnect, pszDest, fCountFailure);"
      },
      {
        "sha": "4723a0dc3d410526753fd87075bc362987614280",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a32bc305470ff6f48f016761e79bc222dc5cc192/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a32bc305470ff6f48f016761e79bc222dc5cc192/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a32bc305470ff6f48f016761e79bc222dc5cc192",
        "patch": "@@ -332,10 +332,15 @@ class CConnman\n \n     uint64_t CalculateKeyedNetGroup(const CAddress& ad) const;\n \n-    CNode* FindNode(const CNetAddr& ip);\n-    CNode* FindNode(const CSubNet& subNet);\n-    CNode* FindNode(const std::string& addrName);\n-    CNode* FindNode(const CService& addr);\n+    CNode* FindNode(const CNetAddr& ip) EXCLUSIVE_LOCKS_REQUIRED(cs_vNodes);\n+    CNode* FindNode(const CSubNet& subNet) EXCLUSIVE_LOCKS_REQUIRED(cs_vNodes);\n+    CNode* FindNode(const std::string& addrName) EXCLUSIVE_LOCKS_REQUIRED(cs_vNodes);\n+    CNode* FindNode(const CService& addr) EXCLUSIVE_LOCKS_REQUIRED(cs_vNodes);\n+\n+    bool NodeExists(const CNetAddr& ip) LOCKS_EXCLUDED(cs_vNodes);\n+    bool NodeExists(const CSubNet& subNet) LOCKS_EXCLUDED(cs_vNodes);\n+    bool NodeExists(const std::string& addrName) LOCKS_EXCLUDED(cs_vNodes);\n+    bool NodeExists(const CService& addr) LOCKS_EXCLUDED(cs_vNodes);\n \n     bool AttemptToEvictConnection();\n     CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure);"
      }
    ]
  }
]