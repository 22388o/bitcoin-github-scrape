prayank23,2021-07-23 15:32:35,"Concept ACK \n\n\n![image](https://user-images.githubusercontent.com/13405205/126806362-5131232e-4ec3-44a5-bec2-05aafd030640.png)\n",https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-885722039,885722039,
darosior,2021-07-23 16:08:31,"Asking the mempool statistics reference on IRC, @0xB10C pointed out to me there are between 2000 and 6000 replacements per day at the moment.",https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-885743844,885743844,
prayank23,2021-07-23 16:34:44,"> Out of interest, did anyone collect stats on how many txs are replacements? Edit: see previous comment\n\nAlthough 0xb10c shared there are 2000-6000 replacement tx per day , I don't think it matters for few reasons:\n\n1. Fee estimation is a meme IMO or maybe helps in UX for newbies. You cannot predict if a fee rate will confirm the transaction in next N blocks. Context: https://bitcoin.stac",https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-885759874,885759874,
0xB10C,2021-07-23 16:41:27,"> Out of interest, did anyone collect stats on how many txs are replacements? Edit: see previous comment\n\n![image](https://user-images.githubusercontent.com/19157360/126814167-15aae792-cc2b-46a5-8445-bd37fdfca1a2.png)\n",https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-885763670,885763670,
Rspigler,2021-07-25 23:57:00,"Concept ACK, due to reasons stated in OP",https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-886278775,886278775,
darosior,2021-07-29 09:11:32,"For what it's worth, I've been comparing running this on 2 pretty similar nodes for the past week. This didn't affect estimates, it must be because we are currently in a pretty low fee period.",https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-888947157,888947157,
DrahtBot,2021-08-10 20:26:34,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23075](https://github.com/bitcoin/bitcoin/pull/23075) (refactoring: Fee estimation functional test cleanups by darosior)",https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-896295043,896295043,
darosior,2021-08-31 15:26:46,Rebased on master after #22796 merge and addressed @theStack 's nit.,https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-909341560,909341560,
josibake,2021-09-02 07:48:58,re-ACK https://github.com/bitcoin/bitcoin/pull/22539/commits/5b29258076a3665100400768de8124be64eb4c6f,https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-911333486,911333486,
fanquake,2021-09-10 06:45:57,"@darosior sorry for making you rebase again, but this change is more straightforward than some other PRs in that regard.",https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-916671292,916671292,
darosior,2021-09-15 11:18:44,"Rebased\n\n> sorry for making you rebase again, but this change is more straightforward\n\nSure",https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-919929841,919929841,
prayank23,2021-09-16 15:23:34,"ACK https://github.com/bitcoin/bitcoin/pull/22539/commits/fab8ce071566033316189283684340424cb2f7d0\n\nAlthough I still have the same opinion: https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-885759874\n\nLets not restrict it for some transactions because of numbers.",https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-921000599,921000599,
darosior,2021-09-24 13:48:00,"Thanks everyone for following, please bear with me one more time :)\n\nRebased on master to solve conflict, added a functional test demonstrating behaviour (similarly to #23074 ) and added release notes.",https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-926638890,926638890,
darosior,2021-09-24 16:31:56,"So i've been plotting the estimates at each block on both a node with this patch and one without. Here are the results for the past 3 days (still running)\n\n![image](https://user-images.githubusercontent.com/22457751/134709338-fd2ac969-7c41-4df8-9599-377b8d456552.png)\n\nFeerate is low at the moment so there is hardly any divergence.\nData for generating this plot can be found here https://g",https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-926766465,926766465,
darosior,2021-09-29 16:31:20,"Rebased following conflict with #22722 .\n\nHere is the plot of the estimates with and without this patch for the past 8 days:\n![image](https://user-images.githubusercontent.com/22457751/135310699-0c2a2737-246b-4811-bd5d-0035b11950f9.png)\n",https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-930339499,930339499,
prayank23,2021-09-30 04:09:44,"reACK https://github.com/bitcoin/bitcoin/pull/22539/commits/3b613722f6b895d7b268b3f878fddfc888381226\n\n",https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-930765191,930765191,
darosior,2021-09-30 15:31:27,"> transaction is RBF'ed in our mempool, but the original transaction is included in a block\n\nThat's a very good point. I think with this patch we would keep the replacement tx in the buckets until it expires..",https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-931431233,931431233,
glozow,2021-09-30 15:36:10,"> I think with this patch we would keep the replacement tx in the buckets until it expires..\n\nActually, I think it would be removed [here](https://github.com/bitcoin/bitcoin/blob/9013f23b0a6e0e450c4603f9d0f050ff10d552f6/src/txmempool.cpp#L503) when `removeForBlock()` calls `removeConflicts` [here](https://github.com/bitcoin/bitcoin/blob/9013f23b0a6e0e450c4603f9d0f050ff10d552f6/src/txmempool.cp",https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-931435086,931435086,
darosior,2021-10-01 10:06:42,"> Actually, I think it would be removed here when removeForBlock() calls removeConflicts here since it's conflicted out of the mempool. So that's fine, we'd just lose a data point.\n\nSo at first i did not think it was fine. We in this case call `removeTx` with `inBlock` set to `false`, ie counting this removal as a failure to confirm. This could have led to wrecked estimations because we would ",https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-932096391,932096391,
darosior,2021-10-01 10:12:46,@tryphe @theStack @josibake do you mind re-[reviewing-and-]ACKing? I think we are getting close to merge and no other conflicting PR reported by Drahbot seem closer to merge.,https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-932100691,932100691,
darosior,2021-10-15 12:19:52,"For what it's worth here is again another diagram for last ~2 wee\n![702743_705101](https://user-images.githubusercontent.com/22457751/137485633-9867e8ec-dbf1-48a1-969c-9354e8e7399b.png)\nks",https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-944252254,944252254,
MarcoFalke,2021-07-23 15:26:50,"Can also remove `m_replacement_transaction`, now that it is unused and inline `setConflicts.size()` again?",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r675650932,675650932,src/validation.cpp
darosior,2021-07-23 15:52:52,Done.,https://github.com/bitcoin/bitcoin/pull/22539#discussion_r675668597,675668597,src/validation.cpp
MarcoFalke,2021-07-23 16:08:46,"nit: braces go on the same line\n\n```suggestion\n    if (setConflicts.size()) {\n```",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r675678612,675678612,src/validation.cpp
darosior,2021-07-23 16:12:35,Done.,https://github.com/bitcoin/bitcoin/pull/22539#discussion_r675680974,675680974,src/validation.cpp
MarcoFalke,2021-07-24 06:48:25,One risk I could see is that someone running with a full-rbf patch might pay a higher fee now. So I am wondering if this needs to be re-introduced with a full-rbf patch?,https://github.com/bitcoin/bitcoin/pull/22539#discussion_r675959061,675959061,src/validation.cpp
theStack,2021-07-30 20:21:03,"nit: Not sure if we have this in the coding guidelines, but personally I'm not a fan of implicit int-to-bool casts. Could avoid it via e.g.\n```suggestion\n    if (setConflicts.size() > 0) {\n```\nor\n```suggestion\n    if (!setConflicts.empty()) {\n```",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r680198364,680198364,src/validation.cpp
glozow,2021-09-30 13:40:30,"In 4556406562:\n\nA nice followup could be to use `MiniWallet` and get rid of feature_fee_estimation.py's dependency on wallet in general? `send_self_transfer` allows specifying the utxo to spend and the feerate; you wouldn't have to do these  size calculations.",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r719418075,719418075,test/functional/feature_fee_estimation.py
glozow,2021-09-30 14:44:34,"I'm a little confused about why there needs to be 10% of the transactions confirming with low feerate? Why can't the test be:\n\n- broadcast low fee transactions, don't let any of them confirm\n- RBF the low fee transactions with high fee ones, confirm them\n- assert that fee estimate only returns higher feerate\n\n(edit: ended up just writing it https://github.com/glozow/bitcoin/commit/10b8",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r719480641,719480641,test/functional/feature_fee_estimation.py
glozow,2021-09-30 14:58:00,This mines the replacement transactions from a previous iteration of the loop - is that intentional?,https://github.com/bitcoin/bitcoin/pull/22539#discussion_r719494583,719494583,test/functional/feature_fee_estimation.py
glozow,2021-09-30 15:03:27,"I have a question about the desired behavior because it's a subtle thing that isn't mentioned here: with this PR, if a transaction is RBF'ed in our mempool, we add the replacement transaction and remove the original transaction(s) from the fee estimator. If the original transactions end up being mined in a block anyway (e.g. a miner had already started working on it before the replacement transact",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r719499839,719499839,doc/release-notes-22539.md
darosior,2021-09-30 15:21:27,Yeah i could do that in https://github.com/bitcoin/bitcoin/pull/23075 once this one is merged :),https://github.com/bitcoin/bitcoin/pull/22539#discussion_r719516240,719516240,test/functional/feature_fee_estimation.py
darosior,2021-09-30 15:23:25,"> I'm a little confused about why there needs to be 10% of the transactions confirming with low feerate?\n\nThere does not need to, i just wanted to simulate a more realistic scenario than just triggering the specific behaviour.",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r719517968,719517968,test/functional/feature_fee_estimation.py
darosior,2021-09-30 15:25:51,"Yes it is. The point is to simulate a somewhat real life scenario ""broadcast a low fee tx, it does not confirm, it gets RBF'd, the replacement gets confirmed"". You would not RBF before a single block was mined",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r719520185,719520185,test/functional/feature_fee_estimation.py
glozow,2021-09-30 15:29:37,Ah I hadn't seen that - great!,https://github.com/bitcoin/bitcoin/pull/22539#discussion_r719523977,719523977,test/functional/feature_fee_estimation.py
darosior,2021-09-30 15:30:25,"> Is this what we want?\n\nYes, because there is nothing we can do about that. And such a race sounds to be very improbable.. (are there still mining pools refusing RBFs for whatever reason?)\n\n>  If yes, maybe document?\n\nThis is not a change in behaviour, i don't think it should be in the changelog. Before this patch if you accept a replacement transaction in your mempool but the origina",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r719524717,719524717,doc/release-notes-22539.md
glozow,2021-09-30 15:38:42,"ah ok, putting it that way makes sense",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r719531864,719531864,test/functional/feature_fee_estimation.py
glozow,2021-10-01 09:55:18,"Ah you're right, we're already removing the original transactions. My mistake!",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r720112054,720112054,doc/release-notes-22539.md
theStack,2021-10-02 18:22:21,"To avoid manual tx size calculation with magic numbers, you could simply create the `CTransaction` first (without the fee), determine tx size via `len(tx.serialize())` and then subtract the fee. \n\n```suggestion\n    tx = CTransaction()\n    tx.vin = [CTxIn(COutPoint(int(utxo[""txid""], 16), utxo[""vout""]), SCRIPT_SIG[utxo[""vout""]])]\n    tx.vout = [CTxOut(int(utxo[""amount""] * COIN), P2SH_1)]\",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r720711850,720711850,test/functional/feature_fee_estimation.py
theStack,2021-10-02 18:29:12,"Might be a bit shorter and more pythonic without exception:\n```suggestion\n            while utxos_to_respond:\n                u = utxos_to_respend.pop(0)\n                send_tx(node, u, high_feerate)\n```",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r720712618,720712618,test/functional/feature_fee_estimation.py
darosior,2021-10-03 22:33:56,Oh right since we use legacy txs in this test it's indeed much cleaner. However i'd like to not invalidate 4 ACKs on a cosmetic change. Do you mind if i make it a follow-up in #23075 ?,https://github.com/bitcoin/bitcoin/pull/22539#discussion_r720917349,720917349,test/functional/feature_fee_estimation.py
darosior,2021-10-03 22:35:30,"Indeed :man_facepalming: but same rationale as above, as ugly as it is i'd rather address it in #23075",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r720917514,720917514,test/functional/feature_fee_estimation.py
darosior,2021-10-07 15:04:20,"This can only increase the fees for anyone, but if it does it means that it was necessary (a higher feerate was needed in order to have this transaction go through). How could a full-rbf patch wrongly increase estimates?",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r724271453,724271453,src/validation.cpp
MarcoFalke,2021-10-08 11:47:57,"High-fee non-miner-policy txs (In this case full-rbf'ed) might fill your mempool, but never get confirmed, thus raising your estimates.\n\nThis is a general problem and I was just wondering if the patch should be re-introduced for full-rbf (or other similar policy changes in the future).",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r724941584,724941584,src/validation.cpp
darosior,2021-10-08 12:02:25,"Oh for people running it without knowing that some miners do as well.\n\nI think stopping (again) to consider replacement transactions would be a step backward. However it could make sense for a full-RBF patch to stop considering replacement to not-opted-in transactions for fee estimation until the full-RBF policy is reasonably deployed on the network. Since we only implement explicit signaling ",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r724950415,724950415,src/validation.cpp
MarcoFalke,2021-10-08 12:12:52,"Is this something that should be mentioned in the release notes at all? Given that less than 25% of txs are opt-in-rbf and way less than that are conflicts, this shouldn't have any significant effect on real-world fee estimation. See also your findings: https://github.com/bitcoin/bitcoin/pull/22539#issuecomment-930339499\n\nAlso, it doesn't change the P2P protocol or is a network change. At most",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r724956773,724956773,doc/release-notes-22539.md
darosior,2021-10-08 12:23:02,"> See also your findings: #22539 (comment)\n\nI expect this to be very different with a not so low fee market (replacement-aware fee estimation to constantly be slightly higher).\n\n> the section headline could be adjusted\n\nSure, what do you suggest? To be honest i was not sure what headline to use and since fee estimation is ubiquitous i figured it was a notable change, but happy to chang",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r724963150,724963150,doc/release-notes-22539.md
MarcoFalke,2021-10-08 12:34:39,"This will show up in the section ""Policy"" (example: https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-22.0.md#policy), but I think we never had a ""notable change"" policy section. Maybe ""Fee estimation changes""?\n",https://github.com/bitcoin/bitcoin/pull/22539#discussion_r724971313,724971313,doc/release-notes-22539.md
darosior,2021-10-15 09:09:09,Done here https://github.com/bitcoin/bitcoin/pull/23284,https://github.com/bitcoin/bitcoin/pull/22539#discussion_r729653566,729653566,doc/release-notes-22539.md
