[
  {
    "sha": "f05bacdf0f045bb6db882753e5656d12304af78c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDViYWNkZjBmMDQ1YmI2ZGI4ODI3NTNlNTY1NmQxMjMwNGFmNzhj",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-17T20:10:31Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2012-05-22T08:00:55Z"
      },
      "message": "show more tx info, and which node from for Dos(100) events.",
      "tree": {
        "sha": "4efcbab48cb85818cbd2e795335165c279e0b409",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4efcbab48cb85818cbd2e795335165c279e0b409"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f05bacdf0f045bb6db882753e5656d12304af78c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f05bacdf0f045bb6db882753e5656d12304af78c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f05bacdf0f045bb6db882753e5656d12304af78c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f05bacdf0f045bb6db882753e5656d12304af78c/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46784d0826df00d218d25a1e3df419bef36d70ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46784d0826df00d218d25a1e3df419bef36d70ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46784d0826df00d218d25a1e3df419bef36d70ce"
      }
    ],
    "stats": {
      "total": 146,
      "additions": 97,
      "deletions": 49
    },
    "files": [
      {
        "sha": "83b3b1f7e86ac4fdfcc2e8fd5607cc99e9ce835d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 97,
        "deletions": 49,
        "changes": 146,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f05bacdf0f045bb6db882753e5656d12304af78c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f05bacdf0f045bb6db882753e5656d12304af78c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f05bacdf0f045bb6db882753e5656d12304af78c",
        "patch": "@@ -411,47 +411,59 @@ int CMerkleTx::SetMerkleBranch(const CBlock* pblock)\n \n bool CTransaction::CheckTransaction() const\n {\n+    uint256 hash = this->GetHash();\n+\n     // Basic checks that don't depend on any context\n-    if (vin.empty())\n-        return DoS(10, error(\"CTransaction::CheckTransaction() : vin empty\"));\n-    if (vout.empty())\n-        return DoS(10, error(\"CTransaction::CheckTransaction() : vout empty\"));\n+    if (vin.empty()) {\n+        return DoS(10, error(\"checktx: %s vin empty\", hash.ToString().substr(0,10).c_str()));\n+    }\n+    if (vout.empty()) {\n+        return DoS(10, error(\"checktx: %s vout empty\", hash.ToString().substr(0,10).c_str()));\n+    }\n     // Size limits\n-    if (::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return DoS(100, error(\"CTransaction::CheckTransaction() : size limits failed\"));\n+    if (::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE) {\n+        return DoS(100, error(\"checktx: %s size limits failed\", hash.ToString().substr(0,10).c_str()));\n+    }\n \n     // Check for negative or overflow output values\n     int64 nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, vout)\n     {\n-        if (txout.nValue < 0)\n-            return DoS(100, error(\"CTransaction::CheckTransaction() : txout.nValue negative\"));\n-        if (txout.nValue > MAX_MONEY)\n-            return DoS(100, error(\"CTransaction::CheckTransaction() : txout.nValue too high\"));\n+        if (txout.nValue < 0) {\n+            return DoS(100, error(\"checktx: %s txout.nValue negative\", hash.ToString().substr(0,10).c_str()));\n+        }\n+        if (txout.nValue > MAX_MONEY) {\n+            return DoS(100, error(\"checktx: %s txout.nValue too high\", hash.ToString().substr(0,10).c_str()));\n+        }\n         nValueOut += txout.nValue;\n-        if (!MoneyRange(nValueOut))\n-            return DoS(100, error(\"CTransaction::CheckTransaction() : txout total out of range\"));\n+        if (!MoneyRange(nValueOut)) {\n+            return DoS(100, error(\"checktx: %s txout total out of range\", hash.ToString().substr(0,10).c_str()));\n+        }\n     }\n \n     // Check for duplicate inputs\n     set<COutPoint> vInOutPoints;\n     BOOST_FOREACH(const CTxIn& txin, vin)\n     {\n-        if (vInOutPoints.count(txin.prevout))\n+        if (vInOutPoints.count(txin.prevout)) {\n+            printf(\"checktx : %s duplicate input\\n\", hash.ToString().substr(0,10).c_str());\n             return false;\n+        }\n         vInOutPoints.insert(txin.prevout);\n     }\n \n     if (IsCoinBase())\n     {\n-        if (vin[0].scriptSig.size() < 2 || vin[0].scriptSig.size() > 100)\n-            return DoS(100, error(\"CTransaction::CheckTransaction() : coinbase script size\"));\n+        if (vin[0].scriptSig.size() < 2 || vin[0].scriptSig.size() > 100) {\n+            return DoS(100, error(\"checktx: %s coinbase script size %d\", hash.ToString().substr(0,10).c_str(), vin[0].scriptSig.size()));\n+        }\n     }\n     else\n     {\n         BOOST_FOREACH(const CTxIn& txin, vin)\n-            if (txin.prevout.IsNull())\n-                return DoS(10, error(\"CTransaction::CheckTransaction() : prevout is null\"));\n+            if (txin.prevout.IsNull()) {\n+                return DoS(10, error(\"checktx: %s prevout is null\", hash.ToString().substr(0,10).c_str()));\n+            }\n     }\n \n     return true;\n@@ -460,26 +472,30 @@ bool CTransaction::CheckTransaction() const\n bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n                         bool* pfMissingInputs)\n {\n+    uint256 hash = tx.GetHash();\n+\n     if (pfMissingInputs)\n         *pfMissingInputs = false;\n \n     if (!tx.CheckTransaction())\n-        return error(\"CTxMemPool::accept() : CheckTransaction failed\");\n+        return false;\n \n     // Coinbase is only valid in a block, not as a loose transaction\n-    if (tx.IsCoinBase())\n-        return tx.DoS(100, error(\"CTxMemPool::accept() : coinbase as individual tx\"));\n+    if (tx.IsCoinBase()) {\n+        return tx.DoS(100, error(\"txaccept: %s coinbase as individual tx\", hash.ToString().substr(0,10).c_str()));\n+    }\n \n     // To help v0.1.5 clients who would see it as a negative number\n-    if ((int64)tx.nLockTime > std::numeric_limits<int>::max())\n-        return error(\"CTxMemPool::accept() : not accepting nLockTime beyond 2038 yet\");\n+    if ((int64)tx.nLockTime > std::numeric_limits<int>::max()) {\n+        return error(\"txaccept: %s not accepting nLockTime beyond 2038 yet\", hash.ToString().substr(0,10).c_str());\n+    }\n \n     // Rather not work on nonstandard transactions (unless -testnet)\n-    if (!fTestNet && !tx.IsStandard())\n-        return error(\"CTxMemPool::accept() : nonstandard transaction type\");\n+    if (!fTestNet && !tx.IsStandard()) {\n+        return error(\"txaccept: %s nonstandard tx type\", hash.ToString().substr(0,10).c_str());\n+    }\n \n     // Do we already have it?\n-    uint256 hash = tx.GetHash();\n     {\n         LOCK(cs);\n         if (mapTx.count(hash))\n@@ -500,40 +516,58 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n             return false;\n \n             // Allow replacing with a newer version of the same transaction\n-            if (i != 0)\n+            if (i != 0) {\n+                printf(\"txaccept: replacement failed as i != 0\\n\", hash.ToString().substr(0,10).c_str());\n                 return false;\n+            }\n             ptxOld = mapNextTx[outpoint].ptx;\n-            if (ptxOld->IsFinal())\n+            if (ptxOld->IsFinal()) {\n+                printf(\"txaccept: replacement failed as old outpoint IsFinal\\n\", hash.ToString().substr(0,10).c_str()); \n                 return false;\n-            if (!tx.IsNewerThan(*ptxOld))\n+            }\n+            if (!tx.IsNewerThan(*ptxOld)) {\n+                printf(\"txaccept: %s replacement failed as IsNewerThan\\n\", hash.ToString().substr(0,10).c_str());\n                 return false;\n+            }\n             for (unsigned int i = 0; i < tx.vin.size(); i++)\n             {\n                 COutPoint outpoint = tx.vin[i].prevout;\n-                if (!mapNextTx.count(outpoint) || mapNextTx[outpoint].ptx != ptxOld)\n+                if (!mapNextTx.count(outpoint)) {\n+                    printf(\"txaccept: %s replacement failed as no outpoint found\\n\", hash.ToString().substr(0,10).c_str()); // REB\n+                    return false;\n+                }\n+                if (mapNextTx[outpoint].ptx != ptxOld) {\n+                    printf(\"txaccept: %s replacement failed as outpoint is different\\n\", hash.ToString().substr(0,10).c_str());\n                     return false;\n+                }\n             }\n+            printf(\"txaccept: %s is a replacement\\n\", hash.ToString().substr(0,10).c_str());\n+\n             break;\n         }\n     }\n \n+    bool fFreetx = false;\n+\n     if (fCheckInputs)\n     {\n         MapPrevTx mapInputs;\n         map<uint256, CTxIndex> mapUnused;\n         bool fInvalid = false;\n         if (!tx.FetchInputs(txdb, mapUnused, false, false, mapInputs, fInvalid))\n         {\n-            if (fInvalid)\n-                return error(\"CTxMemPool::accept() : FetchInputs found invalid tx %s\", hash.ToString().substr(0,10).c_str());\n+            if (fInvalid) {\n+                return error(\"txaccept: %s FetchInputs found invalid\", hash.ToString().substr(0,10).c_str());\n+            }\n             if (pfMissingInputs)\n                 *pfMissingInputs = true;\n             return false;\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (!tx.AreInputsStandard(mapInputs) && !fTestNet)\n-            return error(\"CTxMemPool::accept() : nonstandard transaction input\");\n+        if (!tx.AreInputsStandard(mapInputs) && !fTestNet) {\n+            return error(\"txaccept: %s nonstandard inputs\", hash.ToString().substr(0,10).c_str());\n+        }\n \n         // Note: if you modify this code to accept non-standard transactions, then\n         // you should add code here to check that the transaction does a\n@@ -543,8 +577,10 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n         unsigned int nSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n \n         // Don't accept it if it can't get into a block\n-        if (nFees < tx.GetMinFee(1000, true, GMF_RELAY))\n-            return error(\"CTxMemPool::accept() : not enough fees\");\n+        if (nFees < tx.GetMinFee(1000, true, GMF_RELAY)) {\n+            printf(\"txaccept: tx %s not enough fees\\n\", hash.ToString().substr(0,10).c_str());\n+            return false;\n+        }\n \n         // Continuously rate-limit free transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n@@ -563,28 +599,31 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n                 nLastTime = nNow;\n                 // -limitfreerelay unit is thousand-bytes-per-minute\n                 // At default rate it would take over a month to fill 1GB\n-                if (dFreeCount > GetArg(\"-limitfreerelay\", 15)*10*1000 && !IsFromMe(tx))\n-                    return error(\"CTxMemPool::accept() : free transaction rejected by rate limiter\");\n+                if (dFreeCount > GetArg(\"-limitfreerelay\", 15)*10*1000 && !IsFromMe(tx)) {\n+                    printf(\"txaccept: free tx %s rejected by rate limiter\\n\", hash.ToString().substr(0,10).c_str());\n+                    return false;\n+                } else\n+                    fFreetx = true;\n                 if (fDebug)\n                     printf(\"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n                 dFreeCount += nSize;\n             }\n-        }\n+        } // nFees < MIN_RELAY_TX_FEE\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n         if (!tx.ConnectInputs(mapInputs, mapUnused, CDiskTxPos(1,1,1), pindexBest, false, false))\n         {\n             return error(\"CTxMemPool::accept() : ConnectInputs failed %s\", hash.ToString().substr(0,10).c_str());\n         }\n-    }\n+    } // if (fCheckInputs)\n \n     // Store transaction in memory\n     {\n         LOCK(cs);\n         if (ptxOld)\n         {\n-            printf(\"CTxMemPool::accept() : replacing tx %s with new version\\n\", ptxOld->GetHash().ToString().c_str());\n+            printf(\"CTxMemPool::accept(): replacing tx %s with new version (%s)\\n\", ptxOld->GetHash().ToString().c_str(), hash.ToString().substr(0,10).c_str());\n             remove(*ptxOld);\n         }\n         addUnchecked(tx);\n@@ -595,9 +634,10 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n     if (ptxOld)\n         EraseFromWallets(ptxOld->GetHash());\n \n-    printf(\"CTxMemPool::accept() : accepted %s (poolsz %u)\\n\",\n-           hash.ToString().substr(0,10).c_str(),\n-           mapTx.size());\n+    printf(\"mempool %lu: \", mapTx.size());\n+    if (fFreetx) printf(\"free \");\n+    printf(\"tx %s accepted\\n\", hash.ToString().substr(0,10).c_str());\n+\n     return true;\n }\n \n@@ -1051,8 +1091,10 @@ bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTes\n             // Get prev tx from single transactions in memory\n             {\n                 LOCK(mempool.cs);\n-                if (!mempool.exists(prevout.hash))\n-                    return error(\"FetchInputs() : %s mempool Tx prev not found %s\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n+                if (!mempool.exists(prevout.hash)) {\n+                    printf(\"mempool.exists() : %s prev (%s) not found\\n\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n+                    return false;\n+                }\n                 txPrev = mempool.lookup(prevout.hash);\n             }\n             if (!fFound)\n@@ -1152,8 +1194,10 @@ bool CTransaction::ConnectInputs(MapPrevTx inputs,\n             // If prev is coinbase, check that it's matured\n             if (txPrev.IsCoinBase())\n                 for (const CBlockIndex* pindex = pindexBlock; pindex && pindexBlock->nHeight - pindex->nHeight < COINBASE_MATURITY; pindex = pindex->pprev)\n-                    if (pindex->nBlockPos == txindex.pos.nBlockPos && pindex->nFile == txindex.pos.nFile)\n-                        return error(\"ConnectInputs() : tried to spend coinbase at depth %d\", pindexBlock->nHeight - pindex->nHeight);\n+                    if (pindex->nBlockPos == txindex.pos.nBlockPos && pindex->nFile == txindex.pos.nFile) {\n+                        if (fBlock) printf(\"AcceptBlock(): \");\n+                        return error(\"ConnectInputs(): tried to spend coinbase at depth %d\", pindexBlock->nHeight - pindex->nHeight);\n+                    }\n \n             // Check for conflicts (double-spend)\n             // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n@@ -1302,8 +1346,10 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n             if (txdb.ReadTxIndex(tx.GetHash(), txindexOld))\n             {\n                 BOOST_FOREACH(CDiskTxPos &pos, txindexOld.vSpent)\n-                    if (pos.IsNull())\n+                    if (pos.IsNull()) {\n+                        printf(\"Failing ConnectBlock() due BIP30\\n\");\n                         return false;\n+                    }\n             }\n         }\n     }\n@@ -1360,8 +1406,10 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n             return error(\"ConnectBlock() : UpdateTxIndex failed\");\n     }\n \n-    if (vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n+    if (vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees)) {\n+        printf(\"ConnectBlock() fail due to GetValueOut too high\\n\");\n         return false;\n+    }\n \n     // Update block index on disk without changing it in memory.\n     // The memory index structure will be changed after the db commits."
      }
    ]
  }
]