[
  {
    "sha": "b00266fe0cf05fe6044f471105ce2bfed4349626",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDAyNjZmZTBjZjA1ZmU2MDQ0ZjQ3MTEwNWNlMmJmZWQ0MzQ5NjI2",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-05-26T14:05:51Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-05-26T14:05:51Z"
      },
      "message": "refactor: replace pointers by references within tx_verify.{h,cpp}\n\naffects \"prevHeights\" parameter of the functions\n- CalculateSequenceLocks()\n- SequenceLocks()",
      "tree": {
        "sha": "eaac08898e9a0b07a4cc4f3ce50bf7884ed65c26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eaac08898e9a0b07a4cc4f3ce50bf7884ed65c26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b00266fe0cf05fe6044f471105ce2bfed4349626",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b00266fe0cf05fe6044f471105ce2bfed4349626",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b00266fe0cf05fe6044f471105ce2bfed4349626",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b00266fe0cf05fe6044f471105ce2bfed4349626/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe1357a03af108c41baa6bd31903f2cfb0d75ef5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe1357a03af108c41baa6bd31903f2cfb0d75ef5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe1357a03af108c41baa6bd31903f2cfb0d75ef5"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "9e8e6530f1159f70cec240952d3f3e6d7dbff063",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b00266fe0cf05fe6044f471105ce2bfed4349626/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b00266fe0cf05fe6044f471105ce2bfed4349626/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=b00266fe0cf05fe6044f471105ce2bfed4349626",
        "patch": "@@ -27,9 +27,9 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n     return true;\n }\n \n-std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>& prevHeights, const CBlockIndex& block)\n {\n-    assert(prevHeights->size() == tx.vin.size());\n+    assert(prevHeights.size() == tx.vin.size());\n \n     // Will be set to the equivalent height- and time-based nLockTime\n     // values that would be necessary to satisfy all relative lock-\n@@ -59,11 +59,11 @@ std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags\n         // consensus-enforced meaning at this point.\n         if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n             // The height of this input is not relevant for sequence locks\n-            (*prevHeights)[txinIndex] = 0;\n+            prevHeights[txinIndex] = 0;\n             continue;\n         }\n \n-        int nCoinHeight = (*prevHeights)[txinIndex];\n+        int nCoinHeight = prevHeights[txinIndex];\n \n         if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n             int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n@@ -99,7 +99,7 @@ bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> loc\n     return true;\n }\n \n-bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>& prevHeights, const CBlockIndex& block)\n {\n     return EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n }"
      },
      {
        "sha": "e2a9328df8718b17f05fabb9ab5d6710c9eddedd",
        "filename": "src/consensus/tx_verify.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b00266fe0cf05fe6044f471105ce2bfed4349626/src/consensus/tx_verify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b00266fe0cf05fe6044f471105ce2bfed4349626/src/consensus/tx_verify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.h?ref=b00266fe0cf05fe6044f471105ce2bfed4349626",
        "patch": "@@ -66,13 +66,13 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  * Also removes from the vector of input heights any entries which did not\n  * correspond to sequence locked inputs as they do not affect the calculation.\n  */\n-std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block);\n+std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>& prevHeights, const CBlockIndex& block);\n \n bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair);\n /**\n  * Check if transaction is final per BIP 68 sequence numbers and can be included in a block.\n  * Consensus critical. Takes as input a list of heights at which tx's inputs (in order) confirmed.\n  */\n-bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block);\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>& prevHeights, const CBlockIndex& block);\n \n #endif // BITCOIN_CONSENSUS_TX_VERIFY_H"
      },
      {
        "sha": "11ff7b833bffab6fda46bd07d4717ad801426223",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b00266fe0cf05fe6044f471105ce2bfed4349626/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b00266fe0cf05fe6044f471105ce2bfed4349626/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=b00266fe0cf05fe6044f471105ce2bfed4349626",
        "patch": "@@ -448,7 +448,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     m_node.mempool->addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(CheckFinalTx(CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n-    BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, &prevheights, CreateBlockIndex(::ChainActive().Tip()->nHeight + 2))); // Sequence locks pass on 2nd block\n+    BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, prevheights, CreateBlockIndex(::ChainActive().Tip()->nHeight + 2))); // Sequence locks pass on 2nd block\n \n     // relative time locked\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n@@ -461,7 +461,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n         ::ChainActive().Tip()->GetAncestor(::ChainActive().Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n-    BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, &prevheights, CreateBlockIndex(::ChainActive().Tip()->nHeight + 1))); // Sequence locks pass 512 seconds later\n+    BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, prevheights, CreateBlockIndex(::ChainActive().Tip()->nHeight + 1))); // Sequence locks pass 512 seconds later\n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n         ::ChainActive().Tip()->GetAncestor(::ChainActive().Tip()->nHeight - i)->nTime -= 512; //undo tricked MTP\n "
      },
      {
        "sha": "76b3606bd945817547defa56379f3ce7e27bb909",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b00266fe0cf05fe6044f471105ce2bfed4349626/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b00266fe0cf05fe6044f471105ce2bfed4349626/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b00266fe0cf05fe6044f471105ce2bfed4349626",
        "patch": "@@ -295,7 +295,7 @@ bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flag\n                 prevheights[txinIndex] = coin.nHeight;\n             }\n         }\n-        lockPair = CalculateSequenceLocks(tx, flags, &prevheights, index);\n+        lockPair = CalculateSequenceLocks(tx, flags, prevheights, index);\n         if (lp) {\n             lp->height = lockPair.first;\n             lp->time = lockPair.second;\n@@ -2147,7 +2147,7 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n                 prevheights[j] = view.AccessCoin(tx.vin[j].prevout).nHeight;\n             }\n \n-            if (!SequenceLocks(tx, nLockTimeFlags, &prevheights, *pindex)) {\n+            if (!SequenceLocks(tx, nLockTimeFlags, prevheights, *pindex)) {\n                 LogPrintf(\"ERROR: %s: contains a non-BIP68-final transaction\\n\", __func__);\n                 return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-txns-nonfinal\");\n             }"
      }
    ]
  }
]