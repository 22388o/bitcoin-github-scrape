[
  {
    "sha": "27df4123c433e5ad4e5592f0a8fbc40ca933865b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2RmNDEyM2M0MzNlNWFkNGU1NTkyZjBhOGZiYzQwY2E5MzM4NjVi",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-12-07T12:29:06Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-12-17T08:39:24Z"
      },
      "message": "make all catch() arguments const\n\n- I saw this on http://en.cppreference.com/w/cpp/language/try_catch and\n  thought it would be a good idea\n- also unify used format to better be able to search for exception\n  uses in our codebase",
      "tree": {
        "sha": "90ca518364768b73da454b6f782130e13fd48ef3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90ca518364768b73da454b6f782130e13fd48ef3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27df4123c433e5ad4e5592f0a8fbc40ca933865b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27df4123c433e5ad4e5592f0a8fbc40ca933865b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27df4123c433e5ad4e5592f0a8fbc40ca933865b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27df4123c433e5ad4e5592f0a8fbc40ca933865b/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "851dfc7f88d1b7c42534fffcfbdb2f1bcc473045",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/851dfc7f88d1b7c42534fffcfbdb2f1bcc473045",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/851dfc7f88d1b7c42534fffcfbdb2f1bcc473045"
      }
    ],
    "stats": {
      "total": 160,
      "additions": 78,
      "deletions": 82
    },
    "files": [
      {
        "sha": "51ab14785b36ad7643429154701d919277feefa2",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -86,7 +86,7 @@ static bool AppInitRPC(int argc, char* argv[])\n     }\n     try {\n         ReadConfigFile(mapArgs, mapMultiArgs);\n-    } catch(std::exception &e) {\n+    } catch (const std::exception& e) {\n         fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n         return false;\n     }\n@@ -206,18 +206,18 @@ int CommandLineRPC(int argc, char *argv[])\n                 // Connection succeeded, no need to retry.\n                 break;\n             }\n-            catch (const CConnectionFailed& e) {\n+            catch (const CConnectionFailed&) {\n                 if (fWait)\n                     MilliSleep(1000);\n                 else\n                     throw;\n             }\n         } while (fWait);\n     }\n-    catch (boost::thread_interrupted) {\n+    catch (const boost::thread_interrupted&) {\n         throw;\n     }\n-    catch (std::exception& e) {\n+    catch (const std::exception& e) {\n         strPrint = string(\"error: \") + e.what();\n         nRet = EXIT_FAILURE;\n     }\n@@ -240,7 +240,7 @@ int main(int argc, char* argv[])\n         if(!AppInitRPC(argc, argv))\n             return EXIT_FAILURE;\n     }\n-    catch (std::exception& e) {\n+    catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInitRPC()\");\n         return EXIT_FAILURE;\n     } catch (...) {\n@@ -252,7 +252,7 @@ int main(int argc, char* argv[])\n     try {\n         ret = CommandLineRPC(argc, argv);\n     }\n-    catch (std::exception& e) {\n+    catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"CommandLineRPC()\");\n     } catch (...) {\n         PrintExceptionContinue(NULL, \"CommandLineRPC()\");"
      },
      {
        "sha": "890eaaedbe08ce80ec23144e70e7830a3fcabe4e",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -586,10 +586,10 @@ static int CommandLineRawTx(int argc, char* argv[])\n         OutputTx(tx);\n     }\n \n-    catch (boost::thread_interrupted) {\n+    catch (const boost::thread_interrupted&) {\n         throw;\n     }\n-    catch (std::exception& e) {\n+    catch (const std::exception& e) {\n         strPrint = string(\"error: \") + e.what();\n         nRet = EXIT_FAILURE;\n     }\n@@ -612,7 +612,7 @@ int main(int argc, char* argv[])\n         if(!AppInitRawTx(argc, argv))\n             return EXIT_FAILURE;\n     }\n-    catch (std::exception& e) {\n+    catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInitRawTx()\");\n         return EXIT_FAILURE;\n     } catch (...) {\n@@ -624,7 +624,7 @@ int main(int argc, char* argv[])\n     try {\n         ret = CommandLineRawTx(argc, argv);\n     }\n-    catch (std::exception& e) {\n+    catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"CommandLineRawTx()\");\n     } catch (...) {\n         PrintExceptionContinue(NULL, \"CommandLineRawTx()\");"
      },
      {
        "sha": "6e735fe3d97be01bc4950ae62814da6e09584d4e",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -97,7 +97,7 @@ bool AppInit(int argc, char* argv[])\n         try\n         {\n             ReadConfigFile(mapArgs, mapMultiArgs);\n-        } catch(std::exception &e) {\n+        } catch (const std::exception& e) {\n             fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n             return false;\n         }\n@@ -147,7 +147,7 @@ bool AppInit(int argc, char* argv[])\n         detectShutdownThread = new boost::thread(boost::bind(&DetectShutdownThread, &threadGroup));\n         fRet = AppInit2(threadGroup);\n     }\n-    catch (std::exception& e) {\n+    catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInit()\");\n     } catch (...) {\n         PrintExceptionContinue(NULL, \"AppInit()\");"
      },
      {
        "sha": "c15b978760889790b8ecd81260891741645043b8",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -102,7 +102,7 @@ bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx)\n     try {\n         ssData >> tx;\n     }\n-    catch (const std::exception &) {\n+    catch (const std::exception&) {\n         return false;\n     }\n \n@@ -119,7 +119,7 @@ bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n     try {\n         ssBlock >> block;\n     }\n-    catch (const std::exception &) {\n+    catch (const std::exception&) {\n         return false;\n     }\n "
      },
      {
        "sha": "63199b3206e83f73513d4637d4d27a776abc4bbe",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -778,7 +778,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n             try {\n                 boost::filesystem::rename(pathDatabase, pathDatabaseBak);\n                 LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string(), pathDatabaseBak.string());\n-            } catch(boost::filesystem::filesystem_error &error) {\n+            } catch (const boost::filesystem::filesystem_error&) {\n                  // failure is ok (well, not really, but it's not worse than what we started with)\n             }\n \n@@ -931,7 +931,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n                 filesystem::create_hard_link(source, dest);\n                 LogPrintf(\"Hardlinked %s -> %s\\n\", source.string(), dest.string());\n                 linked = true;\n-            } catch (filesystem::filesystem_error & e) {\n+            } catch (const filesystem::filesystem_error& e) {\n                 // Note: hardlink creation failing is not a disaster, it just means\n                 // blocks will get re-downloaded from peers.\n                 LogPrintf(\"Error hardlinking blk%04u.dat : %s\\n\", i, e.what());\n@@ -1008,7 +1008,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n                     strLoadError = _(\"Corrupted block database detected\");\n                     break;\n                 }\n-            } catch(std::exception &e) {\n+            } catch (const std::exception& e) {\n                 if (fDebug) LogPrintf(\"%s\\n\", e.what());\n                 strLoadError = _(\"Error opening block database\");\n                 break;"
      },
      {
        "sha": "9c038f90fa7bd1f07d2502930628a3ed77e0b476",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -1091,7 +1091,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n                     file >> header;\n                     fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n                     file >> txOut;\n-                } catch (std::exception &e) {\n+                } catch (const std::exception& e) {\n                     return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n                 }\n                 hashBlock = header.GetHash();\n@@ -1174,7 +1174,7 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n     try {\n         filein >> block;\n     }\n-    catch (std::exception &e) {\n+    catch (const std::exception& e) {\n         return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n     }\n \n@@ -2598,7 +2598,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n                 return state.Abort(\"Failed to write block\");\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n             return error(\"AcceptBlock() : ReceivedBlockTransactions failed\");\n-    } catch(std::runtime_error &e) {\n+    } catch (const std::runtime_error& e) {\n         return state.Abort(std::string(\"System error: \") + e.what());\n     }\n \n@@ -2990,7 +2990,7 @@ bool InitBlockIndex() {\n                 return error(\"LoadBlockIndex() : genesis block cannot be activated\");\n             // Force a chainstate write so that when we VerifyDB in a moment, it doesn't check stale data\n             return FlushStateToDisk(state, FLUSH_STATE_ALWAYS);\n-        } catch(std::runtime_error &e) {\n+        } catch (const std::runtime_error& e) {\n             return error(\"LoadBlockIndex() : failed to initialize block database: %s\", e.what());\n         }\n     }\n@@ -3030,7 +3030,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                 blkdat >> nSize;\n                 if (nSize < 80 || nSize > MAX_BLOCK_SIZE)\n                     continue;\n-            } catch (const std::exception &) {\n+            } catch (const std::exception&) {\n                 // no valid block header found; don't complain\n                 break;\n             }\n@@ -3090,11 +3090,11 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                         mapBlocksUnknownParent.erase(it);\n                     }\n                 }\n-            } catch (std::exception &e) {\n+            } catch (const std::exception& e) {\n                 LogPrintf(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n             }\n         }\n-    } catch(std::runtime_error &e) {\n+    } catch (const std::runtime_error& e) {\n         AbortNode(std::string(\"System error: \") + e.what());\n     }\n     if (nLoaded > 0)\n@@ -4088,7 +4088,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     ss << \": hash \" << hash.ToString();\n                 }\n                 LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(ss.str()));\n-            } catch (std::ios_base::failure& e) {\n+            } catch (const std::ios_base::failure&) {\n                 // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n                 LogPrint(\"net\", \"Unparseable reject message received\\n\");\n             }\n@@ -4192,7 +4192,7 @@ bool ProcessMessages(CNode* pfrom)\n             fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime);\n             boost::this_thread::interruption_point();\n         }\n-        catch (std::ios_base::failure& e)\n+        catch (const std::ios_base::failure& e)\n         {\n             pfrom->PushMessage(\"reject\", strCommand, REJECT_MALFORMED, string(\"error parsing message\"));\n             if (strstr(e.what(), \"end of data\"))\n@@ -4210,10 +4210,10 @@ bool ProcessMessages(CNode* pfrom)\n                 PrintExceptionContinue(&e, \"ProcessMessages()\");\n             }\n         }\n-        catch (boost::thread_interrupted) {\n+        catch (const boost::thread_interrupted&) {\n             throw;\n         }\n-        catch (std::exception& e) {\n+        catch (const std::exception& e) {\n             PrintExceptionContinue(&e, \"ProcessMessages()\");\n         } catch (...) {\n             PrintExceptionContinue(NULL, \"ProcessMessages()\");\n@@ -4507,7 +4507,7 @@ bool CBlockUndo::ReadFromDisk(const CDiskBlockPos &pos, const uint256 &hashBlock\n         filein >> *this;\n         filein >> hashChecksum;\n     }\n-    catch (std::exception &e) {\n+    catch (const std::exception& e) {\n         return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n     }\n "
      },
      {
        "sha": "09c505ffd151430f3fbece2f554e012c227268ce",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -565,7 +565,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             }\n         }\n     }\n-    catch (boost::thread_interrupted)\n+    catch (const boost::thread_interrupted&)\n     {\n         LogPrintf(\"BitcoinMiner terminated\\n\");\n         throw;"
      },
      {
        "sha": "9e492d2fc05d501213632c0ddef98dbf6ff01c6b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -601,7 +601,7 @@ int CNetMessage::readHeader(const char *pch, unsigned int nBytes)\n     try {\n         hdrbuf >> hdr;\n     }\n-    catch (const std::exception &) {\n+    catch (const std::exception&) {\n         return -1;\n     }\n \n@@ -1068,7 +1068,7 @@ void ThreadMapPort()\n                 MilliSleep(20*60*1000); // Refresh every 20 minutes\n             }\n         }\n-        catch (boost::thread_interrupted)\n+        catch (const boost::thread_interrupted&)\n         {\n             r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n             LogPrintf(\"UPNP_DeletePortMapping() returned : %d\\n\", r);\n@@ -1854,7 +1854,7 @@ bool CAddrDB::Write(const CAddrMan& addr)\n     try {\n         fileout << ssPeers;\n     }\n-    catch (std::exception &e) {\n+    catch (const std::exception& e) {\n         return error(\"%s : Serialize or I/O error - %s\", __func__, e.what());\n     }\n     FileCommit(fileout.Get());\n@@ -1890,7 +1890,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n         filein.read((char *)&vchData[0], dataSize);\n         filein >> hashIn;\n     }\n-    catch (std::exception &e) {\n+    catch (const std::exception& e) {\n         return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n     }\n     filein.fclose();\n@@ -1914,7 +1914,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n         // de-serialize address data into one CAddrMan object\n         ssPeers >> addr;\n     }\n-    catch (std::exception &e) {\n+    catch (const std::exception& e) {\n         return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n     }\n "
      },
      {
        "sha": "9b02650797b6e7e8d74ddb675000c4361e5ef986",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -173,7 +173,7 @@ public slots:\n     boost::thread_group threadGroup;\n \n     /// Pass fatal exception message to UI thread\n-    void handleRunawayException(std::exception *e);\n+    void handleRunawayException(const std::exception *e);\n };\n \n /** Main Bitcoin application object */\n@@ -240,7 +240,7 @@ BitcoinCore::BitcoinCore():\n {\n }\n \n-void BitcoinCore::handleRunawayException(std::exception *e)\n+void BitcoinCore::handleRunawayException(const std::exception *e)\n {\n     PrintExceptionContinue(e, \"Runaway exception\");\n     emit runawayException(QString::fromStdString(strMiscWarning));\n@@ -260,7 +260,7 @@ void BitcoinCore::initialize()\n             StartDummyRPCThread();\n         }\n         emit initializeResult(rv);\n-    } catch (std::exception& e) {\n+    } catch (const std::exception& e) {\n         handleRunawayException(&e);\n     } catch (...) {\n         handleRunawayException(NULL);\n@@ -277,7 +277,7 @@ void BitcoinCore::shutdown()\n         Shutdown();\n         qDebug() << __func__ << \": Shutdown finished\";\n         emit shutdownResult(1);\n-    } catch (std::exception& e) {\n+    } catch (const std::exception& e) {\n         handleRunawayException(&e);\n     } catch (...) {\n         handleRunawayException(NULL);\n@@ -551,7 +551,7 @@ int main(int argc, char *argv[])\n     }\n     try {\n         ReadConfigFile(mapArgs, mapMultiArgs);\n-    } catch(std::exception &e) {\n+    } catch (const std::exception& e) {\n         QMessageBox::critical(0, QObject::tr(\"Bitcoin Core\"),\n                               QObject::tr(\"Error: Cannot parse configuration file: %1. Only use key=value syntax.\").arg(e.what()));\n         return false;\n@@ -628,7 +628,7 @@ int main(int argc, char *argv[])\n         app.exec();\n         app.requestShutdown();\n         app.exec();\n-    } catch (std::exception& e) {\n+    } catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"Runaway exception\");\n         app.handleRunawayException(QString::fromStdString(strMiscWarning));\n     } catch (...) {"
      },
      {
        "sha": "65486a02fc265488ae85992e157651b6f95f2901",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -95,7 +95,7 @@ void FreespaceChecker::check()\n                 replyMessage = tr(\"Path already exists, and is not a directory.\");\n             }\n         }\n-    } catch(fs::filesystem_error &e)\n+    } catch (const fs::filesystem_error&)\n     {\n         /* Parent directory does not exist or is not accessible */\n         replyStatus = ST_ERROR;\n@@ -180,7 +180,7 @@ void Intro::pickDataDirectory()\n             try {\n                 TryCreateDirectory(GUIUtil::qstringToBoostPath(dataDir));\n                 break;\n-            } catch(fs::filesystem_error &e) {\n+            } catch (const fs::filesystem_error&) {\n                 QMessageBox::critical(0, tr(\"Bitcoin Core\"),\n                     tr(\"Error: Specified data directory \\\"%1\\\" cannot be created.\").arg(dataDir));\n                 /* fall through, back to choosing screen */"
      },
      {
        "sha": "ca3f06962acf3325778cc712bf33903efdfe5977",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -181,8 +181,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n         }\n         // TODO: detect EV certificates and set merchant = business name instead of unfriendly NID_commonName ?\n     }\n-    catch (SSLVerifyError& err)\n-    {\n+    catch (const SSLVerifyError& err) {\n         fResult = false;\n         qWarning() << \"PaymentRequestPlus::getMerchant : SSL error: \" << err.what();\n     }"
      },
      {
        "sha": "9fb15dc6fd88acfb2038caf5aca0cf5310d4f937",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -180,20 +180,20 @@ void RPCExecutor::request(const QString &command)\n \n         emit reply(RPCConsole::CMD_REPLY, QString::fromStdString(strPrint));\n     }\n-    catch (json_spirit::Object& objError)\n+    catch (const json_spirit::Object& objError)\n     {\n         try // Nice formatting for standard-format error\n         {\n             int code = find_value(objError, \"code\").get_int();\n             std::string message = find_value(objError, \"message\").get_str();\n             emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(message) + \" (code \" + QString::number(code) + \")\");\n         }\n-        catch(std::runtime_error &) // raised when converting to invalid type, i.e. missing code or message\n+        catch (const std::runtime_error&) // raised when converting to invalid type, i.e. missing code or message\n         {   // Show raw JSON object\n             emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(write_string(json_spirit::Value(objError), false)));\n         }\n     }\n-    catch (std::exception& e)\n+    catch (const std::exception& e)\n     {\n         emit reply(RPCConsole::CMD_ERROR, QString(\"Error: \") + QString::fromStdString(e.what()));\n     }"
      },
      {
        "sha": "304e1d747a9fab7cbd25e85d3edc51f218bafa7c",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -307,7 +307,7 @@ bool HTTPReq_REST(AcceptedConnection* conn,\n                 return uri_prefixes[i].handler(conn, strReq, mapHeaders, fRun);\n             }\n         }\n-    } catch (RestErr& re) {\n+    } catch (const RestErr& re) {\n         conn->stream() << HTTPReply(re.status, re.message + \"\\r\\n\", false, false, \"text/plain\") << std::flush;\n         return false;\n     }"
      },
      {
        "sha": "f4a4877d3884dfedd3bf3069b07705c04a7cc08c",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -122,8 +122,7 @@ class SSLIOStreamDevice : public boost::iostreams::device<boost::iostreams::bidi\n             tcp::resolver::query query(server.c_str(), port.c_str());\n             endpoint_iterator = resolver.resolve(query);\n #if BOOST_VERSION >= 104300\n-        } catch(boost::system::system_error &e)\n-        {\n+        } catch (const boost::system::system_error&) {\n             // If we at first don't succeed, try blanket lookup (IPv4+IPv6 independent of configured interfaces)\n             tcp::resolver::query query(server.c_str(), port.c_str(), resolver_query_base::flags());\n             endpoint_iterator = resolver.resolve(query);"
      },
      {
        "sha": "f596c358a90ec5b34de363d5015a4d8aaa1a49fd",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -545,7 +545,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             ssData >> tx;\n             txVariants.push_back(tx);\n         }\n-        catch (const std::exception &) {\n+        catch (const std::exception&) {\n             throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n         }\n     }"
      },
      {
        "sha": "c0f0d253f2dfc6c465822e1cd8cae601137df970",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -174,7 +174,7 @@ string CRPCTable::help(string strCommand) const\n             if (setDone.insert(pfn).second)\n                 (*pfn)(params, true);\n         }\n-        catch (std::exception& e)\n+        catch (const std::exception& e)\n         {\n             // Help text is returned in an exception\n             string strHelp = string(e.what());\n@@ -631,7 +631,7 @@ void StartRPCThreads()\n             try {\n                 vEndpoints.push_back(ParseEndpoint(addr, defaultPort));\n             }\n-            catch(const boost::system::system_error &)\n+            catch (const boost::system::system_error&)\n             {\n                 uiInterface.ThreadSafeMessageBox(\n                     strprintf(_(\"Could not parse -rpcbind value %s as network address\"), addr),\n@@ -676,7 +676,7 @@ void StartRPCThreads()\n             if(bBindAny && bindAddress == asio::ip::address_v6::any() && !v6_only_error)\n                 break;\n         }\n-        catch(boost::system::system_error &e)\n+        catch (const boost::system::system_error& e)\n         {\n             LogPrintf(\"ERROR: Binding RPC on address %s port %i failed: %s\\n\", bindAddress.to_string(), endpoint.port(), e.what());\n             strerr = strprintf(_(\"An error occurred while setting up the RPC address %s port %u for listening: %s\"), bindAddress.to_string(), endpoint.port(), e.what());\n@@ -842,11 +842,11 @@ static Object JSONRPCExecOne(const Value& req)\n         Value result = tableRPC.execute(jreq.strMethod, jreq.params);\n         rpc_result = JSONRPCReplyObj(result, Value::null, jreq.id);\n     }\n-    catch (Object& objError)\n+    catch (const Object& objError)\n     {\n         rpc_result = JSONRPCReplyObj(Value::null, objError, jreq.id);\n     }\n-    catch (std::exception& e)\n+    catch (const std::exception& e)\n     {\n         rpc_result = JSONRPCReplyObj(Value::null,\n                                      JSONRPCError(RPC_PARSE_ERROR, e.what()), jreq.id);\n@@ -922,12 +922,12 @@ static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n \n         conn->stream() << HTTPReplyHeader(HTTP_OK, fRun, strReply.size()) << strReply << std::flush;\n     }\n-    catch (Object& objError)\n+    catch (const Object& objError)\n     {\n         ErrorReply(conn->stream(), objError, jreq.id);\n         return false;\n     }\n-    catch (std::exception& e)\n+    catch (const std::exception& e)\n     {\n         ErrorReply(conn->stream(), JSONRPCError(RPC_PARSE_ERROR, e.what()), jreq.id);\n         return false;\n@@ -1013,7 +1013,7 @@ json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_s\n         }\n         return result;\n     }\n-    catch (std::exception& e)\n+    catch (const std::exception& e)\n     {\n         throw JSONRPCError(RPC_MISC_ERROR, e.what());\n     }"
      },
      {
        "sha": "e80e55df759836f2642fd47fd8c38676fe3c9547",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -79,7 +79,7 @@ int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned i\n          set_error(err, bitcoinconsensus_ERR_OK);\n \n         return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), flags, SignatureChecker(tx, nIn), NULL);\n-    } catch (std::exception &e) {\n+    } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }\n }"
      },
      {
        "sha": "614960fa6d50b56da8fd256911aa412ae3567a80",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -92,7 +92,7 @@ struct ReadAlerts\n                 alerts.push_back(alert);\n             }\n         }\n-        catch (std::exception) { }\n+        catch (const std::exception&) { }\n     }\n     ~ReadAlerts() { }\n "
      },
      {
        "sha": "4826fae52236b01317fe3bd68a91de970a8aabbb",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -39,8 +39,7 @@ Value CallRPC(string args)\n         Value result = (*method)(params, false);\n         return result;\n     }\n-    catch (Object& objError)\n-    {\n+    catch (const Object& objError) {\n         throw runtime_error(find_value(objError, \"message\").get_str());\n     }\n }"
      },
      {
        "sha": "bb108f38baab4d44afc0173efb3e53fd1047600f",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -129,7 +129,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n                 ss << VARINT(0);\n             }\n             pcursor->Next();\n-        } catch (std::exception &e) {\n+        } catch (const std::exception& e) {\n             return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n         }\n     }\n@@ -218,7 +218,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n             } else {\n                 break; // if shutdown requested or finished loading block index\n             }\n-        } catch (std::exception &e) {\n+        } catch (const std::exception& e) {\n             return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n         }\n     }"
      },
      {
        "sha": "1df9c5c79c72f9f4650d534fe710690758ff763b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -648,7 +648,7 @@ CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const\n         fileout << CLIENT_VERSION; // version that wrote the file\n         minerPolicyEstimator->Write(fileout);\n     }\n-    catch (const std::exception &) {\n+    catch (const std::exception&) {\n         LogPrintf(\"CTxMemPool::WriteFeeEstimates() : unable to write policy estimator data (non-fatal)\");\n         return false;\n     }\n@@ -667,7 +667,7 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n         LOCK(cs);\n         minerPolicyEstimator->Read(filein, minRelayFee);\n     }\n-    catch (const std::exception &) {\n+    catch (const std::exception&) {\n         LogPrintf(\"CTxMemPool::ReadFeeEstimates() : unable to read policy estimator data (non-fatal)\");\n         return false;\n     }"
      },
      {
        "sha": "282e54e4886319f74e9431ce71042247c9d07bab",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -346,7 +346,7 @@ bool SoftSetBoolArg(const std::string& strArg, bool fValue)\n         return SoftSetArg(strArg, std::string(\"0\"));\n }\n \n-static std::string FormatException(std::exception* pex, const char* pszThread)\n+static std::string FormatException(const std::exception* pex, const char* pszThread)\n {\n #ifdef WIN32\n     char pszModule[MAX_PATH] = \"\";\n@@ -362,7 +362,7 @@ static std::string FormatException(std::exception* pex, const char* pszThread)\n             \"UNKNOWN EXCEPTION       \\n%s in %s       \\n\", pszModule, pszThread);\n }\n \n-void PrintExceptionContinue(std::exception* pex, const char* pszThread)\n+void PrintExceptionContinue(const std::exception* pex, const char* pszThread)\n {\n     std::string message = FormatException(pex, pszThread);\n     LogPrintf(\"\\n\\n************************\\n%s\\n\", message);\n@@ -514,7 +514,7 @@ bool TryCreateDirectory(const boost::filesystem::path& p)\n     try\n     {\n         return boost::filesystem::create_directory(p);\n-    } catch (boost::filesystem::filesystem_error) {\n+    } catch (const boost::filesystem::filesystem_error&) {\n         if (!boost::filesystem::exists(p) || !boost::filesystem::is_directory(p))\n             throw;\n     }\n@@ -721,8 +721,7 @@ void SetupEnvironment()\n #else // boost filesystem v2\n             std::locale();                      // Raises runtime error if current locale is invalid\n #endif\n-    } catch(std::runtime_error &e)\n-    {\n+    } catch (const std::runtime_error&) {\n         setenv(\"LC_ALL\", \"C\", 1); // Force C locale\n     }\n #endif"
      },
      {
        "sha": "623c24f5cc7f2fef80dc76a1600cd936fda15415",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -84,7 +84,7 @@ static inline bool error(const char* format)\n     return false;\n }\n \n-void PrintExceptionContinue(std::exception* pex, const char* pszThread);\n+void PrintExceptionContinue(const std::exception *pex, const char* pszThread);\n void ParseParameters(int argc, const char*const argv[]);\n void FileCommit(FILE *fileout);\n bool TruncateFile(FILE *file, unsigned int length);\n@@ -186,12 +186,12 @@ template <typename Callable> void LoopForever(const char* name,  Callable func,\n             func();\n         }\n     }\n-    catch (boost::thread_interrupted)\n+    catch (const boost::thread_interrupted&)\n     {\n         LogPrintf(\"%s thread stop\\n\", name);\n         throw;\n     }\n-    catch (std::exception& e) {\n+    catch (const std::exception& e) {\n         PrintExceptionContinue(&e, name);\n         throw;\n     }\n@@ -214,12 +214,12 @@ template <typename Callable> void TraceThread(const char* name,  Callable func)\n         func();\n         LogPrintf(\"%s thread exit\\n\", name);\n     }\n-    catch (boost::thread_interrupted)\n+    catch (const boost::thread_interrupted&)\n     {\n         LogPrintf(\"%s thread interrupt\\n\", name);\n         throw;\n     }\n-    catch (std::exception& e) {\n+    catch (const std::exception& e) {\n         PrintExceptionContinue(&e, name);\n         throw;\n     }"
      },
      {
        "sha": "94e17c6a587e3e49ea0312d7926e7adf58a72d1a",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27df4123c433e5ad4e5592f0a8fbc40ca933865b/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=27df4123c433e5ad4e5592f0a8fbc40ca933865b",
        "patch": "@@ -460,7 +460,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             {\n                 ssValue >> hash;\n             }\n-            catch(...){}\n+            catch (...) {}\n \n             bool fSkipCheck = false;\n \n@@ -664,7 +664,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n         }\n         pcursor->close();\n     }\n-    catch (boost::thread_interrupted) {\n+    catch (const boost::thread_interrupted&) {\n         throw;\n     }\n     catch (...) {\n@@ -757,7 +757,7 @@ DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash, vec\n         }\n         pcursor->close();\n     }\n-    catch (boost::thread_interrupted) {\n+    catch (const boost::thread_interrupted&) {\n         throw;\n     }\n     catch (...) {\n@@ -878,7 +878,7 @@ bool BackupWallet(const CWallet& wallet, const string& strDest)\n #endif\n                     LogPrintf(\"copied wallet.dat to %s\\n\", pathDest.string());\n                     return true;\n-                } catch(const filesystem::filesystem_error &e) {\n+                } catch (const filesystem::filesystem_error& e) {\n                     LogPrintf(\"error copying wallet.dat to %s - %s\\n\", pathDest.string(), e.what());\n                     return false;\n                 }"
      }
    ]
  }
]