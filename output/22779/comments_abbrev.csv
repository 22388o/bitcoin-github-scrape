theStack,2021-08-23 16:41:19,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22779#issuecomment-903936605,903936605,
sipa,2021-08-23 16:42:19,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22779#issuecomment-903937361,903937361,
ariard,2021-08-24 21:20:50,"Concept ACK\n\n> Eventually i believe it would be good to prevent future overlooks by not applying the dust check to unknown witness versions and aborting if witness_version > current_version.\n\nIIUC, you're aiming to return `IsDust()` == true for any transaction with witness outputs superior to current version, wouldn't this be a revert of https://github.com/bitcoin/bitcoin/pull/15846 ? As w",https://github.com/bitcoin/bitcoin/pull/22779#issuecomment-904985220,904985220,
darosior,2021-08-24 21:24:22,"No, i'm aiming to do the opposite: not call IsDust for witness versions >1, effectively having IsDust == false for any witness version from the future. Since, as you mention it, we can't know the size in advance.\n‚Äê‚Äê‚Äê‚Äê‚Äê‚Äê‚Äê Original Message ‚Äê‚Äê‚Äê‚Äê‚Äê‚Äê‚Äê\nLe mardi 24 ao√ªt 2021 √† 11:21 PM, Antoine Riard ***@***.***> a √©crit :\n\n> Concept ACK\n>\n>> Eventually i believe it would be good to prevent future o",https://github.com/bitcoin/bitcoin/pull/22779#issuecomment-904987167,904987167,
ariard,2021-08-24 21:26:28,"> No, i'm aiming to do the opposite: not call IsDust for witness versions >1, effectively having IsDust == false for any witness version from the future.\n\nHmmmm so you could propagate transactions SegWit v2+ with `nValue` == 0 and as such freely write on the UTXO set? Unknown witness outputs are standard iirc.",https://github.com/bitcoin/bitcoin/pull/22779#issuecomment-904988338,904988338,
darosior,2021-08-25 07:30:46,"> Hmmmm so you could propagate transactions SegWit v2+ with nValue == 0 and as such freely write on the UTXO set? Unknown witness outputs are standard iirc.\n\nYou are right, i shouldn't reply to Github comments at 11:21PM :p\nMaybe it could be made of a fixed value (this one, or another large one so we don't tighten it when introducing a new version). Anyways i don't intend to (address it in t",https://github.com/bitcoin/bitcoin/pull/22779#issuecomment-905254905,905254905,
ariard,2021-08-26 00:33:37,"Code Review ACK 9155f6c\n\n>  Maybe it could be made of a fixed value (this one, or another large one so we don't tighten it when introducing a new version). Anyways i don't intend to (address it in this PR and) modify the existing behaviour, just to refactor the code to prevent a future overlook.\n\nYes honestly I think we should revamp our approach w.r.t to dust outputs, from a hard non-prop",https://github.com/bitcoin/bitcoin/pull/22779#issuecomment-905967703,905967703,
TheBlueMatt,2021-08-30 21:28:57,"Concept NACK. I don't think it makes sense to be lowering the dust levels in bitcoin generally. The context for the dust levels was calculated many years ago, I don't think it applies anymore.",https://github.com/bitcoin/bitcoin/pull/22779#issuecomment-908712317,908712317,
JeremyRubin,2021-08-30 23:54:50,"Concept NACK --\n\nI think we should either remove the dust limit entirely or not muck around with it.\n\nDust limits are not incentive compatible with miner preferences and if they are they can be configured by users individually.\n\nThat said, it's CR-Ack for me for this code, which seems to be improving the dust nSize calculation (which should be independent of any actual fee policy, the ",https://github.com/bitcoin/bitcoin/pull/22779#issuecomment-908786170,908786170,
MarcoFalke,2021-08-31 08:12:46,"Maybe split off the added tests from the behaviour change, because they seem useful on their own?",https://github.com/bitcoin/bitcoin/pull/22779#issuecomment-909003849,909003849,
darosior,2021-08-31 15:06:04,"@MarcoFalke done in #22846\n\n@TheBlueMatt i too am of the opinion that we should not decrease the dust thresholds, but i think that if we want to keep the same dust thresholds for Taproot outputs we should instead raise `DUST_RELAY_TX_FEE` instead of keeping the wrong computation. But this would unfortunately be a security issue for (some) L2s relying on it..\n\nI don't think the rationale of",https://github.com/bitcoin/bitcoin/pull/22779#issuecomment-909323858,909323858,
TheBlueMatt,2021-08-31 23:14:28,"> @TheBlueMatt i too am of the opinion that we should not decrease the dust thresholds, but i think that if we want to keep the same dust thresholds for Taproot outputs we should instead raise DUST_RELAY_TX_FEE instead of keeping the wrong computation. But this would unfortunately be a security issue for (some) L2s relying on it..\n\nIndeed, I don't think we can in any practical sense increase t",https://github.com/bitcoin/bitcoin/pull/22779#issuecomment-909718819,909718819,
DrahtBot,2021-09-01 09:40:41,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22846](https://github.com/bitcoin/bitcoin/pull/22846) (policy: unit test Segwit dust thresholds by darosior)\n\nIf you c",https://github.com/bitcoin/bitcoin/pull/22779#issuecomment-910115245,910115245,
DrahtBot,2021-09-02 08:27:35,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/22779#issuecomment-911379647,911379647,
darosior,2021-09-02 11:45:33,I think Matt is right. Closing this one in favour of documenting the behaviour in https://github.com/bitcoin/bitcoin/pull/22863 .,https://github.com/bitcoin/bitcoin/pull/22779#issuecomment-911579388,911579388,
luke-jr,2021-09-20 01:53:30,"> But this would unfortunately be a security issue for (some) L2s relying on it..\n\nThen those L2s are broken. Policy is never a guarantee and should not be treated like one.\n\nIMO you should reopen this.",https://github.com/bitcoin/bitcoin/pull/22779#issuecomment-922592049,922592049,
sipa,2021-08-23 14:25:06,"The outcome is the same, but I think the witness size is 66 (1 byte 0x01 to indicate the stack size, 1 byte 0x40 to indicate the size of the first element, 64 byte sig).",https://github.com/bitcoin/bitcoin/pull/22779#discussion_r694020889,694020889,src/policy/policy.cpp
darosior,2021-08-23 14:27:20,"Thanks, forgot the stack size byte",https://github.com/bitcoin/bitcoin/pull/22779#discussion_r694023011,694023011,src/policy/policy.cpp
MarcoFalke,2021-08-23 17:46:13,"You can just use a repeating hex character to allow for better compression. \n\n```suggestion\n    t.vout[0].scriptPubKey = CScript() << OP_1 << ParseHex(""ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"");\n```\n\nAlso, would be nice to add a test for OP_16 (as you change this too in this pull) and OP_0, because it is missing.",https://github.com/bitcoin/bitcoin/pull/22779#discussion_r694182178,694182178,src/test/transaction_tests.cpp
darosior,2021-08-24 07:45:20,"Used repeating characters, tested for Segwit v0, and added test for future witness versions.\n\nAwkward to test something that is almost certainly wrong, comforts me in the idea that we should refactor `GetDustThreshold` to loudly fail rather than returning an invalid value.",https://github.com/bitcoin/bitcoin/pull/22779#discussion_r694587557,694587557,src/test/transaction_tests.cpp
Crypt-iQ,2021-08-24 15:34:30,"More of a meta-comment:\n\nIf `GetDustThreshold` attempts to calculate the cost at which it's economical to spend an output, why is `nSize` initialized to `GetSerializedSize(txout)`? When spending the dust output, the size of the txout isn't in the spending tx unless the spending tx also spends to the same output type. This heuristic/initialization doesn't make sense to me because if we take P2W",https://github.com/bitcoin/bitcoin/pull/22779#discussion_r694968467,694968467,src/policy/policy.cpp
ariard,2021-08-24 21:24:25,"nit: If you intent to refer to the signature standard, should say BIP340 no? BIP341 describe the consensus rules applying the schnorr signature scheme.",https://github.com/bitcoin/bitcoin/pull/22779#discussion_r695227758,695227758,src/policy/policy.cpp
darosior,2021-08-25 07:24:01,"Right, thanks. Doc-off-by-one!",https://github.com/bitcoin/bitcoin/pull/22779#discussion_r695471529,695471529,src/policy/policy.cpp
JeremyRubin,2021-08-30 23:52:27,nit:prefer a switch statement here,https://github.com/bitcoin/bitcoin/pull/22779#discussion_r698883696,698883696,src/policy/policy.cpp
