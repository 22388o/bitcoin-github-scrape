practicalswift,2018-12-27T17:39:07Z,"Concept ACK\n\nThanks for doing this!",https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-450197951,450197951,
MarcoFalke,2018-12-28T11:25:19Z,"Would be nice if someone could look at the build system changes, since the code is mostly just moved around.",https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-450344544,450344544,
DrahtBot,2018-12-28T11:56:54Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14912](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14912.html) ([WIP] External signer support (e.g. hardwar",https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-450348226,450348226,
laanwj,2019-01-02T11:53:32Z,"Concept ACK\n\nI think this should be behind a `configure` flag, building so many executables is going to be slow when statically linking, or with slow filesystems, and it contributes nothing to testing unless the user is planning to do fuzzing.",https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-450845680,450845680,
cjdelisle,2019-01-02T12:35:31Z,"As a non-stakeholder, feel free to ignore, but as someone who is using the same test methodology, I would like to understand why you're proposing to change.\n\nI have a number of reasons why I tend to prefer a single fuzz entry point, but I would like to know if there is any evidence that putting the test-case in the data can harm the fuzzer's ability to efficiently find paths.\n\nMy reasoning",https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-450853090,450853090,
Crypt-iQ,2019-01-02T21:25:30Z,"Hey @cjdelisle,\n\nI think the fuzz tests should be split up.  AFL (and other fuzzers) can splice test cases with one another and for AFL, this can discover [20% additional execution paths](https://lcamtuf.blogspot.com/2014/08/binary-fuzzing-strategies-what-works.html).  From my understanding, this can cause efficiency problems if the fuzzer is not fuzzing just one target.  \n\nIf we have two ",https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-450989914,450989914,
practicalswift,2019-01-02T23:29:13Z,@cjdelisle See @kcc:s comment in https://github.com/bitcoin/bitcoin/issues/11045#issuecomment-323198955 :-),https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-451017313,451017313,
cjdelisle,2019-01-03T08:25:47Z,"Thanks @Crypt-iQ and @practicalswift , for those who weren't following carefully, my understanding is that it is the recommendation of Google's OSS-Fuzz project that fuzz targets should be broken up ( https://github.com/google/oss-fuzz/blob/master/docs/ideal_integration.md ) because:\n\n* Some of the fuzzers have O(executable_size) performance\n* Forcing all fuzzing to enter through one entry-p",https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-451079430,451079430,
Crypt-iQ,2019-01-03T15:34:47Z,"I think that the fuzzing targets should be run on the corpus as part of regression testing.  This would require the corpus to be included in this project.  Is there a reason why it's not currently included?  Maybe this can be done in another PR.  \n\nSee @kcc comment: https://github.com/bitcoin/bitcoin/issues/11045#issuecomment-334516409\n\nOSS Fuzz recommendations: \nhttps://github.com/googl",https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-451179052,451179052,
laanwj,2019-01-08T13:45:10Z,"> I think that the fuzzing targets should be run on the corpus as part of regression testing. This would require the corpus to be included in this project. Is there a reason why it's not currently included? \n\nThe idea is to have a separate repository with the corpus. The problem with including it in the main repository, besides taking up space, is that e.g. all changes have to go through the b",https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-452303026,452303026,
Crypt-iQ,2019-01-08T15:28:03Z,@laanwj Ok that makes sense.  I think the corpus should be split up into directories by message type / fuzzing target to avoid erroneous feedback while fuzzing.,https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-452338944,452338944,
laanwj,2019-01-09T18:59:21Z,"Probably want to remove the links to test inputs from `doc/fuzzing.md` here, as they'll no longer work as-is and one of the links is broken (#15028).",https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-452815353,452815353,
MarcoFalke,2019-01-16T04:20:12Z,@laanwj The previous corpus can still be used by stripping the first few (4?) bytes off of the seeds. I will do that (and move them to a separate repo) after this pull has been merged.,https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-454646632,454646632,
MarcoFalke,2019-01-24T19:19:41Z,"This hasn't received any review, but I am going to merge it tomorrow unless someone objects to that.",https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-457322135,457322135,
sipa,2019-01-25T00:43:10Z,"Wouldn't it be easier to accomplish this by having a since source file for all fuzz target, but with a macro define (-D... argument) to select which fuzzer is invoked by main?",https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-457413377,457413377,
MarcoFalke,2019-01-25T01:58:00Z,"@sipa Wouldn't that require to pass in and compile for each fuzz target? That seems to move the verbosity to the user/ci script/fuzz runner.\n\nAlso having a single source file makes it harder to see what each single fuzz test does (and depends on).",https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-457427812,457427812,
sipa,2019-01-25T04:32:26Z,"@MarcoFalke The build system would automatically build all of them, supplying the necessary -D arguments for each binary.\n\nThis would avoid all the boilerplate in all those source files.",https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-457452487,457452487,
MarcoFalke,2019-01-25T23:07:22Z,"Ah, I see. Done and removed 400 lines of boilerplate and headers.",https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-457765728,457765728,
MarcoFalke,2019-01-26T00:10:51Z,"Now split into two commits, where the top commit is some move-only:\n\n```\ngit diff 2ca632e5b44a8385989c8539cc4e30e60fdee16c~ 2ca632e5b44a8385989c8539cc4e30e60fdee16c --color-moved=dimmed-zebra src/test",https://github.com/bitcoin/bitcoin/pull/15043#issuecomment-457777667,457777667,
practicalswift,2018-12-28T10:33:35Z,Drop the unused `e` variable. Applies throughout this PR.,https://github.com/bitcoin/bitcoin/pull/15043#discussion_r244297861,244297861,src/test/test_bitcoin_fuzzy-blockheader_deserialize.cpp
practicalswift,2018-12-28T10:35:37Z,Make `buffer` const reference. Applies throughout this PR :-),https://github.com/bitcoin/bitcoin/pull/15043#discussion_r244298123,244298123,src/test/test_bitcoin_fuzzy-transaction_deserialize.cpp
practicalswift,2018-12-28T10:36:57Z,Nit: Could drop unused variable names `argc` and `argv`.,https://github.com/bitcoin/bitcoin/pull/15043#discussion_r244298294,244298294,src/test/test_bitcoin_fuzzy.hpp
fanquake,2018-12-28T10:46:05Z,Related: https://llvm.org/docs/LibFuzzer.html#startup-initialization,https://github.com/bitcoin/bitcoin/pull/15043#discussion_r244299565,244299565,src/test/test_bitcoin_fuzzy.hpp
Crypt-iQ,2019-01-04T16:11:27Z,User is already in the `src` directory so this will fail.  I ran `make` with no arguments in the `src` directory and it built the fuzz targets.,https://github.com/bitcoin/bitcoin/pull/15043#discussion_r245342915,245342915,doc/fuzzing.md
MarcoFalke,2019-01-14T19:19:04Z,Done (changed it to `make`),https://github.com/bitcoin/bitcoin/pull/15043#discussion_r247622832,247622832,doc/fuzzing.md
practicalswift,2019-01-28T19:08:47Z,Bikeshedding perhaps but `--enable-fuzzing` feels more natural to me than `--enable-fuzz`.,https://github.com/bitcoin/bitcoin/pull/15043#discussion_r251552424,251552424,configure.ac
ryanofsky,2019-01-30T18:38:06Z,"You could deduplicate some boilerplate by defining common variables like:\n\n```\nfuzz_common_ldflags = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\nfuzz_common_ldadd = $(LIBUNIVALUE) $(LIBBITCOIN_SERVER) $(LIBBITCOIN_COMMON)\n```\n\nand then individual targets could be shortened to:\n\n```\ntest_fuzz_transaction_deserialize_LDFLAGS = $(fuzz_common_ldflags)\ntest_fuzz_transaction_",https://github.com/bitcoin/bitcoin/pull/15043#discussion_r252384449,252384449,src/Makefile.test.include
ryanofsky,2019-01-30T18:43:37Z,"I think it would make things less complicated just to use separate source files, rather than using these preprocessor defines. These defines don't seem to really decrease duplication, but I guess they they do have the advantage of making it easy to see the different test cases all in one file.",https://github.com/bitcoin/bitcoin/pull/15043#discussion_r252386467,252386467,src/test/test_bitcoin_fuzzy.cpp
MarcoFalke,2019-01-30T20:00:03Z,"This was my initial solution, but I changed it back to minimize the diff",https://github.com/bitcoin/bitcoin/pull/15043#discussion_r252415821,252415821,src/test/test_bitcoin_fuzzy.cpp
