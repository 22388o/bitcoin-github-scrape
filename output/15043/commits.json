[
  {
    "sha": "fab4bed68a3964ace5620a25d32d62ed87003126",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWI0YmVkNjhhMzk2NGFjZTU2MjBhMjVkMzJkNjJlZDg3MDAzMTI2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-25T23:42:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-26T00:05:07Z"
      },
      "message": "[test] fuzz: make test_one_input return void\n\nThe return value is always 0 and not used, so might as well return void",
      "tree": {
        "sha": "7bbc77531d87792fd6319a4d58a2da6187bf2370",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7bbc77531d87792fd6319a4d58a2da6187bf2370"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab4bed68a3964ace5620a25d32d62ed87003126",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcS6QzAAoJEM4rdWl+aaVIETcL/2DS4B310PSRIGDdYHY9f8YD\nDtNZfSpKXkDLMuLuCiWe99hJFpbr03qQl07hMTIzedPW/3EWiLya99qptudh9Vqp\nw6v0IDyDEw67oJBPdqt/CggvTSyYrHlUFIblkzZ2ye/mB65vqLqb2FIqJHoRAqZ3\n3kaqOht3gggiGX0xl3fzC5f3SvzUXOeUx1LuonashKEXWwlB14LxTqkFy31lM2gz\nmFB6IFcuZe7zn7InV1RkhpG0/NuMXxL6/IqB1iuqRitmjYZC1KwimrmhTAVEyv0X\nGSAGZ0z3KxXl2SajKSHv5AK0Oe6xq8ztck2Z6EQiZrh6YnBpZluL64Jc+hKBnJ+r\nygrK0Y6NLwS1+SLWMiYAh7WaRP3IzefrrCsYnNl8C5trhKO+p7ZD+SCUiMo8fE7+\nTZF1oryZk1v6HeHcGfLI1SL0hXVJ/3ZFgHtggOOrDkBWSVdn1qCkEPFxomXAHPna\nLNeRQPHO7M5DQiftKt6folxqnJV4+jT6PP3e1tlD5g==\n=xtiU\n-----END PGP SIGNATURE-----",
        "payload": "tree 7bbc77531d87792fd6319a4d58a2da6187bf2370\nparent d14ef5721ffcf07321704dc21f1ab9df4952a44d\nauthor MarcoFalke <falke.marco@gmail.com> 1548459741 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1548461107 -0500\n\n[test] fuzz: make test_one_input return void\n\nThe return value is always 0 and not used, so might as well return void\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab4bed68a3964ace5620a25d32d62ed87003126",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab4bed68a3964ace5620a25d32d62ed87003126",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab4bed68a3964ace5620a25d32d62ed87003126/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d14ef5721ffcf07321704dc21f1ab9df4952a44d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d14ef5721ffcf07321704dc21f1ab9df4952a44d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d14ef5721ffcf07321704dc21f1ab9df4952a44d"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 44,
      "deletions": 42
    },
    "files": [
      {
        "sha": "6588ac38ecd6de79fef536b2ab6c6b3adc744d19",
        "filename": "src/test/test_bitcoin_fuzzy.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 42,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4bed68a3964ace5620a25d32d62ed87003126/src/test/test_bitcoin_fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4bed68a3964ace5620a25d32d62ed87003126/src/test/test_bitcoin_fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_fuzzy.cpp?ref=fab4bed68a3964ace5620a25d32d62ed87003126",
        "patch": "@@ -54,33 +54,35 @@ enum TEST_ID {\n     TEST_ID_END\n };\n \n-static bool read_stdin(std::vector<uint8_t> &data) {\n+static bool read_stdin(std::vector<uint8_t>& data)\n+{\n     uint8_t buffer[1024];\n-    ssize_t length=0;\n-    while((length = read(STDIN_FILENO, buffer, 1024)) > 0) {\n-        data.insert(data.end(), buffer, buffer+length);\n+    ssize_t length = 0;\n+    while ((length = read(STDIN_FILENO, buffer, 1024)) > 0) {\n+        data.insert(data.end(), buffer, buffer + length);\n \n-        if (data.size() > (1<<20)) return false;\n+        if (data.size() > (1 << 20)) return false;\n     }\n-    return length==0;\n+    return length == 0;\n }\n \n-static int test_one_input(std::vector<uint8_t> buffer) {\n-    if (buffer.size() < sizeof(uint32_t)) return 0;\n+void test_one_input(std::vector<uint8_t> buffer)\n+{\n+    if (buffer.size() < sizeof(uint32_t)) return;\n \n     uint32_t test_id = 0xffffffff;\n     memcpy(&test_id, buffer.data(), sizeof(uint32_t));\n     buffer.erase(buffer.begin(), buffer.begin() + sizeof(uint32_t));\n \n-    if (test_id >= TEST_ID_END) return 0;\n+    if (test_id >= TEST_ID_END) return;\n \n     CDataStream ds(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n     try {\n         int nVersion;\n         ds >> nVersion;\n         ds.SetVersion(nVersion);\n     } catch (const std::ios_base::failure& e) {\n-        return 0;\n+        return;\n     }\n \n     switch(test_id) {\n@@ -90,15 +92,15 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n             {\n                 CBlock block;\n                 ds >> block;\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n             break;\n         }\n         case CTRANSACTION_DESERIALIZE:\n         {\n             try\n             {\n                 CTransaction tx(deserialize, ds);\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n             break;\n         }\n         case CBLOCKLOCATOR_DESERIALIZE:\n@@ -107,7 +109,7 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n             {\n                 CBlockLocator bl;\n                 ds >> bl;\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n             break;\n         }\n         case CBLOCKMERKLEROOT:\n@@ -118,7 +120,7 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n                 ds >> block;\n                 bool mutated;\n                 BlockMerkleRoot(block, &mutated);\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n             break;\n         }\n         case CADDRMAN_DESERIALIZE:\n@@ -127,7 +129,7 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n             {\n                 CAddrMan am;\n                 ds >> am;\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n             break;\n         }\n         case CBLOCKHEADER_DESERIALIZE:\n@@ -136,7 +138,7 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n             {\n                 CBlockHeader bh;\n                 ds >> bh;\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n             break;\n         }\n         case CBANENTRY_DESERIALIZE:\n@@ -145,7 +147,7 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n             {\n                 CBanEntry be;\n                 ds >> be;\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n             break;\n         }\n         case CTXUNDO_DESERIALIZE:\n@@ -154,7 +156,7 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n             {\n                 CTxUndo tu;\n                 ds >> tu;\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n             break;\n         }\n         case CBLOCKUNDO_DESERIALIZE:\n@@ -163,7 +165,7 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n             {\n                 CBlockUndo bu;\n                 ds >> bu;\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n             break;\n         }\n         case CCOINS_DESERIALIZE:\n@@ -172,7 +174,7 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n             {\n                 Coin coin;\n                 ds >> coin;\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n             break;\n         }\n         case CNETADDR_DESERIALIZE:\n@@ -181,7 +183,7 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n             {\n                 CNetAddr na;\n                 ds >> na;\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n             break;\n         }\n         case CSERVICE_DESERIALIZE:\n@@ -190,7 +192,7 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n             {\n                 CService s;\n                 ds >> s;\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n             break;\n         }\n         case CMESSAGEHEADER_DESERIALIZE:\n@@ -200,8 +202,8 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n             {\n                 CMessageHeader mh(pchMessageStart);\n                 ds >> mh;\n-                if (!mh.IsValid(pchMessageStart)) {return 0;}\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+                if (!mh.IsValid(pchMessageStart)) {return;}\n+            } catch (const std::ios_base::failure& e) {return;}\n             break;\n         }\n         case CADDRESS_DESERIALIZE:\n@@ -210,7 +212,7 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n             {\n                 CAddress a;\n                 ds >> a;\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n             break;\n         }\n         case CINV_DESERIALIZE:\n@@ -219,7 +221,7 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n             {\n                 CInv i;\n                 ds >> i;\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n             break;\n         }\n         case CBLOOMFILTER_DESERIALIZE:\n@@ -228,7 +230,7 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n             {\n                 CBloomFilter bf;\n                 ds >> bf;\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n             break;\n         }\n         case CDISKBLOCKINDEX_DESERIALIZE:\n@@ -237,7 +239,7 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n             {\n                 CDiskBlockIndex dbi;\n                 ds >> dbi;\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n             break;\n         }\n         case CTXOUTCOMPRESSOR_DESERIALIZE:\n@@ -247,7 +249,7 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n             try\n             {\n                 ds >> toc;\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n \n             break;\n         }\n@@ -257,7 +259,7 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n             {\n                 BlockTransactions bt;\n                 ds >> bt;\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n \n             break;\n         }\n@@ -267,29 +269,31 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n             {\n                 BlockTransactionsRequest btr;\n                 ds >> btr;\n-            } catch (const std::ios_base::failure& e) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return;}\n \n             break;\n         }\n         default:\n-            return 0;\n+            return;\n     }\n-    return 0;\n+    return;\n }\n \n-static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n-void initialize() {\n-    globalVerifyHandle = MakeUnique<ECCVerifyHandle>();\n+void initialize()\n+{\n+    const static auto verify_handle = MakeUnique<ECCVerifyHandle>();\n }\n \n // This function is used by libFuzzer\n-extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n+extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)\n+{\n     test_one_input(std::vector<uint8_t>(data, data + size));\n     return 0;\n }\n \n // This function is used by libFuzzer\n-extern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\n+extern \"C\" int LLVMFuzzerInitialize(int* argc, char*** argv)\n+{\n     initialize();\n     return 0;\n }\n@@ -312,20 +316,18 @@ int main(int argc, char **argv)\n #ifdef __AFL_LOOP\n     // Enable AFL persistent mode. Requires compilation using afl-clang-fast++.\n     // See fuzzing.md for details.\n-    int ret = 0;\n     while (__AFL_LOOP(1000)) {\n         std::vector<uint8_t> buffer;\n         if (!read_stdin(buffer)) {\n             continue;\n         }\n-        ret = test_one_input(buffer);\n+        test_one_input(buffer);\n     }\n-    return ret;\n #else\n     std::vector<uint8_t> buffer;\n     if (!read_stdin(buffer)) {\n         return 0;\n     }\n-    return test_one_input(buffer);\n+    test_one_input(buffer);\n #endif\n }"
      }
    ]
  },
  {
    "sha": "2ca632e5b44a8385989c8539cc4e30e60fdee16c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2E2MzJlNWI0NGE4Mzg1OTg5Yzg1MzljYzRlMzBlNjBmZGVlMTZj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-25T23:35:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-30T00:03:06Z"
      },
      "message": "test: Build fuzz targets into seperate executables",
      "tree": {
        "sha": "86483d6d393f2e883114fa199914123a72232945",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86483d6d393f2e883114fa199914123a72232945"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ca632e5b44a8385989c8539cc4e30e60fdee16c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ca632e5b44a8385989c8539cc4e30e60fdee16c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ca632e5b44a8385989c8539cc4e30e60fdee16c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ca632e5b44a8385989c8539cc4e30e60fdee16c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fab4bed68a3964ace5620a25d32d62ed87003126",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab4bed68a3964ace5620a25d32d62ed87003126",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab4bed68a3964ace5620a25d32d62ed87003126"
      }
    ],
    "stats": {
      "total": 728,
      "additions": 507,
      "deletions": 221
    },
    "files": [
      {
        "sha": "791df9498d49f0c466cc46ce968f83fd35275a8a",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ca632e5b44a8385989c8539cc4e30e60fdee16c/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ca632e5b44a8385989c8539cc4e30e60fdee16c/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=2ca632e5b44a8385989c8539cc4e30e60fdee16c",
        "patch": "@@ -97,7 +97,7 @@ jobs:\n         PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools protobuf-compiler libdbus-1-dev libharfbuzz-dev libprotobuf-dev\"\n         DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1\"\n         GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --enable-debug CXXFLAGS=\\\"-g0 -O2\\\"\"\n+        BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-fuzz --enable-glibc-back-compat --enable-reduce-exports --enable-debug CXXFLAGS=\\\"-g0 -O2\\\"\"\n \n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [xenial]  [no depends, only system libs, sanitizers: thread (TSan), no wallet]'"
      },
      {
        "sha": "2620ed56da0e3c3789ad30f88080729eebbac695",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ca632e5b44a8385989c8539cc4e30e60fdee16c/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ca632e5b44a8385989c8539cc4e30e60fdee16c/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=2ca632e5b44a8385989c8539cc4e30e60fdee16c",
        "patch": "@@ -102,7 +102,6 @@ AM_CONDITIONAL([HAVE_DOXYGEN], [test -n \"$DOXYGEN\"])\n \n AC_ARG_VAR(PYTHONPATH, Augments the default search path for python module files)\n \n-# Enable wallet\n AC_ARG_ENABLE([wallet],\n   [AS_HELP_STRING([--disable-wallet],\n   [disable wallet (enabled by default)])],\n@@ -147,6 +146,11 @@ AC_ARG_ENABLE([extended-functional-tests],\n     [use_extended_functional_tests=$enableval],\n     [use_extended_functional_tests=no])\n \n+AC_ARG_ENABLE([fuzz],\n+    AS_HELP_STRING([--enable-fuzz],[enable building of fuzz targets (default no)]),\n+    [enable_fuzz=$enableval],\n+    [enable_fuzz=no])\n+\n AC_ARG_WITH([qrencode],\n   [AS_HELP_STRING([--with-qrencode],\n   [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n@@ -1394,6 +1398,7 @@ AM_CONDITIONAL([BUILD_DARWIN], [test x$BUILD_OS = xdarwin])\n AM_CONDITIONAL([TARGET_WINDOWS], [test x$TARGET_OS = xwindows])\n AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet = xyes])\n AM_CONDITIONAL([ENABLE_TESTS],[test x$BUILD_TEST = xyes])\n+AM_CONDITIONAL([ENABLE_FUZZ],[test x$enable_fuzz = xyes])\n AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])\n AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$BUILD_TEST_QT = xyes])\n AM_CONDITIONAL([ENABLE_BIP70],[test x$enable_bip70 = xyes])\n@@ -1536,6 +1541,9 @@ if test x$bitcoin_enable_qt != xno; then\n fi\n echo \"  with zmq      = $use_zmq\"\n echo \"  with test     = $use_tests\"\n+if test x$use_tests != xno; then\n+    echo \"    with fuzz   = $enable_fuzz\"\n+fi\n echo \"  with bench    = $use_bench\"\n echo \"  with upnp     = $use_upnp\"\n echo \"  use asm       = $use_asm\""
      },
      {
        "sha": "08b73d3b3c0fa98123596e14ce1bc0da6e0a46d9",
        "filename": "doc/fuzzing.md",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ca632e5b44a8385989c8539cc4e30e60fdee16c/doc/fuzzing.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ca632e5b44a8385989c8539cc4e30e60fdee16c/doc/fuzzing.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/fuzzing.md?ref=2ca632e5b44a8385989c8539cc4e30e60fdee16c",
        "patch": "@@ -1,9 +1,9 @@\n Fuzz-testing Bitcoin Core\n ==========================\n \n-A special test harness `test_bitcoin_fuzzy` is provided to provide an easy\n-entry point for fuzzers and the like. In this document we'll describe how to\n-use it with AFL and libFuzzer.\n+A special test harness in `src/test/fuzz/` is provided for each fuzz target to\n+provide an easy entry point for fuzzers and the like. In this document we'll\n+describe how to use it with AFL and libFuzzer.\n \n ## AFL\n \n@@ -23,10 +23,10 @@ export AFLPATH=$PWD\n To build Bitcoin Core using AFL instrumentation (this assumes that the\n `AFLPATH` was set as above):\n ```\n-./configure --disable-ccache --disable-shared --enable-tests CC=${AFLPATH}/afl-gcc CXX=${AFLPATH}/afl-g++\n+./configure --disable-ccache --disable-shared --enable-tests --enable-fuzz CC=${AFLPATH}/afl-gcc CXX=${AFLPATH}/afl-g++\n export AFL_HARDEN=1\n cd src/\n-make test/test_bitcoin_fuzzy\n+make\n ```\n We disable ccache because we don't want to pollute the ccache with instrumented\n objects, and similarly don't want to use non-instrumented cached objects linked\n@@ -35,7 +35,7 @@ in.\n The fuzzing can be sped up significantly (~200x) by using `afl-clang-fast` and\n `afl-clang-fast++` in place of `afl-gcc` and `afl-g++` when compiling. When\n compiling using `afl-clang-fast`/`afl-clang-fast++` the resulting\n-`test_bitcoin_fuzzy` binary will be instrumented in such a way that the AFL\n+binary will be instrumented in such a way that the AFL\n features \"persistent mode\" and \"deferred forkserver\" can be used. See\n https://github.com/mcarpenter/afl/tree/master/llvm_mode for details.\n \n@@ -63,7 +63,7 @@ Extract these (or other starting inputs) into the `inputs` directory before star\n \n To start the actual fuzzing use:\n ```\n-$AFLPATH/afl-fuzz -i ${AFLIN} -o ${AFLOUT} -m52 -- test/test_bitcoin_fuzzy\n+$AFLPATH/afl-fuzz -i ${AFLIN} -o ${AFLOUT} -m52 -- test/fuzz/fuzz_target_foo\n ```\n \n You may have to change a few kernel parameters to test optimally - `afl-fuzz`\n@@ -77,7 +77,7 @@ found in the `compiler-rt` runtime libraries package).\n To build the `test/test_bitcoin_fuzzy` executable run\n \n ```\n-./configure --disable-ccache --with-sanitizers=fuzzer,address CC=clang CXX=clang++\n+./configure --disable-ccache --enable-fuzz --with-sanitizers=fuzzer,address CC=clang CXX=clang++\n make\n ```\n "
      },
      {
        "sha": "2e1a2c7766a2ab68b2cf5a6ba203089322b3e7a4",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 373,
        "deletions": 23,
        "changes": 396,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ca632e5b44a8385989c8539cc4e30e60fdee16c/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ca632e5b44a8385989c8539cc4e30e60fdee16c/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=2ca632e5b44a8385989c8539cc4e30e60fdee16c",
        "patch": "@@ -3,7 +3,33 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n bin_PROGRAMS += test/test_bitcoin\n-noinst_PROGRAMS += test/test_bitcoin_fuzzy\n+\n+FUZZ_TARGETS = \\\n+  test/fuzz/address_deserialize \\\n+  test/fuzz/addrman_deserialize \\\n+  test/fuzz/banentry_deserialize \\\n+  test/fuzz/block_deserialize \\\n+  test/fuzz/blockheader_deserialize \\\n+  test/fuzz/blocklocator_deserialize \\\n+  test/fuzz/blockmerkleroot \\\n+  test/fuzz/blocktransactions_deserialize \\\n+  test/fuzz/blocktransactionsrequest_deserialize \\\n+  test/fuzz/blockundo_deserialize \\\n+  test/fuzz/bloomfilter_deserialize \\\n+  test/fuzz/coins_deserialize \\\n+  test/fuzz/diskblockindex_deserialize \\\n+  test/fuzz/inv_deserialize \\\n+  test/fuzz/messageheader_deserialize \\\n+  test/fuzz/netaddr_deserialize \\\n+  test/fuzz/service_deserialize \\\n+  test/fuzz/transaction_deserialize \\\n+  test/fuzz/txoutcompressor_deserialize \\\n+  test/fuzz/txundo_deserialize\n+\n+if ENABLE_FUZZ\n+noinst_PROGRAMS += $(FUZZ_TARGETS:=)\n+endif\n+\n TEST_SRCDIR = test\n TEST_BINARY=test/test_bitcoin$(EXEEXT)\n \n@@ -27,6 +53,10 @@ BITCOIN_TEST_SUITE = \\\n   test/test_bitcoin.h \\\n   test/test_bitcoin.cpp\n \n+FUZZ_SUITE = \\\n+  test/fuzz/fuzz.cpp \\\n+  test/fuzz/fuzz.h\n+\n # test_bitcoin binary #\n BITCOIN_TESTS =\\\n   test/arith_uint256_tests.cpp \\\n@@ -138,28 +168,348 @@ test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -s\n if ENABLE_ZMQ\n test_test_bitcoin_LDADD += $(ZMQ_LIBS)\n endif\n-#\n-\n-# test_bitcoin_fuzzy binary #\n-test_test_bitcoin_fuzzy_SOURCES = test/test_bitcoin_fuzzy.cpp\n-test_test_bitcoin_fuzzy_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_test_bitcoin_fuzzy_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_test_bitcoin_fuzzy_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-\n-test_test_bitcoin_fuzzy_LDADD = \\\n-  $(LIBUNIVALUE) \\\n-  $(LIBBITCOIN_SERVER) \\\n-  $(LIBBITCOIN_COMMON) \\\n-  $(LIBBITCOIN_UTIL) \\\n-  $(LIBBITCOIN_CONSENSUS) \\\n-  $(LIBBITCOIN_CRYPTO) \\\n-  $(LIBBITCOIN_CRYPTO_SSE41) \\\n-  $(LIBBITCOIN_CRYPTO_AVX2) \\\n-  $(LIBBITCOIN_CRYPTO_SHANI) \\\n-  $(LIBSECP256K1)\n-\n-test_test_bitcoin_fuzzy_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n-#\n+\n+if ENABLE_FUZZ\n+test_fuzz_block_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_block_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_DESERIALIZE=1\n+test_fuzz_block_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_block_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_block_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_block_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_transaction_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_transaction_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTRANSACTION_DESERIALIZE=1\n+test_fuzz_transaction_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_transaction_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_transaction_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_transaction_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_blocklocator_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_blocklocator_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKLOCATOR_DESERIALIZE=1\n+test_fuzz_blocklocator_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blocklocator_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blocklocator_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_blocklocator_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_blockmerkleroot_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_blockmerkleroot_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKMERKLEROOT=1\n+test_fuzz_blockmerkleroot_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blockmerkleroot_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blockmerkleroot_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_blockmerkleroot_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_addrman_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_addrman_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDRMAN_DESERIALIZE=1\n+test_fuzz_addrman_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_addrman_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_addrman_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_addrman_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_blockheader_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_blockheader_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKHEADER_DESERIALIZE=1\n+test_fuzz_blockheader_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blockheader_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blockheader_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_blockheader_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_banentry_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_banentry_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBANENTRY_DESERIALIZE=1\n+test_fuzz_banentry_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_banentry_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_banentry_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_banentry_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_txundo_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_txundo_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXUNDO_DESERIALIZE=1\n+test_fuzz_txundo_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_txundo_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_txundo_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_txundo_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_blockundo_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_blockundo_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKUNDO_DESERIALIZE=1\n+test_fuzz_blockundo_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blockundo_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blockundo_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_blockundo_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_coins_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_coins_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DCOINS_DESERIALIZE=1\n+test_fuzz_coins_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_coins_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_coins_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_coins_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_netaddr_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_netaddr_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DNETADDR_DESERIALIZE=1\n+test_fuzz_netaddr_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_netaddr_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_netaddr_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_netaddr_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_service_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_service_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSERVICE_DESERIALIZE=1\n+test_fuzz_service_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_service_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_service_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_service_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_messageheader_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_messageheader_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGEHEADER_DESERIALIZE=1\n+test_fuzz_messageheader_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_messageheader_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_messageheader_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_messageheader_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_address_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_address_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDRESS_DESERIALIZE=1\n+test_fuzz_address_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_address_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_address_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_address_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_inv_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_inv_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DINV_DESERIALIZE=1\n+test_fuzz_inv_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_inv_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_inv_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_inv_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_bloomfilter_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_bloomfilter_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOOMFILTER_DESERIALIZE=1\n+test_fuzz_bloomfilter_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_bloomfilter_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_bloomfilter_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_bloomfilter_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_diskblockindex_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_diskblockindex_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DDISKBLOCKINDEX_DESERIALIZE=1\n+test_fuzz_diskblockindex_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_diskblockindex_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_diskblockindex_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_diskblockindex_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_txoutcompressor_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_txoutcompressor_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXOUTCOMPRESSOR_DESERIALIZE=1\n+test_fuzz_txoutcompressor_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_txoutcompressor_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_txoutcompressor_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_txoutcompressor_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_blocktransactions_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_blocktransactions_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKTRANSACTIONS_DESERIALIZE=1\n+test_fuzz_blocktransactions_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blocktransactions_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blocktransactions_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_blocktransactions_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_blocktransactionsrequest_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_blocktransactionsrequest_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKTRANSACTIONSREQUEST_DESERIALIZE=1\n+test_fuzz_blocktransactionsrequest_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blocktransactionsrequest_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blocktransactionsrequest_deserialize_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_blocktransactionsrequest_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+endif # ENABLE_FUZZ\n \n nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)\n "
      },
      {
        "sha": "0709da5563600497eee202140a6e74f9eec84fb6",
        "filename": "src/test/fuzz/fuzz.cpp",
        "status": "added",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ca632e5b44a8385989c8539cc4e30e60fdee16c/src/test/fuzz/fuzz.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ca632e5b44a8385989c8539cc4e30e60fdee16c/src/test/fuzz/fuzz.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/fuzz.cpp?ref=2ca632e5b44a8385989c8539cc4e30e60fdee16c",
        "patch": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/fuzz.h>\n+\n+#include <unistd.h>\n+\n+#include <pubkey.h>\n+#include <util/memory.h>\n+\n+\n+static bool read_stdin(std::vector<uint8_t>& data)\n+{\n+    uint8_t buffer[1024];\n+    ssize_t length = 0;\n+    while ((length = read(STDIN_FILENO, buffer, 1024)) > 0) {\n+        data.insert(data.end(), buffer, buffer + length);\n+\n+        if (data.size() > (1 << 20)) return false;\n+    }\n+    return length == 0;\n+}\n+\n+static void initialize()\n+{\n+    const static auto verify_handle = MakeUnique<ECCVerifyHandle>();\n+}\n+\n+// This function is used by libFuzzer\n+extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)\n+{\n+    test_one_input(std::vector<uint8_t>(data, data + size));\n+    return 0;\n+}\n+\n+// This function is used by libFuzzer\n+extern \"C\" int LLVMFuzzerInitialize(int* argc, char*** argv)\n+{\n+    initialize();\n+    return 0;\n+}\n+\n+// Disabled under WIN32 due to clash with Cygwin's WinMain.\n+#ifndef WIN32\n+// Declare main(...) \"weak\" to allow for libFuzzer linking. libFuzzer provides\n+// the main(...) function.\n+__attribute__((weak))\n+#endif\n+int main(int argc, char **argv)\n+{\n+    initialize();\n+#ifdef __AFL_INIT\n+    // Enable AFL deferred forkserver mode. Requires compilation using\n+    // afl-clang-fast++. See fuzzing.md for details.\n+    __AFL_INIT();\n+#endif\n+\n+#ifdef __AFL_LOOP\n+    // Enable AFL persistent mode. Requires compilation using afl-clang-fast++.\n+    // See fuzzing.md for details.\n+    while (__AFL_LOOP(1000)) {\n+        std::vector<uint8_t> buffer;\n+        if (!read_stdin(buffer)) {\n+            continue;\n+        }\n+        test_one_input(buffer);\n+    }\n+#else\n+    std::vector<uint8_t> buffer;\n+    if (!read_stdin(buffer)) {\n+        return 0;\n+    }\n+    test_one_input(buffer);\n+#endif\n+    return 0;\n+}"
      },
      {
        "sha": "ad62a5faf0012eaed27d7b850d2965df84e5151b",
        "filename": "src/test/fuzz/fuzz.h",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ca632e5b44a8385989c8539cc4e30e60fdee16c/src/test/fuzz/fuzz.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ca632e5b44a8385989c8539cc4e30e60fdee16c/src/test/fuzz/fuzz.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/fuzz.h?ref=2ca632e5b44a8385989c8539cc4e30e60fdee16c",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_FUZZ_FUZZ_H\n+#define BITCOIN_TEST_FUZZ_FUZZ_H\n+\n+#include <functional>\n+#include <stdint.h>\n+#include <vector>\n+\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+void test_one_input(std::vector<uint8_t> buffer);\n+\n+#endif // BITCOIN_TEST_FUZZ_FUZZ_H"
      },
      {
        "sha": "859fba0bdc19dfb0024bd16e02091c4419d753ed",
        "filename": "src/test/test_bitcoin_fuzzy.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 188,
        "changes": 210,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ca632e5b44a8385989c8539cc4e30e60fdee16c/src/test/test_bitcoin_fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ca632e5b44a8385989c8539cc4e30e60fdee16c/src/test/test_bitcoin_fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_fuzzy.cpp?ref=2ca632e5b44a8385989c8539cc4e30e60fdee16c",
        "patch": "@@ -2,10 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n #include <addrman.h>\n #include <blockencodings.h>\n #include <chain.h>\n@@ -28,54 +24,10 @@\n #include <memory>\n #include <vector>\n \n-const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n-\n-enum TEST_ID {\n-    CBLOCK_DESERIALIZE=0,\n-    CTRANSACTION_DESERIALIZE,\n-    CBLOCKLOCATOR_DESERIALIZE,\n-    CBLOCKMERKLEROOT,\n-    CADDRMAN_DESERIALIZE,\n-    CBLOCKHEADER_DESERIALIZE,\n-    CBANENTRY_DESERIALIZE,\n-    CTXUNDO_DESERIALIZE,\n-    CBLOCKUNDO_DESERIALIZE,\n-    CCOINS_DESERIALIZE,\n-    CNETADDR_DESERIALIZE,\n-    CSERVICE_DESERIALIZE,\n-    CMESSAGEHEADER_DESERIALIZE,\n-    CADDRESS_DESERIALIZE,\n-    CINV_DESERIALIZE,\n-    CBLOOMFILTER_DESERIALIZE,\n-    CDISKBLOCKINDEX_DESERIALIZE,\n-    CTXOUTCOMPRESSOR_DESERIALIZE,\n-    BLOCKTRANSACTIONS_DESERIALIZE,\n-    BLOCKTRANSACTIONSREQUEST_DESERIALIZE,\n-    TEST_ID_END\n-};\n-\n-static bool read_stdin(std::vector<uint8_t>& data)\n-{\n-    uint8_t buffer[1024];\n-    ssize_t length = 0;\n-    while ((length = read(STDIN_FILENO, buffer, 1024)) > 0) {\n-        data.insert(data.end(), buffer, buffer + length);\n-\n-        if (data.size() > (1 << 20)) return false;\n-    }\n-    return length == 0;\n-}\n+#include <test/fuzz/fuzz.h>\n \n void test_one_input(std::vector<uint8_t> buffer)\n {\n-    if (buffer.size() < sizeof(uint32_t)) return;\n-\n-    uint32_t test_id = 0xffffffff;\n-    memcpy(&test_id, buffer.data(), sizeof(uint32_t));\n-    buffer.erase(buffer.begin(), buffer.begin() + sizeof(uint32_t));\n-\n-    if (test_id >= TEST_ID_END) return;\n-\n     CDataStream ds(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n     try {\n         int nVersion;\n@@ -85,249 +37,131 @@ void test_one_input(std::vector<uint8_t> buffer)\n         return;\n     }\n \n-    switch(test_id) {\n-        case CBLOCK_DESERIALIZE:\n-        {\n+#if BLOCK_DESERIALIZE\n             try\n             {\n                 CBlock block;\n                 ds >> block;\n             } catch (const std::ios_base::failure& e) {return;}\n-            break;\n-        }\n-        case CTRANSACTION_DESERIALIZE:\n-        {\n+#elif TRANSACTION_DESERIALIZE\n             try\n             {\n                 CTransaction tx(deserialize, ds);\n             } catch (const std::ios_base::failure& e) {return;}\n-            break;\n-        }\n-        case CBLOCKLOCATOR_DESERIALIZE:\n-        {\n+#elif BLOCKLOCATOR_DESERIALIZE\n             try\n             {\n                 CBlockLocator bl;\n                 ds >> bl;\n             } catch (const std::ios_base::failure& e) {return;}\n-            break;\n-        }\n-        case CBLOCKMERKLEROOT:\n-        {\n+#elif BLOCKMERKLEROOT\n             try\n             {\n                 CBlock block;\n                 ds >> block;\n                 bool mutated;\n                 BlockMerkleRoot(block, &mutated);\n             } catch (const std::ios_base::failure& e) {return;}\n-            break;\n-        }\n-        case CADDRMAN_DESERIALIZE:\n-        {\n+#elif ADDRMAN_DESERIALIZE\n             try\n             {\n                 CAddrMan am;\n                 ds >> am;\n             } catch (const std::ios_base::failure& e) {return;}\n-            break;\n-        }\n-        case CBLOCKHEADER_DESERIALIZE:\n-        {\n+#elif BLOCKHEADER_DESERIALIZE\n             try\n             {\n                 CBlockHeader bh;\n                 ds >> bh;\n             } catch (const std::ios_base::failure& e) {return;}\n-            break;\n-        }\n-        case CBANENTRY_DESERIALIZE:\n-        {\n+#elif BANENTRY_DESERIALIZE\n             try\n             {\n                 CBanEntry be;\n                 ds >> be;\n             } catch (const std::ios_base::failure& e) {return;}\n-            break;\n-        }\n-        case CTXUNDO_DESERIALIZE:\n-        {\n+#elif TXUNDO_DESERIALIZE\n             try\n             {\n                 CTxUndo tu;\n                 ds >> tu;\n             } catch (const std::ios_base::failure& e) {return;}\n-            break;\n-        }\n-        case CBLOCKUNDO_DESERIALIZE:\n-        {\n+#elif BLOCKUNDO_DESERIALIZE\n             try\n             {\n                 CBlockUndo bu;\n                 ds >> bu;\n             } catch (const std::ios_base::failure& e) {return;}\n-            break;\n-        }\n-        case CCOINS_DESERIALIZE:\n-        {\n+#elif COINS_DESERIALIZE\n             try\n             {\n                 Coin coin;\n                 ds >> coin;\n             } catch (const std::ios_base::failure& e) {return;}\n-            break;\n-        }\n-        case CNETADDR_DESERIALIZE:\n-        {\n+#elif NETADDR_DESERIALIZE\n             try\n             {\n                 CNetAddr na;\n                 ds >> na;\n             } catch (const std::ios_base::failure& e) {return;}\n-            break;\n-        }\n-        case CSERVICE_DESERIALIZE:\n-        {\n+#elif SERVICE_DESERIALIZE\n             try\n             {\n                 CService s;\n                 ds >> s;\n             } catch (const std::ios_base::failure& e) {return;}\n-            break;\n-        }\n-        case CMESSAGEHEADER_DESERIALIZE:\n-        {\n+#elif MESSAGEHEADER_DESERIALIZE\n             CMessageHeader::MessageStartChars pchMessageStart = {0x00, 0x00, 0x00, 0x00};\n             try\n             {\n                 CMessageHeader mh(pchMessageStart);\n                 ds >> mh;\n                 if (!mh.IsValid(pchMessageStart)) {return;}\n             } catch (const std::ios_base::failure& e) {return;}\n-            break;\n-        }\n-        case CADDRESS_DESERIALIZE:\n-        {\n+#elif ADDRESS_DESERIALIZE\n             try\n             {\n                 CAddress a;\n                 ds >> a;\n             } catch (const std::ios_base::failure& e) {return;}\n-            break;\n-        }\n-        case CINV_DESERIALIZE:\n-        {\n+#elif INV_DESERIALIZE\n             try\n             {\n                 CInv i;\n                 ds >> i;\n             } catch (const std::ios_base::failure& e) {return;}\n-            break;\n-        }\n-        case CBLOOMFILTER_DESERIALIZE:\n-        {\n+#elif BLOOMFILTER_DESERIALIZE\n             try\n             {\n                 CBloomFilter bf;\n                 ds >> bf;\n             } catch (const std::ios_base::failure& e) {return;}\n-            break;\n-        }\n-        case CDISKBLOCKINDEX_DESERIALIZE:\n-        {\n+#elif DISKBLOCKINDEX_DESERIALIZE\n             try\n             {\n                 CDiskBlockIndex dbi;\n                 ds >> dbi;\n             } catch (const std::ios_base::failure& e) {return;}\n-            break;\n-        }\n-        case CTXOUTCOMPRESSOR_DESERIALIZE:\n-        {\n+#elif TXOUTCOMPRESSOR_DESERIALIZE\n             CTxOut to;\n             CTxOutCompressor toc(to);\n             try\n             {\n                 ds >> toc;\n             } catch (const std::ios_base::failure& e) {return;}\n-\n-            break;\n-        }\n-        case BLOCKTRANSACTIONS_DESERIALIZE:\n-        {\n+#elif BLOCKTRANSACTIONS_DESERIALIZE\n             try\n             {\n                 BlockTransactions bt;\n                 ds >> bt;\n             } catch (const std::ios_base::failure& e) {return;}\n-\n-            break;\n-        }\n-        case BLOCKTRANSACTIONSREQUEST_DESERIALIZE:\n-        {\n+#elif BLOCKTRANSACTIONSREQUEST_DESERIALIZE\n             try\n             {\n                 BlockTransactionsRequest btr;\n                 ds >> btr;\n             } catch (const std::ios_base::failure& e) {return;}\n-\n-            break;\n-        }\n-        default:\n-            return;\n-    }\n-    return;\n-}\n-\n-void initialize()\n-{\n-    const static auto verify_handle = MakeUnique<ECCVerifyHandle>();\n-}\n-\n-// This function is used by libFuzzer\n-extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)\n-{\n-    test_one_input(std::vector<uint8_t>(data, data + size));\n-    return 0;\n-}\n-\n-// This function is used by libFuzzer\n-extern \"C\" int LLVMFuzzerInitialize(int* argc, char*** argv)\n-{\n-    initialize();\n-    return 0;\n-}\n-\n-// Disabled under WIN32 due to clash with Cygwin's WinMain.\n-#ifndef WIN32\n-// Declare main(...) \"weak\" to allow for libFuzzer linking. libFuzzer provides\n-// the main(...) function.\n-__attribute__((weak))\n-#endif\n-int main(int argc, char **argv)\n-{\n-    initialize();\n-#ifdef __AFL_INIT\n-    // Enable AFL deferred forkserver mode. Requires compilation using\n-    // afl-clang-fast++. See fuzzing.md for details.\n-    __AFL_INIT();\n-#endif\n-\n-#ifdef __AFL_LOOP\n-    // Enable AFL persistent mode. Requires compilation using afl-clang-fast++.\n-    // See fuzzing.md for details.\n-    while (__AFL_LOOP(1000)) {\n-        std::vector<uint8_t> buffer;\n-        if (!read_stdin(buffer)) {\n-            continue;\n-        }\n-        test_one_input(buffer);\n-    }\n #else\n-    std::vector<uint8_t> buffer;\n-    if (!read_stdin(buffer)) {\n-        return 0;\n-    }\n-    test_one_input(buffer);\n+#error Need at least one fuzz target to compile\n #endif\n }"
      }
    ]
  }
]