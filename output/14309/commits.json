[
  {
    "sha": "d341856cf0e78309a4a448edf3e9fd1aa2f9e989",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzQxODU2Y2YwZTc4MzA5YTRhNDQ4ZWRmM2U5ZmQxYWEyZjllOTg5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-24T16:44:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-26T13:07:31Z"
      },
      "message": "chainparams: Add type safe enum class ChainType",
      "tree": {
        "sha": "882955d6e329c1d7592fe9ad6c3af261aa137072",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/882955d6e329c1d7592fe9ad6c3af261aa137072"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d341856cf0e78309a4a448edf3e9fd1aa2f9e989",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d341856cf0e78309a4a448edf3e9fd1aa2f9e989",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d341856cf0e78309a4a448edf3e9fd1aa2f9e989",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d341856cf0e78309a4a448edf3e9fd1aa2f9e989/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4dac24db23d121ec21080f04e210227c4ff5d281",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dac24db23d121ec21080f04e210227c4ff5d281",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4dac24db23d121ec21080f04e210227c4ff5d281"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 81,
      "deletions": 3
    },
    "files": [
      {
        "sha": "dc300c1ae894696af20acfbf4a61adef746e6ef2",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d341856cf0e78309a4a448edf3e9fd1aa2f9e989/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d341856cf0e78309a4a448edf3e9fd1aa2f9e989/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=d341856cf0e78309a4a448edf3e9fd1aa2f9e989",
        "patch": "@@ -405,8 +405,28 @@ std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain)\n     throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n+std::unique_ptr<const CChainParams> CreateChainParams(const ChainType& chain)\n+{\n+    switch (chain) {\n+    case ChainType::MAIN:\n+        return MakeUnique<CMainParams>();\n+    case ChainType::TESTNET:\n+        return MakeUnique<CTestNetParams>();\n+    case ChainType::REGTEST:\n+        return MakeUnique<CRegTestParams>(gArgs);\n+        // no default case, so the compiler can warn about missing cases\n+    }\n+    assert(false);\n+}\n+\n void SelectParams(const std::string& network)\n {\n     SelectBaseParams(network);\n     globalChainParams = CreateChainParams(network);\n }\n+\n+void SelectParams(const ChainType& network)\n+{\n+    SelectBaseParams(network);\n+    globalChainParams = CreateChainParams(network);\n+}"
      },
      {
        "sha": "a4514e8f9e373658a4fa86fb4daaa9639f2aa18f",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d341856cf0e78309a4a448edf3e9fd1aa2f9e989/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d341856cf0e78309a4a448edf3e9fd1aa2f9e989/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=d341856cf0e78309a4a448edf3e9fd1aa2f9e989",
        "patch": "@@ -107,6 +107,7 @@ class CChainParams\n  * @throws a std::runtime_error if the chain is not supported.\n  */\n std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain);\n+std::unique_ptr<const CChainParams> CreateChainParams(const ChainType& chain);\n \n /**\n  * Return the currently selected parameters. This won't change after app\n@@ -119,5 +120,6 @@ const CChainParams &Params();\n  * @throws std::runtime_error when the chain is not supported.\n  */\n void SelectParams(const std::string& chain);\n+void SelectParams(const ChainType& chain);\n \n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "35b5ec51f2265be0588b04f7b3205b0c5aac379d",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 2,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d341856cf0e78309a4a448edf3e9fd1aa2f9e989/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d341856cf0e78309a4a448edf3e9fd1aa2f9e989/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=d341856cf0e78309a4a448edf3e9fd1aa2f9e989",
        "patch": "@@ -15,6 +15,20 @@ const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n \n+const std::string& FormatChainType(const ChainType& chain)\n+{\n+    switch (chain) {\n+    case ChainType::MAIN:\n+        return CBaseChainParams::MAIN;\n+    case ChainType::TESTNET:\n+        return CBaseChainParams::TESTNET;\n+    case ChainType::REGTEST:\n+        return CBaseChainParams::REGTEST;\n+        // no default case, so the compiler can warn about missing cases\n+    }\n+    assert(false);\n+}\n+\n void SetupChainParamsBaseOptions()\n {\n     gArgs.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n@@ -23,15 +37,15 @@ void SetupChainParamsBaseOptions()\n     gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::CHAINPARAMS);\n }\n \n-static std::unique_ptr<CBaseChainParams> globalChainBaseParams;\n+static std::unique_ptr<const CBaseChainParams> globalChainBaseParams;\n \n const CBaseChainParams& BaseParams()\n {\n     assert(globalChainBaseParams);\n     return *globalChainBaseParams;\n }\n \n-std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain)\n+std::unique_ptr<const CBaseChainParams> CreateBaseChainParams(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n         return MakeUnique<CBaseChainParams>(\"\", 8332);\n@@ -43,8 +57,28 @@ std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n+std::unique_ptr<const CBaseChainParams> CreateBaseChainParams(const ChainType& chain)\n+{\n+    switch (chain) {\n+    case ChainType::MAIN:\n+        return MakeUnique<CBaseChainParams>(\"\", 8332);\n+    case ChainType::TESTNET:\n+        return MakeUnique<CBaseChainParams>(\"testnet3\", 18332);\n+    case ChainType::REGTEST:\n+        return MakeUnique<CBaseChainParams>(\"regtest\", 18443);\n+        // no default case, so the compiler can warn about missing cases\n+    }\n+    assert(false);\n+}\n+\n void SelectBaseParams(const std::string& chain)\n {\n     globalChainBaseParams = CreateBaseChainParams(chain);\n     gArgs.SelectConfigNetwork(chain);\n }\n+\n+void SelectBaseParams(const ChainType& chain)\n+{\n+    globalChainBaseParams = CreateBaseChainParams(chain);\n+    gArgs.SelectConfigNetwork(chain);\n+}"
      },
      {
        "sha": "92befc6459b4eb0d12e5f97f0bc88ea6dc0dfe5c",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d341856cf0e78309a4a448edf3e9fd1aa2f9e989/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d341856cf0e78309a4a448edf3e9fd1aa2f9e989/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=d341856cf0e78309a4a448edf3e9fd1aa2f9e989",
        "patch": "@@ -32,12 +32,22 @@ class CBaseChainParams\n     std::string strDataDir;\n };\n \n+/** Enumeration of all chains (with potentially different consensus rules) we understand */\n+enum class ChainType {\n+    MAIN,\n+    TESTNET,\n+    REGTEST,\n+};\n+\n+const std::string& FormatChainType(const ChainType& chain);\n+\n /**\n  * Creates and returns a std::unique_ptr<CBaseChainParams> of the chosen chain.\n  * @returns a CBaseChainParams* of the chosen chain.\n  * @throws a std::runtime_error if the chain is not supported.\n  */\n-std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain);\n+std::unique_ptr<const CBaseChainParams> CreateBaseChainParams(const std::string& chain);\n+std::unique_ptr<const CBaseChainParams> CreateBaseChainParams(const ChainType& chain);\n \n /**\n  *Set the arguments for chainparams\n@@ -52,5 +62,6 @@ const CBaseChainParams& BaseParams();\n \n /** Sets the params returned by Params() to those for the given network. */\n void SelectBaseParams(const std::string& chain);\n+void SelectBaseParams(const ChainType& chain);\n \n #endif // BITCOIN_CHAINPARAMSBASE_H"
      },
      {
        "sha": "a211c6dbb38018ad059bd4dc493ed945de95abcf",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d341856cf0e78309a4a448edf3e9fd1aa2f9e989/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d341856cf0e78309a4a448edf3e9fd1aa2f9e989/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=d341856cf0e78309a4a448edf3e9fd1aa2f9e989",
        "patch": "@@ -56,6 +56,7 @@ class NodeImpl : public Node\n     bool softSetArg(const std::string& arg, const std::string& value) override { return gArgs.SoftSetArg(arg, value); }\n     bool softSetBoolArg(const std::string& arg, bool value) override { return gArgs.SoftSetBoolArg(arg, value); }\n     void selectParams(const std::string& network) override { SelectParams(network); }\n+    void selectParams(const ChainType& network) override { SelectParams(network); }\n     std::string getNetwork() override { return Params().NetworkIDString(); }\n     void initLogging() override { InitLogging(); }\n     void initParameterInteraction() override { InitParameterInteraction(); }"
      },
      {
        "sha": "16484732e19c5c9cb3478c87283d241ce316184a",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d341856cf0e78309a4a448edf3e9fd1aa2f9e989/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d341856cf0e78309a4a448edf3e9fd1aa2f9e989/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=d341856cf0e78309a4a448edf3e9fd1aa2f9e989",
        "patch": "@@ -51,6 +51,7 @@ class Node\n \n     //! Choose network parameters.\n     virtual void selectParams(const std::string& network) = 0;\n+    virtual void selectParams(const ChainType& network) = 0;\n \n     //! Get network name.\n     virtual std::string getNetwork() = 0;"
      },
      {
        "sha": "ed3774db766fff735c9d25ceaf223c905c5aa6c9",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d341856cf0e78309a4a448edf3e9fd1aa2f9e989/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d341856cf0e78309a4a448edf3e9fd1aa2f9e989/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=d341856cf0e78309a4a448edf3e9fd1aa2f9e989",
        "patch": "@@ -407,6 +407,12 @@ void ArgsManager::SelectConfigNetwork(const std::string& network)\n     m_network = network;\n }\n \n+void ArgsManager::SelectConfigNetwork(const ChainType& network)\n+{\n+    LOCK(cs_args);\n+    m_network = FormatChainType(network);\n+}\n+\n bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::string& error)\n {\n     LOCK(cs_args);"
      },
      {
        "sha": "6f58b2ff9e4706bee965d7790928989a7142f3a7",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d341856cf0e78309a4a448edf3e9fd1aa2f9e989/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d341856cf0e78309a4a448edf3e9fd1aa2f9e989/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=d341856cf0e78309a4a448edf3e9fd1aa2f9e989",
        "patch": "@@ -33,6 +33,8 @@\n \n #include <boost/thread/condition_variable.hpp> // for boost::thread_interrupted\n \n+enum class ChainType;\n+\n // Application startup time (used for uptime calculation)\n int64_t GetStartupTime();\n \n@@ -157,6 +159,7 @@ class ArgsManager\n      * Select the network in use\n      */\n     void SelectConfigNetwork(const std::string& network);\n+    void SelectConfigNetwork(const ChainType& network);\n \n     bool ParseParameters(int argc, const char* const argv[], std::string& error);\n     bool ReadConfigFiles(std::string& error, bool ignore_invalid_keys = false);"
      }
    ]
  },
  {
    "sha": "731037e6cd8b532b0935bd9d9992ddb6bd5969be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzEwMzdlNmNkOGI1MzJiMDkzNWJkOWQ5OTkyZGRiNmJkNTk2OWJl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-24T17:17:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-26T13:08:55Z"
      },
      "message": "scripted-diff: Use non-throwing type-safe ChainType where possible\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e 's/(Create(Base)?ChainParams)\\(C(Base)?ChainParams::/\\1(ChainType::/g' $(git grep -l --extended-regexp 'Create(Base)?ChainParams')\nsed -i --regexp-extended -e 's/((S|s)elect(Base)?Params)\\(C(Base)?ChainParams::/\\1(ChainType::/g' $(git grep -l --extended-regexp 'elect(Base)?Params')\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "1122b7def34088773c80751130b9ee75c5aa0886",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1122b7def34088773c80751130b9ee75c5aa0886"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/731037e6cd8b532b0935bd9d9992ddb6bd5969be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/731037e6cd8b532b0935bd9d9992ddb6bd5969be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/731037e6cd8b532b0935bd9d9992ddb6bd5969be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/731037e6cd8b532b0935bd9d9992ddb6bd5969be/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d341856cf0e78309a4a448edf3e9fd1aa2f9e989",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d341856cf0e78309a4a448edf3e9fd1aa2f9e989",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d341856cf0e78309a4a448edf3e9fd1aa2f9e989"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 31,
      "deletions": 31
    },
    "files": [
      {
        "sha": "595e9b2599b91be0a636f6e5d21eeda1a1f3bf9d",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=731037e6cd8b532b0935bd9d9992ddb6bd5969be",
        "patch": "@@ -65,7 +65,7 @@ static void AssembleBlock(benchmark::State& state)\n \n     // Switch to regtest so we can mine faster\n     // Also segwit is active, so we can include witness transactions\n-    SelectParams(CBaseChainParams::REGTEST);\n+    SelectParams(ChainType::REGTEST);\n \n     InitScriptExecutionCache();\n "
      },
      {
        "sha": "3a72d8f922a47ae1fdc89bc95f25e69f91889da6",
        "filename": "src/bench/checkblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=731037e6cd8b532b0935bd9d9992ddb6bd5969be",
        "patch": "@@ -41,7 +41,7 @@ static void DeserializeAndCheckBlockTest(benchmark::State& state)\n     char a = '\\0';\n     stream.write(&a, 1); // Prevent compaction\n \n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(ChainType::MAIN);\n \n     while (state.KeepRunning()) {\n         CBlock block; // Note that CBlock caches its checked state, so we need to recreate it here"
      },
      {
        "sha": "19ae267cfed4e371c63fd4a001576796a9729568",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=731037e6cd8b532b0935bd9d9992ddb6bd5969be",
        "patch": "@@ -33,9 +33,9 @@ static const int CONTINUE_EXECUTION=-1;\n \n static void SetupCliArgs()\n {\n-    const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n-    const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n-    const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n+    const auto defaultBaseParams = CreateBaseChainParams(ChainType::MAIN);\n+    const auto testnetBaseParams = CreateBaseChainParams(ChainType::TESTNET);\n+    const auto regtestBaseParams = CreateBaseChainParams(ChainType::REGTEST);\n \n     gArgs.AddArg(\"-?\", \"This help message\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-version\", \"Print version and exit\", false, OptionsCategory::OPTIONS);"
      },
      {
        "sha": "b79e5b137a2f6c707c3fc18f5cdf02e1f5198c84",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=731037e6cd8b532b0935bd9d9992ddb6bd5969be",
        "patch": "@@ -314,12 +314,12 @@ static void OnRPCStopped()\n \n void SetupServerArgs()\n {\n-    const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n-    const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n-    const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n-    const auto defaultChainParams = CreateChainParams(CBaseChainParams::MAIN);\n-    const auto testnetChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n-    const auto regtestChainParams = CreateChainParams(CBaseChainParams::REGTEST);\n+    const auto defaultBaseParams = CreateBaseChainParams(ChainType::MAIN);\n+    const auto testnetBaseParams = CreateBaseChainParams(ChainType::TESTNET);\n+    const auto regtestBaseParams = CreateBaseChainParams(ChainType::REGTEST);\n+    const auto defaultChainParams = CreateChainParams(ChainType::MAIN);\n+    const auto testnetChainParams = CreateChainParams(ChainType::TESTNET);\n+    const auto regtestChainParams = CreateChainParams(ChainType::REGTEST);\n \n     // Hidden Options\n     std::vector<std::string> hidden_args = {\"-h\", \"-help\","
      },
      {
        "sha": "d2749ff6304716c777466ccdc88aed3e8f299347",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=731037e6cd8b532b0935bd9d9992ddb6bd5969be",
        "patch": "@@ -209,14 +209,14 @@ void PaymentServer::ipcParseCommandLine(interfaces::Node& node, int argc, char*\n             SendCoinsRecipient r;\n             if (GUIUtil::parseBitcoinURI(arg, &r) && !r.address.isEmpty())\n             {\n-                auto tempChainParams = CreateChainParams(CBaseChainParams::MAIN);\n+                auto tempChainParams = CreateChainParams(ChainType::MAIN);\n \n                 if (IsValidDestinationString(r.address.toStdString(), *tempChainParams)) {\n-                    node.selectParams(CBaseChainParams::MAIN);\n+                    node.selectParams(ChainType::MAIN);\n                 } else {\n-                    tempChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n+                    tempChainParams = CreateChainParams(ChainType::TESTNET);\n                     if (IsValidDestinationString(r.address.toStdString(), *tempChainParams)) {\n-                        node.selectParams(CBaseChainParams::TESTNET);\n+                        node.selectParams(ChainType::TESTNET);\n                     }\n                 }\n             }\n@@ -230,11 +230,11 @@ void PaymentServer::ipcParseCommandLine(interfaces::Node& node, int argc, char*\n             {\n                 if (request.getDetails().network() == \"main\")\n                 {\n-                    node.selectParams(CBaseChainParams::MAIN);\n+                    node.selectParams(ChainType::MAIN);\n                 }\n                 else if (request.getDetails().network() == \"test\")\n                 {\n-                    node.selectParams(CBaseChainParams::TESTNET);\n+                    node.selectParams(ChainType::TESTNET);\n                 }\n             }\n         }"
      },
      {
        "sha": "c39854f90c4cdc365ab0f06a4b94a5cb6c02e4a5",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=731037e6cd8b532b0935bd9d9992ddb6bd5969be",
        "patch": "@@ -66,7 +66,7 @@ static SendCoinsRecipient handleRequest(PaymentServer* server, std::vector<unsig\n \n void PaymentServerTests::paymentServerTests()\n {\n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(ChainType::MAIN);\n     auto node = interfaces::MakeNode();\n     OptionsModel optionsModel(*node);\n     PaymentServer* server = new PaymentServer(nullptr, false);"
      },
      {
        "sha": "045de74d56d532edf16a07542a1f807ca95cc9bc",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=731037e6cd8b532b0935bd9d9992ddb6bd5969be",
        "patch": "@@ -45,7 +45,7 @@ int main(int argc, char *argv[])\n {\n     SetupEnvironment();\n     SetupNetworking();\n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(ChainType::MAIN);\n     noui_connect();\n     ClearDatadirCache();\n     fs::path pathTemp = fs::temp_directory_path() / strprintf(\"test_bitcoin-qt_%lu_%i\", (unsigned long)GetTime(), (int)GetRand(100000));"
      },
      {
        "sha": "f005a4c1bb6ed72e2db1bc6e3eecd87f93fe3515",
        "filename": "src/test/key_io_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/test/key_io_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/test/key_io_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_io_tests.cpp?ref=731037e6cd8b532b0935bd9d9992ddb6bd5969be",
        "patch": "@@ -25,7 +25,7 @@ BOOST_AUTO_TEST_CASE(key_io_valid_parse)\n     UniValue tests = read_json(std::string(json_tests::key_io_valid, json_tests::key_io_valid + sizeof(json_tests::key_io_valid)));\n     CKey privkey;\n     CTxDestination destination;\n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(ChainType::MAIN);\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n@@ -114,7 +114,7 @@ BOOST_AUTO_TEST_CASE(key_io_valid_gen)\n         }\n     }\n \n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(ChainType::MAIN);\n }\n \n "
      },
      {
        "sha": "f7644b5ed046bec2176fcd3845406078f1383695",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=731037e6cd8b532b0935bd9d9992ddb6bd5969be",
        "patch": "@@ -39,15 +39,15 @@ static void TestBlockSubsidyHalvings(int nSubsidyHalvingInterval)\n \n BOOST_AUTO_TEST_CASE(block_subsidy_test)\n {\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(ChainType::MAIN);\n     TestBlockSubsidyHalvings(chainParams->GetConsensus()); // As in main\n     TestBlockSubsidyHalvings(150); // As in regtest\n     TestBlockSubsidyHalvings(1000); // Just another interval\n }\n \n BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n {\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(ChainType::MAIN);\n     CAmount nSum = 0;\n     for (int nHeight = 0; nHeight < 14000000; nHeight += 1000) {\n         CAmount nSubsidy = GetBlockSubsidy(nHeight, chainParams->GetConsensus());"
      },
      {
        "sha": "d6ef377bb8ae0d53ed9ac0eb62c90025fc478b84",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=731037e6cd8b532b0935bd9d9992ddb6bd5969be",
        "patch": "@@ -205,7 +205,7 @@ static void TestPackageSelection(const CChainParams& chainparams, const CScript&\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n     // Note that by default, these tests run with size accounting enabled.\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(ChainType::MAIN);\n     const CChainParams& chainparams = *chainParams;\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     std::unique_ptr<CBlockTemplate> pblocktemplate;"
      },
      {
        "sha": "432617f69dda1ce595328617389300c710001d3a",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=731037e6cd8b532b0935bd9d9992ddb6bd5969be",
        "patch": "@@ -16,7 +16,7 @@ BOOST_FIXTURE_TEST_SUITE(pow_tests, BasicTestingSetup)\n /* Test calculation of next difficulty target with no constraints applying */\n BOOST_AUTO_TEST_CASE(get_next_work)\n {\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(ChainType::MAIN);\n     int64_t nLastRetargetTime = 1261130161; // Block #30240\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 32255;\n@@ -28,7 +28,7 @@ BOOST_AUTO_TEST_CASE(get_next_work)\n /* Test the constraint on the upper bound for next work */\n BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n {\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(ChainType::MAIN);\n     int64_t nLastRetargetTime = 1231006505; // Block #0\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 2015;\n@@ -40,7 +40,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n /* Test the constraint on the lower bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n {\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(ChainType::MAIN);\n     int64_t nLastRetargetTime = 1279008237; // Block #66528\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 68543;\n@@ -52,7 +52,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n /* Test the constraint on the upper bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n {\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(ChainType::MAIN);\n     int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 46367;\n@@ -63,7 +63,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n \n BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)\n {\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(ChainType::MAIN);\n     std::vector<CBlockIndex> blocks(10000);\n     for (int i = 0; i < 10000; i++) {\n         blocks[i].pprev = i ? &blocks[i - 1] : nullptr;"
      },
      {
        "sha": "43d1fd2ea6cb8e0a48a47d01aa8c81eb07154703",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/731037e6cd8b532b0935bd9d9992ddb6bd5969be/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=731037e6cd8b532b0935bd9d9992ddb6bd5969be",
        "patch": "@@ -223,7 +223,7 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n     }\n \n     // Sanity checks of version bit deployments\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(ChainType::MAIN);\n     const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n     for (int i=0; i<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n         uint32_t bitmask = VersionBitsMask(mainnetParams, static_cast<Consensus::DeploymentPos>(i));\n@@ -250,7 +250,7 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n {\n     // Check that ComputeBlockVersion will set the appropriate bit correctly\n     // on mainnet.\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(ChainType::MAIN);\n     const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n \n     // Use the TESTDUMMY deployment for testing purposes."
      }
    ]
  },
  {
    "sha": "fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWI0ZjhhMTk2NWE1Y2YxNTA5ZGQyYjJlZWMyMTRmN2Y0YmFhYTVm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-26T02:39:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-26T13:10:41Z"
      },
      "message": "Use non-throwing chain selection calls where possible",
      "tree": {
        "sha": "29781e90c260e21e3c059b054df711ed23890c3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29781e90c260e21e3c059b054df711ed23890c3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbq4VRAAoJEM4rdWl+aaVIfKkMAJ9aaq+bW3FTOj/WUFPaY1RV\nnLYI1F+fhu8yqEXvFITX5Vdj1RZSs2EbU4+TrKKbbNAHz4k9CBplAPyqKzjMscoO\nav4xEEyqkC8yvKTsnRbF9rdMQBuu2IO/k2gNCx560KFWZIySxKrUGmqJWt9YDydb\nsRc/KxW62Q2a5YlRJOFla12CrSIfn9ekTCBpkmhF+2nblduC4sXHYvRO3ltTsPcP\ncOwyB8oKDqL2eNDKNomCP2YhCbxDZpOxONwRaxGgCkzJK+8DAusAWtrqxpfaPAZJ\nt3cdCfappE95EC1RiIqtzGZtBXZteAu+P13O8Ge/x9fI5PGDdVsE8lEiRLxPpwnl\nc+dUV95u0Gz6XSOxxCQuCPicRGWZcJv8wnmFwFJRQM50UK0/7Sh6S3D5VMXSHVNV\nY8sg54yIh3Y3CveYVSy7pa0qF7eCrMbntbd0f1lEJTD0OplUn8SbJ2Qjb0+ePJme\nGg7fSmYfi5f/VWv+3ACCeQ6GAxYf2R4BxwkQTlEWPA==\n=bhiZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 29781e90c260e21e3c059b054df711ed23890c3a\nparent 731037e6cd8b532b0935bd9d9992ddb6bd5969be\nauthor MarcoFalke <falke.marco@gmail.com> 1537929593 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1537967441 -0400\n\nUse non-throwing chain selection calls where possible\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "731037e6cd8b532b0935bd9d9992ddb6bd5969be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/731037e6cd8b532b0935bd9d9992ddb6bd5969be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/731037e6cd8b532b0935bd9d9992ddb6bd5969be"
      }
    ],
    "stats": {
      "total": 233,
      "additions": 116,
      "deletions": 117
    },
    "files": [
      {
        "sha": "9dac5a1f5c3dd3553c050ebd3777a5d12c1ea8f7",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -133,12 +133,12 @@ static int AppInitRPC(int argc, char* argv[])\n         return EXIT_FAILURE;\n     }\n     // Check for -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n-    try {\n-        SelectBaseParams(gArgs.GetChainName());\n-    } catch (const std::exception& e) {\n-        fprintf(stderr, \"Error: %s\\n\", e.what());\n+    const auto chain = gArgs.GetChainType(error);\n+    if (!chain) {\n+        fprintf(stderr, \"Error: %s\\n\", error.c_str());\n         return EXIT_FAILURE;\n     }\n+    SelectBaseParams(*chain);\n     return CONTINUE_EXECUTION;\n }\n "
      },
      {
        "sha": "2313d8b7dad550392316a0c9a00871521a508968",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -89,12 +89,12 @@ static int AppInitRawTx(int argc, char* argv[])\n     }\n \n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n-    try {\n-        SelectParams(gArgs.GetChainName());\n-    } catch (const std::exception& e) {\n-        fprintf(stderr, \"Error: %s\\n\", e.what());\n+    const auto chain = gArgs.GetChainType(error);\n+    if (!chain) {\n+        fprintf(stderr, \"Error: %s\\n\", error.c_str());\n         return EXIT_FAILURE;\n     }\n+    SelectParams(*chain);\n \n     fCreateBlank = gArgs.GetBoolArg(\"-create\", false);\n "
      },
      {
        "sha": "42f25d53cfe490b54319b0a89d9785a628996836",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -101,12 +101,12 @@ static bool AppInit(int argc, char* argv[])\n             return false;\n         }\n         // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n-        try {\n-            SelectParams(gArgs.GetChainName());\n-        } catch (const std::exception& e) {\n-            fprintf(stderr, \"Error: %s\\n\", e.what());\n+        const auto chain = gArgs.GetChainType(error);\n+        if (!chain) {\n+            fprintf(stderr, \"Error: %s\\n\", error.c_str());\n             return false;\n         }\n+        SelectParams(*chain);\n \n         // Error out when loose non-argument tokens are encountered on command line\n         for (int i = 1; i < argc; i++) {"
      },
      {
        "sha": "9069b0556a08e454c05c250dccccf1ef05998aec",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -394,17 +394,6 @@ const CChainParams &Params() {\n     return *globalChainParams;\n }\n \n-std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain)\n-{\n-    if (chain == CBaseChainParams::MAIN)\n-        return std::unique_ptr<CChainParams>(new CMainParams());\n-    else if (chain == CBaseChainParams::TESTNET)\n-        return std::unique_ptr<CChainParams>(new CTestNetParams());\n-    else if (chain == CBaseChainParams::REGTEST)\n-        return std::unique_ptr<CChainParams>(new CRegTestParams(gArgs));\n-    throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n-}\n-\n std::unique_ptr<const CChainParams> CreateChainParams(const ChainType& chain)\n {\n     switch (chain) {\n@@ -419,12 +408,6 @@ std::unique_ptr<const CChainParams> CreateChainParams(const ChainType& chain)\n     assert(false);\n }\n \n-void SelectParams(const std::string& network)\n-{\n-    SelectBaseParams(network);\n-    globalChainParams = CreateChainParams(network);\n-}\n-\n void SelectParams(const ChainType& network)\n {\n     SelectBaseParams(network);"
      },
      {
        "sha": "8ea4cbb40d72a75dba786295291207647f5d6c20",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -104,9 +104,7 @@ class CChainParams\n /**\n  * Creates and returns a std::unique_ptr<CChainParams> of the chosen chain.\n  * @returns a CChainParams* of the chosen chain.\n- * @throws a std::runtime_error if the chain is not supported.\n  */\n-std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain);\n std::unique_ptr<const CChainParams> CreateChainParams(const ChainType& chain);\n \n /**\n@@ -117,9 +115,7 @@ const CChainParams &Params();\n \n /**\n  * Sets the params returned by Params() to those for the given BIP70 chain name.\n- * @throws std::runtime_error when the chain is not supported.\n  */\n-void SelectParams(const std::string& chain);\n void SelectParams(const ChainType& chain);\n \n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "3d292bbda5f86fd7bff484982cb31eecaf529f65",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 18,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -15,6 +15,23 @@ const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n \n+bool ParseChainType(const std::string& str, ChainType& chain)\n+{\n+    if (str == CBaseChainParams::MAIN) {\n+        chain = ChainType::MAIN;\n+        return true;\n+    }\n+    if (str == CBaseChainParams::TESTNET) {\n+        chain = ChainType::TESTNET;\n+        return true;\n+    }\n+    if (str == CBaseChainParams::REGTEST) {\n+        chain = ChainType::REGTEST;\n+        return true;\n+    }\n+    return false;\n+}\n+\n const std::string& FormatChainType(const ChainType& chain)\n {\n     switch (chain) {\n@@ -45,18 +62,6 @@ const CBaseChainParams& BaseParams()\n     return *globalChainBaseParams;\n }\n \n-std::unique_ptr<const CBaseChainParams> CreateBaseChainParams(const std::string& chain)\n-{\n-    if (chain == CBaseChainParams::MAIN)\n-        return MakeUnique<CBaseChainParams>(\"\", 8332);\n-    else if (chain == CBaseChainParams::TESTNET)\n-        return MakeUnique<CBaseChainParams>(\"testnet3\", 18332);\n-    else if (chain == CBaseChainParams::REGTEST)\n-        return MakeUnique<CBaseChainParams>(\"regtest\", 18443);\n-    else\n-        throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n-}\n-\n std::unique_ptr<const CBaseChainParams> CreateBaseChainParams(const ChainType& chain)\n {\n     switch (chain) {\n@@ -71,12 +76,6 @@ std::unique_ptr<const CBaseChainParams> CreateBaseChainParams(const ChainType& c\n     assert(false);\n }\n \n-void SelectBaseParams(const std::string& chain)\n-{\n-    globalChainBaseParams = CreateBaseChainParams(chain);\n-    gArgs.SelectConfigNetwork(chain);\n-}\n-\n void SelectBaseParams(const ChainType& chain)\n {\n     globalChainBaseParams = CreateBaseChainParams(chain);"
      },
      {
        "sha": "7e958b61fb4c3e1d582a273d6512bbfa2e7a3491",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -39,14 +39,13 @@ enum class ChainType {\n     REGTEST,\n };\n \n+bool ParseChainType(const std::string& str, ChainType& chain);\n const std::string& FormatChainType(const ChainType& chain);\n \n /**\n  * Creates and returns a std::unique_ptr<CBaseChainParams> of the chosen chain.\n  * @returns a CBaseChainParams* of the chosen chain.\n- * @throws a std::runtime_error if the chain is not supported.\n  */\n-std::unique_ptr<const CBaseChainParams> CreateBaseChainParams(const std::string& chain);\n std::unique_ptr<const CBaseChainParams> CreateBaseChainParams(const ChainType& chain);\n \n /**\n@@ -61,7 +60,6 @@ void SetupChainParamsBaseOptions();\n const CBaseChainParams& BaseParams();\n \n /** Sets the params returned by Params() to those for the given network. */\n-void SelectBaseParams(const std::string& chain);\n void SelectBaseParams(const ChainType& chain);\n \n #endif // BITCOIN_CHAINPARAMSBASE_H"
      },
      {
        "sha": "e35c420f569b9e6c63ab6882ef5b9584a0f4f4a4",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -55,7 +55,6 @@ class NodeImpl : public Node\n     bool readConfigFiles(std::string& error) override { return gArgs.ReadConfigFiles(error, true); }\n     bool softSetArg(const std::string& arg, const std::string& value) override { return gArgs.SoftSetArg(arg, value); }\n     bool softSetBoolArg(const std::string& arg, bool value) override { return gArgs.SoftSetBoolArg(arg, value); }\n-    void selectParams(const std::string& network) override { SelectParams(network); }\n     void selectParams(const ChainType& network) override { SelectParams(network); }\n     std::string getNetwork() override { return Params().NetworkIDString(); }\n     void initLogging() override { InitLogging(); }"
      },
      {
        "sha": "2fca1c680d0c68b4566e3acaa43bc48d27a754de",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -50,7 +50,6 @@ class Node\n     virtual bool readConfigFiles(std::string& error) = 0;\n \n     //! Choose network parameters.\n-    virtual void selectParams(const std::string& network) = 0;\n     virtual void selectParams(const ChainType& network) = 0;\n \n     //! Get network name."
      },
      {
        "sha": "031448be432cac9108495a86438e4ccc0a1a9d0d",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -651,12 +651,13 @@ int main(int argc, char *argv[])\n     // - Needs to be done before createOptionsModel\n \n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n-    try {\n-        node->selectParams(gArgs.GetChainName());\n-    } catch(std::exception &e) {\n-        QMessageBox::critical(0, QObject::tr(PACKAGE_NAME), QObject::tr(\"Error: %1\").arg(e.what()));\n+    const auto chain = gArgs.GetChainType(error);\n+    if (!chain) {\n+        fprintf(stderr, \"Error: %s\\n\", error.c_str());\n+        QMessageBox::critical(0, QObject::tr(PACKAGE_NAME), QObject::tr(\"Error: %1\").arg(QString::fromStdString(error)));\n         return EXIT_FAILURE;\n     }\n+    node->selectParams(*chain);\n #ifdef ENABLE_WALLET\n     // Parse URIs on command line -- this can affect Params()\n     PaymentServer::ipcParseCommandLine(*node, argc, argv);"
      },
      {
        "sha": "356a9688dd17f09ef90f307107844b904a1fab5b",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 10,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -522,12 +522,14 @@ TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* t\n #ifdef WIN32\n fs::path static StartupShortcutPath()\n {\n-    std::string chain = gArgs.GetChainName();\n-    if (chain == CBaseChainParams::MAIN)\n+    std::string error;\n+    const auto chain = gArgs.GetChainName(error);\n+    if (!chain) throw std::runtime_error(error);\n+    if (*chain == CBaseChainParams::MAIN)\n         return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin.lnk\";\n-    if (chain == CBaseChainParams::TESTNET) // Remove this special case when CBaseChainParams::TESTNET = \"testnet4\"\n+    if (*chain == CBaseChainParams::TESTNET) // Remove this special case when CBaseChainParams::TESTNET = \"testnet4\"\n         return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin (testnet).lnk\";\n-    return GetSpecialFolderPath(CSIDL_STARTUP) / strprintf(\"Bitcoin (%s).lnk\", chain);\n+    return GetSpecialFolderPath(CSIDL_STARTUP) / strprintf(\"Bitcoin (%s).lnk\", *chain);\n }\n \n bool GetStartOnSystemStartup()\n@@ -605,10 +607,12 @@ fs::path static GetAutostartDir()\n \n fs::path static GetAutostartFilePath()\n {\n-    std::string chain = gArgs.GetChainName();\n-    if (chain == CBaseChainParams::MAIN)\n+    std::string error;\n+    const auto chain = gArgs.GetChainName(error);\n+    if (!chain) throw std::runtime_error(error);\n+    if (*chain == CBaseChainParams::MAIN)\n         return GetAutostartDir() / \"bitcoin.desktop\";\n-    return GetAutostartDir() / strprintf(\"bitcoin-%s.lnk\", chain);\n+    return GetAutostartDir() / strprintf(\"bitcoin-%s.lnk\", *chain);\n }\n \n bool GetStartOnSystemStartup()\n@@ -647,14 +651,16 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n         fs::ofstream optionFile(GetAutostartFilePath(), std::ios_base::out|std::ios_base::trunc);\n         if (!optionFile.good())\n             return false;\n-        std::string chain = gArgs.GetChainName();\n+        std::string error;\n+        const auto chain = gArgs.GetChainName(error);\n+        if (!chain) throw std::runtime_error(error);\n         // Write a bitcoin.desktop file to the autostart directory:\n         optionFile << \"[Desktop Entry]\\n\";\n         optionFile << \"Type=Application\\n\";\n-        if (chain == CBaseChainParams::MAIN)\n+        if (*chain == CBaseChainParams::MAIN)\n             optionFile << \"Name=Bitcoin\\n\";\n         else\n-            optionFile << strprintf(\"Name=Bitcoin (%s)\\n\", chain);\n+            optionFile << strprintf(\"Name=Bitcoin (%s)\\n\", *chain);\n         optionFile << \"Exec=\" << pszExePath << strprintf(\" -min -testnet=%d -regtest=%d\\n\", gArgs.GetBoolArg(\"-testnet\", false), gArgs.GetBoolArg(\"-regtest\", false));\n         optionFile << \"Terminal=false\\n\";\n         optionFile << \"Hidden=false\\n\";"
      },
      {
        "sha": "ef45a2ffb820a1a958af50d800baa878b1f21c94",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -15,7 +15,7 @@\n std::vector<std::pair<uint256, CTransactionRef>> extra_txn;\n \n struct RegtestingSetup : public TestingSetup {\n-    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+    RegtestingSetup() : TestingSetup(ChainType::REGTEST) {}\n };\n \n BOOST_FIXTURE_TEST_SUITE(blockencodings_tests, RegtestingSetup)"
      },
      {
        "sha": "4b5a2b6617e78141da2b956483efe2e7268a8496",
        "filename": "src/test/key_io_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/test/key_io_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/test/key_io_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_io_tests.cpp?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -36,9 +36,11 @@ BOOST_AUTO_TEST_CASE(key_io_valid_parse)\n         }\n         std::string exp_base58string = test[0].get_str();\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n-        const UniValue &metadata = test[2].get_obj();\n+        const UniValue& metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        SelectParams(find_value(metadata, \"chain\").get_str());\n+        ChainType chain;\n+        BOOST_CHECK(ParseChainType(find_value(metadata, \"chain\").get_str(), chain));\n+        SelectParams(chain);\n         bool try_case_flip = find_value(metadata, \"tryCaseFlip\").isNull() ? false : find_value(metadata, \"tryCaseFlip\").get_bool();\n         if (isPrivkey) {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n@@ -95,9 +97,11 @@ BOOST_AUTO_TEST_CASE(key_io_valid_gen)\n         }\n         std::string exp_base58string = test[0].get_str();\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n-        const UniValue &metadata = test[2].get_obj();\n+        const UniValue& metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        SelectParams(find_value(metadata, \"chain\").get_str());\n+        ChainType chain;\n+        BOOST_CHECK(ParseChainType(find_value(metadata, \"chain\").get_str(), chain));\n+        SelectParams(chain);\n         if (isPrivkey) {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n             CKey key;\n@@ -136,7 +140,7 @@ BOOST_AUTO_TEST_CASE(key_io_invalid)\n         std::string exp_base58string = test[0].get_str();\n \n         // must be invalid as public and as private key\n-        for (const auto& chain : { CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::REGTEST }) {\n+        for (const auto& chain : {ChainType::MAIN, ChainType::TESTNET, ChainType::REGTEST}) {\n             SelectParams(chain);\n             destination = DecodeDestination(exp_base58string);\n             BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey in mainnet:\" + strTest);"
      },
      {
        "sha": "4f75fdf4ec45a40682faa12ac799034577c1bb34",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -48,7 +48,7 @@ std::ostream& operator<<(std::ostream& os, const uint256& num)\n     return os;\n }\n \n-BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n+BasicTestingSetup::BasicTestingSetup(const ChainType& chain)\n     : m_path_root(fs::temp_directory_path() / \"test_bitcoin\" / strprintf(\"%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(1 << 30))))\n {\n     SHA256AutoDetect();\n@@ -62,7 +62,7 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n     // CreateAndProcessBlock() does not support building SegWit blocks, so don't activate in these tests.\n     // TODO: fix the code to support SegWit blocks.\n     gArgs.ForceSetArg(\"-vbparams\", strprintf(\"segwit:0:%d\", (int64_t)Consensus::BIP9Deployment::NO_TIMEOUT));\n-    SelectParams(chainName);\n+    SelectParams(chain);\n     noui_connect();\n }\n \n@@ -80,7 +80,7 @@ fs::path BasicTestingSetup::SetDataDir(const std::string& name)\n     return ret;\n }\n \n-TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)\n+TestingSetup::TestingSetup(const ChainType& chain) : BasicTestingSetup(chain)\n {\n     SetDataDir(\"tempdir\");\n     const CChainParams& chainparams = Params();\n@@ -130,7 +130,7 @@ TestingSetup::~TestingSetup()\n         pblocktree.reset();\n }\n \n-TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)\n+TestChain100Setup::TestChain100Setup() : TestingSetup(ChainType::REGTEST)\n {\n     // Generate a 100-block chain:\n     coinbaseKey.MakeNewKey(true);"
      },
      {
        "sha": "441867b313efe3e905d4186e47f204fb0a88b0f8",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -43,7 +43,7 @@ static inline bool InsecureRandBool() { return insecure_rand_ctx.randbool(); }\n struct BasicTestingSetup {\n     ECCVerifyHandle globalVerifyHandle;\n \n-    explicit BasicTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n+    explicit BasicTestingSetup(const ChainType& chain = ChainType::MAIN);\n     ~BasicTestingSetup();\n \n     fs::path SetDataDir(const std::string& name);\n@@ -69,7 +69,7 @@ struct TestingSetup: public BasicTestingSetup {\n     CScheduler scheduler;\n     std::unique_ptr<PeerLogicValidation> peerLogic;\n \n-    explicit TestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n+    explicit TestingSetup(const ChainType& chain = ChainType::MAIN);\n     ~TestingSetup();\n };\n "
      },
      {
        "sha": "be2df634673eb16a5d921dd01644a8fb571d7f07",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -558,63 +558,63 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n     std::string error;\n \n     test_args.ParseParameters(0, (char**)argv_testnet, error);\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"main\");\n+    BOOST_CHECK_EQUAL(*test_args.GetChainName(error), \"main\");\n \n     test_args.ParseParameters(2, (char**)argv_testnet, error);\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    BOOST_CHECK_EQUAL(*test_args.GetChainName(error), \"test\");\n \n     test_args.ParseParameters(2, (char**)argv_regtest, error);\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"regtest\");\n+    BOOST_CHECK_EQUAL(*test_args.GetChainName(error), \"regtest\");\n \n     test_args.ParseParameters(3, (char**)argv_test_no_reg, error);\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    BOOST_CHECK_EQUAL(*test_args.GetChainName(error), \"test\");\n \n     test_args.ParseParameters(3, (char**)argv_both, error);\n-    BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n+    BOOST_CHECK(!test_args.GetChainName(error));\n \n     test_args.ParseParameters(0, (char**)argv_testnet, error);\n     test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    BOOST_CHECK_EQUAL(*test_args.GetChainName(error), \"test\");\n \n     test_args.ParseParameters(2, (char**)argv_testnet, error);\n     test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    BOOST_CHECK_EQUAL(*test_args.GetChainName(error), \"test\");\n \n     test_args.ParseParameters(2, (char**)argv_regtest, error);\n     test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n+    BOOST_CHECK(!test_args.GetChainName(error));\n \n     test_args.ParseParameters(3, (char**)argv_test_no_reg, error);\n     test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    BOOST_CHECK_EQUAL(*test_args.GetChainName(error), \"test\");\n \n     test_args.ParseParameters(3, (char**)argv_both, error);\n     test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n+    BOOST_CHECK(!test_args.GetChainName(error));\n \n     // check setting the network to test (and thus making\n     // [test] regtest=1 potentially relevant) doesn't break things\n     test_args.SelectConfigNetwork(\"test\");\n \n     test_args.ParseParameters(0, (char**)argv_testnet, error);\n     test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    BOOST_CHECK_EQUAL(*test_args.GetChainName(error), \"test\");\n \n     test_args.ParseParameters(2, (char**)argv_testnet, error);\n     test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    BOOST_CHECK_EQUAL(*test_args.GetChainName(error), \"test\");\n \n     test_args.ParseParameters(2, (char**)argv_regtest, error);\n     test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n+    BOOST_CHECK(!test_args.GetChainName(error));\n \n     test_args.ParseParameters(2, (char**)argv_test_no_reg, error);\n     test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    BOOST_CHECK_EQUAL(*test_args.GetChainName(error), \"test\");\n \n     test_args.ParseParameters(3, (char**)argv_both, error);\n     test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n+    BOOST_CHECK(!test_args.GetChainName(error));\n }\n \n BOOST_AUTO_TEST_CASE(util_FormatMoney)"
      },
      {
        "sha": "202e55efc10497e663c2cd55e7a68d361b207aa3",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -15,7 +15,7 @@\n #include <validationinterface.h>\n \n struct RegtestingSetup : public TestingSetup {\n-    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+    RegtestingSetup() : TestingSetup(ChainType::REGTEST) {}\n };\n \n BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)"
      },
      {
        "sha": "5d1009a728e64cfec4d010e466a8df56223b2a55",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 13,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -912,12 +912,13 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n             emptyIncludeConf = m_override_args.count(\"-includeconf\") == 0;\n         }\n         if (emptyIncludeConf) {\n-            std::string chain_id = GetChainName();\n+            const auto chain_id = GetChainName(error);\n+            if (!chain_id) return false;\n             std::vector<std::string> includeconf(GetArgs(\"-includeconf\"));\n             {\n                 // We haven't set m_network yet (that happens in SelectParams()), so manually check\n                 // for network.includeconf args.\n-                std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + chain_id + \".includeconf\"));\n+                std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + *chain_id + \".includeconf\"));\n                 includeconf.insert(includeconf.end(), includeconf_net.begin(), includeconf_net.end());\n             }\n \n@@ -926,7 +927,7 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n             {\n                 LOCK(cs_args);\n                 m_config_args.erase(\"-includeconf\");\n-                m_config_args.erase(std::string(\"-\") + chain_id + \".includeconf\");\n+                m_config_args.erase(std::string(\"-\") + *chain_id + \".includeconf\");\n             }\n \n             for (const std::string& to_include : includeconf) {\n@@ -945,12 +946,13 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n             // Warn about recursive -includeconf\n             includeconf = GetArgs(\"-includeconf\");\n             {\n-                std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + chain_id + \".includeconf\"));\n+                std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + *chain_id + \".includeconf\"));\n                 includeconf.insert(includeconf.end(), includeconf_net.begin(), includeconf_net.end());\n-                std::string chain_id_final = GetChainName();\n-                if (chain_id_final != chain_id) {\n+                const auto chain_id_final = GetChainName(error);\n+                if (!chain_id_final) return false;\n+                if (*chain_id_final != *chain_id) {\n                     // Also warn about recursive includeconf for the chain that was specified in one of the includeconfs\n-                    includeconf_net = GetArgs(std::string(\"-\") + chain_id_final + \".includeconf\");\n+                    includeconf_net = GetArgs(std::string(\"-\") + *chain_id_final + \".includeconf\");\n                     includeconf.insert(includeconf.end(), includeconf_net.begin(), includeconf_net.end());\n                 }\n             }\n@@ -969,19 +971,28 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n     return true;\n }\n \n-std::string ArgsManager::GetChainName() const\n+boost::optional<std::string> ArgsManager::GetChainName(std::string& error) const\n+{\n+    auto chain = GetChainType(error);\n+    if (!chain) return {};\n+    return FormatChainType(*chain);\n+}\n+\n+boost::optional<ChainType> ArgsManager::GetChainType(std::string& error) const\n {\n     LOCK(cs_args);\n     bool fRegTest = ArgsManagerHelper::GetNetBoolArg(*this, \"-regtest\");\n     bool fTestNet = ArgsManagerHelper::GetNetBoolArg(*this, \"-testnet\");\n \n-    if (fTestNet && fRegTest)\n-        throw std::runtime_error(\"Invalid combination of -regtest and -testnet.\");\n+    if (fTestNet && fRegTest) {\n+        error = \"Invalid combination of -regtest and -testnet.\";\n+        return {};\n+    }\n     if (fRegTest)\n-        return CBaseChainParams::REGTEST;\n+        return ChainType::REGTEST;\n     if (fTestNet)\n-        return CBaseChainParams::TESTNET;\n-    return CBaseChainParams::MAIN;\n+        return ChainType::TESTNET;\n+    return ChainType::MAIN;\n }\n \n #ifndef WIN32"
      },
      {
        "sha": "8fcdc83317ff81007d1db8b8f2d67ddea8c88d4e",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -31,6 +31,7 @@\n #include <unordered_set>\n #include <vector>\n \n+#include <boost/optional.hpp>\n #include <boost/thread/condition_variable.hpp> // for boost::thread_interrupted\n \n enum class ChainType;\n@@ -248,9 +249,11 @@ class ArgsManager\n \n     /**\n      * Looks for -regtest, -testnet and returns the appropriate BIP70 chain name.\n-     * @return CBaseChainParams::MAIN by default; raises runtime error if an invalid combination is given.\n+     * @return CBaseChainParams::MAIN by default, none if error is set\n      */\n-    std::string GetChainName() const;\n+    boost::optional<std::string> GetChainName(std::string& error) const;\n+\n+    boost::optional<ChainType> GetChainType(std::string& error) const;\n \n     /**\n      * Add argument"
      },
      {
        "sha": "31d0eebab2640fb2a0236df1dab77afdccedb067",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -7,8 +7,8 @@\n #include <rpc/server.h>\n #include <wallet/db.h>\n \n-WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n-    TestingSetup(chainName), m_wallet(\"mock\", WalletDatabase::CreateMock())\n+WalletTestingSetup::WalletTestingSetup(const ChainType& chain)\n+    : TestingSetup(chain), m_wallet(\"mock\", WalletDatabase::CreateMock())\n {\n     bool fFirstRun;\n     m_wallet.LoadWallet(fFirstRun);"
      },
      {
        "sha": "fa97fffdfcfcfb7b03a3a3989d44348a7be8fa94",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "patch": "@@ -13,8 +13,8 @@\n \n /** Testing setup and teardown for wallet.\n  */\n-struct WalletTestingSetup: public TestingSetup {\n-    explicit WalletTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n+struct WalletTestingSetup : public TestingSetup {\n+    explicit WalletTestingSetup(const ChainType& chain = ChainType::MAIN);\n     ~WalletTestingSetup();\n \n     CWallet m_wallet;"
      }
    ]
  },
  {
    "sha": "8c0eabf5b5647ba2115d7e4fb0ba80b8933b6a55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzBlYWJmNWI1NjQ3YmEyMTE1ZDdlNGZiMGJhODBiODkzM2I2YTU1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-26T21:44:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-21T01:42:12Z"
      },
      "message": "qa: Add tests for invalid chain selections",
      "tree": {
        "sha": "e24d330203ff6da272261af6cb97ef2fddaa7ad4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e24d330203ff6da272261af6cb97ef2fddaa7ad4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c0eabf5b5647ba2115d7e4fb0ba80b8933b6a55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c0eabf5b5647ba2115d7e4fb0ba80b8933b6a55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c0eabf5b5647ba2115d7e4fb0ba80b8933b6a55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c0eabf5b5647ba2115d7e4fb0ba80b8933b6a55/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab4f8a1965a5cf1509dd2b2eec214f7f4baaa5f"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 69,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9966b0a8126145c07803da54ca10958b18aa8cd8",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c0eabf5b5647ba2115d7e4fb0ba80b8933b6a55/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c0eabf5b5647ba2115d7e4fb0ba80b8933b6a55/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=8c0eabf5b5647ba2115d7e4fb0ba80b8933b6a55",
        "patch": "@@ -7,6 +7,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n \n \n class ConfArgsTest(BitcoinTestFramework):\n@@ -32,6 +33,14 @@ def test_config_file_parser(self):\n             conf.write('nono\\n')\n         self.nodes[0].assert_start_raises_init_error(expected_msg='Error reading configuration file: parse error on line 1: nono, if you intended to specify a negated option, use nono=1 instead')\n \n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('vbparams=a:b\\n')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Version bits parameters malformed, expecting deployment:start:end', match=ErrorMatch.PARTIAL_REGEX)\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('testnet=1\\n')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Invalid combination of -regtest and -testnet.', match=ErrorMatch.PARTIAL_REGEX)\n+\n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('')  # clear\n "
      },
      {
        "sha": "71f0c66346fe2474a5172611f8df2f7ce19942f8",
        "filename": "test/util/data/bitcoin-util-test.json",
        "status": "modified",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c0eabf5b5647ba2115d7e4fb0ba80b8933b6a55/test/util/data/bitcoin-util-test.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c0eabf5b5647ba2115d7e4fb0ba80b8933b6a55/test/util/data/bitcoin-util-test.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/bitcoin-util-test.json?ref=8c0eabf5b5647ba2115d7e4fb0ba80b8933b6a55",
        "patch": "@@ -1,4 +1,64 @@\n [\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-regtest\", \"-testnet\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"Invalid combination of -regtest and -testnet.\",\n+    \"description\": \"Tests for invalid chain selection\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-regtest\", \"-vbparams=a:b\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"Version bits parameters malformed, expecting deployment:start:end\",\n+    \"description\": \"Tests for invalid vbparams\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-regtest\", \"-vbparams=a:b:c\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"Invalid nStartTime (b)\",\n+    \"description\": \"Tests for invalid vbparams\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-regtest\", \"-vbparams=a:0:c\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"Invalid nTimeout (c)\",\n+    \"description\": \"Tests for invalid vbparams\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-regtest\", \"-vbparams=a:0:0\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"Invalid deployment (a)\",\n+    \"description\": \"Tests for invalid vbparams\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-unknown_arg\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"Error parsing command line arguments: Invalid parameter -unknown_arg\",\n+    \"description\": \"Tests for invalid arg\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [],\n+    \"return_code\": 1,\n+    \"error_txt\": \"Error: too few parameters\",\n+    \"description\": \"Tests for too few parameters\"\n+  },\n+  { \"exec\": \"./bitcoin-cli\",\n+    \"args\": [\"-unknown_arg\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"Error parsing command line arguments: Invalid parameter -unknown_arg\",\n+    \"description\": \"Tests for invalid arg\"\n+  },\n+  { \"exec\": \"./bitcoin-cli\",\n+    \"args\": [],\n+    \"return_code\": 1,\n+    \"error_txt\": \"Error: too few parameters\",\n+    \"description\": \"Tests for too few parameters\"\n+  },\n+  { \"exec\": \"./bitcoin-cli\",\n+    \"args\": [\"-datadir=/tmp/does/not/exist/\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"Error: Specified data directory \\\"/tmp/does/not/exist/\\\" does not exist.\",\n+    \"description\": \"Tests for wrong datadir\"\n+  },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-create\", \"nversion=1\"],\n     \"output_cmp\": \"blanktxv1.hex\","
      }
    ]
  }
]