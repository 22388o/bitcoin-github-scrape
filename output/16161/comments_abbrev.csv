Empact,2019-06-10 02:00:07,How about a test case?,https://github.com/bitcoin/bitcoin/pull/16161#issuecomment-500267552,500267552,
jkczyz,2019-06-10 20:01:42,@Empact Would it be sufficient to remove `#ifdef ARENA_DEBUG` from this code to ensure the compilation error is caught in the future? Not sure if this goes against conventions for debug code.,https://github.com/bitcoin/bitcoin/pull/16161#issuecomment-500572535,500572535,
Empact,2019-06-10 20:59:11,"No, the guards are there for a reason, just would be nice to exercise the guarded code at some point so such a failure is caught in the future.\n\nThe guiding principle is: “test anything that might fail and everything that does”.\n\nMay not be practical, but one possibility is treating one of the Travis test runs with ARENA_DEBUG.",https://github.com/bitcoin/bitcoin/pull/16161#issuecomment-500592397,500592397,
jkczyz,2019-06-11 16:06:54,"I defined ARENA_DEBUG for a couple environments. Wasn't sure which environments, so I just added it to ones that were already setting CPPFLAGS. The Travis CI build failures seem unrelated.\n\nI had to update the Arena's test to use allocated memory to prevent a segfault. Figured this may have been needed as I observed it locally.",https://github.com/bitcoin/bitcoin/pull/16161#issuecomment-500911373,500911373,
DrahtBot,2019-06-12 21:23:47,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17517](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17517.html) (ci: Bump to clang-8 for asan build to avoid",https://github.com/bitcoin/bitcoin/pull/16161#issuecomment-501460678,501460678,
laanwj,2019-06-17 09:09:03,"Thanks for catching this and fixing the build with `-DARENA_DEBUG`, not 100% sure about the build system and test changes.",https://github.com/bitcoin/bitcoin/pull/16161#issuecomment-502600320,502600320,
DrahtBot,2019-08-19 13:56:11,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/16161#issuecomment-522586831,522586831,
fanquake,2019-11-16 16:07:45,"Concept ACK. @jkczyz could you rebase this?\n\nCompiling on macOS with `ARENA_DEBUG`:\n```bash\n  CXX      support/libbitcoin_util_a-lockedpool.o\nsupport/lockedpool.cpp:141:10: error: no member named 'cout' in namespace 'std'\n    std::cout <<\n    ~~~~~^\nsupport/lockedpool.cpp:142:22: error: no member named 'hex' in namespace 'std'\n        ""0x"" << std::hex << std::setw(16) << std::set",https://github.com/bitcoin/bitcoin/pull/16161#issuecomment-554650350,554650350,
Empact,2019-11-16 16:27:38,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16161#issuecomment-554652043,554652043,
jkczyz,2019-11-16 16:45:52,"> Concept ACK. @jkczyz could you rebase this?\n\nDone.",https://github.com/bitcoin/bitcoin/pull/16161#issuecomment-554653601,554653601,
laanwj,2019-11-20 11:57:03,"ACK 30fb598737f6efb7802d707a1fa989872e7f8b7b\n\nI like how minimal this change has become.\n",https://github.com/bitcoin/bitcoin/pull/16161#issuecomment-555973040,555973040,
laanwj,2019-06-17 09:07:03,"Using a fake address here was on purpose, it would catch accesses to the underlying memory by causing a segfault.\nAlso it leaks a MB of memory now.",https://github.com/bitcoin/bitcoin/pull/16161#discussion_r294201482,294201482,src/test/allocator_tests.cpp
jkczyz,2019-06-17 16:27:33,"> Using a fake address here was on purpose, it would catch accesses to the underlying memory by causing a segfault.\n\nAh, that wasn't so clear to me from the code comment. Mission accomplished, I suppose. :) Since the access occurs when calling `walk`, those calls aren't very useful in this test given they cause a segfault.\n\n> Also it leaks a MB of memory now.\n\nWon't the memory be delet",https://github.com/bitcoin/bitcoin/pull/16161#discussion_r294383104,294383104,src/test/allocator_tests.cpp
laanwj,2019-07-03 11:28:00,"I'm slightly confused. I don't think `walk` is supposed to access the contents of the memory, it is supposed to be a debugging function that prints the allocation metadata, addresses and such, which is intentionally stored outside of the arena (to save on scarce page-locked memory). If it accesses the underlying memory, or even dereferences the pointer, that seems like a bug to me.",https://github.com/bitcoin/bitcoin/pull/16161#discussion_r299906485,299906485,src/test/allocator_tests.cpp
jkczyz,2019-07-03 23:46:23,"I'm not sure why, but Inserting `base` into `std::cout` inside `printchunk` causes the segfault when executed with `make CPPFLAGS=-DARENA_DEBUG check`:\n\n```console\nEntering test module ""Bitcoin Core Test Suite""\ntest/allocator_tests.cpp(14): Entering test suite ""allocator_tests""\ntest/allocator_tests.cpp(16): Entering test case ""arena_tests""\n0xunknown location(0): fatal error: in ""alloca",https://github.com/bitcoin/bitcoin/pull/16161#discussion_r300188459,300188459,src/test/allocator_tests.cpp
jkczyz,2019-11-16 18:54:13,"Turns out this segfault can be avoided instead by changing `printchunk` to take `void*` rather than `char*`, which is what I had been doing in #16195. Updated in 30fb598.",https://github.com/bitcoin/bitcoin/pull/16161#discussion_r347103072,347103072,src/test/allocator_tests.cpp
