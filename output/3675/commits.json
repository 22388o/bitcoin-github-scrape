[
  {
    "sha": "3ec0f4e8e29c97b9f020f2250eef80790df80010",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWMwZjRlOGUyOWM5N2I5ZjAyMGYyMjUwZWVmODA3OTBkZjgwMDEw",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-02-15T04:42:49Z"
      },
      "committer": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-02-15T04:49:10Z"
      },
      "message": "Add a method for removing a single wallet tx.\n\nAlso changes old ZapWalletTx function names to ZapWalletTxes to match the\ncommand line argument (-zapwallettxes)",
      "tree": {
        "sha": "ae567f3304323047bf56f0c5a6cf035840daa805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae567f3304323047bf56f0c5a6cf035840daa805"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ec0f4e8e29c97b9f020f2250eef80790df80010",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ec0f4e8e29c97b9f020f2250eef80790df80010",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ec0f4e8e29c97b9f020f2250eef80790df80010",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ec0f4e8e29c97b9f020f2250eef80790df80010/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05d3ded072d782036c31c1d773c0441b87de843e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05d3ded072d782036c31c1d773c0441b87de843e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05d3ded072d782036c31c1d773c0441b87de843e"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 72,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0b528c193106da5ce263c22a42774216794d254e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec0f4e8e29c97b9f020f2250eef80790df80010/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec0f4e8e29c97b9f020f2250eef80790df80010/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3ec0f4e8e29c97b9f020f2250eef80790df80010",
        "patch": "@@ -455,7 +455,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n             LogPrintf(\"AppInit2 : parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\");\n     }\n \n-    // -zapwallettx implies a rescan\n+    // -zapwallettxes implies a rescan\n     if (GetBoolArg(\"-zapwallettxes\", false)) {\n         if (SoftSetBoolArg(\"-rescan\", true))\n             LogPrintf(\"AppInit2 : parameter interaction: -zapwallettxes=1 -> setting -rescan=1\\n\");\n@@ -910,7 +910,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n             uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n \n             pwalletMain = new CWallet(strWalletFile);\n-            DBErrors nZapWalletRet = pwalletMain->ZapWalletTx();\n+            DBErrors nZapWalletRet = pwalletMain->ZapWalletTxes();\n             if (nZapWalletRet != DB_LOAD_OK) {\n                 uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n                 return false;"
      },
      {
        "sha": "e8360ef10cfb25d1a6e2cc2413abb0a3ed0af232",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec0f4e8e29c97b9f020f2250eef80790df80010/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec0f4e8e29c97b9f020f2250eef80790df80010/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=3ec0f4e8e29c97b9f020f2250eef80790df80010",
        "patch": "@@ -163,6 +163,7 @@ extern json_spirit::Value walletlock(const json_spirit::Array& params, bool fHel\n extern json_spirit::Value encryptwallet(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value validateaddress(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getinfo(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value zapwallettx(const json_spirit::Array& params, bool fHelp);\n \n extern json_spirit::Value getrawtransaction(const json_spirit::Array& params, bool fHelp); // in rcprawtransaction.cpp\n extern json_spirit::Value listunspent(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "dc62d0ed9e7f25e51b097a8cb42d8ebc58b20da1",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec0f4e8e29c97b9f020f2250eef80790df80010/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec0f4e8e29c97b9f020f2250eef80790df80010/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=3ec0f4e8e29c97b9f020f2250eef80790df80010",
        "patch": "@@ -1883,4 +1883,30 @@ Value settxfee(const Array& params, bool fHelp)\n     return true;\n }\n \n+Value zapwallettx(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+        throw runtime_error(\n+            \"zapwallettx txid\\n\"\n+            \"\\nRemove a wallet transaction.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid           (string) The transaction id.\\n\"\n+            \"\\nResult\\n\"\n+            \"true|false        (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"zapwallettx\", \"00e3c3ec61422aa4e597beceac7f06c771a8024dee38c5ffa413336341befa72\")\n+            + HelpExampleRpc(\"zapwallettx\", \"00e3c3ec61422aa4e597beceac7f06c771a8024dee38c5ffa413336341befa72\")\n+        );\n+\n+    // txid\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+\n+    Object entry;\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+\n+    return pwalletMain->ZapWalletTx(hash) == DB_LOAD_OK;\n+}\n+\n "
      },
      {
        "sha": "17cd7048186579d3e0755f781b573f8a0d4d21de",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec0f4e8e29c97b9f020f2250eef80790df80010/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec0f4e8e29c97b9f020f2250eef80790df80010/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=3ec0f4e8e29c97b9f020f2250eef80790df80010",
        "patch": "@@ -1501,11 +1501,35 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n }\n \n \n-DBErrors CWallet::ZapWalletTx()\n+DBErrors CWallet::ZapWalletTxes()\n {\n     if (!fFileBacked)\n         return DB_LOAD_OK;\n-    DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,\"cr+\").ZapWalletTx(this);\n+    DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,\"cr+\").ZapWalletTxes(this);\n+    if (nZapWalletTxRet == DB_NEED_REWRITE)\n+    {\n+        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n+        {\n+            LOCK(cs_wallet);\n+            setKeyPool.clear();\n+            // Note: can't top-up keypool here, because wallet is locked.\n+            // User will be prompted to unlock wallet the next operation\n+            // the requires a new key.\n+        }\n+    }\n+\n+    if (nZapWalletTxRet != DB_LOAD_OK)\n+        return nZapWalletTxRet;\n+\n+    return DB_LOAD_OK;\n+}\n+\n+\n+DBErrors CWallet::ZapWalletTx(uint256 hash)\n+{\n+    if (!fFileBacked)\n+        return DB_LOAD_OK;\n+    DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,\"cr+\").ZapWalletTx(this, hash);\n     if (nZapWalletTxRet == DB_NEED_REWRITE)\n     {\n         if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))"
      },
      {
        "sha": "dcf5b53666b037ae05d2e483af55740932db6c99",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec0f4e8e29c97b9f020f2250eef80790df80010/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec0f4e8e29c97b9f020f2250eef80790df80010/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=3ec0f4e8e29c97b9f020f2250eef80790df80010",
        "patch": "@@ -323,7 +323,8 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     void SetBestChain(const CBlockLocator& loc);\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n-    DBErrors ZapWalletTx();\n+    DBErrors ZapWalletTxes();\n+    DBErrors ZapWalletTx(uint256 hash);\n \n     bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n "
      },
      {
        "sha": "c48da51648cbae289319a32e2627f0fb53cff87e",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec0f4e8e29c97b9f020f2250eef80790df80010/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec0f4e8e29c97b9f020f2250eef80790df80010/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=3ec0f4e8e29c97b9f020f2250eef80790df80010",
        "patch": "@@ -684,7 +684,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     return result;\n }\n \n-DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash)\n+DBErrors CWalletDB::FindWalletTxes(CWallet* pwallet, vector<uint256>& vTxHash)\n {\n     pwallet->vchDefaultKey = CPubKey();\n     CWalletScanState wss;\n@@ -747,11 +747,11 @@ DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash)\n     return result;\n }\n \n-DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet)\n+DBErrors CWalletDB::ZapWalletTxes(CWallet* pwallet)\n {\n     // build list of wallet TXs\n     vector<uint256> vTxHash;\n-    DBErrors err = FindWalletTx(pwallet, vTxHash);\n+    DBErrors err = FindWalletTxes(pwallet, vTxHash);\n     if (err != DB_LOAD_OK)\n         return err;\n \n@@ -764,6 +764,15 @@ DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet)\n     return DB_LOAD_OK;\n }\n \n+DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, uint256 hash)\n+{\n+    // erase wallet TX\n+    if (!EraseTx(hash))\n+        return DB_CORRUPT;\n+\n+    return DB_LOAD_OK;\n+}\n+\n void ThreadFlushWalletDB(const string& strFile)\n {\n     // Make this thread recognisable as the wallet flushing thread"
      },
      {
        "sha": "2e6bce07409bffb0512a5e881cbb9922ab208f7c",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec0f4e8e29c97b9f020f2250eef80790df80010/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec0f4e8e29c97b9f020f2250eef80790df80010/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=3ec0f4e8e29c97b9f020f2250eef80790df80010",
        "patch": "@@ -122,8 +122,9 @@ class CWalletDB : public CDB\n \n     DBErrors ReorderTransactions(CWallet*);\n     DBErrors LoadWallet(CWallet* pwallet);\n-    DBErrors FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash);\n-    DBErrors ZapWalletTx(CWallet* pwallet);\n+    DBErrors FindWalletTxes(CWallet* pwallet, std::vector<uint256>& vTxHash);\n+    DBErrors ZapWalletTxes(CWallet* pwallet);\n+    DBErrors ZapWalletTx(CWallet* pwallet, uint256 hash);\n     static bool Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys);\n     static bool Recover(CDBEnv& dbenv, std::string filename);\n };"
      }
    ]
  },
  {
    "sha": "022aa3d04395389cc1a9321c1f716bb7a6d8ef7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjJhYTNkMDQzOTUzODljYzFhOTMyMWMxZjcxNmJiN2E2ZDhlZjdh",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-02-16T10:51:37Z"
      },
      "committer": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-02-16T10:51:37Z"
      },
      "message": "ZapWalletTx (single): added deletion of child transactions and also\nupdates the spent outputs of the parent transactions that are deleted.\n\nThere is some cacheing somewhere so the runtime (rpc) changes dont all\nshow up until a restart.",
      "tree": {
        "sha": "d0075e8a9d78f52a22d5b04bc35a180a9e502516",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0075e8a9d78f52a22d5b04bc35a180a9e502516"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ec0f4e8e29c97b9f020f2250eef80790df80010",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ec0f4e8e29c97b9f020f2250eef80790df80010",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ec0f4e8e29c97b9f020f2250eef80790df80010"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 93,
      "deletions": 8
    },
    "files": [
      {
        "sha": "b5ad13ba280cd56165db3404be76e3fbb69225eb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=022aa3d04395389cc1a9321c1f716bb7a6d8ef7a",
        "patch": "@@ -271,6 +271,7 @@ std::string HelpMessage(HelpMessageMode hmm)\n     strUsage += \"  -paytxfee=<amt>        \" + _(\"Fee per kB to add to transactions you send\") + \"\\n\";\n     strUsage += \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \"\\n\";\n     strUsage += \"  -zapwallettxes         \" + _(\"Clear list of wallet transactions (diagnostic tool; implies -rescan)\") + \"\\n\";\n+    strUsage += \"  -zapwallettx=<txid>    \" + _(\"Clear single wallet transaction <txid> (diagnostic tool; implies -rescan)\") + \"\\n\";\n     strUsage += \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \"\\n\";\n     strUsage += \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \"\\n\";\n     strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \"\\n\";\n@@ -461,6 +462,12 @@ bool AppInit2(boost::thread_group& threadGroup)\n             LogPrintf(\"AppInit2 : parameter interaction: -zapwallettxes=1 -> setting -rescan=1\\n\");\n     }\n \n+    // -zapwallettx implies a rescan\n+    if (mapArgs.count(\"-zapwallettx\")) {\n+        if (SoftSetBoolArg(\"-rescan\", true))\n+            LogPrintf(\"AppInit2 : parameter interaction: -zapwallettx -> setting -rescan=1\\n\");\n+    }\n+\n     // Make sure enough file descriptors are available\n     int nBind = std::max((int)mapArgs.count(\"-bind\"), 1);\n     nMaxConnections = GetArg(\"-maxconnections\", 125);\n@@ -919,6 +926,28 @@ bool AppInit2(boost::thread_group& threadGroup)\n             delete pwalletMain;\n             pwalletMain = NULL;\n         }\n+        if (mapArgs.count(\"-zapwallettx\")) {\n+            uiInterface.InitMessage(_(\"Zapping transaction from wallet...\"));\n+\n+            // txid\n+            uint256 hash;\n+            hash.SetHex(GetArg(\"-zapwallettx\", \"\"));\n+\n+            pwalletMain = new CWallet(strWalletFile);\n+            if (!pwalletMain->mapWallet.count(hash)) {\n+                uiInterface.InitMessage(_(\"Invalid or non-wallet transaction id\"));\n+                return false;\n+            }\n+            const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+            DBErrors nZapWalletRet = pwalletMain->ZapWalletTx(wtx);\n+            if (nZapWalletRet != DB_LOAD_OK) {\n+                uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n+                return false;\n+            }\n+\n+            delete pwalletMain;\n+            pwalletMain = NULL;\n+        }\n \n         uiInterface.InitMessage(_(\"Loading wallet...\"));\n "
      },
      {
        "sha": "55e64093b7e1202bd004b23ea866c5e8443e49d8",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=022aa3d04395389cc1a9321c1f716bb7a6d8ef7a",
        "patch": "@@ -296,6 +296,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"lockunspent\",            &lockunspent,            false,     false,      true },\n     { \"listlockunspent\",        &listlockunspent,        false,     false,      true },\n     { \"settxfee\",               &settxfee,               false,     false,      true },\n+    { \"zapwallettx\",            &zapwallettx,            false,     false,      true },\n \n     /* Wallet-enabled mining */\n     { \"getgenerate\",            &getgenerate,            true,      false,      false },"
      },
      {
        "sha": "3f226d9535bac3c7f25d831a2eef902d7a0b5479",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=022aa3d04395389cc1a9321c1f716bb7a6d8ef7a",
        "patch": "@@ -1902,11 +1902,11 @@ Value zapwallettx(const Array& params, bool fHelp)\n     uint256 hash;\n     hash.SetHex(params[0].get_str());\n \n-    Object entry;\n     if (!pwalletMain->mapWallet.count(hash))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n \n-    return pwalletMain->ZapWalletTx(hash) == DB_LOAD_OK;\n+    return pwalletMain->ZapWalletTx(wtx) == DB_LOAD_OK;\n }\n \n "
      },
      {
        "sha": "607c8cc88d5f69e316096df401dfdfcbebb7c88e",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=022aa3d04395389cc1a9321c1f716bb7a6d8ef7a",
        "patch": "@@ -1525,11 +1525,11 @@ DBErrors CWallet::ZapWalletTxes()\n }\n \n \n-DBErrors CWallet::ZapWalletTx(uint256 hash)\n+DBErrors CWallet::ZapWalletTx(const CWalletTx& wtx)\n {\n     if (!fFileBacked)\n         return DB_LOAD_OK;\n-    DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,\"cr+\").ZapWalletTx(this, hash);\n+    DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,\"cr+\").ZapWalletTx(this, wtx);\n     if (nZapWalletTxRet == DB_NEED_REWRITE)\n     {\n         if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))"
      },
      {
        "sha": "21235af32226938971472792e851d208adbe25c9",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=022aa3d04395389cc1a9321c1f716bb7a6d8ef7a",
        "patch": "@@ -324,7 +324,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n     DBErrors ZapWalletTxes();\n-    DBErrors ZapWalletTx(uint256 hash);\n+    DBErrors ZapWalletTx(const CWalletTx& wtx);\n \n     bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n \n@@ -602,6 +602,18 @@ class CWalletTx : public CMerkleTx\n         }\n     }\n \n+    void MarkUnspent(unsigned int nOut)\n+    {\n+        if (nOut >= vout.size())\n+            throw std::runtime_error(\"CWalletTx::MarkUnspent() : nOut out of range\");\n+        vfSpent.resize(vout.size());\n+        if (vfSpent[nOut])\n+        {\n+            vfSpent[nOut] = false;\n+            fAvailableCreditCached = false;\n+        }\n+    }\n+\n     bool IsSpent(unsigned int nOut) const\n     {\n         if (nOut >= vout.size())"
      },
      {
        "sha": "8886eccc4320ee05e118761f9201c0ac9ce905ef",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 2,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=022aa3d04395389cc1a9321c1f716bb7a6d8ef7a",
        "patch": "@@ -764,10 +764,53 @@ DBErrors CWalletDB::ZapWalletTxes(CWallet* pwallet)\n     return DB_LOAD_OK;\n }\n \n-DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, uint256 hash)\n+DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, const CWalletTx& wtx)\n {\n+    LogPrintf(\"ZapWalletTx %s\\n\", wtx.GetHash().GetHex());\n+\n+    // erase child TX's\n+    for (unsigned int nVoutIndex = 0; nVoutIndex < wtx.vout.size(); nVoutIndex++)\n+    {\n+        for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin();\n+             it != pwallet->mapWallet.end();\n+             ++it)\n+        {\n+            const CWalletTx& wtxPotentialChild = (*it).second;\n+            BOOST_FOREACH(const CTxIn& txin, wtxPotentialChild.vin)\n+            {\n+                if (txin.prevout.hash == wtx.GetHash() && txin.prevout.n == nVoutIndex)\n+                {\n+                    LogPrintf(\"ZapWalletTx found child tx %s\\n\", wtxPotentialChild.GetHash().GetHex());\n+                    //TODO: recursion could be a problem if it gets too deep\n+                    DBErrors ret = ZapWalletTx(pwallet, wtxPotentialChild);\n+                    if (ret != DB_LOAD_OK)\n+                        return ret;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+    \n+    // modify parent TX's spent outputs\n+    for (unsigned int nVinIndex = 0; nVinIndex < wtx.vin.size(); nVinIndex++)\n+    {\n+        const CTxIn& txin = wtx.vin[nVinIndex];\n+        for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin();\n+             it != pwallet->mapWallet.end();\n+             ++it)\n+        {\n+            CWalletTx& wtxPotentialParent = (*it).second;\n+            if (wtxPotentialParent.GetHash() == txin.prevout.hash)\n+            {\n+                LogPrintf(\"ZapWalletTx found parent tx %s\\n\", wtxPotentialParent.GetHash().GetHex());\n+                wtxPotentialParent.MarkUnspent(nVinIndex);\n+                break;\n+            }\n+        }\n+    }\n+\n     // erase wallet TX\n-    if (!EraseTx(hash))\n+    if (!EraseTx(wtx.GetHash()))\n         return DB_CORRUPT;\n \n     return DB_LOAD_OK;"
      },
      {
        "sha": "78502901872c14424a54e1006e410384b63fb023",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=022aa3d04395389cc1a9321c1f716bb7a6d8ef7a",
        "patch": "@@ -124,7 +124,7 @@ class CWalletDB : public CDB\n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTxes(CWallet* pwallet, std::vector<uint256>& vTxHash);\n     DBErrors ZapWalletTxes(CWallet* pwallet);\n-    DBErrors ZapWalletTx(CWallet* pwallet, uint256 hash);\n+    DBErrors ZapWalletTx(CWallet* pwallet, const CWalletTx& wtx);\n     static bool Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys);\n     static bool Recover(CDBEnv& dbenv, std::string filename);\n };"
      }
    ]
  },
  {
    "sha": "beca478992dd9a1b251d795d29f765231781699e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWNhNDc4OTkyZGQ5YTFiMjUxZDc5NWQyOWY3NjUyMzE3ODE2OTll",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-02-15T21:38:28Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-02-17T17:01:33Z"
      },
      "message": "Remove CWalletTx::vfSpent\n\nUse the spent outpoint multimap to figure out which wallet transaction\noutputs are unspent, instead of a vfSpent array that is saved\nto disk.",
      "tree": {
        "sha": "b19e5c9113cb443c484eac9433fd81710d895547",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b19e5c9113cb443c484eac9433fd81710d895547"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/beca478992dd9a1b251d795d29f765231781699e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beca478992dd9a1b251d795d29f765231781699e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/beca478992dd9a1b251d795d29f765231781699e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beca478992dd9a1b251d795d29f765231781699e/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "085c62149ad19cecf235829e49df07884a279e1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/085c62149ad19cecf235829e49df07884a279e1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/085c62149ad19cecf235829e49df07884a279e1e"
      }
    ],
    "stats": {
      "total": 584,
      "additions": 341,
      "deletions": 243
    },
    "files": [
      {
        "sha": "e9f834a6029e5ace59288f648cac0c7eb1159a38",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beca478992dd9a1b251d795d29f765231781699e/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beca478992dd9a1b251d795d29f765231781699e/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=beca478992dd9a1b251d795d29f765231781699e",
        "patch": "@@ -1,6 +1,13 @@\n Regression tests of RPC interface\n =================================\n \n-wallet.sh : Test wallet send/receive code (see comments for details)\n+Bash scripts that use the RPC interface and command-line bitcoin-cli to test\n+full functionality in -regtest mode.\n \n-util.sh : useful re-usable functions \n+wallet.sh : Exercise wallet send/receive code.\n+\n+txnmall.sh : Test proper accounting of malleable transactions\n+\n+conflictedbalance.sh : More testing of malleable transaction handling\n+\n+util.sh : useful re-usable bash functions "
      },
      {
        "sha": "9d854d2d87bfba07bd5aedcf4bbde2a37b4d6690",
        "filename": "qa/rpc-tests/conflictedbalance.sh",
        "status": "added",
        "additions": 143,
        "deletions": 0,
        "changes": 143,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beca478992dd9a1b251d795d29f765231781699e/qa/rpc-tests/conflictedbalance.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beca478992dd9a1b251d795d29f765231781699e/qa/rpc-tests/conflictedbalance.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/conflictedbalance.sh?ref=beca478992dd9a1b251d795d29f765231781699e",
        "patch": "@@ -0,0 +1,143 @@\n+#!/usr/bin/env bash\n+\n+# Test marking of spent outputs\n+\n+# Create a transaction graph with four transactions,\n+# A/B/C/D\n+# C spends A\n+# D spends B and C\n+\n+# Then simulate C being mutated, to create C'\n+#  that is mined.\n+# A is still (correctly) considered spent.\n+# B should be treated as unspent\n+\n+if [ $# -lt 1 ]; then\n+        echo \"Usage: $0 path_to_binaries\"\n+        echo \"e.g. $0 ../../src\"\n+        exit 1\n+fi\n+\n+set -f\n+\n+BITCOIND=${1}/bitcoind\n+CLI=${1}/bitcoin-cli\n+\n+DIR=\"${BASH_SOURCE%/*}\"\n+SENDANDWAIT=\"${DIR}/send.sh\"\n+if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n+. \"$DIR/util.sh\"\n+\n+D=$(mktemp -d test.XXXXX)\n+\n+# Two nodes; one will play the part of merchant, the\n+# other an evil transaction-mutating miner.\n+\n+D1=${D}/node1\n+CreateDataDir $D1 port=11000 rpcport=11001\n+B1ARGS=\"-datadir=$D1 -debug=mempool\"\n+$BITCOIND $B1ARGS &\n+B1PID=$!\n+\n+D2=${D}/node2\n+CreateDataDir $D2 port=11010 rpcport=11011\n+B2ARGS=\"-datadir=$D2 -debug=mempool\"\n+$BITCOIND $B2ARGS &\n+B2PID=$!\n+\n+# Wait until all four nodes are at the same block number\n+function WaitBlocks {\n+    while :\n+    do\n+        sleep 1\n+        declare -i BLOCKS1=$( GetBlocks $B1ARGS )\n+        declare -i BLOCKS2=$( GetBlocks $B2ARGS )\n+        if (( BLOCKS1 == BLOCKS2 ))\n+        then\n+            break\n+        fi\n+    done\n+}\n+\n+# Wait until node has $N peers\n+function WaitPeers {\n+    while :\n+    do\n+        declare -i PEERS=$( $CLI $1 getconnectioncount )\n+        if (( PEERS == \"$2\" ))\n+        then\n+            break\n+        fi\n+        sleep 1\n+    done\n+}\n+\n+echo \"Generating test blockchain...\"\n+\n+# Start with B2 connected to B1:\n+$CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n+WaitPeers \"$B1ARGS\" 1\n+\n+# 2 block, 50 XBT each == 100 XBT\n+# These will be transactions \"A\" and \"B\"\n+$CLI $B1ARGS setgenerate true 2\n+\n+WaitBlocks\n+# 100 blocks, 0 mature == 0 XBT\n+$CLI $B2ARGS setgenerate true 100\n+WaitBlocks\n+\n+CheckBalance \"$B1ARGS\" 100\n+CheckBalance \"$B2ARGS\" 0\n+\n+# restart B2 with no connection\n+$CLI $B2ARGS stop > /dev/null 2>&1\n+wait $B2PID\n+$BITCOIND $B2ARGS &\n+B2PID=$!\n+\n+B1ADDRESS=$( $CLI $B1ARGS getnewaddress )\n+B2ADDRESS=$( $CLI $B2ARGS getnewaddress )\n+\n+# Transaction C: send-to-self, spend A\n+TXID_C=$( $CLI $B1ARGS sendtoaddress $B1ADDRESS 50.0)\n+\n+# Transaction D: spends B and C\n+TXID_D=$( $CLI $B1ARGS sendtoaddress $B2ADDRESS 100.0)\n+\n+CheckBalance \"$B1ARGS\" 0\n+\n+# Mutate TXID_C and add it to B2's memory pool:\n+RAWTX_C=$( $CLI $B1ARGS getrawtransaction $TXID_C )\n+\n+# ... mutate C to create C'\n+L=${RAWTX_C:82:2}\n+NEWLEN=$( printf \"%x\" $(( 16#$L + 1 )) )\n+MUTATEDTX_C=${RAWTX_C:0:82}${NEWLEN}4c${RAWTX_C:84}\n+# ... give mutated tx1 to B2:\n+MUTATEDTXID=$( $CLI $B2ARGS sendrawtransaction $MUTATEDTX_C )\n+\n+echo \"TXID_C: \" $TXID_C\n+echo \"Mutated: \" $MUTATEDTXID\n+\n+# Re-connect nodes, and have both nodes mine some blocks:\n+$CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n+WaitPeers \"$B1ARGS\" 1\n+\n+# Having B2 mine the next block puts the mutated\n+# transaction C in the chain:\n+$CLI $B2ARGS setgenerate true 1\n+WaitBlocks\n+\n+# B1 should still be able to spend 100, because D is conflicted\n+# so does not count as a spend of B\n+CheckBalance \"$B1ARGS\" 100\n+\n+$CLI $B2ARGS stop > /dev/null 2>&1\n+wait $B2PID\n+$CLI $B1ARGS stop > /dev/null 2>&1\n+wait $B1PID\n+\n+echo \"Tests successful, cleaning up\"\n+rm -rf $D\n+exit 0"
      },
      {
        "sha": "86369d1d4f95fe50d0ae5f70a12b8b62be40edb6",
        "filename": "qa/rpc-tests/txnmall.sh",
        "status": "modified",
        "additions": 30,
        "deletions": 30,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beca478992dd9a1b251d795d29f765231781699e/qa/rpc-tests/txnmall.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beca478992dd9a1b251d795d29f765231781699e/qa/rpc-tests/txnmall.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txnmall.sh?ref=beca478992dd9a1b251d795d29f765231781699e",
        "patch": "@@ -1,13 +1,15 @@\n #!/usr/bin/env bash\n \n-# Test block generation and basic wallet sending\n+# Test proper accounting with malleable transactions\n \n if [ $# -lt 1 ]; then\n         echo \"Usage: $0 path_to_binaries\"\n         echo \"e.g. $0 ../../src\"\n         exit 1\n fi\n \n+set -f\n+\n BITCOIND=${1}/bitcoind\n CLI=${1}/bitcoin-cli\n \n@@ -33,16 +35,14 @@ B2ARGS=\"-datadir=$D2 -debug\"\n $BITCOIND $B2ARGS &\n B2PID=$!\n \n-trap \"kill -9 $B1PID $B2PID; rm -rf $D\" EXIT\n-\n-# Wait until all four nodes are at the same block number\n+# Wait until both nodes are at the same block number\n function WaitBlocks {\n     while :\n     do\n         sleep 1\n-        BLOCKS1=$( GetBlocks $B1ARGS )\n-        BLOCKS2=$( GetBlocks $B2ARGS )\n-        if (( $BLOCKS1 == $BLOCKS2 ))\n+        declare -i BLOCKS1=$( GetBlocks $B1ARGS )\n+        declare -i BLOCKS2=$( GetBlocks $B2ARGS )\n+        if (( BLOCKS1 == BLOCKS2 ))\n         then\n             break\n         fi\n@@ -53,15 +53,17 @@ function WaitBlocks {\n function WaitPeers {\n     while :\n     do\n-        PEERS=$( $CLI $1 getconnectioncount )\n-        if (( \"$PEERS\" == $2 ))\n+        declare -i PEERS=$( $CLI $1 getconnectioncount )\n+        if (( PEERS == \"$2\" ))\n         then\n             break\n         fi\n         sleep 1\n     done\n }\n \n+echo \"Generating test blockchain...\"\n+\n # Start with B2 connected to B1:\n $CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n WaitPeers \"$B1ARGS\" 1\n@@ -74,29 +76,27 @@ WaitBlocks\n $CLI $B2ARGS setgenerate true 100\n WaitBlocks\n \n-CheckBalance $B1ARGS 50\n-CheckBalance $B2ARGS 0\n+CheckBalance \"$B1ARGS\" 50\n+CheckBalance \"$B2ARGS\" 0\n \n # restart B2 with no connection\n $CLI $B2ARGS stop > /dev/null 2>&1\n wait $B2PID\n $BITCOIND $B2ARGS &\n B2PID=$!\n \n-B2ADDRESS=$( $CLI $B2ARGS getnewaddress )\n+B2ADDRESS=$( $CLI $B2ARGS getaccountaddress \"from1\" )\n \n # Have B1 create two transactions; second will\n # spend change from first, since B1 starts with only a single\n # 50 bitcoin output:\n-$CLI $B1ARGS move \"\" \"foo\" 10.0\n-$CLI $B1ARGS move \"\" \"bar\" 10.0\n+$CLI $B1ARGS move \"\" \"foo\" 10.0 > /dev/null\n+$CLI $B1ARGS move \"\" \"bar\" 10.0 > /dev/null\n TXID1=$( $CLI $B1ARGS sendfrom foo $B2ADDRESS 1.0 0)\n TXID2=$( $CLI $B1ARGS sendfrom bar $B2ADDRESS 2.0 0)\n \n # Mutate TXID1 and add it to B2's memory pool:\n RAWTX1=$( $CLI $B1ARGS getrawtransaction $TXID1 )\n-RAWTX2=$( $CLI $B1ARGS getrawtransaction $TXID2 )\n-# ... mutate RAWTX1:\n # RAWTX1 is hex-encoded, serialized transaction. So each\n # byte is two characters; we'll prepend the first\n # \"push\" in the scriptsig with OP_PUSHDATA1 (0x4c),\n@@ -121,28 +121,28 @@ echo \"TXID1: \" $TXID1\n echo \"Mutated: \" $MUTATEDTXID\n \n # Re-connect nodes, and have B2 mine a block\n+# containing the mutant:\n $CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n-WaitPeers \"$B1ARGS\" 1\n-\n-$CLI $B2ARGS setgenerate true 3\n-WaitBlocks\n-$CLI $B1ARGS setgenerate true 3\n+$CLI $B2ARGS setgenerate true 1\n WaitBlocks\n \n+# B1 should have 49 BTC; the 2 BTC send is\n+# conflicted, and should not count in\n+# balances.\n+CheckBalance \"$B1ARGS\" 49\n+CheckBalance \"$B1ARGS\" 49 \"*\"\n+CheckBalance \"$B1ARGS\" 9 \"foo\"\n+CheckBalance \"$B1ARGS\" 10 \"bar\"\n+\n+# B2 should have 51 BTC\n+CheckBalance \"$B2ARGS\" 51\n+CheckBalance \"$B2ARGS\" 1 \"from1\"\n+\n $CLI $B2ARGS stop > /dev/null 2>&1\n wait $B2PID\n $CLI $B1ARGS stop > /dev/null 2>&1\n wait $B1PID\n \n-trap \"\" EXIT\n-\n-echo \"Done, bitcoind's shut down. To rerun/poke around:\"\n-echo \"${1}/bitcoind -datadir=$D1 -daemon\"\n-echo \"${1}/bitcoind -datadir=$D2 -daemon -connect=127.0.0.1:11000\"\n-echo \"To cleanup:\"\n-echo \"killall bitcoind; rm -rf test.*\"\n-exit 0\n-\n echo \"Tests successful, cleaning up\"\n rm -rf $D\n exit 0"
      },
      {
        "sha": "9001c42fbc5878a06358d69b2f4bc1ab22f28af1",
        "filename": "qa/rpc-tests/util.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beca478992dd9a1b251d795d29f765231781699e/qa/rpc-tests/util.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beca478992dd9a1b251d795d29f765231781699e/qa/rpc-tests/util.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.sh?ref=beca478992dd9a1b251d795d29f765231781699e",
        "patch": "@@ -41,8 +41,9 @@ function AssertEqual {\n \n # CheckBalance -datadir=... amount account minconf\n function CheckBalance {\n+  declare -i EXPECT=\"$2\"\n   B=$( $CLI $1 getbalance $3 $4 )\n-  if (( $( echo \"$B == $2\" | bc ) == 0 ))\n+  if (( $( echo \"$B == $EXPECT\" | bc ) == 0 ))\n   then\n     echoerr \"bad balance: $B (expected $2)\"\n     exit 1\n@@ -87,5 +88,5 @@ function SendRawTxn {\n # Use: GetBlocks <datadir>\n # returns number of blocks from getinfo\n function GetBlocks {\n-    ExtractKey blocks \"$( $CLI $1 getinfo )\"\n+    $CLI $1 getblockcount\n }"
      },
      {
        "sha": "2940566af96356949d8d2ae8203b657acecaca03",
        "filename": "qa/rpc-tests/wallet.sh",
        "status": "modified",
        "additions": 20,
        "deletions": 19,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beca478992dd9a1b251d795d29f765231781699e/qa/rpc-tests/wallet.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beca478992dd9a1b251d795d29f765231781699e/qa/rpc-tests/wallet.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.sh?ref=beca478992dd9a1b251d795d29f765231781699e",
        "patch": "@@ -8,6 +8,8 @@ if [ $# -lt 1 ]; then\n         exit 1\n fi\n \n+set -f\n+\n BITCOIND=${1}/bitcoind\n CLI=${1}/bitcoin-cli\n \n@@ -19,49 +21,49 @@ if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n D=$(mktemp -d test.XXXXX)\n \n D1=${D}/node1\n-CreateDataDir $D1 port=11000 rpcport=11001\n+CreateDataDir \"$D1\" port=11000 rpcport=11001\n B1ARGS=\"-datadir=$D1\"\n $BITCOIND $B1ARGS &\n B1PID=$!\n \n D2=${D}/node2\n-CreateDataDir $D2 port=11010 rpcport=11011 connect=127.0.0.1:11000\n+CreateDataDir \"$D2\" port=11010 rpcport=11011 connect=127.0.0.1:11000\n B2ARGS=\"-datadir=$D2\"\n $BITCOIND $B2ARGS &\n B2PID=$!\n \n D3=${D}/node3\n-CreateDataDir $D3 port=11020 rpcport=11021 connect=127.0.0.1:11000\n+CreateDataDir \"$D3\" port=11020 rpcport=11021 connect=127.0.0.1:11000\n B3ARGS=\"-datadir=$D3\"\n $BITCOIND $BITCOINDARGS $B3ARGS &\n B3PID=$!\n \n-trap \"kill -9 $B1PID $B2PID $B3PID; rm -rf $D\" EXIT\n-\n # Wait until all three nodes are at the same block number\n function WaitBlocks {\n     while :\n     do\n         sleep 1\n-        BLOCKS1=$( GetBlocks $B1ARGS )\n-        BLOCKS2=$( GetBlocks $B2ARGS )\n-        BLOCKS3=$( GetBlocks $B3ARGS )\n-        if (( $BLOCKS1 == $BLOCKS2 && $BLOCKS2 == $BLOCKS3 ))\n+        declare -i BLOCKS1=$( GetBlocks $B1ARGS )\n+        declare -i BLOCKS2=$( GetBlocks $B2ARGS )\n+        declare -i BLOCKS3=$( GetBlocks $B3ARGS )\n+        if (( BLOCKS1 == BLOCKS2 && BLOCKS2 == BLOCKS3 ))\n         then\n             break\n         fi\n     done\n }\n \n+echo \"Generating test blockchain...\"\n+\n # 1 block, 50 XBT each == 50 XBT\n $CLI $B1ARGS setgenerate true 1\n WaitBlocks\n # 101 blocks, 1 mature == 50 XBT\n $CLI $B2ARGS setgenerate true 101\n WaitBlocks\n \n-CheckBalance $B1ARGS 50\n-CheckBalance $B2ARGS 50\n+CheckBalance \"$B1ARGS\" 50\n+CheckBalance \"$B2ARGS\" 50\n \n # Send 21 XBT from 1 to 3. Second\n # transaction will be child of first, and\n@@ -80,25 +82,25 @@ WaitBlocks\n \n # B1 should end up with 100 XBT in block rewards plus fees,\n # minus the 21 XBT sent to B3:\n-CheckBalance $B1ARGS \"100-21\"\n-CheckBalance $B3ARGS \"21\"\n+CheckBalance \"$B1ARGS\" \"100-21\"\n+CheckBalance \"$B3ARGS\" \"21\"\n \n # B1 should have two unspent outputs; create a couple\n # of raw transactions to send them to B3, submit them through\n # B2, and make sure both B1 and B3 pick them up properly:\n RAW1=$(CreateTxn1 $B1ARGS 1 $(Address $B3ARGS \"from1\" ) )\n RAW2=$(CreateTxn1 $B1ARGS 2 $(Address $B3ARGS \"from1\" ) )\n-RAWTXID1=$(SendRawTxn $B2ARGS $RAW1)\n-RAWTXID2=$(SendRawTxn $B2ARGS $RAW2)\n+RAWTXID1=$(SendRawTxn \"$B2ARGS\" $RAW1)\n+RAWTXID2=$(SendRawTxn \"$B2ARGS\" $RAW2)\n \n # Have B2 mine a block to confirm transactions:\n $CLI $B2ARGS setgenerate true 1\n WaitBlocks\n \n # Check balances after confirmation\n-CheckBalance $B1ARGS 0\n-CheckBalance $B3ARGS 100\n-CheckBalance $B3ARGS \"100-21\" \"from1\"\n+CheckBalance \"$B1ARGS\" 0\n+CheckBalance \"$B3ARGS\" 100\n+CheckBalance \"$B3ARGS\" \"100-21\" \"from1\"\n \n $CLI $B3ARGS stop > /dev/null 2>&1\n wait $B3PID\n@@ -108,6 +110,5 @@ $CLI $B1ARGS stop > /dev/null 2>&1\n wait $B1PID\n \n echo \"Tests successful, cleaning up\"\n-trap \"\" EXIT\n rm -rf $D\n exit 0"
      },
      {
        "sha": "fe16240fd041fc9b9870a5516dee42debda179a5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beca478992dd9a1b251d795d29f765231781699e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beca478992dd9a1b251d795d29f765231781699e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=beca478992dd9a1b251d795d29f765231781699e",
        "patch": "@@ -1867,7 +1867,7 @@ bool static DisconnectTip(CValidationState &state) {\n     // Write the chain state to disk, if necessary.\n     if (!WriteChainState(state))\n         return false;\n-    // Ressurect mempool transactions from the disconnected block.\n+    // Resurrect mempool transactions from the disconnected block.\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n         // ignore validation errors in resurrected transactions\n         CValidationState stateDummy; \n@@ -1878,6 +1878,11 @@ bool static DisconnectTip(CValidationState &state) {\n     mempool.check(pcoinsTip);\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);\n+    // Let wallets know transactions went from 1-confirmed to\n+    // 0-confirmed or conflicted:\n+    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n+        SyncWithWallets(tx.GetHash(), tx, NULL);\n+    }\n     return true;\n }\n \n@@ -1908,13 +1913,20 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew) {\n     if (!WriteChainState(state))\n         return false;\n     // Remove conflicting transactions from the mempool.\n+    list<CTransaction> txConflicted;\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n         mempool.remove(tx);\n-        mempool.removeConflicts(tx);\n+        list<CTransaction> r = mempool.removeConflicts(tx);\n+        txConflicted.insert(txConflicted.begin(), r.begin(), r.end());\n     }\n     mempool.check(pcoinsTip);\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew);\n+    // Tell wallet about transactions that went from mempool\n+    // to conflicted:\n+    BOOST_FOREACH(const CTransaction &tx, txConflicted) {\n+        SyncWithWallets(tx.GetHash(), tx, NULL);\n+    }\n     return true;\n }\n "
      },
      {
        "sha": "2d8fcd7a521faeecb27ec436a2a756b6ec72426e",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beca478992dd9a1b251d795d29f765231781699e/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beca478992dd9a1b251d795d29f765231781699e/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=beca478992dd9a1b251d795d29f765231781699e",
        "patch": "@@ -468,11 +468,12 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n     BOOST_FOREACH(const COutput& out, vOutputs)\n     {\n-        // unselect already spent, very unlikely scenario, this could happen when selected are spent elsewhere, like rpc or another computer\n-        if (out.tx->IsSpent(out.i))\n+        // unselect already spent, very unlikely scenario, this could happen\n+        // when selected are spent elsewhere, like rpc or another computer\n+        uint256 txhash = out.tx->GetHash();\n+        COutPoint outpt(txhash, out.i);\n+        if (model->isSpent(outpt))\n         {\n-            uint256 txhash = out.tx->GetHash();\n-            COutPoint outpt(txhash, out.i);\n             coinControl->UnSelect(outpt);\n             continue;\n         }"
      },
      {
        "sha": "d6386349fab20d2b8493f8fe64541df32fd27f2e",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beca478992dd9a1b251d795d29f765231781699e/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beca478992dd9a1b251d795d29f765231781699e/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=beca478992dd9a1b251d795d29f765231781699e",
        "patch": "@@ -501,6 +501,12 @@ void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vect\n     }\n }\n \n+bool WalletModel::isSpent(const COutPoint& outpoint) const\n+{\n+    LOCK(wallet->cs_wallet);\n+    return wallet->IsSpent(outpoint);\n+}\n+\n // AvailableCoins + LockedCoins grouped by wallet address (put change in one group with wallet address)\n void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const\n {"
      },
      {
        "sha": "39f846324654a6e90a7dc9956855a55e5e63f16a",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beca478992dd9a1b251d795d29f765231781699e/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beca478992dd9a1b251d795d29f765231781699e/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=beca478992dd9a1b251d795d29f765231781699e",
        "patch": "@@ -180,6 +180,7 @@ class WalletModel : public QObject\n \n     bool getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n     void getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs);\n+    bool isSpent(const COutPoint& outpoint) const;\n     void listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const;\n \n     bool isLockedCoin(uint256 hash, unsigned int n) const;"
      },
      {
        "sha": "55194b8f4cb49677fb47ce153477dbbcc182eac3",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beca478992dd9a1b251d795d29f765231781699e/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beca478992dd9a1b251d795d29f765231781699e/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=beca478992dd9a1b251d795d29f765231781699e",
        "patch": "@@ -128,7 +128,6 @@ Value importprivkey(const Array& params, bool fHelp)\n \n         if (fRescan) {\n             pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n-            pwalletMain->ReacceptWalletTransactions();\n         }\n     }\n \n@@ -216,7 +215,6 @@ Value importwallet(const Array& params, bool fHelp)\n \n     LogPrintf(\"Rescanning last %i blocks\\n\", chainActive.Height() - pindex->nHeight + 1);\n     pwalletMain->ScanForWalletTransactions(pindex);\n-    pwalletMain->ReacceptWalletTransactions();\n     pwalletMain->MarkDirty();\n \n     if (!fGood)"
      },
      {
        "sha": "b5254c3f9dbe32db4b1ec3739caa05ad5a787688",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beca478992dd9a1b251d795d29f765231781699e/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beca478992dd9a1b251d795d29f765231781699e/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=beca478992dd9a1b251d795d29f765231781699e",
        "patch": "@@ -560,7 +560,7 @@ int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMi\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        if (!IsFinalTx(wtx))\n+        if (!IsFinalTx(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n             continue;\n \n         int64_t nReceived, nSent, nFee;\n@@ -1330,13 +1330,14 @@ Value listaccounts(const Array& params, bool fHelp)\n         string strSentAccount;\n         list<pair<CTxDestination, int64_t> > listReceived;\n         list<pair<CTxDestination, int64_t> > listSent;\n-        if (wtx.GetBlocksToMaturity() > 0)\n+        int nDepth = wtx.GetDepthInMainChain();\n+        if (wtx.GetBlocksToMaturity() > 0 || nDepth < 0)\n             continue;\n         wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n         mapAccountBalances[strSentAccount] -= nFee;\n         BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& s, listSent)\n             mapAccountBalances[strSentAccount] -= s.second;\n-        if (wtx.GetDepthInMainChain() >= nMinDepth)\n+        if (nDepth >= nMinDepth)\n         {\n             BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& r, listReceived)\n                 if (pwalletMain->mapAddressBook.count(r.first))"
      },
      {
        "sha": "446800dc79ade0523332d9ad6a4ef8bfbbefff3a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 7,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beca478992dd9a1b251d795d29f765231781699e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beca478992dd9a1b251d795d29f765231781699e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=beca478992dd9a1b251d795d29f765231781699e",
        "patch": "@@ -86,43 +86,51 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry)\n }\n \n \n-bool CTxMemPool::remove(const CTransaction &tx, bool fRecursive)\n+list<CTransaction> CTxMemPool::remove(const CTransaction &tx, bool fRecursive)\n {\n     // Remove transaction from memory pool\n+    list<CTransaction> result;\n     {\n         LOCK(cs);\n         uint256 hash = tx.GetHash();\n         if (fRecursive) {\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n                 std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(hash, i));\n-                if (it != mapNextTx.end())\n-                    remove(*it->second.ptx, true);\n+                if (it == mapNextTx.end())\n+                    continue;\n+                list<CTransaction> r = remove(*it->second.ptx, true);\n+                result.insert(result.begin(), r.begin(), r.end());\n             }\n         }\n         if (mapTx.count(hash))\n         {\n+            result.push_front(tx);\n             BOOST_FOREACH(const CTxIn& txin, tx.vin)\n                 mapNextTx.erase(txin.prevout);\n             mapTx.erase(hash);\n             nTransactionsUpdated++;\n         }\n     }\n-    return true;\n+    return result;\n }\n \n-bool CTxMemPool::removeConflicts(const CTransaction &tx)\n+list<CTransaction> CTxMemPool::removeConflicts(const CTransaction &tx)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n+    list<CTransaction> result;\n     LOCK(cs);\n     BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n         std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(txin.prevout);\n         if (it != mapNextTx.end()) {\n             const CTransaction &txConflict = *it->second.ptx;\n             if (txConflict != tx)\n-                remove(txConflict, true);\n+            {\n+                list<CTransaction> r = remove(txConflict, true);\n+                result.insert(result.begin(), r.begin(), r.end());\n+            }\n         }\n     }\n-    return true;\n+    return result;\n }\n \n void CTxMemPool::clear()"
      },
      {
        "sha": "09802cb974041b6fbb262c4e83b29f3c520260eb",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beca478992dd9a1b251d795d29f765231781699e/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beca478992dd9a1b251d795d29f765231781699e/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=beca478992dd9a1b251d795d29f765231781699e",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_TXMEMPOOL_H\n #define BITCOIN_TXMEMPOOL_H\n \n+#include <list>\n+\n #include \"coins.h\"\n #include \"core.h\"\n #include \"sync.h\"\n@@ -72,8 +74,8 @@ class CTxMemPool\n     void setSanityCheck(bool _fSanityCheck) { fSanityCheck = _fSanityCheck; }\n \n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry);\n-    bool remove(const CTransaction &tx, bool fRecursive = false);\n-    bool removeConflicts(const CTransaction &tx);\n+    std::list<CTransaction> remove(const CTransaction &tx, bool fRecursive = false);\n+    std::list<CTransaction> removeConflicts(const CTransaction &tx);\n     void clear();\n     void queryHashes(std::vector<uint256>& vtxid);\n     void pruneSpent(const uint256& hash, CCoins &coins);"
      },
      {
        "sha": "ac5d1193128664b0c73073adfb56f1f039bac791",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 105,
        "changes": 177,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beca478992dd9a1b251d795d29f765231781699e/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beca478992dd9a1b251d795d29f765231781699e/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=beca478992dd9a1b251d795d29f765231781699e",
        "patch": "@@ -241,26 +241,28 @@ set<uint256> CWallet::GetConflicts(const uint256& txid) const\n         return result;\n     const CWalletTx& wtx = it->second;\n \n-    std::pair<TxConflicts::const_iterator, TxConflicts::const_iterator> range;\n+    std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range;\n \n     BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n     {\n-        range = mapTxConflicts.equal_range(txin.prevout);\n-        for (TxConflicts::const_iterator it = range.first; it != range.second; ++it)\n+        if (mapTxSpends.count(txin.prevout) <= 1)\n+            continue;  // No conflict if zero or one spends\n+        range = mapTxSpends.equal_range(txin.prevout);\n+        for (TxSpends::const_iterator it = range.first; it != range.second; ++it)\n             result.insert(it->second);\n     }\n     return result;\n }\n \n-void CWallet::SyncMetaData(pair<TxConflicts::iterator, TxConflicts::iterator> range)\n+void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)\n {\n     // We want all the wallet transactions in range to have the same metadata as\n     // the oldest (smallest nOrderPos).\n     // So: find smallest nOrderPos:\n \n     int nMinOrderPos = std::numeric_limits<int>::max();\n     const CWalletTx* copyFrom = NULL;\n-    for (TxConflicts::iterator it = range.first; it != range.second; ++it)\n+    for (TxSpends::iterator it = range.first; it != range.second; ++it)\n     {\n         const uint256& hash = it->second;\n         int n = mapWallet[hash].nOrderPos;\n@@ -271,7 +273,7 @@ void CWallet::SyncMetaData(pair<TxConflicts::iterator, TxConflicts::iterator> ra\n         }\n     }\n     // Now copy data from copyFrom to rest:\n-    for (TxConflicts::iterator it = range.first; it != range.second; ++it)\n+    for (TxSpends::iterator it = range.first; it != range.second; ++it)\n     {\n         const uint256& hash = it->second;\n         CWalletTx* copyTo = &mapWallet[hash];\n@@ -283,28 +285,47 @@ void CWallet::SyncMetaData(pair<TxConflicts::iterator, TxConflicts::iterator> ra\n         copyTo->nTimeSmart = copyFrom->nTimeSmart;\n         copyTo->fFromMe = copyFrom->fFromMe;\n         copyTo->strFromAccount = copyFrom->strFromAccount;\n-        // vfSpent not copied on purpose\n         // nOrderPos not copied on purpose\n         // cached members not copied on purpose\n     }\n }\n \n-void CWallet::AddToConflicts(const uint256& wtxhash)\n+// Outpoint is spent if any non-conflicted transaction\n+// spends it:\n+bool CWallet::IsSpent(const COutPoint& outpoint) const\n {\n-    assert(mapWallet.count(wtxhash));\n-    CWalletTx& thisTx = mapWallet[wtxhash];\n-    if (thisTx.IsCoinBase())\n-        return;\n+    pair<TxSpends::const_iterator, TxSpends::const_iterator> range;\n+    range = mapTxSpends.equal_range(outpoint);\n \n-    BOOST_FOREACH(const CTxIn& txin, thisTx.vin)\n+    for (TxSpends::const_iterator it = range.first; it != range.second; ++it)\n     {\n-        mapTxConflicts.insert(make_pair(txin.prevout, wtxhash));\n-\n-        pair<TxConflicts::iterator, TxConflicts::iterator> range;\n-        range = mapTxConflicts.equal_range(txin.prevout);\n-        if (range.first != range.second)\n-            SyncMetaData(range);\n+        const uint256& wtxid = it->second;\n+        std::map<uint256, CWalletTx>::const_iterator mit = mapWallet.find(wtxid);\n+        if (mit != mapWallet.end() && mit->second.GetDepthInMainChain() >= 0)\n+            return true; // Spent\n     }\n+    return false;\n+}\n+\n+void CWallet::AddToSpends(const COutPoint& outpoint, const uint256& wtxid)\n+{\n+    mapTxSpends.insert(make_pair(outpoint, wtxid));\n+\n+    pair<TxSpends::iterator, TxSpends::iterator> range;\n+    range = mapTxSpends.equal_range(outpoint);\n+    SyncMetaData(range);\n+}\n+\n+\n+void CWallet::AddToSpends(const uint256& wtxid)\n+{\n+    assert(mapWallet.count(wtxid));\n+    CWalletTx& thisTx = mapWallet[wtxid];\n+    if (thisTx.IsCoinBase()) // Coinbases don't spend anything!\n+        return;\n+\n+    BOOST_FOREACH(const CTxIn& txin, thisTx.vin)\n+        AddToSpends(txin.prevout, wtxid);\n }\n \n bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n@@ -425,33 +446,6 @@ CWallet::TxItems CWallet::OrderedTxItems(std::list<CAccountingEntry>& acentries,\n     return txOrdered;\n }\n \n-void CWallet::WalletUpdateSpent(const CTransaction &tx)\n-{\n-    // Anytime a signature is successfully verified, it's proof the outpoint is spent.\n-    // Update the wallet spent flag if it doesn't know due to wallet.dat being\n-    // restored from backup or the user making copies of wallet.dat.\n-    {\n-        LOCK(cs_wallet);\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        {\n-            map<uint256, CWalletTx>::iterator mi = mapWallet.find(txin.prevout.hash);\n-            if (mi != mapWallet.end())\n-            {\n-                CWalletTx& wtx = (*mi).second;\n-                if (txin.prevout.n >= wtx.vout.size())\n-                    LogPrintf(\"WalletUpdateSpent: bad wtx %s\\n\", wtx.GetHash().ToString());\n-                else if (!wtx.IsSpent(txin.prevout.n) && IsMine(wtx.vout[txin.prevout.n]))\n-                {\n-                    LogPrintf(\"WalletUpdateSpent found spent coin %sbc %s\\n\", FormatMoney(wtx.GetCredit()), wtx.GetHash().ToString());\n-                    wtx.MarkSpent(txin.prevout.n);\n-                    wtx.WriteToDisk();\n-                    NotifyTransactionChanged(this, txin.prevout.hash, CT_UPDATED);\n-                }\n-            }\n-        }\n-    }\n-}\n-\n void CWallet::MarkDirty()\n {\n     {\n@@ -468,7 +462,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n     if (fFromLoadWallet)\n     {\n         mapWallet[hash] = wtxIn;\n-        AddToConflicts(hash);\n+        AddToSpends(hash);\n     }\n     else\n     {\n@@ -528,7 +522,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n                              wtxIn.GetHash().ToString(),\n                              wtxIn.hashBlock.ToString());\n             }\n-            AddToConflicts(hash);\n+            AddToSpends(hash);\n         }\n \n         bool fUpdated = false;\n@@ -551,7 +545,6 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n                 wtx.fFromMe = wtxIn.fFromMe;\n                 fUpdated = true;\n             }\n-            fUpdated |= wtx.UpdateSpent(wtxIn.vfSpent);\n         }\n \n         //// debug print\n@@ -562,9 +555,6 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n             if (!wtx.WriteToDisk())\n                 return false;\n \n-        // since AddToWallet is called directly for self-originating transactions, check for consumption of own coins\n-        WalletUpdateSpent(wtx);\n-\n         // Notify UI of new or updated transaction\n         NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n \n@@ -598,14 +588,27 @@ bool CWallet::AddToWalletIfInvolvingMe(const uint256 &hash, const CTransaction&\n                 wtx.SetMerkleBranch(pblock);\n             return AddToWallet(wtx);\n         }\n-        else\n-            WalletUpdateSpent(tx);\n     }\n     return false;\n }\n \n-void CWallet::SyncTransaction(const uint256 &hash, const CTransaction& tx, const CBlock* pblock) {\n+void CWallet::SyncTransaction(const uint256 &hash, const CTransaction& tx, const CBlock* pblock)\n+{\n     AddToWalletIfInvolvingMe(hash, tx, pblock, true);\n+\n+    if (mapWallet.count(hash) == 0)\n+        return; // Not one of ours\n+\n+    // Break debit/credit balance caches:\n+    mapWallet[hash].MarkDirty();\n+    // If a transaction changes 'conflicted' state, that changes the balance\n+    // available of the outputs it spends. So force those to be\n+    // recomputed, also:\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        if (mapWallet.count(txin.prevout.hash))\n+            mapWallet[txin.prevout.hash].MarkDirty();\n+    }\n }\n \n void CWallet::EraseFromWallet(const uint256 &hash)\n@@ -918,54 +921,19 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n \n void CWallet::ReacceptWalletTransactions()\n {\n-    bool fRepeat = true;\n-    while (fRepeat)\n+    LOCK(cs_wallet);\n+    BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n     {\n-        LOCK(cs_wallet);\n-        fRepeat = false;\n-        bool fMissing = false;\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n-        {\n-            CWalletTx& wtx = item.second;\n-            if (wtx.IsCoinBase() && wtx.IsSpent(0))\n-                continue;\n+        const uint256& wtxid = item.first;\n+        CWalletTx& wtx = item.second;\n+        assert(wtx.GetHash() == wtxid);\n \n-            CCoins coins;\n-            bool fUpdated = false;\n-            bool fFound = pcoinsTip->GetCoins(wtx.GetHash(), coins);\n-            if (fFound || wtx.GetDepthInMainChain() > 0)\n-            {\n-                // Update fSpent if a tx got spent somewhere else by a copy of wallet.dat\n-                for (unsigned int i = 0; i < wtx.vout.size(); i++)\n-                {\n-                    if (wtx.IsSpent(i))\n-                        continue;\n-                    if ((i >= coins.vout.size() || coins.vout[i].IsNull()) && IsMine(wtx.vout[i]))\n-                    {\n-                        wtx.MarkSpent(i);\n-                        fUpdated = true;\n-                        fMissing = true;\n-                    }\n-                }\n-                if (fUpdated)\n-                {\n-                    LogPrintf(\"ReacceptWalletTransactions found spent coin %sbc %s\\n\", FormatMoney(wtx.GetCredit()), wtx.GetHash().ToString());\n-                    wtx.MarkDirty();\n-                    wtx.WriteToDisk();\n-                }\n-            }\n-            else\n-            {\n-                // Re-accept any txes of ours that aren't already in a block\n-                if (!wtx.IsCoinBase())\n-                    wtx.AcceptWalletTransaction();\n-            }\n-        }\n-        if (fMissing)\n+        int nDepth = wtx.GetDepthInMainChain();\n+\n+        if (!wtx.IsCoinBase() && nDepth < 0)\n         {\n-            // TODO: optimize this to scan just part of the block chain?\n-            if (ScanForWalletTransactions(chainActive.Genesis()))\n-                fRepeat = true;  // Found missing transactions: re-do re-accept.\n+            // Try to add to memory pool\n+            wtx.AcceptWalletTransaction();\n         }\n     }\n }\n@@ -1106,6 +1074,7 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n         LOCK(cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n+            const uint256& wtxid = it->first;\n             const CWalletTx* pcoin = &(*it).second;\n \n             if (!IsFinalTx(*pcoin))\n@@ -1122,7 +1091,7 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n                 continue;\n \n             for (unsigned int i = 0; i < pcoin->vout.size(); i++) {\n-                if (!(pcoin->IsSpent(i)) && IsMine(pcoin->vout[i]) &&\n+                if (!(IsSpent(COutPoint(wtxid, i))) && IsMine(pcoin->vout[i]) &&\n                     !IsLockedCoin((*it).first, i) && pcoin->vout[i].nValue > 0 &&\n                     (!coinControl || !coinControl->HasSelected() || coinControl->IsSelected((*it).first, i)))\n                         vCoins.push_back(COutput(pcoin, i, nDepth));\n@@ -1492,14 +1461,12 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n             // otherwise just for transaction history.\n             AddToWallet(wtxNew);\n \n-            // Mark old coins as spent\n+            // Notify that old coins are spent\n             set<CWalletTx*> setCoins;\n             BOOST_FOREACH(const CTxIn& txin, wtxNew.vin)\n             {\n                 CWalletTx &coin = mapWallet[txin.prevout.hash];\n                 coin.BindWallet(this);\n-                coin.MarkSpent(txin.prevout.n);\n-                coin.WriteToDisk();\n                 NotifyTransactionChanged(this, coin.GetHash(), CT_UPDATED);\n             }\n \n@@ -1852,7 +1819,7 @@ std::map<CTxDestination, int64_t> CWallet::GetAddressBalances()\n                 if(!ExtractDestination(pcoin->vout[i].scriptPubKey, addr))\n                     continue;\n \n-                int64_t n = pcoin->IsSpent(i) ? 0 : pcoin->vout[i].nValue;\n+                int64_t n = IsSpent(COutPoint(walletEntry.first, i)) ? 0 : pcoin->vout[i].nValue;\n \n                 if (!balances.count(addr))\n                     balances[addr] = 0;"
      },
      {
        "sha": "46d99b4d39a87f92f0702e83e41640656b018778",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 15,
        "deletions": 65,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beca478992dd9a1b251d795d29f765231781699e/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beca478992dd9a1b251d795d29f765231781699e/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=beca478992dd9a1b251d795d29f765231781699e",
        "patch": "@@ -108,11 +108,15 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     int64_t nNextResend;\n     int64_t nLastResend;\n \n-    // Used to detect and report conflicted transactions:\n-    typedef std::multimap<COutPoint, uint256> TxConflicts;\n-    TxConflicts mapTxConflicts;\n-    void AddToConflicts(const uint256& wtxhash);\n-    void SyncMetaData(std::pair<TxConflicts::iterator, TxConflicts::iterator>);\n+    // Used to keep track of spent outpoints, and\n+    // detect and report conflicts (double-spends or\n+    // mutated transactions where the mutant gets mined).\n+    typedef std::multimap<COutPoint, uint256> TxSpends;\n+    TxSpends mapTxSpends;\n+    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid);\n+    void AddToSpends(const uint256& wtxid);\n+\n+    void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n \n public:\n     /// Main wallet lock.\n@@ -175,6 +179,8 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n     bool SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const;\n \n+    bool IsSpent(const COutPoint& outpoint) const;\n+\n     bool IsLockedCoin(uint256 hash, unsigned int n) const;\n     void LockCoin(COutPoint& output);\n     void UnlockCoin(COutPoint& output);\n@@ -234,7 +240,6 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     void SyncTransaction(const uint256 &hash, const CTransaction& tx, const CBlock* pblock);\n     bool AddToWalletIfInvolvingMe(const uint256 &hash, const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     void EraseFromWallet(const uint256 &hash);\n-    void WalletUpdateSpent(const CTransaction& prevout);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions();\n@@ -447,7 +452,6 @@ class CWalletTx : public CMerkleTx\n     unsigned int nTimeSmart;\n     char fFromMe;\n     std::string strFromAccount;\n-    std::vector<char> vfSpent; // which outputs are already spent\n     int64_t nOrderPos;  // position in ordered transaction list\n \n     // memory only\n@@ -493,7 +497,6 @@ class CWalletTx : public CMerkleTx\n         nTimeSmart = 0;\n         fFromMe = false;\n         strFromAccount.clear();\n-        vfSpent.clear();\n         fDebitCached = false;\n         fCreditCached = false;\n         fImmatureCreditCached = false;\n@@ -518,15 +521,6 @@ class CWalletTx : public CMerkleTx\n         {\n             pthis->mapValue[\"fromaccount\"] = pthis->strFromAccount;\n \n-            std::string str;\n-            BOOST_FOREACH(char f, vfSpent)\n-            {\n-                str += (f ? '1' : '0');\n-                if (f)\n-                    fSpent = true;\n-            }\n-            pthis->mapValue[\"spent\"] = str;\n-\n             WriteOrderPos(pthis->nOrderPos, pthis->mapValue);\n \n             if (nTimeSmart)\n@@ -546,12 +540,6 @@ class CWalletTx : public CMerkleTx\n         {\n             pthis->strFromAccount = pthis->mapValue[\"fromaccount\"];\n \n-            if (mapValue.count(\"spent\"))\n-                BOOST_FOREACH(char c, pthis->mapValue[\"spent\"])\n-                    pthis->vfSpent.push_back(c != '0');\n-            else\n-                pthis->vfSpent.assign(vout.size(), fSpent);\n-\n             ReadOrderPos(pthis->nOrderPos, pthis->mapValue);\n \n             pthis->nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(pthis->mapValue[\"timesmart\"]) : 0;\n@@ -564,26 +552,6 @@ class CWalletTx : public CMerkleTx\n         pthis->mapValue.erase(\"timesmart\");\n     )\n \n-    // marks certain txout's as spent\n-    // returns true if any update took place\n-    bool UpdateSpent(const std::vector<char>& vfNewSpent)\n-    {\n-        bool fReturn = false;\n-        for (unsigned int i = 0; i < vfNewSpent.size(); i++)\n-        {\n-            if (i == vfSpent.size())\n-                break;\n-\n-            if (vfNewSpent[i] && !vfSpent[i])\n-            {\n-                vfSpent[i] = true;\n-                fReturn = true;\n-                fAvailableCreditCached = false;\n-            }\n-        }\n-        return fReturn;\n-    }\n-\n     // make sure balances are recalculated\n     void MarkDirty()\n     {\n@@ -599,27 +567,6 @@ class CWalletTx : public CMerkleTx\n         MarkDirty();\n     }\n \n-    void MarkSpent(unsigned int nOut)\n-    {\n-        if (nOut >= vout.size())\n-            throw std::runtime_error(\"CWalletTx::MarkSpent() : nOut out of range\");\n-        vfSpent.resize(vout.size());\n-        if (!vfSpent[nOut])\n-        {\n-            vfSpent[nOut] = true;\n-            fAvailableCreditCached = false;\n-        }\n-    }\n-\n-    bool IsSpent(unsigned int nOut) const\n-    {\n-        if (nOut >= vout.size())\n-            throw std::runtime_error(\"CWalletTx::IsSpent() : nOut out of range\");\n-        if (nOut >= vfSpent.size())\n-            return false;\n-        return (!!vfSpent[nOut]);\n-    }\n-\n     int64_t GetDebit() const\n     {\n         if (vin.empty())\n@@ -661,6 +608,9 @@ class CWalletTx : public CMerkleTx\n \n     int64_t GetAvailableCredit(bool fUseCache=true) const\n     {\n+        if (pwallet == 0)\n+            return 0;\n+\n         // Must wait until coinbase is safely deep enough in the chain before valuing it\n         if (IsCoinBase() && GetBlocksToMaturity() > 0)\n             return 0;\n@@ -671,7 +621,7 @@ class CWalletTx : public CMerkleTx\n         int64_t nCredit = 0;\n         for (unsigned int i = 0; i < vout.size(); i++)\n         {\n-            if (!IsSpent(i))\n+            if (!pwallet->IsSpent(COutPoint(GetHash(), i)))\n             {\n                 const CTxOut &txout = vout[i];\n                 nCredit += pwallet->GetCredit(txout);"
      }
    ]
  },
  {
    "sha": "49129486b88aeedbbfc8014ed06b5a345f0eb341",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTEyOTQ4NmI4OGFlZWRiYmZjODAxNGVkMDZiNWEzNDVmMGViMzQx",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-02-18T02:21:36Z"
      },
      "committer": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-02-18T02:21:36Z"
      },
      "message": "zapwallettx: remove erased tx's from mapWallet",
      "tree": {
        "sha": "4db56cf72f473796894ce326d416834a302b4414",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4db56cf72f473796894ce326d416834a302b4414"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49129486b88aeedbbfc8014ed06b5a345f0eb341",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49129486b88aeedbbfc8014ed06b5a345f0eb341",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49129486b88aeedbbfc8014ed06b5a345f0eb341",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49129486b88aeedbbfc8014ed06b5a345f0eb341/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "022aa3d04395389cc1a9321c1f716bb7a6d8ef7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/022aa3d04395389cc1a9321c1f716bb7a6d8ef7a"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 18,
      "deletions": 12
    },
    "files": [
      {
        "sha": "f857297a268f81344adfee9dd5e03e1e5a3ca2b5",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49129486b88aeedbbfc8014ed06b5a345f0eb341/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49129486b88aeedbbfc8014ed06b5a345f0eb341/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=49129486b88aeedbbfc8014ed06b5a345f0eb341",
        "patch": "@@ -1529,7 +1529,8 @@ DBErrors CWallet::ZapWalletTx(const CWalletTx& wtx)\n {\n     if (!fFileBacked)\n         return DB_LOAD_OK;\n-    DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,\"cr+\").ZapWalletTx(this, wtx);\n+    vector<CWalletTx> vErasedTxes;\n+    DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,\"cr+\").ZapWalletTx(this, wtx, vErasedTxes);\n     if (nZapWalletTxRet == DB_NEED_REWRITE)\n     {\n         if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n@@ -1542,6 +1543,13 @@ DBErrors CWallet::ZapWalletTx(const CWalletTx& wtx)\n         }\n     }\n \n+    {\n+        // remove zapped CWalletDB txes from mapWallet also\n+        LOCK(cs_wallet);\n+        BOOST_FOREACH(const CWalletTx& tx, vErasedTxes)\n+            mapWallet.erase(tx.GetHash());\n+    }\n+\n     if (nZapWalletTxRet != DB_LOAD_OK)\n         return nZapWalletTxRet;\n "
      },
      {
        "sha": "b211364ab787eff2e30e13870d1a848b36f6f73c",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49129486b88aeedbbfc8014ed06b5a345f0eb341/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49129486b88aeedbbfc8014ed06b5a345f0eb341/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=49129486b88aeedbbfc8014ed06b5a345f0eb341",
        "patch": "@@ -764,25 +764,23 @@ DBErrors CWalletDB::ZapWalletTxes(CWallet* pwallet)\n     return DB_LOAD_OK;\n }\n \n-DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, const CWalletTx& wtx)\n+DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, const CWalletTx& wtx, vector<CWalletTx>& vErasedTxes)\n {\n     LogPrintf(\"ZapWalletTx %s\\n\", wtx.GetHash().GetHex());\n \n     // erase child TX's\n     for (unsigned int nVoutIndex = 0; nVoutIndex < wtx.vout.size(); nVoutIndex++)\n     {\n-        for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin();\n-             it != pwallet->mapWallet.end();\n-             ++it)\n+        BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, pwallet->mapWallet)\n         {\n-            const CWalletTx& wtxPotentialChild = (*it).second;\n+            const CWalletTx& wtxPotentialChild = walletEntry.second;\n             BOOST_FOREACH(const CTxIn& txin, wtxPotentialChild.vin)\n             {\n                 if (txin.prevout.hash == wtx.GetHash() && txin.prevout.n == nVoutIndex)\n                 {\n                     LogPrintf(\"ZapWalletTx found child tx %s\\n\", wtxPotentialChild.GetHash().GetHex());\n                     //TODO: recursion could be a problem if it gets too deep\n-                    DBErrors ret = ZapWalletTx(pwallet, wtxPotentialChild);\n+                    DBErrors ret = ZapWalletTx(pwallet, wtxPotentialChild, vErasedTxes);\n                     if (ret != DB_LOAD_OK)\n                         return ret;\n                     break;\n@@ -795,11 +793,9 @@ DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, const CWalletTx& wtx)\n     for (unsigned int nVinIndex = 0; nVinIndex < wtx.vin.size(); nVinIndex++)\n     {\n         const CTxIn& txin = wtx.vin[nVinIndex];\n-        for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin();\n-             it != pwallet->mapWallet.end();\n-             ++it)\n+        BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, pwallet->mapWallet)\n         {\n-            CWalletTx& wtxPotentialParent = (*it).second;\n+            CWalletTx& wtxPotentialParent = walletEntry.second;\n             if (wtxPotentialParent.GetHash() == txin.prevout.hash)\n             {\n                 LogPrintf(\"ZapWalletTx found parent tx %s\\n\", wtxPotentialParent.GetHash().GetHex());\n@@ -812,6 +808,8 @@ DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, const CWalletTx& wtx)\n     // erase wallet TX\n     if (!EraseTx(wtx.GetHash()))\n         return DB_CORRUPT;\n+    // add to list of erased TX to be cleaned up from pwallet->mapWallet\n+    vErasedTxes.push_back(wtx);\n \n     return DB_LOAD_OK;\n }"
      },
      {
        "sha": "32a1650d884faf98d7f14b3b4d7dcea7889ca53b",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49129486b88aeedbbfc8014ed06b5a345f0eb341/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49129486b88aeedbbfc8014ed06b5a345f0eb341/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=49129486b88aeedbbfc8014ed06b5a345f0eb341",
        "patch": "@@ -124,7 +124,7 @@ class CWalletDB : public CDB\n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTxes(CWallet* pwallet, std::vector<uint256>& vTxHash);\n     DBErrors ZapWalletTxes(CWallet* pwallet);\n-    DBErrors ZapWalletTx(CWallet* pwallet, const CWalletTx& wtx);\n+    DBErrors ZapWalletTx(CWallet* pwallet, const CWalletTx& wtx, std::vector<CWalletTx>& vErasedTxes);\n     static bool Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys);\n     static bool Recover(CDBEnv& dbenv, std::string filename);\n };"
      }
    ]
  },
  {
    "sha": "1d39973a680b4a8fb2cc94797879f6d54ad9d26c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDM5OTczYTY4MGI0YThmYjJjYzk0Nzk3ODc5ZjZkNTRhZDlkMjZj",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-02-18T02:26:59Z"
      },
      "committer": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-02-18T02:26:59Z"
      },
      "message": "start implementing zapwallettx tests...",
      "tree": {
        "sha": "608477e49f8d05613a0bf3166d61c676152566f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/608477e49f8d05613a0bf3166d61c676152566f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d39973a680b4a8fb2cc94797879f6d54ad9d26c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d39973a680b4a8fb2cc94797879f6d54ad9d26c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d39973a680b4a8fb2cc94797879f6d54ad9d26c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d39973a680b4a8fb2cc94797879f6d54ad9d26c/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49129486b88aeedbbfc8014ed06b5a345f0eb341",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49129486b88aeedbbfc8014ed06b5a345f0eb341",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49129486b88aeedbbfc8014ed06b5a345f0eb341"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 94,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4c88d740ee82756e5629dd54e219b4d415fd7c8d",
        "filename": "qa/rpc-tests/util.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d39973a680b4a8fb2cc94797879f6d54ad9d26c/qa/rpc-tests/util.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d39973a680b4a8fb2cc94797879f6d54ad9d26c/qa/rpc-tests/util.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.sh?ref=1d39973a680b4a8fb2cc94797879f6d54ad9d26c",
        "patch": "@@ -60,7 +60,7 @@ function Send {\n   to=$2\n   amount=$3\n   address=$(Address $to)\n-  txid=$( ${SENDANDWAIT} $CLI $from sendtoaddress $address $amount )\n+  ${SENDANDWAIT} $CLI $from sendtoaddress $address $amount\n }\n \n # Use: Unspent <datadir> <n'th-last-unspent> <var>"
      },
      {
        "sha": "49d44cc4c567c26893d401c6b7a28f53bfc803a8",
        "filename": "qa/rpc-tests/zapwallettx.sh",
        "status": "added",
        "additions": 93,
        "deletions": 0,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d39973a680b4a8fb2cc94797879f6d54ad9d26c/qa/rpc-tests/zapwallettx.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d39973a680b4a8fb2cc94797879f6d54ad9d26c/qa/rpc-tests/zapwallettx.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettx.sh?ref=1d39973a680b4a8fb2cc94797879f6d54ad9d26c",
        "patch": "@@ -0,0 +1,93 @@\n+#!/usr/bin/env bash\n+\n+# Test zapping a single wallet transaction\n+\n+if [ $# -lt 1 ]; then\n+        echo \"Usage: $0 path_to_binaries\"\n+        echo \"e.g. $0 ../../src\"\n+        exit 1\n+fi\n+\n+set -f\n+\n+BITCOIND=${1}/bitcoind\n+CLI=${1}/bitcoin-cli\n+\n+DIR=\"${BASH_SOURCE%/*}\"\n+SENDANDWAIT=\"${DIR}/send.sh\"\n+if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n+. \"$DIR/util.sh\"\n+\n+D=$(mktemp -d test.XXXXX)\n+\n+D1=${D}/node1\n+CreateDataDir \"$D1\" port=11000 rpcport=11001\n+B1ARGS=\"-datadir=$D1\"\n+$BITCOIND $B1ARGS &\n+B1PID=$!\n+\n+D2=${D}/node2\n+CreateDataDir \"$D2\" port=11010 rpcport=11011 connect=127.0.0.1:11000\n+B2ARGS=\"-datadir=$D2\"\n+$BITCOIND $B2ARGS &\n+B2PID=$!\n+\n+D3=${D}/node3\n+CreateDataDir \"$D3\" port=11020 rpcport=11021 connect=127.0.0.1:11000\n+B3ARGS=\"-datadir=$D3\"\n+$BITCOIND $BITCOINDARGS $B3ARGS &\n+B3PID=$!\n+\n+# Wait until all three nodes are at the same block number\n+function WaitBlocks {\n+    while :\n+    do\n+        sleep 1\n+        declare -i BLOCKS1=$( GetBlocks $B1ARGS )\n+        declare -i BLOCKS2=$( GetBlocks $B2ARGS )\n+        declare -i BLOCKS3=$( GetBlocks $B3ARGS )\n+        if (( BLOCKS1 == BLOCKS2 && BLOCKS2 == BLOCKS3 ))\n+        then\n+            break\n+        fi\n+    done\n+}\n+\n+echo \"Generating test blockchain...\"\n+\n+# 1 block, 50 XBT each == 50 XBT\n+$CLI $B1ARGS setgenerate true 1\n+WaitBlocks\n+# 101 blocks, 1 mature == 50 XBT\n+$CLI $B2ARGS setgenerate true 101\n+WaitBlocks\n+\n+CheckBalance \"$B1ARGS\" 50\n+CheckBalance \"$B2ARGS\" 50\n+\n+# Send 21 XBT from 1 to 3\n+TXID=$(Send $B1ARGS $B3ARGS 21)\n+\n+# Have B2 mine 100 blocks so B1 transactions are mature:\n+$CLI $B2ARGS setgenerate true 100\n+WaitBlocks\n+\n+# B1 should end up with 50 XBT in block rewards,\n+# minus the 21 XBT sent to B3:\n+CheckBalance \"$B1ARGS\" \"50-21\"\n+CheckBalance \"$B3ARGS\" \"21\"\n+\n+# Zap send tx from B1, balance should again be 50 XBT\n+$CLI \"$B1ARGS\" zapwallettx $TXID\n+CheckBalance \"$B1ARGS\" \"50\"\n+\n+$CLI $B3ARGS stop > /dev/null 2>&1\n+wait $B3PID\n+$CLI $B2ARGS stop > /dev/null 2>&1\n+wait $B2PID\n+$CLI $B1ARGS stop > /dev/null 2>&1\n+wait $B1PID\n+\n+echo \"Tests successful, cleaning up\"\n+rm -rf $D\n+exit 0"
      }
    ]
  },
  {
    "sha": "c3443d64db93251d14d2da5603ce5d5523ae35e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzQ0M2Q2NGRiOTMyNTFkMTRkMmRhNTYwM2NlNWQ1NTIzYWUzNWUx",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-02-17T18:18:36Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-02-18T17:18:15Z"
      },
      "message": "Merge branch 'master' into vfspent",
      "tree": {
        "sha": "90f389c3be20e33ea3be22b0c1cfa035b4126129",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90f389c3be20e33ea3be22b0c1cfa035b4126129"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3443d64db93251d14d2da5603ce5d5523ae35e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3443d64db93251d14d2da5603ce5d5523ae35e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3443d64db93251d14d2da5603ce5d5523ae35e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3443d64db93251d14d2da5603ce5d5523ae35e1/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "beca478992dd9a1b251d795d29f765231781699e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beca478992dd9a1b251d795d29f765231781699e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/beca478992dd9a1b251d795d29f765231781699e"
      },
      {
        "sha": "0a0cf1433769e495839c5695f388b277b9ff2dfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a0cf1433769e495839c5695f388b277b9ff2dfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a0cf1433769e495839c5695f388b277b9ff2dfa"
      }
    ],
    "stats": {
      "total": 395,
      "additions": 271,
      "deletions": 124
    },
    "files": [
      {
        "sha": "f0d25fd7a2350c0940a2776cb7bae83347283847",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -36,3 +36,14 @@ Configuring the github-merge tool for the bitcoin repository is done in the foll\n     git config githubmerge.testcmd \"make -j4 check\" (adapt to whatever you want to use for testing)\n     git config --global user.signingkey mykeyid (if you want to GPG sign)\n \n+## fix-copyright-headers.py\n+\n+Every year newly updated files need to have its copyright headers updated to reflect the current year.\n+If you run this script from src/ it will automatically update the year on the copyright header for all\n+.cpp and .h files if these have a git commit from the current year.\n+\n+For example a file changed in 2014 (with 2014 being the current year):\n+```// Copyright (c) 2009-2013 The Bitcoin developers```\n+\n+would be changed to:\n+```// Copyright (c) 2009-2014 The Bitcoin developers```\n\\ No newline at end of file"
      },
      {
        "sha": "52fdc99144b4762bc157365ca231b256cbb282d2",
        "filename": "contrib/devtools/fix-copyright-headers.py",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/contrib/devtools/fix-copyright-headers.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/contrib/devtools/fix-copyright-headers.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/fix-copyright-headers.py?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -0,0 +1,53 @@\n+#!/usr/bin/env python\n+'''\n+Run this script inside of src/ and it will look for all the files\n+that were changed this year that still have the last year in the\n+copyright headers, and it will fix the headers on that file using\n+a perl regex one liner.\n+\n+For example: if it finds something like this and we're in 2014\n+\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+\n+it will change it to\n+\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+\n+It will do this for all the files in the folder and its children.\n+\n+Author: @gubatron\n+'''\n+import os\n+import time\n+\n+year = time.gmtime()[0]\n+last_year = year - 1\n+command = \"perl -pi -e 's/%s The Bitcoin/%s The Bitcoin/' %s\"\n+listFilesCommand = \"find . | grep %s\"\n+\n+extensions = [\".cpp\",\".h\"]\n+\n+def getLastGitModifiedDate(filePath):\n+  gitGetLastCommitDateCommand = \"git log \" + filePath +\" | grep Date | head -n 1\"\n+  p = os.popen(gitGetLastCommitDateCommand)\n+  result = \"\"\n+  for l in p:\n+    result = l\n+    break\n+  result = result.replace(\"\\n\",\"\")\n+  return result\n+\n+n=1\n+for extension in extensions:\n+  foundFiles = os.popen(listFilesCommand % extension)\n+  for filePath in foundFiles:\n+    filePath = filePath[1:-1]\n+    if filePath.endswith(extension):\n+      filePath = os.getcwd() + filePath\n+      modifiedTime = getLastGitModifiedDate(filePath)\n+      if len(modifiedTime) > 0 and str(year) in modifiedTime:\n+        print n,\"Last Git Modified: \", modifiedTime, \" - \", filePath\n+        os.popen(command % (last_year,year,filePath))\n+        n = n + 1\n+\n+"
      },
      {
        "sha": "f5cdab5325742cbc19dca993d912946c922d3f1f",
        "filename": "contrib/linearize/example-linearize.cfg",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/contrib/linearize/example-linearize.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/contrib/linearize/example-linearize.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/example-linearize.cfg?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,7 +1,7 @@\n \n # bitcoind RPC settings\n rpcuser=someuser\n-rpcpass=somepassword\n+rpcpassword=somepassword\n host=127.0.0.1\n port=8332\n "
      },
      {
        "sha": "650f7d36849046e6613facf6778e9cc835f97bf4",
        "filename": "contrib/linearize/linearize.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/contrib/linearize/linearize.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/contrib/linearize/linearize.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize.py?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -71,7 +71,7 @@ def getblock(rpc, settings, n):\n \n def get_blocks(settings):\n \trpc = BitcoinRPC(settings['host'], settings['port'],\n-\t\t\t settings['rpcuser'], settings['rpcpass'])\n+\t\t\t settings['rpcuser'], settings['rpcpassword'])\n \n \toutf = open(settings['output'], 'ab')\n \n@@ -118,7 +118,7 @@ def get_blocks(settings):\n \t\tsettings['min_height'] = 0\n \tif 'max_height' not in settings:\n \t\tsettings['max_height'] = 279000\n-\tif 'rpcuser' not in settings or 'rpcpass' not in settings:\n+\tif 'rpcuser' not in settings or 'rpcpassword' not in settings:\n \t\tprint \"Missing username and/or password in cfg file\"\n \t\tsys.exit(1)\n "
      },
      {
        "sha": "8bf0b50bc09e870cb2e924bbf7bf9a965eb3620a",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -59,6 +59,27 @@ functioning both as a server and as a RPC client. The RPC client functionality\n executable, 'bitcoin-cli'. The RPC client code will eventually be removed from\n bitcoind, but will be kept for backwards compatibility for a release or two.\n \n+`walletpassphrase` RPC\n+-----------------------\n+\n+The behavior of the `walletpassphrase` RPC when the wallet is already unlocked\n+has changed between 0.8 and 0.9.\n+\n+The 0.8 behavior of `walletpassphrase` is to fail when the wallet is already unlocked:\n+\n+    > walletpassphrase 1000\n+    walletunlocktime = now + 1000\n+    > walletpassphrase 10\n+    Error: Wallet is already unlocked (old unlock time stays)\n+\n+The new behavior of `walletpassphrase` is to set a new unlock time overriding\n+the old one:\n+\n+    > walletpassphrase 1000\n+    walletunlocktime = now + 1000\n+    > walletpassphrase 10\n+    walletunlocktime = now + 10 (overriding the old unlock time)\n+\n 0.9.0rc1 Release notes\n =======================\n "
      },
      {
        "sha": "11e02764946db369ffa6eb2f84428ff1ab4bdea8",
        "filename": "qa/rpc-tests/txnmall.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/qa/rpc-tests/txnmall.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/qa/rpc-tests/txnmall.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txnmall.sh?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -25,13 +25,13 @@ D=$(mktemp -d test.XXXXX)\n \n D1=${D}/node1\n CreateDataDir $D1 port=11000 rpcport=11001\n-B1ARGS=\"-datadir=$D1 -debug\"\n+B1ARGS=\"-datadir=$D1\"\n $BITCOIND $B1ARGS &\n B1PID=$!\n \n D2=${D}/node2\n CreateDataDir $D2 port=11010 rpcport=11011\n-B2ARGS=\"-datadir=$D2 -debug\"\n+B2ARGS=\"-datadir=$D2\"\n $BITCOIND $B2ARGS &\n B2PID=$!\n "
      },
      {
        "sha": "4dd3716e801719ab1de33a92b128f024bc722bf1",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "5e6566a7ac78a0410593f550e3e4af76b296cb16",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "f5c460761e36fa9cde3318eca0d6abd2561380c0",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "592512c94777cd151ec503d28d250a1e97cfdff5",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "9ba77105b4b93c736c12eacdfa71a1b36bce47f8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -338,6 +338,8 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n             LogPrintf(\"Importing bootstrap.dat...\\n\");\n             LoadExternalBlockFile(file);\n             RenameOver(pathBootstrap, pathBootstrapOld);\n+        } else {\n+            LogPrintf(\"Warning: Could not open bootstrap file %s\\n\", pathBootstrap.string());\n         }\n     }\n \n@@ -346,8 +348,10 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n         FILE *file = fopen(path.string().c_str(), \"rb\");\n         if (file) {\n             CImportingNow imp;\n-            LogPrintf(\"Importing %s...\\n\", path.string());\n+            LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n             LoadExternalBlockFile(file);\n+        } else {\n+            LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.string());\n         }\n     }\n }"
      },
      {
        "sha": "43c737a599a3e975c4a3802addd181b9788deead",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2012-2013 The Bitcoin developers\n+// Copyright (c) 2012-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "df95bb1a7819f8b317a8194f6a08238a60a95e4f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -443,7 +443,7 @@ bool IsStandardTx(const CTransaction& tx, string& reason)\n             return false;\n         }\n         if (!txin.scriptSig.HasCanonicalPushes()) {\n-            reason = \"non-canonical-push\";\n+            reason = \"scriptsig-non-canonical-push\";\n             return false;\n         }\n     }"
      },
      {
        "sha": "781562854f418845325d63ec1ee32cbfec993bcb",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -77,12 +77,6 @@ static const unsigned char REJECT_CHECKPOINT = 0x43;\n \n \n extern CScript COINBASE_FLAGS;\n-\n-\n-\n-\n-\n-\n extern CCriticalSection cs_main;\n extern CTxMemPool mempool;\n extern std::map<uint256, CBlockIndex*> mapBlockIndex;\n@@ -96,7 +90,6 @@ extern bool fBenchmark;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n extern unsigned int nCoinCacheSize;\n-extern bool fHaveGUI;\n \n // Minimum disk space required - used in CheckDiskSpace()\n static const uint64_t nMinDiskSpace = 52428800;"
      },
      {
        "sha": "73dd0a749d7049b86fd6563b72a407a1adbb65b4",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "359e629295ec7df1b300e43137daa708fb06419a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "8995f70da44d116274a37f4b2636d2a3cb802a7b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "d5b75d6afdb1c7dab24b4f604d35172fd666b16e",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "32c861b0d9decf000cc6ace73a542965796a25ff",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "c77a92f02066f893af564094948d972adbfda839",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "162009f5de7a5e7339bb1bab7b05dee0a43c786f",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "25ad0c66af1dda590db35e254798c28fc8f470aa",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -19,12 +19,12 @@ BitcoinAmountField::BitcoinAmountField(QWidget *parent) :\n     amount(0),\n     currentUnit(-1)\n {\n+    nSingleStep = 100000; // satoshis\n+\n     amount = new QDoubleSpinBox(this);\n     amount->setLocale(QLocale::c());\n-    amount->setDecimals(8);\n     amount->installEventFilter(this);\n     amount->setMaximumWidth(170);\n-    amount->setSingleStep(0.001);\n \n     QHBoxLayout *layout = new QHBoxLayout(this);\n     layout->addWidget(amount);\n@@ -159,11 +159,7 @@ void BitcoinAmountField::unitChanged(int idx)\n     // Set max length after retrieving the value, to prevent truncation\n     amount->setDecimals(BitcoinUnits::decimals(currentUnit));\n     amount->setMaximum(qPow(10, BitcoinUnits::amountDigits(currentUnit)) - qPow(10, -amount->decimals()));\n-\n-    if (currentUnit == BitcoinUnits::uBTC)\n-        amount->setSingleStep(0.01);\n-    else\n-        amount->setSingleStep(0.001);\n+    amount->setSingleStep((double)nSingleStep / (double)BitcoinUnits::factor(currentUnit));\n \n     if (valid)\n     {\n@@ -182,3 +178,9 @@ void BitcoinAmountField::setDisplayUnit(int newUnit)\n {\n     unit->setValue(newUnit);\n }\n+\n+void BitcoinAmountField::setSingleStep(qint64 step)\n+{\n+    nSingleStep = step;\n+    unitChanged(unit->currentIndex());\n+}"
      },
      {
        "sha": "521a9ed561b3d006bb1e64ebf10abaa62cf43b44",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -26,6 +26,9 @@ class BitcoinAmountField: public QWidget\n     qint64 value(bool *valid=0) const;\n     void setValue(qint64 value);\n \n+    /** Set single step in satoshis **/\n+    void setSingleStep(qint64 step);\n+\n     /** Make read-only **/\n     void setReadOnly(bool fReadOnly);\n \n@@ -56,6 +59,7 @@ class BitcoinAmountField: public QWidget\n     QDoubleSpinBox *amount;\n     QValueComboBox *unit;\n     int currentUnit;\n+    qint64 nSingleStep;\n \n     void setText(const QString &text);\n     QString text() const;"
      },
      {
        "sha": "f66fab496cea40bae3ce31da8113f59d018800f3",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "0cc1ebc502972fa074645a6282ec7e9e7c18168e",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "b4a9f1f5801cc8ac92d28f1e3d08695443333ef6",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 83,
        "deletions": 46,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -27,52 +27,6 @@\n        <string>&amp;Main</string>\n       </attribute>\n       <layout class=\"QVBoxLayout\" name=\"verticalLayout_Main\">\n-       <item>\n-        <widget class=\"QLabel\" name=\"transactionFeeInfoLabel\">\n-         <property name=\"text\">\n-          <string>Optional transaction fee per kB that helps make sure your transactions are processed quickly. Most transactions are 1 kB.</string>\n-         </property>\n-         <property name=\"textFormat\">\n-          <enum>Qt::PlainText</enum>\n-         </property>\n-         <property name=\"wordWrap\">\n-          <bool>true</bool>\n-         </property>\n-        </widget>\n-       </item>\n-       <item>\n-        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_1_Main\">\n-         <item>\n-          <widget class=\"QLabel\" name=\"transactionFeeLabel\">\n-           <property name=\"text\">\n-            <string>Pay transaction &amp;fee</string>\n-           </property>\n-           <property name=\"textFormat\">\n-            <enum>Qt::PlainText</enum>\n-           </property>\n-           <property name=\"buddy\">\n-            <cstring>transactionFee</cstring>\n-           </property>\n-          </widget>\n-         </item>\n-         <item>\n-          <widget class=\"BitcoinAmountField\" name=\"transactionFee\"/>\n-         </item>\n-         <item>\n-          <spacer name=\"horizontalSpacer_1_Main\">\n-           <property name=\"orientation\">\n-            <enum>Qt::Horizontal</enum>\n-           </property>\n-           <property name=\"sizeHint\" stdset=\"0\">\n-            <size>\n-             <width>40</width>\n-             <height>20</height>\n-            </size>\n-           </property>\n-          </spacer>\n-         </item>\n-        </layout>\n-       </item>\n        <item>\n         <widget class=\"QCheckBox\" name=\"bitcoinAtStartup\">\n          <property name=\"toolTip\">\n@@ -194,6 +148,89 @@\n        </item>\n       </layout>\n      </widget>\n+     <widget class=\"QWidget\" name=\"tabWallet\">\n+      <attribute name=\"title\">\n+       <string>W&amp;allet</string>\n+      </attribute>\n+      <layout class=\"QVBoxLayout\" name=\"verticalLayout_Network\">\n+       <item>\n+        <widget class=\"QLabel\" name=\"transactionFeeInfoLabel\">\n+         <property name=\"text\">\n+          <string>Optional transaction fee per kB that helps make sure your transactions are processed quickly. Most transactions are 1 kB.</string>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::PlainText</enum>\n+         </property>\n+         <property name=\"wordWrap\">\n+          <bool>true</bool>\n+         </property>\n+        </widget>\n+       </item>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_1_Main\">\n+         <item>\n+          <widget class=\"QLabel\" name=\"transactionFeeLabel\">\n+           <property name=\"text\">\n+            <string>Pay transaction &amp;fee</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+           <property name=\"buddy\">\n+            <cstring>transactionFee</cstring>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"BitcoinAmountField\" name=\"transactionFee\"/>\n+         </item>\n+         <item>\n+          <spacer name=\"horizontalSpacer_1_Main\">\n+           <property name=\"orientation\">\n+            <enum>Qt::Horizontal</enum>\n+           </property>\n+           <property name=\"sizeHint\" stdset=\"0\">\n+            <size>\n+             <width>40</width>\n+             <height>20</height>\n+            </size>\n+           </property>\n+          </spacer>\n+         </item>\n+        </layout>\n+       </item>\n+       <item>\n+        <widget class=\"QLabel\" name=\"label\">\n+         <property name=\"text\">\n+          <string>If you disable the spending of unconfirmed change, the change from a transaction cannot be used until that transaction has at least one confirmation. This also affects how your balance is computed.</string>\n+         </property>\n+         <property name=\"wordWrap\">\n+          <bool>true</bool>\n+         </property>\n+        </widget>\n+       </item>\n+       <item>\n+        <widget class=\"QCheckBox\" name=\"spendZeroConfChange\">\n+         <property name=\"text\">\n+          <string>Spend unconfirmed change  (experts only)</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item>\n+        <spacer name=\"verticalSpacer\">\n+         <property name=\"orientation\">\n+          <enum>Qt::Vertical</enum>\n+         </property>\n+         <property name=\"sizeHint\" stdset=\"0\">\n+          <size>\n+           <width>20</width>\n+           <height>40</height>\n+          </size>\n+         </property>\n+        </spacer>\n+       </item>\n+      </layout>\n+     </widget>\n      <widget class=\"QWidget\" name=\"tabNetwork\">\n       <attribute name=\"title\">\n        <string>&amp;Network</string>"
      },
      {
        "sha": "9f6588bc9ede44a496a90ccf9060a1cf19c6efe1",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "fc1258827e5535ba0296a823325744ab91be4e6b",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "f4eb7ef07ed9a191b276cb1f7e6039e1ecd6028e",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -15,6 +15,7 @@\n #include \"optionsmodel.h\"\n \n #include \"netbase.h\"\n+#include \"main.h\"\n \n #include <QDir>\n #include <QIntValidator>\n@@ -93,6 +94,7 @@ OptionsDialog::OptionsDialog(QWidget *parent) :\n     }\n \n     ui->unit->setModel(new BitcoinUnits(this));\n+    ui->transactionFee->setSingleStep(CTransaction::nMinTxFee);\n \n     /* Widget-to-option mapper */\n     mapper = new MonitoredDataMapper(this);\n@@ -148,11 +150,14 @@ void OptionsDialog::setModel(OptionsModel *model)\n void OptionsDialog::setMapper()\n {\n     /* Main */\n-    mapper->addMapping(ui->transactionFee, OptionsModel::Fee);\n     mapper->addMapping(ui->bitcoinAtStartup, OptionsModel::StartAtStartup);\n     mapper->addMapping(ui->threadsScriptVerif, OptionsModel::ThreadsScriptVerif);\n     mapper->addMapping(ui->databaseCache, OptionsModel::DatabaseCache);\n \n+    /* Wallet */\n+    mapper->addMapping(ui->transactionFee, OptionsModel::Fee);\n+    mapper->addMapping(ui->spendZeroConfChange, OptionsModel::SpendZeroConfChange);\n+\n     /* Network */\n     mapper->addMapping(ui->mapPortUpnp, OptionsModel::MapPortUPnP);\n "
      },
      {
        "sha": "eff73b7702030741067c9a83d003b53f43f7a1cc",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -76,6 +76,11 @@ void OptionsModel::Init()\n     nTransactionFee = settings.value(\"nTransactionFee\").toLongLong(); // if -paytxfee is set, this will be overridden later in init.cpp\n     if (mapArgs.count(\"-paytxfee\"))\n         strOverriddenByCommandLine += \"-paytxfee \";\n+\n+    if (!settings.contains(\"bSpendZeroConfChange\"))\n+        settings.setValue(\"bSpendZeroConfChange\", true);\n+    if (!SoftSetBoolArg(\"-spendzeroconfchange\", settings.value(\"bSpendZeroConfChange\").toBool()))\n+        strOverriddenByCommandLine += \"-spendzeroconfchange \";\n #endif\n \n     if (!settings.contains(\"nDatabaseCache\"))\n@@ -184,6 +189,8 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n             // Todo: Consider to revert back to use just nTransactionFee here, if we don't want\n             // -paytxfee to update our QSettings!\n             return settings.value(\"nTransactionFee\");\n+        case SpendZeroConfChange:\n+            return settings.value(\"bSpendZeroConfChange\");\n #endif\n         case DisplayUnit:\n             return nDisplayUnit;\n@@ -274,6 +281,12 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             settings.setValue(\"nTransactionFee\", (qint64)nTransactionFee);\n             emit transactionFeeChanged(nTransactionFee);\n             break;\n+        case SpendZeroConfChange:\n+            if (settings.value(\"bSpendZeroConfChange\") != value) {\n+                settings.setValue(\"bSpendZeroConfChange\", value);\n+                setRestartRequired(true);\n+            }\n+            break;\n #endif\n         case DisplayUnit:\n             nDisplayUnit = value.toInt();"
      },
      {
        "sha": "a3487ddd2e2e36476f08bace336b418532502c5f",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -40,6 +40,7 @@ class OptionsModel : public QAbstractListModel\n         CoinControlFeatures,    // bool\n         ThreadsScriptVerif,     // int\n         DatabaseCache,          // int\n+        SpendZeroConfChange,    // bool\n         OptionIDRowCount,\n     };\n "
      },
      {
        "sha": "d84d09c57d6c8039f532baf8b52b0e8eef44b22e",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "7539645b4779f7a6216adbb15ea7498ae188a966",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "12d2235782afdf641df814750341c1c69bd2ffcb",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "844d62518cef826a2698150005d9241fab779363",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "d4cc5078aac86c58f9701238fad17ecadc12b3c0",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "bd29efee86a3d8a6a36351dc36ed292bc0db3479",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "e5da01546af66d3b7e268712166d35e82793e31b",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "33621e54b029f2f47bac408d87223cc553c7c264",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "cacf5dc49bf8da070384d081aec319fee769583c",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "d79038d81d13a3dbf3ba3d24a48b52c1feb43824",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "4aebaa1e7f0b79f777bf957fae68695fc078490d",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "8cfaed27c7de529be83494008e3fea10ce738550",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "7d76204ba47ab295dce69b6ba70e4c071215458f",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "24992db465f86b5f5bcc278b800e502ad61f6f58",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -38,9 +38,9 @@ void AboutDialog::setModel(ClientModel *model)\n          * 32 and 64 bit builds. On other architectures, 32/64 bit may be more ambigious.\n          */\n #if defined(__x86_64__)\n-        version += \" (64-bit)\";\n+        version += tr(\" (%1-bit)\").arg(64);\n #elif defined(__i386__ )\n-        version += \" (32-bit)\";\n+        version += tr(\" (%1-bit)\").arg(32);\n #endif\n         ui->versionLabel->setText(version);\n     }"
      },
      {
        "sha": "641704f0a7dc33322ac5ee619b837b65f714c0e7",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "28a9169e273b467547fe5cd91f24ae65fc0313e2",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "635d4ac19bc3882d68b2ddbe6dbb45c99ea993ca",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -23,13 +23,13 @@ using namespace std;\n void EnsureWalletIsUnlocked();\n \n std::string static EncodeDumpTime(int64_t nTime) {\n-    return DateTimeStrFormat(\"%Y-%m-%\"PRId64\"T%H:%M:%SZ\", nTime);\n+    return DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", nTime);\n }\n \n int64_t static DecodeDumpTime(const std::string &str) {\n-    static boost::posix_time::time_input_facet facet(\"%Y-%m-%dT%H:%M:%SZ\");\n     static const boost::posix_time::ptime epoch = boost::posix_time::from_time_t(0);\n-    const std::locale loc(std::locale::classic(), &facet);\n+    static const std::locale loc(std::locale::classic(),\n+        new boost::posix_time::time_input_facet(\"%Y-%m-%dT%H:%M:%SZ\"));\n     std::istringstream iss(str);\n     iss.imbue(loc);\n     boost::posix_time::ptime ptime(boost::date_time::not_a_date_time);"
      },
      {
        "sha": "353fb77b889fb38327f37eaae79279e9744886bd",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "b764349338a758a498c3130e05e2b9a6c0ce60c7",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "4ea84e99bea1a1cf19024654c59d793ba5bd26d1",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "80cdb34f15358666d11a0fe5c62fe5675afdec8d",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "e2bdc80aef15758516baaa47dc937499dc054789",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "4d110124b21fc2e0638c5bfd38b6eb599812d45d",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "0dd583c8eb40513bde8ce3f2cbebc0eece134e08",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "5c1bbe2d36086596405ad657ef50c0cb9b29cd6b",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -1497,7 +1497,7 @@ Value gettransaction(const Array& params, bool fHelp)\n     entry.push_back(Pair(\"details\", details));\n \n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-    ssTx << wtx;\n+    ssTx << static_cast<CTransaction>(wtx);\n     string strHex = HexStr(ssTx.begin(), ssTx.end());\n     entry.push_back(Pair(\"hex\", strHex));\n \n@@ -1575,6 +1575,9 @@ Value walletpassphrase(const Array& params, bool fHelp)\n             \"\\nArguments:\\n\"\n             \"1. \\\"passphrase\\\"     (string, required) The wallet passphrase\\n\"\n             \"2. timeout            (numeric, required) The time to keep the decryption key in seconds.\\n\"\n+            \"\\nNote:\\n\"\n+            \"Issuing the walletpassphrase command while the wallet is already unlocked will set a new unlock\\n\"\n+            \"time that overrides the old one.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nunlock the wallet for 60 seconds\\n\"\n             + HelpExampleCli(\"walletpassphrase\", \"\\\"my pass phrase\\\" 60\") +"
      },
      {
        "sha": "d06639a1120fd78fe2a581f999389ac56c037afb",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "8cfd1c2e031028bc27b6af385e5c040d682d1923",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "6f7627e0904f597df3da7ab2842529252b54ae83",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "02044c8649996b172d8c95a6bb05ba186f2d6a4e",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "b3816a54b66df6456343c56f9ffa50a61945927e",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3443d64db93251d14d2da5603ce5d5523ae35e1/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      }
    ]
  },
  {
    "sha": "e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNWQyZDBjNzAyZWQ0NzQ1ZGFlMTgwMjdhNWE1ZjFmNGFjOGQxNzkz",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-02-18T21:46:44Z"
      },
      "committer": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-02-18T21:46:44Z"
      },
      "message": "Merge branch 'vfspent' of https://github.com/gavinandresen/bitcoin-git into zapwallettx-single-novfspent\n\nModification of spent outputs no longer needed.\n\nClear wallet tx cache variables\n\nConflicts:\n\tsrc/wallet.h",
      "tree": {
        "sha": "0d01b4e66ae131cf31f7f231fa0bf1ce7cd2f1af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d01b4e66ae131cf31f7f231fa0bf1ce7cd2f1af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d39973a680b4a8fb2cc94797879f6d54ad9d26c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d39973a680b4a8fb2cc94797879f6d54ad9d26c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d39973a680b4a8fb2cc94797879f6d54ad9d26c"
      },
      {
        "sha": "beca478992dd9a1b251d795d29f765231781699e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beca478992dd9a1b251d795d29f765231781699e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/beca478992dd9a1b251d795d29f765231781699e"
      }
    ],
    "stats": {
      "total": 685,
      "additions": 438,
      "deletions": 247
    },
    "files": [
      {
        "sha": "e9f834a6029e5ace59288f648cac0c7eb1159a38",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
        "patch": "@@ -1,6 +1,13 @@\n Regression tests of RPC interface\n =================================\n \n-wallet.sh : Test wallet send/receive code (see comments for details)\n+Bash scripts that use the RPC interface and command-line bitcoin-cli to test\n+full functionality in -regtest mode.\n \n-util.sh : useful re-usable functions \n+wallet.sh : Exercise wallet send/receive code.\n+\n+txnmall.sh : Test proper accounting of malleable transactions\n+\n+conflictedbalance.sh : More testing of malleable transaction handling\n+\n+util.sh : useful re-usable bash functions "
      },
      {
        "sha": "9d854d2d87bfba07bd5aedcf4bbde2a37b4d6690",
        "filename": "qa/rpc-tests/conflictedbalance.sh",
        "status": "added",
        "additions": 143,
        "deletions": 0,
        "changes": 143,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/qa/rpc-tests/conflictedbalance.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/qa/rpc-tests/conflictedbalance.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/conflictedbalance.sh?ref=e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
        "patch": "@@ -0,0 +1,143 @@\n+#!/usr/bin/env bash\n+\n+# Test marking of spent outputs\n+\n+# Create a transaction graph with four transactions,\n+# A/B/C/D\n+# C spends A\n+# D spends B and C\n+\n+# Then simulate C being mutated, to create C'\n+#  that is mined.\n+# A is still (correctly) considered spent.\n+# B should be treated as unspent\n+\n+if [ $# -lt 1 ]; then\n+        echo \"Usage: $0 path_to_binaries\"\n+        echo \"e.g. $0 ../../src\"\n+        exit 1\n+fi\n+\n+set -f\n+\n+BITCOIND=${1}/bitcoind\n+CLI=${1}/bitcoin-cli\n+\n+DIR=\"${BASH_SOURCE%/*}\"\n+SENDANDWAIT=\"${DIR}/send.sh\"\n+if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n+. \"$DIR/util.sh\"\n+\n+D=$(mktemp -d test.XXXXX)\n+\n+# Two nodes; one will play the part of merchant, the\n+# other an evil transaction-mutating miner.\n+\n+D1=${D}/node1\n+CreateDataDir $D1 port=11000 rpcport=11001\n+B1ARGS=\"-datadir=$D1 -debug=mempool\"\n+$BITCOIND $B1ARGS &\n+B1PID=$!\n+\n+D2=${D}/node2\n+CreateDataDir $D2 port=11010 rpcport=11011\n+B2ARGS=\"-datadir=$D2 -debug=mempool\"\n+$BITCOIND $B2ARGS &\n+B2PID=$!\n+\n+# Wait until all four nodes are at the same block number\n+function WaitBlocks {\n+    while :\n+    do\n+        sleep 1\n+        declare -i BLOCKS1=$( GetBlocks $B1ARGS )\n+        declare -i BLOCKS2=$( GetBlocks $B2ARGS )\n+        if (( BLOCKS1 == BLOCKS2 ))\n+        then\n+            break\n+        fi\n+    done\n+}\n+\n+# Wait until node has $N peers\n+function WaitPeers {\n+    while :\n+    do\n+        declare -i PEERS=$( $CLI $1 getconnectioncount )\n+        if (( PEERS == \"$2\" ))\n+        then\n+            break\n+        fi\n+        sleep 1\n+    done\n+}\n+\n+echo \"Generating test blockchain...\"\n+\n+# Start with B2 connected to B1:\n+$CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n+WaitPeers \"$B1ARGS\" 1\n+\n+# 2 block, 50 XBT each == 100 XBT\n+# These will be transactions \"A\" and \"B\"\n+$CLI $B1ARGS setgenerate true 2\n+\n+WaitBlocks\n+# 100 blocks, 0 mature == 0 XBT\n+$CLI $B2ARGS setgenerate true 100\n+WaitBlocks\n+\n+CheckBalance \"$B1ARGS\" 100\n+CheckBalance \"$B2ARGS\" 0\n+\n+# restart B2 with no connection\n+$CLI $B2ARGS stop > /dev/null 2>&1\n+wait $B2PID\n+$BITCOIND $B2ARGS &\n+B2PID=$!\n+\n+B1ADDRESS=$( $CLI $B1ARGS getnewaddress )\n+B2ADDRESS=$( $CLI $B2ARGS getnewaddress )\n+\n+# Transaction C: send-to-self, spend A\n+TXID_C=$( $CLI $B1ARGS sendtoaddress $B1ADDRESS 50.0)\n+\n+# Transaction D: spends B and C\n+TXID_D=$( $CLI $B1ARGS sendtoaddress $B2ADDRESS 100.0)\n+\n+CheckBalance \"$B1ARGS\" 0\n+\n+# Mutate TXID_C and add it to B2's memory pool:\n+RAWTX_C=$( $CLI $B1ARGS getrawtransaction $TXID_C )\n+\n+# ... mutate C to create C'\n+L=${RAWTX_C:82:2}\n+NEWLEN=$( printf \"%x\" $(( 16#$L + 1 )) )\n+MUTATEDTX_C=${RAWTX_C:0:82}${NEWLEN}4c${RAWTX_C:84}\n+# ... give mutated tx1 to B2:\n+MUTATEDTXID=$( $CLI $B2ARGS sendrawtransaction $MUTATEDTX_C )\n+\n+echo \"TXID_C: \" $TXID_C\n+echo \"Mutated: \" $MUTATEDTXID\n+\n+# Re-connect nodes, and have both nodes mine some blocks:\n+$CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n+WaitPeers \"$B1ARGS\" 1\n+\n+# Having B2 mine the next block puts the mutated\n+# transaction C in the chain:\n+$CLI $B2ARGS setgenerate true 1\n+WaitBlocks\n+\n+# B1 should still be able to spend 100, because D is conflicted\n+# so does not count as a spend of B\n+CheckBalance \"$B1ARGS\" 100\n+\n+$CLI $B2ARGS stop > /dev/null 2>&1\n+wait $B2PID\n+$CLI $B1ARGS stop > /dev/null 2>&1\n+wait $B1PID\n+\n+echo \"Tests successful, cleaning up\"\n+rm -rf $D\n+exit 0"
      },
      {
        "sha": "86369d1d4f95fe50d0ae5f70a12b8b62be40edb6",
        "filename": "qa/rpc-tests/txnmall.sh",
        "status": "modified",
        "additions": 31,
        "deletions": 27,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/qa/rpc-tests/txnmall.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/qa/rpc-tests/txnmall.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txnmall.sh?ref=e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
        "patch": "@@ -1,13 +1,15 @@\n #!/usr/bin/env bash\n \n-# Test block generation and basic wallet sending\n+# Test proper accounting with malleable transactions\n \n if [ $# -lt 1 ]; then\n         echo \"Usage: $0 path_to_binaries\"\n         echo \"e.g. $0 ../../src\"\n         exit 1\n fi\n \n+set -f\n+\n BITCOIND=${1}/bitcoind\n CLI=${1}/bitcoin-cli\n \n@@ -33,16 +35,14 @@ B2ARGS=\"-datadir=$D2 -debug\"\n $BITCOIND $B2ARGS &\n B2PID=$!\n \n-trap \"kill -9 $B1PID $B2PID; rm -rf $D\" EXIT\n-\n-# Wait until all four nodes are at the same block number\n+# Wait until both nodes are at the same block number\n function WaitBlocks {\n     while :\n     do\n         sleep 1\n-        BLOCKS1=$( GetBlocks $B1ARGS )\n-        BLOCKS2=$( GetBlocks $B2ARGS )\n-        if (( $BLOCKS1 == $BLOCKS2 ))\n+        declare -i BLOCKS1=$( GetBlocks $B1ARGS )\n+        declare -i BLOCKS2=$( GetBlocks $B2ARGS )\n+        if (( BLOCKS1 == BLOCKS2 ))\n         then\n             break\n         fi\n@@ -53,15 +53,17 @@ function WaitBlocks {\n function WaitPeers {\n     while :\n     do\n-        PEERS=$( $CLI $1 getconnectioncount )\n-        if (( \"$PEERS\" == $2 ))\n+        declare -i PEERS=$( $CLI $1 getconnectioncount )\n+        if (( PEERS == \"$2\" ))\n         then\n             break\n         fi\n         sleep 1\n     done\n }\n \n+echo \"Generating test blockchain...\"\n+\n # Start with B2 connected to B1:\n $CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n WaitPeers \"$B1ARGS\" 1\n@@ -74,27 +76,27 @@ WaitBlocks\n $CLI $B2ARGS setgenerate true 100\n WaitBlocks\n \n-CheckBalance $B1ARGS 50\n-CheckBalance $B2ARGS 0\n+CheckBalance \"$B1ARGS\" 50\n+CheckBalance \"$B2ARGS\" 0\n \n # restart B2 with no connection\n $CLI $B2ARGS stop > /dev/null 2>&1\n wait $B2PID\n $BITCOIND $B2ARGS &\n B2PID=$!\n \n-B2ADDRESS=$( $CLI $B2ARGS getnewaddress )\n+B2ADDRESS=$( $CLI $B2ARGS getaccountaddress \"from1\" )\n \n # Have B1 create two transactions; second will\n # spend change from first, since B1 starts with only a single\n # 50 bitcoin output:\n-TXID1=$( $CLI $B1ARGS sendtoaddress $B2ADDRESS 1.0 )\n-TXID2=$( $CLI $B1ARGS sendtoaddress $B2ADDRESS 2.0 )\n+$CLI $B1ARGS move \"\" \"foo\" 10.0 > /dev/null\n+$CLI $B1ARGS move \"\" \"bar\" 10.0 > /dev/null\n+TXID1=$( $CLI $B1ARGS sendfrom foo $B2ADDRESS 1.0 0)\n+TXID2=$( $CLI $B1ARGS sendfrom bar $B2ADDRESS 2.0 0)\n \n # Mutate TXID1 and add it to B2's memory pool:\n RAWTX1=$( $CLI $B1ARGS getrawtransaction $TXID1 )\n-RAWTX2=$( $CLI $B1ARGS getrawtransaction $TXID2 )\n-# ... mutate RAWTX1:\n # RAWTX1 is hex-encoded, serialized transaction. So each\n # byte is two characters; we'll prepend the first\n # \"push\" in the scriptsig with OP_PUSHDATA1 (0x4c),\n@@ -119,26 +121,28 @@ echo \"TXID1: \" $TXID1\n echo \"Mutated: \" $MUTATEDTXID\n \n # Re-connect nodes, and have B2 mine a block\n+# containing the mutant:\n $CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n-WaitPeers \"$B1ARGS\" 1\n-\n $CLI $B2ARGS setgenerate true 1\n WaitBlocks\n \n+# B1 should have 49 BTC; the 2 BTC send is\n+# conflicted, and should not count in\n+# balances.\n+CheckBalance \"$B1ARGS\" 49\n+CheckBalance \"$B1ARGS\" 49 \"*\"\n+CheckBalance \"$B1ARGS\" 9 \"foo\"\n+CheckBalance \"$B1ARGS\" 10 \"bar\"\n+\n+# B2 should have 51 BTC\n+CheckBalance \"$B2ARGS\" 51\n+CheckBalance \"$B2ARGS\" 1 \"from1\"\n+\n $CLI $B2ARGS stop > /dev/null 2>&1\n wait $B2PID\n $CLI $B1ARGS stop > /dev/null 2>&1\n wait $B1PID\n \n-trap \"\" EXIT\n-\n-echo \"Done, bitcoind's shut down. To rerun/poke around:\"\n-echo \"${1}/bitcoind -datadir=$D1 -daemon\"\n-echo \"${1}/bitcoind -datadir=$D2 -daemon -connect=127.0.0.1:11000\"\n-echo \"To cleanup:\"\n-echo \"killall bitcoind; rm -rf test.*\"\n-exit 0\n-\n echo \"Tests successful, cleaning up\"\n rm -rf $D\n exit 0"
      },
      {
        "sha": "c376c9b6b5b5740c9620fffe16534bbd22b9d8c7",
        "filename": "qa/rpc-tests/util.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/qa/rpc-tests/util.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/qa/rpc-tests/util.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.sh?ref=e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
        "patch": "@@ -41,8 +41,9 @@ function AssertEqual {\n \n # CheckBalance -datadir=... amount account minconf\n function CheckBalance {\n+  declare -i EXPECT=\"$2\"\n   B=$( $CLI $1 getbalance $3 $4 )\n-  if (( $( echo \"$B == $2\" | bc ) == 0 ))\n+  if (( $( echo \"$B == $EXPECT\" | bc ) == 0 ))\n   then\n     echoerr \"bad balance: $B (expected $2)\"\n     exit 1\n@@ -87,5 +88,5 @@ function SendRawTxn {\n # Use: GetBlocks <datadir>\n # returns number of blocks from getinfo\n function GetBlocks {\n-    ExtractKey blocks \"$( $CLI $1 getinfo )\"\n+    $CLI $1 getblockcount\n }"
      },
      {
        "sha": "2940566af96356949d8d2ae8203b657acecaca03",
        "filename": "qa/rpc-tests/wallet.sh",
        "status": "modified",
        "additions": 20,
        "deletions": 19,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/qa/rpc-tests/wallet.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/qa/rpc-tests/wallet.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.sh?ref=e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
        "patch": "@@ -8,6 +8,8 @@ if [ $# -lt 1 ]; then\n         exit 1\n fi\n \n+set -f\n+\n BITCOIND=${1}/bitcoind\n CLI=${1}/bitcoin-cli\n \n@@ -19,49 +21,49 @@ if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n D=$(mktemp -d test.XXXXX)\n \n D1=${D}/node1\n-CreateDataDir $D1 port=11000 rpcport=11001\n+CreateDataDir \"$D1\" port=11000 rpcport=11001\n B1ARGS=\"-datadir=$D1\"\n $BITCOIND $B1ARGS &\n B1PID=$!\n \n D2=${D}/node2\n-CreateDataDir $D2 port=11010 rpcport=11011 connect=127.0.0.1:11000\n+CreateDataDir \"$D2\" port=11010 rpcport=11011 connect=127.0.0.1:11000\n B2ARGS=\"-datadir=$D2\"\n $BITCOIND $B2ARGS &\n B2PID=$!\n \n D3=${D}/node3\n-CreateDataDir $D3 port=11020 rpcport=11021 connect=127.0.0.1:11000\n+CreateDataDir \"$D3\" port=11020 rpcport=11021 connect=127.0.0.1:11000\n B3ARGS=\"-datadir=$D3\"\n $BITCOIND $BITCOINDARGS $B3ARGS &\n B3PID=$!\n \n-trap \"kill -9 $B1PID $B2PID $B3PID; rm -rf $D\" EXIT\n-\n # Wait until all three nodes are at the same block number\n function WaitBlocks {\n     while :\n     do\n         sleep 1\n-        BLOCKS1=$( GetBlocks $B1ARGS )\n-        BLOCKS2=$( GetBlocks $B2ARGS )\n-        BLOCKS3=$( GetBlocks $B3ARGS )\n-        if (( $BLOCKS1 == $BLOCKS2 && $BLOCKS2 == $BLOCKS3 ))\n+        declare -i BLOCKS1=$( GetBlocks $B1ARGS )\n+        declare -i BLOCKS2=$( GetBlocks $B2ARGS )\n+        declare -i BLOCKS3=$( GetBlocks $B3ARGS )\n+        if (( BLOCKS1 == BLOCKS2 && BLOCKS2 == BLOCKS3 ))\n         then\n             break\n         fi\n     done\n }\n \n+echo \"Generating test blockchain...\"\n+\n # 1 block, 50 XBT each == 50 XBT\n $CLI $B1ARGS setgenerate true 1\n WaitBlocks\n # 101 blocks, 1 mature == 50 XBT\n $CLI $B2ARGS setgenerate true 101\n WaitBlocks\n \n-CheckBalance $B1ARGS 50\n-CheckBalance $B2ARGS 50\n+CheckBalance \"$B1ARGS\" 50\n+CheckBalance \"$B2ARGS\" 50\n \n # Send 21 XBT from 1 to 3. Second\n # transaction will be child of first, and\n@@ -80,25 +82,25 @@ WaitBlocks\n \n # B1 should end up with 100 XBT in block rewards plus fees,\n # minus the 21 XBT sent to B3:\n-CheckBalance $B1ARGS \"100-21\"\n-CheckBalance $B3ARGS \"21\"\n+CheckBalance \"$B1ARGS\" \"100-21\"\n+CheckBalance \"$B3ARGS\" \"21\"\n \n # B1 should have two unspent outputs; create a couple\n # of raw transactions to send them to B3, submit them through\n # B2, and make sure both B1 and B3 pick them up properly:\n RAW1=$(CreateTxn1 $B1ARGS 1 $(Address $B3ARGS \"from1\" ) )\n RAW2=$(CreateTxn1 $B1ARGS 2 $(Address $B3ARGS \"from1\" ) )\n-RAWTXID1=$(SendRawTxn $B2ARGS $RAW1)\n-RAWTXID2=$(SendRawTxn $B2ARGS $RAW2)\n+RAWTXID1=$(SendRawTxn \"$B2ARGS\" $RAW1)\n+RAWTXID2=$(SendRawTxn \"$B2ARGS\" $RAW2)\n \n # Have B2 mine a block to confirm transactions:\n $CLI $B2ARGS setgenerate true 1\n WaitBlocks\n \n # Check balances after confirmation\n-CheckBalance $B1ARGS 0\n-CheckBalance $B3ARGS 100\n-CheckBalance $B3ARGS \"100-21\" \"from1\"\n+CheckBalance \"$B1ARGS\" 0\n+CheckBalance \"$B3ARGS\" 100\n+CheckBalance \"$B3ARGS\" \"100-21\" \"from1\"\n \n $CLI $B3ARGS stop > /dev/null 2>&1\n wait $B3PID\n@@ -108,6 +110,5 @@ $CLI $B1ARGS stop > /dev/null 2>&1\n wait $B1PID\n \n echo \"Tests successful, cleaning up\"\n-trap \"\" EXIT\n rm -rf $D\n exit 0"
      },
      {
        "sha": "fe16240fd041fc9b9870a5516dee42debda179a5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
        "patch": "@@ -1867,7 +1867,7 @@ bool static DisconnectTip(CValidationState &state) {\n     // Write the chain state to disk, if necessary.\n     if (!WriteChainState(state))\n         return false;\n-    // Ressurect mempool transactions from the disconnected block.\n+    // Resurrect mempool transactions from the disconnected block.\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n         // ignore validation errors in resurrected transactions\n         CValidationState stateDummy; \n@@ -1878,6 +1878,11 @@ bool static DisconnectTip(CValidationState &state) {\n     mempool.check(pcoinsTip);\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);\n+    // Let wallets know transactions went from 1-confirmed to\n+    // 0-confirmed or conflicted:\n+    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n+        SyncWithWallets(tx.GetHash(), tx, NULL);\n+    }\n     return true;\n }\n \n@@ -1908,13 +1913,20 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew) {\n     if (!WriteChainState(state))\n         return false;\n     // Remove conflicting transactions from the mempool.\n+    list<CTransaction> txConflicted;\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n         mempool.remove(tx);\n-        mempool.removeConflicts(tx);\n+        list<CTransaction> r = mempool.removeConflicts(tx);\n+        txConflicted.insert(txConflicted.begin(), r.begin(), r.end());\n     }\n     mempool.check(pcoinsTip);\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew);\n+    // Tell wallet about transactions that went from mempool\n+    // to conflicted:\n+    BOOST_FOREACH(const CTransaction &tx, txConflicted) {\n+        SyncWithWallets(tx.GetHash(), tx, NULL);\n+    }\n     return true;\n }\n "
      },
      {
        "sha": "2d8fcd7a521faeecb27ec436a2a756b6ec72426e",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
        "patch": "@@ -468,11 +468,12 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n     BOOST_FOREACH(const COutput& out, vOutputs)\n     {\n-        // unselect already spent, very unlikely scenario, this could happen when selected are spent elsewhere, like rpc or another computer\n-        if (out.tx->IsSpent(out.i))\n+        // unselect already spent, very unlikely scenario, this could happen\n+        // when selected are spent elsewhere, like rpc or another computer\n+        uint256 txhash = out.tx->GetHash();\n+        COutPoint outpt(txhash, out.i);\n+        if (model->isSpent(outpt))\n         {\n-            uint256 txhash = out.tx->GetHash();\n-            COutPoint outpt(txhash, out.i);\n             coinControl->UnSelect(outpt);\n             continue;\n         }"
      },
      {
        "sha": "d6386349fab20d2b8493f8fe64541df32fd27f2e",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
        "patch": "@@ -501,6 +501,12 @@ void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vect\n     }\n }\n \n+bool WalletModel::isSpent(const COutPoint& outpoint) const\n+{\n+    LOCK(wallet->cs_wallet);\n+    return wallet->IsSpent(outpoint);\n+}\n+\n // AvailableCoins + LockedCoins grouped by wallet address (put change in one group with wallet address)\n void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const\n {"
      },
      {
        "sha": "39f846324654a6e90a7dc9956855a55e5e63f16a",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
        "patch": "@@ -180,6 +180,7 @@ class WalletModel : public QObject\n \n     bool getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n     void getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs);\n+    bool isSpent(const COutPoint& outpoint) const;\n     void listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const;\n \n     bool isLockedCoin(uint256 hash, unsigned int n) const;"
      },
      {
        "sha": "55194b8f4cb49677fb47ce153477dbbcc182eac3",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
        "patch": "@@ -128,7 +128,6 @@ Value importprivkey(const Array& params, bool fHelp)\n \n         if (fRescan) {\n             pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n-            pwalletMain->ReacceptWalletTransactions();\n         }\n     }\n \n@@ -216,7 +215,6 @@ Value importwallet(const Array& params, bool fHelp)\n \n     LogPrintf(\"Rescanning last %i blocks\\n\", chainActive.Height() - pindex->nHeight + 1);\n     pwalletMain->ScanForWalletTransactions(pindex);\n-    pwalletMain->ReacceptWalletTransactions();\n     pwalletMain->MarkDirty();\n \n     if (!fGood)"
      },
      {
        "sha": "603d63e948c4956a2fe3f9849b76e75ab51ff0c7",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
        "patch": "@@ -51,7 +51,12 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n         entry.push_back(Pair(\"blockindex\", wtx.nIndex));\n         entry.push_back(Pair(\"blocktime\", (boost::int64_t)(mapBlockIndex[wtx.hashBlock]->nTime)));\n     }\n-    entry.push_back(Pair(\"txid\", wtx.GetHash().GetHex()));\n+    uint256 hash = wtx.GetHash();\n+    entry.push_back(Pair(\"txid\", hash.GetHex()));\n+    Array conflicts;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts())\n+        conflicts.push_back(conflict.GetHex());\n+    entry.push_back(Pair(\"walletconflicts\", conflicts));\n     entry.push_back(Pair(\"time\", (boost::int64_t)wtx.GetTxTime()));\n     entry.push_back(Pair(\"timereceived\", (boost::int64_t)wtx.nTimeReceived));\n     BOOST_FOREACH(const PAIRTYPE(string,string)& item, wtx.mapValue)\n@@ -555,7 +560,7 @@ int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMi\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        if (!IsFinalTx(wtx))\n+        if (!IsFinalTx(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n             continue;\n \n         int64_t nReceived, nSent, nFee;\n@@ -621,7 +626,7 @@ Value getbalance(const Array& params, bool fHelp)\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n-            if (!wtx.IsTrusted())\n+            if (!wtx.IsTrusted() || wtx.GetBlocksToMaturity() > 0)\n                 continue;\n \n             int64_t allFee;\n@@ -1325,11 +1330,14 @@ Value listaccounts(const Array& params, bool fHelp)\n         string strSentAccount;\n         list<pair<CTxDestination, int64_t> > listReceived;\n         list<pair<CTxDestination, int64_t> > listSent;\n+        int nDepth = wtx.GetDepthInMainChain();\n+        if (wtx.GetBlocksToMaturity() > 0 || nDepth < 0)\n+            continue;\n         wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n         mapAccountBalances[strSentAccount] -= nFee;\n         BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& s, listSent)\n             mapAccountBalances[strSentAccount] -= s.second;\n-        if (wtx.GetDepthInMainChain() >= nMinDepth)\n+        if (nDepth >= nMinDepth)\n         {\n             BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& r, listReceived)\n                 if (pwalletMain->mapAddressBook.count(r.first))"
      },
      {
        "sha": "446800dc79ade0523332d9ad6a4ef8bfbbefff3a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 7,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
        "patch": "@@ -86,43 +86,51 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry)\n }\n \n \n-bool CTxMemPool::remove(const CTransaction &tx, bool fRecursive)\n+list<CTransaction> CTxMemPool::remove(const CTransaction &tx, bool fRecursive)\n {\n     // Remove transaction from memory pool\n+    list<CTransaction> result;\n     {\n         LOCK(cs);\n         uint256 hash = tx.GetHash();\n         if (fRecursive) {\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n                 std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(hash, i));\n-                if (it != mapNextTx.end())\n-                    remove(*it->second.ptx, true);\n+                if (it == mapNextTx.end())\n+                    continue;\n+                list<CTransaction> r = remove(*it->second.ptx, true);\n+                result.insert(result.begin(), r.begin(), r.end());\n             }\n         }\n         if (mapTx.count(hash))\n         {\n+            result.push_front(tx);\n             BOOST_FOREACH(const CTxIn& txin, tx.vin)\n                 mapNextTx.erase(txin.prevout);\n             mapTx.erase(hash);\n             nTransactionsUpdated++;\n         }\n     }\n-    return true;\n+    return result;\n }\n \n-bool CTxMemPool::removeConflicts(const CTransaction &tx)\n+list<CTransaction> CTxMemPool::removeConflicts(const CTransaction &tx)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n+    list<CTransaction> result;\n     LOCK(cs);\n     BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n         std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(txin.prevout);\n         if (it != mapNextTx.end()) {\n             const CTransaction &txConflict = *it->second.ptx;\n             if (txConflict != tx)\n-                remove(txConflict, true);\n+            {\n+                list<CTransaction> r = remove(txConflict, true);\n+                result.insert(result.begin(), r.begin(), r.end());\n+            }\n         }\n     }\n-    return true;\n+    return result;\n }\n \n void CTxMemPool::clear()"
      },
      {
        "sha": "09802cb974041b6fbb262c4e83b29f3c520260eb",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_TXMEMPOOL_H\n #define BITCOIN_TXMEMPOOL_H\n \n+#include <list>\n+\n #include \"coins.h\"\n #include \"core.h\"\n #include \"sync.h\"\n@@ -72,8 +74,8 @@ class CTxMemPool\n     void setSanityCheck(bool _fSanityCheck) { fSanityCheck = _fSanityCheck; }\n \n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry);\n-    bool remove(const CTransaction &tx, bool fRecursive = false);\n-    bool removeConflicts(const CTransaction &tx);\n+    std::list<CTransaction> remove(const CTransaction &tx, bool fRecursive = false);\n+    std::list<CTransaction> removeConflicts(const CTransaction &tx);\n     void clear();\n     void queryHashes(std::vector<uint256>& vtxid);\n     void pruneSpent(const uint256& hash, CCoins &coins);"
      },
      {
        "sha": "de5af363ceb1ab58684c59ff190f3eb0553ea6b5",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 151,
        "deletions": 86,
        "changes": 237,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
        "patch": "@@ -231,6 +231,103 @@ bool CWallet::SetMaxVersion(int nVersion)\n     return true;\n }\n \n+set<uint256> CWallet::GetConflicts(const uint256& txid) const\n+{\n+    set<uint256> result;\n+    AssertLockHeld(cs_wallet);\n+\n+    std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(txid);\n+    if (it == mapWallet.end())\n+        return result;\n+    const CWalletTx& wtx = it->second;\n+\n+    std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range;\n+\n+    BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+    {\n+        if (mapTxSpends.count(txin.prevout) <= 1)\n+            continue;  // No conflict if zero or one spends\n+        range = mapTxSpends.equal_range(txin.prevout);\n+        for (TxSpends::const_iterator it = range.first; it != range.second; ++it)\n+            result.insert(it->second);\n+    }\n+    return result;\n+}\n+\n+void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)\n+{\n+    // We want all the wallet transactions in range to have the same metadata as\n+    // the oldest (smallest nOrderPos).\n+    // So: find smallest nOrderPos:\n+\n+    int nMinOrderPos = std::numeric_limits<int>::max();\n+    const CWalletTx* copyFrom = NULL;\n+    for (TxSpends::iterator it = range.first; it != range.second; ++it)\n+    {\n+        const uint256& hash = it->second;\n+        int n = mapWallet[hash].nOrderPos;\n+        if (n < nMinOrderPos)\n+        {\n+            nMinOrderPos = n;\n+            copyFrom = &mapWallet[hash];\n+        }\n+    }\n+    // Now copy data from copyFrom to rest:\n+    for (TxSpends::iterator it = range.first; it != range.second; ++it)\n+    {\n+        const uint256& hash = it->second;\n+        CWalletTx* copyTo = &mapWallet[hash];\n+        if (copyFrom == copyTo) continue;\n+        copyTo->mapValue = copyFrom->mapValue;\n+        copyTo->vOrderForm = copyFrom->vOrderForm;\n+        // fTimeReceivedIsTxTime not copied on purpose\n+        // nTimeReceived not copied on purpose\n+        copyTo->nTimeSmart = copyFrom->nTimeSmart;\n+        copyTo->fFromMe = copyFrom->fFromMe;\n+        copyTo->strFromAccount = copyFrom->strFromAccount;\n+        // nOrderPos not copied on purpose\n+        // cached members not copied on purpose\n+    }\n+}\n+\n+// Outpoint is spent if any non-conflicted transaction\n+// spends it:\n+bool CWallet::IsSpent(const COutPoint& outpoint) const\n+{\n+    pair<TxSpends::const_iterator, TxSpends::const_iterator> range;\n+    range = mapTxSpends.equal_range(outpoint);\n+\n+    for (TxSpends::const_iterator it = range.first; it != range.second; ++it)\n+    {\n+        const uint256& wtxid = it->second;\n+        std::map<uint256, CWalletTx>::const_iterator mit = mapWallet.find(wtxid);\n+        if (mit != mapWallet.end() && mit->second.GetDepthInMainChain() >= 0)\n+            return true; // Spent\n+    }\n+    return false;\n+}\n+\n+void CWallet::AddToSpends(const COutPoint& outpoint, const uint256& wtxid)\n+{\n+    mapTxSpends.insert(make_pair(outpoint, wtxid));\n+\n+    pair<TxSpends::iterator, TxSpends::iterator> range;\n+    range = mapTxSpends.equal_range(outpoint);\n+    SyncMetaData(range);\n+}\n+\n+\n+void CWallet::AddToSpends(const uint256& wtxid)\n+{\n+    assert(mapWallet.count(wtxid));\n+    CWalletTx& thisTx = mapWallet[wtxid];\n+    if (thisTx.IsCoinBase()) // Coinbases don't spend anything!\n+        return;\n+\n+    BOOST_FOREACH(const CTxIn& txin, thisTx.vin)\n+        AddToSpends(txin.prevout, wtxid);\n+}\n+\n bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n {\n     if (IsCrypted())\n@@ -349,33 +446,6 @@ CWallet::TxItems CWallet::OrderedTxItems(std::list<CAccountingEntry>& acentries,\n     return txOrdered;\n }\n \n-void CWallet::WalletUpdateSpent(const CTransaction &tx)\n-{\n-    // Anytime a signature is successfully verified, it's proof the outpoint is spent.\n-    // Update the wallet spent flag if it doesn't know due to wallet.dat being\n-    // restored from backup or the user making copies of wallet.dat.\n-    {\n-        LOCK(cs_wallet);\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        {\n-            map<uint256, CWalletTx>::iterator mi = mapWallet.find(txin.prevout.hash);\n-            if (mi != mapWallet.end())\n-            {\n-                CWalletTx& wtx = (*mi).second;\n-                if (txin.prevout.n >= wtx.vout.size())\n-                    LogPrintf(\"WalletUpdateSpent: bad wtx %s\\n\", wtx.GetHash().ToString());\n-                else if (!wtx.IsSpent(txin.prevout.n) && IsMine(wtx.vout[txin.prevout.n]))\n-                {\n-                    LogPrintf(\"WalletUpdateSpent found spent coin %sbc %s\\n\", FormatMoney(wtx.GetCredit()), wtx.GetHash().ToString());\n-                    wtx.MarkSpent(txin.prevout.n);\n-                    wtx.WriteToDisk();\n-                    NotifyTransactionChanged(this, txin.prevout.hash, CT_UPDATED);\n-                }\n-            }\n-        }\n-    }\n-}\n-\n void CWallet::MarkDirty()\n {\n     {\n@@ -385,9 +455,16 @@ void CWallet::MarkDirty()\n     }\n }\n \n-bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n+bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n {\n     uint256 hash = wtxIn.GetHash();\n+\n+    if (fFromLoadWallet)\n+    {\n+        mapWallet[hash] = wtxIn;\n+        AddToSpends(hash);\n+    }\n+    else\n     {\n         LOCK(cs_wallet);\n         // Inserts only if not already there, returns tx inserted or tx found\n@@ -445,6 +522,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n                              wtxIn.GetHash().ToString(),\n                              wtxIn.hashBlock.ToString());\n             }\n+            AddToSpends(hash);\n         }\n \n         bool fUpdated = false;\n@@ -467,7 +545,6 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n                 wtx.fFromMe = wtxIn.fFromMe;\n                 fUpdated = true;\n             }\n-            fUpdated |= wtx.UpdateSpent(wtxIn.vfSpent);\n         }\n \n         //// debug print\n@@ -478,9 +555,6 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n             if (!wtx.WriteToDisk())\n                 return false;\n \n-        // since AddToWallet is called directly for self-originating transactions, check for consumption of own coins\n-        WalletUpdateSpent(wtx);\n-\n         // Notify UI of new or updated transaction\n         NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n \n@@ -514,14 +588,27 @@ bool CWallet::AddToWalletIfInvolvingMe(const uint256 &hash, const CTransaction&\n                 wtx.SetMerkleBranch(pblock);\n             return AddToWallet(wtx);\n         }\n-        else\n-            WalletUpdateSpent(tx);\n     }\n     return false;\n }\n \n-void CWallet::SyncTransaction(const uint256 &hash, const CTransaction& tx, const CBlock* pblock) {\n+void CWallet::SyncTransaction(const uint256 &hash, const CTransaction& tx, const CBlock* pblock)\n+{\n     AddToWalletIfInvolvingMe(hash, tx, pblock, true);\n+\n+    if (mapWallet.count(hash) == 0)\n+        return; // Not one of ours\n+\n+    // Break debit/credit balance caches:\n+    mapWallet[hash].MarkDirty();\n+    // If a transaction changes 'conflicted' state, that changes the balance\n+    // available of the outputs it spends. So force those to be\n+    // recomputed, also:\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        if (mapWallet.count(txin.prevout.hash))\n+            mapWallet[txin.prevout.hash].MarkDirty();\n+    }\n }\n \n void CWallet::EraseFromWallet(const uint256 &hash)\n@@ -834,54 +921,19 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n \n void CWallet::ReacceptWalletTransactions()\n {\n-    bool fRepeat = true;\n-    while (fRepeat)\n+    LOCK(cs_wallet);\n+    BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n     {\n-        LOCK(cs_wallet);\n-        fRepeat = false;\n-        bool fMissing = false;\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n-        {\n-            CWalletTx& wtx = item.second;\n-            if (wtx.IsCoinBase() && wtx.IsSpent(0))\n-                continue;\n+        const uint256& wtxid = item.first;\n+        CWalletTx& wtx = item.second;\n+        assert(wtx.GetHash() == wtxid);\n \n-            CCoins coins;\n-            bool fUpdated = false;\n-            bool fFound = pcoinsTip->GetCoins(wtx.GetHash(), coins);\n-            if (fFound || wtx.GetDepthInMainChain() > 0)\n-            {\n-                // Update fSpent if a tx got spent somewhere else by a copy of wallet.dat\n-                for (unsigned int i = 0; i < wtx.vout.size(); i++)\n-                {\n-                    if (wtx.IsSpent(i))\n-                        continue;\n-                    if ((i >= coins.vout.size() || coins.vout[i].IsNull()) && IsMine(wtx.vout[i]))\n-                    {\n-                        wtx.MarkSpent(i);\n-                        fUpdated = true;\n-                        fMissing = true;\n-                    }\n-                }\n-                if (fUpdated)\n-                {\n-                    LogPrintf(\"ReacceptWalletTransactions found spent coin %sbc %s\\n\", FormatMoney(wtx.GetCredit()), wtx.GetHash().ToString());\n-                    wtx.MarkDirty();\n-                    wtx.WriteToDisk();\n-                }\n-            }\n-            else\n-            {\n-                // Re-accept any txes of ours that aren't already in a block\n-                if (!wtx.IsCoinBase())\n-                    wtx.AcceptWalletTransaction();\n-            }\n-        }\n-        if (fMissing)\n+        int nDepth = wtx.GetDepthInMainChain();\n+\n+        if (!wtx.IsCoinBase() && nDepth < 0)\n         {\n-            // TODO: optimize this to scan just part of the block chain?\n-            if (ScanForWalletTransactions(chainActive.Genesis()))\n-                fRepeat = true;  // Found missing transactions: re-do re-accept.\n+            // Try to add to memory pool\n+            wtx.AcceptWalletTransaction();\n         }\n     }\n }\n@@ -907,6 +959,18 @@ void CWalletTx::RelayWalletTransaction()\n     }\n }\n \n+set<uint256> CWalletTx::GetConflicts() const\n+{\n+    set<uint256> result;\n+    if (pwallet != NULL)\n+    {\n+        uint256 myHash = GetHash();\n+        result = pwallet->GetConflicts(myHash);\n+        result.erase(myHash);\n+    }\n+    return result;\n+}\n+\n void CWallet::ResendWalletTransactions()\n {\n     // Do this infrequently and randomly to avoid giving away\n@@ -980,7 +1044,7 @@ int64_t CWallet::GetUnconfirmedBalance() const\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx* pcoin = &(*it).second;\n-            if (!IsFinalTx(*pcoin) || !pcoin->IsTrusted())\n+            if (!IsFinalTx(*pcoin) || (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0))\n                 nTotal += pcoin->GetAvailableCredit();\n         }\n     }\n@@ -1010,6 +1074,7 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n         LOCK(cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n+            const uint256& wtxid = it->first;\n             const CWalletTx* pcoin = &(*it).second;\n \n             if (!IsFinalTx(*pcoin))\n@@ -1026,7 +1091,7 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n                 continue;\n \n             for (unsigned int i = 0; i < pcoin->vout.size(); i++) {\n-                if (!(pcoin->IsSpent(i)) && IsMine(pcoin->vout[i]) &&\n+                if (!(IsSpent(COutPoint(wtxid, i))) && IsMine(pcoin->vout[i]) &&\n                     !IsLockedCoin((*it).first, i) && pcoin->vout[i].nValue > 0 &&\n                     (!coinControl || !coinControl->HasSelected() || coinControl->IsSelected((*it).first, i)))\n                         vCoins.push_back(COutput(pcoin, i, nDepth));\n@@ -1396,14 +1461,12 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n             // otherwise just for transaction history.\n             AddToWallet(wtxNew);\n \n-            // Mark old coins as spent\n+            // Notify that old coins are spent\n             set<CWalletTx*> setCoins;\n             BOOST_FOREACH(const CTxIn& txin, wtxNew.vin)\n             {\n                 CWalletTx &coin = mapWallet[txin.prevout.hash];\n                 coin.BindWallet(this);\n-                coin.MarkSpent(txin.prevout.n);\n-                coin.WriteToDisk();\n                 NotifyTransactionChanged(this, coin.GetHash(), CT_UPDATED);\n             }\n \n@@ -1548,6 +1611,8 @@ DBErrors CWallet::ZapWalletTx(const CWalletTx& wtx)\n         LOCK(cs_wallet);\n         BOOST_FOREACH(const CWalletTx& tx, vErasedTxes)\n             mapWallet.erase(tx.GetHash());\n+        // clear tx cache variables\n+        MarkDirty();\n     }\n \n     if (nZapWalletTxRet != DB_LOAD_OK)\n@@ -1788,7 +1853,7 @@ std::map<CTxDestination, int64_t> CWallet::GetAddressBalances()\n                 if(!ExtractDestination(pcoin->vout[i].scriptPubKey, addr))\n                     continue;\n \n-                int64_t n = pcoin->IsSpent(i) ? 0 : pcoin->vout[i].nValue;\n+                int64_t n = IsSpent(COutPoint(walletEntry.first, i)) ? 0 : pcoin->vout[i].nValue;\n \n                 if (!balances.count(addr))\n                     balances[addr] = 0;"
      },
      {
        "sha": "dc187336edcc4a78ff31a0ed1a046a566f109137",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 23,
        "deletions": 73,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
        "patch": "@@ -108,6 +108,16 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     int64_t nNextResend;\n     int64_t nLastResend;\n \n+    // Used to keep track of spent outpoints, and\n+    // detect and report conflicts (double-spends or\n+    // mutated transactions where the mutant gets mined).\n+    typedef std::multimap<COutPoint, uint256> TxSpends;\n+    TxSpends mapTxSpends;\n+    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid);\n+    void AddToSpends(const uint256& wtxid);\n+\n+    void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n+\n public:\n     /// Main wallet lock.\n     /// This lock protects all the fields added by CWallet\n@@ -151,6 +161,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n+\n     int64_t nOrderPosNext;\n     std::map<uint256, int> mapRequestCount;\n \n@@ -168,6 +179,8 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n     bool SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const;\n \n+    bool IsSpent(const COutPoint& outpoint) const;\n+\n     bool IsLockedCoin(uint256 hash, unsigned int n) const;\n     void LockCoin(COutPoint& output);\n     void UnlockCoin(COutPoint& output);\n@@ -223,11 +236,10 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     TxItems OrderedTxItems(std::list<CAccountingEntry>& acentries, std::string strAccount = \"\");\n \n     void MarkDirty();\n-    bool AddToWallet(const CWalletTx& wtxIn);\n+    bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet=false);\n     void SyncTransaction(const uint256 &hash, const CTransaction& tx, const CBlock* pblock);\n     bool AddToWalletIfInvolvingMe(const uint256 &hash, const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     void EraseFromWallet(const uint256 &hash);\n-    void WalletUpdateSpent(const CTransaction& prevout);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions();\n@@ -359,6 +371,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     // get the current wallet format (the oldest client version guaranteed to understand this wallet)\n     int GetVersion() { AssertLockHeld(cs_wallet); return nWalletVersion; }\n \n+    // Get wallet transactions that conflict with given transaction (spend same outputs)\n+    std::set<uint256> GetConflicts(const uint256& txid) const;\n+\n     /** Address book entry changed.\n      * @note called with lock cs_wallet held.\n      */\n@@ -438,7 +453,6 @@ class CWalletTx : public CMerkleTx\n     unsigned int nTimeSmart;\n     char fFromMe;\n     std::string strFromAccount;\n-    std::vector<char> vfSpent; // which outputs are already spent\n     int64_t nOrderPos;  // position in ordered transaction list\n \n     // memory only\n@@ -484,7 +498,6 @@ class CWalletTx : public CMerkleTx\n         nTimeSmart = 0;\n         fFromMe = false;\n         strFromAccount.clear();\n-        vfSpent.clear();\n         fDebitCached = false;\n         fCreditCached = false;\n         fImmatureCreditCached = false;\n@@ -509,15 +522,6 @@ class CWalletTx : public CMerkleTx\n         {\n             pthis->mapValue[\"fromaccount\"] = pthis->strFromAccount;\n \n-            std::string str;\n-            BOOST_FOREACH(char f, vfSpent)\n-            {\n-                str += (f ? '1' : '0');\n-                if (f)\n-                    fSpent = true;\n-            }\n-            pthis->mapValue[\"spent\"] = str;\n-\n             WriteOrderPos(pthis->nOrderPos, pthis->mapValue);\n \n             if (nTimeSmart)\n@@ -537,12 +541,6 @@ class CWalletTx : public CMerkleTx\n         {\n             pthis->strFromAccount = pthis->mapValue[\"fromaccount\"];\n \n-            if (mapValue.count(\"spent\"))\n-                BOOST_FOREACH(char c, pthis->mapValue[\"spent\"])\n-                    pthis->vfSpent.push_back(c != '0');\n-            else\n-                pthis->vfSpent.assign(vout.size(), fSpent);\n-\n             ReadOrderPos(pthis->nOrderPos, pthis->mapValue);\n \n             pthis->nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(pthis->mapValue[\"timesmart\"]) : 0;\n@@ -555,26 +553,6 @@ class CWalletTx : public CMerkleTx\n         pthis->mapValue.erase(\"timesmart\");\n     )\n \n-    // marks certain txout's as spent\n-    // returns true if any update took place\n-    bool UpdateSpent(const std::vector<char>& vfNewSpent)\n-    {\n-        bool fReturn = false;\n-        for (unsigned int i = 0; i < vfNewSpent.size(); i++)\n-        {\n-            if (i == vfSpent.size())\n-                break;\n-\n-            if (vfNewSpent[i] && !vfSpent[i])\n-            {\n-                vfSpent[i] = true;\n-                fReturn = true;\n-                fAvailableCreditCached = false;\n-            }\n-        }\n-        return fReturn;\n-    }\n-\n     // make sure balances are recalculated\n     void MarkDirty()\n     {\n@@ -590,39 +568,6 @@ class CWalletTx : public CMerkleTx\n         MarkDirty();\n     }\n \n-    void MarkSpent(unsigned int nOut)\n-    {\n-        if (nOut >= vout.size())\n-            throw std::runtime_error(\"CWalletTx::MarkSpent() : nOut out of range\");\n-        vfSpent.resize(vout.size());\n-        if (!vfSpent[nOut])\n-        {\n-            vfSpent[nOut] = true;\n-            fAvailableCreditCached = false;\n-        }\n-    }\n-\n-    void MarkUnspent(unsigned int nOut)\n-    {\n-        if (nOut >= vout.size())\n-            throw std::runtime_error(\"CWalletTx::MarkUnspent() : nOut out of range\");\n-        vfSpent.resize(vout.size());\n-        if (vfSpent[nOut])\n-        {\n-            vfSpent[nOut] = false;\n-            fAvailableCreditCached = false;\n-        }\n-    }\n-\n-    bool IsSpent(unsigned int nOut) const\n-    {\n-        if (nOut >= vout.size())\n-            throw std::runtime_error(\"CWalletTx::IsSpent() : nOut out of range\");\n-        if (nOut >= vfSpent.size())\n-            return false;\n-        return (!!vfSpent[nOut]);\n-    }\n-\n     int64_t GetDebit() const\n     {\n         if (vin.empty())\n@@ -664,6 +609,9 @@ class CWalletTx : public CMerkleTx\n \n     int64_t GetAvailableCredit(bool fUseCache=true) const\n     {\n+        if (pwallet == 0)\n+            return 0;\n+\n         // Must wait until coinbase is safely deep enough in the chain before valuing it\n         if (IsCoinBase() && GetBlocksToMaturity() > 0)\n             return 0;\n@@ -674,7 +622,7 @@ class CWalletTx : public CMerkleTx\n         int64_t nCredit = 0;\n         for (unsigned int i = 0; i < vout.size(); i++)\n         {\n-            if (!IsSpent(i))\n+            if (!pwallet->IsSpent(COutPoint(GetHash(), i)))\n             {\n                 const CTxOut &txout = vout[i];\n                 nCredit += pwallet->GetCredit(txout);\n@@ -766,6 +714,8 @@ class CWalletTx : public CMerkleTx\n     void AddSupportingTransactions();\n     bool AcceptWalletTransaction();\n     void RelayWalletTransaction();\n+\n+    std::set<uint256> GetConflicts() const;\n };\n \n "
      },
      {
        "sha": "2ae6072b57805a91b9dbf59a517d95b0c04e3cd0",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 17,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
        "patch": "@@ -382,7 +382,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             if (wtx.nOrderPos == -1)\n                 wss.fAnyUnordered = true;\n \n-            pwallet->mapWallet[hash] = wtx;\n+            pwallet->AddToWallet(wtx, true);\n             //// debug print\n             //LogPrintf(\"LoadWallet  %s\\n\", wtx.GetHash().ToString());\n             //LogPrintf(\" %12\"PRId64\"  %s  %s  %s\\n\",\n@@ -789,22 +789,6 @@ DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, const CWalletTx& wtx, vector<C\n         }\n     }\n     \n-    // modify parent TX's spent outputs\n-    for (unsigned int nVinIndex = 0; nVinIndex < wtx.vin.size(); nVinIndex++)\n-    {\n-        const CTxIn& txin = wtx.vin[nVinIndex];\n-        BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, pwallet->mapWallet)\n-        {\n-            CWalletTx& wtxPotentialParent = walletEntry.second;\n-            if (wtxPotentialParent.GetHash() == txin.prevout.hash)\n-            {\n-                LogPrintf(\"ZapWalletTx found parent tx %s\\n\", wtxPotentialParent.GetHash().GetHex());\n-                wtxPotentialParent.MarkUnspent(nVinIndex);\n-                break;\n-            }\n-        }\n-    }\n-\n     // erase wallet TX\n     if (!EraseTx(wtx.GetHash()))\n         return DB_CORRUPT;"
      }
    ]
  },
  {
    "sha": "1fa606d93ad347def5c28bf4332da3fd3f391cd3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmE2MDZkOTNhZDM0N2RlZjVjMjhiZjQzMzJkYTNmZDNmMzkxY2Qz",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-02-19T02:29:26Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-02-19T02:29:26Z"
      },
      "message": "Remove CWalletTx::vtxPrev",
      "tree": {
        "sha": "efc32d2359fd4d6f77fbead32a51c466dc7050ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/efc32d2359fd4d6f77fbead32a51c466dc7050ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fa606d93ad347def5c28bf4332da3fd3f391cd3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fa606d93ad347def5c28bf4332da3fd3f391cd3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fa606d93ad347def5c28bf4332da3fd3f391cd3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fa606d93ad347def5c28bf4332da3fd3f391cd3/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3443d64db93251d14d2da5603ce5d5523ae35e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3443d64db93251d14d2da5603ce5d5523ae35e1"
      }
    ],
    "stats": {
      "total": 143,
      "additions": 24,
      "deletions": 119
    },
    "files": [
      {
        "sha": "4d280303c676966309a00c426feba63e28586433",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fa606d93ad347def5c28bf4332da3fd3f391cd3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fa606d93ad347def5c28bf4332da3fd3f391cd3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1fa606d93ad347def5c28bf4332da3fd3f391cd3",
        "patch": "@@ -1927,6 +1927,10 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew) {\n     BOOST_FOREACH(const CTransaction &tx, txConflicted) {\n         SyncWithWallets(tx.GetHash(), tx, NULL);\n     }\n+    // ... and about transactions that got confirmed:\n+    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n+        SyncWithWallets(tx.GetHash(), tx, &block);\n+    }\n     return true;\n }\n "
      },
      {
        "sha": "42eb6504c5ec64618fcce1e0636373f0672409f8",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 84,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fa606d93ad347def5c28bf4332da3fd3f391cd3/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fa606d93ad347def5c28bf4332da3fd3f391cd3/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=1fa606d93ad347def5c28bf4332da3fd3f391cd3",
        "patch": "@@ -34,6 +34,15 @@ struct CompareValueOnly\n     }\n };\n \n+const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n+{\n+    LOCK(cs_wallet);\n+    std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(hash);\n+    if (it == mapWallet.end())\n+        return NULL;\n+    return &(it->second);\n+}\n+\n CPubKey CWallet::GenerateNewKey()\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n@@ -809,78 +818,6 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, int64_t& nReceived,\n     }\n }\n \n-void CWalletTx::AddSupportingTransactions()\n-{\n-    vtxPrev.clear();\n-\n-    const int COPY_DEPTH = 3;\n-    if (SetMerkleBranch() < COPY_DEPTH)\n-    {\n-        vector<uint256> vWorkQueue;\n-        BOOST_FOREACH(const CTxIn& txin, vin)\n-            vWorkQueue.push_back(txin.prevout.hash);\n-\n-        {\n-            LOCK(pwallet->cs_wallet);\n-            map<uint256, const CMerkleTx*> mapWalletPrev;\n-            set<uint256> setAlreadyDone;\n-            for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n-            {\n-                uint256 hash = vWorkQueue[i];\n-                if (setAlreadyDone.count(hash))\n-                    continue;\n-                setAlreadyDone.insert(hash);\n-\n-                CMerkleTx tx;\n-                map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(hash);\n-                if (mi != pwallet->mapWallet.end())\n-                {\n-                    tx = (*mi).second;\n-                    BOOST_FOREACH(const CMerkleTx& txWalletPrev, (*mi).second.vtxPrev)\n-                        mapWalletPrev[txWalletPrev.GetHash()] = &txWalletPrev;\n-                }\n-                else if (mapWalletPrev.count(hash))\n-                {\n-                    tx = *mapWalletPrev[hash];\n-                }\n-                else\n-                {\n-                    continue;\n-                }\n-\n-                int nDepth = tx.SetMerkleBranch();\n-                vtxPrev.push_back(tx);\n-\n-                if (nDepth < COPY_DEPTH)\n-                {\n-                    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-                        vWorkQueue.push_back(txin.prevout.hash);\n-                }\n-            }\n-        }\n-    }\n-\n-    reverse(vtxPrev.begin(), vtxPrev.end());\n-}\n-\n-bool CWalletTx::AcceptWalletTransaction()\n-{\n-    {\n-        LOCK(mempool.cs);\n-        // Add previous supporting transactions first\n-        BOOST_FOREACH(CMerkleTx& tx, vtxPrev)\n-        {\n-            if (!tx.IsCoinBase())\n-            {\n-                uint256 hash = tx.GetHash();\n-                if (!mempool.exists(hash) && pcoinsTip->HaveCoins(hash))\n-                    tx.AcceptToMemoryPool(false);\n-            }\n-        }\n-        return AcceptToMemoryPool(false);\n-    }\n-    return false;\n-}\n \n bool CWalletTx::WriteToDisk()\n {\n@@ -933,22 +870,14 @@ void CWallet::ReacceptWalletTransactions()\n         if (!wtx.IsCoinBase() && nDepth < 0)\n         {\n             // Try to add to memory pool\n-            wtx.AcceptWalletTransaction();\n+            LOCK(mempool.cs);\n+            wtx.AcceptToMemoryPool(false);\n         }\n     }\n }\n \n void CWalletTx::RelayWalletTransaction()\n {\n-    BOOST_FOREACH(const CMerkleTx& tx, vtxPrev)\n-    {\n-        // Important: versions of bitcoin before 0.8.6 had a bug that inserted\n-        // empty transactions into the vtxPrev, which will cause the node to be\n-        // banned when retransmitted, hence the check for !tx.vin.empty()\n-        if (!tx.IsCoinBase() && !tx.vin.empty())\n-            if (tx.GetDepthInMainChain() == 0)\n-                RelayTransaction((CTransaction)tx, tx.GetHash());\n-    }\n     if (!IsCoinBase())\n     {\n         if (GetDepthInMainChain() == 0) {\n@@ -1423,8 +1352,6 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                     continue;\n                 }\n \n-                // Fill vtxPrev by copying from previous transactions vtxPrev\n-                wtxNew.AddSupportingTransactions();\n                 wtxNew.fTimeReceivedIsTxTime = true;\n \n                 break;"
      },
      {
        "sha": "a7f5bfea8e66631c50404ba0b2258290815ccdc6",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 35,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fa606d93ad347def5c28bf4332da3fd3f391cd3/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fa606d93ad347def5c28bf4332da3fd3f391cd3/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=1fa606d93ad347def5c28bf4332da3fd3f391cd3",
        "patch": "@@ -173,6 +173,8 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n \n     int64_t nTimeFirstKey;\n \n+    const CWalletTx* GetWalletTx(const uint256& hash) const;\n+\n     // check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n@@ -444,7 +446,7 @@ class CWalletTx : public CMerkleTx\n     const CWallet* pwallet;\n \n public:\n-    std::vector<CMerkleTx> vtxPrev;\n+    std::vector<CMerkleTx> vUnused;// Used to be vtxPrev\n     mapValue_t mapValue;\n     std::vector<std::pair<std::string, std::string> > vOrderForm;\n     unsigned int fTimeReceivedIsTxTime;\n@@ -489,7 +491,6 @@ class CWalletTx : public CMerkleTx\n     void Init(const CWallet* pwalletIn)\n     {\n         pwallet = pwalletIn;\n-        vtxPrev.clear();\n         mapValue.clear();\n         vOrderForm.clear();\n         fTimeReceivedIsTxTime = false;\n@@ -528,7 +529,7 @@ class CWalletTx : public CMerkleTx\n         }\n \n         nSerSize += SerReadWrite(s, *(CMerkleTx*)this, nType, nVersion,ser_action);\n-        READWRITE(vtxPrev);\n+        READWRITE(vUnused);\n         READWRITE(mapValue);\n         READWRITE(vOrderForm);\n         READWRITE(fTimeReceivedIsTxTime);\n@@ -669,38 +670,13 @@ class CWalletTx : public CMerkleTx\n         if (!bSpendZeroConfChange || !IsFromMe()) // using wtx's cached debit\n             return false;\n \n-        // If no confirmations but it's from us, we can still\n-        // consider it confirmed if all dependencies are confirmed\n-        std::map<uint256, const CMerkleTx*> mapPrev;\n-        std::vector<const CMerkleTx*> vWorkQueue;\n-        vWorkQueue.reserve(vtxPrev.size()+1);\n-        vWorkQueue.push_back(this);\n-        for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+        // Trusted if all inputs are trusted (recursively)\n+        BOOST_FOREACH(const CTxIn& txin, vin)\n         {\n-            const CMerkleTx* ptx = vWorkQueue[i];\n-\n-            if (!IsFinalTx(*ptx))\n-                return false;\n-            int nPDepth = ptx->GetDepthInMainChain();\n-            if (nPDepth >= 1)\n-                continue;\n-            if (nPDepth < 0)\n+            // Transactions not from us: not trusted\n+            const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n+            if (parent == NULL || !parent->IsTrusted())\n                 return false;\n-            if (!pwallet->IsFromMe(*ptx))\n-                return false;\n-\n-            if (mapPrev.empty())\n-            {\n-                BOOST_FOREACH(const CMerkleTx& tx, vtxPrev)\n-                    mapPrev[tx.GetHash()] = &tx;\n-            }\n-\n-            BOOST_FOREACH(const CTxIn& txin, ptx->vin)\n-            {\n-                if (!mapPrev.count(txin.prevout.hash))\n-                    return false;\n-                vWorkQueue.push_back(mapPrev[txin.prevout.hash]);\n-            }\n         }\n         return true;\n     }\n@@ -710,8 +686,6 @@ class CWalletTx : public CMerkleTx\n     int64_t GetTxTime() const;\n     int GetRequestCount() const;\n \n-    void AddSupportingTransactions();\n-    bool AcceptWalletTransaction();\n     void RelayWalletTransaction();\n \n     std::set<uint256> GetConflicts() const;"
      }
    ]
  },
  {
    "sha": "3ce78c117963d6e319c883c267b3952fca7fe086",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2U3OGMxMTc5NjNkNmUzMTljODgzYzI2N2IzOTUyZmNhN2ZlMDg2",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-02-19T09:17:14Z"
      },
      "committer": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-02-19T09:17:14Z"
      },
      "message": "lock wallet while we zap some transactions",
      "tree": {
        "sha": "61f509b2dd3aca10adb8e1d3cfe9eebc2ed51dca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61f509b2dd3aca10adb8e1d3cfe9eebc2ed51dca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ce78c117963d6e319c883c267b3952fca7fe086",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ce78c117963d6e319c883c267b3952fca7fe086",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ce78c117963d6e319c883c267b3952fca7fe086",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ce78c117963d6e319c883c267b3952fca7fe086/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5d2d0c702ed4745dae18027a5a5f1f4ac8d1793"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "def1d8c3f290765ea84d9bbb63c276aba8139cde",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ce78c117963d6e319c883c267b3952fca7fe086/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ce78c117963d6e319c883c267b3952fca7fe086/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=3ce78c117963d6e319c883c267b3952fca7fe086",
        "patch": "@@ -1592,13 +1592,13 @@ DBErrors CWallet::ZapWalletTx(const CWalletTx& wtx)\n {\n     if (!fFileBacked)\n         return DB_LOAD_OK;\n+    LOCK(cs_wallet);\n     vector<CWalletTx> vErasedTxes;\n     DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,\"cr+\").ZapWalletTx(this, wtx, vErasedTxes);\n     if (nZapWalletTxRet == DB_NEED_REWRITE)\n     {\n         if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n         {\n-            LOCK(cs_wallet);\n             setKeyPool.clear();\n             // Note: can't top-up keypool here, because wallet is locked.\n             // User will be prompted to unlock wallet the next operation\n@@ -1608,7 +1608,6 @@ DBErrors CWallet::ZapWalletTx(const CWalletTx& wtx)\n \n     {\n         // remove zapped CWalletDB txes from mapWallet also\n-        LOCK(cs_wallet);\n         BOOST_FOREACH(const CWalletTx& tx, vErasedTxes)\n             mapWallet.erase(tx.GetHash());\n         // clear tx cache variables"
      }
    ]
  },
  {
    "sha": "6cfb210020aca2905cc473e0db5a68062a0381aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2ZiMjEwMDIwYWNhMjkwNWNjNDczZTBkYjVhNjgwNjJhMDM4MWFh",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-02-19T09:18:14Z"
      },
      "committer": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-02-19T09:18:14Z"
      },
      "message": "zapwallettx: add test case for single tx and a chain of dependant\ntransactions",
      "tree": {
        "sha": "9dd0f4e9df7a148b20ba799e78d005cd3182b9c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9dd0f4e9df7a148b20ba799e78d005cd3182b9c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6cfb210020aca2905cc473e0db5a68062a0381aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cfb210020aca2905cc473e0db5a68062a0381aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6cfb210020aca2905cc473e0db5a68062a0381aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cfb210020aca2905cc473e0db5a68062a0381aa/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ce78c117963d6e319c883c267b3952fca7fe086",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ce78c117963d6e319c883c267b3952fca7fe086",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ce78c117963d6e319c883c267b3952fca7fe086"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 22,
      "deletions": 11
    },
    "files": [
      {
        "sha": "26ba3633a804b135975d55d98180741e7d452cef",
        "filename": "qa/rpc-tests/zapwallettx.sh",
        "status": "modified",
        "additions": 22,
        "deletions": 11,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cfb210020aca2905cc473e0db5a68062a0381aa/qa/rpc-tests/zapwallettx.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cfb210020aca2905cc473e0db5a68062a0381aa/qa/rpc-tests/zapwallettx.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettx.sh?ref=6cfb210020aca2905cc473e0db5a68062a0381aa",
        "patch": "@@ -65,20 +65,31 @@ WaitBlocks\n CheckBalance \"$B1ARGS\" 50\n CheckBalance \"$B2ARGS\" 50\n \n-# Send 21 XBT from 1 to 3\n-TXID=$(Send $B1ARGS $B3ARGS 21)\n+echo \"Sending coins from B1 to B3...\"\n+for N in 1 2 3\n+do\n+    # Send N XBT from 1 to 3\n+    TXID[$N]=$(Send $B1ARGS $B3ARGS $N)\n \n-# Have B2 mine 100 blocks so B1 transactions are mature:\n-$CLI $B2ARGS setgenerate true 100\n-WaitBlocks\n+    # Have B2 mine 10 blocks so B1 transactions are mature:\n+    $CLI $B2ARGS setgenerate true 10\n+    WaitBlocks\n+done\n \n # B1 should end up with 50 XBT in block rewards,\n-# minus the 21 XBT sent to B3:\n-CheckBalance \"$B1ARGS\" \"50-21\"\n-CheckBalance \"$B3ARGS\" \"21\"\n-\n-# Zap send tx from B1, balance should again be 50 XBT\n-$CLI \"$B1ARGS\" zapwallettx $TXID\n+# minus the 6 (1, 2, 3) XBT sent to B3:\n+CheckBalance \"$B1ARGS\" \"50-1-2-3\"\n+CheckBalance \"$B3ARGS\" \"1+2+3\"\n+\n+# Zap send tx from B1 (TXID[3]), balance now be 47 XBT\n+echo \"Zapping last tx...\"\n+$CLI \"$B1ARGS\" zapwallettx ${TXID[3]}\n+CheckBalance \"$B1ARGS\" \"50-1-2\"\n+\n+# Zap send tx from B1 (TXID[1]), balance should again be 50 XBT\n+# as TDID[2] used an output from TXID[1] and hence also removed\n+echo \"Zapping first tx...\"\n+$CLI \"$B1ARGS\" zapwallettx ${TXID[1]}\n CheckBalance \"$B1ARGS\" \"50\"\n \n $CLI $B3ARGS stop > /dev/null 2>&1"
      }
    ]
  },
  {
    "sha": "5717503f0558dfb947ff985875d55e9ffbf00410",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzE3NTAzZjA1NThkZmI5NDdmZjk4NTg3NWQ1NWU5ZmZiZjAwNDEw",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-02-19T09:25:18Z"
      },
      "committer": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-02-19T09:25:18Z"
      },
      "message": "Merge branch 'vfspent' of https://github.com/gavinandresen/bitcoin-git into zapwallettx-single-novfspent",
      "tree": {
        "sha": "59d74da114cca7b985c8973d48a31dccd2fb0089",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59d74da114cca7b985c8973d48a31dccd2fb0089"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5717503f0558dfb947ff985875d55e9ffbf00410",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5717503f0558dfb947ff985875d55e9ffbf00410",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5717503f0558dfb947ff985875d55e9ffbf00410",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5717503f0558dfb947ff985875d55e9ffbf00410/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cfb210020aca2905cc473e0db5a68062a0381aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cfb210020aca2905cc473e0db5a68062a0381aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cfb210020aca2905cc473e0db5a68062a0381aa"
      },
      {
        "sha": "1fa606d93ad347def5c28bf4332da3fd3f391cd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fa606d93ad347def5c28bf4332da3fd3f391cd3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fa606d93ad347def5c28bf4332da3fd3f391cd3"
      }
    ],
    "stats": {
      "total": 538,
      "additions": 295,
      "deletions": 243
    },
    "files": [
      {
        "sha": "f0d25fd7a2350c0940a2776cb7bae83347283847",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -36,3 +36,14 @@ Configuring the github-merge tool for the bitcoin repository is done in the foll\n     git config githubmerge.testcmd \"make -j4 check\" (adapt to whatever you want to use for testing)\n     git config --global user.signingkey mykeyid (if you want to GPG sign)\n \n+## fix-copyright-headers.py\n+\n+Every year newly updated files need to have its copyright headers updated to reflect the current year.\n+If you run this script from src/ it will automatically update the year on the copyright header for all\n+.cpp and .h files if these have a git commit from the current year.\n+\n+For example a file changed in 2014 (with 2014 being the current year):\n+```// Copyright (c) 2009-2013 The Bitcoin developers```\n+\n+would be changed to:\n+```// Copyright (c) 2009-2014 The Bitcoin developers```\n\\ No newline at end of file"
      },
      {
        "sha": "52fdc99144b4762bc157365ca231b256cbb282d2",
        "filename": "contrib/devtools/fix-copyright-headers.py",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/contrib/devtools/fix-copyright-headers.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/contrib/devtools/fix-copyright-headers.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/fix-copyright-headers.py?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -0,0 +1,53 @@\n+#!/usr/bin/env python\n+'''\n+Run this script inside of src/ and it will look for all the files\n+that were changed this year that still have the last year in the\n+copyright headers, and it will fix the headers on that file using\n+a perl regex one liner.\n+\n+For example: if it finds something like this and we're in 2014\n+\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+\n+it will change it to\n+\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+\n+It will do this for all the files in the folder and its children.\n+\n+Author: @gubatron\n+'''\n+import os\n+import time\n+\n+year = time.gmtime()[0]\n+last_year = year - 1\n+command = \"perl -pi -e 's/%s The Bitcoin/%s The Bitcoin/' %s\"\n+listFilesCommand = \"find . | grep %s\"\n+\n+extensions = [\".cpp\",\".h\"]\n+\n+def getLastGitModifiedDate(filePath):\n+  gitGetLastCommitDateCommand = \"git log \" + filePath +\" | grep Date | head -n 1\"\n+  p = os.popen(gitGetLastCommitDateCommand)\n+  result = \"\"\n+  for l in p:\n+    result = l\n+    break\n+  result = result.replace(\"\\n\",\"\")\n+  return result\n+\n+n=1\n+for extension in extensions:\n+  foundFiles = os.popen(listFilesCommand % extension)\n+  for filePath in foundFiles:\n+    filePath = filePath[1:-1]\n+    if filePath.endswith(extension):\n+      filePath = os.getcwd() + filePath\n+      modifiedTime = getLastGitModifiedDate(filePath)\n+      if len(modifiedTime) > 0 and str(year) in modifiedTime:\n+        print n,\"Last Git Modified: \", modifiedTime, \" - \", filePath\n+        os.popen(command % (last_year,year,filePath))\n+        n = n + 1\n+\n+"
      },
      {
        "sha": "f5cdab5325742cbc19dca993d912946c922d3f1f",
        "filename": "contrib/linearize/example-linearize.cfg",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/contrib/linearize/example-linearize.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/contrib/linearize/example-linearize.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/example-linearize.cfg?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,7 +1,7 @@\n \n # bitcoind RPC settings\n rpcuser=someuser\n-rpcpass=somepassword\n+rpcpassword=somepassword\n host=127.0.0.1\n port=8332\n "
      },
      {
        "sha": "650f7d36849046e6613facf6778e9cc835f97bf4",
        "filename": "contrib/linearize/linearize.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/contrib/linearize/linearize.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/contrib/linearize/linearize.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize.py?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -71,7 +71,7 @@ def getblock(rpc, settings, n):\n \n def get_blocks(settings):\n \trpc = BitcoinRPC(settings['host'], settings['port'],\n-\t\t\t settings['rpcuser'], settings['rpcpass'])\n+\t\t\t settings['rpcuser'], settings['rpcpassword'])\n \n \toutf = open(settings['output'], 'ab')\n \n@@ -118,7 +118,7 @@ def get_blocks(settings):\n \t\tsettings['min_height'] = 0\n \tif 'max_height' not in settings:\n \t\tsettings['max_height'] = 279000\n-\tif 'rpcuser' not in settings or 'rpcpass' not in settings:\n+\tif 'rpcuser' not in settings or 'rpcpassword' not in settings:\n \t\tprint \"Missing username and/or password in cfg file\"\n \t\tsys.exit(1)\n "
      },
      {
        "sha": "8bf0b50bc09e870cb2e924bbf7bf9a965eb3620a",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -59,6 +59,27 @@ functioning both as a server and as a RPC client. The RPC client functionality\n executable, 'bitcoin-cli'. The RPC client code will eventually be removed from\n bitcoind, but will be kept for backwards compatibility for a release or two.\n \n+`walletpassphrase` RPC\n+-----------------------\n+\n+The behavior of the `walletpassphrase` RPC when the wallet is already unlocked\n+has changed between 0.8 and 0.9.\n+\n+The 0.8 behavior of `walletpassphrase` is to fail when the wallet is already unlocked:\n+\n+    > walletpassphrase 1000\n+    walletunlocktime = now + 1000\n+    > walletpassphrase 10\n+    Error: Wallet is already unlocked (old unlock time stays)\n+\n+The new behavior of `walletpassphrase` is to set a new unlock time overriding\n+the old one:\n+\n+    > walletpassphrase 1000\n+    walletunlocktime = now + 1000\n+    > walletpassphrase 10\n+    walletunlocktime = now + 10 (overriding the old unlock time)\n+\n 0.9.0rc1 Release notes\n =======================\n "
      },
      {
        "sha": "11e02764946db369ffa6eb2f84428ff1ab4bdea8",
        "filename": "qa/rpc-tests/txnmall.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/qa/rpc-tests/txnmall.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/qa/rpc-tests/txnmall.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txnmall.sh?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -25,13 +25,13 @@ D=$(mktemp -d test.XXXXX)\n \n D1=${D}/node1\n CreateDataDir $D1 port=11000 rpcport=11001\n-B1ARGS=\"-datadir=$D1 -debug\"\n+B1ARGS=\"-datadir=$D1\"\n $BITCOIND $B1ARGS &\n B1PID=$!\n \n D2=${D}/node2\n CreateDataDir $D2 port=11010 rpcport=11011\n-B2ARGS=\"-datadir=$D2 -debug\"\n+B2ARGS=\"-datadir=$D2\"\n $BITCOIND $B2ARGS &\n B2PID=$!\n "
      },
      {
        "sha": "4dd3716e801719ab1de33a92b128f024bc722bf1",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "5e6566a7ac78a0410593f550e3e4af76b296cb16",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "f5c460761e36fa9cde3318eca0d6abd2561380c0",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "592512c94777cd151ec503d28d250a1e97cfdff5",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "bc46ca6b2a88a8c0b8a4b64e31b41ff4905a68ee",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -339,6 +339,8 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n             LogPrintf(\"Importing bootstrap.dat...\\n\");\n             LoadExternalBlockFile(file);\n             RenameOver(pathBootstrap, pathBootstrapOld);\n+        } else {\n+            LogPrintf(\"Warning: Could not open bootstrap file %s\\n\", pathBootstrap.string());\n         }\n     }\n \n@@ -347,8 +349,10 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n         FILE *file = fopen(path.string().c_str(), \"rb\");\n         if (file) {\n             CImportingNow imp;\n-            LogPrintf(\"Importing %s...\\n\", path.string());\n+            LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n             LoadExternalBlockFile(file);\n+        } else {\n+            LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.string());\n         }\n     }\n }"
      },
      {
        "sha": "43c737a599a3e975c4a3802addd181b9788deead",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2012-2013 The Bitcoin developers\n+// Copyright (c) 2012-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "4d280303c676966309a00c426feba63e28586433",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -443,7 +443,7 @@ bool IsStandardTx(const CTransaction& tx, string& reason)\n             return false;\n         }\n         if (!txin.scriptSig.HasCanonicalPushes()) {\n-            reason = \"non-canonical-push\";\n+            reason = \"scriptsig-non-canonical-push\";\n             return false;\n         }\n     }\n@@ -1927,6 +1927,10 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew) {\n     BOOST_FOREACH(const CTransaction &tx, txConflicted) {\n         SyncWithWallets(tx.GetHash(), tx, NULL);\n     }\n+    // ... and about transactions that got confirmed:\n+    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n+        SyncWithWallets(tx.GetHash(), tx, &block);\n+    }\n     return true;\n }\n "
      },
      {
        "sha": "781562854f418845325d63ec1ee32cbfec993bcb",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -77,12 +77,6 @@ static const unsigned char REJECT_CHECKPOINT = 0x43;\n \n \n extern CScript COINBASE_FLAGS;\n-\n-\n-\n-\n-\n-\n extern CCriticalSection cs_main;\n extern CTxMemPool mempool;\n extern std::map<uint256, CBlockIndex*> mapBlockIndex;\n@@ -96,7 +90,6 @@ extern bool fBenchmark;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n extern unsigned int nCoinCacheSize;\n-extern bool fHaveGUI;\n \n // Minimum disk space required - used in CheckDiskSpace()\n static const uint64_t nMinDiskSpace = 52428800;"
      },
      {
        "sha": "73dd0a749d7049b86fd6563b72a407a1adbb65b4",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "359e629295ec7df1b300e43137daa708fb06419a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "8995f70da44d116274a37f4b2636d2a3cb802a7b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "d5b75d6afdb1c7dab24b4f604d35172fd666b16e",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "32c861b0d9decf000cc6ace73a542965796a25ff",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "c77a92f02066f893af564094948d972adbfda839",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "162009f5de7a5e7339bb1bab7b05dee0a43c786f",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "25ad0c66af1dda590db35e254798c28fc8f470aa",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -19,12 +19,12 @@ BitcoinAmountField::BitcoinAmountField(QWidget *parent) :\n     amount(0),\n     currentUnit(-1)\n {\n+    nSingleStep = 100000; // satoshis\n+\n     amount = new QDoubleSpinBox(this);\n     amount->setLocale(QLocale::c());\n-    amount->setDecimals(8);\n     amount->installEventFilter(this);\n     amount->setMaximumWidth(170);\n-    amount->setSingleStep(0.001);\n \n     QHBoxLayout *layout = new QHBoxLayout(this);\n     layout->addWidget(amount);\n@@ -159,11 +159,7 @@ void BitcoinAmountField::unitChanged(int idx)\n     // Set max length after retrieving the value, to prevent truncation\n     amount->setDecimals(BitcoinUnits::decimals(currentUnit));\n     amount->setMaximum(qPow(10, BitcoinUnits::amountDigits(currentUnit)) - qPow(10, -amount->decimals()));\n-\n-    if (currentUnit == BitcoinUnits::uBTC)\n-        amount->setSingleStep(0.01);\n-    else\n-        amount->setSingleStep(0.001);\n+    amount->setSingleStep((double)nSingleStep / (double)BitcoinUnits::factor(currentUnit));\n \n     if (valid)\n     {\n@@ -182,3 +178,9 @@ void BitcoinAmountField::setDisplayUnit(int newUnit)\n {\n     unit->setValue(newUnit);\n }\n+\n+void BitcoinAmountField::setSingleStep(qint64 step)\n+{\n+    nSingleStep = step;\n+    unitChanged(unit->currentIndex());\n+}"
      },
      {
        "sha": "521a9ed561b3d006bb1e64ebf10abaa62cf43b44",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -26,6 +26,9 @@ class BitcoinAmountField: public QWidget\n     qint64 value(bool *valid=0) const;\n     void setValue(qint64 value);\n \n+    /** Set single step in satoshis **/\n+    void setSingleStep(qint64 step);\n+\n     /** Make read-only **/\n     void setReadOnly(bool fReadOnly);\n \n@@ -56,6 +59,7 @@ class BitcoinAmountField: public QWidget\n     QDoubleSpinBox *amount;\n     QValueComboBox *unit;\n     int currentUnit;\n+    qint64 nSingleStep;\n \n     void setText(const QString &text);\n     QString text() const;"
      },
      {
        "sha": "f66fab496cea40bae3ce31da8113f59d018800f3",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "0cc1ebc502972fa074645a6282ec7e9e7c18168e",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "b4a9f1f5801cc8ac92d28f1e3d08695443333ef6",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 83,
        "deletions": 46,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -27,52 +27,6 @@\n        <string>&amp;Main</string>\n       </attribute>\n       <layout class=\"QVBoxLayout\" name=\"verticalLayout_Main\">\n-       <item>\n-        <widget class=\"QLabel\" name=\"transactionFeeInfoLabel\">\n-         <property name=\"text\">\n-          <string>Optional transaction fee per kB that helps make sure your transactions are processed quickly. Most transactions are 1 kB.</string>\n-         </property>\n-         <property name=\"textFormat\">\n-          <enum>Qt::PlainText</enum>\n-         </property>\n-         <property name=\"wordWrap\">\n-          <bool>true</bool>\n-         </property>\n-        </widget>\n-       </item>\n-       <item>\n-        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_1_Main\">\n-         <item>\n-          <widget class=\"QLabel\" name=\"transactionFeeLabel\">\n-           <property name=\"text\">\n-            <string>Pay transaction &amp;fee</string>\n-           </property>\n-           <property name=\"textFormat\">\n-            <enum>Qt::PlainText</enum>\n-           </property>\n-           <property name=\"buddy\">\n-            <cstring>transactionFee</cstring>\n-           </property>\n-          </widget>\n-         </item>\n-         <item>\n-          <widget class=\"BitcoinAmountField\" name=\"transactionFee\"/>\n-         </item>\n-         <item>\n-          <spacer name=\"horizontalSpacer_1_Main\">\n-           <property name=\"orientation\">\n-            <enum>Qt::Horizontal</enum>\n-           </property>\n-           <property name=\"sizeHint\" stdset=\"0\">\n-            <size>\n-             <width>40</width>\n-             <height>20</height>\n-            </size>\n-           </property>\n-          </spacer>\n-         </item>\n-        </layout>\n-       </item>\n        <item>\n         <widget class=\"QCheckBox\" name=\"bitcoinAtStartup\">\n          <property name=\"toolTip\">\n@@ -194,6 +148,89 @@\n        </item>\n       </layout>\n      </widget>\n+     <widget class=\"QWidget\" name=\"tabWallet\">\n+      <attribute name=\"title\">\n+       <string>W&amp;allet</string>\n+      </attribute>\n+      <layout class=\"QVBoxLayout\" name=\"verticalLayout_Network\">\n+       <item>\n+        <widget class=\"QLabel\" name=\"transactionFeeInfoLabel\">\n+         <property name=\"text\">\n+          <string>Optional transaction fee per kB that helps make sure your transactions are processed quickly. Most transactions are 1 kB.</string>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::PlainText</enum>\n+         </property>\n+         <property name=\"wordWrap\">\n+          <bool>true</bool>\n+         </property>\n+        </widget>\n+       </item>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_1_Main\">\n+         <item>\n+          <widget class=\"QLabel\" name=\"transactionFeeLabel\">\n+           <property name=\"text\">\n+            <string>Pay transaction &amp;fee</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+           <property name=\"buddy\">\n+            <cstring>transactionFee</cstring>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"BitcoinAmountField\" name=\"transactionFee\"/>\n+         </item>\n+         <item>\n+          <spacer name=\"horizontalSpacer_1_Main\">\n+           <property name=\"orientation\">\n+            <enum>Qt::Horizontal</enum>\n+           </property>\n+           <property name=\"sizeHint\" stdset=\"0\">\n+            <size>\n+             <width>40</width>\n+             <height>20</height>\n+            </size>\n+           </property>\n+          </spacer>\n+         </item>\n+        </layout>\n+       </item>\n+       <item>\n+        <widget class=\"QLabel\" name=\"label\">\n+         <property name=\"text\">\n+          <string>If you disable the spending of unconfirmed change, the change from a transaction cannot be used until that transaction has at least one confirmation. This also affects how your balance is computed.</string>\n+         </property>\n+         <property name=\"wordWrap\">\n+          <bool>true</bool>\n+         </property>\n+        </widget>\n+       </item>\n+       <item>\n+        <widget class=\"QCheckBox\" name=\"spendZeroConfChange\">\n+         <property name=\"text\">\n+          <string>Spend unconfirmed change  (experts only)</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item>\n+        <spacer name=\"verticalSpacer\">\n+         <property name=\"orientation\">\n+          <enum>Qt::Vertical</enum>\n+         </property>\n+         <property name=\"sizeHint\" stdset=\"0\">\n+          <size>\n+           <width>20</width>\n+           <height>40</height>\n+          </size>\n+         </property>\n+        </spacer>\n+       </item>\n+      </layout>\n+     </widget>\n      <widget class=\"QWidget\" name=\"tabNetwork\">\n       <attribute name=\"title\">\n        <string>&amp;Network</string>"
      },
      {
        "sha": "9f6588bc9ede44a496a90ccf9060a1cf19c6efe1",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "fc1258827e5535ba0296a823325744ab91be4e6b",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "f4eb7ef07ed9a191b276cb1f7e6039e1ecd6028e",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -15,6 +15,7 @@\n #include \"optionsmodel.h\"\n \n #include \"netbase.h\"\n+#include \"main.h\"\n \n #include <QDir>\n #include <QIntValidator>\n@@ -93,6 +94,7 @@ OptionsDialog::OptionsDialog(QWidget *parent) :\n     }\n \n     ui->unit->setModel(new BitcoinUnits(this));\n+    ui->transactionFee->setSingleStep(CTransaction::nMinTxFee);\n \n     /* Widget-to-option mapper */\n     mapper = new MonitoredDataMapper(this);\n@@ -148,11 +150,14 @@ void OptionsDialog::setModel(OptionsModel *model)\n void OptionsDialog::setMapper()\n {\n     /* Main */\n-    mapper->addMapping(ui->transactionFee, OptionsModel::Fee);\n     mapper->addMapping(ui->bitcoinAtStartup, OptionsModel::StartAtStartup);\n     mapper->addMapping(ui->threadsScriptVerif, OptionsModel::ThreadsScriptVerif);\n     mapper->addMapping(ui->databaseCache, OptionsModel::DatabaseCache);\n \n+    /* Wallet */\n+    mapper->addMapping(ui->transactionFee, OptionsModel::Fee);\n+    mapper->addMapping(ui->spendZeroConfChange, OptionsModel::SpendZeroConfChange);\n+\n     /* Network */\n     mapper->addMapping(ui->mapPortUpnp, OptionsModel::MapPortUPnP);\n "
      },
      {
        "sha": "eff73b7702030741067c9a83d003b53f43f7a1cc",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -76,6 +76,11 @@ void OptionsModel::Init()\n     nTransactionFee = settings.value(\"nTransactionFee\").toLongLong(); // if -paytxfee is set, this will be overridden later in init.cpp\n     if (mapArgs.count(\"-paytxfee\"))\n         strOverriddenByCommandLine += \"-paytxfee \";\n+\n+    if (!settings.contains(\"bSpendZeroConfChange\"))\n+        settings.setValue(\"bSpendZeroConfChange\", true);\n+    if (!SoftSetBoolArg(\"-spendzeroconfchange\", settings.value(\"bSpendZeroConfChange\").toBool()))\n+        strOverriddenByCommandLine += \"-spendzeroconfchange \";\n #endif\n \n     if (!settings.contains(\"nDatabaseCache\"))\n@@ -184,6 +189,8 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n             // Todo: Consider to revert back to use just nTransactionFee here, if we don't want\n             // -paytxfee to update our QSettings!\n             return settings.value(\"nTransactionFee\");\n+        case SpendZeroConfChange:\n+            return settings.value(\"bSpendZeroConfChange\");\n #endif\n         case DisplayUnit:\n             return nDisplayUnit;\n@@ -274,6 +281,12 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             settings.setValue(\"nTransactionFee\", (qint64)nTransactionFee);\n             emit transactionFeeChanged(nTransactionFee);\n             break;\n+        case SpendZeroConfChange:\n+            if (settings.value(\"bSpendZeroConfChange\") != value) {\n+                settings.setValue(\"bSpendZeroConfChange\", value);\n+                setRestartRequired(true);\n+            }\n+            break;\n #endif\n         case DisplayUnit:\n             nDisplayUnit = value.toInt();"
      },
      {
        "sha": "a3487ddd2e2e36476f08bace336b418532502c5f",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -40,6 +40,7 @@ class OptionsModel : public QAbstractListModel\n         CoinControlFeatures,    // bool\n         ThreadsScriptVerif,     // int\n         DatabaseCache,          // int\n+        SpendZeroConfChange,    // bool\n         OptionIDRowCount,\n     };\n "
      },
      {
        "sha": "d84d09c57d6c8039f532baf8b52b0e8eef44b22e",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "7539645b4779f7a6216adbb15ea7498ae188a966",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "12d2235782afdf641df814750341c1c69bd2ffcb",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "844d62518cef826a2698150005d9241fab779363",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "d4cc5078aac86c58f9701238fad17ecadc12b3c0",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "bd29efee86a3d8a6a36351dc36ed292bc0db3479",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "e5da01546af66d3b7e268712166d35e82793e31b",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "33621e54b029f2f47bac408d87223cc553c7c264",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "cacf5dc49bf8da070384d081aec319fee769583c",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "d79038d81d13a3dbf3ba3d24a48b52c1feb43824",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "4aebaa1e7f0b79f777bf957fae68695fc078490d",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "8cfaed27c7de529be83494008e3fea10ce738550",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "7d76204ba47ab295dce69b6ba70e4c071215458f",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "24992db465f86b5f5bcc278b800e502ad61f6f58",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -38,9 +38,9 @@ void AboutDialog::setModel(ClientModel *model)\n          * 32 and 64 bit builds. On other architectures, 32/64 bit may be more ambigious.\n          */\n #if defined(__x86_64__)\n-        version += \" (64-bit)\";\n+        version += tr(\" (%1-bit)\").arg(64);\n #elif defined(__i386__ )\n-        version += \" (32-bit)\";\n+        version += tr(\" (%1-bit)\").arg(32);\n #endif\n         ui->versionLabel->setText(version);\n     }"
      },
      {
        "sha": "641704f0a7dc33322ac5ee619b837b65f714c0e7",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "28a9169e273b467547fe5cd91f24ae65fc0313e2",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2013 The Bitcoin developers\n+// Copyright (c) 2011-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "635d4ac19bc3882d68b2ddbe6dbb45c99ea993ca",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -23,13 +23,13 @@ using namespace std;\n void EnsureWalletIsUnlocked();\n \n std::string static EncodeDumpTime(int64_t nTime) {\n-    return DateTimeStrFormat(\"%Y-%m-%\"PRId64\"T%H:%M:%SZ\", nTime);\n+    return DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", nTime);\n }\n \n int64_t static DecodeDumpTime(const std::string &str) {\n-    static boost::posix_time::time_input_facet facet(\"%Y-%m-%dT%H:%M:%SZ\");\n     static const boost::posix_time::ptime epoch = boost::posix_time::from_time_t(0);\n-    const std::locale loc(std::locale::classic(), &facet);\n+    static const std::locale loc(std::locale::classic(),\n+        new boost::posix_time::time_input_facet(\"%Y-%m-%dT%H:%M:%SZ\"));\n     std::istringstream iss(str);\n     iss.imbue(loc);\n     boost::posix_time::ptime ptime(boost::date_time::not_a_date_time);"
      },
      {
        "sha": "353fb77b889fb38327f37eaae79279e9744886bd",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "b764349338a758a498c3130e05e2b9a6c0ce60c7",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "4ea84e99bea1a1cf19024654c59d793ba5bd26d1",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "80cdb34f15358666d11a0fe5c62fe5675afdec8d",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "e2bdc80aef15758516baaa47dc937499dc054789",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "64305bc81dab55e977e405e0aae5dc33ae5ccda1",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "148e11d845dcbf3f9e89bd14dc8c2559de1445c0",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "a5123688ea10e928116c4653478a53cf7ad6b510",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -1497,7 +1497,7 @@ Value gettransaction(const Array& params, bool fHelp)\n     entry.push_back(Pair(\"details\", details));\n \n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-    ssTx << wtx;\n+    ssTx << static_cast<CTransaction>(wtx);\n     string strHex = HexStr(ssTx.begin(), ssTx.end());\n     entry.push_back(Pair(\"hex\", strHex));\n \n@@ -1575,6 +1575,9 @@ Value walletpassphrase(const Array& params, bool fHelp)\n             \"\\nArguments:\\n\"\n             \"1. \\\"passphrase\\\"     (string, required) The wallet passphrase\\n\"\n             \"2. timeout            (numeric, required) The time to keep the decryption key in seconds.\\n\"\n+            \"\\nNote:\\n\"\n+            \"Issuing the walletpassphrase command while the wallet is already unlocked will set a new unlock\\n\"\n+            \"time that overrides the old one.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nunlock the wallet for 60 seconds\\n\"\n             + HelpExampleCli(\"walletpassphrase\", \"\\\"my pass phrase\\\" 60\") +"
      },
      {
        "sha": "d06639a1120fd78fe2a581f999389ac56c037afb",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "8cfd1c2e031028bc27b6af385e5c040d682d1923",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "6f7627e0904f597df3da7ab2842529252b54ae83",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "26ac0b23a1858ed13679f84c763d5c52f219074b",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 85,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -34,6 +34,15 @@ struct CompareValueOnly\n     }\n };\n \n+const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n+{\n+    LOCK(cs_wallet);\n+    std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(hash);\n+    if (it == mapWallet.end())\n+        return NULL;\n+    return &(it->second);\n+}\n+\n CPubKey CWallet::GenerateNewKey()\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n@@ -809,78 +818,6 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, int64_t& nReceived,\n     }\n }\n \n-void CWalletTx::AddSupportingTransactions()\n-{\n-    vtxPrev.clear();\n-\n-    const int COPY_DEPTH = 3;\n-    if (SetMerkleBranch() < COPY_DEPTH)\n-    {\n-        vector<uint256> vWorkQueue;\n-        BOOST_FOREACH(const CTxIn& txin, vin)\n-            vWorkQueue.push_back(txin.prevout.hash);\n-\n-        {\n-            LOCK(pwallet->cs_wallet);\n-            map<uint256, const CMerkleTx*> mapWalletPrev;\n-            set<uint256> setAlreadyDone;\n-            for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n-            {\n-                uint256 hash = vWorkQueue[i];\n-                if (setAlreadyDone.count(hash))\n-                    continue;\n-                setAlreadyDone.insert(hash);\n-\n-                CMerkleTx tx;\n-                map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(hash);\n-                if (mi != pwallet->mapWallet.end())\n-                {\n-                    tx = (*mi).second;\n-                    BOOST_FOREACH(const CMerkleTx& txWalletPrev, (*mi).second.vtxPrev)\n-                        mapWalletPrev[txWalletPrev.GetHash()] = &txWalletPrev;\n-                }\n-                else if (mapWalletPrev.count(hash))\n-                {\n-                    tx = *mapWalletPrev[hash];\n-                }\n-                else\n-                {\n-                    continue;\n-                }\n-\n-                int nDepth = tx.SetMerkleBranch();\n-                vtxPrev.push_back(tx);\n-\n-                if (nDepth < COPY_DEPTH)\n-                {\n-                    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-                        vWorkQueue.push_back(txin.prevout.hash);\n-                }\n-            }\n-        }\n-    }\n-\n-    reverse(vtxPrev.begin(), vtxPrev.end());\n-}\n-\n-bool CWalletTx::AcceptWalletTransaction()\n-{\n-    {\n-        LOCK(mempool.cs);\n-        // Add previous supporting transactions first\n-        BOOST_FOREACH(CMerkleTx& tx, vtxPrev)\n-        {\n-            if (!tx.IsCoinBase())\n-            {\n-                uint256 hash = tx.GetHash();\n-                if (!mempool.exists(hash) && pcoinsTip->HaveCoins(hash))\n-                    tx.AcceptToMemoryPool(false);\n-            }\n-        }\n-        return AcceptToMemoryPool(false);\n-    }\n-    return false;\n-}\n \n bool CWalletTx::WriteToDisk()\n {\n@@ -933,22 +870,14 @@ void CWallet::ReacceptWalletTransactions()\n         if (!wtx.IsCoinBase() && nDepth < 0)\n         {\n             // Try to add to memory pool\n-            wtx.AcceptWalletTransaction();\n+            LOCK(mempool.cs);\n+            wtx.AcceptToMemoryPool(false);\n         }\n     }\n }\n \n void CWalletTx::RelayWalletTransaction()\n {\n-    BOOST_FOREACH(const CMerkleTx& tx, vtxPrev)\n-    {\n-        // Important: versions of bitcoin before 0.8.6 had a bug that inserted\n-        // empty transactions into the vtxPrev, which will cause the node to be\n-        // banned when retransmitted, hence the check for !tx.vin.empty()\n-        if (!tx.IsCoinBase() && !tx.vin.empty())\n-            if (tx.GetDepthInMainChain() == 0)\n-                RelayTransaction((CTransaction)tx, tx.GetHash());\n-    }\n     if (!IsCoinBase())\n     {\n         if (GetDepthInMainChain() == 0) {\n@@ -1423,8 +1352,6 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                     continue;\n                 }\n \n-                // Fill vtxPrev by copying from previous transactions vtxPrev\n-                wtxNew.AddSupportingTransactions();\n                 wtxNew.fTimeReceivedIsTxTime = true;\n \n                 break;"
      },
      {
        "sha": "49a7cdbb70717a45e72a0d6e36dcee7db2ad71f2",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 35,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -173,6 +173,8 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n \n     int64_t nTimeFirstKey;\n \n+    const CWalletTx* GetWalletTx(const uint256& hash) const;\n+\n     // check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n@@ -445,7 +447,7 @@ class CWalletTx : public CMerkleTx\n     const CWallet* pwallet;\n \n public:\n-    std::vector<CMerkleTx> vtxPrev;\n+    std::vector<CMerkleTx> vUnused;// Used to be vtxPrev\n     mapValue_t mapValue;\n     std::vector<std::pair<std::string, std::string> > vOrderForm;\n     unsigned int fTimeReceivedIsTxTime;\n@@ -490,7 +492,6 @@ class CWalletTx : public CMerkleTx\n     void Init(const CWallet* pwalletIn)\n     {\n         pwallet = pwalletIn;\n-        vtxPrev.clear();\n         mapValue.clear();\n         vOrderForm.clear();\n         fTimeReceivedIsTxTime = false;\n@@ -529,7 +530,7 @@ class CWalletTx : public CMerkleTx\n         }\n \n         nSerSize += SerReadWrite(s, *(CMerkleTx*)this, nType, nVersion,ser_action);\n-        READWRITE(vtxPrev);\n+        READWRITE(vUnused);\n         READWRITE(mapValue);\n         READWRITE(vOrderForm);\n         READWRITE(fTimeReceivedIsTxTime);\n@@ -670,38 +671,13 @@ class CWalletTx : public CMerkleTx\n         if (!bSpendZeroConfChange || !IsFromMe()) // using wtx's cached debit\n             return false;\n \n-        // If no confirmations but it's from us, we can still\n-        // consider it confirmed if all dependencies are confirmed\n-        std::map<uint256, const CMerkleTx*> mapPrev;\n-        std::vector<const CMerkleTx*> vWorkQueue;\n-        vWorkQueue.reserve(vtxPrev.size()+1);\n-        vWorkQueue.push_back(this);\n-        for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+        // Trusted if all inputs are trusted (recursively)\n+        BOOST_FOREACH(const CTxIn& txin, vin)\n         {\n-            const CMerkleTx* ptx = vWorkQueue[i];\n-\n-            if (!IsFinalTx(*ptx))\n-                return false;\n-            int nPDepth = ptx->GetDepthInMainChain();\n-            if (nPDepth >= 1)\n-                continue;\n-            if (nPDepth < 0)\n+            // Transactions not from us: not trusted\n+            const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n+            if (parent == NULL || !parent->IsTrusted())\n                 return false;\n-            if (!pwallet->IsFromMe(*ptx))\n-                return false;\n-\n-            if (mapPrev.empty())\n-            {\n-                BOOST_FOREACH(const CMerkleTx& tx, vtxPrev)\n-                    mapPrev[tx.GetHash()] = &tx;\n-            }\n-\n-            BOOST_FOREACH(const CTxIn& txin, ptx->vin)\n-            {\n-                if (!mapPrev.count(txin.prevout.hash))\n-                    return false;\n-                vWorkQueue.push_back(mapPrev[txin.prevout.hash]);\n-            }\n         }\n         return true;\n     }\n@@ -711,8 +687,6 @@ class CWalletTx : public CMerkleTx\n     int64_t GetTxTime() const;\n     int GetRequestCount() const;\n \n-    void AddSupportingTransactions();\n-    bool AcceptWalletTransaction();\n     void RelayWalletTransaction();\n \n     std::set<uint256> GetConflicts() const;"
      },
      {
        "sha": "502246f4097583f1d606e26c63316bc1fbb650ba",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5717503f0558dfb947ff985875d55e9ffbf00410/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5717503f0558dfb947ff985875d55e9ffbf00410/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=5717503f0558dfb947ff985875d55e9ffbf00410",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      }
    ]
  }
]