[
  {
    "sha": "3390014fd0d91b0148425e794ac01c10b646a682",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzkwMDE0ZmQwZDkxYjAxNDg0MjVlNzk0YWMwMWMxMGI2NDZhNjgy",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-12T14:31:32Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-03T01:02:51Z"
      },
      "message": "Minimal BIP 22 (getblocktemplate) support\n\n- Replaces getmemorypool with new getblocktemplate\n- Add missing keys: coinbaseaux, target, mutable, noncerange, sigoplimit, sizelimit, and height\n- Accept and send parameter Objects, checking \"mode\" key if present\n- Return rejection reason \"rejected\" for submit mode",
      "tree": {
        "sha": "e5ed1c8f1b6fc2072874b25b469113aa704339eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5ed1c8f1b6fc2072874b25b469113aa704339eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3390014fd0d91b0148425e794ac01c10b646a682",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3390014fd0d91b0148425e794ac01c10b646a682",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3390014fd0d91b0148425e794ac01c10b646a682",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3390014fd0d91b0148425e794ac01c10b646a682/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1c3d8f14dca6a86fa103d86ef125e95372f860c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1c3d8f14dca6a86fa103d86ef125e95372f860c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1c3d8f14dca6a86fa103d86ef125e95372f860c"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 95,
      "deletions": 20
    },
    "files": [
      {
        "sha": "94d46b69de8e906272fb5bf8bf6563ed75192e66",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 95,
        "deletions": 20,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3390014fd0d91b0148425e794ac01c10b646a682/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3390014fd0d91b0148425e794ac01c10b646a682/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=3390014fd0d91b0148425e794ac01c10b646a682",
        "patch": "@@ -1862,24 +1862,43 @@ Value getwork(const Array& params, bool fHelp)\n }\n \n \n-Value getmemorypool(const Array& params, bool fHelp)\n+Value getblocktemplate(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() > 1)\n+    if (fHelp || params.size() != 1)\n         throw runtime_error(\n-            \"getmemorypool [data]\\n\"\n-            \"If [data] is not specified, returns data needed to construct a block to work on:\\n\"\n+            \"getblocktemplate [params]\\n\"\n+            \"If [params] does not contain a \\\"data\\\" key, returns data needed to construct a block to work on:\\n\"\n             \"  \\\"version\\\" : block version\\n\"\n             \"  \\\"previousblockhash\\\" : hash of current highest block\\n\"\n             \"  \\\"transactions\\\" : contents of non-coinbase transactions that should be included in the next block\\n\"\n+            \"  \\\"coinbaseaux\\\" : data that should be included in coinbase\\n\"\n             \"  \\\"coinbasevalue\\\" : maximum allowable input to coinbase transaction, including the generation award and transaction fees\\n\"\n-            \"  \\\"coinbaseflags\\\" : data that should be included in coinbase so support for new features can be judged\\n\"\n-            \"  \\\"time\\\" : timestamp appropriate for next block\\n\"\n+            \"  \\\"target\\\" : hash target\\n\"\n             \"  \\\"mintime\\\" : minimum timestamp appropriate for next block\\n\"\n             \"  \\\"curtime\\\" : current timestamp\\n\"\n+            \"  \\\"mutable\\\" : list of ways the block template may be changed\\n\"\n+            \"  \\\"noncerange\\\" : range of valid nonces\\n\"\n+            \"  \\\"sigoplimit\\\" : limit of sigops in blocks\\n\"\n+            \"  \\\"sizelimit\\\" : limit of block size\\n\"\n             \"  \\\"bits\\\" : compressed target of next block\\n\"\n-            \"If [data] is specified, tries to solve the block and returns true if it was successful.\");\n+            \"  \\\"height\\\" : height of the next block\\n\"\n+            \"If [params] does contain a \\\"data\\\" key, tries to solve the block and returns null if it was successful (and \\\"rejected\\\" if not)\\n\"\n+            \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\");\n \n-    if (params.size() == 0)\n+    const Object& oparam = params[0].get_obj();\n+    std::string strMode;\n+    {\n+        const Value& modeval = find_value(oparam, \"mode\");\n+        if (modeval.type() == str_type)\n+            strMode = modeval.get_str();\n+        else\n+        if (find_value(oparam, \"data\").type() == null_type)\n+            strMode = \"template\";\n+        else\n+            strMode = \"submit\";\n+    }\n+\n+    if (strMode == \"template\")\n     {\n         if (vNodes.empty())\n             throw JSONRPCError(-9, \"Bitcoin is not connected!\");\n@@ -1914,38 +1933,93 @@ Value getmemorypool(const Array& params, bool fHelp)\n         pblock->nNonce = 0;\n \n         Array transactions;\n-        BOOST_FOREACH(CTransaction tx, pblock->vtx) {\n-            if(tx.IsCoinBase())\n+        map<uint256, int64_t> setTxIndex;\n+        int i = 0;\n+        CTxDB txdb(\"r\");\n+        BOOST_FOREACH (CTransaction& tx, pblock->vtx)\n+        {\n+            uint256 txHash = tx.GetHash();\n+            setTxIndex[txHash] = i++;\n+\n+            if (tx.IsCoinBase())\n                 continue;\n \n-            CDataStream ssTx;\n+            Object entry;\n+\n+            CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n             ssTx << tx;\n+            entry.push_back(Pair(\"data\", HexStr(ssTx.begin(), ssTx.end())));\n \n-            transactions.push_back(HexStr(ssTx.begin(), ssTx.end()));\n+            entry.push_back(Pair(\"hash\", txHash.GetHex()));\n+\n+            MapPrevTx mapInputs;\n+            map<uint256, CTxIndex> mapUnused;\n+            bool fInvalid = false;\n+            if (tx.FetchInputs(txdb, mapUnused, false, false, mapInputs, fInvalid))\n+            {\n+                entry.push_back(Pair(\"fee\", (int64_t)(tx.GetValueIn(mapInputs) - tx.GetValueOut())));\n+\n+                Array deps;\n+                BOOST_FOREACH (MapPrevTx::value_type& inp, mapInputs)\n+                {\n+                    if (setTxIndex.count(inp.first))\n+                        deps.push_back(setTxIndex[inp.first]);\n+                }\n+                entry.push_back(Pair(\"depends\", deps));\n+\n+                int64_t nSigOps = tx.GetLegacySigOpCount();\n+                nSigOps += tx.GetP2SHSigOpCount(mapInputs);\n+                entry.push_back(Pair(\"sigops\", nSigOps));\n+            }\n+\n+            transactions.push_back(entry);\n+        }\n+\n+        Object aux;\n+        aux.push_back(Pair(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n+\n+        uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n+\n+        static Array aMutable;\n+        if (aMutable.empty())\n+        {\n+            aMutable.push_back(\"time\");\n+            aMutable.push_back(\"transactions\");\n+            aMutable.push_back(\"prevblock\");\n         }\n \n         Object result;\n         result.push_back(Pair(\"version\", pblock->nVersion));\n         result.push_back(Pair(\"previousblockhash\", pblock->hashPrevBlock.GetHex()));\n         result.push_back(Pair(\"transactions\", transactions));\n+        result.push_back(Pair(\"coinbaseaux\", aux));\n         result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));\n-        result.push_back(Pair(\"coinbaseflags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n-        result.push_back(Pair(\"time\", (int64_t)pblock->nTime));\n+        result.push_back(Pair(\"target\", hashTarget.GetHex()));\n         result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n-        result.push_back(Pair(\"curtime\", (int64_t)GetAdjustedTime()));\n+        result.push_back(Pair(\"mutable\", aMutable));\n+        result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n+        result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));\n+        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SIZE));\n+        result.push_back(Pair(\"curtime\", (int64_t)pblock->nTime));\n         result.push_back(Pair(\"bits\", HexBits(pblock->nBits)));\n+        result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n \n         return result;\n     }\n     else\n+    if (strMode == \"submit\")\n     {\n         // Parse parameters\n-        CDataStream ssBlock(ParseHex(params[0].get_str()));\n+        CDataStream ssBlock(ParseHex(find_value(oparam, \"data\").get_str()), SER_NETWORK, PROTOCOL_VERSION);\n         CBlock pblock;\n         ssBlock >> pblock;\n \n-        return ProcessBlock(NULL, &pblock);\n+        bool fAccepted = ProcessBlock(NULL, &pblock);\n+\n+        return fAccepted ? Value::null : \"rejected\";\n     }\n+\n+    throw JSONRPCError(-8, \"Invalid mode\");\n }\n \n Value getblockhash(const Array& params, bool fHelp)\n@@ -2044,7 +2118,7 @@ pair<string, rpcfn_type> pCallTable[] =\n     make_pair(\"getwork\",                &getwork),\n     make_pair(\"listaccounts\",           &listaccounts),\n     make_pair(\"settxfee\",               &settxfee),\n-    make_pair(\"getmemorypool\",          &getmemorypool),\n+    make_pair(\"getblocktemplate\",       &getblocktemplate),\n     make_pair(\"listsinceblock\",         &listsinceblock),\n     make_pair(\"dumpprivkey\",            &dumpprivkey),\n     make_pair(\"importprivkey\",          &importprivkey)\n@@ -2074,7 +2148,7 @@ string pAllowInSafeMode[] =\n     \"walletlock\",\n     \"validateaddress\",\n     \"getwork\",\n-    \"getmemorypool\",\n+    \"getblocktemplate\",\n };\n set<string> setAllowInSafeMode(pAllowInSafeMode, pAllowInSafeMode + sizeof(pAllowInSafeMode)/sizeof(pAllowInSafeMode[0]));\n \n@@ -2499,7 +2573,7 @@ void ThreadRPCServer2(void* parg)\n             if (valMethod.type() != str_type)\n                 throw JSONRPCError(-32600, \"Method must be a string\");\n             string strMethod = valMethod.get_str();\n-            if (strMethod != \"getwork\" && strMethod != \"getmemorypool\")\n+            if (strMethod != \"getwork\" && strMethod != \"getblocktemplate\")\n                 printf(\"ThreadRPCServer method=%s\\n\", strMethod.c_str());\n \n             // Parse params\n@@ -2681,6 +2755,7 @@ int CommandLineRPC(int argc, char *argv[])\n         if (strMethod == \"listtransactions\"       && n > 2) ConvertTo<boost::int64_t>(params[2]);\n         if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n         if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+        if (strMethod == \"getblocktemplate\"       && n > 0) ConvertTo<Object>(params[0]);\n         if (strMethod == \"listsinceblock\"         && n > 1) ConvertTo<boost::int64_t>(params[1]);\n         if (strMethod == \"sendmany\"               && n > 1)\n         {"
      }
    ]
  },
  {
    "sha": "44427fa8332b2ae090256345ec5f9e6e78e04dba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDQyN2ZhODMzMmIyYWUwOTAyNTYzNDVlYzVmOWU2ZTc4ZTA0ZGJh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-03T01:12:55Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-08-03T01:12:55Z"
      },
      "message": "Merge branch 'gmp_bip_0.6.0' into gmp_bip\n\nConflicts:\n\tsrc/bitcoinrpc.cpp",
      "tree": {
        "sha": "0c649ecfaf4bb1a3808c10602db495363280072c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c649ecfaf4bb1a3808c10602db495363280072c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44427fa8332b2ae090256345ec5f9e6e78e04dba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44427fa8332b2ae090256345ec5f9e6e78e04dba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44427fa8332b2ae090256345ec5f9e6e78e04dba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44427fa8332b2ae090256345ec5f9e6e78e04dba/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd199d0ebd086262626a5cc0ce794de6a477d731",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd199d0ebd086262626a5cc0ce794de6a477d731",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd199d0ebd086262626a5cc0ce794de6a477d731"
      },
      {
        "sha": "3390014fd0d91b0148425e794ac01c10b646a682",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3390014fd0d91b0148425e794ac01c10b646a682",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3390014fd0d91b0148425e794ac01c10b646a682"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 93,
      "deletions": 18
    },
    "files": [
      {
        "sha": "208c830aa90df099e72dde62fcf5be51191145f1",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 93,
        "deletions": 18,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44427fa8332b2ae090256345ec5f9e6e78e04dba/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44427fa8332b2ae090256345ec5f9e6e78e04dba/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=44427fa8332b2ae090256345ec5f9e6e78e04dba",
        "patch": "@@ -1923,24 +1923,43 @@ Value getwork(const Array& params, bool fHelp)\n }\n \n \n-Value getmemorypool(const Array& params, bool fHelp)\n+Value getblocktemplate(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() > 1)\n+    if (fHelp || params.size() != 1)\n         throw runtime_error(\n-            \"getmemorypool [data]\\n\"\n-            \"If [data] is not specified, returns data needed to construct a block to work on:\\n\"\n+            \"getblocktemplate [params]\\n\"\n+            \"If [params] does not contain a \\\"data\\\" key, returns data needed to construct a block to work on:\\n\"\n             \"  \\\"version\\\" : block version\\n\"\n             \"  \\\"previousblockhash\\\" : hash of current highest block\\n\"\n             \"  \\\"transactions\\\" : contents of non-coinbase transactions that should be included in the next block\\n\"\n+            \"  \\\"coinbaseaux\\\" : data that should be included in coinbase\\n\"\n             \"  \\\"coinbasevalue\\\" : maximum allowable input to coinbase transaction, including the generation award and transaction fees\\n\"\n-            \"  \\\"coinbaseflags\\\" : data that should be included in coinbase so support for new features can be judged\\n\"\n-            \"  \\\"time\\\" : timestamp appropriate for next block\\n\"\n+            \"  \\\"target\\\" : hash target\\n\"\n             \"  \\\"mintime\\\" : minimum timestamp appropriate for next block\\n\"\n             \"  \\\"curtime\\\" : current timestamp\\n\"\n+            \"  \\\"mutable\\\" : list of ways the block template may be changed\\n\"\n+            \"  \\\"noncerange\\\" : range of valid nonces\\n\"\n+            \"  \\\"sigoplimit\\\" : limit of sigops in blocks\\n\"\n+            \"  \\\"sizelimit\\\" : limit of block size\\n\"\n             \"  \\\"bits\\\" : compressed target of next block\\n\"\n-            \"If [data] is specified, tries to solve the block and returns true if it was successful.\");\n+            \"  \\\"height\\\" : height of the next block\\n\"\n+            \"If [params] does contain a \\\"data\\\" key, tries to solve the block and returns null if it was successful (and \\\"rejected\\\" if not)\\n\"\n+            \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\");\n \n-    if (params.size() == 0)\n+    const Object& oparam = params[0].get_obj();\n+    std::string strMode;\n+    {\n+        const Value& modeval = find_value(oparam, \"mode\");\n+        if (modeval.type() == str_type)\n+            strMode = modeval.get_str();\n+        else\n+        if (find_value(oparam, \"data\").type() == null_type)\n+            strMode = \"template\";\n+        else\n+            strMode = \"submit\";\n+    }\n+\n+    if (strMode == \"template\")\n     {\n         if (vNodes.empty())\n             throw JSONRPCError(-9, \"Bitcoin is not connected!\");\n@@ -1985,38 +2004,93 @@ Value getmemorypool(const Array& params, bool fHelp)\n         pblock->nNonce = 0;\n \n         Array transactions;\n-        BOOST_FOREACH(CTransaction tx, pblock->vtx) {\n-            if(tx.IsCoinBase())\n+        map<uint256, int64_t> setTxIndex;\n+        int i = 0;\n+        CTxDB txdb(\"r\");\n+        BOOST_FOREACH (CTransaction& tx, pblock->vtx)\n+        {\n+            uint256 txHash = tx.GetHash();\n+            setTxIndex[txHash] = i++;\n+\n+            if (tx.IsCoinBase())\n                 continue;\n \n+            Object entry;\n+\n             CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n             ssTx << tx;\n+            entry.push_back(Pair(\"data\", HexStr(ssTx.begin(), ssTx.end())));\n \n-            transactions.push_back(HexStr(ssTx.begin(), ssTx.end()));\n+            entry.push_back(Pair(\"hash\", txHash.GetHex()));\n+\n+            MapPrevTx mapInputs;\n+            map<uint256, CTxIndex> mapUnused;\n+            bool fInvalid = false;\n+            if (tx.FetchInputs(txdb, mapUnused, false, false, mapInputs, fInvalid))\n+            {\n+                entry.push_back(Pair(\"fee\", (int64_t)(tx.GetValueIn(mapInputs) - tx.GetValueOut())));\n+\n+                Array deps;\n+                BOOST_FOREACH (MapPrevTx::value_type& inp, mapInputs)\n+                {\n+                    if (setTxIndex.count(inp.first))\n+                        deps.push_back(setTxIndex[inp.first]);\n+                }\n+                entry.push_back(Pair(\"depends\", deps));\n+\n+                int64_t nSigOps = tx.GetLegacySigOpCount();\n+                nSigOps += tx.GetP2SHSigOpCount(mapInputs);\n+                entry.push_back(Pair(\"sigops\", nSigOps));\n+            }\n+\n+            transactions.push_back(entry);\n+        }\n+\n+        Object aux;\n+        aux.push_back(Pair(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n+\n+        uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n+\n+        static Array aMutable;\n+        if (aMutable.empty())\n+        {\n+            aMutable.push_back(\"time\");\n+            aMutable.push_back(\"transactions\");\n+            aMutable.push_back(\"prevblock\");\n         }\n \n         Object result;\n         result.push_back(Pair(\"version\", pblock->nVersion));\n         result.push_back(Pair(\"previousblockhash\", pblock->hashPrevBlock.GetHex()));\n         result.push_back(Pair(\"transactions\", transactions));\n+        result.push_back(Pair(\"coinbaseaux\", aux));\n         result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));\n-        result.push_back(Pair(\"coinbaseflags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n-        result.push_back(Pair(\"time\", (int64_t)pblock->nTime));\n+        result.push_back(Pair(\"target\", hashTarget.GetHex()));\n         result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n-        result.push_back(Pair(\"curtime\", (int64_t)GetAdjustedTime()));\n+        result.push_back(Pair(\"mutable\", aMutable));\n+        result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n+        result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));\n+        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SIZE));\n+        result.push_back(Pair(\"curtime\", (int64_t)pblock->nTime));\n         result.push_back(Pair(\"bits\", HexBits(pblock->nBits)));\n+        result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n \n         return result;\n     }\n     else\n+    if (strMode == \"submit\")\n     {\n         // Parse parameters\n-        CDataStream ssBlock(ParseHex(params[0].get_str()), SER_NETWORK, PROTOCOL_VERSION);\n+        CDataStream ssBlock(ParseHex(find_value(oparam, \"data\").get_str()), SER_NETWORK, PROTOCOL_VERSION);\n         CBlock pblock;\n         ssBlock >> pblock;\n \n-        return ProcessBlock(NULL, &pblock);\n+        bool fAccepted = ProcessBlock(NULL, &pblock);\n+\n+        return fAccepted ? Value::null : \"rejected\";\n     }\n+\n+    throw JSONRPCError(-8, \"Invalid mode\");\n }\n \n Value getrawmempool(const Array& params, bool fHelp)\n@@ -2128,7 +2202,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getwork\",                &getwork,                true },\n     { \"listaccounts\",           &listaccounts,           false },\n     { \"settxfee\",               &settxfee,               false },\n-    { \"getmemorypool\",          &getmemorypool,          true },\n+    { \"getblocktemplate\",       &getblocktemplate,       true },\n     { \"listsinceblock\",         &listsinceblock,         false },\n     { \"dumpprivkey\",            &dumpprivkey,            false },\n     { \"importprivkey\",          &importprivkey,          false },\n@@ -2736,7 +2810,7 @@ void JSONRequest::parse(const Value& valRequest)\n     if (valMethod.type() != str_type)\n         throw JSONRPCError(-32600, \"Method must be a string\");\n     strMethod = valMethod.get_str();\n-    if (strMethod != \"getwork\" && strMethod != \"getmemorypool\")\n+    if (strMethod != \"getwork\" && strMethod != \"getblocktemplate\")\n         printf(\"ThreadRPCServer method=%s\\n\", strMethod.c_str());\n \n     // Parse params\n@@ -3015,6 +3089,7 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"listtransactions\"       && n > 2) ConvertTo<boost::int64_t>(params[2]);\n     if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n     if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"getblocktemplate\"       && n > 0) ConvertTo<Object>(params[0]);\n     if (strMethod == \"listsinceblock\"         && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"sendmany\"               && n > 1) ConvertTo<Object>(params[1]);\n     if (strMethod == \"sendmany\"               && n > 2) ConvertTo<boost::int64_t>(params[2]);"
      }
    ]
  }
]