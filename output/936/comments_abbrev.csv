gavinandresen,2012-03-14T12:21:14Z,What does @forrestv think?\n,https://github.com/bitcoin/bitcoin/pull/936#issuecomment-4496980,4496980,
forrestv,2012-03-14T15:31:46Z,"I don't see any reason to separate submitblock, further cluttering the RPC interface, if the old way will continue to be supported. Other than that, looks good!\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-4500429,4500429,
luke-jr,2012-03-14T15:52:25Z,"I only kept the old way in there for backward compatibility. There's really no reason to use the same method for two different functions - it's like sending coins using getbalance. More importantly, ""getmemorypool(&lt;data&gt;)"" doesn't provide any way to communicate the reason for rejections. During BIP discussion, some developers expressed interest in keeping the JSON-RPC protocol HTTP-independe",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-4500932,4500932,
forrestv,2012-03-14T15:58:47Z,"Ah, I see. ACK then.\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-4501072,4501072,
gavinandresen,2012-03-19T14:36:45Z,Too late in the 0.6 release cycle for a new RPC call. I think we should pull this early in the 0.7 release cycle so it gets lots of testing.\n,https://github.com/bitcoin/bitcoin/pull/936#issuecomment-4574464,4574464,
sipa,2012-04-04T10:52:28Z,"I disagree with the term bugfix here, but ACK on the changes.\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-4951055,4951055,
jgarzik,2012-04-10T19:36:26Z,ACK (and agree w/ sipa on term)\n,https://github.com/bitcoin/bitcoin/pull/936#issuecomment-5054319,5054319,
luke-jr,2012-05-13T04:46:46Z,"Rewrote based on recent BIP 22 revisions, including longpolling support.\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-5673965,5673965,
luke-jr,2012-05-18T17:15:19Z,Moved longpolling to #1355\n,https://github.com/bitcoin/bitcoin/pull/936#issuecomment-5790996,5790996,
forrestv,2012-05-18T17:27:18Z,"ACK, now.\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-5791259,5791259,
luke-jr,2012-05-19T19:19:33Z,"Eligius has been running this from block 179513 (56 blocks found) and EclipseMC from 180573 (11 blocks), totalling 67 valid blocks with no problems found.\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-5804140,5804140,
luke-jr,2012-06-01T05:54:56Z,"Rebased, plus the changes to BIP 22 discussed on IRC (getmemorypool now requires exactly one argument, the parameters Object, but tolerates the old calling methods for compatibility)\n\nAlso stripped whitespace when parsing JSON Object in bitcoind-CLI-test-tool (while it could just convert input to Object regardless, it seemed sensible to keep the CLI working with older servers).\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-6053914,6053914,
sipa,2012-06-11T11:49:42Z,"I've been trying to send a mail to the mailing list about BIP22, but it doesn't seem to come through.\n\nAs it's a bit too long to paste here, you can read it on https://gist.github.com/2909725.\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-6242406,6242406,
jgarzik,2012-06-11T12:25:29Z,"@sipa can you pipe that through ""fmt -72"" or similar?  Even 'raw' requires a horizontal scroll bar, which is unreadable in these modern times...\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-6243007,6243007,
sipa,2012-06-11T12:33:38Z,@jgarzik done\n,https://github.com/bitcoin/bitcoin/pull/936#issuecomment-6243140,6243140,
luke-jr,2012-06-11T13:55:21Z,"@sipa Hope this addresses everything:\n\n1) Servers are not required to have access to the transaction database, and miners may wish to include transactions that have not been relayed on the main network.\n2) The ""submit/hash"" mutation allows miners to replace actual transaction data with a reference, for servers which support this. The pull-request here does not support this functionality, since ",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-6244868,6244868,
gavinandresen,2012-06-11T14:56:25Z,"@luke-jr you didn't respond to the big-picture design question about whether you agree that BIP22 is over-complicated.\n\nI agree with @sipa, I think there are way too many optional features, different ways of doing things, etc.\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-6246562,6246562,
luke-jr,2012-06-11T15:38:12Z,"@gavinandresen ""Overcomplicated"" is relative based on what it needs to do. I think for the most part (there are exceptions, which I hope to simplify based on sipa's suggestions) BIP22 as it is can't get _too_ much simpler with its given requirements.\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-6247705,6247705,
gavinandresen,2012-06-11T16:59:10Z,"I guess @sipa and I think maybe you're throwing in too many requirements.  I say start simple, and if there is demand for a feature add it later. I'm OK with planning ahead with a design that allows stuff like adding/removing transactions, but that's a feature I've never heard ""dumb miners"" say they want.\n\nAlso: being explicit about the requirements in the BIP might help.  I see only a very vagu",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-6249907,6249907,
luke-jr,2012-06-11T20:06:20Z,"Optional things means _fewer_ requirements, not many. ""Dumb miners"" don't care about any of this, they're fine using getwork with centralized pools. BIP22 is aimed at ""smart miners"" which want to (at least) audit the blocks they're working on to keep Bitcoin secure against potential poolop attacks. One practical superiority of decentralized mining is that miners are restored the freedom to choose ",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-6254547,6254547,
luke-jr,2012-06-11T21:32:57Z,"Updated BIP22 based on @sipa and @gavinandresen 's suggestions.\n\nUnless there are problems with the subset of BIP22 supported by bitcoind (in this pull request), however, let's move BIP22 discussion back to the mailing list. I don't think it makes sense to hold up this pullrequest due to unrelated concerns.\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-6256660,6256660,
luke-jr,2012-06-12T16:06:29Z,Rebased addressing Gavin's most recent comments.\n,https://github.com/bitcoin/bitcoin/pull/936#issuecomment-6274690,6274690,
sipa,2012-06-13T12:22:58Z,"One thing that still bothers me in the implementation is that is supports different decompositions for transactions. I understand the fee/sigops/dependencies/size meta-data is necessary, but do we really need to retain the origin (hex) encoding as well? Sure, dumb miners don't need this, but the protocol is aimed at non-dumb miners. \n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-6299418,6299418,
luke-jr,2012-06-13T14:12:42Z,"Smart miners don't necessarily have a transaction database available either. In fact, I'm not aware of a single getmemorypool client that has easy access to one right now.\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-6302079,6302079,
luke-jr,2012-06-13T14:13:52Z,"Also, support for fetching transaction list as hashes exists for non-mining tools (I find it handy via the CLI as a human, to see what transactions are in the mempool). Support for fetching them as hex only is mainly a backward compatibility thing.\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-6302107,6302107,
sipa,2012-06-14T15:22:50Z,"@luke-jr What I was talking about in my latest comment here, is the availability of {""tx"" : ""hex""}, as {""tx"" : ""obj""} provides a strict superset of that. It would indeed mean breaking backward compatibility, indeed.\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-6331784,6331784,
luke-jr,2012-06-28T01:41:38Z,So... seems nobody has anything else that needs addressing - time to merge?\n,https://github.com/bitcoin/bitcoin/pull/936#issuecomment-6620044,6620044,
jgarzik,2012-08-01T15:32:20Z,"Conditional NAK[1]:  pick one of DM_OBJ or DM_HEX, not both.\n\nACK, if one of those is removed.\n\n[1] Red Hat's ""conditional NAK"" means that if the described condition disappears, then the NAK disappears.\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-7430556,7430556,
jgarzik,2012-08-02T16:41:33Z,"Looks good to a quick review.  I'll have to apply the patch and read to be thorough.\n\nPlease edit the OP to indicate name change and consensus ""why?"" opinion.\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-7460894,7460894,
luke-jr,2012-08-02T17:02:23Z,Will do as soon as we have a final on the new name. I emailed @gavinandresen so hopefully he'll provide input next time he's got email access.\n,https://github.com/bitcoin/bitcoin/pull/936#issuecomment-7461493,7461493,
gavinandresen,2012-08-02T18:02:19Z,"Encore on the name.\n\n## \n\nGavin Andresen\n\nOn Aug 2, 2012, at 11:02 AM, Luke-Jrreply@reply.github.com wrote:\n\n> Will do as soon as we have a final on the new name. I emailed @gavinandresen so hopefully he'll provide input next time he's got email access.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/bitcoin/bitcoin/pull/936#issuecomment-7461493\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-7463196,7463196,
jgarzik,2012-08-02T21:26:49Z,"The following review comes from reading the code directly, and may or may not reflect a change you made.  Regardless, it is something that warranted a note.\n\n1) is mode=foo the preferred form?  if yes, update help text to reflect this.\n\n2) help text is missing description of 'time'\n\n3) like 'getwork' this should prevent any progress if !connected || IBD.  presently, it only does that check f",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-7468702,7468702,
jgarzik,2012-08-02T21:31:40Z,"7) Submit mode should mimic getwork, and return true if the block is accepted, or false if not.\n",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-7468835,7468835,
luke-jr,2012-08-03T01:16:20Z,"1) Neither form is necessarily preferred; what is important is that the code doesn't take a path if it's set to something unexpected.\n\n2) 'time' was for backward compatibility: removed\n\n3) Why should submissions be prevented if not connected? Right now, it's possible this node has no network connections, but is getting its blocks (only) from a JSON-RPC source (perhaps HAM radio?)\n\n4) Changed",https://github.com/bitcoin/bitcoin/pull/936#issuecomment-7473067,7473067,
sipa,2012-08-13T17:20:34Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/936#issuecomment-7698920,7698920,
gavinandresen,2012-06-12T13:17:21Z,"Why is this being cached? If it really needs to be cached, then I'd suggest static Array mutable; if mutable.size == 0 ... then initialize.... to avoid memory-leak-checking tools complaining about leaking paMutable at shutdown.\n",https://github.com/bitcoin/bitcoin/pull/936#discussion_r966686,966686,src/bitcoinrpc.cpp
gavinandresen,2012-06-12T13:22:48Z,"I think this is insufficient. The help string should describe what subset of BIP 22 is supported by this implementation, or maybe points to a wiki page that describes exactly what this version of bitcoind supports.\n",https://github.com/bitcoin/bitcoin/pull/936#discussion_r966726,966726,src/bitcoinrpc.cpp
luke-jr,2012-06-12T16:03:59Z,Why make it slower by not caching it? Adding the static Array idea to rebase.\n,https://github.com/bitcoin/bitcoin/pull/936#discussion_r968103,968103,src/bitcoinrpc.cpp
luke-jr,2012-06-12T16:05:20Z,Extended help to be more specific on bitcoind's implementation.\n,https://github.com/bitcoin/bitcoin/pull/936#discussion_r968108,968108,src/bitcoinrpc.cpp
sipa,2012-06-13T11:46:39Z,"I doubt caching it helps a lot, as the values need to be copied into the output Object anyway. Doing that directly is probably just as slow as copying it from a cached value. That said, I doubt it's the only place where we use allocated objects in static variables, so I don't really care.\n",https://github.com/bitcoin/bitcoin/pull/936#discussion_r975236,975236,src/bitcoinrpc.cpp
