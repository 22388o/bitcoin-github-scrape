practicalswift,2021-02-15 10:52:17,"One nice property of the current version in `master` is that it doesn't use pointer arithmetic.\n\nFrom the [C++ Core Guidelines](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es42-keep-use-of-pointers-simple-and-straightforward):\n\n> Pointer arithmetic is fragile and easy to get wrong, the source of many, many bad bugs and security violations.",https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779138472,779138472,
MarcoFalke,2021-02-15 11:08:43,"The compiler should be able to produce the same binary with the pointer arithmetic replaced by `std::string::operator[](unsinged)`, no?",https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779148414,779148414,
martinus,2021-02-15 11:49:57,"Ah, I didn't know there was no pointer arithmetic in `master`! I've played with a few variants:\n\n### Variant 1\n```cpp\n// 63,621,136.00 ns/op\nauto it = rv.begin();\nfor (uint8_t v: s) {\n    *it++ = hexmap[v >> 4];\n    *it++ = hexmap[v & 15];\n}\nassert(it == rv.end());\n```\n\nThis has basically has the same speed for me. `it` is basically a pointer in disguise, so I'm not sure ",https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779170806,779170806,
laanwj,2021-02-15 17:59:47,"I'm surprised this is so much faster. I mean, theoretically, `reserve` should effectively do this right?\n\nEdit: If I have to chose I think I like Variant 1 above most. Yes, an iterator is basically pointer arithmetic, but it looks cleaner than the pointer to `data()`, and ""proves"" it is allowed behavior.",https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779376904,779376904,
martinus,2021-02-15 19:58:47,"`push_back` is actually really slow, even when reserve already prepared the capacity. For each call it needs to check capacity, increase the size, set the data, and maybe also a check if it is small-string optimization. With an pointer / iterator this is much cheaper. \n\nSee the generated assembler code here: https://godbolt.org/z/zv1aP6 For `HexStr_variant1` the compiler can generate a very ti",https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779423323,779423323,
laanwj,2021-02-15 20:55:37,"> push_back is actually really slow, even when reserve already prepared the capacity. \n\nThanks. Yes I believe you, it's just counter-intuitive to me. So much for zero-cost abstraction. Oh wait, that was rust.",https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779443764,779443764,
theStack,2021-02-15 22:56:34,"> One nice property of the current version in `master` is that it doesn't use pointer arithmetic.\n\nGood point, I didn't consider that in my review.\n\n> I've played with a few variants: ...\n\nI'd prefer Variant 1.\n\n\n",https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779483157,779483157,
martinus,2021-02-16 07:22:36,Rebased and changed the code to variant 1 (iterator & assert),https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779641593,779641593,
0xB10C,2021-02-16 09:17:31,"Thanks for working on all these performance improvements martinus!\n\nmaster:\n|               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |         bra/op |   miss% |     total | benchmark\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\n|       69,63",https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779698088,779698088,
martinus,2021-02-16 09:52:21,"@0xB10C if runtime is not so stable than the number of instructions per operation might be a better way to see the performance change. 575,779,102 -> 509,925,986 is relatively similar to what @theStack wrote for the pointer version: 580,539,338 -> 505,937,562. So it's a bit slower but still quite a bit better",https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779719333,779719333,
ViralTaco,2021-02-17 02:33:45,"Couple of things in mind. \nSince there's no documentation in the code I'll just say what it does: ""This function returns a string containing the hexadecimal representation of every byte passed to it; The string is a continuous array that is twice the size of the input.""\nOk, not the best doc I've wrote but it does the job. \n1) Has anyone measured performance of `std::foreach(s.begin(), s.end(",https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-780255049,780255049,
martinus,2021-02-17 06:16:23,"> Has anyone measured performance of std::foreach(s.begin(), s.end(), string_concat_lambda);?\n\nI've benchmarked `std::for_each` with variant 1:\n```cpp\nauto it = rv.begin();\nstd::for_each(s.begin(), s.end(), [&](uint8_t v) {\n    *it++ = hexmap[v >> 4];\n    *it++ = hexmap[v & 15];\n});\nassert(it == rv.end());\n```\nUnsurprisingly it's exactly the same performance as the `for (uint",https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-780329853,780329853,
ViralTaco,2021-02-18 07:18:19,"First off: I can't help myself reviewing code. Everything I pointed out was 100% nitpicking. The code is fine.\n\n> 1. Its simple bytes, so copies are cheap.\n\nI know, that's why I understand you make a copy of it. (Might have expressed that poorly) \nWhat I don't understand is why it's _mutable_ (not const) since you don't (or aren't supposed to) change it.\nAgree it's cheap. It's a copy e",https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-781113822,781113822,
laanwj,2021-05-19 07:55:22,"Code review ACK 74bf850ac47735f2ef4306059d3e664d40cac85e\n",https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-843845003,843845003,
laanwj,2021-02-15 17:58:51,"Is it allowed to write to a `std::string`'s backing memory? I vaguely remember it was not, but maybe that was pre C++11.",https://github.com/bitcoin/bitcoin/pull/21173#discussion_r576354897,576354897,src/util/strencodings.cpp
martinus,2021-02-15 19:39:11,"Before C++11 it was not guaranteed by the standard that std::string's memory is contiguous, but as far as I know all implementations did that anyways. It is certainly allowed since C++11",https://github.com/bitcoin/bitcoin/pull/21173#discussion_r576392149,576392149,src/util/strencodings.cpp
