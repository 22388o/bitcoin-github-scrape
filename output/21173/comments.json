[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779138472",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779138472",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
    "id": 779138472,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTEzODQ3Mg==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T10:52:17Z",
    "updated_at": "2021-02-15T10:52:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "One nice property of the current version in `master` is that it doesn't use pointer arithmetic.\r\n\r\nFrom the [C++ Core Guidelines](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es42-keep-use-of-pointers-simple-and-straightforward):\r\n\r\n> Pointer arithmetic is fragile and easy to get wrong, the source of many, many bad bugs and security violations.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779138472/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779148414",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779148414",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
    "id": 779148414,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTE0ODQxNA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T11:08:43Z",
    "updated_at": "2021-02-15T11:08:43Z",
    "author_association": "MEMBER",
    "body": "The compiler should be able to produce the same binary with the pointer arithmetic replaced by `std::string::operator[](unsinged)`, no?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779148414/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779170806",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779170806",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
    "id": 779170806,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTE3MDgwNg==",
    "user": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?u=da89313ed4793f9594c09c23513f49aa4dc1c141&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T11:49:57Z",
    "updated_at": "2021-02-15T11:49:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah, I didn't know there was no pointer arithmetic in `master`! I've played with a few variants:\r\n\r\n### Variant 1\r\n```cpp\r\n// 63,621,136.00 ns/op\r\nauto it = rv.begin();\r\nfor (uint8_t v: s) {\r\n    *it++ = hexmap[v >> 4];\r\n    *it++ = hexmap[v & 15];\r\n}\r\nassert(it == rv.end());\r\n```\r\n\r\nThis has basically has the same speed for me. `it` is basically a pointer in disguise, so I'm not sure anything is gained here. Having a simple `assert` after the loop is nice though.\r\n\r\n### Variant 2\r\n\r\nOr this, but it's a bit slower and not better in my opinion:\r\n\r\n```cpp\r\n// 65,479,162.00 ns/op\r\nsize_t i = 0;\r\nfor (uint8_t v: s) {\r\n    rv[i++] = hexmap[v >> 4];\r\n    rv[i++] = hexmap[v & 15];\r\n}\r\nassert(i == rv.size());\r\n```\r\n\r\n### Variant 3\r\nOr another variant:\r\n\r\n```cpp\r\n// 65,187,171.00 ns/op\r\nfor (size_t i = 0; i < rv.size(); i += 2) {\r\n    auto v = s[i / 2];\r\n    rv[i] = hexmap[v >> 4];\r\n    rv[i + 1] = hexmap[v & 15];\r\n};\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779170806/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779376904",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779376904",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
    "id": 779376904,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTM3NjkwNA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T17:59:47Z",
    "updated_at": "2021-02-15T18:08:14Z",
    "author_association": "MEMBER",
    "body": "I'm surprised this is so much faster. I mean, theoretically, `reserve` should effectively do this right?\r\n\r\nEdit: If I have to chose I think I like Variant 1 above most. Yes, an iterator is basically pointer arithmetic, but it looks cleaner than the pointer to `data()`, and \"proves\" it is allowed behavior.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779376904/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779423323",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779423323",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
    "id": 779423323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTQyMzMyMw==",
    "user": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?u=da89313ed4793f9594c09c23513f49aa4dc1c141&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T19:58:47Z",
    "updated_at": "2021-02-15T19:58:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "`push_back` is actually really slow, even when reserve already prepared the capacity. For each call it needs to check capacity, increase the size, set the data, and maybe also a check if it is small-string optimization. With an pointer / iterator this is much cheaper. \r\n\r\nSee the generated assembler code here: https://godbolt.org/z/zv1aP6 For `HexStr_variant1` the compiler can generate a very tight loop, only a single branch, and it looks to me like clang++ even unrolls it. The push_back variant produces a lot more code",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779423323/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779443764",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779443764",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
    "id": 779443764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTQ0Mzc2NA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T20:55:37Z",
    "updated_at": "2021-02-15T20:55:37Z",
    "author_association": "MEMBER",
    "body": "> push_back is actually really slow, even when reserve already prepared the capacity. \r\n\r\nThanks. Yes I believe you, it's just counter-intuitive to me. So much for zero-cost abstraction. Oh wait, that was rust.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779443764/reactions",
      "total_count": 6,
      "+1": 0,
      "-1": 0,
      "laugh": 6,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779483157",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779483157",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
    "id": 779483157,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTQ4MzE1Nw==",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-15T22:56:34Z",
    "updated_at": "2021-02-15T22:56:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "> One nice property of the current version in `master` is that it doesn't use pointer arithmetic.\r\n\r\nGood point, I didn't consider that in my review.\r\n\r\n> I've played with a few variants: ...\r\n\r\nI'd prefer Variant 1.\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779483157/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779641593",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779641593",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
    "id": 779641593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTY0MTU5Mw==",
    "user": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?u=da89313ed4793f9594c09c23513f49aa4dc1c141&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-16T07:22:36Z",
    "updated_at": "2021-02-16T07:22:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased and changed the code to variant 1 (iterator & assert)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779641593/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779698088",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779698088",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
    "id": 779698088,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTY5ODA4OA==",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?u=a20996a145f1be613c7b0a57e75d36508572e29d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-16T09:17:31Z",
    "updated_at": "2021-02-16T10:01:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for working on all these performance improvements martinus!\r\n\r\nmaster:\r\n|               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|       69,630,868.00 |               14.36 |    0.6% |  575,779,102.00 |  138,122,873.00 |  4.169 | 107,462,304.00 |    0.5% |      0.81 | `BlockToJsonVerbose`\r\n\r\nthis PR (variant 1):\r\n|               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|       66,411,979.00 |               15.06 |    0.2% |  509,925,986.00 |  126,353,971.00 |  4.036 |  96,559,744.00 |    0.5% |      0.76 | `BlockToJsonVerbose`\r\n\r\n\r\nWhich is a 4.6% performance improvement (when looking at `ns/op`) for me - however the benchmark warns me that these results might be unstable (probably because I'm not plugged into power). \r\n\r\nEDIT: As @martinus pointed out below, there is a 11,4% improvement when looking at `ins/op`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779698088/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779719333",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-779719333",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
    "id": 779719333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTcxOTMzMw==",
    "user": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?u=da89313ed4793f9594c09c23513f49aa4dc1c141&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-16T09:52:21Z",
    "updated_at": "2021-02-16T09:52:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@0xB10C if runtime is not so stable than the number of instructions per operation might be a better way to see the performance change. 575,779,102 -> 509,925,986 is relatively similar to what @theStack wrote for the pointer version: 580,539,338 -> 505,937,562. So it's a bit slower but still quite a bit better",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779719333/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780255049",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-780255049",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
    "id": 780255049,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDI1NTA0OQ==",
    "user": {
      "login": "ViralTaco",
      "id": 7462994,
      "node_id": "MDQ6VXNlcjc0NjI5OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7462994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ViralTaco",
      "html_url": "https://github.com/ViralTaco",
      "followers_url": "https://api.github.com/users/ViralTaco/followers",
      "following_url": "https://api.github.com/users/ViralTaco/following{/other_user}",
      "gists_url": "https://api.github.com/users/ViralTaco/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ViralTaco/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ViralTaco/subscriptions",
      "organizations_url": "https://api.github.com/users/ViralTaco/orgs",
      "repos_url": "https://api.github.com/users/ViralTaco/repos",
      "events_url": "https://api.github.com/users/ViralTaco/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ViralTaco/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-17T02:33:45Z",
    "updated_at": "2021-02-17T02:33:45Z",
    "author_association": "NONE",
    "body": "Couple of things in mind. \r\nSince there's no documentation in the code I'll just say what it does: \"This function returns a string containing the hexadecimal representation of every byte passed to it; The string is a continuous array that is twice the size of the input.\"\r\nOk, not the best doc I've wrote but it does the job. \r\n1) Has anyone measured performance of `std::foreach(s.begin(), s.end(), string_concat_lambda);`? \r\n2) The function isn't const correct (for loop makes non const copies for some reason). The copy is unnecessary (of the Span). \r\nTo further digress: can't the function be noexcept (do you expect it to throw? I know std::string can throw, that has little to do with the function you define. )\r\nDo we really need to initialize the std::string with s.size() * 2 0s? \r\n\r\nOtherwise it's pretty clean. I'm not a fan of `*it++` it does the job but it, in my opinion, adds some needless complexity. \r\nI rather see the increment at the end, or after each assignment. Might just be me. (Often is, tbh) ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780255049/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780329853",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-780329853",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
    "id": 780329853,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDMyOTg1Mw==",
    "user": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?u=da89313ed4793f9594c09c23513f49aa4dc1c141&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-17T06:16:23Z",
    "updated_at": "2021-02-17T07:16:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Has anyone measured performance of std::foreach(s.begin(), s.end(), string_concat_lambda);?\r\n\r\nI've benchmarked `std::for_each` with variant 1:\r\n```cpp\r\nauto it = rv.begin();\r\nstd::for_each(s.begin(), s.end(), [&](uint8_t v) {\r\n    *it++ = hexmap[v >> 4];\r\n    *it++ = hexmap[v & 15];\r\n});\r\nassert(it == rv.end());\r\n```\r\nUnsurprisingly it's exactly the same performance as the `for (uint8_t v : s)` version. Most likely it produces the same assembler code (the difference for ins/op is 0.0005%...)\r\n\r\n> The function isn't const correct (for loop makes non const copies for some reason).\r\n\r\nTwo reasons:\r\n1. Its simple bytes, so copies are cheap.\r\n2. The type needs to be unsigned so `v>>4` does the right thing, so I can't just use `for (auto const& c : s)`, because then `c` would be of type `char`. Using `uint8_t` converts char to unsigned (which generates no code, since its just a byte).\r\n\r\n> I'm not a fan of `*it++` it does the job but it\r\n\r\nMaybe I'm old school, but copy loops like like `while (*out++ = *in++);` still look natural to me :smile: \r\n\r\nEDIT: I forgot to mention, it can't be `noexcept` because std::string allocation is not noexcept (it can  throw `std::bad_alloc`). I'm no fan of `noexcept` because it is very difficult to really get it right.\r\n\r\nAlso, the std::string constructor always initializes its element. There is no constructor that just gets a size. You could do \r\n\r\n```cpp\r\nstd::string rv;\r\nrv.resize(s.size() * 2);\r\n```\r\n\r\nBut that seems to be a tad slower. It does basically the same (`resize()` zero initializes), but requires a bit more code.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780329853/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/781113822",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-781113822",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
    "id": 781113822,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTExMzgyMg==",
    "user": {
      "login": "ViralTaco",
      "id": 7462994,
      "node_id": "MDQ6VXNlcjc0NjI5OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7462994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ViralTaco",
      "html_url": "https://github.com/ViralTaco",
      "followers_url": "https://api.github.com/users/ViralTaco/followers",
      "following_url": "https://api.github.com/users/ViralTaco/following{/other_user}",
      "gists_url": "https://api.github.com/users/ViralTaco/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ViralTaco/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ViralTaco/subscriptions",
      "organizations_url": "https://api.github.com/users/ViralTaco/orgs",
      "repos_url": "https://api.github.com/users/ViralTaco/repos",
      "events_url": "https://api.github.com/users/ViralTaco/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ViralTaco/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-18T07:18:19Z",
    "updated_at": "2021-02-18T07:18:19Z",
    "author_association": "NONE",
    "body": "First off: I can't help myself reviewing code. Everything I pointed out was 100% nitpicking. The code is fine.\r\n\r\n> 1. Its simple bytes, so copies are cheap.\r\n\r\nI know, that's why I understand you make a copy of it. (Might have expressed that poorly) \r\nWhat I don't understand is why it's _mutable_ (not const) since you don't (or aren't supposed to) change it.\r\nAgree it's cheap. It's a copy either way, here it's not an optimization for the compiler, just the reader (ie: we don't need to change that byte).\r\n\r\n> 2. [\u2026]\r\n\r\nAddressed, no reference needed. auto is cute but counter productive, I agree.\r\n\r\n> still look natural to me \ud83d\ude04\r\n\r\nD:\r\n\r\n> I forgot to mention, it can't be noexcept because std::string allocation is not noexcept (it can throw std::bad_alloc). \r\n\r\nThis is the part I was waiting for because now I'm sure I need to read the standard again\u2026 \r\nFirst I have to say I agree, it's not needed here, probably a future bug if used, doesn't add much. \r\nIt's just punctuation to me, at this point. \r\nAnd I know, allocation can fail, that's fine `std::terminate` is called\u2026 We're deep into the rabbit hole here but I'll still cite the standard (C++17) since I had to look it up \ud83d\ude1e\r\n\r\n> Non-throwing functions are permitted to call potentially-throwing functions. Whenever an exception is thrown and the search for a handler encounters the outermost block of a non-throwing function, the function `std::terminate` [\u2026] is called\r\n\r\ncf: [eel.is](http://eel.is/c++draft/except.spec#5)\r\nUnless you don't want to terminate, but then this function should throw, shouldn't it? \ud83e\udd7a (Java has had the better of me, didn't it?) I need to read the standard anyway, will look into it :|\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/781113822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/843845003",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21173#issuecomment-843845003",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21173",
    "id": 843845003,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0Mzg0NTAwMw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-19T07:55:22Z",
    "updated_at": "2021-05-19T07:55:22Z",
    "author_association": "MEMBER",
    "body": "Code review ACK 74bf850ac47735f2ef4306059d3e664d40cac85e\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/843845003/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576354897",
    "pull_request_review_id": 590677536,
    "id": 576354897,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM1NDg5Nw==",
    "diff_hunk": "@@ -579,13 +579,13 @@ std::string Capitalize(std::string str)\n \n std::string HexStr(const Span<const uint8_t> s)\n {\n-    std::string rv;\n+    std::string rv(s.size() * 2, '\\0');\n     static constexpr char hexmap[16] = { '0', '1', '2', '3', '4', '5', '6', '7',\n                                          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n-    rv.reserve(s.size() * 2);\n+    auto* out = rv.data();",
    "path": "src/util/strencodings.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "74bf850ac47735f2ef4306059d3e664d40cac85e",
    "original_commit_id": "987192d5fc2e1b5f390c909e9798ed13362afe47",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is it allowed to write to a `std::string`'s backing memory? I vaguely remember it was not, but maybe that was pre C++11.",
    "created_at": "2021-02-15T17:58:51Z",
    "updated_at": "2021-02-16T06:35:05Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21173#discussion_r576354897",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21173",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576354897"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21173#discussion_r576354897"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21173"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576354897/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 585,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576392149",
    "pull_request_review_id": 590719286,
    "id": 576392149,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM5MjE0OQ==",
    "diff_hunk": "@@ -579,13 +579,13 @@ std::string Capitalize(std::string str)\n \n std::string HexStr(const Span<const uint8_t> s)\n {\n-    std::string rv;\n+    std::string rv(s.size() * 2, '\\0');\n     static constexpr char hexmap[16] = { '0', '1', '2', '3', '4', '5', '6', '7',\n                                          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n-    rv.reserve(s.size() * 2);\n+    auto* out = rv.data();",
    "path": "src/util/strencodings.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "74bf850ac47735f2ef4306059d3e664d40cac85e",
    "original_commit_id": "987192d5fc2e1b5f390c909e9798ed13362afe47",
    "user": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Before C++11 it was not guaranteed by the standard that std::string's memory is contiguous, but as far as I know all implementations did that anyways. It is certainly allowed since C++11",
    "created_at": "2021-02-15T19:39:11Z",
    "updated_at": "2021-02-16T06:35:05Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21173#discussion_r576392149",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21173",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576392149"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21173#discussion_r576392149"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21173"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576392149/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 585,
    "side": "RIGHT",
    "in_reply_to_id": 576354897
  }
]