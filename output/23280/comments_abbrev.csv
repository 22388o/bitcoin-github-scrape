jamesob,2021-10-14 16:30:55,Concept ACK! I've already done a preliminary review of this code but will formally test and review very soon.,https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-943522697,943522697,
dongcarl,2021-10-14 17:04:42,"Pushed 29c5c2b4700aa3f537e7291971dbd763469fce1c -> 3d5aa4b8503ed834e4e14651cd64f8a5d3d47f46\n- Rebased over master\n- Changed some commit messages",https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-943549459,943549459,
DrahtBot,2021-10-14 20:00:33,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23636](https://github.com/bitcoin/bitcoin/pull/23636) (Remove GetAdjustedTime from init.cpp by MarcoFalke)\n* [#23546](h",https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-943683489,943683489,
theuni,2021-10-14 21:57:10,Concept ACK. Will review.,https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-943766855,943766855,
dongcarl,2021-10-15 15:50:14,"Pushed 3d5aa4b850...7dd898c0df:\n- Rebased over master\n- Tweaked last commit to minimize use of `gArgs` in setup_common",https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-944408573,944408573,
dongcarl,2021-10-29 20:28:03,"My sincerest thanks for the thorough review @jamesob, that functional test in #23289 is certainly beyond the call of duty, and the `master` bug it revealed is leading to some excellent investigation in #23365. ðŸŽ‰ \n\nI'm glad to hear that this sort of cleanup came up for the AssumeUTXO work as well, my hope is that the change will make future work easier involving the init sequence easier to reas",https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-955029268,955029268,
dongcarl,2021-11-15 18:45:57,"Thanks all for the reviews! I addressed a subset of the concerns in my latest 2 pushes. One thing I'd like some help with:\n\nFor the RPC block change notification, I decided to go with jnewbery's method here:\n     \n> In _validation: Call NotifyBlockTip in CCS::LoadChainTip_, you're moving the RPC notification into `CChainstate::LoadChainTip()`. However, that function is also called by `Chai",https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-969209205,969209205,
jamesob,2021-11-18 00:19:32,"reACK https://github.com/bitcoin/bitcoin/pull/23280/commits/2c8f0e948d1ffe2fc729ce51fa42544616b51b5b\n\nI re-reviewed this from scratch (no easier way to do it) after rebasing on master to avoid the peers.dat v3/v4 startup error. Notable changes were `LoadChainstate`/`VerifyLoadedChainstate` split, import comment removal, and `cs::main` lock consolidation, which I think are all fine.\n\nEdit: ",https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-972365657,972365657,
theuni,2021-11-18 14:07:30,"> reACK [2c8f0e9](https://github.com/bitcoin/bitcoin/commit/2c8f0e948d1ffe2fc729ce51fa42544616b51b5b)\n> \n> I re-reviewed this from scratch (no easier way to do it)\n\nBlah, but thanks for confirming the best approach :)\n\nThanks @jamesob for another thorough review. I'll re-review from scratch soon as well.",https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-972897080,972897080,
ryanofsky,2021-11-18 14:55:22,"The main thing I'm waiting for is for the new code to be moved out of `src/init/` which is for generic process initialization to `src/node/` which is for libbitcoin_server node code. Should be easy to do this with a plain git rebase, or in the worst case with `git filter-branch mv` (https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743858865) if git rename detection chokes.\n\nIt would a",https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-972940682,972940682,
dongcarl,2021-11-29 21:45:43,"Pushed 2c8f0e948d1ffe2fc729ce51fa42544616b51b5b -> fdc07a1d2916a85add9b11130a8c2cf6c02a09eb\n1. Moved some `LoadChainstate` documentation from commit messages to actual code as suggested by ryanofsky (actually a great idea and made things clearer)\n2. Moved the newly added files to `node/` instead of `init/`, fixed up alphabetical ordering where appropriate\n3. Added some comments about the nua",https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-982052626,982052626,
ryanofsky,2021-11-29 22:26:19,"Thanks for updates! Will look more, but I don't think the fact that code might need to call `ShutdownRequested()` later makes having distinct `SUCCESS` / `FAILURE` / `INTERRUPTED` return codes useless. If calling code wants to treat `SUCCESS` and `INTERRUPTED` values the same way (by not printing errors, and going on to check whether a shutdown is currently requested), that's great, but it doesn't",https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-982080608,982080608,
jamesob,2021-11-30 19:10:02,"ACK fdc07a1d2916a85add9b11130a8c2cf6c02a09eb ([`jamesob/ackr/23280.5.dongcarl.init_coalesce_chainstate`](https://github.com/jamesob/bitcoin/tree/ackr/23280.5.dongcarl.init_coalesce_chainstate))\n\nExamined interdiff, built, merged & tested recent master and my init functional tests. Changes are as Carl describes.\n\n<details><summary>Show signature data</summary>\n<p>\n\n```\n-----BEGIN PG",https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-982935352,982935352,
MarcoFalke,2021-11-30 19:24:59,"`C:\Users\ContainerAdministrator\AppData\Local\Temp\cirrus-ci-build\src\node\caches.cpp(32,9): error C7555: use of designated initializers requires at least '/std:c++20' [C:\Users\ContainerAdministrator\AppData\Local\Temp\cirrus-ci-build\build_msvc\libbitcoin_server\libbitcoin_server.vcxproj]`",https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-982947060,982947060,
dongcarl,2021-11-30 21:50:57,"Did not realize designated initializers is a GNU extension, my bad.",https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-983051896,983051896,
Empact,2021-10-14 16:25:36,"nit: FYI @fanquake is discouraging ""for"" comments: https://github.com/bitcoin/bitcoin/pull/15294#pullrequestreview-779241491",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r729149055,729149055,src/init.cpp
jamesob,2021-10-29 17:22:02,"cd29d334a3 \n\n`XXX` to be removed/addressed?",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r739412808,739412808,src/init.cpp
jamesob,2021-10-29 17:41:51,"b229024932 \n\nNote for other reviewers: NotifyBlockTip -> RPCNotifyBlockChange(tip) is performed here: https://github.com/jamesob/bitcoin/blob/master/src/init.cpp#L343-L347\n\nAlso note that `uiInterface.NotifyBlockTip()` is already called from within other `CChainState` methods (e.g. `ActivateBestChain()`), so there's no concern about introducing exposure to a global in CChainState code.",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r739424818,739424818,src/validation.cpp
jamesob,2021-10-29 18:00:43,"1f966b8d9f\n\nOne naive question here might be: why are we using a mutable arg for `cache_sizes` vs. just returning a constructed `CacheSizes` instance to make the function pure? Answer seems to be that this is used within a unittest context to modify an existing `m_cache_sizes` instance.",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r739436153,739436153,src/init/caches.cpp
ryanofsky,2021-11-04 19:15:28,"In commit ""init: Extract chainstate loading sequence"" (83ed7db27b4c4798666b77d83fc8e7c3eab8c621)\n\n>```\n>The sequence can have 4 types of outcomes:\n>\n>1. Success\n>2. Shutdown requested\n>  - nothing failed but a shutdown was triggered in the middle of the\n>    sequence\n>3. Soft failure\n>  - a failure that might be recovered from with a reindex\n>4. Hard failure\n>  - a failure ",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743133511,743133511,src/init/chainstate.h
ryanofsky,2021-11-05 12:35:32,"In commit ""init/chainstate: Decouple from stringy errors"" (cd29d334a38fdaf0bbbe810a9cbdeeffad394daa)\n\nWith this commit introducing and returning a nice status type, I think it is a shame to add a new out-of-band global `ShutdownRequested` call to check the interrupted status separately from the return value. Would suggest adding a `ChainstateLoadingError::INTERRUPTED_SHUTDOWN_REQUESTED` or sim",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743624127,743624127,src/init.cpp
ryanofsky,2021-11-05 12:43:06,"In commit ""init/chainstate: Decouple from stringy errors"" (cd29d334a38fdaf0bbbe810a9cbdeeffad394daa)\n\nThis seems to be losing the ""Incorrect or no genesis block found. Wrong datadir for network?"" error string. Would be good to fix or say in the commit message if this is intentional.",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743628897,743628897,src/init.cpp
jnewbery,2021-11-05 12:54:08,"```suggestion\n                                                             std::optional<std::function<void()>> verifying_blocks_cb)\n{\n```",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743636334,743636334,src/init/chainstate.cpp
ryanofsky,2021-11-05 12:55:51,"In commit ""init/chainstate: Decouple from stringy errors"" (cd29d334a38fdaf0bbbe810a9cbdeeffad394daa)\n\n>```\n>1. Success\n>2. Shutdown requested\n>  - nothing failed but a shutdown was triggered in the middle of the\n>    sequence\n>3. Soft failure\n>  - a failure that might be recovered from with a reindex\n>4. Hard failure\n>  - a failure that definitively cannot be recovered from wit",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743637480,743637480,src/init/chainstate.cpp
jnewbery,2021-11-05 13:06:57,I agree. These comments are unmaintainable.,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743645041,743645041,src/init.cpp
jnewbery,2021-11-05 13:23:47,"I would have guessed that this would be part of libbitcoin_server, since loading a chainstate is something that only bitcoind or bitcoin-qt would do.",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743657031,743657031,src/Makefile.am
jnewbery,2021-11-05 13:29:12,It'd be great if there was a final commit that added a doxygen comment for all of these parameters.,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743661160,743661160,src/init/chainstate.h
jnewbery,2021-11-05 14:15:37,"I don't really like the use of ""bail"" here or in the commit log. It feels a bit colloquial and imprecise.",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743698625,743698625,src/init.cpp
jnewbery,2021-11-05 14:21:57,"What do you think about adding `ChainstateLoadingError::SHUTDOWN_REQUESTED` as an error reason, and then bringing the shutdown requested logic up into the switch statement above? I think that'd make the logic flow a bit easier to understand.",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743703915,743703915,src/init.cpp
jnewbery,2021-11-05 14:29:09,"I don't like how the error strings have been separated from the error logic that they're describing. What do you think about returning an optional `std::pair` or struct from `LoadChainstateSequence()` that contains both the enum and error string? That'd simplify this switch statement (all the ""soft failure"" cases could share the same statement, and there'd be one separate statement for the ""hard f",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743709991,743709991,src/init.cpp
jnewbery,2021-11-05 14:33:08,It looks like this init error string has been lost. I think that previously this would have been displayed to the user.,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743713370,743713370,src/init.cpp
jnewbery,2021-11-05 15:35:13,"Again, it'd be nice to have a doxygen comment here. It's not immediately obvious what `n_indexes` represents.\n\nIs there any reason that you made `cache_sizes` an out-param rather than the return value for this function?\n\nSince this is a new function and you're adding all the call sites, can we make `n_indexes` a required argument?",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743767227,743767227,src/init/caches.h
jnewbery,2021-11-05 15:36:50,The `_cache_size` parts to all these member names seems redundant with the fact they're members of a struct called `CacheSizes`,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743768587,743768587,src/init/caches.h
jnewbery,2021-11-05 15:40:57,"Can you add inline comments for these arguments (that can be checked by a clang-tidy):\n\n```suggestion\n                                        /*block_tree_db_in_memory=*/false,\n                                        /*coins_db_in_memory=*/false,\n```",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743771983,743771983,src/init.cpp
jnewbery,2021-11-05 16:28:38,This function now consists of three code blocks that each lock `cs_main`. What do you think about just taking `cs_main` at the top of the function and holding it throughout?,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743809355,743809355,src/init/chainstate.cpp
ryanofsky,2021-11-05 17:25:28,"In commit ""init: Extract chainstate loading sequence"" (83ed7db27b4c4798666b77d83fc8e7c3eab8c621)\n\nOther code in the `src/init/` directory is using the `init:: namespace, and I think it'd be good to follow that pattern:\n\nhttps://github.com/bitcoin/bitcoin/blob/77a2f5d30c5ecb764b8a7c098492e1f5cdec90f0/src/init/common.cpp#L25\nhttps://github.com/bitcoin/bitcoin/blob/77a2f5d30c5ecb764b8a7c098",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743851104,743851104,src/init/chainstate.h
ryanofsky,2021-11-05 17:36:54,"In commit ""init: Extract chainstate loading sequence"" (83ed7db27b4c4798666b77d83fc8e7c3eab8c621)\n\nI think the new files here `chainstate.h`, `chainstate.cpp`, `caches.h`, `caches.cpp` all belong in `src/node/` not `src/init/`.\n\nI maybe I should have given the [`src/init/`](https://github.com/bitcoin/bitcoin/tree/master/src/init) directory a more descriptive name like `src/process_init/`, b",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743858865,743858865,src/init/chainstate.h
ryanofsky,2021-11-05 18:34:30,"In commit ""validation: Call NotifyBlockTip in CCS::LoadChainTip"" (b229024932ebd4775070149ff0f27d0fd329bf0a)\n\nThis seems like a good change, but two questions come to mind here that might be good to address in commit message:\n\n1-Previously this code would work regardless of whether `OnRPCStarted` was called before `NotifyBlockTip`. Now it *must* be called before or the notification will be ",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743895731,743895731,src/validation.cpp
ryanofsky,2021-11-05 18:43:57,"In commit ""init: Extract chainstate loading sequence"" (83ed7db27b4c4798666b77d83fc8e7c3eab8c621)\n\n""Sequence"" here seems like a strange thing to include in a the function name. Most functions are sequences. IMO an ideal name for this function would be something like `node::LoadChainStates` (assuming this is moved to `src/node/` directory and put in `node::` namespace).",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743901275,743901275,src/init/chainstate.h
ryanofsky,2021-11-05 18:49:05,"In commit ""init/chainstate: Add options for in-memory DBs"" (f45b885db6636e135d617d915e0ef4ec9e1be8e6)\n\nI think the `LoadChainstateSequence` function already has so many arguments that if we're going to add optional ones they should really be consolidated in an options struct like:\n\n```c++\nstruct LoadChainStatesOptions {\n    std::optional<std::function<bool()>> shutdown_requested_cb;\n",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743904232,743904232,src/init/chainstate.h
theuni,2021-11-05 19:24:22,"In commit ""init: Extract chainstate loading sequence""\n\nCould you please use a new variable here rather than shadowing the global? I was very confused about what changed that required `AddReadErrCallback([](...))` -> `AddReadErrCallback([&](...))`",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743923908,743923908,src/init/chainstate.cpp
theuni,2021-11-05 19:43:28,"In commit ""init/chainstate: Decouple from concept of NodeContext""\n\nI think it makes sense to split this into two commits, one for the decoupling and one for the nullable mempool. I think that's a significant thing to signal for review.\n\nSome justification for why this is safe (and maybe why it wasn't this way before) would be helpful context for review as well.",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743933885,743933885,src/init/chainstate.cpp
theuni,2021-11-05 19:47:00,"In commit ""init/chainstate: Decouple from GetTimeMillis""\n\nThe commit message mentions passing in a callback for the current time, but that's not what's happening here. Fingers crossed that's not what happens in the next commit, because it sounds ugly :p",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743935696,743935696,src/init.cpp
theuni,2021-11-05 19:50:45,"Hmm, I rather like the separation of logic. How about a lookup function rather than marrying them? Something like https://github.com/bitcoin/bitcoin/blob/master/src/script/script_error.cpp#L10 ",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743937762,743937762,src/init.cpp
theuni,2021-11-05 20:17:47,"I third this idea. It's what I would've expected, and the alternative here seems weird. Additionally, we might want to specify in the future _why_ shutdown was requested (rpc, console, etc). ",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743953515,743953515,src/init.cpp
theuni,2021-11-05 20:20:00,why why why,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743954607,743954607,src/init/chainstate.cpp
theuni,2021-11-05 20:32:56,"In commit ""init/chainstate: Decouple from concept of uiInterface""\n\nHmm, this seems strange. Before, it printed ""Error reading from database, shutting down"". Was that innacurate?\n\nWhy not instead return an error type and let the caller print the message and shutdown?",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743961236,743961236,src/init/chainstate.cpp
theuni,2021-11-05 20:41:57,"Might it make sense to split this function in two rather than requiring a callback in the middle? `LoadChainstateSequence` / `VerifyChainState` or so?\n\nNeeding to tell that we've moved on from one thing to another is a hint to me that maybe those things should be separate functions :)",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743965561,743965561,src/init/chainstate.cpp
theuni,2021-11-05 20:50:25,"In commit ""init/chainstate: Reduce coupling of LogPrintf""\n\nGrouping the two try/catch looks safe to me, but I think it'd be easier to split this into two commits: one to combine, and one to move it out to init. That way the second is pretty much move-only.\n\nOr if you end up going the `LoadChainstateSequence`/`VerifyChainState` route, this logic doesn't need to change.",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743969616,743969616,src/init.cpp
theuni,2021-11-05 20:55:16,I belive this change also wouldn't be necessary with this function split in half.,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743971845,743971845,src/init/chainstate.cpp
theuni,2021-11-05 21:04:52,"In commit ""init/chainstate: Decouple from GetAdjustedTime""\n\nI suppose we can't just pass a timeout time in here because the current logic includes the runtime of the loading/checking itself?\n\nThis seems like yet something else that would be unnecessary if this function were split. That keeps coming up as a potential alternative, but I'm unsure if there's something that would prevent it, so",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743976213,743976213,src/init/chainstate.cpp
theuni,2021-11-05 21:08:05,"In commit ""init/chainstate: Decouple from ShutdownRequested""\n\nWithout actually trying it.. I think it would be more straightforward here to use a `CThreadInterrupt` which gets triggered for this.",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743977609,743977609,src/init/chainstate.cpp
jamesob,2021-11-09 15:30:07,I agree with @theuni but in any case this feels like bikeshedding to me. What's written as-is is a clear improvement and refining this further should be optional or follow-up IMO.,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r745731433,745731433,src/init.cpp
jamesob,2021-11-09 15:33:06,"> Is there any reason that you made cache_sizes an out-param rather than the return value for this function?\n\nhttps://github.com/bitcoin/bitcoin/pull/23280#discussion_r739436153",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r745734466,745734466,src/init/caches.h
jnewbery,2021-11-09 15:37:08,">  How about a lookup function rather than marrying them? Something like master/src/script/script_error.cpp#L10\n\nI agree that this would be an improvement, separating the error code:string lookup from the recovery logic.",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r745738495,745738495,src/init.cpp
dongcarl,2021-11-11 19:00:54,Ah I see! What do you think about putting the files under `src/node/init`? And I supposed everything would be under the `node::init` namespace?,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r747746404,747746404,src/init/chainstate.h
ryanofsky,2021-11-11 21:08:25,"> Ah I see! What do you think about putting the files under `src/node/init`? And I supposed everything would be under the `node::init` namespace?\n\nProbably best to use your own judgement, and other people may have opinions, but IMO just moving things into top level, `node`, `wallet`, `util` directories is ideal for seeing where things come from and making it obvious when you may be doing somet",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r747818124,747818124,src/init/chainstate.h
ryanofsky,2021-11-12 17:14:20,"re: https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743923908\n\n> In commit ""init: Extract chainstate loading sequence""\n> \n> Could you please use a new variable here rather than shadowing the global? I was very confused about what changed that required `AddReadErrCallback([](...))` -> `AddReadErrCallback([&](...))`\n\nIMO ideal thing to do here so this commit remains moveonly an",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r748454947,748454947,src/init/chainstate.cpp
ryanofsky,2021-11-12 17:31:11,"In commit ""init/chainstate: Decouple from stringy errors"" (cd29d334a38fdaf0bbbe810a9cbdeeffad394daa)\n\nre: https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743709991\n\nI agree with John's original comment, and do not think fine grained error codes are good or that some kind of external error code -> string indirection would be good. I think the ideal thing would be for this to retur",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r748465779,748465779,src/init.cpp
ryanofsky,2021-11-12 17:42:06,"re: https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743133511\n\nFWIW, followed up with more `node::` namespace in #23497",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r748472926,748472926,src/init/chainstate.h
dongcarl,2021-11-15 18:13:23,Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749570801,749570801,src/init.cpp
dongcarl,2021-11-15 18:14:06,Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749571227,749571227,src/init/chainstate.cpp
dongcarl,2021-11-15 18:14:12,Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749571294,749571294,src/Makefile.am
dongcarl,2021-11-15 18:14:47,"Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6, just copied over the existing comment which mostly describes error handling anyway",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749571632,749571632,src/init.cpp
dongcarl,2021-11-15 18:14:54,Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749571722,749571722,src/init.cpp
dongcarl,2021-11-15 18:15:02,Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749571802,749571802,src/init.cpp
dongcarl,2021-11-15 18:15:24,Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749572057,749572057,src/init/caches.h
dongcarl,2021-11-15 18:15:46,Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749572297,749572297,src/init/chainstate.cpp
dongcarl,2021-11-15 18:16:00,Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749572455,749572455,src/init.cpp
dongcarl,2021-11-15 18:16:44,Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749572922,749572922,src/init.cpp
dongcarl,2021-11-15 18:17:04,Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749573114,749573114,src/init/chainstate.h
dongcarl,2021-11-15 18:17:16,Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749573230,749573230,src/init/chainstate.cpp
dongcarl,2021-11-15 18:17:24,"Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6, thanks Russ for the neat idea!",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749573320,749573320,src/init/chainstate.cpp
dongcarl,2021-11-15 18:17:55,Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749573623,749573623,src/init/chainstate.cpp
dongcarl,2021-11-15 18:18:01,"Not inaccurate, but I think we're adding a callback here and can't return immediately?",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749573676,749573676,src/init/chainstate.cpp
dongcarl,2021-11-15 18:19:38,Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749574706,749574706,src/init/chainstate.cpp
dongcarl,2021-11-15 18:19:43,Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749574770,749574770,src/init.cpp
dongcarl,2021-11-15 18:20:08,Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6,https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749575067,749575067,src/init/chainstate.cpp
dongcarl,2021-11-15 18:25:30,"In my latest push (6736e24a490d756e0e1e70b9e212775cf305ebe6), I ended up having `CalculateCacheSizes` return a CacheSize, which is perhaps a bit more readable.",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749578481,749578481,src/init/caches.h
ryanofsky,2021-11-30 20:54:49,"In commit ""node/chainstate: Decouple from GetTimeMillis"" (165b30b649923da4ed19749a399c4a4589da326b)\n\nCommit description seems out of date. This commit is not passing a std::function to replace GetTimeMillis, it is just moving the GetTimeMillis call ",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r759652338,759652338,src/init.cpp
ryanofsky,2021-11-30 22:36:22,"In commit ""Split off VerifyLoadedChainstate"" (019da3dc8493054b456222ef23761dd95130b6a7)\n\nSeems like this only be called if `rv` is `nullopt`, and it should be skipped if `LoadChainstate` fails or is interrupted for shutdown. Otherwise this is running verification code that did not run previously.\n\nWould be better to preserve behavior I think. Either way it would also be good to say in comm",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r759714243,759714243,src/init.cpp
ryanofsky,2021-11-30 22:43:07,"In commit ""node/chainstate: Decouple from concept of uiInterface"" (efe9bd287656925a3bda50a809edeabe9824e37a)\n\nSeems like there is a minor change in behavior with the verifying blocks message being shown even if is_coinsview_empty is true. This seems ok, but would be good to mention whether behavior change is intentional in commit message.",https://github.com/bitcoin/bitcoin/pull/23280#discussion_r759717906,759717906,src/init.cpp
