[
  {
    "sha": "6345e65d3163f4f5b4545181813b8e8a5ea5a157",
    "node_id": "C_kwDOABII59oAKDYzNDVlNjVkMzE2M2Y0ZjViNDU0NTE4MTgxM2I4ZThhNWVhNWExNTc",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-20T20:12:18Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-29T20:47:26Z"
      },
      "message": "node: Extract chainstate loading sequence\n\nI strongly recommend reviewing with the following git-diff flags:\n  --color-moved=dimmed_zebra --color-moved-ws=allow-indentation-change\n\n[META] This commit is intended to be as close to a move-only commit as\n       possible, and lingering ugliness will be resolved in subsequent\n       commits.\n\nA few variables that are passed in by value instead of by reference\ndeserve explanation:\n\n- fReset and fReindexChainstate are both local variables in AppInitMain\n  and are not modified in the sequence\n\n- fPruneMode, despite being a global, is only modified in\n  AppInitParameterInteraction, long before LoadChainstate is called\n\n----\n\n[META] This semantic will change in a future commit named\n       \"node/chainstate: Decouple from stringy errors\"",
      "tree": {
        "sha": "07e69c4ac85ad839c592d204c504ffc1cf141b02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07e69c4ac85ad839c592d204c504ffc1cf141b02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6345e65d3163f4f5b4545181813b8e8a5ea5a157",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6345e65d3163f4f5b4545181813b8e8a5ea5a157",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6345e65d3163f4f5b4545181813b8e8a5ea5a157",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6345e65d3163f4f5b4545181813b8e8a5ea5a157/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4dbba3bac70f78e764910f357c875c09569a8fc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dbba3bac70f78e764910f357c875c09569a8fc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4dbba3bac70f78e764910f357c875c09569a8fc4"
      }
    ],
    "stats": {
      "total": 442,
      "additions": 269,
      "deletions": 173
    },
    "files": [
      {
        "sha": "9780c0bc43a42456241faa2902d12fb4d7661b10",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6345e65d3163f4f5b4545181813b8e8a5ea5a157/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6345e65d3163f4f5b4545181813b8e8a5ea5a157/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=6345e65d3163f4f5b4545181813b8e8a5ea5a157",
        "patch": "@@ -185,6 +185,7 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   netmessagemaker.h \\\n   node/blockstorage.h \\\n+  node/chainstate.h \\\n   node/coin.h \\\n   node/coinstats.h \\\n   node/context.h \\\n@@ -347,6 +348,7 @@ libbitcoin_server_a_SOURCES = \\\n   net.cpp \\\n   net_processing.cpp \\\n   node/blockstorage.cpp \\\n+  node/chainstate.cpp \\\n   node/coin.cpp \\\n   node/coinstats.cpp \\\n   node/context.cpp \\"
      },
      {
        "sha": "e56f59f11270b95959e508afeac3513489234aef",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 173,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6345e65d3163f4f5b4545181813b8e8a5ea5a157/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6345e65d3163f4f5b4545181813b8e8a5ea5a157/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6345e65d3163f4f5b4545181813b8e8a5ea5a157",
        "patch": "@@ -35,6 +35,7 @@\n #include <net_processing.h>\n #include <netbase.h>\n #include <node/blockstorage.h>\n+#include <node/chainstate.h> // for LoadChainstate\n #include <node/context.h>\n #include <node/ui_interface.h>\n #include <policy/feerate.h>\n@@ -1395,183 +1396,23 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fLoaded = false;\n     while (!fLoaded && !ShutdownRequested()) {\n         const bool fReset = fReindex;\n-        auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n-            return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n-        };\n         bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index\u2026\").translated);\n \n-        do {\n-            const int64_t load_block_index_start_time = GetTimeMillis();\n-            try {\n-                LOCK(cs_main);\n-                chainman.InitializeChainstate(Assert(node.mempool.get()));\n-                chainman.m_total_coinstip_cache = nCoinCacheUsage;\n-                chainman.m_total_coinsdb_cache = nCoinDBCache;\n-\n-                UnloadBlockIndex(node.mempool.get(), chainman);\n-\n-                auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n-                // new CBlockTreeDB tries to delete the existing file, which\n-                // fails if it's still open from the previous loop. Close it first:\n-                pblocktree.reset();\n-                pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n-\n-                if (fReset) {\n-                    pblocktree->WriteReindexing(true);\n-                    //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n-                    if (fPruneMode)\n-                        CleanupBlockRevFiles();\n-                }\n-\n-                if (ShutdownRequested()) break;\n-\n-                // LoadBlockIndex will load fHavePruned if we've ever removed a\n-                // block file from disk.\n-                // Note that it also sets fReindex based on the disk flag!\n-                // From here on out fReindex and fReset mean something different!\n-                if (!chainman.LoadBlockIndex()) {\n-                    if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\");\n-                    break;\n-                }\n-\n-                // If the loaded chain has a wrong genesis, bail out immediately\n-                // (we're likely using a testnet datadir, or the other way around).\n-                if (!chainman.BlockIndex().empty() &&\n-                        !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n-                }\n-\n-                // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n-                // in the past, but is now trying to run unpruned.\n-                if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n-                    break;\n-                }\n-\n-                // At this point blocktree args are consistent with what's on disk.\n-                // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n-                // (otherwise we use the one already on disk).\n-                // This is called again in ThreadImport after the reindex completes.\n-                if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n-                    strLoadError = _(\"Error initializing block database\");\n-                    break;\n-                }\n-\n-                // At this point we're either in reindex or we've loaded a useful\n-                // block tree into BlockIndex()!\n-\n-                bool failed_chainstate_init = false;\n-\n-                for (CChainState* chainstate : chainman.GetAll()) {\n-                    chainstate->InitCoinsDB(\n-                        /* cache_size_bytes */ nCoinDBCache,\n-                        /* in_memory */ false,\n-                        /* should_wipe */ fReset || fReindexChainState);\n-\n-                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n-                        uiInterface.ThreadSafeMessageBox(\n-                            _(\"Error reading from database, shutting down.\"),\n-                            \"\", CClientUIInterface::MSG_ERROR);\n-                    });\n-\n-                    // If necessary, upgrade from older database format.\n-                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->CoinsDB().Upgrade()) {\n-                        strLoadError = _(\"Error upgrading chainstate database\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->ReplayBlocks()) {\n-                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // The on-disk coinsdb is now in a good state, create the cache\n-                    chainstate->InitCoinsCache(nCoinCacheUsage);\n-                    assert(chainstate->CanFlushToDisk());\n-\n-                    if (!is_coinsview_empty(chainstate)) {\n-                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                        if (!chainstate->LoadChainTip()) {\n-                            strLoadError = _(\"Error initializing block database\");\n-                            failed_chainstate_init = true;\n-                            break; // out of the per-chainstate loop\n-                        }\n-                        assert(chainstate->m_chain.Tip() != nullptr);\n-                    }\n-                }\n-\n-                if (failed_chainstate_init) {\n-                    break; // out of the chainstate activation do-while\n-                }\n-            } catch (const std::exception& e) {\n-                LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\");\n-                break;\n-            }\n-\n-            if (!fReset) {\n-                LOCK(cs_main);\n-                auto chainstates{chainman.GetAll()};\n-                if (std::any_of(chainstates.begin(), chainstates.end(),\n-                                [](const CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(); })) {\n-                    strLoadError = strprintf(_(\"Witness data for blocks after height %d requires validation. Please restart with -reindex.\"),\n-                                             chainparams.GetConsensus().SegwitHeight);\n-                    break;\n-                }\n-            }\n-\n-            bool failed_verification = false;\n-\n-            try {\n-                LOCK(cs_main);\n-\n-                for (CChainState* chainstate : chainman.GetAll()) {\n-                    if (!is_coinsview_empty(chainstate)) {\n-                        uiInterface.InitMessage(_(\"Verifying blocks\u2026\").translated);\n-                        if (fHavePruned && args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                            LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                                MIN_BLOCKS_TO_KEEP);\n-                        }\n-\n-                        const CBlockIndex* tip = chainstate->m_chain.Tip();\n-                        RPCNotifyBlockChange(tip);\n-                        if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                            strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                    \"This may be due to your computer's date and time being set incorrectly. \"\n-                                    \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n-                            failed_verification = true;\n-                            break;\n-                        }\n-\n-                        if (!CVerifyDB().VerifyDB(\n-                                *chainstate, chainparams, chainstate->CoinsDB(),\n-                                args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                            strLoadError = _(\"Corrupted block database detected\");\n-                            failed_verification = true;\n-                            break;\n-                        }\n-                    }\n-                }\n-            } catch (const std::exception& e) {\n-                LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\");\n-                failed_verification = true;\n-                break;\n-            }\n-\n-            if (!failed_verification) {\n-                fLoaded = true;\n-                LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - load_block_index_start_time);\n-            }\n-        } while(false);\n+        bool rv = LoadChainstate(fLoaded,\n+                                 strLoadError,\n+                                 fReset,\n+                                 chainman,\n+                                 node,\n+                                 fPruneMode,\n+                                 chainparams,\n+                                 args,\n+                                 fReindexChainState,\n+                                 nBlockTreeDBCache,\n+                                 nCoinDBCache,\n+                                 nCoinCacheUsage);\n+        if (!rv) return false;\n \n         if (!fLoaded && !ShutdownRequested()) {\n             // first suggest a reindex"
      },
      {
        "sha": "f3b03a1edccf9dfba07bf44030f00d27af52a074",
        "filename": "src/node/chainstate.cpp",
        "status": "added",
        "additions": 205,
        "deletions": 0,
        "changes": 205,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6345e65d3163f4f5b4545181813b8e8a5ea5a157/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6345e65d3163f4f5b4545181813b8e8a5ea5a157/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=6345e65d3163f4f5b4545181813b8e8a5ea5a157",
        "patch": "@@ -0,0 +1,205 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/chainstate.h>\n+\n+#include <chainparams.h> // for CChainParams\n+#include <rpc/blockchain.h> // for RPCNotifyBlockChange\n+#include <util/time.h> // for GetTimeMillis\n+#include <util/translation.h> // for bilingual_str\n+#include <node/blockstorage.h> // for CleanupBlockRevFiles, fHavePruned, fReindex\n+#include <node/context.h> // for NodeContext\n+#include <node/ui_interface.h> // for InitError, uiInterface, and CClientUIInterface member access\n+#include <shutdown.h> // for ShutdownRequested\n+#include <timedata.h> // for GetAdjustedTime\n+#include <validation.h> // for a lot of things\n+\n+bool LoadChainstate(bool& fLoaded,\n+                    bilingual_str& strLoadError,\n+                    bool fReset,\n+                    ChainstateManager& chainman,\n+                    NodeContext& node,\n+                    bool fPruneMode,\n+                    const CChainParams& chainparams,\n+                    const ArgsManager& args,\n+                    bool fReindexChainState,\n+                    int64_t nBlockTreeDBCache,\n+                    int64_t nCoinDBCache,\n+                    int64_t nCoinCacheUsage) {\n+    auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n+        return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n+    };\n+\n+    do {\n+        const int64_t load_block_index_start_time = GetTimeMillis();\n+        try {\n+            LOCK(cs_main);\n+            chainman.InitializeChainstate(Assert(node.mempool.get()));\n+            chainman.m_total_coinstip_cache = nCoinCacheUsage;\n+            chainman.m_total_coinsdb_cache = nCoinDBCache;\n+\n+            UnloadBlockIndex(node.mempool.get(), chainman);\n+\n+            auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n+            // new CBlockTreeDB tries to delete the existing file, which\n+            // fails if it's still open from the previous loop. Close it first:\n+            pblocktree.reset();\n+            pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n+\n+            if (fReset) {\n+                pblocktree->WriteReindexing(true);\n+                //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n+                if (fPruneMode)\n+                    CleanupBlockRevFiles();\n+            }\n+\n+            if (ShutdownRequested()) break;\n+\n+            // LoadBlockIndex will load fHavePruned if we've ever removed a\n+            // block file from disk.\n+            // Note that it also sets fReindex based on the disk flag!\n+            // From here on out fReindex and fReset mean something different!\n+            if (!chainman.LoadBlockIndex()) {\n+                if (ShutdownRequested()) break;\n+                strLoadError = _(\"Error loading block database\");\n+                break;\n+            }\n+\n+            // If the loaded chain has a wrong genesis, bail out immediately\n+            // (we're likely using a testnet datadir, or the other way around).\n+            if (!chainman.BlockIndex().empty() &&\n+                    !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n+                return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n+            }\n+\n+            // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n+            // in the past, but is now trying to run unpruned.\n+            if (fHavePruned && !fPruneMode) {\n+                strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n+                break;\n+            }\n+\n+            // At this point blocktree args are consistent with what's on disk.\n+            // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n+            // (otherwise we use the one already on disk).\n+            // This is called again in ThreadImport after the reindex completes.\n+            if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n+                strLoadError = _(\"Error initializing block database\");\n+                break;\n+            }\n+\n+            // At this point we're either in reindex or we've loaded a useful\n+            // block tree into BlockIndex()!\n+\n+            bool failed_chainstate_init = false;\n+\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                chainstate->InitCoinsDB(\n+                    /* cache_size_bytes */ nCoinDBCache,\n+                    /* in_memory */ false,\n+                    /* should_wipe */ fReset || fReindexChainState);\n+\n+                chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                    uiInterface.ThreadSafeMessageBox(\n+                        _(\"Error reading from database, shutting down.\"),\n+                        \"\", CClientUIInterface::MSG_ERROR);\n+                });\n+\n+                // If necessary, upgrade from older database format.\n+                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                if (!chainstate->CoinsDB().Upgrade()) {\n+                    strLoadError = _(\"Error upgrading chainstate database\");\n+                    failed_chainstate_init = true;\n+                    break;\n+                }\n+\n+                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                if (!chainstate->ReplayBlocks()) {\n+                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n+                    failed_chainstate_init = true;\n+                    break;\n+                }\n+\n+                // The on-disk coinsdb is now in a good state, create the cache\n+                chainstate->InitCoinsCache(nCoinCacheUsage);\n+                assert(chainstate->CanFlushToDisk());\n+\n+                if (!is_coinsview_empty(chainstate)) {\n+                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                    if (!chainstate->LoadChainTip()) {\n+                        strLoadError = _(\"Error initializing block database\");\n+                        failed_chainstate_init = true;\n+                        break; // out of the per-chainstate loop\n+                    }\n+                    assert(chainstate->m_chain.Tip() != nullptr);\n+                }\n+            }\n+\n+            if (failed_chainstate_init) {\n+                break; // out of the chainstate activation do-while\n+            }\n+        } catch (const std::exception& e) {\n+            LogPrintf(\"%s\\n\", e.what());\n+            strLoadError = _(\"Error opening block database\");\n+            break;\n+        }\n+\n+        if (!fReset) {\n+            LOCK(cs_main);\n+            auto chainstates{chainman.GetAll()};\n+            if (std::any_of(chainstates.begin(), chainstates.end(),\n+                            [](const CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(); })) {\n+                strLoadError = strprintf(_(\"Witness data for blocks after height %d requires validation. Please restart with -reindex.\"),\n+                                         chainparams.GetConsensus().SegwitHeight);\n+                break;\n+            }\n+        }\n+\n+        bool failed_verification = false;\n+\n+        try {\n+            LOCK(cs_main);\n+\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                if (!is_coinsview_empty(chainstate)) {\n+                    uiInterface.InitMessage(_(\"Verifying blocks\u2026\").translated);\n+                    if (fHavePruned && args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n+                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n+                            MIN_BLOCKS_TO_KEEP);\n+                    }\n+\n+                    const CBlockIndex* tip = chainstate->m_chain.Tip();\n+                    RPCNotifyBlockChange(tip);\n+                    if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n+                        strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n+                                \"This may be due to your computer's date and time being set incorrectly. \"\n+                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n+                        failed_verification = true;\n+                        break;\n+                    }\n+\n+                    if (!CVerifyDB().VerifyDB(\n+                            *chainstate, chainparams, chainstate->CoinsDB(),\n+                            args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                            args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n+                        strLoadError = _(\"Corrupted block database detected\");\n+                        failed_verification = true;\n+                        break;\n+                    }\n+                }\n+            }\n+        } catch (const std::exception& e) {\n+            LogPrintf(\"%s\\n\", e.what());\n+            strLoadError = _(\"Error opening block database\");\n+            failed_verification = true;\n+            break;\n+        }\n+\n+        if (!failed_verification) {\n+            fLoaded = true;\n+            LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - load_block_index_start_time);\n+        }\n+    } while(false);\n+    return true;\n+}"
      },
      {
        "sha": "6181e671baeefdd698241c365e37eb747515c22e",
        "filename": "src/node/chainstate.h",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6345e65d3163f4f5b4545181813b8e8a5ea5a157/src/node/chainstate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6345e65d3163f4f5b4545181813b8e8a5ea5a157/src/node/chainstate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.h?ref=6345e65d3163f4f5b4545181813b8e8a5ea5a157",
        "patch": "@@ -0,0 +1,48 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_CHAINSTATE_H\n+#define BITCOIN_NODE_CHAINSTATE_H\n+\n+#include <cstdint> // for int64_t\n+\n+class ArgsManager;\n+struct bilingual_str;\n+class CChainParams;\n+class ChainstateManager;\n+struct NodeContext;\n+\n+/** This sequence can have 4 types of outcomes:\n+ *\n+ *  1. Success\n+ *  2. Shutdown requested\n+ *    - nothing failed but a shutdown was triggered in the middle of the\n+ *      sequence\n+ *  3. Soft failure\n+ *    - a failure that might be recovered from with a reindex\n+ *  4. Hard failure\n+ *    - a failure that definitively cannot be recovered from with a reindex\n+ *\n+ *  Currently, LoadChainstate returns a bool which:\n+ *      - if false\n+ *          - Definitely a \"Hard failure\"\n+ *      - if true\n+ *          - if fLoaded -> \"Success\"\n+ *          - if ShutdownRequested() -> \"Shutdown requested\"\n+ *          - else -> \"Soft failure\"\n+ */\n+bool LoadChainstate(bool& fLoaded,\n+                    bilingual_str& strLoadError,\n+                    bool fReset,\n+                    ChainstateManager& chainman,\n+                    NodeContext& node,\n+                    bool fPruneMode,\n+                    const CChainParams& chainparams,\n+                    const ArgsManager& args,\n+                    bool fReindexChainState,\n+                    int64_t nBlockTreeDBCache,\n+                    int64_t nCoinDBCache,\n+                    int64_t nCoinCacheUsage);\n+\n+#endif // BITCOIN_NODE_CHAINSTATE_H"
      }
    ]
  },
  {
    "sha": "165b30b649923da4ed19749a399c4a4589da326b",
    "node_id": "C_kwDOABII59oAKDE2NWIzMGI2NDk5MjNkYTRlZDE5NzQ5YTM5OWM0YTQ1ODlkYTMyNmI",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-20T21:08:18Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-29T20:47:33Z"
      },
      "message": "node/chainstate: Decouple from GetTimeMillis\n\n...instead require caller to pass in a std::function that returns the current\nsystem time in milliseconds as a int64_t",
      "tree": {
        "sha": "7edef4976028d89354bf6fbf4ee18bdb77f681ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7edef4976028d89354bf6fbf4ee18bdb77f681ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/165b30b649923da4ed19749a399c4a4589da326b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/165b30b649923da4ed19749a399c4a4589da326b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/165b30b649923da4ed19749a399c4a4589da326b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/165b30b649923da4ed19749a399c4a4589da326b/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6345e65d3163f4f5b4545181813b8e8a5ea5a157",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6345e65d3163f4f5b4545181813b8e8a5ea5a157",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6345e65d3163f4f5b4545181813b8e8a5ea5a157"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "44dc42a8a1ec850e5a4a8958df6b5b571fb4574d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/165b30b649923da4ed19749a399c4a4589da326b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/165b30b649923da4ed19749a399c4a4589da326b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=165b30b649923da4ed19749a399c4a4589da326b",
        "patch": "@@ -1400,6 +1400,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n         uiInterface.InitMessage(_(\"Loading block index\u2026\").translated);\n \n+        const int64_t load_block_index_start_time = GetTimeMillis();\n         bool rv = LoadChainstate(fLoaded,\n                                  strLoadError,\n                                  fReset,\n@@ -1413,6 +1414,9 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                  nCoinDBCache,\n                                  nCoinCacheUsage);\n         if (!rv) return false;\n+        if (fLoaded) {\n+            LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - load_block_index_start_time);\n+        }\n \n         if (!fLoaded && !ShutdownRequested()) {\n             // first suggest a reindex"
      },
      {
        "sha": "f8711177e11293046554b93142f98a17f37b35d5",
        "filename": "src/node/chainstate.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/165b30b649923da4ed19749a399c4a4589da326b/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/165b30b649923da4ed19749a399c4a4589da326b/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=165b30b649923da4ed19749a399c4a4589da326b",
        "patch": "@@ -6,7 +6,6 @@\n \n #include <chainparams.h> // for CChainParams\n #include <rpc/blockchain.h> // for RPCNotifyBlockChange\n-#include <util/time.h> // for GetTimeMillis\n #include <util/translation.h> // for bilingual_str\n #include <node/blockstorage.h> // for CleanupBlockRevFiles, fHavePruned, fReindex\n #include <node/context.h> // for NodeContext\n@@ -32,7 +31,6 @@ bool LoadChainstate(bool& fLoaded,\n     };\n \n     do {\n-        const int64_t load_block_index_start_time = GetTimeMillis();\n         try {\n             LOCK(cs_main);\n             chainman.InitializeChainstate(Assert(node.mempool.get()));\n@@ -198,7 +196,6 @@ bool LoadChainstate(bool& fLoaded,\n \n         if (!failed_verification) {\n             fLoaded = true;\n-            LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - load_block_index_start_time);\n         }\n     } while(false);\n     return true;"
      }
    ]
  },
  {
    "sha": "64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f",
    "node_id": "C_kwDOABII59oAKDY0MTk1YmYyZTRiOGM2Zjc0ZDBkZjdiYTg1YTFlZTBmMGI2YzRlNWY",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-08-17T22:07:14Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-29T21:17:28Z"
      },
      "message": "node/chainstate: Decouple from stringy errors\n\nThis allows us to separate the initialization code from translations and\nerror reporting.\n\nThis change changes the caller semantics of LoadChainstate quite\ndrastically.\n\nTo see that this change doesn't change behaviour, observe that:\n\n1. Prior to this change, LoadChainstate returned false only in the \"bad\n   genesis block\" failure case (by returning InitError()), indicating\n   that the caller should immediately bail. After this change, the\n   corresponding ERROR_BAD_GENESIS_BLOCK handler in src/init.cpp\n   maintains behavioue by also bailing immediately.\n\n2. The failed_* temporary booleans were only used to break out of the\n   outer do/while(false) loop. They can therefore be safely removed.",
      "tree": {
        "sha": "4b244befad3c85ef94f7e0f47a910b819787d459",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b244befad3c85ef94f7e0f47a910b819787d459"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "165b30b649923da4ed19749a399c4a4589da326b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/165b30b649923da4ed19749a399c4a4589da326b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/165b30b649923da4ed19749a399c4a4589da326b"
      }
    ],
    "stats": {
      "total": 195,
      "additions": 109,
      "deletions": 86
    },
    "files": [
      {
        "sha": "0340602d5355052c1cda0aa923ae44b25d566d76",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 6,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f",
        "patch": "@@ -1399,11 +1399,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index\u2026\").translated);\n-\n         const int64_t load_block_index_start_time = GetTimeMillis();\n-        bool rv = LoadChainstate(fLoaded,\n-                                 strLoadError,\n-                                 fReset,\n+        auto rv = LoadChainstate(fReset,\n                                  chainman,\n                                  node,\n                                  fPruneMode,\n@@ -1413,8 +1410,48 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                  nBlockTreeDBCache,\n                                  nCoinDBCache,\n                                  nCoinCacheUsage);\n-        if (!rv) return false;\n-        if (fLoaded) {\n+        if (rv.has_value()) {\n+            switch (rv.value()) {\n+            case ChainstateLoadingError::ERROR_LOADING_BLOCK_DB:\n+                strLoadError = _(\"Error loading block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_BAD_GENESIS_BLOCK:\n+                return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n+            case ChainstateLoadingError::ERROR_PRUNED_NEEDS_REINDEX:\n+                strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n+                break;\n+            case ChainstateLoadingError::ERROR_LOAD_GENESIS_BLOCK_FAILED:\n+                strLoadError = _(\"Error initializing block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_CHAINSTATE_UPGRADE_FAILED:\n+                strLoadError = _(\"Error upgrading chainstate database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_REPLAYBLOCKS_FAILED:\n+                strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n+                break;\n+            case ChainstateLoadingError::ERROR_LOADCHAINTIP_FAILED:\n+                strLoadError = _(\"Error initializing block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED:\n+                strLoadError = _(\"Error opening block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_BLOCKS_WITNESS_INSUFFICIENTLY_VALIDATED:\n+                strLoadError = strprintf(_(\"Witness data for blocks after height %d requires validation. Please restart with -reindex.\"),\n+                                         chainparams.GetConsensus().SegwitHeight);\n+                break;\n+            case ChainstateLoadingError::ERROR_BLOCK_FROM_FUTURE:\n+                strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n+                                 \"This may be due to your computer's date and time being set incorrectly. \"\n+                                 \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n+                break;\n+            case ChainstateLoadingError::ERROR_CORRUPTED_BLOCK_DB:\n+                strLoadError = _(\"Corrupted block database detected\");\n+                break;\n+            case ChainstateLoadingError::SHUTDOWN_PROBED:\n+                break;\n+            }\n+        } else {\n+            fLoaded = true;\n             LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - load_block_index_start_time);\n         }\n "
      },
      {
        "sha": "3a751ece4af323f0c21a92eef5cf363a1ac57fdc",
        "filename": "src/node/chainstate.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 60,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f",
        "patch": "@@ -6,26 +6,24 @@\n \n #include <chainparams.h> // for CChainParams\n #include <rpc/blockchain.h> // for RPCNotifyBlockChange\n-#include <util/translation.h> // for bilingual_str\n #include <node/blockstorage.h> // for CleanupBlockRevFiles, fHavePruned, fReindex\n #include <node/context.h> // for NodeContext\n #include <node/ui_interface.h> // for InitError, uiInterface, and CClientUIInterface member access\n #include <shutdown.h> // for ShutdownRequested\n #include <timedata.h> // for GetAdjustedTime\n #include <validation.h> // for a lot of things\n \n-bool LoadChainstate(bool& fLoaded,\n-                    bilingual_str& strLoadError,\n-                    bool fReset,\n-                    ChainstateManager& chainman,\n-                    NodeContext& node,\n-                    bool fPruneMode,\n-                    const CChainParams& chainparams,\n-                    const ArgsManager& args,\n-                    bool fReindexChainState,\n-                    int64_t nBlockTreeDBCache,\n-                    int64_t nCoinDBCache,\n-                    int64_t nCoinCacheUsage) {\n+std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n+                                                     ChainstateManager& chainman,\n+                                                     NodeContext& node,\n+                                                     bool fPruneMode,\n+                                                     const CChainParams& chainparams,\n+                                                     const ArgsManager& args,\n+                                                     bool fReindexChainState,\n+                                                     int64_t nBlockTreeDBCache,\n+                                                     int64_t nCoinDBCache,\n+                                                     int64_t nCoinCacheUsage)\n+{\n     auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n         return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n     };\n@@ -52,46 +50,41 @@ bool LoadChainstate(bool& fLoaded,\n                     CleanupBlockRevFiles();\n             }\n \n-            if (ShutdownRequested()) break;\n+            if (ShutdownRequested()) return ChainstateLoadingError::SHUTDOWN_PROBED;\n \n             // LoadBlockIndex will load fHavePruned if we've ever removed a\n             // block file from disk.\n             // Note that it also sets fReindex based on the disk flag!\n             // From here on out fReindex and fReset mean something different!\n             if (!chainman.LoadBlockIndex()) {\n-                if (ShutdownRequested()) break;\n-                strLoadError = _(\"Error loading block database\");\n-                break;\n+                if (ShutdownRequested()) return ChainstateLoadingError::SHUTDOWN_PROBED;\n+                return ChainstateLoadingError::ERROR_LOADING_BLOCK_DB;\n             }\n \n             // If the loaded chain has a wrong genesis, bail out immediately\n             // (we're likely using a testnet datadir, or the other way around).\n             if (!chainman.BlockIndex().empty() &&\n                     !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n+                return ChainstateLoadingError::ERROR_BAD_GENESIS_BLOCK;\n             }\n \n             // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n             // in the past, but is now trying to run unpruned.\n             if (fHavePruned && !fPruneMode) {\n-                strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n-                break;\n+                return ChainstateLoadingError::ERROR_PRUNED_NEEDS_REINDEX;\n             }\n \n             // At this point blocktree args are consistent with what's on disk.\n             // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n             // (otherwise we use the one already on disk).\n             // This is called again in ThreadImport after the reindex completes.\n             if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n-                strLoadError = _(\"Error initializing block database\");\n-                break;\n+                return ChainstateLoadingError::ERROR_LOAD_GENESIS_BLOCK_FAILED;\n             }\n \n             // At this point we're either in reindex or we've loaded a useful\n             // block tree into BlockIndex()!\n \n-            bool failed_chainstate_init = false;\n-\n             for (CChainState* chainstate : chainman.GetAll()) {\n                 chainstate->InitCoinsDB(\n                     /* cache_size_bytes */ nCoinDBCache,\n@@ -107,16 +100,12 @@ bool LoadChainstate(bool& fLoaded,\n                 // If necessary, upgrade from older database format.\n                 // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n                 if (!chainstate->CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\");\n-                    failed_chainstate_init = true;\n-                    break;\n+                    return ChainstateLoadingError::ERROR_CHAINSTATE_UPGRADE_FAILED;\n                 }\n \n                 // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n                 if (!chainstate->ReplayBlocks()) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n-                    failed_chainstate_init = true;\n-                    break;\n+                    return ChainstateLoadingError::ERROR_REPLAYBLOCKS_FAILED;\n                 }\n \n                 // The on-disk coinsdb is now in a good state, create the cache\n@@ -126,36 +115,25 @@ bool LoadChainstate(bool& fLoaded,\n                 if (!is_coinsview_empty(chainstate)) {\n                     // LoadChainTip initializes the chain based on CoinsTip()'s best block\n                     if (!chainstate->LoadChainTip()) {\n-                        strLoadError = _(\"Error initializing block database\");\n-                        failed_chainstate_init = true;\n-                        break; // out of the per-chainstate loop\n+                        return ChainstateLoadingError::ERROR_LOADCHAINTIP_FAILED;\n                     }\n                     assert(chainstate->m_chain.Tip() != nullptr);\n                 }\n             }\n-\n-            if (failed_chainstate_init) {\n-                break; // out of the chainstate activation do-while\n-            }\n         } catch (const std::exception& e) {\n             LogPrintf(\"%s\\n\", e.what());\n-            strLoadError = _(\"Error opening block database\");\n-            break;\n+            return ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED;\n         }\n \n         if (!fReset) {\n             LOCK(cs_main);\n             auto chainstates{chainman.GetAll()};\n             if (std::any_of(chainstates.begin(), chainstates.end(),\n                             [](const CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(); })) {\n-                strLoadError = strprintf(_(\"Witness data for blocks after height %d requires validation. Please restart with -reindex.\"),\n-                                         chainparams.GetConsensus().SegwitHeight);\n-                break;\n+                return ChainstateLoadingError::ERROR_BLOCKS_WITNESS_INSUFFICIENTLY_VALIDATED;\n             }\n         }\n \n-        bool failed_verification = false;\n-\n         try {\n             LOCK(cs_main);\n \n@@ -170,33 +148,21 @@ bool LoadChainstate(bool& fLoaded,\n                     const CBlockIndex* tip = chainstate->m_chain.Tip();\n                     RPCNotifyBlockChange(tip);\n                     if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                        strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                \"This may be due to your computer's date and time being set incorrectly. \"\n-                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n-                        failed_verification = true;\n-                        break;\n+                        return ChainstateLoadingError::ERROR_BLOCK_FROM_FUTURE;\n                     }\n \n                     if (!CVerifyDB().VerifyDB(\n                             *chainstate, chainparams, chainstate->CoinsDB(),\n                             args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n                             args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                        strLoadError = _(\"Corrupted block database detected\");\n-                        failed_verification = true;\n-                        break;\n+                        return ChainstateLoadingError::ERROR_CORRUPTED_BLOCK_DB;\n                     }\n                 }\n             }\n         } catch (const std::exception& e) {\n             LogPrintf(\"%s\\n\", e.what());\n-            strLoadError = _(\"Error opening block database\");\n-            failed_verification = true;\n-            break;\n-        }\n-\n-        if (!failed_verification) {\n-            fLoaded = true;\n+            return ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED;\n         }\n     } while(false);\n-    return true;\n+    return std::nullopt;\n }"
      },
      {
        "sha": "921b8d89e5f47bcb9c14286c81b02f16e86d537d",
        "filename": "src/node/chainstate.h",
        "status": "modified",
        "additions": 40,
        "deletions": 20,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f/src/node/chainstate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f/src/node/chainstate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.h?ref=64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f",
        "patch": "@@ -6,13 +6,28 @@\n #define BITCOIN_NODE_CHAINSTATE_H\n \n #include <cstdint> // for int64_t\n+#include <optional> // for std::optional\n \n class ArgsManager;\n-struct bilingual_str;\n class CChainParams;\n class ChainstateManager;\n struct NodeContext;\n \n+enum class ChainstateLoadingError {\n+    ERROR_LOADING_BLOCK_DB,\n+    ERROR_BAD_GENESIS_BLOCK,\n+    ERROR_PRUNED_NEEDS_REINDEX,\n+    ERROR_LOAD_GENESIS_BLOCK_FAILED,\n+    ERROR_CHAINSTATE_UPGRADE_FAILED,\n+    ERROR_REPLAYBLOCKS_FAILED,\n+    ERROR_LOADCHAINTIP_FAILED,\n+    ERROR_GENERIC_BLOCKDB_OPEN_FAILED,\n+    ERROR_BLOCKS_WITNESS_INSUFFICIENTLY_VALIDATED,\n+    ERROR_BLOCK_FROM_FUTURE,\n+    ERROR_CORRUPTED_BLOCK_DB,\n+    SHUTDOWN_PROBED,\n+};\n+\n /** This sequence can have 4 types of outcomes:\n  *\n  *  1. Success\n@@ -24,25 +39,30 @@ struct NodeContext;\n  *  4. Hard failure\n  *    - a failure that definitively cannot be recovered from with a reindex\n  *\n- *  Currently, LoadChainstate returns a bool which:\n- *      - if false\n- *          - Definitely a \"Hard failure\"\n- *      - if true\n- *          - if fLoaded -> \"Success\"\n- *          - if ShutdownRequested() -> \"Shutdown requested\"\n- *          - else -> \"Soft failure\"\n+ *  Currently, LoadChainstate returns a std::optional<ChainstateLoadingError>\n+ *  which:\n+ *\n+ *  - if has_value()\n+ *      - Either \"Soft failure\", \"Hard failure\", or \"Shutdown requested\",\n+ *        differentiable by the specific enumerator.\n+ *\n+ *        Note that a return value of SHUTDOWN_PROBED means ONLY that \"during\n+ *        this sequence, when we explicitly checked ShutdownRequested() at\n+ *        arbitrary points, one of those calls returned true\". Therefore, a\n+ *        return value other than SHUTDOWN_PROBED does not guarantee that\n+ *        ShutdownRequested() hasn't been called indirectly.\n+ *  - else\n+ *      - Success!\n  */\n-bool LoadChainstate(bool& fLoaded,\n-                    bilingual_str& strLoadError,\n-                    bool fReset,\n-                    ChainstateManager& chainman,\n-                    NodeContext& node,\n-                    bool fPruneMode,\n-                    const CChainParams& chainparams,\n-                    const ArgsManager& args,\n-                    bool fReindexChainState,\n-                    int64_t nBlockTreeDBCache,\n-                    int64_t nCoinDBCache,\n-                    int64_t nCoinCacheUsage);\n+std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n+                                                     ChainstateManager& chainman,\n+                                                     NodeContext& node,\n+                                                     bool fPruneMode,\n+                                                     const CChainParams& chainparams,\n+                                                     const ArgsManager& args,\n+                                                     bool fReindexChainState,\n+                                                     int64_t nBlockTreeDBCache,\n+                                                     int64_t nCoinDBCache,\n+                                                     int64_t nCoinCacheUsage);\n \n #endif // BITCOIN_NODE_CHAINSTATE_H"
      }
    ]
  },
  {
    "sha": "bb8245bedc18125309ca85e95dfc91eb7c4201bf",
    "node_id": "C_kwDOABII59oAKGJiODI0NWJlZGMxODEyNTMwOWNhODVlOTVkZmM5MWViN2M0MjAxYmY",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-08-16T21:03:33Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-29T21:17:32Z"
      },
      "message": "node/chainstate: Decouple from ArgsManager\n\n...instead pass in only the necessary information",
      "tree": {
        "sha": "ff748271bbb4edf7a08e39a4b0c43c10b34defe3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff748271bbb4edf7a08e39a4b0c43c10b34defe3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb8245bedc18125309ca85e95dfc91eb7c4201bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8245bedc18125309ca85e95dfc91eb7c4201bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb8245bedc18125309ca85e95dfc91eb7c4201bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8245bedc18125309ca85e95dfc91eb7c4201bf/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 12,
      "deletions": 10
    },
    "files": [
      {
        "sha": "4bdd97287319aad4ae867aa01ca7054fdcf756a0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb8245bedc18125309ca85e95dfc91eb7c4201bf/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb8245bedc18125309ca85e95dfc91eb7c4201bf/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=bb8245bedc18125309ca85e95dfc91eb7c4201bf",
        "patch": "@@ -1405,11 +1405,12 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                  node,\n                                  fPruneMode,\n                                  chainparams,\n-                                 args,\n                                  fReindexChainState,\n                                  nBlockTreeDBCache,\n                                  nCoinDBCache,\n-                                 nCoinCacheUsage);\n+                                 nCoinCacheUsage,\n+                                 args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n+                                 args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL));\n         if (rv.has_value()) {\n             switch (rv.value()) {\n             case ChainstateLoadingError::ERROR_LOADING_BLOCK_DB:"
      },
      {
        "sha": "f5d243cfad22d8816ffd9622b1e8f9c984a1d515",
        "filename": "src/node/chainstate.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb8245bedc18125309ca85e95dfc91eb7c4201bf/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb8245bedc18125309ca85e95dfc91eb7c4201bf/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=bb8245bedc18125309ca85e95dfc91eb7c4201bf",
        "patch": "@@ -18,11 +18,12 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                                                      NodeContext& node,\n                                                      bool fPruneMode,\n                                                      const CChainParams& chainparams,\n-                                                     const ArgsManager& args,\n                                                      bool fReindexChainState,\n                                                      int64_t nBlockTreeDBCache,\n                                                      int64_t nCoinDBCache,\n-                                                     int64_t nCoinCacheUsage)\n+                                                     int64_t nCoinCacheUsage,\n+                                                     unsigned int check_blocks,\n+                                                     unsigned int check_level)\n {\n     auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n         return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n@@ -140,7 +141,7 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n             for (CChainState* chainstate : chainman.GetAll()) {\n                 if (!is_coinsview_empty(chainstate)) {\n                     uiInterface.InitMessage(_(\"Verifying blocks\u2026\").translated);\n-                    if (fHavePruned && args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n+                    if (fHavePruned && check_blocks > MIN_BLOCKS_TO_KEEP) {\n                         LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n                             MIN_BLOCKS_TO_KEEP);\n                     }\n@@ -153,8 +154,8 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n \n                     if (!CVerifyDB().VerifyDB(\n                             *chainstate, chainparams, chainstate->CoinsDB(),\n-                            args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                            args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n+                            check_level,\n+                            check_blocks)) {\n                         return ChainstateLoadingError::ERROR_CORRUPTED_BLOCK_DB;\n                     }\n                 }"
      },
      {
        "sha": "87aad23e2795d0404afc4882bb8b144cafe83391",
        "filename": "src/node/chainstate.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb8245bedc18125309ca85e95dfc91eb7c4201bf/src/node/chainstate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb8245bedc18125309ca85e95dfc91eb7c4201bf/src/node/chainstate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.h?ref=bb8245bedc18125309ca85e95dfc91eb7c4201bf",
        "patch": "@@ -8,7 +8,6 @@\n #include <cstdint> // for int64_t\n #include <optional> // for std::optional\n \n-class ArgsManager;\n class CChainParams;\n class ChainstateManager;\n struct NodeContext;\n@@ -59,10 +58,11 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                                                      NodeContext& node,\n                                                      bool fPruneMode,\n                                                      const CChainParams& chainparams,\n-                                                     const ArgsManager& args,\n                                                      bool fReindexChainState,\n                                                      int64_t nBlockTreeDBCache,\n                                                      int64_t nCoinDBCache,\n-                                                     int64_t nCoinCacheUsage);\n+                                                     int64_t nCoinCacheUsage,\n+                                                     unsigned int check_blocks,\n+                                                     unsigned int check_level);\n \n #endif // BITCOIN_NODE_CHAINSTATE_H"
      }
    ]
  },
  {
    "sha": "aa6bc732b148e5e27bfc1df23f42c6c55006185c",
    "node_id": "C_kwDOABII59oAKGFhNmJjNzMyYjE0OGU1ZTI3YmZjMWRmMjNmNDJjNmM1NTAwNjE4NWM",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-20T20:44:21Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-29T21:17:32Z"
      },
      "message": "node/chainstate: Decouple from concept of NodeContext\n\n...instead pass in only the necessary information\n\nAlso allow mempool to be a nullptr",
      "tree": {
        "sha": "417fbd3549bd492a416d70aed2fd8016033ea9f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/417fbd3549bd492a416d70aed2fd8016033ea9f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa6bc732b148e5e27bfc1df23f42c6c55006185c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa6bc732b148e5e27bfc1df23f42c6c55006185c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa6bc732b148e5e27bfc1df23f42c6c55006185c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa6bc732b148e5e27bfc1df23f42c6c55006185c/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb8245bedc18125309ca85e95dfc91eb7c4201bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8245bedc18125309ca85e95dfc91eb7c4201bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb8245bedc18125309ca85e95dfc91eb7c4201bf"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 6,
      "deletions": 7
    },
    "files": [
      {
        "sha": "323c6f91e66da48fa4eefd163f293802c2582df4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa6bc732b148e5e27bfc1df23f42c6c55006185c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa6bc732b148e5e27bfc1df23f42c6c55006185c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=aa6bc732b148e5e27bfc1df23f42c6c55006185c",
        "patch": "@@ -1402,7 +1402,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         const int64_t load_block_index_start_time = GetTimeMillis();\n         auto rv = LoadChainstate(fReset,\n                                  chainman,\n-                                 node,\n+                                 node.mempool.get(),\n                                  fPruneMode,\n                                  chainparams,\n                                  fReindexChainState,"
      },
      {
        "sha": "65b69659350fb19310317b842ba083a043a36123",
        "filename": "src/node/chainstate.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa6bc732b148e5e27bfc1df23f42c6c55006185c/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa6bc732b148e5e27bfc1df23f42c6c55006185c/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=aa6bc732b148e5e27bfc1df23f42c6c55006185c",
        "patch": "@@ -7,15 +7,14 @@\n #include <chainparams.h> // for CChainParams\n #include <rpc/blockchain.h> // for RPCNotifyBlockChange\n #include <node/blockstorage.h> // for CleanupBlockRevFiles, fHavePruned, fReindex\n-#include <node/context.h> // for NodeContext\n #include <node/ui_interface.h> // for InitError, uiInterface, and CClientUIInterface member access\n #include <shutdown.h> // for ShutdownRequested\n #include <timedata.h> // for GetAdjustedTime\n #include <validation.h> // for a lot of things\n \n std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                                                      ChainstateManager& chainman,\n-                                                     NodeContext& node,\n+                                                     CTxMemPool* mempool,\n                                                      bool fPruneMode,\n                                                      const CChainParams& chainparams,\n                                                      bool fReindexChainState,\n@@ -32,11 +31,11 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n     do {\n         try {\n             LOCK(cs_main);\n-            chainman.InitializeChainstate(Assert(node.mempool.get()));\n+            chainman.InitializeChainstate(Assert(mempool));\n             chainman.m_total_coinstip_cache = nCoinCacheUsage;\n             chainman.m_total_coinsdb_cache = nCoinDBCache;\n \n-            UnloadBlockIndex(node.mempool.get(), chainman);\n+            UnloadBlockIndex(mempool, chainman);\n \n             auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n             // new CBlockTreeDB tries to delete the existing file, which"
      },
      {
        "sha": "39621a31c5d7cc2a4e9f5294561b650937a43d29",
        "filename": "src/node/chainstate.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa6bc732b148e5e27bfc1df23f42c6c55006185c/src/node/chainstate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa6bc732b148e5e27bfc1df23f42c6c55006185c/src/node/chainstate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.h?ref=aa6bc732b148e5e27bfc1df23f42c6c55006185c",
        "patch": "@@ -10,7 +10,7 @@\n \n class CChainParams;\n class ChainstateManager;\n-struct NodeContext;\n+class CTxMemPool;\n \n enum class ChainstateLoadingError {\n     ERROR_LOADING_BLOCK_DB,\n@@ -55,7 +55,7 @@ enum class ChainstateLoadingError {\n  */\n std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                                                      ChainstateManager& chainman,\n-                                                     NodeContext& node,\n+                                                     CTxMemPool* mempool,\n                                                      bool fPruneMode,\n                                                      const CChainParams& chainparams,\n                                                      bool fReindexChainState,"
      }
    ]
  },
  {
    "sha": "0d2f1a458e5ad8cfbbdc039084ce554daaf41ba9",
    "node_id": "C_kwDOABII59oAKDBkMmYxYTQ1OGU1YWQ4Y2ZiYmRjMDM5MDg0Y2U1NTRkYWFmNDFiYTk",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-12T00:19:09Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-29T21:17:32Z"
      },
      "message": "Move mempool nullptr Assert out of LoadChainstate",
      "tree": {
        "sha": "3c8e165f02376fecb1cb4e89e95a44b25ac4deed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c8e165f02376fecb1cb4e89e95a44b25ac4deed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d2f1a458e5ad8cfbbdc039084ce554daaf41ba9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d2f1a458e5ad8cfbbdc039084ce554daaf41ba9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d2f1a458e5ad8cfbbdc039084ce554daaf41ba9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d2f1a458e5ad8cfbbdc039084ce554daaf41ba9/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa6bc732b148e5e27bfc1df23f42c6c55006185c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa6bc732b148e5e27bfc1df23f42c6c55006185c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa6bc732b148e5e27bfc1df23f42c6c55006185c"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cc300fcdc8e78f38a7101b4cda3872b18a9e4d0d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d2f1a458e5ad8cfbbdc039084ce554daaf41ba9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d2f1a458e5ad8cfbbdc039084ce554daaf41ba9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0d2f1a458e5ad8cfbbdc039084ce554daaf41ba9",
        "patch": "@@ -1402,7 +1402,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         const int64_t load_block_index_start_time = GetTimeMillis();\n         auto rv = LoadChainstate(fReset,\n                                  chainman,\n-                                 node.mempool.get(),\n+                                 Assert(node.mempool.get()),\n                                  fPruneMode,\n                                  chainparams,\n                                  fReindexChainState,"
      },
      {
        "sha": "2466c4fe597be3d61df2d9c5e2818bc44524a985",
        "filename": "src/node/chainstate.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d2f1a458e5ad8cfbbdc039084ce554daaf41ba9/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d2f1a458e5ad8cfbbdc039084ce554daaf41ba9/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=0d2f1a458e5ad8cfbbdc039084ce554daaf41ba9",
        "patch": "@@ -31,7 +31,7 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n     do {\n         try {\n             LOCK(cs_main);\n-            chainman.InitializeChainstate(Assert(mempool));\n+            chainman.InitializeChainstate(mempool);\n             chainman.m_total_coinstip_cache = nCoinCacheUsage;\n             chainman.m_total_coinsdb_cache = nCoinDBCache;\n "
      }
    ]
  },
  {
    "sha": "49d2d11aa5dbe13cfcbb11605b2f60e62f4e848b",
    "node_id": "C_kwDOABII59oAKDQ5ZDJkMTFhYTVkYmUxM2NmY2JiMTE2MDViMmY2MGU2MmY0ZTg0OGI",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-11T21:20:44Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-29T21:17:32Z"
      },
      "message": "Move init logistics message for BAD_GENESIS_BLOCK to init.cpp",
      "tree": {
        "sha": "798e82997470e068a6a360354cb3f72ef1f3c258",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/798e82997470e068a6a360354cb3f72ef1f3c258"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49d2d11aa5dbe13cfcbb11605b2f60e62f4e848b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49d2d11aa5dbe13cfcbb11605b2f60e62f4e848b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49d2d11aa5dbe13cfcbb11605b2f60e62f4e848b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49d2d11aa5dbe13cfcbb11605b2f60e62f4e848b/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d2f1a458e5ad8cfbbdc039084ce554daaf41ba9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d2f1a458e5ad8cfbbdc039084ce554daaf41ba9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d2f1a458e5ad8cfbbdc039084ce554daaf41ba9"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fe6d1c34373989959099d635b38220d9b8a67df2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d2d11aa5dbe13cfcbb11605b2f60e62f4e848b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d2d11aa5dbe13cfcbb11605b2f60e62f4e848b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=49d2d11aa5dbe13cfcbb11605b2f60e62f4e848b",
        "patch": "@@ -1417,6 +1417,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                 strLoadError = _(\"Error loading block database\");\n                 break;\n             case ChainstateLoadingError::ERROR_BAD_GENESIS_BLOCK:\n+                // If the loaded chain has a wrong genesis, bail out immediately\n+                // (we're likely using a testnet datadir, or the other way around).\n                 return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n             case ChainstateLoadingError::ERROR_PRUNED_NEEDS_REINDEX:\n                 strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");"
      },
      {
        "sha": "f539010a903c3d4fa0b136f61e7353faa379b26b",
        "filename": "src/node/chainstate.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49d2d11aa5dbe13cfcbb11605b2f60e62f4e848b/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49d2d11aa5dbe13cfcbb11605b2f60e62f4e848b/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=49d2d11aa5dbe13cfcbb11605b2f60e62f4e848b",
        "patch": "@@ -61,8 +61,6 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                 return ChainstateLoadingError::ERROR_LOADING_BLOCK_DB;\n             }\n \n-            // If the loaded chain has a wrong genesis, bail out immediately\n-            // (we're likely using a testnet datadir, or the other way around).\n             if (!chainman.BlockIndex().empty() &&\n                     !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n                 return ChainstateLoadingError::ERROR_BAD_GENESIS_BLOCK;"
      }
    ]
  },
  {
    "sha": "0b340cd58693d5c4956dbf1eda8f81cf0944b02b",
    "node_id": "C_kwDOABII59oAKDBiMzQwY2Q1ODY5M2Q1YzQ5NTZkYmYxZWRhOGY4MWNmMDk0NGIwMmI",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-20T21:46:06Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-29T21:19:19Z"
      },
      "message": "node/chainstate: Remove do/while loop\n\nI strongly recommend reviewing with the following git-diff flags:\n  --ignore-space-change",
      "tree": {
        "sha": "bf59389333b0b129570fa91b9c1122ab84ad4d1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf59389333b0b129570fa91b9c1122ab84ad4d1c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b340cd58693d5c4956dbf1eda8f81cf0944b02b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b340cd58693d5c4956dbf1eda8f81cf0944b02b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b340cd58693d5c4956dbf1eda8f81cf0944b02b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b340cd58693d5c4956dbf1eda8f81cf0944b02b/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49d2d11aa5dbe13cfcbb11605b2f60e62f4e848b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49d2d11aa5dbe13cfcbb11605b2f60e62f4e848b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49d2d11aa5dbe13cfcbb11605b2f60e62f4e848b"
      }
    ],
    "stats": {
      "total": 229,
      "additions": 114,
      "deletions": 115
    },
    "files": [
      {
        "sha": "f133c2434ed6083b922d3b4f35b30740989882da",
        "filename": "src/node/chainstate.cpp",
        "status": "modified",
        "additions": 114,
        "deletions": 115,
        "changes": 229,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b340cd58693d5c4956dbf1eda8f81cf0944b02b/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b340cd58693d5c4956dbf1eda8f81cf0944b02b/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=0b340cd58693d5c4956dbf1eda8f81cf0944b02b",
        "patch": "@@ -28,139 +28,138 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n         return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n     };\n \n-    do {\n-        try {\n-            LOCK(cs_main);\n-            chainman.InitializeChainstate(mempool);\n-            chainman.m_total_coinstip_cache = nCoinCacheUsage;\n-            chainman.m_total_coinsdb_cache = nCoinDBCache;\n-\n-            UnloadBlockIndex(mempool, chainman);\n-\n-            auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n-            // new CBlockTreeDB tries to delete the existing file, which\n-            // fails if it's still open from the previous loop. Close it first:\n-            pblocktree.reset();\n-            pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n-\n-            if (fReset) {\n-                pblocktree->WriteReindexing(true);\n-                //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n-                if (fPruneMode)\n-                    CleanupBlockRevFiles();\n-            }\n+    try {\n+        LOCK(cs_main);\n+        chainman.InitializeChainstate(mempool);\n+        chainman.m_total_coinstip_cache = nCoinCacheUsage;\n+        chainman.m_total_coinsdb_cache = nCoinDBCache;\n+\n+        UnloadBlockIndex(mempool, chainman);\n+\n+        auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n+        // new CBlockTreeDB tries to delete the existing file, which\n+        // fails if it's still open from the previous loop. Close it first:\n+        pblocktree.reset();\n+        pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n+\n+        if (fReset) {\n+            pblocktree->WriteReindexing(true);\n+            //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n+            if (fPruneMode)\n+                CleanupBlockRevFiles();\n+        }\n+\n+        if (ShutdownRequested()) return ChainstateLoadingError::SHUTDOWN_PROBED;\n \n+        // LoadBlockIndex will load fHavePruned if we've ever removed a\n+        // block file from disk.\n+        // Note that it also sets fReindex based on the disk flag!\n+        // From here on out fReindex and fReset mean something different!\n+        if (!chainman.LoadBlockIndex()) {\n             if (ShutdownRequested()) return ChainstateLoadingError::SHUTDOWN_PROBED;\n+            return ChainstateLoadingError::ERROR_LOADING_BLOCK_DB;\n+        }\n \n-            // LoadBlockIndex will load fHavePruned if we've ever removed a\n-            // block file from disk.\n-            // Note that it also sets fReindex based on the disk flag!\n-            // From here on out fReindex and fReset mean something different!\n-            if (!chainman.LoadBlockIndex()) {\n-                if (ShutdownRequested()) return ChainstateLoadingError::SHUTDOWN_PROBED;\n-                return ChainstateLoadingError::ERROR_LOADING_BLOCK_DB;\n-            }\n+        if (!chainman.BlockIndex().empty() &&\n+                !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n+            return ChainstateLoadingError::ERROR_BAD_GENESIS_BLOCK;\n+        }\n \n-            if (!chainman.BlockIndex().empty() &&\n-                    !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                return ChainstateLoadingError::ERROR_BAD_GENESIS_BLOCK;\n-            }\n+        // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n+        // in the past, but is now trying to run unpruned.\n+        if (fHavePruned && !fPruneMode) {\n+            return ChainstateLoadingError::ERROR_PRUNED_NEEDS_REINDEX;\n+        }\n+\n+        // At this point blocktree args are consistent with what's on disk.\n+        // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n+        // (otherwise we use the one already on disk).\n+        // This is called again in ThreadImport after the reindex completes.\n+        if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n+            return ChainstateLoadingError::ERROR_LOAD_GENESIS_BLOCK_FAILED;\n+        }\n \n-            // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n-            // in the past, but is now trying to run unpruned.\n-            if (fHavePruned && !fPruneMode) {\n-                return ChainstateLoadingError::ERROR_PRUNED_NEEDS_REINDEX;\n+        // At this point we're either in reindex or we've loaded a useful\n+        // block tree into BlockIndex()!\n+\n+        for (CChainState* chainstate : chainman.GetAll()) {\n+            chainstate->InitCoinsDB(\n+                /* cache_size_bytes */ nCoinDBCache,\n+                /* in_memory */ false,\n+                /* should_wipe */ fReset || fReindexChainState);\n+\n+            chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                uiInterface.ThreadSafeMessageBox(\n+                    _(\"Error reading from database, shutting down.\"),\n+                    \"\", CClientUIInterface::MSG_ERROR);\n+            });\n+\n+            // If necessary, upgrade from older database format.\n+            // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+            if (!chainstate->CoinsDB().Upgrade()) {\n+                return ChainstateLoadingError::ERROR_CHAINSTATE_UPGRADE_FAILED;\n             }\n \n-            // At this point blocktree args are consistent with what's on disk.\n-            // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n-            // (otherwise we use the one already on disk).\n-            // This is called again in ThreadImport after the reindex completes.\n-            if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n-                return ChainstateLoadingError::ERROR_LOAD_GENESIS_BLOCK_FAILED;\n+            // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+            if (!chainstate->ReplayBlocks()) {\n+                return ChainstateLoadingError::ERROR_REPLAYBLOCKS_FAILED;\n             }\n \n-            // At this point we're either in reindex or we've loaded a useful\n-            // block tree into BlockIndex()!\n-\n-            for (CChainState* chainstate : chainman.GetAll()) {\n-                chainstate->InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\"),\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!chainstate->CoinsDB().Upgrade()) {\n-                    return ChainstateLoadingError::ERROR_CHAINSTATE_UPGRADE_FAILED;\n-                }\n+            // The on-disk coinsdb is now in a good state, create the cache\n+            chainstate->InitCoinsCache(nCoinCacheUsage);\n+            assert(chainstate->CanFlushToDisk());\n \n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!chainstate->ReplayBlocks()) {\n-                    return ChainstateLoadingError::ERROR_REPLAYBLOCKS_FAILED;\n+            if (!is_coinsview_empty(chainstate)) {\n+                // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                if (!chainstate->LoadChainTip()) {\n+                    return ChainstateLoadingError::ERROR_LOADCHAINTIP_FAILED;\n                 }\n+                assert(chainstate->m_chain.Tip() != nullptr);\n+            }\n+        }\n+    } catch (const std::exception& e) {\n+        LogPrintf(\"%s\\n\", e.what());\n+        return ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED;\n+    }\n+\n+    if (!fReset) {\n+        LOCK(cs_main);\n+        auto chainstates{chainman.GetAll()};\n+        if (std::any_of(chainstates.begin(), chainstates.end(),\n+                        [](const CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(); })) {\n+            return ChainstateLoadingError::ERROR_BLOCKS_WITNESS_INSUFFICIENTLY_VALIDATED;\n+        }\n+    }\n \n-                // The on-disk coinsdb is now in a good state, create the cache\n-                chainstate->InitCoinsCache(nCoinCacheUsage);\n-                assert(chainstate->CanFlushToDisk());\n+    try {\n+        LOCK(cs_main);\n \n-                if (!is_coinsview_empty(chainstate)) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!chainstate->LoadChainTip()) {\n-                        return ChainstateLoadingError::ERROR_LOADCHAINTIP_FAILED;\n-                    }\n-                    assert(chainstate->m_chain.Tip() != nullptr);\n+        for (CChainState* chainstate : chainman.GetAll()) {\n+            if (!is_coinsview_empty(chainstate)) {\n+                uiInterface.InitMessage(_(\"Verifying blocks\u2026\").translated);\n+                if (fHavePruned && check_blocks > MIN_BLOCKS_TO_KEEP) {\n+                    LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n+                        MIN_BLOCKS_TO_KEEP);\n                 }\n-            }\n-        } catch (const std::exception& e) {\n-            LogPrintf(\"%s\\n\", e.what());\n-            return ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED;\n-        }\n \n-        if (!fReset) {\n-            LOCK(cs_main);\n-            auto chainstates{chainman.GetAll()};\n-            if (std::any_of(chainstates.begin(), chainstates.end(),\n-                            [](const CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(); })) {\n-                return ChainstateLoadingError::ERROR_BLOCKS_WITNESS_INSUFFICIENTLY_VALIDATED;\n-            }\n-        }\n+                const CBlockIndex* tip = chainstate->m_chain.Tip();\n+                RPCNotifyBlockChange(tip);\n+                if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n+                    return ChainstateLoadingError::ERROR_BLOCK_FROM_FUTURE;\n+                }\n \n-        try {\n-            LOCK(cs_main);\n-\n-            for (CChainState* chainstate : chainman.GetAll()) {\n-                if (!is_coinsview_empty(chainstate)) {\n-                    uiInterface.InitMessage(_(\"Verifying blocks\u2026\").translated);\n-                    if (fHavePruned && check_blocks > MIN_BLOCKS_TO_KEEP) {\n-                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                            MIN_BLOCKS_TO_KEEP);\n-                    }\n-\n-                    const CBlockIndex* tip = chainstate->m_chain.Tip();\n-                    RPCNotifyBlockChange(tip);\n-                    if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                        return ChainstateLoadingError::ERROR_BLOCK_FROM_FUTURE;\n-                    }\n-\n-                    if (!CVerifyDB().VerifyDB(\n-                            *chainstate, chainparams, chainstate->CoinsDB(),\n-                            check_level,\n-                            check_blocks)) {\n-                        return ChainstateLoadingError::ERROR_CORRUPTED_BLOCK_DB;\n-                    }\n+                if (!CVerifyDB().VerifyDB(\n+                        *chainstate, chainparams, chainstate->CoinsDB(),\n+                        check_level,\n+                        check_blocks)) {\n+                    return ChainstateLoadingError::ERROR_CORRUPTED_BLOCK_DB;\n                 }\n             }\n-        } catch (const std::exception& e) {\n-            LogPrintf(\"%s\\n\", e.what());\n-            return ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED;\n         }\n-    } while(false);\n+    } catch (const std::exception& e) {\n+        LogPrintf(\"%s\\n\", e.what());\n+        return ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED;\n+    }\n+\n     return std::nullopt;\n }"
      }
    ]
  },
  {
    "sha": "019da3dc8493054b456222ef23761dd95130b6a7",
    "node_id": "C_kwDOABII59oAKDAxOWRhM2RjODQ5MzA1NGI0NTYyMjJlZjIzNzYxZGQ5NTEzMGI2YTc",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-10T20:57:14Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-29T21:22:30Z"
      },
      "message": "Split off VerifyLoadedChainstate",
      "tree": {
        "sha": "dc86245258e2d61b0556daa3a9e0428ff4bfeb8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc86245258e2d61b0556daa3a9e0428ff4bfeb8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/019da3dc8493054b456222ef23761dd95130b6a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/019da3dc8493054b456222ef23761dd95130b6a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/019da3dc8493054b456222ef23761dd95130b6a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/019da3dc8493054b456222ef23761dd95130b6a7/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b340cd58693d5c4956dbf1eda8f81cf0944b02b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b340cd58693d5c4956dbf1eda8f81cf0944b02b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b340cd58693d5c4956dbf1eda8f81cf0944b02b"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 49,
      "deletions": 17
    },
    "files": [
      {
        "sha": "fbf9ec63d605c098bfc1d12ce4fb285e1303e981",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 6,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/019da3dc8493054b456222ef23761dd95130b6a7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/019da3dc8493054b456222ef23761dd95130b6a7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=019da3dc8493054b456222ef23761dd95130b6a7",
        "patch": "@@ -1408,9 +1408,14 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                  fReindexChainState,\n                                  nBlockTreeDBCache,\n                                  nCoinDBCache,\n-                                 nCoinCacheUsage,\n-                                 args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n-                                 args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL));\n+                                 nCoinCacheUsage);\n+        auto rv2 = VerifyLoadedChainstate(chainman,\n+                                          fReset,\n+                                          fReindexChainState,\n+                                          chainparams,\n+                                          args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n+                                          args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL));\n+\n         if (rv.has_value()) {\n             switch (rv.value()) {\n             case ChainstateLoadingError::ERROR_LOADING_BLOCK_DB:\n@@ -1442,15 +1447,21 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                 strLoadError = strprintf(_(\"Witness data for blocks after height %d requires validation. Please restart with -reindex.\"),\n                                          chainparams.GetConsensus().SegwitHeight);\n                 break;\n-            case ChainstateLoadingError::ERROR_BLOCK_FROM_FUTURE:\n+            case ChainstateLoadingError::SHUTDOWN_PROBED:\n+                break;\n+            }\n+        } else if (rv2.has_value()) {\n+            switch (rv2.value()) {\n+            case ChainstateLoadVerifyError::ERROR_BLOCK_FROM_FUTURE:\n                 strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n                                  \"This may be due to your computer's date and time being set incorrectly. \"\n                                  \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n                 break;\n-            case ChainstateLoadingError::ERROR_CORRUPTED_BLOCK_DB:\n+            case ChainstateLoadVerifyError::ERROR_CORRUPTED_BLOCK_DB:\n                 strLoadError = _(\"Corrupted block database detected\");\n                 break;\n-            case ChainstateLoadingError::SHUTDOWN_PROBED:\n+            case ChainstateLoadVerifyError::ERROR_GENERIC_FAILURE:\n+                strLoadError = _(\"Error opening block database\");\n                 break;\n             }\n         } else {"
      },
      {
        "sha": "e88dcaeaae191a4647e0b10e1ac03b9116fd64ae",
        "filename": "src/node/chainstate.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 6,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/019da3dc8493054b456222ef23761dd95130b6a7/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/019da3dc8493054b456222ef23761dd95130b6a7/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=019da3dc8493054b456222ef23761dd95130b6a7",
        "patch": "@@ -20,9 +20,7 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                                                      bool fReindexChainState,\n                                                      int64_t nBlockTreeDBCache,\n                                                      int64_t nCoinDBCache,\n-                                                     int64_t nCoinCacheUsage,\n-                                                     unsigned int check_blocks,\n-                                                     unsigned int check_level)\n+                                                     int64_t nCoinCacheUsage)\n {\n     auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n         return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n@@ -131,6 +129,20 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n         }\n     }\n \n+    return std::nullopt;\n+}\n+\n+std::optional<ChainstateLoadVerifyError> VerifyLoadedChainstate(ChainstateManager& chainman,\n+                                                                bool fReset,\n+                                                                bool fReindexChainState,\n+                                                                const CChainParams& chainparams,\n+                                                                unsigned int check_blocks,\n+                                                                unsigned int check_level)\n+{\n+    auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n+        return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n+    };\n+\n     try {\n         LOCK(cs_main);\n \n@@ -145,20 +157,20 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                 const CBlockIndex* tip = chainstate->m_chain.Tip();\n                 RPCNotifyBlockChange(tip);\n                 if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                    return ChainstateLoadingError::ERROR_BLOCK_FROM_FUTURE;\n+                    return ChainstateLoadVerifyError::ERROR_BLOCK_FROM_FUTURE;\n                 }\n \n                 if (!CVerifyDB().VerifyDB(\n                         *chainstate, chainparams, chainstate->CoinsDB(),\n                         check_level,\n                         check_blocks)) {\n-                    return ChainstateLoadingError::ERROR_CORRUPTED_BLOCK_DB;\n+                    return ChainstateLoadVerifyError::ERROR_CORRUPTED_BLOCK_DB;\n                 }\n             }\n         }\n     } catch (const std::exception& e) {\n         LogPrintf(\"%s\\n\", e.what());\n-        return ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED;\n+        return ChainstateLoadVerifyError::ERROR_GENERIC_FAILURE;\n     }\n \n     return std::nullopt;"
      },
      {
        "sha": "c122391a41d03eda8411558def0f640827453a39",
        "filename": "src/node/chainstate.h",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/019da3dc8493054b456222ef23761dd95130b6a7/src/node/chainstate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/019da3dc8493054b456222ef23761dd95130b6a7/src/node/chainstate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.h?ref=019da3dc8493054b456222ef23761dd95130b6a7",
        "patch": "@@ -22,8 +22,6 @@ enum class ChainstateLoadingError {\n     ERROR_LOADCHAINTIP_FAILED,\n     ERROR_GENERIC_BLOCKDB_OPEN_FAILED,\n     ERROR_BLOCKS_WITNESS_INSUFFICIENTLY_VALIDATED,\n-    ERROR_BLOCK_FROM_FUTURE,\n-    ERROR_CORRUPTED_BLOCK_DB,\n     SHUTDOWN_PROBED,\n };\n \n@@ -61,8 +59,19 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                                                      bool fReindexChainState,\n                                                      int64_t nBlockTreeDBCache,\n                                                      int64_t nCoinDBCache,\n-                                                     int64_t nCoinCacheUsage,\n-                                                     unsigned int check_blocks,\n-                                                     unsigned int check_level);\n+                                                     int64_t nCoinCacheUsage);\n+\n+enum class ChainstateLoadVerifyError {\n+    ERROR_BLOCK_FROM_FUTURE,\n+    ERROR_CORRUPTED_BLOCK_DB,\n+    ERROR_GENERIC_FAILURE,\n+};\n+\n+std::optional<ChainstateLoadVerifyError> VerifyLoadedChainstate(ChainstateManager& chainman,\n+                                                                bool fReset,\n+                                                                bool fReindexChainState,\n+                                                                const CChainParams& chainparams,\n+                                                                unsigned int check_blocks,\n+                                                                unsigned int check_level);\n \n #endif // BITCOIN_NODE_CHAINSTATE_H"
      }
    ]
  },
  {
    "sha": "efe9bd287656925a3bda50a809edeabe9824e37a",
    "node_id": "C_kwDOABII59oAKGVmZTliZDI4NzY1NjkyNWEzYmRhNTBhODA5ZWRlYWJlOTgyNGUzN2E",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-08-18T17:39:34Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-29T21:22:33Z"
      },
      "message": "node/chainstate: Decouple from concept of uiInterface\n\n...instead allow the caller to optionally pass in callbacks which are\ntriggered for certain events.",
      "tree": {
        "sha": "fb52c63b72e07c488b47e5b00640dc4312673187",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb52c63b72e07c488b47e5b00640dc4312673187"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efe9bd287656925a3bda50a809edeabe9824e37a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efe9bd287656925a3bda50a809edeabe9824e37a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efe9bd287656925a3bda50a809edeabe9824e37a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efe9bd287656925a3bda50a809edeabe9824e37a/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "019da3dc8493054b456222ef23761dd95130b6a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/019da3dc8493054b456222ef23761dd95130b6a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/019da3dc8493054b456222ef23761dd95130b6a7"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 16,
      "deletions": 10
    },
    "files": [
      {
        "sha": "bd4cdcb399cb33c4c9c19010ce3800990132b172",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efe9bd287656925a3bda50a809edeabe9824e37a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efe9bd287656925a3bda50a809edeabe9824e37a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=efe9bd287656925a3bda50a809edeabe9824e37a",
        "patch": "@@ -1408,7 +1408,14 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                  fReindexChainState,\n                                  nBlockTreeDBCache,\n                                  nCoinDBCache,\n-                                 nCoinCacheUsage);\n+                                 nCoinCacheUsage,\n+                                 []() {\n+                                     uiInterface.ThreadSafeMessageBox(\n+                                         _(\"Error reading from database, shutting down.\"),\n+                                         \"\", CClientUIInterface::MSG_ERROR);\n+                                 });\n+\n+        uiInterface.InitMessage(_(\"Verifying blocks\u2026\").translated);\n         auto rv2 = VerifyLoadedChainstate(chainman,\n                                           fReset,\n                                           fReindexChainState,"
      },
      {
        "sha": "bef77bbcbfbbad175d69939aa0b245198cae68f6",
        "filename": "src/node/chainstate.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efe9bd287656925a3bda50a809edeabe9824e37a/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efe9bd287656925a3bda50a809edeabe9824e37a/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=efe9bd287656925a3bda50a809edeabe9824e37a",
        "patch": "@@ -7,7 +7,6 @@\n #include <chainparams.h> // for CChainParams\n #include <rpc/blockchain.h> // for RPCNotifyBlockChange\n #include <node/blockstorage.h> // for CleanupBlockRevFiles, fHavePruned, fReindex\n-#include <node/ui_interface.h> // for InitError, uiInterface, and CClientUIInterface member access\n #include <shutdown.h> // for ShutdownRequested\n #include <timedata.h> // for GetAdjustedTime\n #include <validation.h> // for a lot of things\n@@ -20,7 +19,8 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                                                      bool fReindexChainState,\n                                                      int64_t nBlockTreeDBCache,\n                                                      int64_t nCoinDBCache,\n-                                                     int64_t nCoinCacheUsage)\n+                                                     int64_t nCoinCacheUsage,\n+                                                     std::optional<std::function<void()>> coins_error_cb)\n {\n     auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n         return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n@@ -86,11 +86,9 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                 /* in_memory */ false,\n                 /* should_wipe */ fReset || fReindexChainState);\n \n-            chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n-                uiInterface.ThreadSafeMessageBox(\n-                    _(\"Error reading from database, shutting down.\"),\n-                    \"\", CClientUIInterface::MSG_ERROR);\n-            });\n+            if (coins_error_cb.has_value()) {\n+                chainstate->CoinsErrorCatcher().AddReadErrCallback(coins_error_cb.value());\n+            }\n \n             // If necessary, upgrade from older database format.\n             // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n@@ -148,7 +146,6 @@ std::optional<ChainstateLoadVerifyError> VerifyLoadedChainstate(ChainstateManage\n \n         for (CChainState* chainstate : chainman.GetAll()) {\n             if (!is_coinsview_empty(chainstate)) {\n-                uiInterface.InitMessage(_(\"Verifying blocks\u2026\").translated);\n                 if (fHavePruned && check_blocks > MIN_BLOCKS_TO_KEEP) {\n                     LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n                         MIN_BLOCKS_TO_KEEP);"
      },
      {
        "sha": "8cc6ec85e25c69671c3fb7a11713c8ec46a2a8b9",
        "filename": "src/node/chainstate.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efe9bd287656925a3bda50a809edeabe9824e37a/src/node/chainstate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efe9bd287656925a3bda50a809edeabe9824e37a/src/node/chainstate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.h?ref=efe9bd287656925a3bda50a809edeabe9824e37a",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_NODE_CHAINSTATE_H\n \n #include <cstdint> // for int64_t\n+#include <functional> // for std::function\n #include <optional> // for std::optional\n \n class CChainParams;\n@@ -59,7 +60,8 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                                                      bool fReindexChainState,\n                                                      int64_t nBlockTreeDBCache,\n                                                      int64_t nCoinDBCache,\n-                                                     int64_t nCoinCacheUsage);\n+                                                     int64_t nCoinCacheUsage,\n+                                                     std::optional<std::function<void()>> coins_error_cb = std::nullopt);\n \n enum class ChainstateLoadVerifyError {\n     ERROR_BLOCK_FROM_FUTURE,"
      }
    ]
  },
  {
    "sha": "71c78844ee2449e2e8086857bbef57d436cd7b24",
    "node_id": "C_kwDOABII59oAKDcxYzc4ODQ0ZWUyNDQ5ZTJlODA4Njg1N2JiZWY1N2Q0MzZjZDdiMjQ",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-08-18T17:54:08Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-29T21:22:33Z"
      },
      "message": "node/chainstate: Reduce coupling of LogPrintf\n\n...by moving the try/catch out of LoadChainstate\n\nI strongly recommend reviewing with the following git-diff flags:\n  --color-moved=dimmed_zebra --color-moved-ws=allow-indentation-change",
      "tree": {
        "sha": "73321e3f472d28251ed4dce3f97f979b47d2fcc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73321e3f472d28251ed4dce3f97f979b47d2fcc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71c78844ee2449e2e8086857bbef57d436cd7b24",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71c78844ee2449e2e8086857bbef57d436cd7b24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71c78844ee2449e2e8086857bbef57d436cd7b24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71c78844ee2449e2e8086857bbef57d436cd7b24/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efe9bd287656925a3bda50a809edeabe9824e37a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efe9bd287656925a3bda50a809edeabe9824e37a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efe9bd287656925a3bda50a809edeabe9824e37a"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 36,
      "deletions": 30
    },
    "files": [
      {
        "sha": "8b57c8d3e173b3d8c5d7061a0776340113484928",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 22,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71c78844ee2449e2e8086857bbef57d436cd7b24/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71c78844ee2449e2e8086857bbef57d436cd7b24/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=71c78844ee2449e2e8086857bbef57d436cd7b24",
        "patch": "@@ -1400,28 +1400,40 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n         uiInterface.InitMessage(_(\"Loading block index\u2026\").translated);\n         const int64_t load_block_index_start_time = GetTimeMillis();\n-        auto rv = LoadChainstate(fReset,\n-                                 chainman,\n-                                 Assert(node.mempool.get()),\n-                                 fPruneMode,\n-                                 chainparams,\n-                                 fReindexChainState,\n-                                 nBlockTreeDBCache,\n-                                 nCoinDBCache,\n-                                 nCoinCacheUsage,\n-                                 []() {\n-                                     uiInterface.ThreadSafeMessageBox(\n-                                         _(\"Error reading from database, shutting down.\"),\n-                                         \"\", CClientUIInterface::MSG_ERROR);\n-                                 });\n-\n-        uiInterface.InitMessage(_(\"Verifying blocks\u2026\").translated);\n-        auto rv2 = VerifyLoadedChainstate(chainman,\n-                                          fReset,\n-                                          fReindexChainState,\n-                                          chainparams,\n-                                          args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n-                                          args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL));\n+        std::optional<ChainstateLoadingError> rv;\n+        try {\n+            rv = LoadChainstate(fReset,\n+                                chainman,\n+                                Assert(node.mempool.get()),\n+                                fPruneMode,\n+                                chainparams,\n+                                fReindexChainState,\n+                                nBlockTreeDBCache,\n+                                nCoinDBCache,\n+                                nCoinCacheUsage,\n+                                []() {\n+                                    uiInterface.ThreadSafeMessageBox(\n+                                        _(\"Error reading from database, shutting down.\"),\n+                                        \"\", CClientUIInterface::MSG_ERROR);\n+                                });\n+        } catch (const std::exception& e) {\n+            LogPrintf(\"%s\\n\", e.what());\n+            rv = ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED;\n+        }\n+\n+        std::optional<ChainstateLoadVerifyError> rv2;\n+        try {\n+            uiInterface.InitMessage(_(\"Verifying blocks\u2026\").translated);\n+            rv2 = VerifyLoadedChainstate(chainman,\n+                                         fReset,\n+                                         fReindexChainState,\n+                                         chainparams,\n+                                         args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n+                                         args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL));\n+        } catch (const std::exception& e) {\n+            LogPrintf(\"%s\\n\", e.what());\n+            rv2 = ChainstateLoadVerifyError::ERROR_GENERIC_FAILURE;\n+        }\n \n         if (rv.has_value()) {\n             switch (rv.value()) {"
      },
      {
        "sha": "893950c379af6b31d5c29339aa27388eaeebd736",
        "filename": "src/node/chainstate.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71c78844ee2449e2e8086857bbef57d436cd7b24/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71c78844ee2449e2e8086857bbef57d436cd7b24/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=71c78844ee2449e2e8086857bbef57d436cd7b24",
        "patch": "@@ -26,7 +26,7 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n         return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n     };\n \n-    try {\n+    {\n         LOCK(cs_main);\n         chainman.InitializeChainstate(mempool);\n         chainman.m_total_coinstip_cache = nCoinCacheUsage;\n@@ -113,9 +113,6 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                 assert(chainstate->m_chain.Tip() != nullptr);\n             }\n         }\n-    } catch (const std::exception& e) {\n-        LogPrintf(\"%s\\n\", e.what());\n-        return ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED;\n     }\n \n     if (!fReset) {\n@@ -141,7 +138,7 @@ std::optional<ChainstateLoadVerifyError> VerifyLoadedChainstate(ChainstateManage\n         return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n     };\n \n-    try {\n+    {\n         LOCK(cs_main);\n \n         for (CChainState* chainstate : chainman.GetAll()) {\n@@ -165,9 +162,6 @@ std::optional<ChainstateLoadVerifyError> VerifyLoadedChainstate(ChainstateManage\n                 }\n             }\n         }\n-    } catch (const std::exception& e) {\n-        LogPrintf(\"%s\\n\", e.what());\n-        return ChainstateLoadVerifyError::ERROR_GENERIC_FAILURE;\n     }\n \n     return std::nullopt;"
      }
    ]
  },
  {
    "sha": "02c5d48532e9eadfd4832585e827aea53af7aaf5",
    "node_id": "C_kwDOABII59oAKDAyYzVkNDg1MzJlOWVhZGZkNDgzMjU4NWU4MjdhZWE1M2FmN2FhZjU",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-12T23:15:47Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-29T21:22:33Z"
      },
      "message": "Move -checkblocks LogPrintf to AppInitMain",
      "tree": {
        "sha": "4920fd5b410ae6084657fa9f8ff615a65d1233e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4920fd5b410ae6084657fa9f8ff615a65d1233e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02c5d48532e9eadfd4832585e827aea53af7aaf5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02c5d48532e9eadfd4832585e827aea53af7aaf5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02c5d48532e9eadfd4832585e827aea53af7aaf5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02c5d48532e9eadfd4832585e827aea53af7aaf5/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71c78844ee2449e2e8086857bbef57d436cd7b24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71c78844ee2449e2e8086857bbef57d436cd7b24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71c78844ee2449e2e8086857bbef57d436cd7b24"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "52ecb243635b9f81d563b6d55eed49b9c974135b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02c5d48532e9eadfd4832585e827aea53af7aaf5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02c5d48532e9eadfd4832585e827aea53af7aaf5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=02c5d48532e9eadfd4832585e827aea53af7aaf5",
        "patch": "@@ -1424,11 +1424,16 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         std::optional<ChainstateLoadVerifyError> rv2;\n         try {\n             uiInterface.InitMessage(_(\"Verifying blocks\u2026\").translated);\n+            auto check_blocks = args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS);\n+            if (fHavePruned && check_blocks > MIN_BLOCKS_TO_KEEP) {\n+                LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n+                          MIN_BLOCKS_TO_KEEP);\n+            }\n             rv2 = VerifyLoadedChainstate(chainman,\n                                          fReset,\n                                          fReindexChainState,\n                                          chainparams,\n-                                         args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n+                                         check_blocks,\n                                          args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL));\n         } catch (const std::exception& e) {\n             LogPrintf(\"%s\\n\", e.what());"
      },
      {
        "sha": "04785ddc1cf0618b748f3f7b62c99e012ef113b6",
        "filename": "src/node/chainstate.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02c5d48532e9eadfd4832585e827aea53af7aaf5/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02c5d48532e9eadfd4832585e827aea53af7aaf5/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=02c5d48532e9eadfd4832585e827aea53af7aaf5",
        "patch": "@@ -143,11 +143,6 @@ std::optional<ChainstateLoadVerifyError> VerifyLoadedChainstate(ChainstateManage\n \n         for (CChainState* chainstate : chainman.GetAll()) {\n             if (!is_coinsview_empty(chainstate)) {\n-                if (fHavePruned && check_blocks > MIN_BLOCKS_TO_KEEP) {\n-                    LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                        MIN_BLOCKS_TO_KEEP);\n-                }\n-\n                 const CBlockIndex* tip = chainstate->m_chain.Tip();\n                 RPCNotifyBlockChange(tip);\n                 if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {"
      }
    ]
  },
  {
    "sha": "ca13555758e6d868d3cfa5b55e679fca74381b03",
    "node_id": "C_kwDOABII59oAKGNhMTM1NTU3NThlNmQ4NjhkM2NmYTViNTVlNjc5ZmNhNzQzODFiMDM",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-08-18T18:36:28Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-29T21:22:33Z"
      },
      "message": "init: Delay RPC block notif until warmup finished",
      "tree": {
        "sha": "deba7bedc9eb25c5ac0fa57a31b2324a614b7263",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/deba7bedc9eb25c5ac0fa57a31b2324a614b7263"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca13555758e6d868d3cfa5b55e679fca74381b03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca13555758e6d868d3cfa5b55e679fca74381b03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca13555758e6d868d3cfa5b55e679fca74381b03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca13555758e6d868d3cfa5b55e679fca74381b03/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02c5d48532e9eadfd4832585e827aea53af7aaf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02c5d48532e9eadfd4832585e827aea53af7aaf5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02c5d48532e9eadfd4832585e827aea53af7aaf5"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2f32e5d563995c2db9249dca43195bf6775475d5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca13555758e6d868d3cfa5b55e679fca74381b03/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca13555758e6d868d3cfa5b55e679fca74381b03/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ca13555758e6d868d3cfa5b55e679fca74381b03",
        "patch": "@@ -1759,6 +1759,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n     // ********************************************************* Step 13: finished\n \n+    RPCNotifyBlockChange(chainman.ActiveTip());\n     SetRPCWarmupFinished();\n     uiInterface.InitMessage(_(\"Done loading\").translated);\n "
      },
      {
        "sha": "448d28240ed103e659ddc8dc8043367a446ead33",
        "filename": "src/node/chainstate.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca13555758e6d868d3cfa5b55e679fca74381b03/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca13555758e6d868d3cfa5b55e679fca74381b03/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=ca13555758e6d868d3cfa5b55e679fca74381b03",
        "patch": "@@ -5,7 +5,6 @@\n #include <node/chainstate.h>\n \n #include <chainparams.h> // for CChainParams\n-#include <rpc/blockchain.h> // for RPCNotifyBlockChange\n #include <node/blockstorage.h> // for CleanupBlockRevFiles, fHavePruned, fReindex\n #include <shutdown.h> // for ShutdownRequested\n #include <timedata.h> // for GetAdjustedTime\n@@ -144,7 +143,6 @@ std::optional<ChainstateLoadVerifyError> VerifyLoadedChainstate(ChainstateManage\n         for (CChainState* chainstate : chainman.GetAll()) {\n             if (!is_coinsview_empty(chainstate)) {\n                 const CBlockIndex* tip = chainstate->m_chain.Tip();\n-                RPCNotifyBlockChange(tip);\n                 if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n                     return ChainstateLoadVerifyError::ERROR_BLOCK_FROM_FUTURE;\n                 }"
      }
    ]
  },
  {
    "sha": "e073634c37f3a1e140920c6e5e3f2c1ae47cd293",
    "node_id": "C_kwDOABII59oAKGUwNzM2MzRjMzdmM2ExZTE0MDkyMGM2ZTVlM2YyYzFhZTQ3Y2QyOTM",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-22T19:36:10Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-29T21:22:33Z"
      },
      "message": "node/chainstate: Decouple from GetAdjustedTime\n\n...instead pass in a std::function<int64_t()>\n\nIn all existing callsites of LoadChainstate, GetTimeOffset has had no\ntime to accumulate yet and always returns 0. Therefore it's perfectly\nfine (will preserve behaviour) for callers of LoadChainstate to pass in\nany function that returns a valid epoch time in seconds.",
      "tree": {
        "sha": "603396348c62656baa8021f219f0c4b0d6a4a05a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/603396348c62656baa8021f219f0c4b0d6a4a05a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e073634c37f3a1e140920c6e5e3f2c1ae47cd293",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e073634c37f3a1e140920c6e5e3f2c1ae47cd293",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e073634c37f3a1e140920c6e5e3f2c1ae47cd293",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e073634c37f3a1e140920c6e5e3f2c1ae47cd293/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca13555758e6d868d3cfa5b55e679fca74381b03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca13555758e6d868d3cfa5b55e679fca74381b03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca13555758e6d868d3cfa5b55e679fca74381b03"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "cb39c678ad8d5beaa929293e56d539d58860705d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e073634c37f3a1e140920c6e5e3f2c1ae47cd293/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e073634c37f3a1e140920c6e5e3f2c1ae47cd293/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e073634c37f3a1e140920c6e5e3f2c1ae47cd293",
        "patch": "@@ -1434,7 +1434,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                          fReindexChainState,\n                                          chainparams,\n                                          check_blocks,\n-                                         args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL));\n+                                         args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                         GetAdjustedTime);\n         } catch (const std::exception& e) {\n             LogPrintf(\"%s\\n\", e.what());\n             rv2 = ChainstateLoadVerifyError::ERROR_GENERIC_FAILURE;"
      },
      {
        "sha": "bbbe57d3bf69ff335dc66fadcbbeea08e4049506",
        "filename": "src/node/chainstate.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e073634c37f3a1e140920c6e5e3f2c1ae47cd293/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e073634c37f3a1e140920c6e5e3f2c1ae47cd293/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=e073634c37f3a1e140920c6e5e3f2c1ae47cd293",
        "patch": "@@ -7,7 +7,6 @@\n #include <chainparams.h> // for CChainParams\n #include <node/blockstorage.h> // for CleanupBlockRevFiles, fHavePruned, fReindex\n #include <shutdown.h> // for ShutdownRequested\n-#include <timedata.h> // for GetAdjustedTime\n #include <validation.h> // for a lot of things\n \n std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n@@ -131,7 +130,8 @@ std::optional<ChainstateLoadVerifyError> VerifyLoadedChainstate(ChainstateManage\n                                                                 bool fReindexChainState,\n                                                                 const CChainParams& chainparams,\n                                                                 unsigned int check_blocks,\n-                                                                unsigned int check_level)\n+                                                                unsigned int check_level,\n+                                                                std::function<int64_t()> get_unix_time_seconds)\n {\n     auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n         return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n@@ -143,7 +143,7 @@ std::optional<ChainstateLoadVerifyError> VerifyLoadedChainstate(ChainstateManage\n         for (CChainState* chainstate : chainman.GetAll()) {\n             if (!is_coinsview_empty(chainstate)) {\n                 const CBlockIndex* tip = chainstate->m_chain.Tip();\n-                if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n+                if (tip && tip->nTime > get_unix_time_seconds() + 2 * 60 * 60) {\n                     return ChainstateLoadVerifyError::ERROR_BLOCK_FROM_FUTURE;\n                 }\n "
      },
      {
        "sha": "77df3e53c5a65e0d5dcaa661c9ff150c845950a1",
        "filename": "src/node/chainstate.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e073634c37f3a1e140920c6e5e3f2c1ae47cd293/src/node/chainstate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e073634c37f3a1e140920c6e5e3f2c1ae47cd293/src/node/chainstate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.h?ref=e073634c37f3a1e140920c6e5e3f2c1ae47cd293",
        "patch": "@@ -74,6 +74,7 @@ std::optional<ChainstateLoadVerifyError> VerifyLoadedChainstate(ChainstateManage\n                                                                 bool fReindexChainState,\n                                                                 const CChainParams& chainparams,\n                                                                 unsigned int check_blocks,\n-                                                                unsigned int check_level);\n+                                                                unsigned int check_level,\n+                                                                std::function<int64_t()> get_unix_time_seconds);\n \n #endif // BITCOIN_NODE_CHAINSTATE_H"
      }
    ]
  },
  {
    "sha": "2a2a496fe898404876f4ed12cd61aae8600f3e47",
    "node_id": "C_kwDOABII59oAKDJhMmE0OTZmZTg5ODQwNDg3NmY0ZWQxMmNkNjFhYWU4NjAwZjNlNDc",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-22T19:36:24Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-29T21:24:45Z"
      },
      "message": "node/chainstate: Decouple from ShutdownRequested\n\n...instead allow optionally passing in a std::function<bool()>",
      "tree": {
        "sha": "c725af596b78ba3f8dd740719b2ee8f3aad4f8e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c725af596b78ba3f8dd740719b2ee8f3aad4f8e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a2a496fe898404876f4ed12cd61aae8600f3e47",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a2a496fe898404876f4ed12cd61aae8600f3e47",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a2a496fe898404876f4ed12cd61aae8600f3e47",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a2a496fe898404876f4ed12cd61aae8600f3e47/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e073634c37f3a1e140920c6e5e3f2c1ae47cd293",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e073634c37f3a1e140920c6e5e3f2c1ae47cd293",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e073634c37f3a1e140920c6e5e3f2c1ae47cd293"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "bc8346d99403cd660b8cfe8e27f250b99821ec50",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a2a496fe898404876f4ed12cd61aae8600f3e47/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a2a496fe898404876f4ed12cd61aae8600f3e47/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2a2a496fe898404876f4ed12cd61aae8600f3e47",
        "patch": "@@ -1411,6 +1411,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                 nBlockTreeDBCache,\n                                 nCoinDBCache,\n                                 nCoinCacheUsage,\n+                                ShutdownRequested,\n                                 []() {\n                                     uiInterface.ThreadSafeMessageBox(\n                                         _(\"Error reading from database, shutting down.\"),"
      },
      {
        "sha": "6d78df284e60eed54a954015bfd8ec8f7c059482",
        "filename": "src/node/chainstate.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a2a496fe898404876f4ed12cd61aae8600f3e47/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a2a496fe898404876f4ed12cd61aae8600f3e47/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=2a2a496fe898404876f4ed12cd61aae8600f3e47",
        "patch": "@@ -6,7 +6,6 @@\n \n #include <chainparams.h> // for CChainParams\n #include <node/blockstorage.h> // for CleanupBlockRevFiles, fHavePruned, fReindex\n-#include <shutdown.h> // for ShutdownRequested\n #include <validation.h> // for a lot of things\n \n std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n@@ -18,6 +17,7 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                                                      int64_t nBlockTreeDBCache,\n                                                      int64_t nCoinDBCache,\n                                                      int64_t nCoinCacheUsage,\n+                                                     std::optional<std::function<bool()>> shutdown_requested,\n                                                      std::optional<std::function<void()>> coins_error_cb)\n {\n     auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n@@ -45,14 +45,14 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                 CleanupBlockRevFiles();\n         }\n \n-        if (ShutdownRequested()) return ChainstateLoadingError::SHUTDOWN_PROBED;\n+        if (shutdown_requested && (*shutdown_requested)()) return ChainstateLoadingError::SHUTDOWN_PROBED;\n \n         // LoadBlockIndex will load fHavePruned if we've ever removed a\n         // block file from disk.\n         // Note that it also sets fReindex based on the disk flag!\n         // From here on out fReindex and fReset mean something different!\n         if (!chainman.LoadBlockIndex()) {\n-            if (ShutdownRequested()) return ChainstateLoadingError::SHUTDOWN_PROBED;\n+            if (shutdown_requested && (*shutdown_requested)()) return ChainstateLoadingError::SHUTDOWN_PROBED;\n             return ChainstateLoadingError::ERROR_LOADING_BLOCK_DB;\n         }\n "
      },
      {
        "sha": "f167b7f6824d9dd72861b29998f81eb17490bea8",
        "filename": "src/node/chainstate.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a2a496fe898404876f4ed12cd61aae8600f3e47/src/node/chainstate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a2a496fe898404876f4ed12cd61aae8600f3e47/src/node/chainstate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.h?ref=2a2a496fe898404876f4ed12cd61aae8600f3e47",
        "patch": "@@ -45,10 +45,10 @@ enum class ChainstateLoadingError {\n  *        differentiable by the specific enumerator.\n  *\n  *        Note that a return value of SHUTDOWN_PROBED means ONLY that \"during\n- *        this sequence, when we explicitly checked ShutdownRequested() at\n+ *        this sequence, when we explicitly checked shutdown_requested() at\n  *        arbitrary points, one of those calls returned true\". Therefore, a\n  *        return value other than SHUTDOWN_PROBED does not guarantee that\n- *        ShutdownRequested() hasn't been called indirectly.\n+ *        shutdown_requested() hasn't been called indirectly.\n  *  - else\n  *      - Success!\n  */\n@@ -61,6 +61,7 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                                                      int64_t nBlockTreeDBCache,\n                                                      int64_t nCoinDBCache,\n                                                      int64_t nCoinCacheUsage,\n+                                                     std::optional<std::function<bool()>> shutdown_requested = std::nullopt,\n                                                      std::optional<std::function<void()>> coins_error_cb = std::nullopt);\n \n enum class ChainstateLoadVerifyError {"
      }
    ]
  },
  {
    "sha": "7d0cf02654214e816734dffe30a466d4d12147f1",
    "node_id": "C_kwDOABII59oAKDdkMGNmMDI2NTQyMTRlODE2NzM0ZGZmZTMwYTQ2NmQ0ZDEyMTQ3ZjE",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-20T18:02:07Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-29T21:24:47Z"
      },
      "message": "validation: VerifyDB only needs Consensus::Params\n\nPreviously we were passing in CChainParams, when VerifyDB only needed\nthe Consensus::Params subset.",
      "tree": {
        "sha": "8f469e74b9acefe5bcd637f3a144ba18105a5c5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f469e74b9acefe5bcd637f3a144ba18105a5c5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d0cf02654214e816734dffe30a466d4d12147f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d0cf02654214e816734dffe30a466d4d12147f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d0cf02654214e816734dffe30a466d4d12147f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d0cf02654214e816734dffe30a466d4d12147f1/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a2a496fe898404876f4ed12cd61aae8600f3e47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a2a496fe898404876f4ed12cd61aae8600f3e47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a2a496fe898404876f4ed12cd61aae8600f3e47"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 18,
      "deletions": 16
    },
    "files": [
      {
        "sha": "764c1b5f0cf018977ea888f1c3142ae26d6e5abf",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d0cf02654214e816734dffe30a466d4d12147f1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d0cf02654214e816734dffe30a466d4d12147f1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7d0cf02654214e816734dffe30a466d4d12147f1",
        "patch": "@@ -1406,7 +1406,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                 chainman,\n                                 Assert(node.mempool.get()),\n                                 fPruneMode,\n-                                chainparams,\n+                                chainparams.GetConsensus(),\n                                 fReindexChainState,\n                                 nBlockTreeDBCache,\n                                 nCoinDBCache,\n@@ -1433,7 +1433,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n             rv2 = VerifyLoadedChainstate(chainman,\n                                          fReset,\n                                          fReindexChainState,\n-                                         chainparams,\n+                                         chainparams.GetConsensus(),\n                                          check_blocks,\n                                          args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n                                          GetAdjustedTime);"
      },
      {
        "sha": "87fd8d2bbaec60c92931d6db7d780d45649de220",
        "filename": "src/node/chainstate.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d0cf02654214e816734dffe30a466d4d12147f1/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d0cf02654214e816734dffe30a466d4d12147f1/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=7d0cf02654214e816734dffe30a466d4d12147f1",
        "patch": "@@ -4,15 +4,15 @@\n \n #include <node/chainstate.h>\n \n-#include <chainparams.h> // for CChainParams\n+#include <consensus/params.h> // for Consensus::Params\n #include <node/blockstorage.h> // for CleanupBlockRevFiles, fHavePruned, fReindex\n #include <validation.h> // for a lot of things\n \n std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                                                      ChainstateManager& chainman,\n                                                      CTxMemPool* mempool,\n                                                      bool fPruneMode,\n-                                                     const CChainParams& chainparams,\n+                                                     const Consensus::Params& consensus_params,\n                                                      bool fReindexChainState,\n                                                      int64_t nBlockTreeDBCache,\n                                                      int64_t nCoinDBCache,\n@@ -57,7 +57,7 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n         }\n \n         if (!chainman.BlockIndex().empty() &&\n-                !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n+                !chainman.m_blockman.LookupBlockIndex(consensus_params.hashGenesisBlock)) {\n             return ChainstateLoadingError::ERROR_BAD_GENESIS_BLOCK;\n         }\n \n@@ -128,7 +128,7 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n std::optional<ChainstateLoadVerifyError> VerifyLoadedChainstate(ChainstateManager& chainman,\n                                                                 bool fReset,\n                                                                 bool fReindexChainState,\n-                                                                const CChainParams& chainparams,\n+                                                                const Consensus::Params& consensus_params,\n                                                                 unsigned int check_blocks,\n                                                                 unsigned int check_level,\n                                                                 std::function<int64_t()> get_unix_time_seconds)\n@@ -148,7 +148,7 @@ std::optional<ChainstateLoadVerifyError> VerifyLoadedChainstate(ChainstateManage\n                 }\n \n                 if (!CVerifyDB().VerifyDB(\n-                        *chainstate, chainparams, chainstate->CoinsDB(),\n+                        *chainstate, consensus_params, chainstate->CoinsDB(),\n                         check_level,\n                         check_blocks)) {\n                     return ChainstateLoadVerifyError::ERROR_CORRUPTED_BLOCK_DB;"
      },
      {
        "sha": "613240d31c717beae452aeb020c8a9399bcc0288",
        "filename": "src/node/chainstate.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d0cf02654214e816734dffe30a466d4d12147f1/src/node/chainstate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d0cf02654214e816734dffe30a466d4d12147f1/src/node/chainstate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.h?ref=7d0cf02654214e816734dffe30a466d4d12147f1",
        "patch": "@@ -9,8 +9,10 @@\n #include <functional> // for std::function\n #include <optional> // for std::optional\n \n-class CChainParams;\n class ChainstateManager;\n+namespace Consensus {\n+    struct Params;\n+}\n class CTxMemPool;\n \n enum class ChainstateLoadingError {\n@@ -56,7 +58,7 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                                                      ChainstateManager& chainman,\n                                                      CTxMemPool* mempool,\n                                                      bool fPruneMode,\n-                                                     const CChainParams& chainparams,\n+                                                     const Consensus::Params& consensus_params,\n                                                      bool fReindexChainState,\n                                                      int64_t nBlockTreeDBCache,\n                                                      int64_t nCoinDBCache,\n@@ -73,7 +75,7 @@ enum class ChainstateLoadVerifyError {\n std::optional<ChainstateLoadVerifyError> VerifyLoadedChainstate(ChainstateManager& chainman,\n                                                                 bool fReset,\n                                                                 bool fReindexChainState,\n-                                                                const CChainParams& chainparams,\n+                                                                const Consensus::Params& consensus_params,\n                                                                 unsigned int check_blocks,\n                                                                 unsigned int check_level,\n                                                                 std::function<int64_t()> get_unix_time_seconds);"
      },
      {
        "sha": "64bcb9087d89469939e1e6deedc855cba315d3b0",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d0cf02654214e816734dffe30a466d4d12147f1/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d0cf02654214e816734dffe30a466d4d12147f1/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=7d0cf02654214e816734dffe30a466d4d12147f1",
        "patch": "@@ -1345,7 +1345,7 @@ static RPCHelpMan verifychain()\n \n     CChainState& active_chainstate = chainman.ActiveChainstate();\n     return CVerifyDB().VerifyDB(\n-        active_chainstate, Params(), active_chainstate.CoinsTip(), check_level, check_depth);\n+        active_chainstate, Params().GetConsensus(), active_chainstate.CoinsTip(), check_level, check_depth);\n },\n     };\n }"
      },
      {
        "sha": "8a500aed10f4713427b9c67b07f3044fcc68b14b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d0cf02654214e816734dffe30a466d4d12147f1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d0cf02654214e816734dffe30a466d4d12147f1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7d0cf02654214e816734dffe30a466d4d12147f1",
        "patch": "@@ -3784,7 +3784,7 @@ CVerifyDB::~CVerifyDB()\n \n bool CVerifyDB::VerifyDB(\n     CChainState& chainstate,\n-    const CChainParams& chainparams,\n+    const Consensus::Params& consensus_params,\n     CCoinsView& coinsview,\n     int nCheckLevel, int nCheckDepth)\n {\n@@ -3826,10 +3826,10 @@ bool CVerifyDB::VerifyDB(\n         }\n         CBlock block;\n         // check level 0: read from disk\n-        if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n+        if (!ReadBlockFromDisk(block, pindex, consensus_params))\n             return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n-        if (nCheckLevel >= 1 && !CheckBlock(block, state, chainparams.GetConsensus()))\n+        if (nCheckLevel >= 1 && !CheckBlock(block, state, consensus_params))\n             return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__,\n                          pindex->nHeight, pindex->GetBlockHash().ToString(), state.ToString());\n         // check level 2: verify undo validity\n@@ -3877,7 +3877,7 @@ bool CVerifyDB::VerifyDB(\n             uiInterface.ShowProgress(_(\"Verifying blocks\u2026\").translated, percentageDone, false);\n             pindex = chainstate.m_chain.Next(pindex);\n             CBlock block;\n-            if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params))\n                 return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             if (!chainstate.ConnectBlock(block, state, pindex, coins)) {\n                 return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s (%s)\", pindex->nHeight, pindex->GetBlockHash().ToString(), state.ToString());"
      },
      {
        "sha": "7a665b062575a4c05972437981f28d2e36d624f4",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d0cf02654214e816734dffe30a466d4d12147f1/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d0cf02654214e816734dffe30a466d4d12147f1/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=7d0cf02654214e816734dffe30a466d4d12147f1",
        "patch": "@@ -339,7 +339,7 @@ class CVerifyDB {\n     ~CVerifyDB();\n     bool VerifyDB(\n         CChainState& chainstate,\n-        const CChainParams& chainparams,\n+        const Consensus::Params& consensus_params,\n         CCoinsView& coinsview,\n         int nCheckLevel,\n         int nCheckDepth) EXCLUSIVE_LOCKS_REQUIRED(cs_main);"
      }
    ]
  },
  {
    "sha": "60a2f5e50c986330d5f00fa0b5543ca99648be06",
    "node_id": "C_kwDOABII59oAKDYwYTJmNWU1MGM5ODYzMzBkNWYwMGZhMGI1NTQzY2E5OTY0OGJlMDY",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-21T15:37:03Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-30T21:49:24Z"
      },
      "message": "node/caches: Extract cache calculation logic\n\nI strongly recommend reviewing with the following git-diff flags:\n  --color-moved=dimmed_zebra --color-moved-ws=allow-indentation-change\n\n[META] In a future commit, this function will be re-used in TestingSetup\n       so that the behaviour matches across test and non-test init\n       codepaths.",
      "tree": {
        "sha": "d8bcda565613b58ac8834078702efb93551f395e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8bcda565613b58ac8834078702efb93551f395e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60a2f5e50c986330d5f00fa0b5543ca99648be06",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60a2f5e50c986330d5f00fa0b5543ca99648be06",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60a2f5e50c986330d5f00fa0b5543ca99648be06",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60a2f5e50c986330d5f00fa0b5543ca99648be06/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d0cf02654214e816734dffe30a466d4d12147f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d0cf02654214e816734dffe30a466d4d12147f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d0cf02654214e816734dffe30a466d4d12147f1"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 75,
      "deletions": 28
    },
    "files": [
      {
        "sha": "0b480b0d9e2555dd99272d13b35457762ed694dd",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60a2f5e50c986330d5f00fa0b5543ca99648be06/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60a2f5e50c986330d5f00fa0b5543ca99648be06/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=60a2f5e50c986330d5f00fa0b5543ca99648be06",
        "patch": "@@ -185,6 +185,7 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   netmessagemaker.h \\\n   node/blockstorage.h \\\n+  node/caches.h \\\n   node/chainstate.h \\\n   node/coin.h \\\n   node/coinstats.h \\\n@@ -348,6 +349,7 @@ libbitcoin_server_a_SOURCES = \\\n   net.cpp \\\n   net_processing.cpp \\\n   node/blockstorage.cpp \\\n+  node/caches.cpp \\\n   node/chainstate.cpp \\\n   node/coin.cpp \\\n   node/coinstats.cpp \\"
      },
      {
        "sha": "aeb1bdf0dd4dec2d155691739adea9cd64a06741",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 28,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60a2f5e50c986330d5f00fa0b5543ca99648be06/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60a2f5e50c986330d5f00fa0b5543ca99648be06/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=60a2f5e50c986330d5f00fa0b5543ca99648be06",
        "patch": "@@ -35,6 +35,7 @@\n #include <net_processing.h>\n #include <netbase.h>\n #include <node/blockstorage.h>\n+#include <node/caches.h> // for CalculateCacheSizes\n #include <node/chainstate.h> // for LoadChainstate\n #include <node/context.h>\n #include <node/ui_interface.h>\n@@ -1362,36 +1363,20 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n-    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n-    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n-    nTotalCache -= nBlockTreeDBCache;\n-    int64_t nTxIndexCache = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n-    nTotalCache -= nTxIndexCache;\n-    int64_t filter_index_cache = 0;\n-    if (!g_enabled_filter_types.empty()) {\n-        size_t n_indexes = g_enabled_filter_types.size();\n-        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n-        filter_index_cache = max_cache / n_indexes;\n-        nTotalCache -= filter_index_cache * n_indexes;\n-    }\n-    int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n-    nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n-    nTotalCache -= nCoinDBCache;\n-    int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+    CacheSizes cache_sizes = CalculateCacheSizes(args, g_enabled_filter_types.size());\n+\n     int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n-    LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for block index database\\n\", cache_sizes.block_tree_db * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n+        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", cache_sizes.tx_index * (1.0 / 1024 / 1024));\n     }\n     for (BlockFilterType filter_type : g_enabled_filter_types) {\n         LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",\n-                  filter_index_cache * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n+                  cache_sizes.filter_index * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n     }\n-    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n-    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", cache_sizes.coins_db * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", cache_sizes.coins * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n     while (!fLoaded && !ShutdownRequested()) {\n@@ -1408,9 +1393,9 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                 fPruneMode,\n                                 chainparams.GetConsensus(),\n                                 fReindexChainState,\n-                                nBlockTreeDBCache,\n-                                nCoinDBCache,\n-                                nCoinCacheUsage,\n+                                cache_sizes.block_tree_db,\n+                                cache_sizes.coins_db,\n+                                cache_sizes.coins,\n                                 ShutdownRequested,\n                                 []() {\n                                     uiInterface.ThreadSafeMessageBox(\n@@ -1529,14 +1514,14 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n             return InitError(*error);\n         }\n \n-        g_txindex = std::make_unique<TxIndex>(nTxIndexCache, false, fReindex);\n+        g_txindex = std::make_unique<TxIndex>(cache_sizes.tx_index, false, fReindex);\n         if (!g_txindex->Start(chainman.ActiveChainstate())) {\n             return false;\n         }\n     }\n \n     for (const auto& filter_type : g_enabled_filter_types) {\n-        InitBlockFilterIndex(filter_type, filter_index_cache, false, fReindex);\n+        InitBlockFilterIndex(filter_type, cache_sizes.filter_index, false, fReindex);\n         if (!GetBlockFilterIndex(filter_type)->Start(chainman.ActiveChainstate())) {\n             return false;\n         }"
      },
      {
        "sha": "be09c7e055fdc39d3cb491e659d44e63fd837c63",
        "filename": "src/node/caches.cpp",
        "status": "added",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60a2f5e50c986330d5f00fa0b5543ca99648be06/src/node/caches.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60a2f5e50c986330d5f00fa0b5543ca99648be06/src/node/caches.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/caches.cpp?ref=60a2f5e50c986330d5f00fa0b5543ca99648be06",
        "patch": "@@ -0,0 +1,38 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/caches.h>\n+\n+#include <txdb.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+CacheSizes CalculateCacheSizes(const ArgsManager& args, size_t n_indexes)\n+{\n+    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n+    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n+    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n+    int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n+    nTotalCache -= nBlockTreeDBCache;\n+    int64_t nTxIndexCache = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n+    nTotalCache -= nTxIndexCache;\n+    int64_t filter_index_cache = 0;\n+    if (n_indexes > 0) {\n+        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n+        filter_index_cache = max_cache / n_indexes;\n+        nTotalCache -= filter_index_cache * n_indexes;\n+    }\n+    int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n+    nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n+    nTotalCache -= nCoinDBCache;\n+    int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+\n+    return {\n+        nBlockTreeDBCache,\n+        nCoinDBCache,\n+        nCoinCacheUsage,\n+        nTxIndexCache,\n+        filter_index_cache,\n+    };\n+}"
      },
      {
        "sha": "437e7d10e579d28d40eb4768c74181dbb21baa89",
        "filename": "src/node/caches.h",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60a2f5e50c986330d5f00fa0b5543ca99648be06/src/node/caches.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60a2f5e50c986330d5f00fa0b5543ca99648be06/src/node/caches.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/caches.h?ref=60a2f5e50c986330d5f00fa0b5543ca99648be06",
        "patch": "@@ -0,0 +1,22 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_CACHES_H\n+#define BITCOIN_NODE_CACHES_H\n+\n+#include <cstddef> // for size_t\n+#include <cstdint> // for int64_t\n+\n+class ArgsManager;\n+\n+struct CacheSizes {\n+    int64_t block_tree_db;\n+    int64_t coins_db;\n+    int64_t coins;\n+    int64_t tx_index;\n+    int64_t filter_index;\n+};\n+CacheSizes CalculateCacheSizes(const ArgsManager& args, size_t n_indexes = 0);\n+\n+#endif // BITCOIN_NODE_CACHES_H"
      }
    ]
  },
  {
    "sha": "b5e60856201c94496a856fe967a5ac01732ac466",
    "node_id": "C_kwDOABII59oAKGI1ZTYwODU2MjAxYzk0NDk2YTg1NmZlOTY3YTVhYzAxNzMyYWM0NjY",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-21T16:10:51Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-30T21:49:24Z"
      },
      "message": "node/chainstate: Add options for in-memory DBs\n\n[META] In a future commit, these options will be used in TestingSetup to\n       ensure that the DBs are in-memory.",
      "tree": {
        "sha": "707e8d8cb46f647be7f128d9f7fff040bc4f1124",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/707e8d8cb46f647be7f128d9f7fff040bc4f1124"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5e60856201c94496a856fe967a5ac01732ac466",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5e60856201c94496a856fe967a5ac01732ac466",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5e60856201c94496a856fe967a5ac01732ac466",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5e60856201c94496a856fe967a5ac01732ac466/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "60a2f5e50c986330d5f00fa0b5543ca99648be06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60a2f5e50c986330d5f00fa0b5543ca99648be06",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60a2f5e50c986330d5f00fa0b5543ca99648be06"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2b84bea1cc93e3520ba884416e5be7a8c0b694be",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5e60856201c94496a856fe967a5ac01732ac466/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5e60856201c94496a856fe967a5ac01732ac466/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b5e60856201c94496a856fe967a5ac01732ac466",
        "patch": "@@ -1396,6 +1396,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                 cache_sizes.block_tree_db,\n                                 cache_sizes.coins_db,\n                                 cache_sizes.coins,\n+                                false,\n+                                false,\n                                 ShutdownRequested,\n                                 []() {\n                                     uiInterface.ThreadSafeMessageBox("
      },
      {
        "sha": "6719127da437b7d0a0b3526f65368f62fae1f088",
        "filename": "src/node/chainstate.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5e60856201c94496a856fe967a5ac01732ac466/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5e60856201c94496a856fe967a5ac01732ac466/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=b5e60856201c94496a856fe967a5ac01732ac466",
        "patch": "@@ -17,6 +17,8 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                                                      int64_t nBlockTreeDBCache,\n                                                      int64_t nCoinDBCache,\n                                                      int64_t nCoinCacheUsage,\n+                                                     bool block_tree_db_in_memory,\n+                                                     bool coins_db_in_memory,\n                                                      std::optional<std::function<bool()>> shutdown_requested,\n                                                      std::optional<std::function<void()>> coins_error_cb)\n {\n@@ -36,7 +38,7 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n         // new CBlockTreeDB tries to delete the existing file, which\n         // fails if it's still open from the previous loop. Close it first:\n         pblocktree.reset();\n-        pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n+        pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, block_tree_db_in_memory, fReset));\n \n         if (fReset) {\n             pblocktree->WriteReindexing(true);\n@@ -81,7 +83,7 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n         for (CChainState* chainstate : chainman.GetAll()) {\n             chainstate->InitCoinsDB(\n                 /* cache_size_bytes */ nCoinDBCache,\n-                /* in_memory */ false,\n+                /* in_memory */ coins_db_in_memory,\n                 /* should_wipe */ fReset || fReindexChainState);\n \n             if (coins_error_cb.has_value()) {"
      },
      {
        "sha": "24cb9706bf1910756ef4306e8243286b971db283",
        "filename": "src/node/chainstate.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5e60856201c94496a856fe967a5ac01732ac466/src/node/chainstate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5e60856201c94496a856fe967a5ac01732ac466/src/node/chainstate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.h?ref=b5e60856201c94496a856fe967a5ac01732ac466",
        "patch": "@@ -63,6 +63,8 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                                                      int64_t nBlockTreeDBCache,\n                                                      int64_t nCoinDBCache,\n                                                      int64_t nCoinCacheUsage,\n+                                                     bool block_tree_db_in_memory,\n+                                                     bool coins_db_in_memory,\n                                                      std::optional<std::function<bool()>> shutdown_requested = std::nullopt,\n                                                      std::optional<std::function<void()>> coins_error_cb = std::nullopt);\n "
      }
    ]
  },
  {
    "sha": "0e3e4b956eee001b39ec25cb2a7e619306fce9e0",
    "node_id": "C_kwDOABII59oAKDBlM2U0Yjk1NmVlZTAwMWIzOWVjMjVjYjJhN2U2MTkzMDZmY2U5ZTA",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-21T18:09:23Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-30T21:49:24Z"
      },
      "message": "test/setup: Use LoadChainstate\n\nThis commit coalesces the chainstate loading sequence between our unit\ntest and non-unit test init codepaths.",
      "tree": {
        "sha": "b2f524f4d30782bd922fbdcd3032ebe785b72e4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2f524f4d30782bd922fbdcd3032ebe785b72e4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e3e4b956eee001b39ec25cb2a7e619306fce9e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e3e4b956eee001b39ec25cb2a7e619306fce9e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e3e4b956eee001b39ec25cb2a7e619306fce9e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e3e4b956eee001b39ec25cb2a7e619306fce9e0/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5e60856201c94496a856fe967a5ac01732ac466",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5e60856201c94496a856fe967a5ac01732ac466",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5e60856201c94496a856fe967a5ac01732ac466"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 20,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e0a23b05069f000e22f547d8065e644201d226a4",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 10,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e3e4b956eee001b39ec25cb2a7e619306fce9e0/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e3e4b956eee001b39ec25cb2a7e619306fce9e0/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=0e3e4b956eee001b39ec25cb2a7e619306fce9e0",
        "patch": "@@ -17,13 +17,16 @@\n #include <net.h>\n #include <net_processing.h>\n #include <noui.h>\n+#include <node/blockstorage.h> // for fReindex, fPruneMode\n+#include <node/chainstate.h> // for LoadChainstate\n #include <policy/fees.h>\n #include <pow.h>\n #include <rpc/blockchain.h>\n #include <rpc/register.h>\n #include <rpc/server.h>\n #include <scheduler.h>\n #include <script/sigcache.h>\n+#include <shutdown.h> // for ShutdownRequested\n #include <streams.h>\n #include <txdb.h>\n #include <util/strencodings.h>\n@@ -143,8 +146,10 @@ ChainTestingSetup::ChainTestingSetup(const std::string& chainName, const std::ve\n     m_node.fee_estimator = std::make_unique<CBlockPolicyEstimator>();\n     m_node.mempool = std::make_unique<CTxMemPool>(m_node.fee_estimator.get(), 1);\n \n+    m_cache_sizes = CalculateCacheSizes(m_args);\n+\n     m_node.chainman = std::make_unique<ChainstateManager>();\n-    m_node.chainman->m_blockman.m_block_tree_db = std::make_unique<CBlockTreeDB>(1 << 20, true);\n+    m_node.chainman->m_blockman.m_block_tree_db = std::make_unique<CBlockTreeDB>(m_cache_sizes.block_tree_db, true);\n \n     // Start script-checking threads. Set g_parallel_script_checks to true so they are used.\n     constexpr int script_check_threads = 2;\n@@ -177,15 +182,18 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     // instead of unit tests, but for now we need these here.\n     RegisterAllCoreRPCCommands(tableRPC);\n \n-    m_node.chainman->InitializeChainstate(m_node.mempool.get());\n-    m_node.chainman->ActiveChainstate().InitCoinsDB(\n-        /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n-    assert(!m_node.chainman->ActiveChainstate().CanFlushToDisk());\n-    m_node.chainman->ActiveChainstate().InitCoinsCache(1 << 23);\n-    assert(m_node.chainman->ActiveChainstate().CanFlushToDisk());\n-    if (!m_node.chainman->ActiveChainstate().LoadGenesisBlock()) {\n-        throw std::runtime_error(\"LoadGenesisBlock failed.\");\n-    }\n+    auto rv = LoadChainstate(fReindex.load(),\n+                             *Assert(m_node.chainman.get()),\n+                             Assert(m_node.mempool.get()),\n+                             fPruneMode,\n+                             chainparams.GetConsensus(),\n+                             m_args.GetBoolArg(\"-reindex-chainstate\", false),\n+                             m_cache_sizes.block_tree_db,\n+                             m_cache_sizes.coins_db,\n+                             m_cache_sizes.coins,\n+                             true,\n+                             true);\n+    assert(!rv.has_value());\n \n     BlockValidationState state;\n     if (!m_node.chainman->ActiveChainstate().ActivateBestChain(state)) {"
      },
      {
        "sha": "419799e5501e262de0a5b61e88080a008e8c7b5a",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e3e4b956eee001b39ec25cb2a7e619306fce9e0/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e3e4b956eee001b39ec25cb2a7e619306fce9e0/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=0e3e4b956eee001b39ec25cb2a7e619306fce9e0",
        "patch": "@@ -9,6 +9,7 @@\n #include <fs.h>\n #include <key.h>\n #include <util/system.h>\n+#include <node/caches.h>\n #include <node/context.h>\n #include <pubkey.h>\n #include <random.h>\n@@ -89,6 +90,7 @@ struct BasicTestingSetup {\n  * initialization behaviour.\n  */\n struct ChainTestingSetup : public BasicTestingSetup {\n+    CacheSizes m_cache_sizes{};\n \n     explicit ChainTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {});\n     ~ChainTestingSetup();"
      }
    ]
  },
  {
    "sha": "b09ae71888fa1113847cc635cdce4b3b7c8c2819",
    "node_id": "C_kwDOABII59oAKGIwOWFlNzE4ODhmYTExMTM4NDdjYzYzNWNkY2U0YjNiN2M4YzI4MTk",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-10-12T19:47:24Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-30T21:49:24Z"
      },
      "message": "test/setup: Unify m_args and gArgs\n\nPreviously, for a *TestingSetup:\n\n- m_node.args pointed to gArgs\n- m_args was completely separate and only had -datadir set\n\nBy changing m_args to a ArgsManager&, we unify the two parallel\nArgsManagers and avoid inconsistencies.",
      "tree": {
        "sha": "215ca828ad99b51e33b2845116e6df122ef948d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/215ca828ad99b51e33b2845116e6df122ef948d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b09ae71888fa1113847cc635cdce4b3b7c8c2819",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b09ae71888fa1113847cc635cdce4b3b7c8c2819",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b09ae71888fa1113847cc635cdce4b3b7c8c2819",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b09ae71888fa1113847cc635cdce4b3b7c8c2819/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e3e4b956eee001b39ec25cb2a7e619306fce9e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e3e4b956eee001b39ec25cb2a7e619306fce9e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e3e4b956eee001b39ec25cb2a7e619306fce9e0"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ae7734efcd00c9ed80c12c6f52c18e6cfcabfb92",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b09ae71888fa1113847cc635cdce4b3b7c8c2819/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b09ae71888fa1113847cc635cdce4b3b7c8c2819/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=b09ae71888fa1113847cc635cdce4b3b7c8c2819",
        "patch": "@@ -77,9 +77,9 @@ std::ostream& operator<<(std::ostream& os, const uint256& num)\n \n BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::vector<const char*>& extra_args)\n     : m_path_root{fs::temp_directory_path() / \"test_common_\" PACKAGE_NAME / g_insecure_rand_ctx_temp_path.rand256().ToString()},\n-      m_args{}\n+      m_args{gArgs}\n {\n-    m_node.args = &gArgs;\n+    m_node.args = &m_args;\n     const std::vector<const char*> arguments = Cat(\n         {\n             \"dummy\",\n@@ -95,8 +95,7 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::ve\n     util::ThreadRename(\"test\");\n     fs::create_directories(m_path_root);\n     m_args.ForceSetArg(\"-datadir\", fs::PathToString(m_path_root));\n-    gArgs.ForceSetArg(\"-datadir\", fs::PathToString(m_path_root));\n-    gArgs.ClearPathCache();\n+    m_args.ClearPathCache();\n     {\n         SetupServerArgs(*m_node.args);\n         std::string error;\n@@ -130,7 +129,7 @@ BasicTestingSetup::~BasicTestingSetup()\n     SetMockTime(0s); // Reset mocktime for following tests\n     LogInstance().DisconnectTestLogger();\n     fs::remove_all(m_path_root);\n-    gArgs.ClearArgs();\n+    m_args.ClearArgs();\n     ECC_Stop();\n }\n "
      },
      {
        "sha": "004b8d533ba4a286984bd151f5016357bc58f5a7",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b09ae71888fa1113847cc635cdce4b3b7c8c2819/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b09ae71888fa1113847cc635cdce4b3b7c8c2819/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=b09ae71888fa1113847cc635cdce4b3b7c8c2819",
        "patch": "@@ -82,7 +82,7 @@ struct BasicTestingSetup {\n     ~BasicTestingSetup();\n \n     const fs::path m_path_root;\n-    ArgsManager m_args;\n+    ArgsManager& m_args;\n };\n \n /** Testing setup that performs all steps up until right before"
      }
    ]
  },
  {
    "sha": "e0cb233387654a6bb608a789579da3c7c2e3adb0",
    "node_id": "C_kwDOABII59oAKGUwY2IyMzMzODc2NTRhNmJiNjA4YTc4OTU3OWRhM2M3YzJlM2FkYjA",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-11T19:40:50Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-30T21:49:24Z"
      },
      "message": "Remove all #include // for * comments",
      "tree": {
        "sha": "5a38e0d8b7df9cb05db362cac5a0f74f3c84a78c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a38e0d8b7df9cb05db362cac5a0f74f3c84a78c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0cb233387654a6bb608a789579da3c7c2e3adb0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0cb233387654a6bb608a789579da3c7c2e3adb0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0cb233387654a6bb608a789579da3c7c2e3adb0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0cb233387654a6bb608a789579da3c7c2e3adb0/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b09ae71888fa1113847cc635cdce4b3b7c8c2819",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b09ae71888fa1113847cc635cdce4b3b7c8c2819",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b09ae71888fa1113847cc635cdce4b3b7c8c2819"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "c44481b0947f57a522f4e910a111b79bc8433f6e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0cb233387654a6bb608a789579da3c7c2e3adb0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0cb233387654a6bb608a789579da3c7c2e3adb0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e0cb233387654a6bb608a789579da3c7c2e3adb0",
        "patch": "@@ -35,8 +35,8 @@\n #include <net_processing.h>\n #include <netbase.h>\n #include <node/blockstorage.h>\n-#include <node/caches.h> // for CalculateCacheSizes\n-#include <node/chainstate.h> // for LoadChainstate\n+#include <node/caches.h>\n+#include <node/chainstate.h>\n #include <node/context.h>\n #include <node/ui_interface.h>\n #include <policy/feerate.h>"
      },
      {
        "sha": "200f0b85b8ea28de631935011e9b5abd74a832bd",
        "filename": "src/node/caches.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0cb233387654a6bb608a789579da3c7c2e3adb0/src/node/caches.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0cb233387654a6bb608a789579da3c7c2e3adb0/src/node/caches.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/caches.h?ref=e0cb233387654a6bb608a789579da3c7c2e3adb0",
        "patch": "@@ -5,8 +5,8 @@\n #ifndef BITCOIN_NODE_CACHES_H\n #define BITCOIN_NODE_CACHES_H\n \n-#include <cstddef> // for size_t\n-#include <cstdint> // for int64_t\n+#include <cstddef>\n+#include <cstdint>\n \n class ArgsManager;\n "
      },
      {
        "sha": "eb6a95bc37bafce90a7c40c61372f956d9c06684",
        "filename": "src/node/chainstate.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0cb233387654a6bb608a789579da3c7c2e3adb0/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0cb233387654a6bb608a789579da3c7c2e3adb0/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=e0cb233387654a6bb608a789579da3c7c2e3adb0",
        "patch": "@@ -4,9 +4,9 @@\n \n #include <node/chainstate.h>\n \n-#include <consensus/params.h> // for Consensus::Params\n-#include <node/blockstorage.h> // for CleanupBlockRevFiles, fHavePruned, fReindex\n-#include <validation.h> // for a lot of things\n+#include <consensus/params.h>\n+#include <node/blockstorage.h>\n+#include <validation.h>\n \n std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                                                      ChainstateManager& chainman,"
      },
      {
        "sha": "ca2c30f7e87e24580428bb02ed507e6ea3c030d7",
        "filename": "src/node/chainstate.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0cb233387654a6bb608a789579da3c7c2e3adb0/src/node/chainstate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0cb233387654a6bb608a789579da3c7c2e3adb0/src/node/chainstate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.h?ref=e0cb233387654a6bb608a789579da3c7c2e3adb0",
        "patch": "@@ -5,9 +5,9 @@\n #ifndef BITCOIN_NODE_CHAINSTATE_H\n #define BITCOIN_NODE_CHAINSTATE_H\n \n-#include <cstdint> // for int64_t\n-#include <functional> // for std::function\n-#include <optional> // for std::optional\n+#include <cstdint>\n+#include <functional>\n+#include <optional>\n \n class ChainstateManager;\n namespace Consensus {"
      },
      {
        "sha": "f0f404880245ccf3d12470088ab18805bfb0e917",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0cb233387654a6bb608a789579da3c7c2e3adb0/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0cb233387654a6bb608a789579da3c7c2e3adb0/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=e0cb233387654a6bb608a789579da3c7c2e3adb0",
        "patch": "@@ -17,16 +17,16 @@\n #include <net.h>\n #include <net_processing.h>\n #include <noui.h>\n-#include <node/blockstorage.h> // for fReindex, fPruneMode\n-#include <node/chainstate.h> // for LoadChainstate\n+#include <node/blockstorage.h>\n+#include <node/chainstate.h>\n #include <policy/fees.h>\n #include <pow.h>\n #include <rpc/blockchain.h>\n #include <rpc/register.h>\n #include <rpc/server.h>\n #include <scheduler.h>\n #include <script/sigcache.h>\n-#include <shutdown.h> // for ShutdownRequested\n+#include <shutdown.h>\n #include <streams.h>\n #include <txdb.h>\n #include <util/strencodings.h>"
      }
    ]
  },
  {
    "sha": "903d4599eea106e430149e69676e12f0b82a45c3",
    "node_id": "C_kwDOABII59oAKDkwM2Q0NTk5ZWVhMTA2ZTQzMDE0OWU2OTY3NmUxMmYwYjgyYTQ1YzM",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-12T23:25:54Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-30T21:49:24Z"
      },
      "message": "Collapse the 2 cs_main locks in LoadChainstate",
      "tree": {
        "sha": "31e2d3dd13c091fd7556027a493f8201b6f0ee88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31e2d3dd13c091fd7556027a493f8201b6f0ee88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/903d4599eea106e430149e69676e12f0b82a45c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/903d4599eea106e430149e69676e12f0b82a45c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/903d4599eea106e430149e69676e12f0b82a45c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/903d4599eea106e430149e69676e12f0b82a45c3/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0cb233387654a6bb608a789579da3c7c2e3adb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0cb233387654a6bb608a789579da3c7c2e3adb0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0cb233387654a6bb608a789579da3c7c2e3adb0"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 6,
      "deletions": 7
    },
    "files": [
      {
        "sha": "ff74747b9ccbb59732d6a15df914245bebf7b21b",
        "filename": "src/node/chainstate.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/903d4599eea106e430149e69676e12f0b82a45c3/src/node/chainstate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/903d4599eea106e430149e69676e12f0b82a45c3/src/node/chainstate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/chainstate.cpp?ref=903d4599eea106e430149e69676e12f0b82a45c3",
        "patch": "@@ -113,14 +113,13 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                 assert(chainstate->m_chain.Tip() != nullptr);\n             }\n         }\n-    }\n \n-    if (!fReset) {\n-        LOCK(cs_main);\n-        auto chainstates{chainman.GetAll()};\n-        if (std::any_of(chainstates.begin(), chainstates.end(),\n-                        [](const CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(); })) {\n-            return ChainstateLoadingError::ERROR_BLOCKS_WITNESS_INSUFFICIENTLY_VALIDATED;\n+        if (!fReset) {\n+            auto chainstates{chainman.GetAll()};\n+            if (std::any_of(chainstates.begin(), chainstates.end(),\n+                            [](const CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(); })) {\n+                return ChainstateLoadingError::ERROR_BLOCKS_WITNESS_INSUFFICIENTLY_VALIDATED;\n+            }\n         }\n     }\n "
      }
    ]
  }
]