[
  {
    "sha": "20dbb953b7c337225ebbb66c73087fac9054d0f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMGRiYjk1M2I3YzMzNzIyNWViYmI2NmM3MzA4N2ZhYzkwNTRkMGY5",
    "commit": {
      "author": {
        "name": "Larry Ruane",
        "email": "larryruane@gmail.com",
        "date": "2020-01-20T17:35:30Z"
      },
      "committer": {
        "name": "Larry Ruane",
        "email": "larryruane@gmail.com",
        "date": "2021-04-24T03:16:08Z"
      },
      "message": "relog configuration arguments when debug.log rotates",
      "tree": {
        "sha": "457570b35072d4e6cfaa5a704c52e9bd04cc0083",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/457570b35072d4e6cfaa5a704c52e9bd04cc0083"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20dbb953b7c337225ebbb66c73087fac9054d0f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20dbb953b7c337225ebbb66c73087fac9054d0f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/20dbb953b7c337225ebbb66c73087fac9054d0f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20dbb953b7c337225ebbb66c73087fac9054d0f9/comments",
    "author": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66fd3b28e85c167f3955b5603496daf8d91abcad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66fd3b28e85c167f3955b5603496daf8d91abcad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66fd3b28e85c167f3955b5603496daf8d91abcad"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 107,
      "deletions": 7
    },
    "files": [
      {
        "sha": "c71994b5d5283fdf206077d01e761ffa76d3f45f",
        "filename": "src/init/common.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20dbb953b7c337225ebbb66c73087fac9054d0f9/src/init/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20dbb953b7c337225ebbb66c73087fac9054d0f9/src/init/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/common.cpp?ref=20dbb953b7c337225ebbb66c73087fac9054d0f9",
        "patch": "@@ -162,6 +162,10 @@ void LogPackageVersion()\n #else\n     version_string += \" (release build)\";\n #endif\n-    LogPrintf(PACKAGE_NAME \" version %s\\n\", version_string);\n+    std::string str{strprintf(\"%s version %s\", PACKAGE_NAME, version_string)};\n+    LogPrintf(\"%s\\n\", str);\n+\n+    // Useful to always have in the debug.log file (even after log rotation).\n+    LogInstance().AddRelogMessage(str);\n }\n } // namespace init"
      },
      {
        "sha": "50cae952c78cef7161c60c3d4e3efe3da3edba03",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 4,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20dbb953b7c337225ebbb66c73087fac9054d0f9/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20dbb953b7c337225ebbb66c73087fac9054d0f9/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=20dbb953b7c337225ebbb66c73087fac9054d0f9",
        "patch": "@@ -191,7 +191,7 @@ std::vector<LogCategory> BCLog::Logger::LogCategoriesList() const\n     return ret;\n }\n \n-std::string BCLog::Logger::LogTimestampStr(const std::string& str)\n+std::string BCLog::Logger::LogTimestampStr(const std::string& str) const\n {\n     std::string strStamped;\n \n@@ -238,9 +238,8 @@ namespace BCLog {\n     }\n }\n \n-void BCLog::Logger::LogPrintStr(const std::string& str, const std::string& logging_function, const std::string& source_file, const int source_line)\n+std::string BCLog::Logger::AddPrefix(const std::string& str, const std::string& logging_function, const std::string& source_file, const int source_line)\n {\n-    StdLockGuard scoped_lock(m_cs);\n     std::string str_prefixed = LogEscapeMessage(str);\n \n     if (m_log_sourcelocations && m_started_new_line) {\n@@ -250,8 +249,13 @@ void BCLog::Logger::LogPrintStr(const std::string& str, const std::string& loggi\n     if (m_log_threadnames && m_started_new_line) {\n         str_prefixed.insert(0, \"[\" + util::ThreadGetInternalName() + \"] \");\n     }\n+    return LogTimestampStr(str_prefixed);\n+}\n \n-    str_prefixed = LogTimestampStr(str_prefixed);\n+void BCLog::Logger::LogPrintStr(const std::string& str, const std::string& logging_function, const std::string& source_file, const int source_line)\n+{\n+    StdLockGuard scoped_lock(m_cs);\n+    std::string str_prefixed = AddPrefix(str, logging_function, source_file, source_line);\n \n     m_started_new_line = !str.empty() && str[str.size()-1] == '\\n';\n \n@@ -280,6 +284,16 @@ void BCLog::Logger::LogPrintStr(const std::string& str, const std::string& loggi\n                 setbuf(new_fileout, nullptr); // unbuffered\n                 fclose(m_fileout);\n                 m_fileout = new_fileout;\n+\n+                // Re-log important messages to the new file.\n+                bool save_started_new_line = m_started_new_line;\n+                m_started_new_line = true;\n+                for (const std::string& msg : m_msgs_relog) {\n+                    std::string s{AddPrefix(msg, logging_function, source_file, source_line) + '\\n'};\n+                    FileWriteStr(s, m_fileout);\n+                }\n+                str_prefixed = AddPrefix(str, logging_function, source_file, source_line);\n+                m_started_new_line = save_started_new_line;\n             }\n         }\n         FileWriteStr(str_prefixed, m_fileout);"
      },
      {
        "sha": "203583ddfe35adda17ab9346eb3a47c6b189617b",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20dbb953b7c337225ebbb66c73087fac9054d0f9/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20dbb953b7c337225ebbb66c73087fac9054d0f9/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=20dbb953b7c337225ebbb66c73087fac9054d0f9",
        "patch": "@@ -70,6 +70,13 @@ namespace BCLog {\n         std::list<std::string> m_msgs_before_open GUARDED_BY(m_cs);\n         bool m_buffering GUARDED_BY(m_cs) = true; //!< Buffer messages before logging can be started.\n \n+        /**\n+         * Some logged messages are important enough that they should be\n+         * re-logged to the new debug.log file when it rotates, so that they\n+         * are always visible near the start of the current debug.log file.\n+         */\n+        std::list<std::string> m_msgs_relog;\n+\n         /**\n          * m_started_new_line is a state variable that will suppress printing of\n          * the timestamp when multiple calls are made that don't end in a\n@@ -80,7 +87,8 @@ namespace BCLog {\n         /** Log categories bitfield. */\n         std::atomic<uint32_t> m_categories{0};\n \n-        std::string LogTimestampStr(const std::string& str);\n+        std::string LogTimestampStr(const std::string& str) const;\n+        std::string AddPrefix(const std::string& str, const std::string& logging_function, const std::string& source_file, const int source_line);\n \n         /** Slots that connect to the print signal */\n         std::list<std::function<void(const std::string&)>> m_print_callbacks GUARDED_BY(m_cs) {};\n@@ -146,6 +154,14 @@ namespace BCLog {\n         };\n \n         bool DefaultShrinkDebugFile() const;\n+\n+        /** (Re)log the string to debug.log later, each time it rotates */\n+        void AddRelogMessage(const std::string& str)\n+        {\n+            if (m_print_to_file) {\n+                m_msgs_relog.push_back(str);\n+            }\n+        }\n     };\n \n } // namespace BCLog"
      },
      {
        "sha": "108a474c9241b9533ee6499a9d29b3d1f0a3ea66",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20dbb953b7c337225ebbb66c73087fac9054d0f9/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20dbb953b7c337225ebbb66c73087fac9054d0f9/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=20dbb953b7c337225ebbb66c73087fac9054d0f9",
        "patch": "@@ -220,4 +220,67 @@ BOOST_AUTO_TEST_CASE(logargs)\n     BOOST_CHECK(str.find(\"private\") == std::string::npos);\n }\n \n+static void relogargscheck()\n+{\n+    // Open and read debug.log.\n+    FILE* file = fsbridge::fopen(LogInstance().m_file_path, \"rb\");\n+    fseek(file, 0, SEEK_END);\n+    std::vector<char> vch(ftell(file), 0);\n+    fseek(file, 0, SEEK_SET);\n+    size_t nbytes = fread(vch.data(), 1, vch.size(), file);\n+    fclose(file);\n+\n+    assert(nbytes == vch.size());\n+\n+    // Check that what should appear does, and what shouldn't doesn't.\n+    std::string str(vch.begin(), vch.end());\n+    BOOST_CHECK(str.find(\"test relogargs\") != std::string::npos);\n+    BOOST_CHECK(str.find(\"Command-line arg: okaylog-bool=\\\"\\\"\") != std::string::npos);\n+    BOOST_CHECK(str.find(\"Command-line arg: okaylog-negbool=false\") != std::string::npos);\n+    BOOST_CHECK(str.find(\"Command-line arg: okaylog=\\\"public\\\"\") != std::string::npos);\n+    BOOST_CHECK(str.find(\"dontlog=****\") != std::string::npos);\n+    BOOST_CHECK(str.find(\"private\") == std::string::npos);\n+}\n+\n+BOOST_AUTO_TEST_CASE(relogargs)\n+{\n+    const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_BOOL);\n+    const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_BOOL);\n+    const auto okaylog = std::make_pair(\"-okaylog\", ArgsManager::ALLOW_ANY);\n+    const auto dontlog = std::make_pair(\"-dontlog\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE);\n+    SetupArgs({okaylog_bool, okaylog_negbool, okaylog, dontlog});\n+    ResetArgs(\"-okaylog-bool -nookaylog-negbool -okaylog=public -dontlog=private\");\n+\n+    // Log the arguments to debug.log.\n+    m_local_args.LogArgs();\n+\n+    // This should also appear in the log.\n+    LogPrintf(\"test relogargs\\n\");\n+\n+    // Verify that the arguments were logged.\n+    relogargscheck();\n+\n+    // Simulate log rotation.\n+#ifdef WIN32\n+    // Windows doesn't allow an open file to be renamed (which makes\n+    // production log rotation difficult or impossible on Windows).\n+    LogInstance().DisconnectTestLogger();\n+#endif\n+    fs::path newname = LogInstance().m_file_path;\n+    newname += \".rename\";\n+    fs::rename(LogInstance().m_file_path, newname);\n+#ifdef WIN32\n+    LogInstance().StartLogging();\n+#endif\n+\n+    // Simulate SIGHUP (on a real system, signal causes HandleSIGHUP() to run).\n+    LogInstance().m_reopen_file = true;\n+\n+    // The first log message after signal causes the arguments to be relogged.\n+    LogPrintf(\"test relogargs\\n\");\n+\n+    // Verify that the arguments were (re)logged.\n+    relogargscheck();\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "8d95b58bb8c88531a262aa85fff2a3620e9ba65e",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20dbb953b7c337225ebbb66c73087fac9054d0f9/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20dbb953b7c337225ebbb66c73087fac9054d0f9/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=20dbb953b7c337225ebbb66c73087fac9054d0f9",
        "patch": "@@ -1037,7 +1037,10 @@ void ArgsManager::logArgsPrefix(\n             std::optional<unsigned int> flags = GetArgFlags('-' + arg.first);\n             if (flags) {\n                 std::string value_str = (*flags & SENSITIVE) ? \"****\" : value.write();\n-                LogPrintf(\"%s %s%s=%s\\n\", prefix, section_str, arg.first, value_str);\n+                std::string str{strprintf(\"%s %s%s=%s\", prefix, section_str, arg.first, value_str)};\n+                LogPrintf(\"%s\\n\", str);\n+                // Useful to always have in the current debug.log file.\n+                LogInstance().AddRelogMessage(str);\n             }\n         }\n     }"
      }
    ]
  }
]