[
  {
    "sha": "5bd58d914a67d92a387d4d523b79c7b2aeae9a9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmQ1OGQ5MTRhNjdkOTJhMzg3ZDRkNTIzYjc5YzdiMmFlYWU5YTli",
    "commit": {
      "author": {
        "name": "\u201cKillua Zoldyck",
        "email": "satansavior@gmail.com",
        "date": "2018-09-08T10:45:06Z"
      },
      "committer": {
        "name": "\u201cKillua Zoldyck",
        "email": "satansavior@gmail.com",
        "date": "2018-09-08T10:45:06Z"
      },
      "message": "add -debuglogsize=<n> option\n\nAdd an option to limit maximum size of log files in MBytes, which renames itself to originname-datetimestamp.ext and creates a new log file if size reaches <n>. Default is 0, which means that the log file's size is unlimited.",
      "tree": {
        "sha": "6945b585770771b8a6192ff060efaf47b009d50b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6945b585770771b8a6192ff060efaf47b009d50b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bd58d914a67d92a387d4d523b79c7b2aeae9a9b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bd58d914a67d92a387d4d523b79c7b2aeae9a9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5bd58d914a67d92a387d4d523b79c7b2aeae9a9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bd58d914a67d92a387d4d523b79c7b2aeae9a9b/comments",
    "author": {
      "login": "SuckShit",
      "id": 20721091,
      "node_id": "MDQ6VXNlcjIwNzIxMDkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/20721091?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SuckShit",
      "html_url": "https://github.com/SuckShit",
      "followers_url": "https://api.github.com/users/SuckShit/followers",
      "following_url": "https://api.github.com/users/SuckShit/following{/other_user}",
      "gists_url": "https://api.github.com/users/SuckShit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SuckShit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SuckShit/subscriptions",
      "organizations_url": "https://api.github.com/users/SuckShit/orgs",
      "repos_url": "https://api.github.com/users/SuckShit/repos",
      "events_url": "https://api.github.com/users/SuckShit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SuckShit/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "SuckShit",
      "id": 20721091,
      "node_id": "MDQ6VXNlcjIwNzIxMDkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/20721091?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SuckShit",
      "html_url": "https://github.com/SuckShit",
      "followers_url": "https://api.github.com/users/SuckShit/followers",
      "following_url": "https://api.github.com/users/SuckShit/following{/other_user}",
      "gists_url": "https://api.github.com/users/SuckShit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SuckShit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SuckShit/subscriptions",
      "organizations_url": "https://api.github.com/users/SuckShit/orgs",
      "repos_url": "https://api.github.com/users/SuckShit/repos",
      "events_url": "https://api.github.com/users/SuckShit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SuckShit/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb25cd6aa18c69918176d68e36e26f7e373aa48c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb25cd6aa18c69918176d68e36e26f7e373aa48c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb25cd6aa18c69918176d68e36e26f7e373aa48c"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 55,
      "deletions": 5
    },
    "files": [
      {
        "sha": "dcab839c2170d140c4a7cf6897bb74d2cf4a2bb0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bd58d914a67d92a387d4d523b79c7b2aeae9a9b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bd58d914a67d92a387d4d523b79c7b2aeae9a9b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5bd58d914a67d92a387d4d523b79c7b2aeae9a9b",
        "patch": "@@ -369,7 +369,8 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), true, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Set database cache size in megabytes (%d to %d, default: %d)\", nMinDbCache, nMaxDbCache, nDefaultDbCache), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-debuglogsize=<n>\", strprintf(\"Maximum size of log files in MBytes, which renames itself to originname-datetimestamp.ext and creates a new log file if size reaches <n>. Default is %u, which means that the log file's size is unlimited.\", DEFAULT_MAX_LOG_SIZE), false, OptionsCategory::OPTIONS);\n+\tgArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), true, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-loadblock=<file>\", \"Imports blocks from external blk000??.dat file on startup\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), false, OptionsCategory::OPTIONS);\n@@ -388,7 +389,7 @@ void SetupServerArgs()\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n             \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-reindex-chainstate\", \"Rebuild chain state from the currently indexed blocks. When in pruning mode or if blocks on disk might be corrupted, use full -reindex instead.\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-reindex-chainstate\", \"Rebuild chain state from the currently indexed blocks\", false, OptionsCategory::OPTIONS);\n #ifndef WIN32\n     gArgs.AddArg(\"-sysperms\", \"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\", false, OptionsCategory::OPTIONS);\n #else\n@@ -827,7 +828,9 @@ void InitLogging()\n {\n     g_logger->m_print_to_file = !gArgs.IsArgNegated(\"-debuglogfile\");\n     g_logger->m_file_path = AbsPathForConfigVal(gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n-\n+    g_logger->m_log_maxsize = gArgs.GetArg(\"-debuglogsize\", DEFAULT_MAX_LOG_SIZE);//In MBytes\n+    assert(g_logger->m_log_maxsize <= 4095);\n+    g_logger->m_log_maxsize = g_logger->m_log_maxsize << 20;\n     // Add newlines to the logfile to distinguish this execution from the last\n     // one; called before console logging is set up, so this is only sent to\n     // debug.log."
      },
      {
        "sha": "9098a16be3987a36086bd04c4ececa88d6ed8c8a",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bd58d914a67d92a387d4d523b79c7b2aeae9a9b/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bd58d914a67d92a387d4d523b79c7b2aeae9a9b/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=5bd58d914a67d92a387d4d523b79c7b2aeae9a9b",
        "patch": "@@ -226,6 +226,53 @@ void BCLog::Logger::LogPrintStr(const std::string &str)\n                     m_fileout = new_fileout;\n                 }\n             }\n+            //limit the max size of log\n+            if (m_log_maxsize > 0) {\n+                uint32_t sz = fs::file_size(m_file_path);\n+                if (sz > 0 && sz + strTimestamped.size() > m_log_maxsize) {\n+                    std::string originname = m_file_path.string();\n+                    std::string ext;\n+\n+                    uint32_t i = originname.rfind(\".\");\n+                    if (i != std::string::npos && i + 1 < originname.size()) {\n+                        ext = originname.substr(i + 1);\n+                        originname = originname.substr(0, i);\n+                    }\n+                    fclose(m_fileout);\n+\n+                    int id = 0;\n+                    std::string newfilename;\n+                    int64_t nTimeMicros = GetTimeMicros();\n+                    std::string strStamped = FormatISO8601DateTime(nTimeMicros / 1000000);\n+                    std::replace(strStamped.begin(), strStamped.end(), ':', '_');\n+                    while (true) {\n+                        std::ostringstream s;\n+                        s << originname << \"-\" << strStamped;\n+                        if (id > 0) {\n+                            s << \"-\" << id;\n+                        }\n+                        if (!ext.empty()) {\n+                            s << \".\" << ext;\n+                        }\n+                        if (fs::exists(s.str())) {\n+                            id++;\n+                            continue;\n+                        }\n+                        newfilename = s.str();\n+                        break;\n+                    }\n+\n+                    m_file_path = newfilename.c_str();\n+                    try {\n+                        m_fileout = fsbridge::fopen(m_file_path, \"a\");\n+                        if (m_fileout != nullptr) {\n+                            setbuf(m_fileout, nullptr); // unbuffered\n+                        } \n+                    } catch (const fs::filesystem_error&) {\n+                        return;\n+                    }\n+                }\n+            }\n             FileWriteStr(strTimestamped, m_fileout);\n         }\n     }"
      },
      {
        "sha": "c4b6dfd2e9a73648915e0fbf3c43aa56e8ddebf2",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bd58d914a67d92a387d4d523b79c7b2aeae9a9b/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bd58d914a67d92a387d4d523b79c7b2aeae9a9b/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=5bd58d914a67d92a387d4d523b79c7b2aeae9a9b",
        "patch": "@@ -20,7 +20,7 @@ static const bool DEFAULT_LOGTIMEMICROS = false;\n static const bool DEFAULT_LOGIPS        = false;\n static const bool DEFAULT_LOGTIMESTAMPS = true;\n extern const char * const DEFAULT_DEBUGLOGFILE;\n-\n+static const uint32_t DEFAULT_MAX_LOG_SIZE = 0;\n extern bool fLogIPs;\n \n struct CLogCategoryActive\n@@ -81,7 +81,7 @@ namespace BCLog {\n \n         bool m_log_timestamps = DEFAULT_LOGTIMESTAMPS;\n         bool m_log_time_micros = DEFAULT_LOGTIMEMICROS;\n-\n+        uint32_t m_log_maxsize = DEFAULT_MAX_LOG_SIZE;\n         fs::path m_file_path;\n         std::atomic<bool> m_reopen_file{false};\n "
      }
    ]
  }
]