jonatack,2021-03-05 15:49:25,"<details><summary>before (on master)</summary><p>\n\n```\n$ test/functional/feature_nulldummy.py --valgrind -l debug\n2021-03-05T15:19:52.679000Z TestFramework (DEBUG): PRNG seed is: 7345676661789155999\n2021-03-05T15:19:52.679000Z TestFramework (DEBUG): Setting up network thread\n2021-03-05T15:19:52.680000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_0_okgkoj\n",https://github.com/bitcoin/bitcoin/pull/21373#issuecomment-791504447,791504447,
AnthonyRonning,2021-03-06 01:59:43,"tACK 006c512501cdb6581fcc2db99912d0f96bdb6b8f\n\nI've always had problems with this one running with `test_runner.py`. Works now for me, and running individually also seeing a decrease from 1.147s to 0.899s",https://github.com/bitcoin/bitcoin/pull/21373#issuecomment-791838009,791838009,
jonatack,2021-03-06 11:47:29,"Thanks @AnthonyRonning and @MarcoFalke. Separated the refactoring change from the behavior change, renamed the new constant to `COINBASE_MATURITY`, and proposed the higher timeout again for insurance.",https://github.com/bitcoin/bitcoin/pull/21373#issuecomment-791922080,791922080,
AnthonyRonning,2021-03-09 04:13:50,"tACK 248f56bf8118e4aeea80628856d40ff39bcce5ca\n\nRan `git rebase -i HEAD~3`:\n\n```\npick f986ff532 test, refactor: abstract the feature_nulldummy blockheight values\nx make -j ""$(($(nproc)+1))"" check && test/functional/feature_nulldummy.py\npick 1c8fe7ebc test: use 327 fewer blocks in feature_nulldummy\nx make -j ""$(($(nproc)+1))"" check && test/functional/test_runner.py -j 60 && test/func",https://github.com/bitcoin/bitcoin/pull/21373#issuecomment-793357921,793357921,
jonatack,2021-03-10 21:50:24,Updated per @MarcoFalke's feedback (thanks!),https://github.com/bitcoin/bitcoin/pull/21373#issuecomment-796180785,796180785,
AnthonyRonning,2021-03-11 05:03:49,reACK ccd976dd3dbb8f991dc1203ada2043f1736be5a4 - ran a few times with the rest of the tests and still passing for me with just the fewer block change. ,https://github.com/bitcoin/bitcoin/pull/21373#issuecomment-796455705,796455705,
practicalswift,2021-03-20 17:25:24,"@MarcoFalke \n\n> Seems fine, but is there a reason to mine so many blocks in the first place?\n\nThis test was introduced in 482f852da65457eb2fbea6b259e7568133fb81c4 (PR #8636):\n\n@jl2012, thanks for adding this test five years ago - do you happen to remember the rationale (if any) for choosing `429` instead of say `100`? :)\n\nContext: we're considering applying some ""number go down"" te",https://github.com/bitcoin/bitcoin/pull/21373#issuecomment-803430013,803430013,
MarcoFalke,2021-04-01 11:13:12,"The height (429) was picked because vbparams didn't exist back then to ""bury"" changes on regtest ",https://github.com/bitcoin/bitcoin/pull/21373#issuecomment-811836338,811836338,
MarcoFalke,2021-04-01 11:17:02,"(Removed ""refactor"" from title because this is not a pure refactor)",https://github.com/bitcoin/bitcoin/pull/21373#issuecomment-811838048,811838048,
jonatack,2021-04-01 14:21:37,"> The height (429) was picked because vbparams didn't exist back then to ""bury"" changes on regtest\n\nTIL, thanks!",https://github.com/bitcoin/bitcoin/pull/21373#issuecomment-811942318,811942318,
MarcoFalke,2021-03-05 16:06:22,An alternative would be to subtract 300 from this constant (and all dependent constants)?,https://github.com/bitcoin/bitcoin/pull/21373#discussion_r588423180,588423180,test/functional/feature_nulldummy.py
jonatack,2021-03-05 16:34:43,"Great idea--bigger diff, but resolves the issue (locally for me, at least) and speeds up the test from 4 to 2.5 seconds",https://github.com/bitcoin/bitcoin/pull/21373#discussion_r588449299,588449299,test/functional/feature_nulldummy.py
jonatack,2021-03-05 16:40:56,"note to self, if need to retouch:\n```diff\n-        if (len(newscript) == 0):\n+        if len(newscript) == 0:\n```\n",https://github.com/bitcoin/bitcoin/pull/21373#discussion_r588455686,588455686,test/functional/feature_nulldummy.py
jonatack,2021-03-05 16:53:43,It looks like we can reduce the blocks from 432 to 104,https://github.com/bitcoin/bitcoin/pull/21373#discussion_r588467585,588467585,test/functional/feature_nulldummy.py
MarcoFalke,2021-03-06 07:33:51,"it would be good to self-documenting name, as it is not clear which block height this refers to",https://github.com/bitcoin/bitcoin/pull/21373#discussion_r588847899,588847899,test/functional/feature_nulldummy.py
jonatack,2021-03-06 11:44:21,done,https://github.com/bitcoin/bitcoin/pull/21373#discussion_r588872122,588872122,test/functional/feature_nulldummy.py
MarcoFalke,2021-03-09 06:50:47,I don't understand this CB is 427. CB+2 is 429. The previous comment said 431,https://github.com/bitcoin/bitcoin/pull/21373#discussion_r589985995,589985995,test/functional/feature_nulldummy.py
MarcoFalke,2021-03-09 06:51:55,"why is this needed? A common thing in our tests is to generate 100 blocks. If this times out, the default should be bumped instead of the overwrite for each test.",https://github.com/bitcoin/bitcoin/pull/21373#discussion_r589986944,589986944,test/functional/feature_nulldummy.py
jonatack,2021-03-10 21:42:28,Fixed the off-by-two error (thanks!),https://github.com/bitcoin/bitcoin/pull/21373#discussion_r591893251,591893251,test/functional/feature_nulldummy.py
jonatack,2021-03-10 21:46:03,Several other tests are doing `self.rpc_timeout = 480`; including `wallet_groups` that generates a similar number of blocks. We can start by trying without it though.,https://github.com/bitcoin/bitcoin/pull/21373#discussion_r591895311,591895311,test/functional/feature_nulldummy.py
kiminuo,2021-04-01 06:45:15,"nit: Would it be easier to read to pre-pend asterisks in this documentation like this:\n\n```\n* Connect to a single node.\n* Generate 2 blocks (save the coinbases for later).\n* Generate COINBASE_MATURITY (CB) more blocks to ensure the coinbases are mature.\n* [Policy/Consensus] Check that NULLDUMMY compliant transactions are accepted in block CB + 3.\n* [Policy] Check that non-NULLDUMMY t",https://github.com/bitcoin/bitcoin/pull/21373#discussion_r605412656,605412656,test/functional/feature_nulldummy.py
kiminuo,2021-04-01 06:57:17,"I can see there are actually many `generate(100)` occurrences in test files. Would it make sense to add this to `test_framework\messages.py` (or in a different file with constants)? Something similar was done with `MAX_MONEY` in https://github.com/bitcoin/bitcoin/commit/faae5a9a356d821f0cbdea32030b0ce356351a1d.\n\n",https://github.com/bitcoin/bitcoin/pull/21373#discussion_r605418462,605418462,test/functional/feature_nulldummy.py
jonatack,2021-04-01 14:20:24,"> I can see there are actually many `generate(100)` occurrences in test files. Would it make sense to add this to `test_framework\messages.py` (or in a different file with constants)? Something similar was done with `MAX_MONEY` in [faae5a9](https://github.com/bitcoin/bitcoin/commit/faae5a9a356d821f0cbdea32030b0ce356351a1d).\n\nSure, possibly an idea for another PR.\n\n```json\n$ git grep ""gen",https://github.com/bitcoin/bitcoin/pull/21373#discussion_r605696673,605696673,test/functional/feature_nulldummy.py
