[
  {
    "sha": "a27801080ae5a94194a6f123d53aa6f2c024af6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjc4MDEwODBhZTVhOTQxOTRhNmYxMjNkNTNhYTZmMmMwMjRhZjZl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-12-20T20:51:23Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-12-20T20:52:17Z"
      },
      "message": "Add script to test the dns seeds",
      "tree": {
        "sha": "b9102468433eb5ec1fe616d8df1f72c0137c7e2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9102468433eb5ec1fe616d8df1f72c0137c7e2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a27801080ae5a94194a6f123d53aa6f2c024af6e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlo6zYEACgkQHrd2uwPH\nki04ORAAy1g85FGj534nQP3IyfB58ycNzImDmca5N6/hQao8EBnby0EcrgHvQRXD\nDFYMoKuhBZ5NkOIj4AyQNqb0lWKdwUc6EpbHJXshG7niwwNzhWZSmyrSAiaxEm28\n68vUMlQJqE6amUufdj3JDX7pSB8pvOhS+sBZOwNB5L2RyqkOo+X5vbsGHYPHYBIG\nQr5cA9HpgwohNN7wUV7neMyZQElqqVL6ga7q+ZAV2gI066aZv1vkchtJ5PxWLV4W\nH/hcE8BZ7rIsPTZAGIXR8Ji2ms3czcvo1lM9ZZQCDWq5dINSGuq+0oKOl1y5TRNQ\nW4rWuxM9COl0zBp8gIQWNVm8IQ+p45SyVc2Vwy0xsoSiqO1U55n5kvv3Mzd7pcUn\nweyTXWdn9wj3aLm/kCv/ZzvHkbgMMeEb8uYkB/eas4PtVqfdciKRWj2Gj5h3jj/R\nRyUBjWjhgna6SFiI79QMaxNzm2iPpz3m2D5myKdhrCk4rX7sefRkgReidRC1Nm6/\n4gEr3t+FDCEhPskNDzrWRlKjjze+iljC4zhjvgSFpj8TLQ+bh/jx5IBzaQomJOmS\ngdVRNspBe09vYjeu1z/nOyPikSNctmIn9nRsUMmOnvhmlbtXEeWeQoaeDL0CS/kd\neHDt+eWY311A2j/uQpJ1bKCQmMFgSoSSHZ6Zfqfxe9NHN8RJ4zQ=\n=thi5\n-----END PGP SIGNATURE-----",
        "payload": "tree b9102468433eb5ec1fe616d8df1f72c0137c7e2c\nparent 79399c8cd0b6030034eea5feed3a7523e369b256\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1513803083 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1513803137 -1000\n\nAdd script to test the dns seeds\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a27801080ae5a94194a6f123d53aa6f2c024af6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a27801080ae5a94194a6f123d53aa6f2c024af6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a27801080ae5a94194a6f123d53aa6f2c024af6e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79399c8cd0b6030034eea5feed3a7523e369b256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79399c8cd0b6030034eea5feed3a7523e369b256",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79399c8cd0b6030034eea5feed3a7523e369b256"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 99,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a474aca1c555686e5f0fa18e70ff017f5f2b1156",
        "filename": "contrib/seeds/testseeds.py",
        "status": "added",
        "additions": 99,
        "deletions": 0,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a27801080ae5a94194a6f123d53aa6f2c024af6e/contrib/seeds/testseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a27801080ae5a94194a6f123d53aa6f2c024af6e/contrib/seeds/testseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/testseeds.py?ref=a27801080ae5a94194a6f123d53aa6f2c024af6e",
        "patch": "@@ -0,0 +1,99 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# Script to test the current dns seeds in use\n+\n+import socket\n+import os\n+import re\n+import sys\n+\n+SOCKET_TIMEOUT = 5\n+MIN_IPV4 = 4\n+MIN_IPV6 = 5\n+MIN_CONNECTABLE = MIN_IPV4\n+CPP_FILE = \"../../src/chainparams.cpp\"\n+CHECK_CONNECTION = True\n+\n+def parse_cpp(filename):\n+    chainparams_cpp_file = os.path.join(os.path.dirname(__file__), filename)\n+    with open(chainparams_cpp_file, 'r') as sourcefile:\n+        data=sourcefile.read()\n+        seeds = re.findall('vSeeds.emplace_back\\(\\\"(.*)\\\"', data)\n+        return seeds\n+\n+def hilite(string, status, bold):\n+    if os.name != 'posix':\n+        return string\n+    attr = []\n+    if status:\n+        # green\n+        attr.append('32')\n+    else:\n+        # red\n+        attr.append('31')\n+    if bold:\n+        attr.append('1')\n+    return '\\x1b[%sm%s\\x1b[0m' % (';'.join(attr), string)\n+\n+def test_connectability(seed_response, ipv6 = False):\n+    print(\"  Testing port 8333\",end=\"\", flush=True)\n+    conectable_peers = 0\n+    for ip in seed_response:\n+        print(\".\",end=\"\", flush=True)\n+        s = socket.socket( (socket.AF_INET6 if ipv6 else socket.AF_INET) , socket.SOCK_STREAM)\n+        s.settimeout(SOCKET_TIMEOUT)\n+        try:\n+            s.connect(ip[4])\n+            conectable_peers+=1\n+        except (socket.timeout, socket.error, ConnectionRefusedError):\n+            print(\"!\",end=\"\", flush=True)\n+        try:\n+            s.shutdown(2)\n+            s.close()\n+        except:\n+            pass\n+    print(\" \"+str(conectable_peers)+\" connectable peers\")\n+    return conectable_peers\n+\n+def main():\n+    ret = 0\n+    seeds = []\n+    # check if we should overload a seed given as first parameter\n+    if len(sys.argv) == 2:\n+        seeds = [sys.argv[1]]\n+    else:\n+        #parse chainparams.cpp file\n+        seeds = parse_cpp(CPP_FILE)\n+    for seed in seeds:\n+        v4 = []\n+        v6 = []\n+        conectable_v4_peers = 0\n+        conectable_v6_peers = 0\n+        print(\"Testing \"+seed+\" ...\")\n+        try:\n+            v4 = socket.getaddrinfo(seed, 8333, socket.AF_INET)\n+            print(\"  found IPv4: \"+str(len(v4)))\n+        except:\n+            print(\"Failed to retrive DNS records!\")\n+        if CHECK_CONNECTION:\n+            conectable_v4_peers = test_connectability(v4)\n+        try:\n+            v6 = socket.getaddrinfo(seed, 8333, socket.AF_INET6)\n+            print(\"  found IPv6: \"+str(len(v6)))\n+        except:\n+            print(\"Failed to retrive IPv6 DNS records!\")\n+        #disable IPv6 connection test due to missing widespread support\n+        #if CHECK_CONNECTION:\n+        #. conectable_v6_peers = test_connectability(v6, True)\n+        if len(v4) >= MIN_IPV4 and len(v6) >= MIN_IPV6 and (CHECK_CONNECTION == False or conectable_v4_peers >= MIN_IPV4):\n+            print(\"Status: \"+hilite(\"OKAY\", True, True)+\"\\n\")\n+        else:\n+            print(\"Status: \"+hilite(\"Failed\", False, True)+\"\\n\")\n+            ret = 1\n+    sys.exit(ret)\n+\n+if __name__ == '__main__':\n+    main()\n\\ No newline at end of file"
      }
    ]
  }
]