[
  {
    "sha": "db2678145afc6d1a99d745b43f06e92169e10e6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjI2NzgxNDVhZmM2ZDFhOTlkNzQ1YjQzZjA2ZTkyMTY5ZTEwZTZm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-09-16T14:45:36Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-09-13T15:14:53Z"
      },
      "message": "[PoC] Add wallet inspection and modification tool \"bitcoin-wallet-tool\"",
      "tree": {
        "sha": "4a499c7d4bb13572eb43da20374ddd581971cf8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a499c7d4bb13572eb43da20374ddd581971cf8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db2678145afc6d1a99d745b43f06e92169e10e6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db2678145afc6d1a99d745b43f06e92169e10e6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db2678145afc6d1a99d745b43f06e92169e10e6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db2678145afc6d1a99d745b43f06e92169e10e6f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8cf492e850abb05a39f24150b08320ae2a3f451",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8cf492e850abb05a39f24150b08320ae2a3f451",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8cf492e850abb05a39f24150b08320ae2a3f451"
      }
    ],
    "stats": {
      "total": 366,
      "additions": 356,
      "deletions": 10
    },
    "files": [
      {
        "sha": "8c319fe409d47be389269df71e5120e252271002",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2678145afc6d1a99d745b43f06e92169e10e6f/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2678145afc6d1a99d745b43f06e92169e10e6f/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=db2678145afc6d1a99d745b43f06e92169e10e6f",
        "patch": "@@ -18,6 +18,7 @@ BITCOIN_DAEMON_NAME=bitcoind\n BITCOIN_GUI_NAME=bitcoin-qt\n BITCOIN_CLI_NAME=bitcoin-cli\n BITCOIN_TX_NAME=bitcoin-tx\n+BITCOIN_WALLET_TOOL_NAME=bitcoin-wallet-tool\n \n dnl Unless the user specified ARFLAGS, force it to be cr\n AC_ARG_VAR(ARFLAGS, [Flags for the archiver, defaults to <cr> if not set])\n@@ -396,7 +397,7 @@ CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n AC_ARG_WITH([utils],\n   [AS_HELP_STRING([--with-utils],\n-  [build bitcoin-cli bitcoin-tx (default=yes)])],\n+  [build bitcoin-cli bitcoin-tx bitcoin-wallet-tool (default=yes)])],\n   [build_bitcoin_utils=$withval],\n   [build_bitcoin_utils=yes])\n \n@@ -1188,7 +1189,7 @@ AC_MSG_CHECKING([whether to build bitcoind])\n AM_CONDITIONAL([BUILD_BITCOIND], [test x$build_bitcoind = xyes])\n AC_MSG_RESULT($build_bitcoind)\n \n-AC_MSG_CHECKING([whether to build utils (bitcoin-cli bitcoin-tx)])\n+AC_MSG_CHECKING([whether to build utils (bitcoin-cli bitcoin-tx bitcoin-wallet-tool)])\n AM_CONDITIONAL([BUILD_BITCOIN_UTILS], [test x$build_bitcoin_utils = xyes])\n AC_MSG_RESULT($build_bitcoin_utils)\n \n@@ -1361,6 +1362,7 @@ AC_SUBST(BITCOIN_DAEMON_NAME)\n AC_SUBST(BITCOIN_GUI_NAME)\n AC_SUBST(BITCOIN_CLI_NAME)\n AC_SUBST(BITCOIN_TX_NAME)\n+AC_SUBST(BITCOIN_WALLET_TOOL_NAME)\n \n AC_SUBST(RELDFLAGS)\n AC_SUBST(DEBUG_CPPFLAGS)"
      },
      {
        "sha": "85e97b5dc25e3e7166030fd735fa335f5cfb8125",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2678145afc6d1a99d745b43f06e92169e10e6f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2678145afc6d1a99d745b43f06e92169e10e6f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=db2678145afc6d1a99d745b43f06e92169e10e6f",
        "patch": "@@ -41,6 +41,7 @@ LIBBITCOINCONSENSUS=libbitcoinconsensus.la\n endif\n if ENABLE_WALLET\n LIBBITCOIN_WALLET=libbitcoin_wallet.a\n+LIBBITCOIN_WALLET_TOOL=libbitcoin_wallet_tool.a\n endif\n \n LIBBITCOIN_CRYPTO= $(LIBBITCOIN_CRYPTO_BASE)\n@@ -70,6 +71,7 @@ EXTRA_LIBRARIES += \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_CLI) \\\n   $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_WALLET_TOOL) \\\n   $(LIBBITCOIN_ZMQ)\n \n lib_LTLIBRARIES = $(LIBBITCOINCONSENSUS)\n@@ -85,6 +87,9 @@ endif\n \n if BUILD_BITCOIN_UTILS\n   bin_PROGRAMS += bitcoin-cli bitcoin-tx\n+if ENABLE_WALLET\n+  bin_PROGRAMS += bitcoin-wallet-tool\n+endif\n endif\n \n .PHONY: FORCE check-symbols check-security\n@@ -196,6 +201,7 @@ BITCOIN_CORE_H = \\\n   wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n+  wallet/wallettool.h \\\n   wallet/walletutil.h \\\n   wallet/coinselection.h \\\n   warnings.h \\\n@@ -291,6 +297,12 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/coinselection.cpp \\\n   $(BITCOIN_CORE_H)\n \n+libbitcoin_wallet_tool_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+libbitcoin_wallet_tool_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+libbitcoin_wallet_tool_a_SOURCES = \\\n+  wallet/wallettool.cpp \\\n+  $(BITCOIN_CORE_H)\n+\n # crypto primitives library\n crypto_libbitcoin_crypto_base_a_CPPFLAGS = $(AM_CPPFLAGS)\n crypto_libbitcoin_crypto_base_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n@@ -505,6 +517,34 @@ bitcoin_tx_LDADD = \\\n bitcoin_tx_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n #\n \n+# bitcoin-wallet-tool binary #\n+bitcoin_wallet_tool_SOURCES = bitcoin-wallet-tool.cpp\n+bitcoin_wallet_tool_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+bitcoin_wallet_tool_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+bitcoin_wallet_tool_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n+if TARGET_WINDOWS\n+bitcoin_wallet_tool_SOURCES += bitcoin-wallet-tool-res.rc\n+endif\n+\n+bitcoin_wallet_tool_LDADD = \\\n+  $(LIBBITCOIN_WALLET_TOOL) \\\n+  $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_CONSENSUS) \\\n+  $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBUNIVALUE) \\\n+  $(LIBBITCOIN_ZMQ) \\\n+  $(LIBLEVELDB) \\\n+  $(LIBLEVELDB_SSE42) \\\n+  $(LIBMEMENV) \\\n+  $(LIBSECP256K1)\n+\n+bitcoin_wallet_tool_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS)\n+#\n+\n # bitcoinconsensus library #\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h"
      },
      {
        "sha": "59079376fc4672ec4dbb65666e1bfac5da290cff",
        "filename": "src/bitcoin-wallet-tool-res.rc",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2678145afc6d1a99d745b43f06e92169e10e6f/src/bitcoin-wallet-tool-res.rc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2678145afc6d1a99d745b43f06e92169e10e6f/src/bitcoin-wallet-tool-res.rc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet-tool-res.rc?ref=db2678145afc6d1a99d745b43f06e92169e10e6f",
        "patch": "@@ -0,0 +1,35 @@\n+#include <windows.h>             // needed for VERSIONINFO\n+#include \"clientversion.h\"       // holds the needed client version information\n+\n+#define VER_PRODUCTVERSION     CLIENT_VERSION_MAJOR,CLIENT_VERSION_MINOR,CLIENT_VERSION_REVISION,CLIENT_VERSION_BUILD\n+#define VER_PRODUCTVERSION_STR STRINGIZE(CLIENT_VERSION_MAJOR) \".\" STRINGIZE(CLIENT_VERSION_MINOR) \".\" STRINGIZE(CLIENT_VERSION_REVISION) \".\" STRINGIZE(CLIENT_VERSION_BUILD)\n+#define VER_FILEVERSION        VER_PRODUCTVERSION\n+#define VER_FILEVERSION_STR    VER_PRODUCTVERSION_STR\n+\n+VS_VERSION_INFO VERSIONINFO\n+FILEVERSION     VER_FILEVERSION\n+PRODUCTVERSION  VER_PRODUCTVERSION\n+FILEOS          VOS_NT_WINDOWS32\n+FILETYPE        VFT_APP\n+BEGIN\n+    BLOCK \"StringFileInfo\"\n+    BEGIN\n+        BLOCK \"040904E4\" // U.S. English - multilingual (hex)\n+        BEGIN\n+            VALUE \"CompanyName\",        \"Bitcoin\"\n+            VALUE \"FileDescription\",    \"bitcoin-wallet-tool (CLI tool for \" PACKAGE_NAME \" wallets)\"\n+            VALUE \"FileVersion\",        VER_FILEVERSION_STR\n+            VALUE \"InternalName\",       \"bitcoin-wallet-tool\"\n+            VALUE \"LegalCopyright\",     COPYRIGHT_STR\n+            VALUE \"LegalTrademarks1\",   \"Distributed under the MIT software license, see the accompanying file COPYING or http://www.opensource.org/licenses/mit-license.php.\"\n+            VALUE \"OriginalFilename\",   \"bitcoin-wallet-tool.exe\"\n+            VALUE \"ProductName\",        \"bitcoin-wallet-tool\"\n+            VALUE \"ProductVersion\",     VER_PRODUCTVERSION_STR\n+        END\n+    END\n+\n+    BLOCK \"VarFileInfo\"\n+    BEGIN\n+        VALUE \"Translation\", 0x0, 1252 // language neutral - multilingual (decimal)\n+    END\n+END"
      },
      {
        "sha": "e82c0b36df82d53ad48504c064a11be3775f9e9a",
        "filename": "src/bitcoin-wallet-tool.cpp",
        "status": "added",
        "additions": 103,
        "deletions": 0,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2678145afc6d1a99d745b43f06e92169e10e6f/src/bitcoin-wallet-tool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2678145afc6d1a99d745b43f06e92169e10e6f/src/bitcoin-wallet-tool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet-tool.cpp?ref=db2678145afc6d1a99d745b43f06e92169e10e6f",
        "patch": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <logging.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <wallet/wallettool.h>\n+\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static void SetupWalletToolArgs()\n+{\n+    gArgs.AddArg(\"-?\", \"This help message\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-name=<wallet-name>\", \"Specify wallet name\", false, OptionsCategory::OPTIONS);\n+\n+    gArgs.AddArg(\"info\", \"Get wallet info\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"create\", \"Create new wallet file\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"salvage\", \"Recover readable keypairs\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"zaptxs\", \"Remove all transactions including metadata (will keep keys)\", false, OptionsCategory::COMMANDS);\n+\n+    // Hidden\n+    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n+}\n+\n+static bool WalletAppInit(int argc, char* argv[])\n+{\n+    SetupWalletToolArgs();\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        fprintf(stderr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n+        return false;\n+    }\n+    if (argc < 2 || HelpRequested(gArgs)) {\n+        std::string usage = strprintf(_(\"%s wallet-tool version\"), PACKAGE_NAME) + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+                                      _(\"Usage:\") + \"\\n\" +\n+                                     \"  bitcoin-wallet-tool [options] <command>\\n\\n\" +\n+                                     gArgs.GetHelpMessage();\n+\n+        fprintf(stdout, \"%s\", usage.c_str());\n+        return false;\n+    }\n+\n+    // check for printtoconsole, allow -debug\n+    g_logger->m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", gArgs.GetBoolArg(\"-debug\", false));\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    try {\n+        SelectParams(gArgs.GetChainName());\n+    } catch (const std::exception& e) {\n+        fprintf(stderr, \"Error: %s\\n\", e.what());\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+int main(int argc, char* argv[])\n+{\n+    SetupEnvironment();\n+    RandomInit();\n+    try {\n+        if (!WalletAppInit(argc, argv)) return EXIT_FAILURE;\n+    } catch (const std::exception& e) {\n+        PrintExceptionContinue(&e, \"WalletAppInit()\");\n+        return EXIT_FAILURE;\n+    } catch (...) {\n+        PrintExceptionContinue(nullptr, \"WalletAppInit()\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    while (argc > 1 && IsSwitchChar(argv[1][0])) {\n+        argc--;\n+        argv++;\n+    }\n+    std::vector<std::string> args = std::vector<std::string>(&argv[1], &argv[argc]);\n+    std::string method = args[0];\n+\n+    // A name must be provided when creating a file\n+    if (method == \"create\" && !gArgs.IsArgSet(\"-name\")) {\n+        fprintf(stderr, \"Wallet name must be provided when creating a new wallet.\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n+    std::string name = gArgs.GetArg(\"-name\", \"\");\n+\n+    ECCVerifyHandle globalVerifyHandle;\n+    ECC_Start();\n+    if (!WalletTool::executeWalletToolFunc(method, name))\n+        return EXIT_FAILURE;\n+    ECC_Stop();\n+    return EXIT_SUCCESS;\n+}"
      },
      {
        "sha": "a4dc1669e5888af3aaa95d0ec93b93cd0bae0d28",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2678145afc6d1a99d745b43f06e92169e10e6f/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2678145afc6d1a99d745b43f06e92169e10e6f/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=db2678145afc6d1a99d745b43f06e92169e10e6f",
        "patch": "@@ -175,7 +175,7 @@ bool CCryptoKeyStore::Lock()\n     return true;\n }\n \n-bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n+bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n {\n     {\n         LOCK(cs_KeyStore);\n@@ -204,7 +204,7 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n             LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n             assert(false);\n         }\n-        if (keyFail || !keyPass)\n+        if (keyFail || (!keyPass && !accept_no_keys))\n             return false;\n         vMasterKey = vMasterKeyIn;\n         fDecryptionThoroughlyChecked = true;"
      },
      {
        "sha": "8e195ca8fa07d1bdecf9460849dc1f17a6cf6465",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2678145afc6d1a99d745b43f06e92169e10e6f/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2678145afc6d1a99d745b43f06e92169e10e6f/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=db2678145afc6d1a99d745b43f06e92169e10e6f",
        "patch": "@@ -133,7 +133,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n     //! will encrypt previously unencrypted keys\n     bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n \n-    bool Unlock(const CKeyingMaterial& vMasterKeyIn);\n+    bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false);\n     CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n \n public:"
      },
      {
        "sha": "a7801ba440a6d9ecba29ab81af20d653a485d54e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2678145afc6d1a99d745b43f06e92169e10e6f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2678145afc6d1a99d745b43f06e92169e10e6f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=db2678145afc6d1a99d745b43f06e92169e10e6f",
        "patch": "@@ -81,8 +81,7 @@ std::shared_ptr<CWallet> GetWallet(const std::string& name)\n     return nullptr;\n }\n \n-// Custom deleter for shared_ptr<CWallet>.\n-static void ReleaseWallet(CWallet* wallet)\n+void ReleaseWallet(CWallet* wallet)\n {\n     wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n     wallet->BlockUntilSyncedToCurrentChain();\n@@ -408,7 +407,7 @@ bool CWallet::LoadWatchOnly(const CScript &dest)\n     return CCryptoKeyStore::AddWatchOnly(dest);\n }\n \n-bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n+bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_keys)\n {\n     CCrypter crypter;\n     CKeyingMaterial _vMasterKey;\n@@ -421,7 +420,7 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n                 return false;\n             if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, _vMasterKey))\n                 continue; // try another master key\n-            if (CCryptoKeyStore::Unlock(_vMasterKey))\n+            if (CCryptoKeyStore::Unlock(_vMasterKey, accept_no_keys))\n                 return true;\n         }\n     }"
      },
      {
        "sha": "99cc32bf91c19707a89abdeb572f9f09014e004b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2678145afc6d1a99d745b43f06e92169e10e6f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2678145afc6d1a99d745b43f06e92169e10e6f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=db2678145afc6d1a99d745b43f06e92169e10e6f",
        "patch": "@@ -38,6 +38,8 @@ bool RemoveWallet(const std::shared_ptr<CWallet>& wallet);\n bool HasWallets();\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n std::shared_ptr<CWallet> GetWallet(const std::string& name);\n+// Custom deleter for shared_ptr<CWallet>.\n+void ReleaseWallet(CWallet* wallet);\n \n //! Default for -keypool\n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n@@ -840,7 +842,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     //! Holds a timestamp at which point the wallet is scheduled (externally) to be relocked. Caller must arrange for actual relocking to occur via Lock().\n     int64_t nRelockTime = 0;\n \n-    bool Unlock(const SecureString& strWalletPassphrase);\n+    bool Unlock(const SecureString& strWalletPassphrase, bool accept_no_keys = false);\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n "
      },
      {
        "sha": "cca3e6ef3f159c643e9d09cbf4879c2fdde67999",
        "filename": "src/wallet/wallettool.cpp",
        "status": "added",
        "additions": 145,
        "deletions": 0,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2678145afc6d1a99d745b43f06e92169e10e6f/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2678145afc6d1a99d745b43f06e92169e10e6f/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=db2678145afc6d1a99d745b43f06e92169e10e6f",
        "patch": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <base58.h>\n+#include <fs.h>\n+#include <util.h>\n+#include <wallet/wallet.h>\n+#include <wallet/walletutil.h>\n+\n+namespace WalletTool {\n+\n+// The standard wallet deleter function blocks on the validation interface\n+// queue, which doesn't exist for the bitcoin-wallet-tool. Define our own\n+// deleter here.\n+static void WalletToolReleaseWallet(CWallet* wallet)\n+{\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n+    wallet->Flush();\n+    delete wallet;\n+}\n+\n+static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::path& path)\n+{\n+    if (fs::exists(path)) {\n+        fprintf(stderr, \"Error: File exists already\\n\");\n+        return nullptr;\n+    }\n+    std::shared_ptr<CWallet> wallet_instance(new CWallet(name, WalletDatabase::Create(path)), WalletToolReleaseWallet);\n+    bool first_run = true;\n+    DBErrors load_wallet_ret = wallet_instance->LoadWallet(first_run);\n+    if (load_wallet_ret != DBErrors::LOAD_OK) {\n+        fprintf(stderr, \"Error creating %s\", name.c_str());\n+        return nullptr;\n+    }\n+\n+    wallet_instance->SetMinVersion(FEATURE_HD_SPLIT);\n+\n+    // generate a new HD seed\n+    CPubKey seed = wallet_instance->GenerateNewSeed();\n+    wallet_instance->SetHDSeed(seed);\n+\n+    fprintf(stdout, \"Topping up keypool...\\n\");\n+    wallet_instance->TopUpKeyPool();\n+    return wallet_instance;\n+}\n+\n+static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::path& path)\n+{\n+    if (!fs::exists(path)) {\n+        fprintf(stderr, \"Error: Wallet files does not exist\\n\");\n+        return nullptr;\n+    }\n+\n+    std::shared_ptr<CWallet> wallet_instance(new CWallet(name, WalletDatabase::Create(path)), WalletToolReleaseWallet);\n+    bool first_run;\n+    DBErrors load_wallet_ret = wallet_instance->LoadWallet(first_run);\n+    if (load_wallet_ret != DBErrors::LOAD_OK) {\n+        wallet_instance = nullptr;\n+        if (load_wallet_ret == DBErrors::CORRUPT) {\n+            fprintf(stderr, \"Error loading %s: Wallet corrupted\", name.c_str());\n+            return nullptr;\n+        } else if (load_wallet_ret == DBErrors::NONCRITICAL_ERROR) {\n+            fprintf(stderr, \"Error reading %s! All keys read correctly, but transaction data\"\n+                            \" or address book entries might be missing or incorrect.\",\n+                name.c_str());\n+        } else if (load_wallet_ret == DBErrors::TOO_NEW) {\n+            fprintf(stderr, \"Error loading %s: Wallet requires newer version of %s\",\n+                name.c_str(), PACKAGE_NAME);\n+            return nullptr;\n+        } else if (load_wallet_ret == DBErrors::NEED_REWRITE) {\n+            fprintf(stderr, \"Wallet needed to be rewritten: restart %s to complete\", PACKAGE_NAME);\n+            return nullptr;\n+        } else {\n+            fprintf(stderr, \"Error loading %s\", name.c_str());\n+            return nullptr;\n+        }\n+    }\n+\n+    return wallet_instance;\n+}\n+\n+static void WalletShowInfo(CWallet* wallet_instance)\n+{\n+    // lock required because of some AssertLockHeld()\n+    LOCK(wallet_instance->cs_wallet);\n+\n+    fprintf(stdout, \"Wallet info\\n===========\\n\");\n+    fprintf(stdout, \"Encrypted: %s\\n\", wallet_instance->IsCrypted() ? \"yes\" : \"no\");\n+    fprintf(stdout, \"HD (hd seed available): %s\\n\", wallet_instance->GetHDChain().seed_id.IsNull() ? \"no\" : \"yes\");\n+    fprintf(stdout, \"Keypool Size: %u\\n\", wallet_instance->GetKeyPoolSize());\n+    fprintf(stdout, \"Transactions: %zu\\n\", wallet_instance->mapWallet.size());\n+    fprintf(stdout, \"Address Book: %zu\\n\", wallet_instance->mapAddressBook.size());\n+}\n+\n+bool executeWalletToolFunc(const std::string& method, const std::string& name)\n+{\n+    fs::path path = fs::absolute(name, GetWalletDir());\n+\n+    if (method == \"create\") {\n+        std::shared_ptr<CWallet> wallet_instance = CreateWallet(name, path);\n+        if (wallet_instance) {\n+            WalletShowInfo(wallet_instance.get());\n+            wallet_instance->Flush();\n+        }\n+    } else if (method == \"info\") {\n+        std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n+        if (!wallet_instance) return false;\n+        WalletShowInfo(wallet_instance.get());\n+        wallet_instance->Flush();\n+    } else if (method == \"salvage\") {\n+        // Recover readable keypairs:\n+        std::string error;\n+        if (!WalletBatch::VerifyEnvironment(path, error)) {\n+            fprintf(stderr, \"WalletBatch::VerifyEnvironment Error: %s\\n\", error.c_str());\n+            return false;\n+        }\n+\n+        CWallet dummyWallet(\"dummy\", WalletDatabase::CreateDummy());\n+        std::string backup_filename;\n+        if (!WalletBatch::Recover(path, (void*)&dummyWallet, WalletBatch::RecoverKeysOnlyFilter, backup_filename)) {\n+            fprintf(stderr, \"Salvage failed\\n\");\n+            return false;\n+        }\n+        //TODO, set wallets best block to genesis to enforce a rescan\n+        fprintf(stdout, \"Salvage successful. Please rescan your wallet.\\n\");\n+    } else if (method == \"zaptxs\") {\n+        // needed to restore wallet transaction meta data after -zapwallettxes\n+        std::vector<CWalletTx> vWtx;\n+\n+        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(name, WalletDatabase::Create(path));\n+        DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n+        if (nZapWalletRet != DBErrors::LOAD_OK) {\n+            fprintf(stderr, \"Error loading %s: Wallet corrupted\", name.c_str());\n+            return false;\n+        }\n+        fprintf(stdout, \"Zaptxs successful executed. Please rescan your wallet.\\n\");\n+    } else {\n+        fprintf(stderr, \"Unknown command\\n\");\n+        return false;\n+    }\n+\n+    return true;\n+}\n+} // namespace WalletTool"
      },
      {
        "sha": "67eb218ad6cac3ee4957df6c4356e344435b1ab7",
        "filename": "src/wallet/wallettool.h",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2678145afc6d1a99d745b43f06e92169e10e6f/src/wallet/wallettool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2678145afc6d1a99d745b43f06e92169e10e6f/src/wallet/wallettool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.h?ref=db2678145afc6d1a99d745b43f06e92169e10e6f",
        "patch": "@@ -0,0 +1,20 @@\n+// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_WALLETTOOL_H\n+#define BITCOIN_WALLET_WALLETTOOL_H\n+\n+#include <script/ismine.h>\n+#include <wallet/wallet.h>\n+\n+namespace WalletTool {\n+\n+std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::path& path);\n+std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::path& path);\n+void WalletShowInfo(CWallet* wallet_instance);\n+bool executeWalletToolFunc(const std::string& method, const std::string& file);\n+\n+} // namespace WalletTool\n+\n+#endif // BITCOIN_WALLET_WALLETTOOL_H"
      }
    ]
  },
  {
    "sha": "96b2ef77d4e0cf0229e43e4e411bb9f070bc8c12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmIyZWY3N2Q0ZTBjZjAyMjllNDNlNGU0MTFiYjlmMDcwYmM4YzEy",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-09-21T00:23:42Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-09-21T00:23:42Z"
      },
      "message": "qa: Add wallet tool test",
      "tree": {
        "sha": "8004d2211616d44b6e9b1bb543087f04a55ed382",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8004d2211616d44b6e9b1bb543087f04a55ed382"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96b2ef77d4e0cf0229e43e4e411bb9f070bc8c12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96b2ef77d4e0cf0229e43e4e411bb9f070bc8c12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96b2ef77d4e0cf0229e43e4e411bb9f070bc8c12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96b2ef77d4e0cf0229e43e4e411bb9f070bc8c12/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db2678145afc6d1a99d745b43f06e92169e10e6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db2678145afc6d1a99d745b43f06e92169e10e6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db2678145afc6d1a99d745b43f06e92169e10e6f"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 82,
      "deletions": 0
    },
    "files": [
      {
        "sha": "db9e8e0f5585a950141158dee09291aa8ea9398f",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96b2ef77d4e0cf0229e43e4e411bb9f070bc8c12/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96b2ef77d4e0cf0229e43e4e411bb9f070bc8c12/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=96b2ef77d4e0cf0229e43e4e411bb9f070bc8c12",
        "patch": "@@ -130,6 +130,7 @@ def main(self):\n \n         config = configparser.ConfigParser()\n         config.read_file(open(self.options.configfile))\n+        self.config = config\n         self.options.bitcoind = os.getenv(\"BITCOIND\", default=config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoind' + config[\"environment\"][\"EXEEXT\"])\n         self.options.bitcoincli = os.getenv(\"BITCOINCLI\", default=config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoin-cli' + config[\"environment\"][\"EXEEXT\"])\n "
      },
      {
        "sha": "3ee78dc121cc509b539da280a274f1f79c95ca87",
        "filename": "test/functional/tool_wallet.py",
        "status": "added",
        "additions": 81,
        "deletions": 0,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96b2ef77d4e0cf0229e43e4e411bb9f070bc8c12/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96b2ef77d4e0cf0229e43e4e411bb9f070bc8c12/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=96b2ef77d4e0cf0229e43e4e411bb9f070bc8c12",
        "patch": "@@ -0,0 +1,81 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test bitcoint-wallet-tool.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import textwrap\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class ToolWalletTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def process(self, *args):\n+        binary = self.config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoin-wallet-tool' + self.config[\"environment\"][\"EXEEXT\"]\n+        input = None\n+        return subprocess.Popen([binary] + list(args), stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n+\n+    def assert_raises_tool_error(self, error, *args):\n+        process = self.process(*args)\n+        stdout, stderr = process.communicate()\n+        assert_equal(process.poll(), 1)\n+        assert_equal(stdout, '')\n+        assert_equal(stderr.strip(), error)\n+\n+    def assert_tool_output(self, output, *args):\n+        process = self.process(*args)\n+        stdout, stderr = process.communicate()\n+        assert_equal(process.poll(), 0)\n+        assert_equal(stderr, '')\n+        assert_equal(stdout, output)\n+\n+    def run_test(self):\n+\n+        self.assert_raises_tool_error('Unknown command', 'foo')\n+        self.assert_raises_tool_error('Error parsing command line arguments: Invalid parameter -foo', '-foo')\n+\n+        wallet_dir = lambda *p: data_dir('wallets', *p)\n+        data_dir = lambda *p: os.path.join(self.nodes[0].datadir, 'regtest', *p)\n+\n+        # TODO calling info on a wallet already opened results in the segfault:\n+        #  `libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: BerkeleyBatch: Failed to open database environment`\n+        #  the error must be fixed and tested here\n+\n+        # stop the node to close the wallet to call info command\n+        self.stop_node(0)\n+\n+        out = textwrap.dedent('''\\\n+            Wallet info\n+            ===========\n+            Encrypted: no\n+            HD (hd seed available): yes\n+            Keypool Size: 2\n+            Transactions: 50\n+            Address Book: 0\n+        ''')\n+        self.assert_tool_output(out, '-name=' + wallet_dir(), 'info')\n+\n+        # mutate the wallet to check the info command output changes accordingly\n+        self.start_node(0)\n+        self.nodes[0].generate(1)\n+        self.stop_node(0)\n+\n+        out = textwrap.dedent('''\\\n+            Wallet info\n+            ===========\n+            Encrypted: no\n+            HD (hd seed available): yes\n+            Keypool Size: 1\n+            Transactions: 51\n+            Address Book: 0\n+        ''')\n+        self.assert_tool_output(out, '-name=' + wallet_dir(), 'info')\n+\n+if __name__ == '__main__':\n+    ToolWalletTest().main()"
      }
    ]
  },
  {
    "sha": "70fca5181644b1d708e7e71cf844884ef8f34230",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGZjYTUxODE2NDRiMWQ3MDhlN2U3MWNmODQ0ODg0ZWY4ZjM0MjMw",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-09-21T09:19:12Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-09-21T09:19:12Z"
      },
      "message": "fixup! qa: Add wallet tool test",
      "tree": {
        "sha": "f03b2dd22598e3147eb36a48c57efccbbdddfe5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f03b2dd22598e3147eb36a48c57efccbbdddfe5f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70fca5181644b1d708e7e71cf844884ef8f34230",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70fca5181644b1d708e7e71cf844884ef8f34230",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70fca5181644b1d708e7e71cf844884ef8f34230",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70fca5181644b1d708e7e71cf844884ef8f34230/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96b2ef77d4e0cf0229e43e4e411bb9f070bc8c12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96b2ef77d4e0cf0229e43e4e411bb9f070bc8c12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96b2ef77d4e0cf0229e43e4e411bb9f070bc8c12"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 21,
      "deletions": 0
    },
    "files": [
      {
        "sha": "aa7adf658cb0bec0ad33f2fb698cb477a4511a53",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70fca5181644b1d708e7e71cf844884ef8f34230/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70fca5181644b1d708e7e71cf844884ef8f34230/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=70fca5181644b1d708e7e71cf844884ef8f34230",
        "patch": "@@ -77,5 +77,26 @@ def run_test(self):\n         ''')\n         self.assert_tool_output(out, '-name=' + wallet_dir(), 'info')\n \n+        out = textwrap.dedent('''\\\n+            Topping up keypool...\n+            Wallet info\n+            ===========\n+            Encrypted: no\n+            HD (hd seed available): yes\n+            Keypool Size: 2000\n+            Transactions: 0\n+            Address Book: 0\n+        ''')\n+        self.assert_tool_output(out, '-name=' + wallet_dir('foo'), 'create')\n+\n+        self.start_node(0, ['-wallet=' + wallet_dir('foo')])\n+        out = self.nodes[0].getwalletinfo()\n+        self.stop_node(0)\n+\n+        assert_equal(0, out['txcount'])\n+        assert_equal(1000, out['keypoolsize'])\n+        assert_equal(1000, out['keypoolsize_hd_internal'])\n+        assert_equal(True, 'hdseedid' in out)\n+\n if __name__ == '__main__':\n     ToolWalletTest().main()"
      }
    ]
  }
]