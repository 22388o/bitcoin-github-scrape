gavinandresen,2011-10-05T14:30:00Z,Does this work on Windows?\n,https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2298474,2298474,
TheBlueMatt,2011-10-05T15:11:23Z,Better question - does this even compile on Windows?\n,https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2298962,2298962,
luke-jr,2011-10-05T15:14:50Z,"Good question. No idea. I don't use Windows... Anyone want to step up to test, or should I resubmit this with non-Windows #ifdefs?\n",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2298997,2298997,
shadders,2011-10-06T10:19:53Z,I didn't think there was such a thing as SIGUSR1 on windows.  \n\nWhilst this is the current implementation many pushpool pools use now it has a couple of limitations that are relevant to pools and some extras that are specific to java based pools (i.e. poolserverj).\n\n1/ it requires the pool engine to be on the same machine as the bitcoin daemon\n2/ Java is flaky enough with SIGUSR1 and cannot d,https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2308367,2308367,
laanwj,2011-10-11T19:23:28Z,"I do think bitcoin needs a mechanism to send asynchronous notifications of incoming transactions, new blocks, whatever a client wants to subscribe to.\n\nHowever, I agree with @shadders, and don't think signals are the preferred interprocess communication method here. Signals are specific to UNIX and pretty annoying to handle at that, as they interrupt system calls, and have many other tricky corn",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2369974,2369974,
d33tah,2011-10-14T04:44:37Z,How about dbus?\n,https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2403325,2403325,
luke-jr,2011-10-14T05:12:40Z,Dbus is a desktop technology. This would primarily be used on servers...\n,https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2403443,2403443,
laanwj,2011-10-14T05:35:46Z,"DBUS, featurewise would be exactly what we need here. It supports both\nsynchronous and asynchronous calls and async notifications/subscriptions, so\nwe could implement the entire bitcoin API plus notifications in it. It also\nhas some rudimentary security features which could come in useful.\n\nHowever it also has some drawbacks:\n- It is bound to one machine: I have tried in the past to use it a",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2403524,2403524,
TheBlueMatt,2011-10-14T13:19:09Z,"I completely agree with luke here.  DBus really isnt the best choice here, primarily because it is really mostly used as a desktop technology.  Additionally, does java have a good DBus library?  One of the complaints about sending a USR1 signal was poor java support therefor.  Although this is largely platform-specific (again, does this compile on windows?) I would say this, it is still worth merg",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2406446,2406446,
d33tah,2011-10-14T15:21:34Z,How about the callback URL's then?\n,https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2407849,2407849,
TheBlueMatt,2011-10-14T15:28:56Z,At that point its getting much too complicated for what it is designed to do.\nIf we use SIGUSR1 some applications (like poolservj) will have to implement a wrapper which receives the signal and forwards it on in another method.\nIf we use callback URLs then other applications either get much more complex or write a wrapper which receives the callback and forwards on a SIGUSR1.\nThere really is no,https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2407911,2407911,
luke-jr,2011-10-14T15:35:29Z,"They don't have to be exclusive, either...\n",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2407982,2407982,
TheBlueMatt,2011-10-14T15:37:31Z,"True, though I would really prefer to KISS here instead of implementing a large new addition for such a simple feature.\n",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2408004,2408004,
shadders,2011-10-14T15:38:07Z,why does it have to be one or other?  I callback side by side with a \nsigusr1 offers both and is trivial to implement on the bitcoin side \ngiven that it already implements a json-rpc client.  It could be easily \nconfigurable to use one or the other or both.   The most common \napplication that needs it (i.e. poolservers) already implement http \nlisteners and go as far as json-rpc listeners.\n\,https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2408013,2408013,
shadders,2011-10-14T15:41:42Z,it's not exactly complicated... a http call.  And if the framework is in \nplace can easily be extended to any either type of event notification.  \nSigusr doesn't provide any granularity.  Unless it goes to a different \npid for every possible permutation of message.   As far as I know you \ncannot add any sort of arbitrary data to the signal to distinguish it.  \nI'm far from knowledgable on sig,https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2408068,2408068,
freewil,2011-10-14T15:44:29Z,"This may be something more thorough than what is needed, but some sort of hooks ""interface""  like @laanwj was saying, for events like new transactions, blocks, etc is much needed. I imagine something flexible like being able to specify in the conf file an event and a script to run or a callback URL to POST to.\n",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2408098,2408098,
shadders,2011-10-14T15:52:52Z,"I think a script call would be just as usable as a callback url.  A \nlittle more fiddly but more flexible if the end user doesn't want to \nimplement a http listener.\n\nOn 15/10/11 01:44, freewil wrote:\n\n> This may be something more thorough than what is needed, but some sort of hooks ""interface""  like @Iaanwj was saying, for events like new transactions, blocks, etc is much needed. I imagine ",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2408181,2408181,
freewil,2011-10-14T15:55:15Z,"Yup, what @shadders says. A script to run (probably passed some helpful arguments) or a callback URL I think gives the best flexibility.\n",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2408208,2408208,
laanwj,2011-10-14T16:06:50Z,"Yes a callback script or URL would have my preference for now. This could do\nanything, including send a signal. And when the system is in place it could\nbe re-used for other kinds of events later on. This provides much more\nflexibility than a fixed signal to a specific PID.\n",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2408355,2408355,
mikegogulski,2011-10-14T19:55:13Z,"Gavin had some ideas about a similar topic way back here: https://github.com/bitcoin/bitcoin/issues/20\n\nI also agree that doing things non-portably (such as via SIGUSR1, as proposed) isn't the right way to go. If a stopgap is needed prior to a full JSON-RPC callback implementation, I'd suggest something like simply writing the new block's hash to a file that can act as a semaphore. Other program",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2410734,2410734,
luke-jr,2011-10-14T20:37:30Z,"A lot of talk as if this is merely a proposed thing, but it's in fact the de-facto standard for pretty much every longpoll-enabled miner.\n",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2411130,2411130,
shadders,2011-10-14T23:47:36Z,"That's a polling not push.  The fallback mechanism for 'listeners' that \ncan't use SIGUSR and don't want to implement a half-node is to poll \ngetblocknumber already.\n\nOn 15/10/11 05:55, Mike Gogulski wrote:\n\n> Gavin had some ideas about a similar topic way back here: https://github.com/bitcoin/bitcoin/issues/20\n> \n> I also agree that doing things non-portably (such as via SIGUSR1, as propo",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2412594,2412594,
luke-jr,2011-10-15T00:00:25Z,"The ideal solution would probably be native longpolling in bitcoind. The file-based mechanism _would_ be push, if you use inotify to monitor it for changes ;)\n",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2412658,2412658,
shadders,2011-10-15T00:00:59Z,Not the case.  Poolserverj is now used by 2 of the 4 largest pools + \nnumerous small pool.  The 2 largest that don't use poolserverj are using \nproprietary pool server and I couldn't say whether they use longpoll \nsignals or not.  It was the standard and when there was only 1 option \nfor OSS pool software it met everyones needs but PSJ's adoption has \npretty clearly demonstrated how limiting ,https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2412659,2412659,
shadders,2011-10-15T00:02:44Z,"On 15/10/11 10:00, Luke-Jr wrote:\n\n> The ideal solution would probably be native longpolling in bitcoind. The file-based mechanism _would_ be push, if you use inotify to monitor it for changes ;)\n\n//inotify/ is a _Linux kernel subsystem_ that acts to extend filesystems \nto notice changes to the filesystem, and report those changes to \napplications./\n\nDo you see the problem here?\n",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2412670,2412670,
mikegogulski,2011-10-15T07:00:40Z,"Suggestion: resolving/merging this should have the lowest possible priority. Why? It benefits ~2 dozen pool operators. Dev attention is far better (as in by orders or magnitude) spent on improving the end-user experience and extending capabilities for commerce.\n\nAlternately, surround the relevant code with ""#ifdef poold"" or something, pull it, and let pool operators build their own. Case closed,",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2414397,2414397,
shadders,2011-10-15T07:15:44Z,To suggest that needs of pool operators are unimportant because there \nonly '~2 dozen' of them is incredibly short sited.  Those 2 dozen are \nhubs for 90% of the hashing power that secures the bitcoin network.  Do \nyou really think there would be as many miners if they all had to mine \nsolo and wait 2 years between payouts?  The existence of pools makes \nbitcoin more secure than it would be w,https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2414422,2414422,
shadders,2011-10-15T07:23:05Z,"p.s. since commerce capabilities meet your classification of 'important' \nconsider this.  Once a push notification mechanism is adopted an obvious \ncommerce use case is notification of new txs.  User makes purchase on \ncart, goes to checkout and gets bitcoin address to pay, sends payment.  \nCart site receives push notification when payment arrives. User may well \nbe waiting on final checkout ",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2414439,2414439,
d33tah,2011-10-15T17:24:18Z,"I agree with shadders - the ""lowest possible priority"" thing is just an obvious misunderstanding of the concept - the IPC code, if implemented correctly, could give benefits to all bitcoind admins - making Bitcoin e-commerce easier. \n",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2416417,2416417,
luke-jr,2011-10-15T17:35:15Z,"Shadders, I consider it a non-issue that Java is too broken to support standard POSIX functionality. Lack of Windows support for SIGUSR1 specifically is also arguably a non-issue, since nobody sane runs servers on Windows anyway-- I suppose I need to add some #ifdefs though. If people actually need something like this on Windows, I'm sure it has some non-standard equivalent too.\n",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2416458,2416458,
mikegogulski,2011-10-15T18:09:31Z,"""IPC code, if implemented correctly, could give benefits to all bitcoind admins""\n\nNo, only to those running bitcoind on the very same machine as their commerce app/pool server -- or running such an app at all. RPC solves the general case, and those running both on the same box can point to localhost.\n\n@shadders: Did you actually read issue 20?\n",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2416641,2416641,
freewil,2011-10-15T18:16:48Z,"Here is gaven's actually work on this, it's probably outdated, but something like this - added with the option of running a script also would solve the problem and make everyone happy I think.\n\nhttps://github.com/gavinandresen/bitcoin-git/commit/f62c6087a2681f568c18f2db05147f227dd06d5b\n",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2416689,2416689,
shadders,2011-10-16T00:58:53Z,"On 16/10/11 04:09, Mike Gogulski wrote:\n\n> @shadders: Did you actually read issue 20?\n> Of course I read it... Are you referring to this part?:\n> ""/Used by basically every pool now/""\n\nUnfortunately that's only true in luke's happy place where JVMs don't \nexist.  What he really means is every pool running pushpool or a \nderivative which is a minority by a very big margin.\n\n/>>>  Shadders,",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2418468,2418468,
luke-jr,2011-10-16T01:15:00Z,Please explain how SIGUSR1 notifications (the topic here) have anything to do with your far more complicated solutions. It's my understanding that your ideas are not in any way exclusive or broken by getting this simple implementation in.\n,https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2418516,2418516,
freewil,2011-10-16T01:29:25Z,> It's my understanding that your ideas are not in any way exclusive or broken by getting this simple implementation in.\n\nI think the goal should be to not include quick solutions like this for every single need in the official release. IMO a far more flexible and comprehensive (therefore superior) solution has been proposed.\n,https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2418552,2418552,
luke-jr,2011-10-16T01:36:54Z,"""Superior"" can be based on a lot of different things. Every other proposed solution requires significantly more code and CPU time to implement, whereas this is a simple standard solution to a simple problem.\n",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2418567,2418567,
freewil,2011-10-16T01:40:16Z,"> Every other proposed solution requires significantly more code and CPU time to implement, whereas this is a simple standard solution to a simple problem.\n\nIf you were able to specify a script/executable to be called upon a ""newblock"" event, and that script/executable simply created the same signal, would this really take up so much more cpu time to be detrimental?\n",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2418574,2418574,
shadders,2011-10-16T01:41:06Z,"On 16/10/11 11:15, Luke-Jr wrote:\n\n> Please explain how SIGUSR1 notifications (the topic here) have anything to do with your far more complicated solutions. It's my understanding that your ideas are not in any way exclusive or broken by getting this simple implementation in.\n> \n> Because the solutions achieve the same goal with none of limitations, \n> significant extra benefits and minimal ex",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2418577,2418577,
luke-jr,2011-10-16T01:41:15Z,"Unlikely. I've never used coinbaser's TCP mode outside of testing, simply because popen wasn't a bottleneck ;)\n",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2418578,2418578,
luke-jr,2011-10-16T01:56:45Z,"By complex, I was mainly referring to JSON/HTTP-based solutions, which require an implementation of both of those specs-- neither part of the common C standard.\n\nAs implied, I did implement TCP support into coinbaser because of the possibility of overhead from executing an external script. I also found it wasn't an issue, so never ported my Eligius code to make use of it. I can also see and agre",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2418636,2418636,
jgarzik,2011-12-19T17:01:35Z,"SIGUSR1 is an ugly hack on pushpool's part. However, it is also very simple and straightforward.  With more complex solutions stalled, I think pragmatism says it would be OK to merge this with some minor changes:\n\n1) rename cmdline option to some Unix-y, like ""-sigusr1file""\n\n2) make sure the code builds on Windows (translation: #ifdef out)\n",https://github.com/bitcoin/bitcoin/pull/555#issuecomment-3205959,3205959,
luke-jr,2011-12-19T19:35:02Z,Superceded with pull #714\n,https://github.com/bitcoin/bitcoin/pull/555#issuecomment-3208247,3208247,
