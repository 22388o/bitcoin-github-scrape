[
  {
    "sha": "4684e3fd2bc06c6fc8c2dab6f1f31375507d8f2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Njg0ZTNmZDJiYzA2YzZmYzhjMmRhYjZmMWYzMTM3NTUwN2Q4ZjJh",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T09:13:19Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-14T17:25:27Z"
      },
      "message": "Debug headers received (\"block\" for new block announcement, \"block2\" for expected).",
      "tree": {
        "sha": "4a16520ca0ef45b738972450593e1733f4b19d74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a16520ca0ef45b738972450593e1733f4b19d74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4684e3fd2bc06c6fc8c2dab6f1f31375507d8f2a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4684e3fd2bc06c6fc8c2dab6f1f31375507d8f2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4684e3fd2bc06c6fc8c2dab6f1f31375507d8f2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4684e3fd2bc06c6fc8c2dab6f1f31375507d8f2a/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a82e5d8220bbc8b5d786bed99b0876f530b9b7cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a82e5d8220bbc8b5d786bed99b0876f530b9b7cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a82e5d8220bbc8b5d786bed99b0876f530b9b7cc"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f0f0394852d356f49d7462cd6a176d6c086f78cc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4684e3fd2bc06c6fc8c2dab6f1f31375507d8f2a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4684e3fd2bc06c6fc8c2dab6f1f31375507d8f2a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4684e3fd2bc06c6fc8c2dab6f1f31375507d8f2a",
        "patch": "@@ -281,6 +281,8 @@ struct CNodeState {\n     int64_t nDownloadingSince;\n     int nBlocksInFlight;\n     int nBlocksInFlightValidHeaders;\n+    //! Whether we have requested headers.\n+    bool fExpectingHeaders;\n     //! Whether we consider this a preferred download peer.\n     bool fPreferredDownload;\n     //! Whether this peer wants invs or headers (when possible) for block announcements.\n@@ -306,6 +308,7 @@ struct CNodeState {\n         nDownloadingSince = 0;\n         nBlocksInFlight = 0;\n         nBlocksInFlightValidHeaders = 0;\n+        fExpectingHeaders = false;\n         fPreferredDownload = false;\n         fPreferHeaders = false;\n         fPreferHeaderAndIDs = false;\n@@ -5253,6 +5256,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     // not a direct successor.\n                     pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), inv.hash);\n                     CNodeState *nodestate = State(pfrom->GetId());\n+                    nodestate->fExpectingHeaders = true;\n                     if (CanDirectFetch(chainparams.GetConsensus()) &&\n                         nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER &&\n                         (!IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n@@ -5616,8 +5620,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         if (mapBlockIndex.find(cmpctblock.header.hashPrevBlock) == mapBlockIndex.end()) {\n             // Doesn't connect (or is genesis), instead of DoSing in AcceptBlockHeader, request deeper headers\n-            if (!IsInitialBlockDownload())\n+            if (!IsInitialBlockDownload()) {\n                 pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256());\n+                State(pfrom->id)->fExpectingHeaders = true;\n+            }\n             return true;\n         }\n \n@@ -5818,6 +5824,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     headers[0].hashPrevBlock.ToString(),\n                     pindexBestHeader->nHeight,\n                     pfrom->id, nodestate->nUnconnectingHeaders);\n+            nodestate->fExpectingHeaders = true;\n             // Set hashLastUnknownBlock for this peer, so that if we\n             // eventually get the headers - even from a different peer -\n             // we can use this peer to download.\n@@ -5844,7 +5851,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     return error(\"invalid header received\");\n                 }\n             }\n+            LogPrint(nodestate->fExpectingHeaders ? \"block2\" : \"block\", \"recv header %s (%d) peer=%d\\n\", header.GetHash().ToString(), pindexLast->nHeight, pfrom->id);\n         }\n+        nodestate->fExpectingHeaders = false;\n \n         if (nodestate->nUnconnectingHeaders > 0) {\n             LogPrint(\"net\", \"peer=%d: resetting nUnconnectingHeaders (%d -> 0)\\n\", pfrom->id, nodestate->nUnconnectingHeaders);\n@@ -5860,6 +5869,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // from there instead.\n             LogPrint(\"net\", \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->id, pfrom->nStartingHeight);\n             pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256());\n+            nodestate->fExpectingHeaders = true;\n         }\n \n         bool fCanDirectFetch = CanDirectFetch(chainparams.GetConsensus());\n@@ -6447,6 +6457,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     pindexStart = pindexStart->pprev;\n                 LogPrint(\"net\", \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->id, pto->nStartingHeight);\n                 pto->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexStart), uint256());\n+                state.fExpectingHeaders = true;\n             }\n         }\n "
      }
    ]
  }
]