[
  {
    "sha": "0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWE0N2JhN2IzOGNjNGIyYjkxNzUzNDdjYjVjZDQ4ZmNkMDhkYTQ4",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-03-06T21:30:00Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-04-11T11:21:49Z"
      },
      "message": "generalize bumpfee to add inputs when needed",
      "tree": {
        "sha": "18a1212973191aca891ece3bcfd52da9b89f467a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18a1212973191aca891ece3bcfd52da9b89f467a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c536dfbcb00fb15963bf5d507b7017c241718bf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c536dfbcb00fb15963bf5d507b7017c241718bf6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c536dfbcb00fb15963bf5d507b7017c241718bf6"
      }
    ],
    "stats": {
      "total": 196,
      "additions": 153,
      "deletions": 43
    },
    "files": [
      {
        "sha": "ed73a71354ae071418ec73b21c8f53038229aece",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48",
        "patch": "@@ -269,8 +269,13 @@ class WalletImpl : public Wallet\n         CAmount& new_fee,\n         CMutableTransaction& mtx) override\n     {\n-        return feebumper::CreateTransaction(m_wallet.get(), txid, coin_control, total_fee, errors, old_fee, new_fee, mtx) ==\n-               feebumper::Result::OK;\n+        if (total_fee > 0) {\n+            return feebumper::CreateTotalBumpTransaction(m_wallet.get(), txid, coin_control, total_fee, errors, old_fee, new_fee, mtx) ==\n+                feebumper::Result::OK;\n+        } else {\n+            return feebumper::CreateRateBumpTransaction(m_wallet.get(), txid, coin_control, errors, old_fee, new_fee, mtx) ==\n+                feebumper::Result::OK;\n+        }\n     }\n     bool signBumpTransaction(CMutableTransaction& mtx) override { return feebumper::SignTransaction(m_wallet.get(), mtx); }\n     bool commitBumpTransaction(const uint256& txid,"
      },
      {
        "sha": "9257b272bc286f3e7e1adb5a77a3e25b2eb7d2fc",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48",
        "patch": "@@ -36,6 +36,8 @@ class CCoinControl\n     bool m_avoid_partial_spends;\n     //! Fee estimation mode to control arguments to estimateSmartFee\n     FeeEstimateMode m_fee_mode;\n+    //! Minimum chain depth value for coin availability\n+    int m_min_depth{0};\n \n     CCoinControl()\n     {"
      },
      {
        "sha": "4ec9dca420cc44c5e49c3d71fb0ea63777dde859",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 121,
        "deletions": 34,
        "changes": 155,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48",
        "patch": "@@ -75,9 +75,11 @@ bool TransactionCanBeBumped(const CWallet* wallet, const uint256& txid)\n     return res == feebumper::Result::OK;\n }\n \n-Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, CAmount total_fee, std::vector<std::string>& errors,\n-                         CAmount& old_fee, CAmount& new_fee, CMutableTransaction& mtx)\n+Result CreateTotalBumpTransaction(const CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, CAmount total_fee, std::vector<std::string>& errors,\n+                                  CAmount& old_fee, CAmount& new_fee, CMutableTransaction& mtx)\n {\n+    new_fee = total_fee;\n+\n     auto locked_chain = wallet->chain().lock();\n     LOCK(wallet->cs_wallet);\n     errors.clear();\n@@ -121,7 +123,6 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n     // calculate the old fee and fee-rate\n     old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n     CFeeRate nOldFeeRate(old_fee, txSize);\n-    CFeeRate nNewFeeRate;\n     // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to\n     // future proof against changes to network wide policy for incremental relay\n     // fee that our node may not be aware of.\n@@ -131,34 +132,17 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n         walletIncrementalRelayFee = nodeIncrementalRelayFee;\n     }\n \n-    if (total_fee > 0) {\n-        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + nodeIncrementalRelayFee.GetFee(maxNewTxSize);\n-        if (total_fee < minTotalFee) {\n-            errors.push_back(strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n-                                                                FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(nodeIncrementalRelayFee.GetFee(maxNewTxSize))));\n-            return Result::INVALID_PARAMETER;\n-        }\n-        CAmount requiredFee = GetRequiredFee(*wallet, maxNewTxSize);\n-        if (total_fee < requiredFee) {\n-            errors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n-                                                                FormatMoney(requiredFee)));\n-            return Result::INVALID_PARAMETER;\n-        }\n-        new_fee = total_fee;\n-        nNewFeeRate = CFeeRate(total_fee, maxNewTxSize);\n-    } else {\n-        new_fee = GetMinimumFee(*wallet, maxNewTxSize, coin_control, nullptr /* FeeCalculation */);\n-        nNewFeeRate = CFeeRate(new_fee, maxNewTxSize);\n-\n-        // New fee rate must be at least old rate + minimum incremental relay rate\n-        // walletIncrementalRelayFee.GetFeePerK() should be exact, because it's initialized\n-        // in that unit (fee per kb).\n-        // However, nOldFeeRate is a calculated value from the tx fee/size, so\n-        // add 1 satoshi to the result, because it may have been rounded down.\n-        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK()) {\n-            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK());\n-            new_fee = nNewFeeRate.GetFee(maxNewTxSize);\n-        }\n+    CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + nodeIncrementalRelayFee.GetFee(maxNewTxSize);\n+    if (total_fee < minTotalFee) {\n+        errors.push_back(strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n+            FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(nodeIncrementalRelayFee.GetFee(maxNewTxSize))));\n+        return Result::INVALID_PARAMETER;\n+    }\n+    CAmount requiredFee = GetRequiredFee(*wallet, maxNewTxSize);\n+    if (total_fee < requiredFee) {\n+        errors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n+            FormatMoney(requiredFee)));\n+        return Result::INVALID_PARAMETER;\n     }\n \n     // Check that in all cases the new fee doesn't violate maxTxFee\n@@ -175,14 +159,14 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n     // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n     // moment earlier. In this case, we report an error to the user, who may use total_fee to make an adjustment.\n     CFeeRate minMempoolFeeRate = wallet->chain().mempoolMinFee();\n+    CFeeRate nNewFeeRate = CFeeRate(total_fee, maxNewTxSize);\n     if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n         errors.push_back(strprintf(\n             \"New fee rate (%s) is lower than the minimum fee rate (%s) to get into the mempool -- \"\n-            \"the totalFee value should be at least %s or the settxfee value should be at least %s to add transaction\",\n+            \"the totalFee value should be at least %s to add transaction\",\n             FormatMoney(nNewFeeRate.GetFeePerK()),\n             FormatMoney(minMempoolFeeRate.GetFeePerK()),\n-            FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)),\n-            FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+            FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize))));\n         return Result::WALLET_ERROR;\n     }\n \n@@ -212,6 +196,109 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n         }\n     }\n \n+    return Result::OK;\n+}\n+\n+\n+Result CreateRateBumpTransaction(CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, std::vector<std::string>& errors,\n+                                 CAmount& old_fee, CAmount& new_fee, CMutableTransaction& mtx)\n+{\n+    // We are going to modify coin control later, copy to re-use\n+    CCoinControl new_coin_control(coin_control);\n+\n+    auto locked_chain = wallet->chain().lock();\n+    LOCK(wallet->cs_wallet);\n+    errors.clear();\n+    auto it = wallet->mapWallet.find(txid);\n+    if (it == wallet->mapWallet.end()) {\n+        errors.push_back(\"Invalid or non-wallet transaction id\");\n+        return Result::INVALID_ADDRESS_OR_KEY;\n+    }\n+    const CWalletTx& wtx = it->second;\n+\n+    Result result = PreconditionChecks(*locked_chain, wallet, wtx, errors);\n+    if (result != Result::OK) {\n+        return result;\n+    }\n+\n+    // Fill in recipients(and preserve a single change key if there is one)\n+    std::vector<CRecipient> recipients;\n+    for (const auto& output : wtx.tx->vout) {\n+        if (!wallet->IsChange(output)) {\n+            CRecipient recipient = {output.scriptPubKey, output.nValue, false};\n+            recipients.push_back(recipient);\n+        } else {\n+            CTxDestination change_dest;\n+            ExtractDestination(output.scriptPubKey, change_dest);\n+            new_coin_control.destChange = change_dest;\n+        }\n+    }\n+\n+    // Get the fee rate of the original transaction. This is calculated from\n+    // the tx fee/vsize, so it may have been rounded down. Add 1 satoshi to the\n+    // result.\n+    old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    // Feerate of thing we are bumping\n+    CFeeRate feerate(old_fee, txSize);\n+    feerate += CFeeRate(1);\n+\n+    // The node has a configurable incremental relay fee. Increment the fee by\n+    // the minimum of that and the wallet's conservative\n+    // WALLET_INCREMENTAL_RELAY_FEE value to future proof against changes to\n+    // network wide policy for incremental relay fee that our node may not be\n+    // aware of. This ensures we're over the over the required relay fee rate\n+    // (BIP 125 rule 4).  The replacement tx will be at least as large as the\n+    // original tx, so the total fee will be greater (BIP 125 rule 3)\n+    CFeeRate node_incremental_relay_fee = wallet->chain().relayIncrementalFee();\n+    CFeeRate wallet_incremental_relay_fee = CFeeRate(WALLET_INCREMENTAL_RELAY_FEE);\n+    feerate += std::max(node_incremental_relay_fee, wallet_incremental_relay_fee);\n+\n+    // Fee rate must also be at least the wallet's GetMinimumFeeRate\n+    CFeeRate min_feerate(GetMinimumFeeRate(*wallet, new_coin_control, /* feeCalc */ nullptr));\n+\n+    // Set the required fee rate for the replacement transaction in coin control.\n+    new_coin_control.m_feerate = std::max(feerate, min_feerate);\n+\n+    // Fill in required inputs we are double-spending(all of them)\n+    // N.B.: bip125 doesn't require all the inputs in the replaced transaction to be\n+    // used in the replacement transaction, but it's very important for wallets to make\n+    // sure that happens. If not, it would be possible to bump a transaction A twice to\n+    // A2 and A3 where A2 and A3 don't conflict (or alternatively bump A to A2 and A2\n+    // to A3 where A and A3 don't conflict). If both later get confirmed then the sender\n+    // has accidentally double paid.\n+    for (const auto& inputs : wtx.tx->vin) {\n+        new_coin_control.Select(COutPoint(inputs.prevout));\n+    }\n+    new_coin_control.fAllowOtherInputs = true;\n+\n+    // We cannot source new unconfirmed inputs(bip125 rule 2)\n+    new_coin_control.m_min_depth = 1;\n+\n+    CTransactionRef tx_new = MakeTransactionRef();\n+    CReserveKey reservekey(wallet);\n+    CAmount fee_ret;\n+    int change_pos_in_out = -1; // No requested location for change\n+    std::string fail_reason;\n+    if (!wallet->CreateTransaction(*locked_chain, recipients, tx_new, reservekey, fee_ret, change_pos_in_out, fail_reason, new_coin_control, false)) {\n+        errors.push_back(\"Unable to create transaction: \" + fail_reason);\n+        return Result::WALLET_ERROR;\n+    }\n+\n+    // If change key hasn't been ReturnKey'ed by this point, we take it out of keypool\n+    reservekey.KeepKey();\n+\n+    // Write back new fee if successful\n+    new_fee = fee_ret;\n+\n+    // Write back transaction\n+    mtx = CMutableTransaction(*tx_new);\n+    // Mark new tx not replaceable, if requested.\n+    if (!coin_control.m_signal_bip125_rbf.get_value_or(wallet->m_signal_rbf)) {\n+        for (auto& input : mtx.vin) {\n+            if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n+        }\n+    }\n \n     return Result::OK;\n }"
      },
      {
        "sha": "f9cbfc5f686b8d2ee32a5c89bb71e528af2616e4",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48",
        "patch": "@@ -28,8 +28,8 @@ enum class Result\n //! Return whether transaction can be bumped.\n bool TransactionCanBeBumped(const CWallet* wallet, const uint256& txid);\n \n-//! Create bumpfee transaction.\n-Result CreateTransaction(const CWallet* wallet,\n+//! Create bumpfee transaction based on total amount.\n+Result CreateTotalBumpTransaction(const CWallet* wallet,\n                          const uint256& txid,\n                          const CCoinControl& coin_control,\n                          CAmount total_fee,\n@@ -38,6 +38,15 @@ Result CreateTransaction(const CWallet* wallet,\n                          CAmount& new_fee,\n                          CMutableTransaction& mtx);\n \n+//! Create bumpfee transaction based on feerate estimates.\n+Result CreateRateBumpTransaction(CWallet* wallet,\n+                         const uint256& txid,\n+                         const CCoinControl& coin_control,\n+                         std::vector<std::string>& errors,\n+                         CAmount& old_fee,\n+                         CAmount& new_fee,\n+                         CMutableTransaction& mtx);\n+\n //! Sign the new transaction,\n //! @return false if the tx couldn't be found or if it was\n //! impossible to create the signature(s)"
      },
      {
        "sha": "c0c9345bd795b7487600cd802425d4ac25f800dd",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48",
        "patch": "@@ -3167,9 +3167,9 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n             RPCHelpMan{\"bumpfee\",\n                 \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n                 \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n-                \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n-                \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n-                \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+                \"The command will pay the additional fee by reducing change outputs or adding inputs when necessary. It may add a new change output if one does not already exist.\\n\"\n+                \"If `totalFee` is given, adding inputs is not supported, so there must be a single change output that is big enough or it will fail.\\n\"\n+                \"All inputs in the original transaction will be included in the replacement transaction.\\n\"\n                 \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n                 \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n                 \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n@@ -3266,7 +3266,14 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     CAmount old_fee;\n     CAmount new_fee;\n     CMutableTransaction mtx;\n-    feebumper::Result res = feebumper::CreateTransaction(pwallet, hash, coin_control, totalFee, errors, old_fee, new_fee, mtx);\n+    feebumper::Result res;\n+    if (totalFee > 0) {\n+        // Targeting total fee bump. Requires a change output of sufficient size.\n+        res = feebumper::CreateTotalBumpTransaction(pwallet, hash, coin_control, totalFee, errors, old_fee, new_fee, mtx);\n+    } else {\n+        // Targeting feerate bump.\n+        res = feebumper::CreateRateBumpTransaction(pwallet, hash, coin_control, errors, old_fee, new_fee, mtx);\n+    }\n     if (res != feebumper::Result::OK) {\n         switch(res) {\n             case feebumper::Result::INVALID_ADDRESS_OR_KEY:"
      },
      {
        "sha": "98ba489729b75d9224ad8929d6b9dc383d03b3c8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48",
        "patch": "@@ -2736,7 +2736,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n         LOCK(cs_wallet);\n         {\n             std::vector<COutput> vAvailableCoins;\n-            AvailableCoins(*locked_chain, vAvailableCoins, true, &coin_control);\n+            AvailableCoins(*locked_chain, vAvailableCoins, true, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0, coin_control.m_min_depth);\n             CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n \n             // Create change script that will be used if we need change"
      }
    ]
  },
  {
    "sha": "d08becff853739ccfee5f0af14649b60c78199cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDhiZWNmZjg1MzczOWNjZmVlNWYwYWYxNDY0OWI2MGM3ODE5OWNm",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-03-08T16:30:53Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-04-11T11:21:49Z"
      },
      "message": "add functional tests for feerate bumpfee with adding inputs",
      "tree": {
        "sha": "aba168630018437b7551dd5a4168fb447e0e40a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aba168630018437b7551dd5a4168fb447e0e40a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d08becff853739ccfee5f0af14649b60c78199cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d08becff853739ccfee5f0af14649b60c78199cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d08becff853739ccfee5f0af14649b60c78199cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d08becff853739ccfee5f0af14649b60c78199cf/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ea47ba7b38cc4b2b9175347cb5cd48fcd08da48"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 49,
      "deletions": 5
    },
    "files": [
      {
        "sha": "37c457ef618516de0871fb1ea48353904561a0f0",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 49,
        "deletions": 5,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d08becff853739ccfee5f0af14649b60c78199cf/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d08becff853739ccfee5f0af14649b60c78199cf/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=d08becff853739ccfee5f0af14649b60c78199cf",
        "patch": "@@ -73,6 +73,9 @@ def run_test(self):\n         test_unconfirmed_not_spendable(rbf_node, rbf_node_address)\n         test_bumpfee_metadata(rbf_node, dest_address)\n         test_locked_wallet_fails(rbf_node, dest_address)\n+        # These tests wipe out a number of utxos that are expected in other tests\n+        test_small_output_with_feerate_succeeds(rbf_node, dest_address)\n+        test_no_more_inputs_fails(rbf_node, dest_address)\n         self.log.info(\"Success\")\n \n \n@@ -173,6 +176,40 @@ def test_small_output_fails(rbf_node, dest_address):\n     rbfid = spend_one_input(rbf_node, dest_address)\n     assert_raises_rpc_error(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 50001})\n \n+def test_small_output_with_feerate_succeeds(rbf_node, dest_address):\n+\n+    # Make sure additional inputs exist\n+    rbf_node.generatetoaddress(101, rbf_node.getnewaddress())\n+    rbfid = spend_one_input(rbf_node, dest_address)\n+    original_input_list = rbf_node.getrawtransaction(rbfid, 1)[\"vin\"]\n+    assert_equal(len(original_input_list), 1)\n+    original_txin = original_input_list[0]\n+    # Keep bumping until we out-spend change output\n+    tx_fee = 0\n+    while tx_fee < Decimal(\"0.0005\"):\n+        new_input_list = rbf_node.getrawtransaction(rbfid, 1)[\"vin\"]\n+        new_item = list(new_input_list)[0]\n+        assert_equal(len(original_input_list), 1)\n+        assert_equal(original_txin[\"txid\"], new_item[\"txid\"])\n+        assert_equal(original_txin[\"vout\"], new_item[\"vout\"])\n+        rbfid_new_details = rbf_node.bumpfee(rbfid)\n+        rbfid_new = rbfid_new_details[\"txid\"]\n+        raw_pool = rbf_node.getrawmempool()\n+        assert rbfid not in raw_pool\n+        assert rbfid_new in raw_pool\n+        rbfid = rbfid_new\n+        tx_fee = rbfid_new_details[\"origfee\"]\n+\n+    # input(s) have been added\n+    final_input_list = rbf_node.getrawtransaction(rbfid, 1)[\"vin\"]\n+    assert_greater_than(len(final_input_list), 1)\n+    # Original input is in final set\n+    assert [txin for txin in final_input_list\n+            if txin[\"txid\"] == original_txin[\"txid\"]\n+            and txin[\"vout\"] == original_txin[\"vout\"]]\n+\n+    rbf_node.generatetoaddress(1, rbf_node.getnewaddress())\n+    assert_equal(rbf_node.gettransaction(rbfid)[\"confirmations\"], 1)\n \n def test_dust_to_fee(rbf_node, dest_address):\n     # check that if output is reduced to dust, it will be converted to fee\n@@ -272,19 +309,20 @@ def test_locked_wallet_fails(rbf_node, dest_address):\n     rbf_node.walletlock()\n     assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first.\",\n                             rbf_node.bumpfee, rbfid)\n+    rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n \n-def spend_one_input(node, dest_address):\n+def spend_one_input(node, dest_address, change_size=Decimal(\"0.00049000\")):\n     tx_input = dict(\n         sequence=BIP125_SEQUENCE_NUMBER, **next(u for u in node.listunspent() if u[\"amount\"] == Decimal(\"0.00100000\")))\n-    rawtx = node.createrawtransaction(\n-        [tx_input], {dest_address: Decimal(\"0.00050000\"),\n-                     node.getrawchangeaddress(): Decimal(\"0.00049000\")})\n+    destinations = {dest_address: Decimal(\"0.00050000\")}\n+    if change_size > 0:\n+        destinations[node.getrawchangeaddress()] = change_size\n+    rawtx = node.createrawtransaction([tx_input], destinations)\n     signedtx = node.signrawtransactionwithwallet(rawtx)\n     txid = node.sendrawtransaction(signedtx[\"hex\"])\n     return txid\n \n-\n def submit_block_with_tx(node, tx):\n     ctx = CTransaction()\n     ctx.deserialize(io.BytesIO(hex_str_to_bytes(tx)))\n@@ -301,6 +339,12 @@ def submit_block_with_tx(node, tx):\n     node.submitblock(block.serialize(True).hex())\n     return block\n \n+def test_no_more_inputs_fails(rbf_node, dest_address):\n+    # feerate rbf requires confirmed outputs when change output doesn't exist or is insufficient\n+    rbf_node.generatetoaddress(1, dest_address)\n+    # spend all funds, no change output\n+    rbfid = rbf_node.sendtoaddress(rbf_node.getnewaddress(), rbf_node.getbalance(), \"\", \"\", True)\n+    assert_raises_rpc_error(-4, \"Unable to create transaction: Insufficient funds\", rbf_node.bumpfee, rbfid)\n \n if __name__ == \"__main__\":\n     BumpFeeTest().main()"
      }
    ]
  },
  {
    "sha": "184f8785f710d58d9ef82e611591c9cbff5ab89d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODRmODc4NWY3MTBkNThkOWVmODJlNjExNTkxYzljYmZmNWFiODlk",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-03-08T21:43:40Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-04-11T11:21:49Z"
      },
      "message": "wallet_bumpfee.py: add test for change key preservation",
      "tree": {
        "sha": "725d7a1a242ff55dbce6e12af12771168e3f697c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/725d7a1a242ff55dbce6e12af12771168e3f697c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/184f8785f710d58d9ef82e611591c9cbff5ab89d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/184f8785f710d58d9ef82e611591c9cbff5ab89d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/184f8785f710d58d9ef82e611591c9cbff5ab89d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/184f8785f710d58d9ef82e611591c9cbff5ab89d/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d08becff853739ccfee5f0af14649b60c78199cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d08becff853739ccfee5f0af14649b60c78199cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d08becff853739ccfee5f0af14649b60c78199cf"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9ea61fe7bda1b6b607114647970c3a21cb7ad22d",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/184f8785f710d58d9ef82e611591c9cbff5ab89d/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/184f8785f710d58d9ef82e611591c9cbff5ab89d/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=184f8785f710d58d9ef82e611591c9cbff5ab89d",
        "patch": "@@ -73,6 +73,7 @@ def run_test(self):\n         test_unconfirmed_not_spendable(rbf_node, rbf_node_address)\n         test_bumpfee_metadata(rbf_node, dest_address)\n         test_locked_wallet_fails(rbf_node, dest_address)\n+        test_change_script_match(rbf_node, dest_address)\n         # These tests wipe out a number of utxos that are expected in other tests\n         test_small_output_with_feerate_succeeds(rbf_node, dest_address)\n         test_no_more_inputs_fails(rbf_node, dest_address)\n@@ -311,6 +312,23 @@ def test_locked_wallet_fails(rbf_node, dest_address):\n                             rbf_node.bumpfee, rbfid)\n     rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n+def test_change_script_match(rbf_node, dest_address):\n+    \"\"\"Test that the same change addresses is used for the replacement transaction when possible.\"\"\"\n+    def get_change_address(tx):\n+        tx_details = rbf_node.getrawtransaction(tx, 1)\n+        txout_addresses = [txout['scriptPubKey']['addresses'][0] for txout in tx_details[\"vout\"]]\n+        return [address for address in txout_addresses if rbf_node.getaddressinfo(address)[\"ischange\"]]\n+\n+    # Check that there is only one change output\n+    rbfid = spend_one_input(rbf_node, dest_address)\n+    change_addresses = get_change_address(rbfid)\n+    assert_equal(len(change_addresses), 1)\n+\n+    # Now find that address in each subsequent tx, and no other change\n+    bumped_total_tx = rbf_node.bumpfee(rbfid, {\"totalFee\": 2000})\n+    assert_equal(change_addresses, get_change_address(bumped_total_tx['txid']))\n+    bumped_rate_tx = rbf_node.bumpfee(bumped_total_tx[\"txid\"])\n+    assert_equal(change_addresses, get_change_address(bumped_rate_tx['txid']))\n \n def spend_one_input(node, dest_address, change_size=Decimal(\"0.00049000\")):\n     tx_input = dict("
      }
    ]
  }
]