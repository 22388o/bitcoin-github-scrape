instagibbs,2019-03-07T18:38:06Z,A slight alternative is to just nuke `totalFee` from orbit and delete all the redundant code.,https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-470643646,470643646,
instagibbs,2019-03-07T18:41:23Z,having QT unit test issues... anyone know how that's possible given the diff?,https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-470644814,470644814,
DrahtBot,2019-03-07T20:04:19Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15656](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15656.html) (wallet: Keep all outputs in bumpfee by prom",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-470673644,470673644,
instagibbs,2019-03-07T20:30:03Z,"fixed QT issue, addressed nit",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-470681987,470681987,
Sjors,2019-03-08T17:41:42Z,"Concept ACK, including on removing `totalFee`.\n\nCan you split `CreateRateBumpTransaction` into a function that creates the transaction and one that signs it? That should make it easier to use PSBT and e.g. add `signerbumpfee` to #14912.",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-471013715,471013715,
instagibbs,2019-03-08T17:56:59Z,"> Can you split CreateRateBumpTransaction into a function that creates the transaction and one that signs it?\n\nIt already doesn't sign anything. \n\n>  including on removing totalFee\n\nI Looked at doing this and it removes a number of test cases that I'd have to think about harder how to test with a fee-rate only solution. Still might be worth it, but I left as-is for now since testing ca",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-471018469,471018469,
promag,2019-03-17T23:22:29Z,"@instagibbs have you considered using `CWallet::FundTransaction`? Maybe the reason to not use it is too obvious, what am I missing?",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-473726062,473726062,
instagibbs,2019-03-18T13:23:56Z,"@promag well for one FundTransaction doesn't have any notion of pre-existing change outputs, so I'd still have to pre-process that information. I don't see much/any possibility for code reduction?",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-473907825,473907825,
instagibbs,2019-03-19T18:27:17Z,"@ryanofsky good suggestions thanks, fixed.",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-474513548,474513548,
instagibbs,2019-03-21T11:30:42Z,rebased,https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-475194822,475194822,
jnewbery,2019-03-21T19:43:28Z,"This is great. Strong concept ACK.\n\nBIP125 doesn't require all the inputs in the replaced transaction to be used in the replacement transaction, but it's very important for wallets to make sure that happens. If not, it would be possible to bump a transaction A twice to A2 and A3 where A2 and A3 don't conflict (or alternatively bump A to A2 and A2 to A3 where A and A3 don't conflict). If both l",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-475375483,475375483,
promag,2019-03-22T00:51:49Z,"> If both later get confirmed then the sender has accidentally double paid.\n\nIf there's no conflict how is it double paid?",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-475455806,475455806,
instagibbs,2019-03-22T00:54:29Z,"Conflict with respect to spent I inputs not destinations.\n\nOn Thu, Mar 21, 2019, 8:52 PM João Barbosa <notifications@github.com> wrote:\n\n> If both later get confirmed then the sender has accidentally double paid.\n>\n> If there's no conflict how is it double paid?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-475456263,475456263,
promag,2019-03-22T08:52:12Z,"@instagibbs right, double paid, not double spent.",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-475539740,475539740,
instagibbs,2019-03-22T13:49:55Z,"@jnewbery Comments addressed, and paragraphed poached if that's ok :)",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-475627827,475627827,
instagibbs,2019-03-22T13:50:24Z,"Also added a small note on the need for confirmed new inputs as not a bip125 requirement, but of current mempool relay policy.",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-475628006,475628006,
jnewbery,2019-03-22T14:10:30Z,"Thanks @instagibbs . Looks good.\n\n> Also added a small note on the need for confirmed new inputs as not a bip125 requirement, but of current mempool relay policy.\n\nMaybe I'm misunderstanding this comment, but I think this is a BIP 125 requirement (rule 2).",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-475635364,475635364,
instagibbs,2019-03-22T14:14:24Z,"@jnewbery Oh I'm misremembering: It's not an RBF rule, just bip125!",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-475636822,475636822,
instagibbs,2019-03-22T14:15:49Z,@jnewbery fixed comment,https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-475637382,475637382,
instagibbs,2019-04-03T13:53:52Z,@jnewbery comments addressed,https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-479499282,479499282,
jnewbery,2019-04-08T20:50:51Z,"I left a bunch of nits, mostly on Python code style, which you should feel free to ignore.\n\nI think functionally this is fine. My main concern is the introduction of a lot of duplicate code between `CreateTotalBumpTransaction()` and `CreateRateBumpTransaction()`, but I don't think that should prevent merge.",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-481002887,481002887,
instagibbs,2019-04-10T19:22:27Z,"> My main concern is the introduction of a lot of duplicate code between CreateTotalBumpTransaction() and CreateRateBumpTransaction()\n\nIf I have proper concept ACKs my next step would likely be removing the total bump altogether, which will mostly involve re-jiggering test coverage.",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-481827790,481827790,
instagibbs,2019-04-10T20:01:21Z,Addressed most comments with more concise/clear code and tests.,https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-481840629,481840629,
instagibbs,2019-04-10T22:26:47Z,"I don't have as much time as I'd like to perfect my tests sadly, thanks for the robust feedback. ",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-481889540,481889540,
jnewbery,2019-04-11T14:31:55Z,"utACK 184f8785f710d58d9ef82e611591c9cbff5ab89d\n\n@ryanofsky - are you able to reACK? Should be minor changes since your last ACK.\n\n@Sjors @promag @stevenroose - you've all concept ACKed this. Are you able to review? Code changes are very clear so this should be a fairly easy review.",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-482139144,482139144,
promag,2019-04-11T14:58:47Z,Someone can reply to this https://github.com/bitcoin/bitcoin/pull/15557#discussion_r267522514?,https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-482150216,482150216,
instagibbs,2019-04-11T15:37:19Z,"If you intentionally send to a raw change address it may but that's not\nreally an intended work flow.\n\nOn Thu, Apr 11, 2019, 11:30 AM John Newbery <notifications@github.com>\nwrote:\n\n> *@jnewbery* commented on this pull request.\n> ------------------------------\n>\n> In src/wallet/feebumper.cpp\n> <https://github.com/bitcoin/bitcoin/pull/15557#discussion_r274483048>:\n>\n> > +\n> +    Result",https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-482166159,482166159,
promag,2019-04-14T14:17:19Z,utACK 01c1cb8.,https://github.com/bitcoin/bitcoin/pull/15557#issuecomment-482985563,482985563,
promag,2019-03-07T18:23:20Z,"nit, `int m_min_depth{0};`",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r263508599,263508599,src/wallet/coincontrol.h
promag,2019-03-07T18:38:32Z,"Could have this in a function:\n```\nfeebumper::CreateTransaction(...)\n    if (total_fee > 0) {\n        return feebumper::CreateTotalBumpTransaction(...) \n    } else {\n        return feebumper::CreateRateBumpTransaction(...)\n    }\n}\n```",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r263514125,263514125,src/interfaces/wallet.cpp
instagibbs,2019-03-07T18:42:57Z,`CreateTransaction` always messed with my ctags anyways because of CWallet's ... :P ,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r263515717,263515717,src/interfaces/wallet.cpp
Sjors,2019-03-08T19:42:11Z,I think you should store the change address and reuse it when present.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r263905277,263905277,src/wallet/feebumper.cpp
instagibbs,2019-03-08T21:44:28Z,"fixed, and added test for both bump modes.",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r263940747,263940747,src/wallet/feebumper.cpp
practicalswift,2019-03-09T07:07:12Z,"Should be ""sufficient"" :-)",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r263989563,263989563,src/wallet/rpcwallet.cpp
practicalswift,2019-03-09T07:07:55Z,Nit: `for _ in range(12):` is more idiomatic when `_` is unused :-),https://github.com/bitcoin/bitcoin/pull/15557#discussion_r263989583,263989583,test/functional/wallet_bumpfee.py
instagibbs,2019-03-09T13:53:47Z,using it now :),https://github.com/bitcoin/bitcoin/pull/15557#discussion_r264000048,264000048,test/functional/wallet_bumpfee.py
instagibbs,2019-03-09T13:53:52Z,fixed,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r264000049,264000049,src/wallet/rpcwallet.cpp
stevenroose,2019-03-14T15:11:09Z,This huge indentation seems unnecessary.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r265618007,265618007,src/wallet/feebumper.cpp
stevenroose,2019-03-14T15:11:26Z,"This huge indentation seems unnecessary.\n",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r265618137,265618137,src/wallet/feebumper.cpp
ryanofsky,2019-03-19T15:51:48Z,"In commit ""generalize bumpfee to add inputs when needed"" (9240ff641006e8c3c76721232b46d99934f8431e)\n\nCan you change ""If `totalFee` is given no new inputs will be selected"" to ""If `totalFee` is given, adding new inputs is not supported""? I was confused looking at this and trying to figure out how totalFee had anything to do with adding new inputs, until I read the PR history.\n\nAlso would ch",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r266962044,266962044,src/wallet/rpcwallet.cpp
ryanofsky,2019-03-19T16:16:16Z,"In commit ""generalize bumpfee to add inputs when needed"" (9240ff641006e8c3c76721232b46d99934f8431e)\n\nWould suggest changing ""The command will pay the additional fee by decreasing (or perhaps removing) its change output or adding inputs when necessary."" to ""The command will pay the additional fee by reducing change outputs or adding inputs when necessary. It may add a new change output if one d",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r266974971,266974971,src/wallet/rpcwallet.cpp
ryanofsky,2019-03-19T16:40:36Z,"In commit ""add functional tests for feerate bumpfee with adding inputs"" (a14707cb44f300dbeef94b84746fba943a5c29ba)\n\nCould remove line break since this is shorter.",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r266986927,266986927,test/functional/wallet_bumpfee.py
ryanofsky,2019-03-19T16:48:52Z,"In commit ""add functional tests for feerate bumpfee with adding inputs"" (a14707cb44f300dbeef94b84746fba943a5c29ba)\n\nNote: New change_size parameter doesn't actually seem to be used in this PR. Seems fine to keep though, I think it makes the code more readable.",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r266990904,266990904,test/functional/wallet_bumpfee.py
ryanofsky,2019-03-19T17:00:04Z,"In commit ""wallet_bumpfee.py: add test for change key preservation"" (5cedf2295934637af451e977ed13d61762f41d0b)\n\nIf none of the outputs are change, `address` will just be set to the last output address. Probably should add `change_address = None` before the loop, `change_address = address` before the break, and use `change_address` instead of `address` below.",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r266996556,266996556,test/functional/wallet_bumpfee.py
ryanofsky,2019-03-19T17:02:16Z,"In commit ""wallet_bumpfee.py: add test for change key preservation"" (5cedf2295934637af451e977ed13d61762f41d0b):\n\n`== True` is usually avoided in python (https://docs.quantifiedcode.com/python-anti-patterns/readability/comparison_to_true.html). Can just drop it here and below.",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r266997693,266997693,test/functional/wallet_bumpfee.py
instagibbs,2019-03-19T17:24:58Z,Yes I previously used it in tests but ended up not needing it with smarter looping checks.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r267008874,267008874,test/functional/wallet_bumpfee.py
instagibbs,2019-03-19T18:05:12Z,"nevermind, re-read",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r267027760,267027760,src/wallet/rpcwallet.cpp
ryanofsky,2019-03-19T18:35:09Z,"In commit ""generalize bumpfee to add inputs when needed"" (d5c0e53264a7eaf72c2691e3c19ce9fc60d3acf6)\n\nI think this needs a comma after ""given"" to be grammatical (sorry to be pedantic, but I did double-check https://www.ego4u.com/en/cram-up/writing/comma?10  :bowtie:).",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r267040633,267040633,src/wallet/rpcwallet.cpp
instagibbs,2019-03-19T18:47:00Z,commas are for dweebs. fixed.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r267045751,267045751,src/wallet/rpcwallet.cpp
promag,2019-03-20T20:04:08Z,"If by any chance there are multiple `IsChange` outputs the last is used and the others are removed. Is this acceptable? A simple solution is to check:\n```cpp\nif (wallet->IsChange(output) && new_coin_control.destChange != CNoDestination) {\n    // preserve first change\n} else {\n    // add recipient\n}\n```\n\n",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r267522514,267522514,src/wallet/feebumper.cpp
ryanofsky,2019-03-21T12:34:54Z," In commit ""generalize bumpfee to add inputs when needed"" (ee4fc9ab67f5021c80a12d158a25e9d2bf1c0dfc)\n\nHere and one place below, s/::incrementalRelayFee/nodeIncrementalRelayFee/\n\n(Sorry about this. I need to make some build changes that will cause accesses to node globals from wallet code to result in explicit link errors: https://github.com/bitcoin/bitcoin/pull/10973#pullrequestreview-2130",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r267735431,267735431,src/wallet/feebumper.cpp
instagibbs,2019-03-21T12:44:25Z,argh sorry for not reading more carefully. fixed.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r267738382,267738382,src/wallet/feebumper.cpp
jnewbery,2019-04-02T16:42:41Z,nit: increase indentation to match movement of open-parens in line above.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r271397539,271397539,src/wallet/feebumper.cpp
jnewbery,2019-04-02T16:48:52Z,See the error text below: `the totalFee value should be at least %s or the settxfee value should be at least %s to add transaction`. Please remove the reference to `settxfee` since it's no longer used in this function (it was used in the call to `GetMinimumFee()`.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r271400019,271400019,src/wallet/feebumper.cpp
jnewbery,2019-04-02T16:51:29Z,No need anymore to declare `nNewFeeRate` at line 122 above. You can move the declaration and assignment down to below the `// check that fee rate is higher than mempool's ...` comment below.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r271401097,271401097,src/wallet/feebumper.cpp
jnewbery,2019-04-02T16:58:49Z,This could potentially be moved to the top of the function.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r271404078,271404078,src/wallet/feebumper.cpp
jnewbery,2019-04-02T16:59:29Z,nit: please align with open-parens.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r271404360,271404360,src/wallet/feebumper.cpp
jnewbery,2019-04-02T17:04:30Z,"I think this line should go below the comment below, since it's logically linked to the relay fee, not the feerate of the tx.",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r271406219,271406219,src/wallet/feebumper.cpp
jnewbery,2019-04-02T17:09:55Z,Any reason for changing this from using `nullptr` as the `feeCalc` argument? Instantiating the unused variable `fee_calc` seems unnecessary and confusing.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r271408222,271408222,src/wallet/feebumper.cpp
jnewbery,2019-04-02T17:18:25Z,`AvailableCoins()` could be refactored to not take an `nMinDepth` argument now that coin control has a `m_min_depth` member. Could be done in a follow-up PR.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r271411570,271411570,src/wallet/wallet.cpp
instagibbs,2019-04-03T13:49:31Z,"as a larger discussion(for another time), what should be in CCoinControl and what shouldn't be? It's nice to have a compact struct that describes the intent of each payment, including all known constraints by the caller.",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r271751778,271751778,src/wallet/wallet.cpp
instagibbs,2019-04-03T13:49:54Z,is there a style guide entry for this? I don't really know the convention.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r271751926,271751926,src/wallet/feebumper.cpp
jnewbery,2019-04-03T14:03:12Z,"No style guide entry I don't think. I just saw that the old function had aligned arguments, and when you copied it and changed the length of the function name it unaligned it.",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r271758308,271758308,src/wallet/feebumper.cpp
jnewbery,2019-04-03T22:25:13Z,"I haven't been able to dig into this fully, but do you need to call `CReserveKey::KeepKey()` on this reserve key to remove it from the key pool after using it?",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r271956393,271956393,src/wallet/feebumper.cpp
instagibbs,2019-04-04T18:41:00Z,"good catch, fixed. ",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r272314642,272314642,src/wallet/feebumper.cpp
jnewbery,2019-04-08T18:26:43Z,"I know this code is mostly inherited from the existing `feebumper::CreateTransaction()`, but I think it can be made a lot more readable. `CFeeRate` overrides the `<` operator (so `std::max` can be used) and the `+=` operator. Do you think the following code is clearer:\n\n```c++\n    // Get the fee rate of the original transaction. This is calculated from\n    // the tx fee/vsize, so it may ha",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r273180654,273180654,src/wallet/feebumper.cpp
jnewbery,2019-04-08T18:26:49Z,"This could be slightly more accurate if it said ""preserve a change destination if there is one""",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r273180722,273180722,src/wallet/feebumper.cpp
jnewbery,2019-04-08T18:41:53Z,"nit: prefer using named arguments when using RPCs:\n- makes it clear what the argument is (with positional arguments I have to guess what `True` refers to here)\n- you don't have to pass the empty strings for the unused arguments.",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r273186642,273186642,test/functional/wallet_bumpfee.py
jnewbery,2019-04-08T18:43:40Z,micronit: prefer defining these subtest methods in the order they're called in the `run_test()` method.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r273187375,273187375,test/functional/wallet_bumpfee.py
jnewbery,2019-04-08T18:52:32Z,Redundant line. `original_input_set` doesn't change in the loop and has already been tested.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r273190655,273190655,test/functional/wallet_bumpfee.py
jnewbery,2019-04-08T18:53:12Z,`assert` is not a function. Remove parens,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r273190919,273190919,test/functional/wallet_bumpfee.py
jnewbery,2019-04-08T18:53:59Z,What does `det` mean here?,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r273191204,273191204,test/functional/wallet_bumpfee.py
jnewbery,2019-04-08T18:56:25Z,Why not use the verbose output of `getrawtransaction` and get the inputs directly instead of deserializing the hex tx?,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r273192108,273192108,test/functional/wallet_bumpfee.py
jnewbery,2019-04-08T18:57:26Z,"nit: This variable gets updated, so I think `tx_fee` would be a more appropriate name.",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r273192482,273192482,test/functional/wallet_bumpfee.py
jnewbery,2019-04-08T18:57:50Z,nit: `item` is vague here. Why not `txin`?,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r273192616,273192616,test/functional/wallet_bumpfee.py
jnewbery,2019-04-08T19:04:28Z,Why a set rather than a list?,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r273194972,273194972,test/functional/wallet_bumpfee.py
jnewbery,2019-04-08T19:08:10Z,"More concise:\n\n```python\n    assert [txin for txin in final_input_set\n            if txin.hash == original_item.hash\n            and txin.n == original_item.n]\n```",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r273196250,273196250,test/functional/wallet_bumpfee.py
jnewbery,2019-04-08T20:19:45Z,"This is a shame. At the moment I think the subtests can be run in any order. It'd be nice to keep that property (so, for example, anyone adding new subtests doesn't need to worry about state carried over from previous tests). Is it possible to rewrite your subtests in such a way to only use the existing outputs and not generate new blocks? For the `test_no_more_inputs_fails()` test you could lock ",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r273221315,273221315,test/functional/wallet_bumpfee.py
jnewbery,2019-04-08T20:45:02Z,I think this could do with a doc string explaining what this subtest is testing.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r273230985,273230985,test/functional/wallet_bumpfee.py
jnewbery,2019-04-08T20:46:24Z,"A bit more concise:\n\n```python\ndef test_change_script_match(rbf_node, dest_address):\n    """"""Test that the same change addresses is used for the replacement transaction when possible.""""""\n    def get_change_address(tx):\n        tx_details = rbf_node.getrawtransaction(tx, 1)\n        txout_addresses = [txout['scriptPubKey']['addresses'][0] for txout in tx_details[""vout""]]\n        retur",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r273231524,273231524,test/functional/wallet_bumpfee.py
instagibbs,2019-04-10T19:20:25Z,details :) ill expand,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r274118509,274118509,test/functional/wallet_bumpfee.py
instagibbs,2019-04-10T19:29:34Z,"good suggestions, will use",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r274121693,274121693,src/wallet/feebumper.cpp
instagibbs,2019-04-10T19:29:43Z,sure,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r274121751,274121751,src/wallet/feebumper.cpp
instagibbs,2019-04-10T19:30:48Z,done,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r274122185,274122185,test/functional/wallet_bumpfee.py
instagibbs,2019-04-10T19:31:37Z,not immediately apparent to the reader(me) imo. leaving this in.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r274122467,274122467,test/functional/wallet_bumpfee.py
instagibbs,2019-04-10T19:37:44Z,"I think I had a reason but can't recall, will adapt",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r274124591,274124591,test/functional/wallet_bumpfee.py
instagibbs,2019-04-10T19:37:53Z,sure,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r274124642,274124642,test/functional/wallet_bumpfee.py
jnewbery,2019-04-10T22:07:50Z,Remove this new import of `FromHex` to satisfy the linter.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r274183524,274183524,test/functional/wallet_bumpfee.py
instagibbs,2019-04-10T22:25:33Z,fixed.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r274187876,274187876,test/functional/wallet_bumpfee.py
jnewbery,2019-04-11T15:27:32Z,"I think it's acceptable. I don't believe that Bitcoin Core wallet will produce transactions with more than one change output.\n\nEDIT: ... and if a user manually creates a transaction with more than one change output, I think it's fine for bumpfee to aggregate them into a single change output (since there's no way for the user to specify which change output should have the fee delta removed).",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r274483048,274483048,src/wallet/feebumper.cpp
ryanofsky,2019-04-11T15:35:33Z,"https://github.com/bitcoin/bitcoin/pull/15557#discussion_r272314642\n\n> good catch, fixed.\n\nThis was a pretty serious bug right? At least a privacy leak? Or am I mistaken?\n\nAssuming this was serious, it seems like we should do something to prevent this happening in the future, like asserting in the `CReserveKey` destructor that either KeepKey or Reservekey was previously called.",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r274487083,274487083,src/wallet/feebumper.cpp
instagibbs,2019-04-11T16:07:19Z,"I think this would happen if you bumped the transaction, created a new change output, and then make another change output before the next block is seen. Otherwise the keypool-scanning we do would have taken care of it as soon as it's seen in a block.\n\nA more conservative change that doesn't involve asserting would be to replace the `ReturnKey` call in the destructor to `KeepKey`, the idea bein",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r274501295,274501295,src/wallet/feebumper.cpp
jnewbery,2019-04-11T16:38:40Z,"The worst possible outcome would have been reusing a keypool address for change in multiple transactions. It's a marginal privacy leak but not disastrous.\n\nThe whole `CReserveKey` `GetReservedKey()`-`ReturnKey()`-`KeepKey()` cycle seems pretty brittle to me, and I think should be refactored. I haven't figured out exactly how yet, but I have a PR here: #15777 that documents how it currently wor",https://github.com/bitcoin/bitcoin/pull/15557#discussion_r274514853,274514853,src/wallet/feebumper.cpp
promag,2019-04-14T14:05:37Z,Thanks @jnewbery.,https://github.com/bitcoin/bitcoin/pull/15557#discussion_r275158551,275158551,src/wallet/feebumper.cpp
