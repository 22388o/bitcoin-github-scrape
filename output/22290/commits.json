[
  {
    "sha": "f1b86db4e591902e136939c1a259f36ca7f0d39f",
    "node_id": "C_kwDOABII59oAKGYxYjg2ZGI0ZTU5MTkwMmUxMzY5MzljMWEyNTlmMzZjYTdmMGQzOWY",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-07T13:08:32Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-23T08:42:56Z"
      },
      "message": "[packages] add sanity checks for package vs mempool limits",
      "tree": {
        "sha": "d63129d7c35d8f8fcc04d3a2f799e0b827e4848a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d63129d7c35d8f8fcc04d3a2f799e0b827e4848a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1b86db4e591902e136939c1a259f36ca7f0d39f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1b86db4e591902e136939c1a259f36ca7f0d39f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1b86db4e591902e136939c1a259f36ca7f0d39f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1b86db4e591902e136939c1a259f36ca7f0d39f/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8bda5e0988e1e5e2336ad47095b93f136fef5fcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bda5e0988e1e5e2336ad47095b93f136fef5fcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bda5e0988e1e5e2336ad47095b93f136fef5fcf"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fbff2a3e254eba8f7efd3ca55a01d6237ff9965d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1b86db4e591902e136939c1a259f36ca7f0d39f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1b86db4e591902e136939c1a259f36ca7f0d39f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f1b86db4e591902e136939c1a259f36ca7f0d39f",
        "patch": "@@ -953,6 +953,10 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n {\n     AssertLockHeld(cs_main);\n \n+    // TODO: handle the case where the user has configured their mempool limits to be more\n+    // restrictive than package limits. Make this check parameterizable but avoid introducing more\n+    // globals. We might need to distinguish between mempool and network-wide package limits or\n+    // just do limited package validation.\n     // These context-free package limits can be done before taking the mempool lock.\n     PackageValidationState package_state;\n     if (!CheckPackage(txns, package_state)) return PackageMempoolAcceptResult(package_state, {});"
      },
      {
        "sha": "90452cd56051549ac090e309058ec1722b39213d",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1b86db4e591902e136939c1a259f36ca7f0d39f/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1b86db4e591902e136939c1a259f36ca7f0d39f/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=f1b86db4e591902e136939c1a259f36ca7f0d39f",
        "patch": "@@ -60,6 +60,13 @@ static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 101;\n static const unsigned int DEFAULT_DESCENDANT_LIMIT = 25;\n /** Default for -limitdescendantsize, maximum kilobytes of in-mempool descendants */\n static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\n+\n+// It doesn't make sense for package limits to exceed default mempool ancestor/descendant limits.\n+static_assert(DEFAULT_DESCENDANT_LIMIT >= MAX_PACKAGE_COUNT);\n+static_assert(DEFAULT_ANCESTOR_LIMIT >= MAX_PACKAGE_COUNT);\n+static_assert(DEFAULT_ANCESTOR_SIZE_LIMIT >= MAX_PACKAGE_SIZE);\n+static_assert(DEFAULT_DESCENDANT_SIZE_LIMIT >= MAX_PACKAGE_SIZE);\n+\n /** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\n static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 336;\n /** Maximum number of dedicated script-checking threads allowed */"
      }
    ]
  },
  {
    "sha": "d9f3230248e2453195a1b771ef1206e0424203e2",
    "node_id": "C_kwDOABII59oAKGQ5ZjMyMzAyNDhlMjQ1MzE5NWExYjc3MWVmMTIwNmUwNDI0MjAzZTI",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-20T12:46:47Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-23T08:42:56Z"
      },
      "message": "[packages] distinguish severity of package errors\n\nNo change in behavior.\nThis will help us distinguish between punishable protocol-violation\nerros and mempool policy-related rejections later. Starting the\ndistinction here because we will be enforcing IsChildWithParents on\nmempool submissions.",
      "tree": {
        "sha": "f858da044628191ff5f05e034ded006e2b7fbc66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f858da044628191ff5f05e034ded006e2b7fbc66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9f3230248e2453195a1b771ef1206e0424203e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9f3230248e2453195a1b771ef1206e0424203e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9f3230248e2453195a1b771ef1206e0424203e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9f3230248e2453195a1b771ef1206e0424203e2/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1b86db4e591902e136939c1a259f36ca7f0d39f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1b86db4e591902e136939c1a259f36ca7f0d39f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1b86db4e591902e136939c1a259f36ca7f0d39f"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 24,
      "deletions": 15
    },
    "files": [
      {
        "sha": "eaaf9701f695962819959b187b4d890c5bf31983",
        "filename": "src/policy/packages.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9f3230248e2453195a1b771ef1206e0424203e2/src/policy/packages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9f3230248e2453195a1b771ef1206e0424203e2/src/policy/packages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/packages.cpp?ref=d9f3230248e2453195a1b771ef1206e0424203e2",
        "patch": "@@ -16,14 +16,14 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     const unsigned int package_count = txns.size();\n \n     if (package_count > MAX_PACKAGE_COUNT) {\n-        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+        return state.Invalid(PackageValidationResult::PCKG_BAD, \"package-too-many-transactions\");\n     }\n \n     const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n                                [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n     // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n     if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n-        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n+        return state.Invalid(PackageValidationResult::PCKG_BAD, \"package-too-large\");\n     }\n \n     // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n@@ -37,7 +37,7 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n         for (const auto& input : tx->vin) {\n             if (later_txids.find(input.prevout.hash) != later_txids.end()) {\n                 // The parent is a subsequent transaction in the package.\n-                return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                return state.Invalid(PackageValidationResult::PCKG_BAD, \"package-not-sorted\");\n             }\n         }\n         later_txids.erase(tx->GetHash());\n@@ -49,7 +49,7 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n         for (const auto& input : tx->vin) {\n             if (inputs_seen.find(input.prevout) != inputs_seen.end()) {\n                 // This input is also present in another tx in the package.\n-                return state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflict-in-package\");\n+                return state.Invalid(PackageValidationResult::PCKG_BAD, \"conflict-in-package\");\n             }\n         }\n         // Batch-add all the inputs for a tx at a time. If we added them 1 at a time, we could"
      },
      {
        "sha": "184c449042890a1da02f68c412c218b068ff9542",
        "filename": "src/policy/packages.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9f3230248e2453195a1b771ef1206e0424203e2/src/policy/packages.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9f3230248e2453195a1b771ef1206e0424203e2/src/policy/packages.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/packages.h?ref=d9f3230248e2453195a1b771ef1206e0424203e2",
        "patch": "@@ -18,13 +18,15 @@ static constexpr uint32_t MAX_PACKAGE_SIZE{101};\n static_assert(MAX_PACKAGE_SIZE * WITNESS_SCALE_FACTOR * 1000 >= MAX_STANDARD_TX_WEIGHT);\n \n /** A \"reason\" why a package was invalid. It may be that one or more of the included\n- * transactions is invalid or the package itself violates our rules.\n- * We don't distinguish between consensus and policy violations right now.\n+ * transactions is invalid or the package itself fails. It's possible for failures to arise from\n+ * rule violations or mempool policy.\n  */\n enum class PackageValidationResult {\n     PCKG_RESULT_UNSET = 0,        //!< Initial value. The package has not yet been rejected.\n-    PCKG_POLICY,                  //!< The package itself is invalid (e.g. too many transactions).\n-    PCKG_TX,                      //!< At least one tx is invalid.\n+    PCKG_BAD,                     //!< The package itself is invalid or malformed.\n+    PCKG_POLICY,                  //!< The package failed due to package-related mempool policy.\n+    PCKG_TX_CONSENSUS,            //!< At least one tx is invalid for consensus reasons.\n+    PCKG_TX_POLICY,               //!< At least one tx is invalid for non-consensus reasons.\n };\n \n /** A package is an ordered list of transactions. The transactions cannot conflict with (spend the\n@@ -33,7 +35,7 @@ using Package = std::vector<CTransactionRef>;\n \n class PackageValidationState : public ValidationState<PackageValidationResult> {};\n \n-/** Context-free package policy checks:\n+/** Context-free package sanitization. A package is not well-formed if it fails any of these checks:\n  * 1. The number of transactions cannot exceed MAX_PACKAGE_COUNT.\n  * 2. The total virtual size cannot exceed MAX_PACKAGE_SIZE.\n  * 3. If any dependencies exist between transactions, parents must appear before children."
      },
      {
        "sha": "7d9f86fa6c8ffc75de761e1887ab0bd7546ebe90",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9f3230248e2453195a1b771ef1206e0424203e2/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9f3230248e2453195a1b771ef1206e0424203e2/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d9f3230248e2453195a1b771ef1206e0424203e2",
        "patch": "@@ -983,7 +983,8 @@ static RPCHelpMan testmempoolaccept()\n         UniValue result_inner(UniValue::VOBJ);\n         result_inner.pushKV(\"txid\", tx->GetHash().GetHex());\n         result_inner.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-        if (package_result.m_state.GetResult() == PackageValidationResult::PCKG_POLICY) {\n+        if (package_result.m_state.GetResult() == PackageValidationResult::PCKG_BAD ||\n+            package_result.m_state.GetResult() == PackageValidationResult::PCKG_POLICY) {\n             result_inner.pushKV(\"package-error\", package_result.m_state.GetRejectReason());\n         }\n         auto it = package_result.m_tx_results.find(tx->GetWitnessHash());"
      },
      {
        "sha": "9d112b80be94dbf26208d6301673f8d5f58c877a",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9f3230248e2453195a1b771ef1206e0424203e2/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9f3230248e2453195a1b771ef1206e0424203e2/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=d9f3230248e2453195a1b771ef1206e0424203e2",
        "patch": "@@ -113,7 +113,7 @@ BOOST_FIXTURE_TEST_CASE(package_tests, TestChain100Setup)\n     }\n     auto result_too_many = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package_too_many, /* test_accept */ true);\n     BOOST_CHECK(result_too_many.m_state.IsInvalid());\n-    BOOST_CHECK_EQUAL(result_too_many.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+    BOOST_CHECK_EQUAL(result_too_many.m_state.GetResult(), PackageValidationResult::PCKG_BAD);\n     BOOST_CHECK_EQUAL(result_too_many.m_state.GetRejectReason(), \"package-too-many-transactions\");\n \n     // Packages can't have a total size of more than 101KvB.\n@@ -128,15 +128,15 @@ BOOST_FIXTURE_TEST_CASE(package_tests, TestChain100Setup)\n     BOOST_CHECK(package_too_large.size() <= MAX_PACKAGE_COUNT);\n     auto result_too_large = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package_too_large, /* test_accept */ true);\n     BOOST_CHECK(result_too_large.m_state.IsInvalid());\n-    BOOST_CHECK_EQUAL(result_too_large.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+    BOOST_CHECK_EQUAL(result_too_large.m_state.GetResult(), PackageValidationResult::PCKG_BAD);\n     BOOST_CHECK_EQUAL(result_too_large.m_state.GetRejectReason(), \"package-too-large\");\n \n     // A single, giant transaction submitted through ProcessNewPackage fails on single tx policy.\n     CTransactionRef giant_ptx = create_placeholder_tx(999, 999);\n     BOOST_CHECK(GetVirtualTransactionSize(*giant_ptx) > MAX_PACKAGE_SIZE * 1000);\n     auto result_single_large = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, {giant_ptx}, /* test_accept */ true);\n     BOOST_CHECK(result_single_large.m_state.IsInvalid());\n-    BOOST_CHECK_EQUAL(result_single_large.m_state.GetResult(), PackageValidationResult::PCKG_TX);\n+    BOOST_CHECK_EQUAL(result_single_large.m_state.GetResult(), PackageValidationResult::PCKG_TX_POLICY);\n     BOOST_CHECK_EQUAL(result_single_large.m_state.GetRejectReason(), \"transaction failed\");\n     auto it_giant_tx = result_single_large.m_tx_results.find(giant_ptx->GetWitnessHash());\n     BOOST_CHECK(it_giant_tx != result_single_large.m_tx_results.end());"
      },
      {
        "sha": "916a6bc400ce27dc594c1a045ef8817e7d2774ef",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9f3230248e2453195a1b771ef1206e0424203e2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9f3230248e2453195a1b771ef1206e0424203e2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d9f3230248e2453195a1b771ef1206e0424203e2",
        "patch": "@@ -972,7 +972,10 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n     for (Workspace& ws : workspaces) {\n         if (!PreChecks(args, ws)) {\n-            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            package_state.Invalid(ws.m_state.GetResult() == TxValidationResult::TX_CONSENSUS\n+                                  ? PackageValidationResult::PCKG_TX_CONSENSUS\n+                                  : PackageValidationResult::PCKG_TX_POLICY,\n+                                  \"transaction failed\");\n             // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n             results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n             return PackageMempoolAcceptResult(package_state, std::move(results));\n@@ -1002,7 +1005,10 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         PrecomputedTransactionData txdata;\n         if (!PolicyScriptChecks(args, ws, txdata)) {\n             // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n-            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            package_state.Invalid(ws.m_state.GetResult() == TxValidationResult::TX_CONSENSUS\n+                                  ? PackageValidationResult::PCKG_TX_CONSENSUS\n+                                  : PackageValidationResult::PCKG_TX_POLICY,\n+                                  \"transaction failed\");\n             results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n             return PackageMempoolAcceptResult(package_state, std::move(results));\n         }"
      }
    ]
  },
  {
    "sha": "014f2af89a1ce596cc5e0fe81605dde27915e82f",
    "node_id": "C_kwDOABII59oAKDAxNGYyYWY4OWExY2U1OTZjYzVlMGZlODE2MDVkZGUyNzkxNWU4MmY",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-20T09:41:00Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-24T14:07:23Z"
      },
      "message": "[validation] case-based constructors for ATMPArgs\n\nNo change in behavior.\nATMPArgs can continue to have granular rules like switching BIP125\non/off while we create an interface for the different sets of rules for\nsingle transactions vs multiple-testmempoolaccept vs package validation.\nThis is a cleaner interface than manually constructing the args, which\nmakes it easy to mix up ordering, use the wrong default, etc. It also\nmeans we don't need to edit ATMP/single transaction validation code\nevery time we update ATMPArgs for package validation.",
      "tree": {
        "sha": "f8341db90e6c27894d5be12c7ab6731fe2d8e710",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8341db90e6c27894d5be12c7ab6731fe2d8e710"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/014f2af89a1ce596cc5e0fe81605dde27915e82f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/014f2af89a1ce596cc5e0fe81605dde27915e82f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/014f2af89a1ce596cc5e0fe81605dde27915e82f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/014f2af89a1ce596cc5e0fe81605dde27915e82f/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9f3230248e2453195a1b771ef1206e0424203e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9f3230248e2453195a1b771ef1206e0424203e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9f3230248e2453195a1b771ef1206e0424203e2"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 32,
      "deletions": 6
    },
    "files": [
      {
        "sha": "8e6545b2b606fb47c302ce6f85f6d361bef9d938",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 6,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/014f2af89a1ce596cc5e0fe81605dde27915e82f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/014f2af89a1ce596cc5e0fe81605dde27915e82f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=014f2af89a1ce596cc5e0fe81605dde27915e82f",
        "patch": "@@ -449,7 +449,36 @@ class MemPoolAccept\n         /** Whether we allow transactions to replace mempool transactions by BIP125 rules. If false,\n          * any transaction spending the same inputs as a transaction in the mempool is considered\n          * a conflict. */\n-        const bool m_allow_bip125_replacement{true};\n+        const bool m_allow_bip125_replacement;\n+\n+        /** Parameters for single transaction mempool validation. */\n+        static ATMPArgs SingleAccept(const CChainParams& chainparams, int64_t accept_time,\n+                                     bool bypass_limits, bool test_accept,\n+                                     std::vector<COutPoint>& coins_to_uncache) {\n+            return ATMPArgs{/* m_chainparams */ chainparams,\n+                            /* m_accept_time */ accept_time,\n+                            /* m_bypass_limits */ bypass_limits,\n+                            /* m_coins_to_uncache */ coins_to_uncache,\n+                            /* m_test_accept */ test_accept,\n+                            /* m_allow_bip125_replacement */ true,\n+            };\n+        }\n+\n+        /** Parameters for test package mempool validation through. */\n+        static ATMPArgs PackageTestAccept(const CChainParams& chainparams, int64_t accept_time,\n+                                          std::vector<COutPoint>& coins_to_uncache) {\n+            return ATMPArgs{/* m_chainparams */ chainparams,\n+                            /* m_accept_time */ accept_time,\n+                            /* m_bypass_limits */ false,\n+                            /* m_coins_to_uncache */ coins_to_uncache,\n+                            /* m_test_accept */ true,\n+                            /* m_allow_bip125_replacement */ false,\n+            };\n+        }\n+\n+        // No default ctor to avoid exposing details to clients and allowing the possibility of\n+        // mixing up the order of the arguments. Use static functions above instead.\n+        ATMPArgs() = delete;\n     };\n \n     // Single transaction acceptance\n@@ -1033,9 +1062,7 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n                                                       EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, nAcceptTime, bypass_limits, coins_to_uncache,\n-                                   test_accept, /* m_allow_bip125_replacement */ true };\n-\n+    auto args = MemPoolAccept::ATMPArgs::SingleAccept(chainparams, nAcceptTime, bypass_limits, test_accept, coins_to_uncache);\n     const MempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptSingleTransaction(tx, args);\n     if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n         // Remove coins that were not present in the coins cache before calling\n@@ -1068,8 +1095,7 @@ PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTx\n \n     std::vector<COutPoint> coins_to_uncache;\n     const CChainParams& chainparams = Params();\n-    MemPoolAccept::ATMPArgs args { chainparams, GetTime(), /* bypass_limits */ false, coins_to_uncache,\n-                                   test_accept, /* m_allow_bip125_replacement */ false };\n+    auto args = MemPoolAccept::ATMPArgs::PackageTestAccept(chainparams, GetTime(), coins_to_uncache);\n     const PackageMempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n \n     // Uncache coins pertaining to transactions that were not submitted to the mempool."
      }
    ]
  },
  {
    "sha": "c075453c6917128551c1941b0ac342a4dec5db7b",
    "node_id": "C_kwDOABII59oAKGMwNzU0NTNjNjkxNzEyODU1MWMxOTQxYjBhYzM0MmE0ZGVjNWRiN2I",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-02T12:09:11Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-24T14:07:23Z"
      },
      "message": "[validation] cache virtual size in Workspace struct\n\nThis is not only cleaner but also helps make sure we are always using\nthe virtual size measure that includes sigops.\nNot in the scripted-diff because there are many other instances of nSize\nwithin validation.cpp and it's simpler to keep in a separate commit.",
      "tree": {
        "sha": "c31b61e8c33a11393ed8d2636f4e547afe30c2e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c31b61e8c33a11393ed8d2636f4e547afe30c2e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c075453c6917128551c1941b0ac342a4dec5db7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c075453c6917128551c1941b0ac342a4dec5db7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c075453c6917128551c1941b0ac342a4dec5db7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c075453c6917128551c1941b0ac342a4dec5db7b/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "014f2af89a1ce596cc5e0fe81605dde27915e82f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/014f2af89a1ce596cc5e0fe81605dde27915e82f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/014f2af89a1ce596cc5e0fe81605dde27915e82f"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 11,
      "deletions": 6
    },
    "files": [
      {
        "sha": "05792b6af38e5db2e75bad8bfd486492f7107d0d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c075453c6917128551c1941b0ac342a4dec5db7b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c075453c6917128551c1941b0ac342a4dec5db7b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c075453c6917128551c1941b0ac342a4dec5db7b",
        "patch": "@@ -503,6 +503,9 @@ class MemPoolAccept\n         std::list<CTransactionRef> m_replaced_transactions;\n \n         bool m_replacement_transaction;\n+        /** Virtual size of the transaction as used by the mempool, calculated using serialized size\n+         * of the transaction and sigops. */\n+        int64_t m_vsize;\n         CAmount m_base_fees;\n         CAmount m_modified_fees;\n         /** Total modified fees of all transactions being replaced. */\n@@ -727,15 +730,15 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     entry.reset(new CTxMemPoolEntry(ptx, ws.m_base_fees, nAcceptTime, m_active_chainstate.m_chain.Height(),\n             fSpendsCoinbase, nSigOpsCost, lp));\n-    unsigned int nSize = entry->GetTxSize();\n+    ws.m_vsize = entry->GetTxSize();\n \n     if (nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST)\n         return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"bad-txns-too-many-sigops\",\n                 strprintf(\"%d\", nSigOpsCost));\n \n     // No transactions are allowed below minRelayTxFee except from disconnected\n     // blocks\n-    if (!bypass_limits && !CheckFeeRate(nSize, nModifiedFees, state)) return false;\n+    if (!bypass_limits && !CheckFeeRate(ws.m_vsize, nModifiedFees, state)) return false;\n \n     const CTxMemPool::setEntries setIterConflicting = m_pool.GetIterSet(setConflicts);\n     // Calculate in-mempool ancestors, up to a limit.\n@@ -790,7 +793,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+        if (ws.m_vsize > EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n                 !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", errString);\n         }\n@@ -808,8 +811,9 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n \n     fReplacementTransaction = setConflicts.size();\n-    if (fReplacementTransaction) {\n-        CFeeRate newFeeRate(nModifiedFees, nSize);\n+    if (fReplacementTransaction)\n+    {\n+        CFeeRate newFeeRate(nModifiedFees, ws.m_vsize);\n         // It's possible that the replacement pays more fees than its direct conflicts but not more\n         // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n         // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n@@ -837,7 +841,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n             nConflictingFees += it->GetModifiedFee();\n             nConflictingSize += it->GetTxSize();\n         }\n-        if (const auto err_string{PaysForRBF(nConflictingFees, nModifiedFees, nSize, ::incrementalRelayFee, hash)}) {\n+        if (const auto err_string{PaysForRBF(nConflictingFees, nModifiedFees, ws.m_vsize,\n+                                             ::incrementalRelayFee, hash)}) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "27179e111a8b587b9055172fc4ce8ffe98621792",
    "node_id": "C_kwDOABII59oAKDI3MTc5ZTExMWE4YjU4N2I5MDU1MTcyZmM0Y2U4ZmZlOTg2MjE3OTI",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-04T10:33:46Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-24T14:07:23Z"
      },
      "message": "[validation/rpc] use MempoolAcceptResult vsize for fee check and results\n\nThis uses the vsize that includes sigops weight. It also prevents a bug\nwhere, we swap a package transaction for a same-txid-different-wtxid\nmempool transaction and put the wrong virtual size in the RPC result.",
      "tree": {
        "sha": "7b0a7d216ce59ff9cdbb6ad34104ac9bf531ea7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b0a7d216ce59ff9cdbb6ad34104ac9bf531ea7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27179e111a8b587b9055172fc4ce8ffe98621792",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27179e111a8b587b9055172fc4ce8ffe98621792",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27179e111a8b587b9055172fc4ce8ffe98621792",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27179e111a8b587b9055172fc4ce8ffe98621792/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c075453c6917128551c1941b0ac342a4dec5db7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c075453c6917128551c1941b0ac342a4dec5db7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c075453c6917128551c1941b0ac342a4dec5db7b"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 11,
      "deletions": 8
    },
    "files": [
      {
        "sha": "92afdf80ba36c2eaa0b121a43f09ac2364618b18",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27179e111a8b587b9055172fc4ce8ffe98621792/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27179e111a8b587b9055172fc4ce8ffe98621792/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=27179e111a8b587b9055172fc4ce8ffe98621792",
        "patch": "@@ -997,7 +997,7 @@ static RPCHelpMan testmempoolaccept()\n         if (tx_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             const CAmount fee = tx_result.m_base_fees.value();\n             // Check that fee does not exceed maximum fee\n-            const int64_t virtual_size = GetVirtualTransactionSize(*tx);\n+            const int64_t virtual_size = tx_result.m_vsize.value();\n             const CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n             if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n                 result_inner.pushKV(\"allowed\", false);"
      },
      {
        "sha": "5ac26fba281e94fdca7072858ea5893acfa829f9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27179e111a8b587b9055172fc4ce8ffe98621792/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27179e111a8b587b9055172fc4ce8ffe98621792/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=27179e111a8b587b9055172fc4ce8ffe98621792",
        "patch": "@@ -973,14 +973,14 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_vsize, ws.m_base_fees);\n     }\n \n     if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_vsize, ws.m_base_fees);\n }\n \n PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n@@ -1050,7 +1050,8 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are\n             // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).\n             results.emplace(ws.m_ptx->GetWitnessHash(),\n-                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees));\n+                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions),\n+                                                         ws.m_vsize, ws.m_base_fees));\n         }\n     }\n "
      },
      {
        "sha": "85177b1c989ef05bc9d908c6f9ddb8a44d37bb72",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27179e111a8b587b9055172fc4ce8ffe98621792/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27179e111a8b587b9055172fc4ce8ffe98621792/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=27179e111a8b587b9055172fc4ce8ffe98621792",
        "patch": "@@ -164,14 +164,16 @@ struct MempoolAcceptResult {\n     // The following fields are only present when m_result_type = ResultType::VALID\n     /** Mempool transactions replaced by the tx per BIP 125 rules. */\n     const std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    /** Virtual size as used by the mempool, calculated using serialized size and sigops. */\n+    const std::optional<int64_t> m_vsize;\n     /** Raw base fees in satoshis. */\n     const std::optional<CAmount> m_base_fees;\n     static MempoolAcceptResult Failure(TxValidationState state) {\n         return MempoolAcceptResult(state);\n     }\n \n-    static MempoolAcceptResult Success(std::list<CTransactionRef>&& replaced_txns, CAmount fees) {\n-        return MempoolAcceptResult(std::move(replaced_txns), fees);\n+    static MempoolAcceptResult Success(std::list<CTransactionRef>&& replaced_txns, int64_t vsize, CAmount fees) {\n+        return MempoolAcceptResult(std::move(replaced_txns), vsize, fees);\n     }\n \n // Private constructors. Use static methods MempoolAcceptResult::Success, etc. to construct.\n@@ -183,9 +185,9 @@ struct MempoolAcceptResult {\n         }\n \n     /** Constructor for success case */\n-    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, CAmount fees)\n+    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, int64_t vsize, CAmount fees)\n         : m_result_type(ResultType::VALID),\n-        m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n+        m_replaced_transactions(std::move(replaced_txns)), m_vsize{vsize}, m_base_fees(fees) {}\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "3c6be6e38374cd6138292fb2d19c76c18a653bd5",
    "node_id": "C_kwDOABII59oAKDNjNmJlNmUzODM3NGNkNjEzODI5MmZiMmQxOWM3NmMxOGE2NTNiZDU",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-09T09:36:23Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-24T14:07:23Z"
      },
      "message": "[validation] make descendant limits per-transaction\n\nNote to reviewers: this commit should not change any current behavior\nbecause package conflicts are disallowed.\n\nDescendant limits are still mempool-wide. When a transaction has\nconflicts in the mempool, descendant limits may be increased (in\nPreChecks) to account for replaced transactions. Not doing this now\nwould cause a bug where every package transaction could increase the\ndescendant limit despite having unrelated conflicts, resulting in an\ninflated descendant limit.",
      "tree": {
        "sha": "2424316116d563b8f9154e5e24216a91620a770f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2424316116d563b8f9154e5e24216a91620a770f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c6be6e38374cd6138292fb2d19c76c18a653bd5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c6be6e38374cd6138292fb2d19c76c18a653bd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c6be6e38374cd6138292fb2d19c76c18a653bd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c6be6e38374cd6138292fb2d19c76c18a653bd5/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27179e111a8b587b9055172fc4ce8ffe98621792",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27179e111a8b587b9055172fc4ce8ffe98621792",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27179e111a8b587b9055172fc4ce8ffe98621792"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 27,
      "deletions": 13
    },
    "files": [
      {
        "sha": "d581741500bac2a2bcf343bf88990cd2bc271a9d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 13,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c6be6e38374cd6138292fb2d19c76c18a653bd5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c6be6e38374cd6138292fb2d19c76c18a653bd5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3c6be6e38374cd6138292fb2d19c76c18a653bd5",
        "patch": "@@ -495,7 +495,10 @@ class MemPoolAccept\n     // All the intermediate state that gets passed between the various levels\n     // of checking a given transaction.\n     struct Workspace {\n-        explicit Workspace(const CTransactionRef& ptx) : m_ptx(ptx), m_hash(ptx->GetHash()) {}\n+        explicit Workspace(const CTransactionRef& ptx, size_t limit_descendants, size_t limit_descendant_size) :\n+            m_ptx(ptx), m_hash(ptx->GetHash()),\n+            m_tx_limit_descendants{limit_descendants},\n+            m_tx_limit_descendant_size{limit_descendant_size} {}\n         std::set<uint256> m_conflicts;\n         CTxMemPool::setEntries m_all_conflicting;\n         CTxMemPool::setEntries m_ancestors;\n@@ -516,6 +519,12 @@ class MemPoolAccept\n         const CTransactionRef& m_ptx;\n         const uint256& m_hash;\n         TxValidationState m_state;\n+\n+        // Descendant limits passed in to CalculateMemPoolAncestors() for this transaction.\n+        // These may be modified while evaluating a transaction (eg to account for in-mempool\n+        // conflicts; see the comment in PreChecks).\n+        size_t m_tx_limit_descendants;\n+        size_t m_tx_limit_descendant_size;\n     };\n \n     // Run the policy checks on a given transaction, excluding any script checks.\n@@ -562,12 +571,13 @@ class MemPoolAccept\n     CChainState& m_active_chainstate;\n \n     // The package limits in effect at the time of invocation.\n+    // The same ancestor limits are applied for every transaction.\n     const size_t m_limit_ancestors;\n     const size_t m_limit_ancestor_size;\n-    // These may be modified while evaluating a transaction (eg to account for\n-    // in-mempool conflicts; see below).\n-    size_t m_limit_descendants;\n-    size_t m_limit_descendant_size;\n+    // These are the default limits. Each transaction workspace also keeps track of its own\n+    // descendant limits, which may be edited to account for the transaction's mempool conflicts.\n+    const size_t m_limit_descendants;\n+    const size_t m_limit_descendant_size;\n };\n \n bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n@@ -773,12 +783,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         assert(setIterConflicting.size() == 1);\n         CTxMemPool::txiter conflict = *setIterConflicting.begin();\n \n-        m_limit_descendants += 1;\n-        m_limit_descendant_size += conflict->GetSizeWithDescendants();\n+        ws.m_tx_limit_descendants += 1;\n+        ws.m_tx_limit_descendant_size += conflict->GetSizeWithDescendants();\n     }\n \n     std::string errString;\n-    if (!m_pool.CalculateMemPoolAncestors(*entry, setAncestors, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants, m_limit_descendant_size, errString)) {\n+    if (!m_pool.CalculateMemPoolAncestors(*entry, setAncestors, m_limit_ancestors, m_limit_ancestor_size,\n+            ws.m_tx_limit_descendants, ws.m_tx_limit_descendant_size, errString)) {\n         setAncestors.clear();\n         // If CalculateMemPoolAncestors fails second time, we want the original error string.\n         std::string dummy_err_string;\n@@ -793,8 +804,10 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (ws.m_vsize > EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+            !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, /* limitancestors */ 2,\n+                m_limit_ancestor_size, ws.m_tx_limit_descendants + 1,\n+                ws.m_tx_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", errString);\n         }\n     }\n@@ -957,7 +970,7 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n-    Workspace ws(ptx);\n+    Workspace ws(ptx, m_limit_descendants, m_limit_descendant_size);\n \n     if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n@@ -997,8 +1010,9 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n \n     std::vector<Workspace> workspaces{};\n     workspaces.reserve(txns.size());\n-    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces),\n-                   [](const auto& tx) { return Workspace(tx); });\n+    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces), [this](const auto& tx) {\n+        return Workspace(tx, m_limit_descendants, m_limit_descendant_size);\n+    });\n     std::map<const uint256, const MempoolAcceptResult> results;\n \n     LOCK(m_pool.cs);"
      }
    ]
  },
  {
    "sha": "ea4257360388946abbb3559394b1a0cff8eddcc6",
    "node_id": "C_kwDOABII59oAKGVhNDI1NzM2MDM4ODk0NmFiYmIzNTU5Mzk0YjFhMGNmZjhlZGRjYzY",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-03T10:54:42Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-24T14:07:23Z"
      },
      "message": "scripted-diff: clean up MemPoolAccept aliases\n\nThe aliases are leftover from a previous MOVEONLY refactor - they are\nunnecessary and removing them reduces the diff for splitting out mempool\nChecks from PreChecks, making RBF variables MemPoolAccept-wide, etc.\n\n-BEGIN VERIFY SCRIPT-\n\nunalias() { sed -i \"s:\\<$1\\>:$2:g\" src/validation.cpp; sed -i \"/$2 = $2/d\" src/validation.cpp; }\n\nunalias nModifiedFees ws.m_modified_fees\nunalias nConflictingFees ws.m_conflicting_fees\nunalias nConflictingSize ws.m_conflicting_size\nunalias fReplacementTransaction ws.m_replacement_transaction\nunalias setConflicts ws.m_conflicts\nunalias allConflicting ws.m_all_conflicting\nunalias setAncestors ws.m_ancestors\n\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "c7676015890ff09fdac709195f6ab4ae1ad305d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7676015890ff09fdac709195f6ab4ae1ad305d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea4257360388946abbb3559394b1a0cff8eddcc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea4257360388946abbb3559394b1a0cff8eddcc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea4257360388946abbb3559394b1a0cff8eddcc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea4257360388946abbb3559394b1a0cff8eddcc6/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c6be6e38374cd6138292fb2d19c76c18a653bd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c6be6e38374cd6138292fb2d19c76c18a653bd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c6be6e38374cd6138292fb2d19c76c18a653bd5"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 27,
      "deletions": 40
    },
    "files": [
      {
        "sha": "130653483360105c8ed0c504fa8dd3822f247086",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 40,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea4257360388946abbb3559394b1a0cff8eddcc6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea4257360388946abbb3559394b1a0cff8eddcc6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ea4257360388946abbb3559394b1a0cff8eddcc6",
        "patch": "@@ -593,14 +593,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     // Alias what we need out of ws\n     TxValidationState& state = ws.m_state;\n-    std::set<uint256>& setConflicts = ws.m_conflicts;\n-    CTxMemPool::setEntries& allConflicting = ws.m_all_conflicting;\n-    CTxMemPool::setEntries& setAncestors = ws.m_ancestors;\n     std::unique_ptr<CTxMemPoolEntry>& entry = ws.m_entry;\n-    bool& fReplacementTransaction = ws.m_replacement_transaction;\n-    CAmount& nModifiedFees = ws.m_modified_fees;\n-    CAmount& nConflictingFees = ws.m_conflicting_fees;\n-    size_t& nConflictingSize = ws.m_conflicting_size;\n \n     if (!CheckTransaction(tx, state)) {\n         return false; // state filled in by CheckTransaction\n@@ -646,7 +639,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                 // Transaction conflicts with a mempool tx, but we're not allowing replacements.\n                 return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"bip125-replacement-disallowed\");\n             }\n-            if (!setConflicts.count(ptxConflicting->GetHash()))\n+            if (!ws.m_conflicts.count(ptxConflicting->GetHash()))\n             {\n                 // Transactions that don't explicitly signal replaceability are\n                 // *not* replaceable with the current logic, even if one of their\n@@ -659,7 +652,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                     return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"txn-mempool-conflict\");\n                 }\n \n-                setConflicts.insert(ptxConflicting->GetHash());\n+                ws.m_conflicts.insert(ptxConflicting->GetHash());\n             }\n         }\n     }\n@@ -723,9 +716,9 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     int64_t nSigOpsCost = GetTransactionSigOpCost(tx, m_view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n-    // nModifiedFees includes any fee deltas from PrioritiseTransaction\n-    nModifiedFees = ws.m_base_fees;\n-    m_pool.ApplyDelta(hash, nModifiedFees);\n+    // ws.m_modified_fees includes any fee deltas from PrioritiseTransaction\n+    ws.m_modified_fees = ws.m_base_fees;\n+    m_pool.ApplyDelta(hash, ws.m_modified_fees);\n \n     // Keep track of transactions that spend a coinbase, which we re-scan\n     // during reorgs to ensure COINBASE_MATURITY is still met.\n@@ -748,11 +741,11 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     // No transactions are allowed below minRelayTxFee except from disconnected\n     // blocks\n-    if (!bypass_limits && !CheckFeeRate(ws.m_vsize, nModifiedFees, state)) return false;\n+    if (!bypass_limits && !CheckFeeRate(ws.m_vsize, ws.m_modified_fees, state)) return false;\n \n-    const CTxMemPool::setEntries setIterConflicting = m_pool.GetIterSet(setConflicts);\n+    const CTxMemPool::setEntries setIterConflicting = m_pool.GetIterSet(ws.m_conflicts);\n     // Calculate in-mempool ancestors, up to a limit.\n-    if (setConflicts.size() == 1) {\n+    if (ws.m_conflicts.size() == 1) {\n         // In general, when we receive an RBF transaction with mempool conflicts, we want to know whether we\n         // would meet the chain limits after the conflicts have been removed. However, there isn't a practical\n         // way to do this short of calculating the ancestor and descendant sets with an overlay cache of\n@@ -788,9 +781,9 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     std::string errString;\n-    if (!m_pool.CalculateMemPoolAncestors(*entry, setAncestors, m_limit_ancestors, m_limit_ancestor_size,\n+    if (!m_pool.CalculateMemPoolAncestors(*entry, ws.m_ancestors, m_limit_ancestors, m_limit_ancestor_size,\n             ws.m_tx_limit_descendants, ws.m_tx_limit_descendant_size, errString)) {\n-        setAncestors.clear();\n+        ws.m_ancestors.clear();\n         // If CalculateMemPoolAncestors fails second time, we want the original error string.\n         std::string dummy_err_string;\n         // Contracting/payment channels CPFP carve-out:\n@@ -805,7 +798,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n         if (ws.m_vsize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-            !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, /* limitancestors */ 2,\n+            !m_pool.CalculateMemPoolAncestors(*entry, ws.m_ancestors, /* limitancestors */ 2,\n                 m_limit_ancestor_size, ws.m_tx_limit_descendants + 1,\n                 ws.m_tx_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", errString);\n@@ -814,19 +807,19 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     // A transaction that spends outputs that would be replaced by it is invalid. Now\n     // that we have the set of all ancestors we can detect this\n-    // pathological case by making sure setConflicts and setAncestors don't\n+    // pathological case by making sure ws.m_conflicts and ws.m_ancestors don't\n     // intersect.\n-    if (const auto err_string{EntriesAndTxidsDisjoint(setAncestors, setConflicts, hash)}) {\n+    if (const auto err_string{EntriesAndTxidsDisjoint(ws.m_ancestors, ws.m_conflicts, hash)}) {\n         // We classify this as a consensus error because a transaction depending on something it\n         // conflicts with would be inconsistent.\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n \n-    fReplacementTransaction = setConflicts.size();\n-    if (fReplacementTransaction)\n+    ws.m_replacement_transaction = ws.m_conflicts.size();\n+    if (ws.m_replacement_transaction)\n     {\n-        CFeeRate newFeeRate(nModifiedFees, ws.m_vsize);\n+        CFeeRate newFeeRate(ws.m_modified_fees, ws.m_vsize);\n         // It's possible that the replacement pays more fees than its direct conflicts but not more\n         // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n         // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n@@ -838,7 +831,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         }\n \n         // Calculate all conflicting entries and enforce BIP125 Rule #5.\n-        if (const auto err_string{GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting)}) {\n+        if (const auto err_string{GetEntriesForConflicts(tx, m_pool, setIterConflicting, ws.m_all_conflicting)}) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n                                  \"too many potential replacements\", *err_string);\n         }\n@@ -850,11 +843,11 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n         // Check if it's economically rational to mine this transaction rather than the ones it\n         // replaces and pays for its own relay fees. Enforce BIP125 Rules #3 and #4.\n-        for (CTxMemPool::txiter it : allConflicting) {\n-            nConflictingFees += it->GetModifiedFee();\n-            nConflictingSize += it->GetTxSize();\n+        for (CTxMemPool::txiter it : ws.m_all_conflicting) {\n+            ws.m_conflicting_fees += it->GetModifiedFee();\n+            ws.m_conflicting_size += it->GetTxSize();\n         }\n-        if (const auto err_string{PaysForRBF(nConflictingFees, nModifiedFees, ws.m_vsize,\n+        if (const auto err_string{PaysForRBF(ws.m_conflicting_fees, ws.m_modified_fees, ws.m_vsize,\n                                              ::incrementalRelayFee, hash)}) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n         }\n@@ -926,35 +919,29 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     TxValidationState& state = ws.m_state;\n     const bool bypass_limits = args.m_bypass_limits;\n \n-    CTxMemPool::setEntries& allConflicting = ws.m_all_conflicting;\n-    CTxMemPool::setEntries& setAncestors = ws.m_ancestors;\n-    const CAmount& nModifiedFees = ws.m_modified_fees;\n-    const CAmount& nConflictingFees = ws.m_conflicting_fees;\n-    const size_t& nConflictingSize = ws.m_conflicting_size;\n-    const bool fReplacementTransaction = ws.m_replacement_transaction;\n     std::unique_ptr<CTxMemPoolEntry>& entry = ws.m_entry;\n \n     // Remove conflicting transactions from the mempool\n-    for (CTxMemPool::txiter it : allConflicting)\n+    for (CTxMemPool::txiter it : ws.m_all_conflicting)\n     {\n         LogPrint(BCLog::MEMPOOL, \"replacing tx %s with %s for %s additional fees, %d delta bytes\\n\",\n                 it->GetTx().GetHash().ToString(),\n                 hash.ToString(),\n-                FormatMoney(nModifiedFees - nConflictingFees),\n-                (int)entry->GetTxSize() - (int)nConflictingSize);\n+                FormatMoney(ws.m_modified_fees - ws.m_conflicting_fees),\n+                (int)entry->GetTxSize() - (int)ws.m_conflicting_size);\n         ws.m_replaced_transactions.push_back(it->GetSharedTx());\n     }\n-    m_pool.RemoveStaged(allConflicting, false, MemPoolRemovalReason::REPLACED);\n+    m_pool.RemoveStaged(ws.m_all_conflicting, false, MemPoolRemovalReason::REPLACED);\n \n     // This transaction should only count for fee estimation if:\n     // - it isn't a BIP 125 replacement transaction (may not be widely supported)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    bool validForFeeEstimation = !ws.m_replacement_transaction && !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n-    m_pool.addUnchecked(*entry, setAncestors, validForFeeEstimation);\n+    m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n     if (!bypass_limits) {"
      }
    ]
  },
  {
    "sha": "94f395a03345fe1b45af377b69a6d082339ddaf0",
    "node_id": "C_kwDOABII59oAKDk0ZjM5NWEwMzM0NWZlMWI0NWFmMzc3YjY5YTZkMDgyMzM5ZGRhZjA",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-09T10:56:57Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-24T14:07:23Z"
      },
      "message": "MOVEONLY: mempool checks to their own functions\n\nNo change in behavior, because package transactions would not be going\nthrough the rbf logic in PreChecks anyway (BIP125 is currently disabled\nfor package acceptance, see ATMPArgs).\n\nWe draw the line here because each individual transaction in package\nvalidation still goes through all PreChecks. For example, checking that\none's own conflicts and dependencies are disjoint (a consensus check)\nand individual transaction mempool ancestor/descendant limits.",
      "tree": {
        "sha": "465ec637de55295d0aa009e2b5c9f53fec0be606",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/465ec637de55295d0aa009e2b5c9f53fec0be606"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94f395a03345fe1b45af377b69a6d082339ddaf0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94f395a03345fe1b45af377b69a6d082339ddaf0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94f395a03345fe1b45af377b69a6d082339ddaf0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94f395a03345fe1b45af377b69a6d082339ddaf0/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea4257360388946abbb3559394b1a0cff8eddcc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea4257360388946abbb3559394b1a0cff8eddcc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea4257360388946abbb3559394b1a0cff8eddcc6"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 39,
      "deletions": 6
    },
    "files": [
      {
        "sha": "bb7a73405ef8513feaed69b1168e29a856212f64",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 6,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94f395a03345fe1b45af377b69a6d082339ddaf0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94f395a03345fe1b45af377b69a6d082339ddaf0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=94f395a03345fe1b45af377b69a6d082339ddaf0",
        "patch": "@@ -533,6 +533,14 @@ class MemPoolAccept\n     // only tests that are fast should be done here (to avoid CPU DoS).\n     bool PreChecks(ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n+    // Run mempool-related checks like ancestor/descendant limits and RBF.\n+    bool MempoolChecks(Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+\n+    // Enforce mempool ancestor/descendant limits.\n+    bool PackageMempoolChecks(const std::vector<CTransactionRef>& txns,\n+                              std::vector<Workspace>& workspaces,\n+                              PackageValidationState& package_state) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+\n     // Run the script checks using our policy flags. As this can be slow, we should\n     // only invoke this on transactions that have otherwise passed policy checks.\n     bool PolicyScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n@@ -815,6 +823,18 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n+    return true;\n+}\n+\n+bool MemPoolAccept::MempoolChecks(Workspace& ws)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+\n+    const CTransaction& tx = *ws.m_ptx;\n+    const uint256& hash = ws.m_hash;\n+    TxValidationState& state = ws.m_state;\n+    const CTxMemPool::setEntries setIterConflicting = m_pool.GetIterSet(ws.m_conflicts);\n \n     ws.m_replacement_transaction = ws.m_conflicts.size();\n     if (ws.m_replacement_transaction)\n@@ -855,6 +875,22 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n+bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txns,\n+                                         std::vector<Workspace>& workspaces,\n+                                         PackageValidationState& package_state)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+\n+    std::string err_string;\n+    if (!m_pool.CheckPackageLimits(txns, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n+                                   m_limit_descendant_size, err_string)) {\n+        // This is a package-wide error, separate from an individual transaction error.\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n+    }\n+   return true;\n+}\n+\n bool MemPoolAccept::PolicyScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)\n {\n     const CTransaction& tx = *ws.m_ptx;\n@@ -961,6 +997,8 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n+    if (!MempoolChecks(ws)) return MempoolAcceptResult::Failure(ws.m_state);\n+\n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n@@ -1027,12 +1065,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     // because it's unnecessary. Also, CPFP carve out can increase the limit for individual\n     // transactions, but this exemption is not extended to packages in CheckPackageLimits().\n     std::string err_string;\n-    if (txns.size() > 1 &&\n-        !m_pool.CheckPackageLimits(txns, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n-                                   m_limit_descendant_size, err_string)) {\n-        // All transactions must have individually passed mempool ancestor and descendant limits\n-        // inside of PreChecks(), so this is separate from an individual transaction error.\n-        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n+    if (txns.size() > 1 && !PackageMempoolChecks(txns, workspaces, package_state)) {\n         return PackageMempoolAcceptResult(package_state, std::move(results));\n     }\n "
      }
    ]
  },
  {
    "sha": "5c9d89efc1e1834c1ceb2fdd7cbf40d555be559c",
    "node_id": "C_kwDOABII59oAKDVjOWQ4OWVmYzFlMTgzNGMxY2ViMmZkZDdjYmY0MGQ1NTViZTU1OWM",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-20T10:38:44Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-24T14:07:23Z"
      },
      "message": "[validation/refactor] store precomputed txdata in workspace\n\nWe want to be able to re-use the precomputed transaction data between\nPolicyScriptChecks and ConsensusScriptChecks in\nAcceptMultipleTransactions.",
      "tree": {
        "sha": "82eecfb050d6eff8121e2583f50c2dbee6ba6ef9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82eecfb050d6eff8121e2583f50c2dbee6ba6ef9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c9d89efc1e1834c1ceb2fdd7cbf40d555be559c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c9d89efc1e1834c1ceb2fdd7cbf40d555be559c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c9d89efc1e1834c1ceb2fdd7cbf40d555be559c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c9d89efc1e1834c1ceb2fdd7cbf40d555be559c/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94f395a03345fe1b45af377b69a6d082339ddaf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94f395a03345fe1b45af377b69a6d082339ddaf0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94f395a03345fe1b45af377b69a6d082339ddaf0"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 13,
      "deletions": 14
    },
    "files": [
      {
        "sha": "1160cb281654f3ee15dc91df6ae69c6c195bd477",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 14,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c9d89efc1e1834c1ceb2fdd7cbf40d555be559c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c9d89efc1e1834c1ceb2fdd7cbf40d555be559c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5c9d89efc1e1834c1ceb2fdd7cbf40d555be559c",
        "patch": "@@ -525,6 +525,7 @@ class MemPoolAccept\n         // conflicts; see the comment in PreChecks).\n         size_t m_tx_limit_descendants;\n         size_t m_tx_limit_descendant_size;\n+        PrecomputedTransactionData m_precomputed_txdata;\n     };\n \n     // Run the policy checks on a given transaction, excluding any script checks.\n@@ -543,13 +544,13 @@ class MemPoolAccept\n \n     // Run the script checks using our policy flags. As this can be slow, we should\n     // only invoke this on transactions that have otherwise passed policy checks.\n-    bool PolicyScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+    bool PolicyScriptChecks(const ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n     // Re-run the script checks, using consensus flags, and try to cache the\n     // result in the scriptcache. This should be done after\n     // PolicyScriptChecks(). This requires that all inputs either be in our\n     // utxo set or in the mempool.\n-    bool ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData &txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+    bool ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n     // Try to add the transaction to the mempool, removing any conflicts first.\n     // Returns true if the transaction is in the mempool after any size\n@@ -891,7 +892,7 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n    return true;\n }\n \n-bool MemPoolAccept::PolicyScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)\n+bool MemPoolAccept::PolicyScriptChecks(const ATMPArgs& args, Workspace& ws)\n {\n     const CTransaction& tx = *ws.m_ptx;\n     TxValidationState& state = ws.m_state;\n@@ -900,13 +901,13 @@ bool MemPoolAccept::PolicyScriptChecks(const ATMPArgs& args, Workspace& ws, Prec\n \n     // Check input scripts and signatures.\n     // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-    if (!CheckInputScripts(tx, state, m_view, scriptVerifyFlags, true, false, txdata)) {\n+    if (!CheckInputScripts(tx, state, m_view, scriptVerifyFlags, true, false, ws.m_precomputed_txdata)) {\n         // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n         // need to turn both off, and compare against just turning off CLEANSTACK\n         // to see if the failure is specifically due to witness validation.\n         TxValidationState state_dummy; // Want reported failures to be from first CheckInputScripts\n-        if (!tx.HasWitness() && CheckInputScripts(tx, state_dummy, m_view, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, false, txdata) &&\n-                !CheckInputScripts(tx, state_dummy, m_view, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, false, txdata)) {\n+        if (!tx.HasWitness() && CheckInputScripts(tx, state_dummy, m_view, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, false, ws.m_precomputed_txdata) &&\n+                !CheckInputScripts(tx, state_dummy, m_view, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, false, ws.m_precomputed_txdata)) {\n             // Only the witness is missing, so the transaction itself may be fine.\n             state.Invalid(TxValidationResult::TX_WITNESS_STRIPPED,\n                     state.GetRejectReason(), state.GetDebugMessage());\n@@ -917,7 +918,7 @@ bool MemPoolAccept::PolicyScriptChecks(const ATMPArgs& args, Workspace& ws, Prec\n     return true;\n }\n \n-bool MemPoolAccept::ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)\n+bool MemPoolAccept::ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws)\n {\n     const CTransaction& tx = *ws.m_ptx;\n     const uint256& hash = ws.m_hash;\n@@ -940,7 +941,8 @@ bool MemPoolAccept::ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws, P\n     // invalid blocks (using TestBlockValidity), however allowing such\n     // transactions into the mempool can be exploited as a DoS attack.\n     unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(m_active_chainstate.m_chain.Tip(), chainparams.GetConsensus());\n-    if (!CheckInputsFromMempoolAndCache(tx, state, m_view, m_pool, currentBlockScriptVerifyFlags, txdata, m_active_chainstate.CoinsTip())) {\n+    if (!CheckInputsFromMempoolAndCache(tx, state, m_view, m_pool, currentBlockScriptVerifyFlags,\n+                                        ws.m_precomputed_txdata, m_active_chainstate.CoinsTip())) {\n         return error(\"%s: BUG! PLEASE REPORT THIS! CheckInputScripts failed against latest-block but not STANDARD flags %s, %s\",\n                 __func__, hash.ToString(), state.ToString());\n     }\n@@ -1003,11 +1005,9 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n-    PrecomputedTransactionData txdata;\n+    if (!PolicyScriptChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n-\n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n@@ -1070,8 +1070,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     }\n \n     for (Workspace& ws : workspaces) {\n-        PrecomputedTransactionData txdata;\n-        if (!PolicyScriptChecks(args, ws, txdata)) {\n+        if (!PolicyScriptChecks(args, ws)) {\n             // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n             package_state.Invalid(ws.m_state.GetResult() == TxValidationResult::TX_CONSENSUS\n                                   ? PackageValidationResult::PCKG_TX_CONSENSUS"
      }
    ]
  },
  {
    "sha": "cc7af5c1b2a9446cb08379306973dd521ec9cb3c",
    "node_id": "C_kwDOABII59oAKGNjN2FmNWMxYjJhOTQ0NmNiMDgzNzkzMDY5NzNkZDUyMWVjOWNiM2M",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-16T09:29:11Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-24T14:07:23Z"
      },
      "message": "[packages] add static IsChildWithParents function",
      "tree": {
        "sha": "6ae9a171ee0fd07bd8b7aa306532369e2dc2b59a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ae9a171ee0fd07bd8b7aa306532369e2dc2b59a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc7af5c1b2a9446cb08379306973dd521ec9cb3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc7af5c1b2a9446cb08379306973dd521ec9cb3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc7af5c1b2a9446cb08379306973dd521ec9cb3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc7af5c1b2a9446cb08379306973dd521ec9cb3c/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c9d89efc1e1834c1ceb2fdd7cbf40d555be559c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c9d89efc1e1834c1ceb2fdd7cbf40d555be559c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c9d89efc1e1834c1ceb2fdd7cbf40d555be559c"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 38,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e1237a976525be2c07266ae82c2148934d9fee12",
        "filename": "src/policy/packages.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc7af5c1b2a9446cb08379306973dd521ec9cb3c/src/policy/packages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc7af5c1b2a9446cb08379306973dd521ec9cb3c/src/policy/packages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/packages.cpp?ref=cc7af5c1b2a9446cb08379306973dd521ec9cb3c",
        "patch": "@@ -60,3 +60,33 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     }\n     return true;\n }\n+\n+bool IsChildWithParents(const Package& package, bool exact)\n+{\n+    assert(!package.empty());\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    if (package.size() < 2) return false;\n+\n+    const auto& child = package[package.size() - 1];\n+\n+    std::unordered_set<uint256, SaltedTxidHasher> input_txids;\n+    std::transform(child->vin.cbegin(), child->vin.cend(),\n+                   std::inserter(input_txids, input_txids.end()),\n+                   [](const auto& input) { return input.prevout.hash; });\n+\n+    std::unordered_set<uint256, SaltedTxidHasher> parent_txids;\n+    std::transform(package.cbegin(), package.cbegin() + (package.size() - 1),\n+                   std::inserter(parent_txids, parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // Require that parent_txids is subset of input_txids\n+    if (parent_txids.size() > input_txids.size()) return false;\n+    if (!std::all_of(parent_txids.cbegin(), parent_txids.cend(),\n+                    [&input_txids](const auto& txid) { return input_txids.count(txid) > 0; })) return false;\n+    if (!exact) return true;\n+    // Also require that input_txids is subset of parent_txids\n+    return input_txids.size() <= parent_txids.size() &&\n+        std::all_of(input_txids.cbegin(), input_txids.cend(),\n+                    [&parent_txids](const auto& txid) { return parent_txids.count(txid) > 0; });\n+}"
      },
      {
        "sha": "6bbb2df414a482225e42744bb26433ec4066d5c7",
        "filename": "src/policy/packages.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc7af5c1b2a9446cb08379306973dd521ec9cb3c/src/policy/packages.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc7af5c1b2a9446cb08379306973dd521ec9cb3c/src/policy/packages.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/packages.h?ref=cc7af5c1b2a9446cb08379306973dd521ec9cb3c",
        "patch": "@@ -43,4 +43,12 @@ class PackageValidationState : public ValidationState<PackageValidationResult> {\n  */\n bool CheckPackage(const Package& txns, PackageValidationState& state);\n \n+/** Context-free check that a package is exactly one child and at least one of its parents. It is\n+ * expected to be sorted, which means the last transaction must be the child. The package cannot\n+ * contain any transactions that are not the child's parents.\n+ * @param[in]   exact   When true, return whether this package is exactly one child and all of its\n+ *                      parents. Otherwise, only require that non-child transactions are parents.\n+ */\n+bool IsChildWithParents(const Package& package, bool exact);\n+\n #endif // BITCOIN_POLICY_PACKAGES_H"
      }
    ]
  },
  {
    "sha": "2be0e3d89a5637a33223e8e5acd7b5c0addfd728",
    "node_id": "C_kwDOABII59oAKDJiZTBlM2Q4OWE1NjM3YTMzMjIzZThlNWFjZDdiNWMwYWRkZmQ3Mjg",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-16T14:08:33Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-24T14:07:23Z"
      },
      "message": "[unit test] static package checks",
      "tree": {
        "sha": "e15066033712a8f2fcd0e0eefbd15b798056ce8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e15066033712a8f2fcd0e0eefbd15b798056ce8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2be0e3d89a5637a33223e8e5acd7b5c0addfd728",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2be0e3d89a5637a33223e8e5acd7b5c0addfd728",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2be0e3d89a5637a33223e8e5acd7b5c0addfd728",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2be0e3d89a5637a33223e8e5acd7b5c0addfd728/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc7af5c1b2a9446cb08379306973dd521ec9cb3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc7af5c1b2a9446cb08379306973dd521ec9cb3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc7af5c1b2a9446cb08379306973dd521ec9cb3c"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 110,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6517b6f71c018478877adbd5bd1561ca28bda1de",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2be0e3d89a5637a33223e8e5acd7b5c0addfd728/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2be0e3d89a5637a33223e8e5acd7b5c0addfd728/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=2be0e3d89a5637a33223e8e5acd7b5c0addfd728",
        "patch": "@@ -137,6 +137,7 @@ BITCOIN_TESTS =\\\n   test/torcontrol_tests.cpp \\\n   test/transaction_tests.cpp \\\n   test/txindex_tests.cpp \\\n+  test/txpackage_tests.cpp \\\n   test/txrequest_tests.cpp \\\n   test/txvalidation_tests.cpp \\\n   test/txvalidationcache_tests.cpp \\"
      },
      {
        "sha": "d12240bd615977f7fe518e93349b3df2b30bfd99",
        "filename": "src/test/txpackage_tests.cpp",
        "status": "added",
        "additions": 109,
        "deletions": 0,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2be0e3d89a5637a33223e8e5acd7b5c0addfd728/src/test/txpackage_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2be0e3d89a5637a33223e8e5acd7b5c0addfd728/src/test/txpackage_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txpackage_tests.cpp?ref=2be0e3d89a5637a33223e8e5acd7b5c0addfd728",
        "patch": "@@ -0,0 +1,109 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}, /* exact */ false));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}, /* exact */ true));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package, /* exact */ false));\n+        BOOST_CHECK(!IsChildWithParents(package, /* exact */ true));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage(package, state));\n+        BOOST_CHECK(IsChildWithParents(package, /* exact */ false));\n+        BOOST_CHECK(IsChildWithParents(package, /* exact */ true));\n+\n+        // Not all of the parents need to be in the package if exact = false.\n+        package.erase(package.begin());\n+        BOOST_CHECK(IsChildWithParents(package, /* exact */ false));\n+        BOOST_CHECK(!IsChildWithParents(package, /* exact */ true));\n+\n+        // The package cannot have unrelated transactions.\n+        package.insert(package.begin(), m_coinbase_txns[0]);\n+        BOOST_CHECK(!IsChildWithParents(package, /* exact */ false));\n+        BOOST_CHECK(!IsChildWithParents(package, /* exact */ true));\n+    }\n+\n+    // 2 Parents and 1 Child where one parent depends on the other.\n+    {\n+        CMutableTransaction mtx_parent;\n+        mtx_parent.vin.push_back(CTxIn(COutPoint(m_coinbase_txns[0]->GetHash(), 0)));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk2));\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        CMutableTransaction mtx_parent2;\n+        mtx_parent2.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 0)));\n+        mtx_parent2.vout.push_back(CTxOut(20 * COIN, spk));\n+        CTransactionRef tx_parent_also_child = MakeTransactionRef(mtx_parent2);\n+\n+        CMutableTransaction mtx_child;\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 1)));\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent_also_child->GetHash(), 0)));\n+        mtx_child.vout.push_back(CTxOut(49 * COIN, spk));\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_parent_also_child, tx_child}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_parent_also_child, tx_child}, /* exact */ false));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_parent_also_child, tx_child}, /* exact */ true));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "87b4c7b967d5612f305034a1221accaf4c61ddae",
    "node_id": "C_kwDOABII59oAKDg3YjRjN2I5NjdkNTYxMmYzMDUwMzRhMTIyMWFjY2FmNGM2MWRkYWU",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-20T10:07:25Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-20T10:27:42Z"
      },
      "message": "[validation] full package accept + mempool submission",
      "tree": {
        "sha": "a432c1eab690280b7d56bc6b2b51e4f38c14634a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a432c1eab690280b7d56bc6b2b51e4f38c14634a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87b4c7b967d5612f305034a1221accaf4c61ddae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87b4c7b967d5612f305034a1221accaf4c61ddae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87b4c7b967d5612f305034a1221accaf4c61ddae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87b4c7b967d5612f305034a1221accaf4c61ddae/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2be0e3d89a5637a33223e8e5acd7b5c0addfd728",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2be0e3d89a5637a33223e8e5acd7b5c0addfd728",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2be0e3d89a5637a33223e8e5acd7b5c0addfd728"
      }
    ],
    "stats": {
      "total": 157,
      "additions": 137,
      "deletions": 20
    },
    "files": [
      {
        "sha": "b162b441afb97bd679d69745860cdb0b0a6aaf59",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 121,
        "deletions": 10,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87b4c7b967d5612f305034a1221accaf4c61ddae/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87b4c7b967d5612f305034a1221accaf4c61ddae/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=87b4c7b967d5612f305034a1221accaf4c61ddae",
        "patch": "@@ -450,6 +450,11 @@ class MemPoolAccept\n          * any transaction spending the same inputs as a transaction in the mempool is considered\n          * a conflict. */\n         const bool m_allow_bip125_replacement;\n+        /** When true, the mempool will not be trimmed when individual transactions are submitted in\n+         * Finalize(). Instead, limits should be enforced at the end to ensure the package is not\n+         * partially submitted.\n+         */\n+        const bool m_package_submission;\n \n         /** Parameters for single transaction mempool validation. */\n         static ATMPArgs SingleAccept(const CChainParams& chainparams, int64_t accept_time,\n@@ -461,6 +466,7 @@ class MemPoolAccept\n                             /* m_coins_to_uncache */ coins_to_uncache,\n                             /* m_test_accept */ test_accept,\n                             /* m_allow_bip125_replacement */ true,\n+                            /* m_package_submission */ false,\n             };\n         }\n \n@@ -473,6 +479,19 @@ class MemPoolAccept\n                             /* m_coins_to_uncache */ coins_to_uncache,\n                             /* m_test_accept */ true,\n                             /* m_allow_bip125_replacement */ false,\n+                            /* m_package_submission */ false,\n+            };\n+        }\n+\n+        static ATMPArgs PackageChildWithParents(const CChainParams& chainparams, int64_t accept_time,\n+                                                std::vector<COutPoint>& coins_to_uncache) {\n+            return ATMPArgs{/* m_chainparams */ chainparams,\n+                            /* m_accept_time */ accept_time,\n+                            /* m_bypass_limits */ false,\n+                            /* m_coins_to_uncache */ coins_to_uncache,\n+                            /* m_test_accept */ false,\n+                            /* m_allow_bip125_replacement */ false,\n+                            /* m_package_submission */ true,\n             };\n         }\n \n@@ -485,9 +504,9 @@ class MemPoolAccept\n     MempoolAcceptResult AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /**\n-    * Multiple transaction acceptance. Transactions may or may not be interdependent,\n-    * but must not conflict with each other. Parents must come before children if any\n-    * dependencies exist.\n+    * Multiple transaction acceptance. Transactions may or may not be interdependent, but must not\n+    * conflict with each other, and the transactions cannot already be in the mempool. Parents must\n+    * come before children if any dependencies exist.\n     */\n     PackageMempoolAcceptResult AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n@@ -557,6 +576,13 @@ class MemPoolAccept\n     // limiting is performed, false otherwise.\n     bool Finalize(const ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n+    // Try to add all transactions to the mempool, atomically (either all of the transactions are\n+    // added or none). Returns true if all of the transactions are in the mempool after size\n+    // limiting is performed, false otherwise.\n+    bool FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces, PackageValidationState& package_state,\n+                         std::map<const uint256, const MempoolAcceptResult>& results)\n+                         EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+\n     // Compare a package's feerate against minimum allowed.\n     bool CheckFeeRate(size_t package_size, CAmount package_fee, TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs)\n     {\n@@ -982,14 +1008,80 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(hash))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        // It would be a fatal error for ConsensusScriptChecks() to fail here, since\n+        // PolicyScriptChecks() passed.\n+        if (!ConsensusScriptChecks(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return package_state.Invalid(PackageValidationResult::PCKG_TX_CONSENSUS, \"transaction failed\");\n+        }\n+\n+        // Recalculate mempool ancestors because they may have changed since the last calculation\n+        // done in PreChecks (i.e. package ancestors have already been submitted). This should\n+        // never exceed the limits.\n+        std::string err_string;\n+        if(!m_pool.CalculateMemPoolAncestors(*ws.m_entry, ws.m_ancestors, m_limit_ancestors,\n+                                             m_limit_ancestor_size, m_limit_descendants,\n+                                             m_limit_descendant_size, err_string)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return package_state.Invalid(PackageValidationResult::PCKG_TX_POLICY, \"transaction failed\");\n+        }\n+        // If we call LimitMempoolSize() for each individual Finalize(), the mempool will not take\n+        // the transaction's descendant feerate into account because it hasn't seen them yet. Also,\n+        // we risk evicting a transaction that a subsequent package transaction depends on. Instead,\n+        // allow the mempool to temporarily bypass limits while submitting transactions individually\n+        // and then trim at the very end.\n+        if (!Finalize(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return package_state.Invalid(PackageValidationResult::PCKG_TX_POLICY, \"transaction failed\");\n+        }\n+    }\n+\n+    // It may or may not be the case that all the transactions made it into the mempool. Regardless,\n+    // make sure we haven't exceeded max mempool size.\n+    LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(),\n+                     gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n+                     std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+\n+    // Find the wtxids of the transactions that made it into the mempool. Allow partial submission,\n+    // but don't report success unless they all made it into the mempool.\n+    bool all_submitted = true;\n+    for (Workspace& ws : workspaces) {\n+        if (m_pool.exists(GenTxid(true, ws.m_ptx->GetWitnessHash()))) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(),\n+                MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_vsize, ws.m_base_fees));\n+            GetMainSignals().TransactionAddedToMempool(ws.m_ptx, m_pool.GetAndIncrementSequence());\n+        } else {\n+            all_submitted = false;\n+            ws.m_state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+        }\n+    }\n+\n+    return all_submitted;\n+}\n+\n MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n@@ -1088,6 +1180,13 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX_POLICY, \"partially submitted\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n@@ -1128,19 +1227,31 @@ PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTx\n                                                    const Package& package, bool test_accept)\n {\n     AssertLockHeld(cs_main);\n-    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).\n     assert(!package.empty());\n     assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n \n     std::vector<COutPoint> coins_to_uncache;\n     const CChainParams& chainparams = Params();\n-    auto args = MemPoolAccept::ATMPArgs::PackageTestAccept(chainparams, GetTime(), coins_to_uncache);\n-    const PackageMempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+    const auto result = [&]() EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+        AssertLockHeld(cs_main);\n+        if (test_accept) {\n+            auto args = MemPoolAccept::ATMPArgs::PackageTestAccept(chainparams, GetTime(), coins_to_uncache);\n+            return MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+        } else {\n+            auto args = MemPoolAccept::ATMPArgs::PackageChildWithParents(chainparams, GetTime(), coins_to_uncache);\n+            return MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+        }\n+    }();\n \n-    // Uncache coins pertaining to transactions that were not submitted to the mempool.\n-    for (const COutPoint& hashTx : coins_to_uncache) {\n-        active_chainstate.CoinsTip().Uncache(hashTx);\n+    // Uncache coins pertaining to transactions that were not submitted to the mempool. Ensure the\n+    // coins cache is still within limits.\n+    if (test_accept || result.m_state.IsInvalid()) {\n+        for (const COutPoint& hashTx : coins_to_uncache) {\n+            active_chainstate.CoinsTip().Uncache(hashTx);\n+        }\n     }\n+    BlockValidationState state_dummy;\n+    active_chainstate.FlushStateToDisk(state_dummy, FlushStateMode::PERIODIC);\n     return result;\n }\n "
      },
      {
        "sha": "86f0ca6de0d18a37a99663927eabcca41c96cff0",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 16,
        "deletions": 10,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87b4c7b967d5612f305034a1221accaf4c61ddae/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87b4c7b967d5612f305034a1221accaf4c61ddae/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=87b4c7b967d5612f305034a1221accaf4c61ddae",
        "patch": "@@ -222,16 +222,22 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n                                        bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n-* Atomically test acceptance of a package. If the package only contains one tx, package rules still\n-* apply. Package validation does not allow BIP125 replacements, so the transaction(s) cannot spend\n-* the same inputs as any transaction in the mempool.\n-* @param[in]    txns                Group of transactions which may be independent or contain\n-*                                   parent-child dependencies. The transactions must not conflict\n-*                                   with each other, i.e., must not spend the same inputs. If any\n-*                                   dependencies exist, parents must appear anywhere in the list\n-*                                   before their children.\n-* @returns a PackageMempoolAcceptResult which includes a MempoolAcceptResult for each transaction.\n-* If a transaction fails, validation will exit early and some results may be missing.\n+* The package must meet the following requirements:\n+* 1. The package cannot contain more than 25 transactions.\n+* 2. The package's total virtual size cannot exceed 101KvB.\n+* 3. If dependencies exist, parents must appear anywhere in the lsit before their children.\n+* 4. The package transactions cannot conflict with each other, i.e., spend the same inputs.\n+* 5. The package transactions cannot conflict with any mempool transactions. BIP125 replacements are\n+*    not allowed.\n+*\n+* When test_accept = false, the package must also meet the following requirements:\n+* 1. The package must consist of exactly 1 child and all of its parents (this also means it\n+*    must contain at least 2 transactions).\n+*\n+* @returns a PackageMempoolAcceptResult which includes a MempoolAcceptResult for each transaction\n+* that was fully validated. If a transaction fails, validation will exit early and some results may\n+* be missing. It is possible for the package to be partially submitted if one or more transactions\n+* are trimmed in the call to LimitMempoolSize at the end.\n */\n PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,\n                                                    const Package& txns, bool test_accept)"
      }
    ]
  },
  {
    "sha": "52cbdb3af0e08cd4bedc599d3e8927db500f34ce",
    "node_id": "C_kwDOABII59oAKDUyY2JkYjNhZjBlMDhjZDRiZWRjNTk5ZDNlODkyN2RiNTAwZjM0Y2U",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-22T14:40:22Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-20T10:27:42Z"
      },
      "message": "[policy] require packages to be child + all unconfirmed parents",
      "tree": {
        "sha": "fc7f130bf8f2d8b1bea47ca070a54c5c6aee07dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc7f130bf8f2d8b1bea47ca070a54c5c6aee07dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52cbdb3af0e08cd4bedc599d3e8927db500f34ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52cbdb3af0e08cd4bedc599d3e8927db500f34ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52cbdb3af0e08cd4bedc599d3e8927db500f34ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52cbdb3af0e08cd4bedc599d3e8927db500f34ce/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87b4c7b967d5612f305034a1221accaf4c61ddae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87b4c7b967d5612f305034a1221accaf4c61ddae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87b4c7b967d5612f305034a1221accaf4c61ddae"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 72,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0e44cb46ce4f5ea265ed35056aeaf1dcbd825d9a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 1,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52cbdb3af0e08cd4bedc599d3e8927db500f34ce/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52cbdb3af0e08cd4bedc599d3e8927db500f34ce/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=52cbdb3af0e08cd4bedc599d3e8927db500f34ce",
        "patch": "@@ -510,6 +510,12 @@ class MemPoolAccept\n     */\n     PackageMempoolAcceptResult AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    /**\n+     * Package (more specific than just multiple transactions) acceptance. Package must be a child\n+     * with all of its unconfirmed parents, and topologically sorted.\n+     */\n+    PackageMempoolAcceptResult AcceptPackage(const Package& package, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n private:\n     // All the intermediate state that gets passed between the various levels\n     // of checking a given transaction.\n@@ -1190,6 +1196,71 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Static package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a static check without taking the mempool lock.\n+    if (!IsChildWithParents(package, /* exact */ false)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_BAD, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    LOCK(m_pool.cs);\n+    const auto& child = package[package.size() - 1];\n+    // The child is never allowed to conflict with the mempool.\n+    if (m_pool.exists(child->GetHash())) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflicts-with-mempool\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // The package must be 1 child with all of its unconfirmed parents.\n+    std::unordered_set<uint256, SaltedTxidHasher> parent_txids;\n+    std::transform(package.cbegin(), package.cbegin() + (package.size() - 1),\n+                   std::inserter(parent_txids, parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &parent_txids](const auto& input) {\n+         return parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_BAD, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    // TODO: Deduplicate the package.\n+\n+    // TODO: Try submitting every transaction on its own.\n+\n+    // Validate as a package.\n+    return AcceptMultipleTransactions(package, args);\n+}\n+\n } // anon namespace\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n@@ -1239,7 +1310,7 @@ PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTx\n             return MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n         } else {\n             auto args = MemPoolAccept::ATMPArgs::PackageChildWithParents(chainparams, GetTime(), coins_to_uncache);\n-            return MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+            return MemPoolAccept(pool, active_chainstate).AcceptPackage(package, args);\n         }\n     }();\n "
      }
    ]
  },
  {
    "sha": "f2d8a872e9c61335cda81ad04170b9c77e967497",
    "node_id": "C_kwDOABII59oAKGYyZDhhODcyZTljNjEzMzVjZGE4MWFkMDQxNzBiOWM3N2U5Njc0OTc",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-20T10:45:52Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-20T10:27:42Z"
      },
      "message": "[rpc] add new submitrawpackage RPC\n\nThis is meant to be similar to sendrawtransaction, so it throws a\nJSONRPCError when something goes wrong, and calls BroadcastTransaction()\nwhen transactions succeed.",
      "tree": {
        "sha": "6edf4c4b4c1eb563ba5c635511bb270f76c6a7ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6edf4c4b4c1eb563ba5c635511bb270f76c6a7ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2d8a872e9c61335cda81ad04170b9c77e967497",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d8a872e9c61335cda81ad04170b9c77e967497",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2d8a872e9c61335cda81ad04170b9c77e967497",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d8a872e9c61335cda81ad04170b9c77e967497/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52cbdb3af0e08cd4bedc599d3e8927db500f34ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52cbdb3af0e08cd4bedc599d3e8927db500f34ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52cbdb3af0e08cd4bedc599d3e8927db500f34ce"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 132,
      "deletions": 0
    },
    "files": [
      {
        "sha": "12af4f5f5aab810b97d67a37d0f44dacf3ea090a",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d8a872e9c61335cda81ad04170b9c77e967497/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d8a872e9c61335cda81ad04170b9c77e967497/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=f2d8a872e9c61335cda81ad04170b9c77e967497",
        "patch": "@@ -105,6 +105,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendrawtransaction\", 1, \"maxfeerate\" },\n     { \"testmempoolaccept\", 0, \"rawtxs\" },\n     { \"testmempoolaccept\", 1, \"maxfeerate\" },\n+    { \"submitrawpackage\", 0, \"package\" },\n     { \"combinerawtransaction\", 0, \"txs\" },\n     { \"fundrawtransaction\", 1, \"options\" },\n     { \"fundrawtransaction\", 2, \"iswitness\" },"
      },
      {
        "sha": "5150ff52e4f0a4da54708db987b8bec6e6d2efc5",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 127,
        "deletions": 0,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d8a872e9c61335cda81ad04170b9c77e967497/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d8a872e9c61335cda81ad04170b9c77e967497/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=f2d8a872e9c61335cda81ad04170b9c77e967497",
        "patch": "@@ -1028,6 +1028,131 @@ static RPCHelpMan testmempoolaccept()\n     };\n }\n \n+static RPCHelpMan submitrawpackage()\n+{\n+    return RPCHelpMan{\"submitrawpackage\",\n+        \"\\nSubmit a package of raw transactions (serialized, hex-encoded) to local node (-regtest only).\\n\"\n+        \"\\nThe package will be validated and accepted to mempool if it passes consensus and mempool policy rules. Throws a JSONRPCError if anything goes wrong.\\n\"\n+        \"\\nThe node will attempt to broadcast the transactions individually if the package is accepted to the mempool, but peers will not necessarily accept the transactions.\\n\",\n+        {\n+            {\"package\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"An array of raw transactions.\\n\",\n+                {\n+                    {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n+                },\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::OBJ_DYN, \"tx-results\", \"transaction results keyed by wtxid\",\n+                {\n+                    {RPCResult::Type::OBJ, \"xxxx\", \"transaction wtxid\", {\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The transaction hash in hex\"},\n+                        {RPCResult::Type::STR_HEX, \"wtxid\", \"The transaction witness hash in hex\"},\n+                        {RPCResult::Type::NUM, \"vsize\", \"Virtual transaction size as defined in BIP 141.\"},\n+                        {RPCResult::Type::OBJ, \"fees\", \"Transaction fees (only present if result=\\\"valid\\\")\", {\n+                            {RPCResult::Type::STR_AMOUNT, \"base\", \"transaction fee in \" + CURRENCY_UNIT},\n+                        }},\n+                    }}\n+                }},\n+            },\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"testmempoolaccept\", \"[rawtx1, rawtx2]\") +\n+            HelpExampleCli(\"submitrawtransaction\", \"[rawtx1, rawtx2]\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (!Params().IsMockableChain()) {\n+        throw std::runtime_error(\"submitrawpackage is for regression testing (-regtest mode) only\");\n+    }\n+    RPCTypeCheck(request.params, {\n+        UniValue::VARR,\n+    });\n+    const UniValue raw_transactions = request.params[0].get_array();\n+    if (raw_transactions.size() < 1 || raw_transactions.size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                           \"Array must contain between 1 and \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n+    }\n+\n+    std::vector<CTransactionRef> txns;\n+    txns.reserve(raw_transactions.size());\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR,\n+                               \"TX decode failed: \" + rawtx.get_str() + \" Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n+\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    CTxMemPool& mempool = EnsureMemPool(node);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult package_result = WITH_LOCK(::cs_main,\n+        return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ false));\n+    if (package_result.m_state.IsValid()) {\n+        std::string err_string;\n+        for (const auto& tx : txns) {\n+            // This will see that the transactions are already in the mempool and simply relay them.\n+            const TransactionError err = BroadcastTransaction(node, tx, err_string, 0, /*relay*/ true, /*wait_callback*/ true);\n+            if (TransactionError::OK != err) {\n+                throw JSONRPCTransactionError(err, err_string);\n+            }\n+        }\n+    }\n+\n+    UniValue rpc_result{UniValue::VOBJ};\n+    if (package_result.m_state.IsInvalid()) {\n+        switch(package_result.m_state.GetResult()) {\n+            case PackageValidationResult::PCKG_RESULT_UNSET: break;\n+            case PackageValidationResult::PCKG_BAD:\n+            case PackageValidationResult::PCKG_POLICY:\n+            {\n+                throw JSONRPCTransactionError(TransactionError::INVALID_PACKAGE,\n+                    package_result.m_state.GetRejectReason());\n+            }\n+            case PackageValidationResult::PCKG_TX_POLICY:\n+            case PackageValidationResult::PCKG_TX_CONSENSUS:\n+            {\n+                for (const auto& tx : txns) {\n+                    auto it = package_result.m_tx_results.find(tx->GetWitnessHash());\n+                    if (it == package_result.m_tx_results.end()) continue;\n+                    throw JSONRPCTransactionError(TransactionError::MEMPOOL_REJECTED,\n+                        strprintf(\"%s failed: %s\", tx->GetHash().ToString(), it->second.m_state.GetRejectReason()));\n+                }\n+            }\n+        }\n+    }\n+    std::string err_string;\n+    for (const auto& tx : txns) {\n+        // This will see that the transactions are already in the mempool and simply relay them.\n+        const TransactionError err = BroadcastTransaction(node, tx, err_string, 0, /* relay */ true,\n+                                                          /* wait_callback */ true);\n+        if (TransactionError::OK != err) {\n+            throw JSONRPCTransactionError(err, err_string);\n+        }\n+    }\n+    UniValue tx_result_map{UniValue::VOBJ};\n+    for (const auto& tx : txns) {\n+        auto it = package_result.m_tx_results.find(tx->GetWitnessHash());\n+        CHECK_NONFATAL(it != package_result.m_tx_results.end());\n+        UniValue result_inner{UniValue::VOBJ};\n+        result_inner.pushKV(\"txid\", tx->GetHash().GetHex());\n+        result_inner.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+        CHECK_NONFATAL(it->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        result_inner.pushKV(\"vsize\", (int64_t)it->second.m_vsize.value());\n+        UniValue fees(UniValue::VOBJ);\n+        fees.pushKV(\"base\", ValueFromAmount(it->second.m_base_fees.value()));\n+        result_inner.pushKV(\"fees\", fees);\n+        tx_result_map.pushKV(tx->GetWitnessHash().GetHex(), result_inner);\n+    }\n+    rpc_result.pushKV(\"tx-results\", tx_result_map);\n+    return rpc_result;\n+},\n+    };\n+}\n+\n static RPCHelpMan decodepsbt()\n {\n     return RPCHelpMan{\"decodepsbt\",\n@@ -1924,6 +2049,8 @@ static const CRPCCommand commands[] =\n \n     { \"blockchain\",          &gettxoutproof,              },\n     { \"blockchain\",          &verifytxoutproof,           },\n+\n+    { \"hidden\",              &submitrawpackage,           },\n };\n // clang-format on\n     for (const auto& c : commands) {"
      },
      {
        "sha": "c186cb0974e2bbf3ef595bb97dddd55e3fd61830",
        "filename": "src/test/fuzz/rpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d8a872e9c61335cda81ad04170b9c77e967497/src/test/fuzz/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d8a872e9c61335cda81ad04170b9c77e967497/src/test/fuzz/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/rpc.cpp?ref=f2d8a872e9c61335cda81ad04170b9c77e967497",
        "patch": "@@ -152,6 +152,7 @@ const std::vector<std::string> RPC_COMMANDS_SAFE_FOR_FUZZING{\n     \"signrawtransactionwithkey\",\n     \"submitblock\",\n     \"submitheader\",\n+    \"submitrawpackage\",\n     \"syncwithvalidationinterfacequeue\",\n     \"testmempoolaccept\",\n     \"uptime\","
      },
      {
        "sha": "70f46869cf0c66897a0eaf5a6751e664087147f5",
        "filename": "src/util/error.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d8a872e9c61335cda81ad04170b9c77e967497/src/util/error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d8a872e9c61335cda81ad04170b9c77e967497/src/util/error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/error.cpp?ref=f2d8a872e9c61335cda81ad04170b9c77e967497",
        "patch": "@@ -35,6 +35,8 @@ bilingual_str TransactionErrorString(const TransactionError err)\n             return Untranslated(\"External signer not found\");\n         case TransactionError::EXTERNAL_SIGNER_FAILED:\n             return Untranslated(\"External signer failed to sign\");\n+        case TransactionError::INVALID_PACKAGE:\n+            return Untranslated(\"Transaction rejected due to invalid package\");\n         // no default case, so the compiler can warn about missing cases\n     }\n     assert(false);"
      },
      {
        "sha": "0429de651a363bc65eff085b466cbdd32d1518ec",
        "filename": "src/util/error.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d8a872e9c61335cda81ad04170b9c77e967497/src/util/error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d8a872e9c61335cda81ad04170b9c77e967497/src/util/error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/error.h?ref=f2d8a872e9c61335cda81ad04170b9c77e967497",
        "patch": "@@ -32,6 +32,7 @@ enum class TransactionError {\n     MAX_FEE_EXCEEDED,\n     EXTERNAL_SIGNER_NOT_FOUND,\n     EXTERNAL_SIGNER_FAILED,\n+    INVALID_PACKAGE,\n };\n \n bilingual_str TransactionErrorString(const TransactionError error);"
      }
    ]
  },
  {
    "sha": "ffbfb716d2fd5239bdad55ea0222d043ef49aa2f",
    "node_id": "C_kwDOABII59oAKGZmYmZiNzE2ZDJmZDUyMzliZGFkNTVlYTAyMjJkMDQzZWY0OWFhMmY",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-20T10:49:43Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-20T10:27:42Z"
      },
      "message": "[functional test] submitrawpackage RPC",
      "tree": {
        "sha": "58831b86dc7a876da07f41995b4401f7843b8361",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58831b86dc7a876da07f41995b4401f7843b8361"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffbfb716d2fd5239bdad55ea0222d043ef49aa2f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffbfb716d2fd5239bdad55ea0222d043ef49aa2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ffbfb716d2fd5239bdad55ea0222d043ef49aa2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffbfb716d2fd5239bdad55ea0222d043ef49aa2f/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2d8a872e9c61335cda81ad04170b9c77e967497",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d8a872e9c61335cda81ad04170b9c77e967497",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2d8a872e9c61335cda81ad04170b9c77e967497"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 70,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f2830b708a714b85035565dba4c6dfd4baf87af5",
        "filename": "test/functional/rpc_packages.py",
        "status": "modified",
        "additions": 70,
        "deletions": 4,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffbfb716d2fd5239bdad55ea0222d043ef49aa2f/test/functional/rpc_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffbfb716d2fd5239bdad55ea0222d043ef49aa2f/test/functional/rpc_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_packages.py?ref=ffbfb716d2fd5239bdad55ea0222d043ef49aa2f",
        "patch": "@@ -21,6 +21,7 @@\n )\n from test_framework.util import (\n     assert_equal,\n+    assert_raises_rpc_error,\n )\n from test_framework.wallet import (\n     create_child_with_parents,\n@@ -51,7 +52,7 @@ def run_test(self):\n         self.address = node.get_deterministic_priv_key().address\n         self.coins = []\n         # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 200, self.address)[:100]:\n+        for b in node.generatetoaddress(220, self.address)[:-100]:\n             coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n             self.coins.append({\n                 \"txid\": coinbase[\"txid\"],\n@@ -82,7 +83,7 @@ def run_test(self):\n         self.test_multiple_parents()\n         self.test_conflicting()\n         self.test_rbf()\n-\n+        self.test_submitrawpackage()\n \n     def test_independent(self):\n         self.log.info(\"Test multiple independent transactions in a package\")\n@@ -132,8 +133,7 @@ def test_independent(self):\n \n     def test_chain(self):\n         node = self.nodes[0]\n-        first_coin = self.coins.pop()\n-        (chain_hex, chain_txns) = create_raw_chain(node, first_coin, self.address, self.privkeys)\n+        (chain_hex, chain_txns) = create_raw_chain(node, self.coins.pop(), self.address, self.privkeys)\n         self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n         assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n                 [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"package-error\": \"package-not-sorted\"} for tx in chain_txns[::-1]])\n@@ -306,5 +306,71 @@ def test_rbf(self):\n         }]\n         self.assert_testres_equal(self.independent_txns_hex + [signed_replacement_tx[\"hex\"]], testres_rbf_package)\n \n+    def assert_equal_package_results(self, testres_package, submitres_package):\n+        \"\"\"Assert that a successful testmempoolaccept result and submitrawpackage result are\n+        consistent. They may return the same information in slightly different forms.\n+        \"\"\"\n+        for testres_tx in testres_package:\n+            # Grab this result from the submitres\n+            submitres_tx = submitres_package[\"tx-results\"][testres_tx[\"wtxid\"]]\n+            assert_equal(submitres_tx[\"txid\"], testres_tx[\"txid\"])\n+            if \"allowed\" in testres_tx and testres_tx[\"allowed\"]:\n+                assert_equal(submitres_tx[\"vsize\"], testres_tx[\"vsize\"])\n+                assert_equal(submitres_tx[\"fees\"][\"base\"], testres_tx[\"fees\"][\"base\"])\n+\n+    def test_submit_child_with_parents(self, num_parents):\n+        node = self.nodes[0]\n+        # Test a package with num_parents parents and 1 child transaction.\n+        package_hex = []\n+        package_txns = []\n+        values = []\n+        scripts = []\n+        for _ in range(num_parents):\n+            parent_coin = self.coins.pop()\n+            value = parent_coin[\"amount\"]\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n+            package_hex.append(txhex)\n+            package_txns.append(tx)\n+            values.append(value)\n+            scripts.append(spk)\n+        child_hex = create_child_with_parents(node, self.address, self.privkeys, package_txns, values, scripts)\n+        package_hex.append(child_hex)\n+        package_txns.append(tx_from_hex(child_hex))\n+\n+        testres_package = node.testmempoolaccept(rawtxs=package_hex)\n+        submitres_package = node.submitrawpackage(package=package_hex)\n+\n+        # Check that each result is present, with the correct size and fees\n+        for i in range(num_parents + 1):\n+            tx = package_txns[i]\n+            wtxid = tx.getwtxid()\n+            assert wtxid in submitres_package[\"tx-results\"]\n+            tx_result = submitres_package[\"tx-results\"][wtxid]\n+            expected_fee = Decimal(\"0.0001\")\n+            assert_equal(tx_result, {\n+                \"txid\": tx.rehash(),\n+                \"wtxid\": wtxid,\n+                \"vsize\": tx.get_vsize(),\n+                \"fees\": {\n+                    \"base\": expected_fee,\n+                }\n+            })\n+\n+        # testmempoolaccept and submitrawpackage should return the same results when successful\n+        self.assert_equal_package_results(testres_package, submitres_package)\n+\n+    def test_submitrawpackage(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Submitrawpackage valid packages with 1 child and some number of parents\")\n+        for num_parents in [1, 2, 10, 24]:\n+            self.test_submit_child_with_parents(num_parents)\n+\n+        self.log.info(\"Submitrawpackage only allows packages of 1 child with its parents\")\n+        # Chain of 3 transactions has too many generations\n+        (chain_hex, _) = create_raw_chain(node, self.coins.pop(), self.address, self.privkeys, 3)\n+        assert_raises_rpc_error(-25, \"not-child-with-parents\", node.submitrawpackage, chain_hex)\n+\n+\n if __name__ == \"__main__\":\n     RPCPackagesTest().main()"
      }
    ]
  },
  {
    "sha": "edeb0749abf47e3647db594fd8cf82f1054fbf17",
    "node_id": "C_kwDOABII59oAKGVkZWIwNzQ5YWJmNDdlMzY0N2RiNTk0ZmQ4Y2Y4MmYxMDU0ZmJmMTc",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-20T12:26:26Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-20T10:27:42Z"
      },
      "message": "[packages/policy] use package feerate in package validation\n\nThis allows CPFP within a package prior to submission to mempool.",
      "tree": {
        "sha": "78cc583200bacf13117a0148d7882a72a7616bfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78cc583200bacf13117a0148d7882a72a7616bfc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/edeb0749abf47e3647db594fd8cf82f1054fbf17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edeb0749abf47e3647db594fd8cf82f1054fbf17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/edeb0749abf47e3647db594fd8cf82f1054fbf17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edeb0749abf47e3647db594fd8cf82f1054fbf17/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffbfb716d2fd5239bdad55ea0222d043ef49aa2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffbfb716d2fd5239bdad55ea0222d043ef49aa2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffbfb716d2fd5239bdad55ea0222d043ef49aa2f"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 46,
      "deletions": 4
    },
    "files": [
      {
        "sha": "60ab1780bc35e3193fc64f8b7e816dec2ddd7fd1",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edeb0749abf47e3647db594fd8cf82f1054fbf17/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edeb0749abf47e3647db594fd8cf82f1054fbf17/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=edeb0749abf47e3647db594fd8cf82f1054fbf17",
        "patch": "@@ -1044,6 +1044,7 @@ static RPCHelpMan submitrawpackage()\n         RPCResult{\n             RPCResult::Type::OBJ, \"\", \"\",\n             {\n+                {RPCResult::Type::STR_AMOUNT, \"package-feerate\", \"package feerate in \" + CURRENCY_UNIT + \"/KvB, the total modified fees divided by the total virtual size of all transactions in the package.\"},\n                 {RPCResult::Type::OBJ_DYN, \"tx-results\", \"transaction results keyed by wtxid\",\n                 {\n                     {RPCResult::Type::OBJ, \"xxxx\", \"transaction wtxid\", {\n@@ -1103,6 +1104,9 @@ static RPCHelpMan submitrawpackage()\n     }\n \n     UniValue rpc_result{UniValue::VOBJ};\n+    if (const auto package_feerate{package_result.m_package_feerate}) {\n+        rpc_result.pushKV(\"package-feerate\", ValueFromAmount(package_feerate.value().GetFeePerK()));\n+    }\n     if (package_result.m_state.IsInvalid()) {\n         switch(package_result.m_state.GetResult()) {\n             case PackageValidationResult::PCKG_RESULT_UNSET: break;"
      },
      {
        "sha": "7d9c848d74ff332752db9040735c67af6675635c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 4,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edeb0749abf47e3647db594fd8cf82f1054fbf17/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edeb0749abf47e3647db594fd8cf82f1054fbf17/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=edeb0749abf47e3647db594fd8cf82f1054fbf17",
        "patch": "@@ -455,6 +455,10 @@ class MemPoolAccept\n          * partially submitted.\n          */\n         const bool m_package_submission;\n+        /** When true, use package feerates instead of individual transaction feerates for fee-based\n+         * policies such as mempool min fee and min relay fee.\n+         */\n+        const bool m_package_feerates;\n \n         /** Parameters for single transaction mempool validation. */\n         static ATMPArgs SingleAccept(const CChainParams& chainparams, int64_t accept_time,\n@@ -467,6 +471,7 @@ class MemPoolAccept\n                             /* m_test_accept */ test_accept,\n                             /* m_allow_bip125_replacement */ true,\n                             /* m_package_submission */ false,\n+                            /* m_package_feerates */ false,\n             };\n         }\n \n@@ -480,6 +485,7 @@ class MemPoolAccept\n                             /* m_test_accept */ true,\n                             /* m_allow_bip125_replacement */ false,\n                             /* m_package_submission */ false,\n+                            /* m_package_feerates */ true,\n             };\n         }\n \n@@ -492,6 +498,7 @@ class MemPoolAccept\n                             /* m_test_accept */ false,\n                             /* m_allow_bip125_replacement */ false,\n                             /* m_package_submission */ true,\n+                            /* m_package_feerates */ true,\n             };\n         }\n \n@@ -611,6 +618,10 @@ class MemPoolAccept\n \n     CChainState& m_active_chainstate;\n \n+    // Used to calculate package feerate.\n+    CAmount m_total_modified_fees;\n+    int64_t m_total_vsize;\n+\n     // The package limits in effect at the time of invocation.\n     // The same ancestor limits are applied for every transaction.\n     const size_t m_limit_ancestors;\n@@ -780,9 +791,10 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"bad-txns-too-many-sigops\",\n                 strprintf(\"%d\", nSigOpsCost));\n \n-    // No transactions are allowed below minRelayTxFee except from disconnected\n-    // blocks\n-    if (!bypass_limits && !CheckFeeRate(ws.m_vsize, ws.m_modified_fees, state)) return false;\n+    // No individual transactions are allowed below minRelayTxFee and mempool min fee except from\n+    // disconnected blocks and transactions in a package. Package transactions will be checked using\n+    // descendant feerates later.\n+    if (!bypass_limits && !args.m_package_feerates && !CheckFeeRate(ws.m_vsize, ws.m_modified_fees, state)) return false;\n \n     const CTxMemPool::setEntries setIterConflicting = m_pool.GetIterSet(ws.m_conflicts);\n     // Calculate in-mempool ancestors, up to a limit.\n@@ -1159,6 +1171,21 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Transactions must meet two minimum feerates: the mempool minimum fee and min relay fee.\n+    // For transactions consisting of exactly one child and its parents, it suffices to use the\n+    // package feerate (total modified fees / total virtual size) to check this requirement.\n+    m_total_vsize = std::accumulate(workspaces.cbegin(), workspaces.cend(), 0,\n+        [](int64_t sum, auto& ws) { return sum + ws.m_vsize; });\n+    m_total_modified_fees = std::accumulate(workspaces.cbegin(), workspaces.cend(), 0,\n+        [](CAmount sum, auto& ws) { return sum + ws.m_modified_fees; });\n+    const CFeeRate package_feerate(m_total_modified_fees, m_total_vsize);\n+    TxValidationState placeholder_state;\n+    if (args.m_package_feerates && IsChildWithParents(txns, /* exact */ false) &&\n+        !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n+        return PackageMempoolAcceptResult(package_state, package_feerate, {});\n+    }\n+\n     // Apply package mempool ancestor/descendant limits. Skip if there is only one transaction,\n     // because it's unnecessary. Also, CPFP carve out can increase the limit for individual\n     // transactions, but this exemption is not extended to packages in CheckPackageLimits().\n@@ -1193,7 +1220,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         return PackageMempoolAcceptResult(package_state, std::move(results));\n     }\n \n-    return PackageMempoolAcceptResult(package_state, std::move(results));\n+    return PackageMempoolAcceptResult(package_state, package_feerate, std::move(results));\n }\n \n PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)"
      },
      {
        "sha": "49c5a83cbce6711d604f0eccb56128281356b9d7",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edeb0749abf47e3647db594fd8cf82f1054fbf17/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edeb0749abf47e3647db594fd8cf82f1054fbf17/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=edeb0749abf47e3647db594fd8cf82f1054fbf17",
        "patch": "@@ -203,11 +203,19 @@ struct PackageMempoolAcceptResult\n     * was a package-wide error (see result in m_state), m_tx_results will be empty.\n     */\n     std::map<const uint256, const MempoolAcceptResult> m_tx_results;\n+    /** Package feerate, defined as the aggregated modified fees divided by the total virtual size\n+     * of all transactions in the package.  May be unavailable if some inputs were not available or\n+     * a transaction failure caused validation to terminate early. */\n+    std::optional<CFeeRate> m_package_feerate;\n \n     explicit PackageMempoolAcceptResult(PackageValidationState state,\n                                         std::map<const uint256, const MempoolAcceptResult>&& results)\n         : m_state{state}, m_tx_results(std::move(results)) {}\n \n+    explicit PackageMempoolAcceptResult(PackageValidationState state, CFeeRate feerate,\n+                                        std::map<const uint256, const MempoolAcceptResult>&& results)\n+        : m_state{state}, m_tx_results(std::move(results)), m_package_feerate{feerate} {}\n+\n     /** Constructor to create a PackageMempoolAcceptResult from a single MempoolAcceptResult */\n     explicit PackageMempoolAcceptResult(const uint256& wtxid, const MempoolAcceptResult& result)\n         : m_tx_results{ {wtxid, result} } {}\n@@ -229,6 +237,9 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n * 4. The package transactions cannot conflict with each other, i.e., spend the same inputs.\n * 5. The package transactions cannot conflict with any mempool transactions. BIP125 replacements are\n *    not allowed.\n+* 6. For all fee requirements, the package feerate (defined as the aggregated modified fees divided\n+*    by the aggregated virtual size of all package transactions) is used. Individual transaction\n+*    fee checks may be bypassed.\n *\n * When test_accept = false, the package must also meet the following requirements:\n * 1. The package must consist of exactly 1 child and all of its parents (this also means it"
      }
    ]
  },
  {
    "sha": "f37e126bc8ee4d6afba8e1bcf3cddfb6875051ab",
    "node_id": "C_kwDOABII59oAKGYzN2UxMjZiYzhlZTRkNmFmYmE4ZTFiY2YzY2RkZmI2ODc1MDUxYWI",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-20T12:27:45Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-20T10:27:42Z"
      },
      "message": "[test] package submission with CPFP'd zero-fee parent\n\nUpdate the existing unit test to have 0 fees in parent, 1BTC fees in\nchild. This makes the parent too-low-fee by itself, but enough with its\nchild.",
      "tree": {
        "sha": "3c783ddd277e68c36d29994f45a8c6c69683362a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c783ddd277e68c36d29994f45a8c6c69683362a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f37e126bc8ee4d6afba8e1bcf3cddfb6875051ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f37e126bc8ee4d6afba8e1bcf3cddfb6875051ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f37e126bc8ee4d6afba8e1bcf3cddfb6875051ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f37e126bc8ee4d6afba8e1bcf3cddfb6875051ab/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "edeb0749abf47e3647db594fd8cf82f1054fbf17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edeb0749abf47e3647db594fd8cf82f1054fbf17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/edeb0749abf47e3647db594fd8cf82f1054fbf17"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 10,
      "deletions": 7
    },
    "files": [
      {
        "sha": "531d6c55f5f3b14c1474e3905914bb7aec0ca097",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f37e126bc8ee4d6afba8e1bcf3cddfb6875051ab/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f37e126bc8ee4d6afba8e1bcf3cddfb6875051ab/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=f37e126bc8ee4d6afba8e1bcf3cddfb6875051ab",
        "patch": "@@ -73,16 +73,16 @@ inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outpu\n BOOST_FIXTURE_TEST_CASE(package_tests, TestChain100Setup)\n {\n     LOCK(cs_main);\n-    unsigned int initialPoolSize = m_node.mempool->size();\n-\n-    // Parent and Child Package\n+    unsigned int expected_pool_size = m_node.mempool->size();\n+    // Parent and Child Package with CPFP. The parent has a fee of 0 (which would not meet the min\n+    // relay fee), but is fee-bumped with the child.\n     CKey parent_key;\n     parent_key.MakeNewKey(true);\n     CScript parent_locking_script = GetScriptForDestination(PKHash(parent_key.GetPubKey()));\n     auto mtx_parent = CreateValidMempoolTransaction(/* input_transaction */ m_coinbase_txns[0], /* vout */ 0,\n                                                     /* input_height */ 0, /* input_signing_key */ coinbaseKey,\n                                                     /* output_destination */ parent_locking_script,\n-                                                    /* output_amount */ CAmount(49 * COIN), /* submit */ false);\n+                                                    /* output_amount */ CAmount(50 * COIN), /* submit */ false);\n     CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n \n     CKey child_key;\n@@ -91,19 +91,22 @@ BOOST_FIXTURE_TEST_CASE(package_tests, TestChain100Setup)\n     auto mtx_child = CreateValidMempoolTransaction(/* input_transaction */ tx_parent, /* vout */ 0,\n                                                    /* input_height */ 101, /* input_signing_key */ parent_key,\n                                                    /* output_destination */ child_locking_script,\n-                                                   /* output_amount */ CAmount(48 * COIN), /* submit */ false);\n+                                                   /* output_amount */ CAmount(49 * COIN), /* submit */ false);\n     CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n-    const auto result_parent_child = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, {tx_parent, tx_child}, /* test_accept */ true);\n+    const auto result_parent_child = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, {tx_parent, tx_child}, /* test_accept */ false);\n+    expected_pool_size += 2;\n     BOOST_CHECK_MESSAGE(result_parent_child.m_state.IsValid(),\n                         \"Package validation unexpectedly failed: \" << result_parent_child.m_state.GetRejectReason());\n     auto it_parent = result_parent_child.m_tx_results.find(tx_parent->GetWitnessHash());\n     auto it_child = result_parent_child.m_tx_results.find(tx_child->GetWitnessHash());\n     BOOST_CHECK(it_parent != result_parent_child.m_tx_results.end());\n     BOOST_CHECK_MESSAGE(it_parent->second.m_state.IsValid(),\n                         \"Package validation unexpectedly failed: \" << it_parent->second.m_state.GetRejectReason());\n+    BOOST_CHECK(it_parent->second.m_base_fees == 0);\n     BOOST_CHECK(it_child != result_parent_child.m_tx_results.end());\n     BOOST_CHECK_MESSAGE(it_child->second.m_state.IsValid(),\n                         \"Package validation unexpectedly failed: \" << it_child->second.m_state.GetRejectReason());\n+    BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n \n     // Packages can't have more than 25 transactions.\n     Package package_too_many;\n@@ -143,6 +146,6 @@ BOOST_FIXTURE_TEST_CASE(package_tests, TestChain100Setup)\n     BOOST_CHECK_EQUAL(it_giant_tx->second.m_state.GetRejectReason(), \"tx-size\");\n \n     // Check that mempool size hasn't changed.\n-    BOOST_CHECK_EQUAL(m_node.mempool->size(), initialPoolSize);\n+    BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n }\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "40c368a2368d7bb808501182224e3ab1e5ace05a",
    "node_id": "C_kwDOABII59oAKDQwYzM2OGEyMzY4ZDdiYjgwODUwMTE4MjIyNGUzYWIxZTVhY2UwNWE",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-03T15:39:35Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-20T10:27:42Z"
      },
      "message": "[validation] make most RBF members MemPoolAccept-wide\n\nNo change in behavior.\n\nFor single transaction acceptance, this is a simple refactor:\nWorkspace::m_all_conflicting -> MemPoolAccept::m_all_conflicts\nWorkspace::m_replacement_transaction -> MemPoolAccept::m_rbf\nWorkspace::m_conflicting_fees -> MemPoolAccept::m_conflicting_fees\nWorkspace::m_conflicting_size -> MemPoolAccept::m_conflicting_size\nWorkspace::m_replaced_transactions -> MemPoolAccept::m_replaced_transactions\n\nFor package acceptance, we don't enable RBF yet, but we want these to be\npackage-wide variables because:\n- Transactions will never have the same conflict by prevout in the\npackage, but they could have the same conflict by tx, and their\nconflicts could share descendants.\n- We want to compare conflicts with the package fee rather than\nindividual transaction fee.",
      "tree": {
        "sha": "85d34927c19515b221400a81898390ad17d04c9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85d34927c19515b221400a81898390ad17d04c9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40c368a2368d7bb808501182224e3ab1e5ace05a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40c368a2368d7bb808501182224e3ab1e5ace05a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40c368a2368d7bb808501182224e3ab1e5ace05a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40c368a2368d7bb808501182224e3ab1e5ace05a/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f37e126bc8ee4d6afba8e1bcf3cddfb6875051ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f37e126bc8ee4d6afba8e1bcf3cddfb6875051ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f37e126bc8ee4d6afba8e1bcf3cddfb6875051ab"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 38,
      "deletions": 27
    },
    "files": [
      {
        "sha": "a873c6e397bf5f5764f0bb74246cc856f2d9caed",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 27,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40c368a2368d7bb808501182224e3ab1e5ace05a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40c368a2368d7bb808501182224e3ab1e5ace05a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=40c368a2368d7bb808501182224e3ab1e5ace05a",
        "patch": "@@ -531,22 +531,17 @@ class MemPoolAccept\n             m_ptx(ptx), m_hash(ptx->GetHash()),\n             m_tx_limit_descendants{limit_descendants},\n             m_tx_limit_descendant_size{limit_descendant_size} {}\n-        std::set<uint256> m_conflicts;\n-        CTxMemPool::setEntries m_all_conflicting;\n         CTxMemPool::setEntries m_ancestors;\n         std::unique_ptr<CTxMemPoolEntry> m_entry;\n-        std::list<CTransactionRef> m_replaced_transactions;\n \n-        bool m_replacement_transaction;\n+        /** The set of txids corresponding to mempool entries that this transaction directly conflicts with. */\n+        std::set<uint256> m_conflicts;\n+\n         /** Virtual size of the transaction as used by the mempool, calculated using serialized size\n          * of the transaction and sigops. */\n         int64_t m_vsize;\n         CAmount m_base_fees;\n         CAmount m_modified_fees;\n-        /** Total modified fees of all transactions being replaced. */\n-        CAmount m_conflicting_fees{0};\n-        /** Total virtual size of all transactions being replaced. */\n-        size_t m_conflicting_size{0};\n \n         const CTransactionRef& m_ptx;\n         const uint256& m_hash;\n@@ -630,6 +625,23 @@ class MemPoolAccept\n     // descendant limits, which may be edited to account for the transaction's mempool conflicts.\n     const size_t m_limit_descendants;\n     const size_t m_limit_descendant_size;\n+\n+    // RBF-related members\n+    /** Whether we are replacing any transactions by BIP125 RBF. */\n+    bool m_rbf;\n+    /** All conflicting mempool transactions and their descendants. */\n+    CTxMemPool::setEntries m_all_conflicts;\n+    /** Mempool transactions that were replaced. */\n+    std::list<CTransactionRef> m_replaced_transactions;\n+\n+    /** Total modified fees of mempool transactions being replaced. */\n+    CAmount m_conflicting_fees{0};\n+    /** Total size (in virtual bytes) of mempool transactions being replaced. */\n+    size_t m_conflicting_size{0};\n+\n+    /** In-mempool ancestors of the transaction(s) being validated. If there are multiple\n+     * transactions, this is the de-duplicated union of all ancestors. */\n+    CTxMemPool::setEntries m_collective_ancestors;\n };\n \n bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n@@ -881,9 +893,8 @@ bool MemPoolAccept::MempoolChecks(Workspace& ws)\n     TxValidationState& state = ws.m_state;\n     const CTxMemPool::setEntries setIterConflicting = m_pool.GetIterSet(ws.m_conflicts);\n \n-    ws.m_replacement_transaction = ws.m_conflicts.size();\n-    if (ws.m_replacement_transaction)\n-    {\n+    m_rbf = ws.m_conflicts.size() > 0;\n+    if (m_rbf) {\n         CFeeRate newFeeRate(ws.m_modified_fees, ws.m_vsize);\n         // It's possible that the replacement pays more fees than its direct conflicts but not more\n         // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n@@ -896,7 +907,7 @@ bool MemPoolAccept::MempoolChecks(Workspace& ws)\n         }\n \n         // Calculate all conflicting entries and enforce BIP125 Rule #5.\n-        if (const auto err_string{GetEntriesForConflicts(tx, m_pool, setIterConflicting, ws.m_all_conflicting)}) {\n+        if (const auto err_string{GetEntriesForConflicts(tx, m_pool, setIterConflicting, m_all_conflicts)}) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n                                  \"too many potential replacements\", *err_string);\n         }\n@@ -908,11 +919,11 @@ bool MemPoolAccept::MempoolChecks(Workspace& ws)\n \n         // Check if it's economically rational to mine this transaction rather than the ones it\n         // replaces and pays for its own relay fees. Enforce BIP125 Rules #3 and #4.\n-        for (CTxMemPool::txiter it : ws.m_all_conflicting) {\n-            ws.m_conflicting_fees += it->GetModifiedFee();\n-            ws.m_conflicting_size += it->GetTxSize();\n+        for (CTxMemPool::txiter it : m_all_conflicts) {\n+            m_conflicting_fees += it->GetModifiedFee();\n+            m_conflicting_size += it->GetTxSize();\n         }\n-        if (const auto err_string{PaysForRBF(ws.m_conflicting_fees, ws.m_modified_fees, ws.m_vsize,\n+        if (const auto err_string{PaysForRBF(m_conflicting_fees, ws.m_modified_fees, ws.m_vsize,\n                                              ::incrementalRelayFee, hash)}) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n         }\n@@ -1000,27 +1011,27 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     const uint256& hash = ws.m_hash;\n     TxValidationState& state = ws.m_state;\n     const bool bypass_limits = args.m_bypass_limits;\n-\n     std::unique_ptr<CTxMemPoolEntry>& entry = ws.m_entry;\n \n     // Remove conflicting transactions from the mempool\n-    for (CTxMemPool::txiter it : ws.m_all_conflicting)\n+    for (CTxMemPool::txiter it : m_all_conflicts)\n     {\n         LogPrint(BCLog::MEMPOOL, \"replacing tx %s with %s for %s additional fees, %d delta bytes\\n\",\n                 it->GetTx().GetHash().ToString(),\n                 hash.ToString(),\n-                FormatMoney(ws.m_modified_fees - ws.m_conflicting_fees),\n-                (int)entry->GetTxSize() - (int)ws.m_conflicting_size);\n-        ws.m_replaced_transactions.push_back(it->GetSharedTx());\n+                FormatMoney(ws.m_modified_fees - m_conflicting_fees),\n+                (int)entry->GetTxSize() - (int)m_conflicting_size);\n+        m_replaced_transactions.push_back(it->GetSharedTx());\n     }\n-    m_pool.RemoveStaged(ws.m_all_conflicting, false, MemPoolRemovalReason::REPLACED);\n+    m_pool.RemoveStaged(m_all_conflicts, false, MemPoolRemovalReason::REPLACED);\n+    m_all_conflicts.clear();\n \n     // This transaction should only count for fee estimation if:\n     // - it isn't a BIP 125 replacement transaction (may not be widely supported)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !ws.m_replacement_transaction && !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    bool validForFeeEstimation = !m_rbf && !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n@@ -1088,7 +1099,7 @@ bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>\n     for (Workspace& ws : workspaces) {\n         if (m_pool.exists(GenTxid(true, ws.m_ptx->GetWitnessHash()))) {\n             results.emplace(ws.m_ptx->GetWitnessHash(),\n-                MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_vsize, ws.m_base_fees));\n+                MempoolAcceptResult::Success(std::move(m_replaced_transactions), ws.m_vsize, ws.m_base_fees));\n             GetMainSignals().TransactionAddedToMempool(ws.m_ptx, m_pool.GetAndIncrementSequence());\n         } else {\n             all_submitted = false;\n@@ -1121,14 +1132,14 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_vsize, ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(m_replaced_transactions), ws.m_vsize, ws.m_base_fees);\n     }\n \n     if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_vsize, ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(m_replaced_transactions), ws.m_vsize, ws.m_base_fees);\n }\n \n PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n@@ -1208,7 +1219,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are\n             // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).\n             results.emplace(ws.m_ptx->GetWitnessHash(),\n-                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions),\n+                            MempoolAcceptResult::Success(std::move(m_replaced_transactions),\n                                                          ws.m_vsize, ws.m_base_fees));\n         }\n     }"
      }
    ]
  },
  {
    "sha": "1a0b766ab18c8a156dc8463cd500b56ec1efa800",
    "node_id": "C_kwDOABII59oAKDFhMGI3NjZhYjE4YzhhMTU2ZGM4NDYzY2Q1MDBiNTZlYzFlZmE4MDA",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-03T17:30:00Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-20T10:27:42Z"
      },
      "message": "[packages/policy] implement package RBF",
      "tree": {
        "sha": "250acd630c1df3b7415d3e4d0c0a157541065391",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/250acd630c1df3b7415d3e4d0c0a157541065391"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a0b766ab18c8a156dc8463cd500b56ec1efa800",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a0b766ab18c8a156dc8463cd500b56ec1efa800",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a0b766ab18c8a156dc8463cd500b56ec1efa800",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a0b766ab18c8a156dc8463cd500b56ec1efa800/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40c368a2368d7bb808501182224e3ab1e5ace05a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40c368a2368d7bb808501182224e3ab1e5ace05a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40c368a2368d7bb808501182224e3ab1e5ace05a"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 103,
      "deletions": 9
    },
    "files": [
      {
        "sha": "dbfd588835f571acc35060a31d94f3c6879c0161",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 88,
        "deletions": 6,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a0b766ab18c8a156dc8463cd500b56ec1efa800/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a0b766ab18c8a156dc8463cd500b56ec1efa800/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1a0b766ab18c8a156dc8463cd500b56ec1efa800",
        "patch": "@@ -496,7 +496,7 @@ class MemPoolAccept\n                             /* m_bypass_limits */ false,\n                             /* m_coins_to_uncache */ coins_to_uncache,\n                             /* m_test_accept */ false,\n-                            /* m_allow_bip125_replacement */ false,\n+                            /* m_allow_bip125_replacement */ true,\n                             /* m_package_submission */ true,\n                             /* m_package_feerates */ true,\n             };\n@@ -938,13 +938,90 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n     AssertLockHeld(cs_main);\n     AssertLockHeld(m_pool.cs);\n \n+    for (const auto& ws : workspaces) {\n+        for (const auto& it : ws.m_ancestors) m_collective_ancestors.insert(it);\n+    }\n+\n     std::string err_string;\n     if (!m_pool.CheckPackageLimits(txns, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n                                    m_limit_descendant_size, err_string)) {\n+        // TODO: When replacements exist, to avoid overestimating descendant counts, deduct the\n+        // to-be-replaced mempool entries when counting descendants. Note that this is not\n+        // necessarily as simple as subtracting the count/size from descendant limits, because\n+        // multiple transactions may conflict with the same entries, causing us to double-count them\n+        // and their descendants.\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n     }\n-   return true;\n+\n+    // Further checks are all RBF-only.\n+    m_rbf = std::any_of(workspaces.cbegin(), workspaces.cend(), [](const auto& ws){return !ws.m_conflicts.empty();});\n+    if (!m_rbf) return true;\n+\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(m_pool.GetIterSet(ws.m_conflicts));\n+    }\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const auto hash = workspaces[workspaces.size() - 1].m_ptx->GetHash();\n+    const CFeeRate package_feerate(m_total_modified_fees, m_total_vsize);\n+\n+    if (const auto err_string{PaysMoreThanConflicts(direct_conflict_iters, package_feerate, hash)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient fees\", *err_string);\n+    }\n+\n+    // Calculate all conflicting entries and enforce Rules 2 and 5.\n+    for (Workspace& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+        // None of the package transactions are allowed to spend additional unconfirmed inputs, even\n+        // if they aren't one of the transactions that conflicts with mempool.  (Note that this rule\n+        // doesn't apply to the child in the package).  Rationale: This rule is intended to prevent\n+        // us from overestimating a replacement transaction's ancestor score. For example, the\n+        // replacement transactions themselves may have a high feerate, but depend on some low-fee\n+        // mempool transactions that actually don't make them better candidates for mining than the\n+        // ones they would replace. For now, if any of the package transactions had ancestors, we\n+        // can't trust the package feerate, so don't allow any new unconfirmed inputs.\n+        // TODO: Remove this requirement by using the child's ancestor fees and feerate (including\n+        // mempool and package transactions) instead.\n+        if (const auto err_string{HasNoNewUnconfirmed(*ws.m_ptx, m_pool, direct_conflict_iters)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: replacement adds unconfirmed\", *err_string);\n+        }\n+    }\n+\n+    // Check that the union of all collective conflicts and ancestors is disjoint.\n+    std::set<uint256> all_conflicting_txids;\n+    std::transform(m_all_conflicts.cbegin(), m_all_conflicts.cend(),\n+                   std::inserter(all_conflicting_txids, all_conflicting_txids.end()),\n+                   [](const auto& entry) { return entry->GetTx().GetHash(); });\n+    if (const auto err_string{EntriesAndTxidsDisjoint(m_collective_ancestors, all_conflicting_txids, hash)}) {\n+        // Note that we handle this differently in individual transaction validation (a transaction\n+        // that conflicts with its own dependency is inconsistent, but this could just be\n+        // conflicting transactions in a package).\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: package conflicts with dependency\", *err_string);\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.\n+    for (CTxMemPool::txiter it : m_all_conflicts) {\n+        m_conflicting_fees += it->GetModifiedFee();\n+        m_conflicting_size += it->GetTxSize();\n+    }\n+    if (const auto err_string{PaysForRBF(m_conflicting_fees, m_total_modified_fees, m_total_vsize,\n+                                         ::incrementalRelayFee, hash)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient fees\", *err_string);\n+    }\n+\n+    return true;\n }\n \n bool MemPoolAccept::PolicyScriptChecks(const ATMPArgs& args, Workspace& ws)\n@@ -1054,6 +1131,7 @@ bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(m_pool.cs);\n+\n     // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n     // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n     // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n@@ -1175,10 +1253,14 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             return PackageMempoolAcceptResult(package_state, std::move(results));\n         }\n         // Make the coins created by this transaction available for subsequent transactions in the\n-        // package to spend. Since we already checked conflicts in the package and we don't allow\n-        // replacements, we don't need to track the coins spent. Note that this logic will need to be\n-        // updated if package replace-by-fee is allowed in the future.\n-        assert(!args.m_allow_bip125_replacement);\n+        // package to spend. Since we already checked conflicts, no transaction can spend the parent\n+        // of another transaction in the package. We also need to make sure that no package tx\n+        // replaces (or replaces the ancestor of) the parent of another package tx. As long as we\n+        // do these two things, we don't need to track the coins spent.\n+        // If we allow the child to replace transactions in the future, note that it's possible for\n+        // a child's \"conflict\" to be negated by one of its parents replacing the conflicting\n+        // mempool transaction. If this is enabled, be sure to track the coins added and spent by\n+        // to-be-replaced transactions in m_view.\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n "
      },
      {
        "sha": "1fc26a2ba5ccd8b9bbc7853ff235391a57c54701",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a0b766ab18c8a156dc8463cd500b56ec1efa800/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a0b766ab18c8a156dc8463cd500b56ec1efa800/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=1a0b766ab18c8a156dc8463cd500b56ec1efa800",
        "patch": "@@ -235,15 +235,27 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n * 2. The package's total virtual size cannot exceed 101KvB.\n * 3. If dependencies exist, parents must appear anywhere in the lsit before their children.\n * 4. The package transactions cannot conflict with each other, i.e., spend the same inputs.\n-* 5. The package transactions cannot conflict with any mempool transactions. BIP125 replacements are\n-*    not allowed.\n-* 6. For all fee requirements, the package feerate (defined as the aggregated modified fees divided\n+* 5. For all fee requirements, the package feerate (defined as the aggregated modified fees divided\n *    by the aggregated virtual size of all package transactions) is used. Individual transaction\n *    fee checks may be bypassed.\n *\n * When test_accept = false, the package must also meet the following requirements:\n * 1. The package must consist of exactly 1 child and all of its parents (this also means it\n *    must contain at least 2 transactions).\n+* 2. The child transaction must not conflict with any mempool transaction.\n+* 3. One or more parents in the package may replace mempool transactions by RBF if the following are\n+*    true (analogous but not identical to BIP125 RBF):\n+*    - No package transaction replaces the dependency of another package transaction.\n+*    - All original transactions signal replaceability.\n+*    - None of the transactions in the package have any unconfirmed inputs.\n+*    - The package total modified fees >= the modified fees of the original transactions.\n+*    - The package pays for its own bandwidth: its feerate is >= incrementalRelayFee higher than the\n+*      original transactions.\n+*    - No more than 100 mempool transactions would be replaced.\n+*\n+* When test_accept = true, the package must also meet the following requirements:\n+* 1. The package transactions cannot conflict with any mempool transactions. BIP125 replacements are\n+*    not allowed.\n *\n * @returns a PackageMempoolAcceptResult which includes a MempoolAcceptResult for each transaction\n * that was fully validated. If a transaction fails, validation will exit early and some results may"
      }
    ]
  },
  {
    "sha": "98238e732513197803a898c2ad89a31572098e0b",
    "node_id": "C_kwDOABII59oAKDk4MjM4ZTczMjUxMzE5NzgwM2E4OThjMmFkODlhMzE1NzIwOThlMGI",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-03T14:44:34Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-20T10:27:42Z"
      },
      "message": "[functional test] package RBF\n\nCreated a new file because rpc_packages.py is for testing that the RPCs\nare returning the results we want. feature_package_relay is for testing\nthe special policies and behaviors like CPFP and RBF.",
      "tree": {
        "sha": "7b3dde7db141a5812adbdc7487bc6b5422774e84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b3dde7db141a5812adbdc7487bc6b5422774e84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98238e732513197803a898c2ad89a31572098e0b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98238e732513197803a898c2ad89a31572098e0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98238e732513197803a898c2ad89a31572098e0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98238e732513197803a898c2ad89a31572098e0b/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a0b766ab18c8a156dc8463cd500b56ec1efa800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a0b766ab18c8a156dc8463cd500b56ec1efa800",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a0b766ab18c8a156dc8463cd500b56ec1efa800"
      }
    ],
    "stats": {
      "total": 330,
      "additions": 329,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7287349e8cb40ec6ff2d0cffe5c72e872349b7a5",
        "filename": "test/functional/feature_package_relay.py",
        "status": "added",
        "additions": 326,
        "deletions": 0,
        "changes": 326,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98238e732513197803a898c2ad89a31572098e0b/test/functional/feature_package_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98238e732513197803a898c2ad89a31572098e0b/test/functional/feature_package_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_package_relay.py?ref=98238e732513197803a898c2ad89a31572098e0b",
        "patch": "@@ -0,0 +1,326 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.address import (\n+    ADDRESS_BCRT1_P2WSH_OP_TRUE,\n+    ADDRESS_BCRT1_UNSPENDABLE,\n+)\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    tx_from_hex,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    create_child_with_parents,\n+    DEFAULT_FEE,\n+    make_chain,\n+)\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=True)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coins, parent_fee=0, child_fee=DEFAULT_FEE):\n+        \"\"\"Create a child-with-parents package using the parent_coins passed in.\n+        Each coin in parent_coins will be used to fund one parent transaction.\n+        Thus, the package will contain len(parent_coins) parents and 1 child.\n+        Default fee for the parent transactions is 0.\n+        The child will have a fee of 0.0001BTC*len(parent_coins) unless otherwise specified.\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        node = self.nodes[0]\n+        package_hex = []\n+        package_txns = []\n+        values = []\n+        scripts = []\n+        # Create the parents\n+        for coin in parent_coins:\n+            value = coin[\"amount\"]\n+            txid = coin[\"txid\"]\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, None, parent_fee)\n+            package_hex.append(txhex)\n+            package_txns.append(tx)\n+            values.append(value)\n+            scripts.append(spk)\n+        # Subtract the fee that will automatically be applied. Pass in the fee difference.\n+        child_hex = create_child_with_parents(node, self.address, self.privkeys, package_txns, values, scripts, child_fee)\n+        package_hex.append(child_hex)\n+        package_txns.append(tx_from_hex(child_hex))\n+        return package_hex, package_txns\n+\n+    def create_package_heavy(self, parent_coins):\n+        \"\"\"Create a package with a parent for each coin in parent_coins as inputs.\n+        Each parent will have 3 outputs and slightly higher fees.\n+        There will be 1 child of all the parent transactions (a package can only have 1 child).\n+        Default fee for each parent transaction is 0.0001001\n+        Default fee for the child transaction is 0.0001BTC*num_parents\n+\n+        returns tuple (package_hex, package_txns)\n+        \"\"\"\n+        node = self.nodes[0]\n+        package_hex = []\n+        package_txns = []\n+        values = []\n+        scripts = []\n+        # Create the parents\n+        for coin in parent_coins:\n+            value = coin[\"amount\"]\n+            txid = coin[\"txid\"]\n+            # Subtract a tiny additional amount to increase the absolute fee\n+            amount_each = (value - Decimal(\"0.0001001\")) / 3\n+            inputs = [{\"txid\": txid, \"vout\": 0, \"sequence\": BIP125_SEQUENCE_NUMBER}]\n+            outputs = {\n+                self.address : amount_each,\n+                ADDRESS_BCRT1_P2WSH_OP_TRUE: amount_each,\n+                ADDRESS_BCRT1_UNSPENDABLE: amount_each,\n+            }\n+            rawtx = node.createrawtransaction(inputs, outputs)\n+            txhex = node.signrawtransactionwithkey(rawtx, self.privkeys)[\"hex\"]\n+            package_hex.append(txhex)\n+            tx = tx_from_hex(txhex)\n+            package_txns.append(tx)\n+            values.append(amount_each)\n+            scripts.append(tx.vout[0].scriptPubKey.hex())\n+        # This function will use the first output of each parent\n+        child_hex = create_child_with_parents(node, self.address, self.privkeys, package_txns, values, scripts)\n+        package_hex.append(child_hex)\n+        package_txns.append(tx_from_hex(child_hex))\n+        return package_hex, package_txns\n+\n+    def create_package_many_conflicts(self, parent_coins):\n+        \"\"\"Create a family of transactions using the parent_coins passed in (should have > 100).\n+        The goal here is to have more than 100 dependencies so we hit the BIP125 Rule 5 limit.\n+        Every 10 coins will be used to fund 1 parent transaction, so num_parents = parent_coins/10\n+        There will be 1 child of all the parent transactions.\n+        Default fee for each transaction is 0.0001BTC.\n+\n+        returns tuple (package_hex, package_txns)\n+        \"\"\"\n+        assert_greater_than_or_equal(len(parent_coins), 100)\n+        node = self.nodes[0]\n+\n+        # Create a package that spends 10 coins per parent\n+        package_hex = []\n+        package_txns = []\n+        values = []\n+        scripts = []\n+        # Create the parents\n+        for i in range(len(parent_coins) // 10):\n+            my_coins = parent_coins[10*i : 10*i+10]\n+            inputs = [{\"txid\": coin[\"txid\"], \"vout\": 0} for coin in my_coins]\n+            my_value = sum([coin[\"amount\"] for coin in my_coins]) - DEFAULT_FEE\n+            outputs = {self.address: my_value}\n+            raw_parent = node.createrawtransaction(inputs, outputs)\n+            signed_parent = node.signrawtransactionwithkey(raw_parent, self.privkeys)\n+            assert signed_parent[\"complete\"]\n+            package_hex.append(signed_parent[\"hex\"])\n+            parent_tx = tx_from_hex(signed_parent[\"hex\"])\n+            package_txns.append(parent_tx)\n+            values.append(my_value)\n+            scripts.append(parent_tx.vout[0].scriptPubKey.hex())\n+        # Subtract the fee that will automatically be applied. Pass in the fee difference.\n+        child_hex = create_child_with_parents(node, self.address, self.privkeys, package_txns, values, scripts)\n+        package_hex.append(child_hex)\n+        package_txns.append(tx_from_hex(child_hex))\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(260, self.address)[:-100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_rule1()\n+        self.test_package_rbf_rule2()\n+        self.test_package_rbf_rule3()\n+        self.test_package_rbf_rule4()\n+        self.test_package_rbf_rule5()\n+        self.test_package_rbf_conflicting_conflicts()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that packages can RBF\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        num_parents = 2\n+        parent_coins = self.coins[:num_parents]\n+        del self.coins[:num_parents]\n+        (package_hex1, package_txns1) = self.create_simple_package(parent_coins, DEFAULT_FEE)\n+        (package_hex2, package_txns2) = self.create_simple_package(parent_coins, DEFAULT_FEE * 2)\n+        node.submitrawpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        node.submitrawpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        node.generate(1)\n+\n+    def test_package_rbf_rule1(self):\n+        self.log.info(\"Test that all replacement candidates in package RBF must signal BIP125 replaceability\")\n+        node = self.nodes[0]\n+        num_parents = 20\n+        parent_coins = self.coins[:num_parents]\n+        del self.coins[:num_parents]\n+        (package_hex, package_txns) = self.create_simple_package(parent_coins, DEFAULT_FEE * 3)\n+\n+        # Submit transactions to the mempool be replaced\n+        singleton_txns = []\n+        # Create 1 transaction per coin and submit to mempool.\n+        for coin in parent_coins[1:]:\n+            txid = coin[\"txid\"]\n+            value = coin[\"amount\"]\n+            (tx, txhex, _, _) = make_chain(node, self.address, self.privkeys, txid, value)\n+            node.sendrawtransaction(txhex)\n+            singleton_txns.append(tx)\n+\n+        # Create single transaction that doesn't signal replaceability\n+        coin = parent_coins[0]\n+        txid = coin[\"txid\"]\n+        value = coin[\"amount\"]\n+        inputs = [{\"txid\": txid, \"vout\": 0, \"sequence\": BIP125_SEQUENCE_NUMBER + 1}]\n+        outputs = {self.address: value - DEFAULT_FEE}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        txhex = node.signrawtransactionwithkey(rawtx, self.privkeys)[\"hex\"]\n+        node.sendrawtransaction(txhex)\n+\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", node.submitrawpackage, package_hex)\n+        self.assert_mempool_contents(expected=[tx_from_hex(txhex)] + singleton_txns, unexpected=package_txns)\n+        node.generate(1)\n+\n+    def test_package_rbf_rule2(self):\n+        self.log.info(\"Test that packages cannot RBF if they introduce other unconfirmed inputs\")\n+        node = self.nodes[0]\n+        num_parents = 2\n+        parent_coins = self.coins[:num_parents]\n+        del self.coins[:num_parents]\n+        (package_hex1, package_txns1) = self.create_simple_package(parent_coins, DEFAULT_FEE)\n+        node.submitrawpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Create a mempool transaction for additional unconfirmed input\n+        coin = self.coins.pop()\n+        value = coin[\"amount\"]\n+        (tx, txhex, _, _) = make_chain(node, self.address, self.privkeys, coin[\"txid\"], value)\n+        node.sendrawtransaction(txhex)\n+        parent_coins.append({\n+            \"txid\": tx.rehash(),\n+            \"amount\": value - DEFAULT_FEE,\n+            \"scriptPubKey\": tx.vout[0].scriptPubKey.hex(),\n+        })\n+        (package_hex2, package_txns2) = self.create_simple_package(parent_coins, DEFAULT_FEE * 2)\n+        assert_raises_rpc_error(-25, \"package RBF failed: replacement adds unconfirmed\", node.submitrawpackage, package_hex2)\n+        node.generate(1)\n+\n+    def test_package_rbf_rule3(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        num_parents = 10\n+        parent_coins = self.coins[:num_parents]\n+        del self.coins[:num_parents]\n+        (package_hex1, package_txns1) = self.create_package_heavy(parent_coins)\n+        node.submitrawpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package2_parent_fee = Decimal(\"0.00010005\")\n+        package2_absolute_fee = package2_parent_fee * 10 + DEFAULT_FEE\n+        (package_hex2, package_txns2) = self.create_simple_package(parent_coins, package2_parent_fee)\n+        assert_greater_than_or_equal(node.getmempoolinfo()[\"total_fee\"], package2_absolute_fee)\n+        assert_raises_rpc_error(-25, \"package RBF failed: insufficient fee\", node.submitrawpackage, package_hex2)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        (package_hex3, package_txns3) = self.create_simple_package(parent_coins, Decimal(\"0.0002\"))\n+        node.submitrawpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        node.generate(1)\n+\n+    def test_package_rbf_rule4(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        num_parents = 2\n+        parent_coins = self.coins[:num_parents]\n+        del self.coins[:num_parents]\n+        (package_hex1, package_txns1) = self.create_simple_package(parent_coins, Decimal(\"0.0001\"))\n+        (package_hex2, package_txns2) = self.create_simple_package(parent_coins, Decimal(\"0.0001001\"))\n+        node.submitrawpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        assert_raises_rpc_error(-25, \"package RBF failed: insufficient fee\", node.submitrawpackage, package_hex2)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        node.generate(1)\n+\n+    def test_package_rbf_rule5(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_parents = 110\n+        parent_coins = self.coins[:num_parents]\n+        del self.coins[:num_parents]\n+        (package_hex, package_txns) = self.create_package_many_conflicts(parent_coins)\n+        singleton_txns = []\n+        # Create 1 transaction per coin and submit to mempool.\n+        for coin in parent_coins:\n+            txid = coin[\"txid\"]\n+            value = coin[\"amount\"]\n+            # Low fee\n+            (tx, txhex, _, _) = make_chain(node, ADDRESS_BCRT1_P2WSH_OP_TRUE, self.privkeys, txid, value, 0, None, Decimal(\"0.00001\"))\n+            node.sendrawtransaction(txhex)\n+            singleton_txns.append(tx)\n+        self.assert_mempool_contents(expected=singleton_txns, unexpected=package_txns)\n+        assert_raises_rpc_error(-25, \"package RBF failed: too many potential replacements\", node.submitrawpackage, package_hex)\n+        node.generate(1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        num_parents = 5\n+        parent_coins = self.coins[:num_parents]\n+        del self.coins[:num_parents]\n+        (package_hex1, package_txns1) = self.create_simple_package(parent_coins, DEFAULT_FEE)\n+        (package_hex2, package_txns2) = self.create_simple_package(parent_coins, DEFAULT_FEE * 2)\n+        (package_hex3, package_txns3) = self.create_simple_package(parent_coins, DEFAULT_FEE * 4)\n+        node.submitrawpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"conflict-in-package\", node.submitrawpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        node.submitrawpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        node.submitrawpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+if __name__ == \"__main__\":\n+    PackageRelayTest().main()"
      },
      {
        "sha": "479a684067cfd03ce71e384d0f9fab45f5c8f729",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98238e732513197803a898c2ad89a31572098e0b/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98238e732513197803a898c2ad89a31572098e0b/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=98238e732513197803a898c2ad89a31572098e0b",
        "patch": "@@ -12,6 +12,7 @@\n from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n from test_framework.key import ECKey\n from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n     COIN,\n     COutPoint,\n     CTransaction,\n@@ -190,7 +191,7 @@ def make_chain(node, address, privkeys, parent_txid, parent_value, n=0, parent_l\n     amount = parent_value with a fee deducted.\n     Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n     \"\"\"\n-    inputs = [{\"txid\": parent_txid, \"vout\": n}]\n+    inputs = [{\"txid\": parent_txid, \"vout\": n, \"sequence\": BIP125_SEQUENCE_NUMBER}]\n     my_value = parent_value - fee\n     outputs = {address : my_value}\n     rawtx = node.createrawtransaction(inputs, outputs)"
      },
      {
        "sha": "1c1d559587d6639a5e4f038a6c0716f67245420b",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98238e732513197803a898c2ad89a31572098e0b/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98238e732513197803a898c2ad89a31572098e0b/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=98238e732513197803a898c2ad89a31572098e0b",
        "patch": "@@ -219,6 +219,7 @@\n     'rpc_createmultisig.py --descriptors',\n     'rpc_packages.py',\n     'mempool_package_limits.py',\n+    'feature_package_relay.py',\n     'feature_versionbits_warning.py',\n     'rpc_preciousblock.py',\n     'wallet_importprunedfunds.py --legacy-wallet',"
      }
    ]
  },
  {
    "sha": "4768198eec35e743fd4cab7ecf0d15bb2d5d0fa7",
    "node_id": "C_kwDOABII59oAKDQ3NjgxOThlZWMzNWU3NDNmZDRjYWI3ZWNmMGQxNWJiMmQ1ZDBmYTc",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-03T18:01:58Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-20T10:27:42Z"
      },
      "message": "[functional test] cpfp and rbf together",
      "tree": {
        "sha": "b6ca75540db933927bba662b180506b5c6e81dd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6ca75540db933927bba662b180506b5c6e81dd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4768198eec35e743fd4cab7ecf0d15bb2d5d0fa7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4768198eec35e743fd4cab7ecf0d15bb2d5d0fa7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4768198eec35e743fd4cab7ecf0d15bb2d5d0fa7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4768198eec35e743fd4cab7ecf0d15bb2d5d0fa7/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98238e732513197803a898c2ad89a31572098e0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98238e732513197803a898c2ad89a31572098e0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98238e732513197803a898c2ad89a31572098e0b"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ad0ac6b4a9277122543cee266635e5172e27e48f",
        "filename": "test/functional/feature_package_relay.py",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4768198eec35e743fd4cab7ecf0d15bb2d5d0fa7/test/functional/feature_package_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4768198eec35e743fd4cab7ecf0d15bb2d5d0fa7/test/functional/feature_package_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_package_relay.py?ref=4768198eec35e743fd4cab7ecf0d15bb2d5d0fa7",
        "patch": "@@ -171,6 +171,7 @@ def run_test(self):\n         self.test_package_rbf_rule4()\n         self.test_package_rbf_rule5()\n         self.test_package_rbf_conflicting_conflicts()\n+        self.test_cpfp()\n \n     def test_package_rbf_basic(self):\n         self.log.info(\"Test that packages can RBF\")\n@@ -322,5 +323,28 @@ def test_package_rbf_conflicting_conflicts(self):\n         node.submitrawpackage(package_hex3)\n         self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n \n+    def test_cpfp(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that a 0 fee parent can be CPFPed within a package\")\n+        parent_coin = self.coins.pop()\n+        (package_hex, package_txns) = self.create_simple_package([parent_coin])\n+        # Check that the parent doesn't pass by itself\n+        assert_raises_rpc_error(-26, \"min relay fee not met\", node.sendrawtransaction, package_hex[0])\n+        node.submitrawpackage(package_hex)\n+\n+        self.log.info(\"Check that we can RBF using a high-fee child even when parent doesn't meet min fee\")\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        num_parents = 2\n+        parent_coins = self.coins[:num_parents]\n+        del self.coins[:num_parents]\n+        (package_hex1, package_txns1) = self.create_simple_package(parent_coins, Decimal(\"0.00003\"))\n+        (package_hex2, package_txns2) = self.create_simple_package(parent_coins, parent_fee=0, child_fee=Decimal(\"0.001\"))\n+\n+        node.submitrawpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        node.submitrawpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+\n+\n if __name__ == \"__main__\":\n     PackageRelayTest().main()"
      }
    ]
  },
  {
    "sha": "634f950f25ba88e860a1e25fcda6b9e1f0be3782",
    "node_id": "C_kwDOABII59oAKDYzNGY5NTBmMjViYTg4ZTg2MGExZTI1ZmNkYTZiOWUxZjBiZTM3ODI",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-07T15:18:09Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-20T10:27:42Z"
      },
      "message": "[validation] implement ancestor comparison for RBF\n\nGated on an ATMPARgs value until later, so there are no behavior\nchanges in this commit.",
      "tree": {
        "sha": "f0d3503ef7aeb8e2f6787d74c796885cfe4f2e44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0d3503ef7aeb8e2f6787d74c796885cfe4f2e44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/634f950f25ba88e860a1e25fcda6b9e1f0be3782",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/634f950f25ba88e860a1e25fcda6b9e1f0be3782",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/634f950f25ba88e860a1e25fcda6b9e1f0be3782",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/634f950f25ba88e860a1e25fcda6b9e1f0be3782/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4768198eec35e743fd4cab7ecf0d15bb2d5d0fa7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4768198eec35e743fd4cab7ecf0d15bb2d5d0fa7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4768198eec35e743fd4cab7ecf0d15bb2d5d0fa7"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 97,
      "deletions": 41
    },
    "files": [
      {
        "sha": "79973dce21182cf40fa4e286ef4e48ac40ac02c8",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 7,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634f950f25ba88e860a1e25fcda6b9e1f0be3782/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634f950f25ba88e860a1e25fcda6b9e1f0be3782/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=634f950f25ba88e860a1e25fcda6b9e1f0be3782",
        "patch": "@@ -88,13 +88,6 @@ std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n     }\n \n     for (unsigned int j = 0; j < tx.vin.size(); j++) {\n-        // BIP125 Rule #2: We don't want to accept replacements that require low feerate junk to be\n-        // mined first.  Ideally we'd keep track of the ancestor feerates and make the decision\n-        // based on that, but for now requiring all new inputs to be confirmed works.\n-        //\n-        // Note that if you relax this to make RBF a little more useful, this may break the\n-        // CalculateMempoolAncestors RBF relaxation which subtracts the conflict count/size from the\n-        // descendant limit.\n         if (!parents_of_conflicts.count(tx.vin[j].prevout.hash)) {\n             // Rather than check the UTXO set - potentially expensive - it's cheaper to just check\n             // if the new input refers to a tx that's in the mempool.\n@@ -174,3 +167,36 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckAncestorScores(CAmount replacement_fees,\n+                                               int64_t replacement_vsize,\n+                                               const CTxMemPool::setEntries& ancestors,\n+                                               const CTxMemPool::setEntries& all_conflicts)\n+{\n+    assert(!ancestors.empty());\n+    assert(!all_conflicts.empty());\n+    // Ancestor score is the total modified fees divided by the total size.\n+    // To get the ancestor score, add up all the individual modified fees and sizes. Don't try to\n+    // use the cached ancestor fees and sizes, because entries may have overlapping ancestors.\n+    for (CTxMemPool::txiter it : ancestors) {\n+        replacement_fees += it->GetModifiedFee();\n+        replacement_vsize += it->GetTxSize();\n+    }\n+    const CFeeRate replacement_ancestor_score(replacement_fees, replacement_vsize);\n+    for (CTxMemPool::txiter it : all_conflicts) {\n+        const CFeeRate ancestor_score(it->GetModFeesWithAncestors(), it->GetSizeWithAncestors());\n+        if (replacement_ancestor_score < ancestor_score) {\n+            // Mining code will select transactions in order of ancestor score. Require the ancestor\n+            // score of replacement transaction(s) to be at least as high as the ancestor score of\n+            // every mempool transaction it's trying to replace. In other words, our replacement\n+            // transaction must be a better (i.e. more economical) candidate for mining than the\n+            // best transaction it conflicts with, otherwise it could be lowering the fee of the\n+            // next block. This must be paired with Rule #4 to ensure that the replacements are also\n+            // paying for their relay fees.\n+            return strprintf(\"replacement ancestor score too low; %s < %s\",\n+                             FormatMoney(replacement_fees),\n+                             FormatMoney(ancestor_score.GetFee(replacement_vsize)));\n+        }\n+    }\n+    return std::nullopt;\n+}"
      },
      {
        "sha": "86efdc87f2331524378bf86b4336677f36e96bd0",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634f950f25ba88e860a1e25fcda6b9e1f0be3782/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634f950f25ba88e860a1e25fcda6b9e1f0be3782/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=634f950f25ba88e860a1e25fcda6b9e1f0be3782",
        "patch": "@@ -99,4 +99,10 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n                                       CFeeRate relay_fee,\n                                       const uint256& txid);\n \n+/** Check that the ancestor score of replacement transaction(s) is at least as high as the ancestor\n+ * scores of every mempool transaction it conflicts with. */\n+std::optional<std::string> CheckAncestorScores(CAmount replacement_fees,\n+                                               int64_t replacement_vsize,\n+                                               const CTxMemPool::setEntries& ancestors,\n+                                               const CTxMemPool::setEntries& all_conflicts);\n #endif // BITCOIN_POLICY_RBF_H"
      },
      {
        "sha": "68c53799ce0b614a45baaef00dd37fca3e605d37",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 33,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634f950f25ba88e860a1e25fcda6b9e1f0be3782/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634f950f25ba88e860a1e25fcda6b9e1f0be3782/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=634f950f25ba88e860a1e25fcda6b9e1f0be3782",
        "patch": "@@ -459,6 +459,9 @@ class MemPoolAccept\n          * policies such as mempool min fee and min relay fee.\n          */\n         const bool m_package_feerates;\n+        /** When true, allow transactions to bypass BIP125 Rule #2 if their ancestor score is higher\n+         * than that of all mempool transactions it's replacing.*/\n+        const bool m_enforce_bip125_rule2;\n \n         /** Parameters for single transaction mempool validation. */\n         static ATMPArgs SingleAccept(const CChainParams& chainparams, int64_t accept_time,\n@@ -472,6 +475,7 @@ class MemPoolAccept\n                             /* m_allow_bip125_replacement */ true,\n                             /* m_package_submission */ false,\n                             /* m_package_feerates */ false,\n+                            /* m_enforce_bip125_rule2 */ true,\n             };\n         }\n \n@@ -486,6 +490,7 @@ class MemPoolAccept\n                             /* m_allow_bip125_replacement */ false,\n                             /* m_package_submission */ false,\n                             /* m_package_feerates */ true,\n+                            /* m_enforce_bip125_rule2 */ true,\n             };\n         }\n \n@@ -499,6 +504,7 @@ class MemPoolAccept\n                             /* m_allow_bip125_replacement */ true,\n                             /* m_package_submission */ true,\n                             /* m_package_feerates */ true,\n+                            /* m_enforce_bip125_rule2 */ true,\n             };\n         }\n \n@@ -562,10 +568,11 @@ class MemPoolAccept\n     bool PreChecks(ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n     // Run mempool-related checks like ancestor/descendant limits and RBF.\n-    bool MempoolChecks(Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+    bool MempoolChecks(const ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n     // Enforce mempool ancestor/descendant limits.\n-    bool PackageMempoolChecks(const std::vector<CTransactionRef>& txns,\n+    bool PackageMempoolChecks(const ATMPArgs& args,\n+                              const std::vector<CTransactionRef>& txns,\n                               std::vector<Workspace>& workspaces,\n                               PackageValidationState& package_state) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n@@ -810,7 +817,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     const CTxMemPool::setEntries setIterConflicting = m_pool.GetIterSet(ws.m_conflicts);\n     // Calculate in-mempool ancestors, up to a limit.\n-    if (ws.m_conflicts.size() == 1) {\n+    std::string err_string;\n+    if (ws.m_conflicts.size() == 1 && HasNoNewUnconfirmed(tx, m_pool, setIterConflicting) == std::nullopt) {\n         // In general, when we receive an RBF transaction with mempool conflicts, we want to know whether we\n         // would meet the chain limits after the conflicts have been removed. However, there isn't a practical\n         // way to do this short of calculating the ancestor and descendant sets with an overlay cache of\n@@ -820,16 +828,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // the below carve-out are able to be RBF'ed, without impacting the security the carve-out provides\n         // for off-chain contract systems (see link in the comment below).\n         //\n-        // Specifically, the subset of RBF transactions which we allow despite chain limits are those which\n-        // conflict directly with exactly one other transaction (but may evict children of said transaction),\n-        // and which are not adding any new mempool dependencies. Note that the \"no new mempool dependencies\"\n-        // check is accomplished later, so we don't bother doing anything about it here, but if BIP 125 is\n-        // amended, we may need to move that check to here instead of removing it wholesale.\n-        //\n-        // Such transactions are clearly not merging any existing packages, so we are only concerned with\n-        // ensuring that (a) no package is growing past the package size (not count) limits and (b) we are\n-        // not allowing something to effectively use the (below) carve-out spot when it shouldn't be allowed\n-        // to.\n+        // Specifically, the subset of RBF transactions which we allow despite chain limits are\n+        // those which conflict directly with exactly one other transaction (but may evict children\n+        // of said transaction), and which are not adding any new mempool dependencies. Such\n+        // transactions are clearly not merging any existing packages, so we are only concerned with\n+        // ensuring that (a) no package is growing past the package size (not count) limits and (b)\n+        // we are not allowing something to effectively use the (below) carve-out spot when it\n+        // shouldn't be allowed to.\n         //\n         // To check these we first check if we meet the RBF criteria, above, and increment the descendant\n         // limits by the direct conflict and its descendants (as these are recalculated in\n@@ -883,7 +888,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::MempoolChecks(Workspace& ws)\n+bool MemPoolAccept::MempoolChecks(const ATMPArgs& args, Workspace& ws)\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(m_pool.cs);\n@@ -911,10 +916,18 @@ bool MemPoolAccept::MempoolChecks(Workspace& ws)\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n                                  \"too many potential replacements\", *err_string);\n         }\n-        // Enforce BIP125 Rule #2.\n-        if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, setIterConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"replacement-adds-unconfirmed\", *err_string);\n+\n+        if (const auto err_string_2{HasNoNewUnconfirmed(tx, m_pool, setIterConflicting)}) {\n+            assert(!ws.m_ancestors.empty());\n+            if (args.m_enforce_bip125_rule2) {\n+                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n+                                     \"replacement-adds-unconfirmed\", *err_string_2);\n+            } else if (const auto err_string_anc{CheckAncestorScores(ws.m_modified_fees, ws.m_vsize,\n+                                                                     ws.m_ancestors, m_all_conflicts)}) {\n+                // Bypass BIP125 Rule #2 under the condition that the replacement transaction has a higher\n+                // ancestor score than that of all mempool transactions it is trying to replace.\n+                return state.Invalid(TxValidationResult::TX_LOW_FEE, \"insufficient fee\", *err_string_anc);\n+            }\n         }\n \n         // Check if it's economically rational to mine this transaction rather than the ones it\n@@ -931,7 +944,8 @@ bool MemPoolAccept::MempoolChecks(Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txns,\n+bool MemPoolAccept::PackageMempoolChecks(const ATMPArgs& args,\n+                                         const std::vector<CTransactionRef>& txns,\n                                          std::vector<Workspace>& workspaces,\n                                          PackageValidationState& package_state)\n {\n@@ -973,27 +987,36 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n                                      \"package RBF failed: insufficient fees\", *err_string);\n     }\n \n-    // Calculate all conflicting entries and enforce Rules 2 and 5.\n+    // Calculate all conflicting entries and enforce BIP125 Rule #5.\n     for (Workspace& ws : workspaces) {\n         // The aggregated set of conflicts cannot exceed 100.\n         if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n                                                          m_all_conflicts)}) {\n             return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n                                          \"package RBF failed: too many potential replacements\", *err_string);\n         }\n-        // None of the package transactions are allowed to spend additional unconfirmed inputs, even\n-        // if they aren't one of the transactions that conflicts with mempool.  (Note that this rule\n-        // doesn't apply to the child in the package).  Rationale: This rule is intended to prevent\n-        // us from overestimating a replacement transaction's ancestor score. For example, the\n+    }\n+\n+    // These checks require m_collective_ancestors and m_all_conflicts to be fully populated.\n+    for (Workspace& ws : workspaces) {\n+        // Avoid overestimating a replacement transaction's ancestor score. For example, the\n         // replacement transactions themselves may have a high feerate, but depend on some low-fee\n         // mempool transactions that actually don't make them better candidates for mining than the\n-        // ones they would replace. For now, if any of the package transactions had ancestors, we\n-        // can't trust the package feerate, so don't allow any new unconfirmed inputs.\n-        // TODO: Remove this requirement by using the child's ancestor fees and feerate (including\n-        // mempool and package transactions) instead.\n-        if (const auto err_string{HasNoNewUnconfirmed(*ws.m_ptx, m_pool, direct_conflict_iters)}) {\n-            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n-                                         \"package RBF failed: replacement adds unconfirmed\", *err_string);\n+        // ones they would replace.\n+        if (const auto err_string_2{HasNoNewUnconfirmed(*ws.m_ptx, m_pool, direct_conflict_iters)}) {\n+            assert(!m_collective_ancestors.empty());\n+            if (args.m_enforce_bip125_rule2) {\n+                return ws.m_state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n+                                          \"package RBF failed: replacement adds unconfirmed\", *err_string_2);\n+            } else if (const auto err_string_anc{CheckAncestorScores(m_total_modified_fees, m_total_vsize,\n+                                                                     m_collective_ancestors, m_all_conflicts)}) {\n+                // When the package is a child with parents, we can treat it as one big tx with\n+                // inputs = inputs of parents, outputs = outputs of child + UTXOs of parents.\n+                // Bypass BIP125 Rule #2 under the condition that the package has a higher ancestor\n+                // score than that of all mempool transactions it is trying to replace.\n+                return ws.m_state.Invalid(TxValidationResult::TX_LOW_FEE,\n+                                          \"package RBF failed: insufficient fee\", *err_string_anc);\n+            }\n         }\n     }\n \n@@ -1198,7 +1221,7 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!MempoolChecks(ws)) return MempoolAcceptResult::Failure(ws.m_state);\n+    if (!MempoolChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n@@ -1283,7 +1306,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     // because it's unnecessary. Also, CPFP carve out can increase the limit for individual\n     // transactions, but this exemption is not extended to packages in CheckPackageLimits().\n     std::string err_string;\n-    if (txns.size() > 1 && !PackageMempoolChecks(txns, workspaces, package_state)) {\n+    if (txns.size() > 1 && !PackageMempoolChecks(args, txns, workspaces, package_state)) {\n         return PackageMempoolAcceptResult(package_state, std::move(results));\n     }\n "
      },
      {
        "sha": "649c37be16bb9e20e76f5a28b4497b3e61c0d2f0",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634f950f25ba88e860a1e25fcda6b9e1f0be3782/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634f950f25ba88e860a1e25fcda6b9e1f0be3782/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=634f950f25ba88e860a1e25fcda6b9e1f0be3782",
        "patch": "@@ -247,7 +247,8 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n *    true (analogous but not identical to BIP125 RBF):\n *    - No package transaction replaces the dependency of another package transaction.\n *    - All original transactions signal replaceability.\n-*    - None of the transactions in the package have any unconfirmed inputs.\n+*    - If any of the transactions have unconfirmed inputs, the child's ancestor score must be at\n+*      least as high as the ancestor scores of every mempool transaction being replaced.\n *    - The package total modified fees >= the modified fees of the original transactions.\n *    - The package pays for its own bandwidth: its feerate is >= incrementalRelayFee higher than the\n *      original transactions."
      }
    ]
  },
  {
    "sha": "042790acde8c954c783ab7ee22fcb19e35c8de98",
    "node_id": "C_kwDOABII59oAKDA0Mjc5MGFjZGU4Yzk1NGM3ODNhYjdlZTIyZmNiMTllMzVjOGRlOTg",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-22T16:50:13Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-20T10:27:42Z"
      },
      "message": "[policy] allow new unconfirmed if higher ancestor score in package RBF",
      "tree": {
        "sha": "c96baa3e16a40653516bab1201bcc018566ee10d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c96baa3e16a40653516bab1201bcc018566ee10d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/042790acde8c954c783ab7ee22fcb19e35c8de98",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/042790acde8c954c783ab7ee22fcb19e35c8de98",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/042790acde8c954c783ab7ee22fcb19e35c8de98",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/042790acde8c954c783ab7ee22fcb19e35c8de98/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "634f950f25ba88e860a1e25fcda6b9e1f0be3782",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/634f950f25ba88e860a1e25fcda6b9e1f0be3782",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/634f950f25ba88e860a1e25fcda6b9e1f0be3782"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6923690eb9044d059b39ad5cb57ceaf86b72bbbe",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/042790acde8c954c783ab7ee22fcb19e35c8de98/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/042790acde8c954c783ab7ee22fcb19e35c8de98/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=042790acde8c954c783ab7ee22fcb19e35c8de98",
        "patch": "@@ -504,7 +504,7 @@ class MemPoolAccept\n                             /* m_allow_bip125_replacement */ true,\n                             /* m_package_submission */ true,\n                             /* m_package_feerates */ true,\n-                            /* m_enforce_bip125_rule2 */ true,\n+                            /* m_enforce_bip125_rule2 */ false,\n             };\n         }\n \n@@ -926,7 +926,7 @@ bool MemPoolAccept::MempoolChecks(const ATMPArgs& args, Workspace& ws)\n                                                                      ws.m_ancestors, m_all_conflicts)}) {\n                 // Bypass BIP125 Rule #2 under the condition that the replacement transaction has a higher\n                 // ancestor score than that of all mempool transactions it is trying to replace.\n-                return state.Invalid(TxValidationResult::TX_LOW_FEE, \"insufficient fee\", *err_string_anc);\n+                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string_anc);\n             }\n         }\n \n@@ -1014,7 +1014,7 @@ bool MemPoolAccept::PackageMempoolChecks(const ATMPArgs& args,\n                 // inputs = inputs of parents, outputs = outputs of child + UTXOs of parents.\n                 // Bypass BIP125 Rule #2 under the condition that the package has a higher ancestor\n                 // score than that of all mempool transactions it is trying to replace.\n-                return ws.m_state.Invalid(TxValidationResult::TX_LOW_FEE,\n+                return ws.m_state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n                                           \"package RBF failed: insufficient fee\", *err_string_anc);\n             }\n         }"
      },
      {
        "sha": "418de10f3e0ae2213e950c9909dfbbef71e2664b",
        "filename": "test/functional/feature_package_relay.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/042790acde8c954c783ab7ee22fcb19e35c8de98/test/functional/feature_package_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/042790acde8c954c783ab7ee22fcb19e35c8de98/test/functional/feature_package_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_package_relay.py?ref=042790acde8c954c783ab7ee22fcb19e35c8de98",
        "patch": "@@ -241,7 +241,8 @@ def test_package_rbf_rule2(self):\n             \"scriptPubKey\": tx.vout[0].scriptPubKey.hex(),\n         })\n         (package_hex2, package_txns2) = self.create_simple_package(parent_coins, DEFAULT_FEE * 2)\n-        assert_raises_rpc_error(-25, \"package RBF failed: replacement adds unconfirmed\", node.submitrawpackage, package_hex2)\n+        node.submitrawpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n         node.generate(1)\n \n     def test_package_rbf_rule3(self):"
      }
    ]
  },
  {
    "sha": "10f20eaeb6781c1df61ad0e4851cbd37e1af2b97",
    "node_id": "C_kwDOABII59oAKDEwZjIwZWFlYjY3ODFjMWRmNjFhZDBlNDg1MWNiZDM3ZTFhZjJiOTc",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-22T15:27:00Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-20T10:27:42Z"
      },
      "message": "[functional test] package RBF with ancestor scores",
      "tree": {
        "sha": "78fc9796e17c49311d013bcfd18456fe32ed16da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78fc9796e17c49311d013bcfd18456fe32ed16da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10f20eaeb6781c1df61ad0e4851cbd37e1af2b97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10f20eaeb6781c1df61ad0e4851cbd37e1af2b97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10f20eaeb6781c1df61ad0e4851cbd37e1af2b97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10f20eaeb6781c1df61ad0e4851cbd37e1af2b97/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "042790acde8c954c783ab7ee22fcb19e35c8de98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/042790acde8c954c783ab7ee22fcb19e35c8de98",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/042790acde8c954c783ab7ee22fcb19e35c8de98"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 27,
      "deletions": 0
    },
    "files": [
      {
        "sha": "75b3c1f926451e1ff189725bd99b164c10ee4056",
        "filename": "test/functional/feature_package_relay.py",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10f20eaeb6781c1df61ad0e4851cbd37e1af2b97/test/functional/feature_package_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10f20eaeb6781c1df61ad0e4851cbd37e1af2b97/test/functional/feature_package_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_package_relay.py?ref=10f20eaeb6781c1df61ad0e4851cbd37e1af2b97",
        "patch": "@@ -172,6 +172,7 @@ def run_test(self):\n         self.test_package_rbf_rule5()\n         self.test_package_rbf_conflicting_conflicts()\n         self.test_cpfp()\n+        self.test_package_ancestor_score()\n \n     def test_package_rbf_basic(self):\n         self.log.info(\"Test that packages can RBF\")\n@@ -346,6 +347,32 @@ def test_cpfp(self):\n         node.submitrawpackage(package_hex2)\n         self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n \n+    def test_package_ancestor_score(self):\n+        self.log.info(\"Test that packages with new unconfirmed inputs must have a sufficient ancestor score\")\n+        node = self.nodes[0]\n+        num_parents = 2\n+        parent_coins = self.coins[:num_parents]\n+        del self.coins[:num_parents]\n+        (package_hex1, package_txns1) = self.create_simple_package(parent_coins, DEFAULT_FEE)\n+        node.submitrawpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Create a mempool transaction for additional unconfirmed input.\n+        # This transaction has a very low fee, lowering the package ancestor score.\n+        coin = self.coins.pop()\n+        value = coin[\"amount\"]\n+        small_fee = Decimal(\"0.00001\")\n+        (tx, txhex, unconfirmed_value, _) = make_chain(node, self.address, self.privkeys, coin[\"txid\"], value, 0, None, small_fee)\n+        node.sendrawtransaction(txhex)\n+        parent_coins.append({\n+            \"txid\": tx.rehash(),\n+            \"amount\": unconfirmed_value,\n+            \"scriptPubKey\": tx.vout[0].scriptPubKey.hex(),\n+        })\n+        (package_hex2, package_txns2) = self.create_simple_package(parent_coins, Decimal(\"0.00011\"))\n+        assert_raises_rpc_error(-25, \"package RBF failed: insufficient fees\", node.submitrawpackage, package_hex2)\n+        node.generate(1)\n+\n \n if __name__ == \"__main__\":\n     PackageRelayTest().main()"
      }
    ]
  },
  {
    "sha": "cda84edb0953beb2220621fa517abd6d8f5dc3d9",
    "node_id": "C_kwDOABII59oAKGNkYTg0ZWRiMDk1M2JlYjIyMjA2MjFmYTUxN2FiZDZkOGY1ZGMzZDk",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-23T15:57:10Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-20T10:27:42Z"
      },
      "message": "[validation/packages] handle package transactions already in mempool\n\nAs node operators are free to set their mempool policies however they\nplease, it's possible for package transaction(s) to already be in the\nmempool. We definitely don't want to reject the entire package in that\ncase (as that could be a censorship vector).\n\nWe still need to return the successful result to the caller, so add\nanother result type to MempoolAcceptResult.",
      "tree": {
        "sha": "f1d5c1a9c24eded96f2b49bd48f7e208dfbdcdf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1d5c1a9c24eded96f2b49bd48f7e208dfbdcdf3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cda84edb0953beb2220621fa517abd6d8f5dc3d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cda84edb0953beb2220621fa517abd6d8f5dc3d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cda84edb0953beb2220621fa517abd6d8f5dc3d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cda84edb0953beb2220621fa517abd6d8f5dc3d9/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10f20eaeb6781c1df61ad0e4851cbd37e1af2b97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10f20eaeb6781c1df61ad0e4851cbd37e1af2b97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10f20eaeb6781c1df61ad0e4851cbd37e1af2b97"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 61,
      "deletions": 6
    },
    "files": [
      {
        "sha": "8075e4e6f8cae7ed81f8ed43d4ebcf93c200a6ed",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cda84edb0953beb2220621fa517abd6d8f5dc3d9/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cda84edb0953beb2220621fa517abd6d8f5dc3d9/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=cda84edb0953beb2220621fa517abd6d8f5dc3d9",
        "patch": "@@ -994,6 +994,8 @@ static RPCHelpMan testmempoolaccept()\n             continue;\n         }\n         const auto& tx_result = it->second;\n+        // Package testmempoolaccept doesn't allow transactions to already be in the mempool.\n+        CHECK_NONFATAL(tx_result.m_result_type != MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);\n         if (tx_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             const CAmount fee = tx_result.m_base_fees.value();\n             // Check that fee does not exceed maximum fee\n@@ -1143,8 +1145,10 @@ static RPCHelpMan submitrawpackage()\n         CHECK_NONFATAL(it != package_result.m_tx_results.end());\n         UniValue result_inner{UniValue::VOBJ};\n         result_inner.pushKV(\"txid\", tx->GetHash().GetHex());\n+        // TODO: this would be the wrong wtxid if there was a same-txid-diff-witness situation.\n         result_inner.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-        CHECK_NONFATAL(it->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        CHECK_NONFATAL(it->second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n+                       it->second.m_result_type == MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);\n         result_inner.pushKV(\"vsize\", (int64_t)it->second.m_vsize.value());\n         UniValue fees(UniValue::VOBJ);\n         fees.pushKV(\"base\", ValueFromAmount(it->second.m_base_fees.value()));"
      },
      {
        "sha": "43eacc8cb7af6dac30ed65cfdabf7adfb0b738df",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 3,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cda84edb0953beb2220621fa517abd6d8f5dc3d9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cda84edb0953beb2220621fa517abd6d8f5dc3d9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=cda84edb0953beb2220621fa517abd6d8f5dc3d9",
        "patch": "@@ -955,6 +955,9 @@ bool MemPoolAccept::PackageMempoolChecks(const ATMPArgs& args,\n     for (const auto& ws : workspaces) {\n         for (const auto& it : ws.m_ancestors) m_collective_ancestors.insert(it);\n     }\n+    // CheckPackageLimits expects the package transactions to not already be in the mempool.\n+    assert(std::all_of(txns.cbegin(), txns.cend(), [this](const auto& tx)\n+                       { return !m_pool.exists(GenTxid(false, tx->GetHash()));}));\n \n     std::string err_string;\n     if (!m_pool.CheckPackageLimits(txns, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n@@ -1396,12 +1399,50 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n     // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n     m_view.SetBackend(m_dummy);\n \n-    // TODO: Deduplicate the package.\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions\n+    // that are already in mempool and add their information to results, since we already have it.\n+    std::vector<CTransactionRef> txns_new;\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        const auto& txid = tx->GetHash();\n+        // There are 3 possibilities: already in mempool, same-txid-diff-wtxid already in mempool,\n+        // or not in mempool. An already confirmed tx is treated as one not in mempool, because all\n+        // we know is that the inputs aren't available.\n+        if (m_pool.exists(GenTxid(true, wtxid))) {\n+            // Exact transaction already exists in the mempool.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(wtxid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else if (m_pool.exists(GenTxid(false, txid))) {\n+            // Transaction with the same non-witness data but different witness (same txid, different\n+            // wtxid) already exists in the mempool.\n+            //\n+            // We don't allow replacement transactions right now, so just swap the package\n+            // transaction for the mempool one. Note that we are ignoring the validity of the\n+            // package transaction passed in.\n+            // TODO: allow witness replacement in packages.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(txid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else {\n+            // Transaction does not already exist in the mempool.\n+            txns_new.push_back(tx);\n+        }\n+    }\n \n     // TODO: Try submitting every transaction on its own.\n \n-    // Validate as a package.\n-    return AcceptMultipleTransactions(package, args);\n+    // Nothing to do if the entire package has already been submitted.\n+    if (txns_new.empty()) return PackageMempoolAcceptResult(package_state, std::move(results));\n+    // Validate the (deduplicated) transactions as a package.\n+    auto submission_result = AcceptMultipleTransactions(txns_new, args);\n+    for (const auto& [wtxid, mempoolaccept_res] : results) {\n+        submission_result.m_tx_results.emplace(wtxid, mempoolaccept_res);\n+    }\n+    return submission_result;\n }\n \n } // anon namespace"
      },
      {
        "sha": "5a0bd699494a4dffe76e640a45df347dc5937b64",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cda84edb0953beb2220621fa517abd6d8f5dc3d9/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cda84edb0953beb2220621fa517abd6d8f5dc3d9/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=cda84edb0953beb2220621fa517abd6d8f5dc3d9",
        "patch": "@@ -157,17 +157,19 @@ struct MempoolAcceptResult {\n     enum class ResultType {\n         VALID, //!> Fully validated, valid.\n         INVALID, //!> Invalid.\n+        MEMPOOL_ENTRY, //!> Valid, transaction was already in the mempool.\n     };\n     const ResultType m_result_type;\n     const TxValidationState m_state;\n \n-    // The following fields are only present when m_result_type = ResultType::VALID\n+    // The following fields are only present when m_result_type = ResultType::VALID or MEMPOOL_ENTRY\n     /** Mempool transactions replaced by the tx per BIP 125 rules. */\n     const std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n     /** Virtual size as used by the mempool, calculated using serialized size and sigops. */\n     const std::optional<int64_t> m_vsize;\n     /** Raw base fees in satoshis. */\n     const std::optional<CAmount> m_base_fees;\n+\n     static MempoolAcceptResult Failure(TxValidationState state) {\n         return MempoolAcceptResult(state);\n     }\n@@ -176,6 +178,10 @@ struct MempoolAcceptResult {\n         return MempoolAcceptResult(std::move(replaced_txns), vsize, fees);\n     }\n \n+    static MempoolAcceptResult MempoolTx(int64_t vsize, CAmount fees) {\n+        return MempoolAcceptResult(vsize, fees);\n+    }\n+\n // Private constructors. Use static methods MempoolAcceptResult::Success, etc. to construct.\n private:\n     /** Constructor for failure case */\n@@ -188,6 +194,10 @@ struct MempoolAcceptResult {\n     explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, int64_t vsize, CAmount fees)\n         : m_result_type(ResultType::VALID),\n         m_replaced_transactions(std::move(replaced_txns)), m_vsize{vsize}, m_base_fees(fees) {}\n+\n+    /** Constructor for already-in-mempool case. It wouldn't replace any transactions. */\n+    explicit MempoolAcceptResult(int64_t vsize, CAmount fees)\n+        : m_result_type(ResultType::MEMPOOL_ENTRY), m_vsize{vsize}, m_base_fees(fees) {}\n };\n \n /**\n@@ -197,7 +207,7 @@ struct PackageMempoolAcceptResult\n {\n     const PackageValidationState m_state;\n     /**\n-    * Map from wtxid to finished MempoolAcceptResults. The client is responsible\n+    * Map from (w)txid to finished MempoolAcceptResults. The client is responsible\n     * for keeping track of the transaction objects themselves. If a result is not\n     * present, it means validation was unfinished for that transaction. If there\n     * was a package-wide error (see result in m_state), m_tx_results will be empty."
      }
    ]
  },
  {
    "sha": "535f311ed6a3d56bef9060f552279da43623049f",
    "node_id": "C_kwDOABII59oAKDUzNWYzMTFlZDZhM2Q1NmJlZjkwNjBmNTUyMjc5ZGE0MzYyMzA0OWY",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-08T13:30:39Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-20T10:27:42Z"
      },
      "message": "[functional test] partially submitted packages",
      "tree": {
        "sha": "2857925dd052237f4fa3ec7b3b50117ef263087d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2857925dd052237f4fa3ec7b3b50117ef263087d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/535f311ed6a3d56bef9060f552279da43623049f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/535f311ed6a3d56bef9060f552279da43623049f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/535f311ed6a3d56bef9060f552279da43623049f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/535f311ed6a3d56bef9060f552279da43623049f/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cda84edb0953beb2220621fa517abd6d8f5dc3d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cda84edb0953beb2220621fa517abd6d8f5dc3d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cda84edb0953beb2220621fa517abd6d8f5dc3d9"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 25,
      "deletions": 1
    },
    "files": [
      {
        "sha": "06941b74bc7c0e5318eddce8d1d674a3d1fa2de0",
        "filename": "test/functional/feature_package_relay.py",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/535f311ed6a3d56bef9060f552279da43623049f/test/functional/feature_package_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/535f311ed6a3d56bef9060f552279da43623049f/test/functional/feature_package_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_package_relay.py?ref=535f311ed6a3d56bef9060f552279da43623049f",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n from decimal import Decimal\n+import random\n \n from test_framework.address import (\n     ADDRESS_BCRT1_P2WSH_OP_TRUE,\n@@ -173,6 +174,7 @@ def run_test(self):\n         self.test_package_rbf_conflicting_conflicts()\n         self.test_cpfp()\n         self.test_package_ancestor_score()\n+        self.test_package_rbf_partial()\n \n     def test_package_rbf_basic(self):\n         self.log.info(\"Test that packages can RBF\")\n@@ -373,6 +375,25 @@ def test_package_ancestor_score(self):\n         assert_raises_rpc_error(-25, \"package RBF failed: insufficient fees\", node.submitrawpackage, package_hex2)\n         node.generate(1)\n \n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")\n+        node = self.nodes[0]\n+        num_parents = 10\n+        parent_coins = self.coins[:num_parents]\n+        del self.coins[:num_parents]\n+        (package_hex1, package_txns1) = self.create_simple_package(parent_coins, DEFAULT_FEE, DEFAULT_FEE)\n+        (package_hex2, package_txns2) = self.create_simple_package(parent_coins, DEFAULT_FEE * 3, DEFAULT_FEE * 3)\n+        node.submitrawpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Maybe submit one or more of the parents\n+        for parent in package_hex2[:-1]:\n+            if random.choice([True, False]):\n+                # Should successfully RBF since we gave them triple fees\n+                node.sendrawtransaction(parent)\n+        node.submitrawpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        node.generate(1)\n+\n \n if __name__ == \"__main__\":\n     PackageRelayTest().main()"
      },
      {
        "sha": "1b85af71d96e1d5e3a1865d08898b0c8b285c051",
        "filename": "test/functional/rpc_packages.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/535f311ed6a3d56bef9060f552279da43623049f/test/functional/rpc_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/535f311ed6a3d56bef9060f552279da43623049f/test/functional/rpc_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_packages.py?ref=535f311ed6a3d56bef9060f552279da43623049f",
        "patch": "@@ -318,7 +318,7 @@ def assert_equal_package_results(self, testres_package, submitres_package):\n                 assert_equal(submitres_tx[\"vsize\"], testres_tx[\"vsize\"])\n                 assert_equal(submitres_tx[\"fees\"][\"base\"], testres_tx[\"fees\"][\"base\"])\n \n-    def test_submit_child_with_parents(self, num_parents):\n+    def test_submit_child_with_parents(self, num_parents, partial_submit=False):\n         node = self.nodes[0]\n         # Test a package with num_parents parents and 1 child transaction.\n         package_hex = []\n@@ -333,6 +333,8 @@ def test_submit_child_with_parents(self, num_parents):\n             package_txns.append(tx)\n             values.append(value)\n             scripts.append(spk)\n+            if partial_submit and random.choice([True, False]):\n+                node.sendrawtransaction(txhex)\n         child_hex = create_child_with_parents(node, self.address, self.privkeys, package_txns, values, scripts)\n         package_hex.append(child_hex)\n         package_txns.append(tx_from_hex(child_hex))\n@@ -365,6 +367,7 @@ def test_submitrawpackage(self):\n         self.log.info(\"Submitrawpackage valid packages with 1 child and some number of parents\")\n         for num_parents in [1, 2, 10, 24]:\n             self.test_submit_child_with_parents(num_parents)\n+            self.test_submit_child_with_parents(num_parents, partial_submit=True)\n \n         self.log.info(\"Submitrawpackage only allows packages of 1 child with its parents\")\n         # Chain of 3 transactions has too many generations"
      }
    ]
  }
]