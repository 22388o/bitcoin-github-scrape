[
  {
    "sha": "d74e18643bda5f570e75a426c7ce1d519de7e49f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzRlMTg2NDNiZGE1ZjU3MGU3NWE0MjZjN2NlMWQ1MTlkZTdlNDlm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-09T17:34:28Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-09T17:44:53Z"
      },
      "message": "Add additional edge case tests for int parsing",
      "tree": {
        "sha": "2b7efe0f1b54d8910fe99ec79957c50aef3b15bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b7efe0f1b54d8910fe99ec79957c50aef3b15bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d74e18643bda5f570e75a426c7ce1d519de7e49f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d74e18643bda5f570e75a426c7ce1d519de7e49f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d74e18643bda5f570e75a426c7ce1d519de7e49f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d74e18643bda5f570e75a426c7ce1d519de7e49f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8af835a72d15d19e98ce22d21903cc0d080d3b92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8af835a72d15d19e98ce22d21903cc0d080d3b92",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8af835a72d15d19e98ce22d21903cc0d080d3b92"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c8dab8604f4f104d5a806156173af805f46c66ae",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d74e18643bda5f570e75a426c7ce1d519de7e49f/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d74e18643bda5f570e75a426c7ce1d519de7e49f/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=d74e18643bda5f570e75a426c7ce1d519de7e49f",
        "patch": "@@ -1147,13 +1147,16 @@ BOOST_AUTO_TEST_CASE(test_ParseInt32)\n     // Valid values\n     BOOST_CHECK(ParseInt32(\"1234\", nullptr));\n     BOOST_CHECK(ParseInt32(\"0\", &n) && n == 0);\n+    BOOST_CHECK(ParseInt32(\"0000\", &n) && n == 0);\n+    BOOST_CHECK(ParseInt32(\"-0\", &n) && n == 0);\n     BOOST_CHECK(ParseInt32(\"1234\", &n) && n == 1234);\n     BOOST_CHECK(ParseInt32(\"01234\", &n) && n == 1234); // no octal\n     BOOST_CHECK(ParseInt32(\"2147483647\", &n) && n == 2147483647);\n     BOOST_CHECK(ParseInt32(\"-2147483648\", &n) && n == (-2147483647 - 1)); // (-2147483647 - 1) equals INT_MIN\n     BOOST_CHECK(ParseInt32(\"-1234\", &n) && n == -1234);\n     // Invalid values\n     BOOST_CHECK(!ParseInt32(\"\", &n));\n+    BOOST_CHECK(!ParseInt32(\"--0\", &n));\n     BOOST_CHECK(!ParseInt32(\" 1\", &n)); // no padding inside\n     BOOST_CHECK(!ParseInt32(\"1 \", &n));\n     BOOST_CHECK(!ParseInt32(\"1a\", &n));\n@@ -1176,6 +1179,8 @@ BOOST_AUTO_TEST_CASE(test_ParseInt64)\n     // Valid values\n     BOOST_CHECK(ParseInt64(\"1234\", nullptr));\n     BOOST_CHECK(ParseInt64(\"0\", &n) && n == 0LL);\n+    BOOST_CHECK(ParseInt64(\"0000\", &n) && n == 0LL);\n+    BOOST_CHECK(ParseInt64(\"-0\", &n) && n == 0LL);\n     BOOST_CHECK(ParseInt64(\"1234\", &n) && n == 1234LL);\n     BOOST_CHECK(ParseInt64(\"01234\", &n) && n == 1234LL); // no octal\n     BOOST_CHECK(ParseInt64(\"2147483647\", &n) && n == 2147483647LL);\n@@ -1185,6 +1190,7 @@ BOOST_AUTO_TEST_CASE(test_ParseInt64)\n     BOOST_CHECK(ParseInt64(\"-1234\", &n) && n == -1234LL);\n     // Invalid values\n     BOOST_CHECK(!ParseInt64(\"\", &n));\n+    BOOST_CHECK(!ParseInt64(\"--0\", &n));\n     BOOST_CHECK(!ParseInt64(\" 1\", &n)); // no padding inside\n     BOOST_CHECK(!ParseInt64(\"1 \", &n));\n     BOOST_CHECK(!ParseInt64(\"1a\", &n));\n@@ -1206,13 +1212,16 @@ BOOST_AUTO_TEST_CASE(test_ParseUInt32)\n     // Valid values\n     BOOST_CHECK(ParseUInt32(\"1234\", nullptr));\n     BOOST_CHECK(ParseUInt32(\"0\", &n) && n == 0);\n+    BOOST_CHECK(ParseUInt32(\"00000\", &n) && n == 0);\n     BOOST_CHECK(ParseUInt32(\"1234\", &n) && n == 1234);\n     BOOST_CHECK(ParseUInt32(\"01234\", &n) && n == 1234); // no octal\n     BOOST_CHECK(ParseUInt32(\"2147483647\", &n) && n == 2147483647);\n     BOOST_CHECK(ParseUInt32(\"2147483648\", &n) && n == (uint32_t)2147483648);\n     BOOST_CHECK(ParseUInt32(\"4294967295\", &n) && n == (uint32_t)4294967295);\n     // Invalid values\n     BOOST_CHECK(!ParseUInt32(\"\", &n));\n+    BOOST_CHECK(!ParseUInt32(\"-0\", &n));\n+    BOOST_CHECK(!ParseUInt32(\"--0\", &n));\n     BOOST_CHECK(!ParseUInt32(\" 1\", &n)); // no padding inside\n     BOOST_CHECK(!ParseUInt32(\" -1\", &n));\n     BOOST_CHECK(!ParseUInt32(\"1 \", &n));\n@@ -1237,6 +1246,7 @@ BOOST_AUTO_TEST_CASE(test_ParseUInt64)\n     // Valid values\n     BOOST_CHECK(ParseUInt64(\"1234\", nullptr));\n     BOOST_CHECK(ParseUInt64(\"0\", &n) && n == 0LL);\n+    BOOST_CHECK(ParseUInt64(\"00000\", &n) && n == 0LL);\n     BOOST_CHECK(ParseUInt64(\"1234\", &n) && n == 1234LL);\n     BOOST_CHECK(ParseUInt64(\"01234\", &n) && n == 1234LL); // no octal\n     BOOST_CHECK(ParseUInt64(\"2147483647\", &n) && n == 2147483647LL);\n@@ -1245,6 +1255,8 @@ BOOST_AUTO_TEST_CASE(test_ParseUInt64)\n     BOOST_CHECK(ParseUInt64(\"18446744073709551615\", &n) && n == 18446744073709551615ULL);\n     // Invalid values\n     BOOST_CHECK(!ParseUInt64(\"\", &n));\n+    BOOST_CHECK(!ParseUInt64(\"-0\", &n));\n+    BOOST_CHECK(!ParseUInt64(\"--0\", &n));\n     BOOST_CHECK(!ParseUInt64(\" 1\", &n)); // no padding inside\n     BOOST_CHECK(!ParseUInt64(\" -1\", &n));\n     BOOST_CHECK(!ParseUInt64(\"1 \", &n));"
      }
    ]
  },
  {
    "sha": "99e941e10dc41cf60652f1b83900fa390eb1cb4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OWU5NDFlMTBkYzQxY2Y2MDY1MmYxYjgzOTAwZmEzOTBlYjFjYjRj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-09T17:19:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-09-09T17:44:56Z"
      },
      "message": "Simple native locale-indepent int parser",
      "tree": {
        "sha": "abf1d0d3f43e45ba08259006df66aa46ec94b7ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/abf1d0d3f43e45ba08259006df66aa46ec94b7ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99e941e10dc41cf60652f1b83900fa390eb1cb4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99e941e10dc41cf60652f1b83900fa390eb1cb4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99e941e10dc41cf60652f1b83900fa390eb1cb4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99e941e10dc41cf60652f1b83900fa390eb1cb4c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d74e18643bda5f570e75a426c7ce1d519de7e49f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d74e18643bda5f570e75a426c7ce1d519de7e49f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d74e18643bda5f570e75a426c7ce1d519de7e49f"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 32,
      "deletions": 58
    },
    "files": [
      {
        "sha": "b3dfdfd9db79cf4aa140a85f886a68c5374d5dc7",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 58,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e941e10dc41cf60652f1b83900fa390eb1cb4c/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e941e10dc41cf60652f1b83900fa390eb1cb4c/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=99e941e10dc41cf60652f1b83900fa390eb1cb4c",
        "patch": "@@ -274,70 +274,40 @@ NODISCARD static bool ParsePrechecks(const std::string& str)\n     return true;\n }\n \n-bool ParseInt32(const std::string& str, int32_t *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    char *endp = nullptr;\n-    errno = 0; // strtol will not set errno if valid\n-    long int n = strtol(str.c_str(), &endp, 10);\n-    if(out) *out = (int32_t)n;\n-    // Note that strtol returns a *long int*, so even if strtol doesn't report an over/underflow\n-    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n-    // platforms the size of these types may be different.\n-    return endp && *endp == 0 && !errno &&\n-        n >= std::numeric_limits<int32_t>::min() &&\n-        n <= std::numeric_limits<int32_t>::max();\n-}\n-\n-bool ParseInt64(const std::string& str, int64_t *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    char *endp = nullptr;\n-    errno = 0; // strtoll will not set errno if valid\n-    long long int n = strtoll(str.c_str(), &endp, 10);\n-    if(out) *out = (int64_t)n;\n-    // Note that strtoll returns a *long long int*, so even if strtol doesn't report an over/underflow\n-    // we still have to check that the returned value is within the range of an *int64_t*.\n-    return endp && *endp == 0 && !errno &&\n-        n >= std::numeric_limits<int64_t>::min() &&\n-        n <= std::numeric_limits<int64_t>::max();\n+namespace {\n+template<typename R, typename I>\n+bool ParseInt(I it, I end, R* out)\n+{\n+    int sign = 1;\n+    if (it != end && *it == '-') {\n+        sign = -1;\n+        ++it;\n+    }\n+    if (it == end) return false;\n+    R val = 0;\n+    while (it != end) {\n+        if (*it < '0' || *it > '9') return false;\n+        R newval = 10 * val + sign * (*it - '0');\n+        if (sign > 0 ? newval < val : newval > val) return false;\n+        val = newval;\n+        ++it;\n+    }\n+    if (out) *out = val;\n+    return true;\n }\n \n-bool ParseUInt32(const std::string& str, uint32_t *out)\n+template<typename R, typename I>\n+bool ParseUInt(I it, I end, R* out)\n {\n-    if (!ParsePrechecks(str))\n-        return false;\n-    if (str.size() >= 1 && str[0] == '-') // Reject negative values, unfortunately strtoul accepts these by default if they fit in the range\n-        return false;\n-    char *endp = nullptr;\n-    errno = 0; // strtoul will not set errno if valid\n-    unsigned long int n = strtoul(str.c_str(), &endp, 10);\n-    if(out) *out = (uint32_t)n;\n-    // Note that strtoul returns a *unsigned long int*, so even if it doesn't report an over/underflow\n-    // we still have to check that the returned value is within the range of an *uint32_t*. On 64-bit\n-    // platforms the size of these types may be different.\n-    return endp && *endp == 0 && !errno &&\n-        n <= std::numeric_limits<uint32_t>::max();\n+    if (it != end && *it == '-') return false;\n+    return ParseInt(it, end, out);\n }\n-\n-bool ParseUInt64(const std::string& str, uint64_t *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    if (str.size() >= 1 && str[0] == '-') // Reject negative values, unfortunately strtoull accepts these by default if they fit in the range\n-        return false;\n-    char *endp = nullptr;\n-    errno = 0; // strtoull will not set errno if valid\n-    unsigned long long int n = strtoull(str.c_str(), &endp, 10);\n-    if(out) *out = (uint64_t)n;\n-    // Note that strtoull returns a *unsigned long long int*, so even if it doesn't report an over/underflow\n-    // we still have to check that the returned value is within the range of an *uint64_t*.\n-    return endp && *endp == 0 && !errno &&\n-        n <= std::numeric_limits<uint64_t>::max();\n }\n \n+bool ParseInt32(const std::string& str, int32_t *out) { return ParseInt(str.begin(), str.end(), out); }\n+bool ParseInt64(const std::string& str, int64_t *out) { return ParseInt(str.begin(), str.end(), out); }\n+bool ParseUInt32(const std::string& str, uint32_t *out) { return ParseUInt(str.begin(), str.end(), out); }\n+bool ParseUInt64(const std::string& str, uint64_t *out) { return ParseUInt(str.begin(), str.end(), out); }\n \n bool ParseDouble(const std::string& str, double *out)\n {"
      },
      {
        "sha": "58c00d250780c1bd419d11ce0f291ab5c9ad26e9",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e941e10dc41cf60652f1b83900fa390eb1cb4c/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e941e10dc41cf60652f1b83900fa390eb1cb4c/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=99e941e10dc41cf60652f1b83900fa390eb1cb4c",
        "patch": "@@ -88,27 +88,31 @@ constexpr inline bool IsSpace(char c) noexcept {\n \n /**\n  * Convert string to signed 32-bit integer with strict parse error feedback.\n+ * This function is locale independent.\n  * @returns true if the entire string could be parsed as valid integer,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n NODISCARD bool ParseInt32(const std::string& str, int32_t *out);\n \n /**\n  * Convert string to signed 64-bit integer with strict parse error feedback.\n+ * This function is locale independent.\n  * @returns true if the entire string could be parsed as valid integer,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n NODISCARD bool ParseInt64(const std::string& str, int64_t *out);\n \n /**\n  * Convert decimal string to unsigned 32-bit integer with strict parse error feedback.\n+ * This function is locale independent.\n  * @returns true if the entire string could be parsed as valid integer,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n NODISCARD bool ParseUInt32(const std::string& str, uint32_t *out);\n \n /**\n  * Convert decimal string to unsigned 64-bit integer with strict parse error feedback.\n+ * This function is locale independent.\n  * @returns true if the entire string could be parsed as valid integer,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */"
      }
    ]
  }
]