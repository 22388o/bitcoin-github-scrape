[
  {
    "sha": "22e8605f4a4f18c46b869d39d27e03bde8741086",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmU4NjA1ZjRhNGYxOGM0NmI4NjlkMzlkMjdlMDNiZGU4NzQxMDg2",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-07-22T11:48:35Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-08-19T03:05:11Z"
      },
      "message": "Make sure all ports are 16 bit numbers",
      "tree": {
        "sha": "e17d506c8378592f4594bebce749e8de96628cd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e17d506c8378592f4594bebce749e8de96628cd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22e8605f4a4f18c46b869d39d27e03bde8741086",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22e8605f4a4f18c46b869d39d27e03bde8741086",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22e8605f4a4f18c46b869d39d27e03bde8741086",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22e8605f4a4f18c46b869d39d27e03bde8741086/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8250de13587ed05ca45df3e12c5dc9bcb1500e2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8250de13587ed05ca45df3e12c5dc9bcb1500e2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8250de13587ed05ca45df3e12c5dc9bcb1500e2c"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 41,
      "deletions": 41
    },
    "files": [
      {
        "sha": "41ce2b47a3b3be253e93457b293b7145b745f23e",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e8605f4a4f18c46b869d39d27e03bde8741086/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e8605f4a4f18c46b869d39d27e03bde8741086/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=22e8605f4a4f18c46b869d39d27e03bde8741086",
        "patch": "@@ -148,7 +148,7 @@ static void http_request_done(struct evhttp_request *req, void *ctx)\n UniValue CallRPC(const string& strMethod, const UniValue& params)\n {\n     std::string host = GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT);\n-    int port = GetArg(\"-rpcport\", BaseParams().RPCPort());\n+    uint16_t port = GetArg(\"-rpcport\", BaseParams().RPCPort());\n \n     // Create event base\n     struct event_base *base = event_base_new(); // TODO RAII"
      },
      {
        "sha": "d67d61afa4dd5b5a3d74f9f70445143224ca1303",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e8605f4a4f18c46b869d39d27e03bde8741086/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e8605f4a4f18c46b869d39d27e03bde8741086/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=22e8605f4a4f18c46b869d39d27e03bde8741086",
        "patch": "@@ -55,7 +55,7 @@ class CChainParams\n \n     const Consensus::Params& GetConsensus() const { return consensus; }\n     const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n-    int GetDefaultPort() const { return nDefaultPort; }\n+    uint16_t GetDefaultPort() const { return nDefaultPort; }\n \n     const CBlock& GenesisBlock() const { return genesis; }\n     /** Make miner wait to have peers to avoid wasting work */\n@@ -80,7 +80,7 @@ class CChainParams\n \n     Consensus::Params consensus;\n     CMessageHeader::MessageStartChars pchMessageStart;\n-    int nDefaultPort;\n+    uint16_t nDefaultPort;\n     uint64_t nPruneAfterHeight;\n     std::vector<CDNSSeedData> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];"
      },
      {
        "sha": "f16bd4b5ef76c859b44c8370d4b7148a80b8415c",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e8605f4a4f18c46b869d39d27e03bde8741086/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e8605f4a4f18c46b869d39d27e03bde8741086/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=22e8605f4a4f18c46b869d39d27e03bde8741086",
        "patch": "@@ -21,12 +21,12 @@ class CBaseChainParams\n     static const std::string REGTEST;\n \n     const std::string& DataDir() const { return strDataDir; }\n-    int RPCPort() const { return nRPCPort; }\n+    uint16_t RPCPort() const { return nRPCPort; }\n \n protected:\n     CBaseChainParams() {}\n \n-    int nRPCPort;\n+    uint16_t nRPCPort;\n     std::string strDataDir;\n };\n "
      },
      {
        "sha": "3a79a39f0c4942f650319ba18b3ebd65f9b94bbf",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e8605f4a4f18c46b869d39d27e03bde8741086/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e8605f4a4f18c46b869d39d27e03bde8741086/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=22e8605f4a4f18c46b869d39d27e03bde8741086",
        "patch": "@@ -318,7 +318,7 @@ static bool ThreadHTTP(struct event_base* base, struct evhttp* http)\n /** Bind HTTP server to specified addresses */\n static bool HTTPBindAddresses(struct evhttp* http)\n {\n-    int defaultPort = GetArg(\"-rpcport\", BaseParams().RPCPort());\n+    uint16_t defaultPort = GetArg(\"-rpcport\", BaseParams().RPCPort());\n     std::vector<std::pair<std::string, uint16_t> > endpoints;\n \n     // Determine what addresses to bind to\n@@ -331,7 +331,7 @@ static bool HTTPBindAddresses(struct evhttp* http)\n     } else if (mapArgs.count(\"-rpcbind\")) { // Specific bind address\n         const std::vector<std::string>& vbind = mapMultiArgs[\"-rpcbind\"];\n         for (std::vector<std::string>::const_iterator i = vbind.begin(); i != vbind.end(); ++i) {\n-            int port = defaultPort;\n+            uint16_t port = defaultPort;\n             std::string host;\n             SplitHostPort(*i, port, host);\n             endpoints.push_back(std::make_pair(host, port));\n@@ -343,12 +343,12 @@ static bool HTTPBindAddresses(struct evhttp* http)\n \n     // Bind addresses\n     for (std::vector<std::pair<std::string, uint16_t> >::iterator i = endpoints.begin(); i != endpoints.end(); ++i) {\n-        LogPrint(\"http\", \"Binding RPC on address %s port %i\\n\", i->first, i->second);\n+        LogPrint(\"http\", \"Binding RPC on address %s port %u\\n\", i->first, i->second);\n         evhttp_bound_socket *bind_handle = evhttp_bind_socket_with_handle(http, i->first.empty() ? NULL : i->first.c_str(), i->second);\n         if (bind_handle) {\n             boundSockets.push_back(bind_handle);\n         } else {\n-            LogPrintf(\"Binding RPC on address %s port %i failed.\\n\", i->first, i->second);\n+            LogPrintf(\"Binding RPC on address %s port %u failed.\\n\", i->first, i->second);\n         }\n     }\n     return !boundSockets.empty();"
      },
      {
        "sha": "9e76fa4d37ee9e4c7d806496c077c58d6d62f317",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e8605f4a4f18c46b869d39d27e03bde8741086/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e8605f4a4f18c46b869d39d27e03bde8741086/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=22e8605f4a4f18c46b869d39d27e03bde8741086",
        "patch": "@@ -1148,7 +1148,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     std::string proxyArg = GetArg(\"-proxy\", \"\");\n     SetLimited(NET_TOR);\n     if (proxyArg != \"\" && proxyArg != \"0\") {\n-        CService resolved(LookupNumeric(proxyArg.c_str(), 9050));\n+        CService resolved(LookupNumeric(proxyArg.c_str(), (uint16_t)9050));\n         proxyType addrProxy = proxyType(resolved, proxyRandomize);\n         if (!addrProxy.IsValid())\n             return InitError(strprintf(_(\"Invalid -proxy address: '%s'\"), proxyArg));\n@@ -1168,7 +1168,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         if (onionArg == \"0\") { // Handle -noonion/-onion=0\n             SetLimited(NET_TOR); // set onions as unreachable\n         } else {\n-            CService resolved(LookupNumeric(onionArg.c_str(), 9050));\n+            CService resolved(LookupNumeric(onionArg.c_str(), (uint16_t)9050));\n             proxyType addrOnion = proxyType(resolved, proxyRandomize);\n             if (!addrOnion.IsValid())\n                 return InitError(strprintf(_(\"Invalid -onion address: '%s'\"), onionArg));"
      },
      {
        "sha": "e6ba311e9bc4e9cf5b680e73c1f5fbeede0b52b5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e8605f4a4f18c46b869d39d27e03bde8741086/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e8605f4a4f18c46b869d39d27e03bde8741086/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=22e8605f4a4f18c46b869d39d27e03bde8741086",
        "patch": "@@ -119,9 +119,9 @@ void AddOneShot(const std::string& strDest)\n     vOneShots.push_back(strDest);\n }\n \n-unsigned short GetListenPort()\n+uint16_t GetListenPort()\n {\n-    return (unsigned short)(GetArg(\"-port\", Params().GetDefaultPort()));\n+    return (uint16_t)(GetArg(\"-port\", Params().GetDefaultPort()));\n }\n \n // find 'best' local address for a particular peer\n@@ -2069,7 +2069,7 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (pnodeLocalHost == NULL) {\n         CNetAddr local;\n         LookupHost(\"127.0.0.1\", local, false);\n-        pnodeLocalHost = new CNode(INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices));\n+        pnodeLocalHost = new CNode(INVALID_SOCKET, CAddress(CService(local, (uint16_t)0), nLocalServices));\n     }\n \n     Discover(threadGroup);"
      },
      {
        "sha": "b9615184bdbe38a74ae36ff435a351388f44cf70",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e8605f4a4f18c46b869d39d27e03bde8741086/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e8605f4a4f18c46b869d39d27e03bde8741086/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=22e8605f4a4f18c46b869d39d27e03bde8741086",
        "patch": "@@ -91,7 +91,7 @@ CNode* FindNode(const CService& ip);\n CNode* FindNode(const NodeId id); //TODO: Remove this\n bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false);\n void MapPort(bool fUseUPnP);\n-unsigned short GetListenPort();\n+uint16_t GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler);\n bool StopNode();\n@@ -179,7 +179,7 @@ extern std::string strSubVersion;\n \n struct LocalServiceInfo {\n     int nScore;\n-    int nPort;\n+    uint16_t nPort;\n };\n \n extern CCriticalSection cs_mapLocalHost;"
      },
      {
        "sha": "eb90409f21784bfb497291ffaf342849aa9eb3b6",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e8605f4a4f18c46b869d39d27e03bde8741086/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e8605f4a4f18c46b869d39d27e03bde8741086/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=22e8605f4a4f18c46b869d39d27e03bde8741086",
        "patch": "@@ -63,7 +63,7 @@ std::string GetNetworkName(enum Network net) {\n     }\n }\n \n-void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {\n+void SplitHostPort(std::string in, uint16_t &portOut, std::string &hostOut) {\n     size_t colon = in.find_last_of(':');\n     // if a : is found, and it either follows a [...], or no other : is in the string, treat it as port separator\n     bool fHaveColon = colon != in.npos;\n@@ -203,11 +203,11 @@ bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup)\n     return true;\n }\n \n-bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)\n+bool Lookup(const char *pszName, std::vector<CService>& vAddr, uint16_t portDefault, bool fAllowLookup, unsigned int nMaxSolutions)\n {\n     if (pszName[0] == 0)\n         return false;\n-    int port = portDefault;\n+    uint16_t port = portDefault;\n     std::string hostname = \"\";\n     SplitHostPort(std::string(pszName), port, hostname);\n \n@@ -221,7 +221,7 @@ bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault,\n     return true;\n }\n \n-bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup)\n+bool Lookup(const char *pszName, CService& addr, uint16_t portDefault, bool fAllowLookup)\n {\n     std::vector<CService> vService;\n     bool fRet = Lookup(pszName, vService, portDefault, fAllowLookup, 1);\n@@ -231,7 +231,7 @@ bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLoo\n     return true;\n }\n \n-CService LookupNumeric(const char *pszName, int portDefault)\n+CService LookupNumeric(const char *pszName, uint16_t portDefault)\n {\n     CService addr;\n     // \"1.2:345\" will fail to resolve the ip, but will still set the port.\n@@ -320,7 +320,7 @@ std::string Socks5ErrorString(int err)\n }\n \n /** Connect using SOCKS5 (as described in RFC1928) */\n-static bool Socks5(const std::string& strDest, int port, const ProxyCredentials *auth, SOCKET& hSocket)\n+static bool Socks5(const std::string& strDest, uint16_t port, const ProxyCredentials *auth, SOCKET& hSocket)\n {\n     LogPrint(\"net\", \"SOCKS5 connecting %s\\n\", strDest);\n     if (strDest.size() > 255) {\n@@ -346,7 +346,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     char pchRet1[2];\n     if (!InterruptibleRecv(pchRet1, 2, SOCKS5_RECV_TIMEOUT, hSocket)) {\n         CloseSocket(hSocket);\n-        LogPrintf(\"Socks5() connect to %s:%d failed: InterruptibleRecv() timeout or other failure\\n\", strDest, port);\n+        LogPrintf(\"Socks5() connect to %s:%u failed: InterruptibleRecv() timeout or other failure\\n\", strDest, port);\n         return false;\n     }\n     if (pchRet1[0] != 0x05) {\n@@ -410,7 +410,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     if (pchRet2[1] != 0x00) {\n         // Failures to connect to a peer that are not proxy errors\n         CloseSocket(hSocket);\n-        LogPrintf(\"Socks5() connect to %s:%d failed: %s\\n\", strDest, port, Socks5ErrorString(pchRet2[1]));\n+        LogPrintf(\"Socks5() connect to %s:%u failed: %s\\n\", strDest, port, Socks5ErrorString(pchRet2[1]));\n         return false;\n     }\n     if (pchRet2[2] != 0x00) {\n@@ -584,7 +584,7 @@ bool IsProxy(const CNetAddr &addr) {\n     return false;\n }\n \n-static bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)\n+static bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, uint16_t port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)\n {\n     SOCKET hSocket = INVALID_SOCKET;\n     // first connect to proxy server\n@@ -598,10 +598,10 @@ static bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDe\n         ProxyCredentials random_auth;\n         random_auth.username = strprintf(\"%i\", insecure_rand());\n         random_auth.password = strprintf(\"%i\", insecure_rand());\n-        if (!Socks5(strDest, (unsigned short)port, &random_auth, hSocket))\n+        if (!Socks5(strDest, port, &random_auth, hSocket))\n             return false;\n     } else {\n-        if (!Socks5(strDest, (unsigned short)port, 0, hSocket))\n+        if (!Socks5(strDest, port, 0, hSocket))\n             return false;\n     }\n \n@@ -621,10 +621,10 @@ bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout, b\n         return ConnectSocketDirectly(addrDest, hSocketRet, nTimeout);\n }\n \n-bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout, bool *outProxyConnectionFailed)\n+bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, uint16_t portDefault, int nTimeout, bool *outProxyConnectionFailed)\n {\n     std::string strDest;\n-    int port = portDefault;\n+    uint16_t port = portDefault;\n \n     if (outProxyConnectionFailed)\n         *outProxyConnectionFailed = false;"
      },
      {
        "sha": "f39769126d49d472389c1add62158b2f4f8cb28f",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e8605f4a4f18c46b869d39d27e03bde8741086/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e8605f4a4f18c46b869d39d27e03bde8741086/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=22e8605f4a4f18c46b869d39d27e03bde8741086",
        "patch": "@@ -39,20 +39,20 @@ class proxyType\n \n enum Network ParseNetwork(std::string net);\n std::string GetNetworkName(enum Network net);\n-void SplitHostPort(std::string in, int &portOut, std::string &hostOut);\n+void SplitHostPort(std::string in, uint16_t &portOut, std::string &hostOut);\n bool SetProxy(enum Network net, const proxyType &addrProxy);\n bool GetProxy(enum Network net, proxyType &proxyInfoOut);\n bool IsProxy(const CNetAddr &addr);\n bool SetNameProxy(const proxyType &addrProxy);\n bool HaveNameProxy();\n bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup);\n bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup);\n-bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup);\n-bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n-CService LookupNumeric(const char *pszName, int portDefault = 0);\n+bool Lookup(const char *pszName, CService& addr, uint16_t portDefault, bool fAllowLookup);\n+bool Lookup(const char *pszName, std::vector<CService>& vAddr, uint16_t portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n+CService LookupNumeric(const char *pszName, uint16_t portDefault = 0);\n bool LookupSubNet(const char *pszName, CSubNet& subnet);\n bool ConnectSocket(const CService &addr, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed = 0);\n-bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout, bool *outProxyConnectionFailed = 0);\n+bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, uint16_t portDefault, int nTimeout, bool *outProxyConnectionFailed = 0);\n /** Return readable error string for a network error code */\n std::string NetworkErrorString(int err);\n /** Close socket and set hSocket to INVALID_SOCKET */"
      },
      {
        "sha": "f0561b49427e520de222d026a7000706db8e0797",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e8605f4a4f18c46b869d39d27e03bde8741086/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e8605f4a4f18c46b869d39d27e03bde8741086/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=22e8605f4a4f18c46b869d39d27e03bde8741086",
        "patch": "@@ -327,7 +327,7 @@ QValidator::State ProxyAddressValidator::validate(QString &input, int &pos) cons\n {\n     Q_UNUSED(pos);\n     // Validate the proxy\n-    CService serv(LookupNumeric(input.toStdString().c_str(), 9050));\n+    CService serv(LookupNumeric(input.toStdString().c_str(), (uint16_t)9050));\n     proxyType addrProxy = proxyType(serv, true);\n     if (addrProxy.IsValid())\n         return QValidator::Acceptable;"
      },
      {
        "sha": "eec29c156f74da83cac773b15101873d6b8ad88f",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e8605f4a4f18c46b869d39d27e03bde8741086/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e8605f4a4f18c46b869d39d27e03bde8741086/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=22e8605f4a4f18c46b869d39d27e03bde8741086",
        "patch": "@@ -59,7 +59,7 @@ private Q_SLOTS:\n     void updateDefaultProxyNets();\n \n Q_SIGNALS:\n-    void proxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n+    void proxyIpChecks(QValidatedLineEdit *pUiProxyIp, uint16_t nProxyPort);\n \n private:\n     Ui::OptionsDialog *ui;"
      },
      {
        "sha": "6c8c8738a7badf76a548a1aea53bb62afa0415be",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e8605f4a4f18c46b869d39d27e03bde8741086/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e8605f4a4f18c46b869d39d27e03bde8741086/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=22e8605f4a4f18c46b869d39d27e03bde8741086",
        "patch": "@@ -896,7 +896,7 @@ void RPCConsole::banSelectedNode(int bantime)\n     if (FindNode(strNode.toStdString())) {\n         std::string nStr = strNode.toStdString();\n         std::string addr;\n-        int port = 0;\n+        uint16_t port = 0;\n         SplitHostPort(nStr, port, addr);\n \n         CNetAddr resolved;"
      },
      {
        "sha": "8f6aa496628e3758abf979e1b770606778b8aadf",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e8605f4a4f18c46b869d39d27e03bde8741086/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e8605f4a4f18c46b869d39d27e03bde8741086/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=22e8605f4a4f18c46b869d39d27e03bde8741086",
        "patch": "@@ -64,10 +64,10 @@ BOOST_AUTO_TEST_CASE(netbase_properties)\n \n }\n \n-bool static TestSplitHost(string test, string host, int port)\n+bool static TestSplitHost(string test, string host, uint16_t port)\n {\n     string hostOut;\n-    int portOut = -1;\n+    uint16_t portOut = -1;\n     SplitHostPort(test, portOut, hostOut);\n     return hostOut == host && port == portOut;\n }"
      },
      {
        "sha": "592e55d6173f3b04df9e6d8f09f9424f8119b56c",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e8605f4a4f18c46b869d39d27e03bde8741086/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e8605f4a4f18c46b869d39d27e03bde8741086/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=22e8605f4a4f18c46b869d39d27e03bde8741086",
        "patch": "@@ -462,7 +462,7 @@ void TorController::auth_cb(TorControlConnection& conn, const TorControlReply& r\n         // Now that we know Tor is running setup the proxy for onion addresses\n         // if -onion isn't set to something else.\n         if (GetArg(\"-onion\", \"\") == \"\") {\n-            CService resolved(LookupNumeric(\"127.0.0.1\", 9050));\n+            CService resolved(LookupNumeric(\"127.0.0.1\", (uint16_t)9050));\n             proxyType addrOnion = proxyType(resolved, true);\n             SetProxy(NET_TOR, addrOnion);\n             SetLimited(NET_TOR, false);\n@@ -474,7 +474,7 @@ void TorController::auth_cb(TorControlConnection& conn, const TorControlReply& r\n         // Request hidden service, redirect port.\n         // Note that the 'virtual' port doesn't have to be the same as our internal port, but this is just a convenient\n         // choice.  TODO; refactor the shutdown sequence some day.\n-        conn.Command(strprintf(\"ADD_ONION %s Port=%i,127.0.0.1:%i\", private_key, GetListenPort(), GetListenPort()),\n+        conn.Command(strprintf(\"ADD_ONION %s Port=%u,127.0.0.1:%u\", private_key, GetListenPort(), GetListenPort()),\n             boost::bind(&TorController::add_onion_cb, this, _1, _2));\n     } else {\n         LogPrintf(\"tor: Authentication failed\\n\");"
      }
    ]
  },
  {
    "sha": "27c1c8967fd074404262d045f3d67c3f1b013432",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2MxYzg5NjdmZDA3NDQwNDI2MmQwNDVmM2Q2N2MzZjFiMDEzNDMy",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-07-23T17:09:32Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-08-19T03:05:15Z"
      },
      "message": "SplitHostPort should fail if provided port is 0 or negative",
      "tree": {
        "sha": "d38e9af7d0c5aea121cecced6f9de46c715723af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d38e9af7d0c5aea121cecced6f9de46c715723af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27c1c8967fd074404262d045f3d67c3f1b013432",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c1c8967fd074404262d045f3d67c3f1b013432",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27c1c8967fd074404262d045f3d67c3f1b013432",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c1c8967fd074404262d045f3d67c3f1b013432/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22e8605f4a4f18c46b869d39d27e03bde8741086",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22e8605f4a4f18c46b869d39d27e03bde8741086",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22e8605f4a4f18c46b869d39d27e03bde8741086"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 41,
      "deletions": 18
    },
    "files": [
      {
        "sha": "7f4e78caa2528bbd9805aa3abbd68c7b5bbbbe53",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27c1c8967fd074404262d045f3d67c3f1b013432/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27c1c8967fd074404262d045f3d67c3f1b013432/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=27c1c8967fd074404262d045f3d67c3f1b013432",
        "patch": "@@ -333,8 +333,8 @@ static bool HTTPBindAddresses(struct evhttp* http)\n         for (std::vector<std::string>::const_iterator i = vbind.begin(); i != vbind.end(); ++i) {\n             uint16_t port = defaultPort;\n             std::string host;\n-            SplitHostPort(*i, port, host);\n-            endpoints.push_back(std::make_pair(host, port));\n+            if(SplitHostPort(*i, port, host))\n+                endpoints.push_back(std::make_pair(host, port));\n         }\n     } else { // No specific bind address specified, bind to any\n         endpoints.push_back(std::make_pair(\"::\", defaultPort));"
      },
      {
        "sha": "3cd2c7fa8ce5ebeeaf55be37d2021c095fd91326",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27c1c8967fd074404262d045f3d67c3f1b013432/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27c1c8967fd074404262d045f3d67c3f1b013432/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=27c1c8967fd074404262d045f3d67c3f1b013432",
        "patch": "@@ -63,23 +63,28 @@ std::string GetNetworkName(enum Network net) {\n     }\n }\n \n-void SplitHostPort(std::string in, uint16_t &portOut, std::string &hostOut) {\n+bool SplitHostPort(std::string in, uint16_t &portOut, std::string &hostOut) {\n     size_t colon = in.find_last_of(':');\n     // if a : is found, and it either follows a [...], or no other : is in the string, treat it as port separator\n     bool fHaveColon = colon != in.npos;\n     bool fBracketed = fHaveColon && (in[0]=='[' && in[colon-1]==']'); // if there is a colon, and in[0]=='[', colon is not 0, so in[colon-1] is safe\n     bool fMultiColon = fHaveColon && (in.find_last_of(':',colon-1) != in.npos);\n+    bool fResult = true;\n     if (fHaveColon && (colon==0 || fBracketed || !fMultiColon)) {\n         int32_t n;\n         if (ParseInt32(in.substr(colon + 1), &n) && n > 0 && n < 0x10000) {\n             in = in.substr(0, colon);\n             portOut = n;\n+        } else {\n+            fResult = false;\n         }\n     }\n     if (in.size()>0 && in[0] == '[' && in[in.size()-1] == ']')\n         hostOut = in.substr(1, in.size()-2);\n     else\n         hostOut = in;\n+\n+    return fResult;\n }\n \n bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n@@ -209,7 +214,7 @@ bool Lookup(const char *pszName, std::vector<CService>& vAddr, uint16_t portDefa\n         return false;\n     uint16_t port = portDefault;\n     std::string hostname = \"\";\n-    SplitHostPort(std::string(pszName), port, hostname);\n+    if(!SplitHostPort(std::string(pszName), port, hostname)) return false;\n \n     std::vector<CNetAddr> vIP;\n     bool fRet = LookupIntern(hostname.c_str(), vIP, nMaxSolutions, fAllowLookup);\n@@ -629,7 +634,7 @@ bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest\n     if (outProxyConnectionFailed)\n         *outProxyConnectionFailed = false;\n \n-    SplitHostPort(std::string(pszDest), port, strDest);\n+    if(!SplitHostPort(std::string(pszDest), port, strDest)) return false;\n \n     proxyType nameProxy;\n     GetNameProxy(nameProxy);"
      },
      {
        "sha": "6952c322aa3ac21747a16266c02050c99062947e",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27c1c8967fd074404262d045f3d67c3f1b013432/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27c1c8967fd074404262d045f3d67c3f1b013432/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=27c1c8967fd074404262d045f3d67c3f1b013432",
        "patch": "@@ -39,7 +39,7 @@ class proxyType\n \n enum Network ParseNetwork(std::string net);\n std::string GetNetworkName(enum Network net);\n-void SplitHostPort(std::string in, uint16_t &portOut, std::string &hostOut);\n+bool SplitHostPort(std::string in, uint16_t &portOut, std::string &hostOut);\n bool SetProxy(enum Network net, const proxyType &addrProxy);\n bool GetProxy(enum Network net, proxyType &proxyInfoOut);\n bool IsProxy(const CNetAddr &addr);"
      },
      {
        "sha": "302378d949fbb1a2f13df251e00f9aafa9e082a3",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27c1c8967fd074404262d045f3d67c3f1b013432/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27c1c8967fd074404262d045f3d67c3f1b013432/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=27c1c8967fd074404262d045f3d67c3f1b013432",
        "patch": "@@ -897,7 +897,7 @@ void RPCConsole::banSelectedNode(int bantime)\n         std::string nStr = strNode.toStdString();\n         std::string addr;\n         uint16_t port = 0;\n-        SplitHostPort(nStr, port, addr);\n+        if(!SplitHostPort(nStr, port, addr)) return;\n \n         CNetAddr resolved;\n         if(!LookupHost(addr.c_str(), resolved, false))"
      },
      {
        "sha": "f7e0b73a35647c00a465fd0197f3b07f6f6ddd58",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 11,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27c1c8967fd074404262d045f3d67c3f1b013432/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27c1c8967fd074404262d045f3d67c3f1b013432/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=27c1c8967fd074404262d045f3d67c3f1b013432",
        "patch": "@@ -64,31 +64,49 @@ BOOST_AUTO_TEST_CASE(netbase_properties)\n \n }\n \n-bool static TestSplitHost(string test, string host, uint16_t port)\n+bool static TestSplitHost(string test, string host, int port)\n {\n     string hostOut;\n-    uint16_t portOut = -1;\n-    SplitHostPort(test, portOut, hostOut);\n-    return hostOut == host && port == portOut;\n+    uint16_t portOut = 0;\n+    bool fResult = SplitHostPort(test, portOut, hostOut);\n+    return fResult && hostOut == host && port == portOut;\n }\n \n BOOST_AUTO_TEST_CASE(netbase_splithost)\n {\n-    BOOST_CHECK(TestSplitHost(\"www.bitcoin.org\", \"www.bitcoin.org\", -1));\n-    BOOST_CHECK(TestSplitHost(\"[www.bitcoin.org]\", \"www.bitcoin.org\", -1));\n+    BOOST_CHECK(TestSplitHost(\"www.bitcoin.org\", \"www.bitcoin.org\", 0));\n+    BOOST_CHECK(TestSplitHost(\"[www.bitcoin.org]\", \"www.bitcoin.org\", 0));\n     BOOST_CHECK(TestSplitHost(\"www.bitcoin.org:80\", \"www.bitcoin.org\", 80));\n     BOOST_CHECK(TestSplitHost(\"[www.bitcoin.org]:80\", \"www.bitcoin.org\", 80));\n-    BOOST_CHECK(TestSplitHost(\"127.0.0.1\", \"127.0.0.1\", -1));\n+    BOOST_CHECK(TestSplitHost(\"127.0.0.1\", \"127.0.0.1\", 0));\n     BOOST_CHECK(TestSplitHost(\"127.0.0.1:8333\", \"127.0.0.1\", 8333));\n-    BOOST_CHECK(TestSplitHost(\"[127.0.0.1]\", \"127.0.0.1\", -1));\n+    BOOST_CHECK(TestSplitHost(\"[127.0.0.1]\", \"127.0.0.1\", 0));\n     BOOST_CHECK(TestSplitHost(\"[127.0.0.1]:8333\", \"127.0.0.1\", 8333));\n-    BOOST_CHECK(TestSplitHost(\"::ffff:127.0.0.1\", \"::ffff:127.0.0.1\", -1));\n+    BOOST_CHECK(TestSplitHost(\"::ffff:127.0.0.1\", \"::ffff:127.0.0.1\", 0));\n     BOOST_CHECK(TestSplitHost(\"[::ffff:127.0.0.1]:8333\", \"::ffff:127.0.0.1\", 8333));\n     BOOST_CHECK(TestSplitHost(\"[::]:8333\", \"::\", 8333));\n-    BOOST_CHECK(TestSplitHost(\"::8333\", \"::8333\", -1));\n+    BOOST_CHECK(TestSplitHost(\"::8333\", \"::8333\", 0));\n     BOOST_CHECK(TestSplitHost(\":8333\", \"\", 8333));\n     BOOST_CHECK(TestSplitHost(\"[]:8333\", \"\", 8333));\n-    BOOST_CHECK(TestSplitHost(\"\", \"\", -1));\n+    BOOST_CHECK(TestSplitHost(\"\", \"\", 0));\n+    // should fail if provided port is 0\n+    BOOST_CHECK(!TestSplitHost(\"www.bitcoin.org:0\", \"www.bitcoin.org\", 0));\n+    BOOST_CHECK(!TestSplitHost(\"[www.bitcoin.org]:0\", \"www.bitcoin.org\", 0));\n+    BOOST_CHECK(!TestSplitHost(\"127.0.0.1:0\", \"127.0.0.1\", 0));\n+    BOOST_CHECK(!TestSplitHost(\"[127.0.0.1]:0\", \"127.0.0.1\", 0));\n+    BOOST_CHECK(!TestSplitHost(\"[::ffff:127.0.0.1]:0\", \"::ffff:127.0.0.1\", 0));\n+    BOOST_CHECK(!TestSplitHost(\"[::]:0\", \"::\", 0));\n+    BOOST_CHECK(!TestSplitHost(\":0\", \"\", 0));\n+    BOOST_CHECK(!TestSplitHost(\"[]:0\", \"\", 0));\n+    // should fail if provided port is negative\n+    BOOST_CHECK(!TestSplitHost(\"www.bitcoin.org:-80\", \"www.bitcoin.org\", -80));\n+    BOOST_CHECK(!TestSplitHost(\"[www.bitcoin.org]:-80\", \"www.bitcoin.org\", -80));\n+    BOOST_CHECK(!TestSplitHost(\"127.0.0.1:-8333\", \"127.0.0.1\", -8333));\n+    BOOST_CHECK(!TestSplitHost(\"[127.0.0.1]:-8333\", \"127.0.0.1\", -8333));\n+    BOOST_CHECK(!TestSplitHost(\"[::ffff:127.0.0.1]:-8333\", \"::ffff:127.0.0.1\", -8333));\n+    BOOST_CHECK(!TestSplitHost(\"[::]:-8333\", \"::\", -8333));\n+    BOOST_CHECK(!TestSplitHost(\":-8333\", \"\", -8333));\n+    BOOST_CHECK(!TestSplitHost(\"[]:-8333\", \"\", -8333));\n }\n \n bool static TestParse(string src, string canon)"
      }
    ]
  },
  {
    "sha": "7523b76ae42420c09e5125d0cc90a7f483fc5e7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTIzYjc2YWU0MjQyMGMwOWU1MTI1ZDBjYzkwYTdmNDgzZmM1ZTdm",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-07-27T22:51:55Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-08-19T03:05:15Z"
      },
      "message": "Validate ports in `GetArg` inputs and add test cases for `TestSplitHost` for ports above upper bound.",
      "tree": {
        "sha": "d6840e369424ad0f7618b73756256ae2a2e6c2cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6840e369424ad0f7618b73756256ae2a2e6c2cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7523b76ae42420c09e5125d0cc90a7f483fc5e7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7523b76ae42420c09e5125d0cc90a7f483fc5e7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7523b76ae42420c09e5125d0cc90a7f483fc5e7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7523b76ae42420c09e5125d0cc90a7f483fc5e7f/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27c1c8967fd074404262d045f3d67c3f1b013432",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c1c8967fd074404262d045f3d67c3f1b013432",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27c1c8967fd074404262d045f3d67c3f1b013432"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 46,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e3b8c9f0939b1fd04cf4ef5c8e0c8deef1b736d8",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7523b76ae42420c09e5125d0cc90a7f483fc5e7f/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7523b76ae42420c09e5125d0cc90a7f483fc5e7f/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=7523b76ae42420c09e5125d0cc90a7f483fc5e7f",
        "patch": "@@ -148,7 +148,11 @@ static void http_request_done(struct evhttp_request *req, void *ctx)\n UniValue CallRPC(const string& strMethod, const UniValue& params)\n {\n     std::string host = GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT);\n-    uint16_t port = GetArg(\"-rpcport\", BaseParams().RPCPort());\n+\n+    int portTmp = GetArg(\"-rpcport\", BaseParams().RPCPort());\n+    if(portTmp <= 0 || portTmp >= 0x10000)\n+        throw runtime_error(strprintf(\"-rpcport %d is incorrect\", portTmp));\n+    uint16_t port = (uint16_t)portTmp;\n \n     // Create event base\n     struct event_base *base = event_base_new(); // TODO RAII"
      },
      {
        "sha": "c3c1b55218d45317cc55ef155235dd1a79c4b2e9",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 6,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7523b76ae42420c09e5125d0cc90a7f483fc5e7f/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7523b76ae42420c09e5125d0cc90a7f483fc5e7f/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=7523b76ae42420c09e5125d0cc90a7f483fc5e7f",
        "patch": "@@ -318,27 +318,39 @@ static bool ThreadHTTP(struct event_base* base, struct evhttp* http)\n /** Bind HTTP server to specified addresses */\n static bool HTTPBindAddresses(struct evhttp* http)\n {\n-    uint16_t defaultPort = GetArg(\"-rpcport\", BaseParams().RPCPort());\n+    uint16_t defaultPort = BaseParams().RPCPort();\n+    int rpcPortTmp = GetArg(\"-rpcport\", defaultPort);\n+    uint16_t rpcPort;\n+\n+    if(IsValidPort(rpcPortTmp)) {\n+        rpcPort = (uint16_t)rpcPortTmp;\n+    } else {\n+        rpcPort = defaultPort;\n+        LogPrintf(\"WARNING: -rpcport %d is incorrect, using default %u\\n\", rpcPortTmp, defaultPort);\n+    }\n+\n     std::vector<std::pair<std::string, uint16_t> > endpoints;\n \n     // Determine what addresses to bind to\n     if (!mapArgs.count(\"-rpcallowip\")) { // Default to loopback if not allowing external IPs\n-        endpoints.push_back(std::make_pair(\"::1\", defaultPort));\n-        endpoints.push_back(std::make_pair(\"127.0.0.1\", defaultPort));\n+        endpoints.push_back(std::make_pair(\"::1\", rpcPort));\n+        endpoints.push_back(std::make_pair(\"127.0.0.1\", rpcPort));\n         if (mapArgs.count(\"-rpcbind\")) {\n             LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n         }\n     } else if (mapArgs.count(\"-rpcbind\")) { // Specific bind address\n         const std::vector<std::string>& vbind = mapMultiArgs[\"-rpcbind\"];\n         for (std::vector<std::string>::const_iterator i = vbind.begin(); i != vbind.end(); ++i) {\n-            uint16_t port = defaultPort;\n+            uint16_t port = rpcPort;\n             std::string host;\n             if(SplitHostPort(*i, port, host))\n                 endpoints.push_back(std::make_pair(host, port));\n+            else\n+                LogPrintf(\"WARNING: -rpcbind address %s is incorrect, ignoring\\n\", host);\n         }\n     } else { // No specific bind address specified, bind to any\n-        endpoints.push_back(std::make_pair(\"::\", defaultPort));\n-        endpoints.push_back(std::make_pair(\"0.0.0.0\", defaultPort));\n+        endpoints.push_back(std::make_pair(\"::\", rpcPort));\n+        endpoints.push_back(std::make_pair(\"0.0.0.0\", rpcPort));\n     }\n \n     // Bind addresses"
      },
      {
        "sha": "7b9f68fdf84b41a7897afa574fd0e789cbd0ef08",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7523b76ae42420c09e5125d0cc90a7f483fc5e7f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7523b76ae42420c09e5125d0cc90a7f483fc5e7f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7523b76ae42420c09e5125d0cc90a7f483fc5e7f",
        "patch": "@@ -121,7 +121,13 @@ void AddOneShot(const std::string& strDest)\n \n uint16_t GetListenPort()\n {\n-    return (uint16_t)(GetArg(\"-port\", Params().GetDefaultPort()));\n+    uint16_t defaultPort = Params().GetDefaultPort();\n+    int port = GetArg(\"-port\", defaultPort);\n+    if(!IsValidPort(port)) {\n+        port = defaultPort;\n+        LogPrintf(\"WARNING: -port %d is incorrect, using default %u\\n\", port, defaultPort);\n+    }\n+    return (uint16_t)port;\n }\n \n // find 'best' local address for a particular peer"
      },
      {
        "sha": "9ff028f0e0751a660217c1e49607c2c9647145fb",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7523b76ae42420c09e5125d0cc90a7f483fc5e7f/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7523b76ae42420c09e5125d0cc90a7f483fc5e7f/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=7523b76ae42420c09e5125d0cc90a7f483fc5e7f",
        "patch": "@@ -63,6 +63,11 @@ std::string GetNetworkName(enum Network net) {\n     }\n }\n \n+bool IsValidPort(int port)\n+{\n+    return port > 0 && port < 0x10000;\n+}\n+\n bool SplitHostPort(std::string in, uint16_t &portOut, std::string &hostOut) {\n     size_t colon = in.find_last_of(':');\n     // if a : is found, and it either follows a [...], or no other : is in the string, treat it as port separator\n@@ -72,7 +77,7 @@ bool SplitHostPort(std::string in, uint16_t &portOut, std::string &hostOut) {\n     bool fResult = true;\n     if (fHaveColon && (colon==0 || fBracketed || !fMultiColon)) {\n         int32_t n;\n-        if (ParseInt32(in.substr(colon + 1), &n) && n > 0 && n < 0x10000) {\n+        if (ParseInt32(in.substr(colon + 1), &n) && IsValidPort(n)) {\n             in = in.substr(0, colon);\n             portOut = n;\n         } else {"
      },
      {
        "sha": "8d1ecc1a838be8165591bde4d72edf086222b0ad",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7523b76ae42420c09e5125d0cc90a7f483fc5e7f/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7523b76ae42420c09e5125d0cc90a7f483fc5e7f/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=7523b76ae42420c09e5125d0cc90a7f483fc5e7f",
        "patch": "@@ -39,6 +39,7 @@ class proxyType\n \n enum Network ParseNetwork(std::string net);\n std::string GetNetworkName(enum Network net);\n+bool IsValidPort(int port);\n bool SplitHostPort(std::string in, uint16_t &portOut, std::string &hostOut);\n bool SetProxy(enum Network net, const proxyType &addrProxy);\n bool GetProxy(enum Network net, proxyType &proxyInfoOut);"
      },
      {
        "sha": "85a4781840f7c442c233555cdddb1cd46ead827f",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7523b76ae42420c09e5125d0cc90a7f483fc5e7f/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7523b76ae42420c09e5125d0cc90a7f483fc5e7f/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=7523b76ae42420c09e5125d0cc90a7f483fc5e7f",
        "patch": "@@ -107,6 +107,15 @@ BOOST_AUTO_TEST_CASE(netbase_splithost)\n     BOOST_CHECK(!TestSplitHost(\"[::]:-8333\", \"::\", -8333));\n     BOOST_CHECK(!TestSplitHost(\":-8333\", \"\", -8333));\n     BOOST_CHECK(!TestSplitHost(\"[]:-8333\", \"\", -8333));\n+    // should fail if provided port is above upper bound\n+    BOOST_CHECK(!TestSplitHost(\"www.bitcoin.org:65536\", \"www.bitcoin.org\", 65536));\n+    BOOST_CHECK(!TestSplitHost(\"[www.bitcoin.org]:65536\", \"www.bitcoin.org\", 65536));\n+    BOOST_CHECK(!TestSplitHost(\"127.0.0.1:65536\", \"127.0.0.1\", 65536));\n+    BOOST_CHECK(!TestSplitHost(\"[127.0.0.1]:65536\", \"127.0.0.1\", 65536));\n+    BOOST_CHECK(!TestSplitHost(\"[::ffff:127.0.0.1]:65536\", \"::ffff:127.0.0.1\", 65536));\n+    BOOST_CHECK(!TestSplitHost(\"[::]:65536\", \"::\", 65536));\n+    BOOST_CHECK(!TestSplitHost(\":65536\", \"\", 65536));\n+    BOOST_CHECK(!TestSplitHost(\"[]:65536\", \"\", 65536));\n }\n \n bool static TestParse(string src, string canon)"
      }
    ]
  },
  {
    "sha": "41028e7ac72a3541744b99ee7a508ba8879f26eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTAyOGU3YWM3MmEzNTQxNzQ0Yjk5ZWU3YTUwOGJhODg3OWYyNmVi",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-08-19T03:39:54Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-08-19T03:46:36Z"
      },
      "message": "Fix new code after rebase",
      "tree": {
        "sha": "795bef8cf53f16200f4b4ad318982c68a9b8a1bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/795bef8cf53f16200f4b4ad318982c68a9b8a1bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41028e7ac72a3541744b99ee7a508ba8879f26eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41028e7ac72a3541744b99ee7a508ba8879f26eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41028e7ac72a3541744b99ee7a508ba8879f26eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41028e7ac72a3541744b99ee7a508ba8879f26eb/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7523b76ae42420c09e5125d0cc90a7f483fc5e7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7523b76ae42420c09e5125d0cc90a7f483fc5e7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7523b76ae42420c09e5125d0cc90a7f483fc5e7f"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 52,
      "deletions": 52
    },
    "files": [
      {
        "sha": "b09730ea661169d7bf6ab163a51969ad5d73f953",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41028e7ac72a3541744b99ee7a508ba8879f26eb/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41028e7ac72a3541744b99ee7a508ba8879f26eb/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=41028e7ac72a3541744b99ee7a508ba8879f26eb",
        "patch": "@@ -455,15 +455,15 @@ CService::CService()\n     Init();\n }\n \n-CService::CService(const CNetAddr& cip, unsigned short portIn) : CNetAddr(cip), port(portIn)\n+CService::CService(const CNetAddr& cip, uint16_t portIn) : CNetAddr(cip), port(portIn)\n {\n }\n \n-CService::CService(const struct in_addr& ipv4Addr, unsigned short portIn) : CNetAddr(ipv4Addr), port(portIn)\n+CService::CService(const struct in_addr& ipv4Addr, uint16_t portIn) : CNetAddr(ipv4Addr), port(portIn)\n {\n }\n \n-CService::CService(const struct in6_addr& ipv6Addr, unsigned short portIn) : CNetAddr(ipv6Addr), port(portIn)\n+CService::CService(const struct in6_addr& ipv6Addr, uint16_t portIn) : CNetAddr(ipv6Addr), port(portIn)\n {\n }\n \n@@ -491,7 +491,7 @@ bool CService::SetSockAddr(const struct sockaddr *paddr)\n     }\n }\n \n-unsigned short CService::GetPort() const\n+uint16_t CService::GetPort() const\n {\n     return port;\n }\n@@ -570,7 +570,7 @@ std::string CService::ToString() const\n     return ToStringIPPort();\n }\n \n-void CService::SetPort(unsigned short portIn)\n+void CService::SetPort(uint16_t portIn)\n {\n     port = portIn;\n }"
      },
      {
        "sha": "8ec67e2b5f3746442283a6a51411ec92166a6c15",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41028e7ac72a3541744b99ee7a508ba8879f26eb/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41028e7ac72a3541744b99ee7a508ba8879f26eb/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=41028e7ac72a3541744b99ee7a508ba8879f26eb",
        "patch": "@@ -133,16 +133,16 @@ class CSubNet\n class CService : public CNetAddr\n {\n     protected:\n-        unsigned short port; // host order\n+        uint16_t port; // host order\n \n     public:\n         CService();\n-        CService(const CNetAddr& ip, unsigned short port);\n-        CService(const struct in_addr& ipv4Addr, unsigned short port);\n+        CService(const CNetAddr& ip, uint16_t port);\n+        CService(const struct in_addr& ipv4Addr, uint16_t port);\n         CService(const struct sockaddr_in& addr);\n         void Init();\n-        void SetPort(unsigned short portIn);\n-        unsigned short GetPort() const;\n+        void SetPort(uint16_t portIn);\n+        uint16_t GetPort() const;\n         bool GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const;\n         bool SetSockAddr(const struct sockaddr* paddr);\n         friend bool operator==(const CService& a, const CService& b);\n@@ -153,15 +153,15 @@ class CService : public CNetAddr\n         std::string ToStringPort() const;\n         std::string ToStringIPPort() const;\n \n-        CService(const struct in6_addr& ipv6Addr, unsigned short port);\n+        CService(const struct in6_addr& ipv6Addr, uint16_t port);\n         CService(const struct sockaddr_in6& addr);\n \n         ADD_SERIALIZE_METHODS;\n \n         template <typename Stream, typename Operation>\n         inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n             READWRITE(FLATDATA(ip));\n-            unsigned short portN = htons(port);\n+            uint16_t portN = htons(port);\n             READWRITE(FLATDATA(portN));\n             if (ser_action.ForRead())\n                  port = ntohs(portN);"
      },
      {
        "sha": "16eb22ab8b38d84a975b5d1447c50ea9bf249797",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 34,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41028e7ac72a3541744b99ee7a508ba8879f26eb/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41028e7ac72a3541744b99ee7a508ba8879f26eb/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=41028e7ac72a3541744b99ee7a508ba8879f26eb",
        "patch": "@@ -63,14 +63,14 @@ static CNetAddr ResolveIP(std::string ip)\n     return ResolveIP(ip.c_str());\n }\n \n-static CService ResolveService(const char* ip, int port = 0)\n+static CService ResolveService(const char* ip, uint16_t port = 0)\n {\n     CService serv;\n     BOOST_CHECK_MESSAGE(Lookup(ip, serv, port, false), strprintf(\"failed to resolve: %s:%i\", ip, port));\n     return serv;\n }\n \n-static CService ResolveService(std::string ip, int port = 0)\n+static CService ResolveService(std::string ip, uint16_t port = 0)\n {\n     return ResolveService(ip.c_str(), port);\n }\n@@ -92,22 +92,22 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n     BOOST_CHECK(addr_null.ToString() == \"[::]:0\");\n \n     // Test 2: Does Addrman::Add work as expected.\n-    CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n+    CService addr1 = ResolveService(\"250.1.1.1\", (uint16_t)8333);\n     addrman.Add(CAddress(addr1, NODE_NONE), source);\n     BOOST_CHECK(addrman.size() == 1);\n     CAddrInfo addr_ret1 = addrman.Select();\n     BOOST_CHECK(addr_ret1.ToString() == \"250.1.1.1:8333\");\n \n     // Test 3: Does IP address deduplication work correctly.\n     //  Expected dup IP should not be added.\n-    CService addr1_dup = ResolveService(\"250.1.1.1\", 8333);\n+    CService addr1_dup = ResolveService(\"250.1.1.1\", (uint16_t)8333);\n     addrman.Add(CAddress(addr1_dup, NODE_NONE), source);\n     BOOST_CHECK(addrman.size() == 1);\n \n \n     // Test 5: New table has one addr and we add a diff addr we should\n     //  have two addrs.\n-    CService addr2 = ResolveService(\"250.1.1.2\", 8333);\n+    CService addr2 = ResolveService(\"250.1.1.2\", (uint16_t)8333);\n     addrman.Add(CAddress(addr2, NODE_NONE), source);\n     BOOST_CHECK(addrman.size() == 2);\n \n@@ -130,11 +130,11 @@ BOOST_AUTO_TEST_CASE(addrman_ports)\n     BOOST_CHECK(addrman.size() == 0);\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n-    CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n+    CService addr1 = ResolveService(\"250.1.1.1\", (uint16_t)8333);\n     addrman.Add(CAddress(addr1, NODE_NONE), source);\n     BOOST_CHECK(addrman.size() == 1);\n \n-    CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n+    CService addr1_port = ResolveService(\"250.1.1.1\", (uint16_t)8334);\n     addrman.Add(CAddress(addr1_port, NODE_NONE), source);\n     BOOST_CHECK(addrman.size() == 1);\n     CAddrInfo addr_ret2 = addrman.Select();\n@@ -160,7 +160,7 @@ BOOST_AUTO_TEST_CASE(addrman_select)\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test 9: Select from new with 1 addr in new.\n-    CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n+    CService addr1 = ResolveService(\"250.1.1.1\", (uint16_t)8333);\n     addrman.Add(CAddress(addr1, NODE_NONE), source);\n     BOOST_CHECK(addrman.size() == 1);\n \n@@ -181,24 +181,24 @@ BOOST_AUTO_TEST_CASE(addrman_select)\n \n \n     // Add three addresses to new table.\n-    CService addr2 = ResolveService(\"250.3.1.1\", 8333);\n-    CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n-    CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n+    CService addr2 = ResolveService(\"250.3.1.1\", (uint16_t)8333);\n+    CService addr3 = ResolveService(\"250.3.2.2\", (uint16_t)9999);\n+    CService addr4 = ResolveService(\"250.3.3.3\", (uint16_t)9999);\n \n-    addrman.Add(CAddress(addr2, NODE_NONE), ResolveService(\"250.3.1.1\", 8333));\n-    addrman.Add(CAddress(addr3, NODE_NONE), ResolveService(\"250.3.1.1\", 8333));\n-    addrman.Add(CAddress(addr4, NODE_NONE), ResolveService(\"250.4.1.1\", 8333));\n+    addrman.Add(CAddress(addr2, NODE_NONE), ResolveService(\"250.3.1.1\", (uint16_t)8333));\n+    addrman.Add(CAddress(addr3, NODE_NONE), ResolveService(\"250.3.1.1\", (uint16_t)8333));\n+    addrman.Add(CAddress(addr4, NODE_NONE), ResolveService(\"250.4.1.1\", (uint16_t)8333));\n \n     // Add three addresses to tried table.\n-    CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n-    CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n-    CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n+    CService addr5 = ResolveService(\"250.4.4.4\", (uint16_t)8333);\n+    CService addr6 = ResolveService(\"250.4.5.5\", (uint16_t)7777);\n+    CService addr7 = ResolveService(\"250.4.6.6\", (uint16_t)8333);\n \n-    addrman.Add(CAddress(addr5, NODE_NONE), ResolveService(\"250.3.1.1\", 8333));\n+    addrman.Add(CAddress(addr5, NODE_NONE), ResolveService(\"250.3.1.1\", (uint16_t)8333));\n     addrman.Good(CAddress(addr5, NODE_NONE));\n-    addrman.Add(CAddress(addr6, NODE_NONE), ResolveService(\"250.3.1.1\", 8333));\n+    addrman.Add(CAddress(addr6, NODE_NONE), ResolveService(\"250.3.1.1\", (uint16_t)8333));\n     addrman.Good(CAddress(addr6, NODE_NONE));\n-    addrman.Add(CAddress(addr7, NODE_NONE), ResolveService(\"250.1.1.3\", 8333));\n+    addrman.Add(CAddress(addr7, NODE_NONE), ResolveService(\"250.1.1.3\", (uint16_t)8333));\n     addrman.Good(CAddress(addr7, NODE_NONE));\n \n     // Test 11: 6 addrs + 1 addr from last test = 7.\n@@ -280,9 +280,9 @@ BOOST_AUTO_TEST_CASE(addrman_find)\n \n     BOOST_CHECK(addrman.size() == 0);\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n-    CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", 9999), NODE_NONE);\n-    CAddress addr3 = CAddress(ResolveService(\"251.255.2.1\", 8333), NODE_NONE);\n+    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", (uint16_t)8333), NODE_NONE);\n+    CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", (uint16_t)9999), NODE_NONE);\n+    CAddress addr3 = CAddress(ResolveService(\"251.255.2.1\", (uint16_t)8333), NODE_NONE);\n \n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n     CNetAddr source2 = ResolveIP(\"250.1.2.2\");\n@@ -319,7 +319,7 @@ BOOST_AUTO_TEST_CASE(addrman_create)\n \n     BOOST_CHECK(addrman.size() == 0);\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n+    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", (uint16_t)8333), NODE_NONE);\n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n \n     int nId;\n@@ -342,7 +342,7 @@ BOOST_AUTO_TEST_CASE(addrman_delete)\n \n     BOOST_CHECK(addrman.size() == 0);\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n+    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", (uint16_t)8333), NODE_NONE);\n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n \n     int nId;\n@@ -369,15 +369,15 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     vector<CAddress> vAddr1 = addrman.GetAddr();\n     BOOST_CHECK(vAddr1.size() == 0);\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.250.2.1\", 8333), NODE_NONE);\n+    CAddress addr1 = CAddress(ResolveService(\"250.250.2.1\", (uint16_t)8333), NODE_NONE);\n     addr1.nTime = GetAdjustedTime(); // Set time so isTerrible = false\n-    CAddress addr2 = CAddress(ResolveService(\"250.251.2.2\", 9999), NODE_NONE);\n+    CAddress addr2 = CAddress(ResolveService(\"250.251.2.2\", (uint16_t)9999), NODE_NONE);\n     addr2.nTime = GetAdjustedTime();\n-    CAddress addr3 = CAddress(ResolveService(\"251.252.2.3\", 8333), NODE_NONE);\n+    CAddress addr3 = CAddress(ResolveService(\"251.252.2.3\", (uint16_t)8333), NODE_NONE);\n     addr3.nTime = GetAdjustedTime();\n-    CAddress addr4 = CAddress(ResolveService(\"252.253.3.4\", 8333), NODE_NONE);\n+    CAddress addr4 = CAddress(ResolveService(\"252.253.3.4\", (uint16_t)8333), NODE_NONE);\n     addr4.nTime = GetAdjustedTime();\n-    CAddress addr5 = CAddress(ResolveService(\"252.254.4.5\", 8333), NODE_NONE);\n+    CAddress addr5 = CAddress(ResolveService(\"252.254.4.5\", (uint16_t)8333), NODE_NONE);\n     addr5.nTime = GetAdjustedTime();\n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n     CNetAddr source2 = ResolveIP(\"250.2.3.3\");\n@@ -428,8 +428,8 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n     // Set addrman addr placement to be deterministic.\n     addrman.MakeDeterministic();\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.1.1.1\", 8333), NODE_NONE);\n-    CAddress addr2 = CAddress(ResolveService(\"250.1.1.1\", 9999), NODE_NONE);\n+    CAddress addr1 = CAddress(ResolveService(\"250.1.1.1\", (uint16_t)8333), NODE_NONE);\n+    CAddress addr2 = CAddress(ResolveService(\"250.1.1.1\", (uint16_t)9999), NODE_NONE);\n \n     CNetAddr source1 = ResolveIP(\"250.1.1.1\");\n \n@@ -485,8 +485,8 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     // Set addrman addr placement to be deterministic.\n     addrman.MakeDeterministic();\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n-    CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", 9999), NODE_NONE);\n+    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", (uint16_t)8333), NODE_NONE);\n+    CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", (uint16_t)9999), NODE_NONE);\n \n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n "
      },
      {
        "sha": "20fe8f4032dfe5bc538aeccb38efdd6e68c2b130",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41028e7ac72a3541744b99ee7a508ba8879f26eb/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41028e7ac72a3541744b99ee7a508ba8879f26eb/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=41028e7ac72a3541744b99ee7a508ba8879f26eb",
        "patch": "@@ -53,7 +53,7 @@ class CAddrManCorrupted : public CAddrManSerializationMock\n         s << nUBuckets;\n \n         CService serv;\n-        Lookup(\"252.1.1.1\", serv, 7777, false);\n+        Lookup(\"252.1.1.1\", serv, (uint16_t)7777, false);\n         CAddress addr = CAddress(serv, NODE_NONE);\n         CNetAddr resolved;\n         LookupHost(\"252.2.2.2\", resolved, false);\n@@ -80,13 +80,13 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     addrmanUncorrupted.MakeDeterministic();\n \n     CService addr1, addr2, addr3;\n-    Lookup(\"250.7.1.1\", addr1, 8333, false);\n-    Lookup(\"250.7.2.2\", addr2, 9999, false);\n-    Lookup(\"250.7.3.3\", addr3, 9999, false);\n+    Lookup(\"250.7.1.1\", addr1, (uint16_t)8333, false);\n+    Lookup(\"250.7.2.2\", addr2, (uint16_t)9999, false);\n+    Lookup(\"250.7.3.3\", addr3, (uint16_t)9999, false);\n \n     // Add three addresses to new table.\n     CService source;\n-    Lookup(\"252.5.1.1\", source, 8333, false);\n+    Lookup(\"252.5.1.1\", source, (uint16_t)8333, false);\n     addrmanUncorrupted.Add(CAddress(addr1, NODE_NONE), source);\n     addrmanUncorrupted.Add(CAddress(addr2, NODE_NONE), source);\n     addrmanUncorrupted.Add(CAddress(addr3, NODE_NONE), source);"
      },
      {
        "sha": "83363618dd35c6999f5b1663384aed4daeaf2143",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41028e7ac72a3541744b99ee7a508ba8879f26eb/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41028e7ac72a3541744b99ee7a508ba8879f26eb/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=41028e7ac72a3541744b99ee7a508ba8879f26eb",
        "patch": "@@ -120,7 +120,7 @@ BOOST_AUTO_TEST_CASE(netbase_splithost)\n \n bool static TestParse(string src, string canon)\n {\n-    CService addr(LookupNumeric(src.c_str(), 65535));\n+    CService addr(LookupNumeric(src.c_str(), (uint16_t)65535));\n     return canon == addr.ToString();\n }\n "
      }
    ]
  },
  {
    "sha": "fb8b5488c29213de5acd0c91d9a92892de1ec99b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjhiNTQ4OGMyOTIxM2RlNWFjZDBjOTFkOWE5Mjg5MmRlMWVjOTli",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-08-19T09:17:07Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-08-19T09:17:07Z"
      },
      "message": "Address nits:\n- use int64_t to get result from GetArg\n- use int64_t for IsPortValid()\n- remove manual numbers conversion to uint16_t",
      "tree": {
        "sha": "28e4a88c642e9ae9bdd1183587f5cda1f11b10ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28e4a88c642e9ae9bdd1183587f5cda1f11b10ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb8b5488c29213de5acd0c91d9a92892de1ec99b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb8b5488c29213de5acd0c91d9a92892de1ec99b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb8b5488c29213de5acd0c91d9a92892de1ec99b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb8b5488c29213de5acd0c91d9a92892de1ec99b/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41028e7ac72a3541744b99ee7a508ba8879f26eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41028e7ac72a3541744b99ee7a508ba8879f26eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41028e7ac72a3541744b99ee7a508ba8879f26eb"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 48,
      "deletions": 48
    },
    "files": [
      {
        "sha": "a23624afc315a08975e4990d0d21ce73bc5d11e6",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=fb8b5488c29213de5acd0c91d9a92892de1ec99b",
        "patch": "@@ -149,7 +149,7 @@ UniValue CallRPC(const string& strMethod, const UniValue& params)\n {\n     std::string host = GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT);\n \n-    int portTmp = GetArg(\"-rpcport\", BaseParams().RPCPort());\n+    int64_t portTmp = GetArg(\"-rpcport\", BaseParams().RPCPort());\n     if(portTmp <= 0 || portTmp >= 0x10000)\n         throw runtime_error(strprintf(\"-rpcport %d is incorrect\", portTmp));\n     uint16_t port = (uint16_t)portTmp;"
      },
      {
        "sha": "d96aae0b8f5e8266b22adc010eaf178baf8888f8",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=fb8b5488c29213de5acd0c91d9a92892de1ec99b",
        "patch": "@@ -319,7 +319,7 @@ static bool ThreadHTTP(struct event_base* base, struct evhttp* http)\n static bool HTTPBindAddresses(struct evhttp* http)\n {\n     uint16_t defaultPort = BaseParams().RPCPort();\n-    int rpcPortTmp = GetArg(\"-rpcport\", defaultPort);\n+    int64_t rpcPortTmp = GetArg(\"-rpcport\", defaultPort);\n     uint16_t rpcPort;\n \n     if(IsValidPort(rpcPortTmp)) {"
      },
      {
        "sha": "ce5f4b3a88f429b34a2735ddb3887bc7d566e897",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fb8b5488c29213de5acd0c91d9a92892de1ec99b",
        "patch": "@@ -1148,7 +1148,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     std::string proxyArg = GetArg(\"-proxy\", \"\");\n     SetLimited(NET_TOR);\n     if (proxyArg != \"\" && proxyArg != \"0\") {\n-        CService resolved(LookupNumeric(proxyArg.c_str(), (uint16_t)9050));\n+        CService resolved(LookupNumeric(proxyArg.c_str(), 9050));\n         proxyType addrProxy = proxyType(resolved, proxyRandomize);\n         if (!addrProxy.IsValid())\n             return InitError(strprintf(_(\"Invalid -proxy address: '%s'\"), proxyArg));\n@@ -1168,7 +1168,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         if (onionArg == \"0\") { // Handle -noonion/-onion=0\n             SetLimited(NET_TOR); // set onions as unreachable\n         } else {\n-            CService resolved(LookupNumeric(onionArg.c_str(), (uint16_t)9050));\n+            CService resolved(LookupNumeric(onionArg.c_str(), 9050));\n             proxyType addrOnion = proxyType(resolved, proxyRandomize);\n             if (!addrOnion.IsValid())\n                 return InitError(strprintf(_(\"Invalid -onion address: '%s'\"), onionArg));"
      },
      {
        "sha": "0a8c66327b755b5a384ca83862fb31c5198114c1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fb8b5488c29213de5acd0c91d9a92892de1ec99b",
        "patch": "@@ -122,7 +122,7 @@ void AddOneShot(const std::string& strDest)\n uint16_t GetListenPort()\n {\n     uint16_t defaultPort = Params().GetDefaultPort();\n-    int port = GetArg(\"-port\", defaultPort);\n+    int64_t port = GetArg(\"-port\", defaultPort);\n     if(!IsValidPort(port)) {\n         port = defaultPort;\n         LogPrintf(\"WARNING: -port %d is incorrect, using default %u\\n\", port, defaultPort);\n@@ -2075,7 +2075,7 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (pnodeLocalHost == NULL) {\n         CNetAddr local;\n         LookupHost(\"127.0.0.1\", local, false);\n-        pnodeLocalHost = new CNode(INVALID_SOCKET, CAddress(CService(local, (uint16_t)0), nLocalServices));\n+        pnodeLocalHost = new CNode(INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices));\n     }\n \n     Discover(threadGroup);"
      },
      {
        "sha": "6548c4cfd5d9079485e81ab12efaf3803525fc89",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=fb8b5488c29213de5acd0c91d9a92892de1ec99b",
        "patch": "@@ -63,7 +63,7 @@ std::string GetNetworkName(enum Network net) {\n     }\n }\n \n-bool IsValidPort(int port)\n+bool IsValidPort(int64_t port)\n {\n     return port > 0 && port < 0x10000;\n }"
      },
      {
        "sha": "8648e7470746f3475e5afcbb9483ba61d8f489f1",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=fb8b5488c29213de5acd0c91d9a92892de1ec99b",
        "patch": "@@ -39,7 +39,7 @@ class proxyType\n \n enum Network ParseNetwork(std::string net);\n std::string GetNetworkName(enum Network net);\n-bool IsValidPort(int port);\n+bool IsValidPort(int64_t port);\n bool SplitHostPort(std::string in, uint16_t &portOut, std::string &hostOut);\n bool SetProxy(enum Network net, const proxyType &addrProxy);\n bool GetProxy(enum Network net, proxyType &proxyInfoOut);"
      },
      {
        "sha": "f73bb87064088013bea026311a71c606d8410277",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=fb8b5488c29213de5acd0c91d9a92892de1ec99b",
        "patch": "@@ -327,7 +327,7 @@ QValidator::State ProxyAddressValidator::validate(QString &input, int &pos) cons\n {\n     Q_UNUSED(pos);\n     // Validate the proxy\n-    CService serv(LookupNumeric(input.toStdString().c_str(), (uint16_t)9050));\n+    CService serv(LookupNumeric(input.toStdString().c_str(), 9050));\n     proxyType addrProxy = proxyType(serv, true);\n     if (addrProxy.IsValid())\n         return QValidator::Acceptable;"
      },
      {
        "sha": "64055a8d06c158be2ae4c4aa5f0b3e1bb41e07b5",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=fb8b5488c29213de5acd0c91d9a92892de1ec99b",
        "patch": "@@ -92,22 +92,22 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n     BOOST_CHECK(addr_null.ToString() == \"[::]:0\");\n \n     // Test 2: Does Addrman::Add work as expected.\n-    CService addr1 = ResolveService(\"250.1.1.1\", (uint16_t)8333);\n+    CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n     addrman.Add(CAddress(addr1, NODE_NONE), source);\n     BOOST_CHECK(addrman.size() == 1);\n     CAddrInfo addr_ret1 = addrman.Select();\n     BOOST_CHECK(addr_ret1.ToString() == \"250.1.1.1:8333\");\n \n     // Test 3: Does IP address deduplication work correctly.\n     //  Expected dup IP should not be added.\n-    CService addr1_dup = ResolveService(\"250.1.1.1\", (uint16_t)8333);\n+    CService addr1_dup = ResolveService(\"250.1.1.1\", 8333);\n     addrman.Add(CAddress(addr1_dup, NODE_NONE), source);\n     BOOST_CHECK(addrman.size() == 1);\n \n \n     // Test 5: New table has one addr and we add a diff addr we should\n     //  have two addrs.\n-    CService addr2 = ResolveService(\"250.1.1.2\", (uint16_t)8333);\n+    CService addr2 = ResolveService(\"250.1.1.2\", 8333);\n     addrman.Add(CAddress(addr2, NODE_NONE), source);\n     BOOST_CHECK(addrman.size() == 2);\n \n@@ -130,11 +130,11 @@ BOOST_AUTO_TEST_CASE(addrman_ports)\n     BOOST_CHECK(addrman.size() == 0);\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n-    CService addr1 = ResolveService(\"250.1.1.1\", (uint16_t)8333);\n+    CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n     addrman.Add(CAddress(addr1, NODE_NONE), source);\n     BOOST_CHECK(addrman.size() == 1);\n \n-    CService addr1_port = ResolveService(\"250.1.1.1\", (uint16_t)8334);\n+    CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n     addrman.Add(CAddress(addr1_port, NODE_NONE), source);\n     BOOST_CHECK(addrman.size() == 1);\n     CAddrInfo addr_ret2 = addrman.Select();\n@@ -160,7 +160,7 @@ BOOST_AUTO_TEST_CASE(addrman_select)\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test 9: Select from new with 1 addr in new.\n-    CService addr1 = ResolveService(\"250.1.1.1\", (uint16_t)8333);\n+    CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n     addrman.Add(CAddress(addr1, NODE_NONE), source);\n     BOOST_CHECK(addrman.size() == 1);\n \n@@ -181,24 +181,24 @@ BOOST_AUTO_TEST_CASE(addrman_select)\n \n \n     // Add three addresses to new table.\n-    CService addr2 = ResolveService(\"250.3.1.1\", (uint16_t)8333);\n-    CService addr3 = ResolveService(\"250.3.2.2\", (uint16_t)9999);\n-    CService addr4 = ResolveService(\"250.3.3.3\", (uint16_t)9999);\n+    CService addr2 = ResolveService(\"250.3.1.1\", 8333);\n+    CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n+    CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n \n-    addrman.Add(CAddress(addr2, NODE_NONE), ResolveService(\"250.3.1.1\", (uint16_t)8333));\n-    addrman.Add(CAddress(addr3, NODE_NONE), ResolveService(\"250.3.1.1\", (uint16_t)8333));\n-    addrman.Add(CAddress(addr4, NODE_NONE), ResolveService(\"250.4.1.1\", (uint16_t)8333));\n+    addrman.Add(CAddress(addr2, NODE_NONE), ResolveService(\"250.3.1.1\", 8333));\n+    addrman.Add(CAddress(addr3, NODE_NONE), ResolveService(\"250.3.1.1\", 8333));\n+    addrman.Add(CAddress(addr4, NODE_NONE), ResolveService(\"250.4.1.1\", 8333));\n \n     // Add three addresses to tried table.\n-    CService addr5 = ResolveService(\"250.4.4.4\", (uint16_t)8333);\n-    CService addr6 = ResolveService(\"250.4.5.5\", (uint16_t)7777);\n-    CService addr7 = ResolveService(\"250.4.6.6\", (uint16_t)8333);\n+    CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n+    CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n+    CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n \n-    addrman.Add(CAddress(addr5, NODE_NONE), ResolveService(\"250.3.1.1\", (uint16_t)8333));\n+    addrman.Add(CAddress(addr5, NODE_NONE), ResolveService(\"250.3.1.1\", 8333));\n     addrman.Good(CAddress(addr5, NODE_NONE));\n-    addrman.Add(CAddress(addr6, NODE_NONE), ResolveService(\"250.3.1.1\", (uint16_t)8333));\n+    addrman.Add(CAddress(addr6, NODE_NONE), ResolveService(\"250.3.1.1\", 8333));\n     addrman.Good(CAddress(addr6, NODE_NONE));\n-    addrman.Add(CAddress(addr7, NODE_NONE), ResolveService(\"250.1.1.3\", (uint16_t)8333));\n+    addrman.Add(CAddress(addr7, NODE_NONE), ResolveService(\"250.1.1.3\", 8333));\n     addrman.Good(CAddress(addr7, NODE_NONE));\n \n     // Test 11: 6 addrs + 1 addr from last test = 7.\n@@ -280,9 +280,9 @@ BOOST_AUTO_TEST_CASE(addrman_find)\n \n     BOOST_CHECK(addrman.size() == 0);\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", (uint16_t)8333), NODE_NONE);\n-    CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", (uint16_t)9999), NODE_NONE);\n-    CAddress addr3 = CAddress(ResolveService(\"251.255.2.1\", (uint16_t)8333), NODE_NONE);\n+    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n+    CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", 9999), NODE_NONE);\n+    CAddress addr3 = CAddress(ResolveService(\"251.255.2.1\", 8333), NODE_NONE);\n \n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n     CNetAddr source2 = ResolveIP(\"250.1.2.2\");\n@@ -319,7 +319,7 @@ BOOST_AUTO_TEST_CASE(addrman_create)\n \n     BOOST_CHECK(addrman.size() == 0);\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", (uint16_t)8333), NODE_NONE);\n+    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n \n     int nId;\n@@ -342,7 +342,7 @@ BOOST_AUTO_TEST_CASE(addrman_delete)\n \n     BOOST_CHECK(addrman.size() == 0);\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", (uint16_t)8333), NODE_NONE);\n+    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n \n     int nId;\n@@ -369,15 +369,15 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     vector<CAddress> vAddr1 = addrman.GetAddr();\n     BOOST_CHECK(vAddr1.size() == 0);\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.250.2.1\", (uint16_t)8333), NODE_NONE);\n+    CAddress addr1 = CAddress(ResolveService(\"250.250.2.1\", 8333), NODE_NONE);\n     addr1.nTime = GetAdjustedTime(); // Set time so isTerrible = false\n-    CAddress addr2 = CAddress(ResolveService(\"250.251.2.2\", (uint16_t)9999), NODE_NONE);\n+    CAddress addr2 = CAddress(ResolveService(\"250.251.2.2\", 9999), NODE_NONE);\n     addr2.nTime = GetAdjustedTime();\n-    CAddress addr3 = CAddress(ResolveService(\"251.252.2.3\", (uint16_t)8333), NODE_NONE);\n+    CAddress addr3 = CAddress(ResolveService(\"251.252.2.3\", 8333), NODE_NONE);\n     addr3.nTime = GetAdjustedTime();\n-    CAddress addr4 = CAddress(ResolveService(\"252.253.3.4\", (uint16_t)8333), NODE_NONE);\n+    CAddress addr4 = CAddress(ResolveService(\"252.253.3.4\", 8333), NODE_NONE);\n     addr4.nTime = GetAdjustedTime();\n-    CAddress addr5 = CAddress(ResolveService(\"252.254.4.5\", (uint16_t)8333), NODE_NONE);\n+    CAddress addr5 = CAddress(ResolveService(\"252.254.4.5\", 8333), NODE_NONE);\n     addr5.nTime = GetAdjustedTime();\n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n     CNetAddr source2 = ResolveIP(\"250.2.3.3\");\n@@ -428,8 +428,8 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n     // Set addrman addr placement to be deterministic.\n     addrman.MakeDeterministic();\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.1.1.1\", (uint16_t)8333), NODE_NONE);\n-    CAddress addr2 = CAddress(ResolveService(\"250.1.1.1\", (uint16_t)9999), NODE_NONE);\n+    CAddress addr1 = CAddress(ResolveService(\"250.1.1.1\", 8333), NODE_NONE);\n+    CAddress addr2 = CAddress(ResolveService(\"250.1.1.1\", 9999), NODE_NONE);\n \n     CNetAddr source1 = ResolveIP(\"250.1.1.1\");\n \n@@ -485,8 +485,8 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     // Set addrman addr placement to be deterministic.\n     addrman.MakeDeterministic();\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", (uint16_t)8333), NODE_NONE);\n-    CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", (uint16_t)9999), NODE_NONE);\n+    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n+    CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", 9999), NODE_NONE);\n \n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n "
      },
      {
        "sha": "6511e6ffa24f14e48d45241da057d0c62226024f",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=fb8b5488c29213de5acd0c91d9a92892de1ec99b",
        "patch": "@@ -53,7 +53,7 @@ class CAddrManCorrupted : public CAddrManSerializationMock\n         s << nUBuckets;\n \n         CService serv;\n-        Lookup(\"252.1.1.1\", serv, (uint16_t)7777, false);\n+        Lookup(\"252.1.1.1\", serv, 7777, false);\n         CAddress addr = CAddress(serv, NODE_NONE);\n         CNetAddr resolved;\n         LookupHost(\"252.2.2.2\", resolved, false);\n@@ -80,13 +80,13 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     addrmanUncorrupted.MakeDeterministic();\n \n     CService addr1, addr2, addr3;\n-    Lookup(\"250.7.1.1\", addr1, (uint16_t)8333, false);\n-    Lookup(\"250.7.2.2\", addr2, (uint16_t)9999, false);\n-    Lookup(\"250.7.3.3\", addr3, (uint16_t)9999, false);\n+    Lookup(\"250.7.1.1\", addr1, 8333, false);\n+    Lookup(\"250.7.2.2\", addr2, 9999, false);\n+    Lookup(\"250.7.3.3\", addr3, 9999, false);\n \n     // Add three addresses to new table.\n     CService source;\n-    Lookup(\"252.5.1.1\", source, (uint16_t)8333, false);\n+    Lookup(\"252.5.1.1\", source, 8333, false);\n     addrmanUncorrupted.Add(CAddress(addr1, NODE_NONE), source);\n     addrmanUncorrupted.Add(CAddress(addr2, NODE_NONE), source);\n     addrmanUncorrupted.Add(CAddress(addr3, NODE_NONE), source);"
      },
      {
        "sha": "85a4781840f7c442c233555cdddb1cd46ead827f",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=fb8b5488c29213de5acd0c91d9a92892de1ec99b",
        "patch": "@@ -120,7 +120,7 @@ BOOST_AUTO_TEST_CASE(netbase_splithost)\n \n bool static TestParse(string src, string canon)\n {\n-    CService addr(LookupNumeric(src.c_str(), (uint16_t)65535));\n+    CService addr(LookupNumeric(src.c_str(), 65535));\n     return canon == addr.ToString();\n }\n "
      },
      {
        "sha": "d7d50becdb290202aec7f9771be23ab82fd3ee1f",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8b5488c29213de5acd0c91d9a92892de1ec99b/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=fb8b5488c29213de5acd0c91d9a92892de1ec99b",
        "patch": "@@ -462,7 +462,7 @@ void TorController::auth_cb(TorControlConnection& conn, const TorControlReply& r\n         // Now that we know Tor is running setup the proxy for onion addresses\n         // if -onion isn't set to something else.\n         if (GetArg(\"-onion\", \"\") == \"\") {\n-            CService resolved(LookupNumeric(\"127.0.0.1\", (uint16_t)9050));\n+            CService resolved(LookupNumeric(\"127.0.0.1\", 9050));\n             proxyType addrOnion = proxyType(resolved, true);\n             SetProxy(NET_TOR, addrOnion);\n             SetLimited(NET_TOR, false);"
      }
    ]
  }
]