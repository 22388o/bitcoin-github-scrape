[
  {
    "sha": "7777994846cdb9b9cf69e391a33eeed30393bbcf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Nzc3OTk0ODQ2Y2RiOWI5Y2Y2OWUzOTFhMzNlZWVkMzAzOTNiYmNm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-12-02T17:12:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-01-13T19:31:03Z"
      },
      "message": "[qa] Fix pyton syntax in rpc tests",
      "tree": {
        "sha": "371953417d82780ca58a8cd7c8fe96e4c71fa216",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/371953417d82780ca58a8cd7c8fe96e4c71fa216"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7777994846cdb9b9cf69e391a33eeed30393bbcf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7777994846cdb9b9cf69e391a33eeed30393bbcf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7777994846cdb9b9cf69e391a33eeed30393bbcf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7777994846cdb9b9cf69e391a33eeed30393bbcf/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17ef279304a94ec01a8525189b80c163d931b1cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17ef279304a94ec01a8525189b80c163d931b1cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17ef279304a94ec01a8525189b80c163d931b1cf"
      }
    ],
    "stats": {
      "total": 209,
      "additions": 80,
      "deletions": 129
    },
    "files": [
      {
        "sha": "9b1fdd935083ff2302d7005a90f2345378876b2c",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -10,7 +10,7 @@\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP\n-from binascii import hexlify, unhexlify\n+from binascii import unhexlify\n import cStringIO\n import time\n "
      },
      {
        "sha": "f666a07c9b76905474502ce45cf2608e2f7ded28",
        "filename": "qa/rpc-tests/bip65-cltv.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -9,8 +9,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import os\n-import shutil\n \n class BIP65Test(BitcoinTestFramework):\n \n@@ -46,7 +44,7 @@ def run_test(self):\n         self.nodes[2].generate(1)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 851):\n-            raise AssertionFailure(\"Failed to mine a version=4 blocks\")\n+            raise AssertionError(\"Failed to mine a version=4 blocks\")\n \n         # TODO: check that new CHECKLOCKTIMEVERIFY rules are enforced\n "
      },
      {
        "sha": "9118b8facfd1e61bca1e0fe43c3e63ee8883245b",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -10,7 +10,7 @@\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript\n-from binascii import hexlify, unhexlify\n+from binascii import unhexlify\n import cStringIO\n import time\n "
      },
      {
        "sha": "be9121c456831682ff37d2fd011237088fd1c4ae",
        "filename": "qa/rpc-tests/bipdersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/bipdersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/bipdersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -9,8 +9,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import os\n-import shutil\n \n class BIP66Test(BitcoinTestFramework):\n \n@@ -46,7 +44,7 @@ def run_test(self):\n         self.nodes[2].generate(1)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 851):\n-            raise AssertionFailure(\"Failed to mine a version=3 blocks\")\n+            raise AssertionError(\"Failed to mine a version=3 blocks\")\n \n         # TODO: check that new DERSIG rules are enforced\n "
      },
      {
        "sha": "eccb506e5718e1592ca0e71916a642fb775f5567",
        "filename": "qa/rpc-tests/blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/blockchain.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -7,7 +7,7 @@\n # Test RPC calls related to blockchain state.\n #\n \n-import decimal\n+from decimal import Decimal\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -39,7 +39,7 @@ def run_test(self):\n         node = self.nodes[0]\n         res = node.gettxoutsetinfo()\n \n-        assert_equal(res[u'total_amount'], decimal.Decimal('8725.00000000'))\n+        assert_equal(res[u'total_amount'], Decimal('8725.00000000'))\n         assert_equal(res[u'transactions'], 200)\n         assert_equal(res[u'height'], 200)\n         assert_equal(res[u'txouts'], 200)"
      },
      {
        "sha": "6964348d55a61f85045874f667eff8857dd0c94b",
        "filename": "qa/rpc-tests/disablewallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/disablewallet.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -10,6 +10,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n+\n class DisableWalletTest (BitcoinTestFramework):\n \n     def setup_chain(self):"
      },
      {
        "sha": "20e6ce961954bbd793d4a19dd9b22e191489017a",
        "filename": "qa/rpc-tests/forknotify.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/forknotify.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -9,8 +9,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import os\n-import shutil\n \n class ForkNotifyTest(BitcoinTestFramework):\n "
      },
      {
        "sha": "0287965b97f2958f9a89494f16c4b118e557af24",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 24,
        "deletions": 26,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -5,8 +5,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from pprint import pprint\n-from time import sleep\n \n # Create one-input, one-output, no-fee transaction:\n class RawTransactionsTest(BitcoinTestFramework):\n@@ -53,11 +51,11 @@ def run_test(self):\n         watchonly_amount = 200\n         self.nodes[3].importpubkey(watchonly_pubkey, \"\", True)\n         watchonly_txid = self.nodes[0].sendtoaddress(watchonly_address, watchonly_amount)\n-        self.nodes[0].sendtoaddress(self.nodes[3].getnewaddress(), watchonly_amount / 10);\n+        self.nodes[0].sendtoaddress(self.nodes[3].getnewaddress(), watchonly_amount / 10)\n \n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5);\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0);\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0);\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n \n         self.sync_all()\n         self.nodes[0].generate(1)\n@@ -130,7 +128,7 @@ def run_test(self):\n         for aUtx in listunspent:\n             if aUtx['amount'] == 5.0:\n                 utx = aUtx\n-                break;\n+                break\n \n         assert_equal(utx!=False, True)\n \n@@ -159,7 +157,7 @@ def run_test(self):\n         for aUtx in listunspent:\n             if aUtx['amount'] == 5.0:\n                 utx = aUtx\n-                break;\n+                break\n \n         assert_equal(utx!=False, True)\n \n@@ -189,7 +187,7 @@ def run_test(self):\n         for aUtx in listunspent:\n             if aUtx['amount'] == 1.0:\n                 utx = aUtx\n-                break;\n+                break\n \n         assert_equal(utx!=False, True)\n \n@@ -314,7 +312,7 @@ def run_test(self):\n         except JSONRPCException,e:\n             errorString = e.error['message']\n \n-        assert_equal(\"Insufficient\" in errorString, True);\n+        assert(\"Insufficient\" in errorString)\n \n \n \n@@ -326,11 +324,11 @@ def run_test(self):\n         fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n \n         #create same transaction over sendtoaddress\n-        txId = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1.1);\n+        txId = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1.1)\n         signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n \n         #compare fee\n-        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n+        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n         assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n         ############################################################\n \n@@ -341,11 +339,11 @@ def run_test(self):\n         rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n         #create same transaction over sendtoaddress\n-        txId = self.nodes[0].sendmany(\"\", outputs);\n+        txId = self.nodes[0].sendmany(\"\", outputs)\n         signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n \n         #compare fee\n-        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n+        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n         assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n         ############################################################\n \n@@ -368,11 +366,11 @@ def run_test(self):\n         fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n \n         #create same transaction over sendtoaddress\n-        txId = self.nodes[0].sendtoaddress(mSigObj, 1.1);\n+        txId = self.nodes[0].sendtoaddress(mSigObj, 1.1)\n         signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n \n         #compare fee\n-        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n+        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n         assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n         ############################################################\n \n@@ -401,11 +399,11 @@ def run_test(self):\n         fundedTx = self.nodes[0].fundrawtransaction(rawTx)\n \n         #create same transaction over sendtoaddress\n-        txId = self.nodes[0].sendtoaddress(mSigObj, 1.1);\n+        txId = self.nodes[0].sendtoaddress(mSigObj, 1.1)\n         signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n \n         #compare fee\n-        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n+        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n         assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n         ############################################################\n \n@@ -424,7 +422,7 @@ def run_test(self):\n \n \n         # send 1.2 BTC to msig addr\n-        txId = self.nodes[0].sendtoaddress(mSigObj, 1.2);\n+        txId = self.nodes[0].sendtoaddress(mSigObj, 1.2)\n         self.sync_all()\n         self.nodes[1].generate(1)\n         self.sync_all()\n@@ -466,7 +464,7 @@ def run_test(self):\n \n         error = False\n         try:\n-            self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.2);\n+            self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.2)\n         except:\n             error = True\n         assert(error)\n@@ -496,13 +494,13 @@ def run_test(self):\n         ###############################################\n \n         #empty node1, send some small coins from node0 to node1\n-        self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True);\n+        self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True)\n         self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n         for i in range(0,20):\n-            self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01);\n+            self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01)\n         self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n@@ -514,11 +512,11 @@ def run_test(self):\n         fundedTx = self.nodes[1].fundrawtransaction(rawTx)\n \n         #create same transaction over sendtoaddress\n-        txId = self.nodes[1].sendmany(\"\", outputs);\n+        txId = self.nodes[1].sendmany(\"\", outputs)\n         signedFee = self.nodes[1].getrawmempool(True)[txId]['fee']\n \n         #compare fee\n-        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee);\n+        feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n         assert(feeDelta >= 0 and feeDelta <= feeTolerance*19) #~19 inputs\n \n \n@@ -527,13 +525,13 @@ def run_test(self):\n         #############################################\n \n         #again, empty node1, send some small coins from node0 to node1\n-        self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True);\n+        self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True)\n         self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n         for i in range(0,20):\n-            self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01);\n+            self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.01)\n         self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()"
      },
      {
        "sha": "dd260836bb98a09b4569cad0b2e81487ae42ba24",
        "filename": "qa/rpc-tests/getchaintips.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getchaintips.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -23,8 +23,8 @@ def run_test (self):\n \n         # Split the network and build two chains of different lengths.\n         self.split_network ()\n-        self.nodes[0].generate(10);\n-        self.nodes[2].generate(20);\n+        self.nodes[0].generate(10)\n+        self.nodes[2].generate(20)\n         self.sync_all ()\n \n         tips = self.nodes[1].getchaintips ()"
      },
      {
        "sha": "eb548aee9de32946acf8b7ec3706b79ce4085131",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -36,13 +36,13 @@ def run_test(self):\n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        out1 = conn.getresponse().read();\n+        out1 = conn.getresponse().read()\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n \n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n-        out2 = conn.getresponse().read();\n+        out2 = conn.getresponse().read()\n         assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n         conn.close()\n@@ -53,13 +53,13 @@ def run_test(self):\n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        out1 = conn.getresponse().read();\n+        out1 = conn.getresponse().read()\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n \n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n-        out2 = conn.getresponse().read();\n+        out2 = conn.getresponse().read()\n         assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n         assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n         conn.close()\n@@ -70,7 +70,7 @@ def run_test(self):\n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        out1 = conn.getresponse().read();\n+        out1 = conn.getresponse().read()\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, False) #now the connection must be closed after the response\n \n@@ -82,7 +82,7 @@ def run_test(self):\n         conn = httplib.HTTPConnection(urlNode1.hostname, urlNode1.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        out1 = conn.getresponse().read();\n+        out1 = conn.getresponse().read()\n         assert_equal('\"error\":null' in out1, True)\n \n         #node2 (third node) is running with standard keep-alive parameters which means keep-alive is on\n@@ -93,7 +93,7 @@ def run_test(self):\n         conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        out1 = conn.getresponse().read();\n+        out1 = conn.getresponse().read()\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #connection must be closed because bitcoind should use keep-alive by default\n "
      },
      {
        "sha": "5f6b1abed4971719eecde6dba75f5ce18019ed3c",
        "filename": "qa/rpc-tests/invalidblockrequest.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidblockrequest.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -7,9 +7,7 @@\n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.mininode import *\n from test_framework.blocktools import *\n-import logging\n import copy\n import time\n "
      },
      {
        "sha": "b2c0d145f9f034d6dfc5ee02f403938e771afac2",
        "filename": "qa/rpc-tests/invalidtxrequest.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidtxrequest.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -5,12 +5,8 @@\n #\n \n from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.util import *\n from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.mininode import *\n from test_framework.blocktools import *\n-import logging\n-import copy\n import time\n \n "
      },
      {
        "sha": "7914ceea22bc46906ae1c09253951e1bc4f91532",
        "filename": "qa/rpc-tests/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_limit.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -48,7 +48,7 @@ def run_test(self):\n \n         # by now, the tx should be evicted, check confirmation state\n         assert(txid not in self.nodes[0].getrawmempool())\n-        txdata = self.nodes[0].gettransaction(txid);\n+        txdata = self.nodes[0].gettransaction(txid)\n         assert(txdata['confirmations'] ==  0) #confirmation should still be 0\n \n if __name__ == '__main__':"
      },
      {
        "sha": "ea48e38451d933a51f8c1dab60ce00c0846b41b5",
        "filename": "qa/rpc-tests/mempool_reorg.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_reorg.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -10,8 +10,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import os\n-import shutil\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolCoinbaseTest(BitcoinTestFramework):\n@@ -25,7 +23,7 @@ def setup_network(self):\n         self.nodes.append(start_node(1, self.options.tmpdir, args))\n         connect_nodes(self.nodes[1], 0)\n         self.is_network_split = False\n-        self.sync_all\n+        self.sync_all()\n \n     def create_tx(self, from_txid, to_address, amount):\n         inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n@@ -87,11 +85,11 @@ def run_test(self):\n \n         self.sync_all()\n \n-        assert_equal(set(self.nodes[0].getrawmempool()), set([ spend_101_id, spend_102_1_id, timelock_tx_id ]))\n+        assert_equal(set(self.nodes[0].getrawmempool()), {spend_101_id, spend_102_1_id, timelock_tx_id})\n \n         for node in self.nodes:\n             node.invalidateblock(last_block[0])\n-        assert_equal(set(self.nodes[0].getrawmempool()), set([ spend_101_id, spend_102_1_id, spend_103_1_id ]))\n+        assert_equal(set(self.nodes[0].getrawmempool()), {spend_101_id, spend_102_1_id, spend_103_1_id})\n \n         # Use invalidateblock to re-org back and make all those coinbase spends\n         # immature/invalid:"
      },
      {
        "sha": "14ca44310f42ed1ae92fd9debef296096c12b021",
        "filename": "qa/rpc-tests/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_resurrect_test.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -10,8 +10,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import os\n-import shutil\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolCoinbaseTest(BitcoinTestFramework):"
      },
      {
        "sha": "4a6e43609799e5b29f0c52deada94782d7140007",
        "filename": "qa/rpc-tests/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_spendcoinbase.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -15,8 +15,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import os\n-import shutil\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolSpendCoinbaseTest(BitcoinTestFramework):"
      },
      {
        "sha": "cce8d8bbfb04681b2d04cbc1da47ac1bba33fca5",
        "filename": "qa/rpc-tests/merkle_blocks.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/merkle_blocks.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -9,8 +9,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import os\n-import shutil\n \n class MerkleBlockTest(BitcoinTestFramework):\n "
      },
      {
        "sha": "c6c8c436e9701f0c80e8e39633dd1221cc34322b",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -9,7 +9,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import base64\n \n try:\n     import http.client as httplib\n@@ -54,15 +53,15 @@ def run_test(self):\n         self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n         self.nodes[2].setban(\"192.168.0.1\", \"add\", 1) #ban for 1 seconds\n         self.nodes[2].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000) #ban for 1000 seconds\n-        listBeforeShutdown = self.nodes[2].listbanned();\n+        listBeforeShutdown = self.nodes[2].listbanned()\n         assert_equal(\"192.168.0.1/32\", listBeforeShutdown[2]['address']) #must be here\n         time.sleep(2) #make 100% sure we expired 192.168.0.1 node time\n \n         #stop node\n         stop_node(self.nodes[2], 2)\n \n         self.nodes[2] = start_node(2, self.options.tmpdir)\n-        listAfterShutdown = self.nodes[2].listbanned();\n+        listAfterShutdown = self.nodes[2].listbanned()\n         assert_equal(\"127.0.0.0/24\", listAfterShutdown[0]['address'])\n         assert_equal(\"127.0.0.0/32\", listAfterShutdown[1]['address'])\n         assert_equal(\"/19\" in listAfterShutdown[2]['address'], True)"
      },
      {
        "sha": "28cc2474f13f1a29f4cca74a7134ab0a1b758b7a",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -8,14 +8,10 @@\n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.mininode import *\n from test_framework.blocktools import *\n-import logging\n-import copy\n import time\n-import numbers\n from test_framework.key import CECKey\n-from test_framework.script import CScript, CScriptOp, SignatureHash, SIGHASH_ALL, OP_TRUE, OP_FALSE\n+from test_framework.script import CScript, SignatureHash, SIGHASH_ALL, OP_TRUE, OP_FALSE\n \n class PreviousSpendableOutput(object):\n     def __init__(self, tx = CTransaction(), n = -1):"
      },
      {
        "sha": "7f77e664d266c7aceb7ee2d63a25c541d5b81933",
        "filename": "qa/rpc-tests/proxy_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/proxy_test.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -3,9 +3,6 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n import socket\n-import traceback, sys\n-from binascii import hexlify\n-import time, os\n \n from test_framework.socks5 import Socks5Configuration, Socks5Command, Socks5Server, AddressType\n from test_framework.test_framework import BitcoinTestFramework\n@@ -34,7 +31,8 @@\n addnode connect to generic DNS name\n '''\n \n-class ProxyTest(BitcoinTestFramework):        \n+\n+class ProxyTest(BitcoinTestFramework):\n     def __init__(self):\n         # Create two proxies on different ports\n         # ... one unauthenticated"
      },
      {
        "sha": "b0f4b88aee551c4e99b4613438c4733936e07b41",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -13,7 +13,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import os.path\n \n def calc_usage(blockdir):\n     return sum(os.path.getsize(blockdir+f) for f in os.listdir(blockdir) if os.path.isfile(blockdir+f))/(1024*1024)"
      },
      {
        "sha": "dd9e5e28a526f706a62d703740a232151a7fad35",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -10,8 +10,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from pprint import pprint\n-from time import sleep\n \n # Create one-input, one-output, no-fee transaction:\n class RawTransactionsTest(BitcoinTestFramework):\n@@ -43,9 +41,9 @@ def run_test(self):\n         self.sync_all()\n         self.nodes[0].generate(101)\n         self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5);\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0);\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0);\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n         self.sync_all()\n         self.nodes[0].generate(5)\n         self.sync_all()\n@@ -64,7 +62,7 @@ def run_test(self):\n         except JSONRPCException,e:\n             errorString = e.error['message']\n \n-        assert_equal(\"Missing inputs\" in errorString, True);\n+        assert(\"Missing inputs\" in errorString)\n \n         #########################\n         # RAW TX MULTISIG TESTS #\n@@ -83,7 +81,7 @@ def run_test(self):\n         bal = self.nodes[2].getbalance()\n \n         # send 1.2 BTC to msig adr\n-        txId       = self.nodes[0].sendtoaddress(mSigObj, 1.2);\n+        txId = self.nodes[0].sendtoaddress(mSigObj, 1.2)\n         self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n@@ -105,7 +103,7 @@ def run_test(self):\n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey']])\n         mSigObjValid = self.nodes[2].validateaddress(mSigObj)\n \n-        txId       = self.nodes[0].sendtoaddress(mSigObj, 2.2);\n+        txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n         decTx = self.nodes[0].gettransaction(txId)\n         rawTx = self.nodes[0].decoderawtransaction(decTx['hex'])\n         sPK = rawTx['vout'][0]['scriptPubKey']['hex']\n@@ -123,7 +121,7 @@ def run_test(self):\n         for outpoint in rawTx['vout']:\n             if outpoint['value'] == Decimal('2.20000000'):\n                 vout = outpoint\n-                break;\n+                break\n \n         bal = self.nodes[0].getbalance()\n         inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex']}]"
      },
      {
        "sha": "321c2fe422a5f73cd993a72012204ca5c627b6db",
        "filename": "qa/rpc-tests/reindex.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/reindex.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -8,7 +8,6 @@\n #\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import os.path\n \n class ReindexTest(BitcoinTestFramework):\n "
      },
      {
        "sha": "ba1956853aa354377d1015a29f72dce7a72e19bc",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -54,8 +54,7 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n     tx2.vout = [CTxOut(amount, scriptPubKey)]\n     tx2.rehash()\n \n-    tx2_hex = binascii.hexlify(tx2.serialize()).decode('utf-8')\n-    #print tx2_hex\n+    binascii.hexlify(tx2.serialize()).decode('utf-8')\n \n     signed_tx = node.signrawtransaction(binascii.hexlify(tx2.serialize()).decode('utf-8'))\n "
      },
      {
        "sha": "8c835365010e899dc8c6c0fd2bc12fa1058a9938",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -12,9 +12,7 @@\n from test_framework.util import *\n from struct import *\n import binascii\n-import json\n import StringIO\n-import decimal\n \n try:\n     import http.client as httplib\n@@ -143,9 +141,9 @@ def run_test(self):\n \n         binaryRequest = b'\\x01\\x02'\n         binaryRequest += binascii.unhexlify(txid)\n-        binaryRequest += pack(\"i\", n);\n-        binaryRequest += binascii.unhexlify(vintx);\n-        binaryRequest += pack(\"i\", 0);\n+        binaryRequest += pack(\"i\", n)\n+        binaryRequest += binascii.unhexlify(vintx)\n+        binaryRequest += pack(\"i\", 0)\n \n         bin_response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', binaryRequest)\n         output = StringIO.StringIO()\n@@ -206,7 +204,7 @@ def run_test(self):\n         json_request = '/checkmempool/'\n         for x in range(0, 15):\n             json_request += txid+'-'+str(n)+'/'\n-        json_request = json_request.rstrip(\"/\");\n+        json_request = json_request.rstrip(\"/\")\n         response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n         assert_equal(response.status, 200) #must be a 500 because we exceeding the limits\n \n@@ -254,7 +252,7 @@ def run_test(self):\n         response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n         assert_equal(response_header_json.status, 200)\n         response_header_json_str = response_header_json.read()\n-        json_obj = json.loads(response_header_json_str, parse_float=decimal.Decimal)\n+        json_obj = json.loads(response_header_json_str, parse_float=Decimal)\n         assert_equal(len(json_obj), 1) #ensure that there is one header in the json response\n         assert_equal(json_obj[0]['hash'], bb_hash) #request/response hash should be the same\n \n@@ -282,7 +280,7 @@ def run_test(self):\n         assert_equal(len(json_obj), 5) #now we should have 5 header objects\n \n         # do tx test\n-        tx_hash = block_json_obj['tx'][0]['txid'];\n+        tx_hash = block_json_obj['tx'][0]['txid']\n         json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"json\")\n         json_obj = json.loads(json_string)\n         assert_equal(json_obj['txid'], tx_hash)"
      },
      {
        "sha": "10a48b5556e4068950d788c27f8a6133c7b21cb1",
        "filename": "qa/rpc-tests/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcbind_test.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -5,13 +5,8 @@\n \n # Test for -rpcbind, as well as -rpcallowip and -rpcconnect\n \n-# Add python-bitcoinrpc to module search path:\n-import os\n-import sys\n+# TODO extend this test from the test framework (like all other tests)\n \n-import json\n-import shutil\n-import subprocess\n import tempfile\n import traceback\n "
      },
      {
        "sha": "172506715ace02830cb9beb1edb56bb5d29fe12f",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -7,7 +7,6 @@\n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import time\n from test_framework.blocktools import create_block, create_coinbase\n \n '''\n@@ -445,7 +444,7 @@ def run_test(self):\n \n         inv_node.sync_with_ping() # Make sure blocks are processed\n         test_node.last_getdata = None\n-        test_node.send_header_for_blocks(blocks);\n+        test_node.send_header_for_blocks(blocks)\n         test_node.sync_with_ping()\n         # should not have received any getdata messages\n         with mininode_lock:"
      },
      {
        "sha": "88f553a7f6c9a9a02137c285b1acf25292ce9fbf",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -5,7 +5,7 @@\n #\n \n from mininode import *\n-from script import CScript, CScriptOp, OP_TRUE, OP_CHECKSIG\n+from script import CScript, OP_TRUE, OP_CHECKSIG\n \n # Create a block (with regtest difficulty)\n def create_block(hashprev, coinbase, nTime=None):"
      },
      {
        "sha": "bf5e25fb27653c565e234760d89458e584645f81",
        "filename": "qa/rpc-tests/test_framework/script.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/script.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -14,7 +14,8 @@\n \n from __future__ import absolute_import, division, print_function, unicode_literals\n \n-from test_framework.mininode import CTransaction, CTxOut, hash256\n+from .mininode import CTransaction, CTxOut, hash256\n+from binascii import hexlify\n \n import sys\n bchr = chr\n@@ -24,10 +25,9 @@\n     bchr = lambda x: bytes([x])\n     bord = lambda x: x\n \n-import copy\n import struct\n \n-from test_framework.bignum import bn2vch\n+from .bignum import bn2vch\n \n MAX_SCRIPT_SIZE = 10000\n MAX_SCRIPT_ELEMENT_SIZE = 520\n@@ -777,7 +777,7 @@ def __repr__(self):\n         # need to change\n         def _repr(o):\n             if isinstance(o, bytes):\n-                return \"x('%s')\" % binascii.hexlify(o).decode('utf8')\n+                return \"x('%s')\" % hexlify(o).decode('utf8')\n             else:\n                 return repr(o)\n "
      },
      {
        "sha": "15fd50363e2da5385924319d29ea28f87f6e2553",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -102,12 +102,12 @@ def initialize_datadir(dirname, n):\n     if not os.path.isdir(datadir):\n         os.makedirs(datadir)\n     with open(os.path.join(datadir, \"bitcoin.conf\"), 'w') as f:\n-        f.write(\"regtest=1\\n\");\n-        f.write(\"rpcuser=rt\\n\");\n-        f.write(\"rpcpassword=rt\\n\");\n-        f.write(\"port=\"+str(p2p_port(n))+\"\\n\");\n-        f.write(\"rpcport=\"+str(rpc_port(n))+\"\\n\");\n-        f.write(\"listenonion=0\\n\");\n+        f.write(\"regtest=1\\n\")\n+        f.write(\"rpcuser=rt\\n\")\n+        f.write(\"rpcpassword=rt\\n\")\n+        f.write(\"port=\"+str(p2p_port(n))+\"\\n\")\n+        f.write(\"rpcport=\"+str(rpc_port(n))+\"\\n\")\n+        f.write(\"listenonion=0\\n\")\n     return datadir\n \n def initialize_chain(test_dir):"
      },
      {
        "sha": "3092f09ecba6914140f8d66738f36e3f048b690d",
        "filename": "qa/rpc-tests/txn_clone.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_clone.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -8,11 +8,7 @@\n #\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.authproxy import AuthServiceProxy, JSONRPCException\n-from decimal import Decimal\n from test_framework.util import *\n-import os\n-import shutil\n \n class TxnMallTest(BitcoinTestFramework):\n "
      },
      {
        "sha": "8d7f6e505d15b183183ac51165500e4c93b3fcbe",
        "filename": "qa/rpc-tests/txn_doublespend.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_doublespend.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -9,9 +9,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from decimal import Decimal\n-import os\n-import shutil\n \n class TxnMallTest(BitcoinTestFramework):\n "
      },
      {
        "sha": "2c0a009caeaf0dad4220bedb46feb1f071842f32",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -145,7 +145,7 @@ def run_test (self):\n         sync_blocks(self.nodes)\n \n         relayed = self.nodes[0].resendwallettransactions()\n-        assert_equal(set(relayed), set([txid1, txid2]))\n+        assert_equal(set(relayed), {txid1, txid2})\n         sync_mempools(self.nodes)\n \n         assert(txid1 in self.nodes[3].getrawmempool())"
      },
      {
        "sha": "88532541ab6a5379f08aa9d51d3e492d2e5ab460",
        "filename": "qa/rpc-tests/zmq_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777994846cdb9b9cf69e391a33eeed30393bbcf/qa/rpc-tests/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zmq_test.py?ref=7777994846cdb9b9cf69e391a33eeed30393bbcf",
        "patch": "@@ -11,7 +11,6 @@\n from test_framework.util import *\n import zmq\n import binascii\n-from test_framework.mininode import hash256\n \n try:\n     import http.client as httplib\n@@ -42,7 +41,7 @@ def setup_nodes(self):\n     def run_test(self):\n         self.sync_all()\n \n-        genhashes = self.nodes[0].generate(1);\n+        genhashes = self.nodes[0].generate(1)\n         self.sync_all()\n \n         print \"listen...\"\n@@ -58,7 +57,7 @@ def run_test(self):\n         assert_equal(genhashes[0], blkhash) #blockhash from generate must be equal to the hash received over zmq\n \n         n = 10\n-        genhashes = self.nodes[1].generate(n);\n+        genhashes = self.nodes[1].generate(n)\n         self.sync_all()\n \n         zmqHashes = []\n@@ -76,7 +75,7 @@ def run_test(self):\n         hashRPC = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.0)\n         self.sync_all()\n \n-        #now we should receive a zmq msg because the tx was broadcastet\n+        # now we should receive a zmq msg because the tx was broadcast\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = str(msg[0])\n         body = msg[1]"
      }
    ]
  }
]