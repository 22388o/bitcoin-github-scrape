sipa,2017-06-27T23:22:17Z,"Thanks for upstreaming this!\n\nutACK d6c7ab9d27a56f08d4072a352640d55d5e46f484",https://github.com/bitcoin/bitcoin/pull/10657#issuecomment-311513089,311513089,
sipa,2017-07-16T20:59:56Z,Needs rebase.,https://github.com/bitcoin/bitcoin/pull/10657#issuecomment-315636833,315636833,
str4d,2017-07-17T16:58:34Z,Rebased on master to fix conflict (an adjacent line being changed).,https://github.com/bitcoin/bitcoin/pull/10657#issuecomment-315814635,315814635,
jnewbery,2017-07-18T17:17:23Z,Looks like a spurious unrelated Travis failure.,https://github.com/bitcoin/bitcoin/pull/10657#issuecomment-316133814,316133814,
laanwj,2017-10-02T13:29:17Z,"Needs comments by @cfields addressed, I agree putting constants such as PUBLIC_KEY_SIZE in the global namespace seems a bad idea, they should be scoped to some class.",https://github.com/bitcoin/bitcoin/pull/10657#issuecomment-333534299,333534299,
str4d,2017-10-04T13:44:45Z,@laanwj addressed comments by @theuni.,https://github.com/bitcoin/bitcoin/pull/10657#issuecomment-334159709,334159709,
laanwj,2017-12-20T16:18:32Z,"Thanks!\nutACK 63179d0",https://github.com/bitcoin/bitcoin/pull/10657#issuecomment-353108663,353108663,
jonasschnelli,2017-06-23T06:44:59Z,I guess that's not possible... ,https://github.com/bitcoin/bitcoin/pull/10657#discussion_r123681836,123681836,src/key.cpp
gmaxwell,2017-06-23T07:05:08Z,"This change breaks the intentional compatibility with OpenSSL behavior; it also makes the commit message inaccurately described.\n\nIt doesn't matter for the Bitcoin system anymore because only strict DER matters there now, but this is otherwise an undisclosed consensus change (admittedly where OpenSSL creates inconsistency to begin with).",https://github.com/bitcoin/bitcoin/pull/10657#discussion_r123684252,123684252,src/pubkey.cpp
gmaxwell,2017-06-23T07:05:34Z,same here.,https://github.com/bitcoin/bitcoin/pull/10657#discussion_r123684301,123684301,src/pubkey.cpp
gmaxwell,2017-06-23T07:15:45Z,"Help me understand how you believe there is a potential overflow here.\n\nMy meat based range analysis states:   Pos always has value 2 here.  Size_t lenbyte is 0-127 inclusive (after the subtraction takes it from a range of 128-255 inclusive).  This means that the left side (which is all  size_t) has a range of 2-129.\n\nWhat am I missing?    (As an aside, zcash really screwed up if there is ",https://github.com/bitcoin/bitcoin/pull/10657#discussion_r123685606,123685606,src/pubkey.cpp
gmaxwell,2017-06-23T07:17:08Z,And likewise for the below.,https://github.com/bitcoin/bitcoin/pull/10657#discussion_r123685772,123685772,src/pubkey.cpp
str4d,2017-06-23T07:44:59Z,"See https://github.com/zcash/zcash/pull/2335#discussion_r114272216:\n\n> This is a different style to before but it's still overflow-prone (for integer overflows this time).\n\nSo this change was included for consistency with the other changes, not necessarily because this specific instance suffers from overflow, but because that style of pointer comparison can be vulnerable, and it is better ",https://github.com/bitcoin/bitcoin/pull/10657#discussion_r123689750,123689750,src/pubkey.cpp
str4d,2017-06-23T07:58:38Z,"We made this change because the previous check was platform-dependent and therefore difficult to review for determinism (and also we don't use the lax code at all, and have removed it). As far as being an undisclosed consensus change, it's obviously not one that would end up affecting running consensus (because compilation would fail on the target machines this affects), but ACK that it would have",https://github.com/bitcoin/bitcoin/pull/10657#discussion_r123691904,123691904,src/pubkey.cpp
daira,2017-06-23T13:02:49Z,"If ``lenbyte >= 4`` here, then ``rlen`` calculated in the ``while`` loop just below will be >= 2<sup>24</sup> (because ``lenbyte`` at this point is the length of the representation of ``rlen`` after stripping leading zeros). So this function would in any case return 0 at line 90 if it does not return 0 here: the condition ``rlen > inputlen - pos`` would be true at line 90 since ``inputlen`` is at ",https://github.com/bitcoin/bitcoin/pull/10657#discussion_r123742173,123742173,src/pubkey.cpp
daira,2017-06-23T13:11:52Z,"Same argument as above with ``rlen`` replaced by ``slen``, and line 90 replaced by line 129.",https://github.com/bitcoin/bitcoin/pull/10657#discussion_r123743909,123743909,src/pubkey.cpp
gmaxwell,2017-06-23T21:23:27Z,"> If this had actually made a difference, then there would have been a consensus incompatibility between 32-bit and 64-bit platforms, which would surely have been unintended. \n\nIt was intended to preserve exact compatibility with OpenSSL which has the same behavior. (particularly during a time when this behavior was embargoed both for us and OpenSSL)\n\nAnd it very much made a different prio",https://github.com/bitcoin/bitcoin/pull/10657#discussion_r123847325,123847325,src/pubkey.cpp
daira,2017-06-27T21:04:31Z,"It didn't make any difference prior to BIP66, by the argument I gave above -- fortunately, because it would have been possible to fork 32-bit nodes from 64-bit nodes otherwise.\n\nIt is basically never correct to have a platform-dependent consensus check. In this case, platform-dependent consensus code happened not to result in a difference in behaviour, essentially by luck. IMHO it's a good ide",https://github.com/bitcoin/bitcoin/pull/10657#discussion_r124395358,124395358,src/pubkey.cpp
sipa,2017-06-27T23:10:12Z,"@daira It is absolutely never correct to have platform-dependent consensus checks. However, Bitcoin used to indirectly have such a check through OpenSSL (fixed in CVE-2014-8275, see https://www.openssl.org/news/secadv/20150108.txt), and it was in fact possible to fork 32-bit nodes from 64-bit nodes. BIP66 was exactly intended to fix that problem (see https://lists.linuxfoundation.org/pipermail/bit",https://github.com/bitcoin/bitcoin/pull/10657#discussion_r124418939,124418939,src/pubkey.cpp
TheBlueMatt,2017-07-18T15:37:47Z,These seem like rather unrelated changes? Can they go in a separate PR?,https://github.com/bitcoin/bitcoin/pull/10657#discussion_r128013047,128013047,contrib/debian/copyright
str4d,2017-07-18T16:21:23Z,"They were related inasmuch as I was pulling in a collection of libsecp256k1 PRs from upstream, and this was a necessary libsecp256k1-related addition. From a Bitcoin PR perspective, I can split this out into a separate PR if desired.",https://github.com/bitcoin/bitcoin/pull/10657#discussion_r128025032,128025032,contrib/debian/copyright
theuni,2017-07-18T17:15:34Z,"yikes, please don't put these in the global namespace in a very public header file.",https://github.com/bitcoin/bitcoin/pull/10657#discussion_r128038276,128038276,src/pubkey.h
theuni,2017-07-18T17:17:04Z,Same namespace issue here.,https://github.com/bitcoin/bitcoin/pull/10657#discussion_r128038634,128038634,src/key.h
