[
  {
    "sha": "a3603ac6f07966036e56554cd754a57791a3491a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzYwM2FjNmYwNzk2NjAzNmU1NjU1NGNkNzU0YTU3NzkxYTM0OTFh",
    "commit": {
      "author": {
        "name": "Jack Grigg",
        "email": "jack@z.cash",
        "date": "2017-05-02T12:14:55Z"
      },
      "committer": {
        "name": "Jack Grigg",
        "email": "jack@z.cash",
        "date": "2017-07-17T16:55:05Z"
      },
      "message": "Fix potential overflows in ECDSA DER parsers",
      "tree": {
        "sha": "17b9faaf7c77cf4edbf9cb1907aaf12b89779ebb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17b9faaf7c77cf4edbf9cb1907aaf12b89779ebb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3603ac6f07966036e56554cd754a57791a3491a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZbOvpAAoJEGZdvNKE99r/gi8QALXAvfvn9dwz2+P+M22hG7gZ\nxGBBdP0U6FrMts/THFla4PIc6051z51B2VOrFRqUKXCyiiOtJAZmV0INF9hHOPfR\n+dB0+M/vF3RSnP62+won8W9me0JuU7TSozug2vdyCUs5hvmxStvLBALfzZINvP8A\nNCnfAXFxRYsl5o+VeLlM7mQJqhkiTVeOJR3v3/FUACkbdGjL8DuIIXwqmFWdGIsg\ndob9ujMJBeEG9PIMxKT/aVL1CmLBosJoJJoRgtG56WxKWWx7gU+dFT/hpYeNY7yK\n5vSpX9mfBz5sXG7hKUOdU54auspqZemfojaT3UNyI3EnCWiTUpk2P9MQwLP5h/Gy\nM0XeTgaSrX+gsxy13CenMO6x5x1pfi1UQwqV8EkJNvXCFdy35pIENgwpEzwinMz5\nFc4o++bT6Rsa59AtfKYRtqKeNpFwjLtJD1+W5yN509xvjrv6OIE3Ls8gFxPSUB8h\nFVijyNZ6Hf3BGdpEAwV7S88LHdRCbtWUv3zPZK1IlG64lQ9wSC3tUdFc0bPbYP0W\necdcZgGX5xq5s830KikmL8HX2nueN6SA2Kq0YBYYvOnkvvG23yxdhJiF+p9g5oLH\nANxo6qNGLOPF56SEZzck2kjgQXv50UgSwI/an1/3jTdL6QWa6uxsA9IJcXlbzVwW\nQ/LDN9VL6dGZi6TCU7Nw\n=ILmx\n-----END PGP SIGNATURE-----",
        "payload": "tree 17b9faaf7c77cf4edbf9cb1907aaf12b89779ebb\nparent 0b019357ff09e7a522307fc271d6b60562a7b890\nauthor Jack Grigg <jack@z.cash> 1493727295 +1200\ncommitter Jack Grigg <jack@z.cash> 1500310505 -0500\n\nFix potential overflows in ECDSA DER parsers\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3603ac6f07966036e56554cd754a57791a3491a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3603ac6f07966036e56554cd754a57791a3491a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3603ac6f07966036e56554cd754a57791a3491a/comments",
    "author": {
      "login": "str4d",
      "id": 4993799,
      "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/str4d",
      "html_url": "https://github.com/str4d",
      "followers_url": "https://api.github.com/users/str4d/followers",
      "following_url": "https://api.github.com/users/str4d/following{/other_user}",
      "gists_url": "https://api.github.com/users/str4d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/str4d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
      "organizations_url": "https://api.github.com/users/str4d/orgs",
      "repos_url": "https://api.github.com/users/str4d/repos",
      "events_url": "https://api.github.com/users/str4d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/str4d/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "str4d",
      "id": 4993799,
      "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/str4d",
      "html_url": "https://github.com/str4d",
      "followers_url": "https://api.github.com/users/str4d/followers",
      "following_url": "https://api.github.com/users/str4d/following{/other_user}",
      "gists_url": "https://api.github.com/users/str4d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/str4d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
      "organizations_url": "https://api.github.com/users/str4d/orgs",
      "repos_url": "https://api.github.com/users/str4d/repos",
      "events_url": "https://api.github.com/users/str4d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/str4d/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b019357ff09e7a522307fc271d6b60562a7b890",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b019357ff09e7a522307fc271d6b60562a7b890",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b019357ff09e7a522307fc271d6b60562a7b890"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 28,
      "deletions": 19
    },
    "files": [
      {
        "sha": "f581bcb0c880270e36aac84d2e87e072ab0cac36",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 13,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3603ac6f07966036e56554cd754a57791a3491a/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3603ac6f07966036e56554cd754a57791a3491a/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=a3603ac6f07966036e56554cd754a57791a3491a",
        "patch": "@@ -1,4 +1,5 @@\n // Copyright (c) 2009-2016 The Bitcoin Core developers\n+// Copyright (c) 2017 The Zcash developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -18,41 +19,46 @@ static secp256k1_context* secp256k1_context_sign = NULL;\n /** These functions are taken from the libsecp256k1 distribution and are very ugly. */\n static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *out32, const unsigned char *privkey, size_t privkeylen) {\n     const unsigned char *end = privkey + privkeylen;\n-    int lenb = 0;\n-    int len = 0;\n+    size_t lenb = 0;\n+    size_t len = 0;\n     memset(out32, 0, 32);\n     /* sequence header */\n-    if (end < privkey+1 || *privkey != 0x30) {\n+    if (end - privkey < 1 || *privkey != 0x30u) {\n         return 0;\n     }\n     privkey++;\n     /* sequence length constructor */\n-    if (end < privkey+1 || !(*privkey & 0x80)) {\n+    if (end - privkey < 1 || !(*privkey & 0x80u)) {\n         return 0;\n     }\n-    lenb = *privkey & ~0x80; privkey++;\n+    lenb = *privkey & ~0x80u; privkey++;\n     if (lenb < 1 || lenb > 2) {\n         return 0;\n     }\n-    if (end < privkey+lenb) {\n+    if (end - privkey < lenb) {\n         return 0;\n     }\n     /* sequence length */\n-    len = privkey[lenb-1] | (lenb > 1 ? privkey[lenb-2] << 8 : 0);\n+    len = privkey[lenb-1] | (lenb > 1 ? privkey[lenb-2] << 8 : 0u);\n     privkey += lenb;\n-    if (end < privkey+len) {\n+    if (end - privkey < len) {\n         return 0;\n     }\n     /* sequence element 0: version number (=1) */\n-    if (end < privkey+3 || privkey[0] != 0x02 || privkey[1] != 0x01 || privkey[2] != 0x01) {\n+    if (end - privkey < 3 || privkey[0] != 0x02u || privkey[1] != 0x01u || privkey[2] != 0x01u) {\n         return 0;\n     }\n     privkey += 3;\n     /* sequence element 1: octet string, up to 32 bytes */\n-    if (end < privkey+2 || privkey[0] != 0x04 || privkey[1] > 0x20 || end < privkey+2+privkey[1]) {\n+    if (end - privkey < 2 || privkey[0] != 0x04u) {\n         return 0;\n     }\n-    memcpy(out32 + 32 - privkey[1], privkey + 2, privkey[1]);\n+    size_t oslen = privkey[1];\n+    privkey += 2;\n+    if (oslen > 32 || end - privkey < oslen) {\n+        return 0;\n+    }\n+    memcpy(out32 + (32 - oslen), privkey, oslen);\n     if (!secp256k1_ec_seckey_verify(ctx, out32)) {\n         memset(out32, 0, 32);\n         return 0;\n@@ -219,10 +225,10 @@ bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const\n     std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);\n     if ((nChild >> 31) == 0) {\n         CPubKey pubkey = GetPubKey();\n-        assert(pubkey.begin() + 33 == pubkey.end());\n+        assert(pubkey.size() == 33);\n         BIP32Hash(cc, nChild, *pubkey.begin(), pubkey.begin()+1, vout.data());\n     } else {\n-        assert(begin() + 32 == end());\n+        assert(size() == 32);\n         BIP32Hash(cc, nChild, 0, begin(), vout.data());\n     }\n     memcpy(ccChild.begin(), vout.data()+32, 32);"
      },
      {
        "sha": "da02fec7a27019fad360b3dc4b8e212d795c8688",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3603ac6f07966036e56554cd754a57791a3491a/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3603ac6f07966036e56554cd754a57791a3491a/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=a3603ac6f07966036e56554cd754a57791a3491a",
        "patch": "@@ -1,4 +1,5 @@\n // Copyright (c) 2009-2016 The Bitcoin Core developers\n+// Copyright (c) 2017 The Zcash developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -46,7 +47,7 @@ static int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1\n     lenbyte = input[pos++];\n     if (lenbyte & 0x80) {\n         lenbyte -= 0x80;\n-        if (pos + lenbyte > inputlen) {\n+        if (lenbyte > inputlen - pos) {\n             return 0;\n         }\n         pos += lenbyte;\n@@ -65,14 +66,15 @@ static int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1\n     lenbyte = input[pos++];\n     if (lenbyte & 0x80) {\n         lenbyte -= 0x80;\n-        if (pos + lenbyte > inputlen) {\n+        if (lenbyte > inputlen - pos) {\n             return 0;\n         }\n         while (lenbyte > 0 && input[pos] == 0) {\n             pos++;\n             lenbyte--;\n         }\n-        if (lenbyte >= sizeof(size_t)) {\n+        static_assert(sizeof(size_t) >= 4, \"size_t too small\");\n+        if (lenbyte >= 4) {\n             return 0;\n         }\n         rlen = 0;\n@@ -103,14 +105,15 @@ static int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1\n     lenbyte = input[pos++];\n     if (lenbyte & 0x80) {\n         lenbyte -= 0x80;\n-        if (pos + lenbyte > inputlen) {\n+        if (lenbyte > inputlen - pos) {\n             return 0;\n         }\n         while (lenbyte > 0 && input[pos] == 0) {\n             pos++;\n             lenbyte--;\n         }\n-        if (lenbyte >= sizeof(size_t)) {\n+        static_assert(sizeof(size_t) >= 4, \"size_t too small\");\n+        if (lenbyte >= 4) {\n             return 0;\n         }\n         slen = 0;\n@@ -225,7 +228,7 @@ bool CPubKey::Decompress() {\n bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {\n     assert(IsValid());\n     assert((nChild >> 31) == 0);\n-    assert(begin() + 33 == end());\n+    assert(size() == 33);\n     unsigned char out[64];\n     BIP32Hash(cc, nChild, *begin(), begin()+1, out);\n     memcpy(ccChild.begin(), out+32, 32);"
      }
    ]
  },
  {
    "sha": "e181dbe7482424d2658df08e7a0c3cd832839edf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTgxZGJlNzQ4MjQyNGQyNjU4ZGYwOGU3YTBjM2NkODMyODM5ZWRm",
    "commit": {
      "author": {
        "name": "Jack Grigg",
        "email": "jack@z.cash",
        "date": "2017-06-06T05:44:17Z"
      },
      "committer": {
        "name": "Jack Grigg",
        "email": "jack@z.cash",
        "date": "2017-07-17T16:55:05Z"
      },
      "message": "Add comments",
      "tree": {
        "sha": "a1d11ce3534df7213f170cc371da96d79a157e48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1d11ce3534df7213f170cc371da96d79a157e48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e181dbe7482424d2658df08e7a0c3cd832839edf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZbOvyAAoJEGZdvNKE99r/wlEP/jBY2jaQQSbcp4CTbwkrK+kI\nJEjjSH2k/BbDB0GrIRPCrs/O4kMY4pNx8rYisrytjrzyaRxfN/CaePjunY0+/riS\ns3lmKOXRyZ3wx/xyOEenblAivbfuG7dR9bo6m3dKKQKotjzPi8SIx3oJpKSbRddq\nB9wfdCnSjzKip4Us/4JPoul8wvNcHZ2J6eB2La3RLKZptI2dIS77tjQjs1r0CVWT\nCpcCXV5Can0RzN++xmtWME21oXzmA9RKIpP+wpQv7yeHgdznrL51BeWSIm5tDfZs\nvjTjNV1PWbSCXbzevTlr2BzqFIl/EvlgaQNbN2JhcFh99OGbhSspYlurj+JhX1x9\nOGsUjEBOoOP2loIrIG0LCl4xB+UBWhe6zI7COp2wRU7pOKEkODkPf3RTtrieXo58\n7Dvqg3BXkB1jXy6mJer+y8IBDqI2A7zWNvt6/ztbmlFT/Lxf0IoVybsg0+1yTDqZ\nmRzVe/2DrLOB4JWkCII7FIRX3R3XLbk6XHN77Ez2AyMb4s9xsxBu2BSjdtPUP35q\nKa+2mtf/8DG0gr5AQNkmBkIC5ZR1yqVbET3S/Qib/PdcdsmM22ieWtUK5iTEy8LO\n/u6J31KGLKYhYUTGjR4NGfpWPdmWYWo10VL2+DiQNgiCUvuu71DoAK+4sm+nLpZY\nPBu9dKnZo8OFvLBVMWw0\n=15VR\n-----END PGP SIGNATURE-----",
        "payload": "tree a1d11ce3534df7213f170cc371da96d79a157e48\nparent a3603ac6f07966036e56554cd754a57791a3491a\nauthor Jack Grigg <jack@z.cash> 1496727857 +1200\ncommitter Jack Grigg <jack@z.cash> 1500310505 -0500\n\nAdd comments\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e181dbe7482424d2658df08e7a0c3cd832839edf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e181dbe7482424d2658df08e7a0c3cd832839edf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e181dbe7482424d2658df08e7a0c3cd832839edf/comments",
    "author": {
      "login": "str4d",
      "id": 4993799,
      "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/str4d",
      "html_url": "https://github.com/str4d",
      "followers_url": "https://api.github.com/users/str4d/followers",
      "following_url": "https://api.github.com/users/str4d/following{/other_user}",
      "gists_url": "https://api.github.com/users/str4d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/str4d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
      "organizations_url": "https://api.github.com/users/str4d/orgs",
      "repos_url": "https://api.github.com/users/str4d/repos",
      "events_url": "https://api.github.com/users/str4d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/str4d/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "str4d",
      "id": 4993799,
      "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/str4d",
      "html_url": "https://github.com/str4d",
      "followers_url": "https://api.github.com/users/str4d/followers",
      "following_url": "https://api.github.com/users/str4d/following{/other_user}",
      "gists_url": "https://api.github.com/users/str4d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/str4d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
      "organizations_url": "https://api.github.com/users/str4d/orgs",
      "repos_url": "https://api.github.com/users/str4d/repos",
      "events_url": "https://api.github.com/users/str4d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/str4d/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3603ac6f07966036e56554cd754a57791a3491a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3603ac6f07966036e56554cd754a57791a3491a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3603ac6f07966036e56554cd754a57791a3491a"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "31d485722ac63de52351d308ed6235d0b8ea2b3e",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e181dbe7482424d2658df08e7a0c3cd832839edf/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e181dbe7482424d2658df08e7a0c3cd832839edf/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=e181dbe7482424d2658df08e7a0c3cd832839edf",
        "patch": "@@ -17,6 +17,22 @@\n static secp256k1_context* secp256k1_context_sign = NULL;\n \n /** These functions are taken from the libsecp256k1 distribution and are very ugly. */\n+\n+/**\n+ * This parses a format loosely based on a DER encoding of the ECPrivateKey type from\n+ * section C.4 of SEC 1 <http://www.secg.org/sec1-v2.pdf>, with the following caveats:\n+ *\n+ * * The octet-length of the SEQUENCE must be encoded as 1 or 2 octets. It is not\n+ *   required to be encoded as one octet if it is less than 256, as DER would require.\n+ * * The octet-length of the SEQUENCE must not be greater than the remaining\n+ *   length of the key encoding, but need not match it (i.e. the encoding may contain\n+ *   junk after the encoded SEQUENCE).\n+ * * The privateKey OCTET STRING is zero-filled on the left to 32 octets.\n+ * * Anything after the encoding of the privateKey OCTET STRING is ignored, whether\n+ *   or not it is validly encoded DER.\n+ *\n+ * out32 must point to an output buffer of length at least 32 bytes.\n+ */\n static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *out32, const unsigned char *privkey, size_t privkeylen) {\n     const unsigned char *end = privkey + privkeylen;\n     size_t lenb = 0;\n@@ -66,6 +82,13 @@ static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *ou\n     return 1;\n }\n \n+/**\n+ * This serializes to a DER encoding of the ECPrivateKey type from section C.4 of SEC 1\n+ * <http://www.secg.org/sec1-v2.pdf>. The optional parameters and publicKey fields are\n+ * included.\n+ *\n+ * key32 must point to a 32-byte raw private key.\n+ */\n static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *privkey, size_t *privkeylen, const unsigned char *key32, int compressed) {\n     secp256k1_pubkey pubkey;\n     size_t pubkeylen = 0;"
      },
      {
        "sha": "39e06f4a51d687676777fcc16eca16366b0ecd6b",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e181dbe7482424d2658df08e7a0c3cd832839edf/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e181dbe7482424d2658df08e7a0c3cd832839edf/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=e181dbe7482424d2658df08e7a0c3cd832839edf",
        "patch": "@@ -174,7 +174,13 @@ bool static IsLowDERSignature(const valtype &vchSig, ScriptError* serror) {\n     if (!IsValidSignatureEncoding(vchSig)) {\n         return set_error(serror, SCRIPT_ERR_SIG_DER);\n     }\n+    // https://bitcoin.stackexchange.com/a/12556:\n+    //     Also note that inside transaction signatures, an extra hashtype byte\n+    //     follows the actual signature data.\n     std::vector<unsigned char> vchSigCopy(vchSig.begin(), vchSig.begin() + vchSig.size() - 1);\n+    // If the S value is above the order of the curve divided by two, its\n+    // complement modulo the order could have been used instead, which is\n+    // one byte shorter when encoded correctly.\n     if (!CPubKey::CheckLowS(vchSigCopy)) {\n         return set_error(serror, SCRIPT_ERR_SIG_HIGH_S);\n     }"
      }
    ]
  },
  {
    "sha": "e4a10860a4043afdda29bf7ed8e98f05d5341905",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGExMDg2MGE0MDQzYWZkZGEyOWJmN2VkOGU5OGYwNWQ1MzQxOTA1",
    "commit": {
      "author": {
        "name": "Jack Grigg",
        "email": "jack@z.cash",
        "date": "2017-06-06T06:03:50Z"
      },
      "committer": {
        "name": "Jack Grigg",
        "email": "jack@z.cash",
        "date": "2017-07-17T16:55:05Z"
      },
      "message": "Update Debian copyright list",
      "tree": {
        "sha": "eb41c1c1fa1ec66b417ce46c2c616b28d1c89ec8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb41c1c1fa1ec66b417ce46c2c616b28d1c89ec8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4a10860a4043afdda29bf7ed8e98f05d5341905",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZbOvzAAoJEGZdvNKE99r/tNcP/RVGXjcYD5kWQn+gBaNXXMl+\nYsBH6k2Ifr3iQKcuSwNrxiatcCzAMGd9PiR1l1FZwjZGeKsU9ZY3c5SxlyUsGWwl\n/mzctK8hW9MmKXvIHhjOVyA0ArpRQPmAYJskcuCBycr43PIIdHpBDPhlo9UAFrm8\nx4tEj0mFvJWcOcxavY0VTP8znjRdh5WJaEkWnm3UOuV55zjEsraehKrOkUzp4V6A\nU6dBiUNYG2tioE60tjH0HSmry3bb7AqevFE0m9OEZaoX0JX1AZaCTMn9MBRNzeob\nMo96Io9JvspTPIdohbSSLiWp3B9Z1Fnf+NLvT62V7yY+Jfj4taXEpmE4foB29L/y\nC31WolljbOe/RsA+GCH+mXq9XCnQr/m5kiRAQbNtpnsj9PG8tvbpb4XmFRm4Skou\nvlVdYUnqYVMmHyfHnUUBsy9Y6XkfASawsA3Rhk+ftAM35sir2Yq4CpCPkLkRCQ6T\nUr3N3RIumUqrT19E8rsX/A8VT5q9ai/AcVktwuPs1inavQdSjl8sGkkNcUIhUWxo\nI+24lwBrq5a3HIrVhy/L7ae4VUcBuSp8JSc5LmnYzZiIhEUaQvHjdbdDZ980TvQl\nfsP5JC+Z1+HJxJiUTUGP2qpFNxIolCxQyj6kdIIMAFbwORYd3LgC2otDhbX1CVKe\n8hFTzm6uGywSHzTg9SOn\n=VOCW\n-----END PGP SIGNATURE-----",
        "payload": "tree eb41c1c1fa1ec66b417ce46c2c616b28d1c89ec8\nparent e181dbe7482424d2658df08e7a0c3cd832839edf\nauthor Jack Grigg <jack@z.cash> 1496729030 +1200\ncommitter Jack Grigg <jack@z.cash> 1500310505 -0500\n\nUpdate Debian copyright list\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4a10860a4043afdda29bf7ed8e98f05d5341905",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4a10860a4043afdda29bf7ed8e98f05d5341905",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4a10860a4043afdda29bf7ed8e98f05d5341905/comments",
    "author": {
      "login": "str4d",
      "id": 4993799,
      "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/str4d",
      "html_url": "https://github.com/str4d",
      "followers_url": "https://api.github.com/users/str4d/followers",
      "following_url": "https://api.github.com/users/str4d/following{/other_user}",
      "gists_url": "https://api.github.com/users/str4d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/str4d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
      "organizations_url": "https://api.github.com/users/str4d/orgs",
      "repos_url": "https://api.github.com/users/str4d/repos",
      "events_url": "https://api.github.com/users/str4d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/str4d/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "str4d",
      "id": 4993799,
      "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/str4d",
      "html_url": "https://github.com/str4d",
      "followers_url": "https://api.github.com/users/str4d/followers",
      "following_url": "https://api.github.com/users/str4d/following{/other_user}",
      "gists_url": "https://api.github.com/users/str4d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/str4d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
      "organizations_url": "https://api.github.com/users/str4d/orgs",
      "repos_url": "https://api.github.com/users/str4d/repos",
      "events_url": "https://api.github.com/users/str4d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/str4d/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e181dbe7482424d2658df08e7a0c3cd832839edf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e181dbe7482424d2658df08e7a0c3cd832839edf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e181dbe7482424d2658df08e7a0c3cd832839edf"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8e715bd9d80dafbd6d60c80014a4ff5bbfe1da9e",
        "filename": "contrib/debian/copyright",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4a10860a4043afdda29bf7ed8e98f05d5341905/contrib/debian/copyright",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4a10860a4043afdda29bf7ed8e98f05d5341905/contrib/debian/copyright",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/copyright?ref=e4a10860a4043afdda29bf7ed8e98f05d5341905",
        "patch": "@@ -15,6 +15,14 @@ Copyright: 2010-2011, Jonas Smedegaard <dr@jones.dk>\n            2011, Matt Corallo <matt@bluematt.me>\n License: GPL-2+\n \n+Files: src/secp256k1/build-aux/m4/ax_jni_include_dir.m4\n+Copyright: 2008 Don Anderson <dda@sleepycat.com>\n+License: GNU-All-permissive-License\n+\n+Files: src/secp256k1/build-aux/m4/ax_prog_cc_for_build.m4\n+Copyright: 2008 Paolo Bonzini <bonzini@gnu.org>\n+License: GNU-All-permissive-License\n+\n Files: src/qt/res/icons/add.png\n        src/qt/res/icons/address-book.png\n        src/qt/res/icons/chevron.png\n@@ -106,6 +114,12 @@ License: Expat\n  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n \n+License: GNU-All-permissive-License\n+ Copying and distribution of this file, with or without modification, are\n+ permitted in any medium without royalty provided the copyright notice\n+ and this notice are preserved. This file is offered as-is, without any\n+ warranty.\n+\n License: GPL-2+\n  This program is free software; you can redistribute it and/or modify it\n  under the terms of the GNU General Public License as published by the"
      }
    ]
  },
  {
    "sha": "17fa3913ef7ba5f569ebc3695fab15b10dd914f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2ZhMzkxM2VmN2JhNWY1NjllYmMzNjk1ZmFiMTViMTBkZDkxNGYw",
    "commit": {
      "author": {
        "name": "Jack Grigg",
        "email": "jack@z.cash",
        "date": "2017-06-06T07:21:34Z"
      },
      "committer": {
        "name": "Jack Grigg",
        "email": "jack@z.cash",
        "date": "2017-07-17T16:57:23Z"
      },
      "message": "Specify ECDSA constant sizes as constants",
      "tree": {
        "sha": "f86b876dc96420a858e0cfe121f81923c471fcf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f86b876dc96420a858e0cfe121f81923c471fcf2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17fa3913ef7ba5f569ebc3695fab15b10dd914f0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZbOxzAAoJEGZdvNKE99r/X/kP/RbHEC/UTbz1QgkJmRmqLej0\nIkavoePp96xDHkgGZ+gKCb4cQLZd1sDM7N19qHH0uM4GoxgXvwt+A/Smv6PqrQ8O\nMMRN905dG3g0Pza3NrvCbYeeJFHvGwd6fGkEbypm38XhNf90Pl/8hpmVxtoDORqD\nV1e77eFFZ2esFNKHooylX5S0zSDTO/1QzC1X6vX7S15tmnygvqnm7alrztUIY8bj\nPN/3N9DePUysOFaN4PDlG84785VagTCFNlWxQ6xJxBPAjZICu0KtJNDB3EPEckMx\nWSyWMt/ME8jdDLKDFNsSr8Kb0fOIZYls3F9dYNHtkWWMiqIqFVQR4nuZDzj3Dz0Y\nXY3LeRaf9amOe9cAXjOD7UmCYwx85Vqnx+KoSTIHXoTEIerLh4EEoCMLf0E1CGVM\nZDWZdMa2drp609N72035uhRpNsledtAR4e7eQLwwL+8Op4xafYyVuXTwxWb3oLKH\nei58EZq3y7COn8X1XZyvlIJfHs4XwbqBpduQcmZGEgQq+B+qdlPC50ykZFZW/vdJ\nycpQjSn7cjZy1YtB/NHNbmCc8m2uQE3yndgbaYzTBtZbDJUiCXNWvDll/a2ZFDP6\nxftuGQl6nV5zlhwqVnC9VtyPrWj3o4AE7kBg0Rwre37AFMjXA/FCXPxFqBjOjzYL\n/wBNcx/zXi/mhuvRVCEv\n=rTgH\n-----END PGP SIGNATURE-----",
        "payload": "tree f86b876dc96420a858e0cfe121f81923c471fcf2\nparent e4a10860a4043afdda29bf7ed8e98f05d5341905\nauthor Jack Grigg <jack@z.cash> 1496733694 +1200\ncommitter Jack Grigg <jack@z.cash> 1500310643 -0500\n\nSpecify ECDSA constant sizes as constants\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17fa3913ef7ba5f569ebc3695fab15b10dd914f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17fa3913ef7ba5f569ebc3695fab15b10dd914f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17fa3913ef7ba5f569ebc3695fab15b10dd914f0/comments",
    "author": {
      "login": "str4d",
      "id": 4993799,
      "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/str4d",
      "html_url": "https://github.com/str4d",
      "followers_url": "https://api.github.com/users/str4d/followers",
      "following_url": "https://api.github.com/users/str4d/following{/other_user}",
      "gists_url": "https://api.github.com/users/str4d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/str4d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
      "organizations_url": "https://api.github.com/users/str4d/orgs",
      "repos_url": "https://api.github.com/users/str4d/repos",
      "events_url": "https://api.github.com/users/str4d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/str4d/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "str4d",
      "id": 4993799,
      "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/str4d",
      "html_url": "https://github.com/str4d",
      "followers_url": "https://api.github.com/users/str4d/followers",
      "following_url": "https://api.github.com/users/str4d/following{/other_user}",
      "gists_url": "https://api.github.com/users/str4d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/str4d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
      "organizations_url": "https://api.github.com/users/str4d/orgs",
      "repos_url": "https://api.github.com/users/str4d/repos",
      "events_url": "https://api.github.com/users/str4d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/str4d/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4a10860a4043afdda29bf7ed8e98f05d5341905",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4a10860a4043afdda29bf7ed8e98f05d5341905",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4a10860a4043afdda29bf7ed8e98f05d5341905"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 44,
      "deletions": 33
    },
    "files": [
      {
        "sha": "3b679414d115693f7d9a949bd2881680ac6e62b0",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 9,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17fa3913ef7ba5f569ebc3695fab15b10dd914f0/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17fa3913ef7ba5f569ebc3695fab15b10dd914f0/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=17fa3913ef7ba5f569ebc3695fab15b10dd914f0",
        "patch": "@@ -87,9 +87,13 @@ static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *ou\n  * <http://www.secg.org/sec1-v2.pdf>. The optional parameters and publicKey fields are\n  * included.\n  *\n+ * privkey must point to an output buffer of length at least PRIVATE_KEY_SIZE bytes.\n+ * privkeylen must initially be set to the size of the privkey buffer. Upon return it\n+ * will be set to the number of bytes used in the buffer.\n  * key32 must point to a 32-byte raw private key.\n  */\n static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *privkey, size_t *privkeylen, const unsigned char *key32, int compressed) {\n+    assert(*privkeylen >= PRIVATE_KEY_SIZE);\n     secp256k1_pubkey pubkey;\n     size_t pubkeylen = 0;\n     if (!secp256k1_ec_pubkey_create(ctx, &pubkey, key32)) {\n@@ -115,10 +119,11 @@ static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *pr\n         memcpy(ptr, begin, sizeof(begin)); ptr += sizeof(begin);\n         memcpy(ptr, key32, 32); ptr += 32;\n         memcpy(ptr, middle, sizeof(middle)); ptr += sizeof(middle);\n-        pubkeylen = 33;\n+        pubkeylen = COMPRESSED_PUBLIC_KEY_SIZE;\n         secp256k1_ec_pubkey_serialize(ctx, ptr, &pubkeylen, &pubkey, SECP256K1_EC_COMPRESSED);\n         ptr += pubkeylen;\n         *privkeylen = ptr - privkey;\n+        assert(*privkeylen == COMPRESSED_PRIVATE_KEY_SIZE);\n     } else {\n         static const unsigned char begin[] = {\n             0x30,0x82,0x01,0x13,0x02,0x01,0x01,0x04,0x20\n@@ -140,10 +145,11 @@ static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *pr\n         memcpy(ptr, begin, sizeof(begin)); ptr += sizeof(begin);\n         memcpy(ptr, key32, 32); ptr += 32;\n         memcpy(ptr, middle, sizeof(middle)); ptr += sizeof(middle);\n-        pubkeylen = 65;\n+        pubkeylen = PUBLIC_KEY_SIZE;\n         secp256k1_ec_pubkey_serialize(ctx, ptr, &pubkeylen, &pubkey, SECP256K1_EC_UNCOMPRESSED);\n         ptr += pubkeylen;\n         *privkeylen = ptr - privkey;\n+        assert(*privkeylen == PRIVATE_KEY_SIZE);\n     }\n     return 1;\n }\n@@ -165,8 +171,8 @@ CPrivKey CKey::GetPrivKey() const {\n     CPrivKey privkey;\n     int ret;\n     size_t privkeylen;\n-    privkey.resize(279);\n-    privkeylen = 279;\n+    privkey.resize(PRIVATE_KEY_SIZE);\n+    privkeylen = PRIVATE_KEY_SIZE;\n     ret = ec_privkey_export_der(secp256k1_context_sign, (unsigned char*) privkey.data(), &privkeylen, begin(), fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);\n     assert(ret);\n     privkey.resize(privkeylen);\n@@ -176,7 +182,7 @@ CPrivKey CKey::GetPrivKey() const {\n CPubKey CKey::GetPubKey() const {\n     assert(fValid);\n     secp256k1_pubkey pubkey;\n-    size_t clen = 65;\n+    size_t clen = PUBLIC_KEY_SIZE;\n     CPubKey result;\n     int ret = secp256k1_ec_pubkey_create(secp256k1_context_sign, &pubkey, begin());\n     assert(ret);\n@@ -189,8 +195,8 @@ CPubKey CKey::GetPubKey() const {\n bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {\n     if (!fValid)\n         return false;\n-    vchSig.resize(72);\n-    size_t nSigLen = 72;\n+    vchSig.resize(SIGNATURE_SIZE);\n+    size_t nSigLen = SIGNATURE_SIZE;\n     unsigned char extra_entropy[32] = {0};\n     WriteLE32(extra_entropy, test_case);\n     secp256k1_ecdsa_signature sig;\n@@ -218,7 +224,7 @@ bool CKey::VerifyPubKey(const CPubKey& pubkey) const {\n bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig) const {\n     if (!fValid)\n         return false;\n-    vchSig.resize(65);\n+    vchSig.resize(COMPACT_SIGNATURE_SIZE);\n     int rec = -1;\n     secp256k1_ecdsa_recoverable_signature sig;\n     int ret = secp256k1_ecdsa_sign_recoverable(secp256k1_context_sign, &sig, hash.begin(), begin(), secp256k1_nonce_function_rfc6979, NULL);\n@@ -248,7 +254,7 @@ bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const\n     std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);\n     if ((nChild >> 31) == 0) {\n         CPubKey pubkey = GetPubKey();\n-        assert(pubkey.size() == 33);\n+        assert(pubkey.size() == COMPRESSED_PUBLIC_KEY_SIZE);\n         BIP32Hash(cc, nChild, *pubkey.begin(), pubkey.begin()+1, vout.data());\n     } else {\n         assert(size() == 32);"
      },
      {
        "sha": "dc7b941f42c894496255b8cad38a7d7348e7c633",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17fa3913ef7ba5f569ebc3695fab15b10dd914f0/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17fa3913ef7ba5f569ebc3695fab15b10dd914f0/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=17fa3913ef7ba5f569ebc3695fab15b10dd914f0",
        "patch": "@@ -1,5 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2016 The Bitcoin Core developers\n+// Copyright (c) 2017 The Zcash developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -17,17 +18,18 @@\n \n /**\n  * secp256k1:\n- * const unsigned int PRIVATE_KEY_SIZE = 279;\n- * const unsigned int PUBLIC_KEY_SIZE  = 65;\n- * const unsigned int SIGNATURE_SIZE   = 72;\n- *\n+ */\n+const unsigned int PRIVATE_KEY_SIZE            = 279;\n+const unsigned int COMPRESSED_PRIVATE_KEY_SIZE = 214;\n+/**\n  * see www.keylength.com\n  * script supports up to 75 for single byte push\n  */\n \n /**\n  * secure_allocator is defined in allocators.h\n- * CPrivKey is a serialized private key, with all parameters included (279 bytes)\n+ * CPrivKey is a serialized private key, with all parameters included\n+ * (PRIVATE_KEY_SIZE bytes)\n  */\n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;\n "
      },
      {
        "sha": "7e7b15922320490cdbd49015e12f7f9faefb0319",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17fa3913ef7ba5f569ebc3695fab15b10dd914f0/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17fa3913ef7ba5f569ebc3695fab15b10dd914f0/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=17fa3913ef7ba5f569ebc3695fab15b10dd914f0",
        "patch": "@@ -185,7 +185,7 @@ bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchS\n }\n \n bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned char>& vchSig) {\n-    if (vchSig.size() != 65)\n+    if (vchSig.size() != COMPACT_SIGNATURE_SIZE)\n         return false;\n     int recid = (vchSig[0] - 27) & 3;\n     bool fComp = ((vchSig[0] - 27) & 4) != 0;\n@@ -197,8 +197,8 @@ bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned cha\n     if (!secp256k1_ecdsa_recover(secp256k1_context_verify, &pubkey, &sig, hash.begin())) {\n         return false;\n     }\n-    unsigned char pub[65];\n-    size_t publen = 65;\n+    unsigned char pub[PUBLIC_KEY_SIZE];\n+    size_t publen = PUBLIC_KEY_SIZE;\n     secp256k1_ec_pubkey_serialize(secp256k1_context_verify, pub, &publen, &pubkey, fComp ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);\n     Set(pub, pub + publen);\n     return true;\n@@ -218,8 +218,8 @@ bool CPubKey::Decompress() {\n     if (!secp256k1_ec_pubkey_parse(secp256k1_context_verify, &pubkey, &(*this)[0], size())) {\n         return false;\n     }\n-    unsigned char pub[65];\n-    size_t publen = 65;\n+    unsigned char pub[PUBLIC_KEY_SIZE];\n+    size_t publen = PUBLIC_KEY_SIZE;\n     secp256k1_ec_pubkey_serialize(secp256k1_context_verify, pub, &publen, &pubkey, SECP256K1_EC_UNCOMPRESSED);\n     Set(pub, pub + publen);\n     return true;\n@@ -228,7 +228,7 @@ bool CPubKey::Decompress() {\n bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {\n     assert(IsValid());\n     assert((nChild >> 31) == 0);\n-    assert(size() == 33);\n+    assert(size() == COMPRESSED_PUBLIC_KEY_SIZE);\n     unsigned char out[64];\n     BIP32Hash(cc, nChild, *begin(), begin()+1, out);\n     memcpy(ccChild.begin(), out+32, 32);\n@@ -239,8 +239,8 @@ bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChi\n     if (!secp256k1_ec_pubkey_tweak_add(secp256k1_context_verify, &pubkey, out)) {\n         return false;\n     }\n-    unsigned char pub[33];\n-    size_t publen = 33;\n+    unsigned char pub[COMPRESSED_PUBLIC_KEY_SIZE];\n+    size_t publen = COMPRESSED_PUBLIC_KEY_SIZE;\n     secp256k1_ec_pubkey_serialize(secp256k1_context_verify, pub, &publen, &pubkey, SECP256K1_EC_COMPRESSED);\n     pubkeyChild.Set(pub, pub + publen);\n     return true;\n@@ -252,8 +252,8 @@ void CExtPubKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const {\n     code[5] = (nChild >> 24) & 0xFF; code[6] = (nChild >> 16) & 0xFF;\n     code[7] = (nChild >>  8) & 0xFF; code[8] = (nChild >>  0) & 0xFF;\n     memcpy(code+9, chaincode.begin(), 32);\n-    assert(pubkey.size() == 33);\n-    memcpy(code+41, pubkey.begin(), 33);\n+    assert(pubkey.size() == COMPRESSED_PUBLIC_KEY_SIZE);\n+    memcpy(code+41, pubkey.begin(), COMPRESSED_PUBLIC_KEY_SIZE);\n }\n \n void CExtPubKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {"
      },
      {
        "sha": "6e25ad7c49da4e61c67295c01c085095a2bb5dbd",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17fa3913ef7ba5f569ebc3695fab15b10dd914f0/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17fa3913ef7ba5f569ebc3695fab15b10dd914f0/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=17fa3913ef7ba5f569ebc3695fab15b10dd914f0",
        "patch": "@@ -1,5 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2016 The Bitcoin Core developers\n+// Copyright (c) 2017 The Zcash developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -15,10 +16,12 @@\n \n /**\n  * secp256k1:\n- * const unsigned int PRIVATE_KEY_SIZE = 279;\n- * const unsigned int PUBLIC_KEY_SIZE  = 65;\n- * const unsigned int SIGNATURE_SIZE   = 72;\n- *\n+ */\n+const unsigned int PUBLIC_KEY_SIZE             = 65;\n+const unsigned int COMPRESSED_PUBLIC_KEY_SIZE  = 33;\n+const unsigned int SIGNATURE_SIZE              = 72;\n+const unsigned int COMPACT_SIGNATURE_SIZE      = 65;\n+/**\n  * see www.keylength.com\n  * script supports up to 75 for single byte push\n  */\n@@ -44,15 +47,15 @@ class CPubKey\n      * Just store the serialized data.\n      * Its length can very cheaply be computed from the first byte.\n      */\n-    unsigned char vch[65];\n+    unsigned char vch[PUBLIC_KEY_SIZE];\n \n     //! Compute the length of a pubkey with a given first byte.\n     unsigned int static GetLen(unsigned char chHeader)\n     {\n         if (chHeader == 2 || chHeader == 3)\n-            return 33;\n+            return COMPRESSED_PUBLIC_KEY_SIZE;\n         if (chHeader == 4 || chHeader == 6 || chHeader == 7)\n-            return 65;\n+            return PUBLIC_KEY_SIZE;\n         return 0;\n     }\n \n@@ -127,7 +130,7 @@ class CPubKey\n     void Unserialize(Stream& s)\n     {\n         unsigned int len = ::ReadCompactSize(s);\n-        if (len <= 65) {\n+        if (len <= PUBLIC_KEY_SIZE) {\n             s.read((char*)vch, len);\n         } else {\n             // invalid pubkey, skip available data\n@@ -166,7 +169,7 @@ class CPubKey\n     //! Check whether this is a compressed public key.\n     bool IsCompressed() const\n     {\n-        return size() == 33;\n+        return size() == COMPRESSED_PUBLIC_KEY_SIZE;\n     }\n \n     /**"
      }
    ]
  },
  {
    "sha": "48abe78e51e9a51fba8b93ff7faa32a14a2aa50c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGFiZTc4ZTUxZTlhNTFmYmE4YjkzZmY3ZmFhMzJhMTRhMmFhNTBj",
    "commit": {
      "author": {
        "name": "Jack Grigg",
        "email": "jack@z.cash",
        "date": "2017-06-06T08:28:37Z"
      },
      "committer": {
        "name": "Jack Grigg",
        "email": "jack@z.cash",
        "date": "2017-07-17T16:57:23Z"
      },
      "message": "Remove redundant `= 0` initialisations",
      "tree": {
        "sha": "ac8497724d34fa0bfeb8996d1aafa714ed167cdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac8497724d34fa0bfeb8996d1aafa714ed167cdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48abe78e51e9a51fba8b93ff7faa32a14a2aa50c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZbOxzAAoJEGZdvNKE99r/MZUP/jSPDLiyJ5LWNZuPz30E4fD/\nkfwcRQuczhWIs1mUq69KL1SfAm8lhhpMbtdSBE7OUgi/TvUeuSgacjgkXrguxBh8\n91Wxan+2iFkSZEsC17MGclAlz4/Qs55XCOEjlKUAi/YVjjGc9P0l8ckSBpc5ZlNF\nqMd3t2pn+lvSucAmIijeMsWWdESg4vOVInIwMaGTEWisTmmJP5v5fesHXivf4Lgt\n+mvR2bD1XNIaDfy3MuUtbpRtVWLGtmp+Bg/D7ME/5j6uNrL8Oi+SIR1l4ti5F8Ch\nnwNGbeYs9OEYpevGv0pJODHxOt5QKU3Oojiy+Lp3HdpCMoZVsmKaOdDNCEFzkrwL\ncJdF5cM2v8XG+KjZMBn8cmSkzxuX327+bx9FHWnhZHw05+2KE9sIdymk6xpC9rVY\nh+xFbR90nabP7tQ5EXbhOis65X+NVO5l+R8k5wBHz3tZGN5arR7wZ7ovri1YbHJS\nteKEgQ+oj2iQpzFmEuYO0vzkR1eDQ+PlQaZkQKKCggokXB7Le6iOD7oJVD97KFTH\nOKpTpooSWh1ZB4X3tMd+vJ8z4idzs3bG1YuBHFIvIG6Gn72dK8sm+Wg+VUZyuEjx\nmWff18jdNvtuVca8Q8huCkdYMT0155xRkY/kZ2DgE8bJqd9Nr9LmODDK/AKmrENs\nESKwfDBNSdHfjM37v43l\n=uQHp\n-----END PGP SIGNATURE-----",
        "payload": "tree ac8497724d34fa0bfeb8996d1aafa714ed167cdc\nparent 17fa3913ef7ba5f569ebc3695fab15b10dd914f0\nauthor Jack Grigg <jack@z.cash> 1496737717 +1200\ncommitter Jack Grigg <jack@z.cash> 1500310643 -0500\n\nRemove redundant `= 0` initialisations\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48abe78e51e9a51fba8b93ff7faa32a14a2aa50c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48abe78e51e9a51fba8b93ff7faa32a14a2aa50c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48abe78e51e9a51fba8b93ff7faa32a14a2aa50c/comments",
    "author": {
      "login": "str4d",
      "id": 4993799,
      "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/str4d",
      "html_url": "https://github.com/str4d",
      "followers_url": "https://api.github.com/users/str4d/followers",
      "following_url": "https://api.github.com/users/str4d/following{/other_user}",
      "gists_url": "https://api.github.com/users/str4d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/str4d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
      "organizations_url": "https://api.github.com/users/str4d/orgs",
      "repos_url": "https://api.github.com/users/str4d/repos",
      "events_url": "https://api.github.com/users/str4d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/str4d/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "str4d",
      "id": 4993799,
      "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/str4d",
      "html_url": "https://github.com/str4d",
      "followers_url": "https://api.github.com/users/str4d/followers",
      "following_url": "https://api.github.com/users/str4d/following{/other_user}",
      "gists_url": "https://api.github.com/users/str4d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/str4d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
      "organizations_url": "https://api.github.com/users/str4d/orgs",
      "repos_url": "https://api.github.com/users/str4d/repos",
      "events_url": "https://api.github.com/users/str4d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/str4d/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17fa3913ef7ba5f569ebc3695fab15b10dd914f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17fa3913ef7ba5f569ebc3695fab15b10dd914f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17fa3913ef7ba5f569ebc3695fab15b10dd914f0"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "3a93187d765885dade81bb8e0ec7d697ba5dcf05",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48abe78e51e9a51fba8b93ff7faa32a14a2aa50c/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48abe78e51e9a51fba8b93ff7faa32a14a2aa50c/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=48abe78e51e9a51fba8b93ff7faa32a14a2aa50c",
        "patch": "@@ -35,8 +35,6 @@ static secp256k1_context* secp256k1_context_sign = NULL;\n  */\n static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *out32, const unsigned char *privkey, size_t privkeylen) {\n     const unsigned char *end = privkey + privkeylen;\n-    size_t lenb = 0;\n-    size_t len = 0;\n     memset(out32, 0, 32);\n     /* sequence header */\n     if (end - privkey < 1 || *privkey != 0x30u) {\n@@ -47,15 +45,15 @@ static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *ou\n     if (end - privkey < 1 || !(*privkey & 0x80u)) {\n         return 0;\n     }\n-    lenb = *privkey & ~0x80u; privkey++;\n+    size_t lenb = *privkey & ~0x80u; privkey++;\n     if (lenb < 1 || lenb > 2) {\n         return 0;\n     }\n     if (end - privkey < lenb) {\n         return 0;\n     }\n     /* sequence length */\n-    len = privkey[lenb-1] | (lenb > 1 ? privkey[lenb-2] << 8 : 0u);\n+    size_t len = privkey[lenb-1] | (lenb > 1 ? privkey[lenb-2] << 8 : 0u);\n     privkey += lenb;\n     if (end - privkey < len) {\n         return 0;"
      }
    ]
  },
  {
    "sha": "1ce9f0a952a3d5d9442ad8251da898d96209c16c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2U5ZjBhOTUyYTNkNWQ5NDQyYWQ4MjUxZGE4OThkOTYyMDljMTZj",
    "commit": {
      "author": {
        "name": "Jack Grigg",
        "email": "jack@z.cash",
        "date": "2017-06-08T04:07:49Z"
      },
      "committer": {
        "name": "Jack Grigg",
        "email": "jack@z.cash",
        "date": "2017-07-17T16:57:23Z"
      },
      "message": "Ensure that ECDSA constant sizes are correctly-sized",
      "tree": {
        "sha": "b04830f99208d2a3db592572204dba96b70fc33b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b04830f99208d2a3db592572204dba96b70fc33b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ce9f0a952a3d5d9442ad8251da898d96209c16c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZbOxzAAoJEGZdvNKE99r/YGwP+wd10MqMCbNaVvnzSuS63aeJ\nFA21BZNrBkDnX1nt2u6UGATugDIVaEAjo2nAswYePhSCL8iSGxS+emQfnGI0z2Oj\nEiSLGgUEdj6v1lVmONCineXQROkK1pxLdyoC2H10Y6LEyUW1HStzb20kTXI7RH4S\n0SMBQh+NBGsogdr0d+FDYUW7h3XkANdv0kAoRSTdvphTfaxIaHOMGSS8d2PaCiG9\nAT9B6kxAme2octAlGc5pxYR+8uAKhvK9+8JVg7Qnidwq9aWiBJfIajgh/RlQAmGF\nCdG5U94dgiO5ChSnAfdLtlaLO0o8v2PYNl2iaZaO5+tq+uJLlKOyjiM6hwG59A8g\n9OtOIqHCjRF1tI89kpioNBxCwjWfUoepnN2KmFnDORTrgEuVnI2X4tdad4mFMlBF\ndZFXNheVB1JFraadJn6di/PdU+McPsmoQ2wFJIQoRAJqBQvzQd5WbJK7h1Ro7jRn\nbupFnaxXAfqb2ArX8QLLVq83Xj/5issUcbuuwbpgwANLGJUukMaoqbsGOuYKTWMd\nM6F1D84JSFRy3oZohBV21aWnvE8/TysWtJNSeR9pHSLlAPiACLcfSCsmwy306fWF\nRasmAh0CoQBJYU7EjmH5if6CtBpUSD4xf0+CUBDQquf3ty4oOVIsR1K2b4u007UD\nC16HcVCXyhCU38dBIKNY\n=YqAe\n-----END PGP SIGNATURE-----",
        "payload": "tree b04830f99208d2a3db592572204dba96b70fc33b\nparent 48abe78e51e9a51fba8b93ff7faa32a14a2aa50c\nauthor Jack Grigg <jack@z.cash> 1496894869 +1200\ncommitter Jack Grigg <jack@z.cash> 1500310643 -0500\n\nEnsure that ECDSA constant sizes are correctly-sized\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ce9f0a952a3d5d9442ad8251da898d96209c16c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ce9f0a952a3d5d9442ad8251da898d96209c16c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ce9f0a952a3d5d9442ad8251da898d96209c16c/comments",
    "author": {
      "login": "str4d",
      "id": 4993799,
      "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/str4d",
      "html_url": "https://github.com/str4d",
      "followers_url": "https://api.github.com/users/str4d/followers",
      "following_url": "https://api.github.com/users/str4d/following{/other_user}",
      "gists_url": "https://api.github.com/users/str4d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/str4d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
      "organizations_url": "https://api.github.com/users/str4d/orgs",
      "repos_url": "https://api.github.com/users/str4d/repos",
      "events_url": "https://api.github.com/users/str4d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/str4d/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "str4d",
      "id": 4993799,
      "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/str4d",
      "html_url": "https://github.com/str4d",
      "followers_url": "https://api.github.com/users/str4d/followers",
      "following_url": "https://api.github.com/users/str4d/following{/other_user}",
      "gists_url": "https://api.github.com/users/str4d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/str4d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
      "organizations_url": "https://api.github.com/users/str4d/orgs",
      "repos_url": "https://api.github.com/users/str4d/repos",
      "events_url": "https://api.github.com/users/str4d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/str4d/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48abe78e51e9a51fba8b93ff7faa32a14a2aa50c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48abe78e51e9a51fba8b93ff7faa32a14a2aa50c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48abe78e51e9a51fba8b93ff7faa32a14a2aa50c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "42301e81a063c89c80d51f3a79342b5fea7483b6",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ce9f0a952a3d5d9442ad8251da898d96209c16c/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ce9f0a952a3d5d9442ad8251da898d96209c16c/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=1ce9f0a952a3d5d9442ad8251da898d96209c16c",
        "patch": "@@ -92,6 +92,9 @@ static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *ou\n  */\n static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *privkey, size_t *privkeylen, const unsigned char *key32, int compressed) {\n     assert(*privkeylen >= PRIVATE_KEY_SIZE);\n+    static_assert(\n+        PRIVATE_KEY_SIZE >= COMPRESSED_PRIVATE_KEY_SIZE,\n+        \"COMPRESSED_PRIVATE_KEY_SIZE is larger than PRIVATE_KEY_SIZE\");\n     secp256k1_pubkey pubkey;\n     size_t pubkeylen = 0;\n     if (!secp256k1_ec_pubkey_create(ctx, &pubkey, key32)) {"
      },
      {
        "sha": "a508c238e4d3eb5b6dbdd6b04d962171141a9946",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ce9f0a952a3d5d9442ad8251da898d96209c16c/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ce9f0a952a3d5d9442ad8251da898d96209c16c/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=1ce9f0a952a3d5d9442ad8251da898d96209c16c",
        "patch": "@@ -48,6 +48,9 @@ class CPubKey\n      * Its length can very cheaply be computed from the first byte.\n      */\n     unsigned char vch[PUBLIC_KEY_SIZE];\n+    static_assert(\n+        PUBLIC_KEY_SIZE >= COMPRESSED_PUBLIC_KEY_SIZE,\n+        \"COMPRESSED_PUBLIC_KEY_SIZE is larger than PUBLIC_KEY_SIZE\");\n \n     //! Compute the length of a pubkey with a given first byte.\n     unsigned int static GetLen(unsigned char chHeader)"
      }
    ]
  },
  {
    "sha": "63179d028347bf3e32c7ea61386df4c44307b4a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzE3OWQwMjgzNDdiZjNlMzJjN2VhNjEzODZkZjRjNDQzMDdiNGE3",
    "commit": {
      "author": {
        "name": "Jack Grigg",
        "email": "jack@z.cash",
        "date": "2017-10-04T13:41:40Z"
      },
      "committer": {
        "name": "Jack Grigg",
        "email": "jack@z.cash",
        "date": "2017-10-04T13:41:40Z"
      },
      "message": "Scope the ECDSA constant sizes to CPubKey / CKey classes",
      "tree": {
        "sha": "13f96bb1dc55d166f3a9ec3a43aca14e3e923313",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13f96bb1dc55d166f3a9ec3a43aca14e3e923313"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63179d028347bf3e32c7ea61386df4c44307b4a7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ1OVDAAoJEGZdvNKE99r/lvoP/0dUeuQ5vcqA+7D4yPE/Jvll\nWAim6y4nK1sHWEw9bTAuahdohCRhGTVT2/g59A6icKJ5QXZCJDUBYmQwi6uHIRDs\nZsAjD1UlpHPyrj2VQNwm5g3s/2zS7gaGyzdZfsEABCeGJLyVfsg5UZYgC622rMM0\nstaVow5b5J5OxqvQHTVR7PXkmMUg33xFelKM7ei/SLz1DIo0JtBLfncQC7CKTLvj\nNQ9fcPKDiwGpaJZluruHsnrNaCDFZpXcOgeDgbO2tSvGfuBeuR9yIoZURF4qH+dK\nK3rKda0ciL8BcpsfkUkrSi27/mo+5Pvu1DKdGgK+/GV8fTQ91EORhrNNTM0jKd7z\nJUU+xJVHGf6WsvaBzxno9zsbrt0HmvH0w0EIMJmye23GVFwDXnv3G4Ipl1QXbW3K\nSKtMrXeuAcWCZlG34hiifXu2AK1Ug/lnUIEcrXGU0vpXXFXLgPhr9JmIRJSDCKSG\nsfqUoKIkvrpydW3TzDHjr4aaZoDLx44AIK+fp47uAFnv9BvM7Kjlx4LMmOJ7EHXy\nIfp8TgkR2x9HafxPs92kRCGUOmfhGFKVY8EGpArykYTlnmS9FTu+sIJ8mrMnRl7/\nknNFTHDKT2Op0DlQh7dcNy4ARZ/yRQxWSowVaCAKWE6S4bdFb0Brgddv7eHkQgdq\nBQ5aVOVmyZseBM2vjPxN\n=QYGG\n-----END PGP SIGNATURE-----",
        "payload": "tree 13f96bb1dc55d166f3a9ec3a43aca14e3e923313\nparent 1ce9f0a952a3d5d9442ad8251da898d96209c16c\nauthor Jack Grigg <jack@z.cash> 1507124500 +0100\ncommitter Jack Grigg <jack@z.cash> 1507124500 +0100\n\nScope the ECDSA constant sizes to CPubKey / CKey classes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63179d028347bf3e32c7ea61386df4c44307b4a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63179d028347bf3e32c7ea61386df4c44307b4a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63179d028347bf3e32c7ea61386df4c44307b4a7/comments",
    "author": {
      "login": "str4d",
      "id": 4993799,
      "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/str4d",
      "html_url": "https://github.com/str4d",
      "followers_url": "https://api.github.com/users/str4d/followers",
      "following_url": "https://api.github.com/users/str4d/following{/other_user}",
      "gists_url": "https://api.github.com/users/str4d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/str4d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
      "organizations_url": "https://api.github.com/users/str4d/orgs",
      "repos_url": "https://api.github.com/users/str4d/repos",
      "events_url": "https://api.github.com/users/str4d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/str4d/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "str4d",
      "id": 4993799,
      "node_id": "MDQ6VXNlcjQ5OTM3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4993799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/str4d",
      "html_url": "https://github.com/str4d",
      "followers_url": "https://api.github.com/users/str4d/followers",
      "following_url": "https://api.github.com/users/str4d/following{/other_user}",
      "gists_url": "https://api.github.com/users/str4d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/str4d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/str4d/subscriptions",
      "organizations_url": "https://api.github.com/users/str4d/orgs",
      "repos_url": "https://api.github.com/users/str4d/repos",
      "events_url": "https://api.github.com/users/str4d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/str4d/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ce9f0a952a3d5d9442ad8251da898d96209c16c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ce9f0a952a3d5d9442ad8251da898d96209c16c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ce9f0a952a3d5d9442ad8251da898d96209c16c"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 43,
      "deletions": 41
    },
    "files": [
      {
        "sha": "0ddf4e1fc4e6b13d9e496a4875b4e514b264dfcf",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 14,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63179d028347bf3e32c7ea61386df4c44307b4a7/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63179d028347bf3e32c7ea61386df4c44307b4a7/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=63179d028347bf3e32c7ea61386df4c44307b4a7",
        "patch": "@@ -85,16 +85,13 @@ static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *ou\n  * <http://www.secg.org/sec1-v2.pdf>. The optional parameters and publicKey fields are\n  * included.\n  *\n- * privkey must point to an output buffer of length at least PRIVATE_KEY_SIZE bytes.\n+ * privkey must point to an output buffer of length at least CKey::PRIVATE_KEY_SIZE bytes.\n  * privkeylen must initially be set to the size of the privkey buffer. Upon return it\n  * will be set to the number of bytes used in the buffer.\n  * key32 must point to a 32-byte raw private key.\n  */\n static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *privkey, size_t *privkeylen, const unsigned char *key32, int compressed) {\n-    assert(*privkeylen >= PRIVATE_KEY_SIZE);\n-    static_assert(\n-        PRIVATE_KEY_SIZE >= COMPRESSED_PRIVATE_KEY_SIZE,\n-        \"COMPRESSED_PRIVATE_KEY_SIZE is larger than PRIVATE_KEY_SIZE\");\n+    assert(*privkeylen >= CKey::PRIVATE_KEY_SIZE);\n     secp256k1_pubkey pubkey;\n     size_t pubkeylen = 0;\n     if (!secp256k1_ec_pubkey_create(ctx, &pubkey, key32)) {\n@@ -120,11 +117,11 @@ static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *pr\n         memcpy(ptr, begin, sizeof(begin)); ptr += sizeof(begin);\n         memcpy(ptr, key32, 32); ptr += 32;\n         memcpy(ptr, middle, sizeof(middle)); ptr += sizeof(middle);\n-        pubkeylen = COMPRESSED_PUBLIC_KEY_SIZE;\n+        pubkeylen = CPubKey::COMPRESSED_PUBLIC_KEY_SIZE;\n         secp256k1_ec_pubkey_serialize(ctx, ptr, &pubkeylen, &pubkey, SECP256K1_EC_COMPRESSED);\n         ptr += pubkeylen;\n         *privkeylen = ptr - privkey;\n-        assert(*privkeylen == COMPRESSED_PRIVATE_KEY_SIZE);\n+        assert(*privkeylen == CKey::COMPRESSED_PRIVATE_KEY_SIZE);\n     } else {\n         static const unsigned char begin[] = {\n             0x30,0x82,0x01,0x13,0x02,0x01,0x01,0x04,0x20\n@@ -146,11 +143,11 @@ static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *pr\n         memcpy(ptr, begin, sizeof(begin)); ptr += sizeof(begin);\n         memcpy(ptr, key32, 32); ptr += 32;\n         memcpy(ptr, middle, sizeof(middle)); ptr += sizeof(middle);\n-        pubkeylen = PUBLIC_KEY_SIZE;\n+        pubkeylen = CPubKey::PUBLIC_KEY_SIZE;\n         secp256k1_ec_pubkey_serialize(ctx, ptr, &pubkeylen, &pubkey, SECP256K1_EC_UNCOMPRESSED);\n         ptr += pubkeylen;\n         *privkeylen = ptr - privkey;\n-        assert(*privkeylen == PRIVATE_KEY_SIZE);\n+        assert(*privkeylen == CKey::PRIVATE_KEY_SIZE);\n     }\n     return 1;\n }\n@@ -183,7 +180,7 @@ CPrivKey CKey::GetPrivKey() const {\n CPubKey CKey::GetPubKey() const {\n     assert(fValid);\n     secp256k1_pubkey pubkey;\n-    size_t clen = PUBLIC_KEY_SIZE;\n+    size_t clen = CPubKey::PUBLIC_KEY_SIZE;\n     CPubKey result;\n     int ret = secp256k1_ec_pubkey_create(secp256k1_context_sign, &pubkey, begin());\n     assert(ret);\n@@ -196,8 +193,8 @@ CPubKey CKey::GetPubKey() const {\n bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {\n     if (!fValid)\n         return false;\n-    vchSig.resize(SIGNATURE_SIZE);\n-    size_t nSigLen = SIGNATURE_SIZE;\n+    vchSig.resize(CPubKey::SIGNATURE_SIZE);\n+    size_t nSigLen = CPubKey::SIGNATURE_SIZE;\n     unsigned char extra_entropy[32] = {0};\n     WriteLE32(extra_entropy, test_case);\n     secp256k1_ecdsa_signature sig;\n@@ -225,7 +222,7 @@ bool CKey::VerifyPubKey(const CPubKey& pubkey) const {\n bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig) const {\n     if (!fValid)\n         return false;\n-    vchSig.resize(COMPACT_SIGNATURE_SIZE);\n+    vchSig.resize(CPubKey::COMPACT_SIGNATURE_SIZE);\n     int rec = -1;\n     secp256k1_ecdsa_recoverable_signature sig;\n     int ret = secp256k1_ecdsa_sign_recoverable(secp256k1_context_sign, &sig, hash.begin(), begin(), secp256k1_nonce_function_rfc6979, NULL);\n@@ -255,7 +252,7 @@ bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const\n     std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);\n     if ((nChild >> 31) == 0) {\n         CPubKey pubkey = GetPubKey();\n-        assert(pubkey.size() == COMPRESSED_PUBLIC_KEY_SIZE);\n+        assert(pubkey.size() == CPubKey::COMPRESSED_PUBLIC_KEY_SIZE);\n         BIP32Hash(cc, nChild, *pubkey.begin(), pubkey.begin()+1, vout.data());\n     } else {\n         assert(size() == 32);"
      },
      {
        "sha": "14024e6ec08fb21f01a7b6cd04708cc4401abc4f",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 14,
        "deletions": 10,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63179d028347bf3e32c7ea61386df4c44307b4a7/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63179d028347bf3e32c7ea61386df4c44307b4a7/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=63179d028347bf3e32c7ea61386df4c44307b4a7",
        "patch": "@@ -16,16 +16,6 @@\n #include <vector>\n \n \n-/**\n- * secp256k1:\n- */\n-const unsigned int PRIVATE_KEY_SIZE            = 279;\n-const unsigned int COMPRESSED_PRIVATE_KEY_SIZE = 214;\n-/**\n- * see www.keylength.com\n- * script supports up to 75 for single byte push\n- */\n-\n /**\n  * secure_allocator is defined in allocators.h\n  * CPrivKey is a serialized private key, with all parameters included\n@@ -36,6 +26,20 @@ typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;\n /** An encapsulated private key. */\n class CKey\n {\n+public:\n+    /**\n+     * secp256k1:\n+     */\n+    static const unsigned int PRIVATE_KEY_SIZE            = 279;\n+    static const unsigned int COMPRESSED_PRIVATE_KEY_SIZE = 214;\n+    /**\n+     * see www.keylength.com\n+     * script supports up to 75 for single byte push\n+     */\n+    static_assert(\n+        PRIVATE_KEY_SIZE >= COMPRESSED_PRIVATE_KEY_SIZE,\n+        \"COMPRESSED_PRIVATE_KEY_SIZE is larger than PRIVATE_KEY_SIZE\");\n+\n private:\n     //! Whether this private key is valid. We check for correctness when modifying the key\n     //! data, so fValid should always correspond to the actual state."
      },
      {
        "sha": "297c60fb3265055f2846fe8a9001502bf7b38075",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63179d028347bf3e32c7ea61386df4c44307b4a7/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63179d028347bf3e32c7ea61386df4c44307b4a7/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=63179d028347bf3e32c7ea61386df4c44307b4a7",
        "patch": "@@ -252,8 +252,8 @@ void CExtPubKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const {\n     code[5] = (nChild >> 24) & 0xFF; code[6] = (nChild >> 16) & 0xFF;\n     code[7] = (nChild >>  8) & 0xFF; code[8] = (nChild >>  0) & 0xFF;\n     memcpy(code+9, chaincode.begin(), 32);\n-    assert(pubkey.size() == COMPRESSED_PUBLIC_KEY_SIZE);\n-    memcpy(code+41, pubkey.begin(), COMPRESSED_PUBLIC_KEY_SIZE);\n+    assert(pubkey.size() == CPubKey::COMPRESSED_PUBLIC_KEY_SIZE);\n+    memcpy(code+41, pubkey.begin(), CPubKey::COMPRESSED_PUBLIC_KEY_SIZE);\n }\n \n void CExtPubKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {"
      },
      {
        "sha": "df41eb497164df7f1c5db6d7f11de146ef4898b4",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 16,
        "deletions": 15,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63179d028347bf3e32c7ea61386df4c44307b4a7/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63179d028347bf3e32c7ea61386df4c44307b4a7/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=63179d028347bf3e32c7ea61386df4c44307b4a7",
        "patch": "@@ -14,18 +14,6 @@\n #include <stdexcept>\n #include <vector>\n \n-/**\n- * secp256k1:\n- */\n-const unsigned int PUBLIC_KEY_SIZE             = 65;\n-const unsigned int COMPRESSED_PUBLIC_KEY_SIZE  = 33;\n-const unsigned int SIGNATURE_SIZE              = 72;\n-const unsigned int COMPACT_SIGNATURE_SIZE      = 65;\n-/**\n- * see www.keylength.com\n- * script supports up to 75 for single byte push\n- */\n-\n const unsigned int BIP32_EXTKEY_SIZE = 74;\n \n /** A reference to a CKey: the Hash160 of its serialized public key */\n@@ -41,16 +29,29 @@ typedef uint256 ChainCode;\n /** An encapsulated public key. */\n class CPubKey\n {\n+public:\n+    /**\n+     * secp256k1:\n+     */\n+    static const unsigned int PUBLIC_KEY_SIZE             = 65;\n+    static const unsigned int COMPRESSED_PUBLIC_KEY_SIZE  = 33;\n+    static const unsigned int SIGNATURE_SIZE              = 72;\n+    static const unsigned int COMPACT_SIGNATURE_SIZE      = 65;\n+    /**\n+     * see www.keylength.com\n+     * script supports up to 75 for single byte push\n+     */\n+    static_assert(\n+        PUBLIC_KEY_SIZE >= COMPRESSED_PUBLIC_KEY_SIZE,\n+        \"COMPRESSED_PUBLIC_KEY_SIZE is larger than PUBLIC_KEY_SIZE\");\n+\n private:\n \n     /**\n      * Just store the serialized data.\n      * Its length can very cheaply be computed from the first byte.\n      */\n     unsigned char vch[PUBLIC_KEY_SIZE];\n-    static_assert(\n-        PUBLIC_KEY_SIZE >= COMPRESSED_PUBLIC_KEY_SIZE,\n-        \"COMPRESSED_PUBLIC_KEY_SIZE is larger than PUBLIC_KEY_SIZE\");\n \n     //! Compute the length of a pubkey with a given first byte.\n     unsigned int static GetLen(unsigned char chHeader)"
      }
    ]
  }
]