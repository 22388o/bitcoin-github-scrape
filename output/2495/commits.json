[
  {
    "sha": "2497ef513b687e6dcf6b31d820f14dd6d07723c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDk3ZWY1MTNiNjg3ZTZkY2Y2YjMxZDgyMGYxNGRkNmQwNzcyM2M2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2013-04-09T13:25:22Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2013-04-11T12:55:25Z"
      },
      "message": "new splash screen\n\nwhy:\n- the current splash-screen has no referring to official images on https://en.bitcoin.it/wiki/Promotional_graphics\n- the current splash screen only exists in a low res jpg\n- current splash screen looks dark and \"hackish\"\n- new splash screen should generate positive, \"trust-emotions\".\n- new splash screen gives the user infos about the running client.\n- new splash screen can handle long messages (in a lot of languages the text is cropped in current release)\n\n- example: https://dl.dropbox.com/u/7383846/new_bitcoin_splash.png\n- new size (x2) 400x312\n- contains textual information about the client\n- textinfos are dynamicly written to the image\n- when -testnet is switch on, the splashscreen will show the bitcoin logo in testnet-color (as well as a text [testnet])\n\nSigned-off-by: Jonas Schnelli <jonas.schnelli@include7.ch>",
      "tree": {
        "sha": "d3088e7e8746878f7856b224a3c821f80aab87aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3088e7e8746878f7856b224a3c821f80aab87aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2497ef513b687e6dcf6b31d820f14dd6d07723c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2497ef513b687e6dcf6b31d820f14dd6d07723c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2497ef513b687e6dcf6b31d820f14dd6d07723c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2497ef513b687e6dcf6b31d820f14dd6d07723c6/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1483aac5f9a9de9fefbcbbe3edc34429b69aca9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1483aac5f9a9de9fefbcbbe3edc34429b69aca9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1483aac5f9a9de9fefbcbbe3edc34429b69aca9e"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 63,
      "deletions": 8
    },
    "files": [
      {
        "sha": "f8ab6a7aa5119cc44e19116b7e7e740bd1d16e6d",
        "filename": "doc/assets-attribution.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2497ef513b687e6dcf6b31d820f14dd6d07723c6/doc/assets-attribution.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2497ef513b687e6dcf6b31d820f14dd6d07723c6/doc/assets-attribution.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/assets-attribution.txt?ref=2497ef513b687e6dcf6b31d820f14dd6d07723c6",
        "patch": "@@ -49,11 +49,6 @@ Designer: Everaldo (Everaldo Coelho)\n License: GNU/GPL \n Site: http://findicons.com/icon/17102/reload?id=17102\n \n-Image: src/qt/res/images/splash2.jpg (Wallet image)\n-Designer: Crobbo (forum)\n-Site: https://bitcointalk.org/index.php?topic=32273.0\n-License: Public domain\n-\n Icon: src/qt/res/icons/debugwindow.png\n Designer: Vignoni David\n Site: http://www.oxygen-icons.org/\n@@ -62,5 +57,6 @@ License: Oxygen icon theme is dual licensed. You may copy it under the Creative\n Icon: src/qt/res/icons/bitcoin.icns, src/qt/res/src/bitcoin.svg,\n       src/qt/res/src/bitcoin.ico, src/qt/res/src/bitcoin.png,\n       src/qt/res/src/bitcoin_testnet.png, docs/bitcoin_logo_doxygen.png\n+      src/qt/res/images/splash.png, src/qt/res/images/splash_testnet.png\n Designer: Jonas Schnelli (based on the original bitcoin logo from Bitboy)\n License: MIT\n\\ No newline at end of file"
      },
      {
        "sha": "2a9f96cf26b3295a9fcf9afe153f6bb1a3f21e14",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 2,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2497ef513b687e6dcf6b31d820f14dd6d07723c6/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2497ef513b687e6dcf6b31d820f14dd6d07723c6/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=2497ef513b687e6dcf6b31d820f14dd6d07723c6",
        "patch": "@@ -22,6 +22,7 @@\n #include <QTranslator>\n #include <QSplashScreen>\n #include <QLibraryInfo>\n+#include <QPainter>\n \n #if defined(BITCOIN_NEED_QT_PLUGINS) && !defined(_BITCOIN_QT_PLUGINS_INCLUDED)\n #define _BITCOIN_QT_PLUGINS_INCLUDED\n@@ -82,7 +83,7 @@ static void InitMessage(const std::string &message)\n {\n     if(splashref)\n     {\n-        splashref->showMessage(QString::fromStdString(message), Qt::AlignBottom|Qt::AlignHCenter, QColor(255,255,200));\n+        splashref->showMessage(QString::fromStdString(message), Qt::AlignBottom|Qt::AlignHCenter, QColor(55,55,55));\n         qApp->processEvents();\n     }\n     printf(\"init message: %s\\n\", message.c_str());\n@@ -192,7 +193,64 @@ int main(int argc, char *argv[])\n         return 1;\n     }\n \n-    QSplashScreen splash(QPixmap(\":/images/splash\"), 0);\n+    // set reference point, paddings\n+    int paddingRight            = 50;\n+    int paddingTop              = 50;\n+    int titleVersionVSpace      = 17;\n+    int titleCopyrightVSpace    = 40;\n+\n+    // define text to place\n+    QString titleText       = QString(QApplication::applicationName()).replace(QString(\"-testnet\"), QString(\"\"), Qt::CaseSensitive);\n+    QString versionText     = QString(\"Version %1\").arg(QString::fromStdString(FormatFullVersion())); //!<set the version string without client model (it's not available yet)\n+    QString copyrightText   = QString(\"\\u00A9 2009-%1\\n\").arg(COPYRIGHT_YEAR) + QString(BitcoinGUI::tr(\"The Bitcoin developers\")); //TODO: where we gonna place the copyright endyear (also check aboutdialog.cpp!)?\n+    QString testnetAddText  = QString(BitcoinGUI::tr(\"[testnet]\"));\n+\n+    // load the bitmap for writing some text over it\n+    QPixmap pixmap;\n+    if(GetBoolArg(\"-testnet\")) {\n+        pixmap     = QPixmap(\":/images/splash_testnet\");\n+    }\n+    else {\n+        pixmap     = QPixmap(\":/images/splash\");\n+    }\n+\n+    QPainter pixPaint(&pixmap);\n+    pixPaint.setPen(QColor(100,100,100));\n+\n+    pixPaint.setFont(QFont(\"Helvetica\", 33));\n+    QFontMetrics fm = pixPaint.fontMetrics();\n+    int titleTextWidth  = fm.width(titleText);\n+    pixPaint.drawText(pixmap.width()-titleTextWidth-paddingRight,paddingTop,titleText);\n+\n+    pixPaint.setFont(QFont(\"Helvetica\", 15));\n+\n+    // if the version string is to long, reduce size\n+    fm = pixPaint.fontMetrics();\n+    int versionTextWidth  = fm.width(versionText);\n+    if(versionTextWidth > titleTextWidth+paddingRight-10) {\n+        pixPaint.setFont(QFont(\"Helvetica\", 10));\n+        titleVersionVSpace -= 5;\n+    }\n+    pixPaint.drawText(pixmap.width()-titleTextWidth-paddingRight+2,paddingTop+titleVersionVSpace,versionText);\n+\n+    // draw copyright stuff\n+    pixPaint.setFont(QFont(\"Helvetica\", 10));\n+    pixPaint.drawText(pixmap.width()-titleTextWidth-paddingRight,paddingTop+titleCopyrightVSpace,copyrightText);\n+\n+    // draw testnet string if -testnet is on\n+    if(QApplication::applicationName().contains(QString(\"-testnet\"))) {\n+        // draw copyright stuff\n+        QFont boldFont = QFont(\"Helvetica\", 10);\n+        boldFont.setWeight(QFont::Bold);\n+        pixPaint.setFont(boldFont);\n+        fm = pixPaint.fontMetrics();\n+        int testnetAddTextWidth  = fm.width(testnetAddText);\n+        pixPaint.drawText(pixmap.width()-testnetAddTextWidth-10,15,testnetAddText);\n+    }\n+\n+    pixPaint.end();\n+\n+    QSplashScreen splash(pixmap, 0);\n     if (GetBoolArg(\"-splash\", true) && !GetBoolArg(\"-min\"))\n     {\n         splash.show();"
      },
      {
        "sha": "c0e0124d7cdd6df9e3155d0405528f14096f926a",
        "filename": "src/qt/bitcoin.qrc",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2497ef513b687e6dcf6b31d820f14dd6d07723c6/src/qt/bitcoin.qrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2497ef513b687e6dcf6b31d820f14dd6d07723c6/src/qt/bitcoin.qrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.qrc?ref=2497ef513b687e6dcf6b31d820f14dd6d07723c6",
        "patch": "@@ -43,7 +43,8 @@\n     </qresource>\n     <qresource prefix=\"/images\">\n         <file alias=\"about\">res/images/about.png</file>\n-        <file alias=\"splash\">res/images/splash2.jpg</file>\n+        <file alias=\"splash\">res/images/splash.png</file>\n+        <file alias=\"splash_testnet\">res/images/splash_testnet.png</file>\n     </qresource>\n     <qresource prefix=\"/movies\">\n         <file alias=\"update_spinner\">res/movies/update_spinner.mng</file>"
      },
      {
        "sha": "376c274a8dbfa43d2fec88e0bc7ae6033d8f374b",
        "filename": "src/qt/res/images/splash.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2497ef513b687e6dcf6b31d820f14dd6d07723c6/src/qt/res/images/splash.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2497ef513b687e6dcf6b31d820f14dd6d07723c6/src/qt/res/images/splash.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/images/splash.png?ref=2497ef513b687e6dcf6b31d820f14dd6d07723c6"
      },
      {
        "sha": "3846e6f68de0ff1379fed451bb64d0271e175622",
        "filename": "src/qt/res/images/splash2.jpg",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1483aac5f9a9de9fefbcbbe3edc34429b69aca9e/src/qt/res/images/splash2.jpg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1483aac5f9a9de9fefbcbbe3edc34429b69aca9e/src/qt/res/images/splash2.jpg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/images/splash2.jpg?ref=1483aac5f9a9de9fefbcbbe3edc34429b69aca9e"
      },
      {
        "sha": "2520e76e6225467e0d06746a5e6fe343b9a57ff2",
        "filename": "src/qt/res/images/splash_testnet.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2497ef513b687e6dcf6b31d820f14dd6d07723c6/src/qt/res/images/splash_testnet.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2497ef513b687e6dcf6b31d820f14dd6d07723c6/src/qt/res/images/splash_testnet.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/images/splash_testnet.png?ref=2497ef513b687e6dcf6b31d820f14dd6d07723c6"
      }
    ]
  },
  {
    "sha": "21d096357cbd34b41e4330fb72b8875139502055",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMWQwOTYzNTdjYmQzNGI0MWU0MzMwZmI3MmI4ODc1MTM5NTAyMDU1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2013-04-11T13:02:05Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2013-04-11T13:02:05Z"
      },
      "message": "Merge branch 'master' of git://github.com/bitcoin/bitcoin into new_splash_screen\n\nSigned-off-by: Jonas Schnelli <jonas.schnelli@include7.ch>\n\nConflicts:\n\tdoc/assets-attribution.txt",
      "tree": {
        "sha": "4ffcc198e79b0c0244376125ca478d2c0b0dac1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ffcc198e79b0c0244376125ca478d2c0b0dac1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21d096357cbd34b41e4330fb72b8875139502055",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21d096357cbd34b41e4330fb72b8875139502055",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21d096357cbd34b41e4330fb72b8875139502055",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21d096357cbd34b41e4330fb72b8875139502055/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2497ef513b687e6dcf6b31d820f14dd6d07723c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2497ef513b687e6dcf6b31d820f14dd6d07723c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2497ef513b687e6dcf6b31d820f14dd6d07723c6"
      },
      {
        "sha": "9a4eaf3cff9d37118939e38e7ce029a71e062ee9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a4eaf3cff9d37118939e38e7ce029a71e062ee9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a4eaf3cff9d37118939e38e7ce029a71e062ee9"
      }
    ],
    "stats": {
      "total": 472,
      "additions": 210,
      "deletions": 262
    },
    "files": [
      {
        "sha": "4528150a06df1e01980aaaa2bde4e8a730d04967",
        "filename": "doc/assets-attribution.txt",
        "status": "modified",
        "additions": 9,
        "deletions": 13,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/doc/assets-attribution.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/doc/assets-attribution.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/assets-attribution.txt?ref=21d096357cbd34b41e4330fb72b8875139502055",
        "patch": "@@ -1,8 +1,8 @@\n Icon: src/qt/res/icons/clock*.png, src/qt/res/icons/tx*.png,\n-      src/qt/res/src/clock_green.svg, src/qt/res/src/clock1.svg\n-\t  src/qt/res/src/clock2.svg, src/qt/res/src/clock3.svg\n-\t  src/qt/res/src/clock4.svg, src/qt/res/src/clock5.svg\n-\t  src/qt/res/src/inout.svg, src/qt/res/src/questionmark.svg\n+      src/qt/res/src/clock_green.svg, src/qt/res/src/clock1.svg,\n+      src/qt/res/src/clock2.svg, src/qt/res/src/clock3.svg,\n+      src/qt/res/src/clock4.svg, src/qt/res/src/clock5.svg,\n+      src/qt/res/src/inout.svg, src/qt/res/src/questionmark.svg\n Designer: Wladimir van der Laan\n License: MIT\n \n@@ -38,12 +38,7 @@ Designer: http://www.everaldo.com\n Icon Pack: Crystal SVG\n License: LGPL\n \n-Icon: src/qt/res/icons/toolbar.png\n-Designer: Bitboy (optimized for 16x16 by Wladimir van der Laan)\n-License: Public Domain\n-Site: https://bitcointalk.org/?topic=1756.0\n-\n-Icon:  scripts/img/reload.xcf (modified),src/qt/res/movies/update_spinner.mng\n+Icon:  scripts/img/reload.xcf (modified), src/qt/res/movies/update_spinner.mng\n Icon Pack: Kids\n Designer: Everaldo (Everaldo Coelho)\n License: GNU/GPL \n@@ -56,7 +51,8 @@ License: Oxygen icon theme is dual licensed. You may copy it under the Creative\n \n Icon: src/qt/res/icons/bitcoin.icns, src/qt/res/src/bitcoin.svg,\n       src/qt/res/src/bitcoin.ico, src/qt/res/src/bitcoin.png,\n-      src/qt/res/src/bitcoin_testnet.png, docs/bitcoin_logo_doxygen.png\n-      src/qt/res/images/splash.png, src/qt/res/images/splash_testnet.png\n+      src/qt/res/src/bitcoin_testnet.png, docs/bitcoin_logo_doxygen.png,\n+      src/qt/res/images/splash.png, src/qt/res/images/splash_testnet.png,\n+\t  src/qt/res/icons/toolbar.png\n Designer: Jonas Schnelli (based on the original bitcoin logo from Bitboy)\n-License: MIT\n\\ No newline at end of file\n+License: MIT"
      },
      {
        "sha": "bc2e9c882a43eabde9834facf5f80f7db2debbe2",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=21d096357cbd34b41e4330fb72b8875139502055",
        "patch": "@@ -8,11 +8,11 @@\n // These need to be macros, as version.cpp's and bitcoin-qt.rc's voodoo requires it\n #define CLIENT_VERSION_MAJOR       0\n #define CLIENT_VERSION_MINOR       8\n-#define CLIENT_VERSION_REVISION    0\n-#define CLIENT_VERSION_BUILD       0\n+#define CLIENT_VERSION_REVISION    1\n+#define CLIENT_VERSION_BUILD       99\n \n // Set to true for release, false for prerelease or test build\n-#define CLIENT_VERSION_IS_RELEASE  true\n+#define CLIENT_VERSION_IS_RELEASE  false\n \n // Converts the parameter X to a string after macro replacement on X has been performed.\n // Don't merge these into one macro!"
      },
      {
        "sha": "70a923338618414080b2294bddb5c24a9b02456d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=21d096357cbd34b41e4330fb72b8875139502055",
        "patch": "@@ -334,7 +334,7 @@ std::string HelpMessage()\n         \"  -rpcport=<port>        \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332 or testnet: 18332)\") + \"\\n\" +\n         \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified IP address\") + \"\\n\" +\n         \"  -rpcconnect=<ip>       \" + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\" +\n-        \"  -rpcthreads=<n>        \" + _(\"Use this many threads to service RPC calls (default: 4)\") + \"\\n\" +\n+        \"  -rpcthreads=<n>        \" + _(\"Set the number of threads to service RPC calls (default: 4)\") + \"\\n\" +\n         \"  -blocknotify=<cmd>     \" + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\" +\n         \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\" +\n         \"  -alertnotify=<cmd>     \" + _(\"Execute command when a relevant alert is received (%s in cmd is replaced by message)\") + \"\\n\" +\n@@ -347,7 +347,7 @@ std::string HelpMessage()\n         \"  -txindex               \" + _(\"Maintain a full transaction index (default: 0)\") + \"\\n\" +\n         \"  -loadblock=<file>      \" + _(\"Imports blocks from external blk000??.dat file\") + \"\\n\" +\n         \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \"\\n\" +\n-        \"  -par=N                 \" + _(\"Set the number of script verification threads (1-16, 0=auto, default: 0)\") + \"\\n\" +\n+        \"  -par=<n>               \" + _(\"Set the number of script verification threads (1-16, 0=auto, default: 0)\") + \"\\n\" +\n \n         \"\\n\" + _(\"Block creation options:\") + \"\\n\" +\n         \"  -blockminsize=<n>      \"   + _(\"Set minimum block size in bytes (default: 0)\") + \"\\n\" +"
      },
      {
        "sha": "8284d54c7c048f7a652d32838aa238953e577cab",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 41,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=21d096357cbd34b41e4330fb72b8875139502055",
        "patch": "@@ -297,7 +297,7 @@ bool AddOrphanTx(const CDataStream& vMsg)\n     // at most 500 megabytes of orphans:\n     if (pvMsg->size() > 5000)\n     {\n-        printf(\"ignoring large orphan tx (size: %\"PRIszu\", hash: %s)\\n\", pvMsg->size(), hash.ToString().substr(0,10).c_str());\n+        printf(\"ignoring large orphan tx (size: %\"PRIszu\", hash: %s)\\n\", pvMsg->size(), hash.ToString().c_str());\n         delete pvMsg;\n         return false;\n     }\n@@ -306,7 +306,7 @@ bool AddOrphanTx(const CDataStream& vMsg)\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         mapOrphanTransactionsByPrev[txin.prevout.hash].insert(make_pair(hash, pvMsg));\n \n-    printf(\"stored orphan tx %s (mapsz %\"PRIszu\")\\n\", hash.ToString().substr(0,10).c_str(),\n+    printf(\"stored orphan tx %s (mapsz %\"PRIszu\")\\n\", hash.ToString().c_str(),\n         mapOrphanTransactions.size());\n     return true;\n }\n@@ -770,7 +770,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fCheckIn\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n         if (!tx.CheckInputs(state, view, true, SCRIPT_VERIFY_P2SH))\n         {\n-            return error(\"CTxMemPool::accept() : ConnectInputs failed %s\", hash.ToString().substr(0,10).c_str());\n+            return error(\"CTxMemPool::accept() : ConnectInputs failed %s\", hash.ToString().c_str());\n         }\n     }\n \n@@ -792,7 +792,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fCheckIn\n     SyncWithWallets(hash, tx, NULL, true);\n \n     printf(\"CTxMemPool::accept() : accepted %s (poolsz %\"PRIszu\")\\n\",\n-           hash.ToString().substr(0,10).c_str(),\n+           hash.ToString().c_str(),\n            mapTx.size());\n     return true;\n }\n@@ -1198,11 +1198,11 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n         uiInterface.NotifyBlocksChanged();\n     }\n     printf(\"InvalidChainFound: invalid block=%s  height=%d  work=%s  date=%s\\n\",\n-      BlockHashStr(pindexNew->GetBlockHash()).c_str(), pindexNew->nHeight,\n+      pindexNew->GetBlockHash().ToString().c_str(), pindexNew->nHeight,\n       pindexNew->bnChainWork.ToString().c_str(), DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\",\n       pindexNew->GetBlockTime()).c_str());\n     printf(\"InvalidChainFound:  current best=%s  height=%d  work=%s  date=%s\\n\",\n-      BlockHashStr(hashBestChain).c_str(), nBestHeight, bnBestChainWork.ToString().c_str(),\n+      hashBestChain.ToString().c_str(), nBestHeight, bnBestChainWork.ToString().c_str(),\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n     if (pindexBest && bnBestInvalidWork > bnBestChainWork + pindexBest->GetBlockWork() * 6)\n         printf(\"InvalidChainFound: Warning: Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade.\\n\");\n@@ -1366,7 +1366,7 @@ bool CTransaction::HaveInputs(CCoinsViewCache &inputs) const\n bool CScriptCheck::operator()() const {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     if (!VerifyScript(scriptSig, scriptPubKey, *ptxTo, nIn, nFlags, nHashType))\n-        return error(\"CScriptCheck() : %s VerifySignature failed\", ptxTo->GetHash().ToString().substr(0,10).c_str());\n+        return error(\"CScriptCheck() : %s VerifySignature failed\", ptxTo->GetHash().ToString().c_str());\n     return true;\n }\n \n@@ -1385,7 +1385,7 @@ bool CTransaction::CheckInputs(CValidationState &state, CCoinsViewCache &inputs,\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!HaveInputs(inputs))\n-            return state.Invalid(error(\"CheckInputs() : %s inputs unavailable\", GetHash().ToString().substr(0,10).c_str()));\n+            return state.Invalid(error(\"CheckInputs() : %s inputs unavailable\", GetHash().ToString().c_str()));\n \n         // While checking, GetBestBlock() refers to the parent block.\n         // This is also true for mempool checks.\n@@ -1411,12 +1411,12 @@ bool CTransaction::CheckInputs(CValidationState &state, CCoinsViewCache &inputs,\n         }\n \n         if (nValueIn < GetValueOut())\n-            return state.DoS(100, error(\"CheckInputs() : %s value in < value out\", GetHash().ToString().substr(0,10).c_str()));\n+            return state.DoS(100, error(\"CheckInputs() : %s value in < value out\", GetHash().ToString().c_str()));\n \n         // Tally transaction fees\n         int64 nTxFee = nValueIn - GetValueOut();\n         if (nTxFee < 0)\n-            return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", GetHash().ToString().substr(0,10).c_str()));\n+            return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", GetHash().ToString().c_str()));\n         nFees += nTxFee;\n         if (!MoneyRange(nFees))\n             return state.DoS(100, error(\"CheckInputs() : nFees out of range\"));\n@@ -1750,8 +1750,8 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     reverse(vConnect.begin(), vConnect.end());\n \n     if (vDisconnect.size() > 0) {\n-        printf(\"REORGANIZE: Disconnect %\"PRIszu\" blocks; %s..%s\\n\", vDisconnect.size(), BlockHashStr(pfork->GetBlockHash()).c_str(), BlockHashStr(pindexBest->GetBlockHash()).c_str());\n-        printf(\"REORGANIZE: Connect %\"PRIszu\" blocks; %s..%s\\n\", vConnect.size(), BlockHashStr(pfork->GetBlockHash()).c_str(), BlockHashStr(pindexNew->GetBlockHash()).c_str());\n+        printf(\"REORGANIZE: Disconnect %\"PRIszu\" blocks; %s..\\n\", vDisconnect.size(), pfork->GetBlockHash().ToString().c_str());\n+        printf(\"REORGANIZE: Connect %\"PRIszu\" blocks; ..%s\\n\", vConnect.size(), pindexNew->GetBlockHash().ToString().c_str());\n     }\n \n     // Disconnect shorter branch\n@@ -1762,7 +1762,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n             return state.Abort(_(\"Failed to read block\"));\n         int64 nStart = GetTimeMicros();\n         if (!block.DisconnectBlock(state, pindex, view))\n-            return error(\"SetBestBlock() : DisconnectBlock %s failed\", BlockHashStr(pindex->GetBlockHash()).c_str());\n+            return error(\"SetBestBlock() : DisconnectBlock %s failed\", pindex->GetBlockHash().ToString().c_str());\n         if (fBenchmark)\n             printf(\"- Disconnect: %.2fms\\n\", (GetTimeMicros() - nStart) * 0.001);\n \n@@ -1786,7 +1786,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n                 InvalidChainFound(pindexNew);\n                 InvalidBlockFound(pindex);\n             }\n-            return error(\"SetBestBlock() : ConnectBlock %s failed\", BlockHashStr(pindex->GetBlockHash()).c_str());\n+            return error(\"SetBestBlock() : ConnectBlock %s failed\", pindex->GetBlockHash().ToString().c_str());\n         }\n         if (fBenchmark)\n             printf(\"- Connect: %.2fms\\n\", (GetTimeMicros() - nStart) * 0.001);\n@@ -1862,7 +1862,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     nTimeBestReceived = GetTime();\n     nTransactionsUpdated++;\n     printf(\"SetBestChain: new best=%s  height=%d  work=%s  tx=%lu  date=%s  progress=%f\\n\",\n-      BlockHashStr(hashBestChain).c_str(), nBestHeight, bnBestChainWork.ToString().c_str(), (unsigned long)pindexNew->nChainTx,\n+      hashBestChain.ToString().c_str(), nBestHeight, bnBestChainWork.ToString().c_str(), (unsigned long)pindexNew->nChainTx,\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str(),\n       Checkpoints::GuessVerificationProgress(pindexBest));\n \n@@ -1901,7 +1901,7 @@ bool CBlock::AddToBlockIndex(CValidationState &state, const CDiskBlockPos &pos)\n     // Check for duplicate\n     uint256 hash = GetHash();\n     if (mapBlockIndex.count(hash))\n-        return state.Invalid(error(\"AddToBlockIndex() : %s already exists\", BlockHashStr(hash).c_str()));\n+        return state.Invalid(error(\"AddToBlockIndex() : %s already exists\", hash.ToString().c_str()));\n \n     // Construct new block index object\n     CBlockIndex* pindexNew = new CBlockIndex(*this);\n@@ -2222,9 +2222,9 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n     // Check for duplicate\n     uint256 hash = pblock->GetHash();\n     if (mapBlockIndex.count(hash))\n-        return state.Invalid(error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, BlockHashStr(hash).c_str()));\n+        return state.Invalid(error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().c_str()));\n     if (mapOrphanBlocks.count(hash))\n-        return state.Invalid(error(\"ProcessBlock() : already have block (orphan) %s\", BlockHashStr(hash).c_str()));\n+        return state.Invalid(error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().c_str()));\n \n     // Preliminary checks\n     if (!pblock->CheckBlock(state))\n@@ -2253,7 +2253,7 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n     // If we don't already have its previous block, shunt it off to holding area until we get it\n     if (pblock->hashPrevBlock != 0 && !mapBlockIndex.count(pblock->hashPrevBlock))\n     {\n-        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", BlockHashStr(pblock->hashPrevBlock).c_str());\n+        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().c_str());\n \n         // Accept orphans as long as there is a node to request its parents from\n         if (pfrom) {\n@@ -2589,7 +2589,7 @@ bool static LoadBlockIndexDB()\n          pindex = pindexPrev;\n     }\n     printf(\"LoadBlockIndexDB(): hashBestChain=%s  height=%d date=%s\\n\",\n-        BlockHashStr(hashBestChain).c_str(), nBestHeight,\n+        hashBestChain.ToString().c_str(), nBestHeight,\n         DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n \n     return true;\n@@ -3235,18 +3235,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             }\n         }\n \n-        // Ask the first connected node for block updates\n-        static int nAskedForBlocks = 0;\n-        if (!pfrom->fClient && !pfrom->fOneShot && !fImporting && !fReindex &&\n-            (pfrom->nStartingHeight > (nBestHeight - 144)) &&\n-            (pfrom->nVersion < NOBLKS_VERSION_START ||\n-             pfrom->nVersion >= NOBLKS_VERSION_END) &&\n-             (nAskedForBlocks < 1 || vNodes.size() <= 1))\n-        {\n-            nAskedForBlocks++;\n-            pfrom->PushGetBlocks(pindexBest, uint256(0));\n-        }\n-\n         // Relay alerts\n         {\n             LOCK(cs_mapAlerts);\n@@ -3426,20 +3414,20 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (pindex)\n             pindex = pindex->pnext;\n         int nLimit = 500;\n-        printf(\"getblocks %d to %s limit %d\\n\", (pindex ? pindex->nHeight : -1), BlockHashStr(hashStop).c_str(), nLimit);\n+        printf(\"getblocks %d to %s limit %d\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().c_str(), nLimit);\n         for (; pindex; pindex = pindex->pnext)\n         {\n             if (pindex->GetBlockHash() == hashStop)\n             {\n-                printf(\"  getblocks stopping at %d %s\\n\", pindex->nHeight, BlockHashStr(pindex->GetBlockHash()).c_str());\n+                printf(\"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n                 break;\n             }\n             pfrom->PushInventory(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n             if (--nLimit <= 0)\n             {\n                 // When this block is requested, we'll send an inv that'll make them\n                 // getblocks the next batch of inventory.\n-                printf(\"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, BlockHashStr(pindex->GetBlockHash()).c_str());\n+                printf(\"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n                 pfrom->hashContinue = pindex->GetBlockHash();\n                 break;\n             }\n@@ -3473,7 +3461,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         // we must use CBlocks, as CBlockHeaders won't include the 0x00 nTx count at the end\n         vector<CBlock> vHeaders;\n         int nLimit = 2000;\n-        printf(\"getheaders %d to %s\\n\", (pindex ? pindex->nHeight : -1), BlockHashStr(hashStop).c_str());\n+        printf(\"getheaders %d to %s\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().c_str());\n         for (; pindex; pindex = pindex->pnext)\n         {\n             vHeaders.push_back(pindex->GetBlockHeader());\n@@ -3522,7 +3510,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n                     if (tx.AcceptToMemoryPool(stateDummy, true, true, &fMissingInputs2))\n                     {\n-                        printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n+                        printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().c_str());\n                         RelayTransaction(tx, inv.hash, vMsg);\n                         mapAlreadyAskedFor.erase(inv);\n                         vWorkQueue.push_back(inv.hash);\n@@ -3532,7 +3520,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     {\n                         // invalid or too-little-fee orphan\n                         vEraseQueue.push_back(inv.hash);\n-                        printf(\"   removed orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n+                        printf(\"   removed orphan tx %s\\n\", inv.hash.ToString().c_str());\n                     }\n                 }\n             }\n@@ -3560,7 +3548,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CBlock block;\n         vRecv >> block;\n \n-        printf(\"received block %s\\n\", BlockHashStr(block.GetHash()).c_str());\n+        printf(\"received block %s\\n\", block.GetHash().ToString().c_str());\n         // block.print();\n \n         CInv inv(MSG_BLOCK, block.GetHash());\n@@ -3855,6 +3843,12 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                 pto->PushMessage(\"ping\");\n         }\n \n+        // Start block sync\n+        if (pto->fStartSync && !fImporting && !fReindex) {\n+            pto->fStartSync = false;\n+            pto->PushGetBlocks(pindexBest, uint256(0));\n+        }\n+\n         // Resend wallet transactions that haven't gotten in a block yet\n         // Except during reindex, importing and IBD, when old wallet\n         // transactions become unconfirmed and spams other nodes.\n@@ -4107,9 +4101,9 @@ class COrphan\n     void print() const\n     {\n         printf(\"COrphan(hash=%s, dPriority=%.1f, dFeePerKb=%.1f)\\n\",\n-               ptx->GetHash().ToString().substr(0,10).c_str(), dPriority, dFeePerKb);\n+               ptx->GetHash().ToString().c_str(), dPriority, dFeePerKb);\n         BOOST_FOREACH(uint256 hash, setDependsOn)\n-            printf(\"   setDependsOn %s\\n\", hash.ToString().substr(0,10).c_str());\n+            printf(\"   setDependsOn %s\\n\", hash.ToString().c_str());\n     }\n };\n "
      },
      {
        "sha": "9a3664a43786d6e530a6c60c82388bf71ac0d1bb",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=21d096357cbd34b41e4330fb72b8875139502055",
        "patch": "@@ -195,11 +195,6 @@ bool AbortNode(const std::string &msg);\n \n \n \n-static inline std::string BlockHashStr(const uint256& hash)\n-{\n-    return hash.ToString();\n-}\n-\n bool GetWalletFile(CWallet* pwallet, std::string &strWalletFileOut);\n \n struct CDiskBlockPos\n@@ -301,7 +296,7 @@ class COutPoint\n \n     std::string ToString() const\n     {\n-        return strprintf(\"COutPoint(%s, %u)\", hash.ToString().substr(0,10).c_str(), n);\n+        return strprintf(\"COutPoint(%s, %u)\", hash.ToString().c_str(), n);\n     }\n \n     void print() const\n@@ -635,7 +630,7 @@ class CTransaction\n     {\n         std::string str;\n         str += strprintf(\"CTransaction(hash=%s, ver=%d, vin.size=%\"PRIszu\", vout.size=%\"PRIszu\", nLockTime=%u)\\n\",\n-            GetHash().ToString().substr(0,10).c_str(),\n+            GetHash().ToString().c_str(),\n             nVersion,\n             vin.size(),\n             vout.size(),\n@@ -1472,10 +1467,10 @@ class CBlock : public CBlockHeader\n     void print() const\n     {\n         printf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%\"PRIszu\")\\n\",\n-            BlockHashStr(GetHash()).c_str(),\n+            GetHash().ToString().c_str(),\n             nVersion,\n-            BlockHashStr(hashPrevBlock).c_str(),\n-            hashMerkleRoot.ToString().substr(0,10).c_str(),\n+            hashPrevBlock.ToString().c_str(),\n+            hashMerkleRoot.ToString().c_str(),\n             nTime, nBits, nNonce,\n             vtx.size());\n         for (unsigned int i = 0; i < vtx.size(); i++)\n@@ -1485,7 +1480,7 @@ class CBlock : public CBlockHeader\n         }\n         printf(\"  vMerkleTree: \");\n         for (unsigned int i = 0; i < vMerkleTree.size(); i++)\n-            printf(\"%s \", vMerkleTree[i].ToString().substr(0,10).c_str());\n+            printf(\"%s \", vMerkleTree[i].ToString().c_str());\n         printf(\"\\n\");\n     }\n \n@@ -1785,8 +1780,8 @@ class CBlockIndex\n     {\n         return strprintf(\"CBlockIndex(pprev=%p, pnext=%p, nHeight=%d, merkle=%s, hashBlock=%s)\",\n             pprev, pnext, nHeight,\n-            hashMerkleRoot.ToString().substr(0,10).c_str(),\n-            BlockHashStr(GetBlockHash()).c_str());\n+            hashMerkleRoot.ToString().c_str(),\n+            GetBlockHash().ToString().c_str());\n     }\n \n     void print() const\n@@ -1867,7 +1862,7 @@ class CDiskBlockIndex : public CBlockIndex\n         str += CBlockIndex::ToString();\n         str += strprintf(\"\\n                hashBlock=%s, hashPrev=%s)\",\n             GetBlockHash().ToString().c_str(),\n-            BlockHashStr(hashPrev).c_str());\n+            hashPrev.ToString().c_str());\n         return str;\n     }\n "
      },
      {
        "sha": "755312682bb8ed44f5d5f31911616764c723b8b1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 7,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=21d096357cbd34b41e4330fb72b8875139502055",
        "patch": "@@ -44,6 +44,7 @@ static map<CNetAddr, LocalServiceInfo> mapLocalHost;\n static bool vfReachable[NET_MAX] = {};\n static bool vfLimited[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n+static CNode* pnodeSync = NULL;\n uint64 nLocalHostNonce = 0;\n static std::vector<SOCKET> vhListenSocket;\n CAddrMan addrman;\n@@ -515,12 +516,16 @@ void CNode::CloseSocketDisconnect()\n         printf(\"disconnecting node %s\\n\", addrName.c_str());\n         closesocket(hSocket);\n         hSocket = INVALID_SOCKET;\n-\n-        // in case this fails, we'll empty the recv buffer when the CNode is deleted\n-        TRY_LOCK(cs_vRecvMsg, lockRecv);\n-        if (lockRecv)\n-            vRecvMsg.clear();\n     }\n+\n+    // in case this fails, we'll empty the recv buffer when the CNode is deleted\n+    TRY_LOCK(cs_vRecvMsg, lockRecv);\n+    if (lockRecv)\n+        vRecvMsg.clear();\n+\n+    // if this was the sync node, we'll need a new one\n+    if (this == pnodeSync)\n+        pnodeSync = NULL;\n }\n \n void CNode::Cleanup()\n@@ -607,6 +612,9 @@ void CNode::copyStats(CNodeStats &stats)\n     X(fInbound);\n     X(nStartingHeight);\n     X(nMisbehavior);\n+    X(nSendBytes);\n+    X(nRecvBytes);\n+    stats.fSyncNode = (this == pnodeSync);\n }\n #undef X\n \n@@ -701,6 +709,7 @@ void SocketSendData(CNode *pnode)\n         int nBytes = send(pnode->hSocket, &data[pnode->nSendOffset], data.size() - pnode->nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n         if (nBytes > 0) {\n             pnode->nLastSend = GetTime();\n+            pnode->nSendBytes += nBytes;\n             pnode->nSendOffset += nBytes;\n             if (pnode->nSendOffset == data.size()) {\n                 pnode->nSendOffset = 0;\n@@ -963,6 +972,7 @@ void ThreadSocketHandler()\n                             if (!pnode->ReceiveMsgBytes(pchBuf, nBytes))\n                                 pnode->CloseSocketDisconnect();\n                             pnode->nLastRecv = GetTime();\n+                            pnode->nRecvBytes += nBytes;\n                         }\n                         else if (nBytes == 0)\n                         {\n@@ -1538,24 +1548,64 @@ bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOu\n }\n \n \n+// for now, use a very simple selection metric: the node from which we received\n+// most recently\n+double static NodeSyncScore(const CNode *pnode) {\n+    return -pnode->nLastRecv;\n+}\n \n+void static StartSync(const vector<CNode*> &vNodes) {\n+    CNode *pnodeNewSync = NULL;\n+    double dBestScore = 0;\n \n+    // fImporting and fReindex are accessed out of cs_main here, but only\n+    // as an optimization - they are checked again in SendMessages.\n+    if (fImporting || fReindex)\n+        return;\n \n-\n+    // Iterate over all nodes\n+    BOOST_FOREACH(CNode* pnode, vNodes) {\n+        // check preconditions for allowing a sync\n+        if (!pnode->fClient && !pnode->fOneShot &&\n+            !pnode->fDisconnect && pnode->fSuccessfullyConnected &&\n+            (pnode->nStartingHeight > (nBestHeight - 144)) &&\n+            (pnode->nVersion < NOBLKS_VERSION_START || pnode->nVersion >= NOBLKS_VERSION_END)) {\n+            // if ok, compare node's score with the best so far\n+            double dScore = NodeSyncScore(pnode);\n+            if (pnodeNewSync == NULL || dScore > dBestScore) {\n+                pnodeNewSync = pnode;\n+                dBestScore = dScore;\n+            }\n+        }\n+    }\n+    // if a new sync candidate was found, start sync!\n+    if (pnodeNewSync) {\n+        pnodeNewSync->fStartSync = true;\n+        pnodeSync = pnodeNewSync;\n+    }\n+}\n \n void ThreadMessageHandler()\n {\n     SetThreadPriority(THREAD_PRIORITY_BELOW_NORMAL);\n     while (true)\n     {\n+        bool fHaveSyncNode = false;\n+\n         vector<CNode*> vNodesCopy;\n         {\n             LOCK(cs_vNodes);\n             vNodesCopy = vNodes;\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            BOOST_FOREACH(CNode* pnode, vNodesCopy) {\n                 pnode->AddRef();\n+                if (pnode == pnodeSync)\n+                    fHaveSyncNode = true;\n+            }\n         }\n \n+        if (!fHaveSyncNode)\n+            StartSync(vNodesCopy);\n+\n         // Poll the connected nodes for messages\n         CNode* pnodeTrickle = NULL;\n         if (!vNodesCopy.empty())"
      },
      {
        "sha": "32bbbca6dcc3ba2f6262344657fcf3548b791ab6",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=21d096357cbd34b41e4330fb72b8875139502055",
        "patch": "@@ -101,6 +101,9 @@ class CNodeStats\n     bool fInbound;\n     int nStartingHeight;\n     int nMisbehavior;\n+    uint64 nSendBytes;\n+    uint64 nRecvBytes;\n+    bool fSyncNode;\n };\n \n \n@@ -155,12 +158,14 @@ class CNode\n     CDataStream ssSend;\n     size_t nSendSize; // total size of all vSendMsg entries\n     size_t nSendOffset; // offset inside the first vSendMsg already sent\n+    uint64 nSendBytes;\n     std::deque<CSerializeData> vSendMsg;\n     CCriticalSection cs_vSend;\n \n     std::deque<CInv> vRecvGetData;\n     std::deque<CNetMessage> vRecvMsg;\n     CCriticalSection cs_vRecvMsg;\n+    uint64 nRecvBytes;\n     int nRecvVersion;\n \n     int64 nLastSend;\n@@ -200,6 +205,7 @@ class CNode\n     CBlockIndex* pindexLastGetBlocksBegin;\n     uint256 hashLastGetBlocksEnd;\n     int nStartingHeight;\n+    bool fStartSync;\n \n     // flood relay\n     std::vector<CAddress> vAddrToSend;\n@@ -220,6 +226,8 @@ class CNode\n         nRecvVersion = MIN_PROTO_VERSION;\n         nLastSend = 0;\n         nLastRecv = 0;\n+        nSendBytes = 0;\n+        nRecvBytes = 0;\n         nLastSendEmpty = GetTime();\n         nTimeConnected = GetTime();\n         addr = addrIn;\n@@ -239,6 +247,7 @@ class CNode\n         pindexLastGetBlocksBegin = 0;\n         hashLastGetBlocksEnd = 0;\n         nStartingHeight = -1;\n+        fStartSync = false;\n         fGetAddr = false;\n         nMisbehavior = 0;\n         fRelayTxes = false;"
      },
      {
        "sha": "88bbe49afd5a67a5e39bc9c99951b16ac2943557",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=21d096357cbd34b41e4330fb72b8875139502055",
        "patch": "@@ -142,12 +142,7 @@ const char* CInv::GetCommand() const\n \n std::string CInv::ToString() const\n {\n-    if (type == MSG_BLOCK)\n-        return strprintf(\"%s %s\", GetCommand(), BlockHashStr(hash).c_str());\n-    if (type == MSG_TX)\n-        return strprintf(\"%s %s\", GetCommand(), hash.ToString().substr(0,10).c_str());\n-\n-    return strprintf(\"%s %s\", GetCommand(), hash.ToString().substr(0,20).c_str());\n+    return strprintf(\"%s %s\", GetCommand(), hash.ToString().c_str());\n }\n \n void CInv::print() const"
      },
      {
        "sha": "23c69fef21bcfebea57d527869268f34d6698155",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=21d096357cbd34b41e4330fb72b8875139502055",
        "patch": "@@ -28,9 +28,11 @@ AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n     ui->setupUi(this);\n \n #ifdef Q_OS_MAC // Icons on push buttons are very uncommon on Mac\n-    ui->newAddressButton->setIcon(QIcon());\n-    ui->copyToClipboard->setIcon(QIcon());\n-    ui->deleteButton->setIcon(QIcon());\n+    ui->newAddress->setIcon(QIcon());\n+    ui->copyAddress->setIcon(QIcon());\n+    ui->deleteAddress->setIcon(QIcon());\n+    ui->verifyMessage->setIcon(QIcon());\n+    ui->signMessage->setIcon(QIcon());\n #endif\n \n #ifndef USE_QRCODE"
      },
      {
        "sha": "4f3bb106424805a2492da7a8427a8cda03beba68",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=21d096357cbd34b41e4330fb72b8875139502055",
        "patch": "@@ -119,7 +119,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Disk space is low!\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Transaction creation failed!\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Wallet locked, unable to create transaction!\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: could not start node\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: system error: \"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to listen on any port. Use -listen=0 if you want this.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to read block info\"),\n@@ -177,6 +176,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set database cache size in megabytes (default\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set key pool size to <n> (default: 100)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set maximum block size in bytes (default: 250000)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set minimum block size in bytes (default: 0)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Set the number of threads to service RPC calls (default: 4)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify configuration file (default: bitcoin.conf)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify connection timeout in milliseconds (default: 5000)\"),"
      },
      {
        "sha": "c17c602b50540845150c829927255feecddd7a23",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=21d096357cbd34b41e4330fb72b8875139502055",
        "patch": "@@ -17,7 +17,9 @@ static const int64 nClientStartupTime = GetTime();\n \n ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent), optionsModel(optionsModel),\n-    cachedNumBlocks(0), cachedNumBlocksOfPeers(0), numBlocksAtStartup(-1), pollTimer(0)\n+    cachedNumBlocks(0), cachedNumBlocksOfPeers(0),\n+    cachedReindexing(0), cachedImporting(0),\n+    numBlocksAtStartup(-1), pollTimer(0)\n {\n     pollTimer = new QTimer(this);\n     pollTimer->setInterval(MODEL_UPDATE_DELAY);\n@@ -70,10 +72,14 @@ void ClientModel::updateTimer()\n     int newNumBlocks = getNumBlocks();\n     int newNumBlocksOfPeers = getNumBlocksOfPeers();\n \n-    if(cachedNumBlocks != newNumBlocks || cachedNumBlocksOfPeers != newNumBlocksOfPeers)\n+    // check for changed number of blocks we have, number of blocks peers claim to have, reindexing state and importing state\n+    if (cachedNumBlocks != newNumBlocks || cachedNumBlocksOfPeers != newNumBlocksOfPeers ||\n+        cachedReindexing != fReindex || cachedImporting != fImporting)\n     {\n         cachedNumBlocks = newNumBlocks;\n         cachedNumBlocksOfPeers = newNumBlocksOfPeers;\n+        cachedReindexing = fReindex;\n+        cachedImporting = fImporting;\n \n         // ensure we return the maximum of newNumBlocksOfPeers and newNumBlocks to not create weird displays in the GUI\n         emit numBlocksChanged(newNumBlocks, std::max(newNumBlocksOfPeers, newNumBlocks));"
      },
      {
        "sha": "904bff1886f827f488d5df1baa43f230738b89c7",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=21d096357cbd34b41e4330fb72b8875139502055",
        "patch": "@@ -60,6 +60,8 @@ class ClientModel : public QObject\n \n     int cachedNumBlocks;\n     int cachedNumBlocksOfPeers;\n+\tbool cachedReindexing;\n+\tbool cachedImporting;\n \n     int numBlocksAtStartup;\n "
      },
      {
        "sha": "105a5c6ab2a130bfc6f1a959f75883256f2a9602",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 60,
        "deletions": 165,
        "changes": 225,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=21d096357cbd34b41e4330fb72b8875139502055",
        "patch": "@@ -48,7 +48,7 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>Address Book</translation>\n     </message>\n     <message>\n-        <location line=\"+22\"/>\n+        <location line=\"+19\"/>\n         <source>Double-click to edit address or label</source>\n         <translation>Double-click to edit address or label</translation>\n     </message>\n@@ -68,12 +68,12 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>&amp;New Address</translation>\n     </message>\n     <message>\n-        <location line=\"-46\"/>\n+        <location filename=\"../addressbookpage.cpp\" line=\"+59\"/>\n         <source>These are your Bitcoin addresses for receiving payments. You may want to give a different one to each sender so you can keep track of who is paying you.</source>\n         <translation>These are your Bitcoin addresses for receiving payments. You may want to give a different one to each sender so you can keep track of who is paying you.</translation>\n     </message>\n     <message>\n-        <location line=\"+60\"/>\n+        <location filename=\"../forms/addressbookpage.ui\" line=\"+14\"/>\n         <source>&amp;Copy Address</source>\n         <translation>&amp;Copy Address</translation>\n     </message>\n@@ -113,7 +113,12 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>&amp;Delete</translation>\n     </message>\n     <message>\n-        <location filename=\"../addressbookpage.cpp\" line=\"+66\"/>\n+        <location filename=\"../addressbookpage.cpp\" line=\"-5\"/>\n+        <source>These are your Bitcoin addresses for sending payments. Always check the amount and the receiving address before sending coins.</source>\n+        <translation>These are your Bitcoin addresses for sending payments. Always check the amount and the receiving address before sending coins.</translation>\n+    </message>\n+    <message>\n+        <location line=\"+13\"/>\n         <source>Copy &amp;Label</source>\n         <translation>Copy &amp;Label</translation>\n     </message>\n@@ -128,7 +133,7 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>Send &amp;Coins</translation>\n     </message>\n     <message>\n-        <location line=\"+263\"/>\n+        <location line=\"+260\"/>\n         <source>Export Address Book Data</source>\n         <translation>Export Address Book Data</translation>\n     </message>\n@@ -310,7 +315,7 @@ This product includes software developed by the OpenSSL Project for use in the O\n <context>\n     <name>BitcoinGUI</name>\n     <message>\n-        <location filename=\"../bitcoingui.cpp\" line=\"+231\"/>\n+        <location filename=\"../bitcoingui.cpp\" line=\"+233\"/>\n         <source>Sign &amp;message...</source>\n         <translation>Sign &amp;message...</translation>\n     </message>\n@@ -320,7 +325,7 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>Synchronizing with network...</translation>\n     </message>\n     <message>\n-        <location line=\"-367\"/>\n+        <location line=\"-368\"/>\n         <source>&amp;Overview</source>\n         <translation>&amp;Overview</translation>\n     </message>\n@@ -380,7 +385,7 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>&amp;Options...</translation>\n     </message>\n     <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+6\"/>\n         <source>&amp;Encrypt Wallet...</source>\n         <translation>&amp;Encrypt Wallet...</translation>\n     </message>\n@@ -410,7 +415,7 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>&amp;Export...</translation>\n     </message>\n     <message>\n-        <location line=\"-65\"/>\n+        <location line=\"-66\"/>\n         <source>Send coins to a Bitcoin address</source>\n         <translation>Send coins to a Bitcoin address</translation>\n     </message>\n@@ -420,7 +425,7 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>Modify configuration options for Bitcoin</translation>\n     </message>\n     <message>\n-        <location line=\"+17\"/>\n+        <location line=\"+18\"/>\n         <source>Export the data in the current tab to a file</source>\n         <translation>Export the data in the current tab to a file</translation>\n     </message>\n@@ -450,13 +455,13 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>&amp;Verify message...</translation>\n     </message>\n     <message>\n-        <location line=\"-162\"/>\n-        <location line=\"+540\"/>\n+        <location line=\"-163\"/>\n+        <location line=\"+541\"/>\n         <source>Bitcoin</source>\n         <translation>Bitcoin</translation>\n     </message>\n     <message>\n-        <location line=\"-540\"/>\n+        <location line=\"-541\"/>\n         <source>Wallet</source>\n         <translation>Wallet</translation>\n     </message>\n@@ -491,7 +496,7 @@ This product includes software developed by the OpenSSL Project for use in the O\n         <translation>Show or hide the main Window</translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n+        <location line=\"+3\"/>\n         <source>Encrypt the private keys that belong to your wallet</source>\n         <translation>Encrypt the private keys that belong to your wallet</translation>\n     </message>\n@@ -679,15 +684,15 @@ Address: %4\n         <translation>Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;locked&lt;/b&gt;</translation>\n     </message>\n     <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"+108\"/>\n+        <location filename=\"../bitcoin.cpp\" line=\"+104\"/>\n         <source>A fatal error occurred. Bitcoin can no longer continue safely and will quit.</source>\n         <translation>A fatal error occurred. Bitcoin can no longer continue safely and will quit.</translation>\n     </message>\n </context>\n <context>\n     <name>ClientModel</name>\n     <message>\n-        <location filename=\"../clientmodel.cpp\" line=\"+96\"/>\n+        <location filename=\"../clientmodel.cpp\" line=\"+98\"/>\n         <source>Network Alert</source>\n         <translation>Network Alert</translation>\n     </message>\n@@ -763,7 +768,7 @@ Address: %4\n <context>\n     <name>GUIUtil::HelpMessageBox</name>\n     <message>\n-        <location filename=\"../guiutil.cpp\" line=\"+422\"/>\n+        <location filename=\"../guiutil.cpp\" line=\"+424\"/>\n         <location line=\"+12\"/>\n         <source>Bitcoin-Qt</source>\n         <translation>Bitcoin-Qt</translation>\n@@ -1157,7 +1162,7 @@ Address: %4\n         <location line=\"+53\"/>\n         <location line=\"+23\"/>\n         <location line=\"+23\"/>\n-        <location filename=\"../rpcconsole.cpp\" line=\"+344\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"+339\"/>\n         <source>N/A</source>\n         <translation>N/A</translation>\n     </message>\n@@ -2146,117 +2151,7 @@ Address: %4\n <context>\n     <name>WalletView</name>\n     <message>\n-        <location filename=\"../walletview.cpp\" line=\"+95\"/>\n-        <source>&amp;Overview</source>\n-        <translation>&amp;Overview</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Show general overview of wallet</source>\n-        <translation>Show general overview of wallet</translation>\n-    </message>\n-    <message>\n-        <location line=\"+6\"/>\n-        <source>&amp;Send coins</source>\n-        <translation>&amp;Send coins</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Send coins to a Bitcoin address</source>\n-        <translation>Send coins to a Bitcoin address</translation>\n-    </message>\n-    <message>\n-        <location line=\"+6\"/>\n-        <source>&amp;Receive coins</source>\n-        <translation>&amp;Receive coins</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Show the list of addresses for receiving payments</source>\n-        <translation>Show the list of addresses for receiving payments</translation>\n-    </message>\n-    <message>\n-        <location line=\"+6\"/>\n-        <source>&amp;Transactions</source>\n-        <translation>&amp;Transactions</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Browse transaction history</source>\n-        <translation>Browse transaction history</translation>\n-    </message>\n-    <message>\n-        <location line=\"+6\"/>\n-        <source>&amp;Address Book</source>\n-        <translation>&amp;Address Book</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Edit the list of stored addresses and labels</source>\n-        <translation>Edit the list of stored addresses and labels</translation>\n-    </message>\n-    <message>\n-        <location line=\"+12\"/>\n-        <source>&amp;Encrypt Wallet...</source>\n-        <translation>&amp;Encrypt Wallet...</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Encrypt the private keys that belong to your wallet</source>\n-        <translation>Encrypt the private keys that belong to your wallet</translation>\n-    </message>\n-    <message>\n-        <location line=\"+2\"/>\n-        <source>&amp;Backup Wallet...</source>\n-        <translation>&amp;Backup Wallet...</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Backup wallet to another location</source>\n-        <translation>Backup wallet to another location</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>&amp;Change Passphrase...</source>\n-        <translation>&amp;Change Passphrase...</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Change the passphrase used for wallet encryption</source>\n-        <translation>Change the passphrase used for wallet encryption</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Sign &amp;message...</source>\n-        <translation>Sign &amp;message...</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Sign messages with your Bitcoin addresses to prove you own them</source>\n-        <translation>Sign messages with your Bitcoin addresses to prove you own them</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>&amp;Verify message...</source>\n-        <translation>&amp;Verify message...</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Verify messages to ensure they were signed with specified Bitcoin addresses</source>\n-        <translation>Verify messages to ensure they were signed with specified Bitcoin addresses</translation>\n-    </message>\n-    <message>\n-        <location line=\"+2\"/>\n-        <source>&amp;Export...</source>\n-        <translation>&amp;Export...</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Export the data in the current tab to a file</source>\n-        <translation>Export the data in the current tab to a file</translation>\n-    </message>\n-    <message>\n-        <location line=\"+180\"/>\n+        <location filename=\"../walletview.cpp\" line=\"+247\"/>\n         <source>Backup Wallet</source>\n         <translation>Backup Wallet</translation>\n     </message>\n@@ -2299,7 +2194,7 @@ Address: %4\n         <translation>Usage:</translation>\n     </message>\n     <message>\n-        <location line=\"-24\"/>\n+        <location line=\"-25\"/>\n         <source>Send command to -server or bitcoind</source>\n         <translation>Send command to -server or bitcoind</translation>\n     </message>\n@@ -2319,7 +2214,7 @@ Address: %4\n         <translation>Options:</translation>\n     </message>\n     <message>\n-        <location line=\"+22\"/>\n+        <location line=\"+23\"/>\n         <source>Specify configuration file (default: bitcoin.conf)</source>\n         <translation>Specify configuration file (default: bitcoin.conf)</translation>\n     </message>\n@@ -2329,12 +2224,12 @@ Address: %4\n         <translation>Specify pid file (default: bitcoind.pid)</translation>\n     </message>\n     <message>\n-        <location line=\"-47\"/>\n+        <location line=\"-48\"/>\n         <source>Generate coins</source>\n         <translation>Generate coins</translation>\n     </message>\n     <message>\n-        <location line=\"-28\"/>\n+        <location line=\"-27\"/>\n         <source>Don&apos;t generate coins</source>\n         <translation>Don&apos;t generate coins</translation>\n     </message>\n@@ -2344,7 +2239,7 @@ Address: %4\n         <translation>Specify data directory</translation>\n     </message>\n     <message>\n-        <location line=\"-7\"/>\n+        <location line=\"-8\"/>\n         <source>Set database cache size in megabytes (default: 25)</source>\n         <translation>Set database cache size in megabytes (default: 25)</translation>\n     </message>\n@@ -2359,7 +2254,7 @@ Address: %4\n         <translation>Maintain at most &lt;n&gt; connections to peers (default: 125)</translation>\n     </message>\n     <message>\n-        <location line=\"-49\"/>\n+        <location line=\"-48\"/>\n         <source>Connect to a node to retrieve peer addresses, and disconnect</source>\n         <translation>Connect to a node to retrieve peer addresses, and disconnect</translation>\n     </message>\n@@ -2394,12 +2289,12 @@ Address: %4\n         <translation>Accept command line and JSON-RPC commands</translation>\n     </message>\n     <message>\n-        <location line=\"+77\"/>\n+        <location line=\"+76\"/>\n         <source>Run in the background as a daemon and accept commands</source>\n         <translation>Run in the background as a daemon and accept commands</translation>\n     </message>\n     <message>\n-        <location line=\"+32\"/>\n+        <location line=\"+33\"/>\n         <source>Use the test network</source>\n         <translation>Use the test network</translation>\n     </message>\n@@ -2579,7 +2474,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Error: Wallet locked, unable to create transaction!</translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n+        <location line=\"+1\"/>\n         <source>Error: system error: </source>\n         <translation>Error: system error: </translation>\n     </message>\n@@ -2659,7 +2554,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Rebuild block chain index from current blk000??.dat files</translation>\n     </message>\n     <message>\n-        <location line=\"+37\"/>\n+        <location line=\"+16\"/>\n+        <source>Set the number of threads to service RPC calls (default: 4)</source>\n+        <translation>Set the number of threads to service RPC calls (default: 4)</translation>\n+    </message>\n+    <message>\n+        <location line=\"+22\"/>\n         <source>Verifying blocks...</source>\n         <translation>Verifying blocks...</translation>\n     </message>\n@@ -2669,7 +2569,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Verifying wallet...</translation>\n     </message>\n     <message>\n-        <location line=\"-61\"/>\n+        <location line=\"-62\"/>\n         <source>Imports blocks from external blk000??.dat file</source>\n         <translation>Imports blocks from external blk000??.dat file</translation>\n     </message>\n@@ -2754,7 +2654,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Set minimum block size in bytes (default: 0)</translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n+        <location line=\"+2\"/>\n         <source>Shrink debug.log file on client startup (default: 1 when no -debug)</source>\n         <translation>Shrink debug.log file on client startup (default: 1 when no -debug)</translation>\n     </message>\n@@ -2809,22 +2709,22 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>wallet.dat corrupt, salvage failed</translation>\n     </message>\n     <message>\n-        <location line=\"-45\"/>\n+        <location line=\"-46\"/>\n         <source>Password for JSON-RPC connections</source>\n         <translation>Password for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"-68\"/>\n+        <location line=\"-67\"/>\n         <source>Allow JSON-RPC connections from specified IP address</source>\n         <translation>Allow JSON-RPC connections from specified IP address</translation>\n     </message>\n     <message>\n-        <location line=\"+77\"/>\n+        <location line=\"+76\"/>\n         <source>Send commands to node running on &lt;ip&gt; (default: 127.0.0.1)</source>\n         <translation>Send commands to node running on &lt;ip&gt; (default: 127.0.0.1)</translation>\n     </message>\n     <message>\n-        <location line=\"-120\"/>\n+        <location line=\"-119\"/>\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Execute command when the best block changes (%s in cmd is replaced by block hash)</translation>\n     </message>\n@@ -2834,7 +2734,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Upgrade wallet to latest format</translation>\n     </message>\n     <message>\n-        <location line=\"-16\"/>\n+        <location line=\"-17\"/>\n         <source>Set key pool size to &lt;n&gt; (default: 100)</source>\n         <translation>Set key pool size to &lt;n&gt; (default: 100)</translation>\n     </message>\n@@ -2844,12 +2744,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Rescan the block chain for missing wallet transactions</translation>\n     </message>\n     <message>\n-        <location line=\"+30\"/>\n+        <location line=\"+31\"/>\n         <source>Use OpenSSL (https) for JSON-RPC connections</source>\n         <translation>Use OpenSSL (https) for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"-21\"/>\n+        <location line=\"-22\"/>\n         <source>Server certificate file (default: server.cert)</source>\n         <translation>Server certificate file (default: server.cert)</translation>\n     </message>\n@@ -2859,7 +2759,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Server private key (default: server.pem)</translation>\n     </message>\n     <message>\n-        <location line=\"-154\"/>\n+        <location line=\"-153\"/>\n         <source>Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)</source>\n         <translation>Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)</translation>\n     </message>\n@@ -2884,12 +2784,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Allow DNS lookups for -addnode, -seednode and -connect</translation>\n     </message>\n     <message>\n-        <location line=\"+57\"/>\n+        <location line=\"+56\"/>\n         <source>Loading addresses...</source>\n         <translation>Loading addresses...</translation>\n     </message>\n     <message>\n-        <location line=\"-35\"/>\n+        <location line=\"-34\"/>\n         <source>Error loading wallet.dat: Wallet corrupted</source>\n         <translation>Error loading wallet.dat: Wallet corrupted</translation>\n     </message>\n@@ -2909,12 +2809,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Error loading wallet.dat</translation>\n     </message>\n     <message>\n-        <location line=\"+30\"/>\n+        <location line=\"+29\"/>\n         <source>Invalid -proxy address: &apos;%s&apos;</source>\n         <translation>Invalid -proxy address: &apos;%s&apos;</translation>\n     </message>\n     <message>\n-        <location line=\"+48\"/>\n+        <location line=\"+49\"/>\n         <source>Unknown network specified in -onlynet: &apos;%s&apos;</source>\n         <translation>Unknown network specified in -onlynet: &apos;%s&apos;</translation>\n     </message>\n@@ -2934,17 +2834,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Cannot resolve -externalip address: &apos;%s&apos;</translation>\n     </message>\n     <message>\n-        <location line=\"+45\"/>\n+        <location line=\"+44\"/>\n         <source>Invalid amount for -paytxfee=&lt;amount&gt;: &apos;%s&apos;</source>\n         <translation>Invalid amount for -paytxfee=&lt;amount&gt;: &apos;%s&apos;</translation>\n     </message>\n     <message>\n-        <location line=\"-24\"/>\n-        <source>Error: could not start node</source>\n-        <translation>Error: could not start node</translation>\n-    </message>\n-    <message>\n-        <location line=\"+25\"/>\n+        <location line=\"+1\"/>\n         <source>Invalid amount</source>\n         <translation>Invalid amount</translation>\n     </message>\n@@ -2959,7 +2854,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Loading block index...</translation>\n     </message>\n     <message>\n-        <location line=\"-59\"/>\n+        <location line=\"-58\"/>\n         <source>Add a node to connect to and attempt to keep the connection open</source>\n         <translation>Add a node to connect to and attempt to keep the connection open</translation>\n     </message>\n@@ -2969,7 +2864,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Unable to bind to %s on this computer. Bitcoin is probably already running.</translation>\n     </message>\n     <message>\n-        <location line=\"+68\"/>\n+        <location line=\"+67\"/>\n         <source>Fee per KB to add to transactions you send</source>\n         <translation>Fee per KB to add to transactions you send</translation>\n     </message>\n@@ -2979,7 +2874,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Loading wallet...</translation>\n     </message>\n     <message>\n-        <location line=\"-54\"/>\n+        <location line=\"-53\"/>\n         <source>Cannot downgrade wallet</source>\n         <translation>Cannot downgrade wallet</translation>\n     </message>\n@@ -2994,12 +2889,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Cannot write default address</translation>\n     </message>\n     <message>\n-        <location line=\"+64\"/>\n+        <location line=\"+63\"/>\n         <source>Rescanning...</source>\n         <translation>Rescanning...</translation>\n     </message>\n     <message>\n-        <location line=\"-56\"/>\n+        <location line=\"-55\"/>\n         <source>Done loading</source>\n         <translation>Done loading</translation>\n     </message>"
      },
      {
        "sha": "8f5045015d25ed0abb04e74a4b71251fdb67ff98",
        "filename": "src/qt/res/icons/bitcoin.ico",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/qt/res/icons/bitcoin.ico",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/qt/res/icons/bitcoin.ico",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/bitcoin.ico?ref=21d096357cbd34b41e4330fb72b8875139502055"
      },
      {
        "sha": "d54125c0c687d8a9c0ad848bf2046c0446b83f4e",
        "filename": "src/qt/res/icons/bitcoin_testnet.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/qt/res/icons/bitcoin_testnet.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/qt/res/icons/bitcoin_testnet.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/bitcoin_testnet.png?ref=21d096357cbd34b41e4330fb72b8875139502055"
      },
      {
        "sha": "44c7d88bca49fbe93b9ad46e8bad19207c71e2c9",
        "filename": "src/qt/res/icons/toolbar.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/qt/res/icons/toolbar.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/qt/res/icons/toolbar.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/toolbar.png?ref=21d096357cbd34b41e4330fb72b8875139502055"
      },
      {
        "sha": "9b5d82c787282ce1e305f6fd879766ea8e4784a5",
        "filename": "src/qt/res/icons/toolbar_testnet.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/qt/res/icons/toolbar_testnet.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/qt/res/icons/toolbar_testnet.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/toolbar_testnet.png?ref=21d096357cbd34b41e4330fb72b8875139502055"
      },
      {
        "sha": "644c2675aee641fa7b14e615c5d75e0392af92b7",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=21d096357cbd34b41e4330fb72b8875139502055",
        "patch": "@@ -51,12 +51,16 @@ Value getpeerinfo(const Array& params, bool fHelp)\n         obj.push_back(Pair(\"services\", strprintf(\"%08\"PRI64x, stats.nServices)));\n         obj.push_back(Pair(\"lastsend\", (boost::int64_t)stats.nLastSend));\n         obj.push_back(Pair(\"lastrecv\", (boost::int64_t)stats.nLastRecv));\n+        obj.push_back(Pair(\"bytessent\", (boost::int64_t)stats.nSendBytes));\n+        obj.push_back(Pair(\"bytesrecv\", (boost::int64_t)stats.nRecvBytes));\n         obj.push_back(Pair(\"conntime\", (boost::int64_t)stats.nTimeConnected));\n         obj.push_back(Pair(\"version\", stats.nVersion));\n         obj.push_back(Pair(\"subver\", stats.strSubVer));\n         obj.push_back(Pair(\"inbound\", stats.fInbound));\n         obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n         obj.push_back(Pair(\"banscore\", stats.nMisbehavior));\n+        if (stats.fSyncNode)\n+            obj.push_back(Pair(\"syncnode\", true));\n \n         ret.push_back(obj);\n     }"
      },
      {
        "sha": "c7eb4f74e8dda39cbe30bfd41f76b5f38b1cb17a",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=21d096357cbd34b41e4330fb72b8875139502055",
        "patch": "@@ -420,7 +420,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n                 }\n                 else\n                     printf(\"AddToWallet() : found %s in block %s not in index\\n\",\n-                           wtxIn.GetHash().ToString().substr(0,10).c_str(),\n+                           wtxIn.GetHash().ToString().c_str(),\n                            wtxIn.hashBlock.ToString().c_str());\n             }\n         }\n@@ -449,7 +449,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n         }\n \n         //// debug print\n-        printf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString().substr(0,10).c_str(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n+        printf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString().c_str(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n \n         // Write to disk\n         if (fInsertedNew || fUpdated)\n@@ -845,7 +845,7 @@ void CWalletTx::RelayWalletTransaction()\n     {\n         if (GetDepthInMainChain() == 0) {\n             uint256 hash = GetHash();\n-            printf(\"Relaying wtx %s\\n\", hash.ToString().substr(0,10).c_str());\n+            printf(\"Relaying wtx %s\\n\", hash.ToString().c_str());\n             RelayTransaction((CTransaction)*this, hash);\n         }\n     }"
      },
      {
        "sha": "2e007557b054188693b5192cd7b53b09c6a7497a",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=21d096357cbd34b41e4330fb72b8875139502055",
        "patch": "@@ -704,7 +704,7 @@ class COutput\n \n     std::string ToString() const\n     {\n-        return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString().substr(0,10).c_str(), i, nDepth, FormatMoney(tx->vout[i].nValue).c_str());\n+        return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString().c_str(), i, nDepth, FormatMoney(tx->vout[i].nValue).c_str());\n     }\n \n     void print() const"
      },
      {
        "sha": "81a21443a120356ad5e4f661dd0faa63cf1e0dc0",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d096357cbd34b41e4330fb72b8875139502055/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d096357cbd34b41e4330fb72b8875139502055/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=21d096357cbd34b41e4330fb72b8875139502055",
        "patch": "@@ -240,7 +240,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             //printf(\" %12\"PRI64d\"  %s  %s  %s\\n\",\n             //    wtx.vout[0].nValue,\n             //    DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", wtx.GetBlockTime()).c_str(),\n-            //    wtx.hashBlock.ToString().substr(0,20).c_str(),\n+            //    wtx.hashBlock.ToString().c_str(),\n             //    wtx.mapValue[\"message\"].c_str());\n         }\n         else if (strType == \"acentry\")"
      }
    ]
  },
  {
    "sha": "66fa5cbaefc7bbf0a5ac48303d72818088c9f04e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmZhNWNiYWVmYzdiYmYwYTVhYzQ4MzAzZDcyODE4MDg4YzlmMDRl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2013-04-11T14:12:50Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2013-04-11T14:12:50Z"
      },
      "message": "copyright char as proper QChar\n\nSigned-off-by: Jonas Schnelli <jonas.schnelli@include7.ch>",
      "tree": {
        "sha": "36c32907ea383d0a8178e219f0fabb7a553099e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36c32907ea383d0a8178e219f0fabb7a553099e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66fa5cbaefc7bbf0a5ac48303d72818088c9f04e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66fa5cbaefc7bbf0a5ac48303d72818088c9f04e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66fa5cbaefc7bbf0a5ac48303d72818088c9f04e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66fa5cbaefc7bbf0a5ac48303d72818088c9f04e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "21d096357cbd34b41e4330fb72b8875139502055",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21d096357cbd34b41e4330fb72b8875139502055",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21d096357cbd34b41e4330fb72b8875139502055"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6222e4246a90319a7191a0c67ab77348643d0998",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66fa5cbaefc7bbf0a5ac48303d72818088c9f04e/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66fa5cbaefc7bbf0a5ac48303d72818088c9f04e/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=66fa5cbaefc7bbf0a5ac48303d72818088c9f04e",
        "patch": "@@ -202,7 +202,7 @@ int main(int argc, char *argv[])\n     // define text to place\n     QString titleText       = QString(QApplication::applicationName()).replace(QString(\"-testnet\"), QString(\"\"), Qt::CaseSensitive);\n     QString versionText     = QString(\"Version %1\").arg(QString::fromStdString(FormatFullVersion())); //!<set the version string without client model (it's not available yet)\n-    QString copyrightText   = QString(\"\\u00A9 2009-%1\\n\").arg(COPYRIGHT_YEAR) + QString(BitcoinGUI::tr(\"The Bitcoin developers\")); //TODO: where we gonna place the copyright endyear (also check aboutdialog.cpp!)?\n+    QString copyrightText   = QChar(0xA9)+QString(\" 2009-%1\\n\").arg(COPYRIGHT_YEAR) + QString(BitcoinGUI::tr(\"The Bitcoin developers\")); //TODO: where we gonna place the copyright endyear (also check aboutdialog.cpp!)?\n     QString testnetAddText  = QString(BitcoinGUI::tr(\"[testnet]\"));\n \n     // load the bitmap for writing some text over it"
      }
    ]
  },
  {
    "sha": "ab08de489549622d71e99e28d7ba3475d61c4764",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjA4ZGU0ODk1NDk2MjJkNzFlOTllMjhkN2JhMzQ3NWQ2MWM0NzY0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonasschnelli@Jonass-MacBook-Pro.local",
        "date": "2013-04-14T07:47:42Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonasschnelli@Jonass-MacBook-Pro.local",
        "date": "2013-04-14T07:47:42Z"
      },
      "message": "Merge branch 'master' of git://github.com/bitcoin/bitcoin into new_splash_screen",
      "tree": {
        "sha": "3e7a1668e45948b936b00aaa14ea14a07ca1db4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e7a1668e45948b936b00aaa14ea14a07ca1db4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab08de489549622d71e99e28d7ba3475d61c4764",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab08de489549622d71e99e28d7ba3475d61c4764",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab08de489549622d71e99e28d7ba3475d61c4764",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab08de489549622d71e99e28d7ba3475d61c4764/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "66fa5cbaefc7bbf0a5ac48303d72818088c9f04e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66fa5cbaefc7bbf0a5ac48303d72818088c9f04e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66fa5cbaefc7bbf0a5ac48303d72818088c9f04e"
      },
      {
        "sha": "ac89a1ebe7110051bd35fbbcdb706030f07d561e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac89a1ebe7110051bd35fbbcdb706030f07d561e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac89a1ebe7110051bd35fbbcdb706030f07d561e"
      }
    ],
    "stats": {
      "total": 564,
      "additions": 488,
      "deletions": 76
    },
    "files": [
      {
        "sha": "cf809866c6e7b355eeda50cce212e5df84f4089e",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -330,8 +330,15 @@ TSQM.CONFIG = no_link\n QMAKE_EXTRA_COMPILERS += TSQM\n \n # \"Other files\" to show in Qt Creator\n-OTHER_FILES += \\\n-    doc/*.rst doc/*.txt doc/README README.md res/bitcoin-qt.rc src/test/*.cpp src/test/*.h src/qt/test/*.cpp src/qt/test/*.h\n+OTHER_FILES += README.md \\\n+    doc/*.rst \\\n+    doc/*.txt \\\n+    doc/README \\\n+    src/qt/res/bitcoin-qt.rc \\\n+    src/test/*.cpp \\\n+    src/test/*.h \\\n+    src/qt/test/*.cpp \\\n+    src/qt/test/*.h\n \n # platform specific defaults, if not overridden on command line\n isEmpty(BOOST_LIB_SUFFIX) {"
      },
      {
        "sha": "ed754cea7a3b420d5cd3b134379893579b9eea0c",
        "filename": "contrib/test-patches/README",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/contrib/test-patches/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/contrib/test-patches/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/README?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -0,0 +1,4 @@\n+These patches are applied when the automated pull-tester\n+tests each pull and when master is tested using jenkins.\n+You can find more information about the tests run at\n+http://jenkins.bluematt.me/pull-tester/files/"
      },
      {
        "sha": "7464349b3c49a37e1ea56c693a2d28eecba3758d",
        "filename": "contrib/test-patches/bitcoind-comparison.patch",
        "status": "added",
        "additions": 196,
        "deletions": 0,
        "changes": 196,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/contrib/test-patches/bitcoind-comparison.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/contrib/test-patches/bitcoind-comparison.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/bitcoind-comparison.patch?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -0,0 +1,196 @@\n+diff --git a/contrib/test-patches/bitcoind-comparison.patch b/contrib/test-patches/bitcoind-comparison.patch\n+index 04a8618..519429a 100644\n+--- a/src/main.cpp\n++++ b/src/main.cpp\n+@@ -31,8 +31,8 @@ CTxMemPool mempool;\n+ unsigned int nTransactionsUpdated = 0;\n+ \n+ map<uint256, CBlockIndex*> mapBlockIndex;\n+-uint256 hashGenesisBlock(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\");\n+-static CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n++uint256 hashGenesisBlock(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\");\n++static CBigNum bnProofOfWorkLimit(~uint256(0) >> 1);\n+ CBlockIndex* pindexGenesisBlock = NULL;\n+ int nBestHeight = -1;\n+ uint256 nBestChainWork = 0;\n+@@ -1055,7 +1055,7 @@ int64 static GetBlockValue(int nHeight, int64 nFees)\n+     int64 nSubsidy = 50 * COIN;\n+ \n+     // Subsidy is cut in half every 210000 blocks, which will occur approximately every 4 years\n+-    nSubsidy >>= (nHeight / 210000);\n++    nSubsidy >>= (nHeight / 150);\n+ \n+     return nSubsidy + nFees;\n+ }\n+@@ -2736,9 +2736,9 @@ bool InitBlockIndex() {\n+         block.hashPrevBlock = 0;\n+         block.hashMerkleRoot = block.BuildMerkleTree();\n+         block.nVersion = 1;\n+-        block.nTime    = 1231006505;\n+-        block.nBits    = 0x1d00ffff;\n+-        block.nNonce   = 2083236893;\n++        block.nTime    = 1296688602;\n++        block.nBits    = 0x207fffff;\n++        block.nNonce   = 2;\n+ \n+         if (fTestNet)\n+         {\n+@@ -3024,7 +3024,7 @@ bool static AlreadyHave(const CInv& inv)\n+ // The message start string is designed to be unlikely to occur in normal data.\n+ // The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n+ // a large 4-byte int at any alignment.\n+-unsigned char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };\n++unsigned char pchMessageStart[4] = { 0xfa, 0xbf, 0xb5, 0xda };\n+ \n+ \n+ void static ProcessGetData(CNode* pfrom)\n+diff --git a/src/test/miner_tests.cpp b/src/test/miner_tests.cpp\n+index af28465..ee9a4db 100644\n+--- a/src/test/miner_tests.cpp\n++++ b/src/test/miner_tests.cpp\n+@@ -15,34 +15,117 @@ struct {\n+     unsigned char extranonce;\n+     unsigned int nonce;\n+ } blockinfo[] = {\n+-    {4, 0xa4a3e223}, {2, 0x15c32f9e}, {1, 0x0375b547}, {1, 0x7004a8a5},\n+-    {2, 0xce440296}, {2, 0x52cfe198}, {1, 0x77a72cd0}, {2, 0xbb5d6f84},\n+-    {2, 0x83f30c2c}, {1, 0x48a73d5b}, {1, 0xef7dcd01}, {2, 0x6809c6c4},\n+-    {2, 0x0883ab3c}, {1, 0x087bbbe2}, {2, 0x2104a814}, {2, 0xdffb6daa},\n+-    {1, 0xee8a0a08}, {2, 0xba4237c1}, {1, 0xa70349dc}, {1, 0x344722bb},\n+-    {3, 0xd6294733}, {2, 0xec9f5c94}, {2, 0xca2fbc28}, {1, 0x6ba4f406},\n+-    {2, 0x015d4532}, {1, 0x6e119b7c}, {2, 0x43e8f314}, {2, 0x27962f38},\n+-    {2, 0xb571b51b}, {2, 0xb36bee23}, {2, 0xd17924a8}, {2, 0x6bc212d9},\n+-    {1, 0x630d4948}, {2, 0x9a4c4ebb}, {2, 0x554be537}, {1, 0xd63ddfc7},\n+-    {2, 0xa10acc11}, {1, 0x759a8363}, {2, 0xfb73090d}, {1, 0xe82c6a34},\n+-    {1, 0xe33e92d7}, {3, 0x658ef5cb}, {2, 0xba32ff22}, {5, 0x0227a10c},\n+-    {1, 0xa9a70155}, {5, 0xd096d809}, {1, 0x37176174}, {1, 0x830b8d0f},\n+-    {1, 0xc6e3910e}, {2, 0x823f3ca8}, {1, 0x99850849}, {1, 0x7521fb81},\n+-    {1, 0xaacaabab}, {1, 0xd645a2eb}, {5, 0x7aea1781}, {5, 0x9d6e4b78},\n+-    {1, 0x4ce90fd8}, {1, 0xabdc832d}, {6, 0x4a34f32a}, {2, 0xf2524c1c},\n+-    {2, 0x1bbeb08a}, {1, 0xad47f480}, {1, 0x9f026aeb}, {1, 0x15a95049},\n+-    {2, 0xd1cb95b2}, {2, 0xf84bbda5}, {1, 0x0fa62cd1}, {1, 0xe05f9169},\n+-    {1, 0x78d194a9}, {5, 0x3e38147b}, {5, 0x737ba0d4}, {1, 0x63378e10},\n+-    {1, 0x6d5f91cf}, {2, 0x88612eb8}, {2, 0xe9639484}, {1, 0xb7fabc9d},\n+-    {2, 0x19b01592}, {1, 0x5a90dd31}, {2, 0x5bd7e028}, {2, 0x94d00323},\n+-    {1, 0xa9b9c01a}, {1, 0x3a40de61}, {1, 0x56e7eec7}, {5, 0x859f7ef6},\n+-    {1, 0xfd8e5630}, {1, 0x2b0c9f7f}, {1, 0xba700e26}, {1, 0x7170a408},\n+-    {1, 0x70de86a8}, {1, 0x74d64cd5}, {1, 0x49e738a1}, {2, 0x6910b602},\n+-    {0, 0x643c565f}, {1, 0x54264b3f}, {2, 0x97ea6396}, {2, 0x55174459},\n+-    {2, 0x03e8779a}, {1, 0x98f34d8f}, {1, 0xc07b2b07}, {1, 0xdfe29668},\n+-    {1, 0x3141c7c1}, {1, 0xb3b595f4}, {1, 0x735abf08}, {5, 0x623bfbce},\n+-    {2, 0xd351e722}, {1, 0xf4ca48c9}, {1, 0x5b19c670}, {1, 0xa164bf0e},\n+-    {2, 0xbbbeb305}, {2, 0xfe1c810a},\n++{4, 2762203683},\n++{2, 365113248},\n++{1, 58045772},\n++{1, 1879353512},\n++{2, 3460563607},\n++{2, 1389355416},\n++{1, 2007444690},\n++{2, 3143462790},\n++{2, 2213743660},\n++{1, 1218919771},\n++{1, 4017999107},\n++{2, 1745471173},\n++{2, 142846780},\n++{1, 142326754},\n++{2, 553953301},\n++{2, 3757796778},\n++{1, 4002023946},\n++{2, 3124901826},\n++{1, 2802010589},\n++{1, 877077181},\n++{3, 3593029427},\n++{2, 3969866902},\n++{2, 3392125996},\n++{1, 1805972490},\n++{2, 22889779},\n++{1, 1846647676},\n++{2, 1139340052},\n++{2, 664153912},\n++{2, 3044128027},\n++{2, 3010194979},\n++{2, 3514377385},\n++{2, 1807880922},\n++{1, 1661815113},\n++{2, 2588692156},\n++{2, 1431037239},\n++{1, 3594379210},\n++{2, 2701839377},\n++{1, 1973060452},\n++{2, 4218620174},\n++{1, 3895224884},\n++{1, 3812528857},\n++{3, 1703867851},\n++{2, 3123904294},\n++{5, 36151564},\n++{1, 2846294357},\n++{5, 3499546633},\n++{1, 924279160},\n++{1, 2198572304},\n++{1, 3336802574},\n++{2, 2185182379},\n++{1, 2575632458},\n++{1, 1965161345},\n++{1, 2865408940},\n++{1, 3594887915},\n++{5, 2062161796},\n++{5, 2641251194},\n++{1, 1290342362},\n++{1, 2883355438},\n++{6, 1244984107},\n++{2, 4065479712},\n++{2, 465481866},\n++{1, 2907174016},\n++{1, 2667735788},\n++{1, 363417673},\n++{2, 3519780275},\n++{2, 4165713317},\n++{1, 262548689},\n++{1, 3764359529},\n++{1, 2027001003},\n++{5, 1043862655},\n++{5, 1937481940},\n++{1, 1664585233},\n++{1, 1834979792},\n++{2, 2288070330},\n++{2, 3915617412},\n++{1, 3086662813},\n++{2, 430970259},\n++{1, 1519443249},\n++{2, 1540874280},\n++{2, 2496660261},\n++{1, 2847522842},\n++{1, 977329763},\n++{1, 1458040519},\n++{5, 2241822454},\n++{1, 4253963824},\n++{1, 722247551},\n++{1, 3127905834},\n++{1, 1903207432},\n++{1, 1893631657},\n++{1, 1960201429},\n++{1, 1239890082},\n++{2, 1762702850},\n++{0, 1681675873},\n++{1, 1411795775},\n++{2, 2548720534},\n++{2, 1427588186},\n++{2, 65566621},\n++{1, 2566081936},\n++{1, 3229297415},\n++{1, 3756168812},\n++{1, 826394561},\n++{1, 3015022068},\n++{1, 1935326986},\n++{5, 1648098256},\n++{2, 3545360164},\n++{1, 4106897609},\n++{1, 1528415857},\n++{1, 2707734286},\n++{2, 3149837061},\n++{2, 4263280906},\n++\n+ };\n+ \n+ // NOTE: These tests rely on CreateNewBlock doing its own self-validation!"
      },
      {
        "sha": "a5aec641ce3cd8d66a3bfc3d0d9794306457a75f",
        "filename": "contrib/test-patches/temp-revert-1.patch",
        "status": "added",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/contrib/test-patches/temp-revert-1.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/contrib/test-patches/temp-revert-1.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/temp-revert-1.patch?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -0,0 +1,21 @@\n+commit 4dcc8701ac0eb09d8992d19fb411cee3c9aaf394\n+Author: Matt Corallo <git@bluematt.me>\n+Date:   Sun Mar 24 20:45:44 2013 -0400\n+\n+    Revert \"Update unit test to match rule enforcement starts 21 March\"\n+    \n+    This reverts commit d3e8c6a9d3fad68b0eee4434401ec7b3066399a2.\n+\n+diff --git a/src/test/checkblock_tests.cpp b/src/test/checkblock_tests.cpp\n+index 3cfb6db..e167def 100644\n+--- a/src/test/checkblock_tests.cpp\n++++ b/src/test/checkblock_tests.cpp\n+@@ -52,7 +52,7 @@ BOOST_AUTO_TEST_CASE(May15)\n+     if (read_block(\"Mar12Fork.dat\", forkingBlock))\n+     {\n+         CValidationState state;\n+-        forkingBlock.nTime = tMay15-1; // Invalidates PoW\n++        BOOST_CHECK(!forkingBlock.CheckBlock(state, true, true));\n+         BOOST_CHECK(!forkingBlock.CheckBlock(state, false, false));\n+ \n+         // After May 15'th, big blocks are OK:"
      },
      {
        "sha": "1cd043d0d7739e927c297ec93afad552525aed7b",
        "filename": "contrib/test-patches/temp-revert-2.patch",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/contrib/test-patches/temp-revert-2.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/contrib/test-patches/temp-revert-2.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/temp-revert-2.patch?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -0,0 +1,20 @@\n+commit cfae26916dba311f6f75d444301c1f9362267c3e\n+Author: Matt Corallo <git@bluematt.me>\n+Date:   Sun Mar 24 20:45:50 2013 -0400\n+\n+    Revert \"Checkpoint at first block in 11 March chain fork\"\n+    \n+    This reverts commit f817c496a1482d05b22c8e539de67f07db1c09d9.\n+\n+diff --git a/src/checkpoints.cpp b/src/checkpoints.cpp\n+index 62234b9..9b11f0b 100644\n+--- a/src/checkpoints.cpp\n++++ b/src/checkpoints.cpp\n+@@ -44,7 +44,6 @@ namespace Checkpoints\n+         (193000, uint256(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n+         (210000, uint256(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n+         (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n+-        (225430, uint256(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n+         ;\n+     static const CCheckpointData data = {\n+         &mapCheckpoints,"
      },
      {
        "sha": "5c0775dfa58a6af51a1813577b4f92c1808dd666",
        "filename": "contrib/test-patches/temp-revert-3.patch",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/contrib/test-patches/temp-revert-3.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/contrib/test-patches/temp-revert-3.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/temp-revert-3.patch?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -0,0 +1,34 @@\n+commit ba84709c65b911798ddae1285d807f4cd036990d\n+Author: Matt Corallo <git@bluematt.me>\n+Date:   Sun Mar 24 20:45:56 2013 -0400\n+\n+    Revert \"Before 15 May, limit created block size to 500K\"\n+    \n+    This reverts commit 402f19b64530775a7e4ded025c80d8c16a55e454.\n+\n+diff --git a/src/main.cpp b/src/main.cpp\n+index 22baf0f..51ada0a 100644\n+--- a/src/main.cpp\n++++ b/src/main.cpp\n+@@ -2057,8 +2057,8 @@ bool CBlock::CheckBlock(CValidationState &state, bool fCheckPOW, bool fCheckMerk\n+         return state.DoS(100, error(\"CheckBlock() : size limits failed\"));\n+ \n+     // Special short-term limits to avoid 10,000 BDB lock limit:\n+-    if (GetBlockTime() >= 1363867200 && // start enforcing 21 March 2013, noon GMT\n+-        GetBlockTime() < 1368576000)  // stop enforcing 15 May 2013 00:00:00\n++    if (GetBlockTime() > 1363039171 && // 11 March 2013, timestamp of block before the big fork\n++        GetBlockTime() < 1368576000)  // 15 May 2013 00:00:00\n+     {\n+         // Rule is: #unique txids referenced <= 4,500\n+         // ... to prevent 10,000 BDB lock exhaustion on old clients\n+@@ -4155,10 +4155,6 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n+     // Limit to betweeen 1K and MAX_BLOCK_SIZE-1K for sanity:\n+     nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SIZE-1000), nBlockMaxSize));\n+ \n+-    // Special compatibility rule before 15 May: limit size to 500,000 bytes:\n+-    if (GetAdjustedTime() < 1368576000)\n+-        nBlockMaxSize = std::min(nBlockMaxSize, (unsigned int)(MAX_BLOCK_SIZE_GEN));\n+-\n+     // How much of the block should be dedicated to high-priority transactions,\n+     // included regardless of the fees they pay\n+     unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", 27000);"
      },
      {
        "sha": "f93d7549c0a13a5cceb069765b289f4b0b50b9e2",
        "filename": "contrib/test-patches/temp-revert-4.patch",
        "status": "added",
        "additions": 110,
        "deletions": 0,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/contrib/test-patches/temp-revert-4.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/contrib/test-patches/temp-revert-4.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/temp-revert-4.patch?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -0,0 +1,110 @@\n+commit ca96b88b61f647d4f56d5d06321dda08a43bf92f\n+Author: Matt Corallo <git@bluematt.me>\n+Date:   Sun Mar 24 20:46:01 2013 -0400\n+\n+    Revert \"CheckBlock rule until 15-May for 10,000 BDB lock compatibility\"\n+    \n+    This reverts commit 8c222dca4f961ad13ec64d690134a40d09b20813.\n+\n+diff --git a/src/main.cpp b/src/main.cpp\n+index 51ada0a..9a06dbf 100644\n+--- a/src/main.cpp\n++++ b/src/main.cpp\n+@@ -2056,25 +2056,6 @@ bool CBlock::CheckBlock(CValidationState &state, bool fCheckPOW, bool fCheckMerk\n+     if (vtx.empty() || vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+         return state.DoS(100, error(\"CheckBlock() : size limits failed\"));\n+ \n+-    // Special short-term limits to avoid 10,000 BDB lock limit:\n+-    if (GetBlockTime() > 1363039171 && // 11 March 2013, timestamp of block before the big fork\n+-        GetBlockTime() < 1368576000)  // 15 May 2013 00:00:00\n+-    {\n+-        // Rule is: #unique txids referenced <= 4,500\n+-        // ... to prevent 10,000 BDB lock exhaustion on old clients\n+-        set<uint256> setTxIn;\n+-        for (size_t i = 0; i < vtx.size(); i++)\n+-        {\n+-            setTxIn.insert(vtx[i].GetHash());\n+-            if (i == 0) continue; // skip coinbase txin\n+-            BOOST_FOREACH(const CTxIn& txin, vtx[i].vin)\n+-                setTxIn.insert(txin.prevout.hash);\n+-        }\n+-        size_t nTxids = setTxIn.size();\n+-        if (nTxids > 4500)\n+-            return error(\"CheckBlock() : 15 May maxlocks violation\");\n+-    }\n+-\n+     // Check proof of work matches claimed amount\n+     if (fCheckPOW && !CheckProofOfWork(GetHash(), nBits))\n+         return state.DoS(50, error(\"CheckBlock() : proof of work failed\"));\n+diff --git a/src/test/checkblock_tests.cpp b/src/test/checkblock_tests.cpp\n+deleted file mode 100644\n+index e167def..0000000\n+--- a/src/test/checkblock_tests.cpp\n++++ /dev/null\n+@@ -1,66 +0,0 @@\n+-//\n+-// Unit tests for block.CheckBlock()\n+-//\n+-#include <algorithm>\n+-\n+-#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n+-#include <boost/date_time/posix_time/posix_time_types.hpp>\n+-#include <boost/test/unit_test.hpp>\n+-#include <boost/foreach.hpp>\n+-\n+-#include \"main.h\"\n+-#include \"wallet.h\"\n+-#include \"net.h\"\n+-#include \"util.h\"\n+-\n+-BOOST_AUTO_TEST_SUITE(CheckBlock_tests)\n+-\n+-bool\n+-read_block(const std::string& filename, CBlock& block)\n+-{\n+-    namespace fs = boost::filesystem;\n+-    fs::path testFile = fs::current_path() / \"test\" / \"data\" / filename;\n+-#ifdef TEST_DATA_DIR\n+-    if (!fs::exists(testFile))\n+-    {\n+-        testFile = fs::path(BOOST_PP_STRINGIZE(TEST_DATA_DIR)) / filename;\n+-    }\n+-#endif\n+-    FILE* fp = fopen(testFile.string().c_str(), \"rb\");\n+-    if (!fp) return false;\n+-\n+-    fseek(fp, 8, SEEK_SET); // skip msgheader/size\n+-\n+-    CAutoFile filein = CAutoFile(fp, SER_DISK, CLIENT_VERSION);\n+-    if (!filein) return false;\n+-\n+-    filein >> block;\n+-\n+-    return true;\n+-}\n+-\n+-BOOST_AUTO_TEST_CASE(May15)\n+-{\n+-    // Putting a 1MB binary file in the git repository is not a great\n+-    // idea, so this test is only run if you manually download\n+-    // test/data/Mar12Fork.dat from\n+-    // http://sourceforge.net/projects/bitcoin/files/Bitcoin/blockchain/Mar12Fork.dat/download\n+-    unsigned int tMay15 = 1368576000;\n+-    SetMockTime(tMay15); // Test as if it was right at May 15\n+-\n+-    CBlock forkingBlock;\n+-    if (read_block(\"Mar12Fork.dat\", forkingBlock))\n+-    {\n+-        CValidationState state;\n+-        BOOST_CHECK(!forkingBlock.CheckBlock(state, true, true));\n+-        BOOST_CHECK(!forkingBlock.CheckBlock(state, false, false));\n+-\n+-        // After May 15'th, big blocks are OK:\n+-        forkingBlock.nTime = tMay15; // Invalidates PoW\n+-        BOOST_CHECK(forkingBlock.CheckBlock(state, false, false));\n+-    }\n+-\n+-    SetMockTime(0);\n+-}\n+-\n+-BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "0881807d703e38a1a5f3808eff90040fa41befcd",
        "filename": "src/bignum.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/src/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/src/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bignum.h?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -222,7 +222,7 @@ class CBigNum : public BIGNUM\n         BN_mpi2bn(pch, p - pch, this);\n     }\n \n-    uint256 getuint256()\n+    uint256 getuint256() const\n     {\n         unsigned int nSize = BN_bn2mpi(this, NULL);\n         if (nSize < 4)"
      },
      {
        "sha": "635641bd29bce456d6986a7f20c1bcb51101642d",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -2,7 +2,7 @@\n #define CLIENTVERSION_H\n \n //\n-// client versioning\n+// client versioning and copyright year\n //\n \n // These need to be macros, as version.cpp's and bitcoin-qt.rc's voodoo requires it\n@@ -14,6 +14,10 @@\n // Set to true for release, false for prerelease or test build\n #define CLIENT_VERSION_IS_RELEASE  false\n \n+// Copyright year (2009-this)\n+// Todo: update this when changing our copyright comments in the source\n+#define COPYRIGHT_YEAR 2013\n+\n // Converts the parameter X to a string after macro replacement on X has been performed.\n // Don't merge these into one macro!\n #define STRINGIZE(X) DO_STRINGIZE(X)"
      },
      {
        "sha": "f6485c3b1dd6b655e52a5e47e8bc6c310a2ee5f5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -333,7 +333,9 @@ std::string HelpMessage()\n         \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\" +\n         \"  -rpcport=<port>        \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332 or testnet: 18332)\") + \"\\n\" +\n         \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified IP address\") + \"\\n\" +\n+#ifndef QT_GUI\n         \"  -rpcconnect=<ip>       \" + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\" +\n+#endif\n         \"  -rpcthreads=<n>        \" + _(\"Set the number of threads to service RPC calls (default: 4)\") + \"\\n\" +\n         \"  -blocknotify=<cmd>     \" + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\" +\n         \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\" +"
      },
      {
        "sha": "bf13e791510c49e18812f3b6f2f8c442ee1c70a8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 23,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -35,8 +35,8 @@ uint256 hashGenesisBlock(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3\n static CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n CBlockIndex* pindexGenesisBlock = NULL;\n int nBestHeight = -1;\n-CBigNum bnBestChainWork = 0;\n-CBigNum bnBestInvalidWork = 0;\n+uint256 nBestChainWork = 0;\n+uint256 nBestInvalidWork = 0;\n uint256 hashBestChain = 0;\n CBlockIndex* pindexBest = NULL;\n set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexValid; // may contain all CBlockIndex*'s that have validness >=BLOCK_VALID_TRANSACTIONS, and must contain those who aren't failed\n@@ -1191,20 +1191,20 @@ bool IsInitialBlockDownload()\n \n void static InvalidChainFound(CBlockIndex* pindexNew)\n {\n-    if (pindexNew->bnChainWork > bnBestInvalidWork)\n+    if (pindexNew->nChainWork > nBestInvalidWork)\n     {\n-        bnBestInvalidWork = pindexNew->bnChainWork;\n-        pblocktree->WriteBestInvalidWork(bnBestInvalidWork);\n+        nBestInvalidWork = pindexNew->nChainWork;\n+        pblocktree->WriteBestInvalidWork(CBigNum(nBestInvalidWork));\n         uiInterface.NotifyBlocksChanged();\n     }\n-    printf(\"InvalidChainFound: invalid block=%s  height=%d  work=%s  date=%s\\n\",\n+    printf(\"InvalidChainFound: invalid block=%s  height=%d  log2_work=%.8g  date=%s\\n\",\n       pindexNew->GetBlockHash().ToString().c_str(), pindexNew->nHeight,\n-      pindexNew->bnChainWork.ToString().c_str(), DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\",\n+      log(pindexNew->nChainWork.getdouble())/log(2.0), DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\",\n       pindexNew->GetBlockTime()).c_str());\n-    printf(\"InvalidChainFound:  current best=%s  height=%d  work=%s  date=%s\\n\",\n-      hashBestChain.ToString().c_str(), nBestHeight, bnBestChainWork.ToString().c_str(),\n+    printf(\"InvalidChainFound:  current best=%s  height=%d  log2_work=%.8g  date=%s\\n\",\n+      hashBestChain.ToString().c_str(), nBestHeight, log(nBestChainWork.getdouble())/log(2.0),\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n-    if (pindexBest && bnBestInvalidWork > bnBestChainWork + pindexBest->GetBlockWork() * 6)\n+    if (pindexBest && nBestInvalidWork > nBestChainWork + (pindexBest->GetBlockWork() * 6).getuint256())\n         printf(\"InvalidChainFound: Warning: Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade.\\n\");\n }\n \n@@ -1230,7 +1230,7 @@ bool ConnectBestBlock(CValidationState &state) {\n             pindexNewBest = *it;\n         }\n \n-        if (pindexNewBest == pindexBest || (pindexBest && pindexNewBest->bnChainWork == pindexBest->bnChainWork))\n+        if (pindexNewBest == pindexBest || (pindexBest && pindexNewBest->nChainWork == pindexBest->nChainWork))\n             return true; // nothing to do\n \n         // check ancestry\n@@ -1250,7 +1250,7 @@ bool ConnectBestBlock(CValidationState &state) {\n                 break;\n             }\n \n-            if (pindexBest == NULL || pindexTest->bnChainWork > pindexBest->bnChainWork)\n+            if (pindexBest == NULL || pindexTest->nChainWork > pindexBest->nChainWork)\n                 vAttach.push_back(pindexTest);\n \n             if (pindexTest->pprev == NULL || pindexTest->pnext != NULL) {\n@@ -1858,11 +1858,11 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     pindexBest = pindexNew;\n     pblockindexFBBHLast = NULL;\n     nBestHeight = pindexBest->nHeight;\n-    bnBestChainWork = pindexNew->bnChainWork;\n+    nBestChainWork = pindexNew->nChainWork;\n     nTimeBestReceived = GetTime();\n     nTransactionsUpdated++;\n-    printf(\"SetBestChain: new best=%s  height=%d  work=%s  tx=%lu  date=%s  progress=%f\\n\",\n-      hashBestChain.ToString().c_str(), nBestHeight, bnBestChainWork.ToString().c_str(), (unsigned long)pindexNew->nChainTx,\n+    printf(\"SetBestChain: new best=%s  height=%d  log2_work=%.8g  tx=%lu  date=%s progress=%f\\n\",\n+      hashBestChain.ToString().c_str(), nBestHeight, log(nBestChainWork.getdouble())/log(2.0), (unsigned long)pindexNew->nChainTx,\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str(),\n       Checkpoints::GuessVerificationProgress(pindexBest));\n \n@@ -1915,7 +1915,7 @@ bool CBlock::AddToBlockIndex(CValidationState &state, const CDiskBlockPos &pos)\n         pindexNew->nHeight = pindexNew->pprev->nHeight + 1;\n     }\n     pindexNew->nTx = vtx.size();\n-    pindexNew->bnChainWork = (pindexNew->pprev ? pindexNew->pprev->bnChainWork : 0) + pindexNew->GetBlockWork();\n+    pindexNew->nChainWork = (pindexNew->pprev ? pindexNew->pprev->nChainWork : 0) + pindexNew->GetBlockWork().getuint256();\n     pindexNew->nChainTx = (pindexNew->pprev ? pindexNew->pprev->nChainTx : 0) + pindexNew->nTx;\n     pindexNew->nFile = pos.nFile;\n     pindexNew->nDataPos = pos.nPos;\n@@ -2537,7 +2537,7 @@ bool static LoadBlockIndexDB()\n \n     boost::this_thread::interruption_point();\n \n-    // Calculate bnChainWork\n+    // Calculate nChainWork\n     vector<pair<int, CBlockIndex*> > vSortedByHeight;\n     vSortedByHeight.reserve(mapBlockIndex.size());\n     BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n@@ -2549,7 +2549,7 @@ bool static LoadBlockIndexDB()\n     BOOST_FOREACH(const PAIRTYPE(int, CBlockIndex*)& item, vSortedByHeight)\n     {\n         CBlockIndex* pindex = item.second;\n-        pindex->bnChainWork = (pindex->pprev ? pindex->pprev->bnChainWork : 0) + pindex->GetBlockWork();\n+        pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + pindex->GetBlockWork().getuint256();\n         pindex->nChainTx = (pindex->pprev ? pindex->pprev->nChainTx : 0) + pindex->nTx;\n         if ((pindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_TRANSACTIONS && !(pindex->nStatus & BLOCK_FAILED_MASK))\n             setBlockIndexValid.insert(pindex);\n@@ -2561,8 +2561,10 @@ bool static LoadBlockIndexDB()\n     if (pblocktree->ReadBlockFileInfo(nLastBlockFile, infoLastBlockFile))\n         printf(\"LoadBlockIndexDB(): last block file info: %s\\n\", infoLastBlockFile.ToString().c_str());\n \n-    // Load bnBestInvalidWork, OK if it doesn't exist\n+    // Load nBestInvalidWork, OK if it doesn't exist\n+    CBigNum bnBestInvalidWork;\n     pblocktree->ReadBestInvalidWork(bnBestInvalidWork);\n+    nBestInvalidWork = bnBestInvalidWork.getuint256();\n \n     // Check whether we need to continue reindexing\n     bool fReindexing = false;\n@@ -2579,7 +2581,7 @@ bool static LoadBlockIndexDB()\n         return true;\n     hashBestChain = pindexBest->GetBlockHash();\n     nBestHeight = pindexBest->nHeight;\n-    bnBestChainWork = pindexBest->bnChainWork;\n+    nBestChainWork = pindexBest->nChainWork;\n \n     // set 'next' pointers in best chain\n     CBlockIndex *pindex = pindexBest;\n@@ -2675,8 +2677,8 @@ void UnloadBlockIndex()\n     setBlockIndexValid.clear();\n     pindexGenesisBlock = NULL;\n     nBestHeight = 0;\n-    bnBestChainWork = 0;\n-    bnBestInvalidWork = 0;\n+    nBestChainWork = 0;\n+    nBestInvalidWork = 0;\n     hashBestChain = 0;\n     pindexBest = NULL;\n }\n@@ -2953,7 +2955,7 @@ string GetWarnings(string strFor)\n     }\n \n     // Longer invalid proof-of-work chain\n-    if (pindexBest && bnBestInvalidWork > bnBestChainWork + pindexBest->GetBlockWork() * 6)\n+    if (pindexBest && nBestInvalidWork > nBestChainWork + (pindexBest->GetBlockWork() * 6).getuint256())\n     {\n         nPriority = 2000;\n         strStatusBar = strRPC = _(\"Warning: Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade.\");"
      },
      {
        "sha": "24b2cb2aa6a4afe91c2a51782b6bee682e80cd72",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -77,8 +77,8 @@ extern std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexValid;\n extern uint256 hashGenesisBlock;\n extern CBlockIndex* pindexGenesisBlock;\n extern int nBestHeight;\n-extern CBigNum bnBestChainWork;\n-extern CBigNum bnBestInvalidWork;\n+extern uint256 nBestChainWork;\n+extern uint256 nBestInvalidWork;\n extern uint256 hashBestChain;\n extern CBlockIndex* pindexBest;\n extern unsigned int nTransactionsUpdated;\n@@ -1619,7 +1619,7 @@ class CBlockIndex\n     unsigned int nUndoPos;\n \n     // (memory only) Total amount of work (expected number of hashes) in the chain up to and including this block\n-    CBigNum bnChainWork;\n+    uint256 nChainWork;\n \n     // Number of transactions in this block.\n     // Note: in a potential headers-first mode, this number cannot be relied upon\n@@ -1648,7 +1648,7 @@ class CBlockIndex\n         nFile = 0;\n         nDataPos = 0;\n         nUndoPos = 0;\n-        bnChainWork = 0;\n+        nChainWork = 0;\n         nTx = 0;\n         nChainTx = 0;\n         nStatus = 0;\n@@ -1669,7 +1669,7 @@ class CBlockIndex\n         nFile = 0;\n         nDataPos = 0;\n         nUndoPos = 0;\n-        bnChainWork = 0;\n+        nChainWork = 0;\n         nTx = 0;\n         nChainTx = 0;\n         nStatus = 0;\n@@ -1793,8 +1793,8 @@ class CBlockIndex\n struct CBlockIndexWorkComparator\n {\n     bool operator()(CBlockIndex *pa, CBlockIndex *pb) {\n-        if (pa->bnChainWork > pb->bnChainWork) return false;\n-        if (pa->bnChainWork < pb->bnChainWork) return true;\n+        if (pa->nChainWork > pb->nChainWork) return false;\n+        if (pa->nChainWork < pb->nChainWork) return true;\n \n         if (pa->GetBlockHash() < pb->GetBlockHash()) return false;\n         if (pa->GetBlockHash() > pb->GetBlockHash()) return true;"
      },
      {
        "sha": "57818b8a27e92f3cd85d41d82998a1a4101357b5",
        "filename": "src/qt/aboutdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/src/qt/aboutdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/src/qt/aboutdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/aboutdialog.cpp?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -2,10 +2,7 @@\n #include \"ui_aboutdialog.h\"\n \n #include \"clientmodel.h\"\n-\n-// Copyright year (2009-this)\n-// Todo: update this when changing our copyright comments in the source\n-const int ABOUTDIALOG_COPYRIGHT_YEAR = 2013;\n+#include \"clientversion.h\"\n \n AboutDialog::AboutDialog(QWidget *parent) :\n     QDialog(parent),\n@@ -14,7 +11,7 @@ AboutDialog::AboutDialog(QWidget *parent) :\n     ui->setupUi(this);\n \n     // Set current copyright year\n-    ui->copyrightLabel->setText(tr(\"Copyright\") + QString(\" &copy; \") + tr(\"2009-%1 The Bitcoin developers\").arg(ABOUTDIALOG_COPYRIGHT_YEAR));\n+    ui->copyrightLabel->setText(tr(\"Copyright\") + QString(\" &copy; \") + tr(\"2009-%1 The Bitcoin developers\").arg(COPYRIGHT_YEAR));\n }\n \n void AboutDialog::setModel(ClientModel *model)"
      },
      {
        "sha": "8529c88b3975bdc771c2b4e4c3e4a3996a6e2aaa",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -33,6 +33,7 @@ AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n     ui->deleteAddress->setIcon(QIcon());\n     ui->verifyMessage->setIcon(QIcon());\n     ui->signMessage->setIcon(QIcon());\n+    ui->exportButton->setIcon(QIcon());\n #endif\n \n #ifndef USE_QRCODE\n@@ -45,6 +46,7 @@ AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n         connect(ui->tableView, SIGNAL(doubleClicked(QModelIndex)), this, SLOT(accept()));\n         ui->tableView->setEditTriggers(QAbstractItemView::NoEditTriggers);\n         ui->tableView->setFocus();\n+        ui->exportButton->hide();\n         break;\n     case ForEditing:\n         ui->buttonBox->setVisible(false);\n@@ -323,7 +325,7 @@ void AddressBookPage::done(int retval)\n     QDialog::done(retval);\n }\n \n-void AddressBookPage::exportClicked()\n+void AddressBookPage::on_exportButton_clicked()\n {\n     // CSV is currently the only supported format\n     QString filename = GUIUtil::getSaveFileName("
      },
      {
        "sha": "34465aa65f3d7419b4ee6990b6fa05736633ef0b",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -43,7 +43,6 @@ class AddressBookPage : public QDialog\n \n public slots:\n     void done(int retval);\n-    void exportClicked();\n \n private:\n     Ui::AddressBookPage *ui;\n@@ -76,6 +75,8 @@ private slots:\n     void onCopyLabelAction();\n     /** Edit currently selected address entry (no button) */\n     void onEditAction();\n+    /** Export button clicked */\n+    void on_exportButton_clicked();\n \n     /** Set button states based on selected tab and selection */\n     void selectionChanged();"
      },
      {
        "sha": "14d738d9dae7e563762bfa36d7478693492e5a2a",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -236,9 +236,6 @@ void BitcoinGUI::createActions()\n     verifyMessageAction = new QAction(QIcon(\":/icons/transaction_0\"), tr(\"&Verify message...\"), this);\n     verifyMessageAction->setStatusTip(tr(\"Verify messages to ensure they were signed with specified Bitcoin addresses\"));\n \n-    exportAction = new QAction(QIcon(\":/icons/export\"), tr(\"&Export...\"), this);\n-    exportAction->setStatusTip(tr(\"Export the data in the current tab to a file\"));\n-    exportAction->setToolTip(exportAction->statusTip());\n     openRPCConsoleAction = new QAction(QIcon(\":/icons/debugwindow\"), tr(\"&Debug window\"), this);\n     openRPCConsoleAction->setStatusTip(tr(\"Open debugging and diagnostic console\"));\n \n@@ -267,7 +264,6 @@ void BitcoinGUI::createMenuBar()\n     // Configure the menus\n     QMenu *file = appMenuBar->addMenu(tr(\"&File\"));\n     file->addAction(backupWalletAction);\n-    file->addAction(exportAction);\n     file->addAction(signMessageAction);\n     file->addAction(verifyMessageAction);\n     file->addSeparator();\n@@ -295,10 +291,6 @@ void BitcoinGUI::createToolBars()\n     toolbar->addAction(receiveCoinsAction);\n     toolbar->addAction(historyAction);\n     toolbar->addAction(addressBookAction);\n-\n-    QToolBar *toolbar2 = addToolBar(tr(\"Actions toolbar\"));\n-    toolbar2->setToolButtonStyle(Qt::ToolButtonTextBesideIcon);\n-    toolbar2->addAction(exportAction);\n }\n \n void BitcoinGUI::setClientModel(ClientModel *clientModel)\n@@ -611,25 +603,28 @@ void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n \n void BitcoinGUI::message(const QString &title, const QString &message, unsigned int style, bool *ret)\n {\n-    QString strTitle = tr(\"Bitcoin\") + \" - \";\n+    QString strTitle = tr(\"Bitcoin\"); // default title\n     // Default to information icon\n     int nMBoxIcon = QMessageBox::Information;\n     int nNotifyIcon = Notificator::Information;\n \n-    // Check for usage of predefined title\n+    // Override title based on style\n+    QString msgType;\n     switch (style) {\n     case CClientUIInterface::MSG_ERROR:\n-        strTitle += tr(\"Error\");\n+        msgType = tr(\"Error\");\n         break;\n     case CClientUIInterface::MSG_WARNING:\n-        strTitle += tr(\"Warning\");\n+        msgType = tr(\"Warning\");\n         break;\n     case CClientUIInterface::MSG_INFORMATION:\n-        strTitle += tr(\"Information\");\n+        msgType = tr(\"Information\");\n         break;\n     default:\n-        strTitle += title; // Use supplied title\n+        msgType = title; // Use supplied title\n     }\n+    if (!msgType.isEmpty())\n+        strTitle += \" - \" + msgType;\n \n     // Check for error/warning icon\n     if (style & CClientUIInterface::ICON_ERROR) {"
      },
      {
        "sha": "f361a62a415ebdaceefd31c8db0a7f0282ac8b32",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -67,7 +67,6 @@ class BitcoinGUI : public QMainWindow\n     QAction * getAddressBookAction() { return addressBookAction; }\n     QAction * getReceiveCoinsAction() { return receiveCoinsAction; }\n     QAction * getSendCoinsAction() { return sendCoinsAction; }\n-    QAction * getExportAction() { return exportAction; }\n \n protected:\n     void changeEvent(QEvent *e);\n@@ -98,7 +97,6 @@ class BitcoinGUI : public QMainWindow\n     QAction *receiveCoinsAction;\n     QAction *optionsAction;\n     QAction *toggleHideAction;\n-    QAction *exportAction;\n     QAction *encryptWalletAction;\n     QAction *backupWalletAction;\n     QAction *changePassphraseAction;"
      },
      {
        "sha": "a2a7da34dd22ac398d54937f0e950c53d8e077d8",
        "filename": "src/qt/forms/addressbookpage.ui",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/src/qt/forms/addressbookpage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/src/qt/forms/addressbookpage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/addressbookpage.ui?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -148,6 +148,20 @@\n        </property>\n       </spacer>\n      </item>\n+     <item>\n+      <widget class=\"QPushButton\" name=\"exportButton\">\n+       <property name=\"toolTip\">\n+        <string>Export the data in the current tab to a file</string>\n+       </property>\n+       <property name=\"text\">\n+        <string>&amp;Export</string>\n+       </property>\n+       <property name=\"icon\">\n+        <iconset resource=\"../bitcoin.qrc\">\n+         <normaloff>:/icons/export</normaloff>:/icons/export</iconset>\n+       </property>\n+      </widget>\n+     </item>\n      <item>\n       <widget class=\"QDialogButtonBox\" name=\"buttonBox\">\n        <property name=\"sizePolicy\">"
      },
      {
        "sha": "eeac772dc981be1bbcb4a7700420592acb405982",
        "filename": "src/qt/res/bitcoin-qt.rc",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/src/qt/res/bitcoin-qt.rc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/src/qt/res/bitcoin-qt.rc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/bitcoin-qt.rc?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -7,6 +7,7 @@ IDI_ICON1 ICON DISCARDABLE \"icons/bitcoin.ico\"\n #define VER_PRODUCTVERSION_STR STRINGIZE(CLIENT_VERSION_MAJOR) \".\" STRINGIZE(CLIENT_VERSION_MINOR) \".\" STRINGIZE(CLIENT_VERSION_REVISION) \".\" STRINGIZE(CLIENT_VERSION_BUILD)\n #define VER_FILEVERSION        VER_PRODUCTVERSION\n #define VER_FILEVERSION_STR    VER_PRODUCTVERSION_STR\n+#define COPYRIGHT_STR          \"2009-\" STRINGIZE(COPYRIGHT_YEAR) \" The Bitcoin developers\"\n \n VS_VERSION_INFO VERSIONINFO\n FILEVERSION     VER_FILEVERSION\n@@ -22,7 +23,7 @@ BEGIN\n             VALUE \"FileDescription\",    \"Bitcoin-Qt (OSS GUI client for Bitcoin)\"\n             VALUE \"FileVersion\",        VER_FILEVERSION_STR\n             VALUE \"InternalName\",       \"bitcoin-qt\"\n-            VALUE \"LegalCopyright\",     \"2009-2013 The Bitcoin developers\"\n+            VALUE \"LegalCopyright\",     COPYRIGHT_STR\n             VALUE \"LegalTrademarks1\",   \"Distributed under the MIT/X11 software license, see the accompanying file COPYING or http://www.opensource.org/licenses/mit-license.php.\"\n             VALUE \"OriginalFilename\",   \"bitcoin-qt.exe\"\n             VALUE \"ProductName\",        \"Bitcoin-Qt\""
      },
      {
        "sha": "727b48ded7da5823daaef24da029e09bc853101d",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 18,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -23,6 +23,7 @@\n #include <QAction>\n #include <QDesktopServices>\n #include <QFileDialog>\n+#include <QPushButton>\n \n WalletView::WalletView(QWidget *parent, BitcoinGUI *_gui):\n     QStackedWidget(parent),\n@@ -35,8 +36,17 @@ WalletView::WalletView(QWidget *parent, BitcoinGUI *_gui):\n \n     transactionsPage = new QWidget(this);\n     QVBoxLayout *vbox = new QVBoxLayout();\n+    QHBoxLayout *hbox_buttons = new QHBoxLayout();\n     transactionView = new TransactionView(this);\n     vbox->addWidget(transactionView);\n+    QPushButton *exportButton = new QPushButton(\"&Export\", this);\n+    exportButton->setToolTip(tr(\"Export the data in the current tab to a file\"));\n+#ifndef Q_OS_MAC // Icons on push buttons are very uncommon on Mac\n+    exportButton->setIcon(QIcon(\":/icons/export\"));\n+#endif\n+    hbox_buttons->addStretch();\n+    hbox_buttons->addWidget(exportButton);\n+    vbox->addLayout(hbox_buttons);\n     transactionsPage->setLayout(vbox);\n \n     addressBookPage = new AddressBookPage(AddressBookPage::ForEditing, AddressBookPage::SendingTab);\n@@ -66,6 +76,8 @@ WalletView::WalletView(QWidget *parent, BitcoinGUI *_gui):\n     connect(addressBookPage, SIGNAL(verifyMessage(QString)), this, SLOT(gotoVerifyMessageTab(QString)));\n     // Clicking on \"Sign Message\" in the receive coins page opens the sign message tab in the Sign/Verify Message dialog\n     connect(receiveCoinsPage, SIGNAL(signMessage(QString)), this, SLOT(gotoSignMessageTab(QString)));\n+    // Clicking on \"Export\" allows to export the transaction list\n+    connect(exportButton, SIGNAL(clicked()), transactionView, SLOT(exportClicked()));\n \n     gotoOverviewPage();\n }\n@@ -142,49 +154,31 @@ void WalletView::gotoOverviewPage()\n {\n     gui->getOverviewAction()->setChecked(true);\n     setCurrentWidget(overviewPage);\n-\n-    gui->getExportAction()->setEnabled(false);\n-    disconnect(gui->getExportAction(), SIGNAL(triggered()), 0, 0);\n }\n \n void WalletView::gotoHistoryPage()\n {\n     gui->getHistoryAction()->setChecked(true);\n     setCurrentWidget(transactionsPage);\n-\n-    gui->getExportAction()->setEnabled(true);\n-    disconnect(gui->getExportAction(), SIGNAL(triggered()), 0, 0);\n-    connect(gui->getExportAction(), SIGNAL(triggered()), transactionView, SLOT(exportClicked()));\n }\n \n void WalletView::gotoAddressBookPage()\n {\n     gui->getAddressBookAction()->setChecked(true);\n     setCurrentWidget(addressBookPage);\n-\n-    gui->getExportAction()->setEnabled(true);\n-    disconnect(gui->getExportAction(), SIGNAL(triggered()), 0, 0);\n-    connect(gui->getExportAction(), SIGNAL(triggered()), addressBookPage, SLOT(exportClicked()));\n }\n \n void WalletView::gotoReceiveCoinsPage()\n {\n     gui->getReceiveCoinsAction()->setChecked(true);\n     setCurrentWidget(receiveCoinsPage);\n-\n-    gui->getExportAction()->setEnabled(true);\n-    disconnect(gui->getExportAction(), SIGNAL(triggered()), 0, 0);\n-    connect(gui->getExportAction(), SIGNAL(triggered()), receiveCoinsPage, SLOT(exportClicked()));\n }\n \n void WalletView::gotoSendCoinsPage(QString addr)\n {\n     gui->getSendCoinsAction()->setChecked(true);\n     setCurrentWidget(sendCoinsPage);\n \n-    gui->getExportAction()->setEnabled(false);\n-    disconnect(gui->getExportAction(), SIGNAL(triggered()), 0, 0);\n-\n     if (!addr.isEmpty())\n         sendCoinsPage->setAddress(addr);\n }"
      },
      {
        "sha": "8a9af8ba0430998862fbe91d918fbc2bba4e4416",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab08de489549622d71e99e28d7ba3475d61c4764/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab08de489549622d71e99e28d7ba3475d61c4764/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=ab08de489549622d71e99e28d7ba3475d61c4764",
        "patch": "@@ -55,6 +55,16 @@ class base_uint\n         return ret;\n     }\n \n+    double getdouble() const\n+    {\n+        double ret = 0.0;\n+        double fact = 1.0;\n+        for (int i = 0; i < WIDTH; i++) {\n+            ret += fact * pn[i];\n+            fact *= 4294967296.0;\n+        }\n+        return ret;\n+    }\n \n     base_uint& operator=(uint64 b)\n     {"
      }
    ]
  },
  {
    "sha": "e7467cce2668de487fe7f24c2f298bf49d94ea0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzQ2N2NjZTI2NjhkZTQ4N2ZlN2YyNGMyZjI5OGJmNDlkOTRlYTBh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonasschnelli@Jonass-MacBook-Pro.local",
        "date": "2013-04-14T08:58:20Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonasschnelli@Jonass-MacBook-Pro.local",
        "date": "2013-04-14T08:58:20Z"
      },
      "message": "own class for splashscreen",
      "tree": {
        "sha": "000880ed89a399b489cbe7880a556313b7a94a88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/000880ed89a399b489cbe7880a556313b7a94a88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7467cce2668de487fe7f24c2f298bf49d94ea0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7467cce2668de487fe7f24c2f298bf49d94ea0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7467cce2668de487fe7f24c2f298bf49d94ea0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7467cce2668de487fe7f24c2f298bf49d94ea0a/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "ab08de489549622d71e99e28d7ba3475d61c4764",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab08de489549622d71e99e28d7ba3475d61c4764",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab08de489549622d71e99e28d7ba3475d61c4764"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 91,
      "deletions": 56
    },
    "files": [
      {
        "sha": "d938c07c45ebb18fec603ffffc5bdae1accf44c7",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7467cce2668de487fe7f24c2f298bf49d94ea0a/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7467cce2668de487fe7f24c2f298bf49d94ea0a/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=e7467cce2668de487fe7f24c2f298bf49d94ea0a",
        "patch": "@@ -210,7 +210,8 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/txdb.h \\\n     src/leveldb.h \\\n     src/threadsafety.h \\\n-    src/limitedmap.h\n+    src/limitedmap.h \\\n+    src/qt/splashscreen.h\n \n SOURCES += src/qt/bitcoin.cpp \\\n     src/qt/bitcoingui.cpp \\\n@@ -277,7 +278,8 @@ SOURCES += src/qt/bitcoin.cpp \\\n     src/qt/rpcconsole.cpp \\\n     src/noui.cpp \\\n     src/leveldb.cpp \\\n-    src/txdb.cpp\n+    src/txdb.cpp \\\n+    src/qt/splashscreen.cpp\n \n RESOURCES += src/qt/bitcoin.qrc\n "
      },
      {
        "sha": "5171d8b63375d3c4a8a38deb0b7382cb9fdf1093",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 54,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7467cce2668de487fe7f24c2f298bf49d94ea0a/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7467cce2668de487fe7f24c2f298bf49d94ea0a/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=e7467cce2668de487fe7f24c2f298bf49d94ea0a",
        "patch": "@@ -14,16 +14,17 @@\n #include \"util.h\"\n #include \"ui_interface.h\"\n #include \"paymentserver.h\"\n+#include \"splashscreen.h\"\n \n #include <QMessageBox>\n #include <QTextCodec>\n #include <QLocale>\n #include <QTimer>\n #include <QTranslator>\n-#include <QSplashScreen>\n #include <QLibraryInfo>\n #include <QPainter>\n \n+\n #if defined(BITCOIN_NEED_QT_PLUGINS) && !defined(_BITCOIN_QT_PLUGINS_INCLUDED)\n #define _BITCOIN_QT_PLUGINS_INCLUDED\n #define __INSURE__\n@@ -37,7 +38,7 @@ Q_IMPORT_PLUGIN(qtaccessiblewidgets)\n \n // Need a global reference for the notifications to find the GUI\n static BitcoinGUI *guiref;\n-static QSplashScreen *splashref;\n+static SplashScreen *splashref;\n \n static bool ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n {\n@@ -193,64 +194,16 @@ int main(int argc, char *argv[])\n         return 1;\n     }\n \n-    // set reference point, paddings\n-    int paddingRight            = 50;\n-    int paddingTop              = 50;\n-    int titleVersionVSpace      = 17;\n-    int titleCopyrightVSpace    = 40;\n-\n-    // define text to place\n-    QString titleText       = QString(QApplication::applicationName()).replace(QString(\"-testnet\"), QString(\"\"), Qt::CaseSensitive);\n-    QString versionText     = QString(\"Version %1\").arg(QString::fromStdString(FormatFullVersion())); //!<set the version string without client model (it's not available yet)\n-    QString copyrightText   = QChar(0xA9)+QString(\" 2009-%1\\n\").arg(COPYRIGHT_YEAR) + QString(BitcoinGUI::tr(\"The Bitcoin developers\")); //TODO: where we gonna place the copyright endyear (also check aboutdialog.cpp!)?\n-    QString testnetAddText  = QString(BitcoinGUI::tr(\"[testnet]\"));\n-\n-    // load the bitmap for writing some text over it\n-    QPixmap pixmap;\n+    QPixmap newPixmap;\n     if(GetBoolArg(\"-testnet\")) {\n-        pixmap     = QPixmap(\":/images/splash_testnet\");\n+        newPixmap     = QPixmap(\":/images/splash_testnet\");\n     }\n     else {\n-        pixmap     = QPixmap(\":/images/splash\");\n-    }\n-\n-    QPainter pixPaint(&pixmap);\n-    pixPaint.setPen(QColor(100,100,100));\n-\n-    pixPaint.setFont(QFont(\"Helvetica\", 33));\n-    QFontMetrics fm = pixPaint.fontMetrics();\n-    int titleTextWidth  = fm.width(titleText);\n-    pixPaint.drawText(pixmap.width()-titleTextWidth-paddingRight,paddingTop,titleText);\n-\n-    pixPaint.setFont(QFont(\"Helvetica\", 15));\n-\n-    // if the version string is to long, reduce size\n-    fm = pixPaint.fontMetrics();\n-    int versionTextWidth  = fm.width(versionText);\n-    if(versionTextWidth > titleTextWidth+paddingRight-10) {\n-        pixPaint.setFont(QFont(\"Helvetica\", 10));\n-        titleVersionVSpace -= 5;\n-    }\n-    pixPaint.drawText(pixmap.width()-titleTextWidth-paddingRight+2,paddingTop+titleVersionVSpace,versionText);\n-\n-    // draw copyright stuff\n-    pixPaint.setFont(QFont(\"Helvetica\", 10));\n-    pixPaint.drawText(pixmap.width()-titleTextWidth-paddingRight,paddingTop+titleCopyrightVSpace,copyrightText);\n-\n-    // draw testnet string if -testnet is on\n-    if(QApplication::applicationName().contains(QString(\"-testnet\"))) {\n-        // draw copyright stuff\n-        QFont boldFont = QFont(\"Helvetica\", 10);\n-        boldFont.setWeight(QFont::Bold);\n-        pixPaint.setFont(boldFont);\n-        fm = pixPaint.fontMetrics();\n-        int testnetAddTextWidth  = fm.width(testnetAddText);\n-        pixPaint.drawText(pixmap.width()-testnetAddTextWidth-10,15,testnetAddText);\n+        newPixmap     = QPixmap(\":/images/splash\");\n     }\n \n-    pixPaint.end();\n \n-    QSplashScreen splash(pixmap, 0);\n+    SplashScreen splash(newPixmap,0);\n     if (GetBoolArg(\"-splash\", true) && !GetBoolArg(\"-min\"))\n     {\n         splash.show();"
      },
      {
        "sha": "3b8e5877e5f0472451c21b1b135e1de77825484d",
        "filename": "src/qt/splashscreen.cpp",
        "status": "added",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7467cce2668de487fe7f24c2f298bf49d94ea0a/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7467cce2668de487fe7f24c2f298bf49d94ea0a/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=e7467cce2668de487fe7f24c2f298bf49d94ea0a",
        "patch": "@@ -0,0 +1,63 @@\n+#include \"splashscreen.h\"\n+#include \"clientversion.h\"\n+#include \"util.h\"\n+\n+#include <QPainter>\n+#include <QApplication>\n+\n+SplashScreen::SplashScreen(const QPixmap &pixmap, Qt::WindowFlags f) :\n+    QSplashScreen(pixmap, f)\n+{\n+    // set reference point, paddings\n+    int paddingRight            = 50;\n+    int paddingTop              = 50;\n+    int titleVersionVSpace      = 17;\n+    int titleCopyrightVSpace    = 40;\n+\n+    // define text to place\n+    QString titleText       = QString(QApplication::applicationName()).replace(QString(\"-testnet\"), QString(\"\"), Qt::CaseSensitive);\n+    QString versionText     = QString(\"Version %1\").arg(QString::fromStdString(FormatFullVersion()));\n+    QString copyrightText   = QChar(0xA9)+QString(\" 2009-%1\\n\").arg(COPYRIGHT_YEAR) + QString(tr(\"The Bitcoin developers\"));\n+    QString testnetAddText  = QString(tr(\"[testnet]\"));\n+\n+    // load the bitmap for writing some text over it\n+    QPixmap newPixmap = this->pixmap();\n+\n+    QPainter pixPaint(&newPixmap);\n+    pixPaint.setPen(QColor(100,100,100));\n+\n+    pixPaint.setFont(QFont(\"Helvetica\", 33));\n+    QFontMetrics fm = pixPaint.fontMetrics();\n+    int titleTextWidth  = fm.width(titleText);\n+    pixPaint.drawText(newPixmap.width()-titleTextWidth-paddingRight,paddingTop,titleText);\n+\n+    pixPaint.setFont(QFont(\"Helvetica\", 15));\n+\n+    // if the version string is to long, reduce size\n+    fm = pixPaint.fontMetrics();\n+    int versionTextWidth  = fm.width(versionText);\n+    if(versionTextWidth > titleTextWidth+paddingRight-10) {\n+        pixPaint.setFont(QFont(\"Helvetica\", 10));\n+        titleVersionVSpace -= 5;\n+    }\n+    pixPaint.drawText(newPixmap.width()-titleTextWidth-paddingRight+2,paddingTop+titleVersionVSpace,versionText);\n+\n+    // draw copyright stuff\n+    pixPaint.setFont(QFont(\"Helvetica\", 10));\n+    pixPaint.drawText(newPixmap.width()-titleTextWidth-paddingRight,paddingTop+titleCopyrightVSpace,copyrightText);\n+\n+    // draw testnet string if -testnet is on\n+    if(QApplication::applicationName().contains(QString(\"-testnet\"))) {\n+        // draw copyright stuff\n+        QFont boldFont = QFont(\"Helvetica\", 10);\n+        boldFont.setWeight(QFont::Bold);\n+        pixPaint.setFont(boldFont);\n+        fm = pixPaint.fontMetrics();\n+        int testnetAddTextWidth  = fm.width(testnetAddText);\n+        pixPaint.drawText(newPixmap.width()-testnetAddTextWidth-10,15,testnetAddText);\n+    }\n+\n+    pixPaint.end();\n+\n+    this->setPixmap(newPixmap);\n+}"
      },
      {
        "sha": "4c5d9a0fc6b737e4fdec2e4eefc4d16ed2374663",
        "filename": "src/qt/splashscreen.h",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7467cce2668de487fe7f24c2f298bf49d94ea0a/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7467cce2668de487fe7f24c2f298bf49d94ea0a/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=e7467cce2668de487fe7f24c2f298bf49d94ea0a",
        "patch": "@@ -0,0 +1,17 @@\n+#ifndef SPLASHSCREEN_H\n+#define SPLASHSCREEN_H\n+\n+#include <QSplashScreen>\n+\n+class SplashScreen : public QSplashScreen\n+{\n+    Q_OBJECT\n+public:\n+    explicit SplashScreen(const QPixmap &pixmap = QPixmap(), Qt::WindowFlags f = 0);\n+signals:\n+    \n+public slots:\n+    \n+};\n+\n+#endif // SPLASHSCREEN_H"
      }
    ]
  }
]