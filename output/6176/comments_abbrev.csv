sdaftuar,2015-05-23T10:04:05Z,I think we need to add a check that the replacing transaction isn't spending an output of the to-be-replaced transaction; I just wrote up a quick test and it looks to me like this would cause an orphan transaction to enter the mempool.\n,https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-104877829,104877829,
petertodd,2015-05-23T16:14:30Z,@sdaftuar Nice catch! Fixed.\n,https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-104918678,104918678,
dgenr8,2015-05-26T18:40:45Z,"Should also ensure that no inputs have been removed or changed (other than scriptsigs) -- only added.\n\nOtherwise, the semantics change for the original signers.  Imagine a tx with two inputs from different parties.  Should it be easy for party 1 to be able to eliminate party 2 as a contributor of funds?  It's not difficult to imagine real-world consequences to not having contributed to the trans",https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-105630255,105630255,
sdaftuar,2015-05-26T19:30:17Z,"I don't see a problem with removing inputs, but perhaps we should consider an additional requirement that any inputs not in the original transaction must also not be in the mempool (and therefore must already be confirmed).\n\nI think the idea should be that the replacing-transaction is more likely to be confirmed than the previous transaction.  If the replacing transaction has slightly higher fee",https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-105642248,105642248,
petertodd,2015-05-27T01:14:14Z,"@sdaftuar That's an interesting point. You're right that just forcing the input to be confirmed works; a more sophisticated - but still fairly easy to implement - approach would be to to have the mempool track the sum fee of transactions' parents and reject the replacement if you're going from a higher fee/KB parent to a lower one.\n\nHaving said that, I'm don't think you can really create an atta",https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-105709000,105709000,
petertodd,2015-05-27T01:19:05Z,"@dgenr8 re: nLockTime, we only allow transactions into the mempool if they're final, in which case the exact nLockTime value is irrelevant; I don't think we should bend over backwards to accommodate weird smart contract protocols, particularly when it's easy to design them such that eliminating a contributor of funds from the transaction means the ""thing"" that was meant to happen doesn't happen. I",https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-105709406,105709406,
dgenr8,2015-05-27T04:20:15Z,"@petertodd For a fee increase, there is no need to expose to deletion inputs in a transaction with inputs from multiple parties, which cannot be distinguished from a transaction whose inputs are all owned by a single party. (A tx with exactly one input can't conflict with a 1-input replacement if it increases the fee, given the restrictions on changes to outputs).\n\nYou're right about nLocktime, ",https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-105750419,105750419,
petertodd,2015-05-27T07:32:28Z,@dgenr8 With CLTV you may need to set nLockTime on a transaction that previous had it unset to accomplish a fee bump; spending an input may require nLockTime to be set. Equally there are 2fa wallet cases where nLockTime must be set. Allowing nLockTime to be increased by the replacement fits well with the fee-sniping protection added by https://github.com/petertodd/bitcoin/commit/ba7fcc8de06602576a,https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-105799414,105799414,
sdaftuar,2015-05-27T13:43:07Z,"@petertodd  I agree comparing the total fee/kb with all parent tx's ought to address the issue, but I wasn't sure if implementing that would be worth the complexity, mainly because CPFP hasn't yet been merged.  But either approach seems fine to me.\n\nAnyway I also don't see this as an attack vector, more like a way to prevent a user from accidentally RBF'ing to a higher fee tx that has a lower ch",https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-105915255,105915255,
petertodd,2015-06-06T02:41:38Z,@sdaftuar Here's a new version with the additional restriction that additional inputs must be confirmed.\n,https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-109506765,109506765,
aalness,2015-06-20T20:23:30Z,@petertodd While I really appreciate you thinking to cc me on this review please do not expect one from me. I've decided to no longer work on bitcoin-related projects nor participate further in the community.\n,https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-113817547,113817547,
sdaftuar,2015-06-25T19:09:51Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-115366200,115366200,
petertodd,2015-06-29T05:03:51Z,Closing in favor of #6352 \n,https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-116436480,116436480,
jonasschnelli,2015-05-22T14:57:43Z,Would it not be possible to rewrite/adapt this test so it would conform to other `qa/rpc-tests/*` and would therefore use the same framework?\n,https://github.com/bitcoin/bitcoin/pull/6176#discussion_r30901955,30901955,qa/replace-by-fee/replace-by-fee-tests.py
petertodd,2015-05-22T15:02:41Z,"Sure, but that framework kinda sucks due to the lack of a good python Bitcoin library. Also, like I said above, I know I'll be backporting it so I needed a stand-alone set of tests that I could test the backports against.\n",https://github.com/bitcoin/bitcoin/pull/6176#discussion_r30902489,30902489,qa/replace-by-fee/replace-by-fee-tests.py
sdaftuar,2015-05-22T15:03:58Z,Empty code block?\n,https://github.com/bitcoin/bitcoin/pull/6176#discussion_r30902625,30902625,src/main.cpp
petertodd,2015-05-22T15:14:33Z,"Lol, I must be blind... That's stub code replaced by the lines just below it; fixed, thanks!\n",https://github.com/bitcoin/bitcoin/pull/6176#discussion_r30903649,30903649,src/main.cpp
sdaftuar,2015-05-22T16:08:55Z,"I believe it shouldn't be possible for there to be more than one transaction in `ltxConflicted` here, is that right?  Perhaps clarifying the comment at line 1155 (or adding an assertion about the size of this list) would be helpful.\n",https://github.com/bitcoin/bitcoin/pull/6176#discussion_r30908342,30908342,src/main.cpp
petertodd,2015-05-22T16:52:51Z,"The mempool isn't locked the whole time, so I believe there's a small chance there could be more than one conflicting transaction. (never mind future design changes!)\n\nUpdated comment.\n",https://github.com/bitcoin/bitcoin/pull/6176#discussion_r30911637,30911637,src/main.cpp
sdaftuar,2015-05-26T20:13:26Z,"Mostly an fyi after looking at this more: despite the mempool lock not being held the whole time, cs_main is held, and that seems important for a preventing a race condition (otherwise the result of `view.HaveInputs()` at line 1029 could have changed by the time you get to `pool.addUnchecked()` at line 1182)...  Anyway, I don't think there can be more than one conflicting transaction.\n",https://github.com/bitcoin/bitcoin/pull/6176#discussion_r31074514,31074514,src/main.cpp
ashleyholman,2015-06-20T22:30:35Z,"You could avoid checking each vout sequentially by checking mapNextTx.lower_bound(COutPoint(hashConflicting, 0))\n",https://github.com/bitcoin/bitcoin/pull/6176#discussion_r32888773,32888773,src/main.cpp
ashleyholman,2015-06-20T22:31:33Z,"I may be wrong here, but wouldn't your previous check (no new inputs are in the mempool) already catch this case?\n",https://github.com/bitcoin/bitcoin/pull/6176#discussion_r32888788,32888788,src/main.cpp
petertodd,2015-06-21T10:35:37Z,"Ah, yeah, that's true now that it's been changed to require new inputs to be confirmed. Good catch.\n",https://github.com/bitcoin/bitcoin/pull/6176#discussion_r32892383,32892383,src/main.cpp
petertodd,2015-06-21T10:41:51Z,"As in, check if the mapNextTx.lower_bound() hash == hashConflicting or the lower_bound() returns mapNextTx.end()?\n\nSeems reasonable, though the way that depends on which way COutPoint's is sorted bothers me slightly.\n",https://github.com/bitcoin/bitcoin/pull/6176#discussion_r32892417,32892417,src/main.cpp
petertodd,2015-06-22T04:58:25Z,"@ashleyholman Switched to lower_bound(), thanks! Mind checking the new code over?\n",https://github.com/bitcoin/bitcoin/pull/6176#discussion_r32905456,32905456,src/main.cpp
petertodd,2015-06-22T04:59:13Z,Removed this check and replaced it with a comment describing how it's needed if we ever allow the new inputs to be unconfirmed.\n,https://github.com/bitcoin/bitcoin/pull/6176#discussion_r32905506,32905506,src/main.cpp
jtimon,2015-06-29T09:15:24Z,"@sdaftuar other policies can replace more than one conflicting transaction. But, yeah, since this code doesn't, an assert with a comment along the lines ""disable multiple replacement feature for now"" wouldn't hurt.\n",https://github.com/bitcoin/bitcoin/pull/6176#discussion_r33446240,33446240,src/main.cpp
