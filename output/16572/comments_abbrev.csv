laanwj,2019-08-08 23:49:00,"Seems like an improvement, any idea why this was a char in the first place (or how it came to be)?\n\n> I don't think this is a vulnerability, but it's just a little messy and unsemantic, and could lead to issues with stored wtxIns not being findable in a map by their hash.\n\nWait, this metadata is never part of the transaction hash right?",https://github.com/bitcoin/bitcoin/pull/16572#issuecomment-519726859,519726859,
JeremyRubin,2019-08-08 23:56:14,"It seems like it is just old/crufty. It was previously proposed by @ryanofsky to be removed (dummied out), but that went nowhere. https://github.com/bitcoin/bitcoin/pull/9351\n\nKeeping the distinction seems OK to me, but the consistency issue should be fixed in any case.\n\n\nThe metadata isn't a part of the transaction hash, but it *could* be a part of the hash (like a siphash, not a crypto",https://github.com/bitcoin/bitcoin/pull/16572#issuecomment-519728119,519728119,
kallewoof,2019-08-09 02:45:26,"Concept ACK\n\nThere's also this which I never got why it was a `char`:\n\nhttps://github.com/bitcoin/bitcoin/blob/e5fdda68c6d2313edb74443f0d1e6d2ce2d97f5e/src/wallet/coinselection.cpp#L173\n",https://github.com/bitcoin/bitcoin/pull/16572#issuecomment-519756596,519756596,
JeremyRubin,2019-08-09 03:13:00,"Actually there is a reason for that one!\n\nVec bool is typically compacted, so it's *probably* slower running because of masking.\n\nMaybe worth profiling to find out!",https://github.com/bitcoin/bitcoin/pull/16572#issuecomment-519761080,519761080,
sipa,2019-08-09 03:24:36,"From a march 2011 mail from Satoshi to me about how the wallet tracks unspent outputs:\n\n```\nEverything that uses fSpent must be changed to use\nvfSpent instead.  I reorganised IMPLEMENT_SERIALIZE\na little better, now that it's clear how the pattern is going. \nDebatable whether to use vector<char> or vector<bool>. \nA lot of people hate vector<bool> because it has\nirregularities to trip over.",https://github.com/bitcoin/bitcoin/pull/16572#issuecomment-519762890,519762890,
JeremyRubin,2019-08-09 03:35:42,"Hm; may be worth it to go ahead and modify these locations to use `vec<char>`...\n\n```\nblockencodings.cpp\nmerkleblock.cpp\nrest.cpp\nscript/interpreter.cpp\ntest/pmt_tests.cpp\ntxdb.cpp\nwallet/coinselection.cpp\n```\n\nWould require some profiling to ensure that there isn't a regression.\n\nThe only place that is using `vector<bool>` for compactness is the cuckoocache.",https://github.com/bitcoin/bitcoin/pull/16572#issuecomment-519764668,519764668,
kallewoof,2019-08-09 05:37:25,Gotta love the unexpected history lessons. :),https://github.com/bitcoin/bitcoin/pull/16572#issuecomment-519785058,519785058,
laanwj,2019-08-09 09:12:32,"> Hm; may be worth it to go ahead and modify these locations to use vec<char>...\n\nWhy? Unless you can demonstrate specific performance improvements, where the (possible) compaction causes bottlenecks, I strongly disagree that this is a reason to go around refactoring things.\n\nFrom a developer angle `vector<bool>` is definitely less surprising to encounter (use bools for what should be bool",https://github.com/bitcoin/bitcoin/pull/16572#issuecomment-519845609,519845609,
JeremyRubin,2019-08-09 17:39:39,"Ah; I don't suspect there's a performance reason to modify them, but if there's general concern for surprising behavior with the `std::vector<bool>`, it would be good to avoid that.\n\nIn any case, this is a bit of a side-quest from the scope of this PR.",https://github.com/bitcoin/bitcoin/pull/16572#issuecomment-520004055,520004055,
laanwj,2019-08-14 09:12:05,"> Ah; I don't suspect there's a performance reason to modify them, but if there's general concern for surprising behavior with the std::vector<bool>, it would be good to avoid that.\n\nWhat kind of surprising behavior, really? the implementation might be different but as far as I know, the ""API contract"" is exactly the same?",https://github.com/bitcoin/bitcoin/pull/16572#issuecomment-521167541,521167541,
sipa,2019-08-14 17:02:07,"I think the only surprising thing about it is that you can't cast a pointer to  the data to a char pointer and expect any consistent representation of the data... which you shouldn't be doing anyway, but I think the early codebase did stuff like that.",https://github.com/bitcoin/bitcoin/pull/16572#issuecomment-521331550,521331550,
JeremyRubin,2019-08-14 20:32:01,"The main one is the data pointer to a bool pointer.\n\nThere are a few other differences:\n\n1) Concurrent modification of different bits is not guaranteed to be safe\n2) The ""API Contract"" differs, such that generic code can't be written accepting `vector<bool>` (e.g., range for loops don't work).\n",https://github.com/bitcoin/bitcoin/pull/16572#issuecomment-521407085,521407085,
achow101,2019-08-14 20:36:28,"Code review ACK 2dbfb37b407ed23b517f507d78fb77334142dce5\n\nI checked that fFromMe is only used as a bool. I also checked bools and chars are being serialized in exactly the same way so this does not change any behavior.",https://github.com/bitcoin/bitcoin/pull/16572#issuecomment-521408695,521408695,
laanwj,2019-08-15 11:52:51,"> The ""API Contract"" differs, such that generic code can't be written accepting vector<bool> (e.g., range for loops don't work).\n\nFWIW this works fine here … (but maybe it's a gcc-ism?)\n```c++\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<bool> test;\n    test.push_back(false);\n    test.push_back(true);\n    test.push_back(false);\n    for (auto const &x:",https://github.com/bitcoin/bitcoin/pull/16572#issuecomment-521615490,521615490,
practicalswift,2019-08-15 12:47:03,"@laanwj Note that the `x` you get in your example is likely a ""bit reference"" (`std::_Bit_reference`) and not a `bool`.\n\nThe gotcha:\n\n```\n    std::vector<char> v1;\n    for (const auto& x : v1) {\n      // const char& x (as expected)\n    }\n\n    std::vector<int> v2;\n    for (const auto& x : v2) {\n      // const int& x (as expected)\n    }\n\n    std::vector<bool> v3;\n    ",https://github.com/bitcoin/bitcoin/pull/16572#issuecomment-521628502,521628502,
DrahtBot,2019-08-16 00:36:04,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16624](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16624.html) (wallet : encapsulate transactions state by ",https://github.com/bitcoin/bitcoin/pull/16572#issuecomment-521843620,521843620,
laanwj,2019-08-21 07:33:42,"> Regardless of the above discussion on vectors, this change itself looks safe to me, and does make things more sensible IMO.\n\nYes, agree, sorry it got derailed. Posthumous ACK 2dbfb37b407ed23b517f507d78fb77334142dce5. This change is the right way around, I was arguing against going `bool` to `char`.",https://github.com/bitcoin/bitcoin/pull/16572#issuecomment-523335347,523335347,
