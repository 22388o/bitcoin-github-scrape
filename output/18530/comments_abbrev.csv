DrahtBot,2020-04-05 07:24:58,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #16890 (rpc: Don't allow to 'estimatesmartfee' in blocksonly mode by darosior)\n\nIf you consider this pull request import",https://github.com/bitcoin/bitcoin/pull/18530#issuecomment-609371900,609371900,
MarcoFalke,2020-04-05 13:12:24,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18530#issuecomment-609414468,609414468,
MarcoFalke,2020-04-18 23:11:27,"From travis:\n\n```\ntest/functional/p2p_blocksonly.py:68:83: W291 trailing whitespace\n\ntest/functional/p2p_blocksonly.py:74:1: W293 blank line contains whitespace\n\n^---- failure generated from test/lint/lint-python.sh\n\n\nThis diff appears to have added new lines with trailing whitespace.\n\nThe following changes were suspected:\n\ndiff --git a/test/functional/p2p_blocksonly.py",https://github.com/bitcoin/bitcoin/pull/18530#issuecomment-615974320,615974320,
glowang,2020-05-10 00:23:02,All comments have been addressed. This PR is ready for review.,https://github.com/bitcoin/bitcoin/pull/18530#issuecomment-626253678,626253678,
glowang,2020-05-17 16:02:48,net_processing.cpp file comment has been updated. ready for re-review.,https://github.com/bitcoin/bitcoin/pull/18530#issuecomment-629820476,629820476,
MarcoFalke,2020-05-17 16:56:48,ACK 0ea5d70b4756f376342417e0019490233cb4a918,https://github.com/bitcoin/bitcoin/pull/18530#issuecomment-629828283,629828283,
MarcoFalke,2020-05-21 13:01:01,Thanks again for improving documentation and adding tests. This should be ready for merge now.,https://github.com/bitcoin/bitcoin/pull/18530#issuecomment-632072333,632072333,
glowang,2020-04-05 03:21:04,(will remove after debugging),https://github.com/bitcoin/bitcoin/pull/18530#discussion_r403642900,403642900,test/functional/p2p_blocksonly.py
glowang,2020-04-05 03:23:01,"I am getting this error on this line: \n`File ""/Users/gwang/Documents/bitcoin/test/functional/test_framework/util.py"", line 234, in wait_until\n    raise AssertionError(""Predicate {} not true after {} seconds"".format(predicate_source, timeout))\nAssertionError: Predicate ''''\n        def test_function():\n            assert self.is_connected\n            if not self.last_message.get('tx'):",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r403643020,403643020,test/functional/p2p_blocksonly.py
glowang,2020-04-05 03:26:10,"There seem to exist many variations of the ""whitelist"" params and different tests set these params differently. For example, ` [""-whitelist=127.0.0.1"", ""-whitelistrelay=0""]`, or ` [""-whitelist=127.0.0.1"", ""-whitelistrelay=0""],`, `['-whitelist=noban@127.0.0.1']`, etc. Understanding the nuances between them is a bit challenging after I have done quite a bit of digging. Could someone point me to some",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r403643235,403643235,test/functional/p2p_blocksonly.py
glowang,2020-04-05 03:26:50,not sure if `noban` is necessary to check here,https://github.com/bitcoin/bitcoin/pull/18530#discussion_r403643287,403643287,test/functional/p2p_blocksonly.py
RANDALL-hub,2020-04-05 03:30:07,REVISA LA BASE Y CONTINUA CON LO DEMÁS.,https://github.com/bitcoin/bitcoin/pull/18530#discussion_r403643527,403643527,test/functional/p2p_blocksonly.py
MarcoFalke,2020-04-05 13:10:57,"I think if you add nopersistmempool, it will drop the tx from the mempool and you can reuse it for this test without having to construct it again. In fact the below construction looks similar to the one above, so the resulting tx might be the same, thus leading to test failures.\n\n```suggestion\n        self.start_node(0, [""-whitelist=127.0.0.1"", ""-whitelistforcerelay"", ""-blocksonly"", ""-nopers",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r403700002,403700002,test/functional/p2p_blocksonly.py
glowang,2020-04-07 17:18:44,"Thanks Marco, going to try again with the suggestion!",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r404979914,404979914,test/functional/p2p_blocksonly.py
MarcoFalke,2020-04-08 00:13:35,"On startup failures or general test failures, you can combine the logs to see the issue:\n\n```\n$ ./test/functional/combine_logs.py -c /tmp/bitcoin_func_test_wnpgbmh_  | tail \n                                     File ""/home/marco/workspace/btc_bitcoin_core/test/functional/test_framework/test_framework.py"", line 419, in start_node\n                                       node.wait_for_rpc_co",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r405186143,405186143,test/functional/test_framework/test_node.py
MarcoFalke,2020-04-08 00:13:48,"```suggestion\n        self.restart_node(0, [""-persistmempool=0"", ""-whitelist=127.0.0.1"", ""-whitelistforcerelay"", ""-blocksonly""])\n```",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r405186243,405186243,test/functional/p2p_blocksonly.py
MarcoFalke,2020-04-08 00:14:58,"See also https://github.com/bitcoin/bitcoin/tree/master/test#test-logging\n\nI just ran the test with\n```\n$ ./test/functional/p2p_blocksonly.py --tracerpc -l DEBUG",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r405186596,405186596,test/functional/test_framework/test_node.py
MarcoFalke,2020-04-12 01:04:50,"You will need at least three (mini)nodes if you want to check what you claim to be wanting to check. ""Check that txs from whitelisted peers are not rejected and relayed to others""\n\nwhitlisted peer --- tx ---> Bitcoin Core ---- tx -----> another peer\n\n```suggestion\n            another_peer = self.nodes[0].add_p2p_connection(P2PInterface())\n            ... etc\n```",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r407129597,407129597,test/functional/p2p_blocksonly.py
glowang,2020-04-12 02:36:07,"Achso! I **thnk** I know why I am erroring...I couldn't figure out why `self.nodes[0].p2p.wait_for_tx(txid)` kept timing out(line 77)...but little did I realized that  this tx was originated by `self.nodes[0].p2p` hence it wouldn't hear this transaction again?? And instead, `another_peer.wait_for_tx(txid)` would be the correct thing to check for..?",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r407136294,407136294,test/functional/p2p_blocksonly.py
glowang,2020-04-12 02:44:56,"Also, this has been unclear to me:\nline 69 suggests to me that it is nodes[0]'s peer who sends out the transaction, which should be received by node[0]. We want to test whether node[0] would accept and relay this tx. This is aligned with purpose of the test.\n\nHowever, on line 24, 33, and line 76, it seems to be that node[0] is the one who initiates the transaction, zB ` self.nodes[0].sendraw",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r407137006,407137006,test/functional/p2p_blocksonly.py
glowang,2020-04-12 02:45:22,@MarcoFalke  It would be really great if you could clarify this too,https://github.com/bitcoin/bitcoin/pull/18530#discussion_r407137042,407137042,test/functional/p2p_blocksonly.py
MarcoFalke,2020-04-12 22:46:05,"> And instead, another_peer.wait_for_tx(txid) would be the correct thing to check for..?\n\nCorrect",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r407261799,407261799,test/functional/p2p_blocksonly.py
MarcoFalke,2020-04-12 22:50:03,"`self.nodes[0]` is the Bitcoin Core node ""in the middle"". I suggest not using self.nodes[0].p2p at all and instead assigning the peers proper names. You did that with `first_peer`, `second_peer`.\n\n`first_peer` and `second_peer` are *not* Bitcoin Core nodes, but python mininodes (mock nodes).\n\nWhen you say `self.nodes[0].sendrawtransacttion`, I believe you really meant `first_peer.send_mess",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r407262179,407262179,test/functional/p2p_blocksonly.py
glowang,2020-04-18 17:39:37,I think what confuses me is the existing code line 56 uses this construct too: `   self.nodes[0].sendrawtransaction(sigtx)` so I kind of mimicked that line 😂  Does this mean that line 56 should be fixed too?,https://github.com/bitcoin/bitcoin/pull/18530#discussion_r410727651,410727651,test/functional/p2p_blocksonly.py
MarcoFalke,2020-04-18 17:52:53,"That is a different test ""Check that txs from **rpc** are not rejected"", here in this line you are testing ""Check that the tx from **whitelisted peers** ...""\n\nSo those two lines should differ between the test cases",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r410729083,410729083,test/functional/p2p_blocksonly.py
glowang,2020-04-18 21:57:36,I think the fact that wait_for_tx does not throw indicate my second_peer has received this tx. Not sure if there is a way to check this more explicitly,https://github.com/bitcoin/bitcoin/pull/18530#discussion_r410756582,410756582,test/functional/p2p_blocksonly.py
glowang,2020-04-18 22:00:03,"I noticed a pattern of using ""with"" statement, or context manager, for checks like this. For example, line (42 and 54). But I am not quite sure whether that is necessary. wait_for_tx will timeout after 60 seconds anyways. What resources are we trying to release with the ""with"" anyways? ",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r410756956,410756956,test/functional/p2p_blocksonly.py
MarcoFalke,2020-04-18 22:31:53,"It is optional. If you want you can check that an exact code path was hit that also contained a debug statement.\n\nIn this case it would be:\n\n```py\nwith self.nodes[0].assert_debug_log([""Force relaying tx {} from whitelisted peer=0"".format(txid)]):\n  first_peer.send(...\n  ...\n```\n\nTo check you are hitting the right branch in `src/net_processing.cpp`, where it say ""Force relaying ",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r410761566,410761566,test/functional/p2p_blocksonly.py
MarcoFalke,2020-04-18 22:47:51,"Travis seems to be passing, but there is a linter error. Potentially pep8. Maybe it is this missing line?\n\nYou can try to format the python code with some kind of formatter or run the `./test/lint/lint-python.sh` and fix the issues up manually.",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r410764108,410764108,test/functional/p2p_blocksonly.py
glowang,2020-04-25 23:22:05,"I wasn't able assert that  if (pfrom->HasPermission(PF_FORCERELAY)) {...} is hit, even though my peer's permissions list includes ""forcerelay"", which should correspond to PF_FORCERELAY... \n\nFrom [here](https://bitcoin.org/en/developer-reference#inv): ""The getdata message should usually only be used to request data from a node which previously advertised it had that data by sending an `inv` mes",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r415166184,415166184,test/functional/p2p_blocksonly.py
glowang,2020-04-28 15:52:00,@MarcoFalke  could you take a look at this?,https://github.com/bitcoin/bitcoin/pull/18530#discussion_r416727134,416727134,test/functional/p2p_blocksonly.py
MarcoFalke,2020-04-28 17:03:32,"```suggestion\n        with self.nodes[0].assert_debug_log([""received getdata"", ""Force relaying tx {} from whitelisted peer={}"".format(txid, 0)]):\n```\n\nYou can assert that the if-branch is hit by reading the log statement that is written to the debug log when this if-branch is executed.",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r416777818,416777818,test/functional/p2p_blocksonly.py
glowang,2020-04-29 05:41:39,"I am still not sure why I am getting error trying to assert that this if branch is hit. \n\nFrom ` else if (permission == ""forcerelay"") NetPermissions::AddFlag(flags, PF_FORCERELAY);` I konw that we can assert that PF_FORCERELAY flag is set with ""forcerelay"". However, when I tried to assert this, I got this following error that suggest that this branch isn't:\n\nAssertionError: [node 0] Expect",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r417078022,417078022,test/functional/p2p_blocksonly.py
glowang,2020-04-29 05:46:11,"And the other place where we tested whether this if-branch is hit is in p2p_permissions.py: and the major difference between the two setups is this one uses P2PDataStore, mine uses P2PInterface: \n`p2p_rebroadcast_wallet = self.nodes[1].add_p2p_connection(P2PDataStore())` \n\nAlso, this test was able to assert `Force relaying ...` beacuse this broadcast happened between two full-nodes, not betw",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r417079292,417079292,test/functional/p2p_blocksonly.py
MarcoFalke,2020-04-29 13:15:40,You will need to send the message (tx) inside the assert debug log context mangager. Otherwise the log is not captured.,https://github.com/bitcoin/bitcoin/pull/18530#discussion_r417304574,417304574,test/functional/p2p_blocksonly.py
MarcoFalke,2020-05-10 13:30:12,"```suggestion\n        // 1) We are in blocks only mode and the peer has no relay permission\n```\n\nI think this can be said slightly more concise, but still correct",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r422645953,422645953,src/net_processing.cpp
MarcoFalke,2020-05-15 10:18:20,"this needs to be removed as well, ofc",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r425706072,425706072,src/net_processing.cpp
glowang,2020-05-17 15:18:14,"Ach ja, natürlich 😂  ",https://github.com/bitcoin/bitcoin/pull/18530#discussion_r426272868,426272868,src/net_processing.cpp
