[
  {
    "sha": "fa7da0617c814aeb06d5c70c4bb8e18c79fb8725",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTdkYTA2MTdjODE0YWViMDZkNWM3MGM0YmI4ZTE4Yzc5ZmI4NzI1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-13T16:14:47Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-13T16:05:24Z"
      },
      "message": "qa: Check specific reject reasons in feature_block",
      "tree": {
        "sha": "f1c2fed11b21bdb4f1e0ce466ce7f49a03abfb4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1c2fed11b21bdb4f1e0ce466ce7f49a03abfb4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7da0617c814aeb06d5c70c4bb8e18c79fb8725",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJb6vZEAAoJEM4rdWl+aaVIdisL/35xsHd1poG5hA9OLL93ETWt\noQ9FSOugopDhyxwJ0HI6SOirH2ednikC0Ig4lROJ1zfT8FbOdMETFUm4WnKvnUmu\nS5TCl9PlWqg8svm+hki3VdKtoz1QjWG1hq/P3Y6a1h2In+Uwb72M9jsl5lzyVJA0\nkXdkk7wwto4T5VtSk35jJEs8KhKDyN61ml8ytebYKi3QZvJ4dZBV25zYkEEneLrr\nNL66moAMK99fLOesaA7T6AkQDpfsyCHWbfRCvBA9kPy84GdJOtwvPXZxH9oZFM5W\nG0bkc+ooSURhSmnN7kfkyRn0qWuSCf4G//THYrMaXU3ba0oVVS5oEL8+TbdHcBbO\nzN9pAHz7sMYQEJcyYpJPY1RGDwDlom9GGo/+H1XCohnPNNWY31JBiHU7HSD8+jix\n6qpbTT18ye5r81sMmKVpbclkXyDQtYBlmvpyF1zmtj+dZUMTIRn/yQgTS9yJvheM\n/Ms+hHh2fviLq/8zUPrSvuJvFT4TqvcmqXzmMjo5ZQ==\n=oFjf\n-----END PGP SIGNATURE-----",
        "payload": "tree f1c2fed11b21bdb4f1e0ce466ce7f49a03abfb4d\nparent 5d605b27457dd307e31ac320c83f3b01a41e1ae1\nauthor MarcoFalke <falke.marco@gmail.com> 1542125687 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1542125124 -0500\n\nqa: Check specific reject reasons in feature_block\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7da0617c814aeb06d5c70c4bb8e18c79fb8725",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7da0617c814aeb06d5c70c4bb8e18c79fb8725",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7da0617c814aeb06d5c70c4bb8e18c79fb8725/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d605b27457dd307e31ac320c83f3b01a41e1ae1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d605b27457dd307e31ac320c83f3b01a41e1ae1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d605b27457dd307e31ac320c83f3b01a41e1ae1"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 19,
      "deletions": 16
    },
    "files": [
      {
        "sha": "e50f67a34517baa96cbac49b8d8e5e4ba66f170c",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7da0617c814aeb06d5c70c4bb8e18c79fb8725/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7da0617c814aeb06d5c70c4bb8e18c79fb8725/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=fa7da0617c814aeb06d5c70c4bb8e18c79fb8725",
        "patch": "@@ -579,14 +579,14 @@ def run_test(self):\n         while b47.sha256 < target:\n             b47.nNonce += 1\n             b47.rehash()\n-        self.sync_blocks([b47], False, request_block=False)\n+        self.sync_blocks([b47], False, force_send=True, reject_reason='high-hash')\n \n         self.log.info(\"Reject a block with a timestamp >2 hours in the future\")\n         self.move_tip(44)\n         b48 = self.next_block(48, solve=False)\n         b48.nTime = int(time.time()) + 60 * 60 * 3\n         b48.solve()\n-        self.sync_blocks([b48], False, request_block=False)\n+        self.sync_blocks([b48], False, force_send=True, reject_reason='time-too-new')\n \n         self.log.info(\"Reject a block with invalid merkle hash\")\n         self.move_tip(44)\n@@ -600,7 +600,7 @@ def run_test(self):\n         b50 = self.next_block(50)\n         b50.nBits = b50.nBits - 1\n         b50.solve()\n-        self.sync_blocks([b50], False, request_block=False, reconnect=True)\n+        self.sync_blocks([b50], False, force_send=True, reject_reason='bad-diffbits', reconnect=True)\n \n         self.log.info(\"Reject a block with two coinbase transactions\")\n         self.move_tip(44)\n@@ -630,7 +630,7 @@ def run_test(self):\n         b54 = self.next_block(54, spend=out[15])\n         b54.nTime = b35.nTime - 1\n         b54.solve()\n-        self.sync_blocks([b54], False, request_block=False)\n+        self.sync_blocks([b54], False, force_send=True, reject_reason='time-too-old')\n \n         # valid timestamp\n         self.move_tip(53)\n@@ -1078,11 +1078,11 @@ def run_test(self):\n \n         self.move_tip(77)\n         b80 = self.next_block(80, spend=out[25])\n-        self.sync_blocks([b80], False, request_block=False)\n+        self.sync_blocks([b80], False, force_send=True)\n         self.save_spendable_output()\n \n         b81 = self.next_block(81, spend=out[26])\n-        self.sync_blocks([b81], False, request_block=False)  # other chain is same length\n+        self.sync_blocks([b81], False, force_send=True)  # other chain is same length\n         self.save_spendable_output()\n \n         b82 = self.next_block(82, spend=out[27])\n@@ -1189,7 +1189,7 @@ def run_test(self):\n         blocks2 = []\n         for i in range(89, LARGE_REORG_SIZE + 89):\n             blocks2.append(self.next_block(\"alt\" + str(i)))\n-        self.sync_blocks(blocks2, False, request_block=False)\n+        self.sync_blocks(blocks2, False, force_send=True)\n \n         # extend alt chain to trigger re-org\n         block = self.next_block(\"alt\" + str(chain1_tip + 1))\n@@ -1198,7 +1198,7 @@ def run_test(self):\n         # ... and re-org back to the first chain\n         self.move_tip(chain1_tip)\n         block = self.next_block(chain1_tip + 1)\n-        self.sync_blocks([block], False, request_block=False)\n+        self.sync_blocks([block], False, force_send=True)\n         block = self.next_block(chain1_tip + 2)\n         self.sync_blocks([block], True, timeout=180)\n \n@@ -1309,14 +1309,15 @@ def reconnect_p2p(self):\n         self.nodes[0].disconnect_p2ps()\n         self.bootstrap_p2p()\n \n-    def sync_blocks(self, blocks, success=True, reject_reason=None, request_block=True, reconnect=False, timeout=60):\n+    def sync_blocks(self, blocks, success=True, reject_reason=None, force_send=False, reconnect=False, timeout=60):\n         \"\"\"Sends blocks to test node. Syncs and verifies that tip has advanced to most recent block.\n \n         Call with success = False if the tip shouldn't advance to the most recent block.\"\"\"\n-        self.nodes[0].p2p.send_blocks_and_test(blocks, self.nodes[0], success=success, reject_reason=reject_reason, request_block=request_block, timeout=timeout, expect_disconnect=reconnect)\n+        self.nodes[0].p2p.send_blocks_and_test(blocks, self.nodes[0], success=success, reject_reason=reject_reason, force_send=force_send, timeout=timeout, expect_disconnect=reconnect)\n \n         if reconnect:\n             self.reconnect_p2p()\n \n+\n if __name__ == '__main__':\n     FullBlockTest().main()"
      },
      {
        "sha": "ca5734d67de02fd67735f50ed6eb1156887231a7",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7da0617c814aeb06d5c70c4bb8e18c79fb8725/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7da0617c814aeb06d5c70c4bb8e18c79fb8725/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=fa7da0617c814aeb06d5c70c4bb8e18c79fb8725",
        "patch": "@@ -511,14 +511,14 @@ def on_getheaders(self, message):\n         if response is not None:\n             self.send_message(response)\n \n-    def send_blocks_and_test(self, blocks, node, *, success=True, request_block=True, reject_reason=None, expect_disconnect=False, timeout=60):\n+    def send_blocks_and_test(self, blocks, node, *, success=True, force_send=False, reject_reason=None, expect_disconnect=False, timeout=60):\n         \"\"\"Send blocks to test node and test whether the tip advances.\n \n          - add all blocks to our block_store\n          - send a headers message for the final block\n          - the on_getheaders handler will ensure that any getheaders are responded to\n-         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n-           ensure that any getdata messages are responded to\n+         - if force_send is False: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to. Otherwise send the full block unsolicited.\n          - if success is True: assert that the node's tip advances to the most recent block\n          - if success is False: assert that the node's tip doesn't advance\n          - if reject_reason is set: assert that the correct reject message is logged\"\"\"\n@@ -530,9 +530,11 @@ def send_blocks_and_test(self, blocks, node, *, success=True, request_block=True\n \n         reject_reason = [reject_reason] if reject_reason else []\n         with node.assert_debug_log(expected_msgs=reject_reason):\n-            self.send_message(msg_headers([CBlockHeader(blocks[-1])]))\n-\n-            if request_block:\n+            if force_send:\n+                for b in blocks:\n+                    self.send_message(msg_block(block=b))\n+            else:\n+                self.send_message(msg_headers([CBlockHeader(blocks[-1])]))\n                 wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n \n             if expect_disconnect:"
      }
    ]
  }
]