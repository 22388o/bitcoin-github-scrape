[
  {
    "sha": "49e689fa77deb77b5bf6c29a9676b5cc6349acfa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWU2ODlmYTc3ZGViNzdiNWJmNmMyOWE5Njc2YjVjYzYzNDlhY2Zh",
    "commit": {
      "author": {
        "name": "Pan7",
        "email": "panter@gmx.net",
        "date": "2021-03-19T19:03:25Z"
      },
      "committer": {
        "name": "Pan7",
        "email": "panter@gmx.net",
        "date": "2021-03-19T19:03:25Z"
      },
      "message": "Fix a msvc2019 compiling error",
      "tree": {
        "sha": "a13628475dd408227aa2dd1ab9fadc8e33d3583a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a13628475dd408227aa2dd1ab9fadc8e33d3583a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49e689fa77deb77b5bf6c29a9676b5cc6349acfa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49e689fa77deb77b5bf6c29a9676b5cc6349acfa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49e689fa77deb77b5bf6c29a9676b5cc6349acfa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49e689fa77deb77b5bf6c29a9676b5cc6349acfa/comments",
    "author": {
      "login": "Pan7",
      "id": 7611952,
      "node_id": "MDQ6VXNlcjc2MTE5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7611952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pan7",
      "html_url": "https://github.com/Pan7",
      "followers_url": "https://api.github.com/users/Pan7/followers",
      "following_url": "https://api.github.com/users/Pan7/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pan7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pan7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pan7/subscriptions",
      "organizations_url": "https://api.github.com/users/Pan7/orgs",
      "repos_url": "https://api.github.com/users/Pan7/repos",
      "events_url": "https://api.github.com/users/Pan7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pan7/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Pan7",
      "id": 7611952,
      "node_id": "MDQ6VXNlcjc2MTE5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7611952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pan7",
      "html_url": "https://github.com/Pan7",
      "followers_url": "https://api.github.com/users/Pan7/followers",
      "following_url": "https://api.github.com/users/Pan7/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pan7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pan7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pan7/subscriptions",
      "organizations_url": "https://api.github.com/users/Pan7/orgs",
      "repos_url": "https://api.github.com/users/Pan7/repos",
      "events_url": "https://api.github.com/users/Pan7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pan7/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ef16038a1a8adc25438d77f60d83b2c01738fcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ef16038a1a8adc25438d77f60d83b2c01738fcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ef16038a1a8adc25438d77f60d83b2c01738fcf"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "63fb4731d7740485c2f26b426a1f950f41d38dcb",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49e689fa77deb77b5bf6c29a9676b5cc6349acfa/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49e689fa77deb77b5bf6c29a9676b5cc6349acfa/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=49e689fa77deb77b5bf6c29a9676b5cc6349acfa",
        "patch": "@@ -599,7 +599,7 @@ CService HTTPRequest::GetPeer() const\n         // evhttp retains ownership over returned address string\n         const char* address = \"\";\n         uint16_t port = 0;\n-        evhttp_connection_get_peer(con, (char**)&address, &port);\n+        evhttp_connection_get_peer(con, (const char**)&address, &port);\n         peer = LookupNumeric(address, port);\n     }\n     return peer;"
      }
    ]
  },
  {
    "sha": "1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmQ5NzcyY2I3NTZkZGYzMmI0YzE4NmE5YWM5ZWFhNWJkODUyMDUz",
    "commit": {
      "author": {
        "name": "Pan7",
        "email": "panter@gmx.net",
        "date": "2021-03-19T19:19:54Z"
      },
      "committer": {
        "name": "Pan7",
        "email": "panter@gmx.net",
        "date": "2021-03-19T19:19:54Z"
      },
      "message": "Merge branch 'master' of https://github.com/Pan7/bitcoin",
      "tree": {
        "sha": "2c0f789254b796a8ff827457611736fd2fbf1928",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c0f789254b796a8ff827457611736fd2fbf1928"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/comments",
    "author": {
      "login": "Pan7",
      "id": 7611952,
      "node_id": "MDQ6VXNlcjc2MTE5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7611952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pan7",
      "html_url": "https://github.com/Pan7",
      "followers_url": "https://api.github.com/users/Pan7/followers",
      "following_url": "https://api.github.com/users/Pan7/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pan7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pan7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pan7/subscriptions",
      "organizations_url": "https://api.github.com/users/Pan7/orgs",
      "repos_url": "https://api.github.com/users/Pan7/repos",
      "events_url": "https://api.github.com/users/Pan7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pan7/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Pan7",
      "id": 7611952,
      "node_id": "MDQ6VXNlcjc2MTE5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7611952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pan7",
      "html_url": "https://github.com/Pan7",
      "followers_url": "https://api.github.com/users/Pan7/followers",
      "following_url": "https://api.github.com/users/Pan7/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pan7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pan7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pan7/subscriptions",
      "organizations_url": "https://api.github.com/users/Pan7/orgs",
      "repos_url": "https://api.github.com/users/Pan7/repos",
      "events_url": "https://api.github.com/users/Pan7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pan7/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49e689fa77deb77b5bf6c29a9676b5cc6349acfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49e689fa77deb77b5bf6c29a9676b5cc6349acfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49e689fa77deb77b5bf6c29a9676b5cc6349acfa"
      },
      {
        "sha": "7f3fd341178f08c9ddb5b959e02676ad6bca3370",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f3fd341178f08c9ddb5b959e02676ad6bca3370",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f3fd341178f08c9ddb5b959e02676ad6bca3370"
      }
    ],
    "stats": {
      "total": 2607,
      "additions": 1699,
      "deletions": 908
    },
    "files": [
      {
        "sha": "cce06e2ffffee99899ab743ee098d45a11ef3af0",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -123,7 +123,12 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     _BITCOIN_QT_CHECK_STATIC_LIBS\n \n     if test \"x$qt_plugin_path\" != x; then\n-      QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms -L$qt_plugin_path/styles\"\n+      if test -d \"$qt_plugin_path/platforms\"; then\n+        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n+      fi\n+      if test -d \"$qt_plugin_path/styles\"; then\n+        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/styles\"\n+      fi\n       if test -d \"$qt_plugin_path/accessible\"; then\n         QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n       fi\n@@ -146,7 +151,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     elif test \"x$TARGET_OS\" = xlinux; then\n       dnl workaround for https://bugreports.qt.io/browse/QTBUG-74874\n       AX_CHECK_LINK_FLAG([-lxcb-shm], [QT_LIBS=\"-lxcb-shm $QT_LIBS\"], [AC_MSG_ERROR([could not link against -lxcb-shm])])\n-      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QXcbIntegrationPlugin], [-lqxcb -lxcb-static])\n+      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QXcbIntegrationPlugin], [-lqxcb])\n       AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n     elif test \"x$TARGET_OS\" = xdarwin; then\n       AX_CHECK_LINK_FLAG([[-framework Carbon]],[QT_LIBS=\"$QT_LIBS -framework Carbon\"],[AC_MSG_ERROR(could not link against Carbon framework)])"
      },
      {
        "sha": "1fa850af1a7cf5902bc1993334d3f56b7be59dcf",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -7,7 +7,8 @@ clang-format-diff.py\n \n A script to format unified git diffs according to [.clang-format](../../src/.clang-format).\n \n-Requires `clang-format`, installed e.g. via `brew install clang-format` on macOS.\n+Requires `clang-format`, installed e.g. via `brew install clang-format` on macOS,\n+or `sudo apt install clang-format` on Debian/Ubuntu.\n \n For instance, to format the last commit with 0 lines of context,\n the script should be called from the git root folder as follows."
      },
      {
        "sha": "28b5f57489d27f05e9633edd21d9d5a0f3196e47",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -5,6 +5,7 @@\n '''\n Test script for security-check.py\n '''\n+import os\n import subprocess\n import unittest\n \n@@ -19,6 +20,10 @@ def write_testcode(filename):\n     }\n     ''')\n \n+def clean_files(source, executable):\n+    os.remove(source)\n+    os.remove(executable)\n+\n def call_security_check(cc, source, executable, options):\n     subprocess.run([cc,source,'-o',executable] + options, check=True)\n     p = subprocess.run(['./contrib/devtools/security-check.py',executable], stdout=subprocess.PIPE, universal_newlines=True)\n@@ -44,6 +49,8 @@ def test_ELF(self):\n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE', '-Wl,-z,separate-code']),\n                 (0, ''))\n \n+        clean_files(source, executable)\n+\n     def test_PE(self):\n         source = 'test1.c'\n         executable = 'test1.exe'\n@@ -61,6 +68,8 @@ def test_PE(self):\n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va','-pie','-fPIE']),\n             (0, ''))\n \n+        clean_files(source, executable)\n+\n     def test_MACHO(self):\n         source = 'test1.c'\n         executable = 'test1'\n@@ -80,6 +89,8 @@ def test_MACHO(self):\n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-pie','-Wl,-bind_at_load','-fstack-protector-all']),\n             (0, ''))\n \n+        clean_files(source, executable)\n+\n if __name__ == '__main__':\n     unittest.main()\n "
      },
      {
        "sha": "106dfd2c5a3da1f17719c7e75477ce6ce2246a7a",
        "filename": "contrib/devtools/test-symbol-check.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/contrib/devtools/test-symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/contrib/devtools/test-symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-symbol-check.py?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -5,18 +5,17 @@\n '''\n Test script for symbol-check.py\n '''\n+import os\n import subprocess\n import unittest\n \n def call_symbol_check(cc, source, executable, options):\n     subprocess.run([cc,source,'-o',executable] + options, check=True)\n     p = subprocess.run(['./contrib/devtools/symbol-check.py',executable], stdout=subprocess.PIPE, universal_newlines=True)\n+    os.remove(source)\n+    os.remove(executable)\n     return (p.returncode, p.stdout.rstrip())\n \n-def get_machine(cc):\n-    p = subprocess.run([cc,'-dumpmachine'], stdout=subprocess.PIPE, universal_newlines=True)\n-    return p.stdout.rstrip()\n-\n class TestSymbolChecks(unittest.TestCase):\n     def test_ELF(self):\n         source = 'test1.c'"
      },
      {
        "sha": "fcc5a378e2cc8f5dba2b627e531234d77992b621",
        "filename": "contrib/testgen/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/contrib/testgen/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/contrib/testgen/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/README.md?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -4,5 +4,5 @@ Utilities to generate test vectors for the data-driven Bitcoin tests.\n \n Usage:\n \n-    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py valid 50 > ../../src/test/data/key_io_valid.json\n-    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py invalid 50 > ../../src/test/data/key_io_invalid.json\n+    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py valid 70 > ../../src/test/data/key_io_valid.json\n+    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py invalid 70 > ../../src/test/data/key_io_invalid.json"
      },
      {
        "sha": "74918cfb048ad85c55dd049285960f8009369c1b",
        "filename": "contrib/testgen/gen_key_io_test_vectors.py",
        "status": "modified",
        "additions": 53,
        "deletions": 31,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/contrib/testgen/gen_key_io_test_vectors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/contrib/testgen/gen_key_io_test_vectors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/gen_key_io_test_vectors.py?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -3,19 +3,19 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n-Generate valid and invalid base58 address and private key test vectors.\n+Generate valid and invalid base58/bech32(m) address and private key test vectors.\n \n Usage:\n-    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py valid 50 > ../../src/test/data/key_io_valid.json\n-    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py invalid 50 > ../../src/test/data/key_io_invalid.json\n+    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py valid 70 > ../../src/test/data/key_io_valid.json\n+    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py invalid 70 > ../../src/test/data/key_io_invalid.json\n '''\n # 2012 Wladimir J. van der Laan\n # Released under MIT License\n import os\n from itertools import islice\n from base58 import b58encode_chk, b58decode_chk, b58chars\n import random\n-from segwit_addr import bech32_encode, decode_segwit_address, convertbits, CHARSET\n+from segwit_addr import bech32_encode, decode_segwit_address, convertbits, CHARSET, Encoding\n \n # key types\n PUBKEY_ADDRESS = 0\n@@ -32,6 +32,7 @@\n OP_0 = 0x00\n OP_1 = 0x51\n OP_2 = 0x52\n+OP_3 = 0x53\n OP_16 = 0x60\n OP_DUP = 0x76\n OP_EQUAL = 0x87\n@@ -44,6 +45,7 @@\n script_suffix = (OP_EQUAL,)\n p2wpkh_prefix = (OP_0, 20)\n p2wsh_prefix = (OP_0, 32)\n+p2tr_prefix = (OP_1, 32)\n \n metadata_keys = ['isPrivkey', 'chain', 'isCompressed', 'tryCaseFlip']\n # templates for valid sequences\n@@ -54,40 +56,58 @@\n   ((SCRIPT_ADDRESS,),         20, (),   (False, 'main',    None,  None), script_prefix, script_suffix),\n   ((PUBKEY_ADDRESS_TEST,),    20, (),   (False, 'test',    None,  None), pubkey_prefix, pubkey_suffix),\n   ((SCRIPT_ADDRESS_TEST,),    20, (),   (False, 'test',    None,  None), script_prefix, script_suffix),\n+  ((PUBKEY_ADDRESS_TEST,),    20, (),   (False, 'signet',  None,  None), pubkey_prefix, pubkey_suffix),\n+  ((SCRIPT_ADDRESS_TEST,),    20, (),   (False, 'signet',  None,  None), script_prefix, script_suffix),\n   ((PUBKEY_ADDRESS_REGTEST,), 20, (),   (False, 'regtest', None,  None), pubkey_prefix, pubkey_suffix),\n   ((SCRIPT_ADDRESS_REGTEST,), 20, (),   (False, 'regtest', None,  None), script_prefix, script_suffix),\n   ((PRIVKEY,),                32, (),   (True,  'main',    False, None), (),            ()),\n   ((PRIVKEY,),                32, (1,), (True,  'main',    True,  None), (),            ()),\n   ((PRIVKEY_TEST,),           32, (),   (True,  'test',    False, None), (),            ()),\n   ((PRIVKEY_TEST,),           32, (1,), (True,  'test',    True,  None), (),            ()),\n+  ((PRIVKEY_TEST,),           32, (),   (True,  'signet',  False, None), (),            ()),\n+  ((PRIVKEY_TEST,),           32, (1,), (True,  'signet',  True,  None), (),            ()),\n   ((PRIVKEY_REGTEST,),        32, (),   (True,  'regtest', False, None), (),            ()),\n   ((PRIVKEY_REGTEST,),        32, (1,), (True,  'regtest', True,  None), (),            ())\n ]\n # templates for valid bech32 sequences\n bech32_templates = [\n-  # hrp, version, witprog_size, metadata, output_prefix\n-  ('bc',    0, 20, (False, 'main',    None, True), p2wpkh_prefix),\n-  ('bc',    0, 32, (False, 'main',    None, True), p2wsh_prefix),\n-  ('bc',    1,  2, (False, 'main',    None, True), (OP_1, 2)),\n-  ('tb',    0, 20, (False, 'test',    None, True), p2wpkh_prefix),\n-  ('tb',    0, 32, (False, 'test',    None, True), p2wsh_prefix),\n-  ('tb',    2, 16, (False, 'test',    None, True), (OP_2, 16)),\n-  ('bcrt',  0, 20, (False, 'regtest', None, True), p2wpkh_prefix),\n-  ('bcrt',  0, 32, (False, 'regtest', None, True), p2wsh_prefix),\n-  ('bcrt', 16, 40, (False, 'regtest', None, True), (OP_16, 40))\n+  # hrp, version, witprog_size, metadata, encoding, output_prefix\n+  ('bc',    0, 20, (False, 'main',    None, True), Encoding.BECH32,  p2wpkh_prefix),\n+  ('bc',    0, 32, (False, 'main',    None, True), Encoding.BECH32,  p2wsh_prefix),\n+  ('bc',    1, 32, (False, 'main',    None, True), Encoding.BECH32M, p2tr_prefix),\n+  ('bc',    2,  2, (False, 'main',    None, True), Encoding.BECH32M, (OP_2, 2)),\n+  ('tb',    0, 20, (False, 'test',    None, True), Encoding.BECH32,  p2wpkh_prefix),\n+  ('tb',    0, 32, (False, 'test',    None, True), Encoding.BECH32,  p2wsh_prefix),\n+  ('tb',    1, 32, (False, 'test',    None, True), Encoding.BECH32M, p2tr_prefix),\n+  ('tb',    3, 16, (False, 'test',    None, True), Encoding.BECH32M, (OP_3, 16)),\n+  ('tb',    0, 20, (False, 'signet',  None, True), Encoding.BECH32,  p2wpkh_prefix),\n+  ('tb',    0, 32, (False, 'signet',  None, True), Encoding.BECH32,  p2wsh_prefix),\n+  ('tb',    1, 32, (False, 'signet',  None, True), Encoding.BECH32M, p2tr_prefix),\n+  ('tb',    3, 32, (False, 'signet',  None, True), Encoding.BECH32M, (OP_3, 32)),\n+  ('bcrt',  0, 20, (False, 'regtest', None, True), Encoding.BECH32,  p2wpkh_prefix),\n+  ('bcrt',  0, 32, (False, 'regtest', None, True), Encoding.BECH32,  p2wsh_prefix),\n+  ('bcrt',  1, 32, (False, 'regtest', None, True), Encoding.BECH32M, p2tr_prefix),\n+  ('bcrt', 16, 40, (False, 'regtest', None, True), Encoding.BECH32M, (OP_16, 40))\n ]\n # templates for invalid bech32 sequences\n bech32_ng_templates = [\n-  # hrp, version, witprog_size, invalid_bech32, invalid_checksum, invalid_char\n-  ('tc',    0, 20, False, False, False),\n-  ('tb',   17, 32, False, False, False),\n-  ('bcrt',  3,  1, False, False, False),\n-  ('bc',   15, 41, False, False, False),\n-  ('tb',    0, 16, False, False, False),\n-  ('bcrt',  0, 32, True,  False, False),\n-  ('bc',    0, 16, True,  False, False),\n-  ('tb',    0, 32, False, True,  False),\n-  ('bcrt',  0, 20, False, False, True)\n+  # hrp, version, witprog_size, encoding, invalid_bech32, invalid_checksum, invalid_char\n+  ('tc',    0, 20, Encoding.BECH32,  False, False, False),\n+  ('bt',    1, 32, Encoding.BECH32M, False, False, False),\n+  ('tb',   17, 32, Encoding.BECH32M, False, False, False),\n+  ('bcrt',  3,  1, Encoding.BECH32M, False, False, False),\n+  ('bc',   15, 41, Encoding.BECH32M, False, False, False),\n+  ('tb',    0, 16, Encoding.BECH32,  False, False, False),\n+  ('bcrt',  0, 32, Encoding.BECH32,  True,  False, False),\n+  ('bc',    0, 16, Encoding.BECH32,  True,  False, False),\n+  ('tb',    0, 32, Encoding.BECH32,  False, True,  False),\n+  ('bcrt',  0, 20, Encoding.BECH32,  False, False, True),\n+  ('bc',    0, 20, Encoding.BECH32M, False, False, False),\n+  ('tb',    0, 32, Encoding.BECH32M, False, False, False),\n+  ('bcrt',  0, 20, Encoding.BECH32M, False, False, False),\n+  ('bc',    1, 32, Encoding.BECH32,  False, False, False),\n+  ('tb',    2, 16, Encoding.BECH32,  False, False, False),\n+  ('bcrt', 16, 20, Encoding.BECH32,  False, False, False),\n ]\n \n def is_valid(v):\n@@ -127,8 +147,9 @@ def gen_valid_bech32_vector(template):\n     hrp = template[0]\n     witver = template[1]\n     witprog = bytearray(os.urandom(template[2]))\n-    dst_prefix = bytearray(template[4])\n-    rv = bech32_encode(hrp, [witver] + convertbits(witprog, 8, 5))\n+    encoding = template[4]\n+    dst_prefix = bytearray(template[5])\n+    rv = bech32_encode(encoding, hrp, [witver] + convertbits(witprog, 8, 5))\n     return rv, dst_prefix + witprog\n \n def gen_valid_vectors():\n@@ -186,22 +207,23 @@ def gen_invalid_bech32_vector(template):\n     hrp = template[0]\n     witver = template[1]\n     witprog = bytearray(os.urandom(template[2]))\n+    encoding = template[3]\n \n     if no_data:\n-        rv = bech32_encode(hrp, [])\n+        rv = bech32_encode(encoding, hrp, [])\n     else:\n         data = [witver] + convertbits(witprog, 8, 5)\n-        if template[3] and not no_data:\n+        if template[4] and not no_data:\n             if template[2] % 5 in {2, 4}:\n                 data[-1] |= 1\n             else:\n                 data.append(0)\n-        rv = bech32_encode(hrp, data)\n+        rv = bech32_encode(encoding, hrp, data)\n \n-    if template[4]:\n+    if template[5]:\n         i = len(rv) - random.randrange(1, 7)\n         rv = rv[:i] + random.choice(CHARSET.replace(rv[i], '')) + rv[i + 1:]\n-    if template[5]:\n+    if template[6]:\n         i = len(hrp) + 1 + random.randrange(0, len(rv) - len(hrp) - 4)\n         rv = rv[:i] + rv[i:i + 4].upper() + rv[i + 4:]\n "
      },
      {
        "sha": "8c6c56545f0758b4cf7f8a1ecff82388e724ee82",
        "filename": "depends/packages/libxkbcommon.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/depends/packages/libxkbcommon.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/depends/packages/libxkbcommon.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libxkbcommon.mk?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -27,6 +27,6 @@ define $(package)_stage_cmds\n endef\n \n define $(package)_postprocess_cmds\n-  rm -rf share/man share/doc lib/*.la\n+  rm lib/*.la\n endef\n "
      },
      {
        "sha": "f72dbead9d12c27406369c967b0ed3fec996fed3",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -1,4 +1,4 @@\n-BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.21.0**):\n+BIPs that are implemented by Bitcoin Core (up-to-date up to **v22.0**):\n \n * [`BIP 9`](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki): The changes allowing multiple soft-forks to be deployed in parallel have been implemented since **v0.12.1**  ([PR #7575](https://github.com/bitcoin/bitcoin/pull/7575))\n * [`BIP 11`](https://github.com/bitcoin/bips/blob/master/bip-0011.mediawiki): Multisig outputs are standard since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n@@ -50,3 +50,4 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.21.0**):\n * [`BIP 325`](https://github.com/bitcoin/bips/blob/master/bip-0325.mediawiki): Signet test network is supported as of **v0.21.0** ([PR 18267](https://github.com/bitcoin/bitcoin/pull/18267)).\n * [`BIP 339`](https://github.com/bitcoin/bips/blob/master/bip-0339.mediawiki): Relay of transactions by wtxid is supported as of **v0.21.0** ([PR 18044](https://github.com/bitcoin/bitcoin/pull/18044)).\n * [`BIP 340`](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki) [`341`](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki) [`342`](https://github.com/bitcoin/bips/blob/master/bip-0342.mediawiki): Validation rules for Taproot (including Schnorr signatures and Tapscript leaves) are implemented as of **v0.21.0** ([PR 19953](https://github.com/bitcoin/bitcoin/pull/19953)), without mainnet activation.\n+* [`BIP 350`](https://github.com/bitcoin/bips/blob/master/bip-0350.mediawiki): Addresses for native v1+ segregated Witness outputs use Bech32m instead of Bech32 as of **v22.0** ([PR 20861](https://github.com/bitcoin/bitcoin/pull/20861))."
      },
      {
        "sha": "16c6da66d5b4a6ff4a3ad5f7615ed7611a8563e3",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 256,
        "deletions": 74,
        "changes": 330,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -1,116 +1,303 @@\n-# macOS Build Instructions and Notes\n+# macOS Build Guide\n+\n+**Updated for MacOS [11.2](https://www.apple.com/macos/big-sur/)**\n+\n+This guide describes how to build bitcoind, command-line utilities, and GUI on macOS\n+\n+**Note:** The following is for Intel Macs only!\n+\n+## Dependencies\n+\n+The following dependencies are **required**:\n+\n+Library                                                    | Purpose    | Description\n+-----------------------------------------------------------|------------|----------------------\n+[automake](https://formulae.brew.sh/formula/automake)      | Build      | Generate makefile\n+[libtool](https://formulae.brew.sh/formula/libtool)        | Build      | Shared library support\n+[pkg-config](https://formulae.brew.sh/formula/pkg-config)  | Build      | Configure compiler and linker flags\n+[boost](https://formulae.brew.sh/formula/boost)            | Utility    | Library for threading, data structures, etc\n+[libevent](https://formulae.brew.sh/formula/libevent)      | Networking | OS independent asynchronous networking\n+\n+The following dependencies are **optional**:\n+\n+Library                                                         | Purpose          | Description\n+--------------------------------------------------------------- |------------------|----------------------\n+[berkeley-db@4](https://formulae.brew.sh/formula/berkeley-db@4) | Berkeley DB      | Wallet storage (only needed when wallet enabled)\n+[qt@5](https://formulae.brew.sh/formula/qt@5)                   | GUI              | GUI toolkit (only needed when GUI enabled)\n+[qrencode](https://formulae.brew.sh/formula/qrencode)           | QR codes in GUI  | Generating QR codes (only needed when GUI enabled)\n+[zeromq](https://formulae.brew.sh/formula/zeromq)               | ZMQ notification | Allows generating ZMQ notifications (requires ZMQ version >= 4.0.0)\n+[sqlite](https://formulae.brew.sh/formula/sqlite)               | SQLite DB        | Wallet storage (only needed when wallet enabled)\n+[miniupnpc](https://formulae.brew.sh/formula/miniupnpc)         | UPnP Support     | Firewall-jumping support (needed for port mapping support)\n+[libnatpmp](https://formulae.brew.sh/formula/libnatpmp)         | NAT-PMP Support  | Firewall-jumping support (needed for port mapping support)\n+[python3](https://formulae.brew.sh/formula/python@3.9)          | Testing          | Python Interpreter (only needed when running the test suite)\n+\n+The following dependencies are **optional** packages required for deploying:\n+\n+Library                                             | Purpose          | Description\n+----------------------------------------------------|------------------|----------------------\n+[librsvg](https://formulae.brew.sh/formula/librsvg) | Deploy Dependency| Library to render SVG files\n+[ds_store](https://pypi.org/project/ds-store/)      | Deploy Dependency| Examine and modify .DS_Store files\n+[mac_alias](https://pypi.org/project/mac-alias/)    | Deploy Dependency| Generate/Read binary alias and bookmark records\n+\n+See [dependencies.md](dependencies.md) for a complete overview.\n+\n+## Preparation\n \n The commands in this guide should be executed in a Terminal application.\n-The built-in one is located in\n+macOS comes with a built-in Terminal located in:\n+\n ```\n /Applications/Utilities/Terminal.app\n ```\n \n-## Preparation\n-Install the macOS command line tools:\n+### 1. Xcode Command Line Tools\n \n-```shell\n+The Xcode Command Line Tools are a collection of build tools for macOS.\n+These tools must be installed in order to build Bitcoin Core from source.\n+\n+To install, run the following command from your terminal:\n+\n+``` bash\n xcode-select --install\n ```\n \n-When the popup appears, click `Install`.\n+Upon running the command, you should see a popup appear.\n+Click on `Install` to continue the installation process.\n \n-Then install [Homebrew](https://brew.sh).\n+### 2. Homebrew Package Manager\n \n-## Dependencies\n-```shell\n-brew install automake libtool boost miniupnpc libnatpmp pkg-config python qt@5 libevent qrencode\n+Homebrew is a package manager for macOS that allows one to install packages from the command line easily.\n+While several package managers are available for macOS, this guide will focus on Homebrew as it is the most popular.\n+Since the examples in this guide which walk through the installation of a package will use Homebrew, it is recommended that you install it to follow along.\n+Otherwise, you can adapt the commands to your package manager of choice.\n+\n+To install the Homebrew package manager, see: https://brew.sh\n+\n+Note: If you run into issues while installing Homebrew or pulling packages, refer to [Homebrew's troubleshooting page](https://docs.brew.sh/Troubleshooting).\n+\n+### 3. Install Required Dependencies\n+\n+The first step is to download the required dependencies.\n+These dependencies represent the packages required to get a barebones installation up and running.\n+To install, run the following from your terminal:\n+\n+``` bash\n+brew install automake libtool boost pkg-config libevent\n ```\n \n-If you run into issues, check [Homebrew's troubleshooting page](https://docs.brew.sh/Troubleshooting).\n-See [dependencies.md](dependencies.md) for a complete overview.\n+### 4. Clone Bitcoin repository\n \n-If you want to build the disk image with `make deploy` (.dmg / optional), you need RSVG:\n-```shell\n-brew install librsvg\n+`git` should already be installed by default on your system.\n+Now that all the required dependencies are installed, let's clone the Bitcoin Core repository to a directory.\n+All build scripts and commands will run from this directory.\n+\n+``` bash\n+git clone https://github.com/bitcoin/bitcoin.git\n ```\n \n-and [`macdeployqtplus`](../contrib/macdeploy/README.md) dependencies:\n-```shell\n-pip3 install ds_store mac_alias\n+### 5. Install Optional Dependencies\n+\n+#### Wallet Dependencies\n+\n+It is not necessary to build wallet functionality to run `bitcoind` or  `bitcoin-qt`.\n+To enable legacy wallets, you must install `berkeley-db@4`.\n+To enable [descriptor wallets](https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md), `sqlite` is required.\n+Skip `berkeley-db@4` if you intend to *exclusively* use descriptor wallets.\n+\n+###### Legacy Wallet Support\n+\n+`berkeley-db@4` is required to enable support for legacy wallets.\n+Skip if you don't intend to use legacy wallets.\n+\n+``` bash\n+brew install berkeley-db@4\n ```\n \n-The wallet support requires one or both of the dependencies ([*SQLite*](#sqlite) and [*Berkeley DB*](#berkeley-db)) in the sections below.\n-To build Bitcoin Core without wallet, see [*Disable-wallet mode*](#disable-wallet-mode).\n+###### Descriptor Wallet Support\n \n-#### SQLite\n+Note: Apple has included a useable `sqlite` package since macOS 10.14.\n+You may not need to install this package.\n \n-Usually, macOS installation already has a suitable SQLite installation.\n-Also, the Homebrew package could be installed:\n+`sqlite` is required to enable support for descriptor wallets.\n+Skip if you don't intend to use descriptor wallets.\n \n-```shell\n+``` bash\n brew install sqlite\n ```\n+---\n \n-In that case the Homebrew package will prevail.\n+#### GUI Dependencies\n \n-#### Berkeley DB\n+###### Qt\n \n-It is recommended to use Berkeley DB 4.8. If you have to build it yourself,\n-you can use [this](/contrib/install_db4.sh) script to install it\n-like so:\n+Bitcoin Core includes a GUI built with the cross-platform Qt Framework.\n+To compile the GUI, we need to install `qt@5`.\n+Skip if you don't intend to use the GUI.\n \n-```shell\n-./contrib/install_db4.sh .\n+``` bash\n+brew install qt@5\n ```\n \n-from the root of the repository.\n+Note: Building with Qt binaries downloaded from the Qt website is not officially supported.\n+See the notes in [#7714](https://github.com/bitcoin/bitcoin/issues/7714).\n \n-Also, the Homebrew package could be installed:\n+###### qrencode\n \n-```shell\n-brew install berkeley-db4\n+The GUI can encode addresses in a QR Code. To build in QR support for the GUI, install `qrencode`.\n+Skip if not using the GUI or don't want QR code functionality.\n+\n+``` bash\n+brew install qrencode\n ```\n+---\n+\n+#### Port Mapping Dependencies\n+\n+###### miniupnpc\n \n-## Build Bitcoin Core\n+miniupnpc may be used for UPnP port mapping.\n+Skip if you do not need this functionality.\n \n-1. Clone the Bitcoin Core source code:\n-    ```shell\n-    git clone https://github.com/bitcoin/bitcoin\n-    cd bitcoin\n-    ```\n+``` bash\n+brew install miniupnpc\n+```\n \n-2.  Build Bitcoin Core:\n+###### libnatpmp\n \n-    Configure and build the headless Bitcoin Core binaries as well as the GUI (if Qt is found).\n+libnatpmp may be used for NAT-PMP port mapping.\n+Skip if you do not need this functionality.\n \n-    You can disable the GUI build by passing `--without-gui` to configure.\n-    ```shell\n-    ./autogen.sh\n-    ./configure\n-    make\n-    ```\n+``` bash\n+brew install libnatpmp\n+```\n \n-3.  It is recommended to build and run the unit tests:\n-    ```shell\n-    make check\n-    ```\n+Note: UPnP and NAT-PMP support will be compiled in and disabled by default.\n+Check out the [further configuration](#further-configuration) section for more information.\n \n-4.  You can also create a  `.dmg` that contains the `.app` bundle (optional):\n-    ```shell\n-    make deploy\n-    ```\n+---\n \n-## Disable-wallet mode\n-When the intention is to run only a P2P node without a wallet, Bitcoin Core may be\n-compiled in disable-wallet mode with:\n-```shell\n-./configure --disable-wallet\n+#### ZMQ Dependencies\n+\n+Support for ZMQ notifications requires the following dependency.\n+Skip if you do not need ZMQ functionality.\n+\n+``` bash\n+brew install zeromq\n ```\n \n-In this case there is no dependency on [*Berkeley DB*](#berkeley-db) and [*SQLite*](#sqlite).\n+ZMQ is automatically compiled in and enabled if the dependency is detected.\n+Check out the [further configuration](#further-configuration) section for more information.\n+\n+For more information on ZMQ, see: [zmq.md](zmq.md)\n \n-Mining is also possible in disable-wallet mode using the `getblocktemplate` RPC call.\n+---\n \n-## Running\n-Bitcoin Core is now available at `./src/bitcoind`\n+#### Test Suite Dependencies\n+\n+There is an included test suite that is useful for testing code changes when developing.\n+To run the test suite (recommended), you will need to have Python 3 installed:\n+\n+``` bash\n+brew install python\n+```\n+\n+---\n+\n+#### Deploy Dependencies\n+\n+You can deploy a `.dmg` containing the Bitcoin Core application using `make deploy`.\n+This command depends on a couple of python packages, so it is required that you have `python` installed.\n+\n+Ensuring that `python` is installed, you can install the deploy dependencies by running the following commands in your terminal:\n+\n+``` bash\n+brew install librsvg\n+```\n+\n+``` bash\n+pip3 install ds_store mac_alias\n+```\n+\n+## Building Bitcoin Core\n+\n+### 1. Configuration\n+\n+There are many ways to configure Bitcoin Core, here are a few common examples:\n+\n+##### Wallet (BDB + SQlite) Support, No GUI:\n+\n+If `berkeley-db@4` is installed, then legacy wallet support will be built.\n+If `berkeley-db@4` is not installed, then this will throw an error.\n+If `sqlite` is installed, then descriptor wallet support will also be built.\n+Additionally, this explicitly disables the GUI.\n+\n+``` bash\n+./autogen.sh\n+./configure --with-gui=no\n+```\n+\n+##### Wallet (only SQlite) and GUI Support:\n+\n+This explicitly enables the GUI and disables legacy wallet support.\n+If `qt` is not installed, this will throw an error.\n+If `sqlite` is installed then descriptor wallet functionality will be built.\n+If `sqlite` is not installed, then wallet functionality will be disabled.\n+\n+``` bash\n+./autogen.sh\n+./configure --without-bdb --with-gui=yes\n+```\n+\n+##### No Wallet or GUI\n+\n+``` bash\n+./autogen.sh\n+./configure --without-wallet --with-gui=no\n+```\n+\n+##### Further Configuration\n+\n+You may want to dig deeper into the configuration options to achieve your desired behavior.\n+Examine the output of the following command for a full list of configuration options:\n+\n+``` bash\n+./configure -help\n+```\n+\n+### 2. Compile\n+\n+After configuration, you are ready to compile.\n+Run the following in your terminal to compile Bitcoin Core:\n+\n+``` bash\n+make -jx    # use -jX here for parallelism\n+make check  # Run tests if Python 3 is available\n+```\n+\n+### 3. Deploy (optional)\n+\n+You can also create a  `.dmg` containing the `.app` bundle by running the following command:\n+\n+``` bash\n+make deploy\n+```\n+\n+## Running Bitcoin Core\n+\n+Bitcoin Core should now be available at `./src/bitcoind`.\n+If you compiled support for the GUI, it should be available at `./src/qt/bitcoin-qt`.\n+\n+The first time you run `bitcoind` or `bitcoin-qt`, it will start downloading the blockchain.\n+This process could take many hours, or even days on slower than average systems.\n+\n+By default, blockchain and wallet data files will be stored in:\n+\n+``` bash\n+/Users/${USER}/Library/Application Support/Bitcoin/\n+```\n \n Before running, you may create an empty configuration file:\n+\n ```shell\n mkdir -p \"/Users/${USER}/Library/Application Support/Bitcoin\"\n \n@@ -119,22 +306,17 @@ touch \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n chmod 600 \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n ```\n \n-The first time you run bitcoind, it will start downloading the blockchain. This process could\n-take many hours, or even days on slower than average systems.\n-\n You can monitor the download process by looking at the debug.log file:\n+\n ```shell\n tail -f $HOME/Library/Application\\ Support/Bitcoin/debug.log\n ```\n \n ## Other commands:\n+\n ```shell\n ./src/bitcoind -daemon      # Starts the bitcoin daemon.\n ./src/bitcoin-cli --help    # Outputs a list of command-line options.\n ./src/bitcoin-cli help      # Outputs a list of RPC commands when the daemon is running.\n+./src/qt/bitcoin-qt -server # Starts the bitcoin-qt server mode, allows bitcoin-cli control\n ```\n-\n-## Notes\n-* Tested on OS X 10.14 Mojave through macOS 11 Big Sur on 64-bit Intel\n-processors only.\n-* Building with downloaded Qt binaries is not officially supported. See the notes in [#7714](https://github.com/bitcoin/bitcoin/issues/7714)."
      },
      {
        "sha": "1397fe9d0c3849b864f59271d8d2023d2c885dfb",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -14,19 +14,19 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | GCC |  | [7+](https://gcc.gnu.org/) (C++17 support) |  |  |  |\n | HarfBuzz-NG |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n | libevent | [2.1.11-stable](https://github.com/libevent/libevent/releases) | [2.0.21](https://github.com/bitcoin/bitcoin/pull/18676) | No |  |  |\n-| libnatpmp | [20150609](https://miniupnp.tuxfamily.org/files) |  | No |  |  |\n+| libnatpmp | git commit [4536032...](https://github.com/miniupnp/libnatpmp/tree/4536032ae32268a45c073a4d5e91bbab4534773a) |  | No |  |  |\n | libpng |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n | librsvg | |  |  |  |  |\n | MiniUPnPc | [2.0.20180203](https://miniupnp.tuxfamily.org/files) |  | No |  |  |\n | PCRE |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n | Python (tests) |  | [3.6](https://www.python.org/downloads) |  |  |  |\n | qrencode | [3.4.4](https://fukuchi.org/works/qrencode) |  | No |  |  |\n-| Qt | [5.9.8](https://download.qt.io/official_releases/qt/) | [5.9.5](https://github.com/bitcoin/bitcoin/issues/20104) | No |  |  |\n+| Qt | [5.12.10](https://download.qt.io/official_releases/qt/) | [5.9.5](https://github.com/bitcoin/bitcoin/issues/20104) | No |  |  |\n | SQLite | [3.32.1](https://sqlite.org/download.html) | [3.7.17](https://github.com/bitcoin/bitcoin/pull/19077) |  |  |  |\n | XCB |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) (Linux only) |\n | xkbcommon |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) (Linux only) |\n | ZeroMQ | [4.3.1](https://github.com/zeromq/libzmq/releases) | 4.0.0 | No |  |  |\n-| zlib | [1.2.11](https://zlib.net/) |  |  |  | No |\n+| zlib |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n \n Controlling dependencies\n ------------------------\n@@ -43,3 +43,4 @@ Some dependencies are not needed in all configurations. The following are some f\n \n #### Other\n * librsvg is only needed if you need to run `make deploy` on (cross-compilation to) macOS.\n+* Not-Qt-bundled zlib is required to build the [DMG tool](../contrib/macdeploy/README.md#deterministic-macos-dmg-notes) from the libdmg-hfsplus project."
      },
      {
        "sha": "2b3b378bee06b5aabbf9544b89633aacf7bf1565",
        "filename": "doc/external-signer.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/doc/external-signer.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/doc/external-signer.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/external-signer.md?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -4,7 +4,7 @@ Bitcoin Core can be launched with `-signer=<cmd>` where `<cmd>` is an external t\n \n ## Example usage\n \n-The following example is based on the [HWI](https://github.com/bitcoin-core/HWI) tool. Although this tool is hosted under the Bitcoin Core GitHub organization and maintained by Bitcoin Core developers, it should be used with caution. It is considered experimental and has far less review than Bitcoin Core itself. Be particularly careful when running tools such as these on a computer with private keys on it.\n+The following example is based on the [HWI](https://github.com/bitcoin-core/HWI) tool. Version 2.0 or newer is required. Although this tool is hosted under the Bitcoin Core GitHub organization and maintained by Bitcoin Core developers, it should be used with caution. It is considered experimental and has far less review than Bitcoin Core itself. Be particularly careful when running tools such as these on a computer with private keys on it.\n \n When using a hardware wallet, consult the manufacturer website for (alternative) software they recommend. As long as their software conforms to the standard below, it should be able to work with Bitcoin Core.\n "
      },
      {
        "sha": "5c68e4ab0c9bb6385d54751baee85116e255a650",
        "filename": "doc/release-notes-20861.md",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/doc/release-notes-20861.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/doc/release-notes-20861.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-20861.md?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -0,0 +1,13 @@\n+Updated RPCs\n+------------\n+\n+- Due to [BIP 350](https://github.com/bitcoin/bips/blob/master/bip-0350.mediawiki)\n+  being implemented, behavior for all RPCs that accept addresses is changed when\n+  a native witness version 1 (or higher) is passed. These now require a Bech32m\n+  encoding instead of a Bech32 one, and Bech32m encoding will be used for such\n+  addresses in RPC output as well. No version 1 addresses should be created\n+  for mainnet until consensus rules are adopted that give them meaning\n+  (e.g. through [BIP 341](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki)).\n+  Once that happens, Bech32m is expected to be used for them, so this shouldn't\n+  affect any production systems, but may be observed on other networks where such\n+  addresses already have meaning (like signet)."
      },
      {
        "sha": "9903c2e9b3adfb0423397b689915abdccd6a3c3a",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -182,7 +182,6 @@ BITCOIN_CORE_H = \\\n   node/ui_interface.h \\\n   node/utxo_snapshot.h \\\n   noui.h \\\n-  optional.h \\\n   outputtype.h \\\n   policy/feerate.h \\\n   policy/fees.h \\"
      },
      {
        "sha": "7ed0eafb14ec0c22e4e14b593b0b62c3c2cb1af6",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -298,7 +298,8 @@ test_fuzz_fuzz_SOURCES = \\\n  test/fuzz/tx_in.cpp \\\n  test/fuzz/tx_out.cpp \\\n  test/fuzz/txrequest.cpp \\\n- test/fuzz/validation_load_mempool.cpp\n+ test/fuzz/validation_load_mempool.cpp \\\n+ test/fuzz/versionbits.cpp\n endif # ENABLE_FUZZ_BINARY\n \n nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)"
      },
      {
        "sha": "288b14e02389d870cd9c34544dca45750a83561b",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 22,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2017 Pieter Wuille\n+// Copyright (c) 2017, 2021 Pieter Wuille\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -7,15 +7,18 @@\n \n #include <assert.h>\n \n+namespace bech32\n+{\n+\n namespace\n {\n \n typedef std::vector<uint8_t> data;\n \n-/** The Bech32 character set for encoding. */\n+/** The Bech32 and Bech32m character set for encoding. */\n const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n \n-/** The Bech32 character set for decoding. */\n+/** The Bech32 and Bech32m character set for decoding. */\n const int8_t CHARSET_REV[128] = {\n     -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n     -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n@@ -27,6 +30,12 @@ const int8_t CHARSET_REV[128] = {\n      1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n };\n \n+/* Determine the final constant to use for the specified encoding. */\n+uint32_t EncodingConstant(Encoding encoding) {\n+    assert(encoding == Encoding::BECH32 || encoding == Encoding::BECH32M);\n+    return encoding == Encoding::BECH32 ? 1 : 0x2bc830a3;\n+}\n+\n /** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n  *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n  *  bits correspond to earlier values. */\n@@ -111,21 +120,24 @@ data ExpandHRP(const std::string& hrp)\n }\n \n /** Verify a checksum. */\n-bool VerifyChecksum(const std::string& hrp, const data& values)\n+Encoding VerifyChecksum(const std::string& hrp, const data& values)\n {\n     // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n     // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n     // list of values would result in a new valid list. For that reason, Bech32 requires the\n-    // resulting checksum to be 1 instead.\n-    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+    // resulting checksum to be 1 instead. In Bech32m, this constant was amended.\n+    const uint32_t check = PolyMod(Cat(ExpandHRP(hrp), values));\n+    if (check == EncodingConstant(Encoding::BECH32)) return Encoding::BECH32;\n+    if (check == EncodingConstant(Encoding::BECH32M)) return Encoding::BECH32M;\n+    return Encoding::INVALID;\n }\n \n /** Create a checksum. */\n-data CreateChecksum(const std::string& hrp, const data& values)\n+data CreateChecksum(Encoding encoding, const std::string& hrp, const data& values)\n {\n     data enc = Cat(ExpandHRP(hrp), values);\n     enc.resize(enc.size() + 6); // Append 6 zeroes\n-    uint32_t mod = PolyMod(enc) ^ 1; // Determine what to XOR into those 6 zeroes.\n+    uint32_t mod = PolyMod(enc) ^ EncodingConstant(encoding); // Determine what to XOR into those 6 zeroes.\n     data ret(6);\n     for (size_t i = 0; i < 6; ++i) {\n         // Convert the 5-bit groups in mod to checksum values.\n@@ -136,16 +148,13 @@ data CreateChecksum(const std::string& hrp, const data& values)\n \n } // namespace\n \n-namespace bech32\n-{\n-\n-/** Encode a Bech32 string. */\n-std::string Encode(const std::string& hrp, const data& values) {\n-    // First ensure that the HRP is all lowercase. BIP-173 requires an encoder\n-    // to return a lowercase Bech32 string, but if given an uppercase HRP, the\n+/** Encode a Bech32 or Bech32m string. */\n+std::string Encode(Encoding encoding, const std::string& hrp, const data& values) {\n+    // First ensure that the HRP is all lowercase. BIP-173 and BIP350 require an encoder\n+    // to return a lowercase Bech32/Bech32m string, but if given an uppercase HRP, the\n     // result will always be invalid.\n     for (const char& c : hrp) assert(c < 'A' || c > 'Z');\n-    data checksum = CreateChecksum(hrp, values);\n+    data checksum = CreateChecksum(encoding, hrp, values);\n     data combined = Cat(values, checksum);\n     std::string ret = hrp + '1';\n     ret.reserve(ret.size() + combined.size());\n@@ -155,8 +164,8 @@ std::string Encode(const std::string& hrp, const data& values) {\n     return ret;\n }\n \n-/** Decode a Bech32 string. */\n-std::pair<std::string, data> Decode(const std::string& str) {\n+/** Decode a Bech32 or Bech32m string. */\n+DecodeResult Decode(const std::string& str) {\n     bool lower = false, upper = false;\n     for (size_t i = 0; i < str.size(); ++i) {\n         unsigned char c = str[i];\n@@ -183,10 +192,9 @@ std::pair<std::string, data> Decode(const std::string& str) {\n     for (size_t i = 0; i < pos; ++i) {\n         hrp += LowerCase(str[i]);\n     }\n-    if (!VerifyChecksum(hrp, values)) {\n-        return {};\n-    }\n-    return {hrp, data(values.begin(), values.end() - 6)};\n+    Encoding result = VerifyChecksum(hrp, values);\n+    if (result == Encoding::INVALID) return {};\n+    return {result, std::move(hrp), data(values.begin(), values.end() - 6)};\n }\n \n } // namespace bech32"
      },
      {
        "sha": "e9450ccc2b35dc3650905a50418756a3a08af58e",
        "filename": "src/bech32.h",
        "status": "modified",
        "additions": 29,
        "deletions": 10,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/bech32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/bech32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.h?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -1,13 +1,14 @@\n-// Copyright (c) 2017 Pieter Wuille\n+// Copyright (c) 2017, 2021 Pieter Wuille\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-// Bech32 is a string encoding format used in newer address types.\n-// The output consists of a human-readable part (alphanumeric), a\n-// separator character (1), and a base32 data section, the last\n-// 6 characters of which are a checksum.\n+// Bech32 and Bech32m are string encoding formats used in newer\n+// address types. The outputs consist of a human-readable part\n+// (alphanumeric), a separator character (1), and a base32 data\n+// section, the last 6 characters of which are a checksum. The\n+// module is namespaced under bech32 for historical reasons.\n //\n-// For more information, see BIP 173.\n+// For more information, see BIP 173 and BIP 350.\n \n #ifndef BITCOIN_BECH32_H\n #define BITCOIN_BECH32_H\n@@ -19,11 +20,29 @@\n namespace bech32\n {\n \n-/** Encode a Bech32 string. If hrp contains uppercase characters, this will cause an assertion error. */\n-std::string Encode(const std::string& hrp, const std::vector<uint8_t>& values);\n+enum class Encoding {\n+    INVALID, //!< Failed decoding\n \n-/** Decode a Bech32 string. Returns (hrp, data). Empty hrp means failure. */\n-std::pair<std::string, std::vector<uint8_t>> Decode(const std::string& str);\n+    BECH32,  //!< Bech32 encoding as defined in BIP173\n+    BECH32M, //!< Bech32m encoding as defined in BIP350\n+};\n+\n+/** Encode a Bech32 or Bech32m string. If hrp contains uppercase characters, this will cause an\n+ *  assertion error. Encoding must be one of BECH32 or BECH32M. */\n+std::string Encode(Encoding encoding, const std::string& hrp, const std::vector<uint8_t>& values);\n+\n+struct DecodeResult\n+{\n+    Encoding encoding;         //!< What encoding was detected in the result; Encoding::INVALID if failed.\n+    std::string hrp;           //!< The human readable part\n+    std::vector<uint8_t> data; //!< The payload (excluding checksum)\n+\n+    DecodeResult() : encoding(Encoding::INVALID) {}\n+    DecodeResult(Encoding enc, std::string&& h, std::vector<uint8_t>&& d) : encoding(enc), hrp(std::move(h)), data(std::move(d)) {}\n+};\n+\n+/** Decode a Bech32 or Bech32m string. */\n+DecodeResult Decode(const std::string& str);\n \n } // namespace bech32\n "
      },
      {
        "sha": "8e10862a37c9cce350733c39ec498d6913acb74b",
        "filename": "src/bench/bech32.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/bench/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/bench/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bech32.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -19,7 +19,7 @@ static void Bech32Encode(benchmark::Bench& bench)\n     tmp.reserve(1 + 32 * 8 / 5);\n     ConvertBits<8, 5, true>([&](unsigned char c) { tmp.push_back(c); }, v.begin(), v.end());\n     bench.batch(v.size()).unit(\"byte\").run([&] {\n-        bech32::Encode(\"bc\", tmp);\n+        bech32::Encode(bech32::Encoding::BECH32, \"bc\", tmp);\n     });\n }\n "
      },
      {
        "sha": "80acdec044a664b5d823a924fc5b9ec89d7b1d2d",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -49,7 +49,10 @@ static void CoinSelection(benchmark::Bench& bench)\n     }\n \n     const CoinEligibilityFilter filter_standard(1, 6, 0);\n-    const CoinSelectionParams coin_selection_params(true, 34, 148, CFeeRate(0), 0, false);\n+    const CoinSelectionParams coin_selection_params(/* use_bnb= */ true, /* change_output_size= */ 34,\n+                                                    /* change_spend_size= */ 148, /* effective_feerate= */ CFeeRate(0),\n+                                                    /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n+                                                    /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n     bench.run([&] {\n         std::set<CInputCoin> setCoinsRet;\n         CAmount nValueRet;"
      },
      {
        "sha": "d7cc167885d886ffb22bd685abfcc0c631036627",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -5,13 +5,14 @@\n #include <bench/bench.h>\n #include <interfaces/chain.h>\n #include <node/context.h>\n-#include <optional.h>\n #include <test/util/mining.h>\n #include <test/util/setup_common.h>\n #include <test/util/wallet.h>\n #include <validationinterface.h>\n #include <wallet/wallet.h>\n \n+#include <optional>\n+\n static void WalletBalance(benchmark::Bench& bench, const bool set_dirty, const bool add_watchonly, const bool add_mine)\n {\n     const auto test_setup = MakeNoLogFileContext<const TestingSetup>();\n@@ -26,7 +27,7 @@ static void WalletBalance(benchmark::Bench& bench, const bool set_dirty, const b\n     }\n     auto handler = test_setup->m_node.chain->handleNotifications({&wallet, [](CWallet*) {}});\n \n-    const Optional<std::string> address_mine{add_mine ? Optional<std::string>{getnewaddress(wallet)} : nullopt};\n+    const std::optional<std::string> address_mine{add_mine ? std::optional<std::string>{getnewaddress(wallet)} : std::nullopt};\n     if (add_watchonly) importaddress(wallet, ADDRESS_WATCHONLY);\n \n     for (int i = 0; i < 100; ++i) {"
      },
      {
        "sha": "ecd08c62ebb265a67230bd00e6aa079299a0a4b2",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -9,7 +9,6 @@\n \n #include <chainparamsbase.h>\n #include <clientversion.h>\n-#include <optional.h>\n #include <rpc/client.h>\n #include <rpc/mining.h>\n #include <rpc/protocol.h>\n@@ -24,6 +23,7 @@\n #include <cmath>\n #include <functional>\n #include <memory>\n+#include <optional>\n #include <stdio.h>\n #include <string>\n #include <tuple>\n@@ -611,7 +611,7 @@ class DefaultRequestHandler: public BaseRequestHandler {\n     }\n };\n \n-static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const Optional<std::string>& rpcwallet = {})\n+static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const std::optional<std::string>& rpcwallet = {})\n {\n     std::string host;\n     // In preference order, we choose the following for the port:\n@@ -733,7 +733,7 @@ static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, co\n  * @returns the RPC response as a UniValue object.\n  * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\n  */\n-static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const Optional<std::string>& rpcwallet = {})\n+static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const std::optional<std::string>& rpcwallet = {})\n {\n     UniValue response(UniValue::VOBJ);\n     // Execute and handle connection failures with -rpcwait.\n@@ -817,7 +817,7 @@ static void GetWalletBalances(UniValue& result)\n  */\n static UniValue GetNewAddress()\n {\n-    Optional<std::string> wallet_name{};\n+    std::optional<std::string> wallet_name{};\n     if (gArgs.IsArgSet(\"-rpcwallet\")) wallet_name = gArgs.GetArg(\"-rpcwallet\", \"\");\n     DefaultRequestHandler rh;\n     return ConnectAndCallRPC(&rh, \"getnewaddress\", /* args=*/{}, wallet_name);\n@@ -922,7 +922,7 @@ static int CommandLineRPC(int argc, char *argv[])\n         }\n         if (nRet == 0) {\n             // Perform RPC call\n-            Optional<std::string> wallet_name{};\n+            std::optional<std::string> wallet_name{};\n             if (gArgs.IsArgSet(\"-rpcwallet\")) wallet_name = gArgs.GetArg(\"-rpcwallet\", \"\");\n             const UniValue reply = ConnectAndCallRPC(rh.get(), method, args, wallet_name);\n "
      },
      {
        "sha": "1b4ca3e9a83bdc2ef44181d967f4bb593541bf7f",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -25,6 +25,7 @@\n #include <util/url.h>\n \n #include <functional>\n+#include <optional>\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n UrlDecodeFn* const URL_DECODE = urlDecode;"
      },
      {
        "sha": "3395741b1beb32b809fb747b11d383dbbcb7068b",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -5,12 +5,12 @@\n #ifndef BITCOIN_INTERFACES_CHAIN_H\n #define BITCOIN_INTERFACES_CHAIN_H\n \n-#include <optional.h>               // For Optional and nullopt\n #include <primitives/transaction.h> // For CTransactionRef\n #include <util/settings.h>          // For util::SettingsValue\n \n #include <functional>\n #include <memory>\n+#include <optional>\n #include <stddef.h>\n #include <stdint.h>\n #include <string>\n@@ -94,7 +94,7 @@ class Chain\n     //! Get current chain height, not including genesis block (returns 0 if\n     //! chain only contains genesis block, nullopt if chain does not contain\n     //! any blocks)\n-    virtual Optional<int> getHeight() = 0;\n+    virtual std::optional<int> getHeight() = 0;\n \n     //! Get block hash. Height must be valid or this function will abort.\n     virtual uint256 getBlockHash(int height) = 0;\n@@ -109,7 +109,7 @@ class Chain\n     //! Return height of the highest block on chain in common with the locator,\n     //! which will either be the original block used to create the locator,\n     //! or one of its ancestors.\n-    virtual Optional<int> findLocatorFork(const CBlockLocator& locator) = 0;\n+    virtual std::optional<int> findLocatorFork(const CBlockLocator& locator) = 0;\n \n     //! Check if transaction will be final given chain height current time.\n     virtual bool checkFinalTx(const CTransaction& tx) = 0;\n@@ -154,7 +154,7 @@ class Chain\n     //! Return true if data is available for all blocks in the specified range\n     //! of blocks. This checks all blocks that are ancestors of block_hash in\n     //! the height range from min_height to max_height, inclusive.\n-    virtual bool hasBlocks(const uint256& block_hash, int min_height = 0, Optional<int> max_height = {}) = 0;\n+    virtual bool hasBlocks(const uint256& block_hash, int min_height = 0, std::optional<int> max_height = {}) = 0;\n \n     //! Check if transaction is RBF opt in.\n     virtual RBFTransactionState isRBFOptIn(const CTransaction& tx) = 0;"
      },
      {
        "sha": "dbcbfa1f293bce3b42fdce650f7f2c77e9d106c1",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 12,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -43,15 +43,15 @@ class DestinationEncoder\n         std::vector<unsigned char> data = {0};\n         data.reserve(33);\n         ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.begin(), id.end());\n-        return bech32::Encode(m_params.Bech32HRP(), data);\n+        return bech32::Encode(bech32::Encoding::BECH32, m_params.Bech32HRP(), data);\n     }\n \n     std::string operator()(const WitnessV0ScriptHash& id) const\n     {\n         std::vector<unsigned char> data = {0};\n         data.reserve(53);\n         ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.begin(), id.end());\n-        return bech32::Encode(m_params.Bech32HRP(), data);\n+        return bech32::Encode(bech32::Encoding::BECH32, m_params.Bech32HRP(), data);\n     }\n \n     std::string operator()(const WitnessUnknown& id) const\n@@ -62,7 +62,7 @@ class DestinationEncoder\n         std::vector<unsigned char> data = {(unsigned char)id.version};\n         data.reserve(1 + (id.length * 8 + 4) / 5);\n         ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.program, id.program + id.length);\n-        return bech32::Encode(m_params.Bech32HRP(), data);\n+        return bech32::Encode(bech32::Encoding::BECH32M, m_params.Bech32HRP(), data);\n     }\n \n     std::string operator()(const CNoDestination& no) const { return {}; }\n@@ -95,20 +95,26 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n         error_str = \"Invalid prefix for Base58-encoded address\";\n     }\n     data.clear();\n-    auto bech = bech32::Decode(str);\n-    if (bech.second.size() > 0) {\n+    const auto dec = bech32::Decode(str);\n+    if ((dec.encoding == bech32::Encoding::BECH32 || dec.encoding == bech32::Encoding::BECH32M) && dec.data.size() > 0) {\n+        // Bech32 decoding\n         error_str = \"\";\n-\n-        if (bech.first != params.Bech32HRP()) {\n+        if (dec.hrp != params.Bech32HRP()) {\n             error_str = \"Invalid prefix for Bech32 address\";\n             return CNoDestination();\n         }\n-\n-        // Bech32 decoding\n-        int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n+        int version = dec.data[0]; // The first 5 bit symbol is the witness version (0-16)\n+        if (version == 0 && dec.encoding != bech32::Encoding::BECH32) {\n+            error_str = \"Version 0 witness address must use Bech32 checksum\";\n+            return CNoDestination();\n+        }\n+        if (version != 0 && dec.encoding != bech32::Encoding::BECH32M) {\n+            error_str = \"Version 1+ witness address must use Bech32m checksum\";\n+            return CNoDestination();\n+        }\n         // The rest of the symbols are converted witness program bytes.\n-        data.reserve(((bech.second.size() - 1) * 5) / 8);\n-        if (ConvertBits<5, 8, false>([&](unsigned char c) { data.push_back(c); }, bech.second.begin() + 1, bech.second.end())) {\n+        data.reserve(((dec.data.size() - 1) * 5) / 8);\n+        if (ConvertBits<5, 8, false>([&](unsigned char c) { data.push_back(c); }, dec.data.begin() + 1, dec.data.end())) {\n             if (version == 0) {\n                 {\n                     WitnessV0KeyHash keyid;"
      },
      {
        "sha": "fe7a54c05237eb084275fd1a0c4c4817090401d5",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -96,9 +96,6 @@ void BlockAssembler::resetBlock()\n     nFees = 0;\n }\n \n-Optional<int64_t> BlockAssembler::m_last_block_num_txs{nullopt};\n-Optional<int64_t> BlockAssembler::m_last_block_weight{nullopt};\n-\n std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(CChainState& chainstate, const CScript& scriptPubKeyIn)\n {\n     int64_t nTimeStart = GetTimeMicros();"
      },
      {
        "sha": "023635814cf13f922c302c4971ff3c88e3d38ae3",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -6,12 +6,12 @@\n #ifndef BITCOIN_MINER_H\n #define BITCOIN_MINER_H\n \n-#include <optional.h>\n #include <primitives/block.h>\n #include <txmempool.h>\n #include <validation.h>\n \n #include <memory>\n+#include <optional>\n #include <stdint.h>\n \n #include <boost/multi_index_container.hpp>\n@@ -160,8 +160,8 @@ class BlockAssembler\n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n     std::unique_ptr<CBlockTemplate> CreateNewBlock(CChainState& chainstate, const CScript& scriptPubKeyIn);\n \n-    static Optional<int64_t> m_last_block_num_txs;\n-    static Optional<int64_t> m_last_block_weight;\n+    inline static std::optional<int64_t> m_last_block_num_txs{};\n+    inline static std::optional<int64_t> m_last_block_weight{};\n \n private:\n     // utility functions"
      },
      {
        "sha": "6a2469f9506313b60629cd07f3be27a630c90c03",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -18,7 +18,6 @@\n #include <net_permissions.h>\n #include <netbase.h>\n #include <node/ui_interface.h>\n-#include <optional.h>\n #include <protocol.h>\n #include <random.h>\n #include <scheduler.h>\n@@ -39,6 +38,7 @@\n #include <algorithm>\n #include <cstdint>\n #include <functional>\n+#include <optional>\n #include <unordered_map>\n \n #include <math.h>\n@@ -193,7 +193,7 @@ bool IsPeerAddrLocalGood(CNode *pnode)\n            IsReachable(addrLocal.GetNetwork());\n }\n \n-Optional<CAddress> GetLocalAddrForPeer(CNode *pnode)\n+std::optional<CAddress> GetLocalAddrForPeer(CNode *pnode)\n {\n     CAddress addrLocal = GetLocalAddress(&pnode->addr, pnode->GetLocalServices());\n     if (gArgs.GetBoolArg(\"-addrmantest\", false)) {\n@@ -215,7 +215,7 @@ Optional<CAddress> GetLocalAddrForPeer(CNode *pnode)\n         return addrLocal;\n     }\n     // Address is unroutable. Don't advertise.\n-    return nullopt;\n+    return std::nullopt;\n }\n \n // learn a new local address\n@@ -632,7 +632,7 @@ bool CNode::ReceiveMsgBytes(Span<const uint8_t> msg_bytes, bool& complete)\n         if (m_deserializer->Complete()) {\n             // decompose a transport agnostic CNetMessage from the deserializer\n             uint32_t out_err_raw_size{0};\n-            Optional<CNetMessage> result{m_deserializer->GetMessage(time, out_err_raw_size)};\n+            std::optional<CNetMessage> result{m_deserializer->GetMessage(time, out_err_raw_size)};\n             if (!result) {\n                 // Message deserialization failed.  Drop the message but don't disconnect the peer.\n                 // store the size of the corrupt message\n@@ -723,10 +723,10 @@ const uint256& V1TransportDeserializer::GetMessageHash() const\n     return data_hash;\n }\n \n-Optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono::microseconds time, uint32_t& out_err_raw_size)\n+std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono::microseconds time, uint32_t& out_err_raw_size)\n {\n     // decompose a single CNetMessage from the TransportDeserializer\n-    Optional<CNetMessage> msg(std::move(vRecv));\n+    std::optional<CNetMessage> msg(std::move(vRecv));\n \n     // store command string, time, and sizes\n     msg->m_command = hdr.GetCommand();\n@@ -747,12 +747,12 @@ Optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono::mic\n                  HexStr(hdr.pchChecksum),\n                  m_node_id);\n         out_err_raw_size = msg->m_raw_message_size;\n-        msg = nullopt;\n+        msg = std::nullopt;\n     } else if (!hdr.IsCommandValid()) {\n         LogPrint(BCLog::NET, \"HEADER ERROR - COMMAND (%s, %u bytes), peer=%d\\n\",\n                  hdr.GetCommand(), msg->m_message_size, m_node_id);\n         out_err_raw_size = msg->m_raw_message_size;\n-        msg = nullopt;\n+        msg.reset();\n     }\n \n     // Always reset the network deserializer (prepare for the next message)\n@@ -879,7 +879,7 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n-[[nodiscard]] Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)\n+[[nodiscard]] std::optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)\n {\n     // Protect connections with certain characteristics\n \n@@ -918,7 +918,7 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     total_protect_size -= initial_size - vEvictionCandidates.size();\n     EraseLastKElements(vEvictionCandidates, ReverseCompareNodeTimeConnected, total_protect_size);\n \n-    if (vEvictionCandidates.empty()) return nullopt;\n+    if (vEvictionCandidates.empty()) return std::nullopt;\n \n     // If any remaining peers are preferred for eviction consider only them.\n     // This happens after the other preferences since if a peer is really the best by other criteria (esp relaying blocks)\n@@ -989,7 +989,7 @@ bool CConnman::AttemptToEvictConnection()\n             vEvictionCandidates.push_back(candidate);\n         }\n     }\n-    const Optional<NodeId> node_id_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));\n+    const std::optional<NodeId> node_id_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));\n     if (!node_id_to_evict) {\n         return false;\n     }"
      },
      {
        "sha": "48d37084a06be2934a1b1fd7484529c4580029fd",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -18,7 +18,6 @@\n #include <net_permissions.h>\n #include <netaddress.h>\n #include <netbase.h>\n-#include <optional.h>\n #include <policy/feerate.h>\n #include <protocol.h>\n #include <random.h>\n@@ -35,6 +34,7 @@\n #include <deque>\n #include <map>\n #include <memory>\n+#include <optional>\n #include <thread>\n #include <vector>\n \n@@ -200,7 +200,7 @@ enum\n \n bool IsPeerAddrLocalGood(CNode *pnode);\n /** Returns a local address that we should advertise to this peer */\n-Optional<CAddress> GetLocalAddrForPeer(CNode *pnode);\n+std::optional<CAddress> GetLocalAddrForPeer(CNode *pnode);\n \n /**\n  * Mark a network as reachable or unreachable (no automatic connects to it)\n@@ -311,7 +311,7 @@ class TransportDeserializer {\n     /** read and deserialize data, advances msg_bytes data pointer */\n     virtual int Read(Span<const uint8_t>& msg_bytes) = 0;\n     // decomposes a message from the context\n-    virtual Optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err) = 0;\n+    virtual std::optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err) = 0;\n     virtual ~TransportDeserializer() {}\n };\n \n@@ -375,7 +375,7 @@ class V1TransportDeserializer final : public TransportDeserializer\n         }\n         return ret;\n     }\n-    Optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size) override;\n+    std::optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size) override;\n };\n \n /** The TransportSerializer prepares messages for the network transport\n@@ -1283,6 +1283,6 @@ struct NodeEvictionCandidate\n     bool m_is_local;\n };\n \n-[[nodiscard]] Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates);\n+[[nodiscard]] std::optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates);\n \n #endif // BITCOIN_NET_H"
      },
      {
        "sha": "e561f02c4acf3fcb42bec18ff42d8d33ff731f47",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 137,
        "deletions": 152,
        "changes": 289,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -34,6 +34,7 @@\n #include <validation.h>\n \n #include <memory>\n+#include <optional>\n #include <typeinfo>\n \n /** How long to cache transactions in mapRelay for normal relay */\n@@ -246,6 +247,7 @@ class PeerManagerImpl final : public PeerManager\n     bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) override;\n     bool IgnoresIncomingTxs() override { return m_ignore_incoming_txs; }\n     void SendPings() override;\n+    void RelayTransaction(const uint256& txid, const uint256& wtxid) override;\n     void SetBestHeight(int height) override { m_best_height = height; };\n     void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message) override;\n     void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n@@ -259,7 +261,7 @@ class PeerManagerImpl final : public PeerManager\n     void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** Retrieve unbroadcast transactions from the mempool and reattempt sending to peers */\n-    void ReattemptInitialBroadcast(CScheduler& scheduler) const;\n+    void ReattemptInitialBroadcast(CScheduler& scheduler);\n \n     /** Get a shared pointer to the Peer object.\n      *  May return an empty shared_ptr if the Peer object can't be found. */\n@@ -474,22 +476,19 @@ class PeerManagerImpl final : public PeerManager\n     size_t vExtraTxnForCompactIt GUARDED_BY(g_cs_orphans) = 0;\n \n     void ProcessBlockAvailability(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    bool CanDirectFetch(const Consensus::Params &consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void UpdateBlockAvailability(NodeId nodeid, const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool CanDirectFetch() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool BlockRequestAllowed(const CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     bool AlreadyHaveBlock(const uint256& block_hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    void ProcessGetBlockData(CNode& pfrom, Peer& peer, const CChainParams& chainparams, const CInv& inv, CConnman& connman);\n-    bool PrepareBlockFilterRequest(CNode& peer, const CChainParams& chain_params,\n+    void ProcessGetBlockData(CNode& pfrom, Peer& peer, const CInv& inv);\n+    bool PrepareBlockFilterRequest(CNode& peer,\n                                    BlockFilterType filter_type, uint32_t start_height,\n                                    const uint256& stop_hash, uint32_t max_height_diff,\n                                    const CBlockIndex*& stop_index,\n                                    BlockFilterIndex*& filter_index);\n-    void ProcessGetCFilters(CNode& peer, CDataStream& vRecv, const CChainParams& chain_params,\n-                                   CConnman& connman);\n-    void ProcessGetCFHeaders(CNode& peer, CDataStream& vRecv, const CChainParams& chain_params,\n-                                    CConnman& connman);\n-    void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const CChainParams& chain_params,\n-                                    CConnman& connman);\n+    void ProcessGetCFilters(CNode& peer, CDataStream& vRecv);\n+    void ProcessGetCFHeaders(CNode& peer, CDataStream& vRecv);\n+    void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv);\n };\n } // namespace\n \n@@ -728,9 +727,9 @@ bool PeerManagerImpl::TipMayBeStale()\n     return m_last_tip_update < GetTime() - consensusParams.nPowTargetSpacing * 3 && mapBlocksInFlight.empty();\n }\n \n-bool PeerManagerImpl::CanDirectFetch(const Consensus::Params &consensusParams)\n+bool PeerManagerImpl::CanDirectFetch()\n {\n-    return m_chainman.ActiveChain().Tip()->GetBlockTime() > GetAdjustedTime() - consensusParams.nPowTargetSpacing * 20;\n+    return m_chainman.ActiveChain().Tip()->GetBlockTime() > GetAdjustedTime() - m_chainparams.GetConsensus().nPowTargetSpacing * 20;\n }\n \n static bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n@@ -948,7 +947,7 @@ void PeerManagerImpl::InitializeNode(CNode *pnode)\n     }\n }\n \n-void PeerManagerImpl::ReattemptInitialBroadcast(CScheduler& scheduler) const\n+void PeerManagerImpl::ReattemptInitialBroadcast(CScheduler& scheduler)\n {\n     std::set<uint256> unbroadcast_txids = m_mempool.GetUnbroadcastTxs();\n \n@@ -957,7 +956,7 @@ void PeerManagerImpl::ReattemptInitialBroadcast(CScheduler& scheduler) const\n \n         if (tx != nullptr) {\n             LOCK(cs_main);\n-            RelayTransaction(txid, tx->GetWitnessHash(), m_connman);\n+            RelayTransaction(txid, tx->GetWitnessHash());\n         } else {\n             m_mempool.RemoveUnbroadcastTx(txid, true);\n         }\n@@ -1193,13 +1192,13 @@ bool PeerManagerImpl::MaybePunishNodeForTx(NodeId nodeid, const TxValidationStat\n // active chain if they are no more than a month older (both in time, and in\n // best equivalent proof of work) than the best header chain we know about and\n // we fully-validated them at some point.\n-bool PeerManagerImpl::BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+bool PeerManagerImpl::BlockRequestAllowed(const CBlockIndex* pindex)\n {\n     AssertLockHeld(cs_main);\n     if (m_chainman.ActiveChain().Contains(pindex)) return true;\n     return pindex->IsValid(BLOCK_VALID_SCRIPTS) && (pindexBestHeader != nullptr) &&\n-        (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() < STALE_RELAY_AGE_LIMIT) &&\n-        (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, consensusParams) < STALE_RELAY_AGE_LIMIT);\n+           (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() < STALE_RELAY_AGE_LIMIT) &&\n+           (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, m_chainparams.GetConsensus()) < STALE_RELAY_AGE_LIMIT);\n }\n \n std::unique_ptr<PeerManager> PeerManager::make(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n@@ -1459,9 +1458,9 @@ void PeerManagerImpl::SendPings()\n     for(auto& it : m_peer_map) it.second->m_ping_queued = true;\n }\n \n-void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman)\n+void PeerManagerImpl::RelayTransaction(const uint256& txid, const uint256& wtxid)\n {\n-    connman.ForEachNode([&txid, &wtxid](CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n+    m_connman.ForEachNode([&txid, &wtxid](CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n         AssertLockHeld(::cs_main);\n \n         CNodeState* state = State(pnode->GetId());\n@@ -1529,13 +1528,11 @@ static void RelayAddress(const CNode& originator,\n     connman.ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n-void PeerManagerImpl::ProcessGetBlockData(CNode& pfrom, Peer& peer, const CChainParams& chainparams, const CInv& inv, CConnman& connman)\n+void PeerManagerImpl::ProcessGetBlockData(CNode& pfrom, Peer& peer, const CInv& inv)\n {\n-    bool send = false;\n     std::shared_ptr<const CBlock> a_recent_block;\n     std::shared_ptr<const CBlockHeaderAndShortTxIDs> a_recent_compact_block;\n     bool fWitnessesPresentInARecentCompactBlock;\n-    const Consensus::Params& consensusParams = chainparams.GetConsensus();\n     {\n         LOCK(cs_most_recent_block);\n         a_recent_block = most_recent_block;\n@@ -1561,126 +1558,124 @@ void PeerManagerImpl::ProcessGetBlockData(CNode& pfrom, Peer& peer, const CChain\n     } // release cs_main before calling ActivateBestChain\n     if (need_activate_chain) {\n         BlockValidationState state;\n-        if (!m_chainman.ActiveChainstate().ActivateBestChain(state, chainparams, a_recent_block)) {\n+        if (!m_chainman.ActiveChainstate().ActivateBestChain(state, m_chainparams, a_recent_block)) {\n             LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", state.ToString());\n         }\n     }\n \n     LOCK(cs_main);\n     const CBlockIndex* pindex = m_chainman.m_blockman.LookupBlockIndex(inv.hash);\n-    if (pindex) {\n-        send = BlockRequestAllowed(pindex, consensusParams);\n-        if (!send) {\n-            LogPrint(BCLog::NET, \"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom.GetId());\n-        }\n+    if (!pindex) {\n+        return;\n+    }\n+    if (!BlockRequestAllowed(pindex)) {\n+        LogPrint(BCLog::NET, \"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom.GetId());\n+        return;\n     }\n     const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n     // disconnect node in case we have reached the outbound limit for serving historical blocks\n-    if (send &&\n-        connman.OutboundTargetReached(true) &&\n+    if (m_connman.OutboundTargetReached(true) &&\n         (((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.IsMsgFilteredBlk()) &&\n         !pfrom.HasPermission(PF_DOWNLOAD) // nodes with the download permission may exceed target\n     ) {\n         LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom.GetId());\n-\n-        //disconnect node\n         pfrom.fDisconnect = true;\n-        send = false;\n+        return;\n     }\n     // Avoid leaking prune-height by never sending blocks below the NODE_NETWORK_LIMITED threshold\n-    if (send && !pfrom.HasPermission(PF_NOBAN) && (\n+    if (!pfrom.HasPermission(PF_NOBAN) && (\n             (((pfrom.GetLocalServices() & NODE_NETWORK_LIMITED) == NODE_NETWORK_LIMITED) && ((pfrom.GetLocalServices() & NODE_NETWORK) != NODE_NETWORK) && (m_chainman.ActiveChain().Tip()->nHeight - pindex->nHeight > (int)NODE_NETWORK_LIMITED_MIN_BLOCKS + 2 /* add two blocks buffer extension for possible races */) )\n        )) {\n-        LogPrint(BCLog::NET, \"Ignore block request below NODE_NETWORK_LIMITED threshold from peer=%d\\n\", pfrom.GetId());\n-\n+        LogPrint(BCLog::NET, \"Ignore block request below NODE_NETWORK_LIMITED threshold, disconnect peer=%d\\n\", pfrom.GetId());\n         //disconnect node and prevent it from stalling (would otherwise wait for the missing block)\n         pfrom.fDisconnect = true;\n-        send = false;\n+        return;\n     }\n     // Pruned nodes may have deleted the block, so check whether\n     // it's available before trying to send.\n-    if (send && (pindex->nStatus & BLOCK_HAVE_DATA))\n-    {\n-        std::shared_ptr<const CBlock> pblock;\n-        if (a_recent_block && a_recent_block->GetHash() == pindex->GetBlockHash()) {\n-            pblock = a_recent_block;\n-        } else if (inv.IsMsgWitnessBlk()) {\n-            // Fast-path: in this case it is possible to serve the block directly from disk,\n-            // as the network format matches the format on disk\n-            std::vector<uint8_t> block_data;\n-            if (!ReadRawBlockFromDisk(block_data, pindex, chainparams.MessageStart())) {\n-                assert(!\"cannot load block from disk\");\n-            }\n-            connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCK, MakeSpan(block_data)));\n-            // Don't set pblock as we've sent the block\n-        } else {\n-            // Send block from disk\n-            std::shared_ptr<CBlock> pblockRead = std::make_shared<CBlock>();\n-            if (!ReadBlockFromDisk(*pblockRead, pindex, consensusParams))\n-                assert(!\"cannot load block from disk\");\n-            pblock = pblockRead;\n+    if (!(pindex->nStatus & BLOCK_HAVE_DATA)) {\n+        return;\n+    }\n+    std::shared_ptr<const CBlock> pblock;\n+    if (a_recent_block && a_recent_block->GetHash() == pindex->GetBlockHash()) {\n+        pblock = a_recent_block;\n+    } else if (inv.IsMsgWitnessBlk()) {\n+        // Fast-path: in this case it is possible to serve the block directly from disk,\n+        // as the network format matches the format on disk\n+        std::vector<uint8_t> block_data;\n+        if (!ReadRawBlockFromDisk(block_data, pindex, m_chainparams.MessageStart())) {\n+            assert(!\"cannot load block from disk\");\n+        }\n+        m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCK, MakeSpan(block_data)));\n+        // Don't set pblock as we've sent the block\n+    } else {\n+        // Send block from disk\n+        std::shared_ptr<CBlock> pblockRead = std::make_shared<CBlock>();\n+        if (!ReadBlockFromDisk(*pblockRead, pindex, m_chainparams.GetConsensus())) {\n+            assert(!\"cannot load block from disk\");\n         }\n-        if (pblock) {\n-            if (inv.IsMsgBlk()) {\n-                connman.PushMessage(&pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, *pblock));\n-            } else if (inv.IsMsgWitnessBlk()) {\n-                connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCK, *pblock));\n-            } else if (inv.IsMsgFilteredBlk()) {\n-                bool sendMerkleBlock = false;\n-                CMerkleBlock merkleBlock;\n-                if (pfrom.m_tx_relay != nullptr) {\n-                    LOCK(pfrom.m_tx_relay->cs_filter);\n-                    if (pfrom.m_tx_relay->pfilter) {\n-                        sendMerkleBlock = true;\n-                        merkleBlock = CMerkleBlock(*pblock, *pfrom.m_tx_relay->pfilter);\n-                    }\n-                }\n-                if (sendMerkleBlock) {\n-                    connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::MERKLEBLOCK, merkleBlock));\n-                    // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n-                    // This avoids hurting performance by pointlessly requiring a round-trip\n-                    // Note that there is currently no way for a node to request any single transactions we didn't send here -\n-                    // they must either disconnect and retry or request the full block.\n-                    // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n-                    // however we MUST always provide at least what the remote peer needs\n-                    typedef std::pair<unsigned int, uint256> PairType;\n-                    for (PairType& pair : merkleBlock.vMatchedTxn)\n-                        connman.PushMessage(&pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, *pblock->vtx[pair.first]));\n+        pblock = pblockRead;\n+    }\n+    if (pblock) {\n+        if (inv.IsMsgBlk()) {\n+            m_connman.PushMessage(&pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, *pblock));\n+        } else if (inv.IsMsgWitnessBlk()) {\n+            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCK, *pblock));\n+        } else if (inv.IsMsgFilteredBlk()) {\n+            bool sendMerkleBlock = false;\n+            CMerkleBlock merkleBlock;\n+            if (pfrom.m_tx_relay != nullptr) {\n+                LOCK(pfrom.m_tx_relay->cs_filter);\n+                if (pfrom.m_tx_relay->pfilter) {\n+                    sendMerkleBlock = true;\n+                    merkleBlock = CMerkleBlock(*pblock, *pfrom.m_tx_relay->pfilter);\n                 }\n-                // else\n-                    // no response\n-            } else if (inv.IsMsgCmpctBlk()) {\n-                // If a peer is asking for old blocks, we're almost guaranteed\n-                // they won't have a useful mempool to match against a compact block,\n-                // and we don't feel like constructing the object for them, so\n-                // instead we respond with the full, non-compact block.\n-                bool fPeerWantsWitness = State(pfrom.GetId())->fWantsCmpctWitness;\n-                int nSendFlags = fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n-                if (CanDirectFetch(consensusParams) && pindex->nHeight >= m_chainman.ActiveChain().Height() - MAX_CMPCTBLOCK_DEPTH) {\n-                    if ((fPeerWantsWitness || !fWitnessesPresentInARecentCompactBlock) && a_recent_compact_block && a_recent_compact_block->header.GetHash() == pindex->GetBlockHash()) {\n-                        connman.PushMessage(&pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n-                    } else {\n-                        CBlockHeaderAndShortTxIDs cmpctblock(*pblock, fPeerWantsWitness);\n-                        connman.PushMessage(&pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n-                    }\n+            }\n+            if (sendMerkleBlock) {\n+                m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::MERKLEBLOCK, merkleBlock));\n+                // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n+                // This avoids hurting performance by pointlessly requiring a round-trip\n+                // Note that there is currently no way for a node to request any single transactions we didn't send here -\n+                // they must either disconnect and retry or request the full block.\n+                // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n+                // however we MUST always provide at least what the remote peer needs\n+                typedef std::pair<unsigned int, uint256> PairType;\n+                for (PairType& pair : merkleBlock.vMatchedTxn)\n+                    m_connman.PushMessage(&pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, *pblock->vtx[pair.first]));\n+            }\n+            // else\n+            // no response\n+        } else if (inv.IsMsgCmpctBlk()) {\n+            // If a peer is asking for old blocks, we're almost guaranteed\n+            // they won't have a useful mempool to match against a compact block,\n+            // and we don't feel like constructing the object for them, so\n+            // instead we respond with the full, non-compact block.\n+            bool fPeerWantsWitness = State(pfrom.GetId())->fWantsCmpctWitness;\n+            int nSendFlags = fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n+            if (CanDirectFetch() && pindex->nHeight >= m_chainman.ActiveChain().Height() - MAX_CMPCTBLOCK_DEPTH) {\n+                if ((fPeerWantsWitness || !fWitnessesPresentInARecentCompactBlock) && a_recent_compact_block && a_recent_compact_block->header.GetHash() == pindex->GetBlockHash()) {\n+                    m_connman.PushMessage(&pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n                 } else {\n-                    connman.PushMessage(&pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCK, *pblock));\n+                    CBlockHeaderAndShortTxIDs cmpctblock(*pblock, fPeerWantsWitness);\n+                    m_connman.PushMessage(&pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n                 }\n+            } else {\n+                m_connman.PushMessage(&pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCK, *pblock));\n             }\n         }\n+    }\n \n-        {\n-            LOCK(peer.m_block_inv_mutex);\n-            // Trigger the peer node to send a getblocks request for the next batch of inventory\n-            if (inv.hash == peer.m_continuation_block) {\n-                // Send immediately. This must send even if redundant,\n-                // and we want it right after the last block so they don't\n-                // wait for other stuff first.\n-                std::vector<CInv> vInv;\n-                vInv.push_back(CInv(MSG_BLOCK, m_chainman.ActiveChain().Tip()->GetBlockHash()));\n-                connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::INV, vInv));\n-                peer.m_continuation_block.SetNull();\n-            }\n+    {\n+        LOCK(peer.m_block_inv_mutex);\n+        // Trigger the peer node to send a getblocks request for the next batch of inventory\n+        if (inv.hash == peer.m_continuation_block) {\n+            // Send immediately. This must send even if redundant,\n+            // and we want it right after the last block so they don't\n+            // wait for other stuff first.\n+            std::vector<CInv> vInv;\n+            vInv.push_back(CInv(MSG_BLOCK, m_chainman.ActiveChain().Tip()->GetBlockHash()));\n+            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::INV, vInv));\n+            peer.m_continuation_block.SetNull();\n         }\n     }\n }\n@@ -1779,7 +1774,7 @@ void PeerManagerImpl::ProcessGetData(CNode& pfrom, Peer& peer, const std::atomic\n     if (it != peer.m_getdata_requests.end() && !pfrom.fPauseSend) {\n         const CInv &inv = *it++;\n         if (inv.IsGenBlkMsg()) {\n-            ProcessGetBlockData(pfrom, peer, m_chainparams, inv, m_connman);\n+            ProcessGetBlockData(pfrom, peer, inv);\n         }\n         // else: If the first item on the queue is an unknown type, we erase it\n         // and continue processing the queue on the next call.\n@@ -1927,10 +1922,9 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n             m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(pindexLast), uint256()));\n         }\n \n-        bool fCanDirectFetch = CanDirectFetch(m_chainparams.GetConsensus());\n         // If this set of headers is valid and ends in a block with at least as\n         // much work as our tip, download as much as possible.\n-        if (fCanDirectFetch && pindexLast->IsValid(BLOCK_VALID_TREE) && m_chainman.ActiveChain().Tip()->nChainWork <= pindexLast->nChainWork) {\n+        if (CanDirectFetch() && pindexLast->IsValid(BLOCK_VALID_TREE) && m_chainman.ActiveChain().Tip()->nChainWork <= pindexLast->nChainWork) {\n             std::vector<const CBlockIndex*> vToFetch;\n             const CBlockIndex *pindexWalk = pindexLast;\n             // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n@@ -2041,7 +2035,7 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n \n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n-            RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), m_connman);\n+            RelayTransaction(orphanHash, porphanTx->GetWitnessHash());\n             m_orphanage.AddChildrenToWorkSet(*porphanTx, orphan_work_set);\n             m_orphanage.EraseTx(orphanHash);\n             for (const CTransactionRef& removedTx : result.m_replaced_transactions.value()) {\n@@ -2103,7 +2097,6 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n  * May disconnect from the peer in the case of a bad request.\n  *\n  * @param[in]   peer            The peer that we received the request from\n- * @param[in]   chain_params    Chain parameters\n  * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n  * @param[in]   start_height    The start height for the request\n  * @param[in]   stop_hash       The stop_hash for the request\n@@ -2112,11 +2105,11 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n  * @param[out]  filter_index    The filter index, if the request can be serviced.\n  * @return                      True if the request can be serviced.\n  */\n-bool PeerManagerImpl::PrepareBlockFilterRequest(CNode& peer, const CChainParams& chain_params,\n-                                      BlockFilterType filter_type, uint32_t start_height,\n-                                      const uint256& stop_hash, uint32_t max_height_diff,\n-                                      const CBlockIndex*& stop_index,\n-                                      BlockFilterIndex*& filter_index)\n+bool PeerManagerImpl::PrepareBlockFilterRequest(CNode& peer,\n+                                                BlockFilterType filter_type, uint32_t start_height,\n+                                                const uint256& stop_hash, uint32_t max_height_diff,\n+                                                const CBlockIndex*& stop_index,\n+                                                BlockFilterIndex*& filter_index)\n {\n     const bool supported_filter_type =\n         (filter_type == BlockFilterType::BASIC &&\n@@ -2133,7 +2126,7 @@ bool PeerManagerImpl::PrepareBlockFilterRequest(CNode& peer, const CChainParams&\n         stop_index = m_chainman.m_blockman.LookupBlockIndex(stop_hash);\n \n         // Check that the stop block exists and the peer would be allowed to fetch it.\n-        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+        if (!stop_index || !BlockRequestAllowed(stop_index)) {\n             LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n                      peer.GetId(), stop_hash.ToString());\n             peer.fDisconnect = true;\n@@ -2172,11 +2165,8 @@ bool PeerManagerImpl::PrepareBlockFilterRequest(CNode& peer, const CChainParams&\n  *\n  * @param[in]   peer            The peer that we received the request from\n  * @param[in]   vRecv           The raw message received\n- * @param[in]   chain_params    Chain parameters\n- * @param[in]   connman         Pointer to the connection manager\n  */\n-void PeerManagerImpl::ProcessGetCFilters(CNode& peer, CDataStream& vRecv, const CChainParams& chain_params,\n-                               CConnman& connman)\n+void PeerManagerImpl::ProcessGetCFilters(CNode& peer, CDataStream& vRecv)\n {\n     uint8_t filter_type_ser;\n     uint32_t start_height;\n@@ -2188,7 +2178,7 @@ void PeerManagerImpl::ProcessGetCFilters(CNode& peer, CDataStream& vRecv, const\n \n     const CBlockIndex* stop_index;\n     BlockFilterIndex* filter_index;\n-    if (!PrepareBlockFilterRequest(peer, chain_params, filter_type, start_height, stop_hash,\n+    if (!PrepareBlockFilterRequest(peer, filter_type, start_height, stop_hash,\n                                    MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n         return;\n     }\n@@ -2203,7 +2193,7 @@ void PeerManagerImpl::ProcessGetCFilters(CNode& peer, CDataStream& vRecv, const\n     for (const auto& filter : filters) {\n         CSerializedNetMsg msg = CNetMsgMaker(peer.GetCommonVersion())\n             .Make(NetMsgType::CFILTER, filter);\n-        connman.PushMessage(&peer, std::move(msg));\n+        m_connman.PushMessage(&peer, std::move(msg));\n     }\n }\n \n@@ -2214,11 +2204,8 @@ void PeerManagerImpl::ProcessGetCFilters(CNode& peer, CDataStream& vRecv, const\n  *\n  * @param[in]   peer            The peer that we received the request from\n  * @param[in]   vRecv           The raw message received\n- * @param[in]   chain_params    Chain parameters\n- * @param[in]   connman         Pointer to the connection manager\n  */\n-void PeerManagerImpl::ProcessGetCFHeaders(CNode& peer, CDataStream& vRecv, const CChainParams& chain_params,\n-                                CConnman& connman)\n+void PeerManagerImpl::ProcessGetCFHeaders(CNode& peer, CDataStream& vRecv)\n {\n     uint8_t filter_type_ser;\n     uint32_t start_height;\n@@ -2230,7 +2217,7 @@ void PeerManagerImpl::ProcessGetCFHeaders(CNode& peer, CDataStream& vRecv, const\n \n     const CBlockIndex* stop_index;\n     BlockFilterIndex* filter_index;\n-    if (!PrepareBlockFilterRequest(peer, chain_params, filter_type, start_height, stop_hash,\n+    if (!PrepareBlockFilterRequest(peer, filter_type, start_height, stop_hash,\n                                    MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n         return;\n     }\n@@ -2259,7 +2246,7 @@ void PeerManagerImpl::ProcessGetCFHeaders(CNode& peer, CDataStream& vRecv, const\n               stop_index->GetBlockHash(),\n               prev_header,\n               filter_hashes);\n-    connman.PushMessage(&peer, std::move(msg));\n+    m_connman.PushMessage(&peer, std::move(msg));\n }\n \n /**\n@@ -2269,11 +2256,8 @@ void PeerManagerImpl::ProcessGetCFHeaders(CNode& peer, CDataStream& vRecv, const\n  *\n  * @param[in]   peer            The peer that we received the request from\n  * @param[in]   vRecv           The raw message received\n- * @param[in]   chain_params    Chain parameters\n- * @param[in]   connman         Pointer to the connection manager\n  */\n-void PeerManagerImpl::ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const CChainParams& chain_params,\n-                                CConnman& connman)\n+void PeerManagerImpl::ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv)\n {\n     uint8_t filter_type_ser;\n     uint256 stop_hash;\n@@ -2284,7 +2268,7 @@ void PeerManagerImpl::ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const\n \n     const CBlockIndex* stop_index;\n     BlockFilterIndex* filter_index;\n-    if (!PrepareBlockFilterRequest(peer, chain_params, filter_type, /*start_height=*/0, stop_hash,\n+    if (!PrepareBlockFilterRequest(peer, filter_type, /*start_height=*/0, stop_hash,\n                                    /*max_height_diff=*/std::numeric_limits<uint32_t>::max(),\n                                    stop_index, filter_index)) {\n         return;\n@@ -2310,7 +2294,7 @@ void PeerManagerImpl::ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const\n               filter_type_ser,\n               stop_index->GetBlockHash(),\n               headers);\n-    connman.PushMessage(&peer, std::move(msg));\n+    m_connman.PushMessage(&peer, std::move(msg));\n }\n \n void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n@@ -2948,7 +2932,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 return;\n             }\n \n-            if (!BlockRequestAllowed(pindex, m_chainparams.GetConsensus())) {\n+            if (!BlockRequestAllowed(pindex)) {\n                 LogPrint(BCLog::NET, \"%s: ignoring request from peer=%i for old block header that isn't in the main chain\\n\", __func__, pfrom.GetId());\n                 return;\n             }\n@@ -3045,7 +3029,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                     LogPrintf(\"Not relaying non-mempool transaction %s from forcerelay peer=%d\\n\", tx.GetHash().ToString(), pfrom.GetId());\n                 } else {\n                     LogPrintf(\"Force relaying tx %s from peer=%d\\n\", tx.GetHash().ToString(), pfrom.GetId());\n-                    RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n+                    RelayTransaction(tx.GetHash(), tx.GetWitnessHash());\n                 }\n             }\n             return;\n@@ -3060,7 +3044,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // requests for it.\n             m_txrequest.ForgetTxHash(tx.GetHash());\n             m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n-            RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n+            RelayTransaction(tx.GetHash(), tx.GetWitnessHash());\n             m_orphanage.AddChildrenToWorkSet(tx, peer->m_orphan_work_set);\n \n             pfrom.nLastTXTime = GetTime();\n@@ -3286,8 +3270,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         // If we're not close to tip yet, give up and let parallel block fetch work its magic\n-        if (!fAlreadyInFlight && !CanDirectFetch(m_chainparams.GetConsensus()))\n+        if (!fAlreadyInFlight && !CanDirectFetch()) {\n             return;\n+        }\n \n         if (IsWitnessEnabled(pindex->pprev, m_chainparams.GetConsensus()) && !nodestate->fSupportsDesiredCmpctVersion) {\n             // Don't bother trying to process compact blocks from v1 peers\n@@ -3780,17 +3765,17 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n     }\n \n     if (msg_type == NetMsgType::GETCFILTERS) {\n-        ProcessGetCFilters(pfrom, vRecv, m_chainparams, m_connman);\n+        ProcessGetCFilters(pfrom, vRecv);\n         return;\n     }\n \n     if (msg_type == NetMsgType::GETCFHEADERS) {\n-        ProcessGetCFHeaders(pfrom, vRecv, m_chainparams, m_connman);\n+        ProcessGetCFHeaders(pfrom, vRecv);\n         return;\n     }\n \n     if (msg_type == NetMsgType::GETCFCHECKPT) {\n-        ProcessGetCFCheckPt(pfrom, vRecv, m_chainparams, m_connman);\n+        ProcessGetCFCheckPt(pfrom, vRecv);\n         return;\n     }\n \n@@ -4105,7 +4090,7 @@ void PeerManagerImpl::CheckForStaleTipAndEvictPeers()\n         m_stale_tip_check_time = time_in_seconds + STALE_CHECK_INTERVAL;\n     }\n \n-    if (!m_initial_sync_finished && CanDirectFetch(m_chainparams.GetConsensus())) {\n+    if (!m_initial_sync_finished && CanDirectFetch()) {\n         m_connman.StartExtraBlockRelayPeers();\n         m_initial_sync_finished = true;\n     }\n@@ -4218,7 +4203,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             if (pto->m_next_local_addr_send != 0us) {\n                 pto->m_addr_known->reset();\n             }\n-            if (Optional<CAddress> local_addr = GetLocalAddrForPeer(pto)) {\n+            if (std::optional<CAddress> local_addr = GetLocalAddrForPeer(pto)) {\n                 FastRandomContext insecure_rand;\n                 pto->PushAddress(*local_addr, insecure_rand);\n             }"
      },
      {
        "sha": "f6f2d73721ddac5d0c50c509992e4d084af379d0",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -47,6 +47,10 @@ class PeerManager : public CValidationInterface, public NetEventsInterface\n     /** Whether this node ignores txs received over p2p. */\n     virtual bool IgnoresIncomingTxs() = 0;\n \n+    /** Relay transaction to all peers. */\n+    virtual void RelayTransaction(const uint256& txid, const uint256& wtxid)\n+        EXCLUSIVE_LOCKS_REQUIRED(cs_main) = 0;\n+\n     /** Send ping message to all peers */\n     virtual void SendPings() = 0;\n \n@@ -71,7 +75,4 @@ class PeerManager : public CValidationInterface, public NetEventsInterface\n                                 const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc) = 0;\n };\n \n-/** Relay transaction to every node */\n-void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-\n #endif // BITCOIN_NET_PROCESSING_H"
      },
      {
        "sha": "50c8c291758dd8e42c3c58d14c0b847b0160cc59",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -50,6 +50,7 @@\n #endif\n \n #include <memory>\n+#include <optional>\n #include <utility>\n \n using interfaces::BlockTip;\n@@ -415,15 +416,15 @@ class ChainImpl : public Chain\n {\n public:\n     explicit ChainImpl(NodeContext& node) : m_node(node) {}\n-    Optional<int> getHeight() override\n+    std::optional<int> getHeight() override\n     {\n         LOCK(::cs_main);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n         int height = active.Height();\n         if (height >= 0) {\n             return height;\n         }\n-        return nullopt;\n+        return std::nullopt;\n     }\n     uint256 getBlockHash(int height) override\n     {\n@@ -452,15 +453,15 @@ class ChainImpl : public Chain\n         assert(std::addressof(::ChainActive()) == std::addressof(m_node.chainman->ActiveChain()));\n         return CheckFinalTx(m_node.chainman->ActiveChain().Tip(), tx);\n     }\n-    Optional<int> findLocatorFork(const CBlockLocator& locator) override\n+    std::optional<int> findLocatorFork(const CBlockLocator& locator) override\n     {\n         LOCK(cs_main);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n         assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         if (CBlockIndex* fork = m_node.chainman->m_blockman.FindForkInGlobalIndex(active, locator)) {\n             return fork->nHeight;\n         }\n-        return nullopt;\n+        return std::nullopt;\n     }\n     bool findBlock(const uint256& hash, const FoundBlock& block) override\n     {\n@@ -518,7 +519,7 @@ class ChainImpl : public Chain\n         assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         return GuessVerificationProgress(Params().TxData(), m_node.chainman->m_blockman.LookupBlockIndex(block_hash));\n     }\n-    bool hasBlocks(const uint256& block_hash, int min_height, Optional<int> max_height) override\n+    bool hasBlocks(const uint256& block_hash, int min_height, std::optional<int> max_height) override\n     {\n         // hasBlocks returns true if all ancestors of block_hash in specified\n         // range have block data (are not pruned), false if any ancestors in"
      },
      {
        "sha": "def4385c09ce819db950729514fff388b0d6933d",
        "filename": "src/node/psbt.h",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/node/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/node/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.h?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -7,6 +7,8 @@\n \n #include <psbt.h>\n \n+#include <optional>\n+\n /**\n  * Holds an analysis of one input from a PSBT\n  */\n@@ -25,18 +27,18 @@ struct PSBTInputAnalysis {\n  * Holds the results of AnalyzePSBT (miscellaneous information about a PSBT)\n  */\n struct PSBTAnalysis {\n-    Optional<size_t> estimated_vsize;      //!< Estimated weight of the transaction\n-    Optional<CFeeRate> estimated_feerate;  //!< Estimated feerate (fee / weight) of the transaction\n-    Optional<CAmount> fee;                 //!< Amount of fee being paid by the transaction\n-    std::vector<PSBTInputAnalysis> inputs; //!< More information about the individual inputs of the transaction\n-    PSBTRole next;                         //!< Which of the BIP 174 roles needs to handle the transaction next\n-    std::string error;                     //!< Error message\n+    std::optional<size_t> estimated_vsize;      //!< Estimated weight of the transaction\n+    std::optional<CFeeRate> estimated_feerate;  //!< Estimated feerate (fee / weight) of the transaction\n+    std::optional<CAmount> fee;                 //!< Amount of fee being paid by the transaction\n+    std::vector<PSBTInputAnalysis> inputs;      //!< More information about the individual inputs of the transaction\n+    PSBTRole next;                              //!< Which of the BIP 174 roles needs to handle the transaction next\n+    std::string error;                          //!< Error message\n \n     void SetInvalid(std::string err_msg)\n     {\n-        estimated_vsize = nullopt;\n-        estimated_feerate = nullopt;\n-        fee = nullopt;\n+        estimated_vsize = std::nullopt;\n+        estimated_feerate = std::nullopt;\n+        fee = std::nullopt;\n         inputs.clear();\n         next = PSBTRole::CREATOR;\n         error = err_msg;"
      },
      {
        "sha": "f47e85acebb66f584c9454af2cc30c7d526094c0",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -29,9 +29,9 @@ static TransactionError HandleATMPError(const TxValidationState& state, std::str\n TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n {\n     // BroadcastTransaction can be called by either sendrawtransaction RPC or wallet RPCs.\n-    // node.connman is assigned both before chain clients and before RPC server is accepting calls,\n-    // and reset after chain clients and RPC sever are stopped. node.connman should never be null here.\n-    assert(node.connman);\n+    // node.peerman is assigned both before chain clients and before RPC server is accepting calls,\n+    // and reset after chain clients and RPC sever are stopped. node.peerman should never be null here.\n+    assert(node.peerman);\n     assert(node.mempool);\n     std::promise<void> promise;\n     uint256 hashTx = tx->GetHash();\n@@ -101,7 +101,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         node.mempool->AddUnbroadcastTx(hashTx);\n \n         LOCK(cs_main);\n-        RelayTransaction(hashTx, tx->GetWitnessHash(), *node.connman);\n+        node.peerman->RelayTransaction(hashTx, tx->GetWitnessHash());\n     }\n \n     return TransactionError::OK;"
      },
      {
        "sha": "583c56eabdab5004a6251f0937f1430c812d785d",
        "filename": "src/optional.h",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49e689fa77deb77b5bf6c29a9676b5cc6349acfa/src/optional.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49e689fa77deb77b5bf6c29a9676b5cc6349acfa/src/optional.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/optional.h?ref=49e689fa77deb77b5bf6c29a9676b5cc6349acfa",
        "patch": "@@ -1,20 +0,0 @@\n-// Copyright (c) 2017-2020 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_OPTIONAL_H\n-#define BITCOIN_OPTIONAL_H\n-\n-#include <optional>\n-#include <utility>\n-\n-//! Substitute for C++17 std::optional\n-//! DEPRECATED use std::optional in new code.\n-template <typename T>\n-using Optional = std::optional<T>;\n-\n-//! Substitute for C++17 std::nullopt\n-//! DEPRECATED use std::nullopt in new code.\n-static auto& nullopt = std::nullopt;\n-\n-#endif // BITCOIN_OPTIONAL_H"
      },
      {
        "sha": "96ae39fdb81fa5a28cdb7cc1600b2ba437e60123",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -7,13 +7,14 @@\n \n #include <attributes.h>\n #include <node/transaction.h>\n-#include <optional.h>\n #include <policy/feerate.h>\n #include <primitives/transaction.h>\n #include <pubkey.h>\n #include <script/sign.h>\n #include <script/signingprovider.h>\n \n+#include <optional>\n+\n // Magic bytes\n static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};\n \n@@ -389,7 +390,7 @@ struct PSBTOutput\n /** A version of CTransaction with the PSBT format*/\n struct PartiallySignedTransaction\n {\n-    Optional<CMutableTransaction> tx;\n+    std::optional<CMutableTransaction> tx;\n     std::vector<PSBTInput> inputs;\n     std::vector<PSBTOutput> outputs;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;"
      },
      {
        "sha": "a0260692325e07dd8190b36e76aa052a48d2a56f",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -112,7 +112,7 @@ void TestAddAddressesToSendBook(interfaces::Node& node)\n     ClientModel clientModel(node, &optionsModel);\n     AddWallet(wallet);\n     WalletModel walletModel(interfaces::MakeWallet(wallet), clientModel, platformStyle.get());\n-    RemoveWallet(wallet, nullopt);\n+    RemoveWallet(wallet, std::nullopt);\n     EditAddressDialog editAddressDialog(EditAddressDialog::NewSendingAddress);\n     editAddressDialog.setModel(walletModel.getAddressTableModel());\n "
      },
      {
        "sha": "1107c44dc9fb0cdf1fcff75429b94ac1693c7c6a",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -167,7 +167,7 @@ void TestGUI(interfaces::Node& node)\n     ClientModel clientModel(node, &optionsModel);\n     AddWallet(wallet);\n     WalletModel walletModel(interfaces::MakeWallet(wallet), clientModel, platformStyle.get());\n-    RemoveWallet(wallet, nullopt);\n+    RemoveWallet(wallet, std::nullopt);\n     sendCoinsDialog.setModel(&walletModel);\n     transactionView.setModel(&walletModel);\n "
      },
      {
        "sha": "2f92a321f8ec846973e5e1783c1fdff43b68a38b",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -1828,13 +1828,13 @@ static RPCHelpMan analyzepsbt()\n     }\n     if (!inputs_result.empty()) result.pushKV(\"inputs\", inputs_result);\n \n-    if (psbta.estimated_vsize != nullopt) {\n+    if (psbta.estimated_vsize != std::nullopt) {\n         result.pushKV(\"estimated_vsize\", (int)*psbta.estimated_vsize);\n     }\n-    if (psbta.estimated_feerate != nullopt) {\n+    if (psbta.estimated_feerate != std::nullopt) {\n         result.pushKV(\"estimated_feerate\", ValueFromAmount(psbta.estimated_feerate->GetFeePerK()));\n     }\n-    if (psbta.fee != nullopt) {\n+    if (psbta.fee != std::nullopt) {\n         result.pushKV(\"fee\", ValueFromAmount(*psbta.fee));\n     }\n     result.pushKV(\"next\", PSBTRoleName(psbta.next));"
      },
      {
        "sha": "30399dca5125627d124bc467d04110166242a7b4",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -17,6 +17,7 @@\n #include <util/vector.h>\n \n #include <memory>\n+#include <optional>\n #include <string>\n #include <vector>\n \n@@ -632,7 +633,7 @@ class DescriptorImpl : public Descriptor\n         }\n     }\n \n-    Optional<OutputType> GetOutputType() const override { return nullopt; }\n+    std::optional<OutputType> GetOutputType() const override { return std::nullopt; }\n };\n \n /** A parsed addr(A) descriptor. */\n@@ -646,7 +647,7 @@ class AddressDescriptor final : public DescriptorImpl\n     AddressDescriptor(CTxDestination destination) : DescriptorImpl({}, {}, \"addr\"), m_destination(std::move(destination)) {}\n     bool IsSolvable() const final { return false; }\n \n-    Optional<OutputType> GetOutputType() const override\n+    std::optional<OutputType> GetOutputType() const override\n     {\n         switch (m_destination.index()) {\n             case 1 /* PKHash */:\n@@ -655,7 +656,7 @@ class AddressDescriptor final : public DescriptorImpl\n             case 4 /* WitnessV0KeyHash */:\n             case 5 /* WitnessUnknown */: return OutputType::BECH32;\n             case 0 /* CNoDestination */:\n-            default: return nullopt;\n+            default: return std::nullopt;\n         }\n     }\n     bool IsSingleType() const final { return true; }\n@@ -672,7 +673,7 @@ class RawDescriptor final : public DescriptorImpl\n     RawDescriptor(CScript script) : DescriptorImpl({}, {}, \"raw\"), m_script(std::move(script)) {}\n     bool IsSolvable() const final { return false; }\n \n-    Optional<OutputType> GetOutputType() const override\n+    std::optional<OutputType> GetOutputType() const override\n     {\n         CTxDestination dest;\n         ExtractDestination(m_script, dest);\n@@ -683,7 +684,7 @@ class RawDescriptor final : public DescriptorImpl\n             case 4 /* WitnessV0KeyHash */:\n             case 5 /* WitnessUnknown */: return OutputType::BECH32;\n             case 0 /* CNoDestination */:\n-            default: return nullopt;\n+            default: return std::nullopt;\n         }\n     }\n     bool IsSingleType() const final { return true; }\n@@ -711,7 +712,7 @@ class PKHDescriptor final : public DescriptorImpl\n     }\n public:\n     PKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), {}, \"pkh\") {}\n-    Optional<OutputType> GetOutputType() const override { return OutputType::LEGACY; }\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::LEGACY; }\n     bool IsSingleType() const final { return true; }\n };\n \n@@ -727,7 +728,7 @@ class WPKHDescriptor final : public DescriptorImpl\n     }\n public:\n     WPKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), {}, \"wpkh\") {}\n-    Optional<OutputType> GetOutputType() const override { return OutputType::BECH32; }\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::BECH32; }\n     bool IsSingleType() const final { return true; }\n };\n \n@@ -783,7 +784,7 @@ class SHDescriptor final : public DescriptorImpl\n public:\n     SHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), \"sh\") {}\n \n-    Optional<OutputType> GetOutputType() const override\n+    std::optional<OutputType> GetOutputType() const override\n     {\n         assert(m_subdescriptor_arg);\n         if (m_subdescriptor_arg->GetOutputType() == OutputType::BECH32) return OutputType::P2SH_SEGWIT;\n@@ -799,7 +800,7 @@ class WSHDescriptor final : public DescriptorImpl\n     std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript* script, FlatSigningProvider&) const override { return Vector(GetScriptForDestination(WitnessV0ScriptHash(*script))); }\n public:\n     WSHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), \"wsh\") {}\n-    Optional<OutputType> GetOutputType() const override { return OutputType::BECH32; }\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::BECH32; }\n     bool IsSingleType() const final { return true; }\n };\n "
      },
      {
        "sha": "332ae2f230382f00a7d741f0336d0c26e4b2447f",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -5,12 +5,12 @@\n #ifndef BITCOIN_SCRIPT_DESCRIPTOR_H\n #define BITCOIN_SCRIPT_DESCRIPTOR_H\n \n-#include <optional.h>\n #include <outputtype.h>\n #include <script/script.h>\n #include <script/sign.h>\n #include <script/signingprovider.h>\n \n+#include <optional>\n #include <vector>\n \n using ExtPubKeyMap = std::unordered_map<uint32_t, CExtPubKey>;\n@@ -124,7 +124,7 @@ struct Descriptor {\n     virtual void ExpandPrivate(int pos, const SigningProvider& provider, FlatSigningProvider& out) const = 0;\n \n     /** @return The OutputType of the scriptPubKey(s) produced by this descriptor. Or nullopt if indeterminate (multiple or none) */\n-    virtual Optional<OutputType> GetOutputType() const = 0;\n+    virtual std::optional<OutputType> GetOutputType() const = 0;\n };\n \n /** Parse a `descriptor` string. Included private keys are put in `out`."
      },
      {
        "sha": "fb41e43752cf1bd1f27ba0e6e0d5e1f2df82d3e5",
        "filename": "src/signet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/signet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/signet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -65,7 +65,7 @@ static uint256 ComputeModifiedMerkleRoot(const CMutableTransaction& cb, const CB\n     return ComputeMerkleRoot(std::move(leaves));\n }\n \n-Optional<SignetTxs> SignetTxs::Create(const CBlock& block, const CScript& challenge)\n+std::optional<SignetTxs> SignetTxs::Create(const CBlock& block, const CScript& challenge)\n {\n     CMutableTransaction tx_to_spend;\n     tx_to_spend.nVersion = 0;\n@@ -83,12 +83,12 @@ Optional<SignetTxs> SignetTxs::Create(const CBlock& block, const CScript& challe\n     // responses from block coinbase tx\n \n     // find and delete signet signature\n-    if (block.vtx.empty()) return nullopt; // no coinbase tx in block; invalid\n+    if (block.vtx.empty()) return std::nullopt; // no coinbase tx in block; invalid\n     CMutableTransaction modified_cb(*block.vtx.at(0));\n \n     const int cidx = GetWitnessCommitmentIndex(block);\n     if (cidx == NO_WITNESS_COMMITMENT) {\n-        return nullopt; // require a witness commitment\n+        return std::nullopt; // require a witness commitment\n     }\n \n     CScript& witness_commitment = modified_cb.vout.at(cidx).scriptPubKey;\n@@ -101,9 +101,9 @@ Optional<SignetTxs> SignetTxs::Create(const CBlock& block, const CScript& challe\n             VectorReader v(SER_NETWORK, INIT_PROTO_VERSION, signet_solution, 0);\n             v >> tx_spending.vin[0].scriptSig;\n             v >> tx_spending.vin[0].scriptWitness.stack;\n-            if (!v.empty()) return nullopt; // extraneous data encountered\n+            if (!v.empty()) return std::nullopt; // extraneous data encountered\n         } catch (const std::exception&) {\n-            return nullopt; // parsing error\n+            return std::nullopt; // parsing error\n         }\n     }\n     uint256 signet_merkle = ComputeModifiedMerkleRoot(modified_cb, block);\n@@ -129,7 +129,7 @@ bool CheckSignetBlockSolution(const CBlock& block, const Consensus::Params& cons\n     }\n \n     const CScript challenge(consensusParams.signet_challenge.begin(), consensusParams.signet_challenge.end());\n-    const Optional<SignetTxs> signet_txs = SignetTxs::Create(block, challenge);\n+    const std::optional<SignetTxs> signet_txs = SignetTxs::Create(block, challenge);\n \n     if (!signet_txs) {\n         LogPrint(BCLog::VALIDATION, \"CheckSignetBlockSolution: Errors in block (block solution parse failure)\\n\");"
      },
      {
        "sha": "f876488c0ae8ff5227b25292c4a2180d4325f64e",
        "filename": "src/signet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/signet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/signet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.h?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -9,7 +9,7 @@\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n \n-#include <optional.h>\n+#include <optional>\n \n /**\n  * Extract signature and check whether a block has a valid solution\n@@ -28,7 +28,7 @@ class SignetTxs {\n     SignetTxs(const T1& to_spend, const T2& to_sign) : m_to_spend{to_spend}, m_to_sign{to_sign} { }\n \n public:\n-    static Optional<SignetTxs> Create(const CBlock& block, const CScript& challenge);\n+    static std::optional<SignetTxs> Create(const CBlock& block, const CScript& challenge);\n \n     const CTransaction m_to_spend;\n     const CTransaction m_to_sign;"
      },
      {
        "sha": "2651e464308619858696ac81f46cfcdaaaf9178b",
        "filename": "src/test/bech32_tests.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 7,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/bech32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/bech32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bech32_tests.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -10,7 +10,7 @@\n \n BOOST_FIXTURE_TEST_SUITE(bech32_tests, BasicTestingSetup)\n \n-BOOST_AUTO_TEST_CASE(bip173_testvectors_valid)\n+BOOST_AUTO_TEST_CASE(bech32_testvectors_valid)\n {\n     static const std::string CASES[] = {\n         \"A12UEL5L\",\n@@ -22,15 +22,35 @@ BOOST_AUTO_TEST_CASE(bip173_testvectors_valid)\n         \"?1ezyfcl\",\n     };\n     for (const std::string& str : CASES) {\n-        auto ret = bech32::Decode(str);\n-        BOOST_CHECK(!ret.first.empty());\n-        std::string recode = bech32::Encode(ret.first, ret.second);\n+        const auto dec = bech32::Decode(str);\n+        BOOST_CHECK(dec.encoding == bech32::Encoding::BECH32);\n+        std::string recode = bech32::Encode(bech32::Encoding::BECH32, dec.hrp, dec.data);\n         BOOST_CHECK(!recode.empty());\n         BOOST_CHECK(CaseInsensitiveEqual(str, recode));\n     }\n }\n \n-BOOST_AUTO_TEST_CASE(bip173_testvectors_invalid)\n+BOOST_AUTO_TEST_CASE(bech32m_testvectors_valid)\n+{\n+    static const std::string CASES[] = {\n+        \"A1LQFN3A\",\n+        \"a1lqfn3a\",\n+        \"an83characterlonghumanreadablepartthatcontainsthetheexcludedcharactersbioandnumber11sg7hg6\",\n+        \"abcdef1l7aum6echk45nj3s0wdvt2fg8x9yrzpqzd3ryx\",\n+        \"11llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllludsr8\",\n+        \"split1checkupstagehandshakeupstreamerranterredcaperredlc445v\",\n+        \"?1v759aa\"\n+    };\n+    for (const std::string& str : CASES) {\n+        const auto dec = bech32::Decode(str);\n+        BOOST_CHECK(dec.encoding == bech32::Encoding::BECH32M);\n+        std::string recode = bech32::Encode(bech32::Encoding::BECH32M, dec.hrp, dec.data);\n+        BOOST_CHECK(!recode.empty());\n+        BOOST_CHECK(CaseInsensitiveEqual(str, recode));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(bech32_testvectors_invalid)\n {\n     static const std::string CASES[] = {\n         \" 1nwldj5\",\n@@ -49,8 +69,32 @@ BOOST_AUTO_TEST_CASE(bip173_testvectors_invalid)\n         \"A12uEL5L\",\n     };\n     for (const std::string& str : CASES) {\n-        auto ret = bech32::Decode(str);\n-        BOOST_CHECK(ret.first.empty());\n+        const auto dec = bech32::Decode(str);\n+        BOOST_CHECK(dec.encoding == bech32::Encoding::INVALID);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(bech32m_testvectors_invalid)\n+{\n+    static const std::string CASES[] = {\n+        \" 1xj0phk\",\n+        \"\\x7f\"\"1g6xzxy\",\n+        \"\\x80\"\"1vctc34\",\n+        \"an84characterslonghumanreadablepartthatcontainsthetheexcludedcharactersbioandnumber11d6pts4\",\n+        \"qyrz8wqd2c9m\",\n+        \"1qyrz8wqd2c9m\",\n+        \"y1b0jsk6g\",\n+        \"lt1igcx5c0\",\n+        \"in1muywd\",\n+        \"mm1crxm3i\",\n+        \"au1s5cgom\",\n+        \"M1VUXWEZ\",\n+        \"16plkw9\",\n+        \"1p2gdwpf\"\n+    };\n+    for (const std::string& str : CASES) {\n+        const auto dec = bech32::Decode(str);\n+        BOOST_CHECK(dec.encoding == bech32::Encoding::INVALID);\n     }\n }\n "
      },
      {
        "sha": "abe07dad248dbb604e692dc816fab07c45cb55a9",
        "filename": "src/test/data/key_io_invalid.json",
        "status": "modified",
        "additions": 88,
        "deletions": 58,
        "changes": 146,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/data/key_io_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/data/key_io_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/key_io_invalid.json?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -6,177 +6,207 @@\n         \"x\"\n     ],\n     [\n-        \"37qgekLpCCHrQuSjvX3fs496FWTGsHFHizjJAs6NPcR47aefnnCWECAhHV6E3g4YN7u7Yuwod5Y\"\n+        \"2v7k5Bb8Lr1MMgTgW6HAf5YHXi6BzpPjHpQ4srD4RSwHYpzXKiXmLAgiLhkXvp3JF5v7nq45EWr\"\n     ],\n     [\n-        \"dzb7VV1Ui55BARxv7ATxAtCUeJsANKovDGWFVgpTbhq9gvPqP3yv\"\n+        \"RAZzCGtMbiUgMiiyrZySrSpdfnQReFXA3r\"\n     ],\n     [\n-        \"MuNu7ZAEDFiHthiunm7dPjwKqrVNCM3mAz6rP9zFveQu14YA8CxExSJTHcVP9DErn6u84E6Ej7S\"\n+        \"NYamy7tcPQTzoU5iyQojD3sqhiz7zxkvn8\"\n     ],\n     [\n-        \"rPpQpYknyNQ5AEHuY6H8ijJJrYc2nDKKk9jjmKEXsWzyAQcFGpDLU2Zvsmoi8JLR7hAwoy3RQWf\"\n+        \"geaFG555Ex5nyRf7JjW6Pj2GwZA8KYxtJJLbr1eZhVW75STbYBZeRszy3wg4pkKdF4ez9J4wQiz\"\n     ],\n     [\n-        \"4Uc3FmN6NQ6zLBK5QQBXRBUREaaHwCZYsGCueHauuDmJpZKn6jkEskMB2Zi2CNgtb5r6epWEFfUJq\"\n+        \"2Cxmid3c2XQ2zvQ8SA1ha2TKqvqbJS9XFmXRsCneBS3Po7Qqb65z5zNdsoF9AfieXFcpoVPmkmfa\"\n     ],\n     [\n-        \"7aQgR5DFQ25vyXmqZAWmnVCjL3PkBcdVkBUpjrjMTcghHx3E8wb\"\n+        \"gaJ7UVge2njVg9tFTetJrtHgruMm7aQDiSAxfHrVEgzK8N2ooagDVmDkdph434xzc4K96Gjyxcs\"\n     ],\n     [\n-        \"17QpPprjeg69fW1DV8DcYYCKvWjYhXvWkov6MJ1iTTvMFj6weAqW7wybZeH57WTNxXVCRH4veVs\"\n+        \"5JN5BEVQPZ3tAiatz1RGXkrJuE3EC6bervMaPb38wTNgEuZCeqp\"\n     ],\n     [\n-        \"KxuACDviz8Xvpn1xAh9MfopySZNuyajYMZWz16Dv2mHHryznWUp3\"\n+        \"3TnFbyUtBRS5rE1KTW81qLVspjJNaB3uu6uuvLjxhZo2DB6PCGh\"\n     ],\n     [\n-        \"7nK3GSmqdXJQtdohvGfJ7KsSmn3TmGqExug49583bDAL91pVSGq5xS9SHoAYL3Wv3ijKTit65th\"\n+        \"7UgSZGaMaTc4d2mdEgcGBFiMeS6eMsithGUqvBsKTQdGzD7XQDbMEYo3gojdbXEPbUdFF3CQoK72f\"\n     ],\n     [\n-        \"cTivdBmq7bay3RFGEBBuNfMh2P1pDCgRYN2Wbxmgwr4ki3jNUL2va\"\n+        \"9261wfqQqruNDnBDhbbb4tN9oKA1KpRFHeoYeufyJApVGixyAG4V\"\n     ],\n     [\n-        \"gjMV4vjNjyMrna4fsAr8bWxAbwtmMUBXJS3zL4NJt5qjozpbQLmAfK1uA3CquSqsZQMpoD1g2nk\"\n+        \"cS824CTUh18scFmYuqt6BgxuRhdR4dEEnCHs3fzBbcyQgbfasHbw\"\n     ],\n     [\n-        \"emXm1naBMoVzPjbk7xpeTVMFy4oDEe25UmoyGgKEB1gGWsK8kRGs\"\n+        \"tc1q0ywf7wkz6t580n3yemd3ucfw8jxn93tpc6wskt\"\n     ],\n     [\n-        \"7VThQnNRj1o3Zyvc7XHPRrjDf8j2oivPTeDXnRPYWeYGE4pXeRJDZgf28ppti5hsHWXS2GSobdqyo\"\n+        \"bt1pxeeuh96wpm5c6u3kavts2qgwlv6y8um7u7ga6ltlwrhrv7w9vers8lgt3k\"\n     ],\n     [\n-        \"1G9u6oCVCPh2o8m3t55ACiYvG1y5BHewUkDSdiQarDcYXXhFHYdzMdYfUAhfxn5vNZBwpgUNpso\"\n+        \"tb130lvl2lyugsk2tf3zhwcjjv39dmwt2tt7ytqaexy8edwcuwks6p5scll5kz\"\n     ],\n     [\n-        \"31QQ7ZMLkScDiB4VyZjuptr7AEc9j1SjstF7pRoLhHTGkW4Q2y9XELobQmhhWxeRvqcukGd1XCq\"\n+        \"bcrt1rhsveeudk\"\n     ],\n     [\n-        \"DHqKSnpxa8ZdQyH8keAhvLTrfkyBMQxqngcQA5N8LQ9KVt25kmGN\"\n+        \"bc10rmfwl8nxdweeyc4sf89t0tn9fv9w6qpyzsnl2r4k48vjqh03qas9asdje0rlr0phru0wqw0p\"\n     ],\n     [\n-        \"2LUHcJPbwLCy9GLH1qXmfmAwvadWw4bp4PCpDfduLqV17s6iDcy1imUwhQJhAoNoN1XNmweiJP4i\"\n+        \"tb1qjqnfsuatr54e957xzg9sqk7yqcry9lns\"\n     ],\n     [\n-        \"7USRzBXAnmck8fX9HmW7RAb4qt92VFX6soCnts9s74wxm4gguVhtG5of8fZGbNPJA83irHVY6bCos\"\n+        \"bcrt1q8p08mv8echkf3es027u4cdswxlylm3th76ls8v6y4zy4vwsavngpr4e4td\"\n     ],\n     [\n-        \"1DGezo7BfVebZxAbNT3XGujdeHyNNBF3vnficYoTSp4PfK2QaML9bHzAMxke3wdKdHYWmsMTJVu\"\n+        \"BC1QNC2H66VLWTWTW52DP0FYUSNU3QQG5VT4V\"\n     ],\n     [\n-        \"2D12DqDZKwCxxkzs1ZATJWvgJGhQ4cFi3WrizQ5zLAyhN5HxuAJ1yMYaJp8GuYsTLLxTAz6otCfb\"\n+        \"tb1qgk665m2auw09rc7pqyf7aulcuhmatz9xqtr5mxew7zuysacaascqs9v0vn\"\n     ],\n     [\n-        \"8AFJzuTujXjw1Z6M3fWhQ1ujDW7zsV4ePeVjVo7D1egERqSW9nZ\"\n+        \"bcrt17CAPP7\"\n     ],\n     [\n-        \"163Q17qLbTCue8YY3AvjpUhotuaodLm2uqMhpYirsKjVqnxJRWTEoywMVY3NbBAHuhAJ2cF9GAZ\"\n+        \"bc1qxmf2d6aerjzam3rur0zufqxqnyqfts5u302s7x\"\n     ],\n     [\n-        \"2MnmgiRH4eGLyLc9eAqStzk7dFgBjFtUCtu\"\n+        \"tb1qn8x5dnzpexq7nnvrvnhwr9c3wkakpcyu9wwsjzq9pstkwg0t6qhs4l3rv6\"\n     ],\n     [\n-        \"461QQ2sYWxU7H2PV4oBwJGNch8XVTYYbZxU\"\n+        \"BCRT1Q397G2RNVYRL5LK07CE8NCKHVKP8Z4SC9U0MVH9\"\n     ],\n     [\n-        \"2UCtv53VttmQYkVU4VMtXB31REvQg4ABzs41AEKZ8UcB7DAfVzdkV9JDErwGwyj5AUHLkmgZeobs\"\n+        \"bc1pgxwyajq0gdn389f69uwn2fw9q0z5c9s063j5dgkdd23ajaud4hpsercr9h\"\n     ],\n     [\n-        \"cSNjAsnhgtiFMi6MtfvgscMB2Cbhn2v1FUYfviJ1CdjfidvmeW6mn\"\n+        \"tb1z6mnmp5k542l6yk4ul0mp4rq3yvz44lfm\"\n     ],\n     [\n-        \"gmsow2Y6EWAFDFE1CE4Hd3Tpu2BvfmBfG1SXsuRARbnt1WjkZnFh1qGTiptWWbjsq2Q6qvpgJVj\"\n+        \"bcrt17capp7\"\n     ],\n     [\n-        \"nksUKSkzS76v8EsSgozXGMoQFiCoCHzCVajFKAXqzK5on9ZJYVHMD5CKwgmX3S3c7M1U3xabUny\"\n+        \"2D2bqvKseKHdoKjCNvjVULUgmxHu9hjKGwDbPRjTRH59tsHNLeyKwq3vyVBbo9LByY9wiapqjwFY\"\n     ],\n     [\n-        \"L3favK1UzFGgdzYBF2oBT5tbayCo4vtVBLJhg2iYuMeePxWG8SQc\"\n+        \"2SSjAim4wZpeQRe5zTj1qqS6Li9ttJDaZ3ze\"\n     ],\n     [\n-        \"7VxLxGGtYT6N99GdEfi6xz56xdQ8nP2dG1CavuXx7Rf2PrvNMTBNevjkfgs9JmkcGm6EXpj8ipyPZ\"\n+        \"mi9H6MjLwXxy9kxe1x4ToxyLRBsmcZxgVi\"\n     ],\n     [\n-        \"2mbZwFXF6cxShaCo2czTRB62WTx9LxhTtpP\"\n+        \"VciXoxEitcn88jy197J9n9cpJ1pZahzU3SyWUiHqLgcfjttLEEJz\"\n     ],\n     [\n-        \"dB7cwYdcPSgiyAwKWL3JwCVwSk6epU2txw\"\n+        \"KppmwADGoExPT9Eq5hjRWpWFDbzJyfzHFgsfxBiDHNpVBgWPRNuy\"\n     ],\n     [\n-        \"HPhFUhUAh8ZQQisH8QQWafAxtQYju3SFTX\"\n+        \"TN7EQXMxKffzvHo54yHHu9R4ks9f5gWBW3MMVf5k72zAqrgVK9ys\"\n     ],\n     [\n-        \"4ctAH6AkHzq5ioiM1m9T3E2hiYEev5mTsB\"\n+        \"92dbrMEYzP5dD5UhQ6maNkCQ4GLG42BM4Gc6XKZzSSMSfosfkkcB\"\n     ],\n     [\n-        \"Hn1uFi4dNexWrqARpjMqgT6cX1UsNPuV3cHdGg9ExyXw8HTKadbktRDtdeVmY3M1BxJStiL4vjJ\"\n+        \"J7VQxPxyzuWEkRstQWpCz2AgysEz1APgnWCEQrFvkN3umAnCrhQF\"\n     ],\n     [\n-        \"Sq3fDbvutABmnAHHExJDgPLQn44KnNC7UsXuT7KZecpaYDMU9Txs\"\n+        \"tc1qymllj6c96v5qj2504y27ldtner6eh8ldx38t83\"\n     ],\n     [\n-        \"6TqWyrqdgUEYDQU1aChMuFMMEimHX44qHFzCUgGfqxGgZNMUVWJ\"\n+        \"bt1flep4g\"\n     ],\n     [\n-        \"giqJo7oWqFxNKWyrgcBxAVHXnjJ1t6cGoEffce5Y1y7u649Noj5wJ4mmiUAKEVVrYAGg2KPB3Y4\"\n+        \"tb13c553hwygcgj48qwmr9f8q0hgdcfklyaye5sxzcpcjnmxv4z506xs90tchn\"\n     ],\n     [\n-        \"cNzHY5e8vcmM3QVJUcjCyiKMYfeYvyueq5qCMV3kqcySoLyGLYUK\"\n+        \"bcrt1tyddyu\"\n     ],\n     [\n-        \"37uTe568EYc9WLoHEd9jXEvUiWbq5LFLscNyqvAzLU5vBArUJA6eydkLmnMwJDjkL5kXc2VK7ig\"\n+        \"bc10qssq2mknjqf0glwe2f3587wc4jysvs3f8s6chysae6hcl6fxzdm4wxyyscrl5k9f5qmnf05a\"\n     ],\n     [\n-        \"EsYbG4tWWWY45G31nox838qNdzksbPySWc\"\n+        \"tb1q425lmgvxdgtyl2m6xuu2pc354y4fvgg8\"\n     ],\n     [\n-        \"nbuzhfwMoNzA3PaFnyLcRxE9bTJPDkjZ6Rf6Y6o2ckXZfzZzXBT\"\n+        \"bcrt1q9wp8e5d2u3u4g0pll0cy7smeeuqezdun9xl439n3p2gg4fvgfvk3hu52hj\"\n     ],\n     [\n-        \"cQN9PoxZeCWK1x56xnz6QYAsvR11XAce3Ehp3gMUdfSQ53Y2mPzx\"\n+        \"bc1qrz5acazpue8vl4zsaxn8fxtmeuqmyjkq3\"\n     ],\n     [\n-        \"1Gm3N3rkef6iMbx4voBzaxtXcmmiMTqZPhcuAepRzYUJQW4qRpEnHvMojzof42hjFRf8PE2jPde\"\n+        \"tb1qkeuglpgmnex9tv3fr7htzfrh3rwrk23r52rx9halxzmv9fr85lwq0fwhmp\"\n     ],\n     [\n-        \"2TAq2tuN6x6m233bpT7yqdYQPELdTDJn1eU\"\n+        \"bcrt1qd0t2wrhl7s57z99rsyaekpq0dyjcQRSSmz80r4\"\n     ],\n     [\n-        \"ntEtnnGhqPii4joABvBtSEJG6BxjT2tUZqE8PcVYgk3RHpgxgHDCQxNbLJf7ardf1dDk2oCQ7Cf\"\n+        \"BC1QXLFDUCGX90T3E53PQCNKJ2PK25MSF3VLPMVY6T\"\n     ],\n     [\n-        \"Ky1YjoZNgQ196HJV3HpdkecfhRBmRZdMJk89Hi5KGfpfPwS2bUbfd\"\n+        \"tb1qmycg4zszgnk34vaurx3cu8wpvteg9h40yq6cp52gt26gjel03t3su3x3xu\"\n     ],\n     [\n-        \"2A1q1YsMZowabbvta7kTy2Fd6qN4r5ZCeG3qLpvZBMzCixMUdkN2Y4dHB1wPsZAeVXUGD83MfRED\"\n+        \"bcrt1q9hy58r4fnuxqzdqndpmq9pptc9nt2dw3rczf5e\"\n     ],\n     [\n-        \"tc1qw508d6qejxtdg4y5r3zarvary0c5xw7kg3g4ty\"\n+        \"BC1PA7682NAY6JQSLUWAJYTC0ERWTMW7A4RPWLNTUS32LCXWLHVKKKTQ2UL8CG\"\n     ],\n     [\n-        \"bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t5\"\n+        \"tb1z850dpxnwz2fzae5h2myatj4yvu6rq5xq\"\n     ],\n     [\n-        \"BC13W508D6QEJXTDG4Y5R3ZARVARY0C5XW7KN40WF2\"\n+        \"bcrt1sp525pzjsmpqvcrawjreww36e9keg876skjvpwt\"\n     ],\n     [\n-        \"bc1rw5uspcuh\"\n+        \"xcAvW5jurCpzSpLxBKEhCewCgwwuGhqJnC\"\n     ],\n     [\n-        \"bc10w508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7kw5rljs90\"\n+        \"2Cvv8yp9kXbQt8EKh6Yma95yJ1uwYF9YKXuVhGJyu3dHGVsb2AVpTC62TFACZZ3KDNrALxR2CVNs\"\n     ],\n     [\n-        \"BC1QR508D6QEJXTDG4Y5R3ZARVARYV98GJ9P\"\n+        \"niUuL46hCuEVvkAzZKHvD746qbmLmzip9Pv3F6UZV14JxzEXBnTkVxCT4URapChJG6qAEgsZs6G\"\n     ],\n     [\n-        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sL5k7\"\n+        \"2UHHgGfiipzvB8Eumnmvq6SowvrMJimjT3NwwG1839XEiUfwtpSdkUrseNsQuagXv21ce7aZu6yo\"\n     ],\n     [\n-        \"bc1zw508d6qejxtdg4y5r3zarvaryvqyzf3du\"\n+        \"8u9djKu4u6o3bsgeR4BKNnLK3akpo64FYzDAmA9239wKeshgF97\"\n     ],\n     [\n-        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3pjxtptv\"\n+        \"TC1QPAARXSLVMXHVRR0474LZXQYZWLGFZYPSFVL9E4\"\n     ],\n     [\n-        \"bc1gmk9yu\"\n+        \"bt1pakek0n2267t9yaksxaczgr2syhv9y3xkx0wnsdwchfa6xkmjtvuqg3kgyr\"\n+    ],\n+    [\n+        \"tb13h83rtwq62udrhwpn87uely7cyxcjrj0azz6a4r3n9s87x5uj98ys6ufp83\"\n+    ],\n+    [\n+        \"bcrt1rk5vw5qf2\"\n+    ],\n+    [\n+        \"bc10d3rmtg62h747en5j6fju5g5qyvsransrkty6ghh96pu647wumctejlsngh9pf26cysrys2x2\"\n+    ],\n+    [\n+        \"tb1qajuy2cdwqgmrzc7la85al5cwcq374tsp\"\n+    ],\n+    [\n+        \"bcrt1q3udxvj6x20chqh723mn064mzz65yr56ef00xk8czvu3jnx04ydapzk02s5\"\n+    ],\n+    [\n+        \"bc1qule2szwzyaq4qy0s3aa4mauucyqt6fewe\"\n+    ],\n+    [\n+        \"tb1ql0qny5vg9gh5tyzke6dw36px5ulkrp24x53x0pl2t5lpwrtejw3s2seej2\"\n+    ],\n+    [\n+        \"bcrt17CAPP7\"\n+    ],\n+    [\n+        \"bc1qtvm6davyf725wfedc2d5mrgfewqgcrce8gjrpl\"\n+    ],\n+    [\n+        \"tb1q5acjgtqrrw3an0dzavxxxzlex8k7aukjzjk9v2u4rmfdqxjphcyq7ge97e\"\n     ]\n ]"
      },
      {
        "sha": "5dee44c04b684f38d98cdcd4a5a7739cf1687d25",
        "filename": "src/test/data/key_io_valid.json",
        "status": "modified",
        "additions": 324,
        "deletions": 247,
        "changes": 571,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/data/key_io_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/data/key_io_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/key_io_valid.json?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -1,533 +1,610 @@\n [\n     [\n-        \"1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i\",\n-        \"76a91465a16059864a2fdbc7c99a4723a8395bc6f188eb88ac\",\n+        \"1BShJZ8A5q53oJJfMJoEF1gfZCWdZqZwwD\",\n+        \"76a914728d4cc27d19707b0197cfcd7c412d43287864b588ac\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"chain\": \"main\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"3CMNFxN1oHBc4R1EpboAL5yzHGgE611Xou\",\n-        \"a91474f209f6ea907e2ea48f74fae05782ae8a66525787\",\n+        \"3L1YkZjdeNSqaZcNKZFXQfyokx3zVYm7r6\",\n+        \"a914c8f37c3cc21561296ad81f4bec6b5de10ebc185187\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"chain\": \"main\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs\",\n-        \"76a91453c0307d6851aa0ce7825ba883c6bd9ad242b48688ac\",\n+        \"mhJuoGLgnJC8gdBgBzEigsoyG4omQXejPT\",\n+        \"76a91413a92d1998e081354d36c13ce0c9dc04b865d40a88ac\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs\",\n-        \"76a91453c0307d6851aa0ce7825ba883c6bd9ad242b48688ac\",\n+        \"2N5VpzKEuYvZJbmg6eUNGnfrrD1ir92FWGu\",\n+        \"a91486648cc2faaf05660e72c04c7a837bcc3e986f1787\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"regtest\"\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"2N2JD6wb56AfK4tfmM6PwdVmoYk2dCKf4Br\",\n-        \"a9146349a418fc4578d10a372b54b45c280cc8c4382f87\",\n+        \"mtQueCtmAnP3E4aBHXCiFNEQAuPaLMuQNy\",\n+        \"76a9148d74ecd86c845baf9c6d4484d2d00e731b79e34788ac\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"chain\": \"signet\",\n+            \"isPrivkey\": false\n+        }\n+    ],\n+    [\n+        \"2NEvWRTHjh89gV52fkperFtwzoFWQiQmiCh\",\n+        \"a914edc895152c67ccff0ba620bcc373b789ec68266f87\",\n+        {\n+            \"chain\": \"signet\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"5Kd3NBUAdUnhyzenEwVLy9pBKxSwXvE9FMPyR4UKZvpe6E3AgLr\",\n-        \"eddbdc1168f1daeadbd3e44c1e3f8f5a284c2029f78ad26af98583a499de5b19\",\n+        \"mngdx94qJFhSf7A7SAEgQSC9fQJuapujJp\",\n+        \"76a9144e9dba545455a80ce94c343d1cac9dec62cbf22288ac\",\n         {\n+            \"chain\": \"regtest\",\n+            \"isPrivkey\": false\n+        }\n+    ],\n+    [\n+        \"2NBzRN3pV56k3JUvSHifaHyzjGHv7ZS9FZZ\",\n+        \"a914cd9da5642451273e5b6d088854cc1fad4a8d442187\",\n+        {\n+            \"chain\": \"regtest\",\n+            \"isPrivkey\": false\n+        }\n+    ],\n+    [\n+        \"5KcrFZvJ2p4dM6QVUPu53cKXcCfozA1PJLHm1mNAxkDYhgThLu4\",\n+        \"ed6c796e2f62377410766214f55aa81ac9a6590ad7ed57c509c983bf648409ac\",\n+        {\n+            \"chain\": \"main\",\n             \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"Kz6UJmQACJmLtaQj5A3JAge4kVTNQ8gbvXuwbmCj7bsaabudb3RD\",\n-        \"55c9bccb9ed68446d1b75273bbce89d7fe013a8acd1625514420fb2aca1a21c4\",\n+        \"L195WBrf2G3nCnun4CLxrb8XKk9LbCqH43THh4n4QrL5SzRzpq9j\",\n+        \"74f76c106e38d20514a99a86e4fe3bb28319e7dd2ad21dbc170cbb516a5358fa\",\n         {\n+            \"chain\": \"main\",\n             \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"9213qJab2HNEpMpYNBa7wHGFKKbkDn24jpANDs2huN3yi4J11ko\",\n-        \"36cb93b9ab1bdabf7fb9f2c04f1b9cc879933530ae7842398eef5a63a56800c2\",\n+        \"92z6HnMQR4tWqjfVA3UaUN5EuUMgoVMdCa5rZFYZfmgyD7wxYCw\",\n+        \"b8511e1d74549e305517d48a1d394d1be2cfa5d0f3c0d83f9f450316ffa01276\",\n         {\n+            \"chain\": \"test\",\n             \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"9213qJab2HNEpMpYNBa7wHGFKKbkDn24jpANDs2huN3yi4J11ko\",\n-        \"36cb93b9ab1bdabf7fb9f2c04f1b9cc879933530ae7842398eef5a63a56800c2\",\n+        \"cTPnaF52x4w4Tq6afPxRHux3wbYb86thS7S45A7r3oZc1AHTQ6Qm\",\n+        \"ad68c48d337181da125de9061933ececcdf7d917631af7d34f7e38082bff9a11\",\n         {\n+            \"chain\": \"test\",\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true\n+        }\n+    ],\n+    [\n+        \"924U35yFcYkxe2JXGmuhSRVaShGyhRDZx1ysPmw1sAHuszGMoxq\",\n+        \"3e8dfaf78d4f02b11d0b645648a4f3080d71d0d068979c47f7255c9a29eee01d\",\n+        {\n+            \"chain\": \"signet\",\n             \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"regtest\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"cTpB4YiyKiBcPxnefsDpbnDxFDffjqJob8wGCEDXxgQ7zQoMXJdH\",\n-        \"b9f4892c9e8282028fea1d2667c4dc5213564d41fc5783896a0d843fc15089f3\",\n+        \"cRy1qCf2LUesGPQagTkYwk2V3PyN2KCPKgxeg6k6KoJPzH7nrVjw\",\n+        \"82d4187690d6b59bcffda27dae52f2ecb87313cfc0904e0b674a27d906a65fde\",\n         {\n+            \"chain\": \"signet\",\n             \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"cTpB4YiyKiBcPxnefsDpbnDxFDffjqJob8wGCEDXxgQ7zQoMXJdH\",\n-        \"b9f4892c9e8282028fea1d2667c4dc5213564d41fc5783896a0d843fc15089f3\",\n+        \"932NTcHK35Apf2C3K9Zv1ZdeZEmB1x7ZT2Ju3SjoEY6pUgUpT7H\",\n+        \"bd7dba24df9e003e145ae9b4862776413a0bb6fa5b4e42753397f2d9536e58a9\",\n         {\n-            \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"regtest\"\n+            \"chain\": \"regtest\",\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"1Ax4gZtb7gAit2TivwejZHYtNNLT18PUXJ\",\n-        \"76a9146d23156cbbdcc82a5a47eee4c2c7c583c18b6bf488ac\",\n+        \"cNa75orYQ2oos52zCnMaS5PG6XbNZKc5LpGxTHacrxwWeX4WAK3E\",\n+        \"1d87e3c58b08766fea03598380ec8d59f8c88d5392bf683ab1088bd4caf073ee\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"chain\": \"regtest\",\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"3QjYXhTkvuj8qPaXHTTWb5wjXhdsLAAWVy\",\n-        \"a914fcc5460dd6e2487c7d75b1963625da0e8f4c597587\",\n+        \"bc1q5cuatynjmk4szh40mmunszfzh7zrc5xm9w8ccy\",\n+        \"0014a639d59272ddab015eafdef9380922bf843c50db\",\n         {\n+            \"chain\": \"main\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"n3ZddxzLvAY9o7184TB4c6FJasAybsw4HZ\",\n-        \"76a914f1d470f9b02370fdec2e6b708b08ac431bf7a5f788ac\",\n+        \"bc1qkw7lz3ahms6e0ajv27mzh7g62tchjpmve4afc29u7w49tddydy2syv0087\",\n+        \"0020b3bdf147b7dc3597f64c57b62bf91a52f179076ccd7a9c28bcf3aa55b5a46915\",\n         {\n+            \"chain\": \"main\",\n             \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"2NBFNJTktNa7GZusGbDbGKRZTxdK9VVez3n\",\n-        \"a914c579342c2c4c9220205e2cdc285617040c924a0a87\",\n+        \"bc1p5rgvqejqh9dh37t9g94dd9cm8vtqns7dndgj423egwggsggcdzmsspvr7j\",\n+        \"5120a0d0c06640b95b78f965416ad6971b3b1609c3cd9b512aaa39439088211868b7\",\n         {\n+            \"chain\": \"main\",\n             \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"5K494XZwps2bGyeL71pWid4noiSNA2cfCibrvRWqcHSptoFn7rc\",\n-        \"a326b95ebae30164217d7a7f57d72ab2b54e3be64928a19da0210b9568d4015e\",\n+        \"bc1zr4pq63udck\",\n+        \"52021d42\",\n         {\n-            \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"chain\": \"main\",\n+            \"isPrivkey\": false,\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"L1RrrnXkcKut5DEMwtDthjwRcTTwED36thyL1DebVrKuwvohjMNi\",\n-        \"7d998b45c219a1e38e99e7cbd312ef67f77a455a9b50c730c27f02c6f730dfb4\",\n+        \"tb1q74fxwnvhsue0l8wremgq66xzvn48jlc5zthsvz\",\n+        \"0014f552674d978732ff9dc3ced00d68c264ea797f14\",\n         {\n-            \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false,\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"93DVKyFYwSN6wEo3E2fCrFPUp17FtrtNi2Lf7n4G3garFb16CRj\",\n-        \"d6bca256b5abc5602ec2e1c121a08b0da2556587430bcf7e1898af2224885203\",\n+        \"tb1qpt7cqgq8ukv92dcraun9c3n0s3aswrt62vtv8nqmkfpa2tjfghesv9ln74\",\n+        \"00200afd802007e598553703ef265c466f847b070d7a5316c3cc1bb243d52e4945f3\",\n         {\n-            \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false,\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"cTDVKtMGVYWTHCb1AFjmVbEbWjvKpKqKgMaR3QJxToMSQAhmCeTN\",\n-        \"a81ca4e8f90181ec4b61b6a7eb998af17b2cb04de8a03b504b9e34c4c61db7d9\",\n+        \"tb1ph9v3e8nxct57hknlkhkz75p5pnxnkn05cw8ewpxu6tek56g29xgqydzfu7\",\n+        \"5120b9591c9e66c2e9ebda7fb5ec2f50340ccd3b4df4c38f9704dcd2f36a690a2990\",\n         {\n-            \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false,\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"1C5bSj1iEGUgSTbziymG7Cn18ENQuT36vv\",\n-        \"76a9147987ccaa53d02c8873487ef919677cd3db7a691288ac\",\n+        \"tb1ray6e8gxfx49ers6c4c70l3c8lsxtcmlx\",\n+        \"5310e93593a0c9354b91c358ae3cffc707fc\",\n         {\n+            \"chain\": \"test\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"3AnNxabYGoTxYiTEZwFEnerUoeFXK2Zoks\",\n-        \"a91463bcc565f9e68ee0189dd5cc67f1b0e5f02f45cb87\",\n+        \"tb1q0sqzfp3zj42u0perxr6jahhu4y03uw4dypk6sc\",\n+        \"00147c002486229555c7872330f52edefca91f1e3aad\",\n         {\n+            \"chain\": \"signet\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"n3LnJXCqbPjghuVs8ph9CYsAe4Sh4j97wk\",\n-        \"76a914ef66444b5b17f14e8fae6e7e19b045a78c54fd7988ac\",\n+        \"tb1q9jv4qnawnuevqaeadn47gkq05ev78m4qg3zqejykdr9u0cm7yutq6gu5dj\",\n+        \"00202c99504fae9f32c0773d6cebe4580fa659e3eea044440cc89668cbc7e37e2716\",\n         {\n+            \"chain\": \"signet\",\n             \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"2NB72XtkjpnATMggui83aEtPawyyKvnbX2o\",\n-        \"a914c3e55fceceaa4391ed2a9677f4a4d34eacd021a087\",\n+        \"tb1pxqf7d825wjtcftj7uep8w24jq3tz8vudfaqj20rns8ahqya56gcs92eqtu\",\n+        \"51203013e69d54749784ae5ee642772ab2045623b38d4f41253c7381fb7013b4d231\",\n         {\n+            \"chain\": \"signet\",\n             \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"5KaBW9vNtWNhc3ZEDyNCiXLPdVPHCikRxSBWwV9NrpLLa4LsXi9\",\n-        \"e75d936d56377f432f404aabb406601f892fd49da90eb6ac558a733c93b47252\",\n+        \"tb1rsrzkyvu2rt0dcgexajtazlw5nft4j7494ay396q6auw9375wxsrsgag884\",\n+        \"532080c562338a1adedc2326ec97d17dd49a57597aa5af4912e81aef1c58fa8e3407\",\n         {\n-            \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"chain\": \"signet\",\n+            \"isPrivkey\": false,\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"L1axzbSyynNYA8mCAhzxkipKkfHtAXYF4YQnhSKcLV8YXA874fgT\",\n-        \"8248bd0375f2f75d7e274ae544fb920f51784480866b102384190b1addfbaa5c\",\n+        \"bcrt1qwf52dt9y2sv0f7fwkcpmtfjf74d4np2saeljt6\",\n+        \"00147268a6aca45418f4f92eb603b5a649f55b598550\",\n         {\n-            \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"chain\": \"regtest\",\n+            \"isPrivkey\": false,\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"927CnUkUbasYtDwYwVn2j8GdTuACNnKkjZ1rpZd2yBB1CLcnXpo\",\n-        \"44c4f6a096eac5238291a94cc24c01e3b19b8d8cef72874a079e00a242237a52\",\n+        \"bcrt1q0lma84unycxl4n96etffthqlf7y5axyp4fxf64kmhymvw8l6pwfs39futd\",\n+        \"00207ff7d3d793260dfaccbacad295dc1f4f894e9881aa4c9d56dbb936c71ffa0b93\",\n         {\n-            \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"chain\": \"regtest\",\n+            \"isPrivkey\": false,\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"cUcfCMRjiQf85YMzzQEk9d1s5A4K7xL5SmBCLrezqXFuTVefyhY7\",\n-        \"d1de707020a9059d6d3abaf85e17967c6555151143db13dbb06db78df0f15c69\",\n+        \"bcrt1p3xat2ryucc2v0adrktqnavfzttvezrr27ngltsa2726p2ehvxz4se722v2\",\n+        \"512089bab50c9cc614c7f5a3b2c13eb1225ad9910c6af4d1f5c3aaf2b41566ec30ab\",\n         {\n-            \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"chain\": \"regtest\",\n+            \"isPrivkey\": false,\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"1Gqk4Tv79P91Cc1STQtU3s1W6277M2CVWu\",\n-        \"76a914adc1cc2081a27206fae25792f28bbc55b831549d88ac\",\n+        \"bcrt1saflydw6e26xhp29euhy5jke5jjqyywk3wvtc9ulgw9dvxyuqy9hdnxthyw755c7ldavy7u\",\n+        \"6028ea7e46bb59568d70a8b9e5c9495b349480423ad1731782f3e8715ac31380216ed9997723bd4a63df\",\n         {\n+            \"chain\": \"regtest\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"33vt8ViH5jsr115AGkW6cEmEz9MpvJSwDk\",\n-        \"a914188f91a931947eddd7432d6e614387e32b24470987\",\n+        \"16y3Q1XVRZqMR9T1XL1FkvNtD2E1bXBuYa\",\n+        \"76a9144171ec673aeb9fcf42af6094a3c82207e3b9a78188ac\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"chain\": \"main\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"mhaMcBxNh5cqXm4aTQ6EcVbKtfL6LGyK2H\",\n-        \"76a9141694f5bc1a7295b600f40018a618a6ea48eeb49888ac\",\n+        \"3CmZZnAiHVQgiAKSakf864oJMxN2BP1eLC\",\n+        \"a914798575fc1041b9440c4e63c28e57e597d00b7e4387\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"chain\": \"main\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"2MxgPqX1iThW3oZVk9KoFcE5M4JpiETssVN\",\n-        \"a9143b9b3fd7a50d4f08d1a5b0f62f644fa7115ae2f387\",\n+        \"mtCB3SoBo7EYUv8j54kUubGY4x3aJPY8nk\",\n+        \"76a9148b0c5f9ee714e0d1d24642ad63d9d5f398d9b56588ac\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"5HtH6GdcwCJA4ggWEL1B3jzBBUB8HPiBi9SBc5h9i4Wk4PSeApR\",\n-        \"091035445ef105fa1bb125eccfb1882f3fe69592265956ade751fd095033d8d0\",\n+        \"2N5ymzzKpx6EdUR4UdMZ7t9hcuwqtpHwgw5\",\n+        \"a9148badb3c3b5c0d39f906f7618e0018b7eae4baf7387\",\n         {\n-            \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"L2xSYmMeVo3Zek3ZTsv9xUrXVAmrWxJ8Ua4cw8pkfbQhcEFhkXT8\",\n-        \"ab2b4bcdfc91d34dee0ae2a8c6b6668dadaeb3a88b9859743156f462325187af\",\n+        \"myXnpYbub28zgiJupDdZSWZtDbjcyfJVby\",\n+        \"76a914c59ac57661b57daadd7c0caf7318c14f54c6c0fa88ac\",\n         {\n-            \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"chain\": \"signet\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"92xFEve1Z9N8Z641KQQS7ByCSb8kGjsDzw6fAmjHN1LZGKQXyMq\",\n-        \"b4204389cef18bbe2b353623cbf93e8678fbc92a475b664ae98ed594e6cf0856\",\n+        \"2MtLg8jS5jSXm9evMzTtvpLjy26dBmjFEoT\",\n+        \"a9140c0007e89cea625d3bf9543baa5a470bb7e5b67287\",\n         {\n-            \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"chain\": \"signet\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"92xFEve1Z9N8Z641KQQS7ByCSb8kGjsDzw6fAmjHN1LZGKQXyMq\",\n-        \"b4204389cef18bbe2b353623cbf93e8678fbc92a475b664ae98ed594e6cf0856\",\n+        \"mzCyqdf2UNGdpgkD9NBgLcxdwXRg1i9buY\",\n+        \"76a914cd04311bdd1ef9c5c24e41930e032aade82a863a88ac\",\n         {\n-            \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"regtest\"\n+            \"chain\": \"regtest\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"cVM65tdYu1YK37tNoAyGoJTR13VBYFva1vg9FLuPAsJijGvG6NEA\",\n-        \"e7b230133f1b5489843260236b06edca25f66adb1be455fbd38d4010d48faeef\",\n+        \"2N3zGiwFku2vQjYnAqXv5Qu2ztfYRhh7tbF\",\n+        \"a91475d56d75c88e704d6c72fbe84ac1505abf736b4087\",\n         {\n-            \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"chain\": \"regtest\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"1JwMWBVLtiqtscbaRHai4pqHokhFCbtoB4\",\n-        \"76a914c4c1b72491ede1eedaca00618407ee0b772cad0d88ac\",\n+        \"5JUHCgyxNSHg64wwju72eNsG6ajqo4Z2fHHw9iLDLfh69rSiL7w\",\n+        \"5644d06d88855dacf3192a31df8f4acd8e4c155c52a86d2c1fa48303f5cff053\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"chain\": \"main\",\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"3QCzvfL4ZRvmJFiWWBVwxfdaNBT8EtxB5y\",\n-        \"a914f6fe69bcb548a829cce4c57bf6fff8af3a5981f987\",\n+        \"L2kZaexG69VSriMe9T2m1jkS86iPe3xNbjcdfakRC1PHe7ay78Ji\",\n+        \"a50ee94aefcabf5a5d7c85be5b3844dee03c5604861dbfc77fe388c91e5a30f8\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"chain\": \"main\",\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"mizXiucXRCsEriQCHUkCqef9ph9qtPbZZ6\",\n-        \"76a914261f83568a098a8638844bd7aeca039d5f2352c088ac\",\n+        \"927JwT1ViCr5TD2ZX8CsMNhg17dXmou5xu4y2KiH54zD7i34UJq\",\n+        \"4502a54c0026b0150281d41f40860d1e23870c63cdc32645bbed688f2ee41f64\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"chain\": \"test\",\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"2NEWDzHWwY5ZZp8CQWbB7ouNMLqCia6YRda\",\n-        \"a914e930e1834a4d234702773951d627cce82fbb5d2e87\",\n+        \"cTpGGNPVy2Eagawohbr4aGtRJzpLnjxGsGYh9DUcBM45f3KdKGF6\",\n+        \"ba005a0cb39587aab00bd54c848b59e8adaed47403228567ddc739c2a344ff59\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"chain\": \"test\",\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"5KQmDryMNDcisTzRp3zEq9e4awRmJrEVU1j5vFRTKpRNYPqYrMg\",\n-        \"d1fab7ab7385ad26872237f1eb9789aa25cc986bacc695e07ac571d6cdac8bc0\",\n+        \"932PLCLA19yPNqV67qwHBSGjxi82LVzWBF7josL9ab4Q1kxgPGF\",\n+        \"bd8677e076eb39770bf7e9f9e8d3f2cf257effab9b4c220fd3439ccfc208c984\",\n         {\n+            \"chain\": \"signet\",\n             \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"L39Fy7AC2Hhj95gh3Yb2AU5YHh1mQSAHgpNixvm27poizcJyLtUi\",\n-        \"b0bbede33ef254e8376aceb1510253fc3550efd0fcf84dcd0c9998b288f166b3\",\n+        \"cViUpEy8URSsLjUvxwL7cEuNgCVqM7oKBzd1ZPbA4khcQsQJuj1j\",\n+        \"f2b36ade8393e29dc71e52cb75ba1109ba210203cd7d0a5ae881ad6846516203\",\n         {\n+            \"chain\": \"signet\",\n             \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"91cTVUcgydqyZLgaANpf1fvL55FH53QMm4BsnCADVNYuWuqdVys\",\n-        \"037f4192c630f399d9271e26c575269b1d15be553ea1a7217f0cb8513cef41cb\",\n+        \"92jddDjJCVDmJtgvBHQ9i58PMash8kwsYhRdNo22ea2MYPXdCBE\",\n+        \"977bf8686f1bcad28f86c4c14afbd33215746bd19203647bf7ff9c6fddc9cc87\",\n         {\n+            \"chain\": \"regtest\",\n             \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"cQspfSzsgLeiJGB2u8vrAiWpCU4MxUT6JseWo2SjXy4Qbzn2fwDw\",\n-        \"6251e205e8ad508bab5596bee086ef16cd4b239e0cc0c5d7c4e6035441e7d5de\",\n+        \"cVwAuMoUqRo399X7vXzuzQyPEvZJMXM8c82zHzRkFCxPCSGx8A6y\",\n+        \"f93acbbce02b8cb9ddca3fad495441e324cc01eb640b0a7b4c9f0e31644c822a\",\n         {\n+            \"chain\": \"regtest\",\n             \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"19dcawoKcZdQz365WpXWMhX6QCUpR9SY4r\",\n-        \"76a9145eadaf9bb7121f0f192561a5a62f5e5f5421029288ac\",\n+        \"bc1qz377zwe5awr68dnggengqx9vrjt05k98q3sw2n\",\n+        \"0014147de13b34eb87a3b66846668018ac1c96fa58a7\",\n         {\n+            \"chain\": \"main\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"37Sp6Rv3y4kVd1nQ1JV5pfqXccHNyZm1x3\",\n-        \"a9143f210e7277c899c3a155cc1c90f4106cbddeec6e87\",\n+        \"bc1qkmhskpdzg8kdkfywhu09kswwn9qan9vnkrf6mk40jvnr06s6sz5ssf82ya\",\n+        \"0020b6ef0b05a241ecdb248ebf1e5b41ce9941d99593b0d3addaaf932637ea1a80a9\",\n         {\n+            \"chain\": \"main\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"myoqcgYiehufrsnnkqdqbp69dddVDMopJu\",\n-        \"76a914c8a3c2a09a298592c3e180f02487cd91ba3400b588ac\",\n+        \"bc1ps8cndas60cntk8x79sg9f5e5jz7x050z8agyugln2ukkks23rryqpejzkc\",\n+        \"512081f136f61a7e26bb1cde2c1054d33490bc67d1e23f504e23f3572d6b415118c8\",\n         {\n+            \"chain\": \"main\",\n             \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"2N7FuwuUuoTBrDFdrAZ9KxBmtqMLxce9i1C\",\n-        \"a91499b31df7c9068d1481b596578ddbb4d3bd90baeb87\",\n+        \"bc1zn4tsczge9l\",\n+        \"52029d57\",\n         {\n+            \"chain\": \"main\",\n             \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"5KL6zEaMtPRXZKo1bbMq7JDjjo1bJuQcsgL33je3oY8uSJCR5b4\",\n-        \"c7666842503db6dc6ea061f092cfb9c388448629a6fe868d068c42a488b478ae\",\n+        \"tb1q6xw0wwd9n9d7ge87dryz4vm5vtahzhvz6yett3\",\n+        \"0014d19cf739a5995be464fe68c82ab37462fb715d82\",\n         {\n-            \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false,\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"KwV9KAfwbwt51veZWNscRTeZs9CKpojyu1MsPnaKTF5kz69H1UN2\",\n-        \"07f0803fc5399e773555ab1e8939907e9badacc17ca129e67a2f5f2ff84351dd\",\n+        \"tb1qwn9zq9fu5uk35ykpgsc7rz4uawy4yh0r5m5er26768h5ur50su3qj6evun\",\n+        \"002074ca20153ca72d1a12c14431e18abceb89525de3a6e991ab5ed1ef4e0e8f8722\",\n         {\n-            \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false,\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"93N87D6uxSBzwXvpokpzg8FFmfQPmvX4xHoWQe3pLdYpbiwT5YV\",\n-        \"ea577acfb5d1d14d3b7b195c321566f12f87d2b77ea3a53f68df7ebf8604a801\",\n+        \"tb1pmcdc5d8gr92rtemfsnhpeqanvs0nr82upn5dktxluz9n0qcv34lqxke0wq\",\n+        \"5120de1b8a34e8195435e76984ee1c83b3641f319d5c0ce8db2cdfe08b37830c8d7e\",\n         {\n-            \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false,\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"cMxXusSihaX58wpJ3tNuuUcZEQGt6DKJ1wEpxys88FFaQCYjku9h\",\n-        \"0b3b34f0958d8a268193a9814da92c3e8b58b4a4378a542863e34ac289cd830c\",\n+        \"tb1rgxjvtfzp0xczz6dlzqv8d5cmuykk4qkk\",\n+        \"531041a4c5a44179b02169bf101876d31be1\",\n         {\n-            \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false,\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"13p1ijLwsnrcuyqcTvJXkq2ASdXqcnEBLE\",\n-        \"76a9141ed467017f043e91ed4c44b4e8dd674db211c4e688ac\",\n+        \"tb1qa9dlyt6fydestul4y4wh72yshh044w32np8etk\",\n+        \"0014e95bf22f49237305f3f5255d7f2890bddf5aba2a\",\n         {\n+            \"chain\": \"signet\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"3ALJH9Y951VCGcVZYAdpA3KchoP9McEj1G\",\n-        \"a9145ece0cadddc415b1980f001785947120acdb36fc87\",\n+        \"tb1qu4p26n0033720xm0rjgkds5ehdwf039k2fgv75um5krrvfhrrj7qckl9r2\",\n+        \"0020e542ad4def8c7ca79b6f1c9166c299bb5c97c4b65250cf539ba5863626e31cbc\",\n         {\n+            \"chain\": \"signet\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4\",\n-        \"0014751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        \"tb1pjyukm4n4flwd0ey3lrl06c9kalr60ggmlkcxq2rhhxmy4lvkmkpqexdzqy\",\n+        \"512091396dd6754fdcd7e491f8fefd60b6efc7a7a11bfdb0602877b9b64afd96dd82\",\n         {\n+            \"chain\": \"signet\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\",\n             \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"bcrt1qw508d6qejxtdg4y5r3zarvary0c5xw7kygt080\",\n-        \"0014751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        \"tb1r4k75s5syvewsvxufdc3xfhf4tw4u30alw39xny3dnxrl6hau7systymfdv\",\n+        \"5320adbd485204665d061b896e2264dd355babc8bfbf744a69922d9987fd5fbcf409\",\n         {\n+            \"chain\": \"signet\",\n             \"isPrivkey\": false,\n-            \"chain\": \"regtest\",\n             \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7\",\n-        \"00201863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262\",\n+        \"bcrt1qnk3tdwwj47ppc4pqmxkjdusegedn9ru5gvccwa\",\n+        \"00149da2b6b9d2af821c5420d9ad26f219465b328f94\",\n         {\n+            \"chain\": \"regtest\",\n             \"isPrivkey\": false,\n-            \"chain\": \"test\",\n             \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7k7grplx\",\n-        \"5128751e76e8199196d454941c45d1b3a323f1433bd6751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        \"bcrt1qz7prfshfkwsxuk72pt6mzr6uumq4qllxe4vmwqt89tat48d362yqlykk6a\",\n+        \"0020178234c2e9b3a06e5bca0af5b10f5ce6c1507fe6cd59b701672afaba9db1d288\",\n         {\n+            \"chain\": \"regtest\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\",\n             \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"bc1sw50qa3jx3s\",\n-        \"6002751e\",\n+        \"bcrt1pumee3wj80xvyr7wjmj7zsk26x5pn095aegy862yhx6f2j9sgc9hq6cj4cm\",\n+        \"5120e6f398ba47799841f9d2dcbc28595a350337969dca087d28973692a91608c16e\",\n         {\n+            \"chain\": \"regtest\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\",\n             \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"bc1zw508d6qejxtdg4y5r3zarvaryvg6kdaj\",\n-        \"5210751e76e8199196d454941c45d1b3a323\",\n+        \"bcrt1szqz8hj64d2hhc6nt65v09jxal66pgff2xpcp9kj648qkk8kjzxelsts4dktd799g47uase\",\n+        \"602810047bcb556aaf7c6a6bd518f2c8ddfeb414252a307012da5aa9c16b1ed211b3f82e156d96df14a8\",\n         {\n+            \"chain\": \"regtest\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\",\n             \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"tb1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvsesrxh6hy\",\n-        \"0020000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433\",\n+        \"12agZTajtRE3STSchwWNWnrm467zzTQ916\",\n+        \"76a9141156e00f70061e5faba8b71593a8c7554b47090c88ac\",\n+        {\n+            \"chain\": \"main\",\n+            \"isPrivkey\": false\n+        }\n+    ],\n+    [\n+        \"3NXqB6iZiPYbKruNT3d9xNBTmtb73xMvvf\",\n+        \"a914e49decc9e5d97e0547d3642f3a4795b13ae62bca87\",\n+        {\n+            \"chain\": \"main\",\n+            \"isPrivkey\": false\n+        }\n+    ],\n+    [\n+        \"mjgt4BoCYxjzWvJFoh68x7cj5GeaKDYhyx\",\n+        \"76a9142dc11fc7b8072f733f690ffb0591c00f4062295c88ac\",\n         {\n-            \"isPrivkey\": false,\n             \"chain\": \"test\",\n-            \"tryCaseFlip\": true\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"bcrt1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvseswlauz7\",\n-        \"0020000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433\",\n+        \"2NCT6FdQ5MxorHgnFxLeHyGwTGRdkHcrJDH\",\n+        \"a914d2a8ec992b0894a0d9391ca5d9c45c388c41be7e87\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"regtest\",\n-            \"tryCaseFlip\": true\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false\n+        }\n+    ],\n+    [\n+        \"mpomiA7wqDnMcxaNLC23eBuXAb4U6H4ZqW\",\n+        \"76a91465e75e340415ed297c58d6a14d3c17ceeaa17bbd88ac\",\n+        {\n+            \"chain\": \"signet\",\n+            \"isPrivkey\": false\n+        }\n+    ],\n+    [\n+        \"2N1pGAA5uatbU2PKvMA9BnJmHcK6yHfMiZa\",\n+        \"a9145e008b6cc232164570befc23d216060bf4ea793b87\",\n+        {\n+            \"chain\": \"signet\",\n+            \"isPrivkey\": false\n         }\n     ]\n ]"
      },
      {
        "sha": "aecf955fee7f2272c92d2f2f1532d42811331a32",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 13,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -10,6 +10,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n+#include <optional>\n #include <string>\n #include <vector>\n \n@@ -65,7 +66,7 @@ std::string UseHInsteadOfApostrophe(const std::string& desc)\n \n const std::set<std::vector<uint32_t>> ONLY_EMPTY{{}};\n \n-void DoCheck(const std::string& prv, const std::string& pub, const std::string& norm_prv, const std::string& norm_pub, int flags, const std::vector<std::vector<std::string>>& scripts, const Optional<OutputType>& type, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY,\n+void DoCheck(const std::string& prv, const std::string& pub, const std::string& norm_prv, const std::string& norm_pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::optional<OutputType>& type, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY,\n     bool replace_apostrophe_with_h_in_prv=false, bool replace_apostrophe_with_h_in_pub=false)\n {\n     FlatSigningProvider keys_priv, keys_pub;\n@@ -262,7 +263,7 @@ void DoCheck(const std::string& prv, const std::string& pub, const std::string&\n     BOOST_CHECK_MESSAGE(left_paths.empty(), \"Not all expected key paths found: \" + prv);\n }\n \n-void Check(const std::string& prv, const std::string& pub, const std::string& norm_prv, const std::string& norm_pub, int flags, const std::vector<std::vector<std::string>>& scripts, const Optional<OutputType>& type, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY)\n+void Check(const std::string& prv, const std::string& pub, const std::string& norm_prv, const std::string& norm_pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::optional<OutputType>& type, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY)\n {\n     bool found_apostrophes_in_prv = false;\n     bool found_apostrophes_in_pub = false;\n@@ -295,8 +296,8 @@ BOOST_FIXTURE_TEST_SUITE(descriptor_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(descriptor_test)\n {\n     // Basic single-key compressed\n-    Check(\"combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\",\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\",\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\",\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}}, nullopt);\n-    Check(\"pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\"}}, nullopt);\n+    Check(\"combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\",\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\",\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\",\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}}, std::nullopt);\n+    Check(\"pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\"}}, std::nullopt);\n     Check(\"pkh([deadbeef/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh([deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"pkh([deadbeef/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh([deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\"}}, OutputType::LEGACY, {{1,0x80000002UL,3,0x80000004UL}});\n     Check(\"wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\"}}, OutputType::BECH32);\n     Check(\"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", \"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}}, OutputType::P2SH_SEGWIT);\n@@ -305,8 +306,8 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     CheckUnparsable(\"pkh([deadbeef]/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh([deadbeef]/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"Multiple ']' characters found for a single pubkey\"); // Multiple end brackets in key origin\n \n     // Basic single-key uncompressed\n-    Check(\"combo(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"combo(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"combo(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"combo(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\",SIGNABLE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\",\"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac\"}}, nullopt);\n-    Check(\"pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\"}}, nullopt);\n+    Check(\"combo(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"combo(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"combo(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"combo(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\",SIGNABLE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\",\"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac\"}}, std::nullopt);\n+    Check(\"pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\"}}, std::nullopt);\n     Check(\"pkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"pkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac\"}}, OutputType::LEGACY);\n     CheckUnparsable(\"wpkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"wpkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"Uncompressed keys are not allowed\"); // No uncompressed keys in witness\n     CheckUnparsable(\"wsh(pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss))\", \"wsh(pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235))\", \"Uncompressed keys are not allowed\"); // No uncompressed keys in witness\n@@ -321,23 +322,23 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     Check(\"sh(wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", \"sh(wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE, {{\"a914b61b92e2ca21bac1e72a3ab859a742982bea960a87\"}}, OutputType::P2SH_SEGWIT);\n \n     // Versions with BIP32 derivations\n-    Check(\"combo([01234567]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([01234567]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", \"combo([01234567]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([01234567]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", SIGNABLE, {{\"2102d2b36900396c9282fa14628566582f206a5dd0bcc8d5e892611806cafb0301f0ac\",\"76a91431a507b815593dfc51ffc7245ae7e5aee304246e88ac\",\"001431a507b815593dfc51ffc7245ae7e5aee304246e\",\"a9142aafb926eb247cb18240a7f4c07983ad1f37922687\"}}, nullopt);\n-    Check(\"pk(xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0)\", \"pk(xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0)\", \"pk(xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0)\", \"pk(xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0)\", DEFAULT, {{\"210379e45b3cf75f9c5f9befd8e9506fb962f6a9d185ac87001ec44a8d3df8d4a9e3ac\"}}, nullopt, {{0}});\n+    Check(\"combo([01234567]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([01234567]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", \"combo([01234567]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([01234567]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", SIGNABLE, {{\"2102d2b36900396c9282fa14628566582f206a5dd0bcc8d5e892611806cafb0301f0ac\",\"76a91431a507b815593dfc51ffc7245ae7e5aee304246e88ac\",\"001431a507b815593dfc51ffc7245ae7e5aee304246e\",\"a9142aafb926eb247cb18240a7f4c07983ad1f37922687\"}}, std::nullopt);\n+    Check(\"pk(xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0)\", \"pk(xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0)\", \"pk(xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0)\", \"pk(xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0)\", DEFAULT, {{\"210379e45b3cf75f9c5f9befd8e9506fb962f6a9d185ac87001ec44a8d3df8d4a9e3ac\"}}, std::nullopt, {{0}});\n     Check(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0)\", \"pkh([bd16bee5/2147483647']xprv9vHkqa6XAPwKqSKSEJMcAB3yoCZhaSVsGZbSkFY5L3Lfjjk8sjZucbsbvEw5o3QrSA69nPfZDCgFnNnLhQ2ohpZuwummndnPasDw2Qr6dC2/0)\", \"pkh([bd16bee5/2147483647']xpub69H7F5dQzmVd3vPuLKtcXJziMEQByuDidnX3YdwgtNsecY5HRGtAAQC5mXTt4dsv9RzyjgDjAQs9VGVV6ydYCHnprc9vvaA5YtqWyL6hyds/0)\", HARDENED, {{\"76a914ebdc90806a9c4356c1c88e42216611e1cb4c1c1788ac\"}}, OutputType::LEGACY, {{0xFFFFFFFFUL,0}});\n     Check(\"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", \"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", RANGE, {{\"0014326b2249e3a25d5dc60935f044ee835d090ba859\"},{\"0014af0bd98abc2f2cae66e36896a39ffe2d32984fb7\"},{\"00141fa798efd1cbf95cebf912c031b8a4a6e9fb9f27\"}}, OutputType::BECH32, {{0x8000000DUL, 1, 2, 0}, {0x8000000DUL, 1, 2, 1}, {0x8000000DUL, 1, 2, 2}});\n     Check(\"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", \"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", RANGE | HARDENED | DERIVE_HARDENED, {{\"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87\"},{\"a914bed59fc0024fae941d6e20a3b44a109ae740129287\"},{\"a9148483aa1116eb9c05c482a72bada4b1db24af654387\"}}, OutputType::P2SH_SEGWIT, {{10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n-    Check(\"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", \"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", RANGE, {{\"2102df12b7035bdac8e3bab862a3a83d06ea6b17b6753d52edecba9be46f5d09e076ac\",\"76a914f90e3178ca25f2c808dc76624032d352fdbdfaf288ac\",\"0014f90e3178ca25f2c808dc76624032d352fdbdfaf2\",\"a91408f3ea8c68d4a7585bf9e8bda226723f70e445f087\"},{\"21032869a233c9adff9a994e4966e5b821fd5bac066da6c3112488dc52383b4a98ecac\",\"76a914a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b788ac\",\"0014a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b7\",\"a91473e39884cb71ae4e5ac9739e9225026c99763e6687\"}}, nullopt, {{0}, {1}});\n+    Check(\"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", \"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", RANGE, {{\"2102df12b7035bdac8e3bab862a3a83d06ea6b17b6753d52edecba9be46f5d09e076ac\",\"76a914f90e3178ca25f2c808dc76624032d352fdbdfaf288ac\",\"0014f90e3178ca25f2c808dc76624032d352fdbdfaf2\",\"a91408f3ea8c68d4a7585bf9e8bda226723f70e445f087\"},{\"21032869a233c9adff9a994e4966e5b821fd5bac066da6c3112488dc52383b4a98ecac\",\"76a914a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b788ac\",\"0014a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b7\",\"a91473e39884cb71ae4e5ac9739e9225026c99763e6687\"}}, std::nullopt, {{0}, {1}});\n     CheckUnparsable(\"combo([012345678]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([012345678]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", \"Fingerprint is not 4 bytes (9 characters instead of 8 characters)\"); // Too long key fingerprint\n     CheckUnparsable(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483648)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483648)\", \"Key path value 2147483648 is out of range\"); // BIP 32 path element overflow\n     CheckUnparsable(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/1aa)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1aa)\", \"Key path value '1aa' is not a valid uint32\"); // Path is not valid uint\n     Check(\"pkh([01234567/10/20]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0)\", \"pkh([01234567/10/20]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0)\", \"pkh([01234567/10/20/2147483647']xprv9vHkqa6XAPwKqSKSEJMcAB3yoCZhaSVsGZbSkFY5L3Lfjjk8sjZucbsbvEw5o3QrSA69nPfZDCgFnNnLhQ2ohpZuwummndnPasDw2Qr6dC2/0)\", \"pkh([01234567/10/20/2147483647']xpub69H7F5dQzmVd3vPuLKtcXJziMEQByuDidnX3YdwgtNsecY5HRGtAAQC5mXTt4dsv9RzyjgDjAQs9VGVV6ydYCHnprc9vvaA5YtqWyL6hyds/0)\", HARDENED, {{\"76a914ebdc90806a9c4356c1c88e42216611e1cb4c1c1788ac\"}}, OutputType::LEGACY, {{10, 20, 0xFFFFFFFFUL, 0}});\n \n     // Multisig constructions\n-    Check(\"multi(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"multi(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"multi(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"multi(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}}, nullopt);\n-    Check(\"sortedmulti(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"sortedmulti(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"sortedmulti(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"sortedmulti(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}}, nullopt);\n-    Check(\"sortedmulti(1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"sortedmulti(1,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"sortedmulti(1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"sortedmulti(1,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}}, nullopt);\n+    Check(\"multi(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"multi(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"multi(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"multi(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}}, std::nullopt);\n+    Check(\"sortedmulti(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"sortedmulti(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"sortedmulti(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"sortedmulti(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}}, std::nullopt);\n+    Check(\"sortedmulti(1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"sortedmulti(1,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"sortedmulti(1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"sortedmulti(1,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}}, std::nullopt);\n     Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", \"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, OutputType::LEGACY, {{0x8000006FUL,222},{0}});\n-    Check(\"sortedmulti(2,xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc/*,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0/0/*)\", \"sortedmulti(2,xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/*,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0/0/*)\", \"sortedmulti(2,xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc/*,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0/0/*)\", \"sortedmulti(2,xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/*,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0/0/*)\", RANGE, {{\"5221025d5fc65ebb8d44a5274b53bac21ff8307fec2334a32df05553459f8b1f7fe1b62102fbd47cc8034098f0e6a94c6aeee8528abf0a2153a5d8e46d325b7284c046784652ae\"}, {\"52210264fd4d1f5dea8ded94c61e9641309349b62f27fbffe807291f664e286bfbe6472103f4ece6dfccfa37b211eb3d0af4d0c61dba9ef698622dc17eecdf764beeb005a652ae\"}, {\"5221022ccabda84c30bad578b13c89eb3b9544ce149787e5b538175b1d1ba259cbb83321024d902e1a2fc7a8755ab5b694c575fce742c48d9ff192e63df5193e4c7afe1f9c52ae\"}}, nullopt, {{0}, {1}, {2}, {0, 0, 0}, {0, 0, 1}, {0, 0, 2}});\n+    Check(\"sortedmulti(2,xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc/*,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0/0/*)\", \"sortedmulti(2,xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/*,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0/0/*)\", \"sortedmulti(2,xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc/*,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0/0/*)\", \"sortedmulti(2,xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/*,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0/0/*)\", RANGE, {{\"5221025d5fc65ebb8d44a5274b53bac21ff8307fec2334a32df05553459f8b1f7fe1b62102fbd47cc8034098f0e6a94c6aeee8528abf0a2153a5d8e46d325b7284c046784652ae\"}, {\"52210264fd4d1f5dea8ded94c61e9641309349b62f27fbffe807291f664e286bfbe6472103f4ece6dfccfa37b211eb3d0af4d0c61dba9ef698622dc17eecdf764beeb005a652ae\"}, {\"5221022ccabda84c30bad578b13c89eb3b9544ce149787e5b538175b1d1ba259cbb83321024d902e1a2fc7a8755ab5b694c575fce742c48d9ff192e63df5193e4c7afe1f9c52ae\"}}, std::nullopt, {{0}, {1}, {2}, {0, 0, 0}, {0, 0, 1}, {0, 0, 2}});\n     Check(\"wsh(multi(2,xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", \"wsh(multi(2,[bd16bee5/2147483647']xprv9vHkqa6XAPwKqSKSEJMcAB3yoCZhaSVsGZbSkFY5L3Lfjjk8sjZucbsbvEw5o3QrSA69nPfZDCgFnNnLhQ2ohpZuwummndnPasDw2Qr6dC2/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[bd16bee5/2147483647']xpub69H7F5dQzmVd3vPuLKtcXJziMEQByuDidnX3YdwgtNsecY5HRGtAAQC5mXTt4dsv9RzyjgDjAQs9VGVV6ydYCHnprc9vvaA5YtqWyL6hyds/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", HARDENED | RANGE | DERIVE_HARDENED, {{\"0020b92623201f3bb7c3771d45b2ad1d0351ea8fbf8cfe0a0e570264e1075fa1948f\"},{\"002036a08bbe4923af41cf4316817c93b8d37e2f635dd25cfff06bd50df6ae7ea203\"},{\"0020a96e7ab4607ca6b261bfe3245ffda9c746b28d3f59e83d34820ec0e2b36c139c\"}}, OutputType::BECH32, {{0xFFFFFFFFUL,0}, {1,2,0}, {1,2,1}, {1,2,2}, {10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n     Check(\"sh(wsh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9)))\",\"sh(wsh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232)))\", \"sh(wsh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9)))\",\"sh(wsh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232)))\", SIGNABLE, {{\"a9147fc63e13dc25e8a95a3cee3d9a714ac3afd96f1e87\"}}, OutputType::P2SH_SEGWIT);\n     CheckUnparsable(\"sh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9))\",\"sh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232))\", \"P2SH script is too large, 547 bytes is larger than 520 bytes\"); // P2SH does not fit 16 compressed pubkeys in a redeemscript"
      },
      {
        "sha": "479342e4be85d6f6f9157ff50cee2b75b4e1496d",
        "filename": "src/test/fuzz/autofile.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/autofile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/autofile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/autofile.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <optional.h>\n #include <streams.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>"
      },
      {
        "sha": "ad3bf73af4328c7454cb8666e3f0e65abe8d41a7",
        "filename": "src/test/fuzz/bech32.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/bech32.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -16,28 +16,28 @@\n FUZZ_TARGET(bech32)\n {\n     const std::string random_string(buffer.begin(), buffer.end());\n-    const std::pair<std::string, std::vector<uint8_t>> r1 = bech32::Decode(random_string);\n-    if (r1.first.empty()) {\n-        assert(r1.second.empty());\n+    const auto r1 = bech32::Decode(random_string);\n+    if (r1.hrp.empty()) {\n+        assert(r1.encoding == bech32::Encoding::INVALID);\n+        assert(r1.data.empty());\n     } else {\n-        const std::string& hrp = r1.first;\n-        const std::vector<uint8_t>& data = r1.second;\n-        const std::string reencoded = bech32::Encode(hrp, data);\n+        assert(r1.encoding != bech32::Encoding::INVALID);\n+        const std::string reencoded = bech32::Encode(r1.encoding, r1.hrp, r1.data);\n         assert(CaseInsensitiveEqual(random_string, reencoded));\n     }\n \n     std::vector<unsigned char> input;\n     ConvertBits<8, 5, true>([&](unsigned char c) { input.push_back(c); }, buffer.begin(), buffer.end());\n-    const std::string encoded = bech32::Encode(\"bc\", input);\n-    assert(!encoded.empty());\n \n-    const std::pair<std::string, std::vector<uint8_t>> r2 = bech32::Decode(encoded);\n-    if (r2.first.empty()) {\n-        assert(r2.second.empty());\n-    } else {\n-        const std::string& hrp = r2.first;\n-        const std::vector<uint8_t>& data = r2.second;\n-        assert(hrp == \"bc\");\n-        assert(data == input);\n+    if (input.size() + 3 + 6 <= 90) {\n+        // If it's possible to encode input in Bech32(m) without exceeding the 90-character limit:\n+        for (auto encoding : {bech32::Encoding::BECH32, bech32::Encoding::BECH32M}) {\n+            const std::string encoded = bech32::Encode(encoding, \"bc\", input);\n+            assert(!encoded.empty());\n+            const auto r2 = bech32::Decode(encoded);\n+            assert(r2.encoding == encoding);\n+            assert(r2.hrp == \"bc\");\n+            assert(r2.data == input);\n+        }\n     }\n }"
      },
      {
        "sha": "ed72260d109a205ce966122eb9f7ded65301f7f7",
        "filename": "src/test/fuzz/buffered_file.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/buffered_file.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/buffered_file.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/buffered_file.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <optional.h>\n #include <streams.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>"
      },
      {
        "sha": "1290c78712b4405d92f98778226324f8394df54c",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -15,7 +15,6 @@\n #include <net.h>\n #include <netbase.h>\n #include <node/utxo_snapshot.h>\n-#include <optional.h>\n #include <primitives/block.h>\n #include <protocol.h>\n #include <psbt.h>\n@@ -26,6 +25,7 @@\n #include <version.h>\n \n #include <exception>\n+#include <optional>\n #include <stdexcept>\n #include <stdint.h>\n #include <unistd.h>\n@@ -69,7 +69,7 @@ T Deserialize(CDataStream ds)\n }\n \n template <typename T>\n-void DeserializeFromFuzzingInput(FuzzBufferType buffer, T& obj, const Optional<int> protocol_version = nullopt)\n+void DeserializeFromFuzzingInput(FuzzBufferType buffer, T& obj, const std::optional<int> protocol_version = std::nullopt)\n {\n     CDataStream ds(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n     if (protocol_version) {"
      },
      {
        "sha": "272f6415a9a386834b4dcd5048efc01242fe48d7",
        "filename": "src/test/fuzz/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -7,7 +7,6 @@\n #include <net.h>\n #include <net_permissions.h>\n #include <netaddress.h>\n-#include <optional.h>\n #include <protocol.h>\n #include <random.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n@@ -17,6 +16,7 @@\n #include <test/util/setup_common.h>\n \n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n "
      },
      {
        "sha": "603d520cf5b0de9748ba68edb10f22dac4499557",
        "filename": "src/test/fuzz/node_eviction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/node_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/node_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/node_eviction.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -3,7 +3,6 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <net.h>\n-#include <optional.h>\n #include <protocol.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n@@ -37,7 +36,7 @@ FUZZ_TARGET(node_eviction)\n     // Make a copy since eviction_candidates may be in some valid but otherwise\n     // indeterminate state after the SelectNodeToEvict(&&) call.\n     const std::vector<NodeEvictionCandidate> eviction_candidates_copy = eviction_candidates;\n-    const Optional<NodeId> node_to_evict = SelectNodeToEvict(std::move(eviction_candidates));\n+    const std::optional<NodeId> node_to_evict = SelectNodeToEvict(std::move(eviction_candidates));\n     if (node_to_evict) {\n         assert(std::any_of(eviction_candidates_copy.begin(), eviction_candidates_copy.end(), [&node_to_evict](const NodeEvictionCandidate& eviction_candidate) { return *node_to_evict == eviction_candidate.id; }));\n     }"
      },
      {
        "sha": "3a1fdaad8fec96be7dc51781c99922c108af7b6e",
        "filename": "src/test/fuzz/p2p_transport_deserializer.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/p2p_transport_deserializer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/p2p_transport_deserializer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/p2p_transport_deserializer.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -10,6 +10,7 @@\n #include <cassert>\n #include <cstdint>\n #include <limits>\n+#include <optional>\n #include <vector>\n \n void initialize_p2p_transport_deserializer()\n@@ -30,7 +31,7 @@ FUZZ_TARGET_INIT(p2p_transport_deserializer, initialize_p2p_transport_deserializ\n         if (deserializer.Complete()) {\n             const std::chrono::microseconds m_time{std::numeric_limits<int64_t>::max()};\n             uint32_t out_err_raw_size{0};\n-            Optional<CNetMessage> result{deserializer.GetMessage(m_time, out_err_raw_size)};\n+            std::optional<CNetMessage> result{deserializer.GetMessage(m_time, out_err_raw_size)};\n             if (result) {\n                 assert(result->m_command.size() <= CMessageHeader::COMMAND_SIZE);\n                 assert(result->m_raw_message_size <= buffer.size());"
      },
      {
        "sha": "d1cc6f9c7ebc7e262c39b8025976e830c12acd6e",
        "filename": "src/test/fuzz/psbt.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/psbt.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -5,14 +5,14 @@\n #include <test/fuzz/fuzz.h>\n \n #include <node/psbt.h>\n-#include <optional.h>\n #include <psbt.h>\n #include <pubkey.h>\n #include <script/script.h>\n #include <streams.h>\n #include <version.h>\n \n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n \n@@ -39,7 +39,7 @@ FUZZ_TARGET_INIT(psbt, initialize_psbt)\n \n     (void)psbt.IsNull();\n \n-    Optional<CMutableTransaction> tx = psbt.tx;\n+    std::optional<CMutableTransaction> tx = psbt.tx;\n     if (tx) {\n         const CMutableTransaction& mtx = *tx;\n         const PartiallySignedTransaction psbt_from_tx{mtx};"
      },
      {
        "sha": "6ce13d56792afc25d2b890c4052481beee6b1bd3",
        "filename": "src/test/fuzz/script_descriptor_cache.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/script_descriptor_cache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/script_descriptor_cache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_descriptor_cache.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <optional.h>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n \n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n "
      },
      {
        "sha": "b25dcfcd3bd76bbaec994330d70d9a449dca1953",
        "filename": "src/test/fuzz/system.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/system.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -51,7 +51,7 @@ FUZZ_TARGET(system)\n                 // Avoid hitting:\n                 // util/system.cpp:425: void ArgsManager::AddArg(const std::string &, const std::string &, unsigned int, const OptionsCategory &): Assertion `ret.second' failed.\n                 const std::string argument_name = GetArgumentName(fuzzed_data_provider.ConsumeRandomLengthString(16));\n-                if (args_manager.GetArgFlags(argument_name) != nullopt) {\n+                if (args_manager.GetArgFlags(argument_name) != std::nullopt) {\n                     return;\n                 }\n                 args_manager.AddArg(argument_name, fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeIntegral<unsigned int>() & ~ArgsManager::COMMAND, options_category);\n@@ -63,7 +63,7 @@ FUZZ_TARGET(system)\n                 std::vector<std::string> hidden_arguments;\n                 for (const std::string& name : names) {\n                     const std::string hidden_argument = GetArgumentName(name);\n-                    if (args_manager.GetArgFlags(hidden_argument) != nullopt) {\n+                    if (args_manager.GetArgFlags(hidden_argument) != std::nullopt) {\n                         continue;\n                     }\n                     if (std::find(hidden_arguments.begin(), hidden_arguments.end(), hidden_argument) != hidden_arguments.end()) {"
      },
      {
        "sha": "a898e2782db5141622a36391eabfbf8de5a6011a",
        "filename": "src/test/fuzz/versionbits.cpp",
        "status": "added",
        "additions": 345,
        "deletions": 0,
        "changes": 345,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/fuzz/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/versionbits.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -0,0 +1,345 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <consensus/params.h>\n+#include <primitives/block.h>\n+#include <versionbits.h>\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <vector>\n+\n+namespace {\n+class TestConditionChecker : public AbstractThresholdConditionChecker\n+{\n+private:\n+    mutable ThresholdConditionCache m_cache;\n+    const Consensus::Params dummy_params{};\n+\n+public:\n+    const int64_t m_begin = 0;\n+    const int64_t m_end = 0;\n+    const int m_period = 0;\n+    const int m_threshold = 0;\n+    const int m_bit = 0;\n+\n+    TestConditionChecker(int64_t begin, int64_t end, int period, int threshold, int bit)\n+        : m_begin{begin}, m_end{end}, m_period{period}, m_threshold{threshold}, m_bit{bit}\n+    {\n+        assert(m_period > 0);\n+        assert(0 <= m_threshold && m_threshold <= m_period);\n+        assert(0 <= m_bit && m_bit <= 32 && m_bit < VERSIONBITS_NUM_BITS);\n+    }\n+\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override { return Condition(pindex->nVersion); }\n+    int64_t BeginTime(const Consensus::Params& params) const override { return m_begin; }\n+    int64_t EndTime(const Consensus::Params& params) const override { return m_end; }\n+    int Period(const Consensus::Params& params) const override { return m_period; }\n+    int Threshold(const Consensus::Params& params) const override { return m_threshold; }\n+\n+    ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, dummy_params, m_cache); }\n+    int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, dummy_params, m_cache); }\n+    BIP9Stats GetStateStatisticsFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateStatisticsFor(pindexPrev, dummy_params); }\n+\n+    bool Condition(int64_t version) const\n+    {\n+        return ((version >> m_bit) & 1) != 0 && (version & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS;\n+    }\n+\n+    bool Condition(const CBlockIndex* pindex) const { return Condition(pindex->nVersion); }\n+};\n+\n+/** Track blocks mined for test */\n+class Blocks\n+{\n+private:\n+    std::vector<std::unique_ptr<CBlockIndex>> m_blocks;\n+    const uint32_t m_start_time;\n+    const uint32_t m_interval;\n+    const int32_t m_signal;\n+    const int32_t m_no_signal;\n+\n+public:\n+    Blocks(uint32_t start_time, uint32_t interval, int32_t signal, int32_t no_signal)\n+        : m_start_time{start_time}, m_interval{interval}, m_signal{signal}, m_no_signal{no_signal} {}\n+\n+    size_t size() const { return m_blocks.size(); }\n+\n+    CBlockIndex* tip() const\n+    {\n+        return m_blocks.empty() ? nullptr : m_blocks.back().get();\n+    }\n+\n+    CBlockIndex* mine_block(bool signal)\n+    {\n+        CBlockHeader header;\n+        header.nVersion = signal ? m_signal : m_no_signal;\n+        header.nTime = m_start_time + m_blocks.size() * m_interval;\n+        header.nBits = 0x1d00ffff;\n+\n+        auto current_block = std::make_unique<CBlockIndex>(header);\n+        current_block->pprev = tip();\n+        current_block->nHeight = m_blocks.size();\n+        current_block->BuildSkip();\n+\n+        return m_blocks.emplace_back(std::move(current_block)).get();\n+    }\n+};\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+}\n+} // namespace\n+\n+constexpr uint32_t MAX_TIME = 4102444800; // 2100-01-01\n+\n+FUZZ_TARGET_INIT(versionbits, initialize)\n+{\n+    const CChainParams& params = Params();\n+\n+    const int64_t interval = params.GetConsensus().nPowTargetSpacing;\n+    assert(interval > 1); // need to be able to halve it\n+    assert(interval < std::numeric_limits<int32_t>::max());\n+\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    // making period/max_periods larger slows these tests down significantly\n+    const int period = 32;\n+    const size_t max_periods = 16;\n+    const size_t max_blocks = 2 * period * max_periods;\n+\n+    const int threshold = fuzzed_data_provider.ConsumeIntegralInRange(1, period);\n+    assert(0 < threshold && threshold <= period); // must be able to both pass and fail threshold!\n+\n+    // too many blocks at 10min each might cause uint32_t time to overflow if\n+    // block_start_time is at the end of the range above\n+    assert(std::numeric_limits<uint32_t>::max() - MAX_TIME > interval * max_blocks);\n+\n+    const int64_t block_start_time = fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(params.GenesisBlock().nTime, MAX_TIME);\n+\n+    // what values for version will we use to signal / not signal?\n+    const int32_t ver_signal = fuzzed_data_provider.ConsumeIntegral<int32_t>();\n+    const int32_t ver_nosignal = fuzzed_data_provider.ConsumeIntegral<int32_t>();\n+\n+    // select deployment parameters: bit, start time, timeout\n+    const int bit = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, VERSIONBITS_NUM_BITS - 1);\n+\n+    bool always_active_test = false;\n+    bool never_active_test = false;\n+    int64_t start_time;\n+    int64_t timeout;\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        // pick the timestamp to switch based on a block\n+        // note states will change *after* these blocks because mediantime lags\n+        int start_block = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, period * (max_periods - 3));\n+        int end_block = fuzzed_data_provider.ConsumeIntegralInRange<int>(start_block, period * (max_periods - 3));\n+\n+        start_time = block_start_time + start_block * interval;\n+        timeout = block_start_time + end_block * interval;\n+\n+        assert(start_time <= timeout);\n+\n+        // allow for times to not exactly match a block\n+        if (fuzzed_data_provider.ConsumeBool()) start_time += interval / 2;\n+        if (fuzzed_data_provider.ConsumeBool()) timeout += interval / 2;\n+\n+        // this may make timeout too early; if so, don't run the test\n+        if (start_time > timeout) return;\n+    } else {\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            start_time = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n+            timeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+            always_active_test = true;\n+        } else {\n+            start_time = 1199145601; // January 1, 2008\n+            timeout = 1230767999;    // December 31, 2008\n+            never_active_test = true;\n+        }\n+    }\n+\n+    TestConditionChecker checker(start_time, timeout, period, threshold, bit);\n+\n+    // Early exit if the versions don't signal sensibly for the deployment\n+    if (!checker.Condition(ver_signal)) return;\n+    if (checker.Condition(ver_nosignal)) return;\n+    if (ver_nosignal < 0) return;\n+\n+    // TOP_BITS should ensure version will be positive\n+    assert(ver_signal > 0);\n+\n+    // Now that we have chosen time and versions, setup to mine blocks\n+    Blocks blocks(block_start_time, interval, ver_signal, ver_nosignal);\n+\n+    /* Strategy:\n+     *  * we will mine a final period worth of blocks, with\n+     *    randomised signalling according to a mask\n+     *  * but before we mine those blocks, we will mine some\n+     *    randomised number of prior periods; with either all\n+     *    or no blocks in the period signalling\n+     *\n+     * We establish the mask first, then consume \"bools\" until\n+     * we run out of fuzz data to work out how many prior periods\n+     * there are and which ones will signal.\n+     */\n+\n+    // establish the mask\n+    const uint32_t signalling_mask = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+\n+    // mine prior periods\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        // all blocks in these periods either do or don't signal\n+        bool signal = fuzzed_data_provider.ConsumeBool();\n+        for (int b = 0; b < period; ++b) {\n+            blocks.mine_block(signal);\n+        }\n+\n+        // don't risk exceeding max_blocks or times may wrap around\n+        if (blocks.size() + period*2 > max_blocks) break;\n+    }\n+    // NOTE: fuzzed_data_provider may be fully consumed at this point and should not be used further\n+\n+    // now we mine the final period and check that everything looks sane\n+\n+    // count the number of signalling blocks\n+    int blocks_sig = 0;\n+\n+    // get the info for the first block of the period\n+    CBlockIndex* prev = blocks.tip();\n+    const int exp_since = checker.GetStateSinceHeightFor(prev);\n+    const ThresholdState exp_state = checker.GetStateFor(prev);\n+    BIP9Stats last_stats = checker.GetStateStatisticsFor(prev);\n+\n+    int prev_next_height = (prev == nullptr ? 0 : prev->nHeight + 1);\n+    assert(exp_since <= prev_next_height);\n+\n+    // mine (period-1) blocks and check state\n+    for (int b = 1; b < period; ++b) {\n+        const bool signal = (signalling_mask >> (b % 32)) & 1;\n+        if (signal) ++blocks_sig;\n+\n+        CBlockIndex* current_block = blocks.mine_block(signal);\n+\n+        // verify that signalling attempt was interpreted correctly\n+        assert(checker.Condition(current_block) == signal);\n+\n+        // state and since don't change within the period\n+        const ThresholdState state = checker.GetStateFor(current_block);\n+        const int since = checker.GetStateSinceHeightFor(current_block);\n+        assert(state == exp_state);\n+        assert(since == exp_since);\n+\n+        // GetStateStatistics may crash when state is not STARTED\n+        if (state != ThresholdState::STARTED) continue;\n+\n+        // check that after mining this block stats change as expected\n+        const BIP9Stats stats = checker.GetStateStatisticsFor(current_block);\n+        assert(stats.period == period);\n+        assert(stats.threshold == threshold);\n+        assert(stats.elapsed == b);\n+        assert(stats.count == last_stats.count + (signal ? 1 : 0));\n+        assert(stats.possible == (stats.count + period >= stats.elapsed + threshold));\n+        last_stats = stats;\n+    }\n+\n+    if (exp_state == ThresholdState::STARTED) {\n+        // double check that stats.possible is sane\n+        if (blocks_sig >= threshold - 1) assert(last_stats.possible);\n+    }\n+\n+    // mine the final block\n+    bool signal = (signalling_mask >> (period % 32)) & 1;\n+    if (signal) ++blocks_sig;\n+    CBlockIndex* current_block = blocks.mine_block(signal);\n+    assert(checker.Condition(current_block) == signal);\n+\n+    // GetStateStatistics is safe on a period boundary\n+    // and has progressed to a new period\n+    const BIP9Stats stats = checker.GetStateStatisticsFor(current_block);\n+    assert(stats.period == period);\n+    assert(stats.threshold == threshold);\n+    assert(stats.elapsed == 0);\n+    assert(stats.count == 0);\n+    assert(stats.possible == true);\n+\n+    // More interesting is whether the state changed.\n+    const ThresholdState state = checker.GetStateFor(current_block);\n+    const int since = checker.GetStateSinceHeightFor(current_block);\n+\n+    // since is straightforward:\n+    assert(since % period == 0);\n+    assert(0 <= since && since <= current_block->nHeight + 1);\n+    if (state == exp_state) {\n+        assert(since == exp_since);\n+    } else {\n+        assert(since == current_block->nHeight + 1);\n+    }\n+\n+    // state is where everything interesting is\n+    switch (state) {\n+    case ThresholdState::DEFINED:\n+        assert(since == 0);\n+        assert(exp_state == ThresholdState::DEFINED);\n+        assert(current_block->GetMedianTimePast() < checker.m_begin);\n+        assert(current_block->GetMedianTimePast() < checker.m_end);\n+        break;\n+    case ThresholdState::STARTED:\n+        assert(current_block->GetMedianTimePast() >= checker.m_begin);\n+        assert(current_block->GetMedianTimePast() < checker.m_end);\n+        if (exp_state == ThresholdState::STARTED) {\n+            assert(blocks_sig < threshold);\n+        } else {\n+            assert(exp_state == ThresholdState::DEFINED);\n+        }\n+        break;\n+    case ThresholdState::LOCKED_IN:\n+        assert(exp_state == ThresholdState::STARTED);\n+        assert(current_block->GetMedianTimePast() < checker.m_end);\n+        assert(blocks_sig >= threshold);\n+        break;\n+    case ThresholdState::ACTIVE:\n+        assert(exp_state == ThresholdState::ACTIVE || exp_state == ThresholdState::LOCKED_IN);\n+        break;\n+    case ThresholdState::FAILED:\n+        assert(current_block->GetMedianTimePast() >= checker.m_end);\n+        assert(exp_state != ThresholdState::LOCKED_IN && exp_state != ThresholdState::ACTIVE);\n+        break;\n+    default:\n+        assert(false);\n+    }\n+\n+    if (blocks.size() >= max_periods * period) {\n+        // we chose the timeout (and block times) so that by the time we have this many blocks it's all over\n+        assert(state == ThresholdState::ACTIVE || state == ThresholdState::FAILED);\n+    }\n+\n+    // \"always active\" has additional restrictions\n+    if (always_active_test) {\n+        assert(state == ThresholdState::ACTIVE);\n+        assert(exp_state == ThresholdState::ACTIVE);\n+        assert(since == 0);\n+    } else {\n+        // except for always active, the initial state is always DEFINED\n+        assert(since > 0 || state == ThresholdState::DEFINED);\n+        assert(exp_since > 0 || exp_state == ThresholdState::DEFINED);\n+    }\n+\n+    // \"never active\" does too\n+    if (never_active_test) {\n+        assert(state == ThresholdState::FAILED);\n+        assert(since == period);\n+        if (exp_since == 0) {\n+            assert(exp_state == ThresholdState::DEFINED);\n+        } else {\n+            assert(exp_state == ThresholdState::FAILED);\n+        }\n+    }\n+}"
      },
      {
        "sha": "3172f119bd4f6a11936fe5f9f14f9580bbb23ce6",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -9,7 +9,6 @@\n #include <cstdint>\n #include <net.h>\n #include <netbase.h>\n-#include <optional.h>\n #include <serialize.h>\n #include <span.h>\n #include <streams.h>\n@@ -24,6 +23,7 @@\n #include <algorithm>\n #include <ios>\n #include <memory>\n+#include <optional>\n #include <string>\n \n using namespace std::literals;\n@@ -827,7 +827,7 @@ std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_c\n bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId>& node_ids, FastRandomContext& random_context)\n {\n     Shuffle(candidates.begin(), candidates.end(), random_context);\n-    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    const std::optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n     if (!evicted_node_id) {\n         return false;\n     }"
      },
      {
        "sha": "98a322eae56aebe0cc0ee891a059fe2bbed73527",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -7,7 +7,6 @@\n #include <clientversion.h>\n #include <hash.h> // For Hash()\n #include <key.h>  // For CKey\n-#include <optional.h>\n #include <sync.h>\n #include <test/util/logging.h>\n #include <test/util/setup_common.h>\n@@ -23,6 +22,7 @@\n #include <util/vector.h>\n \n #include <array>\n+#include <optional>\n #include <stdint.h>\n #include <string.h>\n #include <thread>\n@@ -228,9 +228,9 @@ class CheckValueTest : public TestChain100Setup\n         bool default_int = false;\n         bool default_bool = false;\n         const char* string_value = nullptr;\n-        Optional<int64_t> int_value;\n-        Optional<bool> bool_value;\n-        Optional<std::vector<std::string>> list_value;\n+        std::optional<int64_t> int_value;\n+        std::optional<bool> bool_value;\n+        std::optional<std::vector<std::string>> list_value;\n         const char* error = nullptr;\n \n         explicit Expect(util::SettingsValue s) : setting(std::move(s)) {}"
      },
      {
        "sha": "faccd1ade0bbf5957f9bbc809ff7a6119b9feb7a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -8,7 +8,6 @@\n #include <consensus/consensus.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n-#include <optional.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/settings.h>\n@@ -19,6 +18,8 @@\n #include <validation.h>\n #include <validationinterface.h>\n \n+#include <optional>\n+\n CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, unsigned int _entryHeight,\n                                  bool _spendsCoinbase, int64_t _sigOpsCost, LockPoints lp)\n@@ -159,7 +160,7 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         // GetMemPoolParents() is only valid for entries in the mempool, so we\n         // iterate mapTx to find parents.\n         for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            Optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n+            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n             if (piter) {\n                 staged_ancestors.insert(**piter);\n                 if (staged_ancestors.size() + 1 > limitAncestorCount) {\n@@ -890,11 +891,11 @@ const CTransaction* CTxMemPool::GetConflictTx(const COutPoint& prevout) const\n     return it == mapNextTx.end() ? nullptr : it->second;\n }\n \n-Optional<CTxMemPool::txiter> CTxMemPool::GetIter(const uint256& txid) const\n+std::optional<CTxMemPool::txiter> CTxMemPool::GetIter(const uint256& txid) const\n {\n     auto it = mapTx.find(txid);\n     if (it != mapTx.end()) return it;\n-    return Optional<txiter>{};\n+    return {};\n }\n \n CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) const"
      },
      {
        "sha": "9d4ea760e7e24fd87e1a1d06b7f2d0a3f2e525df",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <atomic>\n #include <map>\n+#include <optional>\n #include <set>\n #include <string>\n #include <utility>\n@@ -16,7 +17,6 @@\n #include <amount.h>\n #include <coins.h>\n #include <indirectmap.h>\n-#include <optional.h>\n #include <policy/feerate.h>\n #include <primitives/transaction.h>\n #include <random.h>\n@@ -644,7 +644,7 @@ class CTxMemPool\n     const CTransaction* GetConflictTx(const COutPoint& prevout) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Returns an iterator to the given hash, if found */\n-    Optional<txiter> GetIter(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    std::optional<txiter> GetIter(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Translate a set of hashes into a set of pool iterators to avoid repeated lookups */\n     setEntries GetIterSet(const std::set<uint256>& hashes) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n@@ -841,7 +841,7 @@ class CTxMemPool\n         return m_epoch.visited(it->m_epoch_marker);\n     }\n \n-    bool visited(Optional<txiter> it) const EXCLUSIVE_LOCKS_REQUIRED(cs, m_epoch)\n+    bool visited(std::optional<txiter> it) const EXCLUSIVE_LOCKS_REQUIRED(cs, m_epoch)\n     {\n         assert(m_epoch.guarded()); // verify guard even when it==nullopt\n         return !it || visited(*it);"
      },
      {
        "sha": "0b83a76504ad88b93dbe66f43b7367720087b5f1",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -315,7 +315,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         if (key[0] != '-') {\n             if (!m_accept_any_command && m_command.empty()) {\n                 // The first non-dash arg is a registered command\n-                Optional<unsigned int> flags = GetArgFlags(key);\n+                std::optional<unsigned int> flags = GetArgFlags(key);\n                 if (!flags || !(*flags & ArgsManager::COMMAND)) {\n                     error = strprintf(\"Invalid command '%s'\", argv[i]);\n                     return false;\n@@ -337,7 +337,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         key.erase(0, 1);\n         std::string section;\n         util::SettingsValue value = InterpretOption(section, key, val);\n-        Optional<unsigned int> flags = GetArgFlags('-' + key);\n+        std::optional<unsigned int> flags = GetArgFlags('-' + key);\n \n         // Unknown command line options and command line options with dot\n         // characters (which are returned from InterpretOption with nonempty\n@@ -363,7 +363,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n     return success;\n }\n \n-Optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) const\n+std::optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) const\n {\n     LOCK(cs_args);\n     for (const auto& arg_map : m_available_args) {\n@@ -372,7 +372,7 @@ Optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) const\n             return search->second.m_flags;\n         }\n     }\n-    return nullopt;\n+    return std::nullopt;\n }\n \n std::optional<const ArgsManager::Command> ArgsManager::GetCommand() const\n@@ -874,7 +874,7 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n         std::string section;\n         std::string key = option.first;\n         util::SettingsValue value = InterpretOption(section, key, option.second);\n-        Optional<unsigned int> flags = GetArgFlags('-' + key);\n+        std::optional<unsigned int> flags = GetArgFlags('-' + key);\n         if (flags) {\n             if (!CheckValid(key, value, *flags, error)) {\n                 return false;\n@@ -1034,7 +1034,7 @@ void ArgsManager::logArgsPrefix(\n     std::string section_str = section.empty() ? \"\" : \"[\" + section + \"] \";\n     for (const auto& arg : args) {\n         for (const auto& value : arg.second) {\n-            Optional<unsigned int> flags = GetArgFlags('-' + arg.first);\n+            std::optional<unsigned int> flags = GetArgFlags('-' + arg.first);\n             if (flags) {\n                 std::string value_str = (*flags & SENSITIVE) ? \"****\" : value.write();\n                 LogPrintf(\"%s %s%s=%s\\n\", prefix, section_str, arg.first, value_str);"
      },
      {
        "sha": "291f3f5541374bc210082ac05beda6736efd0f2c",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -19,7 +19,6 @@\n #include <compat/assumptions.h>\n #include <fs.h>\n #include <logging.h>\n-#include <optional.h>\n #include <sync.h>\n #include <tinyformat.h>\n #include <util/settings.h>\n@@ -28,6 +27,7 @@\n \n #include <exception>\n #include <map>\n+#include <optional>\n #include <set>\n #include <stdint.h>\n #include <string>\n@@ -375,7 +375,7 @@ class ArgsManager\n      * Return Flags for known arg.\n      * Return nullopt for unknown arg.\n      */\n-    Optional<unsigned int> GetArgFlags(const std::string& name) const;\n+    std::optional<unsigned int> GetArgFlags(const std::string& name) const;\n \n     /**\n      * Read and update settings file with saved settings. This needs to be"
      },
      {
        "sha": "4c091cd2e69e82ab58952538cca510a409dcf32b",
        "filename": "src/util/tokenpipe.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/util/tokenpipe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/util/tokenpipe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/tokenpipe.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -9,6 +9,7 @@\n \n #include <errno.h>\n #include <fcntl.h>\n+#include <optional>\n #include <unistd.h>\n \n TokenPipeEnd TokenPipe::TakeReadEnd()"
      },
      {
        "sha": "74df13f462e0eb77d342ba932231c5586e820d45",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -23,7 +23,6 @@\n #include <logging/timer.h>\n #include <node/coinstats.h>\n #include <node/ui_interface.h>\n-#include <optional.h>\n #include <policy/policy.h>\n #include <policy/settings.h>\n #include <pow.h>\n@@ -50,6 +49,7 @@\n #include <validationinterface.h>\n #include <warnings.h>\n \n+#include <optional>\n #include <string>\n \n #include <boost/algorithm/string/replace.hpp>\n@@ -5175,7 +5175,7 @@ double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex *pin\n     return std::min<double>(pindex->nChainTx / fTxTotal, 1.0);\n }\n \n-Optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n+std::optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n     LOCK(::cs_main);\n     if (m_active_chainstate != nullptr &&\n             !m_active_chainstate->m_from_snapshot_blockhash.IsNull()) {"
      },
      {
        "sha": "2ff5f4ac87da0ddb14140132529487288420c8d7",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -17,7 +17,6 @@\n #include <crypto/common.h> // for ReadLE64\n #include <fs.h>\n #include <node/utxo_snapshot.h>\n-#include <optional.h>\n #include <policy/feerate.h>\n #include <protocol.h> // For CMessageHeader::MessageStartChars\n #include <script/script_error.h>\n@@ -32,6 +31,7 @@\n #include <atomic>\n #include <map>\n #include <memory>\n+#include <optional>\n #include <set>\n #include <stdint.h>\n #include <string>\n@@ -205,8 +205,7 @@ struct MempoolAcceptResult {\n \n     /** Constructor for failure case */\n     explicit MempoolAcceptResult(TxValidationState state)\n-        : m_result_type(ResultType::INVALID),\n-        m_state(state), m_replaced_transactions(nullopt), m_base_fees(nullopt) {\n+        : m_result_type(ResultType::INVALID), m_state(state) {\n             Assume(!state.IsValid()); // Can be invalid or error\n         }\n \n@@ -924,7 +923,7 @@ class ChainstateManager\n \n     bool IsSnapshotActive() const;\n \n-    Optional<uint256> SnapshotBlockhash() const;\n+    std::optional<uint256> SnapshotBlockhash() const;\n \n     //! Is there a snapshot in use and has it been fully validated?\n     bool IsSnapshotValidated() const { return m_snapshot_validated; }"
      },
      {
        "sha": "d25a3fb3fa1fe5bf57a6628c905be629a377de5f",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -5,13 +5,14 @@\n #ifndef BITCOIN_WALLET_COINCONTROL_H\n #define BITCOIN_WALLET_COINCONTROL_H\n \n-#include <optional.h>\n #include <outputtype.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <primitives/transaction.h>\n #include <script/standard.h>\n \n+#include <optional>\n+\n const int DEFAULT_MIN_DEPTH = 0;\n const int DEFAULT_MAX_DEPTH = 9999999;\n \n@@ -25,7 +26,7 @@ class CCoinControl\n     //! Custom change destination, if not set an address is generated\n     CTxDestination destChange;\n     //! Override the default change type if set, ignored if destChange is set\n-    Optional<OutputType> m_change_type;\n+    std::optional<OutputType> m_change_type;\n     //! If false, only selected inputs are used\n     bool m_add_inputs;\n     //! If false, allows unselected inputs, but requires all selected inputs be used\n@@ -35,11 +36,11 @@ class CCoinControl\n     //! Override automatic min/max checks on fee, m_feerate must be set if true\n     bool fOverrideFeeRate;\n     //! Override the wallet's m_pay_tx_fee if set\n-    Optional<CFeeRate> m_feerate;\n+    std::optional<CFeeRate> m_feerate;\n     //! Override the default confirmation target if set\n-    Optional<unsigned int> m_confirm_target;\n+    std::optional<unsigned int> m_confirm_target;\n     //! Override the wallet's m_signal_rbf if set\n-    Optional<bool> m_signal_bip125_rbf;\n+    std::optional<bool> m_signal_bip125_rbf;\n     //! Avoid partial use of funds sent to a given address\n     bool m_avoid_partial_spends;\n     //! Forbids inclusion of dirty (previously used) addresses"
      },
      {
        "sha": "5a18308a733c99265c51ebbf94f28e12900350bb",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -4,11 +4,12 @@\n \n #include <wallet/coinselection.h>\n \n-#include <optional.h>\n #include <policy/feerate.h>\n #include <util/system.h>\n #include <util/moneystr.h>\n \n+#include <optional>\n+\n // Descending order comparator\n struct {\n     bool operator()(const OutputGroup& a, const OutputGroup& b) const\n@@ -222,7 +223,7 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n     nValueRet = 0;\n \n     // List of values less than target\n-    Optional<OutputGroup> lowest_larger;\n+    std::optional<OutputGroup> lowest_larger;\n     std::vector<OutputGroup> applicable_groups;\n     CAmount nTotalLower = 0;\n "
      },
      {
        "sha": "7a0d3d2e07ad116b86ececbdde6bb9f87ce388f3",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -8,12 +8,12 @@\n \n #include <clientversion.h>\n #include <fs.h>\n-#include <optional.h>\n #include <streams.h>\n #include <support/allocators/secure.h>\n \n #include <atomic>\n #include <memory>\n+#include <optional>\n #include <string>\n \n struct bilingual_str;\n@@ -203,7 +203,7 @@ enum class DatabaseFormat {\n struct DatabaseOptions {\n     bool require_existing = false;\n     bool require_create = false;\n-    Optional<DatabaseFormat> require_format;\n+    std::optional<DatabaseFormat> require_format;\n     uint64_t create_flags = 0;\n     SecureString create_passphrase;\n     bool verify = true;"
      },
      {
        "sha": "4543f6fb4cc25b3554b9a44d426df7cfd60c7af0",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -154,7 +154,7 @@ void UnloadWallets()\n         auto wallet = wallets.back();\n         wallets.pop_back();\n         std::vector<bilingual_str> warnings;\n-        RemoveWallet(wallet, nullopt, warnings);\n+        RemoveWallet(wallet, std::nullopt, warnings);\n         UnloadWallet(std::move(wallet));\n     }\n }"
      },
      {
        "sha": "0737e68cf3a633fb4b294f7c9276b0853e285833",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -1788,7 +1788,7 @@ RPCHelpMan listdescriptors()\n         const bool active = active_spk_mans.count(desc_spk_man) != 0;\n         spk.pushKV(\"active\", active);\n         const auto& type = wallet_descriptor.descriptor->GetOutputType();\n-        if (active && type != nullopt) {\n+        if (active && type) {\n             spk.pushKV(\"internal\", wallet->GetScriptPubKeyMan(*type, true) == desc_spk_man);\n         }\n         if (wallet_descriptor.descriptor->IsRange()) {"
      },
      {
        "sha": "696c74d6659e9a895aa281dd47a9b2f6d9aef89a",
        "filename": "src/wallet/rpcsigner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/rpcsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/rpcsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -32,9 +32,6 @@ static RPCHelpMan enumeratesigners()\n         },\n         RPCExamples{\"\"},\n         [](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n-            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-            if (!wallet) return NullUniValue;\n-\n             const std::string command = gArgs.GetArg(\"-signer\", \"\");\n             if (command == \"\") throw JSONRPCError(RPC_WALLET_ERROR, \"Error: restart bitcoind with -signer=<cmd>\");\n             std::string chain = gArgs.GetChainName();"
      },
      {
        "sha": "6dc8d1de422c0bb23d70d388e3eea60778efee67",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -8,7 +8,6 @@\n #include <interfaces/chain.h>\n #include <key_io.h>\n #include <node/context.h>\n-#include <optional.h>\n #include <outputtype.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n@@ -38,6 +37,7 @@\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n \n+#include <optional>\n #include <stdint.h>\n \n #include <univalue.h>\n@@ -219,7 +219,7 @@ static void SetFeeEstimateMode(const CWallet& wallet, CCoinControl& cc, const Un\n         cc.m_feerate = CFeeRate(AmountFromValue(fee_rate), COIN);\n         if (override_min_fee) cc.fOverrideFeeRate = true;\n         // Default RBF to true for explicit fee_rate, if unset.\n-        if (cc.m_signal_bip125_rbf == nullopt) cc.m_signal_bip125_rbf = true;\n+        if (!cc.m_signal_bip125_rbf) cc.m_signal_bip125_rbf = true;\n         return;\n     }\n     if (!estimate_mode.isNull() && !FeeModeFromString(estimate_mode.get_str(), cc.m_fee_mode)) {\n@@ -1564,8 +1564,8 @@ static RPCHelpMan listsinceblock()\n \n     LOCK(wallet.cs_wallet);\n \n-    Optional<int> height;    // Height of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n-    Optional<int> altheight; // Height of the specified block, even if it's in a deactivated chain.\n+    std::optional<int> height;    // Height of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n+    std::optional<int> altheight; // Height of the specified block, even if it's in a deactivated chain.\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n \n@@ -2590,7 +2590,7 @@ static RPCHelpMan loadwallet()\n     options.require_existing = true;\n     bilingual_str error;\n     std::vector<bilingual_str> warnings;\n-    Optional<bool> load_on_start = request.params[1].isNull() ? nullopt : Optional<bool>(request.params[1].get_bool());\n+    std::optional<bool> load_on_start = request.params[1].isNull() ? std::nullopt : std::optional<bool>(request.params[1].get_bool());\n     std::shared_ptr<CWallet> const wallet = LoadWallet(*context.chain, name, load_on_start, options, status, error, warnings);\n     if (!wallet) {\n         // Map bad format to not found, since bad format is returned when the\n@@ -2764,7 +2764,7 @@ static RPCHelpMan createwallet()\n     options.create_flags = flags;\n     options.create_passphrase = passphrase;\n     bilingual_str error;\n-    Optional<bool> load_on_start = request.params[6].isNull() ? nullopt : Optional<bool>(request.params[6].get_bool());\n+    std::optional<bool> load_on_start = request.params[6].isNull() ? std::nullopt : std::optional<bool>(request.params[6].get_bool());\n     std::shared_ptr<CWallet> wallet = CreateWallet(*context.chain, request.params[0].get_str(), load_on_start, options, status, error, warnings);\n     if (!wallet) {\n         RPCErrorCode code = status == DatabaseStatus::FAILED_ENCRYPT ? RPC_WALLET_ENCRYPTION_FAILED : RPC_WALLET_ERROR;\n@@ -2816,7 +2816,7 @@ static RPCHelpMan unloadwallet()\n     // Note that any attempt to load the same wallet would fail until the wallet\n     // is destroyed (see CheckUniqueFileid).\n     std::vector<bilingual_str> warnings;\n-    Optional<bool> load_on_start = request.params[1].isNull() ? nullopt : Optional<bool>(request.params[1].get_bool());\n+    std::optional<bool> load_on_start = request.params[1].isNull() ? std::nullopt : std::optional<bool>(request.params[1].get_bool());\n     if (!RemoveWallet(wallet, load_on_start, warnings)) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Requested wallet already unloaded\");\n     }\n@@ -3587,7 +3587,7 @@ static RPCHelpMan rescanblockchain()\n     }\n \n     int start_height = 0;\n-    Optional<int> stop_height;\n+    std::optional<int> stop_height;\n     uint256 start_block;\n     {\n         LOCK(pwallet->cs_wallet);"
      },
      {
        "sha": "54319ca662225be7fa4c4bbe8ccd13b12773b6cc",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -16,6 +16,8 @@\n #include <wallet/external_signer.h>\n #include <wallet/scriptpubkeyman.h>\n \n+#include <optional>\n+\n //! Value for the first BIP 32 hardened derivation. Can be used as a bit mask and as a value. See BIP 32 for more details.\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n \n@@ -1607,7 +1609,7 @@ bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDest\n     {\n         LOCK(cs_desc_man);\n         assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n-        Optional<OutputType> desc_addr_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        std::optional<OutputType> desc_addr_type = m_wallet_descriptor.descriptor->GetOutputType();\n         assert(desc_addr_type);\n         if (type != *desc_addr_type) {\n             throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n@@ -1629,7 +1631,7 @@ bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDest\n             return false;\n         }\n \n-        Optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        std::optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n         if (out_script_type && out_script_type == type) {\n             ExtractDestination(scripts_temp[0], dest);\n         } else {"
      },
      {
        "sha": "7eff6e592da7e3071bd0ed5f14a9052659f11166",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -35,7 +35,10 @@ static CAmount balance = 0;\n CoinEligibilityFilter filter_standard(1, 6, 0);\n CoinEligibilityFilter filter_confirmed(1, 1, 0);\n CoinEligibilityFilter filter_standard_extra(6, 6, 0);\n-CoinSelectionParams coin_selection_params(false, 0, 0, CFeeRate(0), 0, false);\n+CoinSelectionParams coin_selection_params(/* use_bnb= */ false, /* change_output_size= */ 0,\n+                                          /* change_spend_size= */ 0, /* effective_feerate= */ CFeeRate(0),\n+                                          /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n+                                          /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n \n static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n {\n@@ -269,7 +272,10 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     }\n \n     // Make sure that effective value is working in SelectCoinsMinConf when BnB is used\n-    CoinSelectionParams coin_selection_params_bnb(true, 0, 0, CFeeRate(3000), 0, false);\n+    CoinSelectionParams coin_selection_params_bnb(/* use_bnb= */ true, /* change_output_size= */ 0,\n+                                                  /* change_spend_size= */ 0, /* effective_feerate= */ CFeeRate(3000),\n+                                                  /* long_term_feerate= */ CFeeRate(1000), /* discard_feerate= */ CFeeRate(1000),\n+                                                  /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n     CoinSet setCoinsRet;\n     CAmount nValueRet;\n     bool bnb_used;\n@@ -301,7 +307,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n         CCoinControl coin_control;\n         coin_control.fAllowOtherInputs = true;\n         coin_control.Select(COutPoint(vCoins.at(0).tx->GetHash(), vCoins.at(0).i));\n-        coin_selection_params_bnb.effective_fee = CFeeRate(0);\n+        coin_selection_params_bnb.m_effective_feerate = CFeeRate(0);\n         BOOST_CHECK(wallet->SelectCoins(vCoins, 10 * CENT, setCoinsRet, nValueRet, coin_control, coin_selection_params_bnb, bnb_used));\n         BOOST_CHECK(bnb_used);\n         BOOST_CHECK(coin_selection_params_bnb.use_bnb);\n@@ -639,8 +645,14 @@ BOOST_AUTO_TEST_CASE(SelectCoins_test)\n         CAmount target = rand.randrange(balance - 1000) + 1000;\n \n         // Perform selection\n-        CoinSelectionParams coin_selection_params_knapsack(false, 34, 148, CFeeRate(0), 0, false);\n-        CoinSelectionParams coin_selection_params_bnb(true, 34, 148, CFeeRate(0), 0, false);\n+        CoinSelectionParams coin_selection_params_knapsack(/* use_bnb= */ false, /* change_output_size= */ 34,\n+                                                           /* change_spend_size= */ 148, /* effective_feerate= */ CFeeRate(0),\n+                                                           /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n+                                                           /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n+        CoinSelectionParams coin_selection_params_bnb(/* use_bnb= */ true, /* change_output_size= */ 34,\n+                                                      /* change_spend_size= */ 148, /* effective_feerate= */ CFeeRate(0),\n+                                                      /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n+                                                      /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n         CoinSet out_set;\n         CAmount out_value = 0;\n         bool bnb_used = false;"
      },
      {
        "sha": "30cc4520657a86ffb5168ee223d5f70402f920f4",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -228,7 +228,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n                       \"downloading and rescanning the relevant blocks (see -reindex and -rescan \"\n                       \"options).\\\"}},{\\\"success\\\":true}]\",\n                               0, oldTip->GetBlockTimeMax(), TIMESTAMP_WINDOW));\n-        RemoveWallet(wallet, nullopt);\n+        RemoveWallet(wallet, std::nullopt);\n     }\n }\n \n@@ -271,7 +271,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         request.params.push_back(backup_file);\n \n         ::dumpwallet().HandleRequest(request);\n-        RemoveWallet(wallet, nullopt);\n+        RemoveWallet(wallet, std::nullopt);\n     }\n \n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n@@ -288,7 +288,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         AddWallet(wallet);\n         wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n         ::importwallet().HandleRequest(request);\n-        RemoveWallet(wallet, nullopt);\n+        RemoveWallet(wallet, std::nullopt);\n \n         BOOST_CHECK_EQUAL(wallet->mapWallet.size(), 3U);\n         BOOST_CHECK_EQUAL(m_coinbase_txns.size(), 103U);"
      },
      {
        "sha": "d04279ab5e325f9410440ec3102516d73d283d57",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 39,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -13,7 +13,6 @@\n #include <interfaces/wallet.h>\n #include <key.h>\n #include <key_io.h>\n-#include <optional.h>\n #include <outputtype.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n@@ -40,6 +39,7 @@\n \n #include <algorithm>\n #include <assert.h>\n+#include <optional>\n \n #include <boost/algorithm/string/replace.hpp>\n \n@@ -84,10 +84,10 @@ bool RemoveWalletSetting(interfaces::Chain& chain, const std::string& wallet_nam\n \n static void UpdateWalletSetting(interfaces::Chain& chain,\n                                 const std::string& wallet_name,\n-                                Optional<bool> load_on_startup,\n+                                std::optional<bool> load_on_startup,\n                                 std::vector<bilingual_str>& warnings)\n {\n-    if (load_on_startup == nullopt) return;\n+    if (!load_on_startup) return;\n     if (load_on_startup.value() && !AddWalletSetting(chain, wallet_name)) {\n         warnings.emplace_back(Untranslated(\"Wallet load on startup setting could not be updated, so wallet may not be loaded next node startup.\"));\n     } else if (!load_on_startup.value() && !RemoveWalletSetting(chain, wallet_name)) {\n@@ -107,7 +107,7 @@ bool AddWallet(const std::shared_ptr<CWallet>& wallet)\n     return true;\n }\n \n-bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, Optional<bool> load_on_start, std::vector<bilingual_str>& warnings)\n+bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, std::optional<bool> load_on_start, std::vector<bilingual_str>& warnings)\n {\n     assert(wallet);\n \n@@ -127,7 +127,7 @@ bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, Optional<bool> load_on\n     return true;\n }\n \n-bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, Optional<bool> load_on_start)\n+bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, std::optional<bool> load_on_start)\n {\n     std::vector<bilingual_str> warnings;\n     return RemoveWallet(wallet, load_on_start, warnings);\n@@ -204,7 +204,7 @@ void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n }\n \n namespace {\n-std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const std::string& name, std::optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     try {\n         std::unique_ptr<WalletDatabase> database = MakeWalletDatabase(name, options, status, error);\n@@ -234,7 +234,7 @@ std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const std:\n }\n } // namespace\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     auto result = WITH_LOCK(g_loading_wallet_mutex, return g_loading_wallet_set.insert(name));\n     if (!result.second) {\n@@ -247,7 +247,7 @@ std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string&\n     return wallet;\n }\n \n-std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, std::optional<bool> load_on_start, DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     uint64_t wallet_creation_flags = options.create_flags;\n     const SecureString& passphrase = options.create_passphrase;\n@@ -1771,7 +1771,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, int start_height, Optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, int start_height, std::optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n     int64_t start_time = GetTimeMillis();\n@@ -2399,26 +2399,20 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     nValueRet = 0;\n \n     if (coin_selection_params.use_bnb) {\n-        // Get long term estimate\n-        FeeCalculation feeCalc;\n-        CCoinControl temp;\n-        temp.m_confirm_target = 1008;\n-        CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n-\n         // Get the feerate for effective value.\n         // When subtracting the fee from the outputs, we want the effective feerate to be 0\n         CFeeRate effective_feerate{0};\n         if (!coin_selection_params.m_subtract_fee_outputs) {\n-            effective_feerate = coin_selection_params.effective_fee;\n+            effective_feerate = coin_selection_params.m_effective_feerate;\n         }\n \n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, long_term_feerate, eligibility_filter, true /* positive_only */);\n+        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, coin_selection_params.m_long_term_feerate, eligibility_filter, true /* positive_only */);\n \n         // Calculate cost of change\n-        CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+        CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n \n         // Calculate the fees for things that aren't inputs\n-        CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+        CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n         bnb_used = true;\n         return SelectCoinsBnB(groups, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n     } else {\n@@ -2472,7 +2466,7 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             if (coin.m_input_bytes <= 0) {\n                 return false; // Not solvable, can't estimate size for fee\n             }\n-            coin.effective_value = coin.txout.nValue - coin_selection_params.effective_fee.GetFee(coin.m_input_bytes);\n+            coin.effective_value = coin.txout.nValue - coin_selection_params.m_effective_feerate.GetFee(coin.m_input_bytes);\n             if (coin_selection_params.use_bnb) {\n                 value_to_select -= coin.effective_value;\n             } else {\n@@ -2733,7 +2727,7 @@ static uint32_t GetLocktimeForNewTransaction(interfaces::Chain& chain, const uin\n     return locktime;\n }\n \n-OutputType CWallet::TransactionChangeType(const Optional<OutputType>& change_type, const std::vector<CRecipient>& vecSend) const\n+OutputType CWallet::TransactionChangeType(const std::optional<OutputType>& change_type, const std::vector<CRecipient>& vecSend) const\n {\n     // If -changetype is specified, always use that change type.\n     if (change_type) {\n@@ -2840,17 +2834,28 @@ bool CWallet::CreateTransactionInternal(\n             CTxOut change_prototype_txout(0, scriptChange);\n             coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n \n-            CFeeRate discard_rate = GetDiscardRate(*this);\n+            // Set discard feerate\n+            coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), nFeeRateNeeded.ToString(FeeEstimateMode::SAT_VB));\n+            if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n+                return false;\n+            }\n+            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n                 return false;\n             }\n \n+            // Get long term estimate\n+            CCoinControl cc_temp;\n+            cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n+            coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n+\n             nFeeRet = 0;\n             bool pick_new_inputs = true;\n             CAmount nValueIn = 0;\n@@ -2924,7 +2929,6 @@ bool CWallet::CreateTransactionInternal(\n                     } else {\n                         coin_selection_params.change_spend_size = (size_t)change_spend_size;\n                     }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n                     if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n                     {\n                         // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n@@ -2950,7 +2954,7 @@ bool CWallet::CreateTransactionInternal(\n                     // Never create dust outputs; if we would, just\n                     // add the dust to the fee.\n                     // The nChange when BnB is used is always going to go to fees.\n-                    if (IsDust(newTxOut, discard_rate) || bnb_used)\n+                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || bnb_used)\n                     {\n                         nChangePosInOut = -1;\n                         nFeeRet += nChange;\n@@ -2988,13 +2992,7 @@ bool CWallet::CreateTransactionInternal(\n                     return false;\n                 }\n \n-                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n-                if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                    // eventually allow a fallback fee\n-                    error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n-                    return false;\n-                }\n-\n+                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n                 if (nFeeRet >= nFeeNeeded) {\n                     // Reduce fee to only the needed amount if possible. This\n                     // prevents potential overpayment in fees if the coins\n@@ -3008,8 +3006,8 @@ bool CWallet::CreateTransactionInternal(\n                     // change output. Only try this once.\n                     if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n                         unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, nullptr);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n+                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n+                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n                         if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n                             pick_new_inputs = false;\n                             nFeeRet = fee_needed_with_change;\n@@ -4075,13 +4073,13 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n         WalletBatch batch(walletInstance->GetDatabase());\n         CBlockLocator locator;\n         if (batch.ReadBestBlock(locator)) {\n-            if (const Optional<int> fork_height = chain.findLocatorFork(locator)) {\n+            if (const std::optional<int> fork_height = chain.findLocatorFork(locator)) {\n                 rescan_height = *fork_height;\n             }\n         }\n     }\n \n-    const Optional<int> tip_height = chain.getHeight();\n+    const std::optional<int> tip_height = chain.getHeight();\n     if (tip_height) {\n         walletInstance->m_last_block_processed = chain.getBlockHash(*tip_height);\n         walletInstance->m_last_block_processed_height = *tip_height;\n@@ -4115,7 +4113,7 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n \n         // No need to read and scan block if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n-        Optional<int64_t> time_first_key;\n+        std::optional<int64_t> time_first_key;\n         for (auto spk_man : walletInstance->GetAllScriptPubKeyMans()) {\n             int64_t time = spk_man->GetTimeFirstKey();\n             if (!time_first_key || time < *time_first_key) time_first_key = time;"
      },
      {
        "sha": "6031d36b97c570293272c8f3d7d2d01e863a9ef2",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 17,
        "deletions": 11,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -30,6 +30,7 @@\n #include <atomic>\n #include <map>\n #include <memory>\n+#include <optional>\n #include <set>\n #include <stdexcept>\n #include <stdint.h>\n@@ -51,12 +52,12 @@ struct bilingual_str;\n void UnloadWallet(std::shared_ptr<CWallet>&& wallet);\n \n bool AddWallet(const std::shared_ptr<CWallet>& wallet);\n-bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, Optional<bool> load_on_start, std::vector<bilingual_str>& warnings);\n-bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, Optional<bool> load_on_start);\n+bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, std::optional<bool> load_on_start, std::vector<bilingual_str>& warnings);\n+bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, std::optional<bool> load_on_start);\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n std::shared_ptr<CWallet> GetWallet(const std::string& name);\n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings);\n-std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, std::optional<bool> load_on_start, DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings);\n std::unique_ptr<interfaces::Handler> HandleLoadWallet(LoadWalletFn load_wallet);\n std::unique_ptr<WalletDatabase> MakeWalletDatabase(const std::string& name, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error);\n \n@@ -608,17 +609,22 @@ struct CoinSelectionParams\n     bool use_bnb = true;\n     size_t change_output_size = 0;\n     size_t change_spend_size = 0;\n-    CFeeRate effective_fee = CFeeRate(0);\n+    CFeeRate m_effective_feerate;\n+    CFeeRate m_long_term_feerate;\n+    CFeeRate m_discard_feerate;\n     size_t tx_noinputs_size = 0;\n     //! Indicate that we are subtracting the fee from outputs\n     bool m_subtract_fee_outputs = false;\n     bool m_avoid_partial_spends = false;\n \n-    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee, size_t tx_noinputs_size, bool avoid_partial) :\n+    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_feerate,\n+                        CFeeRate long_term_feerate, CFeeRate discard_feerate, size_t tx_noinputs_size, bool avoid_partial) :\n         use_bnb(use_bnb),\n         change_output_size(change_output_size),\n         change_spend_size(change_spend_size),\n-        effective_fee(effective_fee),\n+        m_effective_feerate(effective_feerate),\n+        m_long_term_feerate(long_term_feerate),\n+        m_discard_feerate(discard_feerate),\n         tx_noinputs_size(tx_noinputs_size),\n         m_avoid_partial_spends(avoid_partial)\n     {}\n@@ -923,15 +929,15 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n         //! Unset if no blocks were scanned due to read errors or the chain\n         //! being empty.\n         uint256 last_scanned_block;\n-        Optional<int> last_scanned_height;\n+        std::optional<int> last_scanned_height;\n \n         //! Height of the most recent block that could not be scanned due to\n         //! read errors or pruning. Will be set if status is FAILURE, unset if\n         //! status is SUCCESS, and may or may not be set if status is\n         //! USER_ABORT.\n         uint256 last_failed_block;\n     };\n-    ScanResult ScanForWalletTransactions(const uint256& start_block, int start_height, Optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate);\n+    ScanResult ScanForWalletTransactions(const uint256& start_block, int start_height, std::optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate);\n     void transactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t mempool_sequence) override;\n     void ReacceptWalletTransactions() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void ResendWalletTransactions();\n@@ -946,7 +952,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     Balance GetBalance(int min_depth = 0, bool avoid_reuse = true) const;\n     CAmount GetAvailableBalance(const CCoinControl* coinControl = nullptr) const;\n \n-    OutputType TransactionChangeType(const Optional<OutputType>& change_type, const std::vector<CRecipient>& vecSend) const;\n+    OutputType TransactionChangeType(const std::optional<OutputType>& change_type, const std::vector<CRecipient>& vecSend) const;\n \n     /**\n      * Insert additional inputs into the transaction by\n@@ -1031,7 +1037,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      * (see -changetype option documentation and implementation in\n      * CWallet::TransactionChangeType for details).\n      */\n-    Optional<OutputType> m_default_change_type{};\n+    std::optional<OutputType> m_default_change_type{};\n     /** Absolute maximum transaction fee (in satoshis) used by default for the wallet */\n     CAmount m_default_max_tx_fee{DEFAULT_TRANSACTION_MAXFEE};\n "
      },
      {
        "sha": "3d9248009fdb63e0156f1fa9f1ea08934c8f5543",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -23,6 +23,7 @@\n #include <wallet/wallet.h>\n \n #include <atomic>\n+#include <optional>\n #include <string>\n \n namespace DBKeys {\n@@ -1015,7 +1016,7 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n         return nullptr;\n     }\n \n-    Optional<DatabaseFormat> format;\n+    std::optional<DatabaseFormat> format;\n     if (exists) {\n         if (IsBDBFile(BDBDataFile(path))) {\n             format = DatabaseFormat::BERKELEY;"
      },
      {
        "sha": "e362642f0fa3aace4d9cf51756972f777def4b81",
        "filename": "test/functional/rpc_invalid_address_message.py",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/test/functional/rpc_invalid_address_message.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/test/functional/rpc_invalid_address_message.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalid_address_message.py?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -12,8 +12,12 @@\n )\n \n BECH32_VALID = 'bcrt1qtmp74ayg7p24uslctssvjm06q5phz4yrxucgnv'\n-BECH32_INVALID_SIZE = 'bcrt1sqqpl9r5c'\n-BECH32_INVALID_PREFIX = 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4'\n+BECH32_INVALID_BECH32 = 'bcrt1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqdmchcc'\n+BECH32_INVALID_BECH32M = 'bcrt1qw508d6qejxtdg4y5r3zarvary0c5xw7k35mrzd'\n+BECH32_INVALID_VERSION = 'bcrt130xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqynjegk'\n+BECH32_INVALID_SIZE = 'bcrt1s0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7v8n0nx0muaewav25430mtr'\n+BECH32_INVALID_V0_SIZE = 'bcrt1qw508d6qejxtdg4y5r3zarvary0c5xw7kqqq5k3my'\n+BECH32_INVALID_PREFIX = 'bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7k7grplx'\n \n BASE58_VALID = 'mipcBbFg9gMiCh81Kj8tqqdgoZub1ZJRfn'\n BASE58_INVALID_PREFIX = '17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem'\n@@ -40,6 +44,18 @@ def test_validateaddress(self):\n         assert not info['isvalid']\n         assert_equal(info['error'], 'Invalid prefix for Bech32 address')\n \n+        info = node.validateaddress(BECH32_INVALID_BECH32)\n+        assert not info['isvalid']\n+        assert_equal(info['error'], 'Version 1+ witness address must use Bech32m checksum')\n+\n+        info = node.validateaddress(BECH32_INVALID_BECH32M)\n+        assert not info['isvalid']\n+        assert_equal(info['error'], 'Version 0 witness address must use Bech32 checksum')\n+\n+        info = node.validateaddress(BECH32_INVALID_V0_SIZE)\n+        assert not info['isvalid']\n+        assert_equal(info['error'], 'Invalid Bech32 v0 address data size')\n+\n         info = node.validateaddress(BECH32_VALID)\n         assert info['isvalid']\n         assert 'error' not in info"
      },
      {
        "sha": "861ca2b949bda78d23f122ccf42148dedde7ebb2",
        "filename": "test/functional/test_framework/segwit_addr.py",
        "status": "modified",
        "additions": 37,
        "deletions": 17,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/test/functional/test_framework/segwit_addr.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/test/functional/test_framework/segwit_addr.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/segwit_addr.py?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -2,10 +2,18 @@\n # Copyright (c) 2017 Pieter Wuille\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Reference implementation for Bech32 and segwit addresses.\"\"\"\n+\"\"\"Reference implementation for Bech32/Bech32m and segwit addresses.\"\"\"\n import unittest\n+from enum import Enum\n \n CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n+BECH32_CONST = 1\n+BECH32M_CONST = 0x2bc830a3\n+\n+class Encoding(Enum):\n+    \"\"\"Enumeration type to list the various supported encodings.\"\"\"\n+    BECH32 = 1\n+    BECH32M = 2\n \n \n def bech32_polymod(values):\n@@ -27,38 +35,45 @@ def bech32_hrp_expand(hrp):\n \n def bech32_verify_checksum(hrp, data):\n     \"\"\"Verify a checksum given HRP and converted data characters.\"\"\"\n-    return bech32_polymod(bech32_hrp_expand(hrp) + data) == 1\n-\n+    check = bech32_polymod(bech32_hrp_expand(hrp) + data)\n+    if check == BECH32_CONST:\n+        return Encoding.BECH32\n+    elif check == BECH32M_CONST:\n+        return Encoding.BECH32M\n+    else:\n+        return None\n \n-def bech32_create_checksum(hrp, data):\n+def bech32_create_checksum(encoding, hrp, data):\n     \"\"\"Compute the checksum values given HRP and data.\"\"\"\n     values = bech32_hrp_expand(hrp) + data\n-    polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n+    const = BECH32M_CONST if encoding == Encoding.BECH32M else BECH32_CONST\n+    polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ const\n     return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n \n \n-def bech32_encode(hrp, data):\n-    \"\"\"Compute a Bech32 string given HRP and data values.\"\"\"\n-    combined = data + bech32_create_checksum(hrp, data)\n+def bech32_encode(encoding, hrp, data):\n+    \"\"\"Compute a Bech32 or Bech32m string given HRP and data values.\"\"\"\n+    combined = data + bech32_create_checksum(encoding, hrp, data)\n     return hrp + '1' + ''.join([CHARSET[d] for d in combined])\n \n \n def bech32_decode(bech):\n-    \"\"\"Validate a Bech32 string, and determine HRP and data.\"\"\"\n+    \"\"\"Validate a Bech32/Bech32m string, and determine HRP and data.\"\"\"\n     if ((any(ord(x) < 33 or ord(x) > 126 for x in bech)) or\n             (bech.lower() != bech and bech.upper() != bech)):\n-        return (None, None)\n+        return (None, None, None)\n     bech = bech.lower()\n     pos = bech.rfind('1')\n     if pos < 1 or pos + 7 > len(bech) or len(bech) > 90:\n-        return (None, None)\n+        return (None, None, None)\n     if not all(x in CHARSET for x in bech[pos+1:]):\n-        return (None, None)\n+        return (None, None, None)\n     hrp = bech[:pos]\n     data = [CHARSET.find(x) for x in bech[pos+1:]]\n-    if not bech32_verify_checksum(hrp, data):\n-        return (None, None)\n-    return (hrp, data[:-6])\n+    encoding = bech32_verify_checksum(hrp, data)\n+    if encoding is None:\n+        return (None, None, None)\n+    return (encoding, hrp, data[:-6])\n \n \n def convertbits(data, frombits, tobits, pad=True):\n@@ -86,7 +101,7 @@ def convertbits(data, frombits, tobits, pad=True):\n \n def decode_segwit_address(hrp, addr):\n     \"\"\"Decode a segwit address.\"\"\"\n-    hrpgot, data = bech32_decode(addr)\n+    encoding, hrpgot, data = bech32_decode(addr)\n     if hrpgot != hrp:\n         return (None, None)\n     decoded = convertbits(data[1:], 5, 8, False)\n@@ -96,12 +111,15 @@ def decode_segwit_address(hrp, addr):\n         return (None, None)\n     if data[0] == 0 and len(decoded) != 20 and len(decoded) != 32:\n         return (None, None)\n+    if (data[0] == 0 and encoding != Encoding.BECH32) or (data[0] != 0 and encoding != Encoding.BECH32M):\n+        return (None, None)\n     return (data[0], decoded)\n \n \n def encode_segwit_address(hrp, witver, witprog):\n     \"\"\"Encode a segwit address.\"\"\"\n-    ret = bech32_encode(hrp, [witver] + convertbits(witprog, 8, 5))\n+    encoding = Encoding.BECH32 if witver == 0 else Encoding.BECH32M\n+    ret = bech32_encode(encoding, hrp, [witver] + convertbits(witprog, 8, 5))\n     if decode_segwit_address(hrp, ret) == (None, None):\n         return None\n     return ret\n@@ -119,3 +137,5 @@ def test_python_bech32(addr):\n         # P2WSH\n         test_python_bech32('bcrt1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3xueyj')\n         test_python_bech32('bcrt1qft5p2uhsdcdc3l2ua4ap5qqfg4pjaqlp250x7us7a8qqhrxrxfsqseac85')\n+        # P2TR\n+        test_python_bech32('bcrt1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqc8gma6')"
      },
      {
        "sha": "551eb72720ad6fb00c905b533e172c9bfca917e4",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd9772cb756ddf32b4c186a9ac9eaa5bd852053/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=1bd9772cb756ddf32b4c186a9ac9eaa5bd852053",
        "patch": "@@ -138,13 +138,13 @@ def run_test(self):\n         node.createwallet(wallet_name='watch_only', disable_private_keys=True)\n         wallet_watch_only = node.get_wallet_rpc('watch_only')\n         BECH32_VALID = {\n-            '\u2714\ufe0f_VER15_PROG40': 'bcrt10qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqn2cjv3',\n-            '\u2714\ufe0f_VER16_PROG03': 'bcrt1sqqqqqjq8pdp',\n-            '\u2714\ufe0f_VER16_PROB02': 'bcrt1sqqqqqjq8pv',\n+            '\u2714\ufe0f_VER15_PROG40': 'bcrt10qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqxkg7fn',\n+            '\u2714\ufe0f_VER16_PROG03': 'bcrt1sqqqqq8uhdgr',\n+            '\u2714\ufe0f_VER16_PROB02': 'bcrt1sqqqq4wstyw',\n         }\n         BECH32_INVALID = {\n-            '\u274c_VER15_PROG41': 'bcrt10qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzc7xyq',\n-            '\u274c_VER16_PROB01': 'bcrt1sqqpl9r5c',\n+            '\u274c_VER15_PROG41': 'bcrt1sqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqajlxj8',\n+            '\u274c_VER16_PROB01': 'bcrt1sqq5r4036',\n         }\n         for l in BECH32_VALID:\n             ad = BECH32_VALID[l]"
      }
    ]
  }
]