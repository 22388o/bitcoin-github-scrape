[
  {
    "sha": "6efbcec4ded6116a42d2783c96c60ef0f255a1b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWZiY2VjNGRlZDYxMTZhNDJkMjc4M2M5NmM2MGVmMGYyNTVhMWIy",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2021-06-03T20:38:59Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2021-06-03T21:15:25Z"
      },
      "message": "Protect last outbound HB compact block peer\n\nIf all our high-bandwidth compact block serving peers (BIP 152) stall block\ndownload, then we can be denied a block for (potentially) a long time. As\ninbound connections are much more likely to be adversarial than outbound\nconnections, mitigate this risk by never removing our last outbound HB peer if\nit would be replaced by an inbound.",
      "tree": {
        "sha": "ff6beb7807b1c5b1fa976ffc83dc4795ca4d179b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff6beb7807b1c5b1fa976ffc83dc4795ca4d179b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6efbcec4ded6116a42d2783c96c60ef0f255a1b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6efbcec4ded6116a42d2783c96c60ef0f255a1b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6efbcec4ded6116a42d2783c96c60ef0f255a1b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6efbcec4ded6116a42d2783c96c60ef0f255a1b2/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7dd9ff71b9c2e62fa7ecfb37ee7a5841ad67ecc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7dd9ff71b9c2e62fa7ecfb37ee7a5841ad67ecc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7dd9ff71b9c2e62fa7ecfb37ee7a5841ad67ecc"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2f2614a11a989a1f93bb423d3c070ddcc4423307",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6efbcec4ded6116a42d2783c96c60ef0f255a1b2/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6efbcec4ded6116a42d2783c96c60ef0f255a1b2/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6efbcec4ded6116a42d2783c96c60ef0f255a1b2",
        "patch": "@@ -825,12 +825,27 @@ void PeerManagerImpl::MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid)\n         return;\n     }\n     if (nodestate->fProvidesHeaderAndIDs) {\n+        int num_outbound_hb_peers = 0;\n         for (std::list<NodeId>::iterator it = lNodesAnnouncingHeaderAndIDs.begin(); it != lNodesAnnouncingHeaderAndIDs.end(); it++) {\n             if (*it == nodeid) {\n                 lNodesAnnouncingHeaderAndIDs.erase(it);\n                 lNodesAnnouncingHeaderAndIDs.push_back(nodeid);\n                 return;\n             }\n+            CNodeState *state = State(*it);\n+            if (state != nullptr && !state->m_is_inbound) ++num_outbound_hb_peers;\n+        }\n+        if (nodestate->m_is_inbound) {\n+            // If we're adding an inbound HB peer, make sure we're not removing\n+            // our last outbound HB peer in the process.\n+            if (lNodesAnnouncingHeaderAndIDs.size() >= 3 && num_outbound_hb_peers == 1) {\n+                CNodeState *remove_node = State(lNodesAnnouncingHeaderAndIDs.front());\n+                if (remove_node != nullptr && !remove_node->m_is_inbound) {\n+                    // Put the HB outbound peer in the second slot, so that it\n+                    // doesn't get removed.\n+                    std::swap(lNodesAnnouncingHeaderAndIDs.front(), *std::next(lNodesAnnouncingHeaderAndIDs.begin()));\n+                }\n+            }\n         }\n         m_connman.ForNode(nodeid, [this](CNode* pfrom) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n             AssertLockHeld(::cs_main);"
      }
    ]
  },
  {
    "sha": "30aee2dfe671b347438c1c327c6f79edfacff1ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGFlZTJkZmU2NzFiMzQ3NDM4YzFjMzI3YzZmNzllZGZhY2ZmMWNl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-06-09T01:03:46Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2021-06-10T14:22:13Z"
      },
      "message": "tests: Add test for compact block HB selection",
      "tree": {
        "sha": "b8d34e8c6bc2e91bf9b9e76cc5977e5f633b4775",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8d34e8c6bc2e91bf9b9e76cc5977e5f633b4775"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30aee2dfe671b347438c1c327c6f79edfacff1ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30aee2dfe671b347438c1c327c6f79edfacff1ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30aee2dfe671b347438c1c327c6f79edfacff1ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30aee2dfe671b347438c1c327c6f79edfacff1ce/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6efbcec4ded6116a42d2783c96c60ef0f255a1b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6efbcec4ded6116a42d2783c96c60ef0f255a1b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6efbcec4ded6116a42d2783c96c60ef0f255a1b2"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 98,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a3d30a6f0423f6d25287c0883c903686aeb16d58",
        "filename": "test/functional/p2p_compactblocks_hb.py",
        "status": "added",
        "additions": 97,
        "deletions": 0,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30aee2dfe671b347438c1c327c6f79edfacff1ce/test/functional/p2p_compactblocks_hb.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30aee2dfe671b347438c1c327c6f79edfacff1ce/test/functional/p2p_compactblocks_hb.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks_hb.py?ref=30aee2dfe671b347438c1c327c6f79edfacff1ce",
        "patch": "@@ -0,0 +1,97 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test compact blocks HB selection logic.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+\n+class CompactBlocksConnectionTest(BitcoinTestFramework):\n+    \"\"\"Test class for verifying selection of HB peer connections.\"\"\"\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 6\n+\n+    def peer_info(self, from_node, to_node):\n+        \"\"\"Query from_node for its getpeerinfo about to_node.\"\"\"\n+        for peerinfo in self.nodes[from_node].getpeerinfo():\n+            if \"(testnode%i)\" % to_node in peerinfo['subver']:\n+                return peerinfo\n+        return None\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+        # Start network with everyone disconnected\n+        self.sync_all()\n+\n+    def relay_block_through(self, peer):\n+        \"\"\"Relay a new block through peer peer, and return HB status between 1 and [2,3,4,5].\"\"\"\n+        self.connect_nodes(peer, 0)\n+        self.nodes[0].generate(1)\n+        self.sync_blocks()\n+        self.disconnect_nodes(peer, 0)\n+        status_to = [self.peer_info(1, i)['bip152_hb_to'] for i in range(2, 6)]\n+        status_from = [self.peer_info(i, 1)['bip152_hb_from'] for i in range(2, 6)]\n+        assert_equal(status_to, status_from)\n+        return status_to\n+\n+    def run_test(self):\n+        self.log.info(\"Testing reserved high-bandwidth mode slot for outbound peer...\")\n+\n+        # Connect everyone to node 0, and mine some blocks to get all nodes out of IBD.\n+        for i in range(1, 6):\n+            self.connect_nodes(i, 0)\n+        self.nodes[0].generate(2)\n+        self.sync_blocks()\n+        for i in range(1, 6):\n+            self.disconnect_nodes(i, 0)\n+\n+        # Construct network topology:\n+        # - Node 0 is the block producer\n+        # - Node 1 is the \"target\" node being tested\n+        # - Nodes 2-5 are intermediaries.\n+        #   - Node 1 has an outbound connection to node 2\n+        #   - Node 1 has inbound connections from nodes 3-5\n+        self.connect_nodes(3, 1)\n+        self.connect_nodes(4, 1)\n+        self.connect_nodes(5, 1)\n+        self.connect_nodes(1, 2)\n+\n+        # Mine blocks subsequently relaying through nodes 3,4,5 (inbound to node 1)\n+        for nodeid in range(3, 6):\n+            status = self.relay_block_through(nodeid)\n+            assert_equal(status, [False, nodeid >= 3, nodeid >= 4, nodeid >= 5])\n+\n+        # And again through each. This should not change HB status.\n+        for nodeid in range(3, 6):\n+            status = self.relay_block_through(nodeid)\n+            assert_equal(status, [False, True, True, True])\n+\n+        # Now relay one block through peer 2 (outbound from node 1), so it should take HB status\n+        # from one of the inbounds.\n+        status = self.relay_block_through(2)\n+        assert_equal(status[0], True)\n+        assert_equal(sum(status), 3)\n+\n+        # Now relay again through nodes 3,4,5. Since 2 is outbound, it should remain HB.\n+        for nodeid in range(3, 6):\n+            status = self.relay_block_through(nodeid)\n+            assert status[0]\n+            assert status[nodeid - 2]\n+            assert_equal(sum(status), 3)\n+\n+        # Reconnect peer 2, and retry. Now the three inbounds should be HB again.\n+        self.disconnect_nodes(1, 2)\n+        self.connect_nodes(1, 2)\n+        for nodeid in range(3, 6):\n+            status = self.relay_block_through(nodeid)\n+            assert not status[0]\n+            assert status[nodeid - 2]\n+        assert_equal(status, [False, True, True, True])\n+\n+\n+if __name__ == '__main__':\n+    CompactBlocksConnectionTest().main()"
      },
      {
        "sha": "d009223f12d0e4dd4b8fd243487ffeaf1a15a809",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30aee2dfe671b347438c1c327c6f79edfacff1ce/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30aee2dfe671b347438c1c327c6f79edfacff1ce/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=30aee2dfe671b347438c1c327c6f79edfacff1ce",
        "patch": "@@ -173,6 +173,7 @@\n     'wallet_groups.py --legacy-wallet',\n     'p2p_addrv2_relay.py',\n     'wallet_groups.py --descriptors',\n+    'p2p_compactblocks_hb.py',\n     'p2p_disconnect_ban.py',\n     'rpc_decodescript.py',\n     'rpc_blockchain.py',"
      }
    ]
  }
]