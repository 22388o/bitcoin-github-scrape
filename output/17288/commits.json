[
  {
    "sha": "ede8b7608e115364b5bb12e7f39d662145733de6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGU4Yjc2MDhlMTE1MzY0YjViYjEyZTdmMzlkNjYyMTQ1NzMzZGU2",
    "commit": {
      "author": {
        "name": "JamesC",
        "email": "james.chiangwu@gmail.com",
        "date": "2019-10-25T12:28:08Z"
      },
      "committer": {
        "name": "James Chiang",
        "email": "james.chiangwu@gmail.com",
        "date": "2019-11-03T19:33:49Z"
      },
      "message": "Remove network_event_loop instance in close()\n\nThe asyncio.new_event_loop() instance is now removed from the NetworkThread\nclass during shutdown. This enables a NetworkThread instance to be restarted\nafter being closed. The current NetworkThread class guards against an existing\nnew_event_loop during initialization.",
      "tree": {
        "sha": "250483e2a83385e11534b84225017be1aac3c412",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/250483e2a83385e11534b84225017be1aac3c412"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ede8b7608e115364b5bb12e7f39d662145733de6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ede8b7608e115364b5bb12e7f39d662145733de6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ede8b7608e115364b5bb12e7f39d662145733de6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ede8b7608e115364b5bb12e7f39d662145733de6/comments",
    "author": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "463eab5e1418a592036e7bf9bf46f66fe6462435",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/463eab5e1418a592036e7bf9bf46f66fe6462435",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/463eab5e1418a592036e7bf9bf46f66fe6462435"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a9e669fea9842d7eb8afa8f6fa35a4d9b967b022",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ede8b7608e115364b5bb12e7f39d662145733de6/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ede8b7608e115364b5bb12e7f39d662145733de6/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=ede8b7608e115364b5bb12e7f39d662145733de6",
        "patch": "@@ -478,7 +478,8 @@ def close(self, timeout=10):\n         wait_until(lambda: not self.network_event_loop.is_running(), timeout=timeout)\n         self.network_event_loop.close()\n         self.join(timeout)\n-\n+        # Safe to remove event loop.\n+        NetworkThread.network_event_loop = None\n \n class P2PDataStore(P2PInterface):\n     \"\"\"A P2P data store class."
      }
    ]
  },
  {
    "sha": "6b71241291a184c9ee197bf5f0c7e1414417a0a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjcxMjQxMjkxYTE4NGM5ZWUxOTdiZjVmMGM3ZTE0MTQ0MTdhMGEw",
    "commit": {
      "author": {
        "name": "JamesC",
        "email": "james.chiangwu@gmail.com",
        "date": "2019-10-26T14:34:42Z"
      },
      "committer": {
        "name": "James Chiang",
        "email": "james.chiangwu@gmail.com",
        "date": "2019-11-03T19:34:07Z"
      },
      "message": "Refactor TestFramework main() into setup/shutdown\n\nSetup and shutdown code now moved into dedicated methods. Test \"success\" is\nadded as a BitcoinTestFramework member, which can be accessed outside of main.\nArgument parsing also moved into separate method and called from main.",
      "tree": {
        "sha": "4ddf1ad99af35f0e284a322915547f6d80d6bcd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ddf1ad99af35f0e284a322915547f6d80d6bcd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b71241291a184c9ee197bf5f0c7e1414417a0a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b71241291a184c9ee197bf5f0c7e1414417a0a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b71241291a184c9ee197bf5f0c7e1414417a0a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b71241291a184c9ee197bf5f0c7e1414417a0a0/comments",
    "author": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ede8b7608e115364b5bb12e7f39d662145733de6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ede8b7608e115364b5bb12e7f39d662145733de6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ede8b7608e115364b5bb12e7f39d662145733de6"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 47,
      "deletions": 29
    },
    "files": [
      {
        "sha": "df12a696d4c25c0b738bbe39a8da07e110473179",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 47,
        "deletions": 29,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b71241291a184c9ee197bf5f0c7e1414417a0a0/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b71241291a184c9ee197bf5f0c7e1414417a0a0/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=6b71241291a184c9ee197bf5f0c7e1414417a0a0",
        "patch": "@@ -105,6 +105,34 @@ def __init__(self):\n     def main(self):\n         \"\"\"Main function. This should not be overridden by the subclass test scripts.\"\"\"\n \n+        self.parse_args()\n+\n+        try:\n+            self.setup()\n+            self.run_test()\n+        except JSONRPCException:\n+            self.log.exception(\"JSONRPC error\")\n+            self.success = TestStatus.FAILED\n+        except SkipTest as e:\n+            self.log.warning(\"Test Skipped: %s\" % e.message)\n+            self.success = TestStatus.SKIPPED\n+        except AssertionError:\n+            self.log.exception(\"Assertion failed\")\n+            self.success = TestStatus.FAILED\n+        except KeyError:\n+            self.log.exception(\"Key error\")\n+            self.success = TestStatus.FAILED\n+        except Exception:\n+            self.log.exception(\"Unexpected exception caught during testing\")\n+            self.success = TestStatus.FAILED\n+        except KeyboardInterrupt:\n+            self.log.warning(\"Exiting after keyboard interrupt\")\n+            self.success = TestStatus.FAILED\n+        finally:\n+            exit_code = self.shutdown()\n+            sys.exit(exit_code)\n+\n+    def parse_args(self):\n         parser = argparse.ArgumentParser(usage=\"%(prog)s [options]\")\n         parser.add_argument(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n                             help=\"Leave bitcoinds and test.* datadir on exit or error\")\n@@ -135,6 +163,9 @@ def main(self):\n         self.add_options(parser)\n         self.options = parser.parse_args()\n \n+    def setup(self):\n+        \"\"\"Call this method to start up the test framework object with options set.\"\"\"\n+\n         PortSeed.n = self.options.port_seed\n \n         check_json_precision()\n@@ -181,33 +212,20 @@ def main(self):\n         self.network_thread = NetworkThread()\n         self.network_thread.start()\n \n-        success = TestStatus.FAILED\n+        if self.options.usecli:\n+            if not self.supports_cli:\n+                raise SkipTest(\"--usecli specified but test does not support using CLI\")\n+            self.skip_if_no_cli()\n+        self.skip_test_if_missing_module()\n+        self.setup_chain()\n+        self.setup_network()\n \n-        try:\n-            if self.options.usecli:\n-                if not self.supports_cli:\n-                    raise SkipTest(\"--usecli specified but test does not support using CLI\")\n-                self.skip_if_no_cli()\n-            self.skip_test_if_missing_module()\n-            self.setup_chain()\n-            self.setup_network()\n-            self.run_test()\n-            success = TestStatus.PASSED\n-        except JSONRPCException:\n-            self.log.exception(\"JSONRPC error\")\n-        except SkipTest as e:\n-            self.log.warning(\"Test Skipped: %s\" % e.message)\n-            success = TestStatus.SKIPPED\n-        except AssertionError:\n-            self.log.exception(\"Assertion failed\")\n-        except KeyError:\n-            self.log.exception(\"Key error\")\n-        except Exception:\n-            self.log.exception(\"Unexpected exception caught during testing\")\n-        except KeyboardInterrupt:\n-            self.log.warning(\"Exiting after keyboard interrupt\")\n+        self.success = TestStatus.PASSED\n+\n+    def shutdown(self):\n+        \"\"\"Call this method to shut down the test framework object.\"\"\"\n \n-        if success == TestStatus.FAILED and self.options.pdbonfailure:\n+        if self.success == TestStatus.FAILED and self.options.pdbonfailure:\n             print(\"Testcase failed. Attaching python debugger. Enter ? for help\")\n             pdb.set_trace()\n \n@@ -225,7 +243,7 @@ def main(self):\n         should_clean_up = (\n             not self.options.nocleanup and\n             not self.options.noshutdown and\n-            success != TestStatus.FAILED and\n+            self.success != TestStatus.FAILED and\n             not self.options.perf\n         )\n         if should_clean_up:\n@@ -238,10 +256,10 @@ def main(self):\n             self.log.warning(\"Not cleaning up dir {}\".format(self.options.tmpdir))\n             cleanup_tree_on_exit = False\n \n-        if success == TestStatus.PASSED:\n+        if self.success == TestStatus.PASSED:\n             self.log.info(\"Tests successful\")\n             exit_code = TEST_EXIT_PASSED\n-        elif success == TestStatus.SKIPPED:\n+        elif self.success == TestStatus.SKIPPED:\n             self.log.info(\"Test skipped\")\n             exit_code = TEST_EXIT_SKIPPED\n         else:\n@@ -251,7 +269,7 @@ def main(self):\n         logging.shutdown()\n         if cleanup_tree_on_exit:\n             shutil.rmtree(self.options.tmpdir)\n-        sys.exit(exit_code)\n+        return exit_code\n \n     # Methods to override in subclass test scripts.\n     def set_test_params(self):"
      }
    ]
  },
  {
    "sha": "6f40820757d25ff1ccfdfcbdf2b45b8b65308010",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjQwODIwNzU3ZDI1ZmYxY2NmZGZjYmRmMmI0NWI4YjY1MzA4MDEw",
    "commit": {
      "author": {
        "name": "JamesC",
        "email": "james.chiangwu@gmail.com",
        "date": "2019-10-28T13:50:01Z"
      },
      "committer": {
        "name": "James Chiang",
        "email": "james.chiangwu@gmail.com",
        "date": "2019-11-03T19:34:18Z"
      },
      "message": "Add closing and flushing of logging handlers\n\nIn order for BitcoinTestFramework to correctly restart after shutdown, the\nprevious logging handlers need to be removed, or else logging will continue in\nthe previous temp directory. \"Flush\" ensures buffers are emptied, and \"close\"\nensures file handler close logging file.",
      "tree": {
        "sha": "4b93be0b1516edf56fa74591823a030ab388a045",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b93be0b1516edf56fa74591823a030ab388a045"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f40820757d25ff1ccfdfcbdf2b45b8b65308010",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f40820757d25ff1ccfdfcbdf2b45b8b65308010",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f40820757d25ff1ccfdfcbdf2b45b8b65308010",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f40820757d25ff1ccfdfcbdf2b45b8b65308010/comments",
    "author": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b71241291a184c9ee197bf5f0c7e1414417a0a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b71241291a184c9ee197bf5f0c7e1414417a0a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b71241291a184c9ee197bf5f0c7e1414417a0a0"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "03cd127a7da8470f2cb76ada95ff3accf8a07368",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f40820757d25ff1ccfdfcbdf2b45b8b65308010/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f40820757d25ff1ccfdfcbdf2b45b8b65308010/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=6f40820757d25ff1ccfdfcbdf2b45b8b65308010",
        "patch": "@@ -266,7 +266,18 @@ def shutdown(self):\n             self.log.error(\"Test failed. Test logging available at %s/test_framework.log\", self.options.tmpdir)\n             self.log.error(\"Hint: Call {} '{}' to consolidate all logs\".format(os.path.normpath(os.path.dirname(os.path.realpath(__file__)) + \"/../combine_logs.py\"), self.options.tmpdir))\n             exit_code = TEST_EXIT_FAILED\n-        logging.shutdown()\n+        # Logging.shutdown will not remove stream- and filehandlers, so we must\n+        # do it explicitly. Handlers are removed so the next test run can apply\n+        # different log handler settings.\n+        # See: https://docs.python.org/3/library/logging.html#logging.shutdown\n+        for h in list(self.log.handlers):\n+            h.flush()\n+            h.close()\n+            self.log.removeHandler(h)\n+        rpc_logger = logging.getLogger(\"BitcoinRPC\")\n+        for h in list(rpc_logger.handlers):\n+            h.flush()\n+            rpc_logger.removeHandler(h)\n         if cleanup_tree_on_exit:\n             shutil.rmtree(self.options.tmpdir)\n         return exit_code"
      }
    ]
  },
  {
    "sha": "614c645643e86c4255b98c663c10f2c227158d4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTRjNjQ1NjQzZTg2YzQyNTViOThjNjYzYzEwZjJjMjI3MTU4ZDRi",
    "commit": {
      "author": {
        "name": "JamesC",
        "email": "james.chiangwu@gmail.com",
        "date": "2019-10-26T14:03:21Z"
      },
      "committer": {
        "name": "James Chiang",
        "email": "james.chiangwu@gmail.com",
        "date": "2019-11-03T19:34:27Z"
      },
      "message": "Clear TestNode objects after shutdown\n\nTestNode objects need to be removed during shutdown, as setup_nodes does not\nremove previous TestNode objects from previous test runs during setup.",
      "tree": {
        "sha": "742b7c6c0dcaf534682497ef0394ceada9d731e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/742b7c6c0dcaf534682497ef0394ceada9d731e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/614c645643e86c4255b98c663c10f2c227158d4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614c645643e86c4255b98c663c10f2c227158d4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/614c645643e86c4255b98c663c10f2c227158d4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614c645643e86c4255b98c663c10f2c227158d4b/comments",
    "author": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f40820757d25ff1ccfdfcbdf2b45b8b65308010",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f40820757d25ff1ccfdfcbdf2b45b8b65308010",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f40820757d25ff1ccfdfcbdf2b45b8b65308010"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6c18ef47ab5c5aca7c03801e75619e991b3a0389",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/614c645643e86c4255b98c663c10f2c227158d4b/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/614c645643e86c4255b98c663c10f2c227158d4b/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=614c645643e86c4255b98c663c10f2c227158d4b",
        "patch": "@@ -280,6 +280,8 @@ def shutdown(self):\n             rpc_logger.removeHandler(h)\n         if cleanup_tree_on_exit:\n             shutil.rmtree(self.options.tmpdir)\n+\n+        self.nodes.clear()\n         return exit_code\n \n     # Methods to override in subclass test scripts."
      }
    ]
  },
  {
    "sha": "2ab01462f48b2d4e0d03ba842c3af8851c67c6f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWIwMTQ2MmY0OGIyZDRlMGQwM2JhODQyYzNhZjg4NTFjNjdjNmYx",
    "commit": {
      "author": {
        "name": "JamesC",
        "email": "james.chiangwu@gmail.com",
        "date": "2019-10-26T14:00:02Z"
      },
      "committer": {
        "name": "James Chiang",
        "email": "james.chiangwu@gmail.com",
        "date": "2019-11-03T19:34:41Z"
      },
      "message": "Move assert num_nodes is set into main()\n\nThis allows a BitcoinTestFramework child class to set test parameters in an\noverridden setup() rather than in an overridden set_test_params().",
      "tree": {
        "sha": "ed591b8c62eac2b979cdb07b1dfdae0475983ca4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed591b8c62eac2b979cdb07b1dfdae0475983ca4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ab01462f48b2d4e0d03ba842c3af8851c67c6f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ab01462f48b2d4e0d03ba842c3af8851c67c6f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ab01462f48b2d4e0d03ba842c3af8851c67c6f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ab01462f48b2d4e0d03ba842c3af8851c67c6f1/comments",
    "author": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "614c645643e86c4255b98c663c10f2c227158d4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614c645643e86c4255b98c663c10f2c227158d4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/614c645643e86c4255b98c663c10f2c227158d4b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7375ab1fb75fe25533d234fa85486f40b907fbaf",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ab01462f48b2d4e0d03ba842c3af8851c67c6f1/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ab01462f48b2d4e0d03ba842c3af8851c67c6f1/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=2ab01462f48b2d4e0d03ba842c3af8851c67c6f1",
        "patch": "@@ -100,11 +100,11 @@ def __init__(self):\n         self.bind_to_localhost_only = True\n         self.set_test_params()\n \n-        assert hasattr(self, \"num_nodes\"), \"Test must set self.num_nodes in set_test_params()\"\n-\n     def main(self):\n         \"\"\"Main function. This should not be overridden by the subclass test scripts.\"\"\"\n \n+        assert hasattr(self, \"num_nodes\"), \"Test must set self.num_nodes in set_test_params()\"\n+\n         self.parse_args()\n \n         try:"
      }
    ]
  },
  {
    "sha": "5155602a636c323424f75272ccec38588b3d71cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTU1NjAyYTYzNmMzMjM0MjRmNzUyNzJjY2VjMzg1ODhiM2Q3MWNk",
    "commit": {
      "author": {
        "name": "JamesC",
        "email": "james.chiangwu@gmail.com",
        "date": "2019-10-31T11:01:58Z"
      },
      "committer": {
        "name": "James Chiang",
        "email": "james.chiangwu@gmail.com",
        "date": "2019-11-03T19:34:49Z"
      },
      "message": "Move argparse() to init()\n\nThis ensures TestFramework default parameters are set before setup is called. A\n child class will therefore have access to defaults when overriding setup.",
      "tree": {
        "sha": "1307f6e785c0da16d861709364553a132f41b609",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1307f6e785c0da16d861709364553a132f41b609"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5155602a636c323424f75272ccec38588b3d71cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5155602a636c323424f75272ccec38588b3d71cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5155602a636c323424f75272ccec38588b3d71cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5155602a636c323424f75272ccec38588b3d71cd/comments",
    "author": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ab01462f48b2d4e0d03ba842c3af8851c67c6f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ab01462f48b2d4e0d03ba842c3af8851c67c6f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ab01462f48b2d4e0d03ba842c3af8851c67c6f1"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c56c0d06ffd9b4aaab00e88414981b977f54ca0e",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5155602a636c323424f75272ccec38588b3d71cd/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5155602a636c323424f75272ccec38588b3d71cd/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=5155602a636c323424f75272ccec38588b3d71cd",
        "patch": "@@ -99,14 +99,13 @@ def __init__(self):\n         self.supports_cli = False\n         self.bind_to_localhost_only = True\n         self.set_test_params()\n+        self.parse_args()\n \n     def main(self):\n         \"\"\"Main function. This should not be overridden by the subclass test scripts.\"\"\"\n \n         assert hasattr(self, \"num_nodes\"), \"Test must set self.num_nodes in set_test_params()\"\n \n-        self.parse_args()\n-\n         try:\n             self.setup()\n             self.run_test()"
      }
    ]
  },
  {
    "sha": "f5112369cf91451d2d0bf574a9bfdaea04696939",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTExMjM2OWNmOTE0NTFkMmQwYmY1NzRhOWJmZGFlYTA0Njk2OTM5",
    "commit": {
      "author": {
        "name": "James Chiang",
        "email": "james.chiangwu@gmail.com",
        "date": "2019-11-03T15:40:19Z"
      },
      "committer": {
        "name": "James Chiang",
        "email": "james.chiangwu@gmail.com",
        "date": "2019-11-04T07:56:56Z"
      },
      "message": "Add TestShell class\n\nA BitcoinTestFramework child class which can be imported by an external user or\nproject. TestShell.setup() initiates an underlying BitcoinTestFramework object\nwith bitcoind subprocesses, rpc interfaces and test logging.\nTestShell.shutdown() safely tears down the BitcoinTestFramework object.",
      "tree": {
        "sha": "10c275928ad3744b6f6fe534842fc8535c02391e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10c275928ad3744b6f6fe534842fc8535c02391e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5112369cf91451d2d0bf574a9bfdaea04696939",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5112369cf91451d2d0bf574a9bfdaea04696939",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5112369cf91451d2d0bf574a9bfdaea04696939",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5112369cf91451d2d0bf574a9bfdaea04696939/comments",
    "author": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5155602a636c323424f75272ccec38588b3d71cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5155602a636c323424f75272ccec38588b3d71cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5155602a636c323424f75272ccec38588b3d71cd"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 75,
      "deletions": 0
    },
    "files": [
      {
        "sha": "79da35b3647a80d430c8992691cbcc3b75a01a10",
        "filename": "test/functional/test_framework/test_shell.py",
        "status": "added",
        "additions": 75,
        "deletions": 0,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5112369cf91451d2d0bf574a9bfdaea04696939/test/functional/test_framework/test_shell.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5112369cf91451d2d0bf574a9bfdaea04696939/test/functional/test_framework/test_shell.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_shell.py?ref=f5112369cf91451d2d0bf574a9bfdaea04696939",
        "patch": "@@ -0,0 +1,75 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class TestShell:\n+    \"\"\"Wrapper Class for BitcoinTestFramework.\n+\n+    The TestShell class extends the BitcoinTestFramework\n+    rpc & daemon process management functionality to external\n+    python environments.\n+\n+    It is a singleton class, which ensures that users only\n+    start a single TestShell at a time.\"\"\"\n+\n+    class __TestShell(BitcoinTestFramework):\n+        def set_test_params(self):\n+            pass\n+\n+        def run_test(self):\n+            pass\n+\n+        def setup(self, **kwargs):\n+            if self.running:\n+                print(\"TestShell is already running!\")\n+                return\n+\n+            # Num_nodes parameter must be set\n+            # by BitcoinTestFramework child class.\n+            self.num_nodes = kwargs.get('num_nodes', 1)\n+            kwargs.pop('num_nodes', None)\n+\n+            # User parameters override default values.\n+            for key, value in kwargs.items():\n+                if hasattr(self, key):\n+                    setattr(self, key, value)\n+                elif hasattr(self.options, key):\n+                    setattr(self.options, key, value)\n+                else:\n+                    raise KeyError(key + \" not a valid parameter key!\")\n+\n+            super().setup()\n+            self.running = True\n+\n+        def shutdown(self):\n+            if not self.running:\n+                print(\"TestShell is not running!\")\n+            else:\n+                super().shutdown()\n+                self.running = False\n+\n+        def reset(self):\n+            if self.running:\n+                print(\"Shutdown TestWrapper before resetting!\")\n+            else:\n+                self.num_nodes = None\n+                super().__init__()\n+\n+    instance = None\n+\n+    def __new__(cls):\n+        # This implementation enforces singleton pattern, and will return the\n+        # previously initialized instance if available\n+        if not TestShell.instance:\n+            TestShell.instance = TestShell.__TestShell()\n+            TestShell.instance.running = False\n+        return TestShell.instance\n+\n+    def __getattr__(self, name):\n+        return getattr(self.instance, name)\n+\n+    def __setattr__(self, name, value):\n+        return setattr(self.instance, name, value)"
      }
    ]
  },
  {
    "sha": "19139ee034d20ebab1b91d3ac13a8eee70b59374",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTEzOWVlMDM0ZDIwZWJhYjFiOTFkM2FjMTNhOGVlZTcwYjU5Mzc0",
    "commit": {
      "author": {
        "name": "JamesC",
        "email": "james.chiangwu@gmail.com",
        "date": "2019-10-24T18:33:06Z"
      },
      "committer": {
        "name": "James Chiang",
        "email": "james.chiangwu@gmail.com",
        "date": "2019-11-04T15:02:28Z"
      },
      "message": "Add documentation for test_shell submodule",
      "tree": {
        "sha": "d3b7757292a9eddcf00e15daa910f7d7b0188a1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3b7757292a9eddcf00e15daa910f7d7b0188a1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19139ee034d20ebab1b91d3ac13a8eee70b59374",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19139ee034d20ebab1b91d3ac13a8eee70b59374",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19139ee034d20ebab1b91d3ac13a8eee70b59374",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19139ee034d20ebab1b91d3ac13a8eee70b59374/comments",
    "author": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5112369cf91451d2d0bf574a9bfdaea04696939",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5112369cf91451d2d0bf574a9bfdaea04696939",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5112369cf91451d2d0bf574a9bfdaea04696939"
      }
    ],
    "stats": {
      "total": 198,
      "additions": 198,
      "deletions": 0
    },
    "files": [
      {
        "sha": "77a9ce9acba49d42f32a8afe891f66d42946e4ec",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19139ee034d20ebab1b91d3ac13a8eee70b59374/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19139ee034d20ebab1b91d3ac13a8eee70b59374/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=19139ee034d20ebab1b91d3ac13a8eee70b59374",
        "patch": "@@ -99,6 +99,16 @@ P2PInterface object and override the callback methods.\n Examples tests are [p2p_unrequested_blocks.py](p2p_unrequested_blocks.py),\n [p2p_compactblocks.py](p2p_compactblocks.py).\n \n+#### Prototyping tests\n+\n+The [`TestShell`](test-shell.md) class exposes the BitcoinTestFramework\n+functionality to interactive Python3 environments and can be used to prototype\n+tests. This may be especially useful in a REPL environment with session logging\n+utilities, such as\n+[IPython](https://ipython.readthedocs.io/en/stable/interactive/reference.html#session-logging-and-restoring).\n+The logs of such interactive sessions can later be adapted into permanent test\n+cases.\n+\n ### Test framework modules\n The following are useful modules for test developers. They are located in\n [test/functional/test_framework/](test_framework)."
      },
      {
        "sha": "aefcdc5ec83b393efbe1e5881f654c5d17cedfe7",
        "filename": "test/functional/test-shell.md",
        "status": "added",
        "additions": 188,
        "deletions": 0,
        "changes": 188,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19139ee034d20ebab1b91d3ac13a8eee70b59374/test/functional/test-shell.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19139ee034d20ebab1b91d3ac13a8eee70b59374/test/functional/test-shell.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test-shell.md?ref=19139ee034d20ebab1b91d3ac13a8eee70b59374",
        "patch": "@@ -0,0 +1,188 @@\n+Test Shell for Interactive Environments\n+=========================================\n+\n+This document describes how to use the `TestShell` submodule in the functional\n+test suite.\n+\n+The `TestShell` submodule extends the `BitcoinTestFramework` functionality to\n+external interactive environments for prototyping and educational purposes. Just\n+like `BitcoinTestFramework`, the `TestShell` allows the user to:\n+\n+* Manage regtest bitcoind subprocesses.\n+* Access RPC interfaces of the underlying bitcoind instances.\n+* Log events to the functional test logging utility.\n+\n+The `TestShell` can be useful in interactive environments where it is necessary\n+to extend the object lifetime of the underlying `BitcoinTestFramework` between\n+user inputs. Such environments include the Python3 command line interpreter or\n+[Jupyter](https://jupyter.org/) notebooks running a Python3 kernel.\n+\n+## 1. Requirements\n+\n+* Python3\n+* `bitcoind` built in the same repository as the `TestShell`.\n+\n+## 2. Importing `TestShell` from the Bitcoin Core repository\n+\n+We can import the `TestShell` by adding the path of the Bitcoin Core\n+`test_framework` module to the beginning of the PATH variable, and then\n+importing the `TestShell` class from the `test_shell` sub-package.\n+\n+```\n+>>> import sys\n+>>> sys.path.insert(0, \"/path/to/bitcoin/test/functional\")\n+>>> from test_framework.test_shell import `TestShell`\n+```\n+\n+The following `TestShell` methods manage the lifetime of the underlying bitcoind\n+processes and logging utilities.\n+\n+* `TestShell.setup()`\n+* `TestShell.shutdown()`\n+\n+The `TestShell` inherits all `BitcoinTestFramework` members and methods, such\n+as:\n+* `TestShell.nodes[index].rpc_method()`\n+* `TestShell.log.info(\"Custom log message\")`\n+\n+The following sections demonstrate how to initialize, run, and shut down a\n+`TestShell` object.\n+\n+## 3. Initializing a `TestShell` object\n+\n+```\n+>>> test = TestShell()\n+>>> test.setup(num_nodes=2, setup_clean_chain=True)\n+20XX-XX-XXTXX:XX:XX.XXXXXXX TestFramework (INFO): Initializing test directory /path/to/bitcoin_func_test_XXXXXXX\n+```\n+The `TestShell` forwards all functional test parameters of the parent\n+`BitcoinTestFramework` object. The full set of argument keywords which can be\n+used to initialize the `TestShell` can be found in [section\n+#6](#custom-testshell-parameters) of this document.\n+\n+**Note: Running multiple instances of `TestShell` is not allowed.** Running a\n+single process also ensures that logging remains consolidated in the same\n+temporary folder. If you need more bitcoind nodes than set by default (1),\n+simply increase the `num_nodes` parameter during setup.\n+\n+```\n+>>> test2 = TestShell()\n+>>> test2.setup()\n+TestShell is already running!\n+```\n+\n+## 4. Interacting with the `TestShell`\n+\n+Unlike the `BitcoinTestFramework` class, the `TestShell` keeps the underlying\n+Bitcoind subprocesses (nodes) and logging utilities running until the user\n+explicitly shuts down the `TestShell` object.\n+\n+During the time between the `setup` and `shutdown` calls, all `bitcoind` node\n+processes and `BitcoinTestFramework` convenience methods can be accessed\n+interactively.\n+\n+**Example: Mining a regtest chain**\n+\n+By default, the `TestShell` nodes are initialized with a clean chain. This means\n+that each node of the `TestShell` is initialized with a block height of 0.\n+\n+```\n+>>> test.nodes[0].getblockchaininfo()[\"blocks\"]\n+0\n+```\n+\n+We now let the first node generate 101 regtest blocks, and direct the coinbase\n+rewards to a wallet address owned by the mining node.\n+\n+```\n+>>> address = test.nodes[0].getnewaddress()\n+>>> test.nodes[0].generatetoaddress(101, address)\n+['2b98dd0044aae6f1cca7f88a0acf366a4bfe053c7f7b00da3c0d115f03d67efb', ...\n+```\n+Since the two nodes are both initialized by default to establish an outbound\n+connection to each other during `setup`, the second node's chain will include\n+the mined blocks as soon as they propagate.\n+\n+```\n+>>> test.nodes[1].getblockchaininfo()[\"blocks\"]\n+101\n+```\n+The block rewards from the first block are now spendable by the wallet of the\n+first node.\n+\n+```\n+>>> test.nodes[0].getbalance()\n+Decimal('50.00000000')\n+```\n+\n+We can also log custom events to the logger.\n+\n+```\n+>>> test.nodes[0].log.info(\"Successfully mined regtest chain!\")\n+20XX-XX-XXTXX:XX:XX.XXXXXXX TestFramework.node0 (INFO): Successfully mined regtest chain!\n+```\n+\n+**Note: Please also consider the functional test\n+[readme](../test/functional/README.md), which provides an overview of the\n+test-framework**. Modules such as\n+[key.py](../test/functional/test_framework/key.py),\n+[script.py](../test/functional/test_framework/script.py) and\n+[messages.py](../test/functional/test_framework/messages.py) are particularly\n+useful in constructing objects which can be passed to the bitcoind nodes managed\n+by a running `TestShell` object.\n+\n+## 5. Shutting the `TestShell` down\n+\n+Shutting down the `TestShell` will safely tear down all running bitcoind\n+instances and remove all temporary data and logging directories.\n+\n+```\n+>>> test.shutdown()\n+20XX-XX-XXTXX:XX:XX.XXXXXXX TestFramework (INFO): Stopping nodes\n+20XX-XX-XXTXX:XX:XX.XXXXXXX TestFramework (INFO): Cleaning up /path/to/bitcoin_func_test_XXXXXXX on exit\n+20XX-XX-XXTXX:XX:XX.XXXXXXX TestFramework (INFO): Tests successful\n+```\n+To prevent the logs from being removed after a shutdown, simply set the\n+`TestShell.options.nocleanup` member to `True`.\n+```\n+>>> test.options.nocleanup = True\n+>>> test.shutdown()\n+20XX-XX-XXTXX:XX:XX.XXXXXXX TestFramework (INFO): Stopping nodes\n+20XX-XX-XXTXX:XX:XX.XXXXXXX TestFramework (INFO): Not cleaning up dir /path/to/bitcoin_func_test_XXXXXXX on exit\n+20XX-XX-XXTXX:XX:XX.XXXXXXX TestFramework (INFO): Tests successful\n+```\n+\n+The following utility consolidates logs from the bitcoind nodes and the\n+underlying `BitcoinTestFramework`:\n+\n+* `/path/to/bitcoin/test/functional/combine_logs.py\n+  '/path/to/bitcoin_func_test_XXXXXXX'`\n+\n+## 6. Custom `TestShell` parameters\n+\n+The `TestShell` object initializes with the default settings inherited from the\n+`BitcoinTestFramework` class. The user can override these in\n+`TestShell.setup(key=value)`.\n+\n+**Note:** `TestShell.reset()` will reset test parameters to default values and\n+can be called after the TestShell is shut down.\n+\n+| Test parameter key | Default Value | Description |\n+|---|---|---|\n+| `bind_to_localhost_only` | `True` | Binds bitcoind RPC services to `127.0.0.1` if set to `True`.|\n+| `cachedir` | `\"/path/to/bitcoin/test/cache\"` | Sets the bitcoind datadir directory. |\n+| `chain`  | `\"regtest\"` | Sets the chain-type for the underlying test bitcoind processes. |\n+| `configfile` | `\"/path/to/bitcoin/test/config.ini\"` | Sets the location of the test framework config file. |\n+| `coveragedir` | `None` | Records bitcoind RPC test coverage into this directory if set. |\n+| `loglevel` | `INFO` | Logs events at this level and higher. Can be set to `DEBUG`, `INFO`, `WARNING`, `ERROR` or `CRITICAL`. |\n+| `nocleanup` | `False` | Cleans up temporary test directory if set to `True` during `shutdown`. |\n+| `noshutdown` | `False` | Does not stop bitcoind instances after `shutdown` if set to `True`. |\n+| `num_nodes` | `1` | Sets the number of initialized bitcoind processes. |\n+| `perf` | False | Profiles running nodes with `perf` for the duration of the test if set to `True`. |\n+| `rpc_timeout` | `60` | Sets the RPC server timeout for the underlying bitcoind processes. |\n+| `setup_clean_chain` | `False` | Initializes an empty blockchain by default. A 199-block-long chain is initialized if set to `True`. |\n+| `randomseed` | Random Integer | `TestShell.options.randomseed` is a member of `TestShell` which can be accessed during a test to seed a random generator. User can override default with a constant value for reproducible test runs. |\n+| `supports_cli` | `False` | Whether the bitcoin-cli utility is compiled and available for the test. |\n+| `tmpdir` | `\"/var/folders/.../\"` | Sets directory for test logs. Will be deleted upon a successful test run unless `nocleanup` is set to `True` |\n+| `trace_rpc` | `False` | Logs all RPC calls if set to `True`. |\n+| `usecli` | `False` | Uses the bitcoin-cli interface for all bitcoind commands instead of directly calling the RPC server. Requires `supports_cli`. |"
      }
    ]
  }
]