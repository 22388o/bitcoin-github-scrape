DrahtBot,2020-10-21 01:20:46,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23497](https://github.com/bitcoin/bitcoin/pull/23497) (Add `src/node/` and `src/wallet/` code to `node::` and `wallet::`",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-713231280,713231280,
achow101,2020-10-21 23:43:00,"> Can't we just set the id for sqlite wallets on creation? Or you want to handle wallets already created?\n \nThis needs to handle wallets already created.\n\n> Edit: do we want to modify old wallets? `CWallet` could return BDB Id on the fly without persisting it. Later we would just persist it if the wallet is converted.\n\nIt should be persisted as a wallet record. The BDB ID is purely bec",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-713997734,713997734,
promag,2020-10-21 23:45:47,@achow101 reasonable answers.,https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-714002031,714002031,
jonasschnelli,2020-10-22 12:42:15,utACK 234e4678c774aa0021a45810acd9a0f3f5bf3b64,https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-714466910,714466910,
promag,2020-10-22 12:52:46,"> For compatibility, wallets using BDB will use the BDB generated id\n\n@achow101 compatibility with what?",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-714472792,714472792,
luke-jr,2020-10-22 17:15:45,"@promag With existing wallets. Right now, the only unique identifier they have is the BDB database id.",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-714638078,714638078,
ryanofsky,2020-10-26 13:26:04,"Reiterate weak concept NACK see https://github.com/bitcoin/bitcoin/pull/20204#issuecomment-713069277.\n\nThis change is a bad change. It's a perfect example of dumb, unreasoning, cargo-cult design (there is no design discussion here) copying a poorly thought BDB feature that directly lead to data corruption previously in #11429 and is a trap and footgun for the future. Merging this change now wi",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-716544104,716544104,
laanwj,2020-10-29 10:43:25,"As this is controversial and needs more discussion, I'm removing it from the 0.21 milestone. From discussion on IRC I get the idea this is a ""nice to have"" for some people so I don't agree there is any hurry on this.",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-718632332,718632332,
luke-jr,2020-10-29 12:54:15,This is a regression bugfix and a blocker for sqlite wallets. 0.21 should not be released without it.,https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-718733269,718733269,
ryanofsky,2020-10-29 13:09:13,"> This is a regression bugfix and a blocker for sqlite wallets. 0.21 should not be released without it.\n\nCan you give an example of something that would be broken, or a feature that would be more difficult to implement if this is not included in 0.21? This would be news to me and I don't know what it is referring to.\n\nA UUID field (or any field that can ignored by previous releases) can be",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-718741348,718741348,
luke-jr,2020-10-29 13:30:37,"Adding a UUID later would mean backups are missing it, and restoring from a backup could break features relying on it. Even if we ignore these risks, the UUID is itself a feature wallets have always had, that is now missing in sqlite wallets.\n\nAdding it back now has literally zero downsides. Absolute worst case, we could just not use it.\n\nFurthermore, not having it now also means features ",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-718753585,718753585,
ryanofsky,2020-10-29 13:39:18,"> Adding a UUID later would mean backups are missing it, and restoring from a backup could break features relying on it.\n\nThis isn't true. Unrecognized rows are not stripped from backups. The other comments about core and knots also do not seem to make sense. We shouldn't go back and forth on this endlessly, but I think the more specific and detailed you can be about problems you are concerned",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-718758891,718758891,
luke-jr,2020-10-29 15:01:09,"The UUID isn't simply unrecognised, it's ENTIRELY MISSING in sqlite wallets right now.",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-718811749,718811749,
ryanofsky,2020-10-29 15:23:20,"> The UUID isn't simply unrecognised, it's ENTIRELY MISSING in sqlite wallets right now.\n\nI know this. You know this. What I don't know is what specific problem is fixed by merging this PR now that would not be fixed by merging it later (or perhaps by never relying on uuids at all, but I don't want to broaden the topic if it is not necessary). I'm encouraging you to describe an example in some",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-718826353,718826353,
luke-jr,2020-10-29 16:10:18,"Merging it later won't retroactively ensure wallets created by 0.21 and then copied share a common UUID (which is kinda the whole point of a UUID).\n\nMerging it later also means features using the UUID won't work on sqlite wallets in the meantime.",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-718857965,718857965,
jonasschnelli,2020-11-05 19:12:51,Removed the 0.21 milestone again. This seems indeed be too controversial for a last minute 0.21 merge.,https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-722583306,722583306,
sipa,2020-11-05 19:31:10,"* ""It's a feature of existing wallets, new wallets should have it too"" is not a good argument. It's a new wallet type, it will support whatever features we declare it to have.\n* Wallet IDs were originally introduced in BDB because of database environments being unable to open the same database multiple times. Restricting the ability to open multiple copies simultaneously is a necessity here, not",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-722593240,722593240,
achow101,2020-11-05 19:40:14,"Given that descriptor (and thus sqlite) wallets are considered experimental, I think it's find to miss the id for 0.21. I think it's reasonable to ask users make a new backup when we no longer consider descriptor wallets to be experimental, and we can introduce the wallet id before that time.",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-722600186,722600186,
ryanofsky,2020-12-15 19:46:59,"re: https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-722593240\n\n> Because of that, I think it makes conceptual sense to have an ID, and use that to warn (not reject) when opening multiple copies.\n\nWithout knowing who the warning would be for or what it would say, it doesn't seem clear to me how it would be useful. But assuming it is useful, wouldn't the warning be more robust if ",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-745524888,745524888,
luke-jr,2020-12-15 19:59:26,"@ryanofsky There already is, why are you ignoring it? #19463",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-745532320,745532320,
ryanofsky,2020-12-15 20:24:22,"> @ryanofsky There already is, why are you ignoring it? #19463\n\nI'm aware and not ignoring it. If #19463 is close to being merged and it depends on this PR, then this PR should be merged. But this isn't the case now. #19463 isn't close to being merged, and I don't think it makes sense for #19463 to depend on this PR. I'm just objecting to this PR on its merits, and its harms and benefits right",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-745545878,745545878,
hebasto,2021-06-11 19:39:34,"CI [error](https://cirrus-ci.com/task/5976763453931520?logs=ci#L8595):\n```\nIn file included from wallet/wallet.cpp:34:\n./wallet/bdb.h:27:10: fatal error: 'db_cxx.h' file not found\n#include <db_cxx.h>\n         ^~~~~~~~~~\n1 error generated.\n```",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-859799364,859799364,
prayank23,2021-09-03 11:39:25,"Concept ACK\n\nCan we add 0/1/2/3 for every ID based on chain the wallet was created in? 0-Mainnet 1-Testnet 2-Regtest 3-Signet\n\nChains for wallets can already be identified using genesis block and this is used in https://github.com/bitcoin/bitcoin/pull/14533, however genesis block can be same in few cases as mentioned in https://github.com/bitcoin/bitcoin/pull/14533#issuecomment-431645072, ",https://github.com/bitcoin/bitcoin/pull/20205#issuecomment-912473060,912473060,
promag,2020-10-21 23:18:37,Assert it's currently null? (set only once),https://github.com/bitcoin/bitcoin/pull/20205#discussion_r509789292,509789292,src/wallet/wallet.cpp
promag,2020-10-21 23:27:40,Assert it's not null.,https://github.com/bitcoin/bitcoin/pull/20205#discussion_r509792334,509792334,src/wallet/wallet.cpp
promag,2020-10-21 23:29:31,"I think this is in the wrong place. From a quick look `CWallet::LoadWallet` seems a better place, like:\n\n```cpp\n    if (wallet_id.IsNull()) {\n        if (database->Format() == ""dbd"") {\n             // use BDB ID\n        } else {\n             // generate random id\n        }\n        // persist\n    }\n    return DBErrors::LOAD_OK;\n}\n```\nThis would allow you to drop `EnsureW",https://github.com/bitcoin/bitcoin/pull/20205#discussion_r509792913,509792913,src/wallet/bdb.cpp
promag,2020-10-21 23:30:53,const.,https://github.com/bitcoin/bitcoin/pull/20205#discussion_r509793362,509793362,src/wallet/wallet.h
achow101,2020-10-22 02:24:23,Done,https://github.com/bitcoin/bitcoin/pull/20205#discussion_r509841147,509841147,src/wallet/wallet.cpp
achow101,2020-10-22 02:24:27,Done,https://github.com/bitcoin/bitcoin/pull/20205#discussion_r509841162,509841162,src/wallet/wallet.cpp
achow101,2020-10-22 02:24:43,I've moved all of the logic into `EnsureWalletIDWithDB`.,https://github.com/bitcoin/bitcoin/pull/20205#discussion_r509841235,509841235,src/wallet/bdb.cpp
achow101,2020-10-22 02:30:38,Done,https://github.com/bitcoin/bitcoin/pull/20205#discussion_r509842850,509842850,src/wallet/wallet.h
luke-jr,2020-10-22 12:33:55,"Is there a reason to limit it to 160-bit? Seems like to future-proof, 256-bit ids would be better. And even if we end up only generating 160-bit ids now, it would be nice to load longer ones so we don't have to break compatibility if we ever generate more...",https://github.com/bitcoin/bitcoin/pull/20205#discussion_r510123277,510123277,src/wallet/wallet.cpp
luke-jr,2020-10-22 12:35:32,Maybe an assert that `wallet_id.size() == sizeof(bdb_db->env->m_fileids[bdb_db->strFile].value)`? (or use the latter and assert that it's `<= wallet_id.size()`),https://github.com/bitcoin/bitcoin/pull/20205#discussion_r510124320,510124320,src/wallet/wallet.cpp
achow101,2020-10-22 15:48:04,"The current BDB ID is 160 bits long. I don't think limiting to ""just"" 160 bits will be a problem. Why would we need to load longer ones?",https://github.com/bitcoin/bitcoin/pull/20205#discussion_r510269725,510269725,src/wallet/wallet.cpp
achow101,2020-10-22 16:46:12,Done,https://github.com/bitcoin/bitcoin/pull/20205#discussion_r510309976,510309976,src/wallet/wallet.cpp
luke-jr,2020-10-22 17:16:37,"Probably 160-bit is enough, but I can't predict the future. :)",https://github.com/bitcoin/bitcoin/pull/20205#discussion_r510328656,510328656,src/wallet/wallet.cpp
