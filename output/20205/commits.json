[
  {
    "sha": "18f59f630dc697d1edf7a33ab6e8328eeff8150f",
    "node_id": "C_kwDOABII59oAKDE4ZjU5ZjYzMGRjNjk3ZDFlZGY3YTMzYWI2ZTgzMjhlZWZmODE1MGY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-10-20T20:03:02Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-09-27T22:28:07Z"
      },
      "message": "wallet: Properly support a wallet id\n\nAdds a unique id for each wallet that is saved in a new \"walletid\"\nrecord. For compatibility, wallets using BDB will use the BDB generated\nid. All other wallets will have a randomly generated id if an id does\nnot already exist.",
      "tree": {
        "sha": "9de54003f878c24de37011b1f1c778e85470e207",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9de54003f878c24de37011b1f1c778e85470e207"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18f59f630dc697d1edf7a33ab6e8328eeff8150f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18f59f630dc697d1edf7a33ab6e8328eeff8150f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18f59f630dc697d1edf7a33ab6e8328eeff8150f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18f59f630dc697d1edf7a33ab6e8328eeff8150f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f036c35e51fea8cf2a0dc41c10c47e37fc01e999",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f036c35e51fea8cf2a0dc41c10c47e37fc01e999",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f036c35e51fea8cf2a0dc41c10c47e37fc01e999"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 71,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bcab99a32b4e0b51a761540941d153368635f24c",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18f59f630dc697d1edf7a33ab6e8328eeff8150f/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18f59f630dc697d1edf7a33ab6e8328eeff8150f/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=18f59f630dc697d1edf7a33ab6e8328eeff8150f",
        "patch": "@@ -846,3 +846,11 @@ std::unique_ptr<BerkeleyDatabase> MakeBerkeleyDatabase(const fs::path& path, con\n     status = DatabaseStatus::SUCCESS;\n     return db;\n }\n+\n+uint160 BerkeleyDatabase::MakeNewWalletID() const\n+{\n+    uint160 id;\n+    assert(id.size() == sizeof(env->m_fileids[strFile].value));\n+    memcpy(id.data(), env->m_fileids[strFile].value, id.size());\n+    return id;\n+}"
      },
      {
        "sha": "4417ff23b3ff5d9aac3922096cd594d18ba0bdf0",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18f59f630dc697d1edf7a33ab6e8328eeff8150f/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18f59f630dc697d1edf7a33ab6e8328eeff8150f/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=18f59f630dc697d1edf7a33ab6e8328eeff8150f",
        "patch": "@@ -162,6 +162,10 @@ class BerkeleyDatabase : public WalletDatabase\n \n     /** Make a BerkeleyBatch connected to this database */\n     std::unique_ptr<DatabaseBatch> MakeBatch(bool flush_on_close = true) override;\n+\n+    /** Get the database ID.\n+     * For BDB, this is not a random ID, but rather the BDB Unique ID */\n+    uint160 MakeNewWalletID() const override;\n };\n \n /** RAII class that provides access to a Berkeley database */"
      },
      {
        "sha": "d4d50c88b59fb450bc82f827766c715ce18e6f23",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18f59f630dc697d1edf7a33ab6e8328eeff8150f/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18f59f630dc697d1edf7a33ab6e8328eeff8150f/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=18f59f630dc697d1edf7a33ab6e8328eeff8150f",
        "patch": "@@ -6,6 +6,7 @@\n #include <chainparams.h>\n #include <fs.h>\n #include <logging.h>\n+#include <random.h>\n #include <wallet/db.h>\n \n #include <string>\n@@ -135,3 +136,11 @@ bool IsSQLiteFile(const fs::path& path)\n     // Check the application id matches our network magic\n     return memcmp(Params().MessageStart(), app_id, 4) == 0;\n }\n+\n+uint160 WalletDatabase::MakeNewWalletID() const\n+{\n+    // Generate a random ID\n+    uint160 id;\n+    GetStrongRandBytes(id.data(), id.size());\n+    return id;\n+}"
      },
      {
        "sha": "9cb9d3faa49a8e68b44837e9e27cc7a148b43ed8",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18f59f630dc697d1edf7a33ab6e8328eeff8150f/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18f59f630dc697d1edf7a33ab6e8328eeff8150f/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=18f59f630dc697d1edf7a33ab6e8328eeff8150f",
        "patch": "@@ -10,6 +10,7 @@\n #include <fs.h>\n #include <streams.h>\n #include <support/allocators/secure.h>\n+#include <uint256.h>\n \n #include <atomic>\n #include <memory>\n@@ -152,6 +153,9 @@ class WalletDatabase\n \n     /** Make a DatabaseBatch connected to this database */\n     virtual std::unique_ptr<DatabaseBatch> MakeBatch(bool flush_on_close = true) = 0;\n+\n+    /** Make a new unique ID for this wallet database. For most wallets, this will be a random 20 byte id. */\n+    virtual uint160 MakeNewWalletID() const;\n };\n \n /** RAII class that provides access to a DummyDatabase. Never fails. */"
      },
      {
        "sha": "319feabb8cf7ebf65d4fd366103d427e03d899ce",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18f59f630dc697d1edf7a33ab6e8328eeff8150f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18f59f630dc697d1edf7a33ab6e8328eeff8150f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=18f59f630dc697d1edf7a33ab6e8328eeff8150f",
        "patch": "@@ -32,6 +32,7 @@\n #include <util/rbf.h>\n #include <util/string.h>\n #include <util/translation.h>\n+#include <wallet/bdb.h>\n #include <wallet/coincontrol.h>\n #include <wallet/context.h>\n #include <wallet/fees.h>\n@@ -3322,3 +3323,23 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return spk_man;\n }\n+\n+void CWallet::LoadWalletID(const uint160& id)\n+{\n+    assert(wallet_id.IsNull());\n+    wallet_id = id;\n+}\n+\n+const uint160& CWallet::GetWalletID() const\n+{\n+    assert(!wallet_id.IsNull());\n+    return wallet_id;\n+}\n+\n+void CWallet::EnsureWalletIDWithDB(WalletBatch& batch)\n+{\n+    if (!wallet_id.IsNull()) return;\n+\n+    wallet_id = GetDatabase().MakeNewWalletID();\n+    batch.WriteWalletID(wallet_id);\n+}"
      },
      {
        "sha": "f535f895962590008a89615b92a4d04db6e88af6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18f59f630dc697d1edf7a33ab6e8328eeff8150f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18f59f630dc697d1edf7a33ab6e8328eeff8150f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=18f59f630dc697d1edf7a33ab6e8328eeff8150f",
        "patch": "@@ -329,6 +329,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     // ScriptPubKeyMan::GetID. In many cases it will be the hash of an internal structure\n     std::map<uint256, std::unique_ptr<ScriptPubKeyMan>> m_spk_managers;\n \n+    uint160 wallet_id;\n+\n     /**\n      * Catch wallet up to current chain, scanning new blocks, updating the best\n      * block locator and m_last_block_processed, and registering for\n@@ -877,6 +879,13 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Add a descriptor to the wallet, return a ScriptPubKeyMan & associated output type\n     ScriptPubKeyMan* AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label, bool internal) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Set the wallet ID\n+    void LoadWalletID(const uint160& id);\n+    //! Get the wallet iD\n+    const uint160& GetWalletID() const;\n+    //! Ensure that a wallet ID already exists. If one does not, add it.\n+    void EnsureWalletIDWithDB(WalletBatch& batch);\n };\n \n /**"
      },
      {
        "sha": "9a6ce7ea29122d017f9d2e1ba27271b874443f4d",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18f59f630dc697d1edf7a33ab6e8328eeff8150f/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18f59f630dc697d1edf7a33ab6e8328eeff8150f/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=18f59f630dc697d1edf7a33ab6e8328eeff8150f",
        "patch": "@@ -56,6 +56,7 @@ const std::string WALLETDESCRIPTORCACHE{\"walletdescriptorcache\"};\n const std::string WALLETDESCRIPTORLHCACHE{\"walletdescriptorlhcache\"};\n const std::string WALLETDESCRIPTORCKEY{\"walletdescriptorckey\"};\n const std::string WALLETDESCRIPTORKEY{\"walletdescriptorkey\"};\n+const std::string WALLETID{\"walletid\"};\n const std::string WATCHMETA{\"watchmeta\"};\n const std::string WATCHS{\"watchs\"};\n } // namespace DBKeys\n@@ -718,6 +719,10 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssKey >> hash;\n             ssKey >> n;\n             pwallet->LockCoin(COutPoint(hash, n));\n+        } else if (strType == DBKeys::WALLETID) {\n+            uint160 wallet_id;\n+            ssValue >> wallet_id;\n+            pwallet->LoadWalletID(wallet_id);\n         } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n                    strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY &&\n                    strType != DBKeys::VERSION && strType != DBKeys::SETTINGS &&\n@@ -929,6 +934,9 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         }\n     }\n \n+    // Make sure there is a wallet id\n+    pwallet->EnsureWalletIDWithDB(*this);\n+\n     return result;\n }\n \n@@ -1069,6 +1077,11 @@ bool WalletBatch::WriteWalletFlags(const uint64_t flags)\n     return WriteIC(DBKeys::FLAGS, flags);\n }\n \n+bool WalletBatch::WriteWalletID(const uint160& id)\n+{\n+    return WriteIC(DBKeys::WALLETID, id);\n+}\n+\n bool WalletBatch::TxnBegin()\n {\n     return m_batch->TxnBegin();"
      },
      {
        "sha": "b283e655f44bdd7906dcf519f89009fb0bd44fba",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18f59f630dc697d1edf7a33ab6e8328eeff8150f/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18f59f630dc697d1edf7a33ab6e8328eeff8150f/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=18f59f630dc697d1edf7a33ab6e8328eeff8150f",
        "patch": "@@ -79,6 +79,7 @@ extern const std::string VERSION;\n extern const std::string WALLETDESCRIPTOR;\n extern const std::string WALLETDESCRIPTORCKEY;\n extern const std::string WALLETDESCRIPTORKEY;\n+extern const std::string WALLETID;\n extern const std::string WATCHMETA;\n extern const std::string WATCHS;\n } // namespace DBKeys\n@@ -271,6 +272,8 @@ class WalletBatch\n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);\n \n+    bool WriteWalletID(const uint160& id);\n+\n     bool WriteWalletFlags(const uint64_t flags);\n     //! Begin a new transaction\n     bool TxnBegin();"
      }
    ]
  }
]