[
  {
    "sha": "3a3a9f978ba625d9d1f645810e81ecbc3cfb86ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTNhOWY5NzhiYTYyNWQ5ZDFmNjQ1ODEwZTgxZWNiYzNjZmI4NmFl",
    "commit": {
      "author": {
        "name": "Murch",
        "email": "uwblp@student.kit.edu",
        "date": "2017-09-06T23:37:09Z"
      },
      "committer": {
        "name": "Murch",
        "email": "uwblp@student.kit.edu",
        "date": "2017-09-07T22:58:36Z"
      },
      "message": "Ignore old format estimation file",
      "tree": {
        "sha": "9f0137d0a942f986f811d8f2c20b45bbaab6dcbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f0137d0a942f986f811d8f2c20b45bbaab6dcbd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a3a9f978ba625d9d1f645810e81ecbc3cfb86ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a3a9f978ba625d9d1f645810e81ecbc3cfb86ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a3a9f978ba625d9d1f645810e81ecbc3cfb86ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a3a9f978ba625d9d1f645810e81ecbc3cfb86ae/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "089b742a210bf2d62f0e473faa70b30c1b06b657",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/089b742a210bf2d62f0e473faa70b30c1b06b657",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/089b742a210bf2d62f0e473faa70b30c1b06b657"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 3,
      "deletions": 26
    },
    "files": [
      {
        "sha": "c26d99cfce94834046a34960da406c296eb57c6d",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 26,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a3a9f978ba625d9d1f645810e81ecbc3cfb86ae/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a3a9f978ba625d9d1f645810e81ecbc3cfb86ae/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=3a3a9f978ba625d9d1f645810e81ecbc3cfb86ae",
        "patch": "@@ -944,32 +944,9 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n         unsigned int nFileBestSeenHeight;\n         filein >> nFileBestSeenHeight;\n \n-        if (nVersionThatWrote < 149900) {\n-            // Read the old fee estimates file for temporary use, but then discard.  Will start collecting data from scratch.\n-            // decay is stored before buckets in old versions, so pre-read decay and pass into TxConfirmStats constructor\n-            double tempDecay;\n-            filein >> tempDecay;\n-            if (tempDecay <= 0 || tempDecay >= 1)\n-                throw std::runtime_error(\"Corrupt estimates file. Decay must be between 0 and 1 (non-inclusive)\");\n-\n-            std::vector<double> tempBuckets;\n-            filein >> tempBuckets;\n-            size_t tempNum = tempBuckets.size();\n-            if (tempNum <= 1 || tempNum > 1000)\n-                throw std::runtime_error(\"Corrupt estimates file. Must have between 2 and 1000 feerate buckets\");\n-\n-            std::map<double, unsigned int> tempMap;\n-\n-            std::unique_ptr<TxConfirmStats> tempFeeStats(new TxConfirmStats(tempBuckets, tempMap, MED_BLOCK_PERIODS, tempDecay, 1));\n-            tempFeeStats->Read(filein, nVersionThatWrote, tempNum);\n-            // if nVersionThatWrote < 139900 then another TxConfirmStats (for priority) follows but can be ignored.\n-\n-            tempMap.clear();\n-            for (unsigned int i = 0; i < tempBuckets.size(); i++) {\n-                tempMap[tempBuckets[i]] = i;\n-            }\n-        }\n-        else { // nVersionThatWrote >= 149900\n+        if (nVersionRequired < 149900) {\n+            LogPrintf(\"%s: incompatible old fee estimation data (non-fatal). Version: %d\\n\", __func__, nVersionRequired);\n+        } else { // New format introduced in 149900\n             unsigned int nFileHistoricalFirst, nFileHistoricalBest;\n             filein >> nFileHistoricalFirst >> nFileHistoricalBest;\n             if (nFileHistoricalFirst > nFileHistoricalBest || nFileHistoricalBest > nFileBestSeenHeight) {"
      }
    ]
  }
]