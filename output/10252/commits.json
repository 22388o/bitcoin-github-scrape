[
  {
    "sha": "870824e919474c5b39da73fe73199f8453fd540f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzA4MjRlOTE5NDc0YzViMzlkYTczZmU3MzE5OWY4NDUzZmQ1NDBm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-04-21T16:41:01Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-05-23T20:46:14Z"
      },
      "message": "RPC/Mining: Restore API compatibility for prioritisetransaction\n\nBreaking API serves no purpose other than to be incompatible with older versions and other implementations that do support priority",
      "tree": {
        "sha": "369f7fb7e0bc5087e025bb1c5321bba468409c00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/369f7fb7e0bc5087e025bb1c5321bba468409c00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/870824e919474c5b39da73fe73199f8453fd540f",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/870824e919474c5b39da73fe73199f8453fd540f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/870824e919474c5b39da73fe73199f8453fd540f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/870824e919474c5b39da73fe73199f8453fd540f/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b99dafe4204e8e86091e6dab6271e9d8aedfba7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b99dafe4204e8e86091e6dab6271e9d8aedfba7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b99dafe4204e8e86091e6dab6271e9d8aedfba7"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 26,
      "deletions": 20
    },
    "files": [
      {
        "sha": "ed83d1da1ee4c1b80d2a6186f01b5df3c7ec2356",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/870824e919474c5b39da73fe73199f8453fd540f/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/870824e919474c5b39da73fe73199f8453fd540f/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=870824e919474c5b39da73fe73199f8453fd540f",
        "patch": "@@ -112,7 +112,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"estimaterawfee\", 0, \"nblocks\" },\n     { \"estimaterawfee\", 1, \"threshold\" },\n     { \"estimaterawfee\", 2, \"horizon\" },\n-    { \"prioritisetransaction\", 1, \"fee_delta\" },\n+    { \"prioritisetransaction\", 1, \"priority_delta\" },\n+    { \"prioritisetransaction\", 2, \"fee_delta\" },\n     { \"setban\", 2, \"bantime\" },\n     { \"setban\", 3, \"absolute\" },\n     { \"setnetworkactive\", 0, \"state\" },"
      },
      {
        "sha": "1c6f4082e1e7f854bb79ecc5f447d66e48b9a1d1",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/870824e919474c5b39da73fe73199f8453fd540f/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/870824e919474c5b39da73fe73199f8453fd540f/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=870824e919474c5b39da73fe73199f8453fd540f",
        "patch": "@@ -257,26 +257,31 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n // NOTE: Unlike wallet RPC (which use BTC values), mining RPCs follow GBT (BIP 22) in using satoshi amounts\n UniValue prioritisetransaction(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 2)\n+    if (request.fHelp || request.params.size() != 3)\n         throw std::runtime_error(\n-            \"prioritisetransaction <txid> <fee delta>\\n\"\n+            \"prioritisetransaction <txid> <priority delta> <fee delta>\\n\"\n             \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"       (string, required) The transaction id.\\n\"\n-            \"2. fee_delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).\\n\"\n+            \"2. priority_delta (numeric, optional) Fee-independent priority adjustment. Not supported, so must be zero or null.\\n\"\n+            \"3. fee_delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).\\n\"\n             \"                  The fee is not actually paid, only the algorithm for selecting transactions into a block\\n\"\n             \"                  considers the transaction as it would have paid a higher (or lower) fee.\\n\"\n             \"\\nResult:\\n\"\n             \"true              (boolean) Returns true\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"prioritisetransaction\", \"\\\"txid\\\" 10000\")\n-            + HelpExampleRpc(\"prioritisetransaction\", \"\\\"txid\\\", 10000\")\n+            + HelpExampleCli(\"prioritisetransaction\", \"\\\"txid\\\" 0.0 10000\")\n+            + HelpExampleRpc(\"prioritisetransaction\", \"\\\"txid\\\", 0.0, 10000\")\n         );\n \n     LOCK(cs_main);\n \n     uint256 hash = ParseHashStr(request.params[0].get_str(), \"txid\");\n-    CAmount nAmount = request.params[1].get_int64();\n+    CAmount nAmount = request.params[2].get_int64();\n+\n+    if (!(request.params[1].isNull() || request.params[1].get_real() == 0)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Priority is not supported, and adjustment thereof must be zero.\");\n+    }\n \n     mempool.PrioritiseTransaction(hash, nAmount);\n     return true;\n@@ -959,7 +964,7 @@ static const CRPCCommand commands[] =\n   //  --------------------- ------------------------  -----------------------  ----------\n     { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true,  {\"nblocks\",\"height\"} },\n     { \"mining\",             \"getmininginfo\",          &getmininginfo,          true,  {} },\n-    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true,  {\"txid\",\"fee_delta\"} },\n+    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true,  {\"txid\",\"priority_delta\",\"fee_delta\"} },\n     { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,  {\"template_request\"} },\n     { \"mining\",             \"submitblock\",            &submitblock,            true,  {\"hexdata\",\"parameters\"} },\n "
      },
      {
        "sha": "87a50692f6c828dfd79cb91da310e25b31687e98",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/870824e919474c5b39da73fe73199f8453fd540f/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/870824e919474c5b39da73fe73199f8453fd540f/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=870824e919474c5b39da73fe73199f8453fd540f",
        "patch": "@@ -241,7 +241,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n \n         # Now mine some blocks, but make sure tx2 doesn't get mined.\n         # Use prioritisetransaction to lower the effective feerate to 0\n-        self.nodes[0].prioritisetransaction(tx2.hash, int(-self.relayfee*COIN))\n+        self.nodes[0].prioritisetransaction(txid=tx2.hash, fee_delta=int(-self.relayfee*COIN))\n         cur_time = int(time.time())\n         for i in range(10):\n             self.nodes[0].setmocktime(cur_time + 600)\n@@ -254,7 +254,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n \n         # Mine tx2, and then try again\n-        self.nodes[0].prioritisetransaction(tx2.hash, int(self.relayfee*COIN))\n+        self.nodes[0].prioritisetransaction(txid=tx2.hash, fee_delta=int(self.relayfee*COIN))\n \n         # Advance the time on the node so that we can test timelocks\n         self.nodes[0].setmocktime(cur_time+600)"
      },
      {
        "sha": "e225493816e05de84503495308aacc31d4d08010",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/870824e919474c5b39da73fe73199f8453fd540f/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/870824e919474c5b39da73fe73199f8453fd540f/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=870824e919474c5b39da73fe73199f8453fd540f",
        "patch": "@@ -96,19 +96,19 @@ def run_test(self):\n \n         # Check that ancestor modified fees includes fee deltas from\n         # prioritisetransaction\n-        self.nodes[0].prioritisetransaction(chain[0], 1000)\n+        self.nodes[0].prioritisetransaction(txid=chain[0], fee_delta=1000)\n         mempool = self.nodes[0].getrawmempool(True)\n         ancestor_fees = 0\n         for x in chain:\n             ancestor_fees += mempool[x]['fee']\n             assert_equal(mempool[x]['ancestorfees'], ancestor_fees * COIN + 1000)\n         \n         # Undo the prioritisetransaction for later tests\n-        self.nodes[0].prioritisetransaction(chain[0], -1000)\n+        self.nodes[0].prioritisetransaction(txid=chain[0], fee_delta=-1000)\n \n         # Check that descendant modified fees includes fee deltas from\n         # prioritisetransaction\n-        self.nodes[0].prioritisetransaction(chain[-1], 1000)\n+        self.nodes[0].prioritisetransaction(txid=chain[-1], fee_delta=1000)\n         mempool = self.nodes[0].getrawmempool(True)\n \n         descendant_fees = 0\n@@ -126,7 +126,7 @@ def run_test(self):\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         # Prioritise a transaction that has been mined, then add it back to the\n         # mempool by using invalidateblock.\n-        self.nodes[0].prioritisetransaction(chain[-1], 2000)\n+        self.nodes[0].prioritisetransaction(txid=chain[-1], fee_delta=2000)\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n         # Keep node1's tip synced with node0\n         self.nodes[1].invalidateblock(self.nodes[1].getbestblockhash())"
      },
      {
        "sha": "4fc03d254746185021773264564650346422ceab",
        "filename": "test/functional/prioritise_transaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/870824e919474c5b39da73fe73199f8453fd540f/test/functional/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/870824e919474c5b39da73fe73199f8453fd540f/test/functional/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/prioritise_transaction.py?ref=870824e919474c5b39da73fe73199f8453fd540f",
        "patch": "@@ -46,7 +46,7 @@ def run_test(self):\n \n         # add a fee delta to something in the cheapest bucket and make sure it gets mined\n         # also check that a different entry in the cheapest bucket is NOT mined\n-        self.nodes[0].prioritisetransaction(txids[0][0], int(3*base_fee*COIN))\n+        self.nodes[0].prioritisetransaction(txid=txids[0][0], fee_delta=int(3*base_fee*COIN))\n \n         self.nodes[0].generate(1)\n \n@@ -65,7 +65,7 @@ def run_test(self):\n \n         # Add a prioritisation before a tx is in the mempool (de-prioritising a\n         # high-fee transaction so that it's now low fee).\n-        self.nodes[0].prioritisetransaction(high_fee_tx, -int(2*base_fee*COIN))\n+        self.nodes[0].prioritisetransaction(txid=high_fee_tx, fee_delta=-int(2*base_fee*COIN))\n \n         # Add everything back to mempool\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n@@ -109,7 +109,7 @@ def run_test(self):\n         # This is a less than 1000-byte transaction, so just set the fee\n         # to be the minimum for a 1000 byte transaction and check that it is\n         # accepted.\n-        self.nodes[0].prioritisetransaction(tx_id, int(self.relayfee*COIN))\n+        self.nodes[0].prioritisetransaction(txid=tx_id, fee_delta=int(self.relayfee*COIN))\n \n         self.log.info(\"Assert that prioritised free transaction is accepted to mempool\")\n         assert_equal(self.nodes[0].sendrawtransaction(tx_hex), tx_id)\n@@ -120,7 +120,7 @@ def run_test(self):\n         mock_time = int(time.time())\n         self.nodes[0].setmocktime(mock_time)\n         template = self.nodes[0].getblocktemplate()\n-        self.nodes[0].prioritisetransaction(tx_id, -int(self.relayfee*COIN))\n+        self.nodes[0].prioritisetransaction(txid=tx_id, fee_delta=-int(self.relayfee*COIN))\n         self.nodes[0].setmocktime(mock_time+10)\n         new_template = self.nodes[0].getblocktemplate()\n "
      },
      {
        "sha": "077348e3b2daee864eb3072d45a11546ba1fadc3",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/870824e919474c5b39da73fe73199f8453fd540f/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/870824e919474c5b39da73fe73199f8453fd540f/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=870824e919474c5b39da73fe73199f8453fd540f",
        "patch": "@@ -482,7 +482,7 @@ def test_prioritised_transactions(self):\n         assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n         # Use prioritisetransaction to set tx1a's fee to 0.\n-        self.nodes[0].prioritisetransaction(tx1a_txid, int(-0.1*COIN))\n+        self.nodes[0].prioritisetransaction(txid=tx1a_txid, fee_delta=int(-0.1*COIN))\n \n         # Now tx1b should be able to replace tx1a\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n@@ -509,7 +509,7 @@ def test_prioritised_transactions(self):\n         assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n \n         # Now prioritise tx2b to have a higher modified fee\n-        self.nodes[0].prioritisetransaction(tx2b.hash, int(0.1*COIN))\n+        self.nodes[0].prioritisetransaction(txid=tx2b.hash, fee_delta=int(0.1*COIN))\n \n         # tx2b should now be accepted\n         tx2b_txid = self.nodes[0].sendrawtransaction(tx2b_hex, True)"
      }
    ]
  }
]