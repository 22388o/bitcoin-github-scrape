[
  {
    "sha": "185c7f08be68eec878f4b32b3a52145dd57e13bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODVjN2YwOGJlNjhlZWM4NzhmNGIzMmIzYTUyMTQ1ZGQ1N2UxM2Jk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-03-29T16:33:13Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-13T15:55:43Z"
      },
      "message": "Avoid reading the old hd master key during wallet encryption\n\nThis makes SetHDMasterKey responsible for maintinaing the CHDChain\nversion instead of always creating it with the latest version and\nmaking EncryptWallet responsible for keeping the version from\nchanging.",
      "tree": {
        "sha": "a5c8399d8b98895e71eec550e617d1f56103e111",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5c8399d8b98895e71eec550e617d1f56103e111"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/185c7f08be68eec878f4b32b3a52145dd57e13bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/185c7f08be68eec878f4b32b3a52145dd57e13bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/185c7f08be68eec878f4b32b3a52145dd57e13bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/185c7f08be68eec878f4b32b3a52145dd57e13bd/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f34cdcbd806d3e7c9d5dbac2a201755a4cc9828b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f34cdcbd806d3e7c9d5dbac2a201755a4cc9828b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f34cdcbd806d3e7c9d5dbac2a201755a4cc9828b"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 8,
      "deletions": 13
    },
    "files": [
      {
        "sha": "42cecfb5419618679d53995c702223ebbf4a5b5b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 10,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/185c7f08be68eec878f4b32b3a52145dd57e13bd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/185c7f08be68eec878f4b32b3a52145dd57e13bd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=185c7f08be68eec878f4b32b3a52145dd57e13bd",
        "patch": "@@ -637,12 +637,9 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n         // if we are using HD, replace the HD master key (seed) with a new one\n         if (IsHDEnabled()) {\n-            CKey key;\n-            CPubKey masterPubKey = GenerateNewHDMasterKey();\n-            // preserve the old chains version to not break backward compatibility\n-            CHDChain oldChain = GetHDChain();\n-            if (!SetHDMasterKey(masterPubKey, &oldChain))\n+            if (!SetHDMasterKey(GenerateNewHDMasterKey())) {\n                 return false;\n+            }\n         }\n \n         NewKeyPool();\n@@ -1308,17 +1305,14 @@ CPubKey CWallet::GenerateNewHDMasterKey()\n     return pubkey;\n }\n \n-bool CWallet::SetHDMasterKey(const CPubKey& pubkey, CHDChain *possibleOldChain)\n+bool CWallet::SetHDMasterKey(const CPubKey& pubkey)\n {\n     LOCK(cs_wallet);\n     // store the keyid (hash160) together with\n     // the child index counter in the database\n     // as a hdchain object\n     CHDChain newHdChain;\n-    if (possibleOldChain) {\n-        // preserve the old chains version\n-        newHdChain.nVersion = possibleOldChain->nVersion;\n-    }\n+    newHdChain.nVersion = CanSupportFeature(FEATURE_HD_SPLIT) ? CHDChain::VERSION_HD_CHAIN_SPLIT : CHDChain::VERSION_HD_BASE;\n     newHdChain.masterKeyID = pubkey.GetID();\n     SetHDChain(newHdChain, false);\n "
      },
      {
        "sha": "4e7e1b57977b7f2f08610bdb206888735c62cfed",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/185c7f08be68eec878f4b32b3a52145dd57e13bd/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/185c7f08be68eec878f4b32b3a52145dd57e13bd/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=185c7f08be68eec878f4b32b3a52145dd57e13bd",
        "patch": "@@ -1056,9 +1056,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CPubKey GenerateNewHDMasterKey();\n     \n     /* Set the current HD master key (will reset the chain child index counters)\n-       If possibleOldChain is provided, the parameters from the old chain (version)\n-       will be preserved. */\n-    bool SetHDMasterKey(const CPubKey& key, CHDChain *possibleOldChain = nullptr);\n+       Sets the master key's version based on the current wallet version (so the\n+       caller must ensure the current wallet version is correct before calling\n+       this function). */\n+    bool SetHDMasterKey(const CPubKey& key);\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  }
]