sdaftuar,2017-10-25T19:44:46Z,"I'm still working on a unit test for this, but wanted to get some eyes on it for consideration in 0.15.0.2.",https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-339448546,339448546,
gmaxwell,2017-10-26T01:17:17Z,Remind me how the scheduler works... when blocks are slow is this going to result in all hosts on the network triggering their extra peer at basically the same time?  Or do we not need to insert a bit of randomness in order to spread them out over the checking interval?,https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-339520793,339520793,
sdaftuar,2017-10-26T15:58:54Z,"Regarding the scheduler, I mentioned this on IRC to @gmaxwell:\n> gmaxwell: my understanding of the scheduler is that it'll start scheduling callbacks at some point after startup, so i wouldn't expect the network to be completely synced\n> gmaxwell: also there's random drift, since the scheduler schedules the next callback N milliseconds after the prior one finishes \n> but worth discussing whe",https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-339714002,339714002,
sdaftuar,2017-10-26T20:11:05Z,Needed rebase after #11490.,https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-339786560,339786560,
sdaftuar,2017-10-27T19:03:55Z,Pushed up a few small fixups.,https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-340058659,340058659,
sdaftuar,2017-10-27T20:43:14Z,"@TheBlueMatt raised concerns about holding the 9th connection for too long.  One concern would be if we are reducing the number of available inbound slots on the network by too much. Another potentially more serious concern is that if we're holding the 9th connection long enough for a new block to be found and relayed, then over time we'll be selecting for peers with the fastest connectivity.\n\",https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-340080341,340080341,
sdaftuar,2017-10-27T21:36:20Z,Addressed @TheBlueMatt's nits.,https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-340095522,340095522,
sipa,2017-10-28T18:22:14Z,Needs rebase.,https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-340210331,340210331,
sdaftuar,2017-10-28T19:26:14Z,Squashed and rebased.,https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-340214132,340214132,
theuni,2017-10-28T19:50:03Z,"Without seeing the code, I think that would probably be simpler and more\nobvious.\n\nI wonder if we could actually combine the behavior with feelers. Launch a\nfeeler every 20 min or so as usual, and rather than disconnecting\nimmediately, replace a worse connection if necessary, and upgrade from\nfeeler to full outbound.\n\nOn Oct 28, 2017 11:11 AM, ""Suhas Daftuar"" <notifications@github.com> wro",https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-340215496,340215496,
sdaftuar,2017-10-29T13:41:32Z,"Fixed a bug and changed the extra peer connection to be exclusive with a feeler, rather than in addition to a feeler.\n",https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-340263187,340263187,
sdaftuar,2017-10-30T17:04:40Z,"Updated to address a nit from @jimpo, and reduce the check-for-eviction interval down to 45 seconds (as @TheBlueMatt suggested).\n\nSquashed https://github.com/sdaftuar/bitcoin/commits/11560.0 -> 8a27fdf9ae691eb32b8b5e9f531e16266f8227a8",https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-340513215,340513215,
TheBlueMatt,2017-10-30T23:11:16Z,re-utACK 8a27fdf9ae691eb32b8b5e9f531e16266f8227a8,https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-340612213,340612213,
achow101,2017-10-31T00:17:40Z,utACK 8a27fdf9ae691eb32b8b5e9f531e16266f8227a8,https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-340622705,340622705,
sdaftuar,2017-10-31T18:02:53Z,@theuni Pushed a commit that rewrites the `ForEachNode()` into a loop on `mapNodeState`.,https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-340850711,340850711,
gmaxwell,2017-11-01T01:01:17Z,"ACK, I've had various versions of this running on a mainnet node for about 5 days now, but with the stall timeout cut down to a fraction of the default value so I could see it in action.  Latest versions appear to work as expected.  Including managing to keep the latest outbound when a block came over it, dropping instead a different outbound that never got a block.\n\nI'm not too worried about ",https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-340949227,340949227,
sdaftuar,2017-11-01T14:25:04Z,"> I'm not too worried about matt's unbalancing point: this only runs fairly rarely, it runs fairly slowly, and there are 4 protected peers that it won't unbalance even in the worst case.\n\nActually, the protected-peers logic from the chain sync eviction algorithm wasn't being used here.  After further thought I don't actually have any good reason not to protect those peers from eviction, and I ",https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-341121070,341121070,
theuni,2017-11-01T14:43:36Z,"utACK as-is, but I'd really like to re-work this in master post-merge. We can separate the net vs net_processing states so that they're not so intertwined. ",https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-341126607,341126607,
sdaftuar,2017-11-01T15:40:08Z,Squashed https://github.com/sdaftuar/bitcoin/commits/11560.1 -> dac71cdba95a1b004d2daae322fc026f184ea082,https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-341144382,341144382,
sdaftuar,2017-11-01T16:05:40Z,"@TheBlueMatt just pointed out to me that ForNode has to walk the vector of CNode's to find the one we're looking for, so by rewriting the ForEachNode to a loop on mapNodeState (as suggested by @theuni up here: https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148040947), we're now doing n^2 work instead of n log n work...  That seems unfortunate to me -- default configurations for listenin",https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-341152366,341152366,
sdaftuar,2017-11-01T17:01:13Z,"Pushed a commit (to be squashed) which reverts the loop back to a ForEachNode, rather than walking mapNodeState.  Also added a nullptr check on the lookup into mapNodeState, just to be safe.",https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-341169493,341169493,
TheBlueMatt,2017-11-01T17:23:24Z,re-utACK 79f686b7344b9612123fddec8397a01ab0356713,https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-341176248,341176248,
sdaftuar,2017-11-01T17:56:15Z,Squashed https://github.com/sdaftuar/bitcoin/commits/11560.3 -> 7d9415396b049dd1477febb71930a70870c5a541,https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-341187169,341187169,
theuni,2017-11-01T18:23:43Z,utACK 7d94153.,https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-341195382,341195382,
gmaxwell,2017-11-01T20:00:05Z,re-ut part of my ACK. I'll move my tests onto this code.,https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-341222555,341222555,
sdaftuar,2017-11-02T16:42:34Z,"Squashed https://github.com/sdaftuar/bitcoin/commits/11560.4 -> 626291508c433488439b662f2e88882048fb59fb\n\n```\n$ git diff 626291508c433488439b662f2e88882048fb59fb 7d9415396b049dd1477febb71930a70870c5a541\ndiff --git a/src/net_processing.h b/src/net_processing.h\nindex 0a49972eed..c1f1274f80 100644\n--- a/src/net_processing.h\n+++ b/src/net_processing.h\n@@ -37,7 +37,7 @@ static constexpr",https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-341483432,341483432,
gmaxwell,2017-11-02T17:28:02Z,re-ACK.,https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-341497985,341497985,
theuni,2017-11-02T18:52:24Z,utACK 626291508c433488439b662f2e88882048fb59fb,https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-341522963,341522963,
ghost,2018-02-24T01:20:11Z,"I had a slow sync issue which may have been related to and/or fixed by this... See https://github.com/bitcoin/bitcoin/issues/12514\n\nI eventually did get the recompile of the GitHub code but the version # did not change.\n\nI hope my issue/resolution helps in fixing this issue or confirming it is fixed :)",https://github.com/bitcoin/bitcoin/pull/11560#issuecomment-368184325,368184325,
gmaxwell,2017-10-25T19:50:08Z,"I'd prefer to see this be a int_64 max, so I don't need to reason about how monotone our clocks aren't.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r146967629,146967629,src/net_processing.cpp
sdaftuar,2017-10-25T19:56:28Z,Done,https://github.com/bitcoin/bitcoin/pull/11560#discussion_r146969139,146969139,src/net_processing.cpp
TheBlueMatt,2017-10-26T22:30:12Z,"You may want to note the (IMO) critical part of the cpp comment:\n""Also exclude peers that haven't finished initial connection handshake yet"" ie ""this may return a value less than the number of outbound connections - the number of normal outbound connection slots in cases where some outbound connections are not yet fully connected"".",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147284900,147284900,src/net.h
TheBlueMatt,2017-10-26T22:55:36Z,"I'm confused - it looks like we wont ever have both a feeler and an extra outbound open at one time, why change this?",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147288662,147288662,src/net.cpp
TheBlueMatt,2017-10-27T18:17:57Z,"Care to add a comment here (or in the comment block above) noting that we will not make a new connection if we have our ""extra slot"" used by *either* a feeler or an ""extra outbound"", both are not allowed.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147481774,147481774,src/net.cpp
sdaftuar,2017-10-27T18:25:41Z,"whoops, this comment is wrong, will fix.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147483839,147483839,src/net.h
sdaftuar,2017-10-27T18:32:21Z,"> it looks like we wont ever have both a feeler and an extra outbound at one time\n\nWe will in general have both a feeler and an extra outbound at the same time.  There was an incorrect comment (from a first iteration of this patch) describing the extra outbound peer as ""stealing"" the feeler connection, but that is not actually true.  I'll delete that comment.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147485327,147485327,src/net.cpp
TheBlueMatt,2017-10-27T18:39:11Z,Shouldn't there be an equivalent addition for compact block announcements?,https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147486960,147486960,src/net_processing.cpp
TheBlueMatt,2017-10-27T18:55:29Z,Please no more locking documentation - use the self-documenting AssertLockHeld or GUARDED_BY.,https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147490732,147490732,src/net_processing.cpp
TheBlueMatt,2017-10-27T19:08:16Z,"Shouldnt this almost always be true (because we only call this function once every STALE_CHECK_INTERVAL)? Also, I think we can turn this down way more than 5 minutes, if we think we're behind, and we connect to someone, it shouldn't take them 5 minutes to send us a header, and if it does, we probably weren't behind and our existing peers are fine, so we should just disconnect them.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147493512,147493512,src/net_processing.cpp
sdaftuar,2017-10-27T21:22:32Z,"oops, yes.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147519600,147519600,src/net_processing.cpp
sdaftuar,2017-10-27T21:24:21Z,"Maybe almost always, but definitely not always -- our outbound peers can initiate disconnects, too, and it might take us a while to find one.\n\nI've pushed up changes to split the peer eviction onto a shorter timer (2.5 minutes), where we only require 30 seconds of connectivity to disconnect.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147519872,147519872,src/net_processing.cpp
sdaftuar,2017-10-27T21:24:43Z,Sounds good,https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147519932,147519932,src/net_processing.cpp
sdaftuar,2017-10-27T21:36:00Z,"Not sure if this comment was made before we chatted offline, but it is possible to have both a feeler and an ""extra"" outbound peer simultaneously (just not in the same loop iteration, but that's nonsensical anyway since we only initiate a single connection in a single loop iteration, regardless).",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147521702,147521702,src/net.cpp
theuni,2017-10-28T00:12:33Z,I think this might be greatly simplified by extending CSemaphore to have an adjustable threshold.,https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147539231,147539231,src/net.cpp
sdaftuar,2017-10-28T15:11:20Z,"Any thoughts on @TheBlueMatt's suggestion (mentioned on IRC yesterday) to just use the feeler connection for the extra peer, rather than initiate a potential 10th connection?\n\nhttps://botbot.me/freenode/bitcoin-core-dev/2017-10-27/?msg=92828477&page=2\n\nI'm leaning towards doing that, so nMaxExtraOutbound would go away.  I guess this function wouldn't change though.\n\n",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147556553,147556553,src/net.cpp
gmaxwell,2017-10-29T17:40:00Z,"If this loop fails to run when it should-- e.g. host it suspended, then later when it does run it will run additional times.  I believe this should be = time_in_seconds + STALE_CHECK_INTERVAL.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147588350,147588350,src/net_processing.cpp
gmaxwell,2017-10-29T17:43:13Z,Doubly so because nothing appears to initialize it to a time to begin with...,https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147588441,147588441,src/net_processing.cpp
sdaftuar,2017-10-29T17:51:50Z,Thanks for catching that; fixed.,https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147588654,147588654,src/net_processing.cpp
TheBlueMatt,2017-10-29T18:00:59Z,Doesn't this lead us to make infinite outbound peers if net_processing isnt agressively marking TryNewOutboundPeer false?,https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147588960,147588960,src/net.cpp
sdaftuar,2017-10-29T20:03:51Z,"Yes, I think if `GetTryNewOutboundPeer` is set, then we keep trying outbound peers up to the semaphore count, at which point I believe we block.  Is that problematic for some reason?  I'm not super familiar with the design here but my understanding from reading the code was that this was how this logic was originally written (ie before feelers were introduced, with the `continue` in the `if` block",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147592693,147592693,src/net.cpp
TheBlueMatt,2017-10-29T22:35:58Z,"Grrr, indeed, I suppose this is correct.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147597570,147597570,src/net.cpp
TheBlueMatt,2017-10-29T22:47:28Z,Why check if we need to disconnect every 2.5 minutes and only require it being online 30 seconds? Why not just make both 30 seconds (or maybe 45 and 30) so that we dont always end up holding our extra peer for 2.5 minutes?,https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147597971,147597971,src/net_processing.cpp
sdaftuar,2017-10-29T23:19:23Z,"I'm just not really sure how frequent is too-frequent for scheduled callbacks; there's a tradeoff between wasting time on calls (especially in this framework, where we always have the callback fire to check for eviction, even if we've never called SetExtraOutboundPeer()) and gaining precision with how long we allow the extra peer to be connected, and it's not clear to me how to figure out the opti",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147599028,147599028,src/net_processing.cpp
TheBlueMatt,2017-10-30T00:12:38Z,"The callback in the connman->GetExtraOutboundCount() == 0 case should be almost free, no?",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147600834,147600834,src/net_processing.cpp
jimpo,2017-10-30T16:02:45Z,Should this be private?,https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147750053,147750053,src/net_processing.h
sdaftuar,2017-10-30T16:39:11Z,"Sounds good, done.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147761294,147761294,src/net_processing.h
sdaftuar,2017-10-30T16:39:27Z,"Alright, changed to 45 seconds.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147761366,147761366,src/net_processing.cpp
achow101,2017-10-30T17:34:38Z,"Since it is not uncommon for blocks to take more than 30 minutes to be found, maybe this threshold should be higher? It also seems like every node is going to be making that outbound connection at around the same time, maybe there should be some element of randomness to that to avoid some sort of fingerprinting?",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147777589,147777589,src/net_processing.cpp
sdaftuar,2017-10-30T20:01:22Z,"I think the scheduler behavior will mean that nodes are going to spread out their extra connections over a 10 minute window.  Since we already do feeler connections on a (poisson-random) 2 minute interval, and this is taking the place of a feeler, I don't think this will introduce too much network load.\n\nIf there's a fingerprinting concern, I can try to come up with some fuzzing on when the co",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147817797,147817797,src/net_processing.cpp
achow101,2017-10-31T00:17:26Z,"> but I'm not sure I understand the specific fingerprinting risk with this logic?\n\nI don't think there is any. I had a fingerprinting concern but then realized that that concern was stupid and stopped being concerned about it.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r147869028,147869028,src/net_processing.cpp
theuni,2017-10-31T15:55:53Z,"Can we loop through mapNodeState here instead? I'd really like to avoid gluing these layers back together.\n\nAlso, I believe that would mean that the ```nBlocksInFlight != 0``` check could be applied here.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148040947,148040947,src/net_processing.cpp
theuni,2017-10-31T16:08:29Z,"Doesn't this mean that if the worst peer is only slightly worse than the second-worst, and the worst has a block in flight, both would stay connected? In that case, I would expect the second-worst to be evicted.\n\nAdding to the comment above, I think that checking for nBlocksInFlight in the worst_peer calculation above avoids this?",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148045221,148045221,src/net_processing.cpp
theuni,2017-10-31T16:11:16Z,Why is this done on a timer rather than making InitializeNode aware that a new node is a replacement?,https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148046180,148046180,src/net_processing.cpp
sdaftuar,2017-10-31T16:57:31Z,"I think it'd be difficult to try to do in InitializeNode, because you don't know who you are going to want to evict until you're ready to do the eviction.  For example, what happens if one (or all) of your first 8 peers disconnects in between the InitializeNode for your 9th peer, and eviction time? ",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148060276,148060276,src/net_processing.cpp
sdaftuar,2017-10-31T17:09:43Z,"I don't think it's necessary to evict in that situation, since we'll just try to evict again in 45 seconds, and I thought it was more conservative to not evict.  For instance, the block in flight might be at equal work to our tip, rather than more work, and we wouldn't want to disconnect the older peer in that situation where we're just downloading an equal-work-chain-tip.\n\nAlso if you evict t",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148063968,148063968,src/net_processing.cpp
sdaftuar,2017-10-31T17:18:43Z,"I just wrote this in my other response, but I don't think the blocks in flight check is a good thing to sort on -- I think there may be edge cases where somehow your slowest peer gets protected, and you would evict someone else.\n\nI'll see what it looks like when I try to loop mapNodeState instead.  I think I'll still have to call `ForNode` inside that loop in order to get to the pnode, so I do",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148066805,148066805,src/net_processing.cpp
theuni,2017-10-31T23:55:38Z,"ok, understood",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148156933,148156933,src/net_processing.cpp
theuni,2017-11-01T00:03:15Z,"I think we should probably bump this to 60sec, to match the minimum time allowed for the handshake. Or was 30sec a deliberate choice?\n\nThat would also give us the handy property that all fSuccessfullyConnected nodes can be disconnected without checking the connection duration.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148157875,148157875,src/net_processing.h
gmaxwell,2017-11-01T00:57:55Z,">  disconnected without checking the connection duration.\n\nHuh.. then you'd disconnect someone who completed the handshake fast, without giving them more than a few seconds to transfer blocks.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148163572,148163572,src/net_processing.h
theuni,2017-11-01T01:06:39Z,"Sorry, I meant that in the context of the check here: https://github.com/bitcoin/bitcoin/pull/11560/commits/21e8b03a353abd0f2f4190194f224ad92d6f5bc8#diff-eff7adeaec73a769788bb78858815c91R3055",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148164266,148164266,src/net_processing.h
TheBlueMatt,2017-11-01T13:28:33Z,"I dont really think it matters here - these are separate, we're seeking a new useful outbound peer, if it doesn't respond in 30 seconds with a headers message, it probably isnt/wont be useful. Honestly I think we should significantly decrease the headers handshake timeout, there isn't really a scenario where you should need 60 seconds for a few packets back and forth, even in super lossy environme",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148259135,148259135,src/net_processing.h
sipa,2017-11-01T15:41:36Z,"If this CS doesn't protect more than a single boolean, it's better to instead just use an `std::atomic<bool>`.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148296685,148296685,src/net.h
sdaftuar,2017-11-01T15:48:15Z,Done,https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148298765,148298765,src/net.h
sipa,2017-11-02T06:14:39Z,Nit: this is a slightly easier to reason about if you make the member definition for connman `CConnman* const connman;` (which compiles without other changes),https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148449364,148449364,src/net_processing.cpp
sipa,2017-11-02T06:19:54Z,Make assert?,https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148449905,148449905,src/net_processing.cpp
sdaftuar,2017-11-02T12:30:33Z,"I thought our preference was to not assert except in situations where node shutdown is necessary to avoid eg consensus failure or lost funds or something similarly bad?  I'll add the assert if that's your preference, but I was just nervous about introducing a crash if I got some race condition wrong.\n\nI could add a LogPrinf() here instead perhaps?",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148517580,148517580,src/net_processing.cpp
sdaftuar,2017-11-02T12:31:26Z,Sounds good.,https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148517746,148517746,src/net_processing.cpp
TheBlueMatt,2017-11-02T16:11:15Z,"Agree with @sdaftuar, not only should we not be asserting here, but I want to move away from net_processing relying on specific order-of-operations for deletion of CNode/FinalizeNode in net.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148581753,148581753,src/net_processing.cpp
sipa,2017-11-02T16:17:21Z,"@TheBlueMatt Perhaps asserting is too harsh, but silently ignoring the fact that an underlying assumption is broken seems bad too. \n\nAlso, it seems very reasonable to assume that net does not invoke any net_processing operations before initializing a node, or after finalizing it? That seems easy to guarantee, and very hard for handlers to deal with if untrue.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148583533,148583533,src/net_processing.cpp
TheBlueMatt,2017-11-02T16:28:16Z,"@sipa If we moved mapNodeState outside of cs_main (which we should do) plus take #10697, then this would be a legitimate race that doesn't matter - if FinalizeNode is called while this loop is running, we may hit this condition and evict our 8th peer because our 9th just disconnected, which may happen either way because the peer may disconnect a millisecond after we evict. This is a perfectly fine",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148586720,148586720,src/net_processing.cpp
sipa,2017-11-02T16:38:41Z,"Got it, I withdraw my comment.",https://github.com/bitcoin/bitcoin/pull/11560#discussion_r148589725,148589725,src/net_processing.cpp
