BitcoinPullTester,2014-05-17T15:12:16Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/6a248d515831109fc3044f6901a548cf385a592a for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tes",https://github.com/bitcoin/bitcoin/pull/4194#issuecomment-43409456,43409456,
laanwj,2014-05-19T14:00:50Z,What kind of command-line mistakes is this trying to protect against?\nCan we avoid needing to import boost::regex just for this?\n,https://github.com/bitcoin/bitcoin/pull/4194#issuecomment-43507513,43507513,
sipa,2014-05-19T14:41:08Z,"I've for a long time been wanting to write a simple utility module that would allow command-line options to be written as global objects (initialized with defaults, range information, description), that can be used as variables (and queried for being set or not), and with extra methods to request a list of all, ... to build --help output. It would make things like this trivial.\n",https://github.com/bitcoin/bitcoin/pull/4194#issuecomment-43512476,43512476,
laanwj,2014-05-21T08:06:22Z,"@sipa I agree with that approach. Though we also have to take care not to overdesign, the current argument handling is really ad-hoc and error prone (and also not thread-safe I think). A new solution should also make it possible to query the currently effective values of all settings. That would be a useful RPC.\n\n(Though, if you spend time coding on bitcoin pleease work on the headers first stuf",https://github.com/bitcoin/bitcoin/pull/4194#issuecomment-43725045,43725045,
kostaz,2014-05-22T10:35:13Z,"This regex fix was just ad-hoc to fix a bug when I used (unintentionally) wrong parameters.\nI did saw that the whole parameter handling code is the ad-hoc code, but I just wanted to contribute my penny into the development effort.\nWhat do you mean by ""headers first stuff""?\n",https://github.com/bitcoin/bitcoin/pull/4194#issuecomment-43871822,43871822,
leofidus,2014-05-22T15:11:42Z,@kostaz I think the headers first part was still directed at sipa. He coded a more efficient block download algorithm that works by downloading the headers of all blocks before downloading the blocks. That allows to download from multiple peers simultaniously and allows for much smarter block download in general. He's submitting that piece for piece because it is so much code to review.\n,https://github.com/bitcoin/bitcoin/pull/4194#issuecomment-43901298,43901298,
sipa,2014-05-23T15:55:00Z,"Yeah, ignore that comment.\n\nIs there any reason not to immediately die if an unparseable command-line options appears?\n",https://github.com/bitcoin/bitcoin/pull/4194#issuecomment-44028726,44028726,
kostaz,2014-05-28T16:35:27Z,"IMHO, it is better to die immediately.\nIt is much worse to run with wrong parameters and, potentially, corrupt anything.\nDo you think I should update it?\n",https://github.com/bitcoin/bitcoin/pull/4194#issuecomment-44432110,44432110,
laanwj,2014-05-28T16:53:49Z,"@kostaz I agree that more thorough argument checking would be useful, but I don't think your current regex-based check is useful. It doesn't protect against the most common errors which seem to be:\n- Mistyped parameter names\n- Invalid values for parameters\n- Using `-parameter value` instead of `-parameter=value`\n",https://github.com/bitcoin/bitcoin/pull/4194#issuecomment-44434595,44434595,
kostaz,2014-05-28T20:57:32Z,Fully agree. It was just a quick fix.\nI'd like to redo it in a proper/fuller way.\nIs there anybody working on this stuff already?\nJust trying to avoid effort duplication...\n,https://github.com/bitcoin/bitcoin/pull/4194#issuecomment-44463452,44463452,
laanwj,2014-05-29T06:22:31Z,"I don't think anyone is working on it. See also #1044 for previous discussion. It would be a larger change that would need a refactoring of the option system.\n\nCurrently the complete list of options, let alone how their values are to be parsed, is not specified in advance. A possible design would be to use some table-based structure like CRPCCommand in `rpcserver.cpp`, with 'actors' that parse/v",https://github.com/bitcoin/bitcoin/pull/4194#issuecomment-44498315,44498315,
sipa,2014-05-29T11:09:29Z,"Based on some experience with another config framework, I would suggest something like this:\n- Have data types CIntOption, CStringOption, ... that on construction take a name, a description, a default value.\n- Constructing them automatically registers them in a table of known options.\n- Internally they retain their value, and whether or not they were explicitly set.\n- They can be implicitly ca",https://github.com/bitcoin/bitcoin/pull/4194#issuecomment-44521490,44521490,
laanwj,2014-06-03T13:41:58Z,Closing this pull as a larger redesign is needed to improve argument error reporting than this specific implementation. I've referred to the discussion in this pull from #1044 because of the useful information in case anyone is going to redesign the argument handling.\n,https://github.com/bitcoin/bitcoin/pull/4194#issuecomment-44965479,44965479,
