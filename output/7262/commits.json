[
  {
    "sha": "2409865e14dca0704e5618915d6ef902610d91be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDA5ODY1ZTE0ZGNhMDcwNGU1NjE4OTE1ZDZlZjkwMjYxMGQ5MWJl",
    "commit": {
      "author": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2015-12-29T00:56:53Z"
      },
      "committer": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2015-12-29T00:56:53Z"
      },
      "message": "Reduce inefficiency of GetAccountAddress()\n\nDon't scan the wallet to see if the current key has been used if we're going to make a new key anyway.\nStop scanning the wallet as soon as we see that the current key has been used.\nDon't call isValid() twice on the current key.",
      "tree": {
        "sha": "faf29f45833e39c11f836092251acd3e2a5830bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/faf29f45833e39c11f836092251acd3e2a5830bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2409865e14dca0704e5618915d6ef902610d91be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2409865e14dca0704e5618915d6ef902610d91be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2409865e14dca0704e5618915d6ef902610d91be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2409865e14dca0704e5618915d6ef902610d91be/comments",
    "author": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be9a9a3d2253ceccf123572b97a890c489a5a9be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be9a9a3d2253ceccf123572b97a890c489a5a9be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be9a9a3d2253ceccf123572b97a890c489a5a9be"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 15,
      "deletions": 16
    },
    "files": [
      {
        "sha": "f5b1a7de986b109c01f743dcd4b3faf26b253281",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 16,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2409865e14dca0704e5618915d6ef902610d91be/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2409865e14dca0704e5618915d6ef902610d91be/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2409865e14dca0704e5618915d6ef902610d91be",
        "patch": "@@ -137,26 +137,25 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     CAccount account;\n     walletdb.ReadAccount(strAccount, account);\n \n-    bool bKeyUsed = false;\n-\n-    // Check if the current key has been used\n-    if (account.vchPubKey.IsValid())\n-    {\n-        CScript scriptPubKey = GetScriptForDestination(account.vchPubKey.GetID());\n-        for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin();\n-             it != pwalletMain->mapWallet.end() && account.vchPubKey.IsValid();\n-             ++it)\n-        {\n-            const CWalletTx& wtx = (*it).second;\n-            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n-                if (txout.scriptPubKey == scriptPubKey)\n-                    bKeyUsed = true;\n+    if (!bForceNew) {\n+        if (!account.vchPubKey.IsValid())\n+            bForceNew = true;\n+        else {\n+            // Check if the current key has been used\n+            CScript scriptPubKey = GetScriptForDestination(account.vchPubKey.GetID());\n+            for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin();\n+                 it != pwalletMain->mapWallet.end() && account.vchPubKey.IsValid();\n+                 ++it)\n+                BOOST_FOREACH(const CTxOut& txout, (*it).second.vout)\n+                    if (txout.scriptPubKey == scriptPubKey) {\n+                        bForceNew = true;\n+                        break;\n+                    }\n         }\n     }\n \n     // Generate a new key\n-    if (!account.vchPubKey.IsValid() || bForceNew || bKeyUsed)\n-    {\n+    if (bForceNew) {\n         if (!pwalletMain->GetKeyFromPool(account.vchPubKey))\n             throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n "
      }
    ]
  }
]