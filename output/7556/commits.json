[
  {
    "sha": "a8261aea4a67d3482893b01c6583b58048b10b95",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODI2MWFlYTRhNjdkMzQ4Mjg5M2IwMWM2NTgzYjU4MDQ4YjEwYjk1",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-12-01T01:53:37Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-02-17T15:36:09Z"
      },
      "message": "Track the last size the mempool was trimmed to.\n\nThis is used so GetMinFee knows what the decay rate should be without needing to be passed an argument.",
      "tree": {
        "sha": "d68bd73c2dbe2379a7b739734c199d097ccdb4eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d68bd73c2dbe2379a7b739734c199d097ccdb4eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8261aea4a67d3482893b01c6583b58048b10b95",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8261aea4a67d3482893b01c6583b58048b10b95",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8261aea4a67d3482893b01c6583b58048b10b95",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8261aea4a67d3482893b01c6583b58048b10b95/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b70a64d62c6e64288762d062414cc979f880c54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b70a64d62c6e64288762d062414cc979f880c54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b70a64d62c6e64288762d062414cc979f880c54"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 24,
      "deletions": 17
    },
    "files": [
      {
        "sha": "73ddb91092260ec1dd6b48106247f47acc43ce08",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8261aea4a67d3482893b01c6583b58048b10b95/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8261aea4a67d3482893b01c6583b58048b10b95/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a8261aea4a67d3482893b01c6583b58048b10b95",
        "patch": "@@ -1104,7 +1104,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n                 strprintf(\"%d\", nSigOps));\n \n-        CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n+        CAmount mempoolRejectFee = pool.GetMinFee().GetFee(nSize);\n         if (mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n         } else if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nModifiedFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(entry.GetPriority(chainActive.Height() + 1))) {"
      },
      {
        "sha": "0f57df99d1e4fe2a81e330750a8e45d8b5996e05",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8261aea4a67d3482893b01c6583b58048b10b95/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8261aea4a67d3482893b01c6583b58048b10b95/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=a8261aea4a67d3482893b01c6583b58048b10b95",
        "patch": "@@ -522,7 +522,7 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n         *answerFoundAtTarget = confTarget - 1;\n \n     // If mempool is limiting txs , return at least the min fee from the mempool\n-    CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    CAmount minPoolFee = pool.GetMinFee().GetFeePerK();\n     if (minPoolFee > 0 && minPoolFee > median)\n         return CFeeRate(minPoolFee);\n \n@@ -550,7 +550,7 @@ double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerF\n         return -1;\n \n     // If mempool is limiting txs, no priority txs are allowed\n-    CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    CAmount minPoolFee = pool.GetMinFee().GetFeePerK();\n     if (minPoolFee > 0)\n         return INF_PRIORITY;\n "
      },
      {
        "sha": "97542771fc4a8f51d672872d97420a238dd4f4f5",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8261aea4a67d3482893b01c6583b58048b10b95/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8261aea4a67d3482893b01c6583b58048b10b95/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=a8261aea4a67d3482893b01c6583b58048b10b95",
        "patch": "@@ -786,7 +786,7 @@ UniValue mempoolInfoToJSON()\n     ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n     size_t maxmempool = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     ret.push_back(Pair(\"maxmempool\", (int64_t) maxmempool));\n-    ret.push_back(Pair(\"mempoolminfee\", ValueFromAmount(mempool.GetMinFee(maxmempool).GetFeePerK())));\n+    ret.push_back(Pair(\"mempoolminfee\", ValueFromAmount(mempool.GetMinFee().GetFeePerK())));\n \n     return ret;\n }"
      },
      {
        "sha": "f865f513efdb6755635ed2a40e6db285b429d44e",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8261aea4a67d3482893b01c6583b58048b10b95/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8261aea4a67d3482893b01c6583b58048b10b95/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=a8261aea4a67d3482893b01c6583b58048b10b95",
        "patch": "@@ -369,7 +369,7 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK(!pool.exists(tx3.GetHash()));\n \n     CFeeRate maxFeeRateRemoved(25000, ::GetSerializeSize(CTransaction(tx3), SER_NETWORK, PROTOCOL_VERSION) + ::GetSerializeSize(CTransaction(tx2), SER_NETWORK, PROTOCOL_VERSION));\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee().GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n \n     CMutableTransaction tx4 = CMutableTransaction();\n     tx4.vin.resize(2);\n@@ -447,27 +447,30 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     std::list<CTransaction> conflicts;\n     SetMockTime(42);\n     SetMockTime(42 + CTxMemPool::ROLLING_FEE_HALFLIFE);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee().GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n     // ... we should keep the same min fee until we get a block\n     pool.removeForBlock(vtx, 1, conflicts);\n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/2);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee().GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/2);\n     // ... then feerate should drop 1/2 each halflife\n \n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/4);\n+    pool.TrimToSize(pool.DynamicMemoryUsage() * 5 / 2);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee().GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/4);\n     // ... with a 1/2 halflife when mempool is < 1/2 its target size\n \n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/8);\n+    pool.TrimToSize(pool.DynamicMemoryUsage() * 9 / 2);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee().GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/8);\n     // ... with a 1/4 halflife when mempool is < 1/4 its target size\n \n     SetMockTime(42 + 7*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 1000);\n+    pool.TrimToSize(pool.DynamicMemoryUsage() + 1);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee().GetFeePerK(), 1000);\n     // ... but feerate should never drop below 1000\n \n     SetMockTime(42 + 8*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 0);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee().GetFeePerK(), 0);\n     // ... unless it has gone all the way to 0 (after getting past 1000/2)\n \n     SetMockTime(0);"
      },
      {
        "sha": "3c0a6336e2512e7fda628ba0ea8cdb1fccbdb82c",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8261aea4a67d3482893b01c6583b58048b10b95/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8261aea4a67d3482893b01c6583b58048b10b95/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=a8261aea4a67d3482893b01c6583b58048b10b95",
        "patch": "@@ -199,10 +199,10 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     mpool.addUnchecked(tx.GetHash(),  entry.Fee(feeV[0][5]).Time(GetTime()).Priority(priV[1][5]).Height(blocknum).FromTx(tx, &mpool));\n     // evict that transaction which should set a mempool min fee of minRelayTxFee + feeV[0][5]\n     mpool.TrimToSize(1);\n-    BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[0][5]);\n+    BOOST_CHECK(mpool.GetMinFee().GetFeePerK() > feeV[0][5]);\n     for (int i = 1; i < 10; i++) {\n         BOOST_CHECK(mpool.estimateSmartFee(i).GetFeePerK() >= mpool.estimateFee(i).GetFeePerK());\n-        BOOST_CHECK(mpool.estimateSmartFee(i).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n+        BOOST_CHECK(mpool.estimateSmartFee(i).GetFeePerK() >= mpool.GetMinFee().GetFeePerK());\n         BOOST_CHECK(mpool.estimateSmartPriority(i) == INF_PRIORITY);\n     }\n }"
      },
      {
        "sha": "788c02dae0b093bea4710fffa5ac0c6ee0859ae3",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8261aea4a67d3482893b01c6583b58048b10b95/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8261aea4a67d3482893b01c6583b58048b10b95/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a8261aea4a67d3482893b01c6583b58048b10b95",
        "patch": "@@ -585,6 +585,7 @@ void CTxMemPool::_clear()\n     lastRollingFeeUpdate = GetTime();\n     blockSinceLastRollingFeeBump = false;\n     rollingMinimumFeeRate = 0;\n+    lastTrimmedSize = std::numeric_limits<size_t>::max();\n     ++nTransactionsUpdated;\n }\n \n@@ -919,17 +920,17 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n     return it->second.children;\n }\n \n-CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n+CFeeRate CTxMemPool::GetMinFee() const {\n     LOCK(cs);\n     if (!blockSinceLastRollingFeeBump || rollingMinimumFeeRate == 0)\n         return CFeeRate(rollingMinimumFeeRate);\n \n     int64_t time = GetTime();\n     if (time > lastRollingFeeUpdate + 10) {\n         double halflife = ROLLING_FEE_HALFLIFE;\n-        if (DynamicMemoryUsage() < sizelimit / 4)\n+        if (DynamicMemoryUsage() < lastTrimmedSize / 4)\n             halflife /= 4;\n-        else if (DynamicMemoryUsage() < sizelimit / 2)\n+        else if (DynamicMemoryUsage() < lastTrimmedSize / 2)\n             halflife /= 2;\n \n         rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / halflife);\n@@ -954,6 +955,7 @@ void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {\n void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRemaining) {\n     LOCK(cs);\n \n+    lastTrimmedSize = sizelimit;\n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n     while (DynamicMemoryUsage() > sizelimit) {"
      },
      {
        "sha": "0fb92b8f87ef0d80775e0ba7914b17ea82b23057",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8261aea4a67d3482893b01c6583b58048b10b95/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8261aea4a67d3482893b01c6583b58048b10b95/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=a8261aea4a67d3482893b01c6583b58048b10b95",
        "patch": "@@ -392,6 +392,8 @@ class CTxMemPool\n     void UpdateParent(txiter entry, txiter parent, bool add);\n     void UpdateChild(txiter entry, txiter child, bool add);\n \n+    size_t lastTrimmedSize;\n+\n public:\n     std::map<COutPoint, CInPoint> mapNextTx;\n     std::map<uint256, std::pair<double, CAmount> > mapDeltas;\n@@ -482,7 +484,7 @@ class CTxMemPool\n       *  takes the fee rate to go back down all the way to 0. When the feerate\n       *  would otherwise be half of this, it is set to 0 instead.\n       */\n-    CFeeRate GetMinFee(size_t sizelimit) const;\n+    CFeeRate GetMinFee() const;\n \n     /** Remove transactions from the mempool until its dynamic size is <= sizelimit.\n       *  pvNoSpendsRemaining, if set, will be populated with the list of transactions"
      }
    ]
  },
  {
    "sha": "cf95aa1225df59139c774ca98d6a24fba88a5d4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjk1YWExMjI1ZGY1OTEzOWM3NzRjYTk4ZDZhMjRmYmE4OGE1ZDRm",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T15:05:39Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-02-17T17:43:38Z"
      },
      "message": "Mempool: Decouple CBlockPolicyEstimator from CTxMemPool",
      "tree": {
        "sha": "7736777a5322e1b92f9060217678366919a2a137",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7736777a5322e1b92f9060217678366919a2a137"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf95aa1225df59139c774ca98d6a24fba88a5d4f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf95aa1225df59139c774ca98d6a24fba88a5d4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf95aa1225df59139c774ca98d6a24fba88a5d4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf95aa1225df59139c774ca98d6a24fba88a5d4f/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8261aea4a67d3482893b01c6583b58048b10b95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8261aea4a67d3482893b01c6583b58048b10b95",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8261aea4a67d3482893b01c6583b58048b10b95"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "af9943503932f07a7006662265ce7b1845c8f2d7",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf95aa1225df59139c774ca98d6a24fba88a5d4f/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf95aa1225df59139c774ca98d6a24fba88a5d4f/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=cf95aa1225df59139c774ca98d6a24fba88a5d4f",
        "patch": "@@ -505,7 +505,7 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)\n     return CFeeRate(median);\n }\n \n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool)\n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int* answerFoundAtTarget, const CAmount& minPoolFee)\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n@@ -522,7 +522,6 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n         *answerFoundAtTarget = confTarget - 1;\n \n     // If mempool is limiting txs , return at least the min fee from the mempool\n-    CAmount minPoolFee = pool.GetMinFee().GetFeePerK();\n     if (minPoolFee > 0 && minPoolFee > median)\n         return CFeeRate(minPoolFee);\n \n@@ -541,7 +540,7 @@ double CBlockPolicyEstimator::estimatePriority(int confTarget)\n     return priStats.EstimateMedianVal(confTarget, SUFFICIENT_PRITXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n }\n \n-double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool)\n+double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int* answerFoundAtTarget, const CAmount& minPoolFee)\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n@@ -550,7 +549,6 @@ double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerF\n         return -1;\n \n     // If mempool is limiting txs, no priority txs are allowed\n-    CAmount minPoolFee = pool.GetMinFee().GetFeePerK();\n     if (minPoolFee > 0)\n         return INF_PRIORITY;\n "
      },
      {
        "sha": "d1865f8151025c50f5b23492e763ef5b088e324e",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf95aa1225df59139c774ca98d6a24fba88a5d4f/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf95aa1225df59139c774ca98d6a24fba88a5d4f/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=cf95aa1225df59139c774ca98d6a24fba88a5d4f",
        "patch": "@@ -247,7 +247,7 @@ class CBlockPolicyEstimator\n      *  confTarget blocks. If no answer can be given at confTarget, return an\n      *  estimate at the lowest target where one can be given.\n      */\n-    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool);\n+    CFeeRate estimateSmartFee(int confTarget, int* answerFoundAtTarget, const CAmount& minPoolFee);\n \n     /** Return a priority estimate */\n     double estimatePriority(int confTarget);\n@@ -256,7 +256,7 @@ class CBlockPolicyEstimator\n      *  confTarget blocks. If no answer can be given at confTarget, return an\n      *  estimate at the lowest target where one can be given.\n      */\n-    double estimateSmartPriority(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool);\n+    double estimateSmartPriority(int confTarget, int* answerFoundAtTarget, const CAmount& minPoolFee);\n \n     /** Write estimation data to a file */\n     void Write(CAutoFile& fileout);"
      },
      {
        "sha": "54a60e03add6537b165302f81ac1588d1f0ef756",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf95aa1225df59139c774ca98d6a24fba88a5d4f/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf95aa1225df59139c774ca98d6a24fba88a5d4f/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=cf95aa1225df59139c774ca98d6a24fba88a5d4f",
        "patch": "@@ -25,8 +25,6 @@ static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n-/** Default for -maxmempool, maximum megabytes of mempool memory usage */\n-static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /**\n  * Standard script verification flags that standard transactions will comply\n  * with. However scripts violating these flags may still be present in valid"
      },
      {
        "sha": "ee05e7a301d6e2b4e69239a75f3b7622b27a57f2",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf95aa1225df59139c774ca98d6a24fba88a5d4f/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf95aa1225df59139c774ca98d6a24fba88a5d4f/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=cf95aa1225df59139c774ca98d6a24fba88a5d4f",
        "patch": "@@ -730,7 +730,7 @@ CFeeRate CTxMemPool::estimateFee(int nBlocks) const\n CFeeRate CTxMemPool::estimateSmartFee(int nBlocks, int *answerFoundAtBlocks) const\n {\n     LOCK(cs);\n-    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, *this);\n+    return minerPolicyEstimator->estimateSmartFee(nBlocks, answerFoundAtBlocks, GetMinFee().GetFeePerK());\n }\n double CTxMemPool::estimatePriority(int nBlocks) const\n {\n@@ -740,7 +740,7 @@ double CTxMemPool::estimatePriority(int nBlocks) const\n double CTxMemPool::estimateSmartPriority(int nBlocks, int *answerFoundAtBlocks) const\n {\n     LOCK(cs);\n-    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks, *this);\n+    return minerPolicyEstimator->estimateSmartPriority(nBlocks, answerFoundAtBlocks, GetMinFee().GetFeePerK());\n }\n \n bool"
      },
      {
        "sha": "822b8848970439686faeb4bceda2c0204817a052",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf95aa1225df59139c774ca98d6a24fba88a5d4f/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf95aa1225df59139c774ca98d6a24fba88a5d4f/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=cf95aa1225df59139c774ca98d6a24fba88a5d4f",
        "patch": "@@ -20,6 +20,9 @@\n \n class CAutoFile;\n \n+/** Default for -maxmempool, maximum megabytes of mempool memory usage */\n+static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n+\n inline double AllowFreeThreshold()\n {\n     return COIN * 144 / 250;"
      }
    ]
  },
  {
    "sha": "e304be569b72651c507780f46eade77b8a549f71",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzA0YmU1NjliNzI2NTFjNTA3NzgwZjQ2ZWFkZTc3YjhhNTQ5Zjcx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-01T00:02:02Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-02-17T18:42:07Z"
      },
      "message": "Mempool: Create nGlobalMempoolSizeLimit to Avoid GetArg(\"-maxmempool\") verbosity",
      "tree": {
        "sha": "a0102671544518bab50b1cdeca3cbe941a8d5796",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0102671544518bab50b1cdeca3cbe941a8d5796"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e304be569b72651c507780f46eade77b8a549f71",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e304be569b72651c507780f46eade77b8a549f71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e304be569b72651c507780f46eade77b8a549f71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e304be569b72651c507780f46eade77b8a549f71/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf95aa1225df59139c774ca98d6a24fba88a5d4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf95aa1225df59139c774ca98d6a24fba88a5d4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf95aa1225df59139c774ca98d6a24fba88a5d4f"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 15,
      "deletions": 11
    },
    "files": [
      {
        "sha": "578581918a4df22176e8b9e2f17c567e50eddb87",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e304be569b72651c507780f46eade77b8a549f71/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e304be569b72651c507780f46eade77b8a549f71/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e304be569b72651c507780f46eade77b8a549f71",
        "patch": "@@ -917,9 +917,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", DEFAULT_CHECKPOINTS_ENABLED);\n \n     // mempool limits\n-    int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    int64_t nMempoolSizeMin = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n-    if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n+    nGlobalMempoolSizeLimit = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    uint64_t nMempoolSizeMin = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n+    if (nGlobalMempoolSizeLimit < nMempoolSizeMin)\n         return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency"
      },
      {
        "sha": "c1db1b2556b406756a0ae91d7e8d7f14b597387d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e304be569b72651c507780f46eade77b8a549f71/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e304be569b72651c507780f46eade77b8a549f71/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e304be569b72651c507780f46eade77b8a549f71",
        "patch": "@@ -78,6 +78,7 @@ bool fAlerts = DEFAULT_ALERTS;\n int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;\n \n+size_t nGlobalMempoolSizeLimit = DEFAULT_MAX_MEMPOOL_SIZE * 1000000;\n CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n \n@@ -1341,7 +1342,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n \n         // trim mempool and check if tx was trimmed\n         if (!fOverrideMempoolLimit) {\n-            LimitMempoolSize(pool, GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+            LimitMempoolSize(pool, nGlobalMempoolSizeLimit, GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n             if (!pool.exists(hash))\n                 return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n         }\n@@ -2663,6 +2664,7 @@ static void PruneBlockIndexCandidates() {\n  */\n static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock)\n {\n+    CTxMemPool& pool = mempool; // TODO Globals: make parameter\n     AssertLockHeld(cs_main);\n     bool fInvalidFound = false;\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2720,10 +2722,10 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n     }\n \n     if (fBlocksDisconnected) {\n-        mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n-        LimitMempoolSize(mempool, GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+        pool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n+        LimitMempoolSize(pool, nGlobalMempoolSizeLimit, GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n     }\n-    mempool.check(pcoinsTip);\n+    pool.check(pcoinsTip);\n \n     // Callbacks/notifications for a new best chain.\n     if (fInvalidFound)\n@@ -2816,6 +2818,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n \n bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensusParams, CBlockIndex *pindex)\n {\n+    CTxMemPool& pool = mempool; // TODO Globals: make parameter\n     AssertLockHeld(cs_main);\n \n     // Mark the block itself as invalid.\n@@ -2836,7 +2839,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n         }\n     }\n \n-    LimitMempoolSize(mempool, GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+    LimitMempoolSize(pool, nGlobalMempoolSizeLimit, GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n \n     // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n     // add it again.\n@@ -2849,7 +2852,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n     }\n \n     InvalidChainFound(pindex);\n-    mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n+    pool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     return true;\n }\n "
      },
      {
        "sha": "a36b7aa93f0100501d3c56521330c86535c5c95c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e304be569b72651c507780f46eade77b8a549f71/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e304be569b72651c507780f46eade77b8a549f71/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e304be569b72651c507780f46eade77b8a549f71",
        "patch": "@@ -149,6 +149,8 @@ extern unsigned int nBytesPerSigOp;\n extern bool fCheckBlockIndex;\n extern bool fCheckpointsEnabled;\n extern size_t nCoinCacheUsage;\n+/** The maximum size for the mempool */\n+extern size_t nGlobalMempoolSizeLimit;\n /** A fee rate smaller than this is considered zero fee (for relaying, mining and transaction creation) */\n extern CFeeRate minRelayTxFee;\n /** Absolute maximum transaction fee (in satoshis) used by wallet and mempool (rejects high fee in sendrawtransaction) */"
      },
      {
        "sha": "9657926acffed0b58c05ea53f60233ad4315b496",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e304be569b72651c507780f46eade77b8a549f71/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e304be569b72651c507780f46eade77b8a549f71/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=e304be569b72651c507780f46eade77b8a549f71",
        "patch": "@@ -784,8 +784,7 @@ UniValue mempoolInfoToJSON()\n     ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n     ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n     ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n-    size_t maxmempool = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    ret.push_back(Pair(\"maxmempool\", (int64_t) maxmempool));\n+    ret.push_back(Pair(\"maxmempool\", (int64_t) nGlobalMempoolSizeLimit));\n     ret.push_back(Pair(\"mempoolminfee\", ValueFromAmount(mempool.GetMinFee().GetFeePerK())));\n \n     return ret;"
      }
    ]
  }
]