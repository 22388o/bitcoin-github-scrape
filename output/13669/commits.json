[
  {
    "sha": "157651855f91c3c093c27290a349a231ac5ba740",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTc2NTE4NTVmOTFjM2MwOTNjMjcyOTBhMzQ5YTIzMWFjNWJhNzQw",
    "commit": {
      "author": {
        "name": "Conor Scott",
        "email": "conor.r.scott.88@gmail.com",
        "date": "2018-07-30T08:03:20Z"
      },
      "committer": {
        "name": "Conor Scott",
        "email": "conor.r.scott.88@gmail.com",
        "date": "2018-08-09T10:58:35Z"
      },
      "message": "[Tests] Rename create_tx and move to blocktools.py",
      "tree": {
        "sha": "a61b17615865bcfee8a9f42547d98f9494f42674",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a61b17615865bcfee8a9f42547d98f9494f42674"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/157651855f91c3c093c27290a349a231ac5ba740",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/157651855f91c3c093c27290a349a231ac5ba740",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/157651855f91c3c093c27290a349a231ac5ba740",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/157651855f91c3c093c27290a349a231ac5ba740/comments",
    "author": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df9f71274645a917e2578c52a1c59745bce8112d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df9f71274645a917e2578c52a1c59745bce8112d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df9f71274645a917e2578c52a1c59745bce8112d"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 24,
      "deletions": 16
    },
    "files": [
      {
        "sha": "afacd69d548e9a2d70112382240e6a0e83c22bf0",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/157651855f91c3c093c27290a349a231ac5ba740/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/157651855f91c3c093c27290a349a231ac5ba740/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=157651855f91c3c093c27290a349a231ac5ba740",
        "patch": "@@ -9,6 +9,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import create_raw_transaction\n from test_framework.util import *\n \n # Create one-input, one-output, no-fee transaction:\n@@ -39,9 +40,9 @@ def run_test(self):\n         # and make sure the mempool code behaves correctly.\n         b = [ self.nodes[0].getblockhash(n) for n in range(101, 105) ]\n         coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n-        spend_101_raw = create_tx(self.nodes[0], coinbase_txids[1], node1_address, 49.99)\n-        spend_102_raw = create_tx(self.nodes[0], coinbase_txids[2], node0_address, 49.99)\n-        spend_103_raw = create_tx(self.nodes[0], coinbase_txids[3], node0_address, 49.99)\n+        spend_101_raw = create_raw_transaction(self.nodes[0], coinbase_txids[1], node1_address, 49.99)\n+        spend_102_raw = create_raw_transaction(self.nodes[0], coinbase_txids[2], node0_address, 49.99)\n+        spend_103_raw = create_raw_transaction(self.nodes[0], coinbase_txids[3], node0_address, 49.99)\n \n         # Create a transaction which is time-locked to two blocks in the future\n         timelock_tx = self.nodes[0].createrawtransaction([{\"txid\": coinbase_txids[0], \"vout\": 0}], {node0_address: 49.99})\n@@ -60,8 +61,8 @@ def run_test(self):\n         assert_raises_rpc_error(-26,'non-final', self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Create 102_1 and 103_1:\n-        spend_102_1_raw = create_tx(self.nodes[0], spend_102_id, node1_address, 49.98)\n-        spend_103_1_raw = create_tx(self.nodes[0], spend_103_id, node1_address, 49.98)\n+        spend_102_1_raw = create_raw_transaction(self.nodes[0], spend_102_id, node1_address, 49.98)\n+        spend_103_1_raw = create_raw_transaction(self.nodes[0], spend_103_id, node1_address, 49.98)\n \n         # Broadcast and mine 103_1:\n         spend_103_1_id = self.nodes[0].sendrawtransaction(spend_103_1_raw)"
      },
      {
        "sha": "3625e011eb0913519a46dbd4d7af2b5bc55a81fc",
        "filename": "test/functional/mempool_resurrect.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/157651855f91c3c093c27290a349a231ac5ba740/test/functional/mempool_resurrect.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/157651855f91c3c093c27290a349a231ac5ba740/test/functional/mempool_resurrect.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect.py?ref=157651855f91c3c093c27290a349a231ac5ba740",
        "patch": "@@ -5,6 +5,7 @@\n \"\"\"Test resurrection of mined transactions when the blockchain is re-organized.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import create_raw_transaction\n from test_framework.util import *\n \n # Create one-input, one-output, no-fee transaction:\n@@ -27,13 +28,13 @@ def run_test(self):\n \n         b = [ self.nodes[0].getblockhash(n) for n in range(1, 4) ]\n         coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n-        spends1_raw = [ create_tx(self.nodes[0], txid, node0_address, 49.99) for txid in coinbase_txids ]\n+        spends1_raw = [ create_raw_transaction(self.nodes[0], txid, node0_address, 49.99) for txid in coinbase_txids ]\n         spends1_id = [ self.nodes[0].sendrawtransaction(tx) for tx in spends1_raw ]\n \n         blocks = []\n         blocks.extend(self.nodes[0].generate(1))\n \n-        spends2_raw = [ create_tx(self.nodes[0], txid, node0_address, 49.98) for txid in spends1_id ]\n+        spends2_raw = [ create_raw_transaction(self.nodes[0], txid, node0_address, 49.98) for txid in spends1_id ]\n         spends2_id = [ self.nodes[0].sendrawtransaction(tx) for tx in spends2_raw ]\n \n         blocks.extend(self.nodes[0].generate(1))"
      },
      {
        "sha": "74a3634a6c098571bb4e011dc2ef3eef9dea9dce",
        "filename": "test/functional/mempool_spend_coinbase.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/157651855f91c3c093c27290a349a231ac5ba740/test/functional/mempool_spend_coinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/157651855f91c3c093c27290a349a231ac5ba740/test/functional/mempool_spend_coinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spend_coinbase.py?ref=157651855f91c3c093c27290a349a231ac5ba740",
        "patch": "@@ -13,6 +13,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import create_raw_transaction\n from test_framework.util import *\n \n # Create one-input, one-output, no-fee transaction:\n@@ -31,7 +32,7 @@ def run_test(self):\n         # is too immature to spend.\n         b = [ self.nodes[0].getblockhash(n) for n in range(101, 103) ]\n         coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n-        spends_raw = [ create_tx(self.nodes[0], txid, node0_address, 49.99) for txid in coinbase_txids ]\n+        spends_raw = [ create_raw_transaction(self.nodes[0], txid, node0_address, 49.99) for txid in coinbase_txids ]\n \n         spend_101_id = self.nodes[0].sendrawtransaction(spends_raw[0])\n "
      },
      {
        "sha": "c2d20d27b5b5f2b9817c308a81ea88249af0b018",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/157651855f91c3c093c27290a349a231ac5ba740/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/157651855f91c3c093c27290a349a231ac5ba740/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=157651855f91c3c093c27290a349a231ac5ba740",
        "patch": "@@ -128,6 +128,19 @@ def create_transaction(prevtx, n, sig, value, script_pub_key=CScript()):\n     tx.calc_sha256()\n     return tx\n \n+def create_raw_transaction(node, txid, to_address, amount):\n+    \"\"\" Return raw signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    inputs = [{\"txid\": txid, \"vout\": 0}]\n+    outputs = {to_address: amount}\n+    rawtx = node.createrawtransaction(inputs, outputs)\n+    signresult = node.signrawtransactionwithwallet(rawtx)\n+    assert_equal(signresult[\"complete\"], True)\n+    return signresult['hex']\n+\n def get_legacy_sigopcount_block(block, accurate=True):\n     count = 0\n     for tx in block.vtx:"
      },
      {
        "sha": "b355816d8bc22bf9a4c8b304a7d7f6b25884e347",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/157651855f91c3c093c27290a349a231ac5ba740/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/157651855f91c3c093c27290a349a231ac5ba740/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=157651855f91c3c093c27290a349a231ac5ba740",
        "patch": "@@ -526,14 +526,6 @@ def gen_return_txouts():\n         txouts = txouts + script_pubkey\n     return txouts\n \n-def create_tx(node, coinbase, to_address, amount):\n-    inputs = [{\"txid\": coinbase, \"vout\": 0}]\n-    outputs = {to_address: amount}\n-    rawtx = node.createrawtransaction(inputs, outputs)\n-    signresult = node.signrawtransactionwithwallet(rawtx)\n-    assert_equal(signresult[\"complete\"], True)\n-    return signresult[\"hex\"]\n-\n # Create a spend of each passed-in utxo, splicing in \"txouts\" to each raw\n # transaction to make it large.  See gen_return_txouts() above.\n def create_lots_of_big_transactions(node, txouts, utxos, num, fee):"
      }
    ]
  },
  {
    "sha": "736f9414246f2a855e7b6fc57c8f903e60530540",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzZmOTQxNDI0NmYyYTg1NWU3YjZmYzU3YzhmOTAzZTYwNTMwNTQw",
    "commit": {
      "author": {
        "name": "Conor Scott",
        "email": "conor.r.scott.88@gmail.com",
        "date": "2018-07-30T08:16:40Z"
      },
      "committer": {
        "name": "Conor Scott",
        "email": "conor.r.scott.88@gmail.com",
        "date": "2018-08-09T10:58:36Z"
      },
      "message": "[Tests] Cleanup extra instances of create_transaction",
      "tree": {
        "sha": "4a2ff2b6cc647e36d1c4ec96523950047c2c25c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a2ff2b6cc647e36d1c4ec96523950047c2c25c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/736f9414246f2a855e7b6fc57c8f903e60530540",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/736f9414246f2a855e7b6fc57c8f903e60530540",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/736f9414246f2a855e7b6fc57c8f903e60530540",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/736f9414246f2a855e7b6fc57c8f903e60530540/comments",
    "author": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "157651855f91c3c093c27290a349a231ac5ba740",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/157651855f91c3c093c27290a349a231ac5ba740",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/157651855f91c3c093c27290a349a231ac5ba740"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 46,
      "deletions": 73
    },
    "files": [
      {
        "sha": "6d1ec8f09ae4f2e6a9a02b7fcdc4d20235806b8f",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/736f9414246f2a855e7b6fc57c8f903e60530540/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/736f9414246f2a855e7b6fc57c8f903e60530540/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=736f9414246f2a855e7b6fc57c8f903e60530540",
        "patch": "@@ -7,7 +7,7 @@\n import struct\n import time\n \n-from test_framework.blocktools import create_block, create_coinbase, create_transaction, get_legacy_sigopcount_block\n+from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script, get_legacy_sigopcount_block\n from test_framework.key import CECKey\n from test_framework.messages import (\n     CBlock,\n@@ -1217,7 +1217,7 @@ def add_transactions_to_block(self, block, tx_list):\n \n     # this is a little handier to use than the version in blocktools.py\n     def create_tx(self, spend_tx, n, value, script=CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])):\n-        return create_transaction(spend_tx, n, b\"\", value, script)\n+        return create_tx_with_script(spend_tx, n, b\"\", value, script)\n \n     # sign a transaction, using the key we know about\n     # this signs input 0 in tx, which is assumed to be spending output n in spend_tx\n@@ -1253,7 +1253,7 @@ def next_block(self, number, spend=None, additional_coinbase_value=0, script=CSc\n             coinbase.vout[0].nValue += spend.tx.vout[spend.n].nValue - 1  # all but one satoshi to fees\n             coinbase.rehash()\n             block = create_block(base_block_hash, coinbase, block_time)\n-            tx = create_transaction(spend.tx, spend.n, b\"\", 1, script)  # spend 1 satoshi\n+            tx = create_tx_with_script(spend.tx, spend.n, b\"\", 1, script)  # spend 1 satoshi\n             self.sign_tx(tx, spend.tx, spend.n)\n             self.add_transactions_to_block(block, [tx])\n             block.hashMerkleRoot = block.calc_merkle_root()"
      },
      {
        "sha": "0ba261a97bc6d9925220fbd7a9e4697fafa8eb34",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 4,
        "deletions": 14,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/736f9414246f2a855e7b6fc57c8f903e60530540/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/736f9414246f2a855e7b6fc57c8f903e60530540/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=736f9414246f2a855e7b6fc57c8f903e60530540",
        "patch": "@@ -11,7 +11,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.mininode import *\n-from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.blocktools import create_coinbase, create_block, create_transaction\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP, CScriptNum\n from io import BytesIO\n \n@@ -49,16 +49,6 @@ def cltv_validate(node, tx, height):\n                                   list(CScript(new_tx.vin[0].scriptSig)))\n     return new_tx\n \n-def create_transaction(node, coinbase, to_address, amount):\n-    from_txid = node.getblock(coinbase)['tx'][0]\n-    inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n-    outputs = { to_address : amount }\n-    rawtx = node.createrawtransaction(inputs, outputs)\n-    signresult = node.signrawtransactionwithwallet(rawtx)\n-    tx = CTransaction()\n-    tx.deserialize(BytesIO(hex_str_to_bytes(signresult['hex'])))\n-    return tx\n-\n class BIP65Test(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n@@ -70,12 +60,12 @@ def run_test(self):\n         self.nodes[0].p2p.wait_for_verack()\n \n         self.log.info(\"Mining %d blocks\", CLTV_HEIGHT - 2)\n-        self.coinbase_blocks = self.nodes[0].generate(CLTV_HEIGHT - 2)\n+        self.coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(CLTV_HEIGHT - 2)]\n         self.nodeaddress = self.nodes[0].getnewaddress()\n \n         self.log.info(\"Test that an invalid-according-to-CLTV transaction can still appear in a block\")\n \n-        spendtx = create_transaction(self.nodes[0], self.coinbase_blocks[0],\n+        spendtx = create_transaction(self.nodes[0], self.coinbase_txids[0],\n                 self.nodeaddress, 1.0)\n         cltv_invalidate(spendtx)\n         spendtx.rehash()\n@@ -110,7 +100,7 @@ def run_test(self):\n         self.log.info(\"Test that invalid-according-to-cltv transactions cannot appear in a block\")\n         block.nVersion = 4\n \n-        spendtx = create_transaction(self.nodes[0], self.coinbase_blocks[1],\n+        spendtx = create_transaction(self.nodes[0], self.coinbase_txids[1],\n                 self.nodeaddress, 1.0)\n         cltv_invalidate(spendtx)\n         spendtx.rehash()"
      },
      {
        "sha": "a74471aae55dc686b43ad74515f734606daee93d",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/736f9414246f2a855e7b6fc57c8f903e60530540/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/736f9414246f2a855e7b6fc57c8f903e60530540/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=736f9414246f2a855e7b6fc57c8f903e60530540",
        "patch": "@@ -47,7 +47,7 @@\n from io import BytesIO\n import time\n \n-from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.blocktools import create_coinbase, create_block, create_transaction\n from test_framework.messages import ToHex, CTransaction\n from test_framework.mininode import P2PDataStore\n from test_framework.script import (\n@@ -85,15 +85,6 @@ def relative_locktime(sdf, srhb, stf, srlb):\n def all_rlt_txs(txs):\n     return [tx['tx'] for tx in txs]\n \n-def create_transaction(node, txid, to_address, amount):\n-    inputs = [{\"txid\": txid, \"vout\": 0}]\n-    outputs = {to_address: amount}\n-    rawtx = node.createrawtransaction(inputs, outputs)\n-    tx = CTransaction()\n-    f = BytesIO(hex_str_to_bytes(rawtx))\n-    tx.deserialize(f)\n-    return tx\n-\n def sign_transaction(node, unsignedtx):\n     rawtx = ToHex(unsignedtx)\n     signresult = node.signrawtransactionwithwallet(rawtx)"
      },
      {
        "sha": "bdd1eaaccc7f3aacd5ce17af39fb7671f5c63f60",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 5,
        "deletions": 15,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/736f9414246f2a855e7b6fc57c8f903e60530540/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/736f9414246f2a855e7b6fc57c8f903e60530540/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=736f9414246f2a855e7b6fc57c8f903e60530540",
        "patch": "@@ -10,9 +10,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.mininode import *\n-from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.blocktools import create_coinbase, create_block, create_transaction\n from test_framework.script import CScript\n-from io import BytesIO\n \n DERSIG_HEIGHT = 1251\n \n@@ -37,15 +36,6 @@ def unDERify(tx):\n             newscript.append(i)\n     tx.vin[0].scriptSig = CScript(newscript)\n \n-def create_transaction(node, coinbase, to_address, amount):\n-    from_txid = node.getblock(coinbase)['tx'][0]\n-    inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n-    outputs = { to_address : amount }\n-    rawtx = node.createrawtransaction(inputs, outputs)\n-    signresult = node.signrawtransactionwithwallet(rawtx)\n-    tx = CTransaction()\n-    tx.deserialize(BytesIO(hex_str_to_bytes(signresult['hex'])))\n-    return tx\n \n \n class BIP66Test(BitcoinTestFramework):\n@@ -61,12 +51,12 @@ def run_test(self):\n         self.nodes[0].p2p.wait_for_verack()\n \n         self.log.info(\"Mining %d blocks\", DERSIG_HEIGHT - 2)\n-        self.coinbase_blocks = self.nodes[0].generate(DERSIG_HEIGHT - 2)\n+        self.coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(DERSIG_HEIGHT - 2)]\n         self.nodeaddress = self.nodes[0].getnewaddress()\n \n         self.log.info(\"Test that a transaction with non-DER signature can still appear in a block\")\n \n-        spendtx = create_transaction(self.nodes[0], self.coinbase_blocks[0],\n+        spendtx = create_transaction(self.nodes[0], self.coinbase_txids[0],\n                 self.nodeaddress, 1.0)\n         unDERify(spendtx)\n         spendtx.rehash()\n@@ -103,7 +93,7 @@ def run_test(self):\n         self.log.info(\"Test that transactions with non-DER signatures cannot appear in a block\")\n         block.nVersion = 3\n \n-        spendtx = create_transaction(self.nodes[0], self.coinbase_blocks[1],\n+        spendtx = create_transaction(self.nodes[0], self.coinbase_txids[1],\n                 self.nodeaddress, 1.0)\n         unDERify(spendtx)\n         spendtx.rehash()\n@@ -141,7 +131,7 @@ def run_test(self):\n \n         self.log.info(\"Test that a version 3 block with a DERSIG-compliant transaction is accepted\")\n         block.vtx[1] = create_transaction(self.nodes[0],\n-                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+                self.coinbase_txids[1], self.nodeaddress, 1.0)\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.rehash()\n         block.solve()"
      },
      {
        "sha": "21255c89c87fd935c834fbe48ad287ff75b94ebe",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 7,
        "deletions": 19,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/736f9414246f2a855e7b6fc57c8f903e60530540/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/736f9414246f2a855e7b6fc57c8f903e60530540/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=736f9414246f2a855e7b6fc57c8f903e60530540",
        "patch": "@@ -16,9 +16,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.messages import CTransaction\n-from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.blocktools import create_coinbase, create_block, create_transaction, add_witness_commitment\n from test_framework.script import CScript\n-from io import BytesIO\n import time\n \n NULLDUMMY_ERROR = \"non-mandatory-script-verify-flag (Dummy CHECKMULTISIG argument must be zero) (code 64)\"\n@@ -61,31 +60,31 @@ def run_test(self):\n         self.lastblocktime = int(time.time()) + 429\n \n         self.log.info(\"Test 1: NULLDUMMY compliant base transactions should be accepted to mempool and mined before activation [430]\")\n-        test1txs = [self.create_transaction(self.nodes[0], coinbase_txid[0], self.ms_address, 49)]\n+        test1txs = [create_transaction(self.nodes[0], coinbase_txid[0], self.ms_address, 49)]\n         txid1 = self.nodes[0].sendrawtransaction(bytes_to_hex_str(test1txs[0].serialize_with_witness()), True)\n-        test1txs.append(self.create_transaction(self.nodes[0], txid1, self.ms_address, 48))\n+        test1txs.append(create_transaction(self.nodes[0], txid1, self.ms_address, 48))\n         txid2 = self.nodes[0].sendrawtransaction(bytes_to_hex_str(test1txs[1].serialize_with_witness()), True)\n-        test1txs.append(self.create_transaction(self.nodes[0], coinbase_txid[1], self.wit_ms_address, 49))\n+        test1txs.append(create_transaction(self.nodes[0], coinbase_txid[1], self.wit_ms_address, 49))\n         txid3 = self.nodes[0].sendrawtransaction(bytes_to_hex_str(test1txs[2].serialize_with_witness()), True)\n         self.block_submit(self.nodes[0], test1txs, False, True)\n \n         self.log.info(\"Test 2: Non-NULLDUMMY base multisig transaction should not be accepted to mempool before activation\")\n-        test2tx = self.create_transaction(self.nodes[0], txid2, self.ms_address, 47)\n+        test2tx = create_transaction(self.nodes[0], txid2, self.ms_address, 47)\n         trueDummy(test2tx)\n         assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test2tx.serialize_with_witness()), True)\n \n         self.log.info(\"Test 3: Non-NULLDUMMY base transactions should be accepted in a block before activation [431]\")\n         self.block_submit(self.nodes[0], [test2tx], False, True)\n \n         self.log.info(\"Test 4: Non-NULLDUMMY base multisig transaction is invalid after activation\")\n-        test4tx = self.create_transaction(self.nodes[0], test2tx.hash, self.address, 46)\n+        test4tx = create_transaction(self.nodes[0], test2tx.hash, self.address, 46)\n         test6txs=[CTransaction(test4tx)]\n         trueDummy(test4tx)\n         assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test4tx.serialize_with_witness()), True)\n         self.block_submit(self.nodes[0], [test4tx])\n \n         self.log.info(\"Test 5: Non-NULLDUMMY P2WSH multisig transaction invalid after activation\")\n-        test5tx = self.create_transaction(self.nodes[0], txid3, self.wit_address, 48)\n+        test5tx = create_transaction(self.nodes[0], txid3, self.wit_address, 48)\n         test6txs.append(CTransaction(test5tx))\n         test5tx.wit.vtxinwit[0].scriptWitness.stack[0] = b'\\x01'\n         assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test5tx.serialize_with_witness()), True)\n@@ -97,17 +96,6 @@ def run_test(self):\n         self.block_submit(self.nodes[0], test6txs, True, True)\n \n \n-    def create_transaction(self, node, txid, to_address, amount):\n-        inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n-        outputs = { to_address : amount }\n-        rawtx = node.createrawtransaction(inputs, outputs)\n-        signresult = node.signrawtransactionwithwallet(rawtx)\n-        tx = CTransaction()\n-        f = BytesIO(hex_str_to_bytes(signresult['hex']))\n-        tx.deserialize(f)\n-        return tx\n-\n-\n     def block_submit(self, node, txs, witness = False, accept = False):\n         block = create_block(self.tip, create_coinbase(self.lastblockheight + 1), self.lastblocktime + 1)\n         block.nVersion = 4"
      },
      {
        "sha": "b4557916576276e3a80f72f48bdddf919c1d1bb4",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/736f9414246f2a855e7b6fc57c8f903e60530540/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/736f9414246f2a855e7b6fc57c8f903e60530540/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=736f9414246f2a855e7b6fc57c8f903e60530540",
        "patch": "@@ -12,7 +12,7 @@\n \"\"\"\n import copy\n \n-from test_framework.blocktools import create_block, create_coinbase, create_transaction\n+from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script\n from test_framework.messages import COIN\n from test_framework.mininode import P2PDataStore\n from test_framework.test_framework import BitcoinTestFramework\n@@ -64,8 +64,8 @@ def run_test(self):\n         block_time += 1\n \n         # b'0x51' is OP_TRUE\n-        tx1 = create_transaction(block1.vtx[0], 0, b'\\x51', 50 * COIN)\n-        tx2 = create_transaction(tx1, 0, b'\\x51', 50 * COIN)\n+        tx1 = create_tx_with_script(block1.vtx[0], 0, script_sig=b'\\x51', amount=50 * COIN)\n+        tx2 = create_tx_with_script(tx1, 0, script_sig=b'\\x51', amount=50 * COIN)\n \n         block2.vtx.extend([tx1, tx2])\n         block2.hashMerkleRoot = block2.calc_merkle_root()"
      },
      {
        "sha": "ab647526ee1e91c4de12cc2abe38491ea2c59f50",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/736f9414246f2a855e7b6fc57c8f903e60530540/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/736f9414246f2a855e7b6fc57c8f903e60530540/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=736f9414246f2a855e7b6fc57c8f903e60530540",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test node responses to invalid transactions.\n \n In this test we connect to one node over p2p, and test tx requests.\"\"\"\n-from test_framework.blocktools import create_block, create_coinbase, create_transaction\n+from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script\n from test_framework.messages import (\n     COIN,\n     COutPoint,\n@@ -68,7 +68,7 @@ def run_test(self):\n         # Transaction will be rejected with code 16 (REJECT_INVALID)\n         # and we get disconnected immediately\n         self.log.info('Test a transaction that is rejected')\n-        tx1 = create_transaction(block1.vtx[0], 0, b'\\x64' * 35, 50 * COIN - 12000)\n+        tx1 = create_tx_with_script(block1.vtx[0], 0, script_sig=b'\\x64' * 35, amount=50 * COIN - 12000)\n         node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True)\n \n         # Make two p2p connections to provide the node with orphans"
      },
      {
        "sha": "b15e2774c40925cd9c219605ecc4aff1f847f23c",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/736f9414246f2a855e7b6fc57c8f903e60530540/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/736f9414246f2a855e7b6fc57c8f903e60530540/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=736f9414246f2a855e7b6fc57c8f903e60530540",
        "patch": "@@ -55,7 +55,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n import time\n-from test_framework.blocktools import create_block, create_coinbase, create_transaction\n+from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script\n \n \n class AcceptBlockTest(BitcoinTestFramework):\n@@ -244,7 +244,7 @@ def run_test(self):\n         block_290f.solve()\n         block_291 = create_block(block_290f.sha256, create_coinbase(291), block_290f.nTime+1)\n         # block_291 spends a coinbase below maturity!\n-        block_291.vtx.append(create_transaction(block_290f.vtx[0], 0, b\"42\", 1))\n+        block_291.vtx.append(create_tx_with_script(block_290f.vtx[0], 0, script_sig=b\"42\", amount=1))\n         block_291.hashMerkleRoot = block_291.calc_merkle_root()\n         block_291.solve()\n         block_292 = create_block(block_291.sha256, create_coinbase(292), block_291.nTime+1)"
      },
      {
        "sha": "56f70d98336549c3656a2d543f94773a88e43793",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 19,
        "deletions": 5,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/736f9414246f2a855e7b6fc57c8f903e60530540/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/736f9414246f2a855e7b6fc57c8f903e60530540/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=736f9414246f2a855e7b6fc57c8f903e60530540",
        "patch": "@@ -39,6 +39,7 @@\n     hash160,\n )\n from .util import assert_equal\n+from io import BytesIO\n \n # From BIP141\n WITNESS_COMMITMENT_HEADER = b\"\\xaa\\x21\\xa9\\xed\"\n@@ -117,17 +118,30 @@ def create_coinbase(height, pubkey=None):\n     coinbase.calc_sha256()\n     return coinbase\n \n-def create_transaction(prevtx, n, sig, value, script_pub_key=CScript()):\n-    \"\"\"Create a transaction.\n+def create_tx_with_script(prevtx, n, script_sig=b\"\", amount=1, script_pub_key=CScript()):\n+    \"\"\"Return one-input, one-output transaction object\n+       spending the prevtx's n-th output with the given amount.\n \n-    If the script_pub_key is not specified, make it anyone-can-spend.\"\"\"\n+       Can optionally pass scriptPubKey and scriptSig, default is anyone-can-spend ouput.\n+    \"\"\"\n     tx = CTransaction()\n     assert(n < len(prevtx.vout))\n-    tx.vin.append(CTxIn(COutPoint(prevtx.sha256, n), sig, 0xffffffff))\n-    tx.vout.append(CTxOut(value, script_pub_key))\n+    tx.vin.append(CTxIn(COutPoint(prevtx.sha256, n), script_sig, 0xffffffff))\n+    tx.vout.append(CTxOut(amount, script_pub_key))\n     tx.calc_sha256()\n     return tx\n \n+def create_transaction(node, txid, to_address, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    raw_tx = create_raw_transaction(node, txid, to_address, amount)\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n def create_raw_transaction(node, txid, to_address, amount):\n     \"\"\" Return raw signed transaction spending the first output of the\n         input txid. Note that the node must be able to sign for the"
      }
    ]
  },
  {
    "sha": "44bbceeef1b76526b73cbdd3ff785c4d5b2c74f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NGJiY2VlZWYxYjc2NTI2YjczY2JkZDNmZjc4NWM0ZDViMmM3NGYx",
    "commit": {
      "author": {
        "name": "Conor Scott",
        "email": "conor.r.scott.88@gmail.com",
        "date": "2018-07-30T08:20:36Z"
      },
      "committer": {
        "name": "Conor Scott",
        "email": "conor.r.scott.88@gmail.com",
        "date": "2018-08-09T10:58:36Z"
      },
      "message": "[Tests] Cleanup feature_block.py, remove unnecessary PreviousSpendableOutput object",
      "tree": {
        "sha": "8796590d562be2429cae50bc7a3435449f9ef2f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8796590d562be2429cae50bc7a3435449f9ef2f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44bbceeef1b76526b73cbdd3ff785c4d5b2c74f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44bbceeef1b76526b73cbdd3ff785c4d5b2c74f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44bbceeef1b76526b73cbdd3ff785c4d5b2c74f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44bbceeef1b76526b73cbdd3ff785c4d5b2c74f1/comments",
    "author": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "736f9414246f2a855e7b6fc57c8f903e60530540",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/736f9414246f2a855e7b6fc57c8f903e60530540",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/736f9414246f2a855e7b6fc57c8f903e60530540"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 44,
      "deletions": 50
    },
    "files": [
      {
        "sha": "79ed902871636d4fb75507c5a3a3e0089b18cc02",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 44,
        "deletions": 50,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44bbceeef1b76526b73cbdd3ff785c4d5b2c74f1/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44bbceeef1b76526b73cbdd3ff785c4d5b2c74f1/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=44bbceeef1b76526b73cbdd3ff785c4d5b2c74f1",
        "patch": "@@ -48,11 +48,6 @@\n \n MAX_BLOCK_SIGOPS = 20000\n \n-class PreviousSpendableOutput():\n-    def __init__(self, tx=CTransaction(), n=-1):\n-        self.tx = tx\n-        self.n = n  # the output we're spending\n-\n #  Use this class for tests that require behavior other than normal \"mininode\" behavior.\n #  For now, it is used to serialize a bloated varint (b64).\n class CBrokenBlock(CBlock):\n@@ -132,7 +127,7 @@ def run_test(self):\n         self.log.info(\"Don't reorg to a chain of the same length\")\n         self.move_tip(1)\n         b3 = self.next_block(3, spend=out[1])\n-        txout_b3 = PreviousSpendableOutput(b3.vtx[1], 0)\n+        txout_b3 = b3.vtx[1]\n         self.sync_blocks([b3], False)\n \n         # Now we add another block to make the alternative chain longer.\n@@ -397,8 +392,8 @@ def run_test(self):\n         self.log.info(\"Reject a block spending transaction from a block which failed to connect\")\n         self.move_tip(35)\n         b37 = self.next_block(37, spend=out[11])\n-        txout_b37 = PreviousSpendableOutput(b37.vtx[1], 0)\n-        tx = self.create_and_sign_transaction(out[11].tx, out[11].n, 0)\n+        txout_b37 = b37.vtx[1]\n+        tx = self.create_and_sign_transaction(out[11], 0)\n         b37 = self.update_block(37, [tx])\n         self.sync_blocks([b37], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n \n@@ -432,9 +427,9 @@ def run_test(self):\n         # Create a transaction that spends one satoshi to the p2sh_script, the rest to OP_TRUE\n         # This must be signed because it is spending a coinbase\n         spend = out[11]\n-        tx = self.create_tx(spend.tx, spend.n, 1, p2sh_script)\n-        tx.vout.append(CTxOut(spend.tx.vout[spend.n].nValue - 1, CScript([OP_TRUE])))\n-        self.sign_tx(tx, spend.tx, spend.n)\n+        tx = self.create_tx(spend, 0, 1, p2sh_script)\n+        tx.vout.append(CTxOut(spend.vout[0].nValue - 1, CScript([OP_TRUE])))\n+        self.sign_tx(tx, spend)\n         tx.rehash()\n         b39 = self.update_block(39, [tx])\n         b39_outputs += 1\n@@ -548,7 +543,7 @@ def run_test(self):\n         self.sync_blocks([b44], True)\n \n         self.log.info(\"Reject a block with a non-coinbase as the first tx\")\n-        non_coinbase = self.create_tx(out[15].tx, out[15].n, 1)\n+        non_coinbase = self.create_tx(out[15], 0, 1)\n         b45 = CBlock()\n         b45.nTime = self.tip.nTime + 1\n         b45.hashPrevBlock = self.tip.sha256\n@@ -675,7 +670,7 @@ def run_test(self):\n         # b57 - a good block with 2 txs, don't submit until end\n         self.move_tip(55)\n         b57 = self.next_block(57)\n-        tx = self.create_and_sign_transaction(out[16].tx, out[16].n, 1)\n+        tx = self.create_and_sign_transaction(out[16], 1)\n         tx1 = self.create_tx(tx, 0, 1)\n         b57 = self.update_block(57, [tx, tx1])\n \n@@ -692,7 +687,7 @@ def run_test(self):\n         # b57p2 - a good block with 6 tx'es, don't submit until end\n         self.move_tip(55)\n         b57p2 = self.next_block(\"57p2\")\n-        tx = self.create_and_sign_transaction(out[16].tx, out[16].n, 1)\n+        tx = self.create_and_sign_transaction(out[16], 1)\n         tx1 = self.create_tx(tx, 0, 1)\n         tx2 = self.create_tx(tx1, 0, 1)\n         tx3 = self.create_tx(tx2, 0, 1)\n@@ -727,8 +722,8 @@ def run_test(self):\n         self.move_tip(57)\n         b58 = self.next_block(58, spend=out[17])\n         tx = CTransaction()\n-        assert(len(out[17].tx.vout) < 42)\n-        tx.vin.append(CTxIn(COutPoint(out[17].tx.sha256, 42), CScript([OP_TRUE]), 0xffffffff))\n+        assert(len(out[17].vout) < 42)\n+        tx.vin.append(CTxIn(COutPoint(out[17].sha256, 42), CScript([OP_TRUE]), 0xffffffff))\n         tx.vout.append(CTxOut(0, b\"\"))\n         tx.calc_sha256()\n         b58 = self.update_block(58, [tx])\n@@ -738,7 +733,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with a transaction with outputs > inputs\")\n         self.move_tip(57)\n         b59 = self.next_block(59)\n-        tx = self.create_and_sign_transaction(out[17].tx, out[17].n, 51 * COIN)\n+        tx = self.create_and_sign_transaction(out[17], 51 * COIN)\n         b59 = self.update_block(59, [tx])\n         self.sync_blocks([b59], False, 16, b'bad-txns-in-belowout', reconnect=True)\n \n@@ -776,8 +771,7 @@ def run_test(self):\n         b62 = self.next_block(62)\n         tx = CTransaction()\n         tx.nLockTime = 0xffffffff  # this locktime is non-final\n-        assert(out[18].n < len(out[18].tx.vout))\n-        tx.vin.append(CTxIn(COutPoint(out[18].tx.sha256, out[18].n)))  # don't set nSequence\n+        tx.vin.append(CTxIn(COutPoint(out[18].sha256, 0)))  # don't set nSequence\n         tx.vout.append(CTxOut(0, CScript([OP_TRUE])))\n         assert(tx.vin[0].nSequence < 0xffffffff)\n         tx.calc_sha256()\n@@ -856,8 +850,8 @@ def run_test(self):\n         self.log.info(\"Accept a block with a transaction spending an output created in the same block\")\n         self.move_tip(64)\n         b65 = self.next_block(65)\n-        tx1 = self.create_and_sign_transaction(out[19].tx, out[19].n, out[19].tx.vout[0].nValue)\n-        tx2 = self.create_and_sign_transaction(tx1, 0, 0)\n+        tx1 = self.create_and_sign_transaction(out[19], out[19].vout[0].nValue)\n+        tx2 = self.create_and_sign_transaction(tx1, 0)\n         b65 = self.update_block(65, [tx1, tx2])\n         self.sync_blocks([b65], True)\n         self.save_spendable_output()\n@@ -869,8 +863,8 @@ def run_test(self):\n         self.log.info(\"Reject a block with a transaction spending an output created later in the same block\")\n         self.move_tip(65)\n         b66 = self.next_block(66)\n-        tx1 = self.create_and_sign_transaction(out[20].tx, out[20].n, out[20].tx.vout[0].nValue)\n-        tx2 = self.create_and_sign_transaction(tx1, 0, 1)\n+        tx1 = self.create_and_sign_transaction(out[20], out[20].vout[0].nValue)\n+        tx2 = self.create_and_sign_transaction(tx1, 1)\n         b66 = self.update_block(66, [tx2, tx1])\n         self.sync_blocks([b66], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n \n@@ -883,9 +877,9 @@ def run_test(self):\n         self.log.info(\"Reject a block with a transaction double spending a transaction creted in the same block\")\n         self.move_tip(65)\n         b67 = self.next_block(67)\n-        tx1 = self.create_and_sign_transaction(out[20].tx, out[20].n, out[20].tx.vout[0].nValue)\n-        tx2 = self.create_and_sign_transaction(tx1, 0, 1)\n-        tx3 = self.create_and_sign_transaction(tx1, 0, 2)\n+        tx1 = self.create_and_sign_transaction(out[20], out[20].vout[0].nValue)\n+        tx2 = self.create_and_sign_transaction(tx1, 1)\n+        tx3 = self.create_and_sign_transaction(tx1, 2)\n         b67 = self.update_block(67, [tx1, tx2, tx3])\n         self.sync_blocks([b67], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n \n@@ -904,14 +898,14 @@ def run_test(self):\n         self.log.info(\"Reject a block trying to claim too much subsidy in the coinbase transaction\")\n         self.move_tip(65)\n         b68 = self.next_block(68, additional_coinbase_value=10)\n-        tx = self.create_and_sign_transaction(out[20].tx, out[20].n, out[20].tx.vout[0].nValue - 9)\n+        tx = self.create_and_sign_transaction(out[20], out[20].vout[0].nValue - 9)\n         b68 = self.update_block(68, [tx])\n         self.sync_blocks([b68], False, 16, b'bad-cb-amount', reconnect=True)\n \n         self.log.info(\"Accept a block claiming the correct subsidy in the coinbase transaction\")\n         self.move_tip(65)\n         b69 = self.next_block(69, additional_coinbase_value=10)\n-        tx = self.create_and_sign_transaction(out[20].tx, out[20].n, out[20].tx.vout[0].nValue - 10)\n+        tx = self.create_and_sign_transaction(out[20], out[20].vout[0].nValue - 10)\n         self.update_block(69, [tx])\n         self.sync_blocks([b69], True)\n         self.save_spendable_output()\n@@ -942,8 +936,8 @@ def run_test(self):\n         self.log.info(\"Reject a block containing a duplicate transaction but with the same Merkle root (Merkle tree malleability\")\n         self.move_tip(69)\n         b72 = self.next_block(72)\n-        tx1 = self.create_and_sign_transaction(out[21].tx, out[21].n, 2)\n-        tx2 = self.create_and_sign_transaction(tx1, 0, 1)\n+        tx1 = self.create_and_sign_transaction(out[21], 2)\n+        tx2 = self.create_and_sign_transaction(tx1, 1)\n         b72 = self.update_block(72, [tx1, tx2])  # now tip is 72\n         b71 = copy.deepcopy(b72)\n         b71.vtx.append(tx2)   # add duplicate tx2\n@@ -990,7 +984,7 @@ def run_test(self):\n         a[MAX_BLOCK_SIGOPS + 2] = 0\n         a[MAX_BLOCK_SIGOPS + 3] = 0\n \n-        tx = self.create_and_sign_transaction(out[22].tx, 0, 1, CScript(a))\n+        tx = self.create_and_sign_transaction(out[22], 1, CScript(a))\n         b73 = self.update_block(73, [tx])\n         assert_equal(get_legacy_sigopcount_block(b73), MAX_BLOCK_SIGOPS + 1)\n         self.sync_blocks([b73], False, 16, b'bad-blk-sigops', reconnect=True)\n@@ -1015,7 +1009,7 @@ def run_test(self):\n         a[MAX_BLOCK_SIGOPS + 2] = 0xff\n         a[MAX_BLOCK_SIGOPS + 3] = 0xff\n         a[MAX_BLOCK_SIGOPS + 4] = 0xff\n-        tx = self.create_and_sign_transaction(out[22].tx, 0, 1, CScript(a))\n+        tx = self.create_and_sign_transaction(out[22], 1, CScript(a))\n         b74 = self.update_block(74, [tx])\n         self.sync_blocks([b74], False, 16, b'bad-blk-sigops', reconnect=True)\n \n@@ -1028,7 +1022,7 @@ def run_test(self):\n         a[MAX_BLOCK_SIGOPS + 1] = 0xff\n         a[MAX_BLOCK_SIGOPS + 2] = 0xff\n         a[MAX_BLOCK_SIGOPS + 3] = 0xff\n-        tx = self.create_and_sign_transaction(out[22].tx, 0, 1, CScript(a))\n+        tx = self.create_and_sign_transaction(out[22], 1, CScript(a))\n         b75 = self.update_block(75, [tx])\n         self.sync_blocks([b75], True)\n         self.save_spendable_output()\n@@ -1039,7 +1033,7 @@ def run_test(self):\n         size = MAX_BLOCK_SIGOPS - 1 + MAX_SCRIPT_ELEMENT_SIZE + 1 + 5\n         a = bytearray([OP_CHECKSIG] * size)\n         a[MAX_BLOCK_SIGOPS - 1] = 0x4e  # PUSHDATA4, but leave the following bytes as just checksigs\n-        tx = self.create_and_sign_transaction(out[23].tx, 0, 1, CScript(a))\n+        tx = self.create_and_sign_transaction(out[23], 1, CScript(a))\n         b76 = self.update_block(76, [tx])\n         self.sync_blocks([b76], True)\n         self.save_spendable_output()\n@@ -1064,7 +1058,7 @@ def run_test(self):\n         self.log.info(\"Test transaction resurrection during a re-org\")\n         self.move_tip(76)\n         b77 = self.next_block(77)\n-        tx77 = self.create_and_sign_transaction(out[24].tx, out[24].n, 10 * COIN)\n+        tx77 = self.create_and_sign_transaction(out[24], 10 * COIN)\n         b77 = self.update_block(77, [tx77])\n         self.sync_blocks([b77], True)\n         self.save_spendable_output()\n@@ -1109,9 +1103,9 @@ def run_test(self):\n         b83 = self.next_block(83)\n         op_codes = [OP_IF, OP_INVALIDOPCODE, OP_ELSE, OP_TRUE, OP_ENDIF]\n         script = CScript(op_codes)\n-        tx1 = self.create_and_sign_transaction(out[28].tx, out[28].n, out[28].tx.vout[0].nValue, script)\n+        tx1 = self.create_and_sign_transaction(out[28], out[28].vout[0].nValue, script)\n \n-        tx2 = self.create_and_sign_transaction(tx1, 0, 0, CScript([OP_TRUE]))\n+        tx2 = self.create_and_sign_transaction(tx1, 0, CScript([OP_TRUE]))\n         tx2.vin[0].scriptSig = CScript([OP_FALSE])\n         tx2.rehash()\n \n@@ -1126,13 +1120,13 @@ def run_test(self):\n         #\n         self.log.info(\"Test re-orging blocks with OP_RETURN in them\")\n         b84 = self.next_block(84)\n-        tx1 = self.create_tx(out[29].tx, out[29].n, 0, CScript([OP_RETURN]))\n+        tx1 = self.create_tx(out[29], 0, 0, CScript([OP_RETURN]))\n         tx1.vout.append(CTxOut(0, CScript([OP_TRUE])))\n         tx1.vout.append(CTxOut(0, CScript([OP_TRUE])))\n         tx1.vout.append(CTxOut(0, CScript([OP_TRUE])))\n         tx1.vout.append(CTxOut(0, CScript([OP_TRUE])))\n         tx1.calc_sha256()\n-        self.sign_tx(tx1, out[29].tx, out[29].n)\n+        self.sign_tx(tx1, out[29])\n         tx1.rehash()\n         tx2 = self.create_tx(tx1, 1, 0, CScript([OP_RETURN]))\n         tx2.vout.append(CTxOut(0, CScript([OP_RETURN])))\n@@ -1217,21 +1211,21 @@ def add_transactions_to_block(self, block, tx_list):\n \n     # this is a little handier to use than the version in blocktools.py\n     def create_tx(self, spend_tx, n, value, script=CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])):\n-        return create_tx_with_script(spend_tx, n, b\"\", value, script)\n+        return create_tx_with_script(spend_tx, n, amount=value, script_pub_key=script)\n \n     # sign a transaction, using the key we know about\n     # this signs input 0 in tx, which is assumed to be spending output n in spend_tx\n-    def sign_tx(self, tx, spend_tx, n):\n-        scriptPubKey = bytearray(spend_tx.vout[n].scriptPubKey)\n+    def sign_tx(self, tx, spend_tx):\n+        scriptPubKey = bytearray(spend_tx.vout[0].scriptPubKey)\n         if (scriptPubKey[0] == OP_TRUE):  # an anyone-can-spend\n             tx.vin[0].scriptSig = CScript()\n             return\n-        (sighash, err) = SignatureHash(spend_tx.vout[n].scriptPubKey, tx, 0, SIGHASH_ALL)\n+        (sighash, err) = SignatureHash(spend_tx.vout[0].scriptPubKey, tx, 0, SIGHASH_ALL)\n         tx.vin[0].scriptSig = CScript([self.coinbase_key.sign(sighash) + bytes(bytearray([SIGHASH_ALL]))])\n \n-    def create_and_sign_transaction(self, spend_tx, n, value, script=CScript([OP_TRUE])):\n-        tx = self.create_tx(spend_tx, n, value, script)\n-        self.sign_tx(tx, spend_tx, n)\n+    def create_and_sign_transaction(self, spend_tx, value, script=CScript([OP_TRUE])):\n+        tx = self.create_tx(spend_tx, 0, value, script)\n+        self.sign_tx(tx, spend_tx)\n         tx.rehash()\n         return tx\n \n@@ -1250,11 +1244,11 @@ def next_block(self, number, spend=None, additional_coinbase_value=0, script=CSc\n         if spend is None:\n             block = create_block(base_block_hash, coinbase, block_time)\n         else:\n-            coinbase.vout[0].nValue += spend.tx.vout[spend.n].nValue - 1  # all but one satoshi to fees\n+            coinbase.vout[0].nValue += spend.vout[0].nValue - 1  # all but one satoshi to fees\n             coinbase.rehash()\n             block = create_block(base_block_hash, coinbase, block_time)\n-            tx = create_tx_with_script(spend.tx, spend.n, b\"\", 1, script)  # spend 1 satoshi\n-            self.sign_tx(tx, spend.tx, spend.n)\n+            tx = self.create_tx(spend, 0, 1, script)  # spend 1 satoshi\n+            self.sign_tx(tx, spend)\n             self.add_transactions_to_block(block, [tx])\n             block.hashMerkleRoot = block.calc_merkle_root()\n         if solve:\n@@ -1273,7 +1267,7 @@ def save_spendable_output(self):\n     # get an output that we previously marked as spendable\n     def get_spendable_output(self):\n         self.log.debug(\"getting spendable output %s\" % self.spendable_outputs[0].vtx[0])\n-        return PreviousSpendableOutput(self.spendable_outputs.pop(0).vtx[0], 0)\n+        return self.spendable_outputs.pop(0).vtx[0]\n \n     # move the tip back to a previous block\n     def move_tip(self, number):"
      }
    ]
  }
]