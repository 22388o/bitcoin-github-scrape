laanwj,2021-11-08 17:06:03,"I'm sorry but I'm not sure this is a good idea. Having the test framework be internal makes it very flexible, easy to adopt to our changing needs. Offering it as an external API means having to deal with versioning, backwards compatibility, external feature requests, and so on.\n\nAren't there other Python bitcoin frameworks that could do what you want?\n\n> It would be preferable to install P",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-963371494,963371494,
jamesob,2021-11-08 17:10:32,"> Aren't there other Python bitcoin frameworks that could do what you want?\n\nI think offering this with the caveat that there are essentially no API compatibility guarantees would be much better than nothing. I think an equivalent Python library would basically just be a copy/paste of much of the content in `test_framework` but would be more prone to bit-rot.\n\nThe code here is always funct",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-963375745,963375745,
laanwj,2021-11-08 17:15:01,"Yes, I do this myself too. Either I symlink `test_framework` or copy the necessary modules into my project (usually `authproxy.py`). I think that can be super useful.\nBut I don't want to commit to this. I don't think it's a good idea to support this outside the immediate developer community of this project, which e.g. making it installable with pip would suggest.\n\nAlso remember that this is ",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-963380025,963380025,
jamesob,2021-11-08 17:17:19,"> I really dislike this reasoning. Yes, maybe you trust this repo, but we've always resisted the centralizing force of having everything come from a single project and maintained under a single banner.\n\nI understand where you're coming from here, but if this is code that we already have to maintain anyway, why not make it usable by others? The maintenance and review cycle in Core is incredibly",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-963382163,963382163,
sipa,2021-11-08 17:18:39,"I think the test framework codebase has a common ancestor with https://github.com/petertodd/python-bitcoinlib; perhaps to some extent that is usable too?\n\n> IMO users should be able to use this code externally if they accept the caveat that API compatibility is not a consideration.\n\nExperience shows that this just doesn't work. If it's usable, people will use it, and then complain about ch",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-963383413,963383413,
jamesob,2021-11-08 17:53:10,"> E.g.: please don't use it with real money at stake.\n\nI agree with this general caveat, but I would much rather rely on this repository's review process for money-sensitive operations than some additional third party if possible.\n\n> Experience shows that this just doesn't work. If it's usable, people will use it, and then complain about changes that break compatibility.\n\nI think havin",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-963411549,963411549,
laanwj,2021-11-08 17:56:46,"> but I would much rather rely on this repository's review process for money-sensitive operations than some additional third party if possible.\n\nWe do not review the test code with this scenario in mind.",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-963414648,963414648,
josibake,2021-11-08 18:11:52,"> the (very useful and well-maintained) Python utilities we have for interacting with bitcoind\n\nI don't think this is a fair statement. The test framework python code is not meant to be utilities for interacting with `bitcoind`. It's sole purpose is to _be_ the functional test framework. While there is likely some overlapping use-case, I think the test framework code should be written and opti",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-963428790,963428790,
prayank23,2021-11-08 18:35:43,"> which makes the (very useful and well-maintained) Python utilities we have for interacting with bitcoind pip installable and so usable as a library by other programs\n\nThis is interesting and if I understand this correctly it can be used in a project like https://github.com/prayank23/bitcoin-ps\n\nA GUI application to test Bitcoin Core which has options similar to https://portswigger.net/bu",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-963454811,963454811,
JeremyRubin,2021-11-08 18:49:15,"one thing i've hit up against is that certain things (e.g. in messages.py) are missing the APIs you want for building stuff and when I did sapio in python (somewhere in old commits of https://github.com/sapio-lang/sapio) I had to patch a number of things iirc when I vendored the lib out of core.\n\nA benefit of making it a library is that these patches/changes might be more likely to get upstrea",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-963467416,963467416,
jamesob,2021-11-08 18:49:46,"> I don't think this is a fair statement.\n\nYou don't think it's a fair statement that the Python code in the test framework is ""very useful and well-maintained""? Or that it helps facilitate interaction with bitcoind?\n\n> If people did start using this as a more general-purpose library, I'd be worried that decisions to make it more generally useful might degrade its performance/usefulness in",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-963467766,963467766,
jamesob,2021-11-08 18:50:35,"> Maybe a good intermediate would be to just make a workflow of some kind that triggers a release of whatever the latest python code is every time there is a core release? This can happen without the release being core official.\n\nYup, this is what I intend to do if this change is not accepted. But then users will sadly have to trust/verify that I have not tampered with the code instead of just",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-963468600,963468600,
DrahtBot,2021-11-09 05:28:13,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23371](https://github.com/bitcoin/bitcoin/pull/23371) (test: MiniWallet: add P2TR support and use it per default by theS",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-963830271,963830271,
MarcoFalke,2021-11-09 08:41:43,"Not sure what the goal here is, but the ones mentioned in the OP seem completely different scopes. I think writing an alternative/exclusive transport layer with the test code should not be done. The test structs are *not* guaranteed to be compatible with the p2p layer. They are only guaranteed to be compatible with the Bitcoin Core serialization at one specific commit. I think this should also be ",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-963929332,963929332,
MarcoFalke,2021-11-09 09:15:55,"And if TestShell isn't sufficient, can't you use this:\n\nhttps://github.com/bitcoin/bitcoin/blob/94db963de501e4aba6e5d8150a01ceb85753dee1/contrib/message-capture/message-capture-parser.py#L16",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-963957727,963957727,
josibake,2021-11-09 09:46:14,"> You don't think it's a fair statement that the Python code in the test framework is ""very useful and well-maintained""? Or that it helps facilitate interaction with bitcoind?\n\nSorry, should have been more clear: I think it is incorrect to think of this code as ""well-maintained utilities for interacting with `bitcoind`."" This code is for the functional testing framework and it is written and r",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-963981852,963981852,
DrahtBot,2021-11-09 10:40:38,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-964025307,964025307,
MarcoFalke,2021-11-09 12:38:30,"> Also, as mentioned previously private keys in the tests are treated like a 123456 password. Not something that should be used outside of tests.\n\nNot to mention that authproxy itself is broken. Repeating RPCs until they succeed, ignoring error conditions.",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-964113801,964113801,
jamesob,2021-11-09 14:58:29,"> The test structs are not guaranteed to be compatible with the p2p layer. They are only guaranteed to be compatible with the Bitcoin Core serialization at one specific commit. I think this should also be our goal, but there seems to be disagreement (#21357 (comment))\n\nThis seems counter-intuitive, since I would have thought that one of the central purposes of the functional test framework is ",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-964230042,964230042,
sipa,2021-11-09 15:00:08,@jamesob Have you looked at  https://github.com/petertodd/python-bitcoinlib? It also has P2P serialization etc.,https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-964231532,964231532,
ajtowns,2021-11-09 15:00:22,"> Aren't there other Python bitcoin frameworks that could do what you want?\n\nI've considered proposing a PR like this before too; for testing/research the test_framework API is really handy -- it has a whole bunch of code to allow you to decode bitcoind messages/data structures, to participate in the p2p network, and to get access to the rpc/cli interface. It's definitely not good for use with",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-964231789,964231789,
jamesob,2021-11-09 15:08:06,"> @jamesob Have you looked at https://github.com/petertodd/python-bitcoinlib? It also has P2P serialization etc.\n\nI have used this library before, and no doubt it is useful, but I don't have much confidence in what it provides for P2P/net since no part of its test suite runs against an actual bitcoind instance. Not to mention it doesn't provide anything along the lines of `test_framework.{P2PI",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-964239369,964239369,
MarcoFalke,2021-11-09 15:12:37,"> Allowing that the P2P client in the functional tests is overtly coupled to a single Bitcoin Core commit (and not the more general P2P protocol) seems like an unfortunate concession.\n\nWhy? If you want to check that older versions of Bitcoin Core can read p2p data from the latest version of Bitcoin Core, you can write a test using previous releases. If that is too much, I think a unit test is ",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-964244016,964244016,
laanwj,2021-11-10 11:01:45,"> By comparison, I've found other libraries tend to just not have code for the things I've been interested in, or they've been too out of date to really be useful (eg python-secp256k1 has been unmaintained and out of date, and I see there's a few ""taproot support?"" feature requests recently opened on other python module\n\nOutside of the specific context of changing the test framework into somet",https://github.com/bitcoin/bitcoin/pull/23468#issuecomment-965019695,965019695,
