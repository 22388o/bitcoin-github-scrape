[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308243389",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-308243389",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10443",
    "id": 308243389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODI0MzM4OQ==",
    "user": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-13T20:46:19Z",
    "updated_at": "2017-06-13T20:46:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is interesting but still no comment.\r\n\r\nConcept ACK\r\n\r\nI'll play around with this a bit.\r\n\r\n```\r\nWshadow statistics: \r\n   1 policy/fees_input.cpp:127:23: warning: declaration shadows a local variable [-Wshadow]\r\n   1 policy/fees_input.cpp:197:38: warning: declaration shadows a local variable [-Wshadow]\r\n   1 policy/fees_input.cpp:229:22: warning: declaration shadows a local variable [-Wshadow]\r\n   1 policy/fees_input.cpp:233:27: warning: declaration shadows a local variable [-Wshadow]\r\n   1 policy/fees_input.cpp:27:61: warning: declaration shadows a field of 'CBlockPolicyInput' [-Wshadow]\r\n   1 test/fee_est/fee_est.cpp:301:34: warning: declaration shadows a local variable [-Wshadow]\r\n   1 test/fee_est/fee_est.cpp:79:20: warning: declaration shadows a field of 'TxData' [-Wshadow]\r\n   1 test/fee_est/fee_est.cpp:79:29: warning: declaration shadows a field of 'TxData' [-Wshadow]\r\n   1 test/fee_est/fee_est.cpp:79:39: warning: declaration shadows a field of 'TxData' [-Wshadow]\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308243389/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308342619",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-308342619",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10443",
    "id": 308342619,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODM0MjYxOQ==",
    "user": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-14T07:21:25Z",
    "updated_at": "2017-06-14T07:21:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "When estimate log doesn't have enough data, `fee_est` is generating empty data in the HTML file. Emit some warning in such cases?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308342619/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308343380",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-308343380",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10443",
    "id": 308343380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODM0MzM4MA==",
    "user": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-14T07:24:27Z",
    "updated_at": "2017-06-14T07:24:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "For perfect output, there should be 3rd dimension - time or current block height when the tx was first seen :-)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308343380/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311640095",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-311640095",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10443",
    "id": 311640095,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTY0MDA5NQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-28T12:05:12Z",
    "updated_at": "2017-06-28T12:05:12Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. I think this could be a useful tool.\r\n\r\nCould this be split into two PRs to aid reviewers? The first PR would cover the `-estlog` option and writing the fee estimation data to disk. The second PR would be for a tool to read and graph the logs.\r\n\r\nParsing and graphing json files seems like a problem that has probably been solved many times before. If I was approaching this, I'd look at implementing this as a script in /contrib or a separate repository. Was there a particular reason you chose to implement this as a new C++ program?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311640095/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380199151",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-380199151",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10443",
    "id": 380199151,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDE5OTE1MQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-10T18:20:01Z",
    "updated_at": "2018-04-10T18:20:01Z",
    "author_association": "MEMBER",
    "body": "> Could this be split into two PRs to aid reviewers? The first PR would cover the -estlog option and writing the fee estimation data to disk. The second PR would be for a tool to read and graph the logs.\r\n\r\nI think this is useful.\r\n\r\nHowever I'm not sure the analysis tool belongs in this repository. As it's specific to developers debugging the fee estimation code it's not something we want to ship with the distribution, or install by default. One place it could be is e.g. https://github.com/bitcoin-core/bitcoin-maintainer-tools . You could still document or refer to it from here.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380199151/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380209281",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-380209281",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10443",
    "id": 380209281,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDIwOTI4MQ==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-10T18:53:12Z",
    "updated_at": "2018-04-10T18:54:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Agree that fee_est tool shouldn't be installed, since it's a tool specifically for made for modifying and debugging fee estimation code.\r\n\r\nBut it would be awkward to use and maintain from a separate repository because it links and calls into the fee estimation code. (The tool works by piping historical data into the fee estimator so it's possible to make experimental changes to fee estimation and see how those changes affect its output and internal state.)\r\n\r\nAs far as build / distribution is concerned I think it makes sense to think of it more like a unit test or benchmark than like a maintainer tool.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380209281/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388833486",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-388833486",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10443",
    "id": 388833486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODgzMzQ4Ng==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-14T14:18:30Z",
    "updated_at": "2018-05-14T14:30:09Z",
    "author_association": "MEMBER",
    "body": "> But it would be awkward to use and maintain from a separate repository because it links and calls into the fee estimation code. \r\n\r\nYes, I agree, that's unfortunately true. That part needs to stay in the repository with the rest of the code.\r\n\r\n> Parsing and graphing json files seems like a problem that has probably been solved many times before. If I was approaching this, I'd look at implementing this as a script in /contrib or a separate repository.\r\n\r\nI agree - especially with the references to cloudflare CDN and such. It feels a bit ugly to have that in the C++ code. Better to spit out e.g. JSON or CSV or whatever is convenient, then use a separate script for pretty formatting. This would also keep open the option of using different (non-web) visualization tools.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388833486/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/408684675",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-408684675",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10443",
    "id": 408684675,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwODY4NDY3NQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-29T15:18:00Z",
    "updated_at": "2018-07-29T15:18:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 54 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/408684675/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/423532381",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-423532381",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10443",
    "id": 423532381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzUzMjM4MQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-21T13:33:26Z",
    "updated_at": "2021-12-01T10:42:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23497](https://github.com/bitcoin/bitcoin/pull/23497) (Add `src/node/` and `src/wallet/` code to `node::` and `wallet::` namespaces by ryanofsky)\n* [#23387](https://github.com/bitcoin/bitcoin/pull/23387) (WIP: add support to save fee estimates without having to shut down the node by greenaddress)\n* [#22677](https://github.com/bitcoin/bitcoin/pull/22677) (cut the validation <-> txmempool circular dependency 2/2 by glozow)\n* [#22014](https://github.com/bitcoin/bitcoin/pull/22014) (refactor: Make m_cs_fee_estimator non-recursive by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/423532381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452008993",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-452008993",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10443",
    "id": 452008993,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjAwODk5Mw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-07T17:13:57Z",
    "updated_at": "2019-05-15T15:35:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased 51163cee78f32fb6311bf620266c42fd115ba98f -> 8b9c3da3cf077051d6b1112ba4adbadd60096d57 ([pr/fee.16](https://github.com/ryanofsky/bitcoin/commits/pr/fee.16) -> [pr/fee.17](https://github.com/ryanofsky/bitcoin/commits/pr/fee.17)) due to conflict with #13341\r\nRebased 8b9c3da3cf077051d6b1112ba4adbadd60096d57 -> 4bcecdb666d1dbc90201dccbfee27a234f88c960 ([pr/fee.17](https://github.com/ryanofsky/bitcoin/commits/pr/fee.17) -> [pr/fee.18](https://github.com/ryanofsky/bitcoin/commits/pr/fee.18)) due to conflict with #13786\r\nUpdated 4bcecdb666d1dbc90201dccbfee27a234f88c960 -> aaa4b687c5fdeb2c75246e23077c984a0f133e81 ([pr/fee.18](https://github.com/ryanofsky/bitcoin/commits/pr/fee.18) -> [pr/fee.19](https://github.com/ryanofsky/bitcoin/commits/pr/fee.19)) fixing travis size_t univalue errors\r\nRebased aaa4b687c5fdeb2c75246e23077c984a0f133e81 -> a5faeb1cedd52b2886a1d5c320802874436fe2f6 ([pr/fee.19](https://github.com/ryanofsky/bitcoin/commits/pr/fee.19) -> [pr/fee.20](https://github.com/ryanofsky/bitcoin/commits/pr/fee.20)) to fix broken lint error caused by #13705\r\nUpdated a5faeb1cedd52b2886a1d5c320802874436fe2f6 -> 61ab4c17eebf9b73267c992fb664d603620f9e81 ([pr/fee.20](https://github.com/ryanofsky/bitcoin/commits/pr/fee.20) -> [pr/fee.21](https://github.com/ryanofsky/bitcoin/commits/pr/fee.21)) adding missing lock annotation.\r\nRebased 61ab4c17eebf9b73267c992fb664d603620f9e81 -> a9eb5cc5ceace3e567a0f7ba44c6350b2746436f ([pr/fee.21](https://github.com/ryanofsky/bitcoin/commits/pr/fee.21) -> [pr/fee.22](https://github.com/ryanofsky/bitcoin/commits/pr/fee.22)) due to conflict with #14100\r\nUpdated a9eb5cc5ceace3e567a0f7ba44c6350b2746436f -> 8cd1bb684bfec22fc54e091dc96c782a26847393 ([pr/fee.22](https://github.com/ryanofsky/bitcoin/commits/pr/fee.22) -> [pr/fee.23](https://github.com/ryanofsky/bitcoin/commits/pr/fee.23)) to fix `G_TRANSLATION_FUN` link error after #13961\r\nRebased 8cd1bb684bfec22fc54e091dc96c782a26847393 -> a60d26ac2bceea2c67ef34c8641705b16f656d07 ([pr/fee.23](https://github.com/ryanofsky/bitcoin/commits/pr/fee.23) -> [pr/fee.24](https://github.com/ryanofsky/bitcoin/commits/pr/fee.24)) due to conflict with #13311\r\nUpdated a60d26ac2bceea2c67ef34c8641705b16f656d07 -> 1e7ec287c927437b5a183bc807c49eba4a16d18a ([pr/fee.24](https://github.com/ryanofsky/bitcoin/commits/pr/fee.24) -> [pr/fee.25](https://github.com/ryanofsky/bitcoin/commits/pr/fee.25)) with suggested lint fixes\r\nUpdated 1e7ec287c927437b5a183bc807c49eba4a16d18a -> 56446378f5d0c2bdeb7a45fa7382ccd58c9b994c ([pr/fee.25](https://github.com/ryanofsky/bitcoin/commits/pr/fee.25) -> [pr/fee.26](https://github.com/ryanofsky/bitcoin/commits/pr/fee.26)) with more lint fixes\r\nUpdated 56446378f5d0c2bdeb7a45fa7382ccd58c9b994c -> 8d99281859540689b55285bd0acdf8c1529c4b37 ([pr/fee.26](https://github.com/ryanofsky/bitcoin/commits/pr/fee.26) -> [pr/fee.27](https://github.com/ryanofsky/bitcoin/commits/pr/fee.27)) with more lint fixes\r\nUpdated 8d99281859540689b55285bd0acdf8c1529c4b37 -> 68944a5120c651772fd7f3c028c446e38f9a3f57 ([pr/fee.27](https://github.com/ryanofsky/bitcoin/commits/pr/fee.27) -> [pr/fee.28](https://github.com/ryanofsky/bitcoin/commits/pr/fee.28)) with more lint fixes\r\nRebased 68944a5120c651772fd7f3c028c446e38f9a3f57 -> 50cd9b1cb7d03a81140d8a59698eba8d06b89612 ([pr/fee.28](https://github.com/ryanofsky/bitcoin/commits/pr/fee.28) -> [pr/fee.29](https://github.com/ryanofsky/bitcoin/commits/pr/fee.29)) due to conflict with #14555\r\nRebased 50cd9b1cb7d03a81140d8a59698eba8d06b89612 -> a0148157c57e91b299e6b450c7ee758f606488e6 ([pr/fee.29](https://github.com/ryanofsky/bitcoin/commits/pr/fee.29) -> [pr/fee.30](https://github.com/ryanofsky/bitcoin/commits/pr/fee.30)) due to conflict with #13128\r\nUpdated a0148157c57e91b299e6b450c7ee758f606488e6 -> 6f9c07f0a72ff0d95bfee9f37e4ae3dc9ed9c0e4 ([pr/fee.30](https://github.com/ryanofsky/bitcoin/commits/pr/fee.30) -> [pr/fee.31](https://github.com/ryanofsky/bitcoin/commits/pr/fee.31)) restructuring to work around clang lock annotation errors from #13128\r\nRebased 6f9c07f0a72ff0d95bfee9f37e4ae3dc9ed9c0e4 -> ca993015e0e115540f0ef2710a8f2a81f5fbf0c1 ([pr/fee.31](https://github.com/ryanofsky/bitcoin/commits/pr/fee.31) -> [pr/fee.32](https://github.com/ryanofsky/bitcoin/commits/pr/fee.32)) due to conflict with #14963\r\nRebased ca993015e0e115540f0ef2710a8f2a81f5fbf0c1 -> b197b85a6a1c682070c445c0314d6a645936ba0f ([pr/fee.32](https://github.com/ryanofsky/bitcoin/commits/pr/fee.32) -> [pr/fee.33](https://github.com/ryanofsky/bitcoin/commits/pr/fee.33)) due to conflict with #15043\r\nRebased b197b85a6a1c682070c445c0314d6a645936ba0f -> b5df05ab46d25052c95344e91fc0631b29635f1d ([pr/fee.33](https://github.com/ryanofsky/bitcoin/commits/pr/fee.33) -> [pr/fee.34](https://github.com/ryanofsky/bitcoin/commits/pr/fee.34)) due to conflict with #15295\r\nUpdated b5df05ab46d25052c95344e91fc0631b29635f1d -> 9588e9e81d29227213babe45d37e9bfcd10ab05c ([pr/fee.34](https://github.com/ryanofsky/bitcoin/commits/pr/fee.34) -> [pr/fee.35](https://github.com/ryanofsky/bitcoin/commits/pr/fee.35), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.34..pr/fee.35)) to fix travis link error with #15295\r\nRebased 9588e9e81d29227213babe45d37e9bfcd10ab05c -> e2330472f0ed7466e951d99f1c707d1852289cd1 ([pr/fee.35](https://github.com/ryanofsky/bitcoin/commits/pr/fee.35) -> [pr/fee.36](https://github.com/ryanofsky/bitcoin/commits/pr/fee.36)) due to conflict with #15534\r\nRebased e2330472f0ed7466e951d99f1c707d1852289cd1 -> 28ab62aaaeac6d8f7ce5f3297504b549ca4cea5a ([pr/fee.36](https://github.com/ryanofsky/bitcoin/commits/pr/fee.36) -> [pr/fee.37](https://github.com/ryanofsky/bitcoin/commits/pr/fee.37)) due to conflict with #15638\r\nRebased 28ab62aaaeac6d8f7ce5f3297504b549ca4cea5a -> ccc44e115237b5337869ddb738ecb1af04c52f61 ([pr/fee.37](https://github.com/ryanofsky/bitcoin/commits/pr/fee.37) -> [pr/fee.38](https://github.com/ryanofsky/bitcoin/commits/pr/fee.38)) due to conflict with #15323\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452008993/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/494982393",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-494982393",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10443",
    "id": 494982393,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NDk4MjM5Mw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-22T21:34:30Z",
    "updated_at": "2019-05-22T21:34:30Z",
    "author_association": "MEMBER",
    "body": "Concept ACK, but it seems the HTML code (or even the conversion to HTML) could live outside the repo?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/494982393/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/500121675",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-500121675",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10443",
    "id": 500121675,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDEyMTY3NQ==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-08T12:48:11Z",
    "updated_at": "2020-10-02T13:54:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "This PR has some overlap with @kallewoof's [mff](https://github.com/kallewoof/mff) utility. One difference is that this creates logs in [json-lines](http://jsonlines.org/) format and only logs mempool data needed to run fee estimation code reproducibly, while mff uses a custom format and logs additional information.\r\n\r\n---\r\n\r\nRebased ccc44e115237b5337869ddb738ecb1af04c52f61 -> 6251342fc77cb49e9913aeeb89bf6f3e3234f617 ([`pr/fee.38`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.38) -> [`pr/fee.39`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.39) due to various conflicts\r\nRebased 6251342fc77cb49e9913aeeb89bf6f3e3234f617 -> 23a1edcfaa469022c9e8296559fb0d00417225ec ([pr/fee.39](https://github.com/ryanofsky/bitcoin/commits/pr/fee.39) -> [pr/fee.40](https://github.com/ryanofsky/bitcoin/commits/pr/fee.40)) due to conflict with #16171\r\nRebased 6251342fc77cb49e9913aeeb89bf6f3e3234f617 -> 1b322b073e0ce93f55b9f5678bf50ee1af069c58 ([pr/fee.39](https://github.com/ryanofsky/bitcoin/commits/pr/fee.39) -> [pr/fee.40](https://github.com/ryanofsky/bitcoin/commits/pr/fee.40)) due to conflict with #16171\r\nRebased 1b322b073e0ce93f55b9f5678bf50ee1af069c58 -> 207cf9f8356ab4ceb72b1fd0bbbb66f6e726006b ([pr/fee.40](https://github.com/ryanofsky/bitcoin/commits/pr/fee.40) -> [pr/fee.41](https://github.com/ryanofsky/bitcoin/commits/pr/fee.41)) due to conflicts with #14193 and #16291\r\nRebased 207cf9f8356ab4ceb72b1fd0bbbb66f6e726006b -> a1c3573115b25a6b702a1b56e5813a80281f9d7d ([pr/fee.41](https://github.com/ryanofsky/bitcoin/commits/pr/fee.41) -> [pr/fee.42](https://github.com/ryanofsky/bitcoin/commits/pr/fee.42)) due to conflict with #16362\r\nRebased a1c3573115b25a6b702a1b56e5813a80281f9d7d -> 73b1eaca4edecae3dcde6fcf57b3832fb84a8d10 ([pr/fee.42](https://github.com/ryanofsky/bitcoin/commits/pr/fee.42) -> [pr/fee.43](https://github.com/ryanofsky/bitcoin/commits/pr/fee.43))\r\nRebased 73b1eaca4edecae3dcde6fcf57b3832fb84a8d10 -> aa41b10397895687dcdafad40fd9ac1934796425 ([`pr/fee.43`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.43) -> [`pr/fee.44`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.44)) due to conflict with #15921\r\nRebased aa41b10397895687dcdafad40fd9ac1934796425 -> f00110e8b6836ef384c0dbbd3ec693d5b97c21bb ([`pr/fee.44`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.44) -> [`pr/fee.45`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.45)) due to minor conflict with #17050\r\nRebased f00110e8b6836ef384c0dbbd3ec693d5b97c21bb -> 03bcb1190e4e6673414a3ae9dfca1112ab14b305 ([`pr/fee.45`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.45) -> [`pr/fee.46`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.46)) due to conflicts with #17851 and #16688\r\nRebased 03bcb1190e4e6673414a3ae9dfca1112ab14b305 -> 35af64c93097ca65e5d0e8ef76b0326fdc1561cf ([`pr/fee.46`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.46) -> [`pr/fee.47`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.47)) due to conflict with #17891\r\nRebased 35af64c93097ca65e5d0e8ef76b0326fdc1561cf -> 6597699b2215d5aef8633c973b0e4f4fddcf230b ([`pr/fee.47`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.47) -> [`pr/fee.48`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.48)) due to conflict with #17261\r\nRebased 6597699b2215d5aef8633c973b0e4f4fddcf230b -> 8392f77f047c1bc11e0475ef5fbf624f7f3f9488 ([`pr/fee.48`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.48) -> [`pr/fee.49`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.49)) due to conflict with #17925\r\nRebased 8392f77f047c1bc11e0475ef5fbf624f7f3f9488 -> b5adc1b2819d88f5e2ed67dd98c9f5c091e99101 ([`pr/fee.49`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.49) -> [`pr/fee.50`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.50), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.49-rebase..pr/fee.50)) due to conflict with #18126\r\nRebased b5adc1b2819d88f5e2ed67dd98c9f5c091e99101 -> b698b5dbaa87cba45f867141a97b010813d86160 ([`pr/fee.50`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.50) -> [`pr/fee.51`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.51), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.50-rebase..pr/fee.51)) due to conflict with #18134\r\nRebased b698b5dbaa87cba45f867141a97b010813d86160 -> 47164d0ef2d2625c3c47e49659e6f1833c472700 ([`pr/fee.51`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.51) -> [`pr/fee.52`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.52), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.51-rebase..pr/fee.52)) due to conflict with #18673\r\nRebased 47164d0ef2d2625c3c47e49659e6f1833c472700 -> 5123ff1f22b38162e42529b2f1484bb980c7834c ([`pr/fee.52`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.52) -> [`pr/fee.53`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.53), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.52-rebase..pr/fee.53)) to due conflicts with #18698 and #18922\r\nUpdated 5123ff1f22b38162e42529b2f1484bb980c7834c -> 854a21ddb8007cdea471befd25cb401f7f4f96e4 ([`pr/fee.53`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.53) -> [`pr/fee.54`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.54), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.53..pr/fee.54)) fixing travis fuzzer build\r\nUpdated 854a21ddb8007cdea471befd25cb401f7f4f96e4 -> e635c970bd0a6b8bfe7f923e96fd17186d623843 ([`pr/fee.54`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.54) -> [`pr/fee.55`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.55), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.54..pr/fee.55)) fixing travis fuzzer assert https://travis-ci.org/github/bitcoin/bitcoin/jobs/691844334#L3561\r\nUpdated e635c970bd0a6b8bfe7f923e96fd17186d623843 -> 009c76da19c271a552ec88ba17009a30e1a3141b ([`pr/fee.55`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.55) -> [`pr/fee.56`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.56), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.55..pr/fee.56)) fixing travis fuzzer assert https://travis-ci.org/github/bitcoin/bitcoin/jobs/694860650#L3536\r\nRebased 009c76da19c271a552ec88ba17009a30e1a3141b -> 3f92adfecc9dc3b11e620b421ea4084ff9fcd280 ([`pr/fee.56`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.56) -> [`pr/fee.57`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.57), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.56-rebase..pr/fee.57)) to work around travis arm timeouts \"sudo: unable to resolve host travis-job-bitcoin-bitcoin-694879056\" https://travis-ci.org/github/bitcoin/bitcoin/jobs/694879056\r\nRebased 3f92adfecc9dc3b11e620b421ea4084ff9fcd280 -> 110245a8dbd11d31d9e52c7c17dc8795743617f8 ([`pr/fee.57`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.57) -> [`pr/fee.58`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.58), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.57-rebase..pr/fee.58)) due to conflict with #19561\r\nRebased 110245a8dbd11d31d9e52c7c17dc8795743617f8 -> 00d514a60820d7c3be4fa0e5433aefabd594d237 ([`pr/fee.58`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.58) -> [`pr/fee.59`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.59), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.58-rebase..pr/fee.59)) due to conflict with #19556\r\nRebased 00d514a60820d7c3be4fa0e5433aefabd594d237 -> 2c512ff0729f89aa47019009534d3958ec18f42b ([`pr/fee.59`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.59) -> [`pr/fee.60`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.60), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.59-rebase..pr/fee.60)) due to conflict with #20003",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/500121675/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/737147179",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-737147179",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10443",
    "id": 737147179,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNzE0NzE3OQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-02T10:41:14Z",
    "updated_at": "2020-12-02T10:41:14Z",
    "author_association": "MEMBER",
    "body": "Discovered this PR thanks to DrahtBot's \"needs rebase\" notifications.\r\n\r\nConcept ACK, interesting idea for dev tooling in the tests or contrib.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/737147179/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/804616485",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-804616485",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10443",
    "id": 804616485,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNDYxNjQ4NQ==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-23T04:55:48Z",
    "updated_at": "2021-11-01T17:53:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased 2c512ff0729f89aa47019009534d3958ec18f42b -> de8a2d80f74d33067a3b532368cca877fc65e7d2 ([`pr/fee.60`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.60) -> [`pr/fee.61`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.61), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.60-rebase..pr/fee.61)) due to conflicts with #18766\r\nUpdated de8a2d80f74d33067a3b532368cca877fc65e7d2 -> 4b1c4957a59f68f1c501e1fc5e0fea4a58b14525 ([`pr/fee.61`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.61) -> [`pr/fee.62`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.62), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.61..pr/fee.62)) due to std::filesystem compile error https://cirrus-ci.com/task/4871270773817344?command=ci#L8556 and https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/38354674\r\nRebased 4b1c4957a59f68f1c501e1fc5e0fea4a58b14525 -> e793f63c336be2eb0c8c82e31c7ddc05600f9a3d ([`pr/fee.62`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.62) -> [`pr/fee.63`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.63), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.62-rebase..pr/fee.63)) due to conflict with #21575\r\nRebased e793f63c336be2eb0c8c82e31c7ddc05600f9a3d -> 941fabf8da5031d7405e5d69a607552ae3273fdf ([`pr/fee.63`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.63) -> [`pr/fee.64`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.64), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.63-rebase..pr/fee.64)) due to conflicts with #21732, #22003, #21850\r\nRebased 941fabf8da5031d7405e5d69a607552ae3273fdf -> de097a24fa9364aa2230dd3cb5ceac3677cb4d2a ([`pr/fee.64`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.64) -> [`pr/fee.65`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.65), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.64-rebase..pr/fee.65)) due to conflict #21966 with attempted fixes for fuzz UndefinedBehaviorSanitizer implicit-unsigned-integer-truncation error https://cirrus-ci.com/task/5690421675294720\r\nRebased de097a24fa9364aa2230dd3cb5ceac3677cb4d2a -> 50ce90cedb6480446e8d1970b2c138d95b2410af ([`pr/fee.65`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.65) -> [`pr/fee.66`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.66), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.65-rebase..pr/fee.66)) due to conflict with #20833\r\nRebased 50ce90cedb6480446e8d1970b2c138d95b2410af -> f51bb257abe46226a84a9a6dd01a362f06187f9e ([`pr/fee.66`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.66) -> [`pr/fee.67`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.67), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.66-rebase..pr/fee.67)) due to conflict with #22084\r\nRebased f51bb257abe46226a84a9a6dd01a362f06187f9e -> 233c1b2776e33d0c0657f06aca33b39880a20f4e ([`pr/fee.67`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.67) -> [`pr/fee.68`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.68), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.67-rebase..pr/fee.68)) due to conflict with #22796\r\nRebased 233c1b2776e33d0c0657f06aca33b39880a20f4e -> 3c5c30fcb1bac408f34604c81bf392ae7efcf787 ([`pr/fee.68`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.68) -> [`pr/fee.69`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.69), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.68-rebase..pr/fee.69)) due to conflicts with #23044, #22976, #22951\r\nRebased 3c5c30fcb1bac408f34604c81bf392ae7efcf787 -> 84f5df64005de6b6c0f651f2f6b0e470737fed4e ([`pr/fee.69`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.69) -> [`pr/fee.70`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.70), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.69-rebase..pr/fee.70)) due to conflicts with #22937 and #22766\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/804616485/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/983949408",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-983949408",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10443",
    "id": 983949408,
    "node_id": "IC_kwDOABII5846peBg",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-12-01T18:41:03Z",
    "updated_at": "2021-12-01T18:41:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n\ud83d\udc19 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/983949408/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216699784",
    "pull_request_review_id": 154242217,
    "id": 216699784,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjY5OTc4NA==",
    "diff_hunk": "@@ -0,0 +1,37 @@\n+src/test/fee_est -- Fee estimation offline testing tool\n+=======================================================\n+\n+The `fee_est` tool is intended to help debug and test changes in bitcoin fee\n+estimation code using transaction data gathered from live bitcoin nodes.\n+\n+Transaction data can be collected by running bitcoind with `-estlog` parameter\n+which will produce newline-delimited json file (http://ndjson.org/,",
    "path": "src/test/fee_est/README.md",
    "position": null,
    "original_position": 8,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-11 16:31:38 mdl(pr=10443): src/test/fee_est/README.md:8: MD034 Bare URL used\r\n2018-09-11 16:31:38 mdl(pr=10443): src/test/fee_est/README.md:9: MD034 Bare URL used\r\n```",
    "created_at": "2018-09-11T14:52:49Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r216699784",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216699784"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r216699784"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216699784/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 8,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217878986",
    "pull_request_review_id": 155707084,
    "id": 217878986,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzg3ODk4Ng==",
    "diff_hunk": "@@ -0,0 +1,332 @@\n+#include <policy/fees.h>\n+#include <policy/fees_input.h>\n+#include <txmempool.h>\n+#include <util.h>\n+\n+#include <univalue.h>\n+\n+#include <fstream>\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+std::string Usage()\n+{\n+    std::string usage = \"Usage: fee_est [options] <estlog.txt>\\n\";\n+    usage += HelpMessageGroup(\"Options:\");\n+    usage += HelpMessageOpt(\"-?, -help\", \"This help message\");\n+    usage += HelpMessageOpt(\"-ograph=<graph.html>\", \"Generate target vs feerate graph output after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-odat=<fee_estimates.dat>\", \"Save fee estimator state after after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-idat=<fee_estimates.dat>\", \"Load fee estimator state after before replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-dat=<fee_estimates.dat>\", \"Shortcut for -idat=<fee_estimates.dat> -odat=<fee_estimates.dat>\");\n+    usage += HelpMessageOpt(\"-cross\", \"Treat half the transactions from the log as test data and print cross-validation statistics.\");\n+    return usage;\n+}\n+\n+struct Options\n+{\n+    std::string logFileIn;\n+    std::string dataFileIn;\n+    std::string dataFileOut;\n+    std::string graphFileOut;\n+    bool cross = false;\n+    bool help = false;\n+    bool error = false;\n+};\n+\n+Options ParseCommandLine(int argc, char** argv)\n+{\n+    auto match = [&](const char* arg, const char* name, const char** value = nullptr) {\n+        if (arg[0] != '-') return false;\n+        size_t n = strlen(name);\n+        if (strncmp(arg + 1, name, n) != 0) return false;\n+        if (value) return (*value = arg[n + 1] == '=' ? arg + n + 2 : nullptr) != nullptr;\n+        return arg[n + 1] == '\\0';\n+    };\n+\n+    Options options;\n+    for (int i = 1; i < argc; ++i) {\n+        const char* arg = argv[i];\n+        const char* value;\n+        if (match(arg, \"ograph\", &value)) {\n+            options.graphFileOut = value;\n+        } else if (match(arg, \"odat\", &value)) {\n+            options.dataFileOut = value;\n+        } else if (match(arg, \"idat\", &value)) {\n+            options.dataFileIn = value;\n+        } else if (match(arg, \"dat\", &value)) {\n+            options.dataFileIn = options.dataFileOut = value;\n+        } else if (match(arg, \"cross\")) {\n+            options.cross = true;\n+        } else if (match(arg, \"help\") || match(arg, \"h\") || match(arg, \"?\")) {\n+            options.help = true;\n+        } else if (arg[0] != '-' && options.logFileIn.empty()) {\n+            options.logFileIn = arg;\n+        } else {\n+            fprintf(stderr, \"Error: unexpected argument: '%s'\\n\", arg);\n+            options.error = true;\n+        }\n+    }\n+\n+    if (options.logFileIn.empty() && !options.help) {\n+        fprintf(stderr, \"Error: missing required log file argument.\\n\");\n+        options.error = true;\n+    }\n+\n+    return options;\n+}\n+\n+struct TxData\n+{\n+    TxData(CAmount fee, int size, int height) : fee(fee), size(size), height(height) {}\n+    CAmount fee;\n+    int size;\n+    int height;\n+    int expectedBlocks = -1;\n+    int actualBlocks = -1;\n+};\n+\n+using TxMap = std::map<uint256, TxData>;\n+\n+const char* const GRAPH_HTML = R\"(<!DOCTYPE html>\n+<meta charset=\"utf-8\">\n+<title>Fee Graph</title>\n+<script src=\"https://d3js.org/d3.v3.min.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega/3.0.0-beta.30/vega.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-lite/2.0.0-beta.2/vega-lite.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-embed/3.0.0-beta.14/vega-embed.js\"></script>\n+<style media=\"screen\">\n+.vega-actions a {\n+    margin-right: 5px;\n+}\n+</style>\n+<div id=vis></div>\n+<script>\n+var spec = {\n+  \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.json\",\n+  \"width\": 800,\n+  \"height\": 600,\n+  \"layer\": [\n+    {\n+        \"data\": {\n+            \"values\": %s\n+        },\n+        \"mark\": \"tick\",\n+        \"encoding\": {\n+            \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+            \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+            \"color\": {\"field\": \"height\", \"type\": \"quantitative\"}\n+        }\n+    },\n+    {\n+      \"data\": {\n+        \"values\": %s\n+      },\n+      \"encoding\": {\n+        \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+        \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+        \"color\": {\"field\": \"mode\", \"type\": \"nominal\"}\n+      },\n+      \"mark\": \"line\",\n+    }\n+  ]\n+}\n+vega.embed(\"#vis\", spec);\n+</script>\n+)\";\n+\n+// Maximum number of randomly sampled transactions to show on graph.\n+const int SAMPLE_TXS = 50000;\n+\n+// Drop 1/20th of sampled transactions with highest feerates if they are\n+// outliers that would change the scale of the graph.\n+const int DROP_FRAC = 20;\n+\n+void WriteGraph(const std::string& filename,\n+    const TxMap& txMap,\n+    const std::vector<unsigned int>& targets,\n+    CBlockPolicyEstimator& estimator,\n+    CTxMemPool& pool)\n+{\n+    UniValue fees(UniValue::VARR);\n+\n+    int64_t maxFeeRate = 0;\n+    const unsigned int maxTarget = estimator.getMaxTarget();\n+    for (bool conservative : {false, true}) {\n+        for (unsigned int target : targets) {\n+            if (target > maxTarget) continue;\n+            UniValue fee(UniValue::VOBJ);\n+            fee.pushKV(\"mode\", conservative ? \"conservative\" : \"default\");\n+            fee.pushKV(\"blocks\", int(target));\n+            int64_t feeRate = estimator.estimateSmartFee(target, nullptr /* confTarget */, conservative).GetFeePerK();\n+            fee.pushKV(\"feeRate\", feeRate);\n+            fees.push_back(std::move(fee));\n+            maxFeeRate = std::max(maxFeeRate, feeRate);\n+        }\n+    }\n+\n+    std::vector<const TxMap::value_type*> sample;\n+    sample.reserve(SAMPLE_TXS);\n+    int i = 0;\n+    for (const auto& entry : txMap) {\n+        if (entry.second.actualBlocks > int(maxTarget)) {\n+            continue;\n+        } else if (sample.size() < SAMPLE_TXS) {\n+            sample.emplace_back(&entry);\n+        } else {\n+            int j = rand() % i;",
    "path": "src/test/fee_est/fee_est.cpp",
    "position": null,
    "original_position": 177,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Mod by zero here.",
    "created_at": "2018-09-15T07:58:24Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r217878986",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217878986"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r217878986"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217878986/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 181,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219422492",
    "pull_request_review_id": 157594261,
    "id": 219422492,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTQyMjQ5Mg==",
    "diff_hunk": "@@ -190,11 +191,12 @@ class CBlockPolicyEstimator\n     ~CBlockPolicyEstimator();\n \n     /** Process all the transactions that have been included in a block */\n+    struct Block;\n     void processBlock(unsigned int nBlockHeight,\n-                      std::vector<const CTxMemPoolEntry*>& entries);\n+                      const std::function<void(Block&)> process_txs);\n \n     /** Process a transaction accepted to the mempool*/\n-    void processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate);\n+    void processTx(const uint256& hash, unsigned int height, CAmount fee, size_t size, Block* block, bool valid);",
    "path": "src/policy/fees.h",
    "position": null,
    "original_position": 19,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/policy/fees.h:199:10: warning: function 'CBlockPolicyEstimator::processTx' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]\r\n```",
    "created_at": "2018-09-21T08:37:49Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219422492",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219422492"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219422492"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219422492/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 199,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219422569",
    "pull_request_review_id": 157594364,
    "id": 219422569,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTQyMjU2OQ==",
    "diff_hunk": "@@ -9,11 +9,17 @@\n #include <clientversion.h>\n #include <primitives/transaction.h>\n #include <streams.h>\n-#include <txmempool.h>\n #include <util.h>\n \n static constexpr double INF_FEERATE = 1e99;\n \n+struct CBlockPolicyEstimator::Block {\n+    Block(int height) : height(height) {}",
    "path": "src/policy/fees.cpp",
    "position": null,
    "original_position": 10,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/policy/fees.cpp:17:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]\r\n```",
    "created_at": "2018-09-21T08:38:07Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219422569",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219422569"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219422569"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219422569/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 17,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219422843",
    "pull_request_review_id": 157594739,
    "id": 219422843,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTQyMjg0Mw==",
    "diff_hunk": "@@ -0,0 +1,332 @@\n+#include <policy/fees.h>\n+#include <policy/fees_input.h>\n+#include <txmempool.h>\n+#include <util.h>\n+\n+#include <univalue.h>\n+\n+#include <fstream>\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+std::string Usage()\n+{\n+    std::string usage = \"Usage: fee_est [options] <estlog.txt>\\n\";\n+    usage += HelpMessageGroup(\"Options:\");\n+    usage += HelpMessageOpt(\"-?, -help\", \"This help message\");\n+    usage += HelpMessageOpt(\"-ograph=<graph.html>\", \"Generate target vs feerate graph output after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-odat=<fee_estimates.dat>\", \"Save fee estimator state after after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-idat=<fee_estimates.dat>\", \"Load fee estimator state after before replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-dat=<fee_estimates.dat>\", \"Shortcut for -idat=<fee_estimates.dat> -odat=<fee_estimates.dat>\");\n+    usage += HelpMessageOpt(\"-cross\", \"Treat half the transactions from the log as test data and print cross-validation statistics.\");\n+    return usage;\n+}\n+\n+struct Options\n+{\n+    std::string logFileIn;\n+    std::string dataFileIn;\n+    std::string dataFileOut;\n+    std::string graphFileOut;\n+    bool cross = false;\n+    bool help = false;\n+    bool error = false;\n+};\n+\n+Options ParseCommandLine(int argc, char** argv)\n+{\n+    auto match = [&](const char* arg, const char* name, const char** value = nullptr) {\n+        if (arg[0] != '-') return false;\n+        size_t n = strlen(name);\n+        if (strncmp(arg + 1, name, n) != 0) return false;\n+        if (value) return (*value = arg[n + 1] == '=' ? arg + n + 2 : nullptr) != nullptr;\n+        return arg[n + 1] == '\\0';\n+    };\n+\n+    Options options;\n+    for (int i = 1; i < argc; ++i) {\n+        const char* arg = argv[i];\n+        const char* value;\n+        if (match(arg, \"ograph\", &value)) {\n+            options.graphFileOut = value;\n+        } else if (match(arg, \"odat\", &value)) {\n+            options.dataFileOut = value;\n+        } else if (match(arg, \"idat\", &value)) {\n+            options.dataFileIn = value;\n+        } else if (match(arg, \"dat\", &value)) {\n+            options.dataFileIn = options.dataFileOut = value;\n+        } else if (match(arg, \"cross\")) {\n+            options.cross = true;\n+        } else if (match(arg, \"help\") || match(arg, \"h\") || match(arg, \"?\")) {\n+            options.help = true;\n+        } else if (arg[0] != '-' && options.logFileIn.empty()) {\n+            options.logFileIn = arg;\n+        } else {\n+            fprintf(stderr, \"Error: unexpected argument: '%s'\\n\", arg);\n+            options.error = true;\n+        }\n+    }\n+\n+    if (options.logFileIn.empty() && !options.help) {\n+        fprintf(stderr, \"Error: missing required log file argument.\\n\");\n+        options.error = true;\n+    }\n+\n+    return options;\n+}\n+\n+struct TxData\n+{\n+    TxData(CAmount fee, int size, int height) : fee(fee), size(size), height(height) {}\n+    CAmount fee;\n+    int size;\n+    int height;\n+    int expectedBlocks = -1;\n+    int actualBlocks = -1;\n+};\n+\n+using TxMap = std::map<uint256, TxData>;\n+\n+const char* const GRAPH_HTML = R\"(<!DOCTYPE html>\n+<meta charset=\"utf-8\">\n+<title>Fee Graph</title>\n+<script src=\"https://d3js.org/d3.v3.min.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega/3.0.0-beta.30/vega.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-lite/2.0.0-beta.2/vega-lite.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-embed/3.0.0-beta.14/vega-embed.js\"></script>\n+<style media=\"screen\">\n+.vega-actions a {\n+    margin-right: 5px;\n+}\n+</style>\n+<div id=vis></div>\n+<script>\n+var spec = {\n+  \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.json\",\n+  \"width\": 800,\n+  \"height\": 600,\n+  \"layer\": [\n+    {\n+        \"data\": {\n+            \"values\": %s\n+        },\n+        \"mark\": \"tick\",\n+        \"encoding\": {\n+            \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+            \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+            \"color\": {\"field\": \"height\", \"type\": \"quantitative\"}\n+        }\n+    },\n+    {\n+      \"data\": {\n+        \"values\": %s\n+      },\n+      \"encoding\": {\n+        \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+        \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+        \"color\": {\"field\": \"mode\", \"type\": \"nominal\"}\n+      },\n+      \"mark\": \"line\",\n+    }\n+  ]\n+}\n+vega.embed(\"#vis\", spec);\n+</script>\n+)\";\n+\n+// Maximum number of randomly sampled transactions to show on graph.\n+const int SAMPLE_TXS = 50000;\n+\n+// Drop 1/20th of sampled transactions with highest feerates if they are\n+// outliers that would change the scale of the graph.\n+const int DROP_FRAC = 20;\n+\n+void WriteGraph(const std::string& filename,\n+    const TxMap& txMap,\n+    const std::vector<unsigned int>& targets,\n+    CBlockPolicyEstimator& estimator,\n+    CTxMemPool& pool)",
    "path": "src/test/fee_est/fee_est.cpp",
    "position": null,
    "original_position": 149,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/test/fee_est/fee_est.cpp:149:17: warning: parameter 'pool' is unused [misc-unused-parameters]\r\n```",
    "created_at": "2018-09-21T08:39:10Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219422843",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219422843"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219422843"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219422843/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 153,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219422905",
    "pull_request_review_id": 157594814,
    "id": 219422905,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTQyMjkwNQ==",
    "diff_hunk": "@@ -0,0 +1,332 @@\n+#include <policy/fees.h>\n+#include <policy/fees_input.h>\n+#include <txmempool.h>\n+#include <util.h>\n+\n+#include <univalue.h>\n+\n+#include <fstream>\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+std::string Usage()\n+{\n+    std::string usage = \"Usage: fee_est [options] <estlog.txt>\\n\";\n+    usage += HelpMessageGroup(\"Options:\");\n+    usage += HelpMessageOpt(\"-?, -help\", \"This help message\");\n+    usage += HelpMessageOpt(\"-ograph=<graph.html>\", \"Generate target vs feerate graph output after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-odat=<fee_estimates.dat>\", \"Save fee estimator state after after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-idat=<fee_estimates.dat>\", \"Load fee estimator state after before replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-dat=<fee_estimates.dat>\", \"Shortcut for -idat=<fee_estimates.dat> -odat=<fee_estimates.dat>\");\n+    usage += HelpMessageOpt(\"-cross\", \"Treat half the transactions from the log as test data and print cross-validation statistics.\");\n+    return usage;\n+}\n+\n+struct Options\n+{\n+    std::string logFileIn;\n+    std::string dataFileIn;\n+    std::string dataFileOut;\n+    std::string graphFileOut;\n+    bool cross = false;\n+    bool help = false;\n+    bool error = false;\n+};\n+\n+Options ParseCommandLine(int argc, char** argv)\n+{\n+    auto match = [&](const char* arg, const char* name, const char** value = nullptr) {\n+        if (arg[0] != '-') return false;\n+        size_t n = strlen(name);\n+        if (strncmp(arg + 1, name, n) != 0) return false;\n+        if (value) return (*value = arg[n + 1] == '=' ? arg + n + 2 : nullptr) != nullptr;\n+        return arg[n + 1] == '\\0';\n+    };\n+\n+    Options options;\n+    for (int i = 1; i < argc; ++i) {\n+        const char* arg = argv[i];\n+        const char* value;\n+        if (match(arg, \"ograph\", &value)) {\n+            options.graphFileOut = value;\n+        } else if (match(arg, \"odat\", &value)) {\n+            options.dataFileOut = value;\n+        } else if (match(arg, \"idat\", &value)) {\n+            options.dataFileIn = value;\n+        } else if (match(arg, \"dat\", &value)) {\n+            options.dataFileIn = options.dataFileOut = value;\n+        } else if (match(arg, \"cross\")) {\n+            options.cross = true;\n+        } else if (match(arg, \"help\") || match(arg, \"h\") || match(arg, \"?\")) {\n+            options.help = true;\n+        } else if (arg[0] != '-' && options.logFileIn.empty()) {\n+            options.logFileIn = arg;\n+        } else {\n+            fprintf(stderr, \"Error: unexpected argument: '%s'\\n\", arg);\n+            options.error = true;\n+        }\n+    }\n+\n+    if (options.logFileIn.empty() && !options.help) {\n+        fprintf(stderr, \"Error: missing required log file argument.\\n\");\n+        options.error = true;\n+    }\n+\n+    return options;\n+}\n+\n+struct TxData\n+{\n+    TxData(CAmount fee, int size, int height) : fee(fee), size(size), height(height) {}\n+    CAmount fee;\n+    int size;\n+    int height;\n+    int expectedBlocks = -1;\n+    int actualBlocks = -1;\n+};\n+\n+using TxMap = std::map<uint256, TxData>;\n+\n+const char* const GRAPH_HTML = R\"(<!DOCTYPE html>\n+<meta charset=\"utf-8\">\n+<title>Fee Graph</title>\n+<script src=\"https://d3js.org/d3.v3.min.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega/3.0.0-beta.30/vega.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-lite/2.0.0-beta.2/vega-lite.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-embed/3.0.0-beta.14/vega-embed.js\"></script>\n+<style media=\"screen\">\n+.vega-actions a {\n+    margin-right: 5px;\n+}\n+</style>\n+<div id=vis></div>\n+<script>\n+var spec = {\n+  \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.json\",\n+  \"width\": 800,\n+  \"height\": 600,\n+  \"layer\": [\n+    {\n+        \"data\": {\n+            \"values\": %s\n+        },\n+        \"mark\": \"tick\",\n+        \"encoding\": {\n+            \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+            \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+            \"color\": {\"field\": \"height\", \"type\": \"quantitative\"}\n+        }\n+    },\n+    {\n+      \"data\": {\n+        \"values\": %s\n+      },\n+      \"encoding\": {\n+        \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+        \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+        \"color\": {\"field\": \"mode\", \"type\": \"nominal\"}\n+      },\n+      \"mark\": \"line\",\n+    }\n+  ]\n+}\n+vega.embed(\"#vis\", spec);\n+</script>\n+)\";\n+\n+// Maximum number of randomly sampled transactions to show on graph.\n+const int SAMPLE_TXS = 50000;\n+\n+// Drop 1/20th of sampled transactions with highest feerates if they are\n+// outliers that would change the scale of the graph.\n+const int DROP_FRAC = 20;\n+\n+void WriteGraph(const std::string& filename,\n+    const TxMap& txMap,\n+    const std::vector<unsigned int>& targets,\n+    CBlockPolicyEstimator& estimator,\n+    CTxMemPool& pool)\n+{\n+    UniValue fees(UniValue::VARR);\n+\n+    int64_t maxFeeRate = 0;\n+    const unsigned int maxTarget = estimator.getMaxTarget();\n+    for (bool conservative : {false, true}) {\n+        for (unsigned int target : targets) {\n+            if (target > maxTarget) continue;\n+            UniValue fee(UniValue::VOBJ);\n+            fee.pushKV(\"mode\", conservative ? \"conservative\" : \"default\");\n+            fee.pushKV(\"blocks\", int(target));\n+            int64_t feeRate = estimator.estimateSmartFee(target, nullptr /* confTarget */, conservative).GetFeePerK();\n+            fee.pushKV(\"feeRate\", feeRate);\n+            fees.push_back(std::move(fee));",
    "path": "src/test/fee_est/fee_est.cpp",
    "position": null,
    "original_position": 163,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/test/fee_est/fee_est.cpp:163:28: warning: passing result of std::move() as a const reference argument; no move will actually happen [hicpp-move-const-arg]\r\n```",
    "created_at": "2018-09-21T08:39:24Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219422905",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219422905"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219422905"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219422905/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 167,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423092",
    "pull_request_review_id": 157595078,
    "id": 219423092,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTQyMzA5Mg==",
    "diff_hunk": "@@ -0,0 +1,332 @@\n+#include <policy/fees.h>\n+#include <policy/fees_input.h>\n+#include <txmempool.h>\n+#include <util.h>\n+\n+#include <univalue.h>\n+\n+#include <fstream>\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+std::string Usage()\n+{\n+    std::string usage = \"Usage: fee_est [options] <estlog.txt>\\n\";\n+    usage += HelpMessageGroup(\"Options:\");\n+    usage += HelpMessageOpt(\"-?, -help\", \"This help message\");\n+    usage += HelpMessageOpt(\"-ograph=<graph.html>\", \"Generate target vs feerate graph output after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-odat=<fee_estimates.dat>\", \"Save fee estimator state after after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-idat=<fee_estimates.dat>\", \"Load fee estimator state after before replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-dat=<fee_estimates.dat>\", \"Shortcut for -idat=<fee_estimates.dat> -odat=<fee_estimates.dat>\");\n+    usage += HelpMessageOpt(\"-cross\", \"Treat half the transactions from the log as test data and print cross-validation statistics.\");\n+    return usage;\n+}\n+\n+struct Options\n+{\n+    std::string logFileIn;\n+    std::string dataFileIn;\n+    std::string dataFileOut;\n+    std::string graphFileOut;\n+    bool cross = false;\n+    bool help = false;\n+    bool error = false;\n+};\n+\n+Options ParseCommandLine(int argc, char** argv)\n+{\n+    auto match = [&](const char* arg, const char* name, const char** value = nullptr) {\n+        if (arg[0] != '-') return false;\n+        size_t n = strlen(name);\n+        if (strncmp(arg + 1, name, n) != 0) return false;\n+        if (value) return (*value = arg[n + 1] == '=' ? arg + n + 2 : nullptr) != nullptr;\n+        return arg[n + 1] == '\\0';\n+    };\n+\n+    Options options;\n+    for (int i = 1; i < argc; ++i) {\n+        const char* arg = argv[i];\n+        const char* value;\n+        if (match(arg, \"ograph\", &value)) {\n+            options.graphFileOut = value;\n+        } else if (match(arg, \"odat\", &value)) {\n+            options.dataFileOut = value;\n+        } else if (match(arg, \"idat\", &value)) {\n+            options.dataFileIn = value;\n+        } else if (match(arg, \"dat\", &value)) {\n+            options.dataFileIn = options.dataFileOut = value;\n+        } else if (match(arg, \"cross\")) {\n+            options.cross = true;\n+        } else if (match(arg, \"help\") || match(arg, \"h\") || match(arg, \"?\")) {\n+            options.help = true;\n+        } else if (arg[0] != '-' && options.logFileIn.empty()) {\n+            options.logFileIn = arg;\n+        } else {\n+            fprintf(stderr, \"Error: unexpected argument: '%s'\\n\", arg);\n+            options.error = true;\n+        }\n+    }\n+\n+    if (options.logFileIn.empty() && !options.help) {\n+        fprintf(stderr, \"Error: missing required log file argument.\\n\");\n+        options.error = true;\n+    }\n+\n+    return options;\n+}\n+\n+struct TxData\n+{\n+    TxData(CAmount fee, int size, int height) : fee(fee), size(size), height(height) {}\n+    CAmount fee;\n+    int size;\n+    int height;\n+    int expectedBlocks = -1;\n+    int actualBlocks = -1;\n+};\n+\n+using TxMap = std::map<uint256, TxData>;\n+\n+const char* const GRAPH_HTML = R\"(<!DOCTYPE html>\n+<meta charset=\"utf-8\">\n+<title>Fee Graph</title>\n+<script src=\"https://d3js.org/d3.v3.min.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega/3.0.0-beta.30/vega.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-lite/2.0.0-beta.2/vega-lite.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-embed/3.0.0-beta.14/vega-embed.js\"></script>\n+<style media=\"screen\">\n+.vega-actions a {\n+    margin-right: 5px;\n+}\n+</style>\n+<div id=vis></div>\n+<script>\n+var spec = {\n+  \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.json\",\n+  \"width\": 800,\n+  \"height\": 600,\n+  \"layer\": [\n+    {\n+        \"data\": {\n+            \"values\": %s\n+        },\n+        \"mark\": \"tick\",\n+        \"encoding\": {\n+            \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+            \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+            \"color\": {\"field\": \"height\", \"type\": \"quantitative\"}\n+        }\n+    },\n+    {\n+      \"data\": {\n+        \"values\": %s\n+      },\n+      \"encoding\": {\n+        \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+        \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+        \"color\": {\"field\": \"mode\", \"type\": \"nominal\"}\n+      },\n+      \"mark\": \"line\",\n+    }\n+  ]\n+}\n+vega.embed(\"#vis\", spec);\n+</script>\n+)\";\n+\n+// Maximum number of randomly sampled transactions to show on graph.\n+const int SAMPLE_TXS = 50000;\n+\n+// Drop 1/20th of sampled transactions with highest feerates if they are\n+// outliers that would change the scale of the graph.\n+const int DROP_FRAC = 20;\n+\n+void WriteGraph(const std::string& filename,\n+    const TxMap& txMap,\n+    const std::vector<unsigned int>& targets,\n+    CBlockPolicyEstimator& estimator,\n+    CTxMemPool& pool)\n+{\n+    UniValue fees(UniValue::VARR);\n+\n+    int64_t maxFeeRate = 0;\n+    const unsigned int maxTarget = estimator.getMaxTarget();\n+    for (bool conservative : {false, true}) {\n+        for (unsigned int target : targets) {\n+            if (target > maxTarget) continue;\n+            UniValue fee(UniValue::VOBJ);\n+            fee.pushKV(\"mode\", conservative ? \"conservative\" : \"default\");\n+            fee.pushKV(\"blocks\", int(target));\n+            int64_t feeRate = estimator.estimateSmartFee(target, nullptr /* confTarget */, conservative).GetFeePerK();\n+            fee.pushKV(\"feeRate\", feeRate);\n+            fees.push_back(std::move(fee));\n+            maxFeeRate = std::max(maxFeeRate, feeRate);\n+        }\n+    }\n+\n+    std::vector<const TxMap::value_type*> sample;\n+    sample.reserve(SAMPLE_TXS);\n+    int i = 0;\n+    for (const auto& entry : txMap) {\n+        if (entry.second.actualBlocks > int(maxTarget)) {\n+            continue;\n+        } else if (sample.size() < SAMPLE_TXS) {\n+            sample.emplace_back(&entry);\n+        } else {\n+            int j = rand() % i;",
    "path": "src/test/fee_est/fee_est.cpp",
    "position": null,
    "original_position": 177,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/test/fee_est/fee_est.cpp:177:21: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c]\r\n```",
    "created_at": "2018-09-21T08:40:03Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423092",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423092"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423092"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423092/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 181,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423154",
    "pull_request_review_id": 157595156,
    "id": 219423154,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTQyMzE1NA==",
    "diff_hunk": "@@ -0,0 +1,332 @@\n+#include <policy/fees.h>\n+#include <policy/fees_input.h>\n+#include <txmempool.h>\n+#include <util.h>\n+\n+#include <univalue.h>\n+\n+#include <fstream>\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+std::string Usage()\n+{\n+    std::string usage = \"Usage: fee_est [options] <estlog.txt>\\n\";\n+    usage += HelpMessageGroup(\"Options:\");\n+    usage += HelpMessageOpt(\"-?, -help\", \"This help message\");\n+    usage += HelpMessageOpt(\"-ograph=<graph.html>\", \"Generate target vs feerate graph output after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-odat=<fee_estimates.dat>\", \"Save fee estimator state after after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-idat=<fee_estimates.dat>\", \"Load fee estimator state after before replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-dat=<fee_estimates.dat>\", \"Shortcut for -idat=<fee_estimates.dat> -odat=<fee_estimates.dat>\");\n+    usage += HelpMessageOpt(\"-cross\", \"Treat half the transactions from the log as test data and print cross-validation statistics.\");\n+    return usage;\n+}\n+\n+struct Options\n+{\n+    std::string logFileIn;\n+    std::string dataFileIn;\n+    std::string dataFileOut;\n+    std::string graphFileOut;\n+    bool cross = false;\n+    bool help = false;\n+    bool error = false;\n+};\n+\n+Options ParseCommandLine(int argc, char** argv)\n+{\n+    auto match = [&](const char* arg, const char* name, const char** value = nullptr) {\n+        if (arg[0] != '-') return false;\n+        size_t n = strlen(name);\n+        if (strncmp(arg + 1, name, n) != 0) return false;\n+        if (value) return (*value = arg[n + 1] == '=' ? arg + n + 2 : nullptr) != nullptr;\n+        return arg[n + 1] == '\\0';\n+    };\n+\n+    Options options;\n+    for (int i = 1; i < argc; ++i) {\n+        const char* arg = argv[i];\n+        const char* value;\n+        if (match(arg, \"ograph\", &value)) {\n+            options.graphFileOut = value;\n+        } else if (match(arg, \"odat\", &value)) {\n+            options.dataFileOut = value;\n+        } else if (match(arg, \"idat\", &value)) {\n+            options.dataFileIn = value;\n+        } else if (match(arg, \"dat\", &value)) {\n+            options.dataFileIn = options.dataFileOut = value;\n+        } else if (match(arg, \"cross\")) {\n+            options.cross = true;\n+        } else if (match(arg, \"help\") || match(arg, \"h\") || match(arg, \"?\")) {\n+            options.help = true;\n+        } else if (arg[0] != '-' && options.logFileIn.empty()) {\n+            options.logFileIn = arg;\n+        } else {\n+            fprintf(stderr, \"Error: unexpected argument: '%s'\\n\", arg);\n+            options.error = true;\n+        }\n+    }\n+\n+    if (options.logFileIn.empty() && !options.help) {\n+        fprintf(stderr, \"Error: missing required log file argument.\\n\");\n+        options.error = true;\n+    }\n+\n+    return options;\n+}\n+\n+struct TxData\n+{\n+    TxData(CAmount fee, int size, int height) : fee(fee), size(size), height(height) {}\n+    CAmount fee;\n+    int size;\n+    int height;\n+    int expectedBlocks = -1;\n+    int actualBlocks = -1;\n+};\n+\n+using TxMap = std::map<uint256, TxData>;\n+\n+const char* const GRAPH_HTML = R\"(<!DOCTYPE html>\n+<meta charset=\"utf-8\">\n+<title>Fee Graph</title>\n+<script src=\"https://d3js.org/d3.v3.min.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega/3.0.0-beta.30/vega.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-lite/2.0.0-beta.2/vega-lite.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-embed/3.0.0-beta.14/vega-embed.js\"></script>\n+<style media=\"screen\">\n+.vega-actions a {\n+    margin-right: 5px;\n+}\n+</style>\n+<div id=vis></div>\n+<script>\n+var spec = {\n+  \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.json\",\n+  \"width\": 800,\n+  \"height\": 600,\n+  \"layer\": [\n+    {\n+        \"data\": {\n+            \"values\": %s\n+        },\n+        \"mark\": \"tick\",\n+        \"encoding\": {\n+            \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+            \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+            \"color\": {\"field\": \"height\", \"type\": \"quantitative\"}\n+        }\n+    },\n+    {\n+      \"data\": {\n+        \"values\": %s\n+      },\n+      \"encoding\": {\n+        \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+        \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+        \"color\": {\"field\": \"mode\", \"type\": \"nominal\"}\n+      },\n+      \"mark\": \"line\",\n+    }\n+  ]\n+}\n+vega.embed(\"#vis\", spec);\n+</script>\n+)\";\n+\n+// Maximum number of randomly sampled transactions to show on graph.\n+const int SAMPLE_TXS = 50000;\n+\n+// Drop 1/20th of sampled transactions with highest feerates if they are\n+// outliers that would change the scale of the graph.\n+const int DROP_FRAC = 20;\n+\n+void WriteGraph(const std::string& filename,\n+    const TxMap& txMap,\n+    const std::vector<unsigned int>& targets,\n+    CBlockPolicyEstimator& estimator,\n+    CTxMemPool& pool)\n+{\n+    UniValue fees(UniValue::VARR);\n+\n+    int64_t maxFeeRate = 0;\n+    const unsigned int maxTarget = estimator.getMaxTarget();\n+    for (bool conservative : {false, true}) {\n+        for (unsigned int target : targets) {\n+            if (target > maxTarget) continue;\n+            UniValue fee(UniValue::VOBJ);\n+            fee.pushKV(\"mode\", conservative ? \"conservative\" : \"default\");\n+            fee.pushKV(\"blocks\", int(target));\n+            int64_t feeRate = estimator.estimateSmartFee(target, nullptr /* confTarget */, conservative).GetFeePerK();\n+            fee.pushKV(\"feeRate\", feeRate);\n+            fees.push_back(std::move(fee));\n+            maxFeeRate = std::max(maxFeeRate, feeRate);\n+        }\n+    }\n+\n+    std::vector<const TxMap::value_type*> sample;\n+    sample.reserve(SAMPLE_TXS);\n+    int i = 0;\n+    for (const auto& entry : txMap) {\n+        if (entry.second.actualBlocks > int(maxTarget)) {\n+            continue;\n+        } else if (sample.size() < SAMPLE_TXS) {\n+            sample.emplace_back(&entry);\n+        } else {\n+            int j = rand() % i;\n+            if (j < SAMPLE_TXS) {\n+                sample[j] = &entry;\n+            }\n+        }\n+        ++i;\n+    }\n+\n+    if (sample.size() > 0) {",
    "path": "src/test/fee_est/fee_est.cpp",
    "position": null,
    "original_position": 185,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/test/fee_est/fee_est.cpp:185:9: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\r\n```",
    "created_at": "2018-09-21T08:40:17Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423154",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423154"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423154"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423154/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 189,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423229",
    "pull_request_review_id": 157595259,
    "id": 219423229,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTQyMzIyOQ==",
    "diff_hunk": "@@ -0,0 +1,332 @@\n+#include <policy/fees.h>\n+#include <policy/fees_input.h>\n+#include <txmempool.h>\n+#include <util.h>\n+\n+#include <univalue.h>\n+\n+#include <fstream>\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+std::string Usage()\n+{\n+    std::string usage = \"Usage: fee_est [options] <estlog.txt>\\n\";\n+    usage += HelpMessageGroup(\"Options:\");\n+    usage += HelpMessageOpt(\"-?, -help\", \"This help message\");\n+    usage += HelpMessageOpt(\"-ograph=<graph.html>\", \"Generate target vs feerate graph output after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-odat=<fee_estimates.dat>\", \"Save fee estimator state after after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-idat=<fee_estimates.dat>\", \"Load fee estimator state after before replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-dat=<fee_estimates.dat>\", \"Shortcut for -idat=<fee_estimates.dat> -odat=<fee_estimates.dat>\");\n+    usage += HelpMessageOpt(\"-cross\", \"Treat half the transactions from the log as test data and print cross-validation statistics.\");\n+    return usage;\n+}\n+\n+struct Options\n+{\n+    std::string logFileIn;\n+    std::string dataFileIn;\n+    std::string dataFileOut;\n+    std::string graphFileOut;\n+    bool cross = false;\n+    bool help = false;\n+    bool error = false;\n+};\n+\n+Options ParseCommandLine(int argc, char** argv)\n+{\n+    auto match = [&](const char* arg, const char* name, const char** value = nullptr) {\n+        if (arg[0] != '-') return false;\n+        size_t n = strlen(name);\n+        if (strncmp(arg + 1, name, n) != 0) return false;\n+        if (value) return (*value = arg[n + 1] == '=' ? arg + n + 2 : nullptr) != nullptr;\n+        return arg[n + 1] == '\\0';\n+    };\n+\n+    Options options;\n+    for (int i = 1; i < argc; ++i) {\n+        const char* arg = argv[i];\n+        const char* value;\n+        if (match(arg, \"ograph\", &value)) {\n+            options.graphFileOut = value;\n+        } else if (match(arg, \"odat\", &value)) {\n+            options.dataFileOut = value;\n+        } else if (match(arg, \"idat\", &value)) {\n+            options.dataFileIn = value;\n+        } else if (match(arg, \"dat\", &value)) {\n+            options.dataFileIn = options.dataFileOut = value;\n+        } else if (match(arg, \"cross\")) {\n+            options.cross = true;\n+        } else if (match(arg, \"help\") || match(arg, \"h\") || match(arg, \"?\")) {\n+            options.help = true;\n+        } else if (arg[0] != '-' && options.logFileIn.empty()) {\n+            options.logFileIn = arg;\n+        } else {\n+            fprintf(stderr, \"Error: unexpected argument: '%s'\\n\", arg);\n+            options.error = true;\n+        }\n+    }\n+\n+    if (options.logFileIn.empty() && !options.help) {\n+        fprintf(stderr, \"Error: missing required log file argument.\\n\");\n+        options.error = true;\n+    }\n+\n+    return options;\n+}\n+\n+struct TxData\n+{\n+    TxData(CAmount fee, int size, int height) : fee(fee), size(size), height(height) {}\n+    CAmount fee;\n+    int size;\n+    int height;\n+    int expectedBlocks = -1;\n+    int actualBlocks = -1;\n+};\n+\n+using TxMap = std::map<uint256, TxData>;\n+\n+const char* const GRAPH_HTML = R\"(<!DOCTYPE html>\n+<meta charset=\"utf-8\">\n+<title>Fee Graph</title>\n+<script src=\"https://d3js.org/d3.v3.min.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega/3.0.0-beta.30/vega.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-lite/2.0.0-beta.2/vega-lite.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-embed/3.0.0-beta.14/vega-embed.js\"></script>\n+<style media=\"screen\">\n+.vega-actions a {\n+    margin-right: 5px;\n+}\n+</style>\n+<div id=vis></div>\n+<script>\n+var spec = {\n+  \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.json\",\n+  \"width\": 800,\n+  \"height\": 600,\n+  \"layer\": [\n+    {\n+        \"data\": {\n+            \"values\": %s\n+        },\n+        \"mark\": \"tick\",\n+        \"encoding\": {\n+            \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+            \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+            \"color\": {\"field\": \"height\", \"type\": \"quantitative\"}\n+        }\n+    },\n+    {\n+      \"data\": {\n+        \"values\": %s\n+      },\n+      \"encoding\": {\n+        \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+        \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+        \"color\": {\"field\": \"mode\", \"type\": \"nominal\"}\n+      },\n+      \"mark\": \"line\",\n+    }\n+  ]\n+}\n+vega.embed(\"#vis\", spec);\n+</script>\n+)\";\n+\n+// Maximum number of randomly sampled transactions to show on graph.\n+const int SAMPLE_TXS = 50000;\n+\n+// Drop 1/20th of sampled transactions with highest feerates if they are\n+// outliers that would change the scale of the graph.\n+const int DROP_FRAC = 20;\n+\n+void WriteGraph(const std::string& filename,\n+    const TxMap& txMap,\n+    const std::vector<unsigned int>& targets,\n+    CBlockPolicyEstimator& estimator,\n+    CTxMemPool& pool)\n+{\n+    UniValue fees(UniValue::VARR);\n+\n+    int64_t maxFeeRate = 0;\n+    const unsigned int maxTarget = estimator.getMaxTarget();\n+    for (bool conservative : {false, true}) {\n+        for (unsigned int target : targets) {\n+            if (target > maxTarget) continue;\n+            UniValue fee(UniValue::VOBJ);\n+            fee.pushKV(\"mode\", conservative ? \"conservative\" : \"default\");\n+            fee.pushKV(\"blocks\", int(target));\n+            int64_t feeRate = estimator.estimateSmartFee(target, nullptr /* confTarget */, conservative).GetFeePerK();\n+            fee.pushKV(\"feeRate\", feeRate);\n+            fees.push_back(std::move(fee));\n+            maxFeeRate = std::max(maxFeeRate, feeRate);\n+        }\n+    }\n+\n+    std::vector<const TxMap::value_type*> sample;\n+    sample.reserve(SAMPLE_TXS);\n+    int i = 0;\n+    for (const auto& entry : txMap) {\n+        if (entry.second.actualBlocks > int(maxTarget)) {\n+            continue;\n+        } else if (sample.size() < SAMPLE_TXS) {\n+            sample.emplace_back(&entry);\n+        } else {\n+            int j = rand() % i;\n+            if (j < SAMPLE_TXS) {\n+                sample[j] = &entry;\n+            }\n+        }\n+        ++i;\n+    }\n+\n+    if (sample.size() > 0) {\n+        std::vector<int64_t> feeRates;\n+        feeRates.reserve(sample.size());\n+        for (const auto& entry : sample) {\n+            feeRates.emplace_back(CFeeRate(entry->second.fee, entry->second.size).GetFeePerK());\n+        }\n+        auto nth = feeRates.begin() + sample.size() / DROP_FRAC;\n+        std::nth_element(feeRates.begin(), nth, feeRates.end(), std::greater<int64_t>());\n+        maxFeeRate = std::max(maxFeeRate, *nth);\n+    }\n+\n+    UniValue txs(UniValue::VARR);\n+    for (const auto& entry : sample) {\n+        if (entry->second.actualBlocks > 0) {\n+            int64_t feeRate = CFeeRate(entry->second.fee, entry->second.size).GetFeePerK();\n+            if (feeRate <= maxFeeRate) {\n+                UniValue tx(UniValue::VOBJ);\n+                tx.pushKV(\"feeRate\", feeRate);\n+                tx.pushKV(\"blocks\", entry->second.actualBlocks);\n+                tx.pushKV(\"height\", entry->second.height);\n+                txs.push_back(std::move(tx));\n+            }\n+        }\n+    }\n+\n+    std::ofstream file(filename);\n+    file << strprintf(GRAPH_HTML, txs.write(), fees.write());\n+}\n+\n+bool UpdateCross(TxMap::value_type& tx, const std::vector<unsigned int>& targets, CBlockPolicyEstimator& estimator)\n+{\n+    if (*tx.first.begin() == 0) {\n+        auto it = std::lower_bound(targets.begin(), targets.end(), nullptr, [&](unsigned int target, std::nullptr_t) {\n+            CAmount estFee = estimator.estimateSmartFee(target, nullptr /* feeCalc */, false /* conservative */)\n+                                 .GetFee(tx.second.size);\n+            return estFee <= 1 || tx.second.fee < estFee;\n+        });\n+        tx.second.expectedBlocks = it == targets.end() ? std::numeric_limits<int>::max() : *it;\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void PrintCross(const TxMap& txMap,\n+    const std::vector<unsigned int>& targets,",
    "path": "src/test/fee_est/fee_est.cpp",
    "position": null,
    "original_position": 229,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/test/fee_est/fee_est.cpp:229:38: warning: parameter 'targets' is unused [misc-unused-parameters]\r\n```",
    "created_at": "2018-09-21T08:40:35Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423229",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423229"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423229"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423229/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 233,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423270",
    "pull_request_review_id": 157595312,
    "id": 219423270,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTQyMzI3MA==",
    "diff_hunk": "@@ -0,0 +1,332 @@\n+#include <policy/fees.h>\n+#include <policy/fees_input.h>\n+#include <txmempool.h>\n+#include <util.h>\n+\n+#include <univalue.h>\n+\n+#include <fstream>\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+std::string Usage()\n+{\n+    std::string usage = \"Usage: fee_est [options] <estlog.txt>\\n\";\n+    usage += HelpMessageGroup(\"Options:\");\n+    usage += HelpMessageOpt(\"-?, -help\", \"This help message\");\n+    usage += HelpMessageOpt(\"-ograph=<graph.html>\", \"Generate target vs feerate graph output after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-odat=<fee_estimates.dat>\", \"Save fee estimator state after after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-idat=<fee_estimates.dat>\", \"Load fee estimator state after before replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-dat=<fee_estimates.dat>\", \"Shortcut for -idat=<fee_estimates.dat> -odat=<fee_estimates.dat>\");\n+    usage += HelpMessageOpt(\"-cross\", \"Treat half the transactions from the log as test data and print cross-validation statistics.\");\n+    return usage;\n+}\n+\n+struct Options\n+{\n+    std::string logFileIn;\n+    std::string dataFileIn;\n+    std::string dataFileOut;\n+    std::string graphFileOut;\n+    bool cross = false;\n+    bool help = false;\n+    bool error = false;\n+};\n+\n+Options ParseCommandLine(int argc, char** argv)\n+{\n+    auto match = [&](const char* arg, const char* name, const char** value = nullptr) {\n+        if (arg[0] != '-') return false;\n+        size_t n = strlen(name);\n+        if (strncmp(arg + 1, name, n) != 0) return false;\n+        if (value) return (*value = arg[n + 1] == '=' ? arg + n + 2 : nullptr) != nullptr;\n+        return arg[n + 1] == '\\0';\n+    };\n+\n+    Options options;\n+    for (int i = 1; i < argc; ++i) {\n+        const char* arg = argv[i];\n+        const char* value;\n+        if (match(arg, \"ograph\", &value)) {\n+            options.graphFileOut = value;\n+        } else if (match(arg, \"odat\", &value)) {\n+            options.dataFileOut = value;\n+        } else if (match(arg, \"idat\", &value)) {\n+            options.dataFileIn = value;\n+        } else if (match(arg, \"dat\", &value)) {\n+            options.dataFileIn = options.dataFileOut = value;\n+        } else if (match(arg, \"cross\")) {\n+            options.cross = true;\n+        } else if (match(arg, \"help\") || match(arg, \"h\") || match(arg, \"?\")) {\n+            options.help = true;\n+        } else if (arg[0] != '-' && options.logFileIn.empty()) {\n+            options.logFileIn = arg;\n+        } else {\n+            fprintf(stderr, \"Error: unexpected argument: '%s'\\n\", arg);\n+            options.error = true;\n+        }\n+    }\n+\n+    if (options.logFileIn.empty() && !options.help) {\n+        fprintf(stderr, \"Error: missing required log file argument.\\n\");\n+        options.error = true;\n+    }\n+\n+    return options;\n+}\n+\n+struct TxData\n+{\n+    TxData(CAmount fee, int size, int height) : fee(fee), size(size), height(height) {}\n+    CAmount fee;\n+    int size;\n+    int height;\n+    int expectedBlocks = -1;\n+    int actualBlocks = -1;\n+};\n+\n+using TxMap = std::map<uint256, TxData>;\n+\n+const char* const GRAPH_HTML = R\"(<!DOCTYPE html>\n+<meta charset=\"utf-8\">\n+<title>Fee Graph</title>\n+<script src=\"https://d3js.org/d3.v3.min.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega/3.0.0-beta.30/vega.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-lite/2.0.0-beta.2/vega-lite.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-embed/3.0.0-beta.14/vega-embed.js\"></script>\n+<style media=\"screen\">\n+.vega-actions a {\n+    margin-right: 5px;\n+}\n+</style>\n+<div id=vis></div>\n+<script>\n+var spec = {\n+  \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.json\",\n+  \"width\": 800,\n+  \"height\": 600,\n+  \"layer\": [\n+    {\n+        \"data\": {\n+            \"values\": %s\n+        },\n+        \"mark\": \"tick\",\n+        \"encoding\": {\n+            \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+            \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+            \"color\": {\"field\": \"height\", \"type\": \"quantitative\"}\n+        }\n+    },\n+    {\n+      \"data\": {\n+        \"values\": %s\n+      },\n+      \"encoding\": {\n+        \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+        \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+        \"color\": {\"field\": \"mode\", \"type\": \"nominal\"}\n+      },\n+      \"mark\": \"line\",\n+    }\n+  ]\n+}\n+vega.embed(\"#vis\", spec);\n+</script>\n+)\";\n+\n+// Maximum number of randomly sampled transactions to show on graph.\n+const int SAMPLE_TXS = 50000;\n+\n+// Drop 1/20th of sampled transactions with highest feerates if they are\n+// outliers that would change the scale of the graph.\n+const int DROP_FRAC = 20;\n+\n+void WriteGraph(const std::string& filename,\n+    const TxMap& txMap,\n+    const std::vector<unsigned int>& targets,\n+    CBlockPolicyEstimator& estimator,\n+    CTxMemPool& pool)\n+{\n+    UniValue fees(UniValue::VARR);\n+\n+    int64_t maxFeeRate = 0;\n+    const unsigned int maxTarget = estimator.getMaxTarget();\n+    for (bool conservative : {false, true}) {\n+        for (unsigned int target : targets) {\n+            if (target > maxTarget) continue;\n+            UniValue fee(UniValue::VOBJ);\n+            fee.pushKV(\"mode\", conservative ? \"conservative\" : \"default\");\n+            fee.pushKV(\"blocks\", int(target));\n+            int64_t feeRate = estimator.estimateSmartFee(target, nullptr /* confTarget */, conservative).GetFeePerK();\n+            fee.pushKV(\"feeRate\", feeRate);\n+            fees.push_back(std::move(fee));\n+            maxFeeRate = std::max(maxFeeRate, feeRate);\n+        }\n+    }\n+\n+    std::vector<const TxMap::value_type*> sample;\n+    sample.reserve(SAMPLE_TXS);\n+    int i = 0;\n+    for (const auto& entry : txMap) {\n+        if (entry.second.actualBlocks > int(maxTarget)) {\n+            continue;\n+        } else if (sample.size() < SAMPLE_TXS) {\n+            sample.emplace_back(&entry);\n+        } else {\n+            int j = rand() % i;\n+            if (j < SAMPLE_TXS) {\n+                sample[j] = &entry;\n+            }\n+        }\n+        ++i;\n+    }\n+\n+    if (sample.size() > 0) {\n+        std::vector<int64_t> feeRates;\n+        feeRates.reserve(sample.size());\n+        for (const auto& entry : sample) {\n+            feeRates.emplace_back(CFeeRate(entry->second.fee, entry->second.size).GetFeePerK());\n+        }\n+        auto nth = feeRates.begin() + sample.size() / DROP_FRAC;\n+        std::nth_element(feeRates.begin(), nth, feeRates.end(), std::greater<int64_t>());\n+        maxFeeRate = std::max(maxFeeRate, *nth);\n+    }\n+\n+    UniValue txs(UniValue::VARR);\n+    for (const auto& entry : sample) {\n+        if (entry->second.actualBlocks > 0) {\n+            int64_t feeRate = CFeeRate(entry->second.fee, entry->second.size).GetFeePerK();\n+            if (feeRate <= maxFeeRate) {\n+                UniValue tx(UniValue::VOBJ);\n+                tx.pushKV(\"feeRate\", feeRate);\n+                tx.pushKV(\"blocks\", entry->second.actualBlocks);\n+                tx.pushKV(\"height\", entry->second.height);\n+                txs.push_back(std::move(tx));\n+            }\n+        }\n+    }\n+\n+    std::ofstream file(filename);\n+    file << strprintf(GRAPH_HTML, txs.write(), fees.write());\n+}\n+\n+bool UpdateCross(TxMap::value_type& tx, const std::vector<unsigned int>& targets, CBlockPolicyEstimator& estimator)\n+{\n+    if (*tx.first.begin() == 0) {\n+        auto it = std::lower_bound(targets.begin(), targets.end(), nullptr, [&](unsigned int target, std::nullptr_t) {\n+            CAmount estFee = estimator.estimateSmartFee(target, nullptr /* feeCalc */, false /* conservative */)\n+                                 .GetFee(tx.second.size);\n+            return estFee <= 1 || tx.second.fee < estFee;\n+        });\n+        tx.second.expectedBlocks = it == targets.end() ? std::numeric_limits<int>::max() : *it;\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void PrintCross(const TxMap& txMap,\n+    const std::vector<unsigned int>& targets,\n+    CBlockPolicyEstimator& estimator,",
    "path": "src/test/fee_est/fee_est.cpp",
    "position": null,
    "original_position": 230,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/test/fee_est/fee_est.cpp:230:28: warning: parameter 'estimator' is unused [misc-unused-parameters]\r\n```",
    "created_at": "2018-09-21T08:40:44Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423270",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423270"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423270"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423270/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 234,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423297",
    "pull_request_review_id": 157595362,
    "id": 219423297,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTQyMzI5Nw==",
    "diff_hunk": "@@ -0,0 +1,332 @@\n+#include <policy/fees.h>\n+#include <policy/fees_input.h>\n+#include <txmempool.h>\n+#include <util.h>\n+\n+#include <univalue.h>\n+\n+#include <fstream>\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+std::string Usage()\n+{\n+    std::string usage = \"Usage: fee_est [options] <estlog.txt>\\n\";\n+    usage += HelpMessageGroup(\"Options:\");\n+    usage += HelpMessageOpt(\"-?, -help\", \"This help message\");\n+    usage += HelpMessageOpt(\"-ograph=<graph.html>\", \"Generate target vs feerate graph output after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-odat=<fee_estimates.dat>\", \"Save fee estimator state after after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-idat=<fee_estimates.dat>\", \"Load fee estimator state after before replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-dat=<fee_estimates.dat>\", \"Shortcut for -idat=<fee_estimates.dat> -odat=<fee_estimates.dat>\");\n+    usage += HelpMessageOpt(\"-cross\", \"Treat half the transactions from the log as test data and print cross-validation statistics.\");\n+    return usage;\n+}\n+\n+struct Options\n+{\n+    std::string logFileIn;\n+    std::string dataFileIn;\n+    std::string dataFileOut;\n+    std::string graphFileOut;\n+    bool cross = false;\n+    bool help = false;\n+    bool error = false;\n+};\n+\n+Options ParseCommandLine(int argc, char** argv)\n+{\n+    auto match = [&](const char* arg, const char* name, const char** value = nullptr) {\n+        if (arg[0] != '-') return false;\n+        size_t n = strlen(name);\n+        if (strncmp(arg + 1, name, n) != 0) return false;\n+        if (value) return (*value = arg[n + 1] == '=' ? arg + n + 2 : nullptr) != nullptr;\n+        return arg[n + 1] == '\\0';\n+    };\n+\n+    Options options;\n+    for (int i = 1; i < argc; ++i) {\n+        const char* arg = argv[i];\n+        const char* value;\n+        if (match(arg, \"ograph\", &value)) {\n+            options.graphFileOut = value;\n+        } else if (match(arg, \"odat\", &value)) {\n+            options.dataFileOut = value;\n+        } else if (match(arg, \"idat\", &value)) {\n+            options.dataFileIn = value;\n+        } else if (match(arg, \"dat\", &value)) {\n+            options.dataFileIn = options.dataFileOut = value;\n+        } else if (match(arg, \"cross\")) {\n+            options.cross = true;\n+        } else if (match(arg, \"help\") || match(arg, \"h\") || match(arg, \"?\")) {\n+            options.help = true;\n+        } else if (arg[0] != '-' && options.logFileIn.empty()) {\n+            options.logFileIn = arg;\n+        } else {\n+            fprintf(stderr, \"Error: unexpected argument: '%s'\\n\", arg);\n+            options.error = true;\n+        }\n+    }\n+\n+    if (options.logFileIn.empty() && !options.help) {\n+        fprintf(stderr, \"Error: missing required log file argument.\\n\");\n+        options.error = true;\n+    }\n+\n+    return options;\n+}\n+\n+struct TxData\n+{\n+    TxData(CAmount fee, int size, int height) : fee(fee), size(size), height(height) {}\n+    CAmount fee;\n+    int size;\n+    int height;\n+    int expectedBlocks = -1;\n+    int actualBlocks = -1;\n+};\n+\n+using TxMap = std::map<uint256, TxData>;\n+\n+const char* const GRAPH_HTML = R\"(<!DOCTYPE html>\n+<meta charset=\"utf-8\">\n+<title>Fee Graph</title>\n+<script src=\"https://d3js.org/d3.v3.min.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega/3.0.0-beta.30/vega.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-lite/2.0.0-beta.2/vega-lite.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-embed/3.0.0-beta.14/vega-embed.js\"></script>\n+<style media=\"screen\">\n+.vega-actions a {\n+    margin-right: 5px;\n+}\n+</style>\n+<div id=vis></div>\n+<script>\n+var spec = {\n+  \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.json\",\n+  \"width\": 800,\n+  \"height\": 600,\n+  \"layer\": [\n+    {\n+        \"data\": {\n+            \"values\": %s\n+        },\n+        \"mark\": \"tick\",\n+        \"encoding\": {\n+            \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+            \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+            \"color\": {\"field\": \"height\", \"type\": \"quantitative\"}\n+        }\n+    },\n+    {\n+      \"data\": {\n+        \"values\": %s\n+      },\n+      \"encoding\": {\n+        \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+        \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+        \"color\": {\"field\": \"mode\", \"type\": \"nominal\"}\n+      },\n+      \"mark\": \"line\",\n+    }\n+  ]\n+}\n+vega.embed(\"#vis\", spec);\n+</script>\n+)\";\n+\n+// Maximum number of randomly sampled transactions to show on graph.\n+const int SAMPLE_TXS = 50000;\n+\n+// Drop 1/20th of sampled transactions with highest feerates if they are\n+// outliers that would change the scale of the graph.\n+const int DROP_FRAC = 20;\n+\n+void WriteGraph(const std::string& filename,\n+    const TxMap& txMap,\n+    const std::vector<unsigned int>& targets,\n+    CBlockPolicyEstimator& estimator,\n+    CTxMemPool& pool)\n+{\n+    UniValue fees(UniValue::VARR);\n+\n+    int64_t maxFeeRate = 0;\n+    const unsigned int maxTarget = estimator.getMaxTarget();\n+    for (bool conservative : {false, true}) {\n+        for (unsigned int target : targets) {\n+            if (target > maxTarget) continue;\n+            UniValue fee(UniValue::VOBJ);\n+            fee.pushKV(\"mode\", conservative ? \"conservative\" : \"default\");\n+            fee.pushKV(\"blocks\", int(target));\n+            int64_t feeRate = estimator.estimateSmartFee(target, nullptr /* confTarget */, conservative).GetFeePerK();\n+            fee.pushKV(\"feeRate\", feeRate);\n+            fees.push_back(std::move(fee));\n+            maxFeeRate = std::max(maxFeeRate, feeRate);\n+        }\n+    }\n+\n+    std::vector<const TxMap::value_type*> sample;\n+    sample.reserve(SAMPLE_TXS);\n+    int i = 0;\n+    for (const auto& entry : txMap) {\n+        if (entry.second.actualBlocks > int(maxTarget)) {\n+            continue;\n+        } else if (sample.size() < SAMPLE_TXS) {\n+            sample.emplace_back(&entry);\n+        } else {\n+            int j = rand() % i;\n+            if (j < SAMPLE_TXS) {\n+                sample[j] = &entry;\n+            }\n+        }\n+        ++i;\n+    }\n+\n+    if (sample.size() > 0) {\n+        std::vector<int64_t> feeRates;\n+        feeRates.reserve(sample.size());\n+        for (const auto& entry : sample) {\n+            feeRates.emplace_back(CFeeRate(entry->second.fee, entry->second.size).GetFeePerK());\n+        }\n+        auto nth = feeRates.begin() + sample.size() / DROP_FRAC;\n+        std::nth_element(feeRates.begin(), nth, feeRates.end(), std::greater<int64_t>());\n+        maxFeeRate = std::max(maxFeeRate, *nth);\n+    }\n+\n+    UniValue txs(UniValue::VARR);\n+    for (const auto& entry : sample) {\n+        if (entry->second.actualBlocks > 0) {\n+            int64_t feeRate = CFeeRate(entry->second.fee, entry->second.size).GetFeePerK();\n+            if (feeRate <= maxFeeRate) {\n+                UniValue tx(UniValue::VOBJ);\n+                tx.pushKV(\"feeRate\", feeRate);\n+                tx.pushKV(\"blocks\", entry->second.actualBlocks);\n+                tx.pushKV(\"height\", entry->second.height);\n+                txs.push_back(std::move(tx));\n+            }\n+        }\n+    }\n+\n+    std::ofstream file(filename);\n+    file << strprintf(GRAPH_HTML, txs.write(), fees.write());\n+}\n+\n+bool UpdateCross(TxMap::value_type& tx, const std::vector<unsigned int>& targets, CBlockPolicyEstimator& estimator)\n+{\n+    if (*tx.first.begin() == 0) {\n+        auto it = std::lower_bound(targets.begin(), targets.end(), nullptr, [&](unsigned int target, std::nullptr_t) {\n+            CAmount estFee = estimator.estimateSmartFee(target, nullptr /* feeCalc */, false /* conservative */)\n+                                 .GetFee(tx.second.size);\n+            return estFee <= 1 || tx.second.fee < estFee;\n+        });\n+        tx.second.expectedBlocks = it == targets.end() ? std::numeric_limits<int>::max() : *it;\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void PrintCross(const TxMap& txMap,\n+    const std::vector<unsigned int>& targets,\n+    CBlockPolicyEstimator& estimator,\n+    CTxMemPool& pool)",
    "path": "src/test/fee_est/fee_est.cpp",
    "position": null,
    "original_position": 231,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/test/fee_est/fee_est.cpp:231:17: warning: parameter 'pool' is unused [misc-unused-parameters]\r\n```",
    "created_at": "2018-09-21T08:40:52Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423297",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423297"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423297"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423297/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 235,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423710",
    "pull_request_review_id": 157595866,
    "id": 219423710,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTQyMzcxMA==",
    "diff_hunk": "@@ -0,0 +1,218 @@\n+#include <policy/fees_input.h>\n+\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <policy/fees.h>\n+#include <streams.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <utiltime.h>\n+\n+#include <univalue.h>\n+\n+struct FeeEstInput::Block {\n+    UniValue json_txs{UniValue::VARR};\n+    CBlockPolicyEstimator::Block* est_block = nullptr;\n+};\n+\n+FeeEstInput::FeeEstInput(CBlockPolicyEstimator& estimator) : estimator(estimator) {}\n+\n+void FeeEstInput::processTx(const uint256& hash, unsigned int height, CAmount fee, size_t size, Block* block, bool valid)\n+{\n+    estimator.processTx(hash, height, fee, size, block ? block->est_block : nullptr, valid);\n+    if (log) {\n+        UniValue tx(UniValue::VOBJ);\n+        tx.pushKV(\"hash\", hash.ToString());\n+        tx.pushKV(\"height\", int(height));\n+        tx.pushKV(\"fee\", fee);\n+        tx.pushKV(\"size\", uint64_t(size));\n+        if (block) {\n+            block->json_txs.push_back(std::move(tx));\n+        } else {\n+            UniValue value(UniValue::VOBJ);\n+            value.pushKV(\"tx\", std::move(tx));\n+            value.pushKV(\"valid\", UniValue(valid));\n+            value.pushKV(\"time\", GetTime());\n+            *log << value.write() << std::endl;\n+        }\n+    }\n+}\n+\n+void FeeEstInput::processBlock(int height, const std::function<void(Block&)>& process_txs)\n+{\n+    Block block;\n+    estimator.processBlock(height, [&](CBlockPolicyEstimator::Block& est_block) {\n+        block.est_block = &est_block;\n+        process_txs(block);\n+    });\n+    if (log) {\n+        UniValue json(UniValue::VOBJ);\n+        UniValue json_block(UniValue::VOBJ);\n+        json_block.pushKV(\"height\", height);\n+        json.pushKV(\"block\", json_block);\n+        json.pushKV(\"txs\", block.json_txs);\n+        json.pushKV(\"time\", GetTime());\n+        *log << json.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::removeTx(const uint256& hash, bool inBlock)\n+{\n+    estimator.removeTx(hash, inBlock);\n+\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        UniValue removeTx(UniValue::VOBJ);\n+        removeTx.pushKV(\"hash\", hash.ToString());\n+        removeTx.pushKV(\"inBlock\", UniValue(inBlock));\n+        value.pushKV(\"removeTx\", removeTx);\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::flushUnconfirmed()\n+{\n+    estimator.FlushUnconfirmed();\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        UniValue flush(UniValue::VARR);\n+        value.pushKV(\"flush\", flush);\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+bool FeeEstInput::writeData(const fs::path& filename)\n+{\n+    CAutoFile file(fsbridge::fopen(filename, \"wb\"), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, filename.string());\n+        return false;\n+    }\n+    estimator.Write(file);\n+    return true;\n+}\n+\n+bool FeeEstInput::readData(const fs::path& filename)\n+{\n+    CAutoFile file(fsbridge::fopen(filename, \"rb\"), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull() || !estimator.Read(file)) {\n+        return false;\n+    }\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        std::ifstream file(filename.string(), std::ifstream::binary);\n+        value.pushKV(\n+            \"read\", HexStr(std::string(std::istreambuf_iterator<char>(file), std::istreambuf_iterator<char>())));\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+    return true;\n+}\n+\n+bool FeeEstInput::writeLog(const std::string& filename)\n+{\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        value.pushKV(\"stop\", Params().NetworkIDString());\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+\n+    if (filename.empty()) {\n+        log.reset();\n+    } else {\n+        log.reset(new std::ofstream(filename, std::ofstream::out | std::ofstream::app));",
    "path": "src/policy/fees_input.cpp",
    "position": null,
    "original_position": 126,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/policy/fees_input.cpp:126:13: warning: use std::make_unique instead [modernize-make-unique]\r\n```\r\n\r\n`MakeUnique` in our case :-)",
    "created_at": "2018-09-21T08:42:20Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423710",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423710"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423710"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423710/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 130,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423856",
    "pull_request_review_id": 157596039,
    "id": 219423856,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTQyMzg1Ng==",
    "diff_hunk": "@@ -0,0 +1,218 @@\n+#include <policy/fees_input.h>\n+\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <policy/fees.h>\n+#include <streams.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <utiltime.h>\n+\n+#include <univalue.h>\n+\n+struct FeeEstInput::Block {\n+    UniValue json_txs{UniValue::VARR};\n+    CBlockPolicyEstimator::Block* est_block = nullptr;\n+};\n+\n+FeeEstInput::FeeEstInput(CBlockPolicyEstimator& estimator) : estimator(estimator) {}\n+\n+void FeeEstInput::processTx(const uint256& hash, unsigned int height, CAmount fee, size_t size, Block* block, bool valid)\n+{\n+    estimator.processTx(hash, height, fee, size, block ? block->est_block : nullptr, valid);\n+    if (log) {\n+        UniValue tx(UniValue::VOBJ);\n+        tx.pushKV(\"hash\", hash.ToString());\n+        tx.pushKV(\"height\", int(height));\n+        tx.pushKV(\"fee\", fee);\n+        tx.pushKV(\"size\", uint64_t(size));\n+        if (block) {\n+            block->json_txs.push_back(std::move(tx));\n+        } else {\n+            UniValue value(UniValue::VOBJ);\n+            value.pushKV(\"tx\", std::move(tx));\n+            value.pushKV(\"valid\", UniValue(valid));\n+            value.pushKV(\"time\", GetTime());\n+            *log << value.write() << std::endl;\n+        }\n+    }\n+}\n+\n+void FeeEstInput::processBlock(int height, const std::function<void(Block&)>& process_txs)\n+{\n+    Block block;\n+    estimator.processBlock(height, [&](CBlockPolicyEstimator::Block& est_block) {\n+        block.est_block = &est_block;\n+        process_txs(block);\n+    });\n+    if (log) {\n+        UniValue json(UniValue::VOBJ);\n+        UniValue json_block(UniValue::VOBJ);\n+        json_block.pushKV(\"height\", height);\n+        json.pushKV(\"block\", json_block);\n+        json.pushKV(\"txs\", block.json_txs);\n+        json.pushKV(\"time\", GetTime());\n+        *log << json.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::removeTx(const uint256& hash, bool inBlock)\n+{\n+    estimator.removeTx(hash, inBlock);\n+\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        UniValue removeTx(UniValue::VOBJ);\n+        removeTx.pushKV(\"hash\", hash.ToString());\n+        removeTx.pushKV(\"inBlock\", UniValue(inBlock));\n+        value.pushKV(\"removeTx\", removeTx);\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::flushUnconfirmed()\n+{\n+    estimator.FlushUnconfirmed();\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        UniValue flush(UniValue::VARR);\n+        value.pushKV(\"flush\", flush);\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+bool FeeEstInput::writeData(const fs::path& filename)\n+{\n+    CAutoFile file(fsbridge::fopen(filename, \"wb\"), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, filename.string());\n+        return false;\n+    }\n+    estimator.Write(file);\n+    return true;\n+}\n+\n+bool FeeEstInput::readData(const fs::path& filename)\n+{\n+    CAutoFile file(fsbridge::fopen(filename, \"rb\"), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull() || !estimator.Read(file)) {\n+        return false;\n+    }\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        std::ifstream file(filename.string(), std::ifstream::binary);\n+        value.pushKV(\n+            \"read\", HexStr(std::string(std::istreambuf_iterator<char>(file), std::istreambuf_iterator<char>())));\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+    return true;\n+}\n+\n+bool FeeEstInput::writeLog(const std::string& filename)\n+{\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        value.pushKV(\"stop\", Params().NetworkIDString());\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+\n+    if (filename.empty()) {\n+        log.reset();\n+    } else {\n+        log.reset(new std::ofstream(filename, std::ofstream::out | std::ofstream::app));\n+        if (!*log) {\n+            log.reset();\n+            return false;\n+        }\n+    }\n+\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        value.pushKV(\"start\", Params().NetworkIDString());\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+\n+    return true;\n+}\n+\n+bool FeeEstInput::readLog(const std::string& filename, std::function<bool(UniValue&)> filter)",
    "path": "src/policy/fees_input.cpp",
    "position": null,
    "original_position": 143,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/policy/fees_input.cpp:143:87: warning: the parameter 'filter' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]\r\n```",
    "created_at": "2018-09-21T08:42:53Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423856",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423856"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423856"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423856/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 147,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423905",
    "pull_request_review_id": 157596111,
    "id": 219423905,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTQyMzkwNQ==",
    "diff_hunk": "@@ -0,0 +1,218 @@\n+#include <policy/fees_input.h>\n+\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <policy/fees.h>\n+#include <streams.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <utiltime.h>\n+\n+#include <univalue.h>\n+\n+struct FeeEstInput::Block {\n+    UniValue json_txs{UniValue::VARR};\n+    CBlockPolicyEstimator::Block* est_block = nullptr;\n+};\n+\n+FeeEstInput::FeeEstInput(CBlockPolicyEstimator& estimator) : estimator(estimator) {}\n+\n+void FeeEstInput::processTx(const uint256& hash, unsigned int height, CAmount fee, size_t size, Block* block, bool valid)\n+{\n+    estimator.processTx(hash, height, fee, size, block ? block->est_block : nullptr, valid);\n+    if (log) {\n+        UniValue tx(UniValue::VOBJ);\n+        tx.pushKV(\"hash\", hash.ToString());\n+        tx.pushKV(\"height\", int(height));\n+        tx.pushKV(\"fee\", fee);\n+        tx.pushKV(\"size\", uint64_t(size));\n+        if (block) {\n+            block->json_txs.push_back(std::move(tx));\n+        } else {\n+            UniValue value(UniValue::VOBJ);\n+            value.pushKV(\"tx\", std::move(tx));\n+            value.pushKV(\"valid\", UniValue(valid));\n+            value.pushKV(\"time\", GetTime());\n+            *log << value.write() << std::endl;\n+        }\n+    }\n+}\n+\n+void FeeEstInput::processBlock(int height, const std::function<void(Block&)>& process_txs)\n+{\n+    Block block;\n+    estimator.processBlock(height, [&](CBlockPolicyEstimator::Block& est_block) {\n+        block.est_block = &est_block;\n+        process_txs(block);\n+    });\n+    if (log) {\n+        UniValue json(UniValue::VOBJ);\n+        UniValue json_block(UniValue::VOBJ);\n+        json_block.pushKV(\"height\", height);\n+        json.pushKV(\"block\", json_block);\n+        json.pushKV(\"txs\", block.json_txs);\n+        json.pushKV(\"time\", GetTime());\n+        *log << json.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::removeTx(const uint256& hash, bool inBlock)\n+{\n+    estimator.removeTx(hash, inBlock);\n+\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        UniValue removeTx(UniValue::VOBJ);\n+        removeTx.pushKV(\"hash\", hash.ToString());\n+        removeTx.pushKV(\"inBlock\", UniValue(inBlock));\n+        value.pushKV(\"removeTx\", removeTx);\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::flushUnconfirmed()\n+{\n+    estimator.FlushUnconfirmed();\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        UniValue flush(UniValue::VARR);\n+        value.pushKV(\"flush\", flush);\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+bool FeeEstInput::writeData(const fs::path& filename)\n+{\n+    CAutoFile file(fsbridge::fopen(filename, \"wb\"), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, filename.string());\n+        return false;\n+    }\n+    estimator.Write(file);\n+    return true;\n+}\n+\n+bool FeeEstInput::readData(const fs::path& filename)\n+{\n+    CAutoFile file(fsbridge::fopen(filename, \"rb\"), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull() || !estimator.Read(file)) {\n+        return false;\n+    }\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        std::ifstream file(filename.string(), std::ifstream::binary);\n+        value.pushKV(\n+            \"read\", HexStr(std::string(std::istreambuf_iterator<char>(file), std::istreambuf_iterator<char>())));\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+    return true;\n+}\n+\n+bool FeeEstInput::writeLog(const std::string& filename)\n+{\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        value.pushKV(\"stop\", Params().NetworkIDString());\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+\n+    if (filename.empty()) {\n+        log.reset();\n+    } else {\n+        log.reset(new std::ofstream(filename, std::ofstream::out | std::ofstream::app));\n+        if (!*log) {\n+            log.reset();\n+            return false;\n+        }\n+    }\n+\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        value.pushKV(\"start\", Params().NetworkIDString());\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+\n+    return true;\n+}\n+\n+bool FeeEstInput::readLog(const std::string& filename, std::function<bool(UniValue&)> filter)\n+{\n+    std::ifstream file(filename);\n+    if (!file) {\n+        LogPrintf(\"%s: Failed to open log file %s\\n\", __func__, filename);\n+        return false;\n+    }\n+\n+    std::string line;\n+    while (std::getline(file, line)) {\n+        UniValue value;\n+        if (!value.read(line)) {\n+            throw std::runtime_error(\"Failed to parse fee estimate log line.\");\n+        }\n+\n+        if (filter && !filter(value)) {\n+            continue;\n+        }\n+\n+        const UniValue& tx = value[\"tx\"];\n+        if (tx.isObject()) {\n+            estimator.processTx(uint256S(tx[\"hash\"].get_str()), tx[\"height\"].get_int(), tx[\"fee\"].get_int64(),\n+                tx[\"size\"].get_int(), nullptr /* block */, value[\"valid\"].get_bool());\n+            continue;\n+        }\n+\n+        const UniValue& block = value[\"block\"];\n+        if (block.isObject()) {\n+            int height = block[\"height\"].get_int();\n+            estimator.processBlock(height, [&](CBlockPolicyEstimator::Block& est_block) {\n+                const auto& txs = value[\"txs\"].getValues();\n+                for (const UniValue& tx : txs) {\n+                    estimator.processTx(uint256S(tx[\"hash\"].get_str()), tx[\"height\"].get_int(),\n+                        tx[\"fee\"].get_int64(), tx[\"size\"].get_int(), &est_block, true /* valid */);\n+                }\n+                return txs.size();\n+            });\n+            continue;\n+        }\n+\n+        const UniValue& removeTx = value[\"removeTx\"];\n+        if (removeTx.isObject()) {\n+            estimator.removeTx(uint256S(removeTx[\"hash\"].get_str()), removeTx[\"inBlock\"].get_bool());\n+            continue;\n+        }\n+\n+        const UniValue& flush = value[\"flush\"];\n+        if (flush.isArray()) {\n+            estimator.FlushUnconfirmed();\n+            continue;\n+        }\n+\n+        const UniValue& read = value[\"read\"];\n+        if (read.isStr()) {\n+            std::vector<unsigned char> data = ParseHex(read.get_str());\n+            unsigned short randv = 0;",
    "path": "src/policy/fees_input.cpp",
    "position": null,
    "original_position": 198,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/policy/fees_input.cpp:198:13: warning: consider replacing 'unsigned short' with 'uint16' [google-runtime-int]\r\n```",
    "created_at": "2018-09-21T08:43:06Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423905",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423905"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423905"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219423905/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 198,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219424018",
    "pull_request_review_id": 157596252,
    "id": 219424018,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTQyNDAxOA==",
    "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_POLICY_FEES_INPUT_H\n+#define BITCOIN_POLICY_FEES_INPUT_H\n+\n+#include <amount.h>\n+#include <fs.h>\n+\n+#include <map>\n+#include <memory>\n+#include <vector>\n+\n+class CAutoFile;\n+class CBlockPolicyEstimator;\n+class UniValue;\n+class uint256;\n+\n+class FeeEstInput\n+{\n+public:\n+    FeeEstInput(CBlockPolicyEstimator& estimator);",
    "path": "src/policy/fees_input.h",
    "position": null,
    "original_position": 23,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-20 05:13:44 cppcheck(pr=10443): [src/policy/fees_input.h:23]: (style) Class 'FeeEstInput' has a constructor with 1 argument that is not explicit.\r\n```",
    "created_at": "2018-09-21T08:43:28Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219424018",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219424018"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219424018"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219424018/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 23,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219424086",
    "pull_request_review_id": 157596329,
    "id": 219424086,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTQyNDA4Ng==",
    "diff_hunk": "@@ -9,11 +9,17 @@\n #include <clientversion.h>\n #include <primitives/transaction.h>\n #include <streams.h>\n-#include <txmempool.h>\n #include <util.h>\n \n static constexpr double INF_FEERATE = 1e99;\n \n+struct CBlockPolicyEstimator::Block {\n+    Block(int height) : height(height) {}",
    "path": "src/policy/fees.cpp",
    "position": null,
    "original_position": 10,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-20 05:13:44 cppcheck(pr=10443): [src/policy/fees.cpp:17]: (style) Struct 'Block' has a constructor with 1 argument that is not explicit.\r\n```",
    "created_at": "2018-09-21T08:43:43Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219424086",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219424086"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219424086"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219424086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 17,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691822",
    "pull_request_review_id": 157932420,
    "id": 219691822,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTgyMg==",
    "diff_hunk": "@@ -9,11 +9,17 @@\n #include <clientversion.h>\n #include <primitives/transaction.h>\n #include <streams.h>\n-#include <txmempool.h>\n #include <util.h>\n \n static constexpr double INF_FEERATE = 1e99;\n \n+struct CBlockPolicyEstimator::Block {\n+    Block(int height) : height(height) {}",
    "path": "src/policy/fees.cpp",
    "position": null,
    "original_position": 10,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-22 22:51:38 cpplint(pr=10443): src/policy/fees.cpp:17:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]\r\n```",
    "created_at": "2018-09-23T08:25:35Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219691822",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691822"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219691822"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 17,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691848",
    "pull_request_review_id": 157932444,
    "id": 219691848,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTg0OA==",
    "diff_hunk": "@@ -0,0 +1,218 @@\n+#include <policy/fees_input.h>\n+\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <policy/fees.h>\n+#include <streams.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <utiltime.h>\n+\n+#include <univalue.h>\n+\n+struct FeeEstInput::Block {\n+    UniValue json_txs{UniValue::VARR};\n+    CBlockPolicyEstimator::Block* est_block = nullptr;\n+};\n+\n+FeeEstInput::FeeEstInput(CBlockPolicyEstimator& estimator) : estimator(estimator) {}\n+\n+void FeeEstInput::processTx(const uint256& hash, unsigned int height, CAmount fee, size_t size, Block* block, bool valid)\n+{\n+    estimator.processTx(hash, height, fee, size, block ? block->est_block : nullptr, valid);\n+    if (log) {\n+        UniValue tx(UniValue::VOBJ);\n+        tx.pushKV(\"hash\", hash.ToString());\n+        tx.pushKV(\"height\", int(height));\n+        tx.pushKV(\"fee\", fee);\n+        tx.pushKV(\"size\", uint64_t(size));\n+        if (block) {\n+            block->json_txs.push_back(std::move(tx));\n+        } else {\n+            UniValue value(UniValue::VOBJ);\n+            value.pushKV(\"tx\", std::move(tx));\n+            value.pushKV(\"valid\", UniValue(valid));\n+            value.pushKV(\"time\", GetTime());\n+            *log << value.write() << std::endl;\n+        }\n+    }\n+}\n+\n+void FeeEstInput::processBlock(int height, const std::function<void(Block&)>& process_txs)\n+{\n+    Block block;\n+    estimator.processBlock(height, [&](CBlockPolicyEstimator::Block& est_block) {\n+        block.est_block = &est_block;\n+        process_txs(block);\n+    });\n+    if (log) {\n+        UniValue json(UniValue::VOBJ);\n+        UniValue json_block(UniValue::VOBJ);\n+        json_block.pushKV(\"height\", height);\n+        json.pushKV(\"block\", json_block);\n+        json.pushKV(\"txs\", block.json_txs);\n+        json.pushKV(\"time\", GetTime());\n+        *log << json.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::removeTx(const uint256& hash, bool inBlock)\n+{\n+    estimator.removeTx(hash, inBlock);\n+\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        UniValue removeTx(UniValue::VOBJ);\n+        removeTx.pushKV(\"hash\", hash.ToString());\n+        removeTx.pushKV(\"inBlock\", UniValue(inBlock));\n+        value.pushKV(\"removeTx\", removeTx);\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::flushUnconfirmed()\n+{\n+    estimator.FlushUnconfirmed();\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        UniValue flush(UniValue::VARR);\n+        value.pushKV(\"flush\", flush);\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+bool FeeEstInput::writeData(const fs::path& filename)\n+{\n+    CAutoFile file(fsbridge::fopen(filename, \"wb\"), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, filename.string());\n+        return false;\n+    }\n+    estimator.Write(file);\n+    return true;\n+}\n+\n+bool FeeEstInput::readData(const fs::path& filename)\n+{\n+    CAutoFile file(fsbridge::fopen(filename, \"rb\"), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull() || !estimator.Read(file)) {\n+        return false;\n+    }\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        std::ifstream file(filename.string(), std::ifstream::binary);\n+        value.pushKV(\n+            \"read\", HexStr(std::string(std::istreambuf_iterator<char>(file), std::istreambuf_iterator<char>())));\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+    return true;\n+}\n+\n+bool FeeEstInput::writeLog(const std::string& filename)\n+{\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        value.pushKV(\"stop\", Params().NetworkIDString());\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+\n+    if (filename.empty()) {\n+        log.reset();\n+    } else {\n+        log.reset(new std::ofstream(filename, std::ofstream::out | std::ofstream::app));\n+        if (!*log) {\n+            log.reset();\n+            return false;\n+        }\n+    }\n+\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        value.pushKV(\"start\", Params().NetworkIDString());\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+\n+    return true;\n+}\n+\n+bool FeeEstInput::readLog(const std::string& filename, std::function<bool(UniValue&)> filter)\n+{\n+    std::ifstream file(filename);\n+    if (!file) {\n+        LogPrintf(\"%s: Failed to open log file %s\\n\", __func__, filename);\n+        return false;\n+    }\n+\n+    std::string line;\n+    while (std::getline(file, line)) {\n+        UniValue value;\n+        if (!value.read(line)) {\n+            throw std::runtime_error(\"Failed to parse fee estimate log line.\");\n+        }\n+\n+        if (filter && !filter(value)) {\n+            continue;\n+        }\n+\n+        const UniValue& tx = value[\"tx\"];\n+        if (tx.isObject()) {\n+            estimator.processTx(uint256S(tx[\"hash\"].get_str()), tx[\"height\"].get_int(), tx[\"fee\"].get_int64(),\n+                tx[\"size\"].get_int(), nullptr /* block */, value[\"valid\"].get_bool());\n+            continue;\n+        }\n+\n+        const UniValue& block = value[\"block\"];\n+        if (block.isObject()) {\n+            int height = block[\"height\"].get_int();\n+            estimator.processBlock(height, [&](CBlockPolicyEstimator::Block& est_block) {\n+                const auto& txs = value[\"txs\"].getValues();\n+                for (const UniValue& tx : txs) {\n+                    estimator.processTx(uint256S(tx[\"hash\"].get_str()), tx[\"height\"].get_int(),\n+                        tx[\"fee\"].get_int64(), tx[\"size\"].get_int(), &est_block, true /* valid */);\n+                }\n+                return txs.size();\n+            });\n+            continue;\n+        }\n+\n+        const UniValue& removeTx = value[\"removeTx\"];\n+        if (removeTx.isObject()) {\n+            estimator.removeTx(uint256S(removeTx[\"hash\"].get_str()), removeTx[\"inBlock\"].get_bool());\n+            continue;\n+        }\n+\n+        const UniValue& flush = value[\"flush\"];\n+        if (flush.isArray()) {\n+            estimator.FlushUnconfirmed();\n+            continue;\n+        }\n+\n+        const UniValue& read = value[\"read\"];\n+        if (read.isStr()) {\n+            std::vector<unsigned char> data = ParseHex(read.get_str());\n+            unsigned short randv = 0;",
    "path": "src/policy/fees_input.cpp",
    "position": null,
    "original_position": 198,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-22 22:51:38 cpplint(pr=10443): src/policy/fees_input.cpp:198:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]\r\n```",
    "created_at": "2018-09-23T08:26:48Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219691848",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691848"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219691848"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691848/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 198,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691867",
    "pull_request_review_id": 157932466,
    "id": 219691867,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTg2Nw==",
    "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_POLICY_FEES_INPUT_H\n+#define BITCOIN_POLICY_FEES_INPUT_H\n+\n+#include <amount.h>\n+#include <fs.h>\n+\n+#include <map>\n+#include <memory>\n+#include <vector>\n+\n+class CAutoFile;\n+class CBlockPolicyEstimator;\n+class UniValue;\n+class uint256;\n+\n+class FeeEstInput\n+{\n+public:\n+    FeeEstInput(CBlockPolicyEstimator& estimator);",
    "path": "src/policy/fees_input.h",
    "position": null,
    "original_position": 23,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "8cd1bb684bfec22fc54e091dc96c782a26847393",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-22 22:51:38 cpplint(pr=10443): src/policy/fees_input.h:23:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]\r\n```",
    "created_at": "2018-09-23T08:27:39Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219691867",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691867"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219691867"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691867/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 23,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224318978",
    "pull_request_review_id": 163654386,
    "id": 224318978,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDMxODk3OA==",
    "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_POLICY_FEES_INPUT_H\n+#define BITCOIN_POLICY_FEES_INPUT_H\n+\n+#include <amount.h>\n+#include <fs.h>\n+\n+#include <map>\n+#include <memory>\n+#include <vector>\n+\n+class CAutoFile;\n+class CBlockPolicyEstimator;\n+class UniValue;\n+class uint256;\n+\n+class FeeEstInput\n+{\n+public:\n+    explicit FeeEstInput(CBlockPolicyEstimator& estimator);\n+\n+    /** Process all the transactions that have been included in a block */\n+    struct Block;\n+    void processBlock(int height, const std::function<void(Block&)>& process_txs);",
    "path": "src/policy/fees_input.h",
    "position": null,
    "original_position": 27,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "56446378f5d0c2bdeb7a45fa7382ccd58c9b994c",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Isn't `height` guaranteed to be non-negative? Should be `unsigned int`?",
    "created_at": "2018-10-11T05:32:58Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224318978",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224318978"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224318978"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224318978/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 27,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319126",
    "pull_request_review_id": 163654570,
    "id": 224319126,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDMxOTEyNg==",
    "diff_hunk": "@@ -0,0 +1,222 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees_input.h>\n+\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <policy/fees.h>\n+#include <streams.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <utiltime.h>\n+\n+#include <univalue.h>\n+\n+struct FeeEstInput::Block {\n+    UniValue json_txs{UniValue::VARR};\n+    CBlockPolicyEstimator::Block* est_block = nullptr;\n+};\n+\n+FeeEstInput::FeeEstInput(CBlockPolicyEstimator& estimator) : estimator(estimator) {}\n+\n+void FeeEstInput::processTx(const uint256& hash, unsigned int height, CAmount fee, size_t size, Block* block, bool valid)\n+{\n+    estimator.processTx(hash, height, fee, size, block ? block->est_block : nullptr, valid);\n+    if (log) {\n+        UniValue tx(UniValue::VOBJ);\n+        tx.pushKV(\"hash\", hash.ToString());\n+        tx.pushKV(\"height\", int(height));\n+        tx.pushKV(\"fee\", fee);\n+        tx.pushKV(\"size\", uint64_t(size));\n+        if (block) {\n+            block->json_txs.push_back(std::move(tx));\n+        } else {\n+            UniValue value(UniValue::VOBJ);\n+            value.pushKV(\"tx\", std::move(tx));\n+            value.pushKV(\"valid\", UniValue(valid));\n+            value.pushKV(\"time\", GetTime());\n+            *log << value.write() << std::endl;\n+        }\n+    }\n+}\n+\n+void FeeEstInput::processBlock(int height, const std::function<void(Block&)>& process_txs)\n+{\n+    Block block;\n+    estimator.processBlock(height, [&](CBlockPolicyEstimator::Block& est_block) {\n+        block.est_block = &est_block;\n+        process_txs(block);\n+    });\n+    if (log) {\n+        UniValue json(UniValue::VOBJ);\n+        UniValue json_block(UniValue::VOBJ);\n+        json_block.pushKV(\"height\", height);\n+        json.pushKV(\"block\", json_block);\n+        json.pushKV(\"txs\", block.json_txs);\n+        json.pushKV(\"time\", GetTime());\n+        *log << json.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::removeTx(const uint256& hash, bool in_block)\n+{\n+    estimator.removeTx(hash, in_block);\n+\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        UniValue removeTx(UniValue::VOBJ);\n+        removeTx.pushKV(\"hash\", hash.ToString());\n+        removeTx.pushKV(\"inBlock\", UniValue(in_block));\n+        value.pushKV(\"removeTx\", removeTx);\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::flushUnconfirmed()\n+{\n+    estimator.FlushUnconfirmed();\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        UniValue flush(UniValue::VARR);\n+        value.pushKV(\"flush\", flush);\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+bool FeeEstInput::writeData(const fs::path& filename)\n+{\n+    CAutoFile file(fsbridge::fopen(filename, \"wb\"), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, filename.string());\n+        return false;\n+    }\n+    estimator.Write(file);\n+    return true;\n+}\n+\n+bool FeeEstInput::readData(const fs::path& filename)\n+{\n+    CAutoFile file(fsbridge::fopen(filename, \"rb\"), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull() || !estimator.Read(file)) {\n+        return false;\n+    }\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        std::ifstream file(filename.string(), std::ifstream::binary);",
    "path": "src/policy/fees_input.cpp",
    "position": null,
    "original_position": 109,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "56446378f5d0c2bdeb7a45fa7382ccd58c9b994c",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The variable `file` shadows an already existing local variable. Please choose another name :-)",
    "created_at": "2018-10-11T05:34:13Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319126",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319126"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319126"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319126/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 109,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319364",
    "pull_request_review_id": 163654863,
    "id": 224319364,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDMxOTM2NA==",
    "diff_hunk": "@@ -0,0 +1,222 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees_input.h>\n+\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <policy/fees.h>\n+#include <streams.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <utiltime.h>\n+\n+#include <univalue.h>\n+\n+struct FeeEstInput::Block {\n+    UniValue json_txs{UniValue::VARR};\n+    CBlockPolicyEstimator::Block* est_block = nullptr;\n+};\n+\n+FeeEstInput::FeeEstInput(CBlockPolicyEstimator& estimator) : estimator(estimator) {}\n+\n+void FeeEstInput::processTx(const uint256& hash, unsigned int height, CAmount fee, size_t size, Block* block, bool valid)\n+{\n+    estimator.processTx(hash, height, fee, size, block ? block->est_block : nullptr, valid);\n+    if (log) {\n+        UniValue tx(UniValue::VOBJ);\n+        tx.pushKV(\"hash\", hash.ToString());\n+        tx.pushKV(\"height\", int(height));\n+        tx.pushKV(\"fee\", fee);\n+        tx.pushKV(\"size\", uint64_t(size));\n+        if (block) {\n+            block->json_txs.push_back(std::move(tx));\n+        } else {\n+            UniValue value(UniValue::VOBJ);\n+            value.pushKV(\"tx\", std::move(tx));\n+            value.pushKV(\"valid\", UniValue(valid));\n+            value.pushKV(\"time\", GetTime());\n+            *log << value.write() << std::endl;\n+        }\n+    }\n+}\n+\n+void FeeEstInput::processBlock(int height, const std::function<void(Block&)>& process_txs)\n+{\n+    Block block;\n+    estimator.processBlock(height, [&](CBlockPolicyEstimator::Block& est_block) {\n+        block.est_block = &est_block;\n+        process_txs(block);\n+    });\n+    if (log) {\n+        UniValue json(UniValue::VOBJ);\n+        UniValue json_block(UniValue::VOBJ);\n+        json_block.pushKV(\"height\", height);\n+        json.pushKV(\"block\", json_block);\n+        json.pushKV(\"txs\", block.json_txs);\n+        json.pushKV(\"time\", GetTime());\n+        *log << json.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::removeTx(const uint256& hash, bool in_block)\n+{\n+    estimator.removeTx(hash, in_block);\n+\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        UniValue removeTx(UniValue::VOBJ);\n+        removeTx.pushKV(\"hash\", hash.ToString());\n+        removeTx.pushKV(\"inBlock\", UniValue(in_block));\n+        value.pushKV(\"removeTx\", removeTx);\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::flushUnconfirmed()\n+{\n+    estimator.FlushUnconfirmed();\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        UniValue flush(UniValue::VARR);\n+        value.pushKV(\"flush\", flush);\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+bool FeeEstInput::writeData(const fs::path& filename)\n+{\n+    CAutoFile file(fsbridge::fopen(filename, \"wb\"), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, filename.string());\n+        return false;\n+    }\n+    estimator.Write(file);\n+    return true;\n+}\n+\n+bool FeeEstInput::readData(const fs::path& filename)\n+{\n+    CAutoFile file(fsbridge::fopen(filename, \"rb\"), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull() || !estimator.Read(file)) {\n+        return false;\n+    }\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        std::ifstream file(filename.string(), std::ifstream::binary);\n+        value.pushKV(\n+            \"read\", HexStr(std::string(std::istreambuf_iterator<char>(file), std::istreambuf_iterator<char>())));\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+    return true;\n+}\n+\n+bool FeeEstInput::writeLog(const std::string& filename)\n+{\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        value.pushKV(\"stop\", Params().NetworkIDString());\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+\n+    if (filename.empty()) {\n+        log.reset();\n+    } else {\n+        log = MakeUnique<std::ofstream>(filename, std::ofstream::out | std::ofstream::app);\n+        if (!*log) {\n+            log.reset();\n+            return false;\n+        }\n+    }\n+\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        value.pushKV(\"start\", Params().NetworkIDString());\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+\n+    return true;\n+}\n+\n+bool FeeEstInput::readLog(const std::string& filename, const std::function<bool(UniValue&)>& filter)\n+{\n+    std::ifstream file(filename);\n+    if (!file) {\n+        LogPrintf(\"%s: Failed to open log file %s\\n\", __func__, filename);\n+        return false;\n+    }\n+\n+    std::string line;\n+    while (std::getline(file, line)) {\n+        UniValue value;\n+        if (!value.read(line)) {\n+            throw std::runtime_error(\"Failed to parse fee estimate log line.\");\n+        }\n+\n+        if (filter && !filter(value)) {\n+            continue;\n+        }\n+\n+        const UniValue& tx = value[\"tx\"];\n+        if (tx.isObject()) {\n+            estimator.processTx(uint256S(tx[\"hash\"].get_str()), tx[\"height\"].get_int(), tx[\"fee\"].get_int64(),\n+                tx[\"size\"].get_int(), nullptr /* block */, value[\"valid\"].get_bool());\n+            continue;\n+        }\n+\n+        const UniValue& block = value[\"block\"];\n+        if (block.isObject()) {\n+            int height = block[\"height\"].get_int();\n+            estimator.processBlock(height, [&](CBlockPolicyEstimator::Block& est_block) {\n+                const auto& txs = value[\"txs\"].getValues();\n+                for (const UniValue& tx : txs) {",
    "path": "src/policy/fees_input.cpp",
    "position": null,
    "original_position": 178,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "56446378f5d0c2bdeb7a45fa7382ccd58c9b994c",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`tx` shadows a local variable. Please choose another name :-)",
    "created_at": "2018-10-11T05:35:42Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319364",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319364"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319364"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319364/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 178,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319465",
    "pull_request_review_id": 163654979,
    "id": 224319465,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDMxOTQ2NQ==",
    "diff_hunk": "@@ -0,0 +1,222 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees_input.h>\n+\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <policy/fees.h>\n+#include <streams.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <utiltime.h>\n+\n+#include <univalue.h>\n+\n+struct FeeEstInput::Block {\n+    UniValue json_txs{UniValue::VARR};\n+    CBlockPolicyEstimator::Block* est_block = nullptr;\n+};\n+\n+FeeEstInput::FeeEstInput(CBlockPolicyEstimator& estimator) : estimator(estimator) {}\n+\n+void FeeEstInput::processTx(const uint256& hash, unsigned int height, CAmount fee, size_t size, Block* block, bool valid)\n+{\n+    estimator.processTx(hash, height, fee, size, block ? block->est_block : nullptr, valid);\n+    if (log) {\n+        UniValue tx(UniValue::VOBJ);\n+        tx.pushKV(\"hash\", hash.ToString());\n+        tx.pushKV(\"height\", int(height));\n+        tx.pushKV(\"fee\", fee);\n+        tx.pushKV(\"size\", uint64_t(size));\n+        if (block) {\n+            block->json_txs.push_back(std::move(tx));\n+        } else {\n+            UniValue value(UniValue::VOBJ);\n+            value.pushKV(\"tx\", std::move(tx));\n+            value.pushKV(\"valid\", UniValue(valid));\n+            value.pushKV(\"time\", GetTime());\n+            *log << value.write() << std::endl;\n+        }\n+    }\n+}\n+\n+void FeeEstInput::processBlock(int height, const std::function<void(Block&)>& process_txs)\n+{\n+    Block block;\n+    estimator.processBlock(height, [&](CBlockPolicyEstimator::Block& est_block) {\n+        block.est_block = &est_block;\n+        process_txs(block);\n+    });\n+    if (log) {\n+        UniValue json(UniValue::VOBJ);\n+        UniValue json_block(UniValue::VOBJ);\n+        json_block.pushKV(\"height\", height);\n+        json.pushKV(\"block\", json_block);\n+        json.pushKV(\"txs\", block.json_txs);\n+        json.pushKV(\"time\", GetTime());\n+        *log << json.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::removeTx(const uint256& hash, bool in_block)\n+{\n+    estimator.removeTx(hash, in_block);\n+\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        UniValue removeTx(UniValue::VOBJ);\n+        removeTx.pushKV(\"hash\", hash.ToString());\n+        removeTx.pushKV(\"inBlock\", UniValue(in_block));\n+        value.pushKV(\"removeTx\", removeTx);\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::flushUnconfirmed()\n+{\n+    estimator.FlushUnconfirmed();\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        UniValue flush(UniValue::VARR);\n+        value.pushKV(\"flush\", flush);\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+bool FeeEstInput::writeData(const fs::path& filename)\n+{\n+    CAutoFile file(fsbridge::fopen(filename, \"wb\"), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, filename.string());\n+        return false;\n+    }\n+    estimator.Write(file);\n+    return true;\n+}\n+\n+bool FeeEstInput::readData(const fs::path& filename)\n+{\n+    CAutoFile file(fsbridge::fopen(filename, \"rb\"), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull() || !estimator.Read(file)) {\n+        return false;\n+    }\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        std::ifstream file(filename.string(), std::ifstream::binary);\n+        value.pushKV(\n+            \"read\", HexStr(std::string(std::istreambuf_iterator<char>(file), std::istreambuf_iterator<char>())));\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+    return true;\n+}\n+\n+bool FeeEstInput::writeLog(const std::string& filename)\n+{\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        value.pushKV(\"stop\", Params().NetworkIDString());\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+\n+    if (filename.empty()) {\n+        log.reset();\n+    } else {\n+        log = MakeUnique<std::ofstream>(filename, std::ofstream::out | std::ofstream::app);\n+        if (!*log) {\n+            log.reset();\n+            return false;\n+        }\n+    }\n+\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        value.pushKV(\"start\", Params().NetworkIDString());\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+\n+    return true;\n+}\n+\n+bool FeeEstInput::readLog(const std::string& filename, const std::function<bool(UniValue&)>& filter)\n+{\n+    std::ifstream file(filename);\n+    if (!file) {\n+        LogPrintf(\"%s: Failed to open log file %s\\n\", __func__, filename);\n+        return false;\n+    }\n+\n+    std::string line;\n+    while (std::getline(file, line)) {\n+        UniValue value;\n+        if (!value.read(line)) {\n+            throw std::runtime_error(\"Failed to parse fee estimate log line.\");\n+        }\n+\n+        if (filter && !filter(value)) {\n+            continue;\n+        }\n+\n+        const UniValue& tx = value[\"tx\"];\n+        if (tx.isObject()) {\n+            estimator.processTx(uint256S(tx[\"hash\"].get_str()), tx[\"height\"].get_int(), tx[\"fee\"].get_int64(),\n+                tx[\"size\"].get_int(), nullptr /* block */, value[\"valid\"].get_bool());\n+            continue;\n+        }\n+\n+        const UniValue& block = value[\"block\"];\n+        if (block.isObject()) {\n+            int height = block[\"height\"].get_int();\n+            estimator.processBlock(height, [&](CBlockPolicyEstimator::Block& est_block) {\n+                const auto& txs = value[\"txs\"].getValues();\n+                for (const UniValue& tx : txs) {\n+                    estimator.processTx(uint256S(tx[\"hash\"].get_str()), tx[\"height\"].get_int(),\n+                        tx[\"fee\"].get_int64(), tx[\"size\"].get_int(), &est_block, true /* valid */);\n+                }\n+                return txs.size();\n+            });\n+            continue;\n+        }\n+\n+        const UniValue& removeTx = value[\"removeTx\"];\n+        if (removeTx.isObject()) {\n+            estimator.removeTx(uint256S(removeTx[\"hash\"].get_str()), removeTx[\"inBlock\"].get_bool());\n+            continue;\n+        }\n+\n+        const UniValue& flush = value[\"flush\"];\n+        if (flush.isArray()) {\n+            estimator.FlushUnconfirmed();\n+            continue;\n+        }\n+\n+        const UniValue& read = value[\"read\"];\n+        if (read.isStr()) {\n+            std::vector<unsigned char> data = ParseHex(read.get_str());\n+            uint16_t randv = 0;\n+            GetRandBytes((unsigned char*)&randv, sizeof(randv));\n+            fs::path filename = strprintf(\"fee_estimates.tmp.%04x\", randv);",
    "path": "src/policy/fees_input.cpp",
    "position": null,
    "original_position": 204,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "56446378f5d0c2bdeb7a45fa7382ccd58c9b994c",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`filename` shadows another variable. Please use another name :-)",
    "created_at": "2018-10-11T05:36:28Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319465",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319465"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319465"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319465/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 204,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319504",
    "pull_request_review_id": 163655029,
    "id": 224319504,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDMxOTUwNA==",
    "diff_hunk": "@@ -0,0 +1,222 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees_input.h>\n+\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <policy/fees.h>\n+#include <streams.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <utiltime.h>\n+\n+#include <univalue.h>\n+\n+struct FeeEstInput::Block {\n+    UniValue json_txs{UniValue::VARR};\n+    CBlockPolicyEstimator::Block* est_block = nullptr;\n+};\n+\n+FeeEstInput::FeeEstInput(CBlockPolicyEstimator& estimator) : estimator(estimator) {}\n+\n+void FeeEstInput::processTx(const uint256& hash, unsigned int height, CAmount fee, size_t size, Block* block, bool valid)\n+{\n+    estimator.processTx(hash, height, fee, size, block ? block->est_block : nullptr, valid);\n+    if (log) {\n+        UniValue tx(UniValue::VOBJ);\n+        tx.pushKV(\"hash\", hash.ToString());\n+        tx.pushKV(\"height\", int(height));\n+        tx.pushKV(\"fee\", fee);\n+        tx.pushKV(\"size\", uint64_t(size));\n+        if (block) {\n+            block->json_txs.push_back(std::move(tx));\n+        } else {\n+            UniValue value(UniValue::VOBJ);\n+            value.pushKV(\"tx\", std::move(tx));\n+            value.pushKV(\"valid\", UniValue(valid));\n+            value.pushKV(\"time\", GetTime());\n+            *log << value.write() << std::endl;\n+        }\n+    }\n+}\n+\n+void FeeEstInput::processBlock(int height, const std::function<void(Block&)>& process_txs)\n+{\n+    Block block;\n+    estimator.processBlock(height, [&](CBlockPolicyEstimator::Block& est_block) {\n+        block.est_block = &est_block;\n+        process_txs(block);\n+    });\n+    if (log) {\n+        UniValue json(UniValue::VOBJ);\n+        UniValue json_block(UniValue::VOBJ);\n+        json_block.pushKV(\"height\", height);\n+        json.pushKV(\"block\", json_block);\n+        json.pushKV(\"txs\", block.json_txs);\n+        json.pushKV(\"time\", GetTime());\n+        *log << json.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::removeTx(const uint256& hash, bool in_block)\n+{\n+    estimator.removeTx(hash, in_block);\n+\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        UniValue removeTx(UniValue::VOBJ);\n+        removeTx.pushKV(\"hash\", hash.ToString());\n+        removeTx.pushKV(\"inBlock\", UniValue(in_block));\n+        value.pushKV(\"removeTx\", removeTx);\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::flushUnconfirmed()\n+{\n+    estimator.FlushUnconfirmed();\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        UniValue flush(UniValue::VARR);\n+        value.pushKV(\"flush\", flush);\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+bool FeeEstInput::writeData(const fs::path& filename)\n+{\n+    CAutoFile file(fsbridge::fopen(filename, \"wb\"), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, filename.string());\n+        return false;\n+    }\n+    estimator.Write(file);\n+    return true;\n+}\n+\n+bool FeeEstInput::readData(const fs::path& filename)\n+{\n+    CAutoFile file(fsbridge::fopen(filename, \"rb\"), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull() || !estimator.Read(file)) {\n+        return false;\n+    }\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        std::ifstream file(filename.string(), std::ifstream::binary);\n+        value.pushKV(\n+            \"read\", HexStr(std::string(std::istreambuf_iterator<char>(file), std::istreambuf_iterator<char>())));\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+    return true;\n+}\n+\n+bool FeeEstInput::writeLog(const std::string& filename)\n+{\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        value.pushKV(\"stop\", Params().NetworkIDString());\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+\n+    if (filename.empty()) {\n+        log.reset();\n+    } else {\n+        log = MakeUnique<std::ofstream>(filename, std::ofstream::out | std::ofstream::app);\n+        if (!*log) {\n+            log.reset();\n+            return false;\n+        }\n+    }\n+\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        value.pushKV(\"start\", Params().NetworkIDString());\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+\n+    return true;\n+}\n+\n+bool FeeEstInput::readLog(const std::string& filename, const std::function<bool(UniValue&)>& filter)\n+{\n+    std::ifstream file(filename);\n+    if (!file) {\n+        LogPrintf(\"%s: Failed to open log file %s\\n\", __func__, filename);\n+        return false;\n+    }\n+\n+    std::string line;\n+    while (std::getline(file, line)) {\n+        UniValue value;\n+        if (!value.read(line)) {\n+            throw std::runtime_error(\"Failed to parse fee estimate log line.\");\n+        }\n+\n+        if (filter && !filter(value)) {\n+            continue;\n+        }\n+\n+        const UniValue& tx = value[\"tx\"];\n+        if (tx.isObject()) {\n+            estimator.processTx(uint256S(tx[\"hash\"].get_str()), tx[\"height\"].get_int(), tx[\"fee\"].get_int64(),\n+                tx[\"size\"].get_int(), nullptr /* block */, value[\"valid\"].get_bool());\n+            continue;\n+        }\n+\n+        const UniValue& block = value[\"block\"];\n+        if (block.isObject()) {\n+            int height = block[\"height\"].get_int();\n+            estimator.processBlock(height, [&](CBlockPolicyEstimator::Block& est_block) {\n+                const auto& txs = value[\"txs\"].getValues();\n+                for (const UniValue& tx : txs) {\n+                    estimator.processTx(uint256S(tx[\"hash\"].get_str()), tx[\"height\"].get_int(),\n+                        tx[\"fee\"].get_int64(), tx[\"size\"].get_int(), &est_block, true /* valid */);\n+                }\n+                return txs.size();\n+            });\n+            continue;\n+        }\n+\n+        const UniValue& removeTx = value[\"removeTx\"];\n+        if (removeTx.isObject()) {\n+            estimator.removeTx(uint256S(removeTx[\"hash\"].get_str()), removeTx[\"inBlock\"].get_bool());\n+            continue;\n+        }\n+\n+        const UniValue& flush = value[\"flush\"];\n+        if (flush.isArray()) {\n+            estimator.FlushUnconfirmed();\n+            continue;\n+        }\n+\n+        const UniValue& read = value[\"read\"];\n+        if (read.isStr()) {\n+            std::vector<unsigned char> data = ParseHex(read.get_str());\n+            uint16_t randv = 0;\n+            GetRandBytes((unsigned char*)&randv, sizeof(randv));\n+            fs::path filename = strprintf(\"fee_estimates.tmp.%04x\", randv);\n+            CAutoFile(fsbridge::fopen(filename, \"wb\"), SER_DISK, CLIENT_VERSION)\n+                .write((const char*)data.data(), data.size());\n+            {\n+                CAutoFile file(fsbridge::fopen(filename, \"rb\"), SER_DISK, CLIENT_VERSION);",
    "path": "src/policy/fees_input.cpp",
    "position": null,
    "original_position": 208,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "56446378f5d0c2bdeb7a45fa7382ccd58c9b994c",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same here: shadows another local variable :-)",
    "created_at": "2018-10-11T05:36:47Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319504",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319504"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319504"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319504/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 208,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319764",
    "pull_request_review_id": 163655353,
    "id": 224319764,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDMxOTc2NA==",
    "diff_hunk": "@@ -0,0 +1,333 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees.h>\n+#include <policy/fees_input.h>\n+#include <util.h>\n+\n+#include <univalue.h>\n+\n+#include <fstream>\n+#include <random>\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+std::string Usage()\n+{\n+    std::string usage = \"Usage: fee_est [options] <estlog.txt>\\n\";\n+    usage += HelpMessageGroup(\"Options:\");\n+    usage += HelpMessageOpt(\"-?, -help\", \"This help message\");\n+    usage += HelpMessageOpt(\"-ograph=<graph.html>\", \"Generate target vs feerate graph output after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-odat=<fee_estimates.dat>\", \"Save fee estimator state after after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-idat=<fee_estimates.dat>\", \"Load fee estimator state after before replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-dat=<fee_estimates.dat>\", \"Shortcut for -idat=<fee_estimates.dat> -odat=<fee_estimates.dat>\");\n+    usage += HelpMessageOpt(\"-cross\", \"Treat half the transactions from the log as test data and print cross-validation statistics.\");\n+    return usage;\n+}\n+\n+struct Options\n+{\n+    std::string logFileIn;\n+    std::string dataFileIn;\n+    std::string dataFileOut;\n+    std::string graphFileOut;\n+    bool cross = false;\n+    bool help = false;\n+    bool error = false;\n+};\n+\n+Options ParseCommandLine(int argc, char** argv)\n+{\n+    auto match = [&](const char* arg, const char* name, const char** value = nullptr) {\n+        if (arg[0] != '-') return false;\n+        size_t n = strlen(name);\n+        if (strncmp(arg + 1, name, n) != 0) return false;\n+        if (value) return (*value = arg[n + 1] == '=' ? arg + n + 2 : nullptr) != nullptr;\n+        return arg[n + 1] == '\\0';\n+    };\n+\n+    Options options;\n+    for (int i = 1; i < argc; ++i) {\n+        const char* arg = argv[i];\n+        const char* value;\n+        if (match(arg, \"ograph\", &value)) {\n+            options.graphFileOut = value;\n+        } else if (match(arg, \"odat\", &value)) {\n+            options.dataFileOut = value;\n+        } else if (match(arg, \"idat\", &value)) {\n+            options.dataFileIn = value;\n+        } else if (match(arg, \"dat\", &value)) {\n+            options.dataFileIn = options.dataFileOut = value;\n+        } else if (match(arg, \"cross\")) {\n+            options.cross = true;\n+        } else if (match(arg, \"help\") || match(arg, \"h\") || match(arg, \"?\")) {\n+            options.help = true;\n+        } else if (arg[0] != '-' && options.logFileIn.empty()) {\n+            options.logFileIn = arg;\n+        } else {\n+            fprintf(stderr, \"Error: unexpected argument: '%s'\\n\", arg);\n+            options.error = true;\n+        }\n+    }\n+\n+    if (options.logFileIn.empty() && !options.help) {\n+        fprintf(stderr, \"Error: missing required log file argument.\\n\");\n+        options.error = true;\n+    }\n+\n+    return options;\n+}\n+\n+struct TxData\n+{\n+    TxData(CAmount fee, int size, int height) : fee(fee), size(size), height(height) {}\n+    CAmount fee;\n+    int size;\n+    int height;\n+    int expectedBlocks = -1;\n+    int actualBlocks = -1;\n+};\n+\n+using TxMap = std::map<uint256, TxData>;\n+\n+const char* const GRAPH_HTML = R\"(<!DOCTYPE html>\n+<meta charset=\"utf-8\">\n+<title>Fee Graph</title>\n+<script src=\"https://d3js.org/d3.v3.min.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega/3.0.0-beta.30/vega.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-lite/2.0.0-beta.2/vega-lite.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-embed/3.0.0-beta.14/vega-embed.js\"></script>\n+<style media=\"screen\">\n+.vega-actions a {\n+    margin-right: 5px;\n+}\n+</style>\n+<div id=vis></div>\n+<script>\n+var spec = {\n+  \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.json\",\n+  \"width\": 800,\n+  \"height\": 600,\n+  \"layer\": [\n+    {\n+        \"data\": {\n+            \"values\": %s\n+        },\n+        \"mark\": \"tick\",\n+        \"encoding\": {\n+            \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+            \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+            \"color\": {\"field\": \"height\", \"type\": \"quantitative\"}\n+        }\n+    },\n+    {\n+      \"data\": {\n+        \"values\": %s\n+      },\n+      \"encoding\": {\n+        \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+        \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+        \"color\": {\"field\": \"mode\", \"type\": \"nominal\"}\n+      },\n+      \"mark\": \"line\",\n+    }\n+  ]\n+}\n+vega.embed(\"#vis\", spec);\n+</script>\n+)\";\n+\n+// Maximum number of randomly sampled transactions to show on graph.\n+const int SAMPLE_TXS = 50000;\n+\n+// Drop 1/20th of sampled transactions with highest feerates if they are\n+// outliers that would change the scale of the graph.\n+const int DROP_FRAC = 20;\n+\n+void WriteGraph(const std::string& filename,\n+    const TxMap& txMap,\n+    const std::vector<unsigned int>& targets,\n+    CBlockPolicyEstimator& estimator)\n+{\n+    UniValue fees(UniValue::VARR);\n+\n+    int64_t maxFeeRate = 0;\n+    const unsigned int maxTarget = estimator.getMaxTarget();\n+    for (bool conservative : {false, true}) {\n+        for (unsigned int target : targets) {\n+            if (target > maxTarget) continue;\n+            UniValue fee(UniValue::VOBJ);\n+            fee.pushKV(\"mode\", conservative ? \"conservative\" : \"default\");\n+            fee.pushKV(\"blocks\", int(target));\n+            int64_t feeRate = estimator.estimateSmartFee(target, nullptr /* confTarget */, conservative).GetFeePerK();",
    "path": "src/test/fee_est/fee_est.cpp",
    "position": null,
    "original_position": 164,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "56446378f5d0c2bdeb7a45fa7382ccd58c9b994c",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "An implicit signedness changing conversion takes place here. Avoid or make it explicit :-)",
    "created_at": "2018-10-11T05:38:58Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319764",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319764"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319764"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319764/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 164,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319785",
    "pull_request_review_id": 163655387,
    "id": 224319785,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDMxOTc4NQ==",
    "diff_hunk": "@@ -0,0 +1,333 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees.h>\n+#include <policy/fees_input.h>\n+#include <util.h>\n+\n+#include <univalue.h>\n+\n+#include <fstream>\n+#include <random>\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+std::string Usage()\n+{\n+    std::string usage = \"Usage: fee_est [options] <estlog.txt>\\n\";\n+    usage += HelpMessageGroup(\"Options:\");\n+    usage += HelpMessageOpt(\"-?, -help\", \"This help message\");\n+    usage += HelpMessageOpt(\"-ograph=<graph.html>\", \"Generate target vs feerate graph output after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-odat=<fee_estimates.dat>\", \"Save fee estimator state after after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-idat=<fee_estimates.dat>\", \"Load fee estimator state after before replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-dat=<fee_estimates.dat>\", \"Shortcut for -idat=<fee_estimates.dat> -odat=<fee_estimates.dat>\");\n+    usage += HelpMessageOpt(\"-cross\", \"Treat half the transactions from the log as test data and print cross-validation statistics.\");\n+    return usage;\n+}\n+\n+struct Options\n+{\n+    std::string logFileIn;\n+    std::string dataFileIn;\n+    std::string dataFileOut;\n+    std::string graphFileOut;\n+    bool cross = false;\n+    bool help = false;\n+    bool error = false;\n+};\n+\n+Options ParseCommandLine(int argc, char** argv)\n+{\n+    auto match = [&](const char* arg, const char* name, const char** value = nullptr) {\n+        if (arg[0] != '-') return false;\n+        size_t n = strlen(name);\n+        if (strncmp(arg + 1, name, n) != 0) return false;\n+        if (value) return (*value = arg[n + 1] == '=' ? arg + n + 2 : nullptr) != nullptr;\n+        return arg[n + 1] == '\\0';\n+    };\n+\n+    Options options;\n+    for (int i = 1; i < argc; ++i) {\n+        const char* arg = argv[i];\n+        const char* value;\n+        if (match(arg, \"ograph\", &value)) {\n+            options.graphFileOut = value;\n+        } else if (match(arg, \"odat\", &value)) {\n+            options.dataFileOut = value;\n+        } else if (match(arg, \"idat\", &value)) {\n+            options.dataFileIn = value;\n+        } else if (match(arg, \"dat\", &value)) {\n+            options.dataFileIn = options.dataFileOut = value;\n+        } else if (match(arg, \"cross\")) {\n+            options.cross = true;\n+        } else if (match(arg, \"help\") || match(arg, \"h\") || match(arg, \"?\")) {\n+            options.help = true;\n+        } else if (arg[0] != '-' && options.logFileIn.empty()) {\n+            options.logFileIn = arg;\n+        } else {\n+            fprintf(stderr, \"Error: unexpected argument: '%s'\\n\", arg);\n+            options.error = true;\n+        }\n+    }\n+\n+    if (options.logFileIn.empty() && !options.help) {\n+        fprintf(stderr, \"Error: missing required log file argument.\\n\");\n+        options.error = true;\n+    }\n+\n+    return options;\n+}\n+\n+struct TxData\n+{\n+    TxData(CAmount fee, int size, int height) : fee(fee), size(size), height(height) {}\n+    CAmount fee;\n+    int size;\n+    int height;\n+    int expectedBlocks = -1;\n+    int actualBlocks = -1;\n+};\n+\n+using TxMap = std::map<uint256, TxData>;\n+\n+const char* const GRAPH_HTML = R\"(<!DOCTYPE html>\n+<meta charset=\"utf-8\">\n+<title>Fee Graph</title>\n+<script src=\"https://d3js.org/d3.v3.min.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega/3.0.0-beta.30/vega.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-lite/2.0.0-beta.2/vega-lite.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-embed/3.0.0-beta.14/vega-embed.js\"></script>\n+<style media=\"screen\">\n+.vega-actions a {\n+    margin-right: 5px;\n+}\n+</style>\n+<div id=vis></div>\n+<script>\n+var spec = {\n+  \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.json\",\n+  \"width\": 800,\n+  \"height\": 600,\n+  \"layer\": [\n+    {\n+        \"data\": {\n+            \"values\": %s\n+        },\n+        \"mark\": \"tick\",\n+        \"encoding\": {\n+            \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+            \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+            \"color\": {\"field\": \"height\", \"type\": \"quantitative\"}\n+        }\n+    },\n+    {\n+      \"data\": {\n+        \"values\": %s\n+      },\n+      \"encoding\": {\n+        \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+        \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+        \"color\": {\"field\": \"mode\", \"type\": \"nominal\"}\n+      },\n+      \"mark\": \"line\",\n+    }\n+  ]\n+}\n+vega.embed(\"#vis\", spec);\n+</script>\n+)\";\n+\n+// Maximum number of randomly sampled transactions to show on graph.\n+const int SAMPLE_TXS = 50000;\n+\n+// Drop 1/20th of sampled transactions with highest feerates if they are\n+// outliers that would change the scale of the graph.\n+const int DROP_FRAC = 20;\n+\n+void WriteGraph(const std::string& filename,\n+    const TxMap& txMap,\n+    const std::vector<unsigned int>& targets,\n+    CBlockPolicyEstimator& estimator)\n+{\n+    UniValue fees(UniValue::VARR);\n+\n+    int64_t maxFeeRate = 0;\n+    const unsigned int maxTarget = estimator.getMaxTarget();\n+    for (bool conservative : {false, true}) {\n+        for (unsigned int target : targets) {\n+            if (target > maxTarget) continue;\n+            UniValue fee(UniValue::VOBJ);\n+            fee.pushKV(\"mode\", conservative ? \"conservative\" : \"default\");\n+            fee.pushKV(\"blocks\", int(target));\n+            int64_t feeRate = estimator.estimateSmartFee(target, nullptr /* confTarget */, conservative).GetFeePerK();\n+            fee.pushKV(\"feeRate\", feeRate);\n+            fees.push_back(fee);\n+            maxFeeRate = std::max(maxFeeRate, feeRate);\n+        }\n+    }\n+\n+    std::vector<const TxMap::value_type*> sample;\n+    sample.reserve(SAMPLE_TXS);\n+    int i = 0;\n+    std::minstd_rand randint;\n+    for (const auto& entry : txMap) {\n+        if (entry.second.actualBlocks > int(maxTarget)) {\n+            continue;\n+        } else if (sample.size() < SAMPLE_TXS) {\n+            sample.emplace_back(&entry);\n+        } else {\n+            int j = randint() % i;",
    "path": "src/test/fee_est/fee_est.cpp",
    "position": null,
    "original_position": 181,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "56446378f5d0c2bdeb7a45fa7382ccd58c9b994c",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "An implicit signedness changing conversion takes place here. Avoid or make it explicit :-)",
    "created_at": "2018-10-11T05:39:14Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319785",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319785"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319785"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319785/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 181,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319898",
    "pull_request_review_id": 163655520,
    "id": 224319898,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDMxOTg5OA==",
    "diff_hunk": "@@ -0,0 +1,333 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees.h>\n+#include <policy/fees_input.h>\n+#include <util.h>\n+\n+#include <univalue.h>\n+\n+#include <fstream>\n+#include <random>\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+std::string Usage()\n+{\n+    std::string usage = \"Usage: fee_est [options] <estlog.txt>\\n\";\n+    usage += HelpMessageGroup(\"Options:\");\n+    usage += HelpMessageOpt(\"-?, -help\", \"This help message\");\n+    usage += HelpMessageOpt(\"-ograph=<graph.html>\", \"Generate target vs feerate graph output after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-odat=<fee_estimates.dat>\", \"Save fee estimator state after after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-idat=<fee_estimates.dat>\", \"Load fee estimator state after before replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-dat=<fee_estimates.dat>\", \"Shortcut for -idat=<fee_estimates.dat> -odat=<fee_estimates.dat>\");\n+    usage += HelpMessageOpt(\"-cross\", \"Treat half the transactions from the log as test data and print cross-validation statistics.\");\n+    return usage;\n+}\n+\n+struct Options\n+{\n+    std::string logFileIn;\n+    std::string dataFileIn;\n+    std::string dataFileOut;\n+    std::string graphFileOut;\n+    bool cross = false;\n+    bool help = false;\n+    bool error = false;\n+};\n+\n+Options ParseCommandLine(int argc, char** argv)\n+{\n+    auto match = [&](const char* arg, const char* name, const char** value = nullptr) {\n+        if (arg[0] != '-') return false;\n+        size_t n = strlen(name);\n+        if (strncmp(arg + 1, name, n) != 0) return false;\n+        if (value) return (*value = arg[n + 1] == '=' ? arg + n + 2 : nullptr) != nullptr;\n+        return arg[n + 1] == '\\0';\n+    };\n+\n+    Options options;\n+    for (int i = 1; i < argc; ++i) {\n+        const char* arg = argv[i];\n+        const char* value;\n+        if (match(arg, \"ograph\", &value)) {\n+            options.graphFileOut = value;\n+        } else if (match(arg, \"odat\", &value)) {\n+            options.dataFileOut = value;\n+        } else if (match(arg, \"idat\", &value)) {\n+            options.dataFileIn = value;\n+        } else if (match(arg, \"dat\", &value)) {\n+            options.dataFileIn = options.dataFileOut = value;\n+        } else if (match(arg, \"cross\")) {\n+            options.cross = true;\n+        } else if (match(arg, \"help\") || match(arg, \"h\") || match(arg, \"?\")) {\n+            options.help = true;\n+        } else if (arg[0] != '-' && options.logFileIn.empty()) {\n+            options.logFileIn = arg;\n+        } else {\n+            fprintf(stderr, \"Error: unexpected argument: '%s'\\n\", arg);\n+            options.error = true;\n+        }\n+    }\n+\n+    if (options.logFileIn.empty() && !options.help) {\n+        fprintf(stderr, \"Error: missing required log file argument.\\n\");\n+        options.error = true;\n+    }\n+\n+    return options;\n+}\n+\n+struct TxData\n+{\n+    TxData(CAmount fee, int size, int height) : fee(fee), size(size), height(height) {}\n+    CAmount fee;\n+    int size;\n+    int height;\n+    int expectedBlocks = -1;\n+    int actualBlocks = -1;\n+};\n+\n+using TxMap = std::map<uint256, TxData>;\n+\n+const char* const GRAPH_HTML = R\"(<!DOCTYPE html>\n+<meta charset=\"utf-8\">\n+<title>Fee Graph</title>\n+<script src=\"https://d3js.org/d3.v3.min.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega/3.0.0-beta.30/vega.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-lite/2.0.0-beta.2/vega-lite.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-embed/3.0.0-beta.14/vega-embed.js\"></script>\n+<style media=\"screen\">\n+.vega-actions a {\n+    margin-right: 5px;\n+}\n+</style>\n+<div id=vis></div>\n+<script>\n+var spec = {\n+  \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.json\",\n+  \"width\": 800,\n+  \"height\": 600,\n+  \"layer\": [\n+    {\n+        \"data\": {\n+            \"values\": %s\n+        },\n+        \"mark\": \"tick\",\n+        \"encoding\": {\n+            \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+            \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+            \"color\": {\"field\": \"height\", \"type\": \"quantitative\"}\n+        }\n+    },\n+    {\n+      \"data\": {\n+        \"values\": %s\n+      },\n+      \"encoding\": {\n+        \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+        \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+        \"color\": {\"field\": \"mode\", \"type\": \"nominal\"}\n+      },\n+      \"mark\": \"line\",\n+    }\n+  ]\n+}\n+vega.embed(\"#vis\", spec);\n+</script>\n+)\";\n+\n+// Maximum number of randomly sampled transactions to show on graph.\n+const int SAMPLE_TXS = 50000;\n+\n+// Drop 1/20th of sampled transactions with highest feerates if they are\n+// outliers that would change the scale of the graph.\n+const int DROP_FRAC = 20;\n+\n+void WriteGraph(const std::string& filename,\n+    const TxMap& txMap,\n+    const std::vector<unsigned int>& targets,\n+    CBlockPolicyEstimator& estimator)\n+{\n+    UniValue fees(UniValue::VARR);\n+\n+    int64_t maxFeeRate = 0;\n+    const unsigned int maxTarget = estimator.getMaxTarget();\n+    for (bool conservative : {false, true}) {\n+        for (unsigned int target : targets) {\n+            if (target > maxTarget) continue;\n+            UniValue fee(UniValue::VOBJ);\n+            fee.pushKV(\"mode\", conservative ? \"conservative\" : \"default\");\n+            fee.pushKV(\"blocks\", int(target));\n+            int64_t feeRate = estimator.estimateSmartFee(target, nullptr /* confTarget */, conservative).GetFeePerK();\n+            fee.pushKV(\"feeRate\", feeRate);\n+            fees.push_back(fee);\n+            maxFeeRate = std::max(maxFeeRate, feeRate);\n+        }\n+    }\n+\n+    std::vector<const TxMap::value_type*> sample;\n+    sample.reserve(SAMPLE_TXS);\n+    int i = 0;\n+    std::minstd_rand randint;\n+    for (const auto& entry : txMap) {\n+        if (entry.second.actualBlocks > int(maxTarget)) {\n+            continue;\n+        } else if (sample.size() < SAMPLE_TXS) {\n+            sample.emplace_back(&entry);\n+        } else {\n+            int j = randint() % i;\n+            if (j < SAMPLE_TXS) {\n+                sample[j] = &entry;\n+            }\n+        }\n+        ++i;\n+    }\n+\n+    if (!sample.empty()) {\n+        std::vector<int64_t> feeRates;\n+        feeRates.reserve(sample.size());\n+        for (const auto& entry : sample) {\n+            feeRates.emplace_back(CFeeRate(entry->second.fee, entry->second.size).GetFeePerK());\n+        }\n+        auto nth = feeRates.begin() + sample.size() / DROP_FRAC;\n+        std::nth_element(feeRates.begin(), nth, feeRates.end(), std::greater<int64_t>());\n+        maxFeeRate = std::max(maxFeeRate, *nth);\n+    }\n+\n+    UniValue txs(UniValue::VARR);\n+    for (const auto& entry : sample) {\n+        if (entry->second.actualBlocks > 0) {\n+            int64_t feeRate = CFeeRate(entry->second.fee, entry->second.size).GetFeePerK();",
    "path": "src/test/fee_est/fee_est.cpp",
    "position": null,
    "original_position": 203,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "56446378f5d0c2bdeb7a45fa7382ccd58c9b994c",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "An implicit signedness changing conversion takes place here. Avoid or make it explicit :-)",
    "created_at": "2018-10-11T05:40:09Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319898",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319898"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319898"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319898/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 201,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319971",
    "pull_request_review_id": 163655603,
    "id": 224319971,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDMxOTk3MQ==",
    "diff_hunk": "@@ -0,0 +1,333 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees.h>\n+#include <policy/fees_input.h>\n+#include <util.h>\n+\n+#include <univalue.h>\n+\n+#include <fstream>\n+#include <random>\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+std::string Usage()\n+{\n+    std::string usage = \"Usage: fee_est [options] <estlog.txt>\\n\";\n+    usage += HelpMessageGroup(\"Options:\");\n+    usage += HelpMessageOpt(\"-?, -help\", \"This help message\");\n+    usage += HelpMessageOpt(\"-ograph=<graph.html>\", \"Generate target vs feerate graph output after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-odat=<fee_estimates.dat>\", \"Save fee estimator state after after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-idat=<fee_estimates.dat>\", \"Load fee estimator state after before replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-dat=<fee_estimates.dat>\", \"Shortcut for -idat=<fee_estimates.dat> -odat=<fee_estimates.dat>\");\n+    usage += HelpMessageOpt(\"-cross\", \"Treat half the transactions from the log as test data and print cross-validation statistics.\");\n+    return usage;\n+}\n+\n+struct Options\n+{\n+    std::string logFileIn;\n+    std::string dataFileIn;\n+    std::string dataFileOut;\n+    std::string graphFileOut;\n+    bool cross = false;\n+    bool help = false;\n+    bool error = false;\n+};\n+\n+Options ParseCommandLine(int argc, char** argv)\n+{\n+    auto match = [&](const char* arg, const char* name, const char** value = nullptr) {\n+        if (arg[0] != '-') return false;\n+        size_t n = strlen(name);\n+        if (strncmp(arg + 1, name, n) != 0) return false;\n+        if (value) return (*value = arg[n + 1] == '=' ? arg + n + 2 : nullptr) != nullptr;\n+        return arg[n + 1] == '\\0';\n+    };\n+\n+    Options options;\n+    for (int i = 1; i < argc; ++i) {\n+        const char* arg = argv[i];\n+        const char* value;\n+        if (match(arg, \"ograph\", &value)) {\n+            options.graphFileOut = value;\n+        } else if (match(arg, \"odat\", &value)) {\n+            options.dataFileOut = value;\n+        } else if (match(arg, \"idat\", &value)) {\n+            options.dataFileIn = value;\n+        } else if (match(arg, \"dat\", &value)) {\n+            options.dataFileIn = options.dataFileOut = value;\n+        } else if (match(arg, \"cross\")) {\n+            options.cross = true;\n+        } else if (match(arg, \"help\") || match(arg, \"h\") || match(arg, \"?\")) {\n+            options.help = true;\n+        } else if (arg[0] != '-' && options.logFileIn.empty()) {\n+            options.logFileIn = arg;\n+        } else {\n+            fprintf(stderr, \"Error: unexpected argument: '%s'\\n\", arg);\n+            options.error = true;\n+        }\n+    }\n+\n+    if (options.logFileIn.empty() && !options.help) {\n+        fprintf(stderr, \"Error: missing required log file argument.\\n\");\n+        options.error = true;\n+    }\n+\n+    return options;\n+}\n+\n+struct TxData\n+{\n+    TxData(CAmount fee, int size, int height) : fee(fee), size(size), height(height) {}\n+    CAmount fee;\n+    int size;\n+    int height;\n+    int expectedBlocks = -1;\n+    int actualBlocks = -1;\n+};\n+\n+using TxMap = std::map<uint256, TxData>;\n+\n+const char* const GRAPH_HTML = R\"(<!DOCTYPE html>\n+<meta charset=\"utf-8\">\n+<title>Fee Graph</title>\n+<script src=\"https://d3js.org/d3.v3.min.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega/3.0.0-beta.30/vega.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-lite/2.0.0-beta.2/vega-lite.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-embed/3.0.0-beta.14/vega-embed.js\"></script>\n+<style media=\"screen\">\n+.vega-actions a {\n+    margin-right: 5px;\n+}\n+</style>\n+<div id=vis></div>\n+<script>\n+var spec = {\n+  \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.json\",\n+  \"width\": 800,\n+  \"height\": 600,\n+  \"layer\": [\n+    {\n+        \"data\": {\n+            \"values\": %s\n+        },\n+        \"mark\": \"tick\",\n+        \"encoding\": {\n+            \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+            \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+            \"color\": {\"field\": \"height\", \"type\": \"quantitative\"}\n+        }\n+    },\n+    {\n+      \"data\": {\n+        \"values\": %s\n+      },\n+      \"encoding\": {\n+        \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+        \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+        \"color\": {\"field\": \"mode\", \"type\": \"nominal\"}\n+      },\n+      \"mark\": \"line\",\n+    }\n+  ]\n+}\n+vega.embed(\"#vis\", spec);\n+</script>\n+)\";\n+\n+// Maximum number of randomly sampled transactions to show on graph.\n+const int SAMPLE_TXS = 50000;\n+\n+// Drop 1/20th of sampled transactions with highest feerates if they are\n+// outliers that would change the scale of the graph.\n+const int DROP_FRAC = 20;\n+\n+void WriteGraph(const std::string& filename,\n+    const TxMap& txMap,\n+    const std::vector<unsigned int>& targets,\n+    CBlockPolicyEstimator& estimator)\n+{\n+    UniValue fees(UniValue::VARR);\n+\n+    int64_t maxFeeRate = 0;\n+    const unsigned int maxTarget = estimator.getMaxTarget();\n+    for (bool conservative : {false, true}) {\n+        for (unsigned int target : targets) {\n+            if (target > maxTarget) continue;\n+            UniValue fee(UniValue::VOBJ);\n+            fee.pushKV(\"mode\", conservative ? \"conservative\" : \"default\");\n+            fee.pushKV(\"blocks\", int(target));\n+            int64_t feeRate = estimator.estimateSmartFee(target, nullptr /* confTarget */, conservative).GetFeePerK();\n+            fee.pushKV(\"feeRate\", feeRate);\n+            fees.push_back(fee);\n+            maxFeeRate = std::max(maxFeeRate, feeRate);\n+        }\n+    }\n+\n+    std::vector<const TxMap::value_type*> sample;\n+    sample.reserve(SAMPLE_TXS);\n+    int i = 0;\n+    std::minstd_rand randint;\n+    for (const auto& entry : txMap) {\n+        if (entry.second.actualBlocks > int(maxTarget)) {\n+            continue;\n+        } else if (sample.size() < SAMPLE_TXS) {\n+            sample.emplace_back(&entry);\n+        } else {\n+            int j = randint() % i;\n+            if (j < SAMPLE_TXS) {\n+                sample[j] = &entry;\n+            }\n+        }\n+        ++i;\n+    }\n+\n+    if (!sample.empty()) {\n+        std::vector<int64_t> feeRates;\n+        feeRates.reserve(sample.size());\n+        for (const auto& entry : sample) {\n+            feeRates.emplace_back(CFeeRate(entry->second.fee, entry->second.size).GetFeePerK());\n+        }\n+        auto nth = feeRates.begin() + sample.size() / DROP_FRAC;\n+        std::nth_element(feeRates.begin(), nth, feeRates.end(), std::greater<int64_t>());\n+        maxFeeRate = std::max(maxFeeRate, *nth);\n+    }\n+\n+    UniValue txs(UniValue::VARR);\n+    for (const auto& entry : sample) {\n+        if (entry->second.actualBlocks > 0) {\n+            int64_t feeRate = CFeeRate(entry->second.fee, entry->second.size).GetFeePerK();\n+            if (feeRate <= maxFeeRate) {\n+                UniValue tx(UniValue::VOBJ);\n+                tx.pushKV(\"feeRate\", feeRate);\n+                tx.pushKV(\"blocks\", entry->second.actualBlocks);\n+                tx.pushKV(\"height\", entry->second.height);\n+                txs.push_back(std::move(tx));\n+            }\n+        }\n+    }\n+\n+    std::ofstream file(filename);\n+    file << strprintf(GRAPH_HTML, txs.write(), fees.write());\n+}\n+\n+bool UpdateCross(TxMap::value_type& tx, const std::vector<unsigned int>& targets, CBlockPolicyEstimator& estimator)\n+{\n+    if (*tx.first.begin() == 0) {\n+        auto it = std::lower_bound(targets.begin(), targets.end(), nullptr, [&](unsigned int target, std::nullptr_t) {\n+            CAmount estFee = estimator.estimateSmartFee(target, nullptr /* feeCalc */, false /* conservative */)",
    "path": "src/test/fee_est/fee_est.cpp",
    "position": null,
    "original_position": 222,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "56446378f5d0c2bdeb7a45fa7382ccd58c9b994c",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "An implicit signedness changing conversion takes place here. Avoid or make it explicit :-)",
    "created_at": "2018-10-11T05:40:44Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319971",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319971"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319971"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224319971/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 222,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224320065",
    "pull_request_review_id": 163655731,
    "id": 224320065,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDMyMDA2NQ==",
    "diff_hunk": "@@ -0,0 +1,333 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees.h>\n+#include <policy/fees_input.h>\n+#include <util.h>\n+\n+#include <univalue.h>\n+\n+#include <fstream>\n+#include <random>\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+std::string Usage()\n+{\n+    std::string usage = \"Usage: fee_est [options] <estlog.txt>\\n\";\n+    usage += HelpMessageGroup(\"Options:\");\n+    usage += HelpMessageOpt(\"-?, -help\", \"This help message\");\n+    usage += HelpMessageOpt(\"-ograph=<graph.html>\", \"Generate target vs feerate graph output after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-odat=<fee_estimates.dat>\", \"Save fee estimator state after after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-idat=<fee_estimates.dat>\", \"Load fee estimator state after before replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-dat=<fee_estimates.dat>\", \"Shortcut for -idat=<fee_estimates.dat> -odat=<fee_estimates.dat>\");\n+    usage += HelpMessageOpt(\"-cross\", \"Treat half the transactions from the log as test data and print cross-validation statistics.\");\n+    return usage;\n+}\n+\n+struct Options\n+{\n+    std::string logFileIn;\n+    std::string dataFileIn;\n+    std::string dataFileOut;\n+    std::string graphFileOut;\n+    bool cross = false;\n+    bool help = false;\n+    bool error = false;\n+};\n+\n+Options ParseCommandLine(int argc, char** argv)\n+{\n+    auto match = [&](const char* arg, const char* name, const char** value = nullptr) {\n+        if (arg[0] != '-') return false;\n+        size_t n = strlen(name);\n+        if (strncmp(arg + 1, name, n) != 0) return false;\n+        if (value) return (*value = arg[n + 1] == '=' ? arg + n + 2 : nullptr) != nullptr;\n+        return arg[n + 1] == '\\0';\n+    };\n+\n+    Options options;\n+    for (int i = 1; i < argc; ++i) {\n+        const char* arg = argv[i];\n+        const char* value;\n+        if (match(arg, \"ograph\", &value)) {\n+            options.graphFileOut = value;\n+        } else if (match(arg, \"odat\", &value)) {\n+            options.dataFileOut = value;\n+        } else if (match(arg, \"idat\", &value)) {\n+            options.dataFileIn = value;\n+        } else if (match(arg, \"dat\", &value)) {\n+            options.dataFileIn = options.dataFileOut = value;\n+        } else if (match(arg, \"cross\")) {\n+            options.cross = true;\n+        } else if (match(arg, \"help\") || match(arg, \"h\") || match(arg, \"?\")) {\n+            options.help = true;\n+        } else if (arg[0] != '-' && options.logFileIn.empty()) {\n+            options.logFileIn = arg;\n+        } else {\n+            fprintf(stderr, \"Error: unexpected argument: '%s'\\n\", arg);\n+            options.error = true;\n+        }\n+    }\n+\n+    if (options.logFileIn.empty() && !options.help) {\n+        fprintf(stderr, \"Error: missing required log file argument.\\n\");\n+        options.error = true;\n+    }\n+\n+    return options;\n+}\n+\n+struct TxData\n+{\n+    TxData(CAmount fee, int size, int height) : fee(fee), size(size), height(height) {}\n+    CAmount fee;\n+    int size;\n+    int height;\n+    int expectedBlocks = -1;\n+    int actualBlocks = -1;\n+};\n+\n+using TxMap = std::map<uint256, TxData>;\n+\n+const char* const GRAPH_HTML = R\"(<!DOCTYPE html>\n+<meta charset=\"utf-8\">\n+<title>Fee Graph</title>\n+<script src=\"https://d3js.org/d3.v3.min.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega/3.0.0-beta.30/vega.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-lite/2.0.0-beta.2/vega-lite.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-embed/3.0.0-beta.14/vega-embed.js\"></script>\n+<style media=\"screen\">\n+.vega-actions a {\n+    margin-right: 5px;\n+}\n+</style>\n+<div id=vis></div>\n+<script>\n+var spec = {\n+  \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.json\",\n+  \"width\": 800,\n+  \"height\": 600,\n+  \"layer\": [\n+    {\n+        \"data\": {\n+            \"values\": %s\n+        },\n+        \"mark\": \"tick\",\n+        \"encoding\": {\n+            \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+            \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+            \"color\": {\"field\": \"height\", \"type\": \"quantitative\"}\n+        }\n+    },\n+    {\n+      \"data\": {\n+        \"values\": %s\n+      },\n+      \"encoding\": {\n+        \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+        \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+        \"color\": {\"field\": \"mode\", \"type\": \"nominal\"}\n+      },\n+      \"mark\": \"line\",\n+    }\n+  ]\n+}\n+vega.embed(\"#vis\", spec);\n+</script>\n+)\";\n+\n+// Maximum number of randomly sampled transactions to show on graph.\n+const int SAMPLE_TXS = 50000;\n+\n+// Drop 1/20th of sampled transactions with highest feerates if they are\n+// outliers that would change the scale of the graph.\n+const int DROP_FRAC = 20;\n+\n+void WriteGraph(const std::string& filename,\n+    const TxMap& txMap,\n+    const std::vector<unsigned int>& targets,\n+    CBlockPolicyEstimator& estimator)\n+{\n+    UniValue fees(UniValue::VARR);\n+\n+    int64_t maxFeeRate = 0;\n+    const unsigned int maxTarget = estimator.getMaxTarget();\n+    for (bool conservative : {false, true}) {\n+        for (unsigned int target : targets) {\n+            if (target > maxTarget) continue;\n+            UniValue fee(UniValue::VOBJ);\n+            fee.pushKV(\"mode\", conservative ? \"conservative\" : \"default\");\n+            fee.pushKV(\"blocks\", int(target));\n+            int64_t feeRate = estimator.estimateSmartFee(target, nullptr /* confTarget */, conservative).GetFeePerK();\n+            fee.pushKV(\"feeRate\", feeRate);\n+            fees.push_back(fee);\n+            maxFeeRate = std::max(maxFeeRate, feeRate);\n+        }\n+    }\n+\n+    std::vector<const TxMap::value_type*> sample;\n+    sample.reserve(SAMPLE_TXS);\n+    int i = 0;\n+    std::minstd_rand randint;\n+    for (const auto& entry : txMap) {\n+        if (entry.second.actualBlocks > int(maxTarget)) {\n+            continue;\n+        } else if (sample.size() < SAMPLE_TXS) {\n+            sample.emplace_back(&entry);\n+        } else {\n+            int j = randint() % i;\n+            if (j < SAMPLE_TXS) {\n+                sample[j] = &entry;\n+            }\n+        }\n+        ++i;\n+    }\n+\n+    if (!sample.empty()) {\n+        std::vector<int64_t> feeRates;\n+        feeRates.reserve(sample.size());\n+        for (const auto& entry : sample) {\n+            feeRates.emplace_back(CFeeRate(entry->second.fee, entry->second.size).GetFeePerK());\n+        }\n+        auto nth = feeRates.begin() + sample.size() / DROP_FRAC;\n+        std::nth_element(feeRates.begin(), nth, feeRates.end(), std::greater<int64_t>());\n+        maxFeeRate = std::max(maxFeeRate, *nth);\n+    }\n+\n+    UniValue txs(UniValue::VARR);\n+    for (const auto& entry : sample) {\n+        if (entry->second.actualBlocks > 0) {\n+            int64_t feeRate = CFeeRate(entry->second.fee, entry->second.size).GetFeePerK();\n+            if (feeRate <= maxFeeRate) {\n+                UniValue tx(UniValue::VOBJ);\n+                tx.pushKV(\"feeRate\", feeRate);\n+                tx.pushKV(\"blocks\", entry->second.actualBlocks);\n+                tx.pushKV(\"height\", entry->second.height);\n+                txs.push_back(std::move(tx));\n+            }\n+        }\n+    }\n+\n+    std::ofstream file(filename);\n+    file << strprintf(GRAPH_HTML, txs.write(), fees.write());\n+}\n+\n+bool UpdateCross(TxMap::value_type& tx, const std::vector<unsigned int>& targets, CBlockPolicyEstimator& estimator)\n+{\n+    if (*tx.first.begin() == 0) {\n+        auto it = std::lower_bound(targets.begin(), targets.end(), nullptr, [&](unsigned int target, std::nullptr_t) {\n+            CAmount estFee = estimator.estimateSmartFee(target, nullptr /* feeCalc */, false /* conservative */)\n+                                 .GetFee(tx.second.size);\n+            return estFee <= 1 || tx.second.fee < estFee;\n+        });\n+        tx.second.expectedBlocks = it == targets.end() ? std::numeric_limits<int>::max() : *it;",
    "path": "src/test/fee_est/fee_est.cpp",
    "position": null,
    "original_position": 226,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "56446378f5d0c2bdeb7a45fa7382ccd58c9b994c",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "An implicit signedness changing conversion takes place here. Avoid or make it explicit :-)",
    "created_at": "2018-10-11T05:41:26Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224320065",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224320065"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224320065"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224320065/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 226,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224320184",
    "pull_request_review_id": 163655868,
    "id": 224320184,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDMyMDE4NA==",
    "diff_hunk": "@@ -0,0 +1,333 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees.h>\n+#include <policy/fees_input.h>\n+#include <util.h>\n+\n+#include <univalue.h>\n+\n+#include <fstream>\n+#include <random>\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+std::string Usage()\n+{\n+    std::string usage = \"Usage: fee_est [options] <estlog.txt>\\n\";\n+    usage += HelpMessageGroup(\"Options:\");\n+    usage += HelpMessageOpt(\"-?, -help\", \"This help message\");\n+    usage += HelpMessageOpt(\"-ograph=<graph.html>\", \"Generate target vs feerate graph output after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-odat=<fee_estimates.dat>\", \"Save fee estimator state after after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-idat=<fee_estimates.dat>\", \"Load fee estimator state after before replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-dat=<fee_estimates.dat>\", \"Shortcut for -idat=<fee_estimates.dat> -odat=<fee_estimates.dat>\");\n+    usage += HelpMessageOpt(\"-cross\", \"Treat half the transactions from the log as test data and print cross-validation statistics.\");\n+    return usage;\n+}\n+\n+struct Options\n+{\n+    std::string logFileIn;\n+    std::string dataFileIn;\n+    std::string dataFileOut;\n+    std::string graphFileOut;\n+    bool cross = false;\n+    bool help = false;\n+    bool error = false;\n+};\n+\n+Options ParseCommandLine(int argc, char** argv)\n+{\n+    auto match = [&](const char* arg, const char* name, const char** value = nullptr) {\n+        if (arg[0] != '-') return false;\n+        size_t n = strlen(name);\n+        if (strncmp(arg + 1, name, n) != 0) return false;\n+        if (value) return (*value = arg[n + 1] == '=' ? arg + n + 2 : nullptr) != nullptr;\n+        return arg[n + 1] == '\\0';\n+    };\n+\n+    Options options;\n+    for (int i = 1; i < argc; ++i) {\n+        const char* arg = argv[i];\n+        const char* value;\n+        if (match(arg, \"ograph\", &value)) {\n+            options.graphFileOut = value;\n+        } else if (match(arg, \"odat\", &value)) {\n+            options.dataFileOut = value;\n+        } else if (match(arg, \"idat\", &value)) {\n+            options.dataFileIn = value;\n+        } else if (match(arg, \"dat\", &value)) {\n+            options.dataFileIn = options.dataFileOut = value;\n+        } else if (match(arg, \"cross\")) {\n+            options.cross = true;\n+        } else if (match(arg, \"help\") || match(arg, \"h\") || match(arg, \"?\")) {\n+            options.help = true;\n+        } else if (arg[0] != '-' && options.logFileIn.empty()) {\n+            options.logFileIn = arg;\n+        } else {\n+            fprintf(stderr, \"Error: unexpected argument: '%s'\\n\", arg);\n+            options.error = true;\n+        }\n+    }\n+\n+    if (options.logFileIn.empty() && !options.help) {\n+        fprintf(stderr, \"Error: missing required log file argument.\\n\");\n+        options.error = true;\n+    }\n+\n+    return options;\n+}\n+\n+struct TxData\n+{\n+    TxData(CAmount fee, int size, int height) : fee(fee), size(size), height(height) {}\n+    CAmount fee;\n+    int size;\n+    int height;\n+    int expectedBlocks = -1;\n+    int actualBlocks = -1;\n+};\n+\n+using TxMap = std::map<uint256, TxData>;\n+\n+const char* const GRAPH_HTML = R\"(<!DOCTYPE html>\n+<meta charset=\"utf-8\">\n+<title>Fee Graph</title>\n+<script src=\"https://d3js.org/d3.v3.min.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega/3.0.0-beta.30/vega.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-lite/2.0.0-beta.2/vega-lite.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-embed/3.0.0-beta.14/vega-embed.js\"></script>\n+<style media=\"screen\">\n+.vega-actions a {\n+    margin-right: 5px;\n+}\n+</style>\n+<div id=vis></div>\n+<script>\n+var spec = {\n+  \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.json\",\n+  \"width\": 800,\n+  \"height\": 600,\n+  \"layer\": [\n+    {\n+        \"data\": {\n+            \"values\": %s\n+        },\n+        \"mark\": \"tick\",\n+        \"encoding\": {\n+            \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+            \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+            \"color\": {\"field\": \"height\", \"type\": \"quantitative\"}\n+        }\n+    },\n+    {\n+      \"data\": {\n+        \"values\": %s\n+      },\n+      \"encoding\": {\n+        \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+        \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+        \"color\": {\"field\": \"mode\", \"type\": \"nominal\"}\n+      },\n+      \"mark\": \"line\",\n+    }\n+  ]\n+}\n+vega.embed(\"#vis\", spec);\n+</script>\n+)\";\n+\n+// Maximum number of randomly sampled transactions to show on graph.\n+const int SAMPLE_TXS = 50000;\n+\n+// Drop 1/20th of sampled transactions with highest feerates if they are\n+// outliers that would change the scale of the graph.\n+const int DROP_FRAC = 20;\n+\n+void WriteGraph(const std::string& filename,\n+    const TxMap& txMap,\n+    const std::vector<unsigned int>& targets,\n+    CBlockPolicyEstimator& estimator)\n+{\n+    UniValue fees(UniValue::VARR);\n+\n+    int64_t maxFeeRate = 0;\n+    const unsigned int maxTarget = estimator.getMaxTarget();\n+    for (bool conservative : {false, true}) {\n+        for (unsigned int target : targets) {\n+            if (target > maxTarget) continue;\n+            UniValue fee(UniValue::VOBJ);\n+            fee.pushKV(\"mode\", conservative ? \"conservative\" : \"default\");\n+            fee.pushKV(\"blocks\", int(target));\n+            int64_t feeRate = estimator.estimateSmartFee(target, nullptr /* confTarget */, conservative).GetFeePerK();\n+            fee.pushKV(\"feeRate\", feeRate);\n+            fees.push_back(fee);\n+            maxFeeRate = std::max(maxFeeRate, feeRate);\n+        }\n+    }\n+\n+    std::vector<const TxMap::value_type*> sample;\n+    sample.reserve(SAMPLE_TXS);\n+    int i = 0;\n+    std::minstd_rand randint;\n+    for (const auto& entry : txMap) {\n+        if (entry.second.actualBlocks > int(maxTarget)) {\n+            continue;\n+        } else if (sample.size() < SAMPLE_TXS) {\n+            sample.emplace_back(&entry);\n+        } else {\n+            int j = randint() % i;\n+            if (j < SAMPLE_TXS) {\n+                sample[j] = &entry;\n+            }\n+        }\n+        ++i;\n+    }\n+\n+    if (!sample.empty()) {\n+        std::vector<int64_t> feeRates;\n+        feeRates.reserve(sample.size());\n+        for (const auto& entry : sample) {\n+            feeRates.emplace_back(CFeeRate(entry->second.fee, entry->second.size).GetFeePerK());\n+        }\n+        auto nth = feeRates.begin() + sample.size() / DROP_FRAC;\n+        std::nth_element(feeRates.begin(), nth, feeRates.end(), std::greater<int64_t>());\n+        maxFeeRate = std::max(maxFeeRate, *nth);\n+    }\n+\n+    UniValue txs(UniValue::VARR);\n+    for (const auto& entry : sample) {\n+        if (entry->second.actualBlocks > 0) {\n+            int64_t feeRate = CFeeRate(entry->second.fee, entry->second.size).GetFeePerK();\n+            if (feeRate <= maxFeeRate) {\n+                UniValue tx(UniValue::VOBJ);\n+                tx.pushKV(\"feeRate\", feeRate);\n+                tx.pushKV(\"blocks\", entry->second.actualBlocks);\n+                tx.pushKV(\"height\", entry->second.height);\n+                txs.push_back(std::move(tx));\n+            }\n+        }\n+    }\n+\n+    std::ofstream file(filename);\n+    file << strprintf(GRAPH_HTML, txs.write(), fees.write());\n+}\n+\n+bool UpdateCross(TxMap::value_type& tx, const std::vector<unsigned int>& targets, CBlockPolicyEstimator& estimator)\n+{\n+    if (*tx.first.begin() == 0) {\n+        auto it = std::lower_bound(targets.begin(), targets.end(), nullptr, [&](unsigned int target, std::nullptr_t) {\n+            CAmount estFee = estimator.estimateSmartFee(target, nullptr /* feeCalc */, false /* conservative */)\n+                                 .GetFee(tx.second.size);\n+            return estFee <= 1 || tx.second.fee < estFee;\n+        });\n+        tx.second.expectedBlocks = it == targets.end() ? std::numeric_limits<int>::max() : *it;\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void PrintCross(const TxMap& txMap,\n+    CBlockPolicyEstimator& estimator)",
    "path": "src/test/fee_est/fee_est.cpp",
    "position": null,
    "original_position": 233,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "56446378f5d0c2bdeb7a45fa7382ccd58c9b994c",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The unused parameter `estimator` can be removed?",
    "created_at": "2018-10-11T05:42:24Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224320184",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224320184"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224320184"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224320184/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 233,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224320246",
    "pull_request_review_id": 163655948,
    "id": 224320246,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDMyMDI0Ng==",
    "diff_hunk": "@@ -0,0 +1,333 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees.h>\n+#include <policy/fees_input.h>\n+#include <util.h>\n+\n+#include <univalue.h>\n+\n+#include <fstream>\n+#include <random>\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+std::string Usage()\n+{\n+    std::string usage = \"Usage: fee_est [options] <estlog.txt>\\n\";\n+    usage += HelpMessageGroup(\"Options:\");\n+    usage += HelpMessageOpt(\"-?, -help\", \"This help message\");\n+    usage += HelpMessageOpt(\"-ograph=<graph.html>\", \"Generate target vs feerate graph output after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-odat=<fee_estimates.dat>\", \"Save fee estimator state after after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-idat=<fee_estimates.dat>\", \"Load fee estimator state after before replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-dat=<fee_estimates.dat>\", \"Shortcut for -idat=<fee_estimates.dat> -odat=<fee_estimates.dat>\");\n+    usage += HelpMessageOpt(\"-cross\", \"Treat half the transactions from the log as test data and print cross-validation statistics.\");\n+    return usage;\n+}\n+\n+struct Options\n+{\n+    std::string logFileIn;\n+    std::string dataFileIn;\n+    std::string dataFileOut;\n+    std::string graphFileOut;\n+    bool cross = false;\n+    bool help = false;\n+    bool error = false;\n+};\n+\n+Options ParseCommandLine(int argc, char** argv)\n+{\n+    auto match = [&](const char* arg, const char* name, const char** value = nullptr) {\n+        if (arg[0] != '-') return false;\n+        size_t n = strlen(name);\n+        if (strncmp(arg + 1, name, n) != 0) return false;\n+        if (value) return (*value = arg[n + 1] == '=' ? arg + n + 2 : nullptr) != nullptr;\n+        return arg[n + 1] == '\\0';\n+    };\n+\n+    Options options;\n+    for (int i = 1; i < argc; ++i) {\n+        const char* arg = argv[i];\n+        const char* value;\n+        if (match(arg, \"ograph\", &value)) {\n+            options.graphFileOut = value;\n+        } else if (match(arg, \"odat\", &value)) {\n+            options.dataFileOut = value;\n+        } else if (match(arg, \"idat\", &value)) {\n+            options.dataFileIn = value;\n+        } else if (match(arg, \"dat\", &value)) {\n+            options.dataFileIn = options.dataFileOut = value;\n+        } else if (match(arg, \"cross\")) {\n+            options.cross = true;\n+        } else if (match(arg, \"help\") || match(arg, \"h\") || match(arg, \"?\")) {\n+            options.help = true;\n+        } else if (arg[0] != '-' && options.logFileIn.empty()) {\n+            options.logFileIn = arg;\n+        } else {\n+            fprintf(stderr, \"Error: unexpected argument: '%s'\\n\", arg);\n+            options.error = true;\n+        }\n+    }\n+\n+    if (options.logFileIn.empty() && !options.help) {\n+        fprintf(stderr, \"Error: missing required log file argument.\\n\");\n+        options.error = true;\n+    }\n+\n+    return options;\n+}\n+\n+struct TxData\n+{\n+    TxData(CAmount fee, int size, int height) : fee(fee), size(size), height(height) {}\n+    CAmount fee;\n+    int size;\n+    int height;\n+    int expectedBlocks = -1;\n+    int actualBlocks = -1;\n+};\n+\n+using TxMap = std::map<uint256, TxData>;\n+\n+const char* const GRAPH_HTML = R\"(<!DOCTYPE html>\n+<meta charset=\"utf-8\">\n+<title>Fee Graph</title>\n+<script src=\"https://d3js.org/d3.v3.min.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega/3.0.0-beta.30/vega.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-lite/2.0.0-beta.2/vega-lite.js\"></script>\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vega-embed/3.0.0-beta.14/vega-embed.js\"></script>\n+<style media=\"screen\">\n+.vega-actions a {\n+    margin-right: 5px;\n+}\n+</style>\n+<div id=vis></div>\n+<script>\n+var spec = {\n+  \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.json\",\n+  \"width\": 800,\n+  \"height\": 600,\n+  \"layer\": [\n+    {\n+        \"data\": {\n+            \"values\": %s\n+        },\n+        \"mark\": \"tick\",\n+        \"encoding\": {\n+            \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+            \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+            \"color\": {\"field\": \"height\", \"type\": \"quantitative\"}\n+        }\n+    },\n+    {\n+      \"data\": {\n+        \"values\": %s\n+      },\n+      \"encoding\": {\n+        \"x\": {\"field\": \"blocks\", \"type\": \"quantitative\"},\n+        \"y\": {\"field\": \"feeRate\", \"type\": \"quantitative\"},\n+        \"color\": {\"field\": \"mode\", \"type\": \"nominal\"}\n+      },\n+      \"mark\": \"line\",\n+    }\n+  ]\n+}\n+vega.embed(\"#vis\", spec);\n+</script>\n+)\";\n+\n+// Maximum number of randomly sampled transactions to show on graph.\n+const int SAMPLE_TXS = 50000;\n+\n+// Drop 1/20th of sampled transactions with highest feerates if they are\n+// outliers that would change the scale of the graph.\n+const int DROP_FRAC = 20;\n+\n+void WriteGraph(const std::string& filename,\n+    const TxMap& txMap,\n+    const std::vector<unsigned int>& targets,\n+    CBlockPolicyEstimator& estimator)\n+{\n+    UniValue fees(UniValue::VARR);\n+\n+    int64_t maxFeeRate = 0;\n+    const unsigned int maxTarget = estimator.getMaxTarget();\n+    for (bool conservative : {false, true}) {\n+        for (unsigned int target : targets) {\n+            if (target > maxTarget) continue;\n+            UniValue fee(UniValue::VOBJ);\n+            fee.pushKV(\"mode\", conservative ? \"conservative\" : \"default\");\n+            fee.pushKV(\"blocks\", int(target));\n+            int64_t feeRate = estimator.estimateSmartFee(target, nullptr /* confTarget */, conservative).GetFeePerK();\n+            fee.pushKV(\"feeRate\", feeRate);\n+            fees.push_back(fee);\n+            maxFeeRate = std::max(maxFeeRate, feeRate);\n+        }\n+    }\n+\n+    std::vector<const TxMap::value_type*> sample;\n+    sample.reserve(SAMPLE_TXS);\n+    int i = 0;\n+    std::minstd_rand randint;\n+    for (const auto& entry : txMap) {\n+        if (entry.second.actualBlocks > int(maxTarget)) {\n+            continue;\n+        } else if (sample.size() < SAMPLE_TXS) {\n+            sample.emplace_back(&entry);\n+        } else {\n+            int j = randint() % i;\n+            if (j < SAMPLE_TXS) {\n+                sample[j] = &entry;\n+            }\n+        }\n+        ++i;\n+    }\n+\n+    if (!sample.empty()) {\n+        std::vector<int64_t> feeRates;\n+        feeRates.reserve(sample.size());\n+        for (const auto& entry : sample) {\n+            feeRates.emplace_back(CFeeRate(entry->second.fee, entry->second.size).GetFeePerK());\n+        }\n+        auto nth = feeRates.begin() + sample.size() / DROP_FRAC;\n+        std::nth_element(feeRates.begin(), nth, feeRates.end(), std::greater<int64_t>());\n+        maxFeeRate = std::max(maxFeeRate, *nth);\n+    }\n+\n+    UniValue txs(UniValue::VARR);\n+    for (const auto& entry : sample) {\n+        if (entry->second.actualBlocks > 0) {\n+            int64_t feeRate = CFeeRate(entry->second.fee, entry->second.size).GetFeePerK();\n+            if (feeRate <= maxFeeRate) {\n+                UniValue tx(UniValue::VOBJ);\n+                tx.pushKV(\"feeRate\", feeRate);\n+                tx.pushKV(\"blocks\", entry->second.actualBlocks);\n+                tx.pushKV(\"height\", entry->second.height);\n+                txs.push_back(std::move(tx));\n+            }\n+        }\n+    }\n+\n+    std::ofstream file(filename);\n+    file << strprintf(GRAPH_HTML, txs.write(), fees.write());\n+}\n+\n+bool UpdateCross(TxMap::value_type& tx, const std::vector<unsigned int>& targets, CBlockPolicyEstimator& estimator)\n+{\n+    if (*tx.first.begin() == 0) {\n+        auto it = std::lower_bound(targets.begin(), targets.end(), nullptr, [&](unsigned int target, std::nullptr_t) {\n+            CAmount estFee = estimator.estimateSmartFee(target, nullptr /* feeCalc */, false /* conservative */)\n+                                 .GetFee(tx.second.size);\n+            return estFee <= 1 || tx.second.fee < estFee;\n+        });\n+        tx.second.expectedBlocks = it == targets.end() ? std::numeric_limits<int>::max() : *it;\n+        return false;\n+    }\n+    return true;\n+}\n+\n+void PrintCross(const TxMap& txMap,\n+    CBlockPolicyEstimator& estimator)\n+{\n+    int nonTestTxs = 0;\n+    int unconfirmedTestTxs = 0;\n+    int outlierTestTxs = 0;\n+    int keptTestTxs = 0;\n+    int64_t errsq = 0;\n+    for (const auto& entry : txMap) {\n+        if (entry.second.expectedBlocks == -1) {\n+            ++nonTestTxs;\n+        } else if (entry.second.actualBlocks == -1) {\n+            ++unconfirmedTestTxs;\n+        } else if (entry.second.expectedBlocks == std::numeric_limits<int>::max()) {\n+            ++outlierTestTxs;\n+        } else {\n+            ++keptTestTxs;\n+            int err = entry.second.expectedBlocks - entry.second.actualBlocks;\n+            errsq += err * err;\n+        }\n+    }\n+    printf(\"Non-test txs: %i\\n\", nonTestTxs);\n+    printf(\"Test txs: %i total (%i kept, %i discarded unconfirmed, %i discarded outliers)\\n\",\n+        keptTestTxs + unconfirmedTestTxs + outlierTestTxs, keptTestTxs, unconfirmedTestTxs, outlierTestTxs);\n+    if (keptTestTxs > 0) {\n+        printf(\"Mean squared error: %g\\n\", double(errsq) / double(keptTestTxs));\n+    }\n+}\n+\n+int main(int argc, char** argv)\n+{\n+    Options options = ParseCommandLine(argc, argv);\n+\n+    if (options.help) {\n+        printf(\"%s\", Usage().c_str());\n+        return EXIT_SUCCESS;\n+    } else if (options.error) {\n+        fprintf(stderr, \"Try `fee_est -h` for more information.\\n\");\n+        return EXIT_FAILURE;\n+    } else if (options.dataFileOut.empty() && options.graphFileOut.empty() && !options.cross) {\n+        fprintf(stderr, \"Warning: No output options specified. Try -ograph, -odat, -cross options, or `fee_est -h` \"\n+                        \"for more information.\\n\");\n+    }\n+\n+    CBlockPolicyEstimator estimator;\n+    FeeEstInput input(estimator);\n+\n+    if (!options.dataFileIn.empty() && !input.readData(options.dataFileIn)) {\n+        fprintf(stderr, \"Error: failed to load fee estimate data file '%s'\\n\", options.dataFileOut.c_str());\n+        return 1;\n+    }\n+\n+    const std::vector<unsigned int> targets = estimator.getUniqueTargets();\n+    TxMap txMap;\n+\n+    auto filter = [&](UniValue& value) {\n+        bool keep = true;\n+        const UniValue& tx = value[\"tx\"];\n+        if (tx.isObject()) {\n+            auto inserted = txMap.emplace(uint256S(tx[\"hash\"].get_str()),\n+                TxData(tx[\"fee\"].get_int64(), tx[\"size\"].get_int(), tx[\"height\"].get_int()));\n+            if (options.cross && !UpdateCross(*inserted.first, targets, estimator)) {\n+                keep = false;\n+            }\n+        }\n+\n+        const UniValue& block = value[\"block\"];\n+        if (block.isObject()) {\n+            int blockHeight = block[\"height\"].get_int();\n+            const auto& txs = value[\"txs\"].getValues();\n+            for (const UniValue& tx : txs) {",
    "path": "src/test/fee_est/fee_est.cpp",
    "position": null,
    "original_position": 302,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "56446378f5d0c2bdeb7a45fa7382ccd58c9b994c",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`tx` here shadows an already existing local variable. Please choose another name :-)",
    "created_at": "2018-10-11T05:42:56Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224320246",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224320246"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224320246"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224320246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 302,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233022302",
    "pull_request_review_id": 174343169,
    "id": 233022302,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzAyMjMwMg==",
    "diff_hunk": "@@ -0,0 +1,227 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees_input.h>\n+\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <policy/fees.h>\n+#include <streams.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+\n+#include <univalue.h>\n+\n+struct FeeEstInput::Block {\n+    UniValue json_txs{UniValue::VARR};\n+    CBlockPolicyEstimator::Block* est_block = nullptr;\n+};\n+\n+FeeEstInput::FeeEstInput(CBlockPolicyEstimator& estimator) : estimator(estimator) {}\n+\n+void FeeEstInput::processTx(const uint256& hash,\n+    unsigned int height,\n+    CAmount fee,\n+    size_t size,\n+    Block* block,\n+    bool valid)\n+{\n+    estimator.processTx(hash, height, fee, size, block ? block->est_block : nullptr, valid);\n+    if (log) {\n+        UniValue tx(UniValue::VOBJ);\n+        tx.pushKV(\"hash\", hash.ToString());\n+        tx.pushKV(\"height\", int(height));\n+        tx.pushKV(\"fee\", fee);\n+        tx.pushKV(\"size\", uint64_t(size));\n+        if (block) {\n+            block->json_txs.push_back(std::move(tx));\n+        } else {\n+            UniValue value(UniValue::VOBJ);\n+            value.pushKV(\"tx\", std::move(tx));",
    "path": "src/policy/fees_input.cpp",
    "position": null,
    "original_position": 42,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "50cd9b1cb7d03a81140d8a59698eba8d06b89612",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`move` not needed?",
    "created_at": "2018-11-13T12:46:12Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r233022302",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233022302"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r233022302"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233022302/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 42,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233022355",
    "pull_request_review_id": 174343244,
    "id": 233022355,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzAyMjM1NQ==",
    "diff_hunk": "@@ -0,0 +1,227 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees_input.h>\n+\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <policy/fees.h>\n+#include <streams.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+\n+#include <univalue.h>\n+\n+struct FeeEstInput::Block {\n+    UniValue json_txs{UniValue::VARR};\n+    CBlockPolicyEstimator::Block* est_block = nullptr;\n+};\n+\n+FeeEstInput::FeeEstInput(CBlockPolicyEstimator& estimator) : estimator(estimator) {}\n+\n+void FeeEstInput::processTx(const uint256& hash,\n+    unsigned int height,\n+    CAmount fee,\n+    size_t size,\n+    Block* block,\n+    bool valid)\n+{\n+    estimator.processTx(hash, height, fee, size, block ? block->est_block : nullptr, valid);\n+    if (log) {\n+        UniValue tx(UniValue::VOBJ);\n+        tx.pushKV(\"hash\", hash.ToString());\n+        tx.pushKV(\"height\", int(height));\n+        tx.pushKV(\"fee\", fee);\n+        tx.pushKV(\"size\", uint64_t(size));\n+        if (block) {\n+            block->json_txs.push_back(std::move(tx));",
    "path": "src/policy/fees_input.cpp",
    "position": null,
    "original_position": 39,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "50cd9b1cb7d03a81140d8a59698eba8d06b89612",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`move` not needed?",
    "created_at": "2018-11-13T12:46:25Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r233022355",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233022355"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r233022355"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233022355/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 39,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/264029972",
    "pull_request_review_id": 212593904,
    "id": 264029972,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDAyOTk3Mg==",
    "diff_hunk": "@@ -546,11 +545,13 @@ CBlockPolicyEstimator::~CBlockPolicyEstimator()\n {\n }\n \n-void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate)",
    "path": "src/policy/fees.cpp",
    "position": 30,
    "original_position": 12,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "e2330472f0ed7466e951d99f1c707d1852289cd1",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: this renaming is succinct, yes, but also less communicative.",
    "created_at": "2019-03-10T09:19:41Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r264029972",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/264029972"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r264029972"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/264029972/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 538,
    "original_line": 538,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/264030102",
    "pull_request_review_id": 212594047,
    "id": 264030102,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDAzMDEwMg==",
    "diff_hunk": "@@ -0,0 +1,330 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees.h>\n+#include <policy/fees_input.h>\n+#include <util/system.h>\n+\n+#include <univalue.h>\n+\n+#include <fstream>\n+#include <random>\n+#include <stdio.h>\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+std::string Usage()\n+{\n+    std::string usage = \"Usage: fee_est [options] <estlog.txt>\\n\";\n+    usage += HelpMessageGroup(\"Options:\");\n+    usage += HelpMessageOpt(\"-?, -help\", \"This help message\");\n+    usage += HelpMessageOpt(\"-ograph=<graph.html>\", \"Generate target vs feerate graph output after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-odat=<fee_estimates.dat>\", \"Save fee estimator state after after replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-idat=<fee_estimates.dat>\", \"Load fee estimator state after before replaying transaction log.\");\n+    usage += HelpMessageOpt(\"-dat=<fee_estimates.dat>\", \"Shortcut for -idat=<fee_estimates.dat> -odat=<fee_estimates.dat>\");\n+    usage += HelpMessageOpt(\"-cross\", \"Treat half the transactions from the log as test data and print cross-validation statistics.\");\n+    return usage;\n+}\n+\n+struct Options {\n+    std::string logFileIn;\n+    std::string dataFileIn;\n+    std::string dataFileOut;\n+    std::string graphFileOut;\n+    bool cross = false;\n+    bool help = false;\n+    bool error = false;\n+};\n+\n+Options ParseCommandLine(int argc, char** argv)\n+{\n+    auto match = [&](const char* arg, const char* name, const char** value = nullptr) {\n+        if (arg[0] != '-') return false;\n+        size_t n = strlen(name);\n+        if (strncmp(arg + 1, name, n) != 0) return false;\n+        if (value) return (*value = arg[n + 1] == '=' ? arg + n + 2 : nullptr) != nullptr;\n+        return arg[n + 1] == '\\0';\n+    };\n+\n+    Options options;\n+    for (int i = 1; i < argc; ++i) {\n+        const char* arg = argv[i];\n+        const char* value;\n+        if (match(arg, \"ograph\", &value)) {\n+            options.graphFileOut = value;\n+        } else if (match(arg, \"odat\", &value)) {\n+            options.dataFileOut = value;\n+        } else if (match(arg, \"idat\", &value)) {\n+            options.dataFileIn = value;\n+        } else if (match(arg, \"dat\", &value)) {\n+            options.dataFileIn = options.dataFileOut = value;\n+        } else if (match(arg, \"cross\")) {\n+            options.cross = true;\n+        } else if (match(arg, \"help\") || match(arg, \"h\") || match(arg, \"?\")) {\n+            options.help = true;\n+        } else if (arg[0] != '-' && options.logFileIn.empty()) {\n+            options.logFileIn = arg;\n+        } else {\n+            fprintf(stderr, \"Error: unexpected argument: '%s'\\n\", arg);\n+            options.error = true;\n+        }\n+    }\n+\n+    if (options.logFileIn.empty() && !options.help) {\n+        fprintf(stderr, \"Error: missing required log file argument.\\n\");\n+        options.error = true;\n+    }\n+\n+    return options;\n+}\n+\n+struct TxData {\n+    TxData(CAmount fee, size_t size, int height) : fee(fee), size(size), height(height) {}\n+    CAmount fee;\n+    size_t size;\n+    int height;\n+    int expectedBlocks = -1;\n+    int actualBlocks = -1;\n+};\n+\n+using TxMap = std::map<uint256, TxData>;\n+\n+const char* const GRAPH_HTML = R\"(<!DOCTYPE html>",
    "path": "src/test/fee_est/fee_est.cpp",
    "position": 94,
    "original_position": 93,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "e2330472f0ed7466e951d99f1c707d1852289cd1",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: maybe load this from a separate file?",
    "created_at": "2019-03-10T09:23:45Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r264030102",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/264030102"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r264030102"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/264030102/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 94,
    "original_line": 94,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592827395",
    "pull_request_review_id": 610356728,
    "id": 592827395,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjgyNzM5NQ==",
    "diff_hunk": "@@ -0,0 +1,222 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees_input.h>\n+\n+#include <chainparams.h>\n+#include <clientversion.h>\n+#include <policy/fees.h>\n+#include <streams.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+\n+#include <univalue.h>\n+\n+namespace {\n+UniValue TxLog(const uint256& hash, unsigned int height, CAmount fee, size_t size)\n+{\n+    UniValue tx(UniValue::VOBJ);\n+    tx.pushKV(\"hash\", hash.ToString());\n+    tx.pushKV(\"height\", int(height));\n+    tx.pushKV(\"fee\", fee);\n+    tx.pushKV(\"size\", uint64_t(size));\n+    return tx;\n+}\n+} // namespace\n+\n+FeeEstInput::FeeEstInput(CBlockPolicyEstimator& estimator) : estimator(estimator) {}\n+\n+void FeeEstInput::processTx(const uint256& hash, unsigned int height, CAmount fee, size_t size, bool valid)\n+{\n+    estimator.processTx(hash, height, fee, size, valid);\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        value.pushKV(\"tx\", TxLog(hash, height, fee, size));\n+        value.pushKV(\"valid\", UniValue(valid));\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::processBlock(unsigned int block_height, const AddTxsFn& add_txs)\n+{\n+    UniValue json_txs{UniValue::VARR};\n+    estimator.processBlock(block_height, [&](const AddTxFn& add_tx) {\n+        add_txs([&](const uint256& hash, unsigned int height, CAmount fee, size_t size) {\n+            add_tx(hash, height, fee, size);\n+            if (log) json_txs.push_back(TxLog(hash, height, fee, size));\n+        });\n+    });\n+    if (log) {\n+        UniValue json(UniValue::VOBJ);\n+        UniValue json_block(UniValue::VOBJ);\n+        json_block.pushKV(\"height\", int64_t(block_height));\n+        json.pushKV(\"block\", json_block);\n+        json.pushKV(\"txs\", std::move(json_txs));\n+        json.pushKV(\"time\", GetTime());\n+        *log << json.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::removeTx(const uint256& hash, bool in_block)\n+{\n+    estimator.removeTx(hash, in_block);\n+\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        UniValue removeTx(UniValue::VOBJ);\n+        removeTx.pushKV(\"hash\", hash.ToString());\n+        removeTx.pushKV(\"inBlock\", UniValue(in_block));\n+        value.pushKV(\"removeTx\", removeTx);\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+void FeeEstInput::flushUnconfirmed()\n+{\n+    estimator.FlushUnconfirmed();\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        UniValue flush(UniValue::VARR);\n+        value.pushKV(\"flush\", flush);\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+}\n+\n+bool FeeEstInput::writeData(const fs::path& filename)\n+{\n+    CAutoFile file(fsbridge::fopen(filename, \"wb\"), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, filename.string());\n+        return false;\n+    }\n+    estimator.Write(file);\n+    return true;\n+}\n+\n+bool FeeEstInput::readData(const fs::path& filename)\n+{\n+    CAutoFile file(fsbridge::fopen(filename, \"rb\"), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull() || !estimator.Read(file)) {\n+        return false;\n+    }\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        std::ifstream data(filename.string(), std::ifstream::binary);\n+        value.pushKV(\n+            \"read\", HexStr(std::string(std::istreambuf_iterator<char>(data), std::istreambuf_iterator<char>())));\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+    return true;\n+}\n+\n+bool FeeEstInput::writeLog(const std::string& filename)\n+{\n+    if (log) {\n+        UniValue value(UniValue::VOBJ);\n+        value.pushKV(\"stop\", Params().NetworkIDString());\n+        value.pushKV(\"time\", GetTime());\n+        *log << value.write() << std::endl;\n+    }\n+\n+    if (filename.empty()) {\n+        log.reset();\n+    } else {\n+        log = MakeUnique<std::ofstream>(filename, std::ofstream::out | std::ofstream::app);",
    "path": "src/policy/fees_input.cpp",
    "position": null,
    "original_position": 130,
    "commit_id": "84f5df64005de6b6c0f651f2f6b0e470737fed4e",
    "original_commit_id": "2c512ff0729f89aa47019009534d3958ec18f42b",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Please [use `std::make_unique` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/util/memory.h#L13).",
    "created_at": "2021-03-12T00:32:22Z",
    "updated_at": "2021-04-13T16:29:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r592827395",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592827395"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10443#discussion_r592827395"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10443"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592827395/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 130,
    "side": "RIGHT"
  }
]