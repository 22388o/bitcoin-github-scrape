paveljanik,2017-06-13T20:46:19Z,"This is interesting but still no comment.\n\nConcept ACK\n\nI'll play around with this a bit.\n\n```\nWshadow statistics: \n   1 policy/fees_input.cpp:127:23: warning: declaration shadows a local variable [-Wshadow]\n   1 policy/fees_input.cpp:197:38: warning: declaration shadows a local variable [-Wshadow]\n   1 policy/fees_input.cpp:229:22: warning: declaration shadows a local variable",https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-308243389,308243389,
paveljanik,2017-06-14T07:21:25Z,"When estimate log doesn't have enough data, `fee_est` is generating empty data in the HTML file. Emit some warning in such cases?\n",https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-308342619,308342619,
paveljanik,2017-06-14T07:24:27Z,"For perfect output, there should be 3rd dimension - time or current block height when the tx was first seen :-)",https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-308343380,308343380,
jnewbery,2017-06-28T12:05:12Z,"Concept ACK. I think this could be a useful tool.\n\nCould this be split into two PRs to aid reviewers? The first PR would cover the `-estlog` option and writing the fee estimation data to disk. The second PR would be for a tool to read and graph the logs.\n\nParsing and graphing json files seems like a problem that has probably been solved many times before. If I was approaching this, I'd loo",https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-311640095,311640095,
laanwj,2018-04-10T18:20:01Z,"> Could this be split into two PRs to aid reviewers? The first PR would cover the -estlog option and writing the fee estimation data to disk. The second PR would be for a tool to read and graph the logs.\n\nI think this is useful.\n\nHowever I'm not sure the analysis tool belongs in this repository. As it's specific to developers debugging the fee estimation code it's not something we want to ",https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-380199151,380199151,
ryanofsky,2018-04-10T18:53:12Z,"Agree that fee_est tool shouldn't be installed, since it's a tool specifically for made for modifying and debugging fee estimation code.\n\nBut it would be awkward to use and maintain from a separate repository because it links and calls into the fee estimation code. (The tool works by piping historical data into the fee estimator so it's possible to make experimental changes to fee estimation a",https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-380209281,380209281,
laanwj,2018-05-14T14:18:30Z,"> But it would be awkward to use and maintain from a separate repository because it links and calls into the fee estimation code. \n\nYes, I agree, that's unfortunately true. That part needs to stay in the repository with the rest of the code.\n\n> Parsing and graphing json files seems like a problem that has probably been solved many times before. If I was approaching this, I'd look at implem",https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-388833486,388833486,
DrahtBot,2018-07-29T15:18:00Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 54 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-408684675,408684675,
DrahtBot,2018-09-21T13:33:26Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23497](https://github.com/bitcoin/bitcoin/pull/23497) (Add `src/node/` and `src/wallet/` code to `node::` and `wallet::`",https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-423532381,423532381,
ryanofsky,2019-01-07T17:13:57Z,"Rebased 51163cee78f32fb6311bf620266c42fd115ba98f -> 8b9c3da3cf077051d6b1112ba4adbadd60096d57 ([pr/fee.16](https://github.com/ryanofsky/bitcoin/commits/pr/fee.16) -> [pr/fee.17](https://github.com/ryanofsky/bitcoin/commits/pr/fee.17)) due to conflict with #13341\nRebased 8b9c3da3cf077051d6b1112ba4adbadd60096d57 -> 4bcecdb666d1dbc90201dccbfee27a234f88c960 ([pr/fee.17](https://github.com/ryanofsky/b",https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-452008993,452008993,
sipa,2019-05-22T21:34:30Z,"Concept ACK, but it seems the HTML code (or even the conversion to HTML) could live outside the repo?",https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-494982393,494982393,
ryanofsky,2019-06-08T12:48:11Z,"This PR has some overlap with @kallewoof's [mff](https://github.com/kallewoof/mff) utility. One difference is that this creates logs in [json-lines](http://jsonlines.org/) format and only logs mempool data needed to run fee estimation code reproducibly, while mff uses a custom format and logs additional information.\n\n---\n\nRebased ccc44e115237b5337869ddb738ecb1af04c52f61 -> 6251342fc77cb49e",https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-500121675,500121675,
jonatack,2020-12-02T10:41:14Z,"Discovered this PR thanks to DrahtBot's ""needs rebase"" notifications.\n\nConcept ACK, interesting idea for dev tooling in the tests or contrib.",https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-737147179,737147179,
ryanofsky,2021-03-23T04:55:48Z,"Rebased 2c512ff0729f89aa47019009534d3958ec18f42b -> de8a2d80f74d33067a3b532368cca877fc65e7d2 ([`pr/fee.60`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.60) -> [`pr/fee.61`](https://github.com/ryanofsky/bitcoin/commits/pr/fee.61), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/fee.60-rebase..pr/fee.61)) due to conflicts with #18766\nUpdated de8a2d80f74d33067a3b532368cca877fc65e7",https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-804616485,804616485,
DrahtBot,2021-12-01T18:41:03Z,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/10443#issuecomment-983949408,983949408,
practicalswift,2018-09-11T14:52:49Z,"```\n2018-09-11 16:31:38 mdl(pr=10443): src/test/fee_est/README.md:8: MD034 Bare URL used\n2018-09-11 16:31:38 mdl(pr=10443): src/test/fee_est/README.md:9: MD034 Bare URL used\n```",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r216699784,216699784,src/test/fee_est/README.md
practicalswift,2018-09-15T07:58:24Z,Mod by zero here.,https://github.com/bitcoin/bitcoin/pull/10443#discussion_r217878986,217878986,src/test/fee_est/fee_est.cpp
practicalswift,2018-09-21T08:37:49Z,"```\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/policy/fees.h:199:10: warning: function 'CBlockPolicyEstimator::processTx' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]\n```",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219422492,219422492,src/policy/fees.h
practicalswift,2018-09-21T08:38:07Z,"```\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/policy/fees.cpp:17:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]\n```",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219422569,219422569,src/policy/fees.cpp
practicalswift,2018-09-21T08:39:10Z,"```\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/test/fee_est/fee_est.cpp:149:17: warning: parameter 'pool' is unused [misc-unused-parameters]\n```",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219422843,219422843,src/test/fee_est/fee_est.cpp
practicalswift,2018-09-21T08:39:24Z,"```\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/test/fee_est/fee_est.cpp:163:28: warning: passing result of std::move() as a const reference argument; no move will actually happen [hicpp-move-const-arg]\n```",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219422905,219422905,src/test/fee_est/fee_est.cpp
practicalswift,2018-09-21T08:40:03Z,"```\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/test/fee_est/fee_est.cpp:177:21: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c]\n```",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423092,219423092,src/test/fee_est/fee_est.cpp
practicalswift,2018-09-21T08:40:17Z,"```\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/test/fee_est/fee_est.cpp:185:9: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]\n```",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423154,219423154,src/test/fee_est/fee_est.cpp
practicalswift,2018-09-21T08:40:35Z,"```\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/test/fee_est/fee_est.cpp:229:38: warning: parameter 'targets' is unused [misc-unused-parameters]\n```",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423229,219423229,src/test/fee_est/fee_est.cpp
practicalswift,2018-09-21T08:40:44Z,"```\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/test/fee_est/fee_est.cpp:230:28: warning: parameter 'estimator' is unused [misc-unused-parameters]\n```",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423270,219423270,src/test/fee_est/fee_est.cpp
practicalswift,2018-09-21T08:40:52Z,"```\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/test/fee_est/fee_est.cpp:231:17: warning: parameter 'pool' is unused [misc-unused-parameters]\n```",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423297,219423297,src/test/fee_est/fee_est.cpp
practicalswift,2018-09-21T08:42:20Z,"```\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/policy/fees_input.cpp:126:13: warning: use std::make_unique instead [modernize-make-unique]\n```\n\n`MakeUnique` in our case :-)",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423710,219423710,src/policy/fees_input.cpp
practicalswift,2018-09-21T08:42:53Z,"```\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/policy/fees_input.cpp:143:87: warning: the parameter 'filter' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]\n```",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423856,219423856,src/policy/fees_input.cpp
practicalswift,2018-09-21T08:43:06Z,"```\n2018-09-20 04:48:56 clang-tidy(pr=10443): src/policy/fees_input.cpp:198:13: warning: consider replacing 'unsigned short' with 'uint16' [google-runtime-int]\n```",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219423905,219423905,src/policy/fees_input.cpp
practicalswift,2018-09-21T08:43:28Z,"```\n2018-09-20 05:13:44 cppcheck(pr=10443): [src/policy/fees_input.h:23]: (style) Class 'FeeEstInput' has a constructor with 1 argument that is not explicit.\n```",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219424018,219424018,src/policy/fees_input.h
practicalswift,2018-09-21T08:43:43Z,"```\n2018-09-20 05:13:44 cppcheck(pr=10443): [src/policy/fees.cpp:17]: (style) Struct 'Block' has a constructor with 1 argument that is not explicit.\n```",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219424086,219424086,src/policy/fees.cpp
practicalswift,2018-09-23T08:25:35Z,"```\n2018-09-22 22:51:38 cpplint(pr=10443): src/policy/fees.cpp:17:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]\n```",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219691822,219691822,src/policy/fees.cpp
practicalswift,2018-09-23T08:26:48Z,"```\n2018-09-22 22:51:38 cpplint(pr=10443): src/policy/fees_input.cpp:198:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]\n```",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219691848,219691848,src/policy/fees_input.cpp
practicalswift,2018-09-23T08:27:39Z,"```\n2018-09-22 22:51:38 cpplint(pr=10443): src/policy/fees_input.h:23:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]\n```",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r219691867,219691867,src/policy/fees_input.h
practicalswift,2018-10-11T05:32:58Z,Isn't `height` guaranteed to be non-negative? Should be `unsigned int`?,https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224318978,224318978,src/policy/fees_input.h
practicalswift,2018-10-11T05:34:13Z,The variable `file` shadows an already existing local variable. Please choose another name :-),https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319126,224319126,src/policy/fees_input.cpp
practicalswift,2018-10-11T05:35:42Z,`tx` shadows a local variable. Please choose another name :-),https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319364,224319364,src/policy/fees_input.cpp
practicalswift,2018-10-11T05:36:28Z,`filename` shadows another variable. Please use another name :-),https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319465,224319465,src/policy/fees_input.cpp
practicalswift,2018-10-11T05:36:47Z,Same here: shadows another local variable :-),https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319504,224319504,src/policy/fees_input.cpp
practicalswift,2018-10-11T05:38:58Z,An implicit signedness changing conversion takes place here. Avoid or make it explicit :-),https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319764,224319764,src/test/fee_est/fee_est.cpp
practicalswift,2018-10-11T05:39:14Z,An implicit signedness changing conversion takes place here. Avoid or make it explicit :-),https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319785,224319785,src/test/fee_est/fee_est.cpp
practicalswift,2018-10-11T05:40:09Z,An implicit signedness changing conversion takes place here. Avoid or make it explicit :-),https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319898,224319898,src/test/fee_est/fee_est.cpp
practicalswift,2018-10-11T05:40:44Z,An implicit signedness changing conversion takes place here. Avoid or make it explicit :-),https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224319971,224319971,src/test/fee_est/fee_est.cpp
practicalswift,2018-10-11T05:41:26Z,An implicit signedness changing conversion takes place here. Avoid or make it explicit :-),https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224320065,224320065,src/test/fee_est/fee_est.cpp
practicalswift,2018-10-11T05:42:24Z,The unused parameter `estimator` can be removed?,https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224320184,224320184,src/test/fee_est/fee_est.cpp
practicalswift,2018-10-11T05:42:56Z,`tx` here shadows an already existing local variable. Please choose another name :-),https://github.com/bitcoin/bitcoin/pull/10443#discussion_r224320246,224320246,src/test/fee_est/fee_est.cpp
practicalswift,2018-11-13T12:46:12Z,`move` not needed?,https://github.com/bitcoin/bitcoin/pull/10443#discussion_r233022302,233022302,src/policy/fees_input.cpp
practicalswift,2018-11-13T12:46:25Z,`move` not needed?,https://github.com/bitcoin/bitcoin/pull/10443#discussion_r233022355,233022355,src/policy/fees_input.cpp
Empact,2019-03-10T09:19:41Z,"nit: this renaming is succinct, yes, but also less communicative.",https://github.com/bitcoin/bitcoin/pull/10443#discussion_r264029972,264029972,src/policy/fees.cpp
Empact,2019-03-10T09:23:45Z,nit: maybe load this from a separate file?,https://github.com/bitcoin/bitcoin/pull/10443#discussion_r264030102,264030102,src/test/fee_est/fee_est.cpp
fanquake,2021-03-12T00:32:22Z,Please [use `std::make_unique` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/util/memory.h#L13).,https://github.com/bitcoin/bitcoin/pull/10443#discussion_r592827395,592827395,src/policy/fees_input.cpp
