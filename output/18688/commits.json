[
  {
    "sha": "fa66280396890bf616cc75432603111e1046d496",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTY2MjgwMzk2ODkwYmY2MTZjYzc1NDMyNjAzMTExZTEwNDZkNDk2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-17T19:44:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-17T19:43:23Z"
      },
      "message": "fuzz: Run in parallel",
      "tree": {
        "sha": "07dceca9f5c2d4722468cee4726aed9056b210b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07dceca9f5c2d4722468cee4726aed9056b210b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa66280396890bf616cc75432603111e1046d496",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhavAv+O4KWyTAk4GETztlRBpMO2byNaKiqiLAHs4vpqedIPpw9lHfqqiqULDwh\nKmSmJ1W/gUTsRrDXCxQzjbQ8Z0AtGIbiAzYs3Vf7ete+0QGkmqGOKkJC1RqbFDOo\nb1JjDSni92AtefxAml3DduTCaU07u8qyrHsd0JynKngmNhMyi/2DPL4pQP5wBFru\nWOn4spmHfPv7TvbVsS4liLAVnFwfWFPPsHmc0aLBU26/ADMNjuuKlEbsZQFMcH+k\nJyhFZYv1b+KFMoC7xN02BpCpg6C5aX95DeNITdxc62B5xgdvpzDGJv1WMkwGtn+v\nJcwDgtqym6sTyxwuN2oGLdMGNKUPfxNvqK6MOjD5FtoCYv7jHXvEDNpx5epkMI8M\nakfezuUVfEJ/glIHuCeYztiPYPV8oRxGbVIPtdEIFKW4EXaRL2ZcYJ9qHLwaBSNt\nJhO4Lh0vo80Hubb47jroKpMdT7cajSL9WC0bq+PqiPjoyKFuMuWpbl4Qqvo/OQPR\nsaRngxRy\n=gx5l\n-----END PGP SIGNATURE-----",
        "payload": "tree 07dceca9f5c2d4722468cee4726aed9056b210b5\nparent c54295c1a2068aab5ea99c0a40eb716e1194d5b6\nauthor MarcoFalke <falke.marco@gmail.com> 1587152669 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1587152603 -0400\n\nfuzz: Run in parallel\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa66280396890bf616cc75432603111e1046d496",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa66280396890bf616cc75432603111e1046d496",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa66280396890bf616cc75432603111e1046d496/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c54295c1a2068aab5ea99c0a40eb716e1194d5b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c54295c1a2068aab5ea99c0a40eb716e1194d5b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c54295c1a2068aab5ea99c0a40eb716e1194d5b6"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 50,
      "deletions": 23
    },
    "files": [
      {
        "sha": "e2454c4237bf621216a815baa40cf817b4f87a0f",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 50,
        "deletions": 23,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa66280396890bf616cc75432603111e1046d496/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa66280396890bf616cc75432603111e1046d496/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=fa66280396890bf616cc75432603111e1046d496",
        "patch": "@@ -5,12 +5,13 @@\n \"\"\"Run fuzz test targets.\n \"\"\"\n \n+from concurrent.futures import ThreadPoolExecutor, as_completed\n import argparse\n import configparser\n+import logging\n import os\n-import sys\n import subprocess\n-import logging\n+import sys\n \n \n def main():\n@@ -35,6 +36,12 @@ def main():\n         '--exclude',\n         help=\"A comma-separated list of targets to exclude\",\n     )\n+    parser.add_argument(\n+        '--par',\n+        type=int,\n+        default=4,\n+        help='How many targets to merge or execute in parallel.',\n+    )\n     parser.add_argument(\n         'seed_dir',\n         help='The seed corpus to run on (must contain subfolders for each fuzz target).',\n@@ -124,25 +131,29 @@ def main():\n         logging.error(\"subprocess timed out: Currently only libFuzzer is supported\")\n         sys.exit(1)\n \n-    if args.m_dir:\n-        merge_inputs(\n+    with ThreadPoolExecutor(max_workers=args.par) as fuzz_pool:\n+        if args.m_dir:\n+            merge_inputs(\n+                fuzz_pool=fuzz_pool,\n+                corpus=args.seed_dir,\n+                test_list=test_list_selection,\n+                build_dir=config[\"environment\"][\"BUILDDIR\"],\n+                merge_dir=args.m_dir,\n+            )\n+            return\n+\n+        run_once(\n+            fuzz_pool=fuzz_pool,\n             corpus=args.seed_dir,\n             test_list=test_list_selection,\n             build_dir=config[\"environment\"][\"BUILDDIR\"],\n-            merge_dir=args.m_dir,\n+            use_valgrind=args.valgrind,\n         )\n-        return\n-\n-    run_once(\n-        corpus=args.seed_dir,\n-        test_list=test_list_selection,\n-        build_dir=config[\"environment\"][\"BUILDDIR\"],\n-        use_valgrind=args.valgrind,\n-    )\n \n \n-def merge_inputs(*, corpus, test_list, build_dir, merge_dir):\n+def merge_inputs(*, fuzz_pool, corpus, test_list, build_dir, merge_dir):\n     logging.info(\"Merge the inputs in the passed dir into the seed_dir. Passed dir {}\".format(merge_dir))\n+    jobs = []\n     for t in test_list:\n         args = [\n             os.path.join(build_dir, 'src', 'test', 'fuzz', t),\n@@ -153,12 +164,20 @@ def merge_inputs(*, corpus, test_list, build_dir, merge_dir):\n         ]\n         os.makedirs(os.path.join(corpus, t), exist_ok=True)\n         os.makedirs(os.path.join(merge_dir, t), exist_ok=True)\n-        logging.debug('Run {} with args {}'.format(t, args))\n-        output = subprocess.run(args, check=True, stderr=subprocess.PIPE, universal_newlines=True).stderr\n-        logging.debug('Output: {}'.format(output))\n \n+        def job(t, args):\n+            output = 'Run {} with args {}\\n'.format(t, \" \".join(args))\n+            output += subprocess.run(args, check=True, stderr=subprocess.PIPE, universal_newlines=True).stderr\n+            logging.debug(output)\n+\n+        jobs.append(fuzz_pool.submit(job, t, args))\n+\n+    for future in as_completed(jobs):\n+        future.result()\n \n-def run_once(*, corpus, test_list, build_dir, use_valgrind):\n+\n+def run_once(*, fuzz_pool, corpus, test_list, build_dir, use_valgrind):\n+    jobs = []\n     for t in test_list:\n         corpus_path = os.path.join(corpus, t)\n         os.makedirs(corpus_path, exist_ok=True)\n@@ -169,18 +188,26 @@ def run_once(*, corpus, test_list, build_dir, use_valgrind):\n         ]\n         if use_valgrind:\n             args = ['valgrind', '--quiet', '--error-exitcode=1'] + args\n-        logging.debug('Run {} with args {}'.format(t, args))\n-        result = subprocess.run(args, stderr=subprocess.PIPE, universal_newlines=True)\n-        output = result.stderr\n-        logging.debug('Output: {}'.format(output))\n+\n+        def job(t, args):\n+            output = 'Run {} with args {}'.format(t, args)\n+            result = subprocess.run(args, stderr=subprocess.PIPE, universal_newlines=True)\n+            output += result.stderr\n+            return output, result\n+\n+        jobs.append(fuzz_pool.submit(job, t, args))\n+\n+    for future in as_completed(jobs):\n+        output, result = future.result()\n+        logging.debug(output)\n         try:\n             result.check_returncode()\n         except subprocess.CalledProcessError as e:\n             if e.stdout:\n                 logging.info(e.stdout)\n             if e.stderr:\n                 logging.info(e.stderr)\n-            logging.info(\"Target \\\"{}\\\" failed with exit code {}: {}\".format(t, e.returncode, \" \".join(args)))\n+            logging.info(\"Target \\\"{}\\\" failed with exit code {}\".format(\" \".join(result.args), e.returncode))\n             sys.exit(1)\n \n "
      }
    ]
  }
]