[
  {
    "sha": "44407100ff9b478d6131a1c38ee993b50b1830df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDQwNzEwMGZmOWI0NzhkNjEzMWExYzM4ZWU5OTNiNTBiMTgzMGRm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-04T21:59:30Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T17:25:57Z"
      },
      "message": "Replace relevant services logic with a function suite.\n\nAdds HasAllRelevantServices and GetRelevantServices, which check\nfor NETWORK|WITNESS.\n\nThis changes the following:\n * Removes nRelevantServices from CConnman, disconnecting it a bit\n   more from protocol-level logic.\n * Replaces our sometimes-connect-to-!WITNESS-nodes logic with\n   simply always requiring WITNESS|NETWORK for outbound non-feeler\n   connections (feelers still only require NETWORK).\n * This has the added benefit of removing nServicesExpected from\n   CNode - instead letting net_processing's VERSION message\n   handling simply check HasAllRelevantServices.\n * This implies we believe WITNESS nodes to continue to be a\n   significant majority of nodes on the network, but also because\n   we cannot sync properly from !WITNESS nodes, it is strange to\n   continue using our valuable outbound slots on them.\n * In order to prevent this change from preventing connection to\n   -connect= nodes which have !WITNESS, -connect nodes are now\n   given the \"addnode\" flag. This also allows outbound connections\n   to !NODE_NETWORK nodes for -connect nodes (which was already true\n   of addnodes).\n * Has the (somewhat unintended) consequence of changing one of the\n   eviction metrics from the same\n   sometimes-connect-to-!WITNESS-nodes metric to requiring\n   HasRelevantServices.\n\nThis should make NODE_NETWORK_LIMITED much simpler to implement.",
      "tree": {
        "sha": "aa6c24a3945d43aa86504922051a6a499aa866f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa6c24a3945d43aa86504922051a6a499aa866f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44407100ff9b478d6131a1c38ee993b50b1830df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44407100ff9b478d6131a1c38ee993b50b1830df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44407100ff9b478d6131a1c38ee993b50b1830df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44407100ff9b478d6131a1c38ee993b50b1830df/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "167cef8082e25e3ebbcd602814f3012772d49d16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/167cef8082e25e3ebbcd602814f3012772d49d16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/167cef8082e25e3ebbcd602814f3012772d49d16"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 55,
      "deletions": 48
    },
    "files": [
      {
        "sha": "951800f6c28a829224747cae186f7a61954b142b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44407100ff9b478d6131a1c38ee993b50b1830df/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44407100ff9b478d6131a1c38ee993b50b1830df/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=44407100ff9b478d6131a1c38ee993b50b1830df",
        "patch": "@@ -815,7 +815,6 @@ void InitLogging()\n \n namespace { // Variables internal to initialization process only\n \n-ServiceFlags nRelevantServices = NODE_NETWORK;\n int nMaxConnections;\n int nUserMaxConnections;\n int nFD;\n@@ -1604,9 +1603,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         // Note that setting NODE_WITNESS is never required: the only downside from not\n         // doing so is that after activation, no upgraded nodes will fetch from you.\n         nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);\n-        // Only care about others providing witness capabilities if there is a softfork\n-        // defined.\n-        nRelevantServices = ServiceFlags(nRelevantServices | NODE_WITNESS);\n     }\n \n     // ********************************************************* Step 10: import blocks\n@@ -1656,7 +1652,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     CConnman::Options connOptions;\n     connOptions.nLocalServices = nLocalServices;\n-    connOptions.nRelevantServices = nRelevantServices;\n     connOptions.nMaxConnections = nMaxConnections;\n     connOptions.nMaxOutbound = std::min(MAX_OUTBOUND_CONNECTIONS, connOptions.nMaxConnections);\n     connOptions.nMaxAddnode = MAX_ADDNODE_CONNECTIONS;"
      },
      {
        "sha": "581151b4bd0133c86f70baa4ff1ae06ace6a2ea8",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 30,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44407100ff9b478d6131a1c38ee993b50b1830df/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44407100ff9b478d6131a1c38ee993b50b1830df/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=44407100ff9b478d6131a1c38ee993b50b1830df",
        "patch": "@@ -444,7 +444,6 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n         CAddress addr_bind = GetBindAddress(hSocket);\n         CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false);\n-        pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n         pnode->AddRef();\n \n         return pnode;\n@@ -985,7 +984,7 @@ bool CConnman::AttemptToEvictConnection()\n                 continue;\n             NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n                                                node->nLastBlockTime, node->nLastTXTime,\n-                                               (node->nServices & nRelevantServices) == nRelevantServices,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n                                                node->fRelayTxes, node->pfilter != nullptr, node->addr, node->nKeyedNetGroup};\n             vEvictionCandidates.push_back(candidate);\n         }\n@@ -1602,7 +1601,7 @@ void CConnman::ThreadDNSAddressSeed()\n         LOCK(cs_vNodes);\n         int nRelevant = 0;\n         for (auto pnode : vNodes) {\n-            nRelevant += pnode->fSuccessfullyConnected && ((pnode->nServices & nRelevantServices) == nRelevantServices);\n+            nRelevant += pnode->fSuccessfullyConnected && HasAllDesirableServiceFlags(pnode->nServices);\n         }\n         if (nRelevant >= 2) {\n             LogPrintf(\"P2P peers available. Skipped DNS seeding.\\n\");\n@@ -1624,7 +1623,7 @@ void CConnman::ThreadDNSAddressSeed()\n         } else {\n             std::vector<CNetAddr> vIPs;\n             std::vector<CAddress> vAdd;\n-            ServiceFlags requiredServiceBits = nRelevantServices;\n+            ServiceFlags requiredServiceBits = GetDesirableServiceFlags(NODE_NONE);\n             std::string host = GetDNSHost(seed, &requiredServiceBits);\n             CNetAddr resolveSource;\n             if (!resolveSource.SetInternal(host)) {\n@@ -1705,7 +1704,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             for (const std::string& strAddr : connect)\n             {\n                 CAddress addr(CService(), NODE_NONE);\n-                OpenNetworkConnection(addr, false, nullptr, strAddr.c_str());\n+                OpenNetworkConnection(addr, false, nullptr, strAddr.c_str(), false, false, true);\n                 for (int i = 0; i < 10 && i < nLoop; i++)\n                 {\n                     if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n@@ -1753,17 +1752,11 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Only connect out to one peer per network group (/16 for IPv4).\n         // Do this here so we don't have to critsect vNodes inside mapAddresses critsect.\n         int nOutbound = 0;\n-        int nOutboundRelevant = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n         {\n             LOCK(cs_vNodes);\n             for (CNode* pnode : vNodes) {\n                 if (!pnode->fInbound && !pnode->fAddnode) {\n-\n-                    // Count the peers that have all relevant services\n-                    if (pnode->fSuccessfullyConnected && !pnode->fFeeler && ((pnode->nServices & nRelevantServices) == nRelevantServices)) {\n-                        nOutboundRelevant++;\n-                    }\n                     // Netgroups for inbound and addnode peers are not excluded because our goal here\n                     // is to not use multiple of our limited outbound slots on a single netgroup\n                     // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n@@ -1818,21 +1811,16 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             if (IsLimited(addr))\n                 continue;\n \n-            // only connect to full nodes\n-            if ((addr.nServices & REQUIRED_SERVICES) != REQUIRED_SERVICES)\n-                continue;\n-\n             // only consider very recently tried nodes after 30 failed attempts\n             if (nANow - addr.nLastTry < 600 && nTries < 30)\n                 continue;\n \n-            // only consider nodes missing relevant services after 40 failed attempts and only if less than half the outbound are up.\n-            ServiceFlags nRequiredServices = nRelevantServices;\n-            if (nTries >= 40 && nOutbound < (nMaxOutbound >> 1)) {\n-                nRequiredServices = REQUIRED_SERVICES;\n-            }\n-\n-            if ((addr.nServices & nRequiredServices) != nRequiredServices) {\n+            // for non-feelers, require all the services we'll want,\n+            // for feelers, only require they be a full node (only because most\n+            // SPV clients don't have a good address DB available)\n+            if (!fFeeler && !HasAllDesirableServiceFlags(addr.nServices)) {\n+                continue;\n+            } else if (fFeeler && !MayHaveUsefulAddressDB(addr.nServices)) {\n                 continue;\n             }\n \n@@ -1841,13 +1829,6 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 continue;\n \n             addrConnect = addr;\n-\n-            // regardless of the services assumed to be available, only require the minimum if half or more outbound have relevant services\n-            if (nOutboundRelevant >= (nMaxOutbound >> 1)) {\n-                addrConnect.nServices = REQUIRED_SERVICES;\n-            } else {\n-                addrConnect.nServices = nRequiredServices;\n-            }\n             break;\n         }\n \n@@ -2712,7 +2693,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     nSendVersion(0)\n {\n     nServices = NODE_NONE;\n-    nServicesExpected = NODE_NONE;\n     hSocket = hSocketIn;\n     nRecvVersion = INIT_PROTO_VERSION;\n     nLastSend = 0;"
      },
      {
        "sha": "b4873b1e4d4ff65275fff3f8d07257e002638dcc",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44407100ff9b478d6131a1c38ee993b50b1830df/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44407100ff9b478d6131a1c38ee993b50b1830df/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=44407100ff9b478d6131a1c38ee993b50b1830df",
        "patch": "@@ -84,8 +84,6 @@ static const bool DEFAULT_FORCEDNSSEED = false;\n static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;\n \n-static const ServiceFlags REQUIRED_SERVICES = NODE_NETWORK;\n-\n // NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n static const unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  // Default 24-hour ban\n \n@@ -130,7 +128,6 @@ class CConnman\n     struct Options\n     {\n         ServiceFlags nLocalServices = NODE_NONE;\n-        ServiceFlags nRelevantServices = NODE_NONE;\n         int nMaxConnections = 0;\n         int nMaxOutbound = 0;\n         int nMaxAddnode = 0;\n@@ -152,7 +149,6 @@ class CConnman\n \n     void Init(const Options& connOptions) {\n         nLocalServices = connOptions.nLocalServices;\n-        nRelevantServices = connOptions.nRelevantServices;\n         nMaxConnections = connOptions.nMaxConnections;\n         nMaxOutbound = std::min(connOptions.nMaxOutbound, connOptions.nMaxConnections);\n         nMaxAddnode = connOptions.nMaxAddnode;\n@@ -390,9 +386,6 @@ class CConnman\n     /** Services this instance offers */\n     ServiceFlags nLocalServices;\n \n-    /** Services this instance cares about */\n-    ServiceFlags nRelevantServices;\n-\n     CSemaphore *semOutbound;\n     CSemaphore *semAddnode;\n     int nMaxConnections;\n@@ -585,7 +578,6 @@ class CNode\n public:\n     // socket\n     std::atomic<ServiceFlags> nServices;\n-    ServiceFlags nServicesExpected;\n     SOCKET hSocket;\n     size_t nSendSize; // total size of all vSendMsg entries\n     size_t nSendOffset; // offset inside the first vSendMsg already sent"
      },
      {
        "sha": "39cf989eea6d92a9009c76a618f0b7e2c682af9d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44407100ff9b478d6131a1c38ee993b50b1830df/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44407100ff9b478d6131a1c38ee993b50b1830df/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=44407100ff9b478d6131a1c38ee993b50b1830df",
        "patch": "@@ -1232,11 +1232,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         {\n             connman->SetServices(pfrom->addr, nServices);\n         }\n-        if (pfrom->nServicesExpected & ~nServices)\n+        if (!pfrom->fInbound && !pfrom->fFeeler && !pfrom->fAddnode && !HasAllDesirableServiceFlags(nServices))\n         {\n-            LogPrint(BCLog::NET, \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->GetId(), nServices, pfrom->nServicesExpected);\n+            LogPrint(BCLog::NET, \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->GetId(), nServices, GetDesirableServiceFlags(nServices));\n             connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n-                               strprintf(\"Expected to offer services %08x\", pfrom->nServicesExpected)));\n+                               strprintf(\"Expected to offer services %08x\", GetDesirableServiceFlags(nServices))));\n             pfrom->fDisconnect = true;\n             return false;\n         }\n@@ -1455,7 +1455,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             if (interruptMsgProc)\n                 return true;\n \n-            if ((addr.nServices & REQUIRED_SERVICES) != REQUIRED_SERVICES)\n+            // We only bother storing full nodes, though this may include\n+            // things which we would not make an outbound connection to, in\n+            // part because we may make feeler connections to them.\n+            if (!MayHaveUsefulAddressDB(addr.nServices))\n                 continue;\n \n             if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)"
      },
      {
        "sha": "56b59aed3f4bad9ce4cc97ffd182df20f8e6ff5c",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44407100ff9b478d6131a1c38ee993b50b1830df/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44407100ff9b478d6131a1c38ee993b50b1830df/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=44407100ff9b478d6131a1c38ee993b50b1830df",
        "patch": "@@ -277,6 +277,43 @@ enum ServiceFlags : uint64_t {\n     // BIP process.\n };\n \n+/**\n+ * Gets the set of service flags which are \"desirable\" for a given peer.\n+ *\n+ * These are the flags which are required for a peer to support for them\n+ * to be \"interesting\" to us, ie for us to wish to use one of our few\n+ * outbound connection slots for or for us to wish to prioritize keeping\n+ * their connection around.\n+ *\n+ * Relevant service flags may be peer- and state-specific in that the\n+ * version of the peer may determine which flags are required (eg in the\n+ * case of NODE_NETWORK_LIMITED where we seek out NODE_NETWORK peers\n+ * unless they set NODE_NETWORK_LIMITED and we are out of IBD, in which\n+ * case NODE_NETWORK_LIMITED suffices).\n+ *\n+ * Thus, generally, avoid calling with peerServices == NODE_NONE.\n+ */\n+static ServiceFlags GetDesirableServiceFlags(ServiceFlags services) {\n+    return ServiceFlags(NODE_NETWORK | NODE_WITNESS);\n+}\n+\n+/**\n+ * A shortcut for (services & GetDesirableServiceFlags(services))\n+ * == GetDesirableServiceFlags(services), ie determines whether the given\n+ * set of service flags are sufficient for a peer to be \"relevant\".\n+ */\n+static inline bool HasAllDesirableServiceFlags(ServiceFlags services) {\n+    return !(GetDesirableServiceFlags(services) & (~services));\n+}\n+\n+/**\n+ * Checks if a peer with the given service flags may be capable of having a\n+ * robust address-storage DB. Currently an alias for checking NODE_NETWORK.\n+ */\n+static inline bool MayHaveUsefulAddressDB(ServiceFlags services) {\n+    return services & NODE_NETWORK;\n+}\n+\n /** A CService with information about it as peer */\n class CAddress : public CService\n {"
      },
      {
        "sha": "fa0d15e0cdeac9bd6665cda7fdda405a33a34617",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44407100ff9b478d6131a1c38ee993b50b1830df/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44407100ff9b478d6131a1c38ee993b50b1830df/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=44407100ff9b478d6131a1c38ee993b50b1830df",
        "patch": "@@ -217,7 +217,7 @@ UniValue addnode(const JSONRPCRequest& request)\n     if (strCommand == \"onetry\")\n     {\n         CAddress addr;\n-        g_connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str());\n+        g_connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), false, false, true);\n         return NullUniValue;\n     }\n "
      }
    ]
  },
  {
    "sha": "57edc0b0c86549020a39cd65f96496e9771c4769",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2VkYzBiMGM4NjU0OTAyMGEzOWNkNjVmOTY0OTZlOTc3MWM0NzY5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-05T15:49:16Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T17:25:58Z"
      },
      "message": "Rename fAddnode to a more-descriptive \"manual_connection\"",
      "tree": {
        "sha": "d5e72c1964cc4605d8bcf7aef1e397ecc4166bb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5e72c1964cc4605d8bcf7aef1e397ecc4166bb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57edc0b0c86549020a39cd65f96496e9771c4769",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57edc0b0c86549020a39cd65f96496e9771c4769",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57edc0b0c86549020a39cd65f96496e9771c4769",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57edc0b0c86549020a39cd65f96496e9771c4769/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44407100ff9b478d6131a1c38ee993b50b1830df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44407100ff9b478d6131a1c38ee993b50b1830df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44407100ff9b478d6131a1c38ee993b50b1830df"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 14,
      "deletions": 14
    },
    "files": [
      {
        "sha": "3e82969a15dff9b9fb9a60e0ae3906ac92fcd854",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57edc0b0c86549020a39cd65f96496e9771c4769/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57edc0b0c86549020a39cd65f96496e9771c4769/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=57edc0b0c86549020a39cd65f96496e9771c4769",
        "patch": "@@ -684,7 +684,7 @@ void CNode::copyStats(CNodeStats &stats)\n         X(cleanSubVer);\n     }\n     X(fInbound);\n-    X(fAddnode);\n+    X(m_manual_connection);\n     X(nStartingHeight);\n     {\n         LOCK(cs_vSend);\n@@ -1756,7 +1756,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         {\n             LOCK(cs_vNodes);\n             for (CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->fAddnode) {\n+                if (!pnode->fInbound && !pnode->m_manual_connection) {\n                     // Netgroups for inbound and addnode peers are not excluded because our goal here\n                     // is to not use multiple of our limited outbound slots on a single netgroup\n                     // but inbound and addnode peers do not use our outbound slots.  Inbound peers\n@@ -1927,7 +1927,7 @@ void CConnman::ThreadOpenAddedConnections()\n }\n \n // if successful, this moves the passed grant to the constructed node\n-bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool fAddnode)\n+bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool manual_connection)\n {\n     //\n     // Initiate outbound network connection\n@@ -1956,8 +1956,8 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         pnode->fOneShot = true;\n     if (fFeeler)\n         pnode->fFeeler = true;\n-    if (fAddnode)\n-        pnode->fAddnode = true;\n+    if (manual_connection)\n+        pnode->m_manual_connection = true;\n \n     m_msgproc->InitializeNode(pnode);\n     {\n@@ -2705,7 +2705,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     strSubVer = \"\";\n     fWhitelisted = false;\n     fOneShot = false;\n-    fAddnode = false;\n+    m_manual_connection = false;\n     fClient = false; // set by version message\n     fFeeler = false;\n     fSuccessfullyConnected = false;"
      },
      {
        "sha": "f373ab0cf1f72fcac32461cdd131176b284614b0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57edc0b0c86549020a39cd65f96496e9771c4769/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57edc0b0c86549020a39cd65f96496e9771c4769/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=57edc0b0c86549020a39cd65f96496e9771c4769",
        "patch": "@@ -171,7 +171,7 @@ class CConnman\n     void Interrupt();\n     bool GetNetworkActive() const { return fNetworkActive; };\n     void SetNetworkActive(bool active);\n-    bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool fAddnode = false);\n+    bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n@@ -506,7 +506,7 @@ class CNodeStats\n     int nVersion;\n     std::string cleanSubVer;\n     bool fInbound;\n-    bool fAddnode;\n+    bool m_manual_connection;\n     int nStartingHeight;\n     uint64_t nSendBytes;\n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n@@ -615,7 +615,7 @@ class CNode\n     bool fWhitelisted; // This peer can bypass DoS banning.\n     bool fFeeler; // If true this node is being used as a short lived feeler.\n     bool fOneShot;\n-    bool fAddnode;\n+    bool m_manual_connection;\n     bool fClient;\n     const bool fInbound;\n     std::atomic_bool fSuccessfullyConnected;"
      },
      {
        "sha": "3b73533c0e48fd1bc5cc8f2dade0e45aa6c5fb91",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57edc0b0c86549020a39cd65f96496e9771c4769/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57edc0b0c86549020a39cd65f96496e9771c4769/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=57edc0b0c86549020a39cd65f96496e9771c4769",
        "patch": "@@ -1232,7 +1232,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         {\n             connman->SetServices(pfrom->addr, nServices);\n         }\n-        if (!pfrom->fInbound && !pfrom->fFeeler && !pfrom->fAddnode && !HasAllDesirableServiceFlags(nServices))\n+        if (!pfrom->fInbound && !pfrom->fFeeler && !pfrom->m_manual_connection && !HasAllDesirableServiceFlags(nServices))\n         {\n             LogPrint(BCLog::NET, \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->GetId(), nServices, GetDesirableServiceFlags(nServices));\n             connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n@@ -2628,8 +2628,8 @@ static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)\n         state.fShouldBan = false;\n         if (pnode->fWhitelisted)\n             LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pnode->addr.ToString());\n-        else if (pnode->fAddnode)\n-            LogPrintf(\"Warning: not punishing addnoded peer %s!\\n\", pnode->addr.ToString());\n+        else if (pnode->m_manual_connection)\n+            LogPrintf(\"Warning: not punishing manually-connected peer %s!\\n\", pnode->addr.ToString());\n         else {\n             pnode->fDisconnect = true;\n             if (pnode->addr.IsLocal())"
      },
      {
        "sha": "076fe260bcc4af2c7ea68c5f11d774acf71ab1f5",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57edc0b0c86549020a39cd65f96496e9771c4769/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57edc0b0c86549020a39cd65f96496e9771c4769/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=57edc0b0c86549020a39cd65f96496e9771c4769",
        "patch": "@@ -92,7 +92,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"    \\\"version\\\": v,              (numeric) The peer version, such as 7001\\n\"\n             \"    \\\"subver\\\": \\\"/Satoshi:0.8.5/\\\",  (string) The string version\\n\"\n             \"    \\\"inbound\\\": true|false,     (boolean) Inbound (true) or Outbound (false)\\n\"\n-            \"    \\\"addnode\\\": true|false,     (boolean) Whether connection was due to addnode and is using an addnode slot\\n\"\n+            \"    \\\"addnode\\\": true|false,     (boolean) Whether connection was due to addnode/-connect or if it was an automatic/inbound connection\\n\"\n             \"    \\\"startingheight\\\": n,       (numeric) The starting height (block) of the peer\\n\"\n             \"    \\\"banscore\\\": n,             (numeric) The ban score\\n\"\n             \"    \\\"synced_headers\\\": n,       (numeric) The last header we have in common with this peer\\n\"\n@@ -156,7 +156,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n         // their ver message.\n         obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n         obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.fAddnode));\n+        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n         obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n         if (fStateStats) {\n             obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));"
      }
    ]
  },
  {
    "sha": "5ee88b4bdefecbf03b6883b2a6b56a44ec75167d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWU4OGI0YmRlZmVjYmYwM2I2ODgzYjJhNmI1NmE0NGVjNzUxNjdk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-06T21:27:04Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T17:29:25Z"
      },
      "message": "Clarify docs for requirements/handling of addnode/connect nodes",
      "tree": {
        "sha": "093fe0d84f75f41f72fd37352de7cb4903255405",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/093fe0d84f75f41f72fd37352de7cb4903255405"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57edc0b0c86549020a39cd65f96496e9771c4769",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57edc0b0c86549020a39cd65f96496e9771c4769",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57edc0b0c86549020a39cd65f96496e9771c4769"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8755ad420b5af7749c6fe782af79eda5f76239c9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5ee88b4bdefecbf03b6883b2a6b56a44ec75167d",
        "patch": "@@ -369,11 +369,11 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX));\n \n     strUsage += HelpMessageGroup(_(\"Connection options:\"));\n-    strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open\"));\n+    strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info)\"));\n     strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), DEFAULT_BANSCORE_THRESHOLD));\n     strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), DEFAULT_MISBEHAVING_BANTIME));\n     strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n-    strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s); -connect=0 disables automatic connections\"));\n+    strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s); -connect=0 disables automatic connections (the rules for this peer are the same as for -addnode)\"));\n     strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n     strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_NAME_LOOKUP));\n     strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\"));"
      },
      {
        "sha": "8fb8328c5e8f84c799e6566636684c82992c888f",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=5ee88b4bdefecbf03b6883b2a6b56a44ec75167d",
        "patch": "@@ -201,6 +201,8 @@ UniValue addnode(const JSONRPCRequest& request)\n             \"addnode \\\"node\\\" \\\"add|remove|onetry\\\"\\n\"\n             \"\\nAttempts to add or remove a node from the addnode list.\\n\"\n             \"Or try a connection to a node once.\\n\"\n+            \"Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\\n\"\n+            \"full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"node\\\"     (string, required) The node (see getpeerinfo for nodes)\\n\"\n             \"2. \\\"command\\\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\\n\""
      }
    ]
  },
  {
    "sha": "15f5d3b17298be96c6c684c195c02ac249ffd392",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWY1ZDNiMTcyOThiZTk2YzZjNjg0YzE5NWMwMmFjMjQ5ZmZkMzky",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-06T21:27:56Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-13T17:29:25Z"
      },
      "message": "Switch DNSSeed-needed metric to any-automatic-nodes, not services",
      "tree": {
        "sha": "7b4cc495640f42050777c3b175ff9cb85752e40f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b4cc495640f42050777c3b175ff9cb85752e40f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15f5d3b17298be96c6c684c195c02ac249ffd392",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15f5d3b17298be96c6c684c195c02ac249ffd392",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15f5d3b17298be96c6c684c195c02ac249ffd392",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15f5d3b17298be96c6c684c195c02ac249ffd392/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ee88b4bdefecbf03b6883b2a6b56a44ec75167d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ee88b4bdefecbf03b6883b2a6b56a44ec75167d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "258599747a6a0ed184287c54bf7fb0c1e2b0f147",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15f5d3b17298be96c6c684c195c02ac249ffd392/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15f5d3b17298be96c6c684c195c02ac249ffd392/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=15f5d3b17298be96c6c684c195c02ac249ffd392",
        "patch": "@@ -1601,7 +1601,7 @@ void CConnman::ThreadDNSAddressSeed()\n         LOCK(cs_vNodes);\n         int nRelevant = 0;\n         for (auto pnode : vNodes) {\n-            nRelevant += pnode->fSuccessfullyConnected && HasAllDesirableServiceFlags(pnode->nServices);\n+            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n         }\n         if (nRelevant >= 2) {\n             LogPrintf(\"P2P peers available. Skipped DNS seeding.\\n\");"
      }
    ]
  }
]