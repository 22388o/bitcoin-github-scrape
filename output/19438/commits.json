[
  {
    "sha": "36a4ba0aaaa9b35185d7178994e36bc02cca9887",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmE0YmEwYWFhYTliMzUxODVkNzE3ODk5NGUzNmJjMDJjY2E5ODg3",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-04T16:01:36Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T07:11:12Z"
      },
      "message": "versionbits: correct doxygen comments",
      "tree": {
        "sha": "94f7b5c5de9bb8333475012ba058207ad400a17a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94f7b5c5de9bb8333475012ba058207ad400a17a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36a4ba0aaaa9b35185d7178994e36bc02cca9887",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36a4ba0aaaa9b35185d7178994e36bc02cca9887",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36a4ba0aaaa9b35185d7178994e36bc02cca9887",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36a4ba0aaaa9b35185d7178994e36bc02cca9887/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a000cb013cc1104ddcd6431d5a9b89e90bde2593",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a000cb013cc1104ddcd6431d5a9b89e90bde2593",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a000cb013cc1104ddcd6431d5a9b89e90bde2593"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "dce39412884bb3c07ccf8cfca09685a3855fd3d5",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36a4ba0aaaa9b35185d7178994e36bc02cca9887/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36a4ba0aaaa9b35185d7178994e36bc02cca9887/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=36a4ba0aaaa9b35185d7178994e36bc02cca9887",
        "patch": "@@ -80,11 +80,11 @@ struct VersionBitsCache\n     void Clear();\n };\n \n-/** Get the BIP9 state for a given deployment at the current tip. */\n+/** Get the BIP9 state for a given deployment for the block after pindexPrev. */\n ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n-/** Get the numerical statistics for the BIP9 state for a given deployment at the current tip. */\n+/** Get the numerical statistics for a given deployment for the signalling period that includes the block after pindexPrev. */\n BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n-/** Get the block height at which the BIP9 deployment switched into the state for the block building on the current tip. */\n+/** Get the block height at which the BIP9 deployment switched into the state for the block after pindexPrev. */\n int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n "
      }
    ]
  },
  {
    "sha": "eccd736f3dc231ac0306ca763c3b72cf8247230a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2NkNzM2ZjNkYzIzMWFjMDMwNmNhNzYzYzNiNzJjZjgyNDcyMzBh",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-12-29T12:43:18Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T07:11:12Z"
      },
      "message": "versionbits: Use dedicated lock instead of cs_main",
      "tree": {
        "sha": "3d9a5aaeaec55e5942a66f2523e0564d52b6f2d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d9a5aaeaec55e5942a66f2523e0564d52b6f2d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eccd736f3dc231ac0306ca763c3b72cf8247230a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eccd736f3dc231ac0306ca763c3b72cf8247230a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eccd736f3dc231ac0306ca763c3b72cf8247230a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eccd736f3dc231ac0306ca763c3b72cf8247230a/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36a4ba0aaaa9b35185d7178994e36bc02cca9887",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36a4ba0aaaa9b35185d7178994e36bc02cca9887",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36a4ba0aaaa9b35185d7178994e36bc02cca9887"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 11,
      "deletions": 7
    },
    "files": [
      {
        "sha": "22600c534037d007e2d714db8ce85f0c55d9d10d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eccd736f3dc231ac0306ca763c3b72cf8247230a/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eccd736f3dc231ac0306ca763c3b72cf8247230a/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=eccd736f3dc231ac0306ca763c3b72cf8247230a",
        "patch": "@@ -1361,7 +1361,7 @@ static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name,\n     softforks.pushKV(name, rv);\n }\n \n-static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n {\n     // For BIP9 deployments.\n     // Deployments that are never active are hidden."
      },
      {
        "sha": "1b0f881d148998f88cbcfb6a044220c32d56ef2d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eccd736f3dc231ac0306ca763c3b72cf8247230a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eccd736f3dc231ac0306ca763c3b72cf8247230a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=eccd736f3dc231ac0306ca763c3b72cf8247230a",
        "patch": "@@ -1606,11 +1606,10 @@ void StopScriptCheckWorkerThreads()\n     scriptcheckqueue.StopWorkerThreads();\n }\n \n-VersionBitsCache versionbitscache GUARDED_BY(cs_main);\n+VersionBitsCache versionbitscache;\n \n int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n {\n-    LOCK(cs_main);\n     int32_t nVersion = VERSIONBITS_TOP_BITS;\n \n     for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n@@ -1659,9 +1658,8 @@ static bool IsScriptWitnessEnabled(const Consensus::Params& params)\n     return params.SegwitHeight != std::numeric_limits<int>::max();\n }\n \n-static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n-    AssertLockHeld(cs_main);\n-\n+static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams)\n+{\n     unsigned int flags = SCRIPT_VERIFY_NONE;\n \n     // BIP16 didn't become active until Apr 1 2012 (on mainnet, and"
      },
      {
        "sha": "07ecc93c939598f67335a979840fc1024b7e8d1e",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eccd736f3dc231ac0306ca763c3b72cf8247230a/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eccd736f3dc231ac0306ca763c3b72cf8247230a/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=eccd736f3dc231ac0306ca763c3b72cf8247230a",
        "patch": "@@ -192,6 +192,7 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n \n ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n {\n+    LOCK(cache.mutex);\n     return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, cache.caches[pos]);\n }\n \n@@ -202,6 +203,7 @@ BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::\n \n int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n {\n+    LOCK(cache.mutex);\n     return VersionBitsConditionChecker(pos).GetStateSinceHeightFor(pindexPrev, params, cache.caches[pos]);\n }\n \n@@ -212,6 +214,7 @@ uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentP\n \n void VersionBitsCache::Clear()\n {\n+    LOCK(mutex);\n     for (unsigned int d = 0; d < Consensus::MAX_VERSION_BITS_DEPLOYMENTS; d++) {\n         caches[d].clear();\n     }"
      },
      {
        "sha": "24279a0de4f80f68186a9fcc950eaa9887c16b11",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eccd736f3dc231ac0306ca763c3b72cf8247230a/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eccd736f3dc231ac0306ca763c3b72cf8247230a/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=eccd736f3dc231ac0306ca763c3b72cf8247230a",
        "patch": "@@ -6,6 +6,8 @@\n #define BITCOIN_VERSIONBITS_H\n \n #include <chain.h>\n+#include <sync.h>\n+\n #include <map>\n \n /** What block version to use for new blocks (pre versionbits) */\n@@ -75,7 +77,8 @@ class AbstractThresholdConditionChecker {\n  *  keyed by the bit position used to signal support. */\n struct VersionBitsCache\n {\n-    ThresholdConditionCache caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS];\n+    Mutex mutex;\n+    ThresholdConditionCache caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] GUARDED_BY(mutex);\n \n     void Clear();\n };"
      }
    ]
  },
  {
    "sha": "2b0d291da8f479739ff394dd92801da8c40b9f8e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjBkMjkxZGE4ZjQ3OTczOWZmMzk0ZGQ5MjgwMWRhOGM0MGI5Zjhl",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-06-16T08:58:56Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T07:11:12Z"
      },
      "message": "[refactor] Add deploymentstatus.h\n\nProvides DeploymentEnabled, DeploymentActiveAt, and DeploymentActiveAfter\nhelpers for checking the status of buried deployments. Can be overloaded\nso the same syntax works for non-buried deployments, allowing future\nsoft forks to be changed from signalled to buried deployments without\nhaving to touch the implementation code.\n\nReplaces IsWitnessEnabled and IsScriptWitnessEnabled.",
      "tree": {
        "sha": "50968fbedda38d56cfd6fa5b1a7c2a3ee037ddab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50968fbedda38d56cfd6fa5b1a7c2a3ee037ddab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b0d291da8f479739ff394dd92801da8c40b9f8e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b0d291da8f479739ff394dd92801da8c40b9f8e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b0d291da8f479739ff394dd92801da8c40b9f8e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b0d291da8f479739ff394dd92801da8c40b9f8e/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eccd736f3dc231ac0306ca763c3b72cf8247230a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eccd736f3dc231ac0306ca763c3b72cf8247230a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eccd736f3dc231ac0306ca763c3b72cf8247230a"
      }
    ],
    "stats": {
      "total": 154,
      "additions": 101,
      "deletions": 53
    },
    "files": [
      {
        "sha": "a3248f3eab503c62d3b2a9386b59395b25320e20",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "patch": "@@ -145,6 +145,7 @@ BITCOIN_CORE_H = \\\n   core_memusage.h \\\n   cuckoocache.h \\\n   dbwrapper.h \\\n+  deploymentstatus.h \\\n   external_signer.h \\\n   flatfile.h \\\n   fs.h \\"
      },
      {
        "sha": "9b4139d76cc2d795f987814fa3bc589ec5011734",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "patch": "@@ -11,6 +11,17 @@\n \n namespace Consensus {\n \n+enum BuriedDeployment : int16_t\n+{\n+    // buried deployments get negative values to avoid overlap with DeploymentPos\n+    DEPLOYMENT_HEIGHTINCB = std::numeric_limits<int16_t>::min(),\n+    DEPLOYMENT_CLTV,\n+    DEPLOYMENT_DERSIG,\n+    DEPLOYMENT_CSV,\n+    DEPLOYMENT_SEGWIT,\n+};\n+constexpr bool ValidDeployment(BuriedDeployment dep) { return DEPLOYMENT_HEIGHTINCB <= dep && dep <= DEPLOYMENT_SEGWIT; }\n+\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n@@ -100,7 +111,25 @@ struct Params {\n      */\n     bool signet_blocks{false};\n     std::vector<uint8_t> signet_challenge;\n+\n+    int DeploymentHeight(BuriedDeployment dep) const\n+    {\n+        switch (dep) {\n+        case DEPLOYMENT_HEIGHTINCB:\n+            return BIP34Height;\n+        case DEPLOYMENT_CLTV:\n+            return BIP65Height;\n+        case DEPLOYMENT_DERSIG:\n+            return BIP66Height;\n+        case DEPLOYMENT_CSV:\n+            return CSVHeight;\n+        case DEPLOYMENT_SEGWIT:\n+            return SegwitHeight;\n+        } // no default case, so the compiler can warn about missing cases\n+        return std::numeric_limits<int>::max();\n+    }\n };\n+\n } // namespace Consensus\n \n #endif // BITCOIN_CONSENSUS_PARAMS_H"
      },
      {
        "sha": "32190e369d528a71e6d7e0029ca0ca705a5f4655",
        "filename": "src/deploymentstatus.h",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/deploymentstatus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/deploymentstatus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.h?ref=2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "patch": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_DEPLOYMENTSTATUS_H\n+#define BITCOIN_DEPLOYMENTSTATUS_H\n+\n+#include <chain.h>\n+\n+#include <limits>\n+\n+/** Determine if a deployment is active for the next block */\n+inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return (pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1) >= params.DeploymentHeight(dep);\n+}\n+\n+/** Determine if a deployment is active for this block */\n+inline bool DeploymentActiveAt(const CBlockIndex& index, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return index.nHeight >= params.DeploymentHeight(dep);\n+}\n+\n+/** Determine if a deployment is enabled (can ever be active) */\n+inline bool DeploymentEnabled(const Consensus::Params& params, Consensus::BuriedDeployment dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return params.DeploymentHeight(dep) != std::numeric_limits<int>::max();\n+}\n+\n+#endif // BITCOIN_DEPLOYMENTSTATUS_H"
      },
      {
        "sha": "ae96f510bcb9d7fd1b9436c43457cb8e215e566c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "patch": "@@ -16,6 +16,7 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <compat/sanity.h>\n+#include <deploymentstatus.h>\n #include <fs.h>\n #include <hash.h>\n #include <httprpc.h>\n@@ -1587,7 +1588,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         }\n     }\n \n-    if (chainparams.GetConsensus().SegwitHeight != std::numeric_limits<int>::max()) {\n+    if (DeploymentEnabled(chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {\n         // Advertise witness capabilities.\n         // The option to not set NODE_WITNESS is only used in the tests and should be removed.\n         nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);"
      },
      {
        "sha": "c1a992b9e9ce0853dbad6a0e4cf59485ea14a0b6",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "patch": "@@ -13,6 +13,7 @@\n #include <consensus/merkle.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n+#include <deploymentstatus.h>\n #include <policy/feerate.h>\n #include <policy/policy.h>\n #include <pow.h>\n@@ -137,12 +138,12 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // This is only needed in case the witness softfork activation is reverted\n     // (which would require a very deep reorganization).\n     // Note that the mempool would accept transactions with witness data before\n-    // IsWitnessEnabled, but we would only ever mine blocks after IsWitnessEnabled\n+    // the deployment is active, but we would only ever mine blocks after activation\n     // unless there is a massive block reorganization with the witness softfork\n     // not activated.\n     // TODO: replace this with a call to main to assess validity of a mempool\n     // transaction (which in most cases can be a no-op).\n-    fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus());\n+    fIncludeWitness = DeploymentActiveAfter(pindexPrev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT);\n \n     int nPackagesSelected = 0;\n     int nDescendantsUpdated = 0;"
      },
      {
        "sha": "315d2ac5cd82dea5af9da3b12b4faeb360ea95a5",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "patch": "@@ -11,6 +11,7 @@\n #include <blockfilter.h>\n #include <chainparams.h>\n #include <consensus/validation.h>\n+#include <deploymentstatus.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n #include <merkleblock.h>\n@@ -997,7 +998,7 @@ void PeerManagerImpl::FindNextBlocksToDownload(NodeId nodeid, unsigned int count\n                 // We consider the chain that this peer is on invalid.\n                 return;\n             }\n-            if (!State(nodeid)->fHaveWitness && IsWitnessEnabled(pindex->pprev, consensusParams)) {\n+            if (!State(nodeid)->fHaveWitness && DeploymentActiveAt(*pindex, consensusParams, Consensus::DEPLOYMENT_SEGWIT)) {\n                 // We wouldn't download this block or its descendants from this peer.\n                 return;\n             }\n@@ -1467,7 +1468,7 @@ void PeerManagerImpl::NewPoWValidBlock(const CBlockIndex *pindex, const std::sha\n         return;\n     nHighestFastAnnounce = pindex->nHeight;\n \n-    bool fWitnessEnabled = IsWitnessEnabled(pindex->pprev, m_chainparams.GetConsensus());\n+    bool fWitnessEnabled = DeploymentActiveAt(*pindex, m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT);\n     uint256 hashBlock(pblock->GetHash());\n \n     {\n@@ -2082,7 +2083,7 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n             while (pindexWalk && !m_chainman.ActiveChain().Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n                 if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n                         !IsBlockRequested(pindexWalk->GetBlockHash()) &&\n-                        (!IsWitnessEnabled(pindexWalk->pprev, m_chainparams.GetConsensus()) || State(pfrom.GetId())->fHaveWitness)) {\n+                        (!DeploymentActiveAt(*pindexWalk, m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT) || State(pfrom.GetId())->fHaveWitness)) {\n                     // We don't have this block, and it's not yet in flight.\n                     vToFetch.push_back(pindexWalk);\n                 }\n@@ -3397,7 +3398,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             return;\n         }\n \n-        if (IsWitnessEnabled(pindex->pprev, m_chainparams.GetConsensus()) && !nodestate->fSupportsDesiredCmpctVersion) {\n+        if (DeploymentActiveAt(*pindex, m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT) && !nodestate->fSupportsDesiredCmpctVersion) {\n             // Don't bother trying to process compact blocks from v1 peers\n             // after segwit activates.\n             return;"
      },
      {
        "sha": "f054c8b14505252156e924f515f63fdb793979af",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "patch": "@@ -10,6 +10,7 @@\n #include <consensus/params.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n+#include <deploymentstatus.h>\n #include <key_io.h>\n #include <miner.h>\n #include <net.h>\n@@ -774,7 +775,7 @@ static RPCHelpMan getblocktemplate()\n     pblock->nNonce = 0;\n \n     // NOTE: If at some point we support pre-segwit miners post-segwit-activation, this needs to take segwit support into consideration\n-    const bool fPreSegWit = (pindexPrev->nHeight + 1 < consensusParams.SegwitHeight);\n+    const bool fPreSegWit = !DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n \n     UniValue aCaps(UniValue::VARR); aCaps.push_back(\"proposal\");\n "
      },
      {
        "sha": "b69faa54eb822db26f059b0962fbac895a4b9951",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 41,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "patch": "@@ -15,6 +15,7 @@\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n #include <cuckoocache.h>\n+#include <deploymentstatus.h>\n #include <flatfile.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n@@ -1649,15 +1650,6 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n \n static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS] GUARDED_BY(cs_main);\n \n-// 0.13.0 was shipped with a segwit deployment defined for testnet, but not for\n-// mainnet. We no longer need to support disabling the segwit deployment\n-// except for testing purposes, due to limitations of the functional test\n-// environment. See test/functional/p2p-segwit.py.\n-static bool IsScriptWitnessEnabled(const Consensus::Params& params)\n-{\n-    return params.SegwitHeight != std::numeric_limits<int>::max();\n-}\n-\n static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams)\n {\n     unsigned int flags = SCRIPT_VERIFY_NONE;\n@@ -1676,22 +1668,22 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n \n     // Enforce WITNESS rules whenever P2SH is in effect (and the segwit\n     // deployment is defined).\n-    if (flags & SCRIPT_VERIFY_P2SH && IsScriptWitnessEnabled(consensusparams)) {\n+    if (flags & SCRIPT_VERIFY_P2SH && DeploymentEnabled(consensusparams, Consensus::DEPLOYMENT_SEGWIT)) {\n         flags |= SCRIPT_VERIFY_WITNESS;\n     }\n \n-    // Start enforcing the DERSIG (BIP66) rule\n-    if (pindex->nHeight >= consensusparams.BIP66Height) {\n+    // Enforce the DERSIG (BIP66) rule\n+    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_DERSIG)) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n-    // Start enforcing CHECKLOCKTIMEVERIFY (BIP65) rule\n-    if (pindex->nHeight >= consensusparams.BIP65Height) {\n+    // Enforce CHECKLOCKTIMEVERIFY (BIP65)\n+    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_CLTV)) {\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n-    // Start enforcing BIP112 (CHECKSEQUENCEVERIFY)\n-    if (pindex->nHeight >= consensusparams.CSVHeight) {\n+    // Enforce CHECKSEQUENCEVERIFY (BIP112)\n+    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_CSV)) {\n         flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n     }\n \n@@ -1700,8 +1692,8 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n         flags |= SCRIPT_VERIFY_TAPROOT;\n     }\n \n-    // Start enforcing BIP147 NULLDUMMY (activated simultaneously with segwit)\n-    if (IsWitnessEnabled(pindex->pprev, consensusparams)) {\n+    // Enforce BIP147 NULLDUMMY (activated simultaneously with segwit)\n+    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_SEGWIT)) {\n         flags |= SCRIPT_VERIFY_NULLDUMMY;\n     }\n \n@@ -1891,9 +1883,9 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n         }\n     }\n \n-    // Start enforcing BIP68 (sequence locks)\n+    // Enforce BIP68 (sequence locks)\n     int nLockTimeFlags = 0;\n-    if (pindex->nHeight >= m_params.GetConsensus().CSVHeight) {\n+    if (DeploymentActiveAt(*pindex, m_params.GetConsensus(), Consensus::DEPLOYMENT_CSV)) {\n         nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n@@ -2986,7 +2978,7 @@ void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pi\n     pindexNew->nDataPos = pos.nPos;\n     pindexNew->nUndoPos = 0;\n     pindexNew->nStatus |= BLOCK_HAVE_DATA;\n-    if (IsWitnessEnabled(pindexNew->pprev, m_params.GetConsensus())) {\n+    if (DeploymentActiveAt(*pindexNew, m_params.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {\n         pindexNew->nStatus |= BLOCK_OPT_WITNESS;\n     }\n     pindexNew->RaiseValidity(BLOCK_VALID_TRANSACTIONS);\n@@ -3107,17 +3099,11 @@ bool CheckBlock(const CBlock& block, BlockValidationState& state, const Consensu\n     return true;\n }\n \n-bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n-{\n-    int height = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;\n-    return (height >= params.SegwitHeight);\n-}\n-\n void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n {\n     int commitpos = GetWitnessCommitmentIndex(block);\n     static const std::vector<unsigned char> nonce(32, 0x00);\n-    if (commitpos != NO_WITNESS_COMMITMENT && IsWitnessEnabled(pindexPrev, consensusParams) && !block.vtx[0]->HasWitness()) {\n+    if (commitpos != NO_WITNESS_COMMITMENT && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT) && !block.vtx[0]->HasWitness()) {\n         CMutableTransaction tx(*block.vtx[0]);\n         tx.vin[0].scriptWitness.stack.resize(1);\n         tx.vin[0].scriptWitness.stack[0] = nonce;\n@@ -3130,7 +3116,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     std::vector<unsigned char> commitment;\n     int commitpos = GetWitnessCommitmentIndex(block);\n     std::vector<unsigned char> ret(32, 0x00);\n-    if (consensusParams.SegwitHeight != std::numeric_limits<int>::max()) {\n+    if (DeploymentEnabled(consensusParams, Consensus::DEPLOYMENT_SEGWIT)) {\n         if (commitpos == NO_WITNESS_COMMITMENT) {\n             uint256 witnessroot = BlockWitnessMerkleRoot(block, nullptr);\n             CHash256().Write(witnessroot).Write(ret).Finalize(witnessroot);\n@@ -3208,13 +3194,13 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, BlockValidatio\n     if (block.GetBlockTime() > nAdjustedTime + MAX_FUTURE_BLOCK_TIME)\n         return state.Invalid(BlockValidationResult::BLOCK_TIME_FUTURE, \"time-too-new\", \"block timestamp too far in the future\");\n \n-    // Reject outdated version blocks when 95% (75% on testnet) of the network has upgraded:\n-    // check for version 2, 3 and 4 upgrades\n-    if((block.nVersion < 2 && nHeight >= consensusParams.BIP34Height) ||\n-       (block.nVersion < 3 && nHeight >= consensusParams.BIP66Height) ||\n-       (block.nVersion < 4 && nHeight >= consensusParams.BIP65Height))\n+    // Reject blocks with outdated version\n+    if ((block.nVersion < 2 && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB)) ||\n+        (block.nVersion < 3 && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_DERSIG)) ||\n+        (block.nVersion < 4 && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CLTV))) {\n             return state.Invalid(BlockValidationResult::BLOCK_INVALID_HEADER, strprintf(\"bad-version(0x%08x)\", block.nVersion),\n                                  strprintf(\"rejected nVersion=0x%08x block\", block.nVersion));\n+    }\n \n     return true;\n }\n@@ -3229,9 +3215,9 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n {\n     const int nHeight = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;\n \n-    // Start enforcing BIP113 (Median Time Past).\n+    // Enforce BIP113 (Median Time Past).\n     int nLockTimeFlags = 0;\n-    if (nHeight >= consensusParams.CSVHeight) {\n+    if (DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CSV)) {\n         assert(pindexPrev != nullptr);\n         nLockTimeFlags |= LOCKTIME_MEDIAN_TIME_PAST;\n     }\n@@ -3248,7 +3234,7 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     }\n \n     // Enforce rule that the coinbase starts with serialized block height\n-    if (nHeight >= consensusParams.BIP34Height)\n+    if (DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB))\n     {\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0]->vin[0].scriptSig.size() < expect.size() ||\n@@ -3266,7 +3252,7 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness reserved value). In case there are\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n-    if (nHeight >= consensusParams.SegwitHeight) {\n+    if (DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT)) {\n         int commitpos = GetWitnessCommitmentIndex(block);\n         if (commitpos != NO_WITNESS_COMMITMENT) {\n             bool malleated = false;\n@@ -4096,9 +4082,8 @@ bool CChainState::NeedsRedownload() const\n \n     // At and above m_params.SegwitHeight, segwit consensus rules must be validated\n     CBlockIndex* block{m_chain.Tip()};\n-    const int segwit_height{m_params.GetConsensus().SegwitHeight};\n \n-    while (block != nullptr && block->nHeight >= segwit_height) {\n+    while (block != nullptr && DeploymentActiveAt(*block, m_params.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {\n         if (!(block->nStatus & BLOCK_OPT_WITNESS)) {\n             // block is insufficiently validated for a segwit client\n             return true;\n@@ -5000,7 +4985,7 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n \n         // Fake BLOCK_OPT_WITNESS so that CChainState::NeedsRedownload()\n         // won't ask to rewind the entire assumed-valid chain on startup.\n-        if (index->pprev && ::IsWitnessEnabled(index->pprev, ::Params().GetConsensus())) {\n+        if (index->pprev && DeploymentActiveAt(*index, ::Params().GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {\n             index->nStatus |= BLOCK_OPT_WITNESS;\n         }\n     }"
      },
      {
        "sha": "50a8d7e5757305640b6c98dbe03d9f426c7bb623",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0d291da8f479739ff394dd92801da8c40b9f8e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "patch": "@@ -345,10 +345,6 @@ bool TestBlockValidity(BlockValidationState& state,\n                        bool fCheckPOW = true,\n                        bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-/** Check whether witness commitments are required for a block, and whether to enforce NULLDUMMY (BIP 147) rules.\n- *  Note that transaction witness validation rules are always enforced when P2SH is enforced. */\n-bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n-\n /** Update uncommitted block structures (currently: only the witness reserved value). This is safe for submitted blocks. */\n void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n "
      }
    ]
  },
  {
    "sha": "de55304f6e7a8b607e6b3fc7436de50910747b0c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTU1MzA0ZjZlN2E4YjYwN2U2YjNmYzc0MzZkZTUwOTEwNzQ3YjBj",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-07-02T18:01:23Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T22:18:58Z"
      },
      "message": "[refactor] Add versionbits deployments to deploymentstatus.h\n\nAdds support for versionbits deployments to DeploymentEnabled,\nDeploymentActiveAfter and DeploymentActiveAt. Also moves versionbitscache\nfrom validation to deploymentstatus.",
      "tree": {
        "sha": "ce1cb7ee0bcad78cb327650e0c4cb5e51b28074a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce1cb7ee0bcad78cb327650e0c4cb5e51b28074a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de55304f6e7a8b607e6b3fc7436de50910747b0c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de55304f6e7a8b607e6b3fc7436de50910747b0c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de55304f6e7a8b607e6b3fc7436de50910747b0c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de55304f6e7a8b607e6b3fc7436de50910747b0c/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b0d291da8f479739ff394dd92801da8c40b9f8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b0d291da8f479739ff394dd92801da8c40b9f8e"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 50,
      "deletions": 12
    },
    "files": [
      {
        "sha": "a8e1b7bc1edf4bf166d463c2852a3fe587013a75",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "patch": "@@ -329,6 +329,7 @@ libbitcoin_server_a_SOURCES = \\\n   chain.cpp \\\n   consensus/tx_verify.cpp \\\n   dbwrapper.cpp \\\n+  deploymentstatus.cpp \\\n   flatfile.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\"
      },
      {
        "sha": "7d5fe1a7340d71f9f7fa506d70551b44aca9eac7",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "patch": "@@ -22,13 +22,14 @@ enum BuriedDeployment : int16_t\n };\n constexpr bool ValidDeployment(BuriedDeployment dep) { return DEPLOYMENT_HEIGHTINCB <= dep && dep <= DEPLOYMENT_SEGWIT; }\n \n-enum DeploymentPos\n+enum DeploymentPos : uint16_t\n {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_TAPROOT, // Deployment of Schnorr/Taproot (BIPs 340-342)\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n+constexpr bool ValidDeployment(DeploymentPos dep) { return DEPLOYMENT_TESTDUMMY <= dep && dep <= DEPLOYMENT_TAPROOT; }\n \n /**\n  * Struct for each individual consensus rule change using BIP9."
      },
      {
        "sha": "4e13fd7e0afb695fdb4017bf1289757598d4660a",
        "filename": "src/deploymentstatus.cpp",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/deploymentstatus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/deploymentstatus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.cpp?ref=de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <deploymentstatus.h>\n+\n+#include <consensus/params.h>\n+#include <versionbits.h>\n+\n+VersionBitsCache versionbitscache;\n+\n+/* Basic sanity checking for BuriedDeployment/DeploymentPos enums and\n+ * ValidDeployment check */\n+\n+static_assert(ValidDeployment(Consensus::DEPLOYMENT_TESTDUMMY), \"sanity check of DeploymentPos failed (TESTDUMMY not valid)\");\n+static_assert(!ValidDeployment(Consensus::MAX_VERSION_BITS_DEPLOYMENTS), \"sanity check of DeploymentPos failed (MAX value considered valid)\");\n+static_assert(!ValidDeployment(static_cast<Consensus::BuriedDeployment>(Consensus::DEPLOYMENT_TESTDUMMY)), \"sanity check of BuriedDeployment failed (overlaps with DeploymentPos)\");"
      },
      {
        "sha": "327a5f789275ed2085ce4bf47f222b04a0fb30e6",
        "filename": "src/deploymentstatus.h",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/deploymentstatus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/deploymentstatus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.h?ref=de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "patch": "@@ -6,28 +6,50 @@\n #define BITCOIN_DEPLOYMENTSTATUS_H\n \n #include <chain.h>\n+#include <versionbits.h>\n \n #include <limits>\n \n+/** Global cache for versionbits deployment status */\n+extern VersionBitsCache versionbitscache;\n+\n /** Determine if a deployment is active for the next block */\n inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n {\n     assert(Consensus::ValidDeployment(dep));\n     return (pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1) >= params.DeploymentHeight(dep);\n }\n \n+inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return ThresholdState::ACTIVE == VersionBitsState(pindexPrev, params, dep, versionbitscache);\n+}\n+\n /** Determine if a deployment is active for this block */\n inline bool DeploymentActiveAt(const CBlockIndex& index, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n {\n     assert(Consensus::ValidDeployment(dep));\n     return index.nHeight >= params.DeploymentHeight(dep);\n }\n \n+inline bool DeploymentActiveAt(const CBlockIndex& index, const Consensus::Params& params, Consensus::DeploymentPos dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return DeploymentActiveAfter(index.pprev, params, dep);\n+}\n+\n /** Determine if a deployment is enabled (can ever be active) */\n inline bool DeploymentEnabled(const Consensus::Params& params, Consensus::BuriedDeployment dep)\n {\n     assert(Consensus::ValidDeployment(dep));\n     return params.DeploymentHeight(dep) != std::numeric_limits<int>::max();\n }\n \n+inline bool DeploymentEnabled(const Consensus::Params& params, Consensus::DeploymentPos dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return params.vDeployments[dep].nTimeout != 0;\n+}\n+\n #endif // BITCOIN_DEPLOYMENTSTATUS_H"
      },
      {
        "sha": "183b5a5d9122f20b3cde5a5415de3133d7c5f661",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "patch": "@@ -6,6 +6,7 @@\n #include <banman.h>\n #include <chain.h>\n #include <chainparams.h>\n+#include <deploymentstatus.h>\n #include <external_signer.h>\n #include <init.h>\n #include <interfaces/chain.h>\n@@ -692,7 +693,7 @@ class ChainImpl : public Chain\n     {\n         LOCK(::cs_main);\n         const CBlockIndex* tip = Assert(m_node.chainman)->ActiveChain().Tip();\n-        return VersionBitsState(tip, Params().GetConsensus(), Consensus::DEPLOYMENT_TAPROOT, versionbitscache) == ThresholdState::ACTIVE;\n+        return DeploymentActiveAfter(tip, Params().GetConsensus(), Consensus::DEPLOYMENT_TAPROOT);\n     }\n     NodeContext& m_node;\n };"
      },
      {
        "sha": "7ba6e13142fb3b7c7577263507a3f36c25bd167d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "patch": "@@ -12,6 +12,7 @@\n #include <coins.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n+#include <deploymentstatus.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n #include <index/coinstatsindex.h>"
      },
      {
        "sha": "a89447732e29b8c78f42dca1dcecce454c61186a",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "patch": "@@ -5,6 +5,7 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n+#include <deploymentstatus.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n #include <versionbits.h>"
      },
      {
        "sha": "782a6cd56dbc65ef75db4bfd062b48ddb4c3bacf",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "patch": "@@ -684,9 +684,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard pay-to-script-hash in inputs\n-    const auto& params = args.m_chainparams.GetConsensus();\n-    auto taproot_state = VersionBitsState(m_active_chainstate.m_chain.Tip(), params, Consensus::DEPLOYMENT_TAPROOT, versionbitscache);\n-    if (fRequireStandard && !AreInputsStandard(tx, m_view, taproot_state == ThresholdState::ACTIVE)) {\n+    const bool taproot_active = DeploymentActiveAfter(m_active_chainstate.m_chain.Tip(), args.m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_TAPROOT);\n+    if (fRequireStandard && !AreInputsStandard(tx, m_view, taproot_active)) {\n         return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n     }\n \n@@ -1607,8 +1606,6 @@ void StopScriptCheckWorkerThreads()\n     scriptcheckqueue.StopWorkerThreads();\n }\n \n-VersionBitsCache versionbitscache;\n-\n int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n {\n     int32_t nVersion = VERSIONBITS_TOP_BITS;\n@@ -1687,8 +1684,8 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n         flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n     }\n \n-    // Start enforcing Taproot using versionbits logic.\n-    if (VersionBitsState(pindex->pprev, consensusparams, Consensus::DEPLOYMENT_TAPROOT, versionbitscache) == ThresholdState::ACTIVE) {\n+    // Enforce Taproot (BIP340-BIP342)\n+    if (DeploymentActiveAt(*pindex, consensusparams, Consensus::DEPLOYMENT_TAPROOT)) {\n         flags |= SCRIPT_VERIFY_TAPROOT;\n     }\n "
      },
      {
        "sha": "0f00556053a0f9e76a09421eb5440a1e70511efe",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de55304f6e7a8b607e6b3fc7436de50910747b0c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "patch": "@@ -24,7 +24,6 @@\n #include <sync.h>\n #include <txmempool.h> // For CTxMemPool::cs\n #include <txdb.h>\n-#include <versionbits.h>\n #include <serialize.h>\n #include <util/check.h>\n #include <util/hasher.h>\n@@ -1020,8 +1019,6 @@ class ChainstateManager\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern std::unique_ptr<CBlockTreeDB> pblocktree;\n \n-extern VersionBitsCache versionbitscache;\n-\n /**\n  * Determine what nVersion a new block should use.\n  */"
      }
    ]
  },
  {
    "sha": "c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjRiMmM2YTBmNzkzNjk2MjRhZTk2YjJlM2Q1NzlkNTBhYWU0ZGU2",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-10T20:59:53Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T22:19:12Z"
      },
      "message": "scripted-diff: rename versionbitscache\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/versionbitscache/g_versionbitscache/g' $(git grep -l versionbitscache)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "666e3fbbdf9ee9b06e40ac0955b90bf0fe6b4800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/666e3fbbdf9ee9b06e40ac0955b90bf0fe6b4800"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de55304f6e7a8b607e6b3fc7436de50910747b0c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de55304f6e7a8b607e6b3fc7436de50910747b0c"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "9007800421870d61fda1a8ad984a5b0e5e3900b5",
        "filename": "src/deploymentstatus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/deploymentstatus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/deploymentstatus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.cpp?ref=c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
        "patch": "@@ -7,7 +7,7 @@\n #include <consensus/params.h>\n #include <versionbits.h>\n \n-VersionBitsCache versionbitscache;\n+VersionBitsCache g_versionbitscache;\n \n /* Basic sanity checking for BuriedDeployment/DeploymentPos enums and\n  * ValidDeployment check */"
      },
      {
        "sha": "3c4f1895a1b3bede39f50ff86089f456ac8df03e",
        "filename": "src/deploymentstatus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/deploymentstatus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/deploymentstatus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.h?ref=c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
        "patch": "@@ -11,7 +11,7 @@\n #include <limits>\n \n /** Global cache for versionbits deployment status */\n-extern VersionBitsCache versionbitscache;\n+extern VersionBitsCache g_versionbitscache;\n \n /** Determine if a deployment is active for the next block */\n inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n@@ -23,7 +23,7 @@ inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus\n inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos dep)\n {\n     assert(Consensus::ValidDeployment(dep));\n-    return ThresholdState::ACTIVE == VersionBitsState(pindexPrev, params, dep, versionbitscache);\n+    return ThresholdState::ACTIVE == VersionBitsState(pindexPrev, params, dep, g_versionbitscache);\n }\n \n /** Determine if a deployment is active for this block */"
      },
      {
        "sha": "7ceff17d0b46bd351a2bd4a64691b3708e4cbd92",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
        "patch": "@@ -1369,7 +1369,7 @@ static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniVal\n     if (consensusParams.vDeployments[id].nStartTime == Consensus::BIP9Deployment::NEVER_ACTIVE) return;\n \n     UniValue bip9(UniValue::VOBJ);\n-    const ThresholdState thresholdState = VersionBitsState(active_chain_tip, consensusParams, id, versionbitscache);\n+    const ThresholdState thresholdState = VersionBitsState(active_chain_tip, consensusParams, id, g_versionbitscache);\n     switch (thresholdState) {\n     case ThresholdState::DEFINED: bip9.pushKV(\"status\", \"defined\"); break;\n     case ThresholdState::STARTED: bip9.pushKV(\"status\", \"started\"); break;\n@@ -1383,7 +1383,7 @@ static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniVal\n     }\n     bip9.pushKV(\"start_time\", consensusParams.vDeployments[id].nStartTime);\n     bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n-    int64_t since_height = VersionBitsStateSinceHeight(active_chain_tip, consensusParams, id, versionbitscache);\n+    int64_t since_height = VersionBitsStateSinceHeight(active_chain_tip, consensusParams, id, g_versionbitscache);\n     bip9.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n     {"
      },
      {
        "sha": "d6ca0959f23e31c3db0d63512a1d3a61d68c4544",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
        "patch": "@@ -841,7 +841,7 @@ static RPCHelpMan getblocktemplate()\n     UniValue vbavailable(UniValue::VOBJ);\n     for (int j = 0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n         Consensus::DeploymentPos pos = Consensus::DeploymentPos(j);\n-        ThresholdState state = VersionBitsState(pindexPrev, consensusParams, pos, versionbitscache);\n+        ThresholdState state = VersionBitsState(pindexPrev, consensusParams, pos, g_versionbitscache);\n         switch (state) {\n             case ThresholdState::DEFINED:\n             case ThresholdState::FAILED:"
      },
      {
        "sha": "49c61f5f2ff7b759dd172ea74293183805943b96",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
        "patch": "@@ -259,8 +259,8 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n /** Check that ComputeBlockVersion will set the appropriate bit correctly */\n static void check_computeblockversion(const Consensus::Params& params, Consensus::DeploymentPos dep)\n {\n-    // This implicitly uses versionbitscache, so clear it every time\n-    versionbitscache.Clear();\n+    // This implicitly uses g_versionbitscache, so clear it every time\n+    g_versionbitscache.Clear();\n \n     int64_t bit = params.vDeployments[dep].bit;\n     int64_t nStartTime = params.vDeployments[dep].nStartTime;"
      },
      {
        "sha": "d2baa92dde33658fc0b44f0bfc0a500d61492ba5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c64b2c6a0f79369624ae96b2e3d579d50aae4de6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
        "patch": "@@ -1611,7 +1611,7 @@ int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Para\n     int32_t nVersion = VERSIONBITS_TOP_BITS;\n \n     for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        ThresholdState state = VersionBitsState(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i), versionbitscache);\n+        ThresholdState state = VersionBitsState(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i), g_versionbitscache);\n         if (state == ThresholdState::LOCKED_IN || state == ThresholdState::STARTED) {\n             nVersion |= VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(i));\n         }\n@@ -4110,7 +4110,7 @@ void UnloadBlockIndex(CTxMemPool* mempool, ChainstateManager& chainman)\n     nLastBlockFile = 0;\n     setDirtyBlockIndex.clear();\n     setDirtyFileInfo.clear();\n-    versionbitscache.Clear();\n+    g_versionbitscache.Clear();\n     for (int b = 0; b < VERSIONBITS_NUM_BITS; b++) {\n         warningcache[b].clear();\n     }"
      }
    ]
  },
  {
    "sha": "ea68b3a5729f5d240e968388c4f88acffeb27228",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTY4YjNhNTcyOWY1ZDI0MGU5NjgzODhjNGY4OGFjZmZlYjI3MjI4",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-11T02:17:22Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T22:19:12Z"
      },
      "message": "[move-only] Rename versionbitsinfo to deploymentinfo",
      "tree": {
        "sha": "0507e4cdd0e73ea4f24b9bf66628e28b01592922",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0507e4cdd0e73ea4f24b9bf66628e28b01592922"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea68b3a5729f5d240e968388c4f88acffeb27228",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea68b3a5729f5d240e968388c4f88acffeb27228",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea68b3a5729f5d240e968388c4f88acffeb27228",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea68b3a5729f5d240e968388c4f88acffeb27228/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c64b2c6a0f79369624ae96b2e3d579d50aae4de6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c64b2c6a0f79369624ae96b2e3d579d50aae4de6"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "37ba5ad75b5f6c30e35cdb981589e1e4fa7cb135",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea68b3a5729f5d240e968388c4f88acffeb27228/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea68b3a5729f5d240e968388c4f88acffeb27228/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ea68b3a5729f5d240e968388c4f88acffeb27228",
        "patch": "@@ -145,6 +145,7 @@ BITCOIN_CORE_H = \\\n   core_memusage.h \\\n   cuckoocache.h \\\n   dbwrapper.h \\\n+  deploymentinfo.h \\\n   deploymentstatus.h \\\n   external_signer.h \\\n   flatfile.h \\\n@@ -273,7 +274,6 @@ BITCOIN_CORE_H = \\\n   validation.h \\\n   validationinterface.h \\\n   versionbits.h \\\n-  versionbitsinfo.h \\\n   wallet/bdb.h \\\n   wallet/coincontrol.h \\\n   wallet/coinselection.h \\\n@@ -542,6 +542,7 @@ libbitcoin_common_a_SOURCES = \\\n   compressor.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\\n+  deploymentinfo.cpp \\\n   external_signer.cpp \\\n   init/common.cpp \\\n   key.cpp \\\n@@ -563,7 +564,6 @@ libbitcoin_common_a_SOURCES = \\\n   script/sign.cpp \\\n   script/signingprovider.cpp \\\n   script/standard.cpp \\\n-  versionbitsinfo.cpp \\\n   warnings.cpp \\\n   $(BITCOIN_CORE_H)\n "
      },
      {
        "sha": "58a27e053b9f3f8a17a4a072b5ec14416917e4f4",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea68b3a5729f5d240e968388c4f88acffeb27228/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea68b3a5729f5d240e968388c4f88acffeb27228/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=ea68b3a5729f5d240e968388c4f88acffeb27228",
        "patch": "@@ -7,9 +7,9 @@\n \n #include <chainparamsseeds.h>\n #include <consensus/merkle.h>\n+#include <deploymentinfo.h>\n #include <hash.h> // for signet block challenge hash\n #include <util/system.h>\n-#include <versionbitsinfo.h>\n \n #include <assert.h>\n "
      },
      {
        "sha": "174f4677fa08a475efb3b4697a1250064bfd496f",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea68b3a5729f5d240e968388c4f88acffeb27228/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea68b3a5729f5d240e968388c4f88acffeb27228/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=ea68b3a5729f5d240e968388c4f88acffeb27228",
        "patch": "@@ -26,7 +26,7 @@ enum DeploymentPos : uint16_t\n {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_TAPROOT, // Deployment of Schnorr/Taproot (BIPs 340-342)\n-    // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n+    // NOTE: Also add new deployments to VersionBitsDeploymentInfo in deploymentinfo.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n constexpr bool ValidDeployment(DeploymentPos dep) { return DEPLOYMENT_TESTDUMMY <= dep && dep <= DEPLOYMENT_TAPROOT; }"
      },
      {
        "sha": "70d9961133084bcedcf310e039930ec9bd275f52",
        "filename": "src/deploymentinfo.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea68b3a5729f5d240e968388c4f88acffeb27228/src/deploymentinfo.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea68b3a5729f5d240e968388c4f88acffeb27228/src/deploymentinfo.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentinfo.cpp?ref=ea68b3a5729f5d240e968388c4f88acffeb27228",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <versionbitsinfo.h>\n+#include <deploymentinfo.h>\n \n #include <consensus/params.h>\n ",
        "previous_filename": "src/versionbitsinfo.cpp"
      },
      {
        "sha": "4c68856eaca9f1b5111f020ac426d161d43be635",
        "filename": "src/deploymentinfo.h",
        "status": "renamed",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea68b3a5729f5d240e968388c4f88acffeb27228/src/deploymentinfo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea68b3a5729f5d240e968388c4f88acffeb27228/src/deploymentinfo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentinfo.h?ref=ea68b3a5729f5d240e968388c4f88acffeb27228",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_VERSIONBITSINFO_H\n-#define BITCOIN_VERSIONBITSINFO_H\n+#ifndef BITCOIN_DEPLOYMENTINFO_H\n+#define BITCOIN_DEPLOYMENTINFO_H\n \n struct VBDeploymentInfo {\n     /** Deployment name */\n@@ -14,4 +14,4 @@ struct VBDeploymentInfo {\n \n extern const struct VBDeploymentInfo VersionBitsDeploymentInfo[];\n \n-#endif // BITCOIN_VERSIONBITSINFO_H\n+#endif // BITCOIN_DEPLOYMENTINFO_H",
        "previous_filename": "src/versionbitsinfo.h"
      },
      {
        "sha": "04aa459e11f034e1220fefc2ab3245f187fd6dd2",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea68b3a5729f5d240e968388c4f88acffeb27228/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea68b3a5729f5d240e968388c4f88acffeb27228/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ea68b3a5729f5d240e968388c4f88acffeb27228",
        "patch": "@@ -10,6 +10,7 @@\n #include <consensus/params.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n+#include <deploymentinfo.h>\n #include <deploymentstatus.h>\n #include <key_io.h>\n #include <miner.h>\n@@ -35,7 +36,6 @@\n #include <util/translation.h>\n #include <validation.h>\n #include <validationinterface.h>\n-#include <versionbitsinfo.h>\n #include <warnings.h>\n \n #include <memory>"
      }
    ]
  },
  {
    "sha": "92f48f360da5f425428b761219301f509826bec4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmY0OGYzNjBkYTVmNDI1NDI4Yjc2MTIxOTMwMWY1MDk4MjZiZWM0",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-11T02:47:24Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T22:19:12Z"
      },
      "message": "deploymentinfo: Add DeploymentName()",
      "tree": {
        "sha": "06edcd128c8025ada2211aaaa4aa5212e9867f48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06edcd128c8025ada2211aaaa4aa5212e9867f48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92f48f360da5f425428b761219301f509826bec4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f48f360da5f425428b761219301f509826bec4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92f48f360da5f425428b761219301f509826bec4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f48f360da5f425428b761219301f509826bec4/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea68b3a5729f5d240e968388c4f88acffeb27228",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea68b3a5729f5d240e968388c4f88acffeb27228",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea68b3a5729f5d240e968388c4f88acffeb27228"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 31,
      "deletions": 1
    },
    "files": [
      {
        "sha": "030a7806dec010009fc566bd7f53a099d3edbc3a",
        "filename": "src/deploymentinfo.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f48f360da5f425428b761219301f509826bec4/src/deploymentinfo.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f48f360da5f425428b761219301f509826bec4/src/deploymentinfo.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentinfo.cpp?ref=92f48f360da5f425428b761219301f509826bec4",
        "patch": "@@ -16,3 +16,21 @@ const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_B\n         /*.gbt_force =*/ true,\n     },\n };\n+\n+std::string DeploymentName(Consensus::BuriedDeployment dep)\n+{\n+    assert(ValidDeployment(dep));\n+    switch (dep) {\n+    case Consensus::DEPLOYMENT_HEIGHTINCB:\n+        return \"bip34\";\n+    case Consensus::DEPLOYMENT_CLTV:\n+        return \"bip65\";\n+    case Consensus::DEPLOYMENT_DERSIG:\n+        return \"bip66\";\n+    case Consensus::DEPLOYMENT_CSV:\n+        return \"csv\";\n+    case Consensus::DEPLOYMENT_SEGWIT:\n+        return \"segwit\";\n+    } // no default case, so the compiler can warn about missing cases\n+    return \"\";\n+}"
      },
      {
        "sha": "63d58a7da253913d0b3c81e6f66faa676932a5f4",
        "filename": "src/deploymentinfo.h",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f48f360da5f425428b761219301f509826bec4/src/deploymentinfo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f48f360da5f425428b761219301f509826bec4/src/deploymentinfo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentinfo.h?ref=92f48f360da5f425428b761219301f509826bec4",
        "patch": "@@ -5,13 +5,25 @@\n #ifndef BITCOIN_DEPLOYMENTINFO_H\n #define BITCOIN_DEPLOYMENTINFO_H\n \n+#include <consensus/params.h>\n+\n+#include <string>\n+\n struct VBDeploymentInfo {\n     /** Deployment name */\n     const char *name;\n     /** Whether GBT clients can safely ignore this rule in simplified usage */\n     bool gbt_force;\n };\n \n-extern const struct VBDeploymentInfo VersionBitsDeploymentInfo[];\n+extern const VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS];\n+\n+std::string DeploymentName(Consensus::BuriedDeployment dep);\n+\n+inline std::string DeploymentName(Consensus::DeploymentPos pos)\n+{\n+    assert(Consensus::ValidDeployment(pos));\n+    return VersionBitsDeploymentInfo[pos].name;\n+}\n \n #endif // BITCOIN_DEPLOYMENTINFO_H"
      }
    ]
  },
  {
    "sha": "8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWUzZTBiZWQ1YmYyY2QzYzdhNjhjYTZiYTZjNjVmN2I5YTcyY2Nh",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-11T02:17:52Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T22:19:12Z"
      },
      "message": "[refactor] rpc/blockchain.cpp: SoftForkPushBack\n\nRename BIP9SoftForkPushBack and BuriedSoftForkPushBack to SoftForkPushBack\nand have the compiler figure out which one to use based on the deployment\ntype. Avoids the need to update the file when burying a deployment.",
      "tree": {
        "sha": "24e4febdcacca35b1de63b010fa45f6c95fdc4d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24e4febdcacca35b1de63b010fa45f6c95fdc4d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92f48f360da5f425428b761219301f509826bec4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f48f360da5f425428b761219301f509826bec4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92f48f360da5f425428b761219301f509826bec4"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "9c9a909d66912a9caa663d283d5c936571d144e7",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 15,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca",
        "patch": "@@ -10,8 +10,10 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <coins.h>\n+#include <consensus/params.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n+#include <deploymentinfo.h>\n #include <deploymentstatus.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n@@ -38,6 +40,7 @@\n #include <util/translation.h>\n #include <validation.h>\n #include <validationinterface.h>\n+#include <versionbits.h>\n #include <warnings.h>\n \n #include <stdint.h>\n@@ -1344,25 +1347,25 @@ static RPCHelpMan verifychain()\n     };\n }\n \n-static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name, int softfork_height, int tip_height) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n {\n     // For buried deployments.\n     // A buried deployment is one where the height of the activation has been hardcoded into\n     // the client implementation long after the consensus change has activated. See BIP 90.\n     // Buried deployments with activation height value of\n     // std::numeric_limits<int>::max() are disabled and thus hidden.\n-    if (softfork_height == std::numeric_limits<int>::max()) return;\n+    if (!DeploymentEnabled(params, dep)) return;\n \n     UniValue rv(UniValue::VOBJ);\n     rv.pushKV(\"type\", \"buried\");\n     // getblockchaininfo reports the softfork as active from when the chain height is\n     // one below the activation height\n-    rv.pushKV(\"active\", tip_height + 1 >= softfork_height);\n-    rv.pushKV(\"height\", softfork_height);\n-    softforks.pushKV(name, rv);\n+    rv.pushKV(\"active\", DeploymentActiveAfter(active_chain_tip, params, dep));\n+    rv.pushKV(\"height\", params.DeploymentHeight(dep));\n+    softforks.pushKV(DeploymentName(dep), rv);\n }\n \n-static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n+static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n {\n     // For BIP9 deployments.\n     // Deployments that are never active are hidden.\n@@ -1406,7 +1409,7 @@ static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniVal\n     }\n     rv.pushKV(\"active\", ThresholdState::ACTIVE == thresholdState);\n \n-    softforks.pushKV(name, rv);\n+    softforks.pushKV(DeploymentName(id), rv);\n }\n \n RPCHelpMan getblockchaininfo()\n@@ -1503,14 +1506,14 @@ RPCHelpMan getblockchaininfo()\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     UniValue softforks(UniValue::VOBJ);\n-    BuriedForkDescPushBack(softforks, \"bip34\", consensusParams.BIP34Height, height);\n-    BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height, height);\n-    BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height, height);\n-    BuriedForkDescPushBack(softforks, \"csv\", consensusParams.CSVHeight, height);\n-    BuriedForkDescPushBack(softforks, \"segwit\", consensusParams.SegwitHeight, height);\n-    BIP9SoftForkDescPushBack(tip, softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n-    BIP9SoftForkDescPushBack(tip, softforks, \"taproot\", consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n-    obj.pushKV(\"softforks\",             softforks);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_DERSIG);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_CLTV);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_CSV);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n+    obj.pushKV(\"softforks\", softforks);\n \n     obj.pushKV(\"warnings\", GetWarnings(false).original);\n     return obj;"
      }
    ]
  },
  {
    "sha": "0cfd6c6a8f929d5567ac41f95c21548f115efee5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2ZkNmM2YThmOTI5ZDU1NjdhYzQxZjk1YzIxNTQ4ZjExNWVmZWU1",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-12-29T01:19:06Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T22:19:12Z"
      },
      "message": "[refactor] versionbits: make VersionBitsCache a full class\n\nMoves the VersionBits* functions to be methods of the cache class,\nand makes the cache and its lock private to the class.",
      "tree": {
        "sha": "fd396692805022b432022c45da6bb2a18b2fa54b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd396692805022b432022c45da6bb2a18b2fa54b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cfd6c6a8f929d5567ac41f95c21548f115efee5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cfd6c6a8f929d5567ac41f95c21548f115efee5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cfd6c6a8f929d5567ac41f95c21548f115efee5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cfd6c6a8f929d5567ac41f95c21548f115efee5/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ee3e0bed5bf2cd3c7a68ca6ba6c65f7b9a72cca"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 39,
      "deletions": 34
    },
    "files": [
      {
        "sha": "84c5e54698c99684aa21748046845aa7fb0001a0",
        "filename": "src/deploymentstatus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/deploymentstatus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/deploymentstatus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.h?ref=0cfd6c6a8f929d5567ac41f95c21548f115efee5",
        "patch": "@@ -23,7 +23,7 @@ inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus\n inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos dep)\n {\n     assert(Consensus::ValidDeployment(dep));\n-    return ThresholdState::ACTIVE == VersionBitsState(pindexPrev, params, dep, g_versionbitscache);\n+    return ThresholdState::ACTIVE == g_versionbitscache.State(pindexPrev, params, dep);\n }\n \n /** Determine if a deployment is active for this block */"
      },
      {
        "sha": "b630458f2348add9a99be1b66d91517f38f3e759",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=0cfd6c6a8f929d5567ac41f95c21548f115efee5",
        "patch": "@@ -1372,7 +1372,7 @@ static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue&\n     if (consensusParams.vDeployments[id].nStartTime == Consensus::BIP9Deployment::NEVER_ACTIVE) return;\n \n     UniValue bip9(UniValue::VOBJ);\n-    const ThresholdState thresholdState = VersionBitsState(active_chain_tip, consensusParams, id, g_versionbitscache);\n+    const ThresholdState thresholdState = g_versionbitscache.State(active_chain_tip, consensusParams, id);\n     switch (thresholdState) {\n     case ThresholdState::DEFINED: bip9.pushKV(\"status\", \"defined\"); break;\n     case ThresholdState::STARTED: bip9.pushKV(\"status\", \"started\"); break;\n@@ -1386,12 +1386,12 @@ static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue&\n     }\n     bip9.pushKV(\"start_time\", consensusParams.vDeployments[id].nStartTime);\n     bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n-    int64_t since_height = VersionBitsStateSinceHeight(active_chain_tip, consensusParams, id, g_versionbitscache);\n+    int64_t since_height = g_versionbitscache.StateSinceHeight(active_chain_tip, consensusParams, id);\n     bip9.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n-        BIP9Stats statsStruct = VersionBitsStatistics(active_chain_tip, consensusParams, id);\n+        BIP9Stats statsStruct = g_versionbitscache.Statistics(active_chain_tip, consensusParams, id);\n         statsUV.pushKV(\"period\", statsStruct.period);\n         statsUV.pushKV(\"threshold\", statsStruct.threshold);\n         statsUV.pushKV(\"elapsed\", statsStruct.elapsed);"
      },
      {
        "sha": "2762d78493b2a64e6ad0773ede84a1fd6cdf2993",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=0cfd6c6a8f929d5567ac41f95c21548f115efee5",
        "patch": "@@ -841,15 +841,15 @@ static RPCHelpMan getblocktemplate()\n     UniValue vbavailable(UniValue::VOBJ);\n     for (int j = 0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n         Consensus::DeploymentPos pos = Consensus::DeploymentPos(j);\n-        ThresholdState state = VersionBitsState(pindexPrev, consensusParams, pos, g_versionbitscache);\n+        ThresholdState state = g_versionbitscache.State(pindexPrev, consensusParams, pos);\n         switch (state) {\n             case ThresholdState::DEFINED:\n             case ThresholdState::FAILED:\n                 // Not exposed to GBT at all\n                 break;\n             case ThresholdState::LOCKED_IN:\n                 // Ensure bit is set in block version\n-                pblock->nVersion |= VersionBitsMask(consensusParams, pos);\n+                pblock->nVersion |= g_versionbitscache.Mask(consensusParams, pos);\n                 // FALL THROUGH to get vbavailable set...\n             case ThresholdState::STARTED:\n             {\n@@ -858,7 +858,7 @@ static RPCHelpMan getblocktemplate()\n                 if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n                     if (!vbinfo.gbt_force) {\n                         // If the client doesn't support this, don't indicate it in the [default] version\n-                        pblock->nVersion &= ~VersionBitsMask(consensusParams, pos);\n+                        pblock->nVersion &= ~g_versionbitscache.Mask(consensusParams, pos);\n                     }\n                 }\n                 break;"
      },
      {
        "sha": "946b35f3b9330c41eacc6db1fbf7e413c8ff064b",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=0cfd6c6a8f929d5567ac41f95c21548f115efee5",
        "patch": "@@ -288,7 +288,7 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n     // Check min_activation_height is on a retarget boundary\n     BOOST_REQUIRE_EQUAL(min_activation_height % params.nMinerConfirmationWindow, 0U);\n \n-    const uint32_t bitmask{VersionBitsMask(params, dep)};\n+    const uint32_t bitmask{g_versionbitscache.Mask(params, dep)};\n     BOOST_CHECK_EQUAL(bitmask, uint32_t{1} << bit);\n \n     // In the first chain, test that the bit is set by CBV until it has failed.\n@@ -426,7 +426,7 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n             // not take precedence over STARTED/LOCKED_IN. So all softforks on\n             // the same bit might overlap, even when non-overlapping start-end\n             // times are picked.\n-            const uint32_t dep_mask{VersionBitsMask(chainParams->GetConsensus(), dep)};\n+            const uint32_t dep_mask{g_versionbitscache.Mask(chainParams->GetConsensus(), dep)};\n             BOOST_CHECK(!(chain_all_vbits & dep_mask));\n             chain_all_vbits |= dep_mask;\n             check_computeblockversion(chainParams->GetConsensus(), dep);"
      },
      {
        "sha": "024f643be5cf5075738fe61d929eadc57d7e4ac4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0cfd6c6a8f929d5567ac41f95c21548f115efee5",
        "patch": "@@ -1611,9 +1611,9 @@ int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Para\n     int32_t nVersion = VERSIONBITS_TOP_BITS;\n \n     for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        ThresholdState state = VersionBitsState(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i), g_versionbitscache);\n+        ThresholdState state = g_versionbitscache.State(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i));\n         if (state == ThresholdState::LOCKED_IN || state == ThresholdState::STARTED) {\n-            nVersion |= VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(i));\n+            nVersion |= g_versionbitscache.Mask(params, static_cast<Consensus::DeploymentPos>(i));\n         }\n     }\n "
      },
      {
        "sha": "0fbad0a64eb5c782270dc423c03869a9d4fc25fc",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=0cfd6c6a8f929d5567ac41f95c21548f115efee5",
        "patch": "@@ -190,32 +190,32 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n \n } // namespace\n \n-ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n+ThresholdState VersionBitsCache::State(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n-    LOCK(cache.mutex);\n-    return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, cache.caches[pos]);\n+    LOCK(m_mutex);\n+    return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, m_caches[pos]);\n }\n \n-BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n+BIP9Stats VersionBitsCache::Statistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     return VersionBitsConditionChecker(pos).GetStateStatisticsFor(pindexPrev, params);\n }\n \n-int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n+int VersionBitsCache::StateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n-    LOCK(cache.mutex);\n-    return VersionBitsConditionChecker(pos).GetStateSinceHeightFor(pindexPrev, params, cache.caches[pos]);\n+    LOCK(m_mutex);\n+    return VersionBitsConditionChecker(pos).GetStateSinceHeightFor(pindexPrev, params, m_caches[pos]);\n }\n \n-uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos)\n+uint32_t VersionBitsCache::Mask(const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     return VersionBitsConditionChecker(pos).Mask(params);\n }\n \n void VersionBitsCache::Clear()\n {\n-    LOCK(mutex);\n+    LOCK(m_mutex);\n     for (unsigned int d = 0; d < Consensus::MAX_VERSION_BITS_DEPLOYMENTS; d++) {\n-        caches[d].clear();\n+        m_caches[d].clear();\n     }\n }"
      },
      {
        "sha": "4ede92080379ffd0aa7a9d057144ba97cad5af52",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 18,
        "deletions": 13,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cfd6c6a8f929d5567ac41f95c21548f115efee5/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=0cfd6c6a8f929d5567ac41f95c21548f115efee5",
        "patch": "@@ -73,22 +73,27 @@ class AbstractThresholdConditionChecker {\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n };\n \n-/** BIP 9 allows multiple softforks to be deployed in parallel. We cache per-period state for every one of them\n- *  keyed by the bit position used to signal support. */\n-struct VersionBitsCache\n+/** BIP 9 allows multiple softforks to be deployed in parallel. We cache\n+ *  per-period state for every one of them. */\n+class VersionBitsCache\n {\n-    Mutex mutex;\n-    ThresholdConditionCache caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] GUARDED_BY(mutex);\n+private:\n+    Mutex m_mutex;\n+    ThresholdConditionCache m_caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] GUARDED_BY(m_mutex);\n+\n+public:\n+    /** Get the numerical statistics for a given deployment for the signalling period that includes the block after pindexPrev. */\n+    static BIP9Stats Statistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n+    static uint32_t Mask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n+    /** Get the BIP9 state for a given deployment for the block after pindexPrev. */\n+    ThresholdState State(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n+    /** Get the block height at which the BIP9 deployment switched into the state for the block after pindexPrev. */\n+    int StateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n     void Clear();\n };\n \n-/** Get the BIP9 state for a given deployment for the block after pindexPrev. */\n-ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n-/** Get the numerical statistics for a given deployment for the signalling period that includes the block after pindexPrev. */\n-BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n-/** Get the block height at which the BIP9 deployment switched into the state for the block after pindexPrev. */\n-int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n-uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n-\n #endif // BITCOIN_VERSIONBITS_H"
      }
    ]
  },
  {
    "sha": "4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTY5YjRkYmUwZDdmNTA0ODExYjY3YzM5OWRhN2U2ZDExZTRmODA1",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-04-16T08:33:02Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T22:19:12Z"
      },
      "message": "[move-only] Move ComputeBlockVersion from validation to versionbits",
      "tree": {
        "sha": "f68a96ce61f4cbc31c2550f75950c450e18fb98f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f68a96ce61f4cbc31c2550f75950c450e18fb98f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a69b4dbe0d7f504811b67c399da7e6d11e4f805/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0cfd6c6a8f929d5567ac41f95c21548f115efee5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cfd6c6a8f929d5567ac41f95c21548f115efee5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0cfd6c6a8f929d5567ac41f95c21548f115efee5"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 21,
      "deletions": 19
    },
    "files": [
      {
        "sha": "ee10e047bd15c43d17b1605eb78ce771c5ec510f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a69b4dbe0d7f504811b67c399da7e6d11e4f805/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a69b4dbe0d7f504811b67c399da7e6d11e4f805/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
        "patch": "@@ -1606,20 +1606,6 @@ void StopScriptCheckWorkerThreads()\n     scriptcheckqueue.StopWorkerThreads();\n }\n \n-int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n-{\n-    int32_t nVersion = VERSIONBITS_TOP_BITS;\n-\n-    for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        ThresholdState state = g_versionbitscache.State(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i));\n-        if (state == ThresholdState::LOCKED_IN || state == ThresholdState::STARTED) {\n-            nVersion |= g_versionbitscache.Mask(params, static_cast<Consensus::DeploymentPos>(i));\n-        }\n-    }\n-\n-    return nVersion;\n-}\n-\n /**\n  * Threshold condition checker that triggers when unknown versionbits are seen on the network.\n  */"
      },
      {
        "sha": "3d66e3161dd9a8c424d05db3ba44b668abdd8186",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a69b4dbe0d7f504811b67c399da7e6d11e4f805/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a69b4dbe0d7f504811b67c399da7e6d11e4f805/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
        "patch": "@@ -1019,11 +1019,6 @@ class ChainstateManager\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern std::unique_ptr<CBlockTreeDB> pblocktree;\n \n-/**\n- * Determine what nVersion a new block should use.\n- */\n-int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n-\n using FopenFn = std::function<FILE*(const fs::path&, const char*)>;\n \n /** Dump the mempool to disk. */"
      },
      {
        "sha": "3497fc049e66658ec57f8feccd8c2c0e23971f39",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a69b4dbe0d7f504811b67c399da7e6d11e4f805/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a69b4dbe0d7f504811b67c399da7e6d11e4f805/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
        "patch": "@@ -212,6 +212,22 @@ uint32_t VersionBitsCache::Mask(const Consensus::Params& params, Consensus::Depl\n     return VersionBitsConditionChecker(pos).Mask(params);\n }\n \n+extern VersionBitsCache g_versionbitscache; // removed in next commit\n+\n+int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    int32_t nVersion = VERSIONBITS_TOP_BITS;\n+\n+    for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n+        ThresholdState state = g_versionbitscache.State(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i));\n+        if (state == ThresholdState::LOCKED_IN || state == ThresholdState::STARTED) {\n+            nVersion |= g_versionbitscache.Mask(params, static_cast<Consensus::DeploymentPos>(i));\n+        }\n+    }\n+\n+    return nVersion;\n+}\n+\n void VersionBitsCache::Clear()\n {\n     LOCK(m_mutex);"
      },
      {
        "sha": "c18a8d1176a6d8f5d79500944a37ae2370685072",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a69b4dbe0d7f504811b67c399da7e6d11e4f805/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a69b4dbe0d7f504811b67c399da7e6d11e4f805/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
        "patch": "@@ -96,4 +96,9 @@ class VersionBitsCache\n     void Clear();\n };\n \n+/**\n+ * Determine what nVersion a new block should use.\n+ */\n+int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n+\n #endif // BITCOIN_VERSIONBITS_H"
      }
    ]
  },
  {
    "sha": "c5f36725e877d8eb492383844f8ef7535466b366",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWYzNjcyNWU4NzdkOGViNDkyMzgzODQ0ZjhlZjc1MzU0NjZiMzY2",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-04-16T08:34:34Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T22:19:12Z"
      },
      "message": "[refactor] Move ComputeBlockVersion into VersionBitsCache\n\nThis also changes ComputeBlockVersion to take the versionbits cache\nmutex once, rather than once for each versionbits deployment.",
      "tree": {
        "sha": "ce68ede5ada96fed4a558a1f88e7354e4a1ac3b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce68ede5ada96fed4a558a1f88e7354e4a1ac3b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5f36725e877d8eb492383844f8ef7535466b366",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5f36725e877d8eb492383844f8ef7535466b366",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5f36725e877d8eb492383844f8ef7535466b366",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5f36725e877d8eb492383844f8ef7535466b366/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a69b4dbe0d7f504811b67c399da7e6d11e4f805",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a69b4dbe0d7f504811b67c399da7e6d11e4f805"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 16,
      "deletions": 12
    },
    "files": [
      {
        "sha": "d9186a5d6dc4c9cc8403903b6fb17397f82a11e0",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f36725e877d8eb492383844f8ef7535466b366/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f36725e877d8eb492383844f8ef7535466b366/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=c5f36725e877d8eb492383844f8ef7535466b366",
        "patch": "@@ -121,7 +121,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     assert(pindexPrev != nullptr);\n     nHeight = pindexPrev->nHeight + 1;\n \n-    pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());\n+    pblock->nVersion = g_versionbitscache.ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());\n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n     if (chainparams.MineBlocksOnDemand())"
      },
      {
        "sha": "60a8373cf423cb23cc7b76c5b0bce3eca6ea49f3",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f36725e877d8eb492383844f8ef7535466b366/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f36725e877d8eb492383844f8ef7535466b366/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=c5f36725e877d8eb492383844f8ef7535466b366",
        "patch": "@@ -15,6 +15,11 @@\n /* Define a virtual block time, one block per 10 minutes after Nov 14 2014, 0:55:36am */\n static int32_t TestTime(int nHeight) { return 1415926536 + 600 * nHeight; }\n \n+static int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    return g_versionbitscache.ComputeBlockVersion(pindexPrev, params);\n+}\n+\n static const std::string StateName(ThresholdState state)\n {\n     switch (state) {"
      },
      {
        "sha": "65d2dfa3b7add202583c3688b2b509b3d5d66b8c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f36725e877d8eb492383844f8ef7535466b366/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f36725e877d8eb492383844f8ef7535466b366/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c5f36725e877d8eb492383844f8ef7535466b366",
        "patch": "@@ -1627,7 +1627,7 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n         return pindex->nHeight >= params.MinBIP9WarningHeight &&\n                ((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) &&\n                ((pindex->nVersion >> bit) & 1) != 0 &&\n-               ((ComputeBlockVersion(pindex->pprev, params) >> bit) & 1) == 0;\n+               ((g_versionbitscache.ComputeBlockVersion(pindex->pprev, params) >> bit) & 1) == 0;\n     }\n };\n "
      },
      {
        "sha": "94c3c9559f67250bde377d6db8a85b9145001390",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f36725e877d8eb492383844f8ef7535466b366/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f36725e877d8eb492383844f8ef7535466b366/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=c5f36725e877d8eb492383844f8ef7535466b366",
        "patch": "@@ -212,16 +212,16 @@ uint32_t VersionBitsCache::Mask(const Consensus::Params& params, Consensus::Depl\n     return VersionBitsConditionChecker(pos).Mask(params);\n }\n \n-extern VersionBitsCache g_versionbitscache; // removed in next commit\n-\n-int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+int32_t VersionBitsCache::ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n {\n+    LOCK(m_mutex);\n     int32_t nVersion = VERSIONBITS_TOP_BITS;\n \n     for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        ThresholdState state = g_versionbitscache.State(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i));\n+        Consensus::DeploymentPos pos = static_cast<Consensus::DeploymentPos>(i);\n+        ThresholdState state = VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, m_caches[pos]);\n         if (state == ThresholdState::LOCKED_IN || state == ThresholdState::STARTED) {\n-            nVersion |= g_versionbitscache.Mask(params, static_cast<Consensus::DeploymentPos>(i));\n+            nVersion |= Mask(params, pos);\n         }\n     }\n "
      },
      {
        "sha": "0b2f4a0258a4047a5d195e393ed8f3df2008458b",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f36725e877d8eb492383844f8ef7535466b366/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f36725e877d8eb492383844f8ef7535466b366/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=c5f36725e877d8eb492383844f8ef7535466b366",
        "patch": "@@ -93,12 +93,11 @@ class VersionBitsCache\n     /** Get the block height at which the BIP9 deployment switched into the state for the block after pindexPrev. */\n     int StateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n+    /** Determine what nVersion a new block should use\n+     */\n+    int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n+\n     void Clear();\n };\n \n-/**\n- * Determine what nVersion a new block should use.\n- */\n-int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n-\n #endif // BITCOIN_VERSIONBITS_H"
      }
    ]
  },
  {
    "sha": "e48826ad87b4f92261f7433e84f48dac9bd9e5c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDg4MjZhZDg3YjRmOTIyNjFmNzQzM2U4NGY0OGRhYzliZDllNWMz",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-07T04:58:54Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-29T22:19:12Z"
      },
      "message": "tests: remove ComputeBlockVersion shortcut from versionbits tests",
      "tree": {
        "sha": "917e9689b7be540c3f888dbd7cbe0b906fb975cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/917e9689b7be540c3f888dbd7cbe0b906fb975cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e48826ad87b4f92261f7433e84f48dac9bd9e5c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e48826ad87b4f92261f7433e84f48dac9bd9e5c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e48826ad87b4f92261f7433e84f48dac9bd9e5c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e48826ad87b4f92261f7433e84f48dac9bd9e5c3/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5f36725e877d8eb492383844f8ef7535466b366",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5f36725e877d8eb492383844f8ef7535466b366",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5f36725e877d8eb492383844f8ef7535466b366"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 18,
      "deletions": 23
    },
    "files": [
      {
        "sha": "690031cdc17fbe940f52c438b55a95d5bec2da13",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 23,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e48826ad87b4f92261f7433e84f48dac9bd9e5c3/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e48826ad87b4f92261f7433e84f48dac9bd9e5c3/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=e48826ad87b4f92261f7433e84f48dac9bd9e5c3",
        "patch": "@@ -15,11 +15,6 @@\n /* Define a virtual block time, one block per 10 minutes after Nov 14 2014, 0:55:36am */\n static int32_t TestTime(int nHeight) { return 1415926536 + 600 * nHeight; }\n \n-static int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n-{\n-    return g_versionbitscache.ComputeBlockVersion(pindexPrev, params);\n-}\n-\n static const std::string StateName(ThresholdState state)\n {\n     switch (state) {\n@@ -273,7 +268,7 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n     int min_activation_height = params.vDeployments[dep].min_activation_height;\n \n     // should not be any signalling for first block\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(nullptr, params), VERSIONBITS_TOP_BITS);\n+    BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(nullptr, params), VERSIONBITS_TOP_BITS);\n \n     // always/never active deployments shouldn't need to be tested further\n     if (nStartTime == Consensus::BIP9Deployment::ALWAYS_ACTIVE ||\n@@ -312,38 +307,38 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n         // earlier time, so will transition from DEFINED to STARTED at the\n         // end of the first period by mining blocks at nTime == 0\n         lastBlock = firstChain.Mine(params.nMinerConfirmationWindow - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+        BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit), 0);\n         lastBlock = firstChain.Mine(params.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+        BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n         // then we'll keep mining at nStartTime...\n     } else {\n         // use a time 1s earlier than start time to check we stay DEFINED\n         --nTime;\n \n         // Start generating blocks before nStartTime\n         lastBlock = firstChain.Mine(params.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+        BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit), 0);\n \n         // Mine more blocks (4 less than the adjustment period) at the old time, and check that CBV isn't setting the bit yet.\n         for (uint32_t i = 1; i < params.nMinerConfirmationWindow - 4; i++) {\n             lastBlock = firstChain.Mine(params.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-            BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+            BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit), 0);\n         }\n         // Now mine 5 more blocks at the start time -- MTP should not have passed yet, so\n         // CBV should still not yet set the bit.\n         nTime = nStartTime;\n         for (uint32_t i = params.nMinerConfirmationWindow - 4; i <= params.nMinerConfirmationWindow; i++) {\n             lastBlock = firstChain.Mine(params.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-            BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+            BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit), 0);\n         }\n         // Next we will advance to the next period and transition to STARTED,\n     }\n \n     lastBlock = firstChain.Mine(params.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     // so ComputeBlockVersion should now set the bit,\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+    BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n     // and should also be using the VERSIONBITS_TOP_BITS.\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+    BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n \n     // Check that ComputeBlockVersion will set the bit until nTimeout\n     nTime += 600;\n@@ -352,8 +347,8 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n     // These blocks are all before nTimeout is reached.\n     while (nTime < nTimeout && blocksToMine > 0) {\n         lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+        BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n+        BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n         blocksToMine--;\n         nTime += 600;\n         nHeight += 1;\n@@ -367,20 +362,20 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n         // finish the last period before we start timing out\n         while (nHeight % params.nMinerConfirmationWindow != 0) {\n             lastBlock = firstChain.Mine(nHeight+1, nTime - 1, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-            BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+            BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n             nHeight += 1;\n         }\n \n         // FAILED is only triggered at the end of a period, so CBV should be setting\n         // the bit until the period transition.\n         for (uint32_t i = 0; i < params.nMinerConfirmationWindow - 1; i++) {\n             lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-            BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+            BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n             nHeight += 1;\n         }\n         // The next block should trigger no longer setting the bit.\n         lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+        BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit), 0);\n     }\n \n     // On a new chain:\n@@ -391,30 +386,30 @@ static void check_computeblockversion(const Consensus::Params& params, Consensus\n     // Mine one period worth of blocks, and check that the bit will be on for the\n     // next period.\n     lastBlock = secondChain.Mine(params.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+    BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n \n     // Mine another period worth of blocks, signaling the new bit.\n     lastBlock = secondChain.Mine(params.nMinerConfirmationWindow * 2, nTime, VERSIONBITS_TOP_BITS | (1<<bit)).Tip();\n     // After one period of setting the bit on each block, it should have locked in.\n     // We keep setting the bit for one more period though, until activation.\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1<<bit)) != 0);\n+    BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n \n     // Now check that we keep mining the block until the end of this period, and\n     // then stop at the beginning of the next period.\n     lastBlock = secondChain.Mine((params.nMinerConfirmationWindow * 3) - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n+    BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n     lastBlock = secondChain.Mine(params.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n \n     if (lastBlock->nHeight + 1 < min_activation_height) {\n         // check signalling continues while min_activation_height is not reached\n         lastBlock = secondChain.Mine(min_activation_height - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n+        BOOST_CHECK((g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit)) != 0);\n         // then reach min_activation_height, which was already REQUIRE'd to start a new period\n         lastBlock = secondChain.Mine(min_activation_height, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     }\n \n     // Check that we don't signal after activation\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, params) & (1<<bit), 0);\n+    BOOST_CHECK_EQUAL(g_versionbitscache.ComputeBlockVersion(lastBlock, params) & (1 << bit), 0);\n }\n \n BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)"
      }
    ]
  }
]