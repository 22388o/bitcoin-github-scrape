DrahtBot,2020-07-03 19:35:09,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22371 by MarcoFalke\n* #22242 by MarcoFalke\n* #21702 by JeremyRubin\n* #21430 by hebasto\n* #21090 by dhruv\n\nIf you co",https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-653660370,653660370,
sipa,2020-12-30 20:55:02,@JeremyRubin Have your comments been addressed?,https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-752755310,752755310,
ajtowns,2021-01-02 08:07:29,"Rebased to after the copyright bump, addressed comments, added a draft commit that switches from runtime to static checks.",https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-753445789,753445789,
ajtowns,2021-01-11 03:41:11,Dropped draft commit that made the ValidDeployment checks static_asserts.,https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-757608615,757608615,
ajtowns,2021-02-02 09:11:59,Rebased on top of #20749 due to conflict from both PRs changing nearby sections of validation.h,https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-771486762,771486762,
jnewbery,2021-03-09 18:22:48,Concept ACK. I really like that deployments can be changed from versionbits to buried without any changes to the code in validation and other places.,https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-794266520,794266520,
ajtowns,2021-03-11 04:09:30,"Probably a good idea to review #21380 (Fuzzing harness for versionbits) before this one -- ~it has some refactors that will cause this to get rebased, and both the ""speedy trial"" implementations are based on it.~",https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-796432157,796432157,
ajtowns,2021-03-11 06:21:13,"Split deploymentinfo rename, DeploymentName and SoftForkPushBack into separate commits. (EDIT: and fix the comments amiti noted)",https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-796491653,796491653,
amitiuttarwar,2021-03-16 20:27:17,"approach ACK, I like the strategy of using enums with safety checks + overloaded functions to abstract buried vs future deployments ",https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-800581046,800581046,
ajtowns,2021-03-17 05:41:30,Nits picked.,https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-800811067,800811067,
jnewbery,2021-03-17 09:24:58,code review ACK e72e062e5a8279864d746776dc9072c112ddc014,https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-800930430,800930430,
0xB10C,2021-03-22 17:23:47,Concept ACK. Started reviewing ,https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-804249778,804249778,
ajtowns,2021-04-16 09:34:47,"Rebased on top of #21666 (neighbouring line changed) and the ComputeBlockVersion tests in #21377. Changed `DeploymentActiveAt()` to take a reference to a block rather than a pointer, since nullptr isn't valid. Also split the move of ComputeBlockVersion into two steps, one for the move-only part and the other for the refactoring, since that seems a bit easier to review.",https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-821051366,821051366,
ajtowns,2021-04-19 03:00:48,"Rebased on top of #21391 due to `ChainActive().Tip()` changes.\n\n(Maybe consider reviewing conflicting pr #21691 first, since it's easy)",https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-822133296,822133296,
ajtowns,2021-04-30 08:45:48,Rebased past #21009 ~(and added some comment updates to reflect that Rewind is gone now)~,https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-829943576,829943576,
ajtowns,2021-05-06 14:43:56,"Rebased past #21727.\n\n> I'm not convinced that a `VersionBitsCache` class is necessary.\n\n@jnewbery - You're right it's not necessary; but I think minimising the number of globals and keeping the lock and the things the lock is guarding together (which then allows stronger locking assertions, see https://github.com/bitcoin/bitcoin/pull/20272#issuecomment-720755781) is worthwhile enough. If ",https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-833580443,833580443,
jnewbery,2021-05-10 07:47:50,"See https://github.com/jnewbery/bitcoin/commit/000899c6753b69f141ffa07f7d2a12bd235824e3#diff-73b381667b1bb315180fc7e7a66992e79ad742972de5d0d2c1b8404d3d67e1b0 for the proposed changes in versionbits.h. The benefit is not exposing anything about the internal implementation outside of the .cpp file.\n\n> I think minimising the number of globals and keeping the lock and the things the lock is guardi",https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-836315455,836315455,
jnewbery,2021-05-10 07:53:39,"utACK 63a6f6e5e695ca18c78a0dfb4d2261d1eb15ef4d.\n\nVerified `git range-diff master 37458fdd10 HEAD`. Only difference is resolving the merge conflict with #21009.",https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-836321732,836321732,
ajtowns,2021-06-08 04:17:53,Rebased past #22121 ; split the last commit to reduce the `ComputeBlockVersion` to `versionbits.ComputeBlockVersion` noise.,https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-856425957,856425957,
jnewbery,2021-06-08 08:45:46,"Code review ACK 3696abb45e\n\nVerified the rebase using `git range-diff`.",https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-856582569,856582569,
ajtowns,2021-06-11 02:27:33,Rebased past #22141 ; renamed `versionbitscache` to `g_versionbitscache` ; addressed @MarcoFalke's comments,https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-859215923,859215923,
jnewbery,2021-06-11 16:10:13,reACK f41c075cd2b1f0a38e645b58615d5f8a1bb8af71,https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-859687478,859687478,
ajtowns,2021-06-12 09:09:51,Rebased past #21866,https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-860025678,860025678,
MarcoFalke,2021-06-13 16:01:02,"re-ACK 01c156677e34e21591e71fb979a041f19c060018 ðŸ”µ\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 01c156677e34e21591e71fb979a041f19c060018 ðŸ”µ\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUimtAwAxwW2oHhca0vBquCwKsoXJ1HPQCWPUS0yXCXiKL8J/5oj",https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-860233771,860233771,
jnewbery,2021-06-14 08:29:34,ACK 01c156677e,https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-860496227,860496227,
michaelfolkson,2021-06-21 11:38:53,"Concept ACK, Approach ACK. \n\nLooked at this at the PR review club [session](https://bitcoincore.reviews/19438) back in March 2021 and changes since then appear to be minimal. This PR doesn't appear to be urgent for 22.0 as Taproot deployment won't be buried anytime soon but this PR has been open for a while so it would definitely be nice to get it in.",https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-864964479,864964479,
ajtowns,2021-06-23 06:49:11,"Including this in 22.0 makes it easier to switch taproot to being a buried deployment, which would allow removing the speedy trial code, which in turn may make it easier to backport new activation code for any new soft forks that may be ready for deployment prior to version 22 reaching end-of-life (perhaps some of the consensus cleanup ideas eg).",https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-866576554,866576554,
MarcoFalke,2021-06-23 07:07:27,"> backport new activation code for any new soft forks that may be ready for deployment prior to version 22 reaching end-of-life\n\nI think generally we only backport soft-forks to the previous major version. Though I have a slight preference to merge this for 22 to minimize potential conflicts when backporting (other) consensus changes.",https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-866587331,866587331,
MarcoFalke,2021-06-27 09:08:04,"Needs rebase.\n\nFeedback can be ignored or done in a follow-up if needed, to simplify re-review.",https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-869129098,869129098,
ajtowns,2021-06-28 03:19:19,Thanks @MarcoFalke ; rebased past #22156 ; leaving nit fixing 'til post 22.0,https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-869317232,869317232,
ajtowns,2021-06-29 22:04:06,Rebased past #21789,https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-870949651,870949651,
jnewbery,2021-06-30 15:50:03,ACK e48826ad87b4f92261f7433e84f48dac9bd9e5c3,https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-871521183,871521183,
gruve-p,2021-07-01 14:10:47,ACK https://github.com/bitcoin/bitcoin/pull/19438/commits/e48826ad87b4f92261f7433e84f48dac9bd9e5c3,https://github.com/bitcoin/bitcoin/pull/19438#issuecomment-872280918,872280918,
JeremyRubin,2020-07-03 20:10:16,prefer enum class to prevent leaking names.,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r449695222,449695222,src/consensus/params.h
JeremyRubin,2020-07-03 20:10:55,Also helps with avoiding overlap with SignalledDeployment.,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r449695331,449695331,src/consensus/params.h
JeremyRubin,2020-07-03 20:11:55,"prefer explicitly numbering these.\n\n-255 is an extremely odd number, can you clarify why you picked it? It doesn't fit in a signed byte.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r449695480,449695480,src/consensus/params.h
JeremyRubin,2020-07-03 20:13:43,"Maybe tighter to make this a templated function as we're never calling DeploymentHeight with a variable, only literal.\n\nThen we get not just a warning, but a compiler error.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r449695754,449695754,src/consensus/params.h
JeremyRubin,2020-07-03 20:15:11,dates,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r449695981,449695981,src/deploymentstatus.h
JeremyRubin,2020-07-03 20:18:25,This dispatch scares me a bit unless we use enum class -- enums could coerce poorly right?,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r449696529,449696529,src/deploymentstatus.h
ajtowns,2020-07-03 21:14:10,"Leaking the names is the point -- otherwise you'd need to change every use from `Consensus::DeploymentPos::SEGWIT` to `Consensus::BuriedDeployment::SEGWIT`. With C++20, you will be able to specify `enum class DeploymentPos { .. }; using enum DeploymentPos;` but that's a while away.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r449704885,449704885,src/consensus/params.h
ajtowns,2020-07-03 21:29:49,"I had tried that, but thought that it might be useful to be able to do `for (dep = 0; dep < MAX_VERSIONBITS_DEPLOYMENTS; ++dep) { ... DeploymentActiveAt(pindex, consParams, dep) .. }`. I think in all the cases where that currently comes up you want to know more fine grained details though. (Changing `BuriedForkDescPushBack` to take a BuriedDeployment instead of a height would make use of that, eg)",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r449707076,449707076,src/consensus/params.h
ajtowns,2020-07-03 21:38:43,"Nope; int (and the like) won't automatically coerce to enum, so with `int x = Consensus::DEPLOYMENT_SEGWIT; return DeploymentActiveAt(pindex, params, x)` you get errors:\n\n```\nvalidation.cpp:1921:12: error: no matching function for call to 'DeploymentActiveAt'\n    return DeploymentActiveAt(pindex, consensusparams, x);\n           ^~~~~~~~~~~~~~~~~~\n./deploymentstatus.h:32:13: note: candi",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r449708147,449708147,src/deploymentstatus.h
ajtowns,2020-07-03 22:16:14,"Explicitly numbering them risks accidentally repeating a number. No particular objection to a different starting point. Could perhaps make it `enum DeploymentPos : uint8_t` and `enum BuriedDeployment : int16_t { DEPLOYMENT_CLTV = 256, // larger than largest possible DeploymentPos value`.\n\n(I guess `2**n` is an ""extremely even"" number, so calling  `+/- 2**n-1` ""extremely odd"" makes a lot of sen",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r449712349,449712349,src/consensus/params.h
sipa,2020-12-27 05:00:49,"Any chance of just introducing a new lock for the versionbitscache, to avoid this semantically-cyclic dependency between validation and deploymentstatus?",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r549065742,549065742,src/deploymentstatus.h
ajtowns,2020-12-30 00:45:03,"Yeah, can make `VersionBitsCache` be natively threadsafe, rather than having the caller manage a mutex (which should help if it ever ends up having some sort of shared lock too). I've done that, though I've added the lock as the first commit, since I think that makes the impact of the change clearer.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r549898915,549898915,src/deploymentstatus.h
sipa,2020-12-30 07:16:59,"In commit ""[refactor] Add deploymentstatus.h"":\n\nYUUUUGE nit: missing parenthesis in comment",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r549976688,549976688,src/deploymentstatus.h
sipa,2020-12-30 07:20:36,"In commit ""[refactor] Add deploymentstatus.h"":\n\nIs this ""EXCLUSIVE_LOCKS_REQUIRED(cs_main)"" still needed?",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r549979188,549979188,src/validation.cpp
sipa,2020-12-30 07:25:47,"In commit ""[refactor] Add versionbits deployments to deploymentstatus.h"":\n\nPerhaps assert that dep >= 0 in these functions (and dep < 0 for the buried ones)?",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r549983058,549983058,src/deploymentstatus.h
ajtowns,2021-01-02 07:58:35,"I've added a `ValidDeployment()` function for checking this with a bit more precision.\n\nMight be worth revisiting @JeremyRubin's suggestion of using templated functions so it can be a static assertion that's resolved at compile-time? Having looked at it again, I think the only thing that would really end up making awkward is the rpc/blockchain.cpp stuff (ie, it would mean templating the `SoftF",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r550856669,550856669,src/deploymentstatus.h
ajtowns,2021-01-02 07:58:50,"No, don't think so. Removed.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r550856694,550856694,src/validation.cpp
ajtowns,2021-01-11 03:42:03,"Okay, dropped the templated approach as too unwieldy for not enough benefit, so think this is resolved via `ValidDeployment()`.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r554675546,554675546,src/deploymentstatus.h
amitiuttarwar,2021-03-09 01:15:56,typo: `BuridedDeployment`,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r589867085,589867085,src/deploymentstatus.cpp
amitiuttarwar,2021-03-10 22:01:18,"SignalledDeployment == DeploymentPos? \n\nalthough, I'd probably be down for a rename. I've been wondering what Pos stands for? position? ",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r591903943,591903943,src/consensus/params.h
amitiuttarwar,2021-03-10 22:11:18,"I think this comment was previously incorrect (`VersionBitsDeploymentInfo` was in `versionbitsinfo.cpp`), but should definitely be updated since as of this PR it is defined in `deploymentinfo.cpp` ",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r591909479,591909479,src/consensus/params.h
ajtowns,2021-03-11 00:02:08,"""position in the vDeployments"" array, I presume. Yeah, I think I changed it to ""SignalledDeployment"" at some point then dropped it as being too annoying to keep rebasing",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r591968358,591968358,src/consensus/params.h
jnewbery,2021-03-15 10:08:02,"It seems a bit strange for this interface to be called 'cache'. I'd say this _has_ a cache, not _is_ a cache.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r594201846,594201846,src/versionbits.h
jnewbery,2021-03-15 10:12:25,"Couple of suggested changes:\n\n- use `m_` naming convention (and cs -> mutex)\n- mark these mutable so the functions can all be `const`\n\n```suggestion\n    mutable Mutex m_mutex;\n    mutable ThresholdConditionCache m_caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] GUARDED_BY(cs);\n```",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r594204760,594204760,src/versionbits.h
jnewbery,2021-03-15 10:15:37,What's the benefit of specifically these two functions being `static`? There will only ever be one instance of `VersionBitsCache` so theoretically everything here could be static. I'd suggest just dropping the `static` here.,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r594206873,594206873,src/versionbits.h
jnewbery,2021-03-15 10:44:10,"You can use the underlying type of the enum rather than casting it to an int:\n\n```suggestion\n    for (std::underlying_type<Consensus::DeploymentPos>::type i = 0; i < Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n```",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r594226697,594226697,src/versionbits.cpp
jnewbery,2021-03-15 10:49:55,Comment can be removed. We're no longer interested in the activation method now that these deployments are buried.,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r594230875,594230875,src/validation.cpp
jnewbery,2021-03-15 10:50:49,"```suggestion\n    // Start enforcing Taproot.\n```\n\nActually, all of these comments can have s/Start enforcing/Enforce/.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r594231581,594231581,src/validation.cpp
jnewbery,2021-03-15 11:27:35,"```suggestion\n\n#include <consensus/params.h>\n#include <versionbits.h>\n```",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r594255146,594255146,src/deploymentstatus.cpp
jnewbery,2021-03-15 11:32:16,"```suggestion\n#include <string>\n```\n\n(string.h is the c string library: https://en.cppreference.com/w/cpp/header/cstring)",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r594258168,594258168,src/deploymentinfo.h
sipa,2021-03-16 23:04:33,"In ""versionbits: correct doxygen comments""\n\nNit: perhaps it's worth stopping using `pindexPrev` here if it's giving statistics for the specified block rather than its successor?",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r595599351,595599351,src/versionbits.h
sipa,2021-03-16 23:32:50,"@jnewbery The class does have members variables, and the non-static member function do access them, so unless those variables become static too (which would be rather ugly), the other member functions can't be.\n\nI think it doesn't hurt to mark the function that don't need state static.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r595610191,595610191,src/versionbits.h
ajtowns,2021-03-16 23:55:22,"It's giving the statistics for the retarget period that includes `pindexPrev`'s successor, up to and including `pindexPrev` if `pindexPrev` is in the same retarget period, but not if `pindexPrev` was the last block in the previous retarget period. (That means you can't actually query the statistics for a fully completed retarget period -- you'll always get statistics for between 0 and 2015 blocks ",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r595618136,595618136,src/versionbits.h
ajtowns,2021-03-17 04:22:05,"I don't think I agree -- if there wasn't a cache, there would be no need for an object, these things would just be standalone functions, so calling the object a cache makes sense to me.\n\nThere's some impedence mismatch though -- apart from having to have the object, the api is otherwise pretty independent of whether there's a cache or not.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r595702589,595702589,src/versionbits.h
sipa,2021-03-17 04:29:10,"It could just say ""Get statistics for the BIP9 state for the measuring window that inlcudes pindexPrev's successor."" ?\n\nFeel free to disregard this.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r595704637,595704637,src/versionbits.h
ajtowns,2021-03-17 04:50:27,"We cast to an int to iterate in a few places, and changing them feels gratuitous -- we can't make the underlying type something that won't fit in an int because the fixed arrays we index into via the enum value would break too.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r595711135,595711135,src/versionbits.cpp
ajtowns,2021-03-17 05:26:05,"I think this is the same impedence mismatch as ""calling it a cache"" -- they're static because they don't use the cache.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r595721593,595721593,src/versionbits.h
ajtowns,2021-03-17 05:42:59,Names changed; left as non-mutable and non-const.,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r595727074,595727074,src/versionbits.h
jnewbery,2021-03-17 09:21:20,ok,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r595841030,595841030,src/versionbits.cpp
jnewbery,2021-03-17 09:23:30,"> apart from having to have the object, the api is otherwise pretty independent of whether there's a cache or not.\n\nIndeed. The client doesn't care whether there's a cache or not (and for the static functions, there isn't even a cache). Generally, I think interfaces should be named according to the client usage, not the implementation specifics. Not a big deal, and shouldn't hold up this PR.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r595842651,595842651,src/versionbits.h
ajtowns,2021-03-17 09:45:25,"The client does care a little about whether there's a cache -- without it, checking the state is potentially linear in the height of the block being tested, with it, it's amortized constant. Particularly for deployments with short periods (like bip91) that could be prohibitive.\n\nPerhaps it's worth considering renaming it to `SignalledDeploymentManager` or similar along with renaming from `BIP9",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r595859319,595859319,src/versionbits.h
jnewbery,2021-03-17 09:53:51,"I'd prefer a generic name like `SignalledDeploymentManager`, but it definitely shouldn't hold up this PR.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r595865800,595865800,src/versionbits.h
jnewbery,2021-03-17 09:55:05,"> The client does care a little about whether there's a cache\n\nSorry, I meant in terms of correctness/observability. Of course a cache has implications for computational complexity.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r595866714,595866714,src/versionbits.h
GeneFerneau,2021-03-22 02:22:03,"nit: With all these new functions taking a `const CBlockIndex* ...` argument, maybe use a `const CBlockIndex& ...` instead. Safer API, and can still use `&pindexPrev` to get a pointer (if needed).",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r598387676,598387676,src/deploymentstatus.h
ajtowns,2021-03-22 03:38:32,"Could make sense to have `DeploymentActiveAt(const CBlockIndex&, ...)` but `DeploymentActiveAfter` can be called with nullptr, so can't be a reference.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r598406329,598406329,src/deploymentstatus.h
0xB10C,2021-03-24 11:44:31,"in 8b2aa89f9f6366cfd3a3dfccf2f7678740b4d0ea\n\nnit: couldn't this be `< MAX_VERSION_BITS_DEPLOYMENTS` to avoid changing this line when adding/burring a deployment?\n\n```suggestion\nconstexpr bool ValidDeployment(DeploymentPos dep) { return DEPLOYMENT_TESTDUMMY <= dep && dep < MAX_VERSION_BITS_DEPLOYMENTS; }\n```",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r600402619,600402619,src/consensus/params.h
fjahr,2021-04-03 16:09:57,very minor nit: If you add a `DEPLOYMENT_BURIED_MAX` and then use `dep < DEPLOYMENT_BURIED_MAX` instead of `dep <= DEPLOYMENT_SEGWIT` then this line wouldn't need to change when something is buried. But I am not sure if it's an improvement overall.,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r606681109,606681109,src/consensus/params.h
fjahr,2021-04-03 16:28:35,nit: You could do `!pindexPrev` instead of `== nullptr` I think,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r606682906,606682906,src/deploymentstatus.h
fjahr,2021-04-03 16:34:05,nit: Could use an optional as return value instead of this to signal if no height was found?,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r606683378,606683378,src/consensus/params.h
fjahr,2021-04-03 16:36:33,"nit: This check is repeated three times only to protect `DeploymentHeight()` afaict, maybe move it into `DeploymentHeight()`?",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r606683621,606683621,src/deploymentstatus.h
fjahr,2021-04-03 16:59:02,nit: accidental empty line?,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r606685946,606685946,src/versionbits.h
ajtowns,2021-04-05 09:56:51,"That would mean checking and dereferencing the optional at every call site, which doesn't seem useful.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r607013194,607013194,src/consensus/params.h
ajtowns,2021-04-16 09:36:07,Didn't want to add a `DEPLOYMENT_BURIED_MAX` since that would then need to be included in any `switch` statements.,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r614703141,614703141,src/consensus/params.h
jnewbery,2021-04-26 11:39:12,Consider using `std::array` and `at()` for bounds checking.,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r620215571,620215571,src/deploymentinfo.h
ajtowns,2021-04-30 08:41:33,Same could be said for `vDeployments` in `Consensus::Params`; think both are better left for some other refactoring.,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r623714315,623714315,src/deploymentinfo.h
MarcoFalke,2021-04-30 09:02:11,How is this change different from  fa49430914fd16fbc34078bd8929b6ef635a8c42 in #21789 ?,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r623727210,623727210,src/chain.h
ajtowns,2021-04-30 09:42:37,:eyes: What change? There's no change here... No change at all...,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r623751005,623751005,src/chain.h
MarcoFalke,2021-06-08 12:31:50,"8695986585d8717a9ab484877d25325fbe78a3e8: The compiler already knows this is `inline` because the member function has a definition. Thus, the `inline` can be removed for brevity.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r647392871,647392871,src/consensus/params.h
MarcoFalke,2021-06-08 13:32:19,97735795048b999acf5c79085ecdeb5df0413532: Any reason to not use `::versionbitscache`? Especially since the `g_` prefix is missing?,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r647444475,647444475,src/deploymentstatus.h
MarcoFalke,2021-06-08 13:36:30,"0529efe7ce918e564672a77da891d5e7a3c9657f: The compiler already knows that `VBDeploymentInfo` is a struct, so while touching this line it would be nice to remove this confusing extraneous keyword.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r647448426,647448426,src/deploymentinfo.h
MarcoFalke,2021-06-08 13:46:42,"5eecf966664df05afb8bb8ea9d5a18c7f9d13acf: Maybe add the `::` now, if editing previous commits would be too much rebase hassle?",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r647457805,647457805,src/deploymentstatus.h
MarcoFalke,2021-06-08 13:54:12,0967181ee84d6c0f1a5c07d6e366d2a48c548bde: `::` :smile_cat: ,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r647465051,647465051,src/miner.cpp
MarcoFalke,2021-06-08 14:03:30,3696abb45e3d9b09d027fffd3fc9f19a15e21691: Could add `::` and apply clang-format-diff to the touched lines?,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r647474155,647474155,src/test/versionbits_tests.cpp
MarcoFalke,2021-06-08 14:05:52,"32cf12a89619688182fcb175a63ba0356f170d9c: When removing the lock annotation here, maybe add a comment to `LOCK(cs_main)`, that it must be held while all soft forks are pushed back even though there is no annotation requiring that. Otherwise the rpc might be racy.\n\nAlternatively keep the annotation?",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r647476352,647476352,src/rpc/blockchain.cpp
ajtowns,2021-06-11 01:56:15,"I don't think it should be racy? The versionbits structures are protected by `VersionBitsCache::m_mutex` and should be stable when provided a particular block, even if it's no longer the tip or a reorg is currently happening?",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r649637264,649637264,src/rpc/blockchain.cpp
MarcoFalke,2021-06-11 06:41:38,Oh correct. `active_chain_tip` is kept unchanged while pushing back all soft forks.,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r649728355,649728355,src/rpc/blockchain.cpp
MarcoFalke,2021-06-14 06:53:12,"e3a93b5095522f9315942600cbeb394a902bc5ce: This is currently unused, so there are no bugs. However, I am wondering if the implementation is the most meaningful. This is the first place where a magic value of `0` for the timeout is defined. Be aware that nTimeout is mostly an unsanitized [1] ""don't care value"", as the enabled status is read from nStartTime (NEVER_ACTIVE).\n\nFinally, I am wonderin",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r650687320,650687320,src/deploymentstatus.h
ajtowns,2021-06-15 04:30:33,"> This is the first place where a magic value of `0` for the timeout is defined.\n\n`!= 0` matches the behaviour used for `IsScriptWitnessEnabled` prior to 0328dcdcfcb56dc8918697716d7686be048ad0b3 \n\n> Finally, I am wondering what the use of this helper might be. Maybe delete the function until there is a use case?\n\nHaving it defined makes it (relatively) easy to switch `DEPLOYMENT_SEGWIT",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r651439406,651439406,src/deploymentstatus.h
fjahr,2021-06-26 15:40:36,"nit: Could have given a default that provides more context like ""unknown""",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r659181813,659181813,src/deploymentinfo.cpp
fjahr,2021-06-26 15:57:15,nit: could have upgraded to `static_cast<int>(Consensus::MAX_VERSION_BITS_DEPLOYMENTS)`,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r659183724,659183724,src/versionbits.cpp
MarcoFalke,2021-06-26 17:23:41,"Shouldn't matter too much, as it is dead code. Empty string might even make it easier to run `CHECK_NONFATAL(!name.empty());` in rpc code.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r659195240,659195240,src/deploymentinfo.cpp
MarcoFalke,2021-06-26 17:25:08,`u{Consensus::MAX_VERSION_BITS_DEPLOYMENTS}` is even more preferable when this is changed. (with `u` being the underlying type),https://github.com/bitcoin/bitcoin/pull/19438#discussion_r659195358,659195358,src/versionbits.cpp
MarcoFalke,2021-06-28 07:42:46,"24972d9f49:\n\nShouldn't this say:\n\n```cpp\nconst bool taproot_active{DeploymentActiveAfter(m_active_chainstate.m_chain.Tip(), args.m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_TAPROOT)};",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r659551891,659551891,src/validation.cpp
MarcoFalke,2021-06-28 07:44:03,See also https://github.com/bitcoin/bitcoin/pull/19438#discussion_r594226697,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r659552743,659552743,src/versionbits.cpp
ajtowns,2021-06-30 01:25:08,"Yes, it should, fixed.",https://github.com/bitcoin/bitcoin/pull/19438#discussion_r661065481,661065481,src/validation.cpp
MarcoFalke,2021-06-30 07:29:11,Or just `assert(false)` for symmetry with the assert at the beginning of the function?,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r661202215,661202215,src/deploymentinfo.cpp
MarcoFalke,2021-07-01 18:06:12,Or maybe turn this dead code into an `assert(false)`? Crashing the node should be preferred over a consensus failure.,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r662494456,662494456,src/consensus/params.h
MarcoFalke,2021-07-01 18:09:20,Fixed in https://github.com/bitcoin/bitcoin/pull/22385,https://github.com/bitcoin/bitcoin/pull/19438#discussion_r662496706,662496706,src/deploymentstatus.h
