sipa,2020-01-18 15:47:47,"Ping @ryanofsky, as you volunteered to review further PRs in this series. I've made an additional change compared to the old big PR, namely the introduction of FORMATTER_METHODS (and then rewriting SERIALIZE_METHODS in function of FORMATTER_METHODS, which follows pretty naturally).",https://github.com/bitcoin/bitcoin/pull/17957#issuecomment-575910591,575910591,
practicalswift,2020-01-18 17:27:53,"https://github.com/bitcoin/bitcoin/blob/fd691da3b032e439936672e084b7c49086ec9ebc/src/coins.h#L59-L65\n\nA signed integer overflow will take place on L62 in case of serialising a coin with a very large `nHeight` value.\n\nIt wasn't introduced in this PR, but since you're making changes to the coin serialization/deserialization functions here it might be worth fixing in the same go :)\n\nAlso ",https://github.com/bitcoin/bitcoin/pull/17957#issuecomment-575920740,575920740,
sipa,2020-01-18 17:37:02,@practicalswift How about we address that when coins.h itself is updated to the new serialization framework (here it's just adjusting for changes in compression.h)?,https://github.com/bitcoin/bitcoin/pull/17957#issuecomment-575921551,575921551,
laanwj,2020-01-23 15:45:42,code review ACK 4de934b9b5b4be1bac8fe205f4ee9a79e772dc34,https://github.com/bitcoin/bitcoin/pull/17957#issuecomment-577739397,577739397,
ryanofsky,2020-01-21 18:00:16,"In commit ""Convert compression.h to new serialization framework"" (fd691da3b032e439936672e084b7c49086ec9ebc)\n\nCan you drop uses of `REF` macro here and below?",https://github.com/bitcoin/bitcoin/pull/17957#discussion_r369155232,369155232,src/undo.h
ryanofsky,2020-01-21 18:10:45,"In commit ""Add FORMATTER_METHODS, similar to SERIALIZE_METHODS, but for formatters"" (ca34c5cba5fbb9b046b074a234f06ecf6ed5d610)\n\nIt's a little surprising to see SERIALIZE_METHODS depend on FORMATTER_METHODS, but I guess it saves some repetition, and it seems reasonable",https://github.com/bitcoin/bitcoin/pull/17957#discussion_r369160059,369160059,src/serialize.h
sipa,2020-01-22 04:30:51,"Indeed, done.",https://github.com/bitcoin/bitcoin/pull/17957#discussion_r369365864,369365864,src/undo.h
sipa,2020-01-22 04:33:18,"I think it makes sense: every class gets the ability to function as a formatter. Both FORMATTER_METHODS and SERIALIZE_METHODS help do that; with the first it's for an arbitrary type, with the latter it's for objects of the class it's being defined it. The latter then also hooks up the Serialize/Unserialize functions to the self-formatter.\n\nDo you suggest documenting this better, or have some o",https://github.com/bitcoin/bitcoin/pull/17957#discussion_r369366273,369366273,src/serialize.h
ryanofsky,2020-01-22 15:03:02,"> > It's a little surprising to see SERIALIZE_METHODS depend on FORMATTER_METHODS, but I guess it saves some repetition, and it seems reasonable\n\n> I think it makes sense: every class gets the ability to function as a formatter. Both FORMATTER_METHODS and SERIALIZE_METHODS help do that; with the first it's for an arbitrary type, with the latter it's for objects of the class it's being defined ",https://github.com/bitcoin/bitcoin/pull/17957#discussion_r369612363,369612363,src/serialize.h
