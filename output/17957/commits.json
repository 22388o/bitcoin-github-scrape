[
  {
    "sha": "ca34c5cba5fbb9b046b074a234f06ecf6ed5d610",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTM0YzVjYmE1ZmJiOWIwNDZiMDc0YTIzNGYwNmVjZjZlZDVkNjEw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-18T15:32:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-18T15:43:22Z"
      },
      "message": "Add FORMATTER_METHODS, similar to SERIALIZE_METHODS, but for formatters",
      "tree": {
        "sha": "5e99a5cd6a4c78e671d9306bcc33cdb7c1de06ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e99a5cd6a4c78e671d9306bcc33cdb7c1de06ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca34c5cba5fbb9b046b074a234f06ecf6ed5d610",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca34c5cba5fbb9b046b074a234f06ecf6ed5d610",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca34c5cba5fbb9b046b074a234f06ecf6ed5d610",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca34c5cba5fbb9b046b074a234f06ecf6ed5d610/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a654626f076a72416a3d354218d7107571d6caaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a654626f076a72416a3d354218d7107571d6caaf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a654626f076a72416a3d354218d7107571d6caaf"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 27,
      "deletions": 5
    },
    "files": [
      {
        "sha": "7fa669ebdb519b4397e96331862917b2d7673128",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 27,
        "deletions": 5,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca34c5cba5fbb9b046b074a234f06ecf6ed5d610/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca34c5cba5fbb9b046b074a234f06ecf6ed5d610/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=ca34c5cba5fbb9b046b074a234f06ecf6ed5d610",
        "patch": "@@ -199,6 +199,30 @@ template<typename X> const X& ReadWriteAsHelper(const X& x) { return x; }\n         SerializationOp(s, CSerActionUnserialize());                  \\\n     }\n \n+/**\n+ * Implement the Ser and Unser methods needed for implementing a formatter (see Using below).\n+ *\n+ * Both Ser and Unser are delegated to a single static method SerializationOps, which is polymorphic\n+ * in the serialized/deserialized type (allowing it to be const when serializing, and non-const when\n+ * deserializing).\n+ *\n+ * Example use:\n+ *   struct FooFormatter {\n+ *     FORMATTER_METHODS(Class, obj) { READWRITE(obj.val1, VARINT(obj.val2)); }\n+ *   }\n+ *   would define a class FooFormatter that defines a serialization of Class objects consisting\n+ *   of serializing its val1 member using the default serialization, and its val2 member using\n+ *   VARINT serialization. That FooFormatter can then be used in statements like\n+ *   READWRITE(Using<FooFormatter>(obj.bla)).\n+ */\n+#define FORMATTER_METHODS(cls, obj) \\\n+    template<typename Stream> \\\n+    static void Ser(Stream& s, const cls& obj) { SerializationOps(obj, s, CSerActionSerialize()); } \\\n+    template<typename Stream> \\\n+    static void Unser(Stream& s, cls& obj) { SerializationOps(obj, s, CSerActionUnserialize()); } \\\n+    template<typename Stream, typename Type, typename Operation> \\\n+    static inline void SerializationOps(Type& obj, Stream& s, Operation ser_action) \\\n+\n /**\n  * Implement the Serialize and Unserialize methods by delegating to a single templated\n  * static method that takes the to-be-(de)serialized object as a parameter. This approach\n@@ -211,17 +235,15 @@ template<typename X> const X& ReadWriteAsHelper(const X& x) { return x; }\n     void Serialize(Stream& s) const                                                 \\\n     {                                                                               \\\n         static_assert(std::is_same<const cls&, decltype(*this)>::value, \"Serialize type mismatch\"); \\\n-        SerializationOps(*this, s, CSerActionSerialize());                          \\\n+        Ser(s, *this);                                                              \\\n     }                                                                               \\\n     template<typename Stream>                                                       \\\n     void Unserialize(Stream& s)                                                     \\\n     {                                                                               \\\n         static_assert(std::is_same<cls&, decltype(*this)>::value, \"Unserialize type mismatch\"); \\\n-        SerializationOps(*this, s, CSerActionUnserialize());                        \\\n+        Unser(s, *this);                                                            \\\n     }                                                                               \\\n-    template<typename Stream, typename Type, typename Operation>                    \\\n-    static inline void SerializationOps(Type& obj, Stream& s, Operation ser_action) \\\n-\n+    FORMATTER_METHODS(cls, obj)\n \n #ifndef CHAR_EQUALS_INT8\n template<typename Stream> inline void Serialize(Stream& s, char a    ) { ser_writedata8(s, a); } // TODO Get rid of bare char"
      }
    ]
  },
  {
    "sha": "4de934b9b5b4be1bac8fe205f4ee9a79e772dc34",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGU5MzRiOWI1YjRiZTFiYWM4ZmUyMDVmNGVlOWE3OWU3NzJkYzM0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-18T15:32:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-22T04:29:11Z"
      },
      "message": "Convert compression.h to new serialization framework",
      "tree": {
        "sha": "7d3c21b118a2597a1fc61bd813bd28b6c81016fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d3c21b118a2597a1fc61bd813bd28b6c81016fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4de934b9b5b4be1bac8fe205f4ee9a79e772dc34",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4de934b9b5b4be1bac8fe205f4ee9a79e772dc34",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4de934b9b5b4be1bac8fe205f4ee9a79e772dc34",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4de934b9b5b4be1bac8fe205f4ee9a79e772dc34/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca34c5cba5fbb9b046b074a234f06ecf6ed5d610",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca34c5cba5fbb9b046b074a234f06ecf6ed5d610",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca34c5cba5fbb9b046b074a234f06ecf6ed5d610"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 25,
      "deletions": 40
    },
    "files": [
      {
        "sha": "e71c8a47bcb9b369d3073959b95625cf7594afa1",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4de934b9b5b4be1bac8fe205f4ee9a79e772dc34/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4de934b9b5b4be1bac8fe205f4ee9a79e772dc34/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=4de934b9b5b4be1bac8fe205f4ee9a79e772dc34",
        "patch": "@@ -61,7 +61,7 @@ class Coin\n         assert(!IsSpent());\n         uint32_t code = nHeight * 2 + fCoinBase;\n         ::Serialize(s, VARINT(code));\n-        ::Serialize(s, CTxOutCompressor(REF(out)));\n+        ::Serialize(s, Using<TxOutCompression>(out));\n     }\n \n     template<typename Stream>\n@@ -70,7 +70,7 @@ class Coin\n         ::Unserialize(s, VARINT(code));\n         nHeight = code >> 1;\n         fCoinBase = code & 1;\n-        ::Unserialize(s, CTxOutCompressor(out));\n+        ::Unserialize(s, Using<TxOutCompression>(out));\n     }\n \n     bool IsSpent() const {"
      },
      {
        "sha": "7bb60d311e6b64b72d03dff7f33fafe4762bd715",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 19,
        "deletions": 34,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4de934b9b5b4be1bac8fe205f4ee9a79e772dc34/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4de934b9b5b4be1bac8fe205f4ee9a79e772dc34/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=4de934b9b5b4be1bac8fe205f4ee9a79e772dc34",
        "patch": "@@ -11,10 +11,6 @@\n #include <serialize.h>\n #include <span.h>\n \n-class CKeyID;\n-class CPubKey;\n-class CScriptID;\n-\n bool CompressScript(const CScript& script, std::vector<unsigned char> &out);\n unsigned int GetSpecialScriptSize(unsigned int nSize);\n bool DecompressScript(CScript& script, unsigned int nSize, const std::vector<unsigned char> &out);\n@@ -33,9 +29,8 @@ uint64_t DecompressAmount(uint64_t nAmount);\n  *  Other scripts up to 121 bytes require 1 byte + script length. Above\n  *  that, scripts up to 16505 bytes require 2 bytes + script length.\n  */\n-class CScriptCompressor\n+struct ScriptCompression\n {\n-private:\n     /**\n      * make this static for now (there are only 6 special scripts defined)\n      * this can potentially be extended together with a new nVersion for\n@@ -44,12 +39,8 @@ class CScriptCompressor\n      */\n     static const unsigned int nSpecialScripts = 6;\n \n-    CScript &script;\n-public:\n-    explicit CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }\n-\n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n+    void Ser(Stream &s, const CScript& script) {\n         std::vector<unsigned char> compr;\n         if (CompressScript(script, compr)) {\n             s << MakeSpan(compr);\n@@ -61,7 +52,7 @@ class CScriptCompressor\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream &s) {\n+    void Unser(Stream &s, CScript& script) {\n         unsigned int nSize = 0;\n         s >> VARINT(nSize);\n         if (nSize < nSpecialScripts) {\n@@ -82,30 +73,24 @@ class CScriptCompressor\n     }\n };\n \n-/** wrapper for CTxOut that provides a more compact serialization */\n-class CTxOutCompressor\n+struct AmountCompression\n {\n-private:\n-    CTxOut &txout;\n-\n-public:\n-    explicit CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        if (!ser_action.ForRead()) {\n-            uint64_t nVal = CompressAmount(txout.nValue);\n-            READWRITE(VARINT(nVal));\n-        } else {\n-            uint64_t nVal = 0;\n-            READWRITE(VARINT(nVal));\n-            txout.nValue = DecompressAmount(nVal);\n-        }\n-        CScriptCompressor cscript(REF(txout.scriptPubKey));\n-        READWRITE(cscript);\n+    template<typename Stream, typename I> void Ser(Stream& s, I val)\n+    {\n+        s << VARINT(CompressAmount(val));\n+    }\n+    template<typename Stream, typename I> void Unser(Stream& s, I& val)\n+    {\n+        uint64_t v;\n+        s >> VARINT(v);\n+        val = DecompressAmount(v);\n     }\n };\n \n+/** wrapper for CTxOut that provides a more compact serialization */\n+struct TxOutCompression\n+{\n+    FORMATTER_METHODS(CTxOut, obj) { READWRITE(Using<AmountCompression>(obj.nValue), Using<ScriptCompression>(obj.scriptPubKey)); }\n+};\n+\n #endif // BITCOIN_COMPRESSOR_H"
      },
      {
        "sha": "f06f339b9d01dbff1b72374866b77438d2424708",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4de934b9b5b4be1bac8fe205f4ee9a79e772dc34/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4de934b9b5b4be1bac8fe205f4ee9a79e772dc34/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=4de934b9b5b4be1bac8fe205f4ee9a79e772dc34",
        "patch": "@@ -206,7 +206,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         DeserializeFromFuzzingInput(buffer, dbi);\n #elif TXOUTCOMPRESSOR_DESERIALIZE\n         CTxOut to;\n-        CTxOutCompressor toc(to);\n+        auto toc = Using<TxOutCompression>(to);\n         DeserializeFromFuzzingInput(buffer, toc);\n #elif BLOCKTRANSACTIONS_DESERIALIZE\n         BlockTransactions bt;"
      },
      {
        "sha": "35bbdab00d63508cf5ba48ee55f11d83cdec459e",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4de934b9b5b4be1bac8fe205f4ee9a79e772dc34/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4de934b9b5b4be1bac8fe205f4ee9a79e772dc34/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=4de934b9b5b4be1bac8fe205f4ee9a79e772dc34",
        "patch": "@@ -336,7 +336,7 @@ class CCoins\n         vout.assign(vAvail.size(), CTxOut());\n         for (unsigned int i = 0; i < vAvail.size(); i++) {\n             if (vAvail[i])\n-                ::Unserialize(s, CTxOutCompressor(vout[i]));\n+                ::Unserialize(s, Using<TxOutCompression>(vout[i]));\n         }\n         // coinbase height\n         ::Unserialize(s, VARINT(nHeight, VarIntMode::NONNEGATIVE_SIGNED));"
      },
      {
        "sha": "2009c721ab132246e8c3dd8b66f405a146666935",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4de934b9b5b4be1bac8fe205f4ee9a79e772dc34/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4de934b9b5b4be1bac8fe205f4ee9a79e772dc34/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=4de934b9b5b4be1bac8fe205f4ee9a79e772dc34",
        "patch": "@@ -32,7 +32,7 @@ class TxInUndoSerializer\n             // Required to maintain compatibility with older undo format.\n             ::Serialize(s, (unsigned char)0);\n         }\n-        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n+        ::Serialize(s, Using<TxOutCompression>(REF(txout->out)));\n     }\n \n     explicit TxInUndoSerializer(const Coin* coin) : txout(coin) {}\n@@ -56,7 +56,7 @@ class TxInUndoDeserializer\n             unsigned int nVersionDummy;\n             ::Unserialize(s, VARINT(nVersionDummy));\n         }\n-        ::Unserialize(s, CTxOutCompressor(REF(txout->out)));\n+        ::Unserialize(s, Using<TxOutCompression>(REF(txout->out)));\n     }\n \n     explicit TxInUndoDeserializer(Coin* coin) : txout(coin) {}"
      }
    ]
  }
]