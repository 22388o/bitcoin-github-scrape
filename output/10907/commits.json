[
  {
    "sha": "d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWRkOTZmOTAzMDA4OTM1NGU1NTRhYzlmZDBhYjYwYjQ3ZjA1YzRh",
    "commit": {
      "author": {
        "name": "Dag Robole",
        "email": "dag.robole@gmail.com",
        "date": "2017-07-22T10:50:03Z"
      },
      "committer": {
        "name": "Dag Robole",
        "email": "dag.robole@gmail.com",
        "date": "2017-07-23T05:08:08Z"
      },
      "message": "Use iterators arrow operator over iterator dereference",
      "tree": {
        "sha": "0a8d5210d5161779a83edb54ae8c6980b4d87ec5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a8d5210d5161779a83edb54ae8c6980b4d87ec5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/comments",
    "author": {
      "login": "bytting",
      "id": 1276717,
      "node_id": "MDQ6VXNlcjEyNzY3MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1276717?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bytting",
      "html_url": "https://github.com/bytting",
      "followers_url": "https://api.github.com/users/bytting/followers",
      "following_url": "https://api.github.com/users/bytting/following{/other_user}",
      "gists_url": "https://api.github.com/users/bytting/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bytting/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bytting/subscriptions",
      "organizations_url": "https://api.github.com/users/bytting/orgs",
      "repos_url": "https://api.github.com/users/bytting/repos",
      "events_url": "https://api.github.com/users/bytting/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bytting/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "bytting",
      "id": 1276717,
      "node_id": "MDQ6VXNlcjEyNzY3MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1276717?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bytting",
      "html_url": "https://github.com/bytting",
      "followers_url": "https://api.github.com/users/bytting/followers",
      "following_url": "https://api.github.com/users/bytting/following{/other_user}",
      "gists_url": "https://api.github.com/users/bytting/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bytting/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bytting/subscriptions",
      "organizations_url": "https://api.github.com/users/bytting/orgs",
      "repos_url": "https://api.github.com/users/bytting/repos",
      "events_url": "https://api.github.com/users/bytting/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bytting/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c173a15ca1bf20999f74987988985508c9de463",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c173a15ca1bf20999f74987988985508c9de463",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c173a15ca1bf20999f74987988985508c9de463"
      }
    ],
    "stats": {
      "total": 164,
      "additions": 82,
      "deletions": 82
    },
    "files": [
      {
        "sha": "7654579eacca2228784281ecc9460b3b7d57f939",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
        "patch": "@@ -71,10 +71,10 @@ CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId)\n     if (it == mapAddr.end())\n         return NULL;\n     if (pnId)\n-        *pnId = (*it).second;\n-    std::map<int, CAddrInfo>::iterator it2 = mapInfo.find((*it).second);\n+        *pnId = it->second;\n+    std::map<int, CAddrInfo>::iterator it2 = mapInfo.find(it->second);\n     if (it2 != mapInfo.end())\n-        return &(*it2).second;\n+        return &it2->second;\n     return NULL;\n }\n \n@@ -344,7 +344,7 @@ CAddrInfo CAddrMan::Select_(bool newOnly)\n \n     // Use a 50% chance for choosing between tried and new table entries.\n     if (!newOnly &&\n-       (nTried > 0 && (nNew == 0 || RandomInt(2) == 0))) { \n+       (nTried > 0 && (nNew == 0 || RandomInt(2) == 0))) {\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n@@ -391,8 +391,8 @@ int CAddrMan::Check_()\n         return -7;\n \n     for (std::map<int, CAddrInfo>::iterator it = mapInfo.begin(); it != mapInfo.end(); it++) {\n-        int n = (*it).first;\n-        CAddrInfo& info = (*it).second;\n+        int n = it->first;\n+        CAddrInfo& info = it->second;\n         if (info.fInTried) {\n             if (!info.nLastSuccess)\n                 return -1;"
      },
      {
        "sha": "f7c943181123037adb5d0f2697a4efa797b9214a",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
        "patch": "@@ -314,8 +314,8 @@ class CAddrMan\n         std::map<int, int> mapUnkIds;\n         int nIds = 0;\n         for (std::map<int, CAddrInfo>::const_iterator it = mapInfo.begin(); it != mapInfo.end(); it++) {\n-            mapUnkIds[(*it).first] = nIds;\n-            const CAddrInfo &info = (*it).second;\n+            mapUnkIds[it->first] = nIds;\n+            const CAddrInfo &info = it->second;\n             if (info.nRefCount) {\n                 assert(nIds != nNew); // this means nNew was wrong, oh ow\n                 s << info;\n@@ -324,7 +324,7 @@ class CAddrMan\n         }\n         nIds = 0;\n         for (std::map<int, CAddrInfo>::const_iterator it = mapInfo.begin(); it != mapInfo.end(); it++) {\n-            const CAddrInfo &info = (*it).second;\n+            const CAddrInfo &info = it->second;\n             if (info.fInTried) {\n                 assert(nIds != nTried); // this means nTried was wrong, oh ow\n                 s << info;"
      },
      {
        "sha": "3a8589e9827ee2fec97b53d8c83665af4adc2953",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
        "patch": "@@ -58,7 +58,7 @@ bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut)\n     ScriptMap::const_iterator mi = mapScripts.find(hash);\n     if (mi != mapScripts.end())\n     {\n-        redeemScriptOut = (*mi).second;\n+        redeemScriptOut = mi->second;\n         return true;\n     }\n     return false;"
      },
      {
        "sha": "3405f7b4b1c566cd13dd5fdfa3d0ebcfc3d62e69",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
        "patch": "@@ -79,7 +79,7 @@ class CBasicKeyStore : public CKeyStore\n             KeyMap::const_iterator mi = mapKeys.begin();\n             while (mi != mapKeys.end())\n             {\n-                setAddress.insert((*mi).first);\n+                setAddress.insert(mi->first);\n                 mi++;\n             }\n         }"
      },
      {
        "sha": "462c5ef2b54d3e934519017c1a07f682d9c5a266",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
        "patch": "@@ -116,11 +116,11 @@ bool GetLocal(CService& addr, const CNetAddr *paddrPeer)\n         LOCK(cs_mapLocalHost);\n         for (std::map<CNetAddr, LocalServiceInfo>::iterator it = mapLocalHost.begin(); it != mapLocalHost.end(); it++)\n         {\n-            int nScore = (*it).second.nScore;\n-            int nReachability = (*it).first.GetReachabilityFrom(paddrPeer);\n+            int nScore = it->second.nScore;\n+            int nReachability = it->first.GetReachabilityFrom(paddrPeer);\n             if (nReachability > nBestReachability || (nReachability == nBestReachability && nScore > nBestScore))\n             {\n-                addr = CService((*it).first, (*it).second.nPort);\n+                addr = CService(it->first, it->second.nPort);\n                 nBestReachability = nReachability;\n                 nBestScore = nScore;\n             }\n@@ -480,8 +480,8 @@ bool CConnman::IsBanned(CNetAddr ip)\n     LOCK(cs_setBanned);\n     for (banmap_t::iterator it = setBanned.begin(); it != setBanned.end(); it++)\n     {\n-        CSubNet subNet = (*it).first;\n-        CBanEntry banEntry = (*it).second;\n+        CSubNet subNet = it->first;\n+        CBanEntry banEntry = it->second;\n \n         if (subNet.Match(ip) && GetTime() < banEntry.nBanUntil) {\n             return true;\n@@ -496,7 +496,7 @@ bool CConnman::IsBanned(CSubNet subnet)\n     banmap_t::iterator i = setBanned.find(subnet);\n     if (i != setBanned.end())\n     {\n-        CBanEntry banEntry = (*i).second;\n+        CBanEntry banEntry = i->second;\n         if (GetTime() < banEntry.nBanUntil) {\n             return true;\n         }\n@@ -582,8 +582,8 @@ void CConnman::SweepBanned()\n     banmap_t::iterator it = setBanned.begin();\n     while(it != setBanned.end())\n     {\n-        CSubNet subNet = (*it).first;\n-        CBanEntry banEntry = (*it).second;\n+        CSubNet subNet = it->first;\n+        CBanEntry banEntry = it->second;\n         if(now > banEntry.nBanUntil)\n         {\n             setBanned.erase(it++);"
      },
      {
        "sha": "ca60b5f1983455c9f3e886458b6d83e3f8b554b7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
        "patch": "@@ -1030,12 +1030,12 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 if (send && (mi->second->nStatus & BLOCK_HAVE_DATA))\n                 {\n                     std::shared_ptr<const CBlock> pblock;\n-                    if (a_recent_block && a_recent_block->GetHash() == (*mi).second->GetBlockHash()) {\n+                    if (a_recent_block && a_recent_block->GetHash() == mi->second->GetBlockHash()) {\n                         pblock = a_recent_block;\n                     } else {\n                         // Send block from disk\n                         std::shared_ptr<CBlock> pblockRead = std::make_shared<CBlock>();\n-                        if (!ReadBlockFromDisk(*pblockRead, (*mi).second, consensusParams))\n+                        if (!ReadBlockFromDisk(*pblockRead, mi->second, consensusParams))\n                             assert(!\"cannot load block from disk\");\n                         pblock = pblockRead;\n                     }\n@@ -1730,7 +1730,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             BlockMap::iterator mi = mapBlockIndex.find(hashStop);\n             if (mi == mapBlockIndex.end())\n                 return true;\n-            pindex = (*mi).second;\n+            pindex = mi->second;\n         }\n         else\n         {"
      },
      {
        "sha": "3cfafa82d4f9179f820013ec346b3c7dc2402867",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
        "patch": "@@ -58,8 +58,8 @@ class BanTablePriv\n         for (banmap_t::iterator it = banMap.begin(); it != banMap.end(); it++)\n         {\n             CCombinedBan banEntry;\n-            banEntry.subnet = (*it).first;\n-            banEntry.banEntry = (*it).second;\n+            banEntry.subnet = it->first;\n+            banEntry.banEntry = it->second;\n             cachedBanlist.append(banEntry);\n         }\n "
      },
      {
        "sha": "30b4e22e7a8b14ebe1b18a80cebc0a293882c2c9",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
        "patch": "@@ -170,7 +170,7 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n     CBlockIndex* pindex = NULL;\n     BlockMap::iterator mi = mapBlockIndex.find(wtx.hashBlock);\n     if (mi != mapBlockIndex.end())\n-        pindex = (*mi).second;\n+        pindex = mi->second;\n \n     // Sort order, unrecorded transactions sort to the top\n     status.sortKey = strprintf(\"%010d-%01d-%010u-%03d\","
      },
      {
        "sha": "710e87103d8ebf7070a05ea2d1cdc8b3a3703650",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
        "patch": "@@ -570,9 +570,9 @@ UniValue listbanned(const JSONRPCRequest& request)\n     UniValue bannedAddresses(UniValue::VARR);\n     for (banmap_t::iterator it = banMap.begin(); it != banMap.end(); it++)\n     {\n-        CBanEntry banEntry = (*it).second;\n+        CBanEntry banEntry = it->second;\n         UniValue rec(UniValue::VOBJ);\n-        rec.push_back(Pair(\"address\", (*it).first.ToString()));\n+        rec.push_back(Pair(\"address\", it->first.ToString()));\n         rec.push_back(Pair(\"banned_until\", banEntry.nBanUntil));\n         rec.push_back(Pair(\"ban_created\", banEntry.nCreateTime));\n         rec.push_back(Pair(\"ban_reason\", banEntry.banReasonToString()));"
      },
      {
        "sha": "42b7c0d79f9637c3543434caf62c748e7d6635c4",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
        "patch": "@@ -46,8 +46,8 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     if (!hashBlock.IsNull()) {\n         entry.push_back(Pair(\"blockhash\", hashBlock.GetHex()));\n         BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n-        if (mi != mapBlockIndex.end() && (*mi).second) {\n-            CBlockIndex* pindex = (*mi).second;\n+        if (mi != mapBlockIndex.end() && mi->second) {\n+            CBlockIndex* pindex = mi->second;\n             if (chainActive.Contains(pindex)) {\n                 entry.push_back(Pair(\"confirmations\", 1 + chainActive.Height() - pindex->nHeight));\n                 entry.push_back(Pair(\"time\", pindex->GetBlockTime()));"
      },
      {
        "sha": "f7a5356d6945bfdcb04bf1d42b7594941f4a29c2",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
        "patch": "@@ -302,7 +302,7 @@ const CRPCCommand *CRPCTable::operator[](const std::string &name) const\n     std::map<std::string, const CRPCCommand*>::const_iterator it = mapCommands.find(name);\n     if (it == mapCommands.end())\n         return NULL;\n-    return (*it).second;\n+    return it->second;\n }\n \n bool CRPCTable::appendCommand(const std::string& name, const CRPCCommand* pcmd)"
      },
      {
        "sha": "b0d1e0a82a3d229d966225a2301f666ee31fbe96",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
        "patch": "@@ -165,7 +165,7 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n         BlockMap::iterator mi = mapBlockIndex.find(hash);\n         if (mi != mapBlockIndex.end())\n         {\n-            CBlockIndex* pindex = (*mi).second;\n+            CBlockIndex* pindex = mi->second;\n             if (chain.Contains(pindex))\n                 return pindex;\n             if (pindex->GetAncestor(chain.Height()) == chain.Tip()) {\n@@ -2601,11 +2601,11 @@ static CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n     // competitive advantage.\n     pindexNew->nSequenceId = 0;\n     BlockMap::iterator mi = mapBlockIndex.insert(std::make_pair(hash, pindexNew)).first;\n-    pindexNew->phashBlock = &((*mi).first);\n+    pindexNew->phashBlock = &mi->first;\n     BlockMap::iterator miPrev = mapBlockIndex.find(block.hashPrevBlock);\n     if (miPrev != mapBlockIndex.end())\n     {\n-        pindexNew->pprev = (*miPrev).second;\n+        pindexNew->pprev = miPrev->second;\n         pindexNew->nHeight = pindexNew->pprev->nHeight + 1;\n         pindexNew->BuildSkip();\n     }\n@@ -3045,7 +3045,7 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n             return state.DoS(10, error(\"%s: prev block not found\", __func__), 0, \"prev-blk-not-found\");\n-        pindexPrev = (*mi).second;\n+        pindexPrev = mi->second;\n         if (pindexPrev->nStatus & BLOCK_FAILED_MASK)\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n \n@@ -3429,14 +3429,14 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     // Return existing\n     BlockMap::iterator mi = mapBlockIndex.find(hash);\n     if (mi != mapBlockIndex.end())\n-        return (*mi).second;\n+        return mi->second;\n \n     // Create new\n     CBlockIndex* pindexNew = new CBlockIndex();\n     if (!pindexNew)\n         throw std::runtime_error(std::string(__func__) + \": new CBlockIndex failed\");\n     mi = mapBlockIndex.insert(std::make_pair(hash, pindexNew)).first;\n-    pindexNew->phashBlock = &((*mi).first);\n+    pindexNew->phashBlock = &mi->first;\n \n     return pindexNew;\n }\n@@ -4373,7 +4373,7 @@ class CMainCleanup\n         // block headers\n         BlockMap::iterator it1 = mapBlockIndex.begin();\n         for (; it1 != mapBlockIndex.end(); it1++)\n-            delete (*it1).second;\n+            delete it1->second;\n         mapBlockIndex.clear();\n     }\n } instance_of_cmaincleanup;"
      },
      {
        "sha": "010086692e9e656ae7359018d180a987d710ce53",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
        "patch": "@@ -179,8 +179,8 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n         CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n         for (; mi != mapCryptedKeys.end(); ++mi)\n         {\n-            const CPubKey &vchPubKey = (*mi).second.first;\n-            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+            const CPubKey &vchPubKey = mi->second.first;\n+            const std::vector<unsigned char> &vchCryptedSecret = mi->second.second;\n             CKey key;\n             if (!DecryptKey(vMasterKeyIn, vchCryptedSecret, vchPubKey, key))\n             {\n@@ -249,8 +249,8 @@ bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const\n         CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n         if (mi != mapCryptedKeys.end())\n         {\n-            const CPubKey &vchPubKey = (*mi).second.first;\n-            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+            const CPubKey &vchPubKey = mi->second.first;\n+            const std::vector<unsigned char> &vchCryptedSecret = mi->second.second;\n             return DecryptKey(vMasterKey, vchCryptedSecret, vchPubKey, keyOut);\n         }\n     }\n@@ -267,7 +267,7 @@ bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) co\n         CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n         if (mi != mapCryptedKeys.end())\n         {\n-            vchPubKeyOut = (*mi).second.first;\n+            vchPubKeyOut = mi->second.first;\n             return true;\n         }\n         // Check for watch-only pubkeys"
      },
      {
        "sha": "312a9e5c337d4ab54e52803a074fc33d6016ce71",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
        "patch": "@@ -181,7 +181,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n         CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n         while (mi != mapCryptedKeys.end())\n         {\n-            setAddress.insert((*mi).first);\n+            setAddress.insert(mi->first);\n             mi++;\n         }\n     }"
      },
      {
        "sha": "3ef45dfc55eec89783d68c9a4961eafd0dcc1ce2",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
        "patch": "@@ -569,8 +569,8 @@ void CDBEnv::Flush(bool fShutdown)\n         LOCK(cs_db);\n         std::map<std::string, int>::iterator mi = mapFileUseCount.begin();\n         while (mi != mapFileUseCount.end()) {\n-            std::string strFile = (*mi).first;\n-            int nRefCount = (*mi).second;\n+            std::string strFile = mi->first;\n+            int nRefCount = mi->second;\n             LogPrint(BCLog::DB, \"CDBEnv::Flush: Flushing %s (refcount = %d)...\\n\", strFile, nRefCount);\n             if (nRefCount == 0) {\n                 // Move log data to the dat file\n@@ -614,7 +614,7 @@ bool CDB::PeriodicFlush(CWalletDBWrapper& dbw)\n         std::map<std::string, int>::iterator mit = env->mapFileUseCount.begin();\n         while (mit != env->mapFileUseCount.end())\n         {\n-            nRefCount += (*mit).second;\n+            nRefCount += mit->second;\n             mit++;\n         }\n "
      },
      {
        "sha": "f2642ff5ad2d6f3b8295d42095e527ab90daa083",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
        "patch": "@@ -323,8 +323,8 @@ UniValue getaccount(const JSONRPCRequest& request)\n \n     std::string strAccount;\n     std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(address.Get());\n-    if (mi != pwallet->mapAddressBook.end() && !(*mi).second.name.empty()) {\n-        strAccount = (*mi).second.name;\n+    if (mi != pwallet->mapAddressBook.end() && !mi->second.name.empty()) {\n+        strAccount = mi->second.name;\n     }\n     return strAccount;\n }\n@@ -1281,9 +1281,9 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n         bool fIsWatchonly = false;\n         if (it != mapTally.end())\n         {\n-            nAmount = (*it).second.nAmount;\n-            nConf = (*it).second.nConf;\n-            fIsWatchonly = (*it).second.fIsWatchonly;\n+            nAmount = it->second.nAmount;\n+            nConf = it->second.nConf;\n+            fIsWatchonly = it->second.fIsWatchonly;\n         }\n \n         if (fByAccounts)\n@@ -1307,7 +1307,7 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n             UniValue transactions(UniValue::VARR);\n             if (it != mapTally.end())\n             {\n-                for (const uint256& _item : (*it).second.txids)\n+                for (const uint256& _item : it->second.txids)\n                 {\n                     transactions.push_back(_item.GetHex());\n                 }\n@@ -1321,12 +1321,12 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n     {\n         for (std::map<std::string, tallyitem>::iterator it = mapAccountTally.begin(); it != mapAccountTally.end(); ++it)\n         {\n-            CAmount nAmount = (*it).second.nAmount;\n-            int nConf = (*it).second.nConf;\n+            CAmount nAmount = it->second.nAmount;\n+            int nConf = it->second.nConf;\n             UniValue obj(UniValue::VOBJ);\n-            if((*it).second.fIsWatchonly)\n+            if(it->second.fIsWatchonly)\n                 obj.push_back(Pair(\"involvesWatchonly\", true));\n-            obj.push_back(Pair(\"account\",       (*it).first));\n+            obj.push_back(Pair(\"account\",       it->first));\n             obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n             obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));\n             ret.push_back(obj);\n@@ -1618,10 +1618,10 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     // iterate backwards until we have nCount items to return:\n     for (CWallet::TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n     {\n-        CWalletTx *const pwtx = (*it).second.first;\n+        CWalletTx *const pwtx = it->second.first;\n         if (pwtx != 0)\n             ListTransactions(pwallet, *pwtx, strAccount, 0, true, ret, filter);\n-        CAccountingEntry *const pacentry = (*it).second.second;\n+        CAccountingEntry *const pacentry = it->second.second;\n         if (pacentry != 0)\n             AcentryToJSON(*pacentry, strAccount, ret);\n "
      },
      {
        "sha": "9f7a9b80c7af4addfae1e7e2c2cd99876a07730d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
        "patch": "@@ -690,7 +690,7 @@ DBErrors CWallet::ReorderTransactions()\n \n     for (std::map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n     {\n-        CWalletTx* wtx = &((*it).second);\n+        CWalletTx* wtx = &it->second;\n         txByTime.insert(std::make_pair(wtx->nTimeReceived, TxPair(wtx, (CAccountingEntry*)0)));\n     }\n     std::list<CAccountingEntry> acentries;\n@@ -704,8 +704,8 @@ DBErrors CWallet::ReorderTransactions()\n     std::vector<int64_t> nOrderPosOffsets;\n     for (TxItems::iterator it = txByTime.begin(); it != txByTime.end(); ++it)\n     {\n-        CWalletTx *const pwtx = (*it).second.first;\n-        CAccountingEntry *const pacentry = (*it).second.second;\n+        CWalletTx *const pwtx = it->second.first;\n+        CAccountingEntry *const pacentry = it->second.second;\n         int64_t& nOrderPos = (pwtx != 0) ? pwtx->nOrderPos : pacentry->nOrderPos;\n \n         if (nOrderPos == -1)\n@@ -854,7 +854,7 @@ bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n     // There is a bug if MarkReplaced is not called on an existing wallet transaction.\n     assert(mi != mapWallet.end());\n \n-    CWalletTx& wtx = (*mi).second;\n+    CWalletTx& wtx = mi->second;\n \n     // Ensure for now that we're not overwriting data\n     assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n@@ -1197,7 +1197,7 @@ isminetype CWallet::IsMine(const CTxIn &txin) const\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(txin.prevout.hash);\n         if (mi != mapWallet.end())\n         {\n-            const CWalletTx& prev = (*mi).second;\n+            const CWalletTx& prev = mi->second;\n             if (txin.prevout.n < prev.tx->vout.size())\n                 return IsMine(prev.tx->vout[txin.prevout.n]);\n         }\n@@ -1214,7 +1214,7 @@ CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(txin.prevout.hash);\n         if (mi != mapWallet.end())\n         {\n-            const CWalletTx& prev = (*mi).second;\n+            const CWalletTx& prev = mi->second;\n             if (txin.prevout.n < prev.tx->vout.size())\n                 if (IsMine(prev.tx->vout[txin.prevout.n]) & filter)\n                     return prev.tx->vout[txin.prevout.n].nValue;\n@@ -1299,7 +1299,7 @@ bool CWallet::IsAllFromMe(const CTransaction& tx, const isminefilter& filter) co\n         if (mi == mapWallet.end())\n             return false; // any unknown inputs can't be from us\n \n-        const CWalletTx& prev = (*mi).second;\n+        const CWalletTx& prev = mi->second;\n \n         if (txin.prevout.n >= prev.tx->vout.size())\n             return false; // invalid input!\n@@ -1412,7 +1412,7 @@ int CWalletTx::GetRequestCount() const\n             {\n                 std::map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(hashBlock);\n                 if (mi != pwallet->mapRequestCount.end())\n-                    nRequests = (*mi).second;\n+                    nRequests = mi->second;\n             }\n         }\n         else\n@@ -1421,14 +1421,14 @@ int CWalletTx::GetRequestCount() const\n             std::map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(GetHash());\n             if (mi != pwallet->mapRequestCount.end())\n             {\n-                nRequests = (*mi).second;\n+                nRequests = mi->second;\n \n                 // How about the block it's in?\n                 if (nRequests == 0 && !hashUnset())\n                 {\n                     std::map<uint256, int>::const_iterator _mi = pwallet->mapRequestCount.find(hashBlock);\n                     if (_mi != pwallet->mapRequestCount.end())\n-                        nRequests = (*_mi).second;\n+                        nRequests = _mi->second;\n                     else\n                         nRequests = 1; // If it's in someone else's block it must have got out\n                 }\n@@ -1913,7 +1913,7 @@ CAmount CWallet::GetBalance() const\n         LOCK2(cs_main, cs_wallet);\n         for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n-            const CWalletTx* pcoin = &(*it).second;\n+            const CWalletTx* pcoin = &it->second;\n             if (pcoin->IsTrusted())\n                 nTotal += pcoin->GetAvailableCredit();\n         }\n@@ -1929,7 +1929,7 @@ CAmount CWallet::GetUnconfirmedBalance() const\n         LOCK2(cs_main, cs_wallet);\n         for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n-            const CWalletTx* pcoin = &(*it).second;\n+            const CWalletTx* pcoin = &it->second;\n             if (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0 && pcoin->InMempool())\n                 nTotal += pcoin->GetAvailableCredit();\n         }\n@@ -1944,7 +1944,7 @@ CAmount CWallet::GetImmatureBalance() const\n         LOCK2(cs_main, cs_wallet);\n         for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n-            const CWalletTx* pcoin = &(*it).second;\n+            const CWalletTx* pcoin = &it->second;\n             nTotal += pcoin->GetImmatureCredit();\n         }\n     }\n@@ -1958,7 +1958,7 @@ CAmount CWallet::GetWatchOnlyBalance() const\n         LOCK2(cs_main, cs_wallet);\n         for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n-            const CWalletTx* pcoin = &(*it).second;\n+            const CWalletTx* pcoin = &it->second;\n             if (pcoin->IsTrusted())\n                 nTotal += pcoin->GetAvailableWatchOnlyCredit();\n         }\n@@ -1974,7 +1974,7 @@ CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const\n         LOCK2(cs_main, cs_wallet);\n         for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n-            const CWalletTx* pcoin = &(*it).second;\n+            const CWalletTx* pcoin = &it->second;\n             if (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0 && pcoin->InMempool())\n                 nTotal += pcoin->GetAvailableWatchOnlyCredit();\n         }\n@@ -1989,7 +1989,7 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n         LOCK2(cs_main, cs_wallet);\n         for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n-            const CWalletTx* pcoin = &(*it).second;\n+            const CWalletTx* pcoin = &it->second;\n             nTotal += pcoin->GetImmatureWatchOnlyCredit();\n         }\n     }\n@@ -2066,7 +2066,7 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n         for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const uint256& wtxid = it->first;\n-            const CWalletTx* pcoin = &(*it).second;\n+            const CWalletTx* pcoin = &it->second;\n \n             if (!CheckFinalTx(*pcoin))\n                 continue;\n@@ -2127,10 +2127,10 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n                 if (pcoin->tx->vout[i].nValue < nMinimumAmount || pcoin->tx->vout[i].nValue > nMaximumAmount)\n                     continue;\n \n-                if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs && !coinControl->IsSelected(COutPoint((*it).first, i)))\n+                if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs && !coinControl->IsSelected(COutPoint(it->first, i)))\n                     continue;\n \n-                if (IsLockedCoin((*it).first, i))\n+                if (IsLockedCoin(it->first, i))\n                     continue;\n \n                 if (IsSpent(wtxid, i))\n@@ -3460,7 +3460,7 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n         std::map< CTxDestination, std::set<CTxDestination>* >::iterator it;\n         for (CTxDestination address : _grouping)\n             if ((it = setmap.find(address)) != setmap.end())\n-                hits.insert((*it).second);\n+                hits.insert(it->second);\n \n         // merge all hit groups into a new single group and delete old groups\n         std::set<CTxDestination>* merged = new std::set<CTxDestination>(_grouping);\n@@ -3607,7 +3607,7 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts) const\n     AssertLockHeld(cs_wallet); // setLockedCoins\n     for (std::set<COutPoint>::iterator it = setLockedCoins.begin();\n          it != setLockedCoins.end(); it++) {\n-        COutPoint outpt = (*it);\n+        COutPoint outpt = *it;\n         vOutpts.push_back(outpt);\n     }\n }\n@@ -3676,7 +3676,7 @@ void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) c\n     std::vector<CKeyID> vAffected;\n     for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); it++) {\n         // iterate over all wallet transactions...\n-        const CWalletTx &wtx = (*it).second;\n+        const CWalletTx &wtx = it->second;\n         BlockMap::const_iterator blit = mapBlockIndex.find(wtx.hashBlock);\n         if (blit != mapBlockIndex.end() && chainActive.Contains(blit->second)) {\n             // ... which are already in a block\n@@ -4243,7 +4243,7 @@ int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet) const\n     BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n     if (mi == mapBlockIndex.end())\n         return 0;\n-    CBlockIndex* pindex = (*mi).second;\n+    CBlockIndex* pindex = mi->second;\n     if (!pindex || !chainActive.Contains(pindex))\n         return 0;\n "
      },
      {
        "sha": "3d4f303dffd15aaa0a01fa4c4ab0594215a535e0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9dd96f9030089354e554ac9fd0ab60b47f05c4a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d9dd96f9030089354e554ac9fd0ab60b47f05c4a",
        "patch": "@@ -1034,7 +1034,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n             LOCK(cs_wallet);\n             std::map<uint256, int>::iterator mi = mapRequestCount.find(hash);\n             if (mi != mapRequestCount.end())\n-                (*mi).second++;\n+                mi->second++;\n         }\n     }\n "
      }
    ]
  }
]