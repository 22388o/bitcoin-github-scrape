[
  {
    "sha": "7b76e4c25f32a983497fc0727a0955d20f3e0c68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Yjc2ZTRjMjVmMzJhOTgzNDk3ZmMwNzI3YTA5NTVkMjBmM2UwYzY4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-19T23:09:50Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-18T16:25:45Z"
      },
      "message": "Abstract context-dependent block checking from acceptance",
      "tree": {
        "sha": "2a95c136166a645849e82b95fafcc40044389630",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a95c136166a645849e82b95fafcc40044389630"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b76e4c25f32a983497fc0727a0955d20f3e0c68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b76e4c25f32a983497fc0727a0955d20f3e0c68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b76e4c25f32a983497fc0727a0955d20f3e0c68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b76e4c25f32a983497fc0727a0955d20f3e0c68/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7715c847472f565ca79429db0d8505f126617878",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7715c847472f565ca79429db0d8505f126617878",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7715c847472f565ca79429db0d8505f126617878"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 46,
      "deletions": 26
    },
    "files": [
      {
        "sha": "091a825f6db305d46e5945766a66d835aef46aeb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 26,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b76e4c25f32a983497fc0727a0955d20f3e0c68/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b76e4c25f32a983497fc0727a0955d20f3e0c68/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7b76e4c25f32a983497fc0727a0955d20f3e0c68",
        "patch": "@@ -2334,7 +2334,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     return true;\n }\n \n-bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex** ppindex)\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex** ppindex)\n {\n     AssertLockHeld(cs_main);\n     // Check for duplicate\n@@ -2391,15 +2391,52 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n         }\n     }\n \n-    if (pindex == NULL)\n-        pindex = AddToBlockIndex(block);\n-\n     if (ppindex)\n         *ppindex = pindex;\n \n     return true;\n }\n \n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex*& pindexPrev)\n+{\n+    const int nHeight = pindexPrev->nHeight + 1;\n+\n+    // Check that all transactions are finalized\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n+            return state.DoS(10, error(\"%s : contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n+        }\n+\n+    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n+    // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n+    if (block.nVersion >= 2 && \n+        CBlockIndex::IsSuperMajority(2, pindexPrev, Params().EnforceBlockUpgradeMajority()))\n+    {\n+        CScript expect = CScript() << nHeight;\n+        if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n+            !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n+            return state.DoS(100, error(\"%s : block height mismatch in coinbase\", __func__), REJECT_INVALID, \"bad-cb-height\");\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex** ppindex)\n+{\n+    // We need pindex to know whether to add it to the block index or not - if not provided by the caller, we use a dummy one on the stack\n+    CBlockIndex *_dummy_pindex;\n+    if (!ppindex)\n+        ppindex = &_dummy_pindex;\n+\n+    if (!ContextualCheckBlockHeader(block, state, ppindex))\n+        return false;\n+\n+    if (!*ppindex)\n+        *ppindex = AddToBlockIndex(block);\n+    return true;\n+}\n+\n bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex, CDiskBlockPos* dbp)\n {\n     AssertLockHeld(cs_main);\n@@ -2415,7 +2452,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n         return true;\n     }\n \n-    if (!CheckBlock(block, state)) {\n+    if ((!CheckBlock(block, state)) || !ContextualCheckBlock(block, state, pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n         }\n@@ -2424,27 +2461,6 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n \n     int nHeight = pindex->nHeight;\n \n-    // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n-            pindex->nStatus |= BLOCK_FAILED_VALID;\n-            return state.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"),\n-                             REJECT_INVALID, \"bad-txns-nonfinal\");\n-        }\n-\n-    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n-    // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-    if (block.nVersion >= 2 && \n-        CBlockIndex::IsSuperMajority(2, pindex->pprev, Params().EnforceBlockUpgradeMajority()))\n-    {\n-        CScript expect = CScript() << nHeight;\n-        if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n-            !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n-            pindex->nStatus |= BLOCK_FAILED_VALID;\n-            return state.DoS(100, error(\"AcceptBlock() : block height mismatch in coinbase\"), REJECT_INVALID, \"bad-cb-height\");\n-        }\n-    }\n-\n     // Write block to history file\n     try {\n         unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);"
      },
      {
        "sha": "4f9eec2d00bb06d17c752725cf65436bff97cb16",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b76e4c25f32a983497fc0727a0955d20f3e0c68/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b76e4c25f32a983497fc0727a0955d20f3e0c68/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=7b76e4c25f32a983497fc0727a0955d20f3e0c68",
        "patch": "@@ -463,6 +463,10 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n+// Context-dependent validity checks\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex **ppindex= NULL);\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex*& pindexPrev);\n+\n // Store block on disk\n // if dbp is provided, the file is known to already reside on disk\n bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex **pindex, CDiskBlockPos* dbp = NULL);"
      }
    ]
  },
  {
    "sha": "df622a1cfd3c5f45e03b5ff3c77f2e4344a964ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjYyMmExY2ZkM2M1ZjQ1ZTAzYjVmZjNjNzdmMmU0MzQ0YTk2NGNh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-16T03:50:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-18T16:25:45Z"
      },
      "message": "CreateNewBlock and miner_tests: Also check generated template is valid by CheckBlockHeader, ContextualCheckBlockHeader, CheckBlock, and ContextualCheckBlock",
      "tree": {
        "sha": "0bc77af72b4aa2c94a4e94e1072cea0f85df93d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bc77af72b4aa2c94a4e94e1072cea0f85df93d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df622a1cfd3c5f45e03b5ff3c77f2e4344a964ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df622a1cfd3c5f45e03b5ff3c77f2e4344a964ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df622a1cfd3c5f45e03b5ff3c77f2e4344a964ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df622a1cfd3c5f45e03b5ff3c77f2e4344a964ca/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b76e4c25f32a983497fc0727a0955d20f3e0c68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b76e4c25f32a983497fc0727a0955d20f3e0c68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b76e4c25f32a983497fc0727a0955d20f3e0c68"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5cdb3382009700e50c78492f758b8d5dfd400846",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df622a1cfd3c5f45e03b5ff3c77f2e4344a964ca/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df622a1cfd3c5f45e03b5ff3c77f2e4344a964ca/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=df622a1cfd3c5f45e03b5ff3c77f2e4344a964ca",
        "patch": "@@ -326,8 +326,18 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         indexDummy.nHeight = pindexPrev->nHeight + 1;\n         CCoinsViewCache viewNew(pcoinsTip);\n         CValidationState state;\n+        // NOTE: CheckBlockHeader is called by CheckBlock\n+        // NOTE: ContextualCheckBlockHeader only assigns ppindex, which we don't need/want\n+        if (!ContextualCheckBlockHeader(*pblock, state, NULL))\n+            throw std::runtime_error(\"CreateNewBlock() : ContextualCheckBlockHeader failed\");\n+        if (!CheckBlock(*pblock, state, false, false))\n+            throw std::runtime_error(\"CreateNewBlock() : CheckBlock failed\");\n+        if (!ContextualCheckBlock(*pblock, state, pindexPrev))\n+            throw std::runtime_error(\"CreateNewBlock() : ContextualCheckBlock failed\");\n         if (!ConnectBlock(*pblock, state, &indexDummy, viewNew, true))\n             throw std::runtime_error(\"CreateNewBlock() : ConnectBlock failed\");\n+        if (!state.IsValid())\n+            throw std::runtime_error(\"CreateNewBlock() : State is not valid\");\n     }\n \n     return pblocktemplate.release();"
      }
    ]
  },
  {
    "sha": "128672cdd2e827ee7290ecc8bcf56fab7cd3fd7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjg2NzJjZGQyZTgyN2VlNzI5MGVjYzhiY2Y1NmZhYjdjZDNmZDdm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-20T02:10:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-18T16:25:45Z"
      },
      "message": "TestBlockValidity function for CBlock proposals (used by CreateNewBlock)",
      "tree": {
        "sha": "bb866341b2a1aa0948c2bfac8e559cd92827cecc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb866341b2a1aa0948c2bfac8e559cd92827cecc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/128672cdd2e827ee7290ecc8bcf56fab7cd3fd7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/128672cdd2e827ee7290ecc8bcf56fab7cd3fd7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/128672cdd2e827ee7290ecc8bcf56fab7cd3fd7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/128672cdd2e827ee7290ecc8bcf56fab7cd3fd7f/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df622a1cfd3c5f45e03b5ff3c77f2e4344a964ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df622a1cfd3c5f45e03b5ff3c77f2e4344a964ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df622a1cfd3c5f45e03b5ff3c77f2e4344a964ca"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 34,
      "deletions": 20
    },
    "files": [
      {
        "sha": "687985b40e66d60807014cd1229f2f1e3abd58c8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 2,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/128672cdd2e827ee7290ecc8bcf56fab7cd3fd7f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/128672cdd2e827ee7290ecc8bcf56fab7cd3fd7f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=128672cdd2e827ee7290ecc8bcf56fab7cd3fd7f",
        "patch": "@@ -1593,7 +1593,7 @@ static int64_t nTimeIndex = 0;\n static int64_t nTimeCallbacks = 0;\n static int64_t nTimeTotal = 0;\n \n-bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool fJustCheck)\n+bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool fJustCheck)\n {\n     AssertLockHeld(cs_main);\n     // Check it again in case a previous version let a bad block in\n@@ -2397,7 +2397,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     return true;\n }\n \n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex*& pindexPrev)\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CBlockIndex * const pindexPrev)\n {\n     const int nHeight = pindexPrev->nHeight + 1;\n \n@@ -2571,6 +2571,31 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n     return true;\n }\n \n+bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex * const pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(pindexPrev == chainActive.Tip());\n+\n+    CCoinsViewCache viewNew(pcoinsTip);\n+    CBlockIndex indexDummy(block);\n+    indexDummy.pprev = pindexPrev;\n+    indexDummy.nHeight = pindexPrev->nHeight + 1;\n+\n+    // NOTE: CheckBlockHeader is called by CheckBlock\n+    // NOTE: ContextualCheckBlockHeader only assigns ppindex, which we don't need/want\n+    if (!ContextualCheckBlockHeader(block, state, NULL))\n+        return false;\n+    if (!CheckBlock(block, state, fCheckPOW, fCheckMerkleRoot))\n+        return false;\n+    if (!ContextualCheckBlock(block, state, pindexPrev))\n+        return false;\n+    if (!ConnectBlock(block, state, &indexDummy, viewNew, true))\n+        return false;\n+    assert(state.IsValid());\n+\n+    return true;\n+}\n+\n \n \n "
      },
      {
        "sha": "ef60f3933753abcb900b4b60c45e61c919552014",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/128672cdd2e827ee7290ecc8bcf56fab7cd3fd7f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/128672cdd2e827ee7290ecc8bcf56fab7cd3fd7f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=128672cdd2e827ee7290ecc8bcf56fab7cd3fd7f",
        "patch": "@@ -457,15 +457,18 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n \n // Apply the effects of this block (with given index) on the UTXO set represented by coins\n-bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n+bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n \n // Context-independent validity checks\n bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n // Context-dependent validity checks\n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex **ppindex= NULL);\n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex*& pindexPrev);\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CBlockIndex *pindexPrev);\n+\n+// Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held)\n+bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex *pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n // Store block on disk\n // if dbp is provided, the file is known to already reside on disk"
      },
      {
        "sha": "200498d109aa647a88e2c45c0548b716c6661f2d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 16,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/128672cdd2e827ee7290ecc8bcf56fab7cd3fd7f/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/128672cdd2e827ee7290ecc8bcf56fab7cd3fd7f/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=128672cdd2e827ee7290ecc8bcf56fab7cd3fd7f",
        "patch": "@@ -321,23 +321,9 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         pblock->nNonce         = 0;\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n \n-        CBlockIndex indexDummy(*pblock);\n-        indexDummy.pprev = pindexPrev;\n-        indexDummy.nHeight = pindexPrev->nHeight + 1;\n-        CCoinsViewCache viewNew(pcoinsTip);\n         CValidationState state;\n-        // NOTE: CheckBlockHeader is called by CheckBlock\n-        // NOTE: ContextualCheckBlockHeader only assigns ppindex, which we don't need/want\n-        if (!ContextualCheckBlockHeader(*pblock, state, NULL))\n-            throw std::runtime_error(\"CreateNewBlock() : ContextualCheckBlockHeader failed\");\n-        if (!CheckBlock(*pblock, state, false, false))\n-            throw std::runtime_error(\"CreateNewBlock() : CheckBlock failed\");\n-        if (!ContextualCheckBlock(*pblock, state, pindexPrev))\n-            throw std::runtime_error(\"CreateNewBlock() : ContextualCheckBlock failed\");\n-        if (!ConnectBlock(*pblock, state, &indexDummy, viewNew, true))\n-            throw std::runtime_error(\"CreateNewBlock() : ConnectBlock failed\");\n-        if (!state.IsValid())\n-            throw std::runtime_error(\"CreateNewBlock() : State is not valid\");\n+        if (!TestBlockValidity(state, *pblock, pindexPrev, false, false))\n+            throw std::runtime_error(\"CreateNewBlock() : TestBlockValidity failed\");\n     }\n \n     return pblocktemplate.release();"
      }
    ]
  },
  {
    "sha": "3bea71ac11489f66a29b7715f0a4fcae23fdd4f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmVhNzFhYzExNDg5ZjY2YTI5Yjc3MTVmMGE0ZmNhZTIzZmRkNGYx",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-30T04:26:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-18T16:25:45Z"
      },
      "message": "miner_tests: Disable checkpoints so they don't fail the subsidy-change test",
      "tree": {
        "sha": "27915cc6225b96484655770fc5af371e89ac59a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27915cc6225b96484655770fc5af371e89ac59a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bea71ac11489f66a29b7715f0a4fcae23fdd4f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bea71ac11489f66a29b7715f0a4fcae23fdd4f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3bea71ac11489f66a29b7715f0a4fcae23fdd4f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bea71ac11489f66a29b7715f0a4fcae23fdd4f1/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "128672cdd2e827ee7290ecc8bcf56fab7cd3fd7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/128672cdd2e827ee7290ecc8bcf56fab7cd3fd7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/128672cdd2e827ee7290ecc8bcf56fab7cd3fd7f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "53c2e7b2619b29656d737aa06ede00779af2a636",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bea71ac11489f66a29b7715f0a4fcae23fdd4f1/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bea71ac11489f66a29b7715f0a4fcae23fdd4f1/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=3bea71ac11489f66a29b7715f0a4fcae23fdd4f1",
        "patch": "@@ -57,6 +57,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     uint256 hash;\n \n     LOCK(cs_main);\n+    Checkpoints::fEnabled = false;\n \n     // Simple block creation, nothing special yet:\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n@@ -259,6 +260,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_FOREACH(CTransaction *tx, txFirst)\n         delete tx;\n \n+    Checkpoints::fEnabled = true;\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "f871a1e4f09825597e53aca367f3a4903b61b4ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODcxYTFlNGYwOTgyNTU5N2U1M2FjYTM2N2YzYTQ5MDNiNjFiNGFi",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-30T02:56:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-18T16:25:46Z"
      },
      "message": "Abstract DecodeHexBlk and BIP22ValidationResult functions out of submitblock",
      "tree": {
        "sha": "a39c6c8d3d92a40ef82588104262bbc37dd3985d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a39c6c8d3d92a40ef82588104262bbc37dd3985d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f871a1e4f09825597e53aca367f3a4903b61b4ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f871a1e4f09825597e53aca367f3a4903b61b4ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f871a1e4f09825597e53aca367f3a4903b61b4ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f871a1e4f09825597e53aca367f3a4903b61b4ab/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bea71ac11489f66a29b7715f0a4fcae23fdd4f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bea71ac11489f66a29b7715f0a4fcae23fdd4f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bea71ac11489f66a29b7715f0a4fcae23fdd4f1"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 41,
      "deletions": 21
    },
    "files": [
      {
        "sha": "aba1928a366460255c98aa4ac91b1dbae009e79c",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f871a1e4f09825597e53aca367f3a4903b61b4ab/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f871a1e4f09825597e53aca367f3a4903b61b4ab/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=f871a1e4f09825597e53aca367f3a4903b61b4ab",
        "patch": "@@ -8,6 +8,7 @@\n #include <string>\n #include <vector>\n \n+class CBlock;\n class CScript;\n class CTransaction;\n class uint256;\n@@ -16,6 +17,7 @@ class UniValue;\n // core_read.cpp\n extern CScript ParseScript(std::string s);\n extern bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx);\n+extern bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n extern uint256 ParseHashUV(const UniValue& v, const std::string& strName);\n extern std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName);\n "
      },
      {
        "sha": "42e2f8d2003a9126c190f7999d2c17529b0b38d1",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f871a1e4f09825597e53aca367f3a4903b61b4ab/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f871a1e4f09825597e53aca367f3a4903b61b4ab/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=f871a1e4f09825597e53aca367f3a4903b61b4ab",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"core_io.h\"\n \n+#include \"core/block.h\"\n #include \"core/transaction.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n@@ -108,6 +109,23 @@ bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx)\n     return true;\n }\n \n+bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n+{\n+    if (!IsHex(strHexBlk))\n+        return false;\n+\n+    std::vector<unsigned char> blockData(ParseHex(strHexBlk));\n+    CDataStream ssBlock(blockData, SER_NETWORK, PROTOCOL_VERSION);\n+    try {\n+        ssBlock >> block;\n+    }\n+    catch (const std::exception &) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n uint256 ParseHashUV(const UniValue& v, const string& strName)\n {\n     string strHex;"
      },
      {
        "sha": "12e7e1e624131c7944f25ca06edda1b6319148e1",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f871a1e4f09825597e53aca367f3a4903b61b4ab/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f871a1e4f09825597e53aca367f3a4903b61b4ab/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=f871a1e4f09825597e53aca367f3a4903b61b4ab",
        "patch": "@@ -297,6 +297,25 @@ Value prioritisetransaction(const Array& params, bool fHelp)\n }\n \n \n+// NOTE: Assumes a conclusive result; if result is inconclusive, it must be handled by caller\n+static Value BIP22ValidationResult(const CValidationState& state)\n+{\n+    if (state.IsValid())\n+        return Value::null;\n+\n+    std::string strRejectReason = state.GetRejectReason();\n+    if (state.IsError())\n+        throw JSONRPCError(RPC_VERIFY_ERROR, strRejectReason);\n+    if (state.IsInvalid())\n+    {\n+        if (strRejectReason.empty())\n+            return \"rejected\";\n+        return strRejectReason;\n+    }\n+    // Should be impossible\n+    return \"valid?\";\n+}\n+\n Value getblocktemplate(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n@@ -580,15 +599,9 @@ Value submitblock(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"submitblock\", \"\\\"mydata\\\"\")\n         );\n \n-    vector<unsigned char> blockData(ParseHex(params[0].get_str()));\n-    CDataStream ssBlock(blockData, SER_NETWORK, PROTOCOL_VERSION);\n     CBlock pblock;\n-    try {\n-        ssBlock >> pblock;\n-    }\n-    catch (const std::exception &) {\n+    if (!DecodeHexBlk(pblock, params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n-    }\n \n     CValidationState state;\n     submitblock_StateCatcher sc(pblock.GetHash());\n@@ -601,20 +614,7 @@ Value submitblock(const Array& params, bool fHelp)\n             return \"inconclusive\";\n         state = sc.state;\n     }\n-    if (state.IsError())\n-    {\n-        std::string strRejectReason = state.GetRejectReason();\n-        throw JSONRPCError(RPC_VERIFY_ERROR, strRejectReason);\n-    }\n-    if (state.IsInvalid())\n-    {\n-        std::string strRejectReason = state.GetRejectReason();\n-        if (strRejectReason.empty())\n-            return \"rejected\";\n-        return strRejectReason;\n-    }\n-\n-    return Value::null;\n+    return BIP22ValidationResult(state);\n }\n \n Value estimatefee(const Array& params, bool fHelp)"
      }
    ]
  },
  {
    "sha": "4e1e0adeb5b1f4ff28ebf6c707bb759d6796ec5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTFlMGFkZWI1YjFmNGZmMjhlYmY2YzcwN2JiNzU5ZDY3OTZlYzVm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-09-10T02:55:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-18T16:25:46Z"
      },
      "message": "Implement BIP 23 Block Proposal",
      "tree": {
        "sha": "b37c36139f610f85496d3ac2fcc5a496aa810008",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b37c36139f610f85496d3ac2fcc5a496aa810008"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e1e0adeb5b1f4ff28ebf6c707bb759d6796ec5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e1e0adeb5b1f4ff28ebf6c707bb759d6796ec5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e1e0adeb5b1f4ff28ebf6c707bb759d6796ec5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e1e0adeb5b1f4ff28ebf6c707bb759d6796ec5f/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f871a1e4f09825597e53aca367f3a4903b61b4ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f871a1e4f09825597e53aca367f3a4903b61b4ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f871a1e4f09825597e53aca367f3a4903b61b4ab"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7d571bffeefca29a369e96946a32691d600f1a86",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e1e0adeb5b1f4ff28ebf6c707bb759d6796ec5f/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e1e0adeb5b1f4ff28ebf6c707bb759d6796ec5f/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=4e1e0adeb5b1f4ff28ebf6c707bb759d6796ec5f",
        "patch": "@@ -393,6 +393,25 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         else\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");\n         lpval = find_value(oparam, \"longpollid\");\n+\n+        if (strMode == \"proposal\")\n+        {\n+            const Value& dataval = find_value(oparam, \"data\");\n+            if (dataval.type() != str_type)\n+                throw JSONRPCError(RPC_TYPE_ERROR, \"Missing data String key for proposal\");\n+\n+            CBlock block;\n+            if (!DecodeHexBlk(block, dataval.get_str()))\n+                throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n+\n+            CBlockIndex* const pindexPrev = chainActive.Tip();\n+            // TestBlockValidity only supports blocks built on the current Tip\n+            if (block.hashPrevBlock != pindexPrev->GetBlockHash())\n+                return \"inconclusive\";\n+            CValidationState state;\n+            TestBlockValidity(state, block, pindexPrev, false, true);\n+            return BIP22ValidationResult(state);\n+        }\n     }\n \n     if (strMode != \"template\")\n@@ -495,6 +514,8 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     UpdateTime(pblock, pindexPrev);\n     pblock->nNonce = 0;\n \n+    static const Array aCaps = boost::assign::list_of(\"proposal\");\n+\n     Array transactions;\n     map<uint256, int64_t> setTxIndex;\n     int i = 0;\n@@ -541,6 +562,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     }\n \n     Object result;\n+    result.push_back(Pair(\"capabilities\", aCaps));\n     result.push_back(Pair(\"version\", pblock->nVersion));\n     result.push_back(Pair(\"previousblockhash\", pblock->hashPrevBlock.GetHex()));\n     result.push_back(Pair(\"transactions\", transactions));"
      }
    ]
  },
  {
    "sha": "ba211c8a380cd1dded2629023e0e5c2773907774",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTIxMWM4YTM4MGNkMWRkZWQyNjI5MDIzZTBlNWMyNzczOTA3Nzc0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-11-17T18:47:40Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-18T16:25:46Z"
      },
      "message": "QA RPC tests: Add tests block block proposals",
      "tree": {
        "sha": "db35d52443d812c7ecfb54acf7d1fa3cbbad8c7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db35d52443d812c7ecfb54acf7d1fa3cbbad8c7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba211c8a380cd1dded2629023e0e5c2773907774",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba211c8a380cd1dded2629023e0e5c2773907774",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba211c8a380cd1dded2629023e0e5c2773907774",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba211c8a380cd1dded2629023e0e5c2773907774/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e1e0adeb5b1f4ff28ebf6c707bb759d6796ec5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e1e0adeb5b1f4ff28ebf6c707bb759d6796ec5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e1e0adeb5b1f4ff28ebf6c707bb759d6796ec5f"
      }
    ],
    "stats": {
      "total": 188,
      "additions": 184,
      "deletions": 4
    },
    "files": [
      {
        "sha": "263a5f6d59c6db1f44f36f9e6667c20bf770c79e",
        "filename": "qa/rpc-tests/getblocktemplate_longpoll.py",
        "status": "renamed",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba211c8a380cd1dded2629023e0e5c2773907774/qa/rpc-tests/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba211c8a380cd1dded2629023e0e5c2773907774/qa/rpc-tests/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_longpoll.py?ref=ba211c8a380cd1dded2629023e0e5c2773907774",
        "patch": "@@ -3,8 +3,6 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-# Exercise the listtransactions API\n-\n from test_framework import BitcoinTestFramework\n from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n from util import *\n@@ -46,7 +44,7 @@ def __init__(self, node):\n     def run(self):\n         self.node.getblocktemplate({'longpollid':self.longpollid})\n \n-class GetBlockTemplateTest(BitcoinTestFramework):\n+class GetBlockTemplateLPTest(BitcoinTestFramework):\n     '''\n     Test longpolling with getblocktemplate.\n     '''\n@@ -90,5 +88,5 @@ def run_test(self):\n         assert(not thr.is_alive())\n \n if __name__ == '__main__':\n-    GetBlockTemplateTest().main()\n+    GetBlockTemplateLPTest().main()\n ",
        "previous_filename": "qa/rpc-tests/getblocktemplate.py"
      },
      {
        "sha": "9fe474ed62d70ef4e17c60ce3a5928eb01fd808a",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "added",
        "additions": 182,
        "deletions": 0,
        "changes": 182,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba211c8a380cd1dded2629023e0e5c2773907774/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba211c8a380cd1dded2629023e0e5c2773907774/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=ba211c8a380cd1dded2629023e0e5c2773907774",
        "patch": "@@ -0,0 +1,182 @@\n+#!/usr/bin/env python\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework import BitcoinTestFramework\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+from binascii import a2b_hex, b2a_hex\n+from hashlib import sha256\n+from struct import pack\n+\n+\n+def check_array_result(object_array, to_match, expected):\n+    \"\"\"\n+    Pass in array of JSON objects, a dictionary with key/value pairs\n+    to match against, and another dictionary with expected key/value\n+    pairs.\n+    \"\"\"\n+    num_matched = 0\n+    for item in object_array:\n+        all_match = True\n+        for key,value in to_match.items():\n+            if item[key] != value:\n+                all_match = False\n+        if not all_match:\n+            continue\n+        for key,value in expected.items():\n+            if item[key] != value:\n+                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n+            num_matched = num_matched+1\n+    if num_matched == 0:\n+        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n+\n+def b2x(b):\n+    return b2a_hex(b).decode('ascii')\n+\n+# NOTE: This does not work for signed numbers (set the high bit) or zero (use b'\\0')\n+def encodeUNum(n):\n+    s = bytearray(b'\\1')\n+    while n > 127:\n+        s[0] += 1\n+        s.append(n % 256)\n+        n //= 256\n+    s.append(n)\n+    return bytes(s)\n+\n+def varlenEncode(n):\n+    if n < 0xfd:\n+        return pack('<B', n)\n+    if n <= 0xffff:\n+        return b'\\xfd' + pack('<H', n)\n+    if n <= 0xffffffff:\n+        return b'\\xfe' + pack('<L', n)\n+    return b'\\xff' + pack('<Q', n)\n+\n+def dblsha(b):\n+    return sha256(sha256(b).digest()).digest()\n+\n+def genmrklroot(leaflist):\n+    cur = leaflist\n+    while len(cur) > 1:\n+        n = []\n+        if len(cur) & 1:\n+            cur.append(cur[-1])\n+        for i in range(0, len(cur), 2):\n+            n.append(dblsha(cur[i] + cur[i+1]))\n+        cur = n\n+    return cur[0]\n+\n+def template_to_bytes(tmpl, txlist):\n+    blkver = pack('<L', tmpl['version'])\n+    mrklroot = genmrklroot(list(dblsha(a) for a in txlist))\n+    timestamp = pack('<L', tmpl['curtime'])\n+    nonce = b'\\0\\0\\0\\0'\n+    blk = blkver + a2b_hex(tmpl['previousblockhash'])[::-1] + mrklroot + timestamp + a2b_hex(tmpl['bits'])[::-1] + nonce\n+    blk += varlenEncode(len(txlist))\n+    for tx in txlist:\n+        blk += tx\n+    return blk\n+\n+def template_to_hex(tmpl, txlist):\n+    return b2x(template_to_bytes(tmpl, txlist))\n+\n+def assert_template(node, tmpl, txlist, expect):\n+    rsp = node.getblocktemplate({'data':template_to_hex(tmpl, txlist),'mode':'proposal'})\n+    if rsp != expect:\n+        raise AssertionError('unexpected: %s' % (rsp,))\n+\n+class GetBlockTemplateProposalTest(BitcoinTestFramework):\n+    '''\n+    Test block proposals with getblocktemplate.\n+    '''\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        tmpl = node.getblocktemplate()\n+        if 'coinbasetxn' not in tmpl:\n+            rawcoinbase = encodeUNum(tmpl['height'])\n+            rawcoinbase += b'\\x01-'\n+            hexcoinbase = b2x(rawcoinbase)\n+            hexoutval = b2x(pack('<Q', tmpl['coinbasevalue']))\n+            tmpl['coinbasetxn'] = {'data': '01000000' + '01' + '0000000000000000000000000000000000000000000000000000000000000000ffffffff' + ('%02x' % (len(rawcoinbase),)) + hexcoinbase + 'fffffffe' + '01' + hexoutval + '00' + '00000000'}\n+        txlist = list(bytearray(a2b_hex(a['data'])) for a in (tmpl['coinbasetxn'],) + tuple(tmpl['transactions']))\n+\n+        # Test 0: Capability advertised\n+        assert('proposal' in tmpl['capabilities'])\n+\n+        # NOTE: This test currently FAILS\n+        ## Test 1: Bad height in coinbase\n+        #txlist[0][4+1+36+1+1] += 1\n+        #assert_template(node, tmpl, txlist, 'FIXME')\n+        #txlist[0][4+1+36+1+1] -= 1\n+\n+        # Test 2: Bad input hash for gen tx\n+        txlist[0][4+1] += 1\n+        assert_template(node, tmpl, txlist, 'bad-cb-missing')\n+        txlist[0][4+1] -= 1\n+\n+        # Test 3: Truncated final tx\n+        lastbyte = txlist[-1].pop()\n+        try:\n+            assert_template(node, tmpl, txlist, 'n/a')\n+        except JSONRPCException:\n+            pass  # Expected\n+        txlist[-1].append(lastbyte)\n+\n+        # Test 4: Add an invalid tx to the end (duplicate of gen tx)\n+        txlist.append(txlist[0])\n+        assert_template(node, tmpl, txlist, 'bad-txns-duplicate')\n+        txlist.pop()\n+\n+        # Test 5: Add an invalid tx to the end (non-duplicate)\n+        txlist.append(bytearray(txlist[0]))\n+        txlist[-1][4+1] = b'\\xff'\n+        assert_template(node, tmpl, txlist, 'bad-txns-inputs-missingorspent')\n+        txlist.pop()\n+\n+        # Test 6: Future tx lock time\n+        txlist[0][-4:] = b'\\xff\\xff\\xff\\xff'\n+        assert_template(node, tmpl, txlist, 'bad-txns-nonfinal')\n+        txlist[0][-4:] = b'\\0\\0\\0\\0'\n+\n+        # Test 7: Bad tx count\n+        txlist.append(b'')\n+        try:\n+            assert_template(node, tmpl, txlist, 'n/a')\n+        except JSONRPCException:\n+            pass  # Expected\n+        txlist.pop()\n+\n+        # Test 8: Bad bits\n+        realbits = tmpl['bits']\n+        tmpl['bits'] = '1c0000ff'  # impossible in the real world\n+        assert_template(node, tmpl, txlist, 'bad-diffbits')\n+        tmpl['bits'] = realbits\n+\n+        # Test 9: Bad merkle root\n+        rawtmpl = template_to_bytes(tmpl, txlist)\n+        rawtmpl[4+32] = (rawtmpl[4+32] + 1) % 0x100\n+        rsp = node.getblocktemplate({'data':b2x(rawtmpl),'mode':'proposal'})\n+        if rsp != 'bad-txnmrklroot':\n+            raise AssertionError('unexpected: %s' % (rsp,))\n+\n+        # Test 10: Bad timestamps\n+        realtime = tmpl['curtime']\n+        tmpl['curtime'] = 0x7fffffff\n+        assert_template(node, tmpl, txlist, 'time-too-new')\n+        tmpl['curtime'] = 0\n+        assert_template(node, tmpl, txlist, 'time-too-old')\n+        tmpl['curtime'] = realtime\n+\n+        # Test 11: Valid block\n+        assert_template(node, tmpl, txlist, None)\n+\n+        # Test 12: Orphan block\n+        tmpl['previousblockhash'] = 'ff00' * 16\n+        assert_template(node, tmpl, txlist, 'inconclusive')\n+\n+if __name__ == '__main__':\n+    GetBlockTemplateProposalTest().main()"
      }
    ]
  },
  {
    "sha": "6d132d1d1e6d976f6d3d065b75f97c17ebe34055",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDEzMmQxZDFlNmQ5NzZmNmQzZDA2NWI3NWY5N2MxN2ViZTM0MDU1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-18T16:48:14Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-18T17:57:49Z"
      },
      "message": "Make contextual checks independent from mapBlockIndex",
      "tree": {
        "sha": "bd67d995b6a56f50ece5189d572809e088fec418",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd67d995b6a56f50ece5189d572809e088fec418"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d132d1d1e6d976f6d3d065b75f97c17ebe34055",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d132d1d1e6d976f6d3d065b75f97c17ebe34055",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d132d1d1e6d976f6d3d065b75f97c17ebe34055",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d132d1d1e6d976f6d3d065b75f97c17ebe34055/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba211c8a380cd1dded2629023e0e5c2773907774",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba211c8a380cd1dded2629023e0e5c2773907774",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba211c8a380cd1dded2629023e0e5c2773907774"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 39,
      "deletions": 41
    },
    "files": [
      {
        "sha": "ccc031ba1b6925a48c6334e3e46aaff82cb78290",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 39,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d132d1d1e6d976f6d3d065b75f97c17ebe34055/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d132d1d1e6d976f6d3d065b75f97c17ebe34055/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6d132d1d1e6d976f6d3d065b75f97c17ebe34055",
        "patch": "@@ -2334,32 +2334,11 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     return true;\n }\n \n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex** ppindex)\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n-    AssertLockHeld(cs_main);\n-    // Check for duplicate\n-    uint256 hash = block.GetHash();\n-    BlockMap::iterator miSelf = mapBlockIndex.find(hash);\n-    CBlockIndex *pindex = NULL;\n-    if (miSelf != mapBlockIndex.end()) {\n-        // Block header is already known.\n-        pindex = miSelf->second;\n-        if (ppindex)\n-            *ppindex = pindex;\n-        if (pindex->nStatus & BLOCK_FAILED_MASK)\n-            return state.Invalid(error(\"%s : block is marked invalid\", __func__), 0, \"duplicate\");\n-        return true;\n-    }\n-\n-    // Get prev block index\n-    CBlockIndex* pindexPrev = NULL;\n-    int nHeight = 0;\n-    if (hash != Params().HashGenesisBlock()) {\n-        BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n-        if (mi == mapBlockIndex.end())\n-            return state.DoS(10, error(\"%s : prev block not found\", __func__), 0, \"bad-prevblk\");\n-        pindexPrev = (*mi).second;\n-        nHeight = pindexPrev->nHeight+1;\n+    if (pindexPrev != NULL) {\n+        int nHeight = pindexPrev->nHeight+1;\n+        uint256 hash = block.GetHash();\n \n         // Check proof of work\n         if ((!Params().SkipProofOfWorkCheck()) &&\n@@ -2391,15 +2370,12 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         }\n     }\n \n-    if (ppindex)\n-        *ppindex = pindex;\n-\n     return true;\n }\n \n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CBlockIndex * const pindexPrev)\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n-    const int nHeight = pindexPrev->nHeight + 1;\n+    const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n \n     // Check that all transactions are finalized\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n@@ -2424,16 +2400,39 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CB\n \n bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex** ppindex)\n {\n-    // We need pindex to know whether to add it to the block index or not - if not provided by the caller, we use a dummy one on the stack\n-    CBlockIndex *_dummy_pindex;\n-    if (!ppindex)\n-        ppindex = &_dummy_pindex;\n+    AssertLockHeld(cs_main);\n+    // Check for duplicate\n+    uint256 hash = block.GetHash();\n+    BlockMap::iterator miSelf = mapBlockIndex.find(hash);\n+    CBlockIndex *pindex = NULL;\n+    if (miSelf != mapBlockIndex.end()) {\n+        // Block header is already known.\n+        pindex = miSelf->second;\n+        if (ppindex)\n+            *ppindex = pindex;\n+        if (pindex->nStatus & BLOCK_FAILED_MASK)\n+            return state.Invalid(error(\"%s : block is marked invalid\", __func__), 0, \"duplicate\");\n+        return true;\n+    }\n \n-    if (!ContextualCheckBlockHeader(block, state, ppindex))\n+    // Get prev block index\n+    CBlockIndex* pindexPrev = NULL;\n+    if (hash != Params().HashGenesisBlock()) {\n+        BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n+        if (mi == mapBlockIndex.end())\n+            return state.DoS(10, error(\"%s : prev block not found\", __func__), 0, \"bad-prevblk\");\n+        pindexPrev = (*mi).second;\n+    }\n+\n+    if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n         return false;\n \n-    if (!*ppindex)\n-        *ppindex = AddToBlockIndex(block);\n+    if (pindex == NULL)\n+        pindex = AddToBlockIndex(block);\n+\n+    if (ppindex)\n+        *ppindex = pindex;\n+\n     return true;\n }\n \n@@ -2582,8 +2581,7 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    // NOTE: ContextualCheckBlockHeader only assigns ppindex, which we don't need/want\n-    if (!ContextualCheckBlockHeader(block, state, NULL))\n+    if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n         return false;\n     if (!CheckBlock(block, state, fCheckPOW, fCheckMerkleRoot))\n         return false;"
      },
      {
        "sha": "9af11da0ffbc93459700a5a164417c7707ecb391",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d132d1d1e6d976f6d3d065b75f97c17ebe34055/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d132d1d1e6d976f6d3d065b75f97c17ebe34055/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=6d132d1d1e6d976f6d3d065b75f97c17ebe34055",
        "patch": "@@ -464,8 +464,8 @@ bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool f\n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n // Context-dependent validity checks\n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex **ppindex= NULL);\n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CBlockIndex *pindexPrev);\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev);\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev);\n \n // Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held)\n bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex *pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);"
      }
    ]
  }
]