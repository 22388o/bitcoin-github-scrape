[
  {
    "sha": "ce8cd7a7da9174ab151172fc0ce97b5164637cf3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZThjZDdhN2RhOTE3NGFiMTUxMTcyZmMwY2U5N2I1MTY0NjM3Y2Yz",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-06T18:11:43Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-20T00:33:45Z"
      },
      "message": "Don't process unrequested, low-work blocks\n\nA peer could try to waste our resources by sending us unrequested blocks with\nlow work, eg to fill up our disk.  Since\ne2652002b6011f793185d473f87f1730c625593b we no longer request blocks until we\nknow we're on a chain with more than nMinimumChainWork (our anti-DoS\nthreshold), but we would still process unrequested blocks that had more work\nthan our tip.  This commit fixes that behavior.",
      "tree": {
        "sha": "61191a31eb8fb0c9ede4b1825c9161f97816e47c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61191a31eb8fb0c9ede4b1825c9161f97816e47c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce8cd7a7da9174ab151172fc0ce97b5164637cf3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce8cd7a7da9174ab151172fc0ce97b5164637cf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce8cd7a7da9174ab151172fc0ce97b5164637cf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce8cd7a7da9174ab151172fc0ce97b5164637cf3/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff92fbf24739a022eb677daab03c87c5e6971094",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff92fbf24739a022eb677daab03c87c5e6971094",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff92fbf24739a022eb677daab03c87c5e6971094"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "866e0c9fba3293367ed2cf3fa6bfb16a71e79f34",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce8cd7a7da9174ab151172fc0ce97b5164637cf3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce8cd7a7da9174ab151172fc0ce97b5164637cf3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ce8cd7a7da9174ab151172fc0ce97b5164637cf3",
        "patch": "@@ -3135,6 +3135,12 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n         if (pindex->nTx != 0) return true;  // This is a previously-processed block that was pruned\n         if (!fHasMoreWork) return true;     // Don't process less-work chains\n         if (fTooFarAhead) return true;      // Block height is too high\n+\n+        // Protect against DoS attacks from low-work chains.\n+        // If our tip is behind, a peer could try to send us\n+        // low-work blocks on a fake chain that we would never\n+        // request; don't process these.\n+        if (pindex->nChainWork < nMinimumChainWork) return true;\n     }\n     if (fNewBlock) *fNewBlock = true;\n "
      }
    ]
  },
  {
    "sha": "08fd822771bf8dae1c21698811f57aa691b2f25d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGZkODIyNzcxYmY4ZGFlMWMyMTY5ODgxMWY1N2FhNjkxYjJmMjVk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-06T18:32:07Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-20T00:38:22Z"
      },
      "message": "qa: add test for minchainwork use in acceptblock",
      "tree": {
        "sha": "91cbff957d0df76b7f8c6909bb2289f4e13c23c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91cbff957d0df76b7f8c6909bb2289f4e13c23c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08fd822771bf8dae1c21698811f57aa691b2f25d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08fd822771bf8dae1c21698811f57aa691b2f25d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08fd822771bf8dae1c21698811f57aa691b2f25d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08fd822771bf8dae1c21698811f57aa691b2f25d/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce8cd7a7da9174ab151172fc0ce97b5164637cf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce8cd7a7da9174ab151172fc0ce97b5164637cf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce8cd7a7da9174ab151172fc0ce97b5164637cf3"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 33,
      "deletions": 11
    },
    "files": [
      {
        "sha": "27ae0c27e19656733ebfee3edc3a0ad9399f3a0b",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 33,
        "deletions": 11,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08fd822771bf8dae1c21698811f57aa691b2f25d/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08fd822771bf8dae1c21698811f57aa691b2f25d/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=08fd822771bf8dae1c21698811f57aa691b2f25d",
        "patch": "@@ -8,17 +8,22 @@\n versus non-whitelisted peers, this tests the behavior of both (effectively two\n separate tests running in parallel).\n \n-Setup: two nodes, node0 and node1, not connected to each other.  Node0 does not\n+Setup: three nodes, node0+node1+node2, not connected to each other.  Node0 does not\n whitelist localhost, but node1 does. They will each be on their own chain for\n-this test.\n+this test.  Node2 will have nMinimumChainWork set to 0x10, so it won't process\n+low-work unrequested blocks.\n \n-We have one NodeConn connection to each, test_node and white_node respectively.\n+We have one NodeConn connection to each, test_node, white_node, and min_work_node,\n+respectively.\n \n The test:\n 1. Generate one block on each node, to leave IBD.\n \n 2. Mine a new block on each tip, and deliver to each node from node's peer.\n-   The tip should advance.\n+   The tip should advance for node0 and node1, but node2 should skip processing\n+   due to nMinimumChainWork.\n+\n+Node2 is unused in tests 3-7:\n \n 3. Mine a block that forks the previous block, and deliver to each node from\n    corresponding peer.\n@@ -46,6 +51,10 @@\n \n 7. Send Node0 the missing block again.\n    Node0 should process and the tip should advance.\n+\n+8. Test Node2 is able to sync when connected to node0 (which should have sufficient\n+work on its chain).\n+\n \"\"\"\n \n from test_framework.mininode import *\n@@ -62,52 +71,60 @@ def add_options(self, parser):\n \n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 2\n-        self.extra_args = [[], [\"-whitelist=127.0.0.1\"]]\n+        self.num_nodes = 3\n+        self.extra_args = [[], [\"-whitelist=127.0.0.1\"], [\"-minimumchainwork=0x10\"]]\n \n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n         # from peers which are not whitelisted, while Node1 will be used for\n         # the whitelisted case.\n+        # Node2 will be used for non-whitelisted peers to test the interaction\n+        # with nMinimumChainWork.\n         self.setup_nodes()\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         test_node = NodeConnCB()   # connects to node0 (not whitelisted)\n         white_node = NodeConnCB()  # connects to node1 (whitelisted)\n+        min_work_node = NodeConnCB()  # connects to node2 (not whitelisted)\n \n         connections = []\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node))\n         connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], white_node))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], min_work_node))\n         test_node.add_connection(connections[0])\n         white_node.add_connection(connections[1])\n+        min_work_node.add_connection(connections[2])\n \n         NetworkThread().start() # Start up network handling in another thread\n \n         # Test logic begins here\n         test_node.wait_for_verack()\n         white_node.wait_for_verack()\n+        min_work_node.wait_for_verack()\n \n-        # 1. Have both nodes mine a block (leave IBD)\n+        # 1. Have nodes mine a block (nodes1/2 leave IBD)\n         [ n.generate(1) for n in self.nodes ]\n         tips = [ int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes ]\n \n         # 2. Send one block that builds on each tip.\n-        # This should be accepted.\n+        # This should be accepted by nodes 1/2\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n         block_time = int(time.time()) + 1\n-        for i in range(2):\n+        for i in range(3):\n             blocks_h2.append(create_block(tips[i], create_coinbase(2), block_time))\n             blocks_h2[i].solve()\n             block_time += 1\n         test_node.send_message(msg_block(blocks_h2[0]))\n         white_node.send_message(msg_block(blocks_h2[1]))\n+        min_work_node.send_message(msg_block(blocks_h2[2]))\n \n-        for x in [test_node, white_node]:\n+        for x in [test_node, white_node, min_work_node]:\n             x.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         assert_equal(self.nodes[1].getblockcount(), 2)\n-        self.log.info(\"First height 2 block accepted by both nodes\")\n+        assert_equal(self.nodes[2].getblockcount(), 1)\n+        self.log.info(\"First height 2 block accepted by node0/node1; correctly rejected by node2\")\n \n         # 3. Send another block that builds on the original tip.\n         blocks_h2f = []  # Blocks at height 2 that fork off the main chain\n@@ -220,6 +237,11 @@ def run_test(self):\n         assert_equal(self.nodes[0].getblockcount(), 290)\n         self.log.info(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n+        # 8. Connect node2 to node0 and ensure it is able to sync\n+        connect_nodes(self.nodes[0], 2)\n+        sync_blocks([self.nodes[0], self.nodes[2]])\n+        self.log.info(\"Successfully synced nodes 2 and 0\")\n+\n         [ c.disconnect_node() for c in connections ]\n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "01b52cedd42f50a93b40981c91af7c12de6e45ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWI1MmNlZGQ0MmY1MGE5M2I0MDk4MWM5MWFmN2MxMmRlNmU0NWNl",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-20T00:52:30Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-20T00:52:30Z"
      },
      "message": "Add comment explaining forced processing of compact blocks",
      "tree": {
        "sha": "e3b85bf9b84a2f3584a34bfe0c420983255535d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3b85bf9b84a2f3584a34bfe0c420983255535d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01b52cedd42f50a93b40981c91af7c12de6e45ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01b52cedd42f50a93b40981c91af7c12de6e45ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01b52cedd42f50a93b40981c91af7c12de6e45ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01b52cedd42f50a93b40981c91af7c12de6e45ce/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08fd822771bf8dae1c21698811f57aa691b2f25d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08fd822771bf8dae1c21698811f57aa691b2f25d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08fd822771bf8dae1c21698811f57aa691b2f25d"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 15,
      "deletions": 2
    },
    "files": [
      {
        "sha": "61f98ca747cba49fca796a80bb47f62bf6b4aec0",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01b52cedd42f50a93b40981c91af7c12de6e45ce/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01b52cedd42f50a93b40981c91af7c12de6e45ce/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=01b52cedd42f50a93b40981c91af7c12de6e45ce",
        "patch": "@@ -2146,7 +2146,16 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 mapBlockSource.emplace(pblock->GetHash(), std::make_pair(pfrom->GetId(), false));\n             }\n             bool fNewBlock = false;\n-            ProcessNewBlock(chainparams, pblock, true, &fNewBlock);\n+            // Setting fForceProcessing to true means that we bypass some of\n+            // our anti-DoS protections in AcceptBlock, which filters\n+            // unrequested blocks that might be trying to waste our resources\n+            // (eg disk space). Because we only try to reconstruct blocks when\n+            // we're close to caught up (via the CanDirectFetch() requirement\n+            // above, combined with the behavior of not requesting blocks until\n+            // we have a chain with at least nMinimumChainWork), and we ignore\n+            // compact blocks with less work than our tip, it is safe to treat\n+            // reconstructed compact blocks as having been requested.\n+            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n@@ -2226,7 +2235,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             bool fNewBlock = false;\n             // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n             // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n-            ProcessNewBlock(chainparams, pblock, true, &fNewBlock);\n+            // This bypasses some anti-DoS logic in AcceptBlock (eg to prevent\n+            // disk-space attacks), but this should be safe due to the\n+            // protections in the compact block handler -- see related comment\n+            // in compact block optimistic reconstruction handling.\n+            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {"
      }
    ]
  }
]