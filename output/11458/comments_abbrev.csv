TheBlueMatt,2017-10-07T00:17:57Z,"Concept ACK, though fForceProcessing/fRequested doesn't do the thing you think it does, see, eg https://github.com/bitcoin/bitcoin/pull/9352#pullrequestreview-13343287.",https://github.com/bitcoin/bitcoin/pull/11458#issuecomment-334897045,334897045,
promag,2017-10-07T07:49:20Z,"This is only useful if tip chain work is less than minimum chain work, which I think only happens in IBD?\n\nEdit: ready more carefully the PR description.\n\nMaybe we should just ignore unrequested blocks if tip chain work < minimum chain work? This way this test could be moved before `AcceptBlockHeader`?",https://github.com/bitcoin/bitcoin/pull/11458#issuecomment-334917449,334917449,
sdaftuar,2017-10-07T12:31:49Z,"> Concept ACK, though fForceProcessing/fRequested doesn't do the thing you think it does, see, eg #9352 (review).\n\n@TheBlueMatt Is there a mistake here?  I know we use the fForceProcessing/fRequested in a couple ways but I believe this is correct -- for instance the unusual use of it in compact block processing shouldn't be an issue, because we don't try to reconstruct compact blocks when our ",https://github.com/bitcoin/bitcoin/pull/11458#issuecomment-334931922,334931922,
achow101,2017-10-08T21:17:17Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11458#issuecomment-335039215,335039215,
promag,2017-10-10T01:01:42Z,@sdaftuar Please see https://github.com/promag/bitcoin/commit/41987988ebde53a7d3a7ba8fb6363b40df6c2271.,https://github.com/bitcoin/bitcoin/pull/11458#issuecomment-335329419,335329419,
meshcollider,2017-10-19T21:53:15Z,utACK ~https://github.com/bitcoin/bitcoin/commit/f0940e462cb435f10ef6f052dae609655202f245~ https://github.com/bitcoin/bitcoin/pull/11458/commits/01b52cedd42f50a93b40981c91af7c12de6e45ce,https://github.com/bitcoin/bitcoin/pull/11458#issuecomment-338048699,338048699,
TheBlueMatt,2017-10-19T23:07:30Z,"@sdaftuar Indeed. You were right, I was confused, but this does leave the logic being added here super brittle to future changes. For those following along at home, the reason compact blocks always passing fRequested as true doesn't break this is that it does a CanDirectFetch first, which only looks at the timestamp of our chainActive.Tip(). Thus, this logic would be broken if there were any way f",https://github.com/bitcoin/bitcoin/pull/11458#issuecomment-338062317,338062317,
TheBlueMatt,2017-10-19T23:34:30Z,"Also, maybe add a comment about the CanDirectFetch stuff somewhere.",https://github.com/bitcoin/bitcoin/pull/11458#issuecomment-338066385,338066385,
sdaftuar,2017-10-20T00:39:10Z,Needed a rebase due to a conflict in the test.,https://github.com/bitcoin/bitcoin/pull/11458#issuecomment-338075137,338075137,
sdaftuar,2017-10-20T00:59:23Z,"@TheBlueMatt I added a comment.\n\n@promag Thanks for the patch and for the review, but I (slightly) prefer the code that I've presented already.  Skipping the call to AcceptBlockHeader doesn't do much in the adversarial case (which is the only case we're concerned about here), because an attacker would just separately deliver the header which we would process and store.  And it seems clearer to",https://github.com/bitcoin/bitcoin/pull/11458#issuecomment-338077654,338077654,
promag,2017-10-20T08:45:25Z,"utACK 01b52ce.\n\nNit, I would squash the test with the commit adding the feature.",https://github.com/bitcoin/bitcoin/pull/11458#issuecomment-338145640,338145640,
sipa,2017-10-20T11:03:09Z,utACK 01b52cedd42f50a93b40981c91af7c12de6e45ce,https://github.com/bitcoin/bitcoin/pull/11458#issuecomment-338175941,338175941,
TheBlueMatt,2017-10-20T17:25:11Z,"utACK 01b52cedd42f50a93b40981c91af7c12de6e45ce, didnt review the test parts.",https://github.com/bitcoin/bitcoin/pull/11458#issuecomment-338270404,338270404,
TheBlueMatt,2017-11-01T14:44:37Z,Needs backport (#11531 depends on this somewhat indirectly),https://github.com/bitcoin/bitcoin/pull/11458#issuecomment-341126904,341126904,
