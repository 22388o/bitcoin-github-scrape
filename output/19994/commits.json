[
  {
    "sha": "fa14f57fbc3c1fa2b9eea5df687f0fb36d452bd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTE0ZjU3ZmJjM2MxZmEyYjllZWE1ZGY2ODdmMGZiMzZkNDUyYmQ1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-22T16:13:52Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-22T18:49:30Z"
      },
      "message": "Assert that RPCArg names are equal to CRPCCommand ones (net, rpcwallet)",
      "tree": {
        "sha": "778e6a10e382e0539a687168ce3c5a4fd131a6f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/778e6a10e382e0539a687168ce3c5a4fd131a6f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa14f57fbc3c1fa2b9eea5df687f0fb36d452bd5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjBpgwAtWEJ5Zy+wjrBhDUkio2hfgRm/GEbgakKln17w4gxDl8MYMnMGpIpX/F2\nkTzPZjLmJAsBA2Rj5uTCDjXHtesKEJFHqjYLowCv1ki9GQ472+DQEvc8Ztjx8Jt4\nNWMBZ+v5tZAoIenvEHAr8BAEPTvH3pR+J8k9Q5fix2TWEheGCsuvqzrrhhUD50ah\nTTNBZHiSSXqrTrozPB+nXwoytFgogNixccmtk091O1SVQaSdgDdYWB+HZ34jj9TD\n2dsFwnwm7Ncif/5brS9VMbd/o3Wmr4dya9vu/w14Y/zDvh4tDe73RtLFuCVOjETC\nz001IpsaVx+dOh/mdavs5UMznkUXAGJgExlIMofcx5cg5BreKHDPYmBFZFLCGlsR\nUD+dPTnicA6+i7mYFOS/+Hi3Tcp+uefzZRJw8Wa168WyOwWieoCpqyUcsjQU8he9\nIf11U1hd3a1855BpnUvIfST9izLGCZgQvkIvvRtPJyK63qzf6TT8Z+5s1tWhQS8d\nSxRpZ5Mr\n=pm+A\n-----END PGP SIGNATURE-----",
        "payload": "tree 778e6a10e382e0539a687168ce3c5a4fd131a6f0\nparent d692d192cda37fda6359ad0736b85de20383db73\nauthor MarcoFalke <falke.marco@gmail.com> 1600791232 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1600800570 +0200\n\nAssert that RPCArg names are equal to CRPCCommand ones (net, rpcwallet)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa14f57fbc3c1fa2b9eea5df687f0fb36d452bd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa14f57fbc3c1fa2b9eea5df687f0fb36d452bd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa14f57fbc3c1fa2b9eea5df687f0fb36d452bd5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d692d192cda37fda6359ad0736b85de20383db73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d692d192cda37fda6359ad0736b85de20383db73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d692d192cda37fda6359ad0736b85de20383db73"
      }
    ],
    "stats": {
      "total": 635,
      "additions": 381,
      "deletions": 254
    },
    "files": [
      {
        "sha": "11a2d23d85a80ed71ec63ee2f58ac3392a5189fd",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 91,
        "deletions": 57,
        "changes": 148,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa14f57fbc3c1fa2b9eea5df687f0fb36d452bd5/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa14f57fbc3c1fa2b9eea5df687f0fb36d452bd5/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fa14f57fbc3c1fa2b9eea5df687f0fb36d452bd5",
        "patch": "@@ -29,9 +29,9 @@\n \n #include <univalue.h>\n \n-static UniValue getconnectioncount(const JSONRPCRequest& request)\n+static RPCHelpMan getconnectioncount()\n {\n-            RPCHelpMan{\"getconnectioncount\",\n+    return RPCHelpMan{\"getconnectioncount\",\n                 \"\\nReturns the number of connections to other nodes.\\n\",\n                 {},\n                 RPCResult{\n@@ -41,18 +41,20 @@ static UniValue getconnectioncount(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getconnectioncount\", \"\")\n             + HelpExampleRpc(\"getconnectioncount\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     NodeContext& node = EnsureNodeContext(request.context);\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     return (int)node.connman->GetNodeCount(CConnman::CONNECTIONS_ALL);\n+},\n+    };\n }\n \n-static UniValue ping(const JSONRPCRequest& request)\n+static RPCHelpMan ping()\n {\n-            RPCHelpMan{\"ping\",\n+    return RPCHelpMan{\"ping\",\n                 \"\\nRequests that a ping be sent to all other nodes, to measure ping time.\\n\"\n                 \"Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\\n\"\n                 \"Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\\n\",\n@@ -62,8 +64,8 @@ static UniValue ping(const JSONRPCRequest& request)\n                     HelpExampleCli(\"ping\", \"\")\n             + HelpExampleRpc(\"ping\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     NodeContext& node = EnsureNodeContext(request.context);\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -73,11 +75,13 @@ static UniValue ping(const JSONRPCRequest& request)\n         pnode->fPingQueued = true;\n     });\n     return NullUniValue;\n+},\n+    };\n }\n \n-static UniValue getpeerinfo(const JSONRPCRequest& request)\n+static RPCHelpMan getpeerinfo()\n {\n-            RPCHelpMan{\"getpeerinfo\",\n+    return RPCHelpMan{\"getpeerinfo\",\n                 \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n                 {},\n                 RPCResult{\n@@ -142,8 +146,8 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getpeerinfo\", \"\")\n             + HelpExampleRpc(\"getpeerinfo\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     NodeContext& node = EnsureNodeContext(request.context);\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -233,17 +237,13 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n     }\n \n     return ret;\n+},\n+    };\n }\n \n-static UniValue addnode(const JSONRPCRequest& request)\n+static RPCHelpMan addnode()\n {\n-    std::string strCommand;\n-    if (!request.params[1].isNull())\n-        strCommand = request.params[1].get_str();\n-    if (request.fHelp || request.params.size() != 2 ||\n-        (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n-        throw std::runtime_error(\n-            RPCHelpMan{\"addnode\",\n+    return RPCHelpMan{\"addnode\",\n                 \"\\nAttempts to add or remove a node from the addnode list.\\n\"\n                 \"Or try a connection to a node once.\\n\"\n                 \"Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\\n\"\n@@ -257,7 +257,15 @@ static UniValue addnode(const JSONRPCRequest& request)\n                     HelpExampleCli(\"addnode\", \"\\\"192.168.0.6:8333\\\" \\\"onetry\\\"\")\n             + HelpExampleRpc(\"addnode\", \"\\\"192.168.0.6:8333\\\", \\\"onetry\\\"\")\n                 },\n-            }.ToString());\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::string strCommand;\n+    if (!request.params[1].isNull())\n+        strCommand = request.params[1].get_str();\n+    if (request.fHelp || request.params.size() != 2 ||\n+        (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n+        throw std::runtime_error(\n+            self.ToString());\n \n     NodeContext& node = EnsureNodeContext(request.context);\n     if(!node.connman)\n@@ -284,11 +292,13 @@ static UniValue addnode(const JSONRPCRequest& request)\n     }\n \n     return NullUniValue;\n+},\n+    };\n }\n \n-static UniValue disconnectnode(const JSONRPCRequest& request)\n+static RPCHelpMan disconnectnode()\n {\n-            RPCHelpMan{\"disconnectnode\",\n+    return RPCHelpMan{\"disconnectnode\",\n                 \"\\nImmediately disconnects from the specified peer node.\\n\"\n                 \"\\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\\n\"\n                 \"\\nTo disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.\\n\",\n@@ -303,8 +313,8 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n             + HelpExampleRpc(\"disconnectnode\", \"\\\"\\\", 1\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     NodeContext& node = EnsureNodeContext(request.context);\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -329,11 +339,13 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n     }\n \n     return NullUniValue;\n+},\n+    };\n }\n \n-static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n+static RPCHelpMan getaddednodeinfo()\n {\n-            RPCHelpMan{\"getaddednodeinfo\",\n+    return RPCHelpMan{\"getaddednodeinfo\",\n                 \"\\nReturns information about the given added node, or all added nodes\\n\"\n                 \"(note that onetry addnodes are not listed here)\\n\",\n                 {\n@@ -361,8 +373,8 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n             + HelpExampleRpc(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     NodeContext& node = EnsureNodeContext(request.context);\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -401,11 +413,13 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n     }\n \n     return ret;\n+},\n+    };\n }\n \n-static UniValue getnettotals(const JSONRPCRequest& request)\n+static RPCHelpMan getnettotals()\n {\n-            RPCHelpMan{\"getnettotals\",\n+    return RPCHelpMan{\"getnettotals\",\n                 \"\\nReturns information about network traffic, including bytes in, bytes out,\\n\"\n                 \"and current time.\\n\",\n                 {},\n@@ -430,7 +444,8 @@ static UniValue getnettotals(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getnettotals\", \"\")\n             + HelpExampleRpc(\"getnettotals\", \"\")\n                 },\n-            }.Check(request);\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     NodeContext& node = EnsureNodeContext(request.context);\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -449,6 +464,8 @@ static UniValue getnettotals(const JSONRPCRequest& request)\n     outboundLimit.pushKV(\"time_left_in_cycle\", node.connman->GetMaxOutboundTimeLeftInCycle());\n     obj.pushKV(\"uploadtarget\", outboundLimit);\n     return obj;\n+},\n+    };\n }\n \n static UniValue GetNetworksInfo()\n@@ -472,9 +489,9 @@ static UniValue GetNetworksInfo()\n     return networks;\n }\n \n-static UniValue getnetworkinfo(const JSONRPCRequest& request)\n+static RPCHelpMan getnetworkinfo()\n {\n-            RPCHelpMan{\"getnetworkinfo\",\n+    return RPCHelpMan{\"getnetworkinfo\",\n                 \"Returns an object containing various state info regarding P2P networking.\\n\",\n                 {},\n                 RPCResult{\n@@ -523,8 +540,8 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getnetworkinfo\", \"\")\n             + HelpExampleRpc(\"getnetworkinfo\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     LOCK(cs_main);\n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"version\",       CLIENT_VERSION);\n@@ -562,11 +579,13 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n     obj.pushKV(\"localaddresses\", localAddresses);\n     obj.pushKV(\"warnings\",       GetWarnings(false).original);\n     return obj;\n+},\n+    };\n }\n \n-static UniValue setban(const JSONRPCRequest& request)\n+static RPCHelpMan setban()\n {\n-    const RPCHelpMan help{\"setban\",\n+    return RPCHelpMan{\"setban\",\n                 \"\\nAttempts to add or remove an IP/Subnet from the banned list.\\n\",\n                 {\n                     {\"subnet\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\"},\n@@ -580,7 +599,8 @@ static UniValue setban(const JSONRPCRequest& request)\n                             + HelpExampleCli(\"setban\", \"\\\"192.168.0.0/24\\\" \\\"add\\\"\")\n                             + HelpExampleRpc(\"setban\", \"\\\"192.168.0.6\\\", \\\"add\\\", 86400\")\n                 },\n-    };\n+        [&](const RPCHelpMan& help, const JSONRPCRequest& request) -> UniValue\n+{\n     std::string strCommand;\n     if (!request.params[1].isNull())\n         strCommand = request.params[1].get_str();\n@@ -643,11 +663,13 @@ static UniValue setban(const JSONRPCRequest& request)\n         }\n     }\n     return NullUniValue;\n+},\n+    };\n }\n \n-static UniValue listbanned(const JSONRPCRequest& request)\n+static RPCHelpMan listbanned()\n {\n-            RPCHelpMan{\"listbanned\",\n+    return RPCHelpMan{\"listbanned\",\n                 \"\\nList all manually banned IPs/Subnets.\\n\",\n                 {},\n         RPCResult{RPCResult::Type::ARR, \"\", \"\",\n@@ -663,8 +685,8 @@ static UniValue listbanned(const JSONRPCRequest& request)\n                     HelpExampleCli(\"listbanned\", \"\")\n                             + HelpExampleRpc(\"listbanned\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     NodeContext& node = EnsureNodeContext(request.context);\n     if(!node.banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n@@ -686,19 +708,22 @@ static UniValue listbanned(const JSONRPCRequest& request)\n     }\n \n     return bannedAddresses;\n+},\n+    };\n }\n \n-static UniValue clearbanned(const JSONRPCRequest& request)\n+static RPCHelpMan clearbanned()\n {\n-            RPCHelpMan{\"clearbanned\",\n+    return RPCHelpMan{\"clearbanned\",\n                 \"\\nClear all banned IPs.\\n\",\n                 {},\n                 RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"clearbanned\", \"\")\n                             + HelpExampleRpc(\"clearbanned\", \"\")\n                 },\n-            }.Check(request);\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     NodeContext& node = EnsureNodeContext(request.context);\n     if (!node.banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n@@ -707,19 +732,21 @@ static UniValue clearbanned(const JSONRPCRequest& request)\n     node.banman->ClearBanned();\n \n     return NullUniValue;\n+},\n+    };\n }\n \n-static UniValue setnetworkactive(const JSONRPCRequest& request)\n+static RPCHelpMan setnetworkactive()\n {\n-            RPCHelpMan{\"setnetworkactive\",\n+    return RPCHelpMan{\"setnetworkactive\",\n                 \"\\nDisable/enable all p2p network activity.\\n\",\n                 {\n                     {\"state\", RPCArg::Type::BOOL, RPCArg::Optional::NO, \"true to enable networking, false to disable\"},\n                 },\n                 RPCResult{RPCResult::Type::BOOL, \"\", \"The value that was passed in\"},\n                 RPCExamples{\"\"},\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     NodeContext& node = EnsureNodeContext(request.context);\n     if (!node.connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -728,11 +755,13 @@ static UniValue setnetworkactive(const JSONRPCRequest& request)\n     node.connman->SetNetworkActive(request.params[0].get_bool());\n \n     return node.connman->GetNetworkActive();\n+},\n+    };\n }\n \n-static UniValue getnodeaddresses(const JSONRPCRequest& request)\n+static RPCHelpMan getnodeaddresses()\n {\n-            RPCHelpMan{\"getnodeaddresses\",\n+    return RPCHelpMan{\"getnodeaddresses\",\n                 \"\\nReturn known addresses which can potentially be used to find new nodes in the network\\n\",\n                 {\n                     {\"count\", RPCArg::Type::NUM, /* default */ \"1\", \"The maximum number of addresses to return. Specify 0 to return all known addresses.\"},\n@@ -753,7 +782,8 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getnodeaddresses\", \"8\")\n             + HelpExampleRpc(\"getnodeaddresses\", \"8\")\n                 },\n-            }.Check(request);\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     NodeContext& node = EnsureNodeContext(request.context);\n     if (!node.connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -779,11 +809,13 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n         ret.push_back(obj);\n     }\n     return ret;\n+},\n+    };\n }\n \n-static UniValue addpeeraddress(const JSONRPCRequest& request)\n+static RPCHelpMan addpeeraddress()\n {\n-    RPCHelpMan{\"addpeeraddress\",\n+    return RPCHelpMan{\"addpeeraddress\",\n         \"\\nAdd the address of a potential peer to the address manager. This RPC is for testing only.\\n\",\n         {\n             {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP address of the peer\"},\n@@ -799,8 +831,8 @@ static UniValue addpeeraddress(const JSONRPCRequest& request)\n             HelpExampleCli(\"addpeeraddress\", \"\\\"1.2.3.4\\\" 8333\")\n     + HelpExampleRpc(\"addpeeraddress\", \"\\\"1.2.3.4\\\", 8333\")\n         },\n-    }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     NodeContext& node = EnsureNodeContext(request.context);\n     if (!node.connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -827,6 +859,8 @@ static UniValue addpeeraddress(const JSONRPCRequest& request)\n \n     obj.pushKV(\"success\", true);\n     return obj;\n+},\n+    };\n }\n \n void RegisterNetRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "2217bc2875586779ad61a06a5a868806a106d9ec",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 288,
        "deletions": 195,
        "changes": 483,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa14f57fbc3c1fa2b9eea5df687f0fb36d452bd5/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa14f57fbc3c1fa2b9eea5df687f0fb36d452bd5/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa14f57fbc3c1fa2b9eea5df687f0fb36d452bd5",
        "patch": "@@ -231,9 +231,9 @@ static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const U\n     }\n }\n \n-static UniValue getnewaddress(const JSONRPCRequest& request)\n+static RPCHelpMan getnewaddress()\n {\n-            RPCHelpMan{\"getnewaddress\",\n+    return RPCHelpMan{\"getnewaddress\",\n                 \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n                 \"If 'label' is specified, it is added to the address book \\n\"\n                 \"so payments received with the address will be associated with 'label'.\\n\",\n@@ -248,8 +248,8 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getnewaddress\", \"\")\n             + HelpExampleRpc(\"getnewaddress\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -279,11 +279,13 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n     }\n \n     return EncodeDestination(dest);\n+},\n+    };\n }\n \n-static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n+static RPCHelpMan getrawchangeaddress()\n {\n-            RPCHelpMan{\"getrawchangeaddress\",\n+    return RPCHelpMan{\"getrawchangeaddress\",\n                 \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n                 \"This is for use with raw transactions, NOT normal use.\\n\",\n                 {\n@@ -296,8 +298,8 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getrawchangeaddress\", \"\")\n             + HelpExampleRpc(\"getrawchangeaddress\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -321,12 +323,14 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, error);\n     }\n     return EncodeDestination(dest);\n+},\n+    };\n }\n \n \n-static UniValue setlabel(const JSONRPCRequest& request)\n+static RPCHelpMan setlabel()\n {\n-            RPCHelpMan{\"setlabel\",\n+    return RPCHelpMan{\"setlabel\",\n                 \"\\nSets the label associated with the given address.\\n\",\n                 {\n                     {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to be associated with a label.\"},\n@@ -337,8 +341,8 @@ static UniValue setlabel(const JSONRPCRequest& request)\n                     HelpExampleCli(\"setlabel\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" \\\"tabby\\\"\")\n             + HelpExampleRpc(\"setlabel\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"tabby\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -359,6 +363,8 @@ static UniValue setlabel(const JSONRPCRequest& request)\n     }\n \n     return NullUniValue;\n+},\n+    };\n }\n \n void ParseRecipients(const UniValue& address_amounts, const UniValue& subtract_fee_outputs, std::vector<CRecipient> &recipients) {\n@@ -411,9 +417,9 @@ UniValue SendMoney(CWallet* const pwallet, const CCoinControl &coin_control, std\n     return tx->GetHash().GetHex();\n }\n \n-static UniValue sendtoaddress(const JSONRPCRequest& request)\n+static RPCHelpMan sendtoaddress()\n {\n-            RPCHelpMan{\"sendtoaddress\",\n+    return RPCHelpMan{\"sendtoaddress\",\n                 \"\\nSend an amount to a given address.\" +\n         HELP_REQUIRING_PASSPHRASE,\n                 {\n@@ -444,8 +450,8 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n             + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"\\\" \\\"\\\" false true 2 \" + (CURRENCY_ATOM + \"/B\"))\n             + HelpExampleRpc(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -493,11 +499,13 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n     ParseRecipients(address_amounts, subtractFeeFromAmount, recipients);\n \n     return SendMoney(pwallet, coin_control, recipients, mapValue);\n+},\n+    };\n }\n \n-static UniValue listaddressgroupings(const JSONRPCRequest& request)\n+static RPCHelpMan listaddressgroupings()\n {\n-            RPCHelpMan{\"listaddressgroupings\",\n+    return RPCHelpMan{\"listaddressgroupings\",\n                 \"\\nLists groups of addresses which have had their common ownership\\n\"\n                 \"made public by common use as inputs or as the resulting change\\n\"\n                 \"in past transactions\\n\",\n@@ -520,8 +528,8 @@ static UniValue listaddressgroupings(const JSONRPCRequest& request)\n                     HelpExampleCli(\"listaddressgroupings\", \"\")\n             + HelpExampleRpc(\"listaddressgroupings\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -552,11 +560,13 @@ static UniValue listaddressgroupings(const JSONRPCRequest& request)\n         jsonGroupings.push_back(jsonGrouping);\n     }\n     return jsonGroupings;\n+},\n+    };\n }\n \n-static UniValue signmessage(const JSONRPCRequest& request)\n+static RPCHelpMan signmessage()\n {\n-            RPCHelpMan{\"signmessage\",\n+    return RPCHelpMan{\"signmessage\",\n                 \"\\nSign a message with the private key of an address\" +\n         HELP_REQUIRING_PASSPHRASE,\n                 {\n@@ -576,8 +586,8 @@ static UniValue signmessage(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"my message\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -608,6 +618,8 @@ static UniValue signmessage(const JSONRPCRequest& request)\n     }\n \n     return signature;\n+},\n+    };\n }\n \n static CAmount GetReceived(const CWallet& wallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n@@ -656,9 +668,9 @@ static CAmount GetReceived(const CWallet& wallet, const UniValue& params, bool b\n }\n \n \n-static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n+static RPCHelpMan getreceivedbyaddress()\n {\n-            RPCHelpMan{\"getreceivedbyaddress\",\n+    return RPCHelpMan{\"getreceivedbyaddress\",\n                 \"\\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\\n\",\n                 {\n                     {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address for transactions.\"},\n@@ -677,8 +689,8 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", 6\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -690,12 +702,14 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     LOCK(pwallet->cs_wallet);\n \n     return ValueFromAmount(GetReceived(*pwallet, request.params, /* by_label */ false));\n+},\n+    };\n }\n \n \n-static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n+static RPCHelpMan getreceivedbylabel()\n {\n-            RPCHelpMan{\"getreceivedbylabel\",\n+    return RPCHelpMan{\"getreceivedbylabel\",\n                 \"\\nReturns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.\\n\",\n                 {\n                     {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The selected label, may be the default label using \\\"\\\".\"},\n@@ -714,8 +728,8 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"getreceivedbylabel\", \"\\\"tabby\\\", 6\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -727,12 +741,14 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n     LOCK(pwallet->cs_wallet);\n \n     return ValueFromAmount(GetReceived(*pwallet, request.params, /* by_label */ true));\n+},\n+    };\n }\n \n \n-static UniValue getbalance(const JSONRPCRequest& request)\n+static RPCHelpMan getbalance()\n {\n-            RPCHelpMan{\"getbalance\",\n+    return RPCHelpMan{\"getbalance\",\n                 \"\\nReturns the total available balance.\\n\"\n                 \"The available balance is what the wallet considers currently spendable, and is\\n\"\n                 \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\",\n@@ -753,8 +769,8 @@ static UniValue getbalance(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -782,17 +798,19 @@ static UniValue getbalance(const JSONRPCRequest& request)\n     const auto bal = pwallet->GetBalance(min_depth, avoid_reuse);\n \n     return ValueFromAmount(bal.m_mine_trusted + (include_watchonly ? bal.m_watchonly_trusted : 0));\n+},\n+    };\n }\n \n-static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n+static RPCHelpMan getunconfirmedbalance()\n {\n-            RPCHelpMan{\"getunconfirmedbalance\",\n+    return RPCHelpMan{\"getunconfirmedbalance\",\n                 \"DEPRECATED\\nIdentical to getbalances().mine.untrusted_pending\\n\",\n                 {},\n                 RPCResult{RPCResult::Type::NUM, \"\", \"The balance\"},\n                 RPCExamples{\"\"},\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -804,12 +822,14 @@ static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n     LOCK(pwallet->cs_wallet);\n \n     return ValueFromAmount(pwallet->GetBalance().m_mine_untrusted_pending);\n+},\n+    };\n }\n \n \n-static UniValue sendmany(const JSONRPCRequest& request)\n+static RPCHelpMan sendmany()\n {\n-    RPCHelpMan{\"sendmany\",\n+    return RPCHelpMan{\"sendmany\",\n                 \"\\nSend multiple times. Amounts are double-precision floating point numbers.\" +\n         HELP_REQUIRING_PASSPHRASE,\n                 {\n@@ -848,8 +868,8 @@ static UniValue sendmany(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", {\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\":0.01,\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\":0.02}, 6, \\\"testing\\\"\")\n                 },\n-    }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -884,11 +904,13 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     ParseRecipients(sendTo, subtractFeeFromAmount, recipients);\n \n     return SendMoney(pwallet, coin_control, recipients, std::move(mapValue));\n+},\n+    };\n }\n \n-static UniValue addmultisigaddress(const JSONRPCRequest& request)\n+static RPCHelpMan addmultisigaddress()\n {\n-            RPCHelpMan{\"addmultisigaddress\",\n+    return RPCHelpMan{\"addmultisigaddress\",\n                 \"\\nAdd an nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\\n\"\n                 \"Each key is a Bitcoin address or hex-encoded public key.\\n\"\n                 \"This functionality is only intended for use with non-watchonly addresses.\\n\"\n@@ -918,8 +940,8 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"addmultisigaddress\", \"2, \\\"[\\\\\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\\\\\",\\\\\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\\\\\"]\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -965,6 +987,8 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n     result.pushKV(\"redeemScript\", HexStr(inner));\n     result.pushKV(\"descriptor\", descriptor->ToString());\n     return result;\n+},\n+    };\n }\n \n struct tallyitem\n@@ -1125,9 +1149,9 @@ static UniValue ListReceived(const CWallet* const pwallet, const UniValue& param\n     return ret;\n }\n \n-static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n+static RPCHelpMan listreceivedbyaddress()\n {\n-            RPCHelpMan{\"listreceivedbyaddress\",\n+    return RPCHelpMan{\"listreceivedbyaddress\",\n                 \"\\nList balances by receiving address.\\n\",\n                 {\n                     {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n@@ -1158,8 +1182,8 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true\")\n             + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true, \\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -1171,11 +1195,13 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n     LOCK(pwallet->cs_wallet);\n \n     return ListReceived(pwallet, request.params, false);\n+},\n+    };\n }\n \n-static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n+static RPCHelpMan listreceivedbylabel()\n {\n-            RPCHelpMan{\"listreceivedbylabel\",\n+    return RPCHelpMan{\"listreceivedbylabel\",\n                 \"\\nList received transactions by label.\\n\",\n                 {\n                     {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n@@ -1199,8 +1225,8 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n             + HelpExampleCli(\"listreceivedbylabel\", \"6 true\")\n             + HelpExampleRpc(\"listreceivedbylabel\", \"6, true, true\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -1212,6 +1238,8 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n     LOCK(pwallet->cs_wallet);\n \n     return ListReceived(pwallet, request.params, true);\n+},\n+    };\n }\n \n static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n@@ -1331,9 +1359,9 @@ static const std::vector<RPCResult> TransactionDescriptionString()\n                \"may be unknown for unconfirmed transactions not in the mempool\"}};\n }\n \n-UniValue listtransactions(const JSONRPCRequest& request)\n+static RPCHelpMan listtransactions()\n {\n-            RPCHelpMan{\"listtransactions\",\n+    return RPCHelpMan{\"listtransactions\",\n                 \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n                 \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\",\n                 {\n@@ -1378,8 +1406,8 @@ UniValue listtransactions(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -1439,11 +1467,13 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     UniValue result{UniValue::VARR};\n     result.push_backV({ txs.rend() - nFrom - nCount, txs.rend() - nFrom }); // Return oldest to newest\n     return result;\n+},\n+    };\n }\n \n-static UniValue listsinceblock(const JSONRPCRequest& request)\n+static RPCHelpMan listsinceblock()\n {\n-            RPCHelpMan{\"listsinceblock\",\n+    return RPCHelpMan{\"listsinceblock\",\n                 \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\\n\"\n                 \"If \\\"blockhash\\\" is no longer a part of the main chain, transactions from the fork point onward are included.\\n\"\n                 \"Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \\\"removed\\\" array.\\n\",\n@@ -1494,8 +1524,8 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n             + HelpExampleCli(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\" 6\")\n             + HelpExampleRpc(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\", 6\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n@@ -1578,11 +1608,13 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     ret.pushKV(\"lastblock\", lastblock.GetHex());\n \n     return ret;\n+},\n+    };\n }\n \n-static UniValue gettransaction(const JSONRPCRequest& request)\n+static RPCHelpMan gettransaction()\n {\n-            RPCHelpMan{\"gettransaction\",\n+    return RPCHelpMan{\"gettransaction\",\n                 \"\\nGet detailed information about in-wallet transaction <txid>\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction id\"},\n@@ -1634,8 +1666,8 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n             + HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\" false true\")\n             + HelpExampleRpc(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -1688,11 +1720,13 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n     }\n \n     return entry;\n+},\n+    };\n }\n \n-static UniValue abandontransaction(const JSONRPCRequest& request)\n+static RPCHelpMan abandontransaction()\n {\n-            RPCHelpMan{\"abandontransaction\",\n+    return RPCHelpMan{\"abandontransaction\",\n                 \"\\nMark in-wallet transaction <txid> as abandoned\\n\"\n                 \"This will mark this transaction and all its in-wallet descendants as abandoned which will allow\\n\"\n                 \"for their inputs to be respent.  It can be used to replace \\\"stuck\\\" or evicted transactions.\\n\"\n@@ -1706,8 +1740,8 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n                     HelpExampleCli(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n             + HelpExampleRpc(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -1728,12 +1762,14 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n     }\n \n     return NullUniValue;\n+},\n+    };\n }\n \n \n-static UniValue backupwallet(const JSONRPCRequest& request)\n+static RPCHelpMan backupwallet()\n {\n-            RPCHelpMan{\"backupwallet\",\n+    return RPCHelpMan{\"backupwallet\",\n                 \"\\nSafely copies current wallet file to destination, which can be a directory or a path with filename.\\n\",\n                 {\n                     {\"destination\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The destination directory or file\"},\n@@ -1743,8 +1779,8 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n                     HelpExampleCli(\"backupwallet\", \"\\\"backup.dat\\\"\")\n             + HelpExampleRpc(\"backupwallet\", \"\\\"backup.dat\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -1761,12 +1797,14 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n     }\n \n     return NullUniValue;\n+},\n+    };\n }\n \n \n-static UniValue keypoolrefill(const JSONRPCRequest& request)\n+static RPCHelpMan keypoolrefill()\n {\n-            RPCHelpMan{\"keypoolrefill\",\n+    return RPCHelpMan{\"keypoolrefill\",\n                 \"\\nFills the keypool.\"+\n         HELP_REQUIRING_PASSPHRASE,\n                 {\n@@ -1777,8 +1815,8 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n                     HelpExampleCli(\"keypoolrefill\", \"\")\n             + HelpExampleRpc(\"keypoolrefill\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -1805,12 +1843,14 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n     }\n \n     return NullUniValue;\n+},\n+    };\n }\n \n \n-static UniValue walletpassphrase(const JSONRPCRequest& request)\n+static RPCHelpMan walletpassphrase()\n {\n-            RPCHelpMan{\"walletpassphrase\",\n+    return RPCHelpMan{\"walletpassphrase\",\n                 \"\\nStores the wallet decryption key in memory for 'timeout' seconds.\\n\"\n                 \"This is needed prior to performing transactions related to private keys such as sending bitcoins\\n\"\n             \"\\nNote:\\n\"\n@@ -1829,8 +1869,8 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"walletpassphrase\", \"\\\"my pass phrase\\\", 60\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -1899,12 +1939,14 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n     }, nSleepTime);\n \n     return NullUniValue;\n+},\n+    };\n }\n \n \n-static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n+static RPCHelpMan walletpassphrasechange()\n {\n-            RPCHelpMan{\"walletpassphrasechange\",\n+    return RPCHelpMan{\"walletpassphrasechange\",\n                 \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\",\n                 {\n                     {\"oldpassphrase\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The current passphrase\"},\n@@ -1915,8 +1957,8 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n                     HelpExampleCli(\"walletpassphrasechange\", \"\\\"old one\\\" \\\"new one\\\"\")\n             + HelpExampleRpc(\"walletpassphrasechange\", \"\\\"old one\\\", \\\"new one\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -1946,12 +1988,14 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n     }\n \n     return NullUniValue;\n+},\n+    };\n }\n \n \n-static UniValue walletlock(const JSONRPCRequest& request)\n+static RPCHelpMan walletlock()\n {\n-            RPCHelpMan{\"walletlock\",\n+    return RPCHelpMan{\"walletlock\",\n                 \"\\nRemoves the wallet encryption key from memory, locking the wallet.\\n\"\n                 \"After calling this method, you will need to call walletpassphrase again\\n\"\n                 \"before being able to call any methods which require the wallet to be unlocked.\\n\",\n@@ -1967,8 +2011,8 @@ static UniValue walletlock(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"walletlock\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -1983,12 +2027,14 @@ static UniValue walletlock(const JSONRPCRequest& request)\n     pwallet->nRelockTime = 0;\n \n     return NullUniValue;\n+},\n+    };\n }\n \n \n-static UniValue encryptwallet(const JSONRPCRequest& request)\n+static RPCHelpMan encryptwallet()\n {\n-            RPCHelpMan{\"encryptwallet\",\n+    return RPCHelpMan{\"encryptwallet\",\n                 \"\\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\\n\"\n                 \"After this, any calls that interact with private keys such as sending or signing \\n\"\n                 \"will require the passphrase to be set prior the making these calls.\\n\"\n@@ -2010,8 +2056,8 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"encryptwallet\", \"\\\"my pass phrase\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -2041,11 +2087,13 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n     }\n \n     return \"wallet encrypted; The keypool has been flushed and a new HD seed was generated (if you are using HD). You need to make a new backup.\";\n+},\n+    };\n }\n \n-static UniValue lockunspent(const JSONRPCRequest& request)\n+static RPCHelpMan lockunspent()\n {\n-            RPCHelpMan{\"lockunspent\",\n+    return RPCHelpMan{\"lockunspent\",\n                 \"\\nUpdates list of temporarily unspendable outputs.\\n\"\n                 \"Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\\n\"\n                 \"If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.\\n\"\n@@ -2082,8 +2130,8 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"lockunspent\", \"false, \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -2165,11 +2213,13 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n     }\n \n     return true;\n+},\n+    };\n }\n \n-static UniValue listlockunspent(const JSONRPCRequest& request)\n+static RPCHelpMan listlockunspent()\n {\n-            RPCHelpMan{\"listlockunspent\",\n+    return RPCHelpMan{\"listlockunspent\",\n                 \"\\nReturns list of temporarily unspendable outputs.\\n\"\n                 \"See the lockunspent call to lock and unlock transactions for spending.\\n\",\n                 {},\n@@ -2195,8 +2245,8 @@ static UniValue listlockunspent(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"listlockunspent\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -2217,11 +2267,13 @@ static UniValue listlockunspent(const JSONRPCRequest& request)\n     }\n \n     return ret;\n+},\n+    };\n }\n \n-static UniValue settxfee(const JSONRPCRequest& request)\n+static RPCHelpMan settxfee()\n {\n-            RPCHelpMan{\"settxfee\",\n+    return RPCHelpMan{\"settxfee\",\n                 \"\\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\\n\"\n                 \"Can be deactivated by passing 0 as the fee. In that case automatic fee selection will be used by default.\\n\",\n                 {\n@@ -2234,8 +2286,8 @@ static UniValue settxfee(const JSONRPCRequest& request)\n                     HelpExampleCli(\"settxfee\", \"0.00001\")\n             + HelpExampleRpc(\"settxfee\", \"0.00001\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -2257,11 +2309,13 @@ static UniValue settxfee(const JSONRPCRequest& request)\n \n     pwallet->m_pay_tx_fee = tx_fee_rate;\n     return true;\n+},\n+    };\n }\n \n-static UniValue getbalances(const JSONRPCRequest& request)\n+static RPCHelpMan getbalances()\n {\n-    RPCHelpMan{\n+    return RPCHelpMan{\n         \"getbalances\",\n         \"Returns an object with all balances in \" + CURRENCY_UNIT + \".\\n\",\n         {},\n@@ -2286,8 +2340,8 @@ static UniValue getbalances(const JSONRPCRequest& request)\n         RPCExamples{\n             HelpExampleCli(\"getbalances\", \"\") +\n             HelpExampleRpc(\"getbalances\", \"\")},\n-    }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const rpc_wallet = GetWalletForJSONRPCRequest(request);\n     if (!rpc_wallet) return NullUniValue;\n     CWallet& wallet = *rpc_wallet;\n@@ -2322,11 +2376,13 @@ static UniValue getbalances(const JSONRPCRequest& request)\n         balances.pushKV(\"watchonly\", balances_watchonly);\n     }\n     return balances;\n+},\n+    };\n }\n \n-static UniValue getwalletinfo(const JSONRPCRequest& request)\n+static RPCHelpMan getwalletinfo()\n {\n-    RPCHelpMan{\"getwalletinfo\",\n+    return RPCHelpMan{\"getwalletinfo\",\n                 \"Returns an object containing various wallet state info.\\n\",\n                 {},\n                 RPCResult{\n@@ -2359,8 +2415,8 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getwalletinfo\", \"\")\n             + HelpExampleRpc(\"getwalletinfo\", \"\")\n                 },\n-    }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -2414,11 +2470,13 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n     }\n     obj.pushKV(\"descriptors\", pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n     return obj;\n+},\n+    };\n }\n \n-static UniValue listwalletdir(const JSONRPCRequest& request)\n+static RPCHelpMan listwalletdir()\n {\n-            RPCHelpMan{\"listwalletdir\",\n+    return RPCHelpMan{\"listwalletdir\",\n                 \"Returns a list of wallets in the wallet directory.\\n\",\n                 {},\n                 RPCResult{\n@@ -2437,8 +2495,8 @@ static UniValue listwalletdir(const JSONRPCRequest& request)\n                     HelpExampleCli(\"listwalletdir\", \"\")\n             + HelpExampleRpc(\"listwalletdir\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     UniValue wallets(UniValue::VARR);\n     for (const auto& path : ListWalletDir()) {\n         UniValue wallet(UniValue::VOBJ);\n@@ -2449,11 +2507,13 @@ static UniValue listwalletdir(const JSONRPCRequest& request)\n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"wallets\", wallets);\n     return result;\n+},\n+    };\n }\n \n-static UniValue listwallets(const JSONRPCRequest& request)\n+static RPCHelpMan listwallets()\n {\n-            RPCHelpMan{\"listwallets\",\n+    return RPCHelpMan{\"listwallets\",\n                 \"Returns a list of currently loaded wallets.\\n\"\n                 \"For full information on the wallet, use \\\"getwalletinfo\\\"\\n\",\n                 {},\n@@ -2467,8 +2527,8 @@ static UniValue listwallets(const JSONRPCRequest& request)\n                     HelpExampleCli(\"listwallets\", \"\")\n             + HelpExampleRpc(\"listwallets\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     UniValue obj(UniValue::VARR);\n \n     for (const std::shared_ptr<CWallet>& wallet : GetWallets()) {\n@@ -2477,11 +2537,13 @@ static UniValue listwallets(const JSONRPCRequest& request)\n     }\n \n     return obj;\n+},\n+    };\n }\n \n-static UniValue loadwallet(const JSONRPCRequest& request)\n+static RPCHelpMan loadwallet()\n {\n-            RPCHelpMan{\"loadwallet\",\n+    return RPCHelpMan{\"loadwallet\",\n                 \"\\nLoads a wallet from a wallet file or directory.\"\n                 \"\\nNote that all wallet command-line options used when starting bitcoind will be\"\n                 \"\\napplied to the new wallet (eg -rescan, etc).\\n\",\n@@ -2500,8 +2562,8 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n                     HelpExampleCli(\"loadwallet\", \"\\\"test.dat\\\"\")\n             + HelpExampleRpc(\"loadwallet\", \"\\\"test.dat\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     WalletContext& context = EnsureWalletContext(request.context);\n     const std::string name(request.params[0].get_str());\n \n@@ -2524,15 +2586,18 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n     obj.pushKV(\"warning\", Join(warnings, Untranslated(\"\\n\")).original);\n \n     return obj;\n+},\n+    };\n }\n \n-static UniValue setwalletflag(const JSONRPCRequest& request)\n+static RPCHelpMan setwalletflag()\n {\n             std::string flags = \"\";\n             for (auto& it : WALLET_FLAG_MAP)\n                 if (it.second & MUTABLE_WALLET_FLAGS)\n                     flags += (flags == \"\" ? \"\" : \", \") + it.first;\n-            RPCHelpMan{\"setwalletflag\",\n+\n+    return RPCHelpMan{\"setwalletflag\",\n                 \"\\nChange the state of the given wallet flag for a wallet.\\n\",\n                 {\n                     {\"flag\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The name of the flag to change. Current available flags: \" + flags},\n@@ -2550,8 +2615,8 @@ static UniValue setwalletflag(const JSONRPCRequest& request)\n                     HelpExampleCli(\"setwalletflag\", \"avoid_reuse\")\n                   + HelpExampleRpc(\"setwalletflag\", \"\\\"avoid_reuse\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -2589,11 +2654,13 @@ static UniValue setwalletflag(const JSONRPCRequest& request)\n     }\n \n     return res;\n+},\n+    };\n }\n \n-static UniValue createwallet(const JSONRPCRequest& request)\n+static RPCHelpMan createwallet()\n {\n-    RPCHelpMan{\n+    return RPCHelpMan{\n         \"createwallet\",\n         \"\\nCreates and loads a new wallet.\\n\",\n         {\n@@ -2616,8 +2683,8 @@ static UniValue createwallet(const JSONRPCRequest& request)\n             HelpExampleCli(\"createwallet\", \"\\\"testwallet\\\"\")\n             + HelpExampleRpc(\"createwallet\", \"\\\"testwallet\\\"\")\n         },\n-    }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     WalletContext& context = EnsureWalletContext(request.context);\n     uint64_t flags = 0;\n     if (!request.params[1].isNull() && request.params[1].get_bool()) {\n@@ -2664,11 +2731,13 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     obj.pushKV(\"warning\", Join(warnings, Untranslated(\"\\n\")).original);\n \n     return obj;\n+},\n+    };\n }\n \n-static UniValue unloadwallet(const JSONRPCRequest& request)\n+static RPCHelpMan unloadwallet()\n {\n-            RPCHelpMan{\"unloadwallet\",\n+    return RPCHelpMan{\"unloadwallet\",\n                 \"Unloads the wallet referenced by the request endpoint otherwise unloads the wallet specified in the argument.\\n\"\n                 \"Specifying the wallet name on a wallet endpoint is invalid.\",\n                 {\n@@ -2682,8 +2751,8 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n                     HelpExampleCli(\"unloadwallet\", \"wallet_name\")\n             + HelpExampleRpc(\"unloadwallet\", \"wallet_name\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::string wallet_name;\n     if (GetWalletNameFromJSONRPCRequest(request, wallet_name)) {\n         if (!request.params[0].isNull()) {\n@@ -2712,11 +2781,13 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"warning\", Join(warnings, Untranslated(\"\\n\")).original);\n     return result;\n+},\n+    };\n }\n \n-static UniValue listunspent(const JSONRPCRequest& request)\n+static RPCHelpMan listunspent()\n {\n-    RPCHelpMan{\n+    return RPCHelpMan{\n                 \"listunspent\",\n                 \"\\nReturns array of unspent transaction outputs\\n\"\n                 \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n@@ -2771,8 +2842,8 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             + HelpExampleCli(\"listunspent\", \"6 9999999 '[]' true '{ \\\"minimumAmount\\\": 0.005 }'\")\n             + HelpExampleRpc(\"listunspent\", \"6, 9999999, [] , true, { \\\"minimumAmount\\\": 0.005 } \")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -2933,6 +3004,8 @@ static UniValue listunspent(const JSONRPCRequest& request)\n     }\n \n     return results;\n+},\n+    };\n }\n \n void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, UniValue options, CCoinControl& coinControl)\n@@ -3064,9 +3137,9 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n     }\n }\n \n-static UniValue fundrawtransaction(const JSONRPCRequest& request)\n+static RPCHelpMan fundrawtransaction()\n {\n-    RPCHelpMan{\"fundrawtransaction\",\n+    return RPCHelpMan{\"fundrawtransaction\",\n                 \"\\nIf the transaction has no inputs, they will be automatically selected to meet its out value.\\n\"\n                 \"It will add at most one change output to the outputs.\\n\"\n                 \"No existing outputs will be modified unless \\\"subtractFeeFromOutputs\\\" is specified.\\n\"\n@@ -3132,8 +3205,8 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"\\nSend the transaction\\n\"\n                             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n                                 },\n-    }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -3161,11 +3234,13 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n     result.pushKV(\"changepos\", change_position);\n \n     return result;\n+},\n+    };\n }\n \n-UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n+RPCHelpMan signrawtransactionwithwallet()\n {\n-            RPCHelpMan{\"signrawtransactionwithwallet\",\n+    return RPCHelpMan{\"signrawtransactionwithwallet\",\n                 \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n                 \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n                 \"this transaction depends on but may not yet be in the block chain.\" +\n@@ -3216,8 +3291,8 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n                     HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n             + HelpExampleRpc(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -3252,13 +3327,15 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n     UniValue result(UniValue::VOBJ);\n     SignTransactionResultToJSON(mtx, complete, coins, input_errors, result);\n     return result;\n+},\n+    };\n }\n \n-static UniValue bumpfee(const JSONRPCRequest& request)\n+static RPCHelpMan bumpfee_helper(std::string method_name)\n {\n-    bool want_psbt = request.strMethod == \"psbtbumpfee\";\n+    bool want_psbt = method_name == \"psbtbumpfee\";\n \n-    RPCHelpMan{request.strMethod,\n+    return RPCHelpMan{method_name,\n         \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n         + std::string(want_psbt ? \"Returns a PSBT instead of creating and signing a new transaction.\\n\" : \"\") +\n         \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n@@ -3308,10 +3385,10 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n         },\n         RPCExamples{\n     \"\\nBump the fee, get the new transaction\\'s\" + std::string(want_psbt ? \"psbt\" : \"txid\") + \"\\n\" +\n-            HelpExampleCli(request.strMethod, \"<txid>\")\n+            HelpExampleCli(method_name, \"<txid>\")\n         },\n-    }.Check(request);\n-\n+        [want_psbt](const RPCHelpMan& self, const JSONRPCRequest& request) mutable -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -3438,16 +3515,16 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     result.pushKV(\"errors\", result_errors);\n \n     return result;\n+},\n+    };\n }\n \n-static UniValue psbtbumpfee(const JSONRPCRequest& request)\n-{\n-    return bumpfee(request);\n-}\n+static RPCHelpMan bumpfee() { return bumpfee_helper(\"bumpfee\"); }\n+static RPCHelpMan psbtbumpfee() { return bumpfee_helper(\"psbtbumpfee\"); }\n \n-UniValue rescanblockchain(const JSONRPCRequest& request)\n+static RPCHelpMan rescanblockchain()\n {\n-            RPCHelpMan{\"rescanblockchain\",\n+    return RPCHelpMan{\"rescanblockchain\",\n                 \"\\nRescan the local blockchain for wallet related transactions.\\n\"\n                 \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n                 {\n@@ -3465,8 +3542,8 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n                     HelpExampleCli(\"rescanblockchain\", \"100000 120000\")\n             + HelpExampleRpc(\"rescanblockchain\", \"100000, 120000\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -3522,6 +3599,8 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     response.pushKV(\"start_height\", start_height);\n     response.pushKV(\"stop_height\", result.last_scanned_height ? *result.last_scanned_height : UniValue());\n     return response;\n+},\n+    };\n }\n \n class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n@@ -3641,9 +3720,9 @@ static UniValue AddressBookDataToJSON(const CAddressBookData& data, const bool v\n     return ret;\n }\n \n-UniValue getaddressinfo(const JSONRPCRequest& request)\n+RPCHelpMan getaddressinfo()\n {\n-            RPCHelpMan{\"getaddressinfo\",\n+    return RPCHelpMan{\"getaddressinfo\",\n                 \"\\nReturn information about the given bitcoin address.\\n\"\n                 \"Some of the information will only be present if the address is in the active wallet.\\n\",\n                 {\n@@ -3694,8 +3773,8 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getaddressinfo\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"\") +\n                     HelpExampleRpc(\"getaddressinfo\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -3759,11 +3838,13 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     ret.pushKV(\"labels\", std::move(labels));\n \n     return ret;\n+},\n+    };\n }\n \n-static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+static RPCHelpMan getaddressesbylabel()\n {\n-            RPCHelpMan{\"getaddressesbylabel\",\n+    return RPCHelpMan{\"getaddressesbylabel\",\n                 \"\\nReturns the list of addresses assigned the specified label.\\n\",\n                 {\n                     {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The label.\"},\n@@ -3781,8 +3862,8 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n             + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -3816,11 +3897,13 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n     }\n \n     return ret;\n+},\n+    };\n }\n \n-static UniValue listlabels(const JSONRPCRequest& request)\n+static RPCHelpMan listlabels()\n {\n-            RPCHelpMan{\"listlabels\",\n+    return RPCHelpMan{\"listlabels\",\n                 \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\",\n                 {\n                     {\"purpose\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\"},\n@@ -3841,8 +3924,8 @@ static UniValue listlabels(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"listlabels\", \"receive\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -3869,6 +3952,8 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     }\n \n     return ret;\n+},\n+    };\n }\n \n static RPCHelpMan send()\n@@ -4050,9 +4135,9 @@ static RPCHelpMan send()\n     };\n }\n \n-UniValue sethdseed(const JSONRPCRequest& request)\n+static RPCHelpMan sethdseed()\n {\n-            RPCHelpMan{\"sethdseed\",\n+    return RPCHelpMan{\"sethdseed\",\n                 \"\\nSet or generate a new HD wallet seed. Non-HD wallets will not be upgraded to being a HD wallet. Wallets that are already\\n\"\n                 \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.\\n\"\n                 \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\" +\n@@ -4072,8 +4157,8 @@ UniValue sethdseed(const JSONRPCRequest& request)\n             + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n             + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -4118,11 +4203,13 @@ UniValue sethdseed(const JSONRPCRequest& request)\n     if (flush_key_pool) spk_man.NewKeyPool();\n \n     return NullUniValue;\n+},\n+    };\n }\n \n-UniValue walletprocesspsbt(const JSONRPCRequest& request)\n+static RPCHelpMan walletprocesspsbt()\n {\n-            RPCHelpMan{\"walletprocesspsbt\",\n+    return RPCHelpMan{\"walletprocesspsbt\",\n                 \"\\nUpdate a PSBT with input information from our wallet and then sign inputs\\n\"\n                 \"that we can sign for.\" +\n         HELP_REQUIRING_PASSPHRASE,\n@@ -4148,8 +4235,8 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"walletprocesspsbt\", \"\\\"psbt\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -4182,11 +4269,13 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n     result.pushKV(\"complete\", complete);\n \n     return result;\n+},\n+    };\n }\n \n-UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n+static RPCHelpMan walletcreatefundedpsbt()\n {\n-            RPCHelpMan{\"walletcreatefundedpsbt\",\n+    return RPCHelpMan{\"walletcreatefundedpsbt\",\n                 \"\\nCreates and funds a transaction in the Partially Signed Transaction format.\\n\"\n                 \"Implements the Creator and Updater roles.\\n\",\n                 {\n@@ -4257,8 +4346,8 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             \"\\nCreate a transaction with no inputs\\n\"\n                             + HelpExampleCli(\"walletcreatefundedpsbt\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n                                 },\n-                            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -4307,11 +4396,13 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     result.pushKV(\"fee\", ValueFromAmount(fee));\n     result.pushKV(\"changepos\", change_position);\n     return result;\n+},\n+    };\n }\n \n-static UniValue upgradewallet(const JSONRPCRequest& request)\n+static RPCHelpMan upgradewallet()\n {\n-    RPCHelpMan{\"upgradewallet\",\n+    return RPCHelpMan{\"upgradewallet\",\n         \"\\nUpgrade the wallet. Upgrades to the latest version if no version number is specified\\n\"\n         \"New keys may be generated and a new wallet backup will need to be made.\",\n         {\n@@ -4321,9 +4412,9 @@ static UniValue upgradewallet(const JSONRPCRequest& request)\n         RPCExamples{\n             HelpExampleCli(\"upgradewallet\", \"169900\")\n             + HelpExampleRpc(\"upgradewallet\", \"169900\")\n-        }\n-    }.Check(request);\n-\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -4343,6 +4434,8 @@ static UniValue upgradewallet(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n     }\n     return error.original;\n+},\n+    };\n }\n \n RPCHelpMan abortrescan();"
      },
      {
        "sha": "184a16e91ddbf4a68ee98a4ab7ea6711b9674250",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa14f57fbc3c1fa2b9eea5df687f0fb36d452bd5/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa14f57fbc3c1fa2b9eea5df687f0fb36d452bd5/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=fa14f57fbc3c1fa2b9eea5df687f0fb36d452bd5",
        "patch": "@@ -34,6 +34,6 @@ void EnsureWalletIsUnlocked(const CWallet*);\n WalletContext& EnsureWalletContext(const util::Ref& context);\n LegacyScriptPubKeyMan& EnsureLegacyScriptPubKeyMan(CWallet& wallet, bool also_create = false);\n \n-UniValue getaddressinfo(const JSONRPCRequest& request);\n-UniValue signrawtransactionwithwallet(const JSONRPCRequest& request);\n+RPCHelpMan getaddressinfo();\n+RPCHelpMan signrawtransactionwithwallet();\n #endif //BITCOIN_WALLET_RPCWALLET_H"
      }
    ]
  }
]