[
  {
    "sha": "576b5efe93cdcd544c205f4c4f8f1696e6e907ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzZiNWVmZTkzY2RjZDU0NGMyMDVmNGM0ZjhmMTY5NmU2ZTkwN2Vl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-08-30T19:42:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-08-31T15:23:48Z"
      },
      "message": "Fix RPC console parser to handle escaped arguments more like bash\n\n- Fix issue #1750",
      "tree": {
        "sha": "64742f77c908b479fa21a6ebb9d7d923926e3377",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64742f77c908b479fa21a6ebb9d7d923926e3377"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/576b5efe93cdcd544c205f4c4f8f1696e6e907ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/576b5efe93cdcd544c205f4c4f8f1696e6e907ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/576b5efe93cdcd544c205f4c4f8f1696e6e907ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/576b5efe93cdcd544c205f4c4f8f1696e6e907ee/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a65b53bf06e4fb1988e054041f30cbaecb11cc23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a65b53bf06e4fb1988e054041f30cbaecb11cc23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a65b53bf06e4fb1988e054041f30cbaecb11cc23"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 98,
      "deletions": 20
    },
    "files": [
      {
        "sha": "470eba732cb5f2111c9e6418040afe5c7dbed052",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 98,
        "deletions": 20,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/576b5efe93cdcd544c205f4c4f8f1696e6e907ee/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/576b5efe93cdcd544c205f4c4f8f1696e6e907ee/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=576b5efe93cdcd544c205f4c4f8f1696e6e907ee",
        "patch": "@@ -13,7 +13,6 @@\n #include <QUrl>\n #include <QScrollBar>\n \n-#include <boost/tokenizer.hpp>\n #include <openssl/crypto.h>\n \n // TODO: make it possible to filter out categories (esp debug messages when implemented)\n@@ -54,34 +53,113 @@ void RPCExecutor::start()\n    // Nothing to do\n }\n \n-void RPCExecutor::request(const QString &command)\n+/**\n+ * Split shell command line into a list of arguments. Aims to emulate \\c bash and friends.\n+ * \n+ * - Arguments are delimited with whitespace\n+ * - Extra whitespace at the beginning and end and between arguments will be ignored\n+ * - Arguments can be \"double\" or 'single' quoted. Those are treated the same.\n+ * - The backslash '\\' is used as escape character\n+ *   - Outside quotes, any character can be escaped\n+ *   - Within double quotes, only escape double quotes with \\\" and backslashes with \\\\\n+ *   - Within single quotes, only escape single quotes with \\' and backslashes with \\\\\n+ *\n+ * @param[out]   args        Parsed arguments will be appended to this list\n+ * @param[in]    strCommand  Command line to split\n+ */\n+bool parseCommandLine(std::vector<std::string> &args, const std::string &strCommand)\n {\n-    // Parse shell-like command line into separate arguments\n-    std::string strMethod;\n-    std::vector<std::string> strParams;\n-    try {\n-        boost::escaped_list_separator<char> els('\\\\',' ','\\\"');\n-        std::string strCommand = command.toStdString();\n-        boost::tokenizer<boost::escaped_list_separator<char> > tok(strCommand, els);\n-\n-        int n = 0;\n-        for(boost::tokenizer<boost::escaped_list_separator<char> >::iterator beg=tok.begin(); beg!=tok.end();++beg,++n)\n+    enum CmdParseState\n+    {\n+        STATE_EATING_SPACES,\n+        STATE_ARGUMENT,\n+        STATE_SINGLEQUOTED,\n+        STATE_DOUBLEQUOTED,\n+        STATE_ESCAPE_OUTER,\n+        STATE_ESCAPE_SINGLEQUOTED,\n+        STATE_ESCAPE_DOUBLEQUOTED\n+    } state = STATE_EATING_SPACES;\n+    std::string curarg;\n+    foreach(char ch, strCommand)\n+    {\n+        switch(state)\n         {\n-            if(n == 0) // First parameter is the command\n-                strMethod = *beg;\n-            else\n-                strParams.push_back(*beg);\n+        case STATE_ARGUMENT: // After argument\n+        case STATE_EATING_SPACES: // Handle runs of spaces\n+            switch(ch)\n+            {\n+            case '\"': state = STATE_DOUBLEQUOTED; break;\n+            case '\\'': state = STATE_SINGLEQUOTED; break;\n+            case '\\\\': state = STATE_ESCAPE_OUTER; break;\n+            case ' ': case '\\n': case '\\t':\n+                if(state == STATE_ARGUMENT) // Space ends argument\n+                {\n+                    args.push_back(curarg);\n+                    curarg.clear();\n+                }\n+                state = STATE_EATING_SPACES;\n+                break;\n+            default: curarg += ch; state = STATE_ARGUMENT;\n+            }\n+            break;\n+        case STATE_SINGLEQUOTED: // Single-quoted string\n+            switch(ch)\n+            {\n+            case '\\'': state = STATE_ARGUMENT; break;\n+            case '\\\\': state = STATE_ESCAPE_SINGLEQUOTED; break;\n+            default: curarg += ch;\n+            }\n+            break;\n+        case STATE_DOUBLEQUOTED: // Double-quoted string\n+            switch(ch)\n+            {\n+            case '\"': state = STATE_ARGUMENT; break;\n+            case '\\\\': state = STATE_ESCAPE_DOUBLEQUOTED; break;\n+            default: curarg += ch;\n+            }\n+            break;\n+        case STATE_ESCAPE_OUTER: // '\\' outside quotes\n+            curarg += ch; state = STATE_ARGUMENT;\n+            break;\n+        case STATE_ESCAPE_SINGLEQUOTED: // '\\' in single-quoted text\n+            if(ch != '\\'') curarg += '\\\\'; // keep '\\' for everything but the quote\n+            curarg += ch; state = STATE_SINGLEQUOTED;\n+            break;\n+        case STATE_ESCAPE_DOUBLEQUOTED: // '\\' in double-quoted text\n+            if(ch != '\"') curarg += '\\\\'; // keep '\\' for everything but the quote\n+            curarg += ch; state = STATE_DOUBLEQUOTED;\n+            break;\n         }\n     }\n-    catch(boost::escaped_list_error &e)\n+    switch(state) // final state\n     {\n-        emit reply(RPCConsole::CMD_ERROR, QString(\"Parse error\"));\n-        return;\n+    case STATE_EATING_SPACES:\n+        return true;\n+    case STATE_ARGUMENT:\n+        args.push_back(curarg);\n+        return true;\n+    default: // ERROR to end in one of the other states\n+        return false;\n     }\n+}\n \n+void RPCExecutor::request(const QString &command)\n+{\n+    std::vector<std::string> args;\n+    if(!parseCommandLine(args, command.toStdString()))\n+    {\n+        emit reply(RPCConsole::CMD_ERROR, QString(\"Parse error: unbalanced ' or \\\"\"));\n+        return;\n+    }\n+    if(args.empty())\n+        return; // Nothing to do\n     try {\n         std::string strPrint;\n-        json_spirit::Value result = tableRPC.execute(strMethod, RPCConvertValues(strMethod, strParams));\n+        // Convert argument list to JSON objects in method-dependent way,\n+        // and pass it along with the method name to the dispatcher.\n+        json_spirit::Value result = tableRPC.execute(\n+            args[0],\n+            RPCConvertValues(args[0], std::vector<std::string>(args.begin() + 1, args.end())));\n \n         // Format result reply\n         if (result.type() == json_spirit::null_type)"
      }
    ]
  },
  {
    "sha": "b5c1467a7d7d261de5f87d6f26a00cf5ab230dfb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWMxNDY3YTdkN2QyNjFkZTVmODdkNmYyNmEwMGNmNWFiMjMwZGZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-08-31T15:40:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-08-31T15:41:58Z"
      },
      "message": "In RPC console, attempt to format errors\n\nTry to display a nicer message instead of dumping raw JSON object when possible. If the error\nsomehow doesn't have the required 'code' and 'message' fields, fall back to printing raw JSON object.",
      "tree": {
        "sha": "5c8b9337c242909db709c80e55ffaf76ee6d0536",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c8b9337c242909db709c80e55ffaf76ee6d0536"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5c1467a7d7d261de5f87d6f26a00cf5ab230dfb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5c1467a7d7d261de5f87d6f26a00cf5ab230dfb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5c1467a7d7d261de5f87d6f26a00cf5ab230dfb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5c1467a7d7d261de5f87d6f26a00cf5ab230dfb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "576b5efe93cdcd544c205f4c4f8f1696e6e907ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/576b5efe93cdcd544c205f4c4f8f1696e6e907ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/576b5efe93cdcd544c205f4c4f8f1696e6e907ee"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 13,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6e48fbe8daf8efd9f7b63d7394483b8a0f47625a",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5c1467a7d7d261de5f87d6f26a00cf5ab230dfb/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5c1467a7d7d261de5f87d6f26a00cf5ab230dfb/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=b5c1467a7d7d261de5f87d6f26a00cf5ab230dfb",
        "patch": "@@ -153,7 +153,8 @@ void RPCExecutor::request(const QString &command)\n     }\n     if(args.empty())\n         return; // Nothing to do\n-    try {\n+    try\n+    {\n         std::string strPrint;\n         // Convert argument list to JSON objects in method-dependent way,\n         // and pass it along with the method name to the dispatcher.\n@@ -173,7 +174,17 @@ void RPCExecutor::request(const QString &command)\n     }\n     catch (json_spirit::Object& objError)\n     {\n-        emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(write_string(json_spirit::Value(objError), false)));\n+        try // Nice formatting for standard-format error\n+        {\n+            int code = find_value(objError, \"code\").get_int();\n+            std::string message = find_value(objError, \"message\").get_str();\n+            emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(message) + \" (code \" + QString::number(code) + \")\");\n+        }\n+        catch(std::runtime_error &) // raised when converting to invalid type, i.e. missing code or message\n+        {\n+            // Show raw JSON object\n+            emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(write_string(json_spirit::Value(objError), false)));\n+        }\n     }\n     catch (std::exception& e)\n     {"
      }
    ]
  }
]