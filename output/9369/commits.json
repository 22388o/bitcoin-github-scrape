[
  {
    "sha": "c6b82d1db54e21cd7fb1b961e16b4bd547ba5766",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmI4MmQxZGI1NGUyMWNkN2ZiMWI5NjFlMTZiNGJkNTQ3YmE1NzY2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T19:27:27Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-03-03T16:22:44Z"
      },
      "message": "Add tests for CWalletTx::nTimeSmart",
      "tree": {
        "sha": "f48d718f0baea2f65ea7efba4f4c50f7aab8979e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f48d718f0baea2f65ea7efba4f4c50f7aab8979e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6b82d1db54e21cd7fb1b961e16b4bd547ba5766",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6b82d1db54e21cd7fb1b961e16b4bd547ba5766",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6b82d1db54e21cd7fb1b961e16b4bd547ba5766",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6b82d1db54e21cd7fb1b961e16b4bd547ba5766/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53c300fb525ab3e21206d47d8353f5246b4f24d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53c300fb525ab3e21206d47d8353f5246b4f24d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53c300fb525ab3e21206d47d8353f5246b4f24d1"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 53,
      "deletions": 0
    },
    "files": [
      {
        "sha": "19c1e9f29193b2e558958ffeb9937442a3c0536f",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6b82d1db54e21cd7fb1b961e16b4bd547ba5766/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6b82d1db54e21cd7fb1b961e16b4bd547ba5766/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=c6b82d1db54e21cd7fb1b961e16b4bd547ba5766",
        "patch": "@@ -453,4 +453,57 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n     BOOST_CHECK_EQUAL(wtx.GetImmatureCredit(), 50*COIN);\n }\n \n+static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64_t blockTime)\n+{\n+    CMutableTransaction tx;\n+    tx.nLockTime = lockTime;\n+    SetMockTime(mockTime);\n+    CBlockIndex* block = nullptr;\n+    if (blockTime > 0) {\n+        auto inserted = mapBlockIndex.emplace(GetRandHash(), new CBlockIndex);\n+        assert(inserted.second);\n+        const uint256& hash = inserted.first->first;\n+        block = inserted.first->second;\n+        block->nTime = blockTime;\n+        block->phashBlock = &hash;\n+    }\n+\n+    CWalletTx wtx(&wallet, MakeTransactionRef(tx));\n+    if (block) {\n+        wtx.SetMerkleBranch(block, 0);\n+    }\n+    wallet.AddToWallet(wtx);\n+    return wallet.mapWallet.at(wtx.GetHash()).nTimeSmart;\n+}\n+\n+// Simple test to verify assignment of CWalletTx::nSmartTime value. Could be\n+// expanded to cover more corner cases of smart time logic.\n+BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n+{\n+    CWallet wallet;\n+\n+    // New transaction should use clock time if lower than block time.\n+    BOOST_CHECK_EQUAL(AddTx(wallet, 1, 100, 120), 100);\n+\n+    // Test that updating existing transaction does not change smart time.\n+    BOOST_CHECK_EQUAL(AddTx(wallet, 1, 200, 220), 100);\n+\n+    // New transaction should use clock time if there's no block time.\n+    BOOST_CHECK_EQUAL(AddTx(wallet, 2, 300, 0), 300);\n+\n+    // New transaction should use block time if lower than clock time.\n+    BOOST_CHECK_EQUAL(AddTx(wallet, 3, 420, 400), 400);\n+\n+    // New transaction should use latest entry time if higher than\n+    // min(block time, clock time).\n+    BOOST_CHECK_EQUAL(AddTx(wallet, 4, 500, 390), 400);\n+\n+    // If there are future entries, new transaction should use time of the\n+    // newest entry that is no more than 300 seconds ahead of the clock time.\n+    BOOST_CHECK_EQUAL(AddTx(wallet, 5, 50, 600), 300);\n+\n+    // Reset mock time for other tests.\n+    SetMockTime(0);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "1f98abe47b585217f6290fadfe30a5da240d30a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjk4YWJlNDdiNTg1MjE3ZjYyOTBmYWRmZTMwYTVkYTI0MGQzMGE0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-12-16T15:00:26Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-03-03T16:22:44Z"
      },
      "message": "Factor out CWallet::nTimeSmart computation into a method.\n\nNo change in behavior, this change just pulls some code out of\nCWallet::AddToWallet that was making it very long into a separate method.",
      "tree": {
        "sha": "b1f7f3884820f320b0fbb8b0e19343bb105332cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1f7f3884820f320b0fbb8b0e19343bb105332cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f98abe47b585217f6290fadfe30a5da240d30a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f98abe47b585217f6290fadfe30a5da240d30a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f98abe47b585217f6290fadfe30a5da240d30a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f98abe47b585217f6290fadfe30a5da240d30a4/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6b82d1db54e21cd7fb1b961e16b4bd547ba5766",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6b82d1db54e21cd7fb1b961e16b4bd547ba5766",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6b82d1db54e21cd7fb1b961e16b4bd547ba5766"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 51,
      "deletions": 45
    },
    "files": [
      {
        "sha": "aefd1528404d72694aa30d6be714e195b2f0920e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 45,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f98abe47b585217f6290fadfe30a5da240d30a4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f98abe47b585217f6290fadfe30a5da240d30a4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1f98abe47b585217f6290fadfe30a5da240d30a4",
        "patch": "@@ -896,51 +896,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n         wtx.nTimeReceived = GetAdjustedTime();\n         wtx.nOrderPos = IncOrderPosNext(&walletdb);\n         wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n-\n-        wtx.nTimeSmart = wtx.nTimeReceived;\n-        if (!wtxIn.hashUnset())\n-        {\n-            if (mapBlockIndex.count(wtxIn.hashBlock))\n-            {\n-                int64_t latestNow = wtx.nTimeReceived;\n-                int64_t latestEntry = 0;\n-                {\n-                    // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n-                    int64_t latestTolerated = latestNow + 300;\n-                    const TxItems & txOrdered = wtxOrdered;\n-                    for (TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n-                    {\n-                        CWalletTx *const pwtx = (*it).second.first;\n-                        if (pwtx == &wtx)\n-                            continue;\n-                        CAccountingEntry *const pacentry = (*it).second.second;\n-                        int64_t nSmartTime;\n-                        if (pwtx)\n-                        {\n-                            nSmartTime = pwtx->nTimeSmart;\n-                            if (!nSmartTime)\n-                                nSmartTime = pwtx->nTimeReceived;\n-                        }\n-                        else\n-                            nSmartTime = pacentry->nTime;\n-                        if (nSmartTime <= latestTolerated)\n-                        {\n-                            latestEntry = nSmartTime;\n-                            if (nSmartTime > latestNow)\n-                                latestNow = nSmartTime;\n-                            break;\n-                        }\n-                    }\n-                }\n-\n-                int64_t blocktime = mapBlockIndex[wtxIn.hashBlock]->GetBlockTime();\n-                wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n-            }\n-            else\n-                LogPrintf(\"AddToWallet(): found %s in block %s not in index\\n\",\n-                         wtxIn.GetHash().ToString(),\n-                         wtxIn.hashBlock.ToString());\n-        }\n+        wtx.nTimeSmart = ComputeTimeSmart(wtx);\n         AddToSpends(hash);\n     }\n \n@@ -3498,6 +3454,55 @@ void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) c\n         mapKeyBirth[it->first] = it->second->GetBlockTime() - 7200; // block times can be 2h off\n }\n \n+unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n+{\n+    unsigned int nTimeSmart = wtx.nTimeReceived;\n+    if (!wtx.hashUnset())\n+    {\n+        if (mapBlockIndex.count(wtx.hashBlock))\n+        {\n+            int64_t latestNow = wtx.nTimeReceived;\n+            int64_t latestEntry = 0;\n+            {\n+                // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n+                int64_t latestTolerated = latestNow + 300;\n+                const TxItems & txOrdered = wtxOrdered;\n+                for (TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+                {\n+                    CWalletTx *const pwtx = (*it).second.first;\n+                    if (pwtx == &wtx)\n+                        continue;\n+                    CAccountingEntry *const pacentry = (*it).second.second;\n+                    int64_t nSmartTime;\n+                    if (pwtx)\n+                    {\n+                        nSmartTime = pwtx->nTimeSmart;\n+                        if (!nSmartTime)\n+                            nSmartTime = pwtx->nTimeReceived;\n+                    }\n+                    else\n+                        nSmartTime = pacentry->nTime;\n+                    if (nSmartTime <= latestTolerated)\n+                    {\n+                        latestEntry = nSmartTime;\n+                        if (nSmartTime > latestNow)\n+                            latestNow = nSmartTime;\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            int64_t blocktime = mapBlockIndex[wtx.hashBlock]->GetBlockTime();\n+            nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n+        }\n+        else\n+            LogPrintf(\"AddToWallet(): found %s in block %s not in index\\n\",\n+                     wtx.GetHash().ToString(),\n+                     wtx.hashBlock.ToString());\n+    }\n+    return nTimeSmart;\n+}\n+\n bool CWallet::AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value)\n {\n     if (boost::get<CNoDestination>(&dest))"
      },
      {
        "sha": "110dedcad82f05c8d653b0a3168dd0f318593cda",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f98abe47b585217f6290fadfe30a5da240d30a4/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f98abe47b585217f6290fadfe30a5da240d30a4/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1f98abe47b585217f6290fadfe30a5da240d30a4",
        "patch": "@@ -776,6 +776,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n     void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const;\n+    unsigned int ComputeTimeSmart(const CWalletTx& wtx) const;\n \n     /** \n      * Increment the next transaction order id"
      }
    ]
  },
  {
    "sha": "6c996c2df7d3bebadda528c6585aa709579d1953",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Yzk5NmMyZGY3ZDNiZWJhZGRhNTI4YzY1ODVhYTcwOTU3OWQxOTUz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-12-19T15:51:45Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-03-03T16:22:44Z"
      },
      "message": "Add documentation describing CWallet::nTimeSmart.\n\nMost of the text comes from the 2012 Luke Dashjr <luke-jr+git@utopios.org>\nc3f95ef commit message.",
      "tree": {
        "sha": "864e0441637ffd50db32a7956b982ccc1af485c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/864e0441637ffd50db32a7956b982ccc1af485c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c996c2df7d3bebadda528c6585aa709579d1953",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c996c2df7d3bebadda528c6585aa709579d1953",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c996c2df7d3bebadda528c6585aa709579d1953",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c996c2df7d3bebadda528c6585aa709579d1953/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f98abe47b585217f6290fadfe30a5da240d30a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f98abe47b585217f6290fadfe30a5da240d30a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f98abe47b585217f6290fadfe30a5da240d30a4"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 30,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dc085d0dfdce35e2884beba6b461e67aeb701cd1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c996c2df7d3bebadda528c6585aa709579d1953/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c996c2df7d3bebadda528c6585aa709579d1953/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6c996c2df7d3bebadda528c6585aa709579d1953",
        "patch": "@@ -3454,6 +3454,27 @@ void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) c\n         mapKeyBirth[it->first] = it->second->GetBlockTime() - 7200; // block times can be 2h off\n }\n \n+/**\n+ * Compute smart timestamp for a transaction being added to the wallet.\n+ *\n+ * Logic:\n+ * - If sending a transaction, assign its timestamp to the current time.\n+ * - If receiving a transaction outside a block, assign its timestamp to the\n+ *   current time.\n+ * - If receiving a block with a future timestamp, assign all its (not already\n+ *   known) transactions' timestamps to the current time.\n+ * - If receiving a block with a past timestamp, before the most recent known\n+ *   transaction (that we care about), assign all its (not already known)\n+ *   transactions' timestamps to the same timestamp as that most-recent-known\n+ *   transaction.\n+ * - If receiving a block with a past timestamp, but after the most recent known\n+ *   transaction, assign all its (not already known) transactions' timestamps to\n+ *   the block time.\n+ *\n+ * For more information see CWalletTx::nTimeSmart,\n+ * https://bitcointalk.org/?topic=54527, or\n+ * https://github.com/bitcoin/bitcoin/pull/1393.\n+ */\n unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n {\n     unsigned int nTimeSmart = wtx.nTimeReceived;"
      },
      {
        "sha": "99f6f43a47c0863c69cb5d25f35a8d73cb690fb6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c996c2df7d3bebadda528c6585aa709579d1953/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c996c2df7d3bebadda528c6585aa709579d1953/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6c996c2df7d3bebadda528c6585aa709579d1953",
        "patch": "@@ -260,6 +260,15 @@ class CWalletTx : public CMerkleTx\n     std::vector<std::pair<std::string, std::string> > vOrderForm;\n     unsigned int fTimeReceivedIsTxTime;\n     unsigned int nTimeReceived; //!< time received by this node\n+    /**\n+     * Stable timestamp that never changes, and reflects the order a transaction\n+     * was added to the wallet. Timestamp is based on the block time for a\n+     * transaction added as part of a block, or else the time when the\n+     * transaction was received if it wasn't part of a block, with the timestamp\n+     * adjusted in both cases so timestamp order matches the order transactions\n+     * were added to the wallet. More details can be found in\n+     * CWallet::ComputeTimeSmart().\n+     */\n     unsigned int nTimeSmart;\n     /**\n      * From me flag is set to 1 for transactions that were created by the wallet"
      }
    ]
  },
  {
    "sha": "630fc549e28cb33eb11df1b4f951339bf8152e4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzBmYzU0OWUyOGNiMzNlYjExZGYxYjRmOTUxMzM5YmY4MTUyZTRm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T20:00:30Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-03-03T16:22:44Z"
      },
      "message": "Clean up braces in CWallet::ComputeTimeSmart",
      "tree": {
        "sha": "a9c112e542dfc50be2e4db80d7239b81a643583e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9c112e542dfc50be2e4db80d7239b81a643583e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/630fc549e28cb33eb11df1b4f951339bf8152e4f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/630fc549e28cb33eb11df1b4f951339bf8152e4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/630fc549e28cb33eb11df1b4f951339bf8152e4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/630fc549e28cb33eb11df1b4f951339bf8152e4f/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c996c2df7d3bebadda528c6585aa709579d1953",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c996c2df7d3bebadda528c6585aa709579d1953",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c996c2df7d3bebadda528c6585aa709579d1953"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 27,
      "deletions": 32
    },
    "files": [
      {
        "sha": "0e95699bbd47340e15ff5c04feb0e06ee9ea459f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 32,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/630fc549e28cb33eb11df1b4f951339bf8152e4f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/630fc549e28cb33eb11df1b4f951339bf8152e4f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=630fc549e28cb33eb11df1b4f951339bf8152e4f",
        "patch": "@@ -3478,48 +3478,43 @@ void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) c\n unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n {\n     unsigned int nTimeSmart = wtx.nTimeReceived;\n-    if (!wtx.hashUnset())\n-    {\n-        if (mapBlockIndex.count(wtx.hashBlock))\n-        {\n+    if (!wtx.hashUnset()) {\n+        if (mapBlockIndex.count(wtx.hashBlock)) {\n             int64_t latestNow = wtx.nTimeReceived;\n             int64_t latestEntry = 0;\n-            {\n-                // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n-                int64_t latestTolerated = latestNow + 300;\n-                const TxItems & txOrdered = wtxOrdered;\n-                for (TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n-                {\n-                    CWalletTx *const pwtx = (*it).second.first;\n-                    if (pwtx == &wtx)\n-                        continue;\n-                    CAccountingEntry *const pacentry = (*it).second.second;\n-                    int64_t nSmartTime;\n-                    if (pwtx)\n-                    {\n-                        nSmartTime = pwtx->nTimeSmart;\n-                        if (!nSmartTime)\n-                            nSmartTime = pwtx->nTimeReceived;\n+\n+            // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n+            int64_t latestTolerated = latestNow + 300;\n+            const TxItems& txOrdered = wtxOrdered;\n+            for (auto it = txOrdered.rbegin(); it != txOrdered.rend(); ++it) {\n+                CWalletTx* const pwtx = it->second.first;\n+                if (pwtx == &wtx) {\n+                    continue;\n+                }\n+                CAccountingEntry* const pacentry = it->second.second;\n+                int64_t nSmartTime;\n+                if (pwtx) {\n+                    nSmartTime = pwtx->nTimeSmart;\n+                    if (!nSmartTime) {\n+                        nSmartTime = pwtx->nTimeReceived;\n                     }\n-                    else\n-                        nSmartTime = pacentry->nTime;\n-                    if (nSmartTime <= latestTolerated)\n-                    {\n-                        latestEntry = nSmartTime;\n-                        if (nSmartTime > latestNow)\n-                            latestNow = nSmartTime;\n-                        break;\n+                } else {\n+                    nSmartTime = pacentry->nTime;\n+                }\n+                if (nSmartTime <= latestTolerated) {\n+                    latestEntry = nSmartTime;\n+                    if (nSmartTime > latestNow) {\n+                        latestNow = nSmartTime;\n                     }\n+                    break;\n                 }\n             }\n \n             int64_t blocktime = mapBlockIndex[wtx.hashBlock]->GetBlockTime();\n             nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n+        } else {\n+            LogPrintf(\"%s: found %s in block %s not in index\\n\", __func__, wtx.GetHash().ToString(), wtx.hashBlock.ToString());\n         }\n-        else\n-            LogPrintf(\"AddToWallet(): found %s in block %s not in index\\n\",\n-                     wtx.GetHash().ToString(),\n-                     wtx.hashBlock.ToString());\n     }\n     return nTimeSmart;\n }"
      }
    ]
  }
]