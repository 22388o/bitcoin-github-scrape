[
  {
    "sha": "fa92e60f38cb109fe5a3c7acfe1017ffebc388cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTkyZTYwZjM4Y2IxMDlmZTVhM2M3YWNmZTEwMTdmZmViYzM4OGNj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-22T06:39:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-28T09:47:05Z"
      },
      "message": "refactor: Make httpserver work queue a unique_ptr",
      "tree": {
        "sha": "5bceec01a444f9b8c46bba89ea456679d392b626",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5bceec01a444f9b8c46bba89ea456679d392b626"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa92e60f38cb109fe5a3c7acfe1017ffebc388cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj1oAwAqPfknHBklu2hhWOlDTvLe4Zuf1AbNlyi6/RP+Yafe1pU14EFrui7a6BV\nFE8AJckA5riYFbWV09nUPFxOLLyDJnpnRLXtjmYBEiP1+yC4HSU5lASiCgKOT7BZ\nqzuI+4EUTnvd0Yb7reVjCoW7RUui7ox1KPnn+7UGObTRIFFrGKL92BcXf4k2caFi\nz/FAEawTif36iwkpJkTKBBOi6Ja0ADDJ1hPV5Gghg28TP9+Rttvy4AzuEUqyD2Ru\n2RsIr3SEAh4AfoZ6rAb3DYDJY2Eyv+sdC9CKuwnLZEnIVorZJ88IOCqFjgGDFCG5\nmy4jI9MOzdNNwIm5JuqpsczmdJnD71b7zO4M7BtumQJxI3NP5lXQ50P0w7BR0FIf\nwWM8C+RGNxqsOWbbghJlZ2Vibvqrbp2oZCPmeUiNahCE4nWbuvuk/JmeSvXP+YXc\nMrmC3tpjPDZWJs6YEkic91mr+Zi1yDmUxNIYEAjavpozSBj+DE2Eo8riAtGxvM1u\ndC6J1UYf\n=bCnb\n-----END PGP SIGNATURE-----",
        "payload": "tree 5bceec01a444f9b8c46bba89ea456679d392b626\nparent 8cdf91735f2bdc55577d84a9915f5920ce23b00a\nauthor MarcoFalke <falke.marco@gmail.com> 1624343982 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1624873625 +0200\n\nrefactor: Make httpserver work queue a unique_ptr\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa92e60f38cb109fe5a3c7acfe1017ffebc388cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa92e60f38cb109fe5a3c7acfe1017ffebc388cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa92e60f38cb109fe5a3c7acfe1017ffebc388cc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cdf91735f2bdc55577d84a9915f5920ce23b00a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cdf91735f2bdc55577d84a9915f5920ce23b00a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cdf91735f2bdc55577d84a9915f5920ce23b00a"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 12,
      "deletions": 14
    },
    "files": [
      {
        "sha": "8741ad9b863520262abb2256f5783fe2e916e49f",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 14,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa92e60f38cb109fe5a3c7acfe1017ffebc388cc/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa92e60f38cb109fe5a3c7acfe1017ffebc388cc/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=fa92e60f38cb109fe5a3c7acfe1017ffebc388cc",
        "patch": "@@ -136,7 +136,7 @@ static struct evhttp* eventHTTP = nullptr;\n //! List of subnets to allow RPC connections from\n static std::vector<CSubNet> rpc_allow_subnets;\n //! Work queue for handling longer requests off the event loop thread\n-static WorkQueue<HTTPClosure>* workQueue = nullptr;\n+static std::unique_ptr<WorkQueue<HTTPClosure>> g_work_queue{nullptr};\n //! Handlers for (sub)paths\n static std::vector<HTTPPathHandler> pathHandlers;\n //! Bound listening sockets\n@@ -256,10 +256,10 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n     // Dispatch to worker thread\n     if (i != iend) {\n         std::unique_ptr<HTTPWorkItem> item(new HTTPWorkItem(std::move(hreq), path, i->handler));\n-        assert(workQueue);\n-        if (workQueue->Enqueue(item.get()))\n+        assert(g_work_queue);\n+        if (g_work_queue->Enqueue(item.get())) {\n             item.release(); /* if true, queue took ownership */\n-        else {\n+        } else {\n             LogPrintf(\"WARNING: request rejected because http work queue depth exceeded, it can be increased with the -rpcworkqueue= setting\\n\");\n             item->req->WriteReply(HTTP_SERVICE_UNAVAILABLE, \"Work queue depth exceeded\");\n         }\n@@ -392,7 +392,7 @@ bool InitHTTPServer()\n     int workQueueDepth = std::max((long)gArgs.GetArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n     LogPrintf(\"HTTP: creating work queue of depth %d\\n\", workQueueDepth);\n \n-    workQueue = new WorkQueue<HTTPClosure>(workQueueDepth);\n+    g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n     // transfer ownership to eventBase/HTTP via .release()\n     eventBase = base_ctr.release();\n     eventHTTP = http_ctr.release();\n@@ -424,7 +424,7 @@ void StartHTTPServer()\n     g_thread_http = std::thread(ThreadHTTP, eventBase);\n \n     for (int i = 0; i < rpcThreads; i++) {\n-        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, workQueue, i);\n+        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, g_work_queue.get(), i);\n     }\n }\n \n@@ -435,16 +435,17 @@ void InterruptHTTPServer()\n         // Reject requests on current connections\n         evhttp_set_gencb(eventHTTP, http_reject_request_cb, nullptr);\n     }\n-    if (workQueue)\n-        workQueue->Interrupt();\n+    if (g_work_queue) {\n+        g_work_queue->Interrupt();\n+    }\n }\n \n void StopHTTPServer()\n {\n     LogPrint(BCLog::HTTP, \"Stopping HTTP server\\n\");\n-    if (workQueue) {\n+    if (g_work_queue) {\n         LogPrint(BCLog::HTTP, \"Waiting for HTTP worker threads to exit\\n\");\n-        for (auto& thread: g_thread_http_workers) {\n+        for (auto& thread : g_thread_http_workers) {\n             thread.join();\n         }\n         g_thread_http_workers.clear();\n@@ -467,10 +468,7 @@ void StopHTTPServer()\n         event_base_free(eventBase);\n         eventBase = nullptr;\n     }\n-    if (workQueue) {\n-        delete workQueue;\n-        workQueue = nullptr;\n-    }\n+    g_work_queue.reset();\n     LogPrint(BCLog::HTTP, \"Stopped HTTP server\\n\");\n }\n "
      }
    ]
  }
]