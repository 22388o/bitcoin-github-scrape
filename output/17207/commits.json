[
  {
    "sha": "9712d876104d5042414dd1abec1c74060340cef4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzEyZDg3NjEwNGQ1MDQyNDE0ZGQxYWJlYzFjNzQwNjAzNDBjZWY0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-10-06T21:52:05Z"
      },
      "committer": {
        "name": "randymcmillan",
        "email": "randy.lee.mcmillan@gmail.com",
        "date": "2019-10-22T03:23:27Z"
      },
      "message": "wallet: Avoid showing GUI popups on RPC errors",
      "tree": {
        "sha": "cfc1123b51db3d8eaca800aae1ae7a68c0d16448",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfc1123b51db3d8eaca800aae1ae7a68c0d16448"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9712d876104d5042414dd1abec1c74060340cef4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hb6ciGhYT5bmSBil5ZsBrsGdXsFAl2udi8ACgkQl5ZsBrsG\ndXuF7g/+J4+etV7OG9bgr7irCE9weONLnUrjCmmg6QgLZLBk0Paew9pcigygolT/\nMwu/FxDotbbUJQv+d3CLEiEvFUNYbNFFtT3jUdjf09w3olp2DxxeDFbyabkj9oe4\nZg2xDZJ21RNocMv4KzbIwKDP6qqy/gV6sOG+wlwhAskYTsL4RuoRm81HpW2ZcxZn\nrarwUC9nd4FEKRT/SQtp2BBe2Q4a1tFrzI6c2xdrQxLLC+4nUH1WOmN/jNuV34ZU\nwDNSZbcQC7Q//N34rBZPaKDFJpoR8nWUJ3fJEq6c8BnI062cuoe6x7my0VY5RFBK\nUBkiT95WVz4bRSBxjvmu6cx+iYWFWyJfhz3Jrl7lhLv16aRCuCccsITL+aUrn0ky\nzowPRPVEkGMhuyg0b3wH0nWrZeHwFR5siQmFy0SKlkz2kO/kCNAI1kC0VzPxy//U\nPyPpn+j3Y2XxzuSWWE5A2Wp+VK4n58G9yo5feY1w7mlluPYF8pSW8DZs8GNc3diT\nQas3E/+TiI4It1uIpjS8zhVfDax/3aaauP7/FLvn529PoKkt5KmZIrs1k7gSQSCH\nLnpJoN00//Ez6NL4R+y5btsgk41obKjOZ2SMjK4ANSnL7p7hloIIkElNw5i7+imH\nld/nR7ZPcbwuU+OzVRWKRmIP/fhrV+sqCBrFY6ycSS0jM3pqF/4=\n=+7Iv\n-----END PGP SIGNATURE-----",
        "payload": "tree cfc1123b51db3d8eaca800aae1ae7a68c0d16448\nparent a75cb122ed66929c2dd844c3348911a88954bfb8\nauthor MarcoFalke <falke.marco@gmail.com> 1570398725 -0400\ncommitter randymcmillan <randy.lee.mcmillan@gmail.com> 1571714607 -0400\n\nwallet: Avoid showing GUI popups on RPC errors\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9712d876104d5042414dd1abec1c74060340cef4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9712d876104d5042414dd1abec1c74060340cef4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9712d876104d5042414dd1abec1c74060340cef4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a75cb122ed66929c2dd844c3348911a88954bfb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a75cb122ed66929c2dd844c3348911a88954bfb8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a75cb122ed66929c2dd844c3348911a88954bfb8"
      }
    ],
    "stats": {
      "total": 188,
      "additions": 91,
      "deletions": 97
    },
    "files": [
      {
        "sha": "0edcb0286dca847af8261e736ddd824d52421c98",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9712d876104d5042414dd1abec1c74060340cef4/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9712d876104d5042414dd1abec1c74060340cef4/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=9712d876104d5042414dd1abec1c74060340cef4",
        "patch": "@@ -70,12 +70,12 @@ std::vector<std::shared_ptr<CWallet>> GetWallets()\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning)\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::vector<std::string>& warnings)\n {\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }\n \n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::shared_ptr<CWallet>& result)\n+WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result)\n {\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }"
      },
      {
        "sha": "227ac9f7b914c22b0c7ce785a33b2c5b5b7341dd",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9712d876104d5042414dd1abec1c74060340cef4/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9712d876104d5042414dd1abec1c74060340cef4/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=9712d876104d5042414dd1abec1c74060340cef4",
        "patch": "@@ -40,8 +40,8 @@ class CWallet;\n fs::path GetWalletDir();\n std::vector<fs::path> ListWalletDir();\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning);\n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::shared_ptr<CWallet>& result);\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::vector<std::string>& warnings);\n+WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result);\n \n namespace interfaces {\n \n@@ -253,14 +253,14 @@ class NodeImpl : public Node\n         }\n         return wallets;\n     }\n-    std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::string& warning) override\n+    std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::vector<std::string>& warnings) override\n     {\n-        return MakeWallet(LoadWallet(*m_interfaces.chain, name, error, warning));\n+        return MakeWallet(LoadWallet(*m_interfaces.chain, name, error, warnings));\n     }\n-    WalletCreationStatus createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::unique_ptr<Wallet>& result) override\n+    WalletCreationStatus createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::unique_ptr<Wallet>& result) override\n     {\n         std::shared_ptr<CWallet> wallet;\n-        WalletCreationStatus status = CreateWallet(*m_interfaces.chain, passphrase, wallet_creation_flags, name, error, warning, wallet);\n+        WalletCreationStatus status = CreateWallet(*m_interfaces.chain, passphrase, wallet_creation_flags, name, error, warnings, wallet);\n         result = MakeWallet(wallet);\n         return status;\n     }"
      },
      {
        "sha": "4ee467014ca90c16c70b72189fea6691c3b3be37",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9712d876104d5042414dd1abec1c74060340cef4/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9712d876104d5042414dd1abec1c74060340cef4/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=9712d876104d5042414dd1abec1c74060340cef4",
        "patch": "@@ -200,10 +200,10 @@ class Node\n     //! Attempts to load a wallet from file or directory.\n     //! The loaded wallet is also notified to handlers previously registered\n     //! with handleLoadWallet.\n-    virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::string& warning) = 0;\n+    virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::vector<std::string>& warnings) = 0;\n \n     //! Create a wallet from file\n-    virtual WalletCreationStatus createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::unique_ptr<Wallet>& result) = 0;\n+    virtual WalletCreationStatus createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::unique_ptr<Wallet>& result) = 0;\n \n     //! Register handler for init messages.\n     using InitMessageFn = std::function<void(const std::string& message)>;"
      },
      {
        "sha": "a7edf442e587610c72c0d13fec8501689995430b",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9712d876104d5042414dd1abec1c74060340cef4/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9712d876104d5042414dd1abec1c74060340cef4/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=9712d876104d5042414dd1abec1c74060340cef4",
        "patch": "@@ -12,6 +12,7 @@\n \n #include <interfaces/handler.h>\n #include <interfaces/node.h>\n+#include <util/string.h>\n \n #include <algorithm>\n \n@@ -226,7 +227,7 @@ void CreateWalletActivity::finish()\n     if (!m_error_message.empty()) {\n         QMessageBox::critical(m_parent_widget, tr(\"Create wallet failed\"), QString::fromStdString(m_error_message));\n     } else if (!m_warning_message.empty()) {\n-        QMessageBox::warning(m_parent_widget, tr(\"Create wallet warning\"), QString::fromStdString(m_warning_message));\n+        QMessageBox::warning(m_parent_widget, tr(\"Create wallet warning\"), QString::fromStdString(Join(m_warning_message, \"\\n\")));\n     }\n \n     if (m_wallet_model) Q_EMIT created(m_wallet_model);\n@@ -267,7 +268,7 @@ void OpenWalletActivity::finish()\n     if (!m_error_message.empty()) {\n         QMessageBox::critical(m_parent_widget, tr(\"Open wallet failed\"), QString::fromStdString(m_error_message));\n     } else if (!m_warning_message.empty()) {\n-        QMessageBox::warning(m_parent_widget, tr(\"Open wallet warning\"), QString::fromStdString(m_warning_message));\n+        QMessageBox::warning(m_parent_widget, tr(\"Open wallet warning\"), QString::fromStdString(Join(m_warning_message, \"\\n\")));\n     }\n \n     if (m_wallet_model) Q_EMIT opened(m_wallet_model);"
      },
      {
        "sha": "e50dd5c7ebc389d8e3a179570d3fd244091a7ca5",
        "filename": "src/qt/walletcontroller.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9712d876104d5042414dd1abec1c74060340cef4/src/qt/walletcontroller.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9712d876104d5042414dd1abec1c74060340cef4/src/qt/walletcontroller.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.h?ref=9712d876104d5042414dd1abec1c74060340cef4",
        "patch": "@@ -100,7 +100,7 @@ class WalletControllerActivity : public QObject\n     QProgressDialog* m_progress_dialog{nullptr};\n     WalletModel* m_wallet_model{nullptr};\n     std::string m_error_message;\n-    std::string m_warning_message;\n+    std::vector<std::string> m_warning_message;\n };\n \n "
      },
      {
        "sha": "e48eee6c2c5e2c1cd6079481b49d5fd45c31431f",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9712d876104d5042414dd1abec1c74060340cef4/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9712d876104d5042414dd1abec1c74060340cef4/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=9712d876104d5042414dd1abec1c74060340cef4",
        "patch": "@@ -412,7 +412,7 @@ bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, std::string& er\n     return true;\n }\n \n-bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::string& warningStr, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc)\n+bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::vector<std::string>& warnings, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc)\n {\n     std::string walletFile;\n     std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, walletFile);\n@@ -424,11 +424,11 @@ bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::string& w\n         BerkeleyEnvironment::VerifyResult r = env->Verify(walletFile, recoverFunc, backup_filename);\n         if (r == BerkeleyEnvironment::VerifyResult::RECOVER_OK)\n         {\n-            warningStr = strprintf(_(\"Warning: Wallet file corrupt, data salvaged!\"\n+            warnings.push_back(strprintf(_(\"Warning: Wallet file corrupt, data salvaged!\"\n                                      \" Original %s saved as %s in %s; if\"\n                                      \" your balance or transactions are incorrect you should\"\n                                      \" restore from a backup.\").translated,\n-                                   walletFile, backup_filename, walletDir);\n+                walletFile, backup_filename, walletDir));\n         }\n         if (r == BerkeleyEnvironment::VerifyResult::RECOVER_FAIL)\n         {"
      },
      {
        "sha": "abec3ae4e2bc56928afbfa24b4b8ac3016cf0567",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9712d876104d5042414dd1abec1c74060340cef4/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9712d876104d5042414dd1abec1c74060340cef4/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=9712d876104d5042414dd1abec1c74060340cef4",
        "patch": "@@ -244,7 +244,7 @@ class BerkeleyBatch\n     /* verifies the database environment */\n     static bool VerifyEnvironment(const fs::path& file_path, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const fs::path& file_path, std::string& warningStr, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc);\n+    static bool VerifyDatabaseFile(const fs::path& file_path, std::vector<std::string>& warnings, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc);\n \n     template <typename K, typename T>\n     bool Read(const K& key, T& value)"
      },
      {
        "sha": "071befaebfde3df792bd89b3900767cc8aa8729b",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9712d876104d5042414dd1abec1c74060340cef4/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9712d876104d5042414dd1abec1c74060340cef4/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=9712d876104d5042414dd1abec1c74060340cef4",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <interfaces/chain.h>\n #include <scheduler.h>\n+#include <util/string.h>\n #include <util/system.h>\n #include <util/translation.h>\n #include <wallet/wallet.h>\n@@ -53,10 +54,10 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n         }\n \n         std::string error_string;\n-        std::string warning_string;\n-        bool verify_success = CWallet::Verify(chain, location, salvage_wallet, error_string, warning_string);\n+        std::vector<std::string> warnings;\n+        bool verify_success = CWallet::Verify(chain, location, salvage_wallet, error_string, warnings);\n         if (!error_string.empty()) chain.initError(error_string);\n-        if (!warning_string.empty()) chain.initWarning(warning_string);\n+        if (!warnings.empty()) chain.initWarning(Join(warnings, \"\\n\"));\n         if (!verify_success) return false;\n     }\n \n@@ -66,8 +67,12 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n bool LoadWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files)\n {\n     for (const std::string& walletFile : wallet_files) {\n-        std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(chain, WalletLocation(walletFile));\n+        std::string error;\n+        std::vector<std::string> warnings;\n+        std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(chain, WalletLocation(walletFile), error, warnings);\n+        if (!warnings.empty()) chain.initWarning(Join(warnings, \"\\n\"));\n         if (!pwallet) {\n+            chain.initError(error);\n             return false;\n         }\n         AddWallet(pwallet);"
      },
      {
        "sha": "e1598669216e4d91405f4a74ae3fd81688cc5a51",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 13,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9712d876104d5042414dd1abec1c74060340cef4/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9712d876104d5042414dd1abec1c74060340cef4/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9712d876104d5042414dd1abec1c74060340cef4",
        "patch": "@@ -21,6 +21,7 @@\n #include <util/bip32.h>\n #include <util/fees.h>\n #include <util/moneystr.h>\n+#include <util/string.h>\n #include <util/system.h>\n #include <util/url.h>\n #include <util/validation.h>\n@@ -2581,13 +2582,14 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n         }\n     }\n \n-    std::string error, warning;\n+    std::string error;\n+    std::vector<std::string> warning;\n     std::shared_ptr<CWallet> const wallet = LoadWallet(*g_rpc_interfaces->chain, location, error, warning);\n     if (!wallet) throw JSONRPCError(RPC_WALLET_ERROR, error);\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());\n-    obj.pushKV(\"warning\", warning);\n+    obj.pushKV(\"warning\", Join(warning, \"\\n\"));\n \n     return obj;\n }\n@@ -2693,12 +2695,12 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     }\n     SecureString passphrase;\n     passphrase.reserve(100);\n-    std::string warning;\n+    std::vector<std::string> warnings;\n     if (!request.params[3].isNull()) {\n         passphrase = request.params[3].get_str().c_str();\n         if (passphrase.empty()) {\n             // Empty string means unencrypted\n-            warning = \"Empty string given as passphrase, wallet will not be encrypted.\";\n+            warnings.emplace_back(\"Empty string given as passphrase, wallet will not be encrypted.\");\n         }\n     }\n \n@@ -2707,9 +2709,8 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     }\n \n     std::string error;\n-    std::string create_warning;\n     std::shared_ptr<CWallet> wallet;\n-    WalletCreationStatus status = CreateWallet(*g_rpc_interfaces->chain, passphrase, flags, request.params[0].get_str(), error, create_warning, wallet);\n+    WalletCreationStatus status = CreateWallet(*g_rpc_interfaces->chain, passphrase, flags, request.params[0].get_str(), error, warnings, wallet);\n     switch (status) {\n         case WalletCreationStatus::CREATION_FAILED:\n             throw JSONRPCError(RPC_WALLET_ERROR, error);\n@@ -2720,15 +2721,9 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         // no default case, so the compiler can warn about missing cases\n     }\n \n-    if (warning.empty()) {\n-        warning = create_warning;\n-    } else if (!warning.empty() && !create_warning.empty()){\n-        warning += \"; \" + create_warning;\n-    }\n-\n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());\n-    obj.pushKV(\"warning\", warning);\n+    obj.pushKV(\"warning\", Join(warnings, \"\\n\"));\n \n     return obj;\n }"
      },
      {
        "sha": "6adcf15167bc8b34308e2681fdbfa93f4d564a94",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 50,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9712d876104d5042414dd1abec1c74060340cef4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9712d876104d5042414dd1abec1c74060340cef4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9712d876104d5042414dd1abec1c74060340cef4",
        "patch": "@@ -138,29 +138,29 @@ void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n     }\n }\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::string& warning)\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::vector<std::string>& warnings)\n {\n-    if (!CWallet::Verify(chain, location, false, error, warning)) {\n+    if (!CWallet::Verify(chain, location, false, error, warnings)) {\n         error = \"Wallet file verification failed: \" + error;\n         return nullptr;\n     }\n \n-    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location);\n+    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location, error, warnings);\n     if (!wallet) {\n-        error = \"Wallet loading failed.\";\n+        error = \"Wallet loading failed: \" + error;\n         return nullptr;\n     }\n     AddWallet(wallet);\n     wallet->postInitProcess();\n     return wallet;\n }\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning)\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::vector<std::string>& warnings)\n {\n-    return LoadWallet(chain, WalletLocation(name), error, warning);\n+    return LoadWallet(chain, WalletLocation(name), error, warnings);\n }\n \n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::shared_ptr<CWallet>& result)\n+WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result)\n {\n     // Indicate that the wallet is actually supposed to be blank and not just blank to make it encrypted\n     bool create_blank = (wallet_creation_flags & WALLET_FLAG_BLANK_WALLET);\n@@ -178,9 +178,8 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n     }\n \n     // Wallet::Verify will check if we're trying to create a wallet with a duplicate name.\n-    std::string wallet_error;\n-    if (!CWallet::Verify(chain, location, false, wallet_error, warning)) {\n-        error = \"Wallet file verification failed: \" + wallet_error;\n+    if (!CWallet::Verify(chain, location, false, error, warnings)) {\n+        error = \"Wallet file verification failed: \" + error;\n         return WalletCreationStatus::CREATION_FAILED;\n     }\n \n@@ -191,9 +190,9 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n     }\n \n     // Make the wallet\n-    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location, wallet_creation_flags);\n+    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location, error, warnings, wallet_creation_flags);\n     if (!wallet) {\n-        error = \"Wallet creation failed\";\n+        error = \"Wallet creation failed: \" + error;\n         return WalletCreationStatus::CREATION_FAILED;\n     }\n \n@@ -4182,7 +4181,7 @@ void CWallet::MarkPreSplitKeys()\n     }\n }\n \n-bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::string& warning_string)\n+bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::vector<std::string>& warnings)\n {\n     // Do some checking on wallet path. It should be either a:\n     //\n@@ -4236,10 +4235,10 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n         }\n     }\n \n-    return WalletBatch::VerifyDatabaseFile(wallet_path, warning_string, error_string);\n+    return WalletBatch::VerifyDatabaseFile(wallet_path, warnings, error_string);\n }\n \n-std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, uint64_t wallet_creation_flags)\n+std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::vector<std::string>& warnings, uint64_t wallet_creation_flags)\n {\n     const std::string walletFile = WalletDataFilePath(location.GetPath()).string();\n \n@@ -4252,7 +4251,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(&chain, location, WalletDatabase::Create(location.GetPath()));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DBErrors::LOAD_OK) {\n-            chain.initError(strprintf(_(\"Error loading %s: Wallet corrupted\").translated, walletFile));\n+            error = strprintf(_(\"Error loading %s: Wallet corrupted\").translated, walletFile);\n             return nullptr;\n         }\n     }\n@@ -4265,29 +4264,28 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     // should be possible to use std::allocate_shared.\n     std::shared_ptr<CWallet> walletInstance(new CWallet(&chain, location, WalletDatabase::Create(location.GetPath())), ReleaseWallet);\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n-    if (nLoadWalletRet != DBErrors::LOAD_OK)\n-    {\n+    if (nLoadWalletRet != DBErrors::LOAD_OK) {\n         if (nLoadWalletRet == DBErrors::CORRUPT) {\n-            chain.initError(strprintf(_(\"Error loading %s: Wallet corrupted\").translated, walletFile));\n+            error = strprintf(_(\"Error loading %s: Wallet corrupted\").translated, walletFile);\n             return nullptr;\n         }\n         else if (nLoadWalletRet == DBErrors::NONCRITICAL_ERROR)\n         {\n-            chain.initWarning(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n+            warnings.push_back(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n                                           \" or address book entries might be missing or incorrect.\").translated,\n                 walletFile));\n         }\n         else if (nLoadWalletRet == DBErrors::TOO_NEW) {\n-            chain.initError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\").translated, walletFile, PACKAGE_NAME));\n+            error = strprintf(_(\"Error loading %s: Wallet requires newer version of %s\").translated, walletFile, PACKAGE_NAME);\n             return nullptr;\n         }\n         else if (nLoadWalletRet == DBErrors::NEED_REWRITE)\n         {\n-            chain.initError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\").translated, PACKAGE_NAME));\n+            error = strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\").translated, PACKAGE_NAME);\n             return nullptr;\n         }\n         else {\n-            chain.initError(strprintf(_(\"Error loading %s\").translated, walletFile));\n+            error = strprintf(_(\"Error loading %s\").translated, walletFile);\n             return nullptr;\n         }\n     }\n@@ -4306,7 +4304,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             walletInstance->WalletLogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n         if (nMaxVersion < walletInstance->GetVersion())\n         {\n-            chain.initError(_(\"Cannot downgrade wallet\").translated);\n+            error = _(\"Cannot downgrade wallet\").translated;\n             return nullptr;\n         }\n         walletInstance->SetMaxVersion(nMaxVersion);\n@@ -4319,7 +4317,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n         int max_version = walletInstance->GetVersion();\n         if (!walletInstance->CanSupportFeature(FEATURE_HD_SPLIT) && max_version >= FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n-            chain.initError(_(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\").translated);\n+            error = _(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\").translated;\n             return nullptr;\n         }\n \n@@ -4347,7 +4345,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         // Regenerate the keypool if upgraded to HD\n         if (hd_upgrade) {\n             if (!walletInstance->TopUpKeyPool()) {\n-                chain.initError(_(\"Unable to generate keys\").translated);\n+                error = _(\"Unable to generate keys\").translated;\n                 return nullptr;\n             }\n         }\n@@ -4367,41 +4365,41 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         // Top up the keypool\n         if (walletInstance->CanGenerateKeys() && !walletInstance->TopUpKeyPool()) {\n-            chain.initError(_(\"Unable to generate initial keys\").translated);\n+            error = _(\"Unable to generate initial keys\").translated;\n             return nullptr;\n         }\n \n         auto locked_chain = chain.lock();\n         walletInstance->ChainStateFlushed(locked_chain->getTipLocator());\n     } else if (wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS) {\n         // Make it impossible to disable private keys after creation\n-        chain.initError(strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\").translated, walletFile));\n+        error = strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\").translated, walletFile);\n         return NULL;\n     } else if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         LOCK(walletInstance->cs_KeyStore);\n         if (!walletInstance->mapKeys.empty() || !walletInstance->mapCryptedKeys.empty()) {\n-            chain.initWarning(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\").translated, walletFile));\n+            warnings.push_back(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\").translated, walletFile));\n         }\n     }\n \n     if (!gArgs.GetArg(\"-addresstype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"), walletInstance->m_default_address_type)) {\n-        chain.initError(strprintf(_(\"Unknown address type '%s'\").translated, gArgs.GetArg(\"-addresstype\", \"\")));\n+        error = strprintf(_(\"Unknown address type '%s'\").translated, gArgs.GetArg(\"-addresstype\", \"\"));\n         return nullptr;\n     }\n \n     if (!gArgs.GetArg(\"-changetype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"), walletInstance->m_default_change_type)) {\n-        chain.initError(strprintf(_(\"Unknown change type '%s'\").translated, gArgs.GetArg(\"-changetype\", \"\")));\n+        error = strprintf(_(\"Unknown change type '%s'\").translated, gArgs.GetArg(\"-changetype\", \"\"));\n         return nullptr;\n     }\n \n     if (gArgs.IsArgSet(\"-mintxfee\")) {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-mintxfee\", \"\"), n) || 0 == n) {\n-            chain.initError(AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")).translated);\n+            error = AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")).translated;\n             return nullptr;\n         }\n         if (n > HIGH_TX_FEE_PER_KB) {\n-            chain.initWarning(AmountHighWarn(\"-mintxfee\").translated + \" \" +\n+            warnings.push_back(AmountHighWarn(\"-mintxfee\").translated + \" \" +\n                               _(\"This is the minimum transaction fee you pay on every transaction.\").translated);\n         }\n         walletInstance->m_min_fee = CFeeRate(n);\n@@ -4410,11 +4408,11 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (gArgs.IsArgSet(\"-fallbackfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK)) {\n-            chain.initError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\").translated, gArgs.GetArg(\"-fallbackfee\", \"\")));\n+            error = strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\").translated, gArgs.GetArg(\"-fallbackfee\", \"\"));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            chain.initWarning(AmountHighWarn(\"-fallbackfee\").translated + \" \" +\n+            warnings.push_back(AmountHighWarn(\"-fallbackfee\").translated + \" \" +\n                               _(\"This is the transaction fee you may pay when fee estimates are not available.\").translated);\n         }\n         walletInstance->m_fallback_fee = CFeeRate(nFeePerK);\n@@ -4425,53 +4423,52 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (gArgs.IsArgSet(\"-discardfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK)) {\n-            chain.initError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\").translated, gArgs.GetArg(\"-discardfee\", \"\")));\n+            error = strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\").translated, gArgs.GetArg(\"-discardfee\", \"\"));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            chain.initWarning(AmountHighWarn(\"-discardfee\").translated + \" \" +\n+            warnings.push_back(AmountHighWarn(\"-discardfee\").translated + \" \" +\n                               _(\"This is the transaction fee you may discard if change is smaller than dust at this level\").translated);\n         }\n         walletInstance->m_discard_rate = CFeeRate(nFeePerK);\n     }\n     if (gArgs.IsArgSet(\"-paytxfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"), nFeePerK)) {\n-            chain.initError(AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")).translated);\n+            error = AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")).translated;\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            chain.initWarning(AmountHighWarn(\"-paytxfee\").translated + \" \" +\n+            warnings.push_back(AmountHighWarn(\"-paytxfee\").translated + \" \" +\n                               _(\"This is the transaction fee you will pay if you send a transaction.\").translated);\n         }\n         walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK, 1000);\n         if (walletInstance->m_pay_tx_fee < chain.relayMinFee()) {\n-            chain.initError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\").translated,\n-                gArgs.GetArg(\"-paytxfee\", \"\"), chain.relayMinFee().ToString()));\n+            error = strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\").translated,\n+                gArgs.GetArg(\"-paytxfee\", \"\"), chain.relayMinFee().ToString());\n             return nullptr;\n         }\n     }\n \n-    if (gArgs.IsArgSet(\"-maxtxfee\"))\n-    {\n+    if (gArgs.IsArgSet(\"-maxtxfee\")) {\n         CAmount nMaxFee = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-maxtxfee\", \"\"), nMaxFee)) {\n-            chain.initError(AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\")).translated);\n+            error = AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\")).translated;\n             return nullptr;\n         }\n         if (nMaxFee > HIGH_MAX_TX_FEE) {\n-            chain.initWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\").translated);\n+            warnings.push_back(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\").translated);\n         }\n         if (CFeeRate(nMaxFee, 1000) < chain.relayMinFee()) {\n-            chain.initError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\").translated,\n-                                       gArgs.GetArg(\"-maxtxfee\", \"\"), chain.relayMinFee().ToString()));\n+            error = strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\").translated,\n+                                       gArgs.GetArg(\"-maxtxfee\", \"\"), chain.relayMinFee().ToString());\n             return nullptr;\n         }\n         walletInstance->m_default_max_tx_fee = nMaxFee;\n     }\n \n     if (chain.relayMinFee().GetFeePerK() > HIGH_TX_FEE_PER_KB) {\n-        chain.initWarning(AmountHighWarn(\"-minrelaytxfee\").translated + \" \" +\n+        warnings.push_back(AmountHighWarn(\"-minrelaytxfee\").translated + \" \" +\n                     _(\"The wallet will avoid paying less than the minimum relay fee.\").translated);\n     }\n \n@@ -4521,7 +4518,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             }\n \n             if (rescan_height != block_height) {\n-                chain.initError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\").translated);\n+                error = _(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\").translated;\n                 return nullptr;\n             }\n         }\n@@ -4540,7 +4537,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         {\n             WalletRescanReserver reserver(walletInstance.get());\n             if (!reserver.reserve() || (ScanResult::SUCCESS != walletInstance->ScanForWalletTransactions(locked_chain->getBlockHash(rescan_height), {} /* stop block */, reserver, true /* update */).status)) {\n-                chain.initError(_(\"Failed to rescan the wallet during initialization\").translated);\n+                error = _(\"Failed to rescan the wallet during initialization\").translated;\n                 return nullptr;\n             }\n         }"
      },
      {
        "sha": "f9e2230a6ffb0e5ea7e9b1953b682c166d5a5163",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9712d876104d5042414dd1abec1c74060340cef4/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9712d876104d5042414dd1abec1c74060340cef4/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9712d876104d5042414dd1abec1c74060340cef4",
        "patch": "@@ -47,15 +47,15 @@ bool RemoveWallet(const std::shared_ptr<CWallet>& wallet);\n bool HasWallets();\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n std::shared_ptr<CWallet> GetWallet(const std::string& name);\n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::string& warning);\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::vector<std::string>& warnings);\n \n enum class WalletCreationStatus {\n     SUCCESS,\n     CREATION_FAILED,\n     ENCRYPTION_FAILED\n };\n \n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::shared_ptr<CWallet>& result);\n+WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result);\n \n //! Default for -keypool\n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n@@ -1318,10 +1318,10 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     //! Verify wallet naming and perform salvage on the wallet if required\n-    static bool Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::string& warning_string);\n+    static bool Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::vector<std::string>& warnings);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static std::shared_ptr<CWallet> CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, uint64_t wallet_creation_flags = 0);\n+    static std::shared_ptr<CWallet> CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::vector<std::string>& warnings, uint64_t wallet_creation_flags = 0);\n \n     /**\n      * Wallet post-init setup"
      },
      {
        "sha": "d7f7635a83c6c28290f3bcfaed4a77fb88289779",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9712d876104d5042414dd1abec1c74060340cef4/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9712d876104d5042414dd1abec1c74060340cef4/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=9712d876104d5042414dd1abec1c74060340cef4",
        "patch": "@@ -729,9 +729,9 @@ bool WalletBatch::VerifyEnvironment(const fs::path& wallet_path, std::string& er\n     return BerkeleyBatch::VerifyEnvironment(wallet_path, errorStr);\n }\n \n-bool WalletBatch::VerifyDatabaseFile(const fs::path& wallet_path, std::string& warningStr, std::string& errorStr)\n+bool WalletBatch::VerifyDatabaseFile(const fs::path& wallet_path, std::vector<std::string>& warnings, std::string& errorStr)\n {\n-    return BerkeleyBatch::VerifyDatabaseFile(wallet_path, warningStr, errorStr, WalletBatch::Recover);\n+    return BerkeleyBatch::VerifyDatabaseFile(wallet_path, warnings, errorStr, WalletBatch::Recover);\n }\n \n bool WalletBatch::WriteDestData(const std::string &address, const std::string &key, const std::string &value)"
      },
      {
        "sha": "b1781d5ccf11024d145005963faf96d5fb12255c",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9712d876104d5042414dd1abec1c74060340cef4/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9712d876104d5042414dd1abec1c74060340cef4/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=9712d876104d5042414dd1abec1c74060340cef4",
        "patch": "@@ -260,7 +260,7 @@ class WalletBatch\n     /* verifies the database environment */\n     static bool VerifyEnvironment(const fs::path& wallet_path, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const fs::path& wallet_path, std::string& warningStr, std::string& errorStr);\n+    static bool VerifyDatabaseFile(const fs::path& wallet_path, std::vector<std::string>& warnings, std::string& errorStr);\n \n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);"
      },
      {
        "sha": "ce0b7e878276ff2828e09226a96995ff6f0cbf38",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9712d876104d5042414dd1abec1c74060340cef4/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9712d876104d5042414dd1abec1c74060340cef4/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=9712d876104d5042414dd1abec1c74060340cef4",
        "patch": "@@ -339,14 +339,10 @@ def wallet_file(name):\n         self.log.info(\"Fail -upgradewallet that results in downgrade\")\n         assert_raises_rpc_error(\n             -4,\n-            \"Wallet loading failed.\",\n+            'Wallet loading failed: Error loading {}: Wallet requires newer version of {}'.format(\n+                wallet_dir('high_minversion', 'wallet.dat'), self.config['environment']['PACKAGE_NAME']),\n             lambda: self.nodes[0].loadwallet(filename='high_minversion'),\n         )\n-        self.stop_node(\n-            i=0,\n-            expected_stderr='Error: Error loading {}: Wallet requires newer version of Bitcoin Core'.format(\n-                wallet_dir('high_minversion', 'wallet.dat')),\n-        )\n \n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "eed88fc979ec9a2dc683cccd6cb6bedcc66e93a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWQ4OGZjOTc5ZWM5YTJkYzY4M2NjY2Q2Y2I2YmVkY2M2NmU5M2Ex",
    "commit": {
      "author": {
        "name": "randymcmillan",
        "email": "randy.lee.mcmillan@gmail.com",
        "date": "2019-10-22T01:59:43Z"
      },
      "committer": {
        "name": "randymcmillan",
        "email": "randy.lee.mcmillan@gmail.com",
        "date": "2019-10-22T03:23:28Z"
      },
      "message": "doc:spelling correction in modifiedcontrib/guix/manifest.scm",
      "tree": {
        "sha": "fe88e8dcd4970383818d3b9ce4e0630e0f809952",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe88e8dcd4970383818d3b9ce4e0630e0f809952"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eed88fc979ec9a2dc683cccd6cb6bedcc66e93a1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hb6ciGhYT5bmSBil5ZsBrsGdXsFAl2udjAACgkQl5ZsBrsG\ndXv9bxAAkUYXKug00DIP1UOnD9TJMBi0IO1F2HSiY3T/yFivckhR/eY2EiRKuGl/\nMi5bcIkQOOfzND7aWoS0PCqdtI15pWix/v9Xb/DW6Udw/xYsSgHyrCMPiuDAAAeI\nG4Uel4u7o02jhaZel3eiJXF/6WybDI6oVPe/Vv/SeBoMGVx/8X0Dx38PFxaKDjjX\n5THGL5gHaECY8Z9z5CCJnqcQqfIeZnxaNmmf3YpUhW7R7Ezf9zxLqRY14T8U8uO8\n4qdaTYr02oh64wj+GZHrj1Wle1+Wk2pdYB+v4C/inhDYi13dkGRlO+Bx/lYfqRa1\nxRJ1TkebsfsG8I6SSxIBfkIrPO5QuNgsY/Y4Bv2kVbOHfl+ryZF38bfPkK6s4Ipi\nuutI1P36ZtfF/eCFJVAeaKPlwe+NIiibB0cx5E3PWPrnB1ZBKsS2Ciy9sUy5as9G\nypUbcd8rlaW6o8SyWzaB+0cb+aY9ppdP9zq5lx45ZnS8KYfpFrJpT8m/pjcOTGRd\n7SBNuJraZhbRp08EZULGqixSCcp/0gln8nRMxxO+I57O3mL7gGa9Mqb+G3WEljpb\nNoPOCiZcLzyV29cpfpdM0O+4ghWWnKTuTDH++lA2egvO5F1siMzyc2zJQiMQFREr\nGg2cLXadu+6BdfILGDY1m3uPNqejtq3KPvxXlb1jfPgsu7wcC2Y=\n=PFY5\n-----END PGP SIGNATURE-----",
        "payload": "tree fe88e8dcd4970383818d3b9ce4e0630e0f809952\nparent 9712d876104d5042414dd1abec1c74060340cef4\nauthor randymcmillan <randy.lee.mcmillan@gmail.com> 1571709583 -0400\ncommitter randymcmillan <randy.lee.mcmillan@gmail.com> 1571714608 -0400\n\ndoc:spelling correction in modifiedcontrib/guix/manifest.scm\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eed88fc979ec9a2dc683cccd6cb6bedcc66e93a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eed88fc979ec9a2dc683cccd6cb6bedcc66e93a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eed88fc979ec9a2dc683cccd6cb6bedcc66e93a1/comments",
    "author": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9712d876104d5042414dd1abec1c74060340cef4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9712d876104d5042414dd1abec1c74060340cef4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9712d876104d5042414dd1abec1c74060340cef4"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "23b656cad7e6d2e273464ae74cb3ce014c7b984b",
        "filename": "contrib/guix/manifest.scm",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eed88fc979ec9a2dc683cccd6cb6bedcc66e93a1/contrib/guix/manifest.scm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eed88fc979ec9a2dc683cccd6cb6bedcc66e93a1/contrib/guix/manifest.scm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/manifest.scm?ref=eed88fc979ec9a2dc683cccd6cb6bedcc66e93a1",
        "patch": "@@ -106,7 +106,7 @@ chain for \" target \" development.\"))\n                                   (base-libc glibc-2.27)\n                                   (base-gcc (make-gcc-rpath-link\n                                              (make-ssp-fixed-gcc gcc-9))))\n-  \"Convienience wrapper around MAKE-CROSS-TOOLCHAIN with default values\n+  \"Convenience wrapper around MAKE-CROSS-TOOLCHAIN with default values\n desirable for building Bitcoin Core release binaries.\"\n   (make-cross-toolchain target\n                    base-gcc-for-libc"
      }
    ]
  },
  {
    "sha": "152eed11e640b7dd6293c258a42fc3e02de8baf8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTJlZWQxMWU2NDBiN2RkNjI5M2MyNThhNDJmYzNlMDJkZThiYWY4",
    "commit": {
      "author": {
        "name": "randymcmillan",
        "email": "randy.lee.mcmillan@gmail.com",
        "date": "2019-10-22T02:01:57Z"
      },
      "committer": {
        "name": "randymcmillan",
        "email": "randy.lee.mcmillan@gmail.com",
        "date": "2019-10-22T03:23:28Z"
      },
      "message": "doc:spelling correction in src/netbase.cpp",
      "tree": {
        "sha": "f0a1017bc2e1fa27d89874e3ef28a3339e18c1de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0a1017bc2e1fa27d89874e3ef28a3339e18c1de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/152eed11e640b7dd6293c258a42fc3e02de8baf8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hb6ciGhYT5bmSBil5ZsBrsGdXsFAl2udjAACgkQl5ZsBrsG\ndXtJ7A//SdIxXsYSbUT9tqRrZNuYj6EP2DxBDeHZFQ/Eb9AiFX9YYD829ZD07pK0\nqkeHzGcI40FC/T6JvCBNbrfPugksO00I6ODy/9uwCzM1x1clIAEyEmR6Zy+XYf92\n8IHfLoEjerTG2qXS0MuAbU9SQaRV9VyiC3KfaZJru9Phr4nLnZo9TE7D0XIIAIWB\nKZ3DPyyk9FhjrkbmiTT+1k8A5QlzJgCSIdMm8aasoxpBBQx3P+nAF4Rgj+GMjZ0S\no3EUbA0V5mgvf8fE4Dbd5d3WqkNt455DdCx3CqAAHbk61CcY2plNsuPYuxbSw+Th\nKe1RqPUESrZrsU00blyBZalfR93SRQKJHiELgF68m1NycHPaS+YMORh6T1kb9SNB\nqt7I1IQuw0JUY7OCYtZ5PvNt3sHOCCB5yp6dFwrgaUkoUGEYhuoOr8mLqe+pVdhK\niN4GfP3DWQ5peH70IH7/DrpC0Lp9/OEGrmEQ2tHApHgmlfvbjKUKPXI+A2+qNwTe\nzt75Pk2eeZFQ7jMyxbTvaYGC94PC+7McVXpCJx6nCC3axyaWfTol+fzjlk4Qorqw\nyYWJdNkuNn5aUc2wnVTFTbUE61AXQ9qc3DVMQFecoBG+xqRvaz4osEcf4JTM302N\n2VxshbnjDOv+0zALnMGsL0NBThh3iG5F7DLbZ3dkWtjQEo9xM4I=\n=2DdB\n-----END PGP SIGNATURE-----",
        "payload": "tree f0a1017bc2e1fa27d89874e3ef28a3339e18c1de\nparent eed88fc979ec9a2dc683cccd6cb6bedcc66e93a1\nauthor randymcmillan <randy.lee.mcmillan@gmail.com> 1571709717 -0400\ncommitter randymcmillan <randy.lee.mcmillan@gmail.com> 1571714608 -0400\n\ndoc:spelling correction in src/netbase.cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/152eed11e640b7dd6293c258a42fc3e02de8baf8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/152eed11e640b7dd6293c258a42fc3e02de8baf8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/152eed11e640b7dd6293c258a42fc3e02de8baf8/comments",
    "author": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eed88fc979ec9a2dc683cccd6cb6bedcc66e93a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eed88fc979ec9a2dc683cccd6cb6bedcc66e93a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eed88fc979ec9a2dc683cccd6cb6bedcc66e93a1"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "97acc0abe494b297aefb74881fa376f1b2b9d6e4",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152eed11e640b7dd6293c258a42fc3e02de8baf8/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152eed11e640b7dd6293c258a42fc3e02de8baf8/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=152eed11e640b7dd6293c258a42fc3e02de8baf8",
        "patch": "@@ -605,7 +605,7 @@ static void LogConnectFailure(bool manual_connection, const char* fmt, const Arg\n  * @param nTimeout Wait this many milliseconds for the connection to be\n  *                 established.\n  * @param manual_connection Whether or not the connection was manually requested\n- *                          (e.g. thru the addnode RPC)\n+ *                          (e.g. through the addnode RPC)\n  *\n  * @returns Whether or not a connection was successfully made.\n  */"
      }
    ]
  },
  {
    "sha": "75b0d5aa967a3aa6597b65d812d201eb7b7599be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWIwZDVhYTk2N2EzYWE2NTk3YjY1ZDgxMmQyMDFlYjdiNzU5OWJl",
    "commit": {
      "author": {
        "name": "randymcmillan",
        "email": "randy.lee.mcmillan@gmail.com",
        "date": "2019-10-22T02:04:57Z"
      },
      "committer": {
        "name": "randymcmillan",
        "email": "randy.lee.mcmillan@gmail.com",
        "date": "2019-10-22T03:23:28Z"
      },
      "message": "doc:spelling correction in src/netbase.cpp",
      "tree": {
        "sha": "70bb941267d54dd5b31d4acb01daf3ea9e51e84a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70bb941267d54dd5b31d4acb01daf3ea9e51e84a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75b0d5aa967a3aa6597b65d812d201eb7b7599be",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hb6ciGhYT5bmSBil5ZsBrsGdXsFAl2udjAACgkQl5ZsBrsG\ndXu/DxAAwJ8yGOagF+4xwj5cSOs9ZyzDMhmJFa0CEERtw6PI1euq7ztBShMVHGjE\nn5cjchxQuNyRXkqL/1fc99z/m4Po0bPIYTCVjgpA5wuf1K2xpi7MDw2VRiGF6Ocj\nrEkaAyhAJbnjwPLUyCXlPeEf4C5MRxkEfAmPkfP9cvbQkenPghe7E2cLGpyxExWl\n2AiKnXMIV7BKFf+j6pUGepjoEimQwpJCazTGZOorqy5McHKGIEwZE1L8mamh8mHt\nl+L9laYV1Nvp+IOBXAwDcSpQWIgAaS/ncnll2f01wIkY0kvOx/ykE+xRdWhmvRuo\neBdKvC15+o6kquy81Jmem7d7NcLevUprvgs+rqgQAijv51JEMOCQnYw4yt/QmFEu\nuvO2R7REqtqE7KLfQnnm5OzE1Cekd/XVEXHOlPXCcGZK74UTiZwdEu1G5+IUslhY\nYdZ8X9uZQAEVrX0kIv+lzqdno16YJTNFDt1szfhaE8svDdEQLf7ViBAtSd0M1rhD\nKYmEkDDxFIP1yTDZhK5zxYngNwpFpk0IOaPx2jq/iBoo+8fGje3bsPdpE3wNs6Ns\nij/qudq4uQd3T4M/n32/6yiNhhTNUfuIZZ1xZZWj2qwbPmJms8Xd0iqZK1Va2vh9\nAD4M+A6c4cy0jLbsKtkSQn0NLJslbTgz9PcRw4IpyXMes1/copY=\n=L3wt\n-----END PGP SIGNATURE-----",
        "payload": "tree 70bb941267d54dd5b31d4acb01daf3ea9e51e84a\nparent 152eed11e640b7dd6293c258a42fc3e02de8baf8\nauthor randymcmillan <randy.lee.mcmillan@gmail.com> 1571709897 -0400\ncommitter randymcmillan <randy.lee.mcmillan@gmail.com> 1571714608 -0400\n\ndoc:spelling correction in src/netbase.cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75b0d5aa967a3aa6597b65d812d201eb7b7599be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75b0d5aa967a3aa6597b65d812d201eb7b7599be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75b0d5aa967a3aa6597b65d812d201eb7b7599be/comments",
    "author": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "152eed11e640b7dd6293c258a42fc3e02de8baf8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/152eed11e640b7dd6293c258a42fc3e02de8baf8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/152eed11e640b7dd6293c258a42fc3e02de8baf8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d1cde8c40ff09aca4c59fafb12fc003f00a30f8b",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75b0d5aa967a3aa6597b65d812d201eb7b7599be/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75b0d5aa967a3aa6597b65d812d201eb7b7599be/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=75b0d5aa967a3aa6597b65d812d201eb7b7599be",
        "patch": "@@ -709,7 +709,7 @@ bool GetProxy(enum Network net, proxyType &proxyInfoOut) {\n \n /**\n  * Set the name proxy to use for all connections to nodes specified by a\n- * hostname. After setting this proxy, connecting to a node sepcified by a\n+ * hostname. After setting this proxy, connecting to a node specified by a\n  * hostname won't result in a local lookup of said hostname, rather, connect to\n  * the node by asking the name proxy for a proxy connection to the hostname,\n  * effectively delegating the hostname lookup to the specified proxy."
      }
    ]
  },
  {
    "sha": "3751abb773d9c06374de590721d53ac278f2f3fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzUxYWJiNzczZDljMDYzNzRkZTU5MDcyMWQ1M2FjMjc4ZjJmM2Zi",
    "commit": {
      "author": {
        "name": "randymcmillan",
        "email": "randy.lee.mcmillan@gmail.com",
        "date": "2019-10-22T02:19:06Z"
      },
      "committer": {
        "name": "randymcmillan",
        "email": "randy.lee.mcmillan@gmail.com",
        "date": "2019-10-22T03:23:28Z"
      },
      "message": "doc:spelling correction in src/node/transaction.cpp",
      "tree": {
        "sha": "4c9bb97725ef3955619c1443a9590ad87545e97f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c9bb97725ef3955619c1443a9590ad87545e97f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3751abb773d9c06374de590721d53ac278f2f3fb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hb6ciGhYT5bmSBil5ZsBrsGdXsFAl2udjwACgkQl5ZsBrsG\ndXvSTw//VY8Mh15n4BotZxzJdcbi+XcG7rqdipieriKTuk9HK5DZDH3bfSHYD0+7\n3kmfTAbJ2f4rgBjSBuX49Fq00ctf00h7JRHUB1/mzKvWq+BOF9EoJIfMWEgsbjZT\nLdgpKmOgZNy8q8xYp789MXzciKdEShvqVVbOkHzpGq673ig96PO8ilQpK2l19NTd\n3MHr9ZlPl48dG0CZVEaeGtJbJSW8BelcQgd38ukYClJZDX/pZuXxO/FwDfpI0zBk\nCqsD7F907aIX5mJ+sndarxz6jdRPvl3+T6gokDDj3oq3c2LBRrQtTg4k9XOykTbr\nXQnXOhwMKTXHGBNI74698YgSQ2nkDkeXlG5lg3VmzYUIvapqGtCvjOoRd9WfF7zU\nXNEkHaptAe7mmyUbDbio9Kqrru7nmWl52RvLMD7RKbK+h9kBDZSkWx0aUvySPPoL\nsb/s8KWFPrASIetWm9/I+mZ+qsb0dMAgjPADH2c+BlM0VF1VnnNGlz0YDGhvlJ7w\ng4r0EDWhZVsX/zS69yHPYDys6QyOnFD4hEjIUMW+XR6F9Z3KoHK+LtFke2XsL+Nk\n7ByNsXGaHNQ73xX0mgx/+TxemdG0Mdx3R69z+qOSBF8jaUvvCcJjRbTcdXeR2Ol9\nDt2l7fLbftSCG1n8OJFtxnvkuIHAYaQsi0jpXzAyTM6DAT6rbTU=\n=wNYk\n-----END PGP SIGNATURE-----",
        "payload": "tree 4c9bb97725ef3955619c1443a9590ad87545e97f\nparent 75b0d5aa967a3aa6597b65d812d201eb7b7599be\nauthor randymcmillan <randy.lee.mcmillan@gmail.com> 1571710746 -0400\ncommitter randymcmillan <randy.lee.mcmillan@gmail.com> 1571714608 -0400\n\ndoc:spelling correction in src/node/transaction.cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3751abb773d9c06374de590721d53ac278f2f3fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3751abb773d9c06374de590721d53ac278f2f3fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3751abb773d9c06374de590721d53ac278f2f3fb/comments",
    "author": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75b0d5aa967a3aa6597b65d812d201eb7b7599be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75b0d5aa967a3aa6597b65d812d201eb7b7599be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75b0d5aa967a3aa6597b65d812d201eb7b7599be"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ec72e8b7de44c0497d8c0ccc378867718e29e3fe",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3751abb773d9c06374de590721d53ac278f2f3fb/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3751abb773d9c06374de590721d53ac278f2f3fb/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=3751abb773d9c06374de590721d53ac278f2f3fb",
        "patch": "@@ -30,7 +30,7 @@ TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err\n     CCoinsViewCache &view = ::ChainstateActive().CoinsTip();\n     for (size_t o = 0; o < tx->vout.size(); o++) {\n         const Coin& existingCoin = view.AccessCoin(COutPoint(hashTx, o));\n-        // IsSpent doesnt mean the coin is spent, it means the output doesnt' exist.\n+        // IsSpent doesn't mean the coin is spent, it means the output doesn't exist.\n         // So if the output does exist, then this transaction exists in the chain.\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }"
      }
    ]
  },
  {
    "sha": "4234a7e9e3871459a47c9549c574be6e11bc1768",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjM0YTdlOWUzODcxNDU5YTQ3Yzk1NDljNTc0YmU2ZTExYmMxNzY4",
    "commit": {
      "author": {
        "name": "randymcmillan",
        "email": "randy.lee.mcmillan@gmail.com",
        "date": "2019-10-22T02:24:57Z"
      },
      "committer": {
        "name": "randymcmillan",
        "email": "randy.lee.mcmillan@gmail.com",
        "date": "2019-10-22T03:23:40Z"
      },
      "message": "doc:spelling correction in src/qt/bitcoin.cpp",
      "tree": {
        "sha": "17225f8971e51b8ec37c9661bff21345f2f02783",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17225f8971e51b8ec37c9661bff21345f2f02783"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4234a7e9e3871459a47c9549c574be6e11bc1768",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hb6ciGhYT5bmSBil5ZsBrsGdXsFAl2udjwACgkQl5ZsBrsG\ndXvg/w//btSvgDZBxPY50CDjxp0WJXV27N+d+VAtMOeNnKFm/gx/zsZxVFBU9JEM\n2zSFfmlhfes5URqtPFK2C/z7IhFaxGIdQ5JWHQrBNUebF5G57SssOqYWduBcDZx5\nBzFG8b+3v42SwDTpSUgZU/a7UpUd/pbehqPmYuYc+XquTpLjBkDKV7OAs6p71MGb\nLf/kiBd4sq6IWelJIh7OZ5Z9ER7CgOrAxRZKg0QgMxzMHLyiAmLvKgxD4sN71lzf\n9t3oq5BxFdvcVHFQQVfbmt23tSbxtj2dQdhLJYKvbB2BgaEUWFZN9ksWV6diq2QI\nSeNV5iRoF8Mr3DklBQAv+NrR6f1kFeYNEorKxwDVFX49lxJUrVFK4C/lO7jbzl/E\nDbyltRvwCHXrzwbDo9RqXxlH4I3fO4xYTtsuFzS05a/vYeX9UNMgsiq1gKD9jALD\nWhLwBGm8RWEGK8beUuUOa/jaClTw2VLXVvLIskAy3AMce3ECKYU7t8jQAOIU+9pQ\ngDWvJrHTd43uXOn7F7YzHo+pnVF+CfTQ/9d/wsb0bset11PdeNv9O7eKuSICPlU+\n5vfTDTMjtyAiJkE0/1WEnuqiLTbAu+aEVjRzVtrO00+gA97uix3M7vEmOh3LrnRU\nHA5bPO+gODsuFw0yXv+87uliLNowCFJvn1BLpxgxCQJt+971M3Q=\n=RAcG\n-----END PGP SIGNATURE-----",
        "payload": "tree 17225f8971e51b8ec37c9661bff21345f2f02783\nparent 3751abb773d9c06374de590721d53ac278f2f3fb\nauthor randymcmillan <randy.lee.mcmillan@gmail.com> 1571711097 -0400\ncommitter randymcmillan <randy.lee.mcmillan@gmail.com> 1571714620 -0400\n\ndoc:spelling correction in src/qt/bitcoin.cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4234a7e9e3871459a47c9549c574be6e11bc1768",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4234a7e9e3871459a47c9549c574be6e11bc1768",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4234a7e9e3871459a47c9549c574be6e11bc1768/comments",
    "author": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3751abb773d9c06374de590721d53ac278f2f3fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3751abb773d9c06374de590721d53ac278f2f3fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3751abb773d9c06374de590721d53ac278f2f3fb"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f091153bf78cb40fa644d08a52b4d24c16df6529",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4234a7e9e3871459a47c9549c574be6e11bc1768/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4234a7e9e3871459a47c9549c574be6e11bc1768/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=4234a7e9e3871459a47c9549c574be6e11bc1768",
        "patch": "@@ -309,7 +309,7 @@ void BitcoinApplication::requestShutdown()\n     // rescanning a wallet.\n     m_node.startShutdown();\n     // Unsetting the client model can cause the current thread to wait for node\n-    // to complete an operation, like wait for a RPC execution to complate.\n+    // to complete an operation, like wait for a RPC execution to complete.\n     window->setClientModel(nullptr);\n     pollShutdownTimer->stop();\n "
      }
    ]
  },
  {
    "sha": "583e47b02b36d14eb5bb08ddc558ff23efaaa77b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODNlNDdiMDJiMzZkMTRlYjViYjA4ZGRjNTU4ZmYyM2VmYWFhNzdi",
    "commit": {
      "author": {
        "name": "randymcmillan",
        "email": "randy.lee.mcmillan@gmail.com",
        "date": "2019-10-22T02:53:27Z"
      },
      "committer": {
        "name": "randymcmillan",
        "email": "randy.lee.mcmillan@gmail.com",
        "date": "2019-10-22T03:23:40Z"
      },
      "message": "doc:spelling correction in src/rpc/rawtransaction.cpp",
      "tree": {
        "sha": "b5d3274a6c99373b9a528733eaa42cc97739f290",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5d3274a6c99373b9a528733eaa42cc97739f290"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/583e47b02b36d14eb5bb08ddc558ff23efaaa77b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hb6ciGhYT5bmSBil5ZsBrsGdXsFAl2udjwACgkQl5ZsBrsG\ndXvvWg//f5wqCvZJHf3CkepeVPw7EQbwGEjb1+1+LPBEkUEpZecy7vk5VM48JEdy\ne/IM5he7HYQCGLy8IZRTpK0tpdM2Ds2EakflsL/2zQpd3X5vOF5MuOmWVEWe2Ajv\ncQ5ff8WMlnkdEm7sJ2u6i7Yc79vkQd+CdCkpIhBKTykWYoy/rd8+tJ6x/yPApn+1\nhi29/P/MV3gLhdR3PDxwwNhFRutuBeUf0pICimt951PQBwLyBAFoWzy8sWhDESb0\nkAVlPkptTpTnHyJ3dLUiW6o4Bv29x9BjMPb62xS7lt0UvmEyxXa8+elfj6qRuyTC\nBtJ2EJhDmH9uy14GWofwLMBA684Xo4OWzIEX2dvEBNyfrGOj8n7BFNe66uED7y9F\nl3GSs5Y4d2WjdCJQOClUtTZ9xttSV6wlwmVSFV6qSXgDjAjD1rQs0owmS34I2hf7\nqkvnUEbq7AX12ZST41c61mLbhCmV9oBWwu0UUOhm4ahNUK85wMGizw04Gd9O4eK7\n2K2p+tbg898C8DRqDcFLa187zHPQiFh2O50npzU4WB7j62fThfegq2vpd4mCOWzj\nwr214axD0zInInIohCmPlMVow5vedkgyF+uk6Q5B6JJavfaz9L+Th99DBL+t8sLB\nU6in4qOTpDqVLG3OPEJTgc0o68QiRqsJyRqmpjSX3xwCVSV2rs0=\n=JJBJ\n-----END PGP SIGNATURE-----",
        "payload": "tree b5d3274a6c99373b9a528733eaa42cc97739f290\nparent 4234a7e9e3871459a47c9549c574be6e11bc1768\nauthor randymcmillan <randy.lee.mcmillan@gmail.com> 1571712807 -0400\ncommitter randymcmillan <randy.lee.mcmillan@gmail.com> 1571714620 -0400\n\ndoc:spelling correction in src/rpc/rawtransaction.cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/583e47b02b36d14eb5bb08ddc558ff23efaaa77b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/583e47b02b36d14eb5bb08ddc558ff23efaaa77b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/583e47b02b36d14eb5bb08ddc558ff23efaaa77b/comments",
    "author": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4234a7e9e3871459a47c9549c574be6e11bc1768",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4234a7e9e3871459a47c9549c574be6e11bc1768",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4234a7e9e3871459a47c9549c574be6e11bc1768"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "854c1044fe7f0ad6c7b464f2af43670f17286458",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/583e47b02b36d14eb5bb08ddc558ff23efaaa77b/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/583e47b02b36d14eb5bb08ddc558ff23efaaa77b/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=583e47b02b36d14eb5bb08ddc558ff23efaaa77b",
        "patch": "@@ -1617,7 +1617,7 @@ UniValue joinpsbts(const JSONRPCRequest& request)\n     std::vector<int> output_indices(merged_psbt.outputs.size());\n     std::iota(output_indices.begin(), output_indices.end(), 0);\n \n-    // Shuffle input and output indicies lists\n+    // Shuffle input and output indices lists\n     Shuffle(input_indices.begin(), input_indices.end(), FastRandomContext());\n     Shuffle(output_indices.begin(), output_indices.end(), FastRandomContext());\n "
      }
    ]
  },
  {
    "sha": "bbb0face63cb0e81a10f45d73fef84fd715e4258",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmIwZmFjZTYzY2IwZTgxYTEwZjQ1ZDczZmVmODRmZDcxNWU0MjU4",
    "commit": {
      "author": {
        "name": "randymcmillan",
        "email": "randy.lee.mcmillan@gmail.com",
        "date": "2019-10-22T02:55:58Z"
      },
      "committer": {
        "name": "randymcmillan",
        "email": "randy.lee.mcmillan@gmail.com",
        "date": "2019-10-22T03:23:40Z"
      },
      "message": "doc:spelling correction in src/rpc/rawtransaction_util.h",
      "tree": {
        "sha": "8b32417d03f9358e18a2c64de6bd9e634088a449",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b32417d03f9358e18a2c64de6bd9e634088a449"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbb0face63cb0e81a10f45d73fef84fd715e4258",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hb6ciGhYT5bmSBil5ZsBrsGdXsFAl2udjwACgkQl5ZsBrsG\ndXvDcg/9HJpqpUsrVKNQeepiF35rAoIxwB1T3+hP27QjosaaGW5BHcNjV9TUhctV\nofLM9L6qQD1pkWdZ6gnj6jWarnZ3N0Tapf80GKr4JIqdG43hZ9OgTjIR9TX/snPx\n/UiYV/FjesLHAQZpbNxX239KBcTU4uOpi0fthR9b+DVs6WlgU+pDEEfm6+ewWslt\naUiSrEo+SxnUFenp1I4gVmoDeXE45CJ0xZg09Kfmr8evcYT6x2ut3Lhm9dCPo8T3\ndM/4w2LZdK6fEVk1tlTSdk5khNlHl4bpdkiVNoh9cPdsvIPoNX5QWJ16VJygYDoI\nMRvUHRuIFlki4HMGZHB29M77gKbWq3FyIKjJoWz3BZ6qEmnwetcL6C4+U42cQgcD\noaTNj+MP7bx7czLgB0tQfxhjxFvUTuorZZUlB1Q0nggn84bZ6SaQ7iSViJZGr86c\nUQUKaF1vEG05cJiz6biPV37OA/iV0wuv3m6PnsOyqyIPflfzODr4V/09cR9QCpNG\nze/mvjHiMPiKuGB/+Fn2XeShnvkDAFYw05iQe7ynqkdO4QEGggC9BiwZcmS3+/W5\nIJjFE3s6bv5+aOGd3pkpqI2xwnZfufBQD/Sn0YmTS+0GbH3p9cQU5CiRE0fMk7GQ\nZjKm6DNKS2FjQjhxUBrtz/ekLN8j/hbCo5Bdvm+Bjk5sArlrlW0=\n=PK1q\n-----END PGP SIGNATURE-----",
        "payload": "tree 8b32417d03f9358e18a2c64de6bd9e634088a449\nparent 583e47b02b36d14eb5bb08ddc558ff23efaaa77b\nauthor randymcmillan <randy.lee.mcmillan@gmail.com> 1571712958 -0400\ncommitter randymcmillan <randy.lee.mcmillan@gmail.com> 1571714620 -0400\n\ndoc:spelling correction in src/rpc/rawtransaction_util.h\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbb0face63cb0e81a10f45d73fef84fd715e4258",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbb0face63cb0e81a10f45d73fef84fd715e4258",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbb0face63cb0e81a10f45d73fef84fd715e4258/comments",
    "author": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "583e47b02b36d14eb5bb08ddc558ff23efaaa77b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/583e47b02b36d14eb5bb08ddc558ff23efaaa77b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/583e47b02b36d14eb5bb08ddc558ff23efaaa77b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1936998ff3515831d3fbb3ced4bed6ea337cb33c",
        "filename": "src/rpc/rawtransaction_util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbb0face63cb0e81a10f45d73fef84fd715e4258/src/rpc/rawtransaction_util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbb0face63cb0e81a10f45d73fef84fd715e4258/src/rpc/rawtransaction_util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.h?ref=bbb0face63cb0e81a10f45d73fef84fd715e4258",
        "patch": "@@ -29,7 +29,7 @@ UniValue SignTransaction(CMutableTransaction& mtx, const SigningProvider* keysto\n   * Parse a prevtxs UniValue array and get the map of coins from it\n   *\n   * @param  prevTxs       Array of previous txns outputs that tx depends on but may not yet be in the block chain\n-  * @param  keystore      A pointer to the temprorary keystore if there is one\n+  * @param  keystore      A pointer to the temporary keystore if there is one\n   * @param  coins         Map of unspent outputs - coins in mempool and current chain UTXO set, may be extended by previous txns outputs after call\n   */\n void ParsePrevouts(const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins);"
      }
    ]
  },
  {
    "sha": "2b8d1eb69f8a1789c68a18dd0938c16c82383791",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjhkMWViNjlmOGExNzg5YzY4YTE4ZGQwOTM4YzE2YzgyMzgzNzkx",
    "commit": {
      "author": {
        "name": "randymcmillan",
        "email": "randy.lee.mcmillan@gmail.com",
        "date": "2019-10-22T02:19:06Z"
      },
      "committer": {
        "name": "randymcmillan",
        "email": "randy.lee.mcmillan@gmail.com",
        "date": "2019-10-22T03:32:52Z"
      },
      "message": "doc:spelling correction in src/validation.cpp",
      "tree": {
        "sha": "994a74ce4643adf867f925d3a7913415c65a0925",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/994a74ce4643adf867f925d3a7913415c65a0925"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b8d1eb69f8a1789c68a18dd0938c16c82383791",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hb6ciGhYT5bmSBil5ZsBrsGdXsFAl2ueGsACgkQl5ZsBrsG\ndXuNeg//SG/WfL1suyq3MNWheoriSWq9Zmoa/qBNaIeGCh7Wvld8/39jAjJskBac\nnWpY/vksnMi4LnyDxlSnKv/EDIacV5mmi6M0c218mWqqZTqP7hGlNk1iYtddjBj7\nj+bn6Zgc+iyskAj3SpggiC5XfPs4Wy4qVIMEfQJEgEnbIuRKfSaxFYEcFuY9AYvF\nW8bB8PzvJ/kmJNGgRXysmneypPLZE+J4EKOdlf9WGDI5sM6uyoGJrsmALMxMos9G\nPwCp5hCL5IT7YakQL+k1fjm9MQ40mozHyhrBUT966eu5+1AU4kQlqAs5LEkjTi2d\nMfWpW2G7ugDG8XNyRj9P/2lEMIL87u8ZXWNDKdAR8XujqpgCAw74PAHSpsw49XRU\nn6kulFS6cz0f1/5oyiqVOcjtAeiRpQOw9CFQx8Y1Z4mMH7lQhCXvJNjAMkCeyUWp\nkFBSI+TUY80MmldQmjWmcwXyso1k1xjQPvpO6mpmI6JHey1SjGhwReutX0cQAm/6\nkr31RaoJFMPcOiAupaIY2QZ5PeRDBu4Q/Lo7XXEbW/rji4a2nkvTXROXtcic9Ivc\nGPg1qBiXQJExYazIZ6VwlGCk8XdYFCpj+zbVNrDXa+7ldJRm2rqmcdXCzozcS/vp\na57/vsQ8ySeqWpRFNh2gERkji0yD1SYb+YJ2lDixNEhWFwJ/fOA=\n=yRBP\n-----END PGP SIGNATURE-----",
        "payload": "tree 994a74ce4643adf867f925d3a7913415c65a0925\nparent bbb0face63cb0e81a10f45d73fef84fd715e4258\nauthor randymcmillan <randy.lee.mcmillan@gmail.com> 1571710746 -0400\ncommitter randymcmillan <randy.lee.mcmillan@gmail.com> 1571715172 -0400\n\ndoc:spelling correction in src/validation.cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b8d1eb69f8a1789c68a18dd0938c16c82383791",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b8d1eb69f8a1789c68a18dd0938c16c82383791",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b8d1eb69f8a1789c68a18dd0938c16c82383791/comments",
    "author": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "RandyMcMillan",
      "id": 152159,
      "node_id": "MDQ6VXNlcjE1MjE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RandyMcMillan",
      "html_url": "https://github.com/RandyMcMillan",
      "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
      "following_url": "https://api.github.com/users/RandyMcMillan/following{/other_user}",
      "gists_url": "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
      "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
      "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
      "events_url": "https://api.github.com/users/RandyMcMillan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbb0face63cb0e81a10f45d73fef84fd715e4258",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbb0face63cb0e81a10f45d73fef84fd715e4258",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbb0face63cb0e81a10f45d73fef84fd715e4258"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bebf45df6b351ededfa31f5a5e9e23d5d29fd973",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b8d1eb69f8a1789c68a18dd0938c16c82383791/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b8d1eb69f8a1789c68a18dd0938c16c82383791/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2b8d1eb69f8a1789c68a18dd0938c16c82383791",
        "patch": "@@ -742,7 +742,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // To check these we first check if we meet the RBF criteria, above, and increment the descendant\n         // limits by the direct conflict and its descendants (as these are recalculated in\n         // CalculateMempoolAncestors by assuming the new transaction being added is a new descendant, with no\n-        // removals, of each parent's existing dependant set). The ancestor count limits are unmodified (as\n+        // removals, of each parent's existing dependent set). The ancestor count limits are unmodified (as\n         // the ancestor limits should be the same for both our new transaction and any conflicts).\n         // We don't bother incrementing m_limit_descendants by the full removal count as that limit never comes\n         // into force here (as we're only adding a single transaction)."
      }
    ]
  }
]