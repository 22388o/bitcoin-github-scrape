Xekyo,2017-06-20T19:46:12Z,"Have you tested the effect of random exploration vs largest first exploration? \n\n* Either way, BranchAndBound already guarantees that the global utxo set doesn't grow (for one output transactions) due to saving the change output.\n* LFE guarantees the creation of a minimal input set, and purposefully finds a possible solution. This should minimize the input set size variance. In my simulation",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309868437,309868437,
achow101,2017-06-20T20:25:13Z,"@Xekyo I was thinking that Random Exploration would be better for privacy but I see that it probably wouldn't help. If you think it would be better to change to LFE, I can certainly do that.",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309880678,309880678,
Xekyo,2017-06-20T20:33:10Z,"@achow101: I don't know how strong the effect is, but I'd expect Random Exploration to increase the required computational effort.",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309882818,309882818,
instagibbs,2017-06-20T20:52:11Z,"Noting that this PR has fairly heavy overlap with https://github.com/bitcoin/bitcoin/pull/10360 . \n\nFrom chatting with @achow101 the intention of this PR is to touch as little as possible while still getting BranchNBound coin selection.\n\nTo make this successful it should really only be run on first iteration of the loop in CreateTransaction, when `nFeeRet == 0` and only use effective value",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309887884,309887884,
instagibbs,2017-06-20T20:59:34Z,This PR I believe will still create just-over-dust change outputs when BnB finds an exact match. Whenever we are allowing BnB matches(first iteration) we should not make change outputs less than the exact match slack value.,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309889805,309889805,
Xekyo,2017-06-20T21:04:47Z,"@instagibbs: In fact, BnB is designed to only work when creating a transaction without a change output. If we were creating a change in the first place, the extensive search pattern would be unnecessarily wasteful.",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309891073,309891073,
instagibbs,2017-06-20T21:15:16Z,"To append onto my previous comments, any effective value match attempt should account for the fees just obtained by `SelectCoins`. Currently it completely ignores the newly-obtained fees, keeping the previous loop's value, and then asks if `nFeeRet >= nFeeRequired` to break from the loop(which currently is 0 on the first go-around).",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309893923,309893923,
achow101,2017-06-21T00:32:49Z,I have made the BnB selector to be only run on the first pass of the coin selection loop. It is now set so that effective value is only used for the BnB selector and not the knapsack one. I have also added the negative effective value check and test just as a belt-and-suspenders thing. I also made BnB use Largest First Exploration instead of Random Exploration.,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309929166,309929166,
sipa,2017-06-21T23:26:16Z,"Perhaps generically, we should never create change if the amount is less than the cost of creating + spending it (regardless of whether BnB was used to find the inputs or not)?",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310232689,310232689,
instagibbs,2017-06-22T14:05:58Z,"@sipa one question is if we should allow the wallet to consider consolidation-level prices for that change. Perhaps the user is in a hurry now, but would consider spending that change at a much slower pace.\n\nMaybe for a first pass only consider the selected feerate, then Future Work allow a parameter which has more aggressive change protection given longer timescales.",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310390449,310390449,
sipa,2017-06-22T16:26:11Z,"@instagibbs Yes, I agree; we should use long-eatimates for the spend part of change rather than the actual feerate the user is willing to pay now. Perhaps we can make it more conservative without doing that by using a factor 2 or 3 reduction?",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310431952,310431952,
gmaxwell,2017-06-22T18:57:00Z,"@sipa @achow101  it would be very very easy in the current PR to ask for another estimate for the change, I think ~two loc addition, and minor addition to the selectcoins arguments to pass down a second fee.  I think this would be much more desirable than a fixed division.  Future work could do things like make that second confirmation target configurable. ",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310471041,310471041,
achow101,2017-06-23T17:32:29Z,Travis failure seems to be unrelated,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310726989,310726989,
karelbilek,2017-07-02T02:46:52Z,"just fyi, I have used your code as a reference for this code\n\nhttps://github.com/bitcoinjs/coinselect/pull/13",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312467396,312467396,
karelbilek,2017-07-02T20:14:33Z,"I have to say, I don't understand the target size; maybe there is a bug there.\n\nIn wallet.cpp, in `CWallet::CreateTransaction`, you create `nValue`, which seems to be the sum of all the outputs. Because the BnB is used only at the first pass, `nFeeRet` is 0 and `nValueToSelect` is just the sum of all the outputs.\n\nThis is then used as the exact target in the BnB algorithm.\n\nHowever, yo",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312514358,312514358,
achow101,2017-07-02T20:22:18Z,@runn1ng BnB uses effective values for the inputs so the fee is accounted for when coins are selected. The effective values are calculated in `SelectCoinsMinConf` ,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312514781,312514781,
karelbilek,2017-07-02T20:27:47Z,"That eff. value accounts for the *inputs* of the new transaction, but not for the *outputs* (plus the overhead of the tx itself, but that is only about 10 bytes).\n\nIn `SelectCoinsMinConf`, you already have the target, which does not account for that.",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312515053,312515053,
achow101,2017-07-02T21:26:29Z,"Ah, yes. That is a bug. Thanks for finding that!",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312517972,312517972,
karelbilek,2017-07-03T22:22:25Z,"@achow101 for some reason, when I do simulations either on @Xekyo set (in scala) or on bitcoinjs randomly generated data (with the algo rewritten into javascript), the total fees are actually *lower* when I make the target lower (that is, when I do not include the output cost in the target). So maybe tightening the target rejects more transactions and then the fallbacks somehow make better results",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312743097,312743097,
instagibbs,2017-07-06T17:40:26Z,"@runn1ng if you wouldn't mind, I'd like to know what the difference in rate of change creation for each of those experiments as well.",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-313467518,313467518,
Xekyo,2017-07-06T20:21:22Z,"> [â€¦]the total fees are actually lower when I make the target lower (that is, when I do not include the output cost in the target).\n\n@runn1ng: Um wait. ""Target"" is the amount to be selected. We are talking about the ""cost of change"" parameter that gives the leniency window for the exact match, right? Also, do you mean ""input cost"" instead of ""output cost""?\n\nIt would be lovely if you could ",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-313508338,313508338,
karelbilek,2017-07-11T16:18:45Z,@Xekyo The problem with your experiment is that it's non-deterministic... but maybe I could put there some pre-set random seed,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-314496532,314496532,
karelbilek,2017-07-13T08:13:47Z,"edit: ignore the graphs, see comment below\n\n~~~I am not sure if I should discuss the experiments here, or on murch's repo PRs :)~~~\n\n~~~Anyway. I tried changing the cost of change on your scala code, as I wrote here - https://github.com/Xekyo/CoinSelectionSimulator/pull/8 . Now I tried values from 0 to 100 as percent, and this is the result (note that left axis doesn't start at 0)~~~\n\n",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315005597,315005597,
karelbilek,2017-07-13T10:18:03Z,"edit: ignore the graphs, see comment below\n\n~~~There is still the danger of overfitting to this one case though~~~\n\n~~~If you I try the same at the bitcoinjs example - [defined here](https://github.com/bitcoinjs/coinselect/blob/master/stats/index.js#L9) - small random examples with relatively few utxos - the graph looks completely different, and very dependent on what is a ""backup plan"" in",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315036928,315036928,
karelbilek,2017-07-14T09:44:45Z,"edit: ignore the graphs, see comment below\n\n~~~When I added bnb+min to the moneypot example, I got this result (x is still percentage of money cost)~~~\n\n![chart 2](https://user-images.githubusercontent.com/104945/28207255-47c33440-6889-11e7-9e50-dcfcc444c81e.png)\n\n~~~Again, it's always better to take the ""minimal"" strategy (that is, to sort utxos by value size descending, and then take",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315318545,315318545,
achow101,2017-07-14T19:53:12Z,@runn1ng would you be able to try the strategy with Core's current selector as fallback? The easiest way to do that would be to add/modify the test cases for coin selection.,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315452075,315452075,
Xekyo,2017-07-14T21:52:27Z,"@runn1ng: re random data: I'd surmise that BnB doesn't perform well on small datasets as there are too few possible combinations. That could easily cause the fallback algorithm to dominate.\n\nre moneypot:\nWhat I do find confusing is that your total cost is so much higher than my result with Branch and Bound + Single Random Draw of 58,940,772.30. Were you still running with fixed fees of 10000",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315476847,315476847,
karelbilek,2017-07-15T03:29:55Z,"> What I do find confusing is that your total cost is so much higher than my result with Branch and Bound + Single Random Draw of 58,940,772.30. Were you still running with fixed fees of 10000 satoshi/kB?\n\nThat is weird indeed.\n\nI am running code from your repo. To be sure I reverted all my local changes and I still get 72506973.\n\nWhen I made the correction here https://github.com/Xeky",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315506256,315506256,
karelbilek,2017-07-15T03:31:03Z,I am running the code through `sbt run` in the main directory. I look just at the `total cost` in the resulting csv.,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315506306,315506306,
karelbilek,2017-07-15T03:45:52Z,"I get totally different numbers than in your paper with the other scenarios too. The numbers don't correspond to neither of the three tables, unfortunately.\n\nedit: oooh, that's because I am running ""MoneyPot After LF"", which was the default scenario, but it's actually with additional UTXOs from a previous run. The actual scenario from the paper (the first one) is TestCaseMoneyPotEmpty, right.",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315506901,315506901,
Xekyo,2017-07-15T04:34:53Z,"Yes correct. The Moneypot after LF, is running the MoneyPot scenario starting with the resulting UTXO pool of running it with Largest First selection before.",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315509097,315509097,
karelbilek,2017-07-17T23:27:39Z,"I found out that the [two](https://github.com/Xekyo/CoinSelectionSimulator) [repos](https://github.com/bitcoinjs/coinselect) for coinselect simulation returned different results for the same strategy, so I painstakingly went through both of them and found where they differ... and put tons of of PRs to both, so they now both return the same results with the same fees + setup\n\nThe differences in",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315914004,315914004,
karelbilek,2017-07-17T23:29:04Z,"@Xekyo \n\n> Do I understand correctly that you calculated ""cost of change"" and then took a percentage of that, or is this percentage only on the cost of the input? If you did the former, it appears that using just the cost of an additional output as ""cost of change"" leads to a minimum, considering that 34 bytes is 18.7% of what I proposed as ""cost of change"" with output+input.\n\nHm, that doe",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315914248,315914248,
instagibbs,2017-07-17T23:50:02Z,@runn1ng is there a plausible explanation why not accounting for the full cost of the change is cheaper overall?,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315917437,315917437,
karelbilek,2017-07-18T00:00:19Z,"@achow101 \n\n> @runn1ng would you be able to try the strategy with Core's current selector as fallback? The easiest way to do that would be to add/modify the test cases for coin selection.\n\nHm, I already spent too much time on this... :/ I will see if I have time to look into the bitcoin coin selection tests and how to add benchmarks there, but not promising anything.",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315918964,315918964,
karelbilek,2017-07-18T00:14:42Z,"@instagibbs \n\nI think - and that's a speculation - that it's because the target is ""tighter"", so the BnB will reject more ""lose"" matches and will continue searching until it finds better match. So less fee is spent then, even when some matches are rejected that didn't have to be (and those spend more on fees).\n\nBtw. An interesting thing I just noticed - in the ""small random"" example, there",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315921036,315921036,
karelbilek,2017-08-10T12:11:13Z,"@achow101 frankly, the ""old"" (current) core code seems to complex to me, because it introduces state, I don't understand it enough to make the simulation with the current core code as a backup",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-321533571,321533571,
achow101,2017-08-17T23:00:58Z,I have squashed a few commits and rebased this. I'll work on this some more after the 0.15.0 release.,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-323216732,323216732,
achow101,2017-09-06T21:28:27Z,"I have squashed this even more (by getting a diff and re-committing) and hopefully made each commit a more logical chunk of code.\n\nI have also changed this to use the discard fee rate for the change fee rate. The cost of change is also now calculated with the fee rate for making an output being the effective fee rate (fee rate being used) and the fee rate for spending the change being the disc",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-327617533,327617533,
achow101,2017-09-18T15:45:20Z,I'm not sure what the travis failure here was so I restarted that build.,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-330265119,330265119,
MarcoFalke,2017-09-18T19:22:57Z,"@achow101 Travis failure is due to some weird behavior of travis to merge in latest master, but keep the yaml or config from the past (maybe when the pull was created).\n\nYou might be able to fix it by force pushing the last commit (`EDITOR=true git commit --amend && git push origin bnb-coin -f`) or just rebase on master. ",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-330329194,330329194,
achow101,2017-09-19T01:49:18Z,Rebased and addressed @instagibbs's comments,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-330404321,330404321,
karelbilek,2017-09-27T12:57:33Z,"@achow101 I cannot find it in the comments anymore, but you asked me for the simulation data some time ago\n\nI tried the simulation on two targets.\n\nFirst scenario (moneypot scenario) is I think from here (note - large file; one line is one income/expense)\nhttps://github.com/Xekyo/CoinSelectionSimulator/tree/master/src/main/resources/scenarios\n\nSecond is randomly generated from here ",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-332511894,332511894,
karelbilek,2017-09-30T22:15:28Z,"I am looking at this commit\n\nhttps://github.com/achow101/bitcoin/commit/0fb73ae532aab061d3df0be54579b6d40c1e93ff\n\nI have to say, I don't understand, why are long term fees used in the waste calculation and what exactly does this mean\n\n```\nCCoinControl temp;\ntemp.m_confirm_target = 1008;\nCFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\n`",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-333339484,333339484,
Xekyo,2017-09-30T22:40:39Z,"Pieter pointed out that the algorithm doesn't necessarily find the best solution when it discovers the first solution. However, it was then at first not clear how to make the trade-off between making the input set smaller or reducing the excess in the selection.\n\nThe idea is that during high fee rates, it might be beneficial to the user if a smaller input count is preferred in exchange for a h",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-333340700,333340700,
karelbilek,2017-10-02T22:27:21Z,"I tried my javascript simulations with the additional code (the waste comparation) and it actually had slightly worse results (higher total cost)\n\nBUT it might be some bug in the simulation, I don't have that much time for experimenting right now",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-333683003,333683003,
karelbilek,2017-10-02T22:31:44Z,"Some simulation that actually test the resulting total fees on a given scenario - similar to @Xekyo repo - but on actual bitcoin binary - would be probably nice. So the testing would be on this code and not on re-implementations.\n\nI am thinking how hard would that be on regtest, with the current python qa testing framework.",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-333683867,333683867,
achow101,2017-11-30T17:08:40Z,"Rebased this.\n\nI'll try to fix up some of the fee estimation things wrt segwit.\n\n@runn1ng  I'll see if I can do any sort of simulation stuff.",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-348254949,348254949,
karelbilek,2017-11-30T19:08:41Z,@achow101 I will see what I can do,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-348289112,348289112,
achow101,2017-12-20T06:39:55Z,"I have rebased this and added a new commit that uses an actual prototype change output and gets its size and spend size instead of hardcoding constants.\n\nI finally have the time to work on simulations for this and will be doing so over the next few weeks.\n\n@karel-3d What are the axes of the simulation graphs that you posted earlier?",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-352978556,352978556,
achow101,2017-12-21T20:37:55Z,"See https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-370539486 for updated results\n\n***\n\nI figured out how to run simulations with this. https://github.com/achow101/bitcoin/tree/bnb-simulate contains the modifications and script that I am using to simulate the behavior. It uses the test framework to setup 2 nodes. One node will then mine a bunch of blocks and send money to the ot",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-353452113,353452113,
achow101,2017-12-22T03:07:59Z,"See https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-370539486 for updated results\n\n***\n\nAnother simulation with the same dataset but with a fee of 10 sat/byte instead of 1.\n\n| type | parameters | final value | mean #UTXO | final #UTXO | #received | #spent | #changes created | min change | max change | mean change | stDev of change | total fees | average fees | fees to spend ",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-353511687,353511687,
achow101,2017-12-26T16:56:28Z,"See https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-370539486 for updated results\n\n***\n\nI've done several more simulations. I did simulations at 4 feerates, 1 sat/byte, 10 sat/byte, 100 sat/byte and 500 sat/byte for the 3 moneypot scenarios provided at https://github.com/Xekyo/CoinSelectionSimulator/tree/master/src/main/resources/scenarios.\n\n### Results\n\n#### Derived-1L-",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-353989346,353989346,
achow101,2018-01-11T19:45:03Z,Rebased,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-357039741,357039741,
karelbilek,2018-01-16T13:06:42Z,"@achow101 the axes are - X is how ""tight"" the target is - by which I mean, I took the cost of change and I multiplied it by a factor. So I took cost of change just X% of the cost in the original algorithm.\n\nY is total cost from Murch thesis (what is spent + what it costs to spend the resulting utxos).\n\nBtw. I wrote @Xekyo  it would be nice to make a BIP with this algorithm, so we don't hav",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-357953604,357953604,
achow101,2018-01-22T18:13:57Z,"See https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-370539486 for updated results\n\n***\n\nI have done some more simulations, this time with a variable fee rate. The fee data I am using is pulled from https://bitcoinfees.info/. The fee files are available [here](https://gist.github.com/achow101/44d9e58333d8919e8ad0f6fc7e63d183).\n\nThere are two fee things, one of them has each f",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-359514676,359514676,
achow101,2018-01-26T03:16:16Z,"So apparently there was a bug that was allowing change to still be made even with BnB. The latest commit should fix this, and I think that will significantly change the simulation results.",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-360673104,360673104,
Xekyo,2018-01-26T19:21:29Z,"There is a mismatch here with the ""#changes created"" and ""BnB usage"". Every time you use BnB, there should no change be created.\nI would suspect that the ""excess"" from BnB is not being dropped to the benefits of the fees, but instead put into a change output?\n\nEdit: oh, saw your comment upon send. Good, curious about new results!",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-360879383,360879383,
achow101,2018-02-04T17:27:42Z,"See https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-370539486 for updated results\n\n***\n\nHere are the new simulation results with all of the bugs fixed hopefully:\n\n| Fees file | Simulation File | final value | total sent | total deposited | mean #UTXO | final #UTXO | #received | #spent | #payments sent |#changes created | min change | max change | mean change | stDev of chang",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-362923835,362923835,
instagibbs,2018-02-05T14:16:50Z,@achow101 can you label the rows?,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-363096756,363096756,
achow101,2018-02-05T15:36:20Z,@instagibbs They're all BnB simulations. I moved the fees file and simulations file fields to the left (they were on the right side originally).,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-363121199,363121199,
Xekyo,2018-02-15T00:08:43Z,"@achow101: Row 4 has ""min input set"" of 0, but a transaction must have at least one input.\nWhy do you think did the BnB usage almost halve? Are you using the solution of the RandomSelector if it has a lower waste metric? Otherwise, I'd expect the BnB usage to increase with higher fees since the target window for a solution without a change output increases.\n\nThe minChange of 0.00005428 also ",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-365787138,365787138,
achow101,2018-02-15T03:04:05Z,"> Row 4 has ""min input set"" of 0, but a transaction must have at least one input.\n\nThat's strange. I'll rerun that simulation.\n\n> Why do you think did the BnB usage almost halve?\n\nI think that's a consequence of the bug I fixed. The BnB usage in the previous simulations was the number of times that BnB was hit, but BnB wasn't actually used for the actual coin selection; the normal norm",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-365813560,365813560,
achow101,2018-02-15T18:56:06Z,"See https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-370539486 for updated results\n\n***\n\n@Xekyo These are the new results for that one simulation. I think that was just a spurious error:\n\n| Fees file | Simulation File | final value | total sent | total deposited | mean #UTXO | final #UTXO | #received | #spent | #payments sent |#changes created | min change | max change | mean",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-366026194,366026194,
achow101,2018-03-05T19:43:06Z,"All of the valid results for varying fee rate simulations, but readable\n\n| Type | Fees file | Simulation File | final value | mean #UTXO | final #UTXO | #received | #spent | #changes created | min change | max change | mean change | stDev of change | total fees | average fees | total cost | min input set | max input set | mean size of input set | stdev of input set size | BnB Usage |\n| --- |",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-370539486,370539486,
Xekyo,2018-03-05T20:42:25Z,"> We still need to take into account the waste though; two outputs with the same effective value could still have different waste values which may make one output more desireable than another even with the same values. When we backtrack, we aren't always cutting off a branch; we could have backtracked in order to find something else with a lower waste value.\n\nOkay: We should not allow two outp",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-370557819,370557819,
instagibbs,2018-03-07T18:32:44Z,needs rebase,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-371237488,371237488,
achow101,2018-03-07T18:48:15Z,Rebased,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-371242580,371242580,
instagibbs,2018-03-08T15:14:15Z,"linter failing the tests:\n\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an\n^---- failure generated from contrib/devtools/lint-whitespace.sh",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-371516771,371516771,
morcos,2018-03-08T20:23:12Z,c1f310c doesn't compile because you changed the arguments to `SelectCoins` but didn't change the call sites until the next two commits.,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-371612545,371612545,
achow101,2018-03-08T21:28:37Z,"@morcos \n\n> c1f310c doesn't compile because you changed the arguments to SelectCoins but didn't change the call sites until the next two commits.\n\nThat was done in order to make the changes clearer and easier to follow. Otherwise it would be very large commit that is not reviewer friendly IMO.",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-371630412,371630412,
ryanofsky,2018-03-09T16:07:08Z,"> That was done in order to make the changes clearer and easier to follow. Otherwise it would be very large commit that is not reviewer friendly IMO.\n\nMy suggestion to move code to coinselection.cpp instead of copying it in https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172894613 would make a combined SelectCoins / CreateTransaction commit smaller, and I think would make it easier t",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-371856726,371856726,
sipa,2018-03-09T16:50:27Z,"@achow101 We have a policy that every commit in a pull request must compile and pass tests. This helps with review, if you know you can assume that every incremental change is a fully-functional codebase, and there aren't things you need to understand from future commits to see how things fit together. It also helps with git bisects, making sure that things don't accidentally get broken and unbrok",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-371870350,371870350,
achow101,2018-03-10T00:58:25Z,"I've addressed a lot of @ryanofsky's comments.\n\nI'm going to squash, rebase, and re-commit this in order to make each commit compilable and better organized. The original commits will be saved here: https://github.com/achow101/bitcoin/tree/bnb-orig. The ending diff between what I am going to do and the original should be the same, just reorganized.",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-371987401,371987401,
achow101,2018-03-10T06:58:56Z,"I have gone through and reorganized the commits. Each commit should now be individually compilable. Additionally I have taken @ryanofsky's suggestion of moving the code for the KnapsackSolver instead of copying it. The commits that change SelectCoins, SelectCoinsMinConf, and CreateTransaction to support BnB have been combined into one large-ish commit.\n\nThe code should be functionally the same",https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-372008560,372008560,
eklitzke,2018-03-10T15:44:38Z,I will also try to run this locally to test it out.,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-372039446,372039446,
achow101,2018-03-10T17:19:47Z,The random failure thing is part of the tests for the old coinselection stuff and is unrelated to BnB.,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-372046329,372046329,
achow101,2018-03-13T16:47:12Z,Squashed,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-372735355,372735355,
instagibbs,2018-03-13T17:30:00Z,utACK https://github.com/bitcoin/bitcoin/pull/10637/commits/73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-372750561,372750561,
ghost,2018-03-15T00:22:34Z,noice!,https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-373218747,373218747,
Xekyo,2017-06-20T18:46:04Z,"Have you filtered utxo_pool to exclude utxo's that have a net-neg value? Otherwise you're underestimating the lookahead here. To get an accurate figure for what you may still collect downtree, you should only add `utxo.txout.nValue >=0`",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123062378,123062378,src/wallet/coinselection.cpp
Xekyo,2017-06-20T19:05:57Z,"AFAICT utxo_pool has : 4, 3, 2, & 1. Since you're exploring randomly selecting 5 then has two possible solutions: 4+1, 3+2.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123067487,123067487,src/wallet/test/coinselector_tests.cpp
Xekyo,2017-06-20T19:08:54Z,"Under above assumptions, there is two solutions here as well: 5+4+1, or 5+3+2.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123068150,123068150,src/wallet/test/coinselector_tests.cpp
Xekyo,2017-06-20T19:16:06Z,"It seems to me that you're also collecting coins that have a net-negative here. This will cause your lookahead to be underestimated, unless you cater to that case when calculating the remainder.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123069730,123069730,src/wallet/wallet.cpp
Xekyo,2017-06-20T19:22:13Z,"I would perhaps add a test that checks what happens if the utxo_pool includes a UTXO that is more costly to spend than its own value. As far as I can tell, this would currently reduce your lookahead and may cause a premature search failure.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123071057,123071057,src/wallet/test/coinselector_tests.cpp
instagibbs,2017-06-20T19:25:39Z,@gmaxwell has concerns that Core wallet is only doing semi-sane utxo handling by spending these. With exact match + sane backoff algorithm this concern may be alleviated?,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123071898,123071898,src/wallet/coinselection.cpp
achow101,2017-06-20T19:28:50Z,It is forced to be include first in these tests so the solution is deterministic.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123072635,123072635,src/wallet/test/coinselector_tests.cpp
achow101,2017-06-20T19:28:56Z,It is forced to be include first in these tests so the solution is deterministic.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123072655,123072655,src/wallet/test/coinselector_tests.cpp
achow101,2017-06-20T19:31:06Z,"Indeed, that may be a problem. I will add that in as it is still good to have additional checks here even if done elsewhere.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123073108,123073108,src/wallet/coinselection.cpp
gmaxwell,2017-06-20T19:49:19Z,"I don't have much of a concern here about the 0/negative effective value inputs: Failing to select negative effective value inputs for an exact match won't lead to a UTXO count inflation, because changeless transactions are by definition strictly UTXO reducing.\n",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123077157,123077157,src/wallet/coinselection.cpp
Xekyo,2017-06-20T19:51:04Z,"@instagibbs: I'm not completely opposed to spending net-negative UTXO, my concern here is primarily that it actually may cause the lookahead to be underestimated causing valid solutions not to be found.\n\nI realize now that the knapsack algorithm would also not select uneconomic UTXO anymore, as if it had selected enough value before it reached them it would have already returned the set, and i",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123077607,123077607,src/wallet/coinselection.cpp
instagibbs,2017-06-20T19:58:50Z,"I am not so concerned, was making sure concerns are brought up.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123079426,123079426,src/wallet/coinselection.cpp
Xekyo,2017-06-20T21:01:02Z,"This assumes that the input will be spent at a feerate at least as high as the current. This was a valid assumption in my thesis, as I was using a fixed fee rate. I'm not sure whether this a valid assumption for realnet transaction selection, as we've literally seen fees between 8-540 sat/byte in the past two weeks. We might want to consider discounting the cost of the input slightly.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123094400,123094400,src/wallet/wallet.cpp
instagibbs,2017-06-20T21:01:42Z,Depends on user time preferences. Could be an option that is set for those who regularly consolidate.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123094567,123094567,src/wallet/wallet.cpp
achow101,2017-06-20T23:33:02Z,For now I think it is fine to use the current feerate.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123122385,123122385,src/wallet/wallet.cpp
Xekyo,2017-06-21T21:38:01Z,"Here's a unexpected behavior in my algorithm: if there is a number of input combinations whose `value_ret` all exceed the target_value when `tries == 0` is passed, tries can go into the negative.\n\nThe tries check should be moved to the top of the checks.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123372860,123372860,src/wallet/coinselection.cpp
achow101,2017-06-21T22:49:17Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123385119,123385119,src/wallet/coinselection.cpp
gmaxwell,2017-06-22T18:45:22Z,"@xekyo we should assume that it would be terrible unless someone can show that it will not cause another massive UTXO bloat event... but thats offtopic here, as I don't think anyone has this concern with exact matches.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123592418,123592418,src/wallet/coinselection.cpp
gmaxwell,2017-06-22T18:53:42Z,not correct for segwit.    If this code ends up being changed to follow pieter's suggestion of dividing the rate by two or three it should be bounded by the min relay fee. (I'm not super fond of that suggestion).,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123594171,123594171,src/wallet/wallet.cpp
gmaxwell,2017-06-22T19:11:00Z,"Using nFeeRet to signal BNB usage is ugly.  I think you shouldn't pass in nFeeRet at all, but have some explicit signal (e.g. boolean return) for BNB usage and if its set; after select coins set nFeeRet to nChange and use the same signal to bypass this branch.\n\nI also think this condition is slightly incorrect but benign in the current code, lets say our configured feerate were zero: now BNB c",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123598122,123598122,src/wallet/wallet.cpp
karelbilek,2017-07-01T11:50:14Z,"The utxos with negative effective values are filtered anyway in `wallet/wallet.cpp`, which is the only place (except for tests) from where `SelectCoinsBnB` is called.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125161070,125161070,src/wallet/coinselection.cpp
instagibbs,2017-07-03T15:00:44Z,I think it may be better to directly check on serialized size of an output based on that pubkey,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125308899,125308899,src/wallet/wallet.cpp
instagibbs,2017-07-03T15:09:58Z,just set it when declaring the variable two lines above and make it const,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125310974,125310974,src/wallet/wallet.cpp
instagibbs,2017-07-03T15:16:39Z,"right now it only uses one or the other, so `!only_knapsack` means `used_bnb`. I assume this interface is future-looking to where we may try multiple strategies?",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125312450,125312450,src/wallet/wallet.cpp
instagibbs,2017-07-03T15:22:17Z,"Since we're moving it already, there's no reason to not just move this block outside the loop, right? See: https://github.com/bitcoin/bitcoin/pull/10360/files#diff-b2bb174788c7409b671c46ccc86034bdR2476",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125313640,125313640,src/wallet/wallet.cpp
instagibbs,2017-07-03T15:33:39Z,this should be `used_bnb`? Kind of unclear what the difference is currently.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125316002,125316002,src/wallet/wallet.cpp
instagibbs,2017-07-03T16:20:38Z,Add a comment saying this triggers BnB to be the only type tried when true,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125324281,125324281,src/wallet/wallet.cpp
instagibbs,2017-07-03T17:24:48Z,"if we're going to change it later to something without a default/dynamic value, maybe just get rid of the default arg and pass it each time.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125332737,125332737,src/wallet/wallet.h
instagibbs,2017-07-03T17:25:34Z,"perhaps note it doesn't have the maxtxfee check inside it, making it slightly asymmetrical to the total fee one.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125332843,125332843,src/wallet/wallet.h
achow101,2017-07-03T17:58:29Z,"The idea behind this was to have BnB be just strictly on top of the current behavior, and separating it like this makes that possible. The first time through the loop uses BnB, but then every time after that uses only the current selector. The loop behavior also stays the same since `nFeeRet` will remain 0 if the BnB fails.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125336958,125336958,src/wallet/wallet.cpp
karelbilek,2017-07-18T18:25:12Z,"This line never fires.\n\nIt never happens, that an utxo is at the same time in an exclusion branch (which is what `.second` does) and is also selected (what `.first` does). Which makes sense; you never at the same time select and not select an utxo :)\n\nWith all my simulations, this line never seems to fire (when I rewrote this to JS).\n\nSo the other line after `if` can also be deleted.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128056631,128056631,src/wallet/coinselection.cpp
karelbilek,2017-07-18T18:31:50Z,"I also think that `.second` is not needed at all; all the information necessary is in the `first` and depth; the only situation where `.first != !(.second)` is after we backtrack here, but the information in `.second` is useless anyway (since we will change it anyway before we backtrack to it again).",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128058314,128058314,src/wallet/coinselection.cpp
achow101,2017-07-18T18:36:18Z,Right. That appears to be a relic of when this randomly selected which branch to try first before I changed it to always try including first.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128059347,128059347,src/wallet/coinselection.cpp
karelbilek,2017-07-18T19:53:40Z,This is never true here. `done` is never true when `backtrack` is true. ([Istanbul](https://istanbul.js.org/) caught that :)),https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128078130,128078130,src/wallet/coinselection.cpp
karelbilek,2017-07-18T19:55:34Z,I mean `done` is never true and this block always happens,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128078564,128078564,src/wallet/coinselection.cpp
Xekyo,2017-07-18T20:34:02Z,This block doesn't happen when `backtrack` is false and `done` is true which happens when a solution is found.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128087609,128087609,src/wallet/coinselection.cpp
karelbilek,2017-07-18T20:36:44Z,"in that case, the `while` cycle terminates before that",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128088235,128088235,src/wallet/coinselection.cpp
karelbilek,2017-07-18T20:38:58Z,"In the `if` at the start of the `while` cycle, either `backtrack` or `done` is set, never both. We got here only when `backtrack == true`, so `done` cannot be true.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128088778,128088778,src/wallet/coinselection.cpp
instagibbs,2017-09-18T19:51:55Z,just `empty()` seems more straight forward,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139522490,139522490,src/wallet/coinselection.cpp
instagibbs,2017-09-18T19:53:48Z,"define ""remaining"", or drop the comment",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139522887,139522887,src/wallet/coinselection.cpp
instagibbs,2017-09-18T19:54:15Z,to find what?,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139522984,139522984,src/wallet/coinselection.cpp
instagibbs,2017-09-18T19:54:47Z,`remaining_tries`?,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139523092,139523092,src/wallet/coinselection.cpp
instagibbs,2017-09-18T19:56:24Z,define what second branch means?,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139523467,139523467,src/wallet/coinselection.cpp
instagibbs,2017-09-18T20:23:32Z,"ACK on @runn1ng 's comment. Impossible to be ""done"" and require backtracking.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139530044,139530044,src/wallet/coinselection.cpp
instagibbs,2017-09-18T20:32:23Z,`nOut` or something better please,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532186,139532186,src/wallet/wallet.h
instagibbs,2017-09-18T20:33:29Z,"Some asymmetry now with SC and SCMC, the former having one ""change size"" parameter, the other two. `change_output_size` to match.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532452,139532452,src/wallet/wallet.cpp
instagibbs,2017-09-18T20:34:31Z,"this is getting more important now with segwit, and the fact that we have two related optional arguments",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532715,139532715,src/wallet/wallet.h
instagibbs,2017-09-18T20:34:51Z,priority is removed; revisit?,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532795,139532795,src/wallet/wallet.h
instagibbs,2017-09-18T20:46:50Z,parens around the value being subtracted would be nice ,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139535695,139535695,src/wallet/coinselection.cpp
instagibbs,2017-09-18T20:47:06Z,parens around the value being subtracted would be nice,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139535771,139535771,src/wallet/coinselection.cpp
instagibbs,2017-09-18T21:00:28Z,"Also, note that this value is the ""excess"" being added and removed later, in contrast to the input-selection waste (wonder if we can find a good name for this cost)",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139539124,139539124,src/wallet/coinselection.cpp
instagibbs,2017-09-18T21:09:04Z,"nit, can you rename it `input_fee_vec`",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139541172,139541172,src/wallet/coinselection.cpp
achow101,2017-09-19T01:43:40Z,You wrote it (I took it from one of your commits); revisit it for me :D,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139580709,139580709,src/wallet/wallet.h
achow101,2017-09-19T01:47:04Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581043,139581043,src/wallet/coinselection.cpp
achow101,2017-09-19T01:47:12Z,Done here and elsewhere,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581052,139581052,src/wallet/coinselection.cpp
achow101,2017-09-19T01:47:17Z,done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581060,139581060,src/wallet/coinselection.cpp
achow101,2017-09-19T01:47:24Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581074,139581074,src/wallet/coinselection.cpp
achow101,2017-09-19T01:47:35Z,Done; renamed to `lookahead`,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581091,139581091,src/wallet/coinselection.cpp
achow101,2017-09-19T01:47:40Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581104,139581104,src/wallet/coinselection.cpp
achow101,2017-09-19T01:47:46Z,done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581116,139581116,src/wallet/wallet.h
achow101,2017-09-19T01:47:58Z,done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581138,139581138,src/wallet/wallet.cpp
achow101,2017-09-19T01:48:03Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581141,139581141,src/wallet/coinselection.cpp
achow101,2017-09-19T01:48:07Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581152,139581152,src/wallet/coinselection.cpp
Xekyo,2017-09-30T23:27:29Z,"I believe this must be:\n\n`curr_waste > best_waste && (fee_vec[depth] - long_term_fee_vec[depth]) > 0`\n\nOtherwise, you'd be prematurely stopping when a transaction is created with fees below the long-term fee estimate.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142017311,142017311,src/wallet/coinselection.cpp
karelbilek,2017-10-01T21:15:23Z,"Maybe I misunderstand what `long_term_fee` is, but how can it be lower than long term fee estimate? I thought that long term fee looks for confirmation target 1008, thus all smart fee estimates will be only bigger than the long term estimate...",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142040853,142040853,src/wallet/coinselection.cpp
ryanofsky,2017-10-02T16:45:29Z,"In commit ""Coin selection function for Branch and Bound coin selection algo""\n\nMaybe drop this and use `descending` instead of sorting in ascending order and reversing.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142192418,142192418,src/wallet/coinselection.cpp
ryanofsky,2017-10-02T16:57:57Z,"Note for reviewers: This function is not new, just moved from wallet.cpp.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142195624,142195624,src/wallet/coinselection.cpp
ryanofsky,2017-10-02T18:16:55Z,"Here and throughout the PR, probably would be better to pass CInputCoin by const reference to avoid copying the struct. Probably want `for (const CInputCoin& utxo : utxo_pool)` instead of `for (CInputCoin utxo : utxo_pool)` as well.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142215029,142215029,src/wallet/coinselection.cpp
ryanofsky,2017-10-02T18:24:26Z,Don't you need to update `input_fee_vec` and `long_term_fee_vec` during the sort? Maybe it would be simpler to make `input_fee` and `long_term_fee` new fields in `CInputCoin`.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142216891,142216891,src/wallet/coinselection.cpp
ryanofsky,2017-10-02T18:27:33Z,Could declare depth as size_t to avoid cast.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142217676,142217676,src/wallet/coinselection.cpp
ryanofsky,2017-10-02T18:28:44Z,Could use .at() consistently instead of .at() and [],https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142217987,142217987,src/wallet/coinselection.cpp
ryanofsky,2017-10-02T18:38:48Z,Should just implement original `GetMinimumFee` & `GetRequiredFee` functions in terms of these new feerate functions. Not good to duplicate so much code.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142220571,142220571,src/wallet/fees.cpp
ryanofsky,2017-10-02T18:44:34Z,Note for reviewers: Again this code is mostly not new. It's moved from the previous `SelectCoinsMinConf` implementation in wallet.cpp,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142222080,142222080,src/wallet/coinselection.cpp
ryanofsky,2017-10-02T18:46:38Z,"This could use a comment saying what the arguments are and what bnb stands for, with maybe a sentence or two describing the algorithm, too.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142222627,142222627,src/wallet/coinselection.h
instagibbs,2017-10-02T19:04:35Z,"`GetMinimumFee` has `maxTxFee` logic that this doesn't, so the wrapper would have to include that.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142227108,142227108,src/wallet/fees.cpp
achow101,2017-10-02T20:10:37Z,@Xekyo I agree with @runn1ng. I don't see how the long term fee can be less than the current fee.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142241789,142241789,src/wallet/coinselection.cpp
achow101,2017-10-03T01:58:58Z,Done.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298179,142298179,src/wallet/coinselection.cpp
achow101,2017-10-03T01:59:05Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298191,142298191,src/wallet/coinselection.cpp
achow101,2017-10-03T01:59:42Z,"Yeah, I do... I took your suggestion and added fields to `CInputCoin` for that coin's `fee` and `long_term_fee` values.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298243,142298243,src/wallet/coinselection.cpp
achow101,2017-10-03T02:00:02Z,"`depth` can be negative, so I don't think I an do that. It is only negative when all branches in the tree are exhausted.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298276,142298276,src/wallet/coinselection.cpp
achow101,2017-10-03T02:00:38Z,Done.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298342,142298342,src/wallet/coinselection.cpp
achow101,2017-10-03T02:00:58Z,I have added a very long comment describing what this does and the arguments of the function.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298376,142298376,src/wallet/coinselection.h
Xekyo,2018-03-05T20:49:07Z,"Just curious, why 2012-2016?",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172323411,172323411,src/wallet/coinselection.cpp
Xekyo,2018-03-05T20:50:43Z,We may need to additionally sort by waste here.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172323879,172323879,src/wallet/coinselection.cpp
Xekyo,2018-03-05T21:01:59Z,"""within the current threshold"" -> within the target range?",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172326972,172326972,src/wallet/coinselection.cpp
Xekyo,2018-03-05T21:12:31Z,Nit: descending order *by what metric* ;),https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172329752,172329752,src/wallet/coinselection.cpp
Xekyo,2018-03-05T22:07:37Z,"Do we have a test that checks whether this behaves correctly for fee rates below the longterm expected fee rate? (I seem to remember that we discussed that before, and we came to the conclusion that it is correct, but if we had a test I'd be more comfortable.)",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172345389,172345389,src/wallet/coinselection.cpp
Xekyo,2018-03-05T22:16:33Z,"Why are you recalculating value_ret, when you've been tracking it above before?",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172347860,172347860,src/wallet/coinselection.cpp
Xekyo,2018-03-05T22:23:23Z,"typo: Aalways\n\nNote to self, got up to here.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172349615,172349615,src/wallet/fees.cpp
achow101,2018-03-05T22:45:59Z,Why?,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172355279,172355279,src/wallet/coinselection.cpp
achow101,2018-03-05T22:48:55Z,The `value_ret` above is not necessarily our best set. It is used for tracking our work during the selection so it may not actually be the value for the selection we want to use. It should probably be a different variable.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172355917,172355917,src/wallet/coinselection.cpp
achow101,2018-03-05T22:50:33Z,Fixed,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172356271,172356271,src/wallet/fees.cpp
achow101,2018-03-05T22:50:38Z,fixed,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172356288,172356288,src/wallet/coinselection.cpp
achow101,2018-03-05T22:50:44Z,Fixed,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172356311,172356311,src/wallet/coinselection.cpp
achow101,2018-03-05T22:50:54Z,Changed to 2017,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172356341,172356341,src/wallet/coinselection.cpp
Xekyo,2018-03-06T16:08:41Z,"Yeah, let's make it two different variables with clear names.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172568830,172568830,src/wallet/coinselection.cpp
Xekyo,2018-03-06T18:13:55Z,Withdrawn after personal conversation.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172609876,172609876,src/wallet/coinselection.cpp
instagibbs,2018-03-06T19:08:59Z,waste is a tie-breaker or a short-circuit. Shouldn't need it.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172626559,172626559,src/wallet/coinselection.cpp
instagibbs,2018-03-06T19:11:43Z,this should be a constant,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172627337,172627337,src/wallet/coinselection.cpp
instagibbs,2018-03-06T19:14:27Z,just say effective value again to clear up ambiguity.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172628072,172628072,src/wallet/coinselection.cpp
instagibbs,2018-03-06T19:52:27Z,This should just be a check after calculating the original value. Has no additional checking power here.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172639370,172639370,src/wallet/coinselection.cpp
achow101,2018-03-06T19:59:27Z,It can't be a constant because it is being decremented.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172641358,172641358,src/wallet/coinselection.cpp
achow101,2018-03-06T20:02:35Z,Fixed,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172642198,172642198,src/wallet/coinselection.cpp
instagibbs,2018-03-06T20:03:19Z,"I meant static constant, but meh",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172642410,172642410,src/wallet/coinselection.cpp
achow101,2018-03-06T20:03:21Z,Removed. Also compacted the next 2 `else if`s with this one to make one large `else if` with `or`.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172642422,172642422,src/wallet/coinselection.cpp
morcos,2018-03-06T20:24:14Z,duplicate of prior line,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172648187,172648187,src/wallet/coinselection.cpp
morcos,2018-03-06T20:30:15Z,Agree on removing this unnecessary check,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172649722,172649722,src/wallet/coinselection.cpp
morcos,2018-03-06T20:32:22Z,"actually can remove both of these, `selection.at(depth)` is already false.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172650304,172650304,src/wallet/coinselection.cpp
Xekyo,2018-03-06T20:37:05Z,duplicate line,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172651597,172651597,src/wallet/coinselection.cpp
morcos,2018-03-06T20:38:48Z,"I'm not loving the way we track depth, it gets a bit confusing to make sure it stays in bounds.  I don't know if it's possible to hit in practice, but if you are trying to pay 0 total value, then you'll end up here trying to do `selection.at(-1)`.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172652011,172652011,src/wallet/coinselection.cpp
Xekyo,2018-03-06T20:39:09Z,I thought you're filtering effective values to be strictly bigger than zero.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172652108,172652108,src/wallet/coinselection.cpp
achow101,2018-03-06T20:52:47Z,"I agree, but we shouldn't have a 0 value target in practice. I could just add a check to make sure that `depth` is greater than 0 before decrementing it.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172655805,172655805,src/wallet/coinselection.cpp
achow101,2018-03-06T20:52:51Z,Fixed,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172655824,172655824,src/wallet/coinselection.cpp
morcos,2018-03-06T22:07:59Z,nit: spacing,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172677004,172677004,src/wallet/coinselection.cpp
morcos,2018-03-06T22:11:22Z,typo: has not had,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172677957,172677957,src/wallet/coinselection.cpp
instagibbs,2018-03-06T22:16:47Z,"This is wrong, we need to look for segwit spends directly, then decrements by 1 virtual byte, since these are witness bytes.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172679432,172679432,src/wallet/wallet.cpp
morcos,2018-03-06T22:18:07Z,"yeah we should do something.\nmaybe change while loop to:\n`while (depth >= 0 && !selection.at(depth)) {`\nand then take the `if (depth < 0)` check out of the while loop and put it afterwards, and then it's \n```\nif (depth < 0) {\n    done = true;\n}\nelse { \n...\n}\n```\n\nand then you can get rid of the `if (!done)`\nand in fact you could actually break instead of setting done=tr",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172679819,172679819,src/wallet/coinselection.cpp
morcos,2018-03-06T22:43:01Z,ultra nit: variable name,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172685998,172685998,src/wallet/coinselection.cpp
morcos,2018-03-06T22:43:56Z,"Comment wrong.  ""Explored all possible solutions"", not ""No solution""",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172686204,172686204,src/wallet/coinselection.cpp
instagibbs,2018-03-07T13:43:54Z,"I think this is redundant with https://github.com/bitcoin/bitcoin/pull/10637/commits/f41f751f2e3ad69470624a6f55db3c1683712182#diff-491a507b32a78f89c3e066deedc98171R72\n\nperhaps move that check here, to avoid deferencencing an invalid iterator.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172844607,172844607,src/wallet/coinselection.cpp
achow101,2018-03-07T13:49:12Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172845995,172845995,src/wallet/coinselection.cpp
achow101,2018-03-07T13:49:15Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172846015,172846015,src/wallet/coinselection.cpp
achow101,2018-03-07T13:50:07Z,Changed,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172846213,172846213,src/wallet/coinselection.cpp
achow101,2018-03-07T13:50:12Z,Fixed,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172846242,172846242,src/wallet/coinselection.cpp
instagibbs,2018-03-07T15:17:25Z,"`bool use_bnb = nSubtractFeeFromAmount == 0`\n\nthen you can remove the else case later.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172875038,172875038,src/wallet/wallet.cpp
Xekyo,2018-03-07T15:30:49Z,Nit: Please add spaces around plus in your code.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172880111,172880111,src/bench/coin_selection.cpp
ryanofsky,2018-03-07T16:09:31Z,"In commit ""Copy KnapsackSolver coin selection code to coinselection.cpp"" (5e64d67dc2bf4961a7efc7e3e160fd2629072a20)\n\nIt would be a little easier to confirm there are no unintentional changes in behavior if this commit moved code instead of copying it. Doing this would also make the later ""Have SelectCoinsMinConf and SelectCoins use BnB or Knapsack"" (f93ae0c1d3476bfe7d3460d46179998eeda0cd46) co",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172894613,172894613,src/wallet/coinselection.cpp
Xekyo,2018-03-07T16:22:42Z,"I'd like to suggest the following for the above description:\n\n\nThis is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The algorithm uses a depth-first search on a binary tree. In the binary tree, each node ",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172899277,172899277,src/wallet/coinselection.cpp
instagibbs,2018-03-07T16:35:55Z,"s/unexlored/unexplored/\n\ns/Further, it is unnecessary to test equivalent combinations./Further, it is unnecessary to test equivalent effective value combinations./\n\ns/This allows to skip/This allows us to skip/\n\nACK otherwise",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172903837,172903837,src/wallet/coinselection.cpp
Xekyo,2018-03-07T16:55:01Z,"This comment is sort of outdated. How about:\n\n> Walk backwards to find the last included UTXO that still needs to have its omission branch traversed.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172910342,172910342,src/wallet/coinselection.cpp
instagibbs,2018-03-07T17:45:37Z,"this is not a TODO, if there is no coin selection to be had, you cannot do coin selection.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172926362,172926362,src/wallet/wallet.cpp
achow101,2018-03-07T18:48:03Z,Using this,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172945621,172945621,src/wallet/coinselection.cpp
achow101,2018-03-07T18:48:08Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172945652,172945652,src/wallet/coinselection.cpp
achow101,2018-03-07T18:48:12Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172945685,172945685,src/wallet/wallet.cpp
eklitzke,2018-03-07T21:12:10Z,nit: should use size_t,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172986039,172986039,src/wallet/coinselection.cpp
eklitzke,2018-03-07T21:12:28Z,nit: size_t,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172986121,172986121,src/wallet/coinselection.cpp
eklitzke,2018-03-07T21:14:42Z,"These two lines are equivalent to (but less efficient than):\n\n```c++\nstd::vector<bool> selection(utxo_pool.size());\n```",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172986731,172986731,src/wallet/coinselection.cpp
eklitzke,2018-03-07T21:15:14Z,Please use doxygen docstring format.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172986873,172986873,src/wallet/coinselection.cpp
eklitzke,2018-03-07T21:15:58Z,"""stuff""?",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172987077,172987077,src/wallet/coinselection.cpp
eklitzke,2018-03-07T21:17:13Z,"This loop can be replaced with:\n\n```c++\nconst CAmount lookahead = std::accumulate(utxo_pool.begin(), utxo_pool.end(), 0);\n```",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172987408,172987408,src/wallet/coinselection.cpp
eklitzke,2018-03-07T21:20:40Z,nit: size_t,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172988243,172988243,src/wallet/coinselection.cpp
eklitzke,2018-03-07T21:24:11Z,nit: end this sentence with a period,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172989213,172989213,src/wallet/fees.h
eklitzke,2018-03-07T21:24:24Z,nit: end this sentence with a period,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172989274,172989274,src/wallet/fees.h
MarcoFalke,2018-03-08T15:23:58Z,Trainling whitespace causes a travis failure.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173190409,173190409,src/wallet/coinselection.cpp
ryanofsky,2018-03-08T17:49:36Z,"In commit ""Calculate and store the number of bytes required to spend an input"" (dcf6d17c9269dcba1233ca696296ed8cee3ea3bf)\n\ns/signatures/signature",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173237077,173237077,src/wallet/wallet.cpp
ryanofsky,2018-03-08T18:00:16Z,"In commit ""Calculate and store the number of bytes required to spend an input"" (dcf6d17c9269dcba1233ca696296ed8cee3ea3bf)\n\nCan you add a comment saying when this is condition is expected to happen?",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173240105,173240105,src/wallet/wallet.cpp
ryanofsky,2018-03-08T18:28:12Z,"In commit ""Calculate and store the number of bytes required to spend an input"" (dcf6d17c9269dcba1233ca696296ed8cee3ea3bf)\n\nMaybe add a comment here to explain scriptWitness part, like ""scriptWitness size is added here because witnesses and txins are split up in segwit serialization.""",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173247749,173247749,src/consensus/validation.h
ryanofsky,2018-03-08T18:32:38Z,"In commit ""Calculate and store the number of bytes required to spend an input"" (dcf6d17c9269dcba1233ca696296ed8cee3ea3bf)\n\nSomehow `wallet` variables in the old code are getting replaced by `pWallet` variables in the new code (probably a bad rebase).",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173249052,173249052,src/wallet/wallet.cpp
ryanofsky,2018-03-08T18:42:42Z,"In commit ""Calculate and store the number of bytes required to spend an input"" (dcf6d17c9269dcba1233ca696296ed8cee3ea3bf)\n\nCould just make this an assert()",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173251858,173251858,src/wallet/wallet.cpp
ryanofsky,2018-03-08T18:46:43Z,"In commit ""Calculate and store the number of bytes required to spend an input"" (dcf6d17c9269dcba1233ca696296ed8cee3ea3bf)\n\nWould be good to add `&` to avoid copying the vector.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173253078,173253078,src/wallet/wallet.cpp
ryanofsky,2018-03-08T18:49:22Z,"In commit ""Calculate and store the number of bytes required to spend an input"" (dcf6d17c9269dcba1233ca696296ed8cee3ea3bf)\n\nMay want to mention this can be -1.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173253840,173253840,src/wallet/wallet.h
ryanofsky,2018-03-08T18:55:35Z,"In commit ""Calculate and store the number of bytes required to spend an input"" (dcf6d17c9269dcba1233ca696296ed8cee3ea3bf)\n\nWould be good to name `GetTxOutSpendSize` consistently with `CalculateMaximumSignedTxSize()` since they are basically doing the same thing. Maybe `CalculateMaximumSignedInputSize`.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173255562,173255562,src/wallet/wallet.cpp
ryanofsky,2018-03-08T19:10:00Z,"In commit ""Add a GetMinimumFeeRate function which is wrapped by GetMinimumFee"" (b68ce5a0e638c47140f350cbc40f9cfc85fb4c37)\n\nCould s/fee/fee rate/",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173259772,173259772,src/wallet/fees.h
morcos,2018-03-08T19:28:33Z,"Huh?  \nThere is still coin selection if you have preset inputs.  Your preset inputs may not be sufficient, it just means use at least these coins.\n",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173265229,173265229,src/wallet/wallet.cpp
instagibbs,2018-03-08T19:35:19Z,@morcos in this case the user has selected to not allow any other inputs?,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173267153,173267153,src/wallet/wallet.cpp
achow101,2018-03-08T19:35:53Z,Fixed,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173267300,173267300,src/wallet/coinselection.cpp
morcos,2018-03-08T19:40:48Z,oops,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173268738,173268738,src/wallet/wallet.cpp
achow101,2018-03-08T21:25:57Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296242,173296242,src/wallet/coinselection.cpp
achow101,2018-03-08T21:26:00Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296258,173296258,src/wallet/coinselection.cpp
achow101,2018-03-08T21:26:10Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296305,173296305,src/wallet/coinselection.cpp
achow101,2018-03-08T21:26:21Z,Made clearer about what stuff is,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296356,173296356,src/wallet/coinselection.cpp
achow101,2018-03-08T21:26:25Z,done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296378,173296378,src/wallet/coinselection.cpp
achow101,2018-03-08T21:26:51Z,This doesn't work since utxo_pool contains CInputCoins and not ints,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296510,173296510,src/wallet/coinselection.cpp
achow101,2018-03-08T21:27:00Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296545,173296545,src/wallet/wallet.cpp
achow101,2018-03-08T21:27:05Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296570,173296570,src/wallet/wallet.cpp
achow101,2018-03-08T21:27:10Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296596,173296596,src/consensus/validation.h
achow101,2018-03-08T21:27:15Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296613,173296613,src/wallet/wallet.cpp
achow101,2018-03-08T21:27:32Z,How so?,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296699,173296699,src/wallet/wallet.cpp
achow101,2018-03-08T21:27:36Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296720,173296720,src/wallet/wallet.cpp
achow101,2018-03-08T21:27:41Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296735,173296735,src/wallet/wallet.h
achow101,2018-03-08T21:27:45Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296756,173296756,src/wallet/wallet.cpp
achow101,2018-03-08T21:27:50Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296777,173296777,src/wallet/fees.h
achow101,2018-03-08T21:31:14Z,Done (I think),https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173297756,173297756,src/wallet/coinselection.cpp
ryanofsky,2018-03-09T01:06:39Z,"Never mind, misinterpreted ""in the order of."" I was suggesting you could assert the two vectors were the same size.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173340792,173340792,src/wallet/wallet.cpp
ryanofsky,2018-03-09T15:25:37Z,"In commit ""Have SelectCoinsMinConf and SelectCoins use BnB or Knapsack"" (44657d0374d7fb25cca5cd098b27a5163f139de6)\n\nWould be nice to share spendable / depth / fromme / chainlimit checks between bnb and knapsack solvers. Maybe they could be factored out into a coin IsEligible function that both loops could call.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173479971,173479971,src/wallet/wallet.cpp
ryanofsky,2018-03-09T15:27:29Z,"In commit ""Have SelectCoinsMinConf and SelectCoins use BnB or Knapsack"" (44657d0374d7fb25cca5cd098b27a5163f139de6)\n\nI'm not sure having `pcoin` and `i` variables actually makes the code easier to read. It would seem simpler to drop these extra variables and just write `output.tx` and `output.i` directly.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173480498,173480498,src/wallet/wallet.cpp
ryanofsky,2018-03-09T15:52:24Z,"In commit ""Have SelectCoinsMinConf and SelectCoins use BnB or Knapsack"" (44657d0374d7fb25cca5cd098b27a5163f139de6)\n\nMaybe some of these arguments could be moved to structs, since there are so many values that have to be passed along from CreateTransaction -> SelectCoins -> SelectCoinsMinConf, and SelectCoinsMinConf is pretty rewritten in this commit anyway.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173488104,173488104,src/wallet/wallet.cpp
ryanofsky,2018-03-09T16:35:56Z,"In commit ""Use BnB in CreateTransaction on the first pass through the loop"" (851f71b84b12581cce933fd066ded98d213295ad)\n\nThis change and other `nBytes` updates in `CreateTransaction` would seem to make more sense as part of the ""Calculate and store the number of bytes"" commit instead of the ""Use BnB"" commit since they are refactorings that don't change behavior.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173500918,173500918,src/wallet/wallet.cpp
ryanofsky,2018-03-09T16:41:28Z,"In commit ""Use BnB in CreateTransaction on the first pass through the loop"" (851f71b84b12581cce933fd066ded98d213295ad)\n\nWould update comment to mention that `SelectCoins` call will change `use_bnb` to false if it was not used, since it's not obvious that `use_bnb` is an input/output parameter. Could also split `use_bnb` into separate input and output parameters like `bnb_used` and `disable_bnb",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173502504,173502504,src/wallet/wallet.cpp
ryanofsky,2018-03-09T16:52:33Z,"In commit ""Use BnB in CreateTransaction on the first pass through the loop"" (851f71b84b12581cce933fd066ded98d213295ad)\n\nMight be safer/simpler to always compute `not_input_fees` correctly, instead of it leaving partially set depending on `fSubtractFeeFromAmount` and `use_bnb` values (in cases where it isn't used).\n\n",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173505807,173505807,src/wallet/wallet.cpp
ryanofsky,2018-03-09T17:02:24Z,"In commit ""Have SelectCoinsMinConf and SelectCoins use BnB or Knapsack"" (44657d0374d7fb25cca5cd098b27a5163f139de6)\n\nSeems like it would be a little simpler for the caller and more consistent as a way of passing params if a `tx_noinputs_size` value were passed instead of `not_input_fees`.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173508518,173508518,src/wallet/wallet.cpp
ryanofsky,2018-03-09T17:43:01Z,"In commit ""Add coin selection test cases and move the original test cases"" (35794f4fd9ea54e4a77948e67feb08fb5af06959)\n\nMaybe name this `g_balance` since it's a new variable.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173518456,173518456,src/wallet/test/coinselector_tests.cpp
ryanofsky,2018-03-09T19:03:20Z,"In commit ""Add coin selection test cases and move the original test cases"" (35794f4fd9ea54e4a77948e67feb08fb5af06959)\n\nMaybe delete, looks like leftover example code.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173538545,173538545,src/wallet/test/coinselector_tests.cpp
ryanofsky,2018-03-09T19:12:28Z,"In commit ""Benchmark BnB in the worst case where it exhausts"" (05e5e77b12e79aee915e957f2be85ea3f2cb0e20)\n\nWould be nice to deduplicate this, maybe by creating a wallet test util file. Or could just note that this is copied from code in coinselector_tests.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173540968,173540968,src/bench/coin_selection.cpp
ryanofsky,2018-03-09T20:07:07Z,"In commit ""Implement Branch and Bound coin selection in a new file"" (fe2ce81f30c288b7caf16ffed3b270272d4b5818)\n\nThis line should probably be moved, ""best solution"" comment above it doesn't apply to it.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173554768,173554768,src/wallet/coinselection.cpp
ryanofsky,2018-03-09T20:10:30Z,"In commit ""Implement Branch and Bound coin selection in a new file"" (fe2ce81)\n\nMight be clarifying to add ""curr"" prefix to other variables besides `curr_waste`. E.g. you could rename `value_track` `curr_value`, `selection` `curr_selection`, `lookahead` `curr_available_value`.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173555520,173555520,src/wallet/coinselection.cpp
ryanofsky,2018-03-09T20:11:47Z,"In commit ""Implement Branch and Bound coin selection in a new file"" (fe2ce81f30c288b7caf16ffed3b270272d4b5818)\n\nSeems like `backtrack` variable should just be declared inside the loop. It looks like it will always be false at the top of every iteration given `if (backtrack) backtrack = false;` below. ",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173555838,173555838,src/wallet/coinselection.cpp
ryanofsky,2018-03-09T21:56:21Z,"In commit ""Implement Branch and Bound coin selection in a new file"" (fe2ce81f30c288b7caf16ffed3b270272d4b5818)\n\nIt might be helpful if there was a comment explaining how `selection` gets updated during the loop. The way the code uses `depth` variable to select coins from beginning and `backtrack` variable to deselect coins from the end is pretty  unusual (or at least is something I never encou",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173578590,173578590,src/wallet/coinselection.cpp
achow101,2018-03-10T01:38:03Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606347,173606347,src/wallet/wallet.cpp
achow101,2018-03-10T01:38:08Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606358,173606358,src/wallet/wallet.cpp
achow101,2018-03-10T01:38:42Z,"I've created two structs, one for the confirmation target and one for additional coin selection parameters.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606387,173606387,src/wallet/wallet.cpp
achow101,2018-03-10T01:38:55Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606396,173606396,src/wallet/wallet.cpp
achow101,2018-03-10T01:39:02Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606402,173606402,src/wallet/wallet.cpp
achow101,2018-03-10T01:39:08Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606406,173606406,src/wallet/wallet.cpp
achow101,2018-03-10T01:39:15Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606412,173606412,src/wallet/test/coinselector_tests.cpp
achow101,2018-03-10T01:39:26Z,I've added a comment.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606421,173606421,src/bench/coin_selection.cpp
achow101,2018-03-10T01:39:48Z,Unified to be `curr_*`,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606453,173606453,src/wallet/coinselection.cpp
achow101,2018-03-10T01:39:57Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606462,173606462,src/wallet/coinselection.cpp
eklitzke,2018-03-10T15:23:03Z,"nit: C++ code should prefer `using` rather than `typedef` (not important here, but it's more flexible with templated types). Syntax would be:\n\n```c++\nusing CoinSet = std::set<CInputCoin>;\n```",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625080,173625080,src/bench/coin_selection.cpp
eklitzke,2018-03-10T15:25:04Z,"These long line doc strings don't fit on my screen, even when my browser is maximized :-(",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625122,173625122,src/wallet/coinselection.cpp
eklitzke,2018-03-10T15:26:59Z,"nit: The way you have this is consistent with the rest of the Bitcoin code base, but better is:\n\n```c++\nconstexpr size_t TOTAL_TRIES = 100000;\n```\nDeclaring a global static variable reserves `sizeof(size_t)` space in the `.bss` section, whereas `constexpr` inlines the data.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625178,173625178,src/wallet/coinselection.cpp
eklitzke,2018-03-10T15:31:09Z,"Consider making these into asserts, as I don't think the callers check for exceptions anyway.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625288,173625288,src/wallet/coinselection.h
eklitzke,2018-03-10T15:32:09Z,same nit regarding typedef vs using,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625311,173625311,src/wallet/test/coinselector_tests.cpp
eklitzke,2018-03-10T15:38:02Z,Can you explain to me how this works? I don't understand which situation the random shuffle causes the test to fail in.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625442,173625442,src/wallet/test/coinselector_tests.cpp
eklitzke,2018-03-10T15:40:44Z,nit: less boiler plate if you use a delegating ctor,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625516,173625516,src/wallet/wallet.h
ryanofsky,2018-03-12T15:34:16Z,"In commit ""Have SelectCoinsMinConf and SelectCoins use BnB or Knapsack and use it"" (34145b6a0237afd0160c9624339f49fd34e524ff)\n\n`coin_selection_params` can be a const reference instead of a mutable reference here. This would make it clearer values don't change.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173840292,173840292,src/wallet/wallet.cpp
ryanofsky,2018-03-12T15:45:11Z,"In commit ""Have SelectCoinsMinConf and SelectCoins use BnB or Knapsack and use it"" (34145b6a0237afd0160c9624339f49fd34e524ff)\n\nMight be worth pulling `use_bnb` parameter out of `coin_selection_params`, because it's the only mutable member, and otherwise this be a const reference.\n\nI do still think my previous suggestion of splitting `use_bnb` inout param up into separate `disable_bnb` (inp",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173844322,173844322,src/wallet/wallet.cpp
ryanofsky,2018-03-12T16:18:13Z,"In commit ""Implement Branch and Bound coin selection in a new file"" (a406c66f1b113e6418eec3b03e0301017478634e)\n\nCan delete this line, no need to reset since variable goes out of scope.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173856480,173856480,src/wallet/coinselection.cpp
ryanofsky,2018-03-12T18:12:22Z,"In commit ""Implement Branch and Bound coin selection in a new file"" (a406c66f1b113e6418eec3b03e0301017478634e)\n\nI think it would make the traversal code easier to understand to get rid of `depth` variable and the trailing false entries in the `curr_selection` vector. I implemented this in cf0a82d49112e204112b54d76e661a8e66a28c8b, (fetchable with `git fetch -n https://github.com/ryanofsky/bitco",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173896216,173896216,src/wallet/coinselection.cpp
instagibbs,2018-03-12T19:09:08Z,yes please add a comment,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173913692,173913692,src/wallet/test/coinselector_tests.cpp
instagibbs,2018-03-12T19:12:50Z,"micro-nit: positive, not non-negative",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173914685,173914685,src/wallet/wallet.cpp
instagibbs,2018-03-12T19:16:06Z,this should be `coin.txout.effective_value`.... which likely means there is no test for this. ,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173915562,173915562,src/wallet/wallet.cpp
instagibbs,2018-03-12T19:44:09Z,"github is seemingly hiding comments, so saying this here again:\n\n>this should be coin.txout.effective_value.... which likely means there is no test for this.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173923694,173923694,src/wallet/wallet.cpp
achow101,2018-03-12T21:10:57Z,"I don't understand it either. It was there originally, I just moved it.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173947886,173947886,src/wallet/test/coinselector_tests.cpp
achow101,2018-03-12T21:11:52Z,I would prefer to continue to use what is currently done in the codebase unless we agreed to change the style.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173948126,173948126,src/bench/coin_selection.cpp
achow101,2018-03-12T21:12:10Z,I would prefer to continue to use what is currently done in the codebase unless we agreed to change the style.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173948217,173948217,src/wallet/coinselection.cpp
achow101,2018-03-12T21:13:41Z,How does that work?,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173948656,173948656,src/wallet/wallet.h
ryanofsky,2018-03-12T21:32:46Z,"> How does that work?\n\nHe was suggesting you write:\n\n```c++\nCoinSelectionParams() : CoinSelectionParams(true, 0, ...) {}\n```\n\nIMO, it would actually be better to use member initialization and write:\n\n```\nbool use_bnb = true;\nsize_t change_output_size = 0;\n...\nCoinSelectionParams(bool use_bnb, size_t change_output_size, ...) ...;\nCoinSelectionParams() {}\n```\n",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173953720,173953720,src/wallet/wallet.h
achow101,2018-03-12T21:52:34Z,Suggestions for a test for this?,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173959009,173959009,src/wallet/wallet.cpp
achow101,2018-03-12T21:56:50Z,I'd prefer to keep this move-only,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173960079,173960079,src/wallet/coinselection.h
instagibbs,2018-03-12T22:56:19Z,"SCMC, with use_bnb being true, two outputs which summed together reach the target? If you remove the negative effective value one, it overshoots the window.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173972454,173972454,src/wallet/wallet.cpp
achow101,2018-03-12T23:18:27Z,I've used @ryanofsky's suggestion,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976224,173976224,src/wallet/wallet.h
achow101,2018-03-12T23:19:17Z,I added a variable and parameter `bnb_used` to be a return parameter that indicates whether bnb was used.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976383,173976383,src/wallet/wallet.cpp
achow101,2018-03-12T23:19:26Z,Made const,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976413,173976413,src/wallet/wallet.cpp
achow101,2018-03-12T23:19:32Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976446,173976446,src/wallet/coinselection.cpp
achow101,2018-03-12T23:19:55Z,I've used your commit. It will be squashed into a406c66,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976513,173976513,src/wallet/coinselection.cpp
achow101,2018-03-12T23:20:03Z,Done,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976541,173976541,src/wallet/wallet.cpp
achow101,2018-03-12T23:20:18Z,Fixed. Will add a test next.,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976584,173976584,src/wallet/wallet.cpp
achow101,2018-03-13T00:05:32Z,"I added a test that runs `SelectCoinsMinConf` with an input with negative effective value. If that input somehow makes it through into `SelectCoinsBnB`, it will trigger an assert causing the test to fail. That should be sufficient to check for this case.",https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173983496,173983496,src/wallet/wallet.cpp
instagibbs,2018-03-13T14:43:23Z,egative,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r174156763,174156763,src/wallet/test/coinselector_tests.cpp
achow101,2018-03-13T16:47:06Z,Fixed,https://github.com/bitcoin/bitcoin/pull/10637#discussion_r174204302,174204302,src/wallet/test/coinselector_tests.cpp
