[
  {
    "sha": "97cb164f54f48f9c91293d08f6afc7d5628dc789",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2NiMTY0ZjU0ZjQ4ZjljOTEyOTNkMDhmNmFmYzdkNTYyOGRjNzg5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-16T18:45:27Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-16T18:47:25Z"
      },
      "message": "Make Coin Selection text more general\n\nCurrently, if Coin Selection fails, then the error returned to the user\nis \"Insufficient Funds\". This is misleading as Coin Selection can fail\nfor other reasons, such as if the transaction would form a chain that is\ntoo long to enter the mempool. This commit changes the error message\nreturned from \"Insufficient Funds\" to \"Coin Selection Failed\" and\nupdates the test scripts to expect the correct error message.",
      "tree": {
        "sha": "096278e305be26f8d737d1d7cefcbf9c292ab68f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/096278e305be26f8d737d1d7cefcbf9c292ab68f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97cb164f54f48f9c91293d08f6afc7d5628dc789",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97cb164f54f48f9c91293d08f6afc7d5628dc789",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97cb164f54f48f9c91293d08f6afc7d5628dc789",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97cb164f54f48f9c91293d08f6afc7d5628dc789/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b789d814199f9860425f71c2dd990d6a2c56cf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b789d814199f9860425f71c2dd990d6a2c56cf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b789d814199f9860425f71c2dd990d6a2c56cf3"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "84aa9b08e3cf3657e5c6985386c0a4e72ce86e76",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97cb164f54f48f9c91293d08f6afc7d5628dc789/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97cb164f54f48f9c91293d08f6afc7d5628dc789/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=97cb164f54f48f9c91293d08f6afc7d5628dc789",
        "patch": "@@ -316,7 +316,7 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n-        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n+        assert_raises_jsonrpc(-4, \"Coin Selection Failed\", self.nodes[2].fundrawtransaction, rawtx)\n \n         ############################################################\n         #compare fee of a standard pubkeyhash transaction\n@@ -472,7 +472,7 @@ def run_test(self):\n         rawTx = self.nodes[1].createrawtransaction(inputs, outputs)\n         # fund a transaction that requires a new key for the change output\n         # creating the key must be impossible because the wallet is locked\n-        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[1].fundrawtransaction, rawtx)\n+        assert_raises_jsonrpc(-4, \"Coin Selection Failed\", self.nodes[1].fundrawtransaction, rawtx)\n \n         #refill the keypool\n         self.nodes[1].walletpassphrase(\"test\", 100)"
      },
      {
        "sha": "ec1a1716c516e957fcfa7083af9a337ee9cb047d",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97cb164f54f48f9c91293d08f6afc7d5628dc789/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97cb164f54f48f9c91293d08f6afc7d5628dc789/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=97cb164f54f48f9c91293d08f6afc7d5628dc789",
        "patch": "@@ -71,7 +71,7 @@ def run_test (self):\n         unspent_0 = self.nodes[2].listunspent()[0]\n         unspent_0 = {\"txid\": unspent_0[\"txid\"], \"vout\": unspent_0[\"vout\"]}\n         self.nodes[2].lockunspent(False, [unspent_0])\n-        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n+        assert_raises_jsonrpc(-4, \"Coin Selection Failed\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n         assert_equal([unspent_0], self.nodes[2].listlockunspent())\n         self.nodes[2].lockunspent(True, [unspent_0])\n         assert_equal(len(self.nodes[2].listlockunspent()), 0)"
      },
      {
        "sha": "75e4972193c72048eaa1612dc8d285c7a008157a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97cb164f54f48f9c91293d08f6afc7d5628dc789/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97cb164f54f48f9c91293d08f6afc7d5628dc789/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=97cb164f54f48f9c91293d08f6afc7d5628dc789",
        "patch": "@@ -2416,7 +2416,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 setCoins.clear();\n                 if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coinControl))\n                 {\n-                    strFailReason = _(\"Insufficient funds\");\n+                    strFailReason = _(\"Coin Selection Failed\");\n                     return false;\n                 }\n "
      }
    ]
  },
  {
    "sha": "2d825c8582a5b6e9a78e48776b5ec3240141b050",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDgyNWM4NTgyYTViNmU5YTc4ZTQ4Nzc2YjVlYzMyNDAxNDFiMDUw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-16T17:57:10Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-16T18:47:25Z"
      },
      "message": "Turn -walletrejectlongchains on by default\n\nThis commit turns the -walletrejectlongchains option on by default and\nmakes the wallet reject any transaction which would form a chain up to\n(min(limitancestorcount, limitdescendantcount) - 1) long. The wallet\nwill reject the transaction before the maximum chain length is reached\nso that the user has a final change to add a transaction to the chain\n(for example to add a CPFP transaction if the entire transaction package\nis too low fee).",
      "tree": {
        "sha": "f1ffad333db8d0d8e32932430b33052a235f3837",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1ffad333db8d0d8e32932430b33052a235f3837"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d825c8582a5b6e9a78e48776b5ec3240141b050",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d825c8582a5b6e9a78e48776b5ec3240141b050",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d825c8582a5b6e9a78e48776b5ec3240141b050",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d825c8582a5b6e9a78e48776b5ec3240141b050/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97cb164f54f48f9c91293d08f6afc7d5628dc789",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97cb164f54f48f9c91293d08f6afc7d5628dc789",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97cb164f54f48f9c91293d08f6afc7d5628dc789"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 30,
      "deletions": 10
    },
    "files": [
      {
        "sha": "c1511e92342033408340c10f9d2d42a4d362f2f7",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 17,
        "deletions": 6,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d825c8582a5b6e9a78e48776b5ec3240141b050/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d825c8582a5b6e9a78e48776b5ec3240141b050/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=2d825c8582a5b6e9a78e48776b5ec3240141b050",
        "patch": "@@ -359,23 +359,34 @@ def run_test (self):\n         # So we should be able to generate exactly chainlimit txs for each original output\n         sending_addr = self.nodes[1].getnewaddress()\n         txid_list = []\n-        for i in range(chainlimit*2):\n+        for i in range((chainlimit - 1 ) * 2):\n+            txid_list.append(self.nodes[0].sendtoaddress(sending_addr, Decimal('0.0001')))\n+        assert_equal(self.nodes[0].getmempoolinfo()['size'], (chainlimit - 1) * 2)\n+        assert_equal(len(txid_list), (chainlimit - 1 ) * 2)\n+\n+        # With walletrejectlongchains we will not create the tx and store it in our wallet.\n+        assert_raises_jsonrpc(-4, \"Coin Selection Failed\", self.nodes[0].sendtoaddress, sending_addr, Decimal('0.01'))\n+\n+        # Without walletrejectlongchains, we can submit up to (chainlimit)\n+        # transactions to the mempool. The (chainlimit+1)th transaction will be\n+        # added to the wallet but not accepted to the mempool\n+        stop_node(self.nodes[0],0)\n+        self.nodes[0] = start_node(0, self.options.tmpdir, [\"-limitancestorcount=\"+str(chainlimit), \"-walletrejectlongchains=0\"])\n+\n+        for i in range(2):\n             txid_list.append(self.nodes[0].sendtoaddress(sending_addr, Decimal('0.0001')))\n-        assert_equal(self.nodes[0].getmempoolinfo()['size'], chainlimit*2)\n-        assert_equal(len(txid_list), chainlimit*2)\n \n-        # Without walletrejectlongchains, we will still generate a txid\n-        # The tx will be stored in the wallet but not accepted to the mempool\n         extra_txid = self.nodes[0].sendtoaddress(sending_addr, Decimal('0.0001'))\n         assert(extra_txid not in self.nodes[0].getrawmempool())\n         assert(extra_txid in [tx[\"txid\"] for tx in self.nodes[0].listtransactions()])\n+\n         self.nodes[0].abandontransaction(extra_txid)\n         total_txs = len(self.nodes[0].listtransactions(\"*\",99999))\n \n         # Try with walletrejectlongchains\n         # Double chain limit but require combining inputs, so we pass SelectCoinsMinConf\n         stop_node(self.nodes[0],0)\n-        self.nodes[0] = start_node(0, self.options.tmpdir, [\"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit)])\n+        self.nodes[0] = start_node(0, self.options.tmpdir, [\"-limitancestorcount=\"+str(2*chainlimit)])\n \n         # wait for loadmempool\n         timeout = 10"
      },
      {
        "sha": "f8c33fc0321df7d84480bd90ee37ae900fe72345",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d825c8582a5b6e9a78e48776b5ec3240141b050/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d825c8582a5b6e9a78e48776b5ec3240141b050/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2d825c8582a5b6e9a78e48776b5ec3240141b050",
        "patch": "@@ -2224,6 +2224,13 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n \n     size_t nMaxChainLength = std::min(GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT), GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT));\n     bool fRejectLongChains = GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS);\n+    if (fRejectLongChains) {\n+        // If walletrejectlongchains is set to true, the max chain length is set to\n+        // min((limitancestorcount - 1), (limitdescendantcount - 1)) so the user\n+        // has one final chance to add the transaction to the mempool by\n+        // running with -walletrejectlongchains=false\n+        nMaxChainLength = std::max((size_t)1, nMaxChainLength) - 1;\n+    }\n \n     bool res = nTargetValue <= nValueFromPresetInputs ||\n         SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 6, 0, vCoins, setCoinsRet, nValueRet) ||\n@@ -2628,13 +2635,15 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n     }\n \n     if (GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS)) {\n-        // Lastly, ensure this tx will pass the mempool's chain limits\n+        // Lastly, ensure this tx will pass the mempool's chain limits. We reject transactions that are in\n+        // a chain up to (limitancestorcount - 1) and (limitdescendantcount - 1) long so the user has one\n+        // final chance to add the transaction to the mempool by running with -walletrejectlongchains=false\n         LockPoints lp;\n         CTxMemPoolEntry entry(wtxNew.tx, 0, 0, 0, false, 0, lp);\n         CTxMemPool::setEntries setAncestors;\n-        size_t nLimitAncestors = GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        size_t nLimitAncestors = GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT) - 1;\n         size_t nLimitAncestorSize = GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000;\n-        size_t nLimitDescendants = GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+        size_t nLimitDescendants = GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT) - 1;\n         size_t nLimitDescendantSize = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n         std::string errString;\n         if (!mempool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {"
      },
      {
        "sha": "e8ddc96fee47052860ead0fc70079e881bf82281",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d825c8582a5b6e9a78e48776b5ec3240141b050/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d825c8582a5b6e9a78e48776b5ec3240141b050/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2d825c8582a5b6e9a78e48776b5ec3240141b050",
        "patch": "@@ -56,7 +56,7 @@ static const CAmount MIN_FINAL_CHANGE = MIN_CHANGE/2;\n //! Default for -spendzeroconfchange\n static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;\n //! Default for -walletrejectlongchains\n-static const bool DEFAULT_WALLET_REJECT_LONG_CHAINS = false;\n+static const bool DEFAULT_WALLET_REJECT_LONG_CHAINS = true;\n //! -txconfirmtarget default\n static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;\n //! -walletrbf default"
      }
    ]
  }
]