[
  {
    "sha": "b4058ed9c6e1f23720afa0b383c56a9aaed86dcd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDA1OGVkOWM2ZTFmMjM3MjBhZmEwYjM4M2M1NmE5YWFlZDg2ZGNk",
    "commit": {
      "author": {
        "name": "Dan Raviv",
        "email": "dan@soundradix.com",
        "date": "2017-09-15T08:13:25Z"
      },
      "committer": {
        "name": "Dan Raviv",
        "email": "dan@soundradix.com",
        "date": "2017-09-15T08:13:25Z"
      },
      "message": "Fix code constness in CBlockIndex::GetAncestor() overloads\n\nMake the non-const overload of CBlockIndex::GetAncestor() reuse the const overload implementation instead of the other way around. This way, the constness of the const overload implementation is guaranteed. The other way around, it was possible to implement the non-const overload in a way which mutates the object, and since that implementation would be called even for const objects (due to the reuse), we would get undefined behavior.",
      "tree": {
        "sha": "85996f9227622ccc99db03d711da5a0fd0bb9646",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85996f9227622ccc99db03d711da5a0fd0bb9646"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4058ed9c6e1f23720afa0b383c56a9aaed86dcd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4058ed9c6e1f23720afa0b383c56a9aaed86dcd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4058ed9c6e1f23720afa0b383c56a9aaed86dcd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4058ed9c6e1f23720afa0b383c56a9aaed86dcd/comments",
    "author": {
      "login": "danra",
      "id": 84245,
      "node_id": "MDQ6VXNlcjg0MjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/84245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danra",
      "html_url": "https://github.com/danra",
      "followers_url": "https://api.github.com/users/danra/followers",
      "following_url": "https://api.github.com/users/danra/following{/other_user}",
      "gists_url": "https://api.github.com/users/danra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danra/subscriptions",
      "organizations_url": "https://api.github.com/users/danra/orgs",
      "repos_url": "https://api.github.com/users/danra/repos",
      "events_url": "https://api.github.com/users/danra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danra/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "danra",
      "id": 84245,
      "node_id": "MDQ6VXNlcjg0MjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/84245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danra",
      "html_url": "https://github.com/danra",
      "followers_url": "https://api.github.com/users/danra/followers",
      "following_url": "https://api.github.com/users/danra/following{/other_user}",
      "gists_url": "https://api.github.com/users/danra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danra/subscriptions",
      "organizations_url": "https://api.github.com/users/danra/orgs",
      "repos_url": "https://api.github.com/users/danra/repos",
      "events_url": "https://api.github.com/users/danra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danra/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f399a9ff227896265cafab9b2e9fab6cdb9b5b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f399a9ff227896265cafab9b2e9fab6cdb9b5b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f399a9ff227896265cafab9b2e9fab6cdb9b5b9"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "63e75ccecffddb6044b1ebb38bd3068fe30c77af",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4058ed9c6e1f23720afa0b383c56a9aaed86dcd/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4058ed9c6e1f23720afa0b383c56a9aaed86dcd/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=b4058ed9c6e1f23720afa0b383c56a9aaed86dcd",
        "patch": "@@ -80,12 +80,13 @@ int static inline GetSkipHeight(int height) {\n     return (height & 1) ? InvertLowestOne(InvertLowestOne(height - 1)) + 1 : InvertLowestOne(height);\n }\n \n-CBlockIndex* CBlockIndex::GetAncestor(int height)\n+const CBlockIndex* CBlockIndex::GetAncestor(int height) const\n {\n-    if (height > nHeight || height < 0)\n+    if (height > nHeight || height < 0) {\n         return nullptr;\n+    }\n \n-    CBlockIndex* pindexWalk = this;\n+    const CBlockIndex* pindexWalk = this;\n     int heightWalk = nHeight;\n     while (heightWalk > height) {\n         int heightSkip = GetSkipHeight(heightWalk);\n@@ -106,9 +107,9 @@ CBlockIndex* CBlockIndex::GetAncestor(int height)\n     return pindexWalk;\n }\n \n-const CBlockIndex* CBlockIndex::GetAncestor(int height) const\n+CBlockIndex* CBlockIndex::GetAncestor(int height)\n {\n-    return const_cast<CBlockIndex*>(this)->GetAncestor(height);\n+    return const_cast<CBlockIndex*>(static_cast<const CBlockIndex*>(this)->GetAncestor(height));\n }\n \n void CBlockIndex::BuildSkip()"
      }
    ]
  }
]