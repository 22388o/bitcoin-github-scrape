[
  {
    "sha": "3f87c7a1ea463d64f79b567a921e9b16b2cde2fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjg3YzdhMWVhNDYzZDY0Zjc5YjU2N2E5MjFlOWIxNmIyY2RlMmZi",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-03-24T18:35:29Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-05-12T14:52:19Z"
      },
      "message": "Regression test framework tweaks\n\nPrint out the temporary directory at the end of testing if --nocleanup is\ngiven (I found this very useful when running --tracerpc --nocleanup when\ndeveloping new tests).\n\nAnd, by default, wait at most ten seconds for mempools or chains to sync\nbefore failing a test.",
      "tree": {
        "sha": "ee553702dccb09004b522f4bff7adece180308a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee553702dccb09004b522f4bff7adece180308a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f87c7a1ea463d64f79b567a921e9b16b2cde2fb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlVSE6gACgkQdYgkL74406jhLQCgr3hIUSCzDsWTSW/ZIyUhpOaB\nJOAAoMCK3b92cc3TQEtWxHMOl1+0JOws\n=jsJU\n-----END PGP SIGNATURE-----",
        "payload": "tree ee553702dccb09004b522f4bff7adece180308a8\nparent 40de49c3584001b43d7e2c7d8dfc02dbcf470d41\nauthor Gavin Andresen <gavinandresen@gmail.com> 1427222129 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1431442339 -0400\n\nRegression test framework tweaks\n\nPrint out the temporary directory at the end of testing if --nocleanup is\ngiven (I found this very useful when running --tracerpc --nocleanup when\ndeveloping new tests).\n\nAnd, by default, wait at most ten seconds for mempools or chains to sync\nbefore failing a test.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f87c7a1ea463d64f79b567a921e9b16b2cde2fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f87c7a1ea463d64f79b567a921e9b16b2cde2fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f87c7a1ea463d64f79b567a921e9b16b2cde2fb/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40de49c3584001b43d7e2c7d8dfc02dbcf470d41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40de49c3584001b43d7e2c7d8dfc02dbcf470d41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40de49c3584001b43d7e2c7d8dfc02dbcf470d41"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f752baf063cb867aa667fdda2027daacb6f77ea4",
        "filename": "qa/rpc-tests/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f87c7a1ea463d64f79b567a921e9b16b2cde2fb/qa/rpc-tests/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f87c7a1ea463d64f79b567a921e9b16b2cde2fb/qa/rpc-tests/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework.py?ref=3f87c7a1ea463d64f79b567a921e9b16b2cde2fb",
        "patch": "@@ -140,6 +140,8 @@ def main(self):\n         if not self.options.nocleanup and not self.options.noshutdown:\n             print(\"Cleaning up\")\n             shutil.rmtree(self.options.tmpdir)\n+        else:\n+            print(\"Test directory was \"+self.options.tmpdir)\n \n         if success:\n             print(\"Tests successful\")"
      },
      {
        "sha": "3d54a46b56b99c6c1986ba175e5ab002e338bca2",
        "filename": "qa/rpc-tests/util.py",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f87c7a1ea463d64f79b567a921e9b16b2cde2fb/qa/rpc-tests/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f87c7a1ea463d64f79b567a921e9b16b2cde2fb/qa/rpc-tests/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.py?ref=3f87c7a1ea463d64f79b567a921e9b16b2cde2fb",
        "patch": "@@ -33,7 +33,7 @@ def check_json_precision():\n     if satoshis != 2000000000000003:\n         raise RuntimeError(\"JSON encode/decode loses precision\")\n \n-def sync_blocks(rpc_connections):\n+def sync_blocks(rpc_connections, max_wait=10):\n     \"\"\"\n     Wait until everybody has the same block count\n     \"\"\"\n@@ -42,8 +42,11 @@ def sync_blocks(rpc_connections):\n         if counts == [ counts[0] ]*len(counts):\n             break\n         time.sleep(1)\n+        max_wait = max_wait-1\n+        if max_wait <= 0:\n+            raise RuntimeError(\"sync_blocks: failed to sync\")\n \n-def sync_mempools(rpc_connections):\n+def sync_mempools(rpc_connections, max_wait=10):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n     pools\n@@ -57,6 +60,9 @@ def sync_mempools(rpc_connections):\n         if num_match == len(rpc_connections):\n             break\n         time.sleep(1)\n+        max_wait = max_wait-1\n+        if max_wait <= 0:\n+            raise RuntimeError(\"sync_mempools: failed to sync\")\n \n bitcoind_processes = {}\n "
      }
    ]
  },
  {
    "sha": "b9f56bd37667d88c29174659591cae5bc2befa7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWY1NmJkMzc2NjdkODhjMjkxNzQ2NTk1OTFjYWU1YmMyYmVmYTdi",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-03-24T18:55:18Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-05-12T17:07:27Z"
      },
      "message": "Net layer: ForgetTransaction()\n\nAdd a ForgetTransaction routine that is the\nopposite of RelayTransaction: it clears a\ntransaction from peer nodes setInventoryKnown,\nso if we receive an 'inv' in the future we will\nrespond with 'getdata' and un-forget it.\n\nRelies on a new mruset.erase() method (with unit tests).",
      "tree": {
        "sha": "57acc523765dcbf550c49d8106cdecd935bc3856",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57acc523765dcbf550c49d8106cdecd935bc3856"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9f56bd37667d88c29174659591cae5bc2befa7b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlVSM1IACgkQdYgkL74406iC/ACg0PxkKHrwCydGosf7AcFF2RIm\nXS8AoMtsUlKDEIsPZu9iEMRxPzcrUSBq\n=xE2O\n-----END PGP SIGNATURE-----",
        "payload": "tree 57acc523765dcbf550c49d8106cdecd935bc3856\nparent 3f87c7a1ea463d64f79b567a921e9b16b2cde2fb\nauthor Gavin Andresen <gavinandresen@gmail.com> 1427223318 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1431450447 -0400\n\nNet layer: ForgetTransaction()\n\nAdd a ForgetTransaction routine that is the\nopposite of RelayTransaction: it clears a\ntransaction from peer nodes setInventoryKnown,\nso if we receive an 'inv' in the future we will\nrespond with 'getdata' and un-forget it.\n\nRelies on a new mruset.erase() method (with unit tests).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9f56bd37667d88c29174659591cae5bc2befa7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9f56bd37667d88c29174659591cae5bc2befa7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9f56bd37667d88c29174659591cae5bc2befa7b/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f87c7a1ea463d64f79b567a921e9b16b2cde2fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f87c7a1ea463d64f79b567a921e9b16b2cde2fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f87c7a1ea463d64f79b567a921e9b16b2cde2fb"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 83,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0e995812ce2961467d27427a2de598a6a7f98ec1",
        "filename": "src/mruset.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9f56bd37667d88c29174659591cae5bc2befa7b/src/mruset.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9f56bd37667d88c29174659591cae5bc2befa7b/src/mruset.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/mruset.h?ref=b9f56bd37667d88c29174659591cae5bc2befa7b",
        "patch": "@@ -59,6 +59,20 @@ class mruset\n         }\n         return ret;\n     }\n+    size_type erase(const key_type& x)\n+    {\n+        for (size_type i = 0; i < order.size(); i++) {\n+            if (*order[i] == x) {\n+                set.erase(order[i]);\n+                order.erase(order.begin()+i);\n+                if (first_unused == 0) first_unused = order.size();\n+                else --first_unused;\n+                if (first_used > i) --first_used;\n+                return 1;\n+            }\n+        }\n+        return 0;\n+    }\n     size_type max_size() const { return nMaxSize; }\n };\n "
      },
      {
        "sha": "5e86b3b27eeb23c5cdc49db3d23108164887f842",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9f56bd37667d88c29174659591cae5bc2befa7b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9f56bd37667d88c29174659591cae5bc2befa7b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b9f56bd37667d88c29174659591cae5bc2befa7b",
        "patch": "@@ -1742,6 +1742,14 @@ void RelayTransaction(const CTransaction& tx, const CDataStream& ss)\n     }\n }\n \n+void ForgetTransaction(const CTransaction& tx)\n+{\n+    CInv inv(MSG_TX, tx.GetHash());\n+    LOCK(cs_vNodes);\n+    BOOST_FOREACH(CNode* pnode, vNodes)\n+        pnode->RemoveInventory(inv);\n+}\n+\n void CNode::RecordBytesRecv(uint64_t bytes)\n {\n     LOCK(cs_totalBytesRecv);"
      },
      {
        "sha": "36a6f1766bc1941f259bb763a40ac214df4183cc",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9f56bd37667d88c29174659591cae5bc2befa7b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9f56bd37667d88c29174659591cae5bc2befa7b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b9f56bd37667d88c29174659591cae5bc2befa7b",
        "patch": "@@ -415,6 +415,12 @@ class CNode\n         }\n     }\n \n+    void RemoveInventory(const CInv& inv)\n+    {\n+        LOCK(cs_inventory);\n+        setInventoryKnown.erase(inv);\n+    }\n+\n     void AskFor(const CInv& inv);\n \n     // TODO: Document the postcondition of this function.  Is cs_vSend locked?\n@@ -624,6 +630,7 @@ class CNode\n class CTransaction;\n void RelayTransaction(const CTransaction& tx);\n void RelayTransaction(const CTransaction& tx, const CDataStream& ss);\n+void ForgetTransaction(const CTransaction& tx);\n \n /** Access to the (IP) address database (peers.dat) */\n class CAddrDB"
      },
      {
        "sha": "7f1eab23dcf84b53f6a88ea38df8f98219610aef",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9f56bd37667d88c29174659591cae5bc2befa7b/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9f56bd37667d88c29174659591cae5bc2befa7b/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=b9f56bd37667d88c29174659591cae5bc2befa7b",
        "patch": "@@ -123,6 +123,10 @@ bool operator<(const CInv& a, const CInv& b)\n {\n     return (a.type < b.type || (a.type == b.type && a.hash < b.hash));\n }\n+bool operator==(const CInv& a, const CInv& b)\n+{\n+    return a.hash == b.hash;\n+}\n \n bool CInv::IsKnownType() const\n {"
      },
      {
        "sha": "a3d1eff658faaeec5b813e5fb95349a61cd29905",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9f56bd37667d88c29174659591cae5bc2befa7b/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9f56bd37667d88c29174659591cae5bc2befa7b/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=b9f56bd37667d88c29174659591cae5bc2befa7b",
        "patch": "@@ -136,6 +136,7 @@ class CInv\n     }\n \n     friend bool operator<(const CInv& a, const CInv& b);\n+    friend bool operator==(const CInv& a, const CInv& b);\n \n     bool IsKnownType() const;\n     const char* GetCommand() const;"
      },
      {
        "sha": "45eab4edf53f227228615cb9a22cb5a5310f0eb8",
        "filename": "src/test/mruset_tests.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 3,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9f56bd37667d88c29174659591cae5bc2befa7b/src/test/mruset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9f56bd37667d88c29174659591cae5bc2befa7b/src/test/mruset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mruset_tests.cpp?ref=b9f56bd37667d88c29174659591cae5bc2befa7b",
        "patch": "@@ -12,9 +12,6 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#define NUM_TESTS 16\n-#define MAX_SIZE 100\n-\n using namespace std;\n \n BOOST_FIXTURE_TEST_SUITE(mruset_tests, BasicTestingSetup)\n@@ -78,4 +75,53 @@ BOOST_AUTO_TEST_CASE(mruset_test)\n     }\n }\n \n+// Test erase functionality\n+BOOST_AUTO_TEST_CASE(mruset_erase)\n+{\n+    static const int MAX_SIZE=100;\n+\n+    mruset<int> mru(MAX_SIZE);\n+    for (int n=0; n<MAX_SIZE; n++)\n+    {\n+        mru.insert(n);\n+    }\n+    // Remove elevenses:\n+    int nRemoved = 0;\n+    for (int n=11; n<MAX_SIZE; n+=11)\n+    {\n+        mru.erase(n);\n+        ++nRemoved;\n+    }\n+    BOOST_CHECK(mru.size() == MAX_SIZE-nRemoved);\n+    BOOST_CHECK(mru.find(0) != mru.end());\n+    BOOST_CHECK(mru.find(10) != mru.end());\n+    BOOST_CHECK(mru.find(11) == mru.end());\n+    BOOST_CHECK(mru.find(12) != mru.end());\n+    BOOST_CHECK(mru.find(98) != mru.end());\n+    BOOST_CHECK(mru.find(99) == mru.end());\n+\n+    // Re-insert elevenses:\n+    for (int n=11; n<MAX_SIZE; n+=11)\n+    {\n+        mru.insert(n);\n+    }\n+    BOOST_CHECK(mru.size() == MAX_SIZE);\n+\n+    // Overflow by 20.\n+    // Should evict 0-10 and 12-20, should not evict 11 (it was just inserted)\n+    for (int n = 0; n < 20; n++)\n+    {\n+        mru.insert(MAX_SIZE+n);\n+    }\n+    BOOST_CHECK(mru.size() == MAX_SIZE);\n+    BOOST_CHECK(mru.find(0) == mru.end());\n+    BOOST_CHECK(mru.find(1) == mru.end());\n+    BOOST_CHECK(mru.find(10) == mru.end());\n+    BOOST_CHECK(mru.find(11) != mru.end());\n+    BOOST_CHECK(mru.find(12) == mru.end());\n+    BOOST_CHECK(mru.find(20) == mru.end());\n+    BOOST_CHECK(mru.find(21) != mru.end());\n+    BOOST_CHECK(mru.find(MAX_SIZE) != mru.end());\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "05697af782284637442ada5348c8a855b2e594d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTY5N2FmNzgyMjg0NjM3NDQyYWRhNTM0OGM4YTg1NWIyZTU5NGQ3",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-03-19T21:24:15Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-05-12T17:11:57Z"
      },
      "message": "When doing a deep re-org, only add 6 blocks worth of transactions back into mempool\n\nDeep re-orgs try to put all transactions from all blocks back into the mempool;\nthis is not a problem in practice (because deep re-orgs happen approximately never),\nbut will be a problem when either the mempool is limited or you run out of\nmemory for the mempool.\n\nThis change limits the number of blocks worth of transactions to six.",
      "tree": {
        "sha": "33345105b3b3dc686a1caff08bb7ad1a3e5295e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33345105b3b3dc686a1caff08bb7ad1a3e5295e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05697af782284637442ada5348c8a855b2e594d7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlVSNF8ACgkQdYgkL74406jXdACgln5hOONGlMiXI1LQZL6BqMB7\nG1oAmQFrdK8bqQBNwfvxzh8TZjTdwrkl\n=DwOZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 33345105b3b3dc686a1caff08bb7ad1a3e5295e0\nparent b9f56bd37667d88c29174659591cae5bc2befa7b\nauthor Gavin Andresen <gavinandresen@gmail.com> 1426800255 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1431450717 -0400\n\nWhen doing a deep re-org, only add 6 blocks worth of transactions back into mempool\n\nDeep re-orgs try to put all transactions from all blocks back into the mempool;\nthis is not a problem in practice (because deep re-orgs happen approximately never),\nbut will be a problem when either the mempool is limited or you run out of\nmemory for the mempool.\n\nThis change limits the number of blocks worth of transactions to six.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05697af782284637442ada5348c8a855b2e594d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05697af782284637442ada5348c8a855b2e594d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05697af782284637442ada5348c8a855b2e594d7/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9f56bd37667d88c29174659591cae5bc2befa7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9f56bd37667d88c29174659591cae5bc2befa7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9f56bd37667d88c29174659591cae5bc2befa7b"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 109,
      "deletions": 19
    },
    "files": [
      {
        "sha": "25c88a9b94c1b8688e8caabdd137b4c8bc06c094",
        "filename": "qa/rpc-tests/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 57,
        "deletions": 7,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05697af782284637442ada5348c8a855b2e594d7/qa/rpc-tests/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05697af782284637442ada5348c8a855b2e594d7/qa/rpc-tests/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_resurrect_test.py?ref=05697af782284637442ada5348c8a855b2e594d7",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #\n-# Test resurrection of mined transactions when\n+# Test resurrection of transactions when\n # the blockchain is re-organized.\n #\n \n@@ -14,27 +14,33 @@\n import os\n import shutil\n \n-# Create one-input, one-output, no-fee transaction:\n class MempoolCoinbaseTest(BitcoinTestFramework):\n \n     def setup_network(self):\n-        # Just need one node for this test\n-        args = [\"-checkmempool\", \"-debug=mempool\"]\n+        # Need three nodes for this test\n+        args = [\"-checkmempool\", \"-debug=mempool\", \"-debug=net\"]\n         self.nodes = []\n         self.nodes.append(start_node(0, self.options.tmpdir, args))\n+        self.nodes.append(start_node(1, self.options.tmpdir, args))\n+        self.nodes.append(start_node(2, self.options.tmpdir, args))\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[2], 1)\n         self.is_network_split = False\n \n-    def create_tx(self, from_txid, to_address, amount):\n+    def create_tx(self, from_txid, to_address, amount, which_node=0):\n         inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n         outputs = { to_address : amount }\n-        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signresult = self.nodes[0].signrawtransaction(rawtx)\n+        rawtx = self.nodes[which_node].createrawtransaction(inputs, outputs)\n+        signresult = self.nodes[which_node].signrawtransaction(rawtx)\n         assert_equal(signresult[\"complete\"], True)\n         return signresult[\"hex\"]\n \n     def run_test(self):\n         node0_address = self.nodes[0].getnewaddress()\n+        node1_address = self.nodes[1].getnewaddress()\n \n+        #---------------------------------------------------------------\n         # Spend block 1/2/3's coinbase transactions\n         # Mine a block.\n         # Create three more transactions, spending the spends\n@@ -66,6 +72,7 @@ def run_test(self):\n \n         # Use invalidateblock to re-org back; all transactions should\n         # end up unconfirmed and back in the mempool\n+        sync_blocks(self.nodes)\n         for node in self.nodes:\n             node.invalidateblock(blocks[0])\n \n@@ -83,6 +90,49 @@ def run_test(self):\n             tx = self.nodes[0].gettransaction(txid)\n             assert(tx[\"confirmations\"] > 0)\n \n+        #---------------------------------------------------------------\n+        # Test the code that makes sure both the sender and receiver\n+        # of transactions that get dropped from the mempool because\n+        # of a long re-org put them back in the mempool.\n+        #\n+        # Test scenario is:\n+        # node[0] sends node[1] a transaction in block N\n+        # node[1] sends it back in block N+1\n+        # ... 8 more block are mined, then a 10-deep re-org\n+        # is triggered (with node[3] doing all the mining).\n+        # Then node 1 resends its wallet transactions.\n+        # EXPECT: node[3] ends up with the both transactions in\n+        # its mempool.\n+        blocks = []\n+        blocks.extend(self.nodes[2].generate(1))\n+\n+        tx1_raw = self.create_tx(spends2_id[0], node1_address, 49.98, 0)\n+        tx1_id = self.nodes[2].sendrawtransaction(tx1_raw)\n+        blocks.extend(self.nodes[2].generate(1))\n+        sync_blocks(self.nodes)\n+\n+        tx2_raw = self.create_tx(tx1_id, node0_address, 49.97, 1)\n+        tx2_id = self.nodes[2].sendrawtransaction(tx2_raw)\n+\n+        blocks.extend(self.nodes[2].generate(8))\n+        sync_blocks(self.nodes)\n+\n+        # Both transactions should be confirmed:\n+        for txid in (tx1_id, tx2_id):\n+            tx = self.nodes[1].gettransaction(txid)\n+            assert(tx[\"confirmations\"] > 0)\n+\n+        # Re-org away from that chain:\n+        for node in self.nodes:\n+            node.invalidateblock(blocks[0])\n+        new_chain = self.nodes[2].generate(10)\n+        sync_blocks(self.nodes)\n+\n+        txset = set([tx1_id, tx2_id])\n+        assert_equal(set(self.nodes[0].resendwallettransactions()), txset)\n+        sync_mempools(self.nodes)\n+\n+        assert_equal(set(self.nodes[2].getrawmempool()), txset)\n \n if __name__ == '__main__':\n     MempoolCoinbaseTest().main()"
      },
      {
        "sha": "c14c47acfd303ef770bc065dd71c67841e486272",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 9,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05697af782284637442ada5348c8a855b2e594d7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05697af782284637442ada5348c8a855b2e594d7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=05697af782284637442ada5348c8a855b2e594d7",
        "patch": "@@ -1998,7 +1998,7 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n }\n \n /** Disconnect chainActive's tip. */\n-bool static DisconnectTip(CValidationState &state) {\n+bool static DisconnectTip(CValidationState &state, unsigned int nDisconnectDepth) {\n     CBlockIndex *pindexDelete = chainActive.Tip();\n     assert(pindexDelete);\n     mempool.check(pcoinsTip);\n@@ -2018,16 +2018,38 @@ bool static DisconnectTip(CValidationState &state) {\n     // Write the chain state to disk, if necessary.\n     if (!FlushStateToDisk(state, FLUSH_STATE_IF_NEEDED))\n         return false;\n-    // Resurrect mempool transactions from the disconnected block.\n-    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        // ignore validation errors in resurrected transactions\n-        list<CTransaction> removed;\n-        CValidationState stateDummy;\n-        if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL))\n+    list<CTransaction> removed;\n+    BOOST_FOREACH(const CTransaction &tx, block.vtx)\n+    {\n+        if (tx.IsCoinBase()) continue;\n+        if (nDisconnectDepth < MAX_REORG_TX_RESURRECT)\n+        {\n+            // Resurrect mempool transactions from the disconnected block,\n+            // ignoring validation errors in resurrected transactions\n+            CValidationState stateDummy;\n+            if (!AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL))\n+            {\n+                removed.push_back(tx);\n+                // To keep mempool consistent, must recursively remove any\n+                // transactions that depend on tx from the mempool if tx\n+                // can't be resurrected.\n+                mempool.remove(tx, removed, true);\n+            }\n+        }\n+        else\n+        {\n+            removed.push_back(tx);\n             mempool.remove(tx, removed, true);\n+        }\n     }\n     mempool.removeCoinbaseSpends(pcoinsTip, pindexDelete->nHeight);\n     mempool.check(pcoinsTip);\n+\n+    // Tell the networking code about any transactions we've forgotten,\n+    // so we'll pay attention if peers rebroadcast them to us.\n+    BOOST_FOREACH(const CTransaction& tx, removed)\n+        ForgetTransaction(tx);\n+\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);\n     // Let wallets know transactions went from 1-confirmed to\n@@ -2188,8 +2210,9 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n     const CBlockIndex *pindexFork = chainActive.FindFork(pindexMostWork);\n \n     // Disconnect active blocks which are no longer in the best chain.\n+    unsigned int nDisconnectDepth = 0;\n     while (chainActive.Tip() && chainActive.Tip() != pindexFork) {\n-        if (!DisconnectTip(state))\n+        if (!DisconnectTip(state, nDisconnectDepth++))\n             return false;\n     }\n \n@@ -2311,14 +2334,15 @@ bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex) {\n     setDirtyBlockIndex.insert(pindex);\n     setBlockIndexCandidates.erase(pindex);\n \n+    unsigned int nDisconnectDepth = 0;\n     while (chainActive.Contains(pindex)) {\n         CBlockIndex *pindexWalk = chainActive.Tip();\n         pindexWalk->nStatus |= BLOCK_FAILED_CHILD;\n         setDirtyBlockIndex.insert(pindexWalk);\n         setBlockIndexCandidates.erase(pindexWalk);\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state)) {\n+        if (!DisconnectTip(state, nDisconnectDepth++)) {\n             return false;\n         }\n     }"
      },
      {
        "sha": "8d85e4b5e8f28f52bbd0ef59c3cabdf2b28e4ebb",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05697af782284637442ada5348c8a855b2e594d7/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05697af782284637442ada5348c8a855b2e594d7/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=05697af782284637442ada5348c8a855b2e594d7",
        "patch": "@@ -86,6 +86,8 @@ static const unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;\n static const unsigned int DATABASE_WRITE_INTERVAL = 3600;\n /** Maximum length of reject messages. */\n static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n+/** When re-organizing away from a chain, put at most this many block's transactions in memory pool */\n+static const unsigned int MAX_REORG_TX_RESURRECT = 6;\n \n /** \"reject\" message codes */\n static const unsigned char REJECT_MALFORMED = 0x01;"
      },
      {
        "sha": "d1a624c97ce904313ef343460d68160561f65e8a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05697af782284637442ada5348c8a855b2e594d7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05697af782284637442ada5348c8a855b2e594d7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=05697af782284637442ada5348c8a855b2e594d7",
        "patch": "@@ -1359,6 +1359,8 @@ std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime)\n     BOOST_FOREACH(PAIRTYPE(const unsigned int, CWalletTx*)& item, mapSorted)\n     {\n         CWalletTx& wtx = *item.second;\n+        if (!mempool.exists(wtx.GetHash())) // If it dropped out of mempool, try to put it back in:\n+            wtx.AcceptToMemoryPool(false, true);\n         if (wtx.RelayWalletTransaction())\n             result.push_back(wtx.GetHash());\n     }\n@@ -2750,9 +2752,21 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectAbsurdFee)\n+bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectAbsurdFee) const\n {\n     CValidationState state;\n-    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, fRejectAbsurdFee);\n+    bool fMissingInputs;\n+    bool fResult = ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, &fMissingInputs, fRejectAbsurdFee);\n+    if (!fResult)\n+    {\n+        string strErr = strprintf(\"%s: transaction %s not accepted to mempool \",\n+                                  __func__, GetHash().ToString());\n+        if (fMissingInputs)\n+            strErr += \"(missing inputs) \";\n+        if (state.IsError() || state.IsInvalid())\n+            strErr += state.GetRejectReason();\n+        LogPrintf(\"%s\\n\", strErr);\n+    }\n+    return fResult;\n }\n "
      },
      {
        "sha": "01821a638ae70c55b09174ad6b2aa6da4af304e2",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05697af782284637442ada5348c8a855b2e594d7/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05697af782284637442ada5348c8a855b2e594d7/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=05697af782284637442ada5348c8a855b2e594d7",
        "patch": "@@ -198,7 +198,7 @@ class CMerkleTx : public CTransaction\n     int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n     bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n-    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n+    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true) const;\n };\n \n /** "
      }
    ]
  }
]