[
  {
    "sha": "20b812993ae584e4a4b12faa5c8751aa04dfde81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMGI4MTI5OTNhZTU4NGU0YTRiMTJmYWE1Yzg3NTFhYTA0ZGZkZTgx",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-27T22:04:43Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-11-06T17:12:54Z"
      },
      "message": "blockfilter: Refactor GCS params into struct.",
      "tree": {
        "sha": "a7fb1808f9b0b3b01dea63e1e1073d962710e9b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7fb1808f9b0b3b01dea63e1e1073d962710e9b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20b812993ae584e4a4b12faa5c8751aa04dfde81",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20b812993ae584e4a4b12faa5c8751aa04dfde81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/20b812993ae584e4a4b12faa5c8751aa04dfde81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20b812993ae584e4a4b12faa5c8751aa04dfde81/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6af27b81572b7b8e08ebcfe7eb533f40c66be4af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af27b81572b7b8e08ebcfe7eb533f40c66be4af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6af27b81572b7b8e08ebcfe7eb533f40c66be4af"
      }
    ],
    "stats": {
      "total": 107,
      "additions": 66,
      "deletions": 41
    },
    "files": [
      {
        "sha": "535ad35571b09dd2baf45eaf692949fc6920abca",
        "filename": "src/bench/gcs_filter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b812993ae584e4a4b12faa5c8751aa04dfde81/src/bench/gcs_filter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b812993ae584e4a4b12faa5c8751aa04dfde81/src/bench/gcs_filter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/gcs_filter.cpp?ref=20b812993ae584e4a4b12faa5c8751aa04dfde81",
        "patch": "@@ -17,7 +17,7 @@ static void ConstructGCSFilter(benchmark::State& state)\n \n     uint64_t siphash_k0 = 0;\n     while (state.KeepRunning()) {\n-        GCSFilter filter(siphash_k0, 0, 20, 1 << 20, elements);\n+        GCSFilter filter({siphash_k0, 0, 20, 1 << 20}, elements);\n \n         siphash_k0++;\n     }\n@@ -32,7 +32,7 @@ static void MatchGCSFilter(benchmark::State& state)\n         element[1] = static_cast<unsigned char>(i >> 8);\n         elements.insert(std::move(element));\n     }\n-    GCSFilter filter(0, 0, 20, 1 << 20, elements);\n+    GCSFilter filter({0, 0, 20, 1 << 20}, elements);\n \n     while (state.KeepRunning()) {\n         filter.Match(GCSFilter::Element());"
      },
      {
        "sha": "6bbf887b24d09f5bde02a38882803e9dc8c77d23",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 20,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b812993ae584e4a4b12faa5c8751aa04dfde81/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b812993ae584e4a4b12faa5c8751aa04dfde81/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=20b812993ae584e4a4b12faa5c8751aa04dfde81",
        "patch": "@@ -79,7 +79,7 @@ static uint64_t MapIntoRange(uint64_t x, uint64_t n)\n \n uint64_t GCSFilter::HashToRange(const Element& element) const\n {\n-    uint64_t hash = CSipHasher(m_siphash_k0, m_siphash_k1)\n+    uint64_t hash = CSipHasher(m_params.m_siphash_k0, m_params.m_siphash_k1)\n         .Write(element.data(), element.size())\n         .Finalize();\n     return MapIntoRange(hash, m_F);\n@@ -96,46 +96,42 @@ std::vector<uint64_t> GCSFilter::BuildHashedSet(const ElementSet& elements) cons\n     return hashed_elements;\n }\n \n-GCSFilter::GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P, uint32_t M)\n-    : m_siphash_k0(siphash_k0), m_siphash_k1(siphash_k1), m_P(P), m_M(M), m_N(0), m_F(0)\n+GCSFilter::GCSFilter(const Params& params)\n+    : m_params(params), m_N(0), m_F(0), m_encoded{0}\n {}\n \n-GCSFilter::GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P, uint32_t M,\n-                     std::vector<unsigned char> encoded_filter)\n-    : GCSFilter(siphash_k0, siphash_k1, P, M)\n+GCSFilter::GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter)\n+    : m_params(params), m_encoded(std::move(encoded_filter))\n {\n-    m_encoded = std::move(encoded_filter);\n-\n     VectorReader stream(GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0);\n \n     uint64_t N = ReadCompactSize(stream);\n     m_N = static_cast<uint32_t>(N);\n     if (m_N != N) {\n         throw std::ios_base::failure(\"N must be <2^32\");\n     }\n-    m_F = static_cast<uint64_t>(m_N) * static_cast<uint64_t>(m_M);\n+    m_F = static_cast<uint64_t>(m_N) * static_cast<uint64_t>(m_params.m_M);\n \n     // Verify that the encoded filter contains exactly N elements. If it has too much or too little\n     // data, a std::ios_base::failure exception will be raised.\n     BitStreamReader<VectorReader> bitreader(stream);\n     for (uint64_t i = 0; i < m_N; ++i) {\n-        GolombRiceDecode(bitreader, m_P);\n+        GolombRiceDecode(bitreader, m_params.m_P);\n     }\n     if (!stream.empty()) {\n         throw std::ios_base::failure(\"encoded_filter contains excess data\");\n     }\n }\n \n-GCSFilter::GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P, uint32_t M,\n-                     const ElementSet& elements)\n-    : GCSFilter(siphash_k0, siphash_k1, P, M)\n+GCSFilter::GCSFilter(const Params& params, const ElementSet& elements)\n+    : m_params(params)\n {\n     size_t N = elements.size();\n     m_N = static_cast<uint32_t>(N);\n     if (m_N != N) {\n         throw std::invalid_argument(\"N must be <2^32\");\n     }\n-    m_F = static_cast<uint64_t>(m_N) * static_cast<uint64_t>(m_M);\n+    m_F = static_cast<uint64_t>(m_N) * static_cast<uint64_t>(m_params.m_M);\n \n     CVectorWriter stream(GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0);\n \n@@ -150,7 +146,7 @@ GCSFilter::GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P, uint32\n     uint64_t last_value = 0;\n     for (uint64_t value : BuildHashedSet(elements)) {\n         uint64_t delta = value - last_value;\n-        GolombRiceEncode(bitwriter, m_P, delta);\n+        GolombRiceEncode(bitwriter, m_params.m_P, delta);\n         last_value = value;\n     }\n \n@@ -170,7 +166,7 @@ bool GCSFilter::MatchInternal(const uint64_t* element_hashes, size_t size) const\n     uint64_t value = 0;\n     size_t hashes_index = 0;\n     for (uint32_t i = 0; i < m_N; ++i) {\n-        uint64_t delta = GolombRiceDecode(bitreader, m_P);\n+        uint64_t delta = GolombRiceDecode(bitreader, m_params.m_P);\n         value += delta;\n \n         while (true) {\n@@ -227,17 +223,29 @@ static GCSFilter::ElementSet BasicFilterElements(const CBlock& block,\n \n BlockFilter::BlockFilter(BlockFilterType filter_type, const CBlock& block, const CBlockUndo& block_undo)\n     : m_filter_type(filter_type), m_block_hash(block.GetHash())\n+{\n+    GCSFilter::Params params;\n+    if (!BuildParams(params)) {\n+        throw std::invalid_argument(\"unknown filter_type\");\n+    }\n+    m_filter = GCSFilter(params, BasicFilterElements(block, block_undo));\n+}\n+\n+bool BlockFilter::BuildParams(GCSFilter::Params& params) const\n {\n     switch (m_filter_type) {\n     case BlockFilterType::BASIC:\n-        m_filter = GCSFilter(m_block_hash.GetUint64(0), m_block_hash.GetUint64(1),\n-                             BASIC_FILTER_P, BASIC_FILTER_M,\n-                             BasicFilterElements(block, block_undo));\n+        params.m_siphash_k0 = m_block_hash.GetUint64(0);\n+        params.m_siphash_k1 = m_block_hash.GetUint64(1);\n+        params.m_P = BASIC_FILTER_P;\n+        params.m_M = BASIC_FILTER_M;\n         break;\n \n     default:\n-        throw std::invalid_argument(\"unknown filter_type\");\n+        return false;\n     }\n+\n+    return true;\n }\n \n uint256 BlockFilter::GetHash() const"
      },
      {
        "sha": "e53f813ab3ac9bf74fd4eb0bf343b6449b3f8f4c",
        "filename": "src/blockfilter.h",
        "status": "modified",
        "additions": 22,
        "deletions": 18,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b812993ae584e4a4b12faa5c8751aa04dfde81/src/blockfilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b812993ae584e4a4b12faa5c8751aa04dfde81/src/blockfilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.h?ref=20b812993ae584e4a4b12faa5c8751aa04dfde81",
        "patch": "@@ -25,11 +25,20 @@ class GCSFilter\n     typedef std::vector<unsigned char> Element;\n     typedef std::unordered_set<Element, ByteVectorHash> ElementSet;\n \n+    struct Params\n+    {\n+        uint64_t m_siphash_k0;\n+        uint64_t m_siphash_k1;\n+        uint8_t m_P;  //!< Golomb-Rice coding parameter\n+        uint32_t m_M;  //!< Inverse false positive rate\n+\n+        Params(uint64_t siphash_k0 = 0, uint64_t siphash_k1 = 0, uint8_t P = 0, uint32_t M = 1)\n+            : m_siphash_k0(siphash_k0), m_siphash_k1(siphash_k1), m_P(P), m_M(M)\n+        {}\n+    };\n+\n private:\n-    uint64_t m_siphash_k0;\n-    uint64_t m_siphash_k1;\n-    uint8_t m_P;  //!< Golomb-Rice coding parameter\n-    uint32_t m_M;  //!< Inverse false positive rate\n+    Params m_params;\n     uint32_t m_N;  //!< Number of elements in the filter\n     uint64_t m_F;  //!< Range of element hashes, F = N * M\n     std::vector<unsigned char> m_encoded;\n@@ -45,19 +54,16 @@ class GCSFilter\n public:\n \n     /** Constructs an empty filter. */\n-    GCSFilter(uint64_t siphash_k0 = 0, uint64_t siphash_k1 = 0, uint8_t P = 0, uint32_t M = 0);\n+    explicit GCSFilter(const Params& params = Params());\n \n     /** Reconstructs an already-created filter from an encoding. */\n-    GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P, uint32_t M,\n-              std::vector<unsigned char> encoded_filter);\n+    GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter);\n \n     /** Builds a new filter from the params and set of elements. */\n-    GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P, uint32_t M,\n-              const ElementSet& elements);\n+    GCSFilter(const Params& params, const ElementSet& elements);\n \n-    uint8_t GetP() const { return m_P; }\n     uint32_t GetN() const { return m_N; }\n-    uint32_t GetM() const { return m_M; }\n+    const Params& GetParams() const { return m_params; }\n     const std::vector<unsigned char>& GetEncoded() const { return m_encoded; }\n \n     /**\n@@ -93,6 +99,8 @@ class BlockFilter\n     uint256 m_block_hash;\n     GCSFilter m_filter;\n \n+    bool BuildParams(GCSFilter::Params& params) const;\n+\n public:\n \n     // Construct a new BlockFilter of the specified type from a block.\n@@ -131,15 +139,11 @@ class BlockFilter\n \n         m_filter_type = static_cast<BlockFilterType>(filter_type);\n \n-        switch (m_filter_type) {\n-        case BlockFilterType::BASIC:\n-            m_filter = GCSFilter(m_block_hash.GetUint64(0), m_block_hash.GetUint64(1),\n-                                 BASIC_FILTER_P, BASIC_FILTER_M, std::move(encoded_filter));\n-            break;\n-\n-        default:\n+        GCSFilter::Params params;\n+        if (!BuildParams(params)) {\n             throw std::ios_base::failure(\"unknown filter_type\");\n         }\n+        m_filter = GCSFilter(params, std::move(encoded_filter));\n     }\n };\n "
      },
      {
        "sha": "69149fad4fc4b8d2943dd3033da6e37897d5d5ed",
        "filename": "src/test/blockfilter_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20b812993ae584e4a4b12faa5c8751aa04dfde81/src/test/blockfilter_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20b812993ae584e4a4b12faa5c8751aa04dfde81/src/test/blockfilter_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_tests.cpp?ref=20b812993ae584e4a4b12faa5c8751aa04dfde81",
        "patch": "@@ -29,7 +29,7 @@ BOOST_AUTO_TEST_CASE(gcsfilter_test)\n         excluded_elements.insert(std::move(element2));\n     }\n \n-    GCSFilter filter(0, 0, 10, 1 << 10, included_elements);\n+    GCSFilter filter({0, 0, 10, 1 << 10}, included_elements);\n     for (const auto& element : included_elements) {\n         BOOST_CHECK(filter.Match(element));\n \n@@ -39,6 +39,19 @@ BOOST_AUTO_TEST_CASE(gcsfilter_test)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(gcsfilter_default_constructor)\n+{\n+    GCSFilter filter;\n+    BOOST_CHECK_EQUAL(filter.GetN(), 0);\n+    BOOST_CHECK_EQUAL(filter.GetEncoded().size(), 1);\n+\n+    const GCSFilter::Params& params = filter.GetParams();\n+    BOOST_CHECK_EQUAL(params.m_siphash_k0, 0);\n+    BOOST_CHECK_EQUAL(params.m_siphash_k1, 0);\n+    BOOST_CHECK_EQUAL(params.m_P, 0);\n+    BOOST_CHECK_EQUAL(params.m_M, 1);\n+}\n+\n BOOST_AUTO_TEST_CASE(blockfilter_basic_test)\n {\n     CScript included_scripts[5], excluded_scripts[3];"
      }
    ]
  },
  {
    "sha": "c30620983d2e2c9aee6f52878ed14ba685e8683e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzA2MjA5ODNkMmUyYzlhZWU2ZjUyODc4ZWQxNGJhNjg1ZTg2ODNl",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-27T22:08:31Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-11-06T17:12:54Z"
      },
      "message": "blockfilter: Additional constructors for BlockFilter.",
      "tree": {
        "sha": "ef4dc2869290ff9b0f3902c710ba8d94fdeccc64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef4dc2869290ff9b0f3902c710ba8d94fdeccc64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c30620983d2e2c9aee6f52878ed14ba685e8683e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c30620983d2e2c9aee6f52878ed14ba685e8683e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c30620983d2e2c9aee6f52878ed14ba685e8683e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c30620983d2e2c9aee6f52878ed14ba685e8683e/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "20b812993ae584e4a4b12faa5c8751aa04dfde81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20b812993ae584e4a4b12faa5c8751aa04dfde81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20b812993ae584e4a4b12faa5c8751aa04dfde81"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 32,
      "deletions": 4
    },
    "files": [
      {
        "sha": "379d3ea170a099f0866876b41b0c9906b373670b",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c30620983d2e2c9aee6f52878ed14ba685e8683e/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c30620983d2e2c9aee6f52878ed14ba685e8683e/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=c30620983d2e2c9aee6f52878ed14ba685e8683e",
        "patch": "@@ -221,6 +221,17 @@ static GCSFilter::ElementSet BasicFilterElements(const CBlock& block,\n     return elements;\n }\n \n+BlockFilter::BlockFilter(BlockFilterType filter_type, const uint256& block_hash,\n+                         std::vector<unsigned char> filter)\n+    : m_filter_type(filter_type), m_block_hash(block_hash)\n+{\n+    GCSFilter::Params params;\n+    if (!BuildParams(params)) {\n+        throw std::invalid_argument(\"unknown filter_type\");\n+    }\n+    m_filter = GCSFilter(params, std::move(filter));\n+}\n+\n BlockFilter::BlockFilter(BlockFilterType filter_type, const CBlock& block, const CBlockUndo& block_undo)\n     : m_filter_type(filter_type), m_block_hash(block.GetHash())\n {"
      },
      {
        "sha": "4d1f51dd60e4e838f4b3235c7813f7faf5664311",
        "filename": "src/blockfilter.h",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c30620983d2e2c9aee6f52878ed14ba685e8683e/src/blockfilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c30620983d2e2c9aee6f52878ed14ba685e8683e/src/blockfilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.h?ref=c30620983d2e2c9aee6f52878ed14ba685e8683e",
        "patch": "@@ -103,22 +103,28 @@ class BlockFilter\n \n public:\n \n-    // Construct a new BlockFilter of the specified type from a block.\n+    BlockFilter() = default;\n+\n+    //! Reconstruct a BlockFilter from parts.\n+    BlockFilter(BlockFilterType filter_type, const uint256& block_hash,\n+                std::vector<unsigned char> filter);\n+\n+    //! Construct a new BlockFilter of the specified type from a block.\n     BlockFilter(BlockFilterType filter_type, const CBlock& block, const CBlockUndo& block_undo);\n \n     BlockFilterType GetFilterType() const { return m_filter_type; }\n-\n+    const uint256& GetBlockHash() const { return m_block_hash; }\n     const GCSFilter& GetFilter() const { return m_filter; }\n \n     const std::vector<unsigned char>& GetEncodedFilter() const\n     {\n         return m_filter.GetEncoded();\n     }\n \n-    // Compute the filter hash.\n+    //! Compute the filter hash.\n     uint256 GetHash() const;\n \n-    // Compute the filter header given the previous one.\n+    //! Compute the filter header given the previous one.\n     uint256 ComputeHeader(const uint256& prev_header) const;\n \n     template <typename Stream>"
      },
      {
        "sha": "625362f446044b7f14731b6b2ebbf63d2a0bc7e4",
        "filename": "src/test/blockfilter_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c30620983d2e2c9aee6f52878ed14ba685e8683e/src/test/blockfilter_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c30620983d2e2c9aee6f52878ed14ba685e8683e/src/test/blockfilter_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_tests.cpp?ref=c30620983d2e2c9aee6f52878ed14ba685e8683e",
        "patch": "@@ -101,6 +101,17 @@ BOOST_AUTO_TEST_CASE(blockfilter_basic_test)\n     for (const CScript& script : excluded_scripts) {\n         BOOST_CHECK(!filter.Match(GCSFilter::Element(script.begin(), script.end())));\n     }\n+\n+    // Test serialization/unserialization.\n+    BlockFilter block_filter2;\n+\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << block_filter;\n+    stream >> block_filter2;\n+\n+    BOOST_CHECK_EQUAL(block_filter.GetFilterType(), block_filter2.GetFilterType());\n+    BOOST_CHECK_EQUAL(block_filter.GetBlockHash(), block_filter2.GetBlockHash());\n+    BOOST_CHECK(block_filter.GetEncodedFilter() == block_filter2.GetEncodedFilter());\n }\n \n BOOST_AUTO_TEST_CASE(blockfilters_json_test)"
      }
    ]
  },
  {
    "sha": "e4ed8ce2c848695855bd7fa4d66765d2eac6d255",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGVkOGNlMmM4NDg2OTU4NTViZDdmYTRkNjY3NjVkMmVhYzZkMjU1",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-12-22T05:53:29Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-12-22T05:53:29Z"
      },
      "message": "blockfilter: Remove default clause in switch statement.\n\nNow the compiler will warn if not all enums are handled in the\nswitch.",
      "tree": {
        "sha": "b80c6399729d8b38818d0b0863888068a2584e9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b80c6399729d8b38818d0b0863888068a2584e9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4ed8ce2c848695855bd7fa4d66765d2eac6d255",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4ed8ce2c848695855bd7fa4d66765d2eac6d255",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4ed8ce2c848695855bd7fa4d66765d2eac6d255",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4ed8ce2c848695855bd7fa4d66765d2eac6d255/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c30620983d2e2c9aee6f52878ed14ba685e8683e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c30620983d2e2c9aee6f52878ed14ba685e8683e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c30620983d2e2c9aee6f52878ed14ba685e8683e"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 2,
      "deletions": 5
    },
    "files": [
      {
        "sha": "bcf24047ffd4ccbb3e0c900c32460aeafe93ed69",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4ed8ce2c848695855bd7fa4d66765d2eac6d255/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4ed8ce2c848695855bd7fa4d66765d2eac6d255/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=e4ed8ce2c848695855bd7fa4d66765d2eac6d255",
        "patch": "@@ -250,13 +250,10 @@ bool BlockFilter::BuildParams(GCSFilter::Params& params) const\n         params.m_siphash_k1 = m_block_hash.GetUint64(1);\n         params.m_P = BASIC_FILTER_P;\n         params.m_M = BASIC_FILTER_M;\n-        break;\n-\n-    default:\n-        return false;\n+        return true;\n     }\n \n-    return true;\n+    return false;\n }\n \n uint256 BlockFilter::GetHash() const"
      }
    ]
  }
]